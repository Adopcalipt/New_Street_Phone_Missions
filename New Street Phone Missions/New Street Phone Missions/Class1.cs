using System;
using System.Collections.Generic;
using System.Linq;
using System.Drawing;
using System.IO;
using System.Xml;
using System.Windows.Forms;
using System.Xml.Serialization;
using NativeUI;
using iFruitAddon2;
using GTA;
using GTA.Native;
using GTA.Math;

namespace New_Street_Phone_Missions
{
    public class Main : Script
    {
        bool bfirstTime = true;
        bool bTruckin = true;
        bool bGetaway = true;
        bool bPackages = true;
        bool bConvicts = true;
        bool bFUber = true;
        bool bPilot = true;
        bool bDrunkMove = false;
        bool bAmulance = true;
        bool bFollow = true;
        bool bLSFD = true;
        bool bJohnny = true;
        bool bRaceist = true;
        bool bBBBomb = true;
        bool bGruppe6 = true;
        bool bAssassination = true;
        bool bSailor = true;
        bool bImportantEx = true;
        bool bDebtCollect = true;
        bool bMCBusiness = true;
        bool bBayLift = true;
        bool bSharks = true;

        bool bPlayingOldMissions = false;
        bool bPlayingNewMissions = false;
        bool bShowRoute = true;
        bool bSubtitles = true;
        bool bYachtOwner = false;
        bool bLoadUpOnYacht = false;
        bool bYachtStart = false;
        bool bPhoneCone = true;
        bool bEnemyStrength = true;
        bool bFastTraveltoStart = false;
        bool bBulderOnly = false;
        bool bPhoneAudio = true;
        bool bPhoneAnim = true;

        bool bTrainM = false;
        bool bReFire = false;
        bool bASleap = false;
        bool bDrinks = false;
        bool bTestRun = false;
        bool bImports = false;
        bool bPianoSt = false;
        bool bFloater = false;
        bool bWetness = false;
        bool bDrinkig = false;
        bool bWeapSwap = false;
        bool bMenuOpen = false;
        bool bScubaGOn = false;
        bool bRingRing = false;
        bool bOnTheJob = false;
        bool bPacBouns = false;
        bool bGOURANGA = false;
        bool bNotPause = false;
        bool bYachIsOn = false;
        bool bSoloRace = false;
        bool bShowerON = false;
        bool bSwimSuit = false;
        bool bOldYacht = false;
        bool bDontPull = false;
        bool bYachPass = false;
        bool bMeeddicc = false;
        bool bCovidInf = false;
        bool bWepMenuX = false;
        bool bBuildMode = false;
        bool bWeaponMan = false;
        bool bFubarRide = false;
        bool bCutingCul = false;
        bool bIsVehPers = false;
        bool bAmberAntz = false;
        bool bPedCanFly = false;
        bool bJobLoaded = false;
        bool bMoreFubar = false;
        bool bPlayerAtt = false;
        bool bFooWayPot = false;
        bool bOnCayoLand = false;
        bool bYachtParty = false;
        bool bIFrutiyAdd = false;
        bool bYachtBypas = false;
        bool bOptionsMen = false;
        bool bBacktoBase = false;
        bool bYachtLoaded = false;
        bool bOnCorner_01 = false;
        bool bOnCorner_02 = false;
        bool bOnCorner_03 = false;
        bool bDisplayUiBar = false;
        bool bFuToMishTarg = false;
        bool bBankTransfer = false;
        bool bLookingForPB = false;
        bool bPickUpHangUp = false;
        bool bDlCVehStartTest = true;
        bool bControlerSelect = false;
        bool bOnlineStuffLoaded = false;

        int iMyBed = 0;
        int iScale = 0;
        int iDoors = 0;
        int iAmHash = 0;
        int iFubard = 0;
        int iFuFees = 0;
        int iJobType = 0;
        int iFuClock = 0;
        int iTestKit = 0;
        int iFubCarzz = 0;
        int iTracking = 0;
        int iMobStarz = 0;
        int iWait4Sec = 0;
        int iTotalLap = 0;
        int iJacuzSit = 0;
        int iPhonedID = 0;
        int iCanDrive = 0;
        int iCoinBats = 0;
        int iAngerTax = 0;
        int iLogCount = 0;
        int iKeepDance = 0;
        int iFaster_01 = 0;
        int iFaster_02 = 0;
        int iFaster_03 = 0;
        int iOwnaYacht = 0;
        int iCashBouns = 0;
        int iLookForPB = 0;
        int iLocationX = 0;
        int iPlayGroup = 0;
        int iYachtFast = 0;
        int iGotPegsus = 0;
        int iBuildMode = 0;
        int iWarpLoops = 0;
        int iBuildingUp = 0;
        int iYachtDrink = 0;
        int iYachtTimer = 0;
        int iGotYourVan = 0;
        int iParcelCost = 0;
        int iCurrentLap = 1;
        int iPhoneDelay = 0;
        int iCashReward = 0;
        int iCrash4Cash = 0;
        int iMissionSeq = 0;
        int iJustBribed = 0;
        int iWantedBribe = 0;
        int iAmbushCount = 0;
        int iRepMisssion = 0;
        int iRacingStyle = 0;
        int iFindingTime = 0;
        int iFindingStuff = 0;
        int iRollXMLCHeck = 0;
        int iPlayerChoise = 0;
        int iMissionVar_01 = 0;
        int iMissionVar_02 = 0;
        int iMissionVar_03 = 0;
        int iMissionVar_04 = 0;

        int iNSPMBank = 1000;
        int iNSPMCLowRisk = 100;
        int iNSPMCHighRisk = 100;
        int iYachtPrice = 6000000;
        int iVersion = 0;
        int iSPDelayTime = 5000;
        int iProcessForYacht = System.Environment.ProcessorCount * 15;
        int iProcessForPegs = System.Environment.ProcessorCount * 17;
        int iPegsSafeHeli = System.Environment.ProcessorCount * 7;
        int iPegsWarHeli = System.Environment.ProcessorCount * 4;
        int iPegsSafePlane = System.Environment.ProcessorCount * 13;
        int iPegsWarPlane = System.Environment.ProcessorCount * 9;
        int iPegsboats = System.Environment.ProcessorCount * 3;
        int iPegsimortas = System.Environment.ProcessorCount * 11;
        int iMeddicc = System.Environment.ProcessorCount * 18;
        int iMeddicTest = 0;
        int iPegsSafeHeliTest = 0;
        int iPegsWarHeliTest = 0;
        int iPegsSafePlaneTest = 0;
        int iPegsWarPlaneTest = 0;
        int iPegsboatsTest = 0;
        int iPegsimortasTest = 0;

        int PlayerGroups = Game.Player.Character.RelationshipGroup;
        int GroupANPCs = World.AddRelationshipGroup("GroupA");
        int GroupBNPCs = World.AddRelationshipGroup("GroupB");
        int FriendlyNPCs = World.AddRelationshipGroup("FrendNPCs");
        int AttackingNPCs = World.AddRelationshipGroup("AttackNPCs");
        int FollowingNPCs = World.AddRelationshipGroup("FollowerNPCs");

        float fMission_01 = 0.00f;
        float fMission_02 = 0.00f;
        float fGetDir = 0.00f;
        float fphdirect = 0.00f;
        float fKeepMoving = 0.00f;
        float fMaxSpeed = 35.00f;
        float fCorSize = 5.00f;
        float fCoronaHight = 0.00f;
        float fCoronaDirHt = 0.00f;
        float fVehicleDamage = 0.00f;
        float fAiCoronaListSize = 10.00f;

        string sMissionVar_01 = "empty";
        string sMissionVar_02 = "empty";
        string sCurrentCharXML = "";
        string sVersion = "2.71";
        string sVehType = "Adder";
        string sAppCustomInt = "";
        string sHospital = "";
        string sBeeLogs = "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/BeeLog.txt";
        string sNEW_SPM_XML = "" + Directory.GetCurrentDirectory() + "/Scripts/NEW_SPM_XML.Xml";
        string sOLD_SPM_XML = "" + Directory.GetCurrentDirectory() + "/Scripts/OLD_SPM_XML.Xml";
        string sNSPMLanguage = "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Lingo/NSPMLanguage.Xml";
        string sNSPMAddonCarz = "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/NSPMAddonCarz.Xml";
        string sNSPMBlips = "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Blips.Xml";
        string sNSPMSet = "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/NSPMSet.Xml";
        string sNSPMRandNum = "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/NSPMRandNum.Xml";

        System.Media.SoundPlayer Hare = new System.Media.SoundPlayer("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Hare_Krishna_Chant.wav");
        System.Media.SoundPlayer DipDar = new System.Media.SoundPlayer("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/dipdar.wav");
        System.Media.SoundPlayer Chatter = new System.Media.SoundPlayer("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/PhoneTalk.wav");

        Vector3 vFuFees = Vector3.Zero;
        Vector3 vFuDest = Vector3.Zero;
        Vector3 vFuMiss = Vector3.Zero;
        Vector3 vGetaway = Vector3.Zero;
        Vector3 vTarget_01 = Vector3.Zero;
        Vector3 vTarget_02 = Vector3.Zero;
        Vector3 vTarget_03 = Vector3.Zero;
        Vector3 vTarget_04 = Vector3.Zero;
        Vector3 vTarget_05 = Vector3.Zero;
        Vector3 vTarget_06 = Vector3.Zero;
        Vector3 vPhoneCorona = Vector3.Zero;
        Vector3 vYachtBedPos = Vector3.Zero;
        Vector3 vYachtBedRot = Vector3.Zero;
        Vector3 vYachtBlip = new Vector3(-2062.635f, -1025.35f, 14.90f);

        Ped Npc_01 = null;
        Ped Npc_02 = null;
        Ped Npc_03 = null;
        Ped Npc_04 = null;
        Ped Npc_05 = null;
        Ped Npc_06 = null;
        Ped Npc_07 = null;
        Ped FUbarDrv = null;

        Blip BackUpT = null;
        Blip PhoneBlip = null;
        Blip Target_01 = null;
        Blip Target_02 = null;
        Blip YachtBlip = null;

        Prop ThisPhone = null;
        Prop Prop_01 = null;
        Prop Prop_02 = null;
        Prop Prop_03 = null;

        Pickup Pick_01 = null;

        Camera cCams = null;

        Vehicle Peggs = null;
        Vehicle DLCTestVeh = null;
        Vehicle FubarCarX = null;
        Vehicle VehTrackin_01 = null;
        Vehicle VehTrackin_02 = null;
        Vehicle VehTrackin_03 = null;
        Vehicle VehTrackin_04 = null;
        Vehicle VehTrackin_05 = null;

        MarkerType MkStart = MarkerType.Number5;

        List<int> FindaInt = new List<int>();
        List<bool> FindaBool = new List<bool>();
        string FindaString = "";

        List<int> iBliper = new List<int>();
        List<int> iList_01 = new List<int>();
        List<int> iList_02 = new List<int>();
        List<int> iTime_01 = new List<int>();
        List<int> iFireList = new List<int>();
        List<int> iCoronaList = new List<int>();
        List<int> iDeliverList = new List<int>();
        List<int> iTargetList = new List<int>();
        List<int> iMissionList = new List<int>();
        List<int> iImpExpList = new List<int>();
        List<int> iAssMissionList = new List<int>();

        List<bool> BeOff = new List<bool>();
        List<bool> BeOnOff = new List<bool>();
        List<bool> LessRandBool = new List<bool>();

        List<float> fList_01 = new List<float>();
        List<float> fList_02 = new List<float>();
        List<float> fYachtDoorList = new List<float>();

        List<string> sAltLang = new List<string>();
        List<string> sList_01 = new List<string>();
        List<string> sList_02 = new List<string>();
        List<string> sDoorList = new List<string>();
        List<string> sGateList = new List<string>();
        List<string> sDestList = new List<string>();
        List<string> sWardrobe = new List<string>();
        List<string> sDebuggler = new List<string>();
        List<string> sPhoneType = new List<string>();
        List<string> sImpExpVeh = new List<string>();
        List<string> sTrainerOnly = new List<string>();
        List<string> sCustomCarz = new List<string>();
        List<string> sCustomPlanez = new List<string>();
        List<string> sCustomBoatsz = new List<string>();
        List<string> sCustomChopperz = new List<string>();

        List<Vector3> vPhoneBoxList = new List<Vector3>();
        List<Vector3> vOldPhoneBoxList = new List<Vector3>();
        List<Vector3> vYachtTrigList = new List<Vector3>();
        List<Vector3> vYachtDoorList = new List<Vector3>();
        List<Vector3> VectorList_01 = new List<Vector3>();
        List<Vector3> VectorList_02 = new List<Vector3>();
        List<Vector3> VectorList_03 = new List<Vector3>();
        List<Vector3> VectorList_04 = new List<Vector3>();

        List<Ped> PedList_01 = new List<Ped>();
        List<Ped> PedList_02 = new List<Ped>();
        List<Ped> PedList_03 = new List<Ped>();
        List<Ped> MishPed = new List<Ped>();

        List<Ped> DancingPed = new List<Ped>();

        List<Prop> PropList_01 = new List<Prop>();
        List<Prop> CayoPhones = new List<Prop>();
        List<Prop> YachtSit = new List<Prop>();
        List<Prop> YachtSleap = new List<Prop>();
        List<Prop> YachtSlCam = new List<Prop>();

        List<Blip> BlipList_01 = new List<Blip>();

        List<Vehicle> VehicleList_01 = new List<Vehicle>();
        List<Vehicle> MishVic = new List<Vehicle>();

        List<WeaponHash> WeaponList_01 = new List<WeaponHash>();

        List<MyMk2Weaps> Mk2WeapsMain = new List<MyMk2Weaps>();

        MissionBuilder MyMissions = new MissionBuilder();

        TimerBarPool VTBTimerPool = new TimerBarPool();

        TextTimerBar ttTextBar_01 = new TextTimerBar("", "");
        TextTimerBar ttTextBar_02 = new TextTimerBar("", "");
        TextTimerBar ttTextBar_03 = new TextTimerBar("", "");
        TextTimerBar ttTextBar_04 = new TextTimerBar("", "");

        TextTimerBar FuBar = new TextTimerBar("", "");

        BarTimerBar BtSlideBar = new BarTimerBar("");

        private CustomiFruit iFruit = new CustomiFruit();

        private MenuPool YtmenuPool;

        public Main()
        {
            if (bfirstTime)
            {
                if (File.Exists(sBeeLogs))
                    File.Delete(sBeeLogs);
                Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, false);
                bfirstTime = false;
                OnLoadup();
            }

            Tick += OnTick;
            //KeyDown += OnKeyDown;
            Interval = 1;
        }
        private void BeeLog(string sLogs, TextWriter tEx)
        {
            iLogCount += 1;
            if (iLogCount > 25000)
            {
                iLogCount = 0;
                File.Delete(sBeeLogs);
                for (int i = 0; i < sDebuggler.Count; i++)
                    tEx.WriteLine(sDebuggler[i]);
                tEx.WriteLine($"{DateTime.Now.ToLongTimeString()} {DateTime.Now.ToLongDateString()} {"--" + sLogs}");
                sDebuggler.Clear();
            }
            else if (iLogCount > 24950)
            {
                tEx.WriteLine($"{DateTime.Now.ToLongTimeString()} {DateTime.Now.ToLongDateString()} {"--" + sLogs}");
                sDebuggler.Add($"{DateTime.Now.ToLongTimeString()} {DateTime.Now.ToLongDateString()} {"--" + sLogs}");
            }
            else
                tEx.WriteLine($"{DateTime.Now.ToLongTimeString()} {DateTime.Now.ToLongDateString()} {"--" + sLogs}");
        }
        private void OldBlipCleaner()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("OldBlipCleaner", tEx);

            ReadBlips();

            for (int i = 0; i < iBliper.Count; i++)
                SafeCleaning(new Blip(iBliper[i]));

            iBliper.Clear();
        }
        private void SafeCleaning(Blip ThisBlip)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("SafeCleaning", tEx);

            unsafe
            {
                if (ThisBlip.Exists())
                    ThisBlip.Remove();
            }
        }
        private void CleanUpCheckPoints()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("CleanUpCheckPoints", tEx);
            for (int i = 0; i < iCoronaList.Count; i++)
                Function.Call(Hash.DELETE_CHECKPOINT, iCoronaList[i]);

            iCoronaList.Clear();
        }
        private void CleanUpVehicles()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("CleanUpVehicles", tEx);

            for (int i = 0; i < VehicleList_01.Count; i++)
            {
                if (VehicleList_01[i].Exists())
                {
                    if (VehicleList_01[i].CurrentBlip.Exists())
                    {
                        VehicleList_01[i].CurrentBlip.Remove();
                    }
                    VehicleList_01[i].IsPersistent = false;
                    VehicleList_01[i].MarkAsNoLongerNeeded();
                }
            }
            VehicleList_01.Clear();
        }
        private void CleanUpFire()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("CleanUpFire", tEx);

            for (int i = 0; i < iFireList.Count; i++)
                Function.Call(Hash.REMOVE_SCRIPT_FIRE, iFireList[i]);
            iFireList.Clear();
        }
        private void CleanFakeBlips()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("CleanFakeBlips", tEx);

            for (int i = 0; i < BlipList_01.Count; i++)
            {
                iBliper.Remove(BlipList_01[i].Handle);
                BlipList_01[i].Remove();
            }
            BlipList_01.Clear();
            WriteBlips();
        }
        private void CleanTriggers()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("CleanTriggers", tEx);

            for (int i = 0; i < BeOff.Count; i++)
                BeOff[i] = true;
        }
        private void CleanCams()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("CleanCams", tEx);

            if (cCams != null)
            {
                Function.Call(Hash.RENDER_SCRIPT_CAMS, 0, 1, 0, 0, 0);
                cCams.Destroy();
                Function.Call(Hash.DISPLAY_RADAR, true);
                cCams = null;
            }
        }
        private void RemoveTargets()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("RemoveTargets", tEx);

            if (Target_01 != null)
            {
                BlipCleaning(Target_01);
                Target_01 = null;
            }
            if (Target_02 != null)
            {
                BlipCleaning(Target_02);
                Target_02 = null;
            }
            if (BackUpT != null)
            {
                BlipCleaning(BackUpT);
                BackUpT = null;
            }

            for (int i = 0; i < iTargetList.Count; i++)
                Function.Call(Hash.DELETE_CHECKPOINT, iTargetList[i]);

            iTargetList.Clear();
        }
        private void BlipCleaning(Blip BMe)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("BlipCleaning", tEx);

            iBliper.Remove(BMe.Handle);
            WriteBlips();
            BMe.Remove();
        }
        private void CleanUpProps()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("CleanUpProps", tEx);

            for (int i = 0; i < PropList_01.Count; i++)
            {
                if (PullProp(PropList_01, i))
                    PropList_01[i].MarkAsNoLongerNeeded();
            }
            PropList_01.Clear();
        }
        private void CleanUpPeds()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("CleanUpPeds", tEx);

            for (int i = 0; i < PedList_03.Count; i++)
            {
                if (PedList_03[i].CurrentBlip.Exists())
                    PedList_03[i].CurrentBlip.Remove();

                PedList_03[i].MarkAsNoLongerNeeded();
            }
            for (int i = 0; i < PedList_01.Count; i++)
            {
                if (PedList_01[i].CurrentBlip.Exists())
                    PedList_01[i].CurrentBlip.Remove();

                PedList_01[i].MarkAsNoLongerNeeded();
            }
            for (int i = 0; i < PedList_02.Count; i++)
            {
                if (PedList_02[i].CurrentBlip.Exists())
                    PedList_02[i].CurrentBlip.Remove();

                PedList_02[i].MarkAsNoLongerNeeded();
            }
            PedList_03.Clear();
            PedList_01.Clear();
            PedList_02.Clear();
        }
        private void CleanPedBlips(int iPed)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("CleanPedBlips, iPed == " + iPed, tEx);

            iTracking = Game.GameTime + 1000;

            if (iPed == 1)
            {
                for (int i = 0; i < PedList_01.Count; i++)
                {
                    if (PedListExists(PedList_01, i))
                    {
                        if (PedList_01[i].CurrentBlip.Exists())
                            PedList_01[i].CurrentBlip.Remove();
                    }
                }
            }
            else if (iPed == 2)
            {
                for (int i = 0; i < PedList_02.Count; i++)
                {
                    if (PedListExists(PedList_02, i))
                    {
                        if (PedList_02[i].CurrentBlip.Exists())
                            PedList_02[i].CurrentBlip.Remove();
                    }
                }
            }
            else
            {
                for (int i = 0; i < PedList_03.Count; i++)
                {
                    if (PedListExists(PedList_03, i))
                    {
                        if (PedList_03[i].CurrentBlip.Exists())
                            PedList_03[i].CurrentBlip.Remove();
                    }
                }
            }
        }
        private void TheUltimateTracker(bool bVeh)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("TheUltimateTracker, bVeh == " + bVeh, tEx);

            iTracking = Game.GameTime + 1000;

            if (bVeh)
            {
                for (int i = 0; i < VehicleList_01.Count; i++)
                {
                    if (VehicleList_01[i].CurrentBlip.Exists())
                    {
                        if (VehicleList_01[i].CurrentBlip.Color == BlipColor.Red)
                        {
                            if (VehicleList_01[i].IsSeatFree(VehicleSeat.Driver) || VehicleList_01[i].IsDead)
                                VehicleList_01[i].CurrentBlip.Remove();
                        }
                    }
                }
            }

            for (int i = 0; i < PedList_01.Count; i++)
            {
                if (PedList_01[i].IsDead)
                {
                    if (PedList_01[i].CurrentBlip.Exists())
                        PedList_01[i].CurrentBlip.Remove();
                    PedList_01[i].MarkAsNoLongerNeeded();
                    PedList_01.RemoveAt(i);
                }
                else if (bVeh)
                {
                    if (PedList_01[i].IsInVehicle())
                    {
                        if (PedList_01[i].CurrentBlip.Exists())
                            PedList_01[i].CurrentBlip.Remove();
                    }
                    else
                    {
                        if (!PedList_01[i].CurrentBlip.Exists())
                            PedBlimp(PedList_01[i], BlipColor.Red3, 0.75f, false, false);
                    }

                }
            }

            for (int i = 0; i < PedList_02.Count; i++)
            {
                if (PedList_02[i].IsDead)
                {
                    if (PedList_02[i].CurrentBlip.Exists())
                        PedList_02[i].CurrentBlip.Remove();
                    PedList_02[i].MarkAsNoLongerNeeded();
                    PedList_02.RemoveAt(i);
                }
                else if (bVeh)
                {
                    if (PedList_02[i].IsInVehicle())
                    {
                        if (PedList_02[i].CurrentBlip.Exists())
                            PedList_02[i].CurrentBlip.Remove();
                    }
                    else
                    {
                        if (!PedList_02[i].CurrentBlip.Exists())
                            PedBlimp(PedList_02[i], BlipColor.Red3, 0.75f, false, false);
                    }
                }
            }

            for (int i = 0; i < PedList_03.Count; i++)
            {
                if (PedList_03[i].IsDead)
                {
                    if (PedList_03[i].CurrentBlip.Exists())
                        PedList_03[i].CurrentBlip.Remove();
                    PedList_03[i].MarkAsNoLongerNeeded();
                    PedList_03.RemoveAt(i);
                }
                else if (bVeh)
                {
                    if (PedList_03[i].IsInVehicle())
                    {
                        if (PedList_03[i].CurrentBlip.Exists())
                            PedList_03[i].CurrentBlip.Remove();
                    }
                    else
                    {
                        if (!PedList_03[i].CurrentBlip.Exists())
                            PedBlimp(PedList_03[i], BlipColor.Red3, 0.75f, false, false);
                    }
                }
            }
        }
        private void PlayerPlays()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("PlayerPlays", tEx);

            Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, false);
            bNotPause = true;
            UI.ShowSubtitle("", 1);

            if (iJobType == 1)
            {
                bJobLoaded = true;
                Truckin();
            }
            else if (iJobType == 2)
            {
                bJobLoaded = true;
                GetAwayDriver();
            }
            else if (iJobType == 3)
            {
                bJobLoaded = true;
                Packages();
            }
            else if (iJobType == 4)
            {
                bJobLoaded = true;
                Convicts();
            }
            else if (iJobType == 5)
            {
                bJobLoaded = true;
                FUber();
            }
            else if (iJobType == 6)
            {
                bJobLoaded = true;
                Pilot();
            }
            else if (iJobType == 7)
            {
                bJobLoaded = true;
                bAmberAntz = false;
                Ambulance();
            }
            else if (iJobType == 8)
            {
                bJobLoaded = true;
                Follow();
            }
            else if (iJobType == 9)
            {
                bJobLoaded = true;
                bReFire = false;
                FireDept();
            }
            else if (iJobType == 10)
            {
                bJobLoaded = true;
                HeresJohnny();
            }
            else if (iJobType == 11)
            {
                bJobLoaded = true;
                Raceist();
            }
            else if (iJobType == 12)
            {
                bJobLoaded = true;
                BBBomb();
            }
            else if (iJobType == 13)
            {
                bJobLoaded = true;
                HitMan();
            }
            else if (iJobType == 14)
            {
                bJobLoaded = true;
                MrMOneyMAn();
            }
            else if (iJobType == 15)
            {
                bJobLoaded = true;
                SeaBattles();
            }
            else if (iJobType == 16)
            {
                bJobLoaded = true;
                ImportsExpo();
            }
            else if (iJobType == 17)
            {
                bJobLoaded = true;
                DebtCollect();
            }
            else if (iJobType == 18)
            {
                bJobLoaded = true;
                BikerRaids();
            }
            else if (iJobType == 19)
            {
                bJobLoaded = true;
                CargoCollect();
            }
            else if (iJobType == 20)
            {
                bJobLoaded = true;
                DeepDown();
            }
            else
            {
                bJobLoaded = true;
                TheCayoMissions();
            }

            if (bEnemyStrength)
                Function.Call(Hash.SET_AI_WEAPON_DAMAGE_MODIFIER, 0.10f);

            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("iJobType == " + iJobType + ", iLocationX == " + iLocationX, tEx);
        }
        private void XMLSettings()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("XMLSettings", tEx);

            XmlWriterSettings NSPMsettings = new XmlWriterSettings();
            NSPMsettings.Indent = true;
            NSPMsettings.IndentChars = "\t";
            NSPMsettings.NewLineOnAttributes = true;
            XmlWriter SaveFile = XmlWriter.Create(sNEW_SPM_XML, NSPMsettings);

            SaveFile.WriteStartElement("Settings");

            SaveFile.WriteStartAttribute("bPlayingNewMissions");
            SaveFile.WriteValue(bPlayingNewMissions);
            SaveFile.WriteEndAttribute();

            SaveFile.WriteStartAttribute("bLoadUpOnYacht");
            SaveFile.WriteValue(bLoadUpOnYacht);
            SaveFile.WriteEndAttribute();

            SaveFile.WriteEndElement();
            SaveFile.Close();
        }
        private void GoFetchSettings()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("GoFetchSettings", tEx);

            string spants = "";
            if (File.Exists(sNEW_SPM_XML))
            {
                XmlTextReader SaveFile = new XmlTextReader(sNEW_SPM_XML);
                while (SaveFile.Read())
                {
                    spants = SaveFile.GetAttribute("bLoadUpOnYacht");
                    if (spants == "true")
                        bLoadUpOnYacht = true;
                    else
                        bLoadUpOnYacht = false;
                }
                SaveFile.Close();
            }
            else
                XMLSettings();
        }
        private void LessRandomMain()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("LessRandomMain", tEx);

            if (bTruckin)
                iMissionList.Add(1);
            if (bGetaway)
                iMissionList.Add(2);
            if (bPackages)
                iMissionList.Add(3);
            if (bConvicts)
                iMissionList.Add(4);
            if (bFUber)
                iMissionList.Add(5);
            if (bPilot)
                iMissionList.Add(6);
            if (bAmulance)
                iMissionList.Add(7);
            if (bFollow)
                iMissionList.Add(8);
            if (bLSFD)
                iMissionList.Add(9);
            if (bJohnny)
                iMissionList.Add(10);
            if (bRaceist)
                iMissionList.Add(11);
            if (bBBBomb)
                iMissionList.Add(12);
            if (bAssassination)
                iMissionList.Add(13);
            if (bGruppe6)
                iMissionList.Add(14);
            if (bSailor)
                iMissionList.Add(15);
            if (bImportantEx)
                iMissionList.Add(16);
            if (bDebtCollect)
                iMissionList.Add(17);
            if (bMCBusiness)
                iMissionList.Add(18);
            if (bBayLift)
                iMissionList.Add(19);
            if (bSharks)
                iMissionList.Add(20);

            if (iMissionList.Count == 0)
            {
                iJobType = 0;
                iPlayerChoise = 10;
                bControlerSelect = true;
            }
            else
                JobLot();
        }
        private void CompatXML()
        {
            if (File.Exists(sOLD_SPM_XML))
            {
                XmlTextReader SaveFile = new XmlTextReader(sOLD_SPM_XML);
                while (SaveFile.Read())
                {
                    string spants = SaveFile.GetAttribute("bPlayingOldMissions");
                    if (spants == "true")
                    {
                        bPlayingOldMissions = true;
                    }
                    else
                    {
                        bPlayingOldMissions = false;
                    }
                }
                SaveFile.Close();
            }
        }
        private void LangRewite()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("LangRewite", tEx);

            sAltLang.Clear();
            sAltLang.Add("Trucking");                                                                               //0
            sAltLang.Add("Getaway Driver");                                                                         //1
            sAltLang.Add("Packages");                                                                               //2
            sAltLang.Add("Convicts");                                                                               //3
            sAltLang.Add("Fubar");                                                                                  //4
            sAltLang.Add("Pilot");                                                                                  //5
            sAltLang.Add("Ambulance");                                                                              //6
            sAltLang.Add("Follow");                                                                                 //7
            sAltLang.Add("LSFD");                                                                                   //8
            sAltLang.Add("Johnny");                                                                                 //9
            sAltLang.Add("Racist");                                                                                 //10
            sAltLang.Add("Explosive Device");                                                                       //11
            sAltLang.Add("Assassination");                                                                          //12
            sAltLang.Add("Gruppe 6");                                                                               //13
            sAltLang.Add("Sailor");                                                                                 //14
            sAltLang.Add("Important Exports");                                                                      //15
            sAltLang.Add("Debt Collect");                                                                           //16
            sAltLang.Add("MC Business");                                                                            //17
            sAltLang.Add("Bay Lift");                                                                               //18
            sAltLang.Add("Sharks");                                                                                 //19
            sAltLang.Add("Hello, Do you have the 'LS ");                                                            //20
            sAltLang.Add(" permit'?.. that's ok none of our drivers have..");                                       //21
            sAltLang.Add("Hi, our ");                                                                               //22
            sAltLang.Add(" has got away... Can you find a four seater car? Quickly...");                            //23
            sAltLang.Add("Shopping was so last century. Now everyone wants their ");                                //24
            sAltLang.Add(" delivered..");                                                                           //25
            sAltLang.Add("Hey, there are a group of day release ");                                                 //26
            sAltLang.Add(" nearby, can you take them back to prison?");                                             //27
            sAltLang.Add("Unlicensed with a barely legal vehicle... Welcome to '");                                 //28
            sAltLang.Add("'. It's 'NOT' a taxi service..");                                                         //29
            sAltLang.Add("The 'Red Nut Air Race' is about to start and we are missing a ");                         //30
            sAltLang.Add("Stunt ");                                                                                 //31
            sAltLang.Add("Our regular ");                                                                           //32
            sAltLang.Add("Helicopter ");                                                                            //33
            sAltLang.Add(" has been put into quarantine, can you fly our helicopter?");                             //34
            sAltLang.Add("I've got a free pass to 'Fort Zancudo' for any ");                                        //35
            sAltLang.Add(" willing to collect our Brrrt.");                                                         //36
            sAltLang.Add("Some CEO wanabe is collecting cars with a cargobob. Destroy that ");                      //37
            sAltLang.Add(" and his cargo.");                                                                        //38
            sAltLang.Add(" got enough glyphosate to give every citizen of Los Santos Non-Hodgkin lymphoma.");       //39
            sAltLang.Add("'Higgins Heli Tours' needs ");                                                            //40
            sAltLang.Add("'Los Santos' is a dangerous place. Can you help? Join the '");                            //41
            sAltLang.Add("Los Santos ");                                                                            //42
            sAltLang.Add(" Service");                                                                               //43
            sAltLang.Add("Hello, can you ");                                                                        //44
            sAltLang.Add("'. Wants you to fulfill that burning desire.. Join today");                               //45
            sAltLang.Add("It's '");                                                                                 //46
            sAltLang.Add(" on the spot");                                                                           //47
            sAltLang.Add("' . Can you deliver a players vehicle for me?");                                          //48
            sAltLang.Add("Hello, we are looking for a ");                                                           //49
            sAltLang.Add("Are you a '");                                                                            //50
            sAltLang.Add("Select Available Missions");                                                              //51
            sAltLang.Add("There is an '");                                                                          //52
            sAltLang.Add("' hidden in a secret area... Did you want to know more?");                                //53
            sAltLang.Add("Greetings, They're certain targets that need '");                                         //54
            sAltLang.Add("'. Could you help?");                                                                     //55
            sAltLang.Add("Congratulations your application to '");                                                  //56
            sAltLang.Add(" security");                                                                              //57
            sAltLang.Add("' has been approved.");                                                                   //58
            sAltLang.Add("Ahoy ");                                                                                  //59
            sAltLang.Add(". We have a barge full of cars to deliver, if you are interested?");                      //60
            sAltLang.Add(". My yacht is over run with pirates.. Can you put an end to them salty sea dogs?");       //61
            sAltLang.Add(". There is something fishy going on in 'Lago Zancudo'...");                               //62
            sAltLang.Add(". The 'Los Santos' storm drain is over run with rubbish... Can you clean it up?");        //63
            sAltLang.Add(". We got some boats that need delivery, come to the 'Galilee boat yard'.");               //64
            sAltLang.Add(". There are rumors of a Russian sub in the bay, can you check it out?");                  //65
            sAltLang.Add("There are some ");                                                                        //66
            sAltLang.Add(". That need to be found.. Are you interested?");                                          //67
            sAltLang.Add("Good day. I need someone to '");                                                          //68
            sAltLang.Add("' for us. You'll get 10%.");                                                              //69
            sAltLang.Add("There is a rival '");                                                                     //70
            sAltLang.Add("' operating on our turf. Can you put a stop to them?");                                   //71
            sAltLang.Add("Hello there is a CEO with a large debt to us. Can you '");                                //72
            sAltLang.Add("' a certain special item.");                                                              //73
            sAltLang.Add("a shiver of '");                                                                          //74
            sAltLang.Add("' are terrorizing the swimmers of 'Los Santos'. Can you help?");                          //75
            sAltLang.Add("Howdy, ");                                                                                //76
            sAltLang.Add(". Uniform not required...");                                                              //77
            sAltLang.Add(" ~INPUT_SPRINT~ Continue Mission ~INPUT_JUMP~ End Mission");                              //78
            sAltLang.Add(" ~INPUT_SPRINT~ Play Mission ~INPUT_JUMP~ Reject Mission ~n~ ~INPUT_DETONATE~ Options");  //79
            sAltLang.Add("Red Nut Air Race");                                                                       //80
            sAltLang.Add("Pegasus");                                                                                //81
            sAltLang.Add("Brrrrrrrrt");           //82
            sAltLang.Add("Import Export");           //83
            sAltLang.Add("Crop Dusting");           //84
            sAltLang.Add("Heil Tours");           //85
            sAltLang.Add("Argey Bargey");           //86
            sAltLang.Add("Piracy");                                                                                //87
            sAltLang.Add("Phishing");                                                                                //88
            sAltLang.Add("Litter Bugs");           //89
            sAltLang.Add("Boat Yard");           //90
            sAltLang.Add("Bogdam");           //91
            sAltLang.Add("The ");           //92
            sAltLang.Add("parked on ");           //93
            sAltLang.Add("to their ");           //94
            sAltLang.Add("on a rooftop near ");           //95
            sAltLang.Add("by ");           //96
            sAltLang.Add("Can you take us to ");           //97
            sAltLang.Add("Can you take me to ");           //98
            sAltLang.Add("at ");           //99
            sAltLang.Add("Attach the ");           //100
            sAltLang.Add("to the ");           //101
            sAltLang.Add("Deliver the ");           //102
            sAltLang.Add("Enter the ");           //103
            sAltLang.Add("to ");           //104
            sAltLang.Add("Find a ");           //105
            sAltLang.Add("or ");           //106
            sAltLang.Add("with four or more seats.");           //107
            sAltLang.Add("Go ");           //108   
            sAltLang.Add("Wait outside of the ");           //109
            sAltLang.Add("Lose the ");           //110
            sAltLang.Add("Burn ");           //111
            sAltLang.Add("the ");           //112
            sAltLang.Add("Get on the ");           //113
            sAltLang.Add("You can find the ");           //114
            sAltLang.Add("parading near the ");           //115
            sAltLang.Add("Press your ");           //116
            sAltLang.Add(". To attract their attention");           //117
            sAltLang.Add("Move closer to the ");           //118
            sAltLang.Add("There is a ");           //119
            sAltLang.Add("truck");           //120
            sAltLang.Add("trailer");           //121
            sAltLang.Add("car");           //122
            sAltLang.Add("van");           //123
            sAltLang.Add("bank");           //124
            sAltLang.Add("cops");           //125
            sAltLang.Add("Bank Robbers");           //126
            sAltLang.Add("target");           //127
            sAltLang.Add("vehicle");           //128
            sAltLang.Add("delivery");           //129
            sAltLang.Add("package");           //130
            sAltLang.Add("bus");           //131
            sAltLang.Add("convicts");           //132
            sAltLang.Add("horn");           //133
            sAltLang.Add("Bolingbroke Penitentiary");           //134
            sAltLang.Add("Fubar Dilettante");           //135
            sAltLang.Add("customer");           //136
            sAltLang.Add("stunt plane");           //137
            sAltLang.Add("Puerto Del Sol Marina");           //138
            sAltLang.Add("Fly through the ");           //139
            sAltLang.Add("coronas");           //140
            sAltLang.Add(", bonuses for flying inverted and full bank.");           //141
            sAltLang.Add("helicopter");           //142
            sAltLang.Add("CEO");           //143
            sAltLang.Add("Looks like this ");           //144
            sAltLang.Add("is a Psycho, better get out of there...");           //145
            sAltLang.Add("office");           //146
            sAltLang.Add("Fort Zancudo");           //147
            sAltLang.Add("plane");           //148
            sAltLang.Add("B-11 Strikeforce");           //149
            sAltLang.Add("Sandy Shores");           //150
            sAltLang.Add("airfield");           //151
            sAltLang.Add("Change of plan, avoid being ");           //152
            sAltLang.Add("shot down");           //153
            sAltLang.Add("while we find a different ");           //154
            sAltLang.Add("Grapeseed");           //155
            sAltLang.Add("Buzzard");           //156
            sAltLang.Add("Noose HQ");           //157
            sAltLang.Add("Cargobob");           //158
            sAltLang.Add("in a ");           //159
            sAltLang.Add("above");           //160
            sAltLang.Add("bellow");           //161 
            sAltLang.Add("is ");           //162
            sAltLang.Add("You are loaded up with Monsanto's finest");           //163
            sAltLang.Add(", watch out for the environmentalists.");           //164
            sAltLang.Add("Fly from the ");           //165
            sAltLang.Add("Yellow");           //166
            sAltLang.Add("Orange");           //167   
            sAltLang.Add("Gently land on the ");           //168
            sAltLang.Add("Wait while your passengers take ");           //169
            sAltLang.Add("selfies");           //170
            sAltLang.Add("Jetsam Office");           //171
            sAltLang.Add("Return to the ");           //172
            sAltLang.Add("ambulance");           //173
            sAltLang.Add("patient");           //174 
            sAltLang.Add("on ");           //175
            sAltLang.Add("hospital");           //176
            sAltLang.Add("before the time runs out");           //177
            sAltLang.Add("Exit the ");           //178
            sAltLang.Add("someone for us?");           //179
            sAltLang.Add("was last spotted around ");           //180
            sAltLang.Add("Don't get too close");           //181
            sAltLang.Add("Eliminate the ");           //182
            sAltLang.Add(", before they can get to the police station.");           //183
            sAltLang.Add("Take that ");           //184
            sAltLang.Add("Protect the ");           //185
            sAltLang.Add("Oh.. That wasn't supposed to happen...");           //186
            sAltLang.Add("on fire at ");           //187
            sAltLang.Add("fire engine");           //188
            sAltLang.Add("Spray the ");           //189
            sAltLang.Add("fire");           //190
            sAltLang.Add("with the ");           //191
            sAltLang.Add("hose");           //192
            sAltLang.Add("building");           //193
            sAltLang.Add("waste bin");           //194
            sAltLang.Add("cat");           //195
            sAltLang.Add(". No sorry just a cat that needs rescuing at ");           //196
            sAltLang.Add("to its owner");           //197
            sAltLang.Add("mad man");           //198
            sAltLang.Add("starting fires near ");           //199
            sAltLang.Add("Stop that ");           //200
            sAltLang.Add("player");           //201
            sAltLang.Add("and leave the ");           //202
            sAltLang.Add("area");           //203
            sAltLang.Add("before the player arrives");           //204
            sAltLang.Add("Enter the provided ");           //205
            sAltLang.Add(". Or use your own ");           //206
            sAltLang.Add("start line");           //207
            sAltLang.Add("Your ");           //208
            sAltLang.Add("is in the wrong class for this race type");           //209
            sAltLang.Add("near ");           //210
            sAltLang.Add("Find the ");           //211
            sAltLang.Add("to the nearby ");           //212
            sAltLang.Add("Police Station");           //213
            sAltLang.Add("Marked Target");           //214
            sAltLang.Add("silently with a ");           //215
            sAltLang.Add("Melee");           //216
            sAltLang.Add("weapon");           //217
            sAltLang.Add("case");           //218
            sAltLang.Add("store");           //219
            sAltLang.Add("is at the back of the ");           //220
            sAltLang.Add("depot");           //221
            sAltLang.Add("before it explodes");           //222
            sAltLang.Add("tug");           //223
            sAltLang.Add("barge");           //224
            sAltLang.Add("Manoeuvre the ");           //225
            sAltLang.Add("to attach the ");           //226
            sAltLang.Add("hook");           //227
            sAltLang.Add("car collection");           //228
            sAltLang.Add("Select one of the three ");           //229
            sAltLang.Add("to get to the ");           //230
            sAltLang.Add("yacht");           //231
            sAltLang.Add("Sea Sparrow");           //232
            sAltLang.Add("Jetmax");           //233
            sAltLang.Add("Technical Aqua");           //234
            sAltLang.Add("White Water Activity Center");           //235
            sAltLang.Add("boat");           //236
            sAltLang.Add("signal");           //237
            sAltLang.Add("location");           //238
            sAltLang.Add("Hold the boat in position while the ");           //239
            sAltLang.Add("scanner");           //240
            sAltLang.Add("reads the signal");           //241
            sAltLang.Add("Aqua Blazer");           //242
            sAltLang.Add("Collect the ");           //243
            sAltLang.Add("rubbish");           //244
            sAltLang.Add("Galilee boat yard");           //245
            sAltLang.Add("Pick a ");           //246
            sAltLang.Add("to deliver");           //247
            sAltLang.Add("Stromberg");           //248
            sAltLang.Add("Paleto Cove");           //249
            sAltLang.Add("submarine");           //250
            sAltLang.Add("Hold ~INPUT_CONTEXT~ to switch into submersible mode.");           //251
            sAltLang.Add("contact");           //252
            sAltLang.Add("Find the ");           //253
            sAltLang.Add("Interrogate ");           //254
            sAltLang.Add("Aim at the contact to obtain the information from them.");           //255
            sAltLang.Add("control room");           //256
            sAltLang.Add("Plug Cliffie into the ");           //257
            sAltLang.Add("console");           //258
            sAltLang.Add("before he starts talking rubbish for half an hour.");           //259
            sAltLang.Add("Kill ");           //260
            sAltLang.Add("Drive around till your ");           //261
            sAltLang.Add("radar");           //262
            sAltLang.Add("detects the ");           //263
            sAltLang.Add("we require.");           //264
            sAltLang.Add("Take care not to ");           //265
            sAltLang.Add("jump");           //266
            sAltLang.Add("over the ");           //267
            sAltLang.Add("DebtCollect");           //268
            sAltLang.Add("Select Settings");            //269
            sAltLang.Add("rival ");           //270
            sAltLang.Add("Aim your ");           //271
            sAltLang.Add("at the workers to make them walk ");           //272
            sAltLang.Add("outside");           //273
            sAltLang.Add("hostages");           //274
            sAltLang.Add("clubhouse");           //275
            sAltLang.Add("keys");           //276
            sAltLang.Add("Slamvan");           //277
            sAltLang.Add("forklift");           //278
            sAltLang.Add("Sandking");           //279
            sAltLang.Add("apartment");           //280
            sAltLang.Add("bikers");           //281
            sAltLang.Add("Use the ");           //282
            sAltLang.Add("to collect the ");           //283
            sAltLang.Add("pickup truck");           //284
            sAltLang.Add("Press ~INPUT_CONTEXT~ to drop the shark bait.");           //285
            sAltLang.Add("Hold ~INPUT_CONTEXT~ to explode the shark bait.");           //286
            sAltLang.Add("Kraken");           //287
            sAltLang.Add("Drop the bait bomb to attract  the ");           //288
            sAltLang.Add("Detonate the bait when the ");           //289
            sAltLang.Add("GOODS VALUE");           //290
            sAltLang.Add("TIME REMAINING");           //291
            sAltLang.Add("TAKE");           //292
            sAltLang.Add("PACKAGES");           //293
            sAltLang.Add("FUBAR EARNINGS");           //294
            sAltLang.Add("GLYPHOSATE REMAINING");           //295
            sAltLang.Add("LOCATIONS");           //296
            sAltLang.Add("GOONS REMAINING");           //297
            sAltLang.Add("MALPRACTICE SUIT");           //298
            sAltLang.Add("FIRE DAMAGE");           //299
            sAltLang.Add("REPAIR COST");           //300
            sAltLang.Add("POSITION");           //301
            sAltLang.Add("CURRENT LAP");           //302
            sAltLang.Add("DISTANCE");           //303
            sAltLang.Add("WORLD RECORD");           //304
            sAltLang.Add("TIME");           //305
            sAltLang.Add("THE BOMB WILL EXPLODE IN :");           //306
            sAltLang.Add("SPOOK METER");           //307
            sAltLang.Add("TRACKING SIGNAL");           //308
            sAltLang.Add("RUBBISH REMAINING");           //309
            sAltLang.Add("You have no mission types selected.");           //310
            sAltLang.Add("Your best lap : ");           //311
            sAltLang.Add("Money Earned $");           //312
            sAltLang.Add("Press ~INPUT_DETONATE~ to remove scuba gear.");           //313
            sAltLang.Add("Press ~INPUT_DETONATE~ to exit.");           //314
            sAltLang.Add("Press ~INPUT_DETONATE~ to sleep.");           //315
            sAltLang.Add("Press ~INPUT_DETONATE~ to Sit.");           //316
            sAltLang.Add("Press ~INPUT_DETONATE~ to stand up.");           //317
            sAltLang.Add("Press ~INPUT_DETONATE~ for scuba gear.");           //318
            sAltLang.Add("Press ~INPUT_DETONATE~ for wardrobe.");           //319
            sAltLang.Add("Would you like to start the game on the yacht? ~INPUT_SPRINT~ for yes, ~INPUT_JUMP~ for No.");           //320
            sAltLang.Add("Press ~INPUT_DETONATE~ to play the piano.");           //321
            sAltLang.Add("Press ~INPUT_DETONATE~ to stand here.");           //322
            sAltLang.Add("Invalid Model. Only available for Franklin, Michael, Trevor, FreemodeMale01 and FreemodeFemale01.");           //323
            sAltLang.Add("Press ~INPUT_DETONATE~ to drink.");           //324
            sAltLang.Add("Fast Travel?, ~INPUT_DETONATE~, ~INPUT_CONTEXT~ to change, ~INPUT_SPRINT~ to continue.");           //325
            sAltLang.Add("Current destination is ");           //326
            sAltLang.Add("Add Current Outfit");           //327
            sAltLang.Add("Save Current Outfit");           //328
            sAltLang.Add("Mission Passed");           //329
            sAltLang.Add("Mission Failed");           //330
            sAltLang.Add("Hey thanks for not destroying my cargo.. Here i got a 'Pac Standard' if your interested?");           //331
            sAltLang.Add("How many laps? Use the ~INPUT_DETONATE~ for less and ~INPUT_CONTEXT~ for more. Laps = ");           //332
            sAltLang.Add(", is the asking price. Did you want to Purchase this yacht? ~INPUT_SPRINT~ for Yes, ~INPUT_JUMP~ for No");           //333
            sAltLang.Add("Race type?, ~INPUT_DETONATE~ to change, ~INPUT_SPRINT~ to continue. Race type = ");           //334
            sAltLang.Add("Time trial");           //335
            sAltLang.Add("Race");           //336
            sAltLang.Add("Total Packages delivered : ");           //337
            sAltLang.Add("Fubar multi ride bonus = $");           //338
            sAltLang.Add("Your Time : ");           //339
            sAltLang.Add("Interceptors shot down, ");           //340
            sAltLang.Add("Glyphosate Remaining ");           //341
            sAltLang.Add("Lbs");           //342
            sAltLang.Add(", Patients recovered");           //343
            sAltLang.Add("are feeding");           //344
            sAltLang.Add("Select an option");           //345
            sAltLang.Add("Show Route");           //346
            sAltLang.Add("Toggle GPS to target.");           //347
            sAltLang.Add("Subtitles");           //348
            sAltLang.Add("Toggle Subtitle/Notify Ui.");           //349
            sAltLang.Add("Phone Cone");           //350
            sAltLang.Add("Toggle the blip and cone for street phones.");           //351
            sAltLang.Add("Enemy Strength");           //352
            sAltLang.Add("Reduce the damage enemies inflict.");           //353
            sAltLang.Add("Fast Travel");           //354
            sAltLang.Add("Be moved to the start location/vehicle for mission.");           //355
            sAltLang.Add("Load On Yacht");           //356
            sAltLang.Add("Start your game on the yacht.");           //357
            sAltLang.Add("If you didn't download this file from 'gta5-mods.com' then delete it and download the original from 'gta5-mods.com/scripts/new-street-phone-missions'");           //358
            sAltLang.Add("Hold ~INPUT_AIM~ and press ~INPUT_Attack~ to perform a stealth kill.");           //359
            sAltLang.Add("Tap ~INPUT_Duck~ to enter stealth mode.");           //360
            sAltLang.Add("Press ~INPUT_VEH_HORN~ to alert the ");           //361
            sAltLang.Add("Hold ~INPUT_AIM~ to aim your weapon at the workers.");           //362
            sAltLang.Add(" ~INPUT_DETONATE~ Options");           //363
            sAltLang.Add("Release the ");           //364
            sAltLang.Add("over the ");           //365
            sAltLang.Add("Hold ~INPUT_AIM~ to spray the fire.");           //366
            sAltLang.Add("Hold ~INPUT_CONTEXT~ to detach the trailer or ~n~Press ~INPUT_VEH_EXIT~ to exit the truck.");           //367
            sAltLang.Add("Insufficient Funds");           //368
            sAltLang.Add("Your NSCoins acc has gone");           //369
            sAltLang.Add("Your low risk acc has gone");           //370
            sAltLang.Add("Your high risk acc has gone");           //371
            sAltLang.Add("balance; ");           //372
            sAltLang.Add("up ");           //373
            sAltLang.Add("down ");           //374
            sAltLang.Add("Get an account statement");           //375
            sAltLang.Add("Bank Transfer");           //376
            sAltLang.Add("Logout");           //377
            sAltLang.Add("Processing last order");           //378
            sAltLang.Add("Your next bribe can be taken in : ");           //379
            sAltLang.Add("Yacht Price :");           //380
            sAltLang.Add("Set the purchase price of the yacht.");           //381
            sAltLang.Add("New contact added :");           //382
            sAltLang.Add("Your wanted level is above 3 stars");           //383
            sAltLang.Add(".Your yacht is over run with pirates..Can you put an end to them salty sea dogs ? ");           //384
            sAltLang.Add("Toggle Phone Audio");           //385
            sAltLang.Add("Toggles the street phone audio ring");           //386
            sAltLang.Add("Hold ~INPUT_CONTEXT~, if the forklift gets stuck.");           //387
            sAltLang.Add("Partyer");           //388
            sAltLang.Add(" don't let them spot you following them.");           //389
            sAltLang.Add("One of the partyers has been seen snooping around i need you to ");           //390
            sAltLang.Add(" them.");           //391
            sAltLang.Add("There is a ");           //392
            sAltLang.Add("thief ");           //393
            sAltLang.Add("on the island, help us stop them.");           //394
            sAltLang.Add("The Main Docks");           //395
            sAltLang.Add("The North Docks");           //396
            sAltLang.Add("The Airstrip");           //397
            sAltLang.Add("Keep out of their vision cone.");           //398
            sAltLang.Add("Account");           //399
            sAltLang.Add("Low Risk");           //400
            sAltLang.Add("High Risk");           //401
            sAltLang.Add("Import List");           //402
            sAltLang.Add("Super");           //403
            sAltLang.Add("Sports");           //404
            sAltLang.Add("Sports Classics");           //405
            sAltLang.Add("Mussle");           //406
            sAltLang.Add("Offroad");           //407
            sAltLang.Add("Coupe");           //408
            sAltLang.Add("SUV");           //409
            sAltLang.Add("Compacts");           //410
            sAltLang.Add("Sedans");           //411
            sAltLang.Add("Medical");           //412
            sAltLang.Add("Mk2 Weapons");           //413
            sAltLang.Add("Weapon List");           //414
            sAltLang.Add("Ammo Type");           //415
            sAltLang.Add("Attachments");           //416
            sAltLang.Add("Civilian Helicopters");           //417
            sAltLang.Add("Military Helicopters");           //418
            sAltLang.Add("Civilian Planes");           //419
            sAltLang.Add("Military Planes");           //420
            sAltLang.Add("Boats");           //421
            sAltLang.Add("Special Vehicles");           //422
            sAltLang.Add("Police Bribes");           //423
            sAltLang.Add(" ~INPUT_VEH_DUCK~ to skip to destination");           //424
            sAltLang.Add("Go to mission target. ~INPUT_DETONATE~");           //425
            sAltLang.Add("Set your map waypoint to your destination");           //426
            sAltLang.Add("press ~INPUT_DETONATE~ to purchase Mk2 Weapons");           //427
            sAltLang.Add("~n~ ~INPUT_JUMP~ to exit. ~INPUT_DETONATE~/~INPUT_CONTEXT~, to Deduct/Add.");           //428
            sAltLang.Add("All our Fubar drivers are busy please try again later...");           //429
            sAltLang.Add("Your vehicle can't be delivered at this time...");           //430
            sAltLang.Add("A Medic can not be dispatched at this time...");           //431
            sAltLang.Add("There are no weapons dealers in your area.");           //432
            sAltLang.Add("Your vehicle can't be delivered at this time...");           //433
            sAltLang.Add("Diagnosis");           //434
            sAltLang.Add("Triage your patient");           //435
            sAltLang.Add("Inject your patient with hydroxychloroquine");           //436
            sAltLang.Add("Apply dressing to the burns");           //437
            sAltLang.Add("Give the patient an alcaselza suppository");           //438
            sAltLang.Add("Dismiss your patient");           //439
            sAltLang.Add("Help i've been attacked by a lunatic.");           //440
            sAltLang.Add("It's nothing really just a scratch.");           //441
            sAltLang.Add("Oww Ouch Ooo Eee");           //442
            sAltLang.Add("I think i've broken my coccyx.");           //443
            sAltLang.Add("Not much just severe lacerations and some internal bleeding.");           //444
            sAltLang.Add("I've got a saw throat and an odd taste in my mouth.");           //445
            sAltLang.Add("Cough..");           //446
            sAltLang.Add("Brains... Hmmm Brains...");           //447
            sAltLang.Add("I'm melting.");           //448
            sAltLang.Add("It burns aggg.");           //449
            sAltLang.Add("Is it me or is it rather hot?");           //450
            sAltLang.Add("I've sustained second degree burns to my ...");           //451
            sAltLang.Add("Ooo Hot Hot oo Oww.");           //452
            sAltLang.Add("*-Blur-* Burp...");           //453
            sAltLang.Add("OOo my stomouch.");           //454
            sAltLang.Add("I don't feel too well.");           //455
            sAltLang.Add("I've filled my pants.");           //456
            sAltLang.Add("I think i've got Norovirus.");           //457
            sAltLang.Add("Can you look at my rash?");           //458
            sAltLang.Add("Hello can i get your autograph?");           //459
            sAltLang.Add("Where's that other medic the one they usually send?");           //460
            sAltLang.Add("Your so tall and handsome.");           //461
            sAltLang.Add("Oh what happened to your uniform? I want a real medic.");           //462
            sAltLang.Add("All our Fubar drivers are busy please try again later...");           //463
            sAltLang.Add("Your vehicle can't be delivered at this time...");           //464
            sAltLang.Add("There are no weapons dealers in your area.");           //465
            sAltLang.Add("A Medic can not be dispatched at this time...");           //466
            sAltLang.Add("Block This Phone");           //467
            sAltLang.Add("Add this phone to a list of blocked phones.");           //468
            sAltLang.Add("Custom ");           //469
            sAltLang.Add("Add ");           //470
            sAltLang.Add("+");           //471
            sAltLang.Add("Save Mission");           //472
            sAltLang.Add("Discard Mission");           //473
            sAltLang.Add("Re-Test Mission");           //474
            sAltLang.Add("Previous trailer");           //475
            sAltLang.Add("Next trailer");           //476
            sAltLang.Add("Previous livery");           //477
            sAltLang.Add("Next livery");           //478
            sAltLang.Add("Select Trailer");           //479
            sAltLang.Add("Back");           //480
            sAltLang.Add("Heading '-'");           //481
            sAltLang.Add("Heading '+'");           //482
            sAltLang.Add("Left");           //483
            sAltLang.Add("Right");           //484
            sAltLang.Add("Forward");           //485
            sAltLang.Add("Backward");           //486
            sAltLang.Add("Select Position");           //487
            sAltLang.Add("Place vehicle here");           //488
            sAltLang.Add("Test Mission");           //489
            sAltLang.Add("Add another end location");           //490
            sAltLang.Add("Previous");           //491
            sAltLang.Add("Next");           //492
            sAltLang.Add("Select Vehicle");           //493
            sAltLang.Add("Select Package");           //494
            sAltLang.Add("Add Delivery Point");           //495
            sAltLang.Add("Finish and Test");           //496
            sAltLang.Add("Add March Point");           //497
            sAltLang.Add("Set Fubar Park Position");           //498
            sAltLang.Add("Set Fubar Ped Spawn Position");           //499
            sAltLang.Add("Make another fubar drop");           //500
            sAltLang.Add("Add ped position");           //501
            sAltLang.Add("Set shark spawn position");           //502
            sAltLang.Add("Previous Class");           //503
            sAltLang.Add("Next Class");           //504
            sAltLang.Add("Add Vehicle to race list");           //505
            sAltLang.Add("Continue");           //506
            sAltLang.Add("Set players race vehicle drop point");           //507
            sAltLang.Add("Set start line furthest left position");           //508
            sAltLang.Add("Race start Position ");           //509
            sAltLang.Add("Add race target");           //510
            sAltLang.Add("Remove last bomb");           //511
            sAltLang.Add("Add bomb location");           //512
            sAltLang.Add("Add Boss location and heading");           //513
            sAltLang.Add("Add Goon location and heading");           //514
            sAltLang.Add("Add goon walk path");           //515
            sAltLang.Add("Make next path");           //516
            sAltLang.Add("Make start point and test");           //517
            sAltLang.Add("Open your map and place a waypoint for fast travel");           //518
            sAltLang.Add("Open your map and place a waypoint for fast travel, press ~INPUT_JUMP~ to go back");           //519
            sAltLang.Add("Enter the fubar Dilettante.");           //520
            sAltLang.Add("Too Close to start");           //521
            sAltLang.Add("Blank");           //522
            sAltLang.Add("Prioritize 'Mission Builder' missions");           //523
            sAltLang.Add("Phone pickup animation");           //524
            sAltLang.Add("Builder Missions First");           //525
            sAltLang.Add("Phone Animation");           //526
            sAltLang.Add("Press ~INPUT_ENTER~ to enter the fubar ride");           //527
            sAltLang.Add("Request Weapons Man");           //528
            sAltLang.Add("Return Missing Weapons");           //529
            sAltLang.Add("Blank");           //530

            Language BeLang = new Language();
            BeLang.AltLangs = sAltLang;

            //BulidLang(BeLang, "" + Directory.GetCurrentDirectory() + "/Scripts/NSPMLanguage.Xml");
        }
        private void FindaLang()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("FindaLang", tEx);

            if (Directory.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Lingo"))
            {
                if (File.Exists(sNSPMLanguage))
                {
                    Language XSets = LoadlangSetting(sNSPMLanguage);

                    sAltLang = XSets.AltLangs;

                    if (sAltLang.Count < 529)
                    {
                        LangRewite();
                        UI.Notify("NSPMLanguage.XML read fail");
                    }
                }
                else
                    LangRewite();
            }
        }
        private void Truckin()
        {
            BigMessageThread.MessageInstance.ShowSimpleShard(sAltLang[0], "", 5000);
            VTBTimerPool.Add(ttTextBar_01);
            ttTextBar_01.Label = "" + sAltLang[290] + "";
            ttTextBar_02.Label = "" + sAltLang[291] + "";
            BeOnOff.Clear();
            fList_01.Clear();
            iList_01.Clear();
            iList_02.Clear();
            sList_01.Clear();
            VectorList_01.Clear();
            MishPed.Clear();
            MishVic.Clear();

            List<Vector3> vLanding = new List<Vector3>();
            List<float> fLanding = new List<float>();

            BeOnOff.Add(false);//TruckBlip-- 0
            BeOnOff.Add(false);//btrailDamage-- 1
            BeOnOff.Add(false);//bTrailAtach-- 2
            BeOnOff.Add(true);//bMoveYourV-- 3
            BeOnOff.Add(true);//bTruckChoiseV-- 4
            BeOnOff.Add(false);//bCarTrailV-- 5

            Vector3 Pos2 = Vector3.Zero;

            int iRandomDrops = 0;

            if (bTestRun)
            {
                bJobLoaded = true;
                iJobType = 1;
                iRandomDrops = 8;
            }
            else
            {
                if (FindBuiltMissions(1))
                {
                    if (bBulderOnly)
                        iRandomDrops = 8;
                    else
                        iRandomDrops = FindRandom(1, 1, 8);
                }
                else
                    iRandomDrops = FindRandom(1, 1, 7);
            }

            if (iRandomDrops == 8)
            {
                int iBuild = 0;

                if (!bTestRun)
                    iBuild = RandInt(0, MyMissions.TruckersXM.Count() - 1);

                vFuMiss = MyMissions.TruckersXM[iBuild].FubarStop;

                vTarget_02 = MyMissions.TruckersXM[iBuild].TruckinStart02;
                iList_01.Add(4); iList_01.Add(1); iList_01.Add(0);
                fList_01.Add(MyMissions.TruckersXM[iBuild].TruckinDir02);

                if (MyMissions.TruckersXM[iBuild].VehVar == 0)
                {
                    BeOnOff[5] = true;
                    sList_01.Add("SADLER");
                }
                else if (MyMissions.TruckersXM[iBuild].VehVar == 1)
                {
                    BeOnOff[5] = true;
                    iMissionVar_01 = 2;
                    sList_01.Add("SADLER");
                }
                else if (MyMissions.TruckersXM[iBuild].VehVar == 2 || MyMissions.TruckersXM[iBuild].VehVar == 3)
                {
                    BeOnOff[4] = false;
                    sList_01.Add("Tractor2");
                }
                else
                    sList_01.Add("HAULER");

                Pos2 = MyMissions.TruckersXM[iBuild].TruckinStart01;
                fList_01.Add(MyMissions.TruckersXM[iBuild].TruckinDir01);
                iList_02.Add(MyMissions.TruckersXM[iBuild].LiveryExtra); iList_02.Add(MyMissions.TruckersXM[iBuild].VehLivery); iList_02.Add(3);
                sList_01.Add(MyMissions.TruckersXM[iBuild].TruckinTrail);

                vLanding = new List<Vector3>(MyMissions.TruckersXM[iBuild].TruckinEnd);
                fLanding = new List<float>(MyMissions.TruckersXM[iBuild].TruckinDir03);
            }
            else
            {
                if (iLocationX == 1)
                {
                    if (iRandomDrops == 1)
                    {
                        vFuMiss = new Vector3(520.3214f, -1499.268f, 28.70853f);

                        vTarget_02 = new Vector3(505.2303f, -1516.279f, 28.82515f);
                        iList_01.Add(4); iList_01.Add(1); iList_01.Add(0);
                        fList_01.Add(140.3961f);
                        sList_01.Add("SADLER");


                        Pos2 = new Vector3(506.5337f, -1496.276f, 28.82477f);
                        fList_01.Add(175.5629f);
                        iList_02.Add(1); iList_02.Add(2); iList_02.Add(3);
                        sList_01.Add("TrailerSmall");

                        BeOnOff[5] = true;
                    }
                    else if (iRandomDrops == 2)
                    {
                        vFuMiss = new Vector3(285.0543f, -2838.655f, 5.492721f);

                        vTarget_02 = new Vector3(300.8229f, -2852.343f, 5.779589f);
                        iList_01.Add(0); iList_01.Add(0); iList_01.Add(2);
                        fList_01.Add(88.66551f);
                        sList_01.Add("HAULER");


                        Pos2 = new Vector3(308.4671f, -2832.534f, 5.75268f);
                        fList_01.Add(90.10733f);
                        iList_02.Add(0); iList_02.Add(0); iList_02.Add(3);
                        sList_01.Add("Tanker");
                    }
                    else if (iRandomDrops == 3)
                    {
                        vFuMiss = new Vector3(-21.35467f, -1694.351f, 28.71711f);

                        vTarget_02 = new Vector3(-29.01621f, -1679.756f, 29.20712f);
                        iList_01.Add(0); iList_01.Add(0); iList_01.Add(2);
                        fList_01.Add(119.7145f);
                        sList_01.Add("HAULER");


                        Pos2 = new Vector3(-45.54f, -1677.733f, 28.96147f);
                        fList_01.Add(-133.15f);
                        iList_02.Add(0); iList_02.Add(0); iList_02.Add(3);
                        sList_01.Add("TR4");
                    }
                    else if (iRandomDrops == 4)
                    {
                        vFuMiss = new Vector3(1663.76685f, -2513.34033f, 75.5648727f);

                        vTarget_02 = new Vector3(1649.02136f, -2536.05054f, 75.1921921f);
                        iList_01.Add(0); iList_01.Add(0); iList_01.Add(2);
                        fList_01.Add(-46.8483658f);
                        sList_01.Add("HAULER");

                        Pos2 = new Vector3(1660.32104f, -2521.19312f, 75.6206131f);
                        fList_01.Add(-26.1104279f);
                        iList_02.Add(0); iList_02.Add(0); iList_02.Add(3);
                        sList_01.Add("TrailerLogs");
                    }
                    else if (iRandomDrops == 5)
                    {
                        vFuMiss = new Vector3(818.675964f, -1943.36572f, 28.1977692f);

                        vTarget_02 = new Vector3(824.584656f, -1939.47485f, 28.286911f);
                        iList_01.Add(0); iList_01.Add(0); iList_01.Add(2);
                        fList_01.Add(-5.28269482f);
                        sList_01.Add("HAULER");

                        Pos2 = new Vector3(838.060486f, -1935.59424f, 30.9043026f);
                        fList_01.Add(175.247894f);
                        iList_02.Add(5); iList_02.Add(0); iList_02.Add(3);
                        sList_01.Add("Trailers2");
                    }
                    else if (iRandomDrops == 6)
                    {
                        vFuMiss = new Vector3(1051.77f, -3195.64f, 4.89f);

                        vTarget_02 = new Vector3(1087.17627f, -3179.91406f, 5.98643112f);
                        iList_01.Add(0); iList_01.Add(0); iList_01.Add(2);
                        fList_01.Add(0.203412428f);
                        List<string> SCarz = RandVeh(15);
                        sList_01.Add(SCarz[RandInt(0, SCarz.Count - 1)]);

                        Pos2 = new Vector3(1054.10132f, -3185.5769f, 7.89159679f);
                        fList_01.Add(0.366428256f);
                        iList_02.Add(0); iList_02.Add(0); iList_02.Add(3);
                        sList_01.Add("HAULER");
                    }
                    else
                    {
                        vFuMiss = new Vector3(853.5507f, -1582.938f, 30.48856f);

                        vTarget_02 = new Vector3(912.7222f, -1576.179f, 30.47699f);
                        iList_01.Add(0); iList_01.Add(0); iList_01.Add(2);
                        fList_01.Add(2.110507f);
                        sList_01.Add("HAULER");

                        Pos2 = new Vector3(893.8492f, -1532.468f, 30.03843f);
                        fList_01.Add(129.1272f);
                        iList_02.Add(0); iList_02.Add(0); iList_02.Add(3);
                        sList_01.Add("TRFlat");

                        iMissionVar_01 = 3;
                    }
                }
                else if (iLocationX == 2)
                {
                    if (iRandomDrops == 1)
                    {
                        vFuMiss = new Vector3(-61.79567f, -66.99591f, 58.64146f);

                        vTarget_02 = new Vector3(-39.57209f, -67.10627f, 58.72478f);
                        iList_01.Add(0); iList_01.Add(0); iList_01.Add(2);
                        fList_01.Add(73.18611f);
                        sList_01.Add("HAULER");

                        int iExMod = RandInt(0, 3);
                        Pos2 = new Vector3(-31.79175f, -92.66103f, 56.7915f);
                        fList_01.Add(159.4731f);
                        iList_02.Add(5); iList_02.Add(iExMod); iList_02.Add(3);
                        sList_01.Add("TrailerLarge");
                    }
                    else if (iRandomDrops == 2)
                    {
                        vFuMiss = new Vector3(-293.31897f, -1175.02466f, 22.1332169f);

                        vTarget_02 = new Vector3(-304.080688f, -1164.74365f, 21.7064762f);
                        iList_01.Add(4); iList_01.Add(1); iList_01.Add(1);
                        fList_01.Add(-86.5931473f);
                        sList_01.Add("SADLER");


                        Pos2 = new Vector3(-310.284271f, -1170.40271f, 21.176096f);
                        fList_01.Add(-88.949173f);
                        iList_02.Add(1); iList_02.Add(1); iList_02.Add(3);
                        sList_01.Add("TrailerSmall");

                        BeOnOff[5] = true;
                    }
                    else if (iRandomDrops == 3)
                    {
                        vFuMiss = new Vector3(-1462.704f, 59.15478f, 52.25636f);

                        vTarget_02 = new Vector3(-1526.361f, 83.06799f, 56.35771f);
                        iList_01.Add(0); iList_01.Add(0); iList_01.Add(2);
                        fList_01.Add(273.6321f);
                        sList_01.Add("HAULER");

                        Pos2 = new Vector3(-1525.629f, 97.0549f, 56.01995f);
                        fList_01.Add(229.3026f);
                        iList_02.Add(0); iList_02.Add(0); iList_02.Add(3);
                        sList_01.Add("TR4");
                    }
                    else if (iRandomDrops == 4)
                    {
                        vFuMiss = new Vector3(418.409698f, 1193.33594f, 246.122208f);

                        vTarget_02 = new Vector3(425.566925f, 1188.39233f, 246.534561f);
                        iList_01.Add(0); iList_01.Add(0); iList_01.Add(2);
                        fList_01.Add(90.2731705f);
                        sList_01.Add("HAULER");

                        Pos2 = new Vector3(420.343811f, 1203.22766f, 250.992661f);
                        fList_01.Add(-174.639053f);
                        iList_02.Add(0); iList_02.Add(0); iList_02.Add(3);
                        sList_01.Add("TrailerLogs");
                    }
                    else if (iRandomDrops == 5)
                    {
                        vFuMiss = new Vector3(-1345.939f, -815.7911f, 19.30737f);

                        vTarget_02 = new Vector3(-1320.699f, -784.6389f, 19.4839f);
                        iList_01.Add(0); iList_01.Add(0); iList_01.Add(2);
                        fList_01.Add(304.3678f);
                        sList_01.Add("HAULER");

                        Pos2 = new Vector3(-1324.245f, -782.1998f, 19.62404f);
                        fList_01.Add(305.5011f);
                        iList_02.Add(5); iList_02.Add(1); iList_02.Add(3);
                        sList_01.Add("Trailers2");
                    }
                    else if (iRandomDrops == 6)
                    {
                        vFuMiss = new Vector3(62.1818275f, 84.3500519f, 77.23983f);

                        vTarget_02 = new Vector3(67.418541f, 75.9080887f, 77.2004929f);
                        iList_01.Add(0); iList_01.Add(0); iList_01.Add(2);
                        fList_01.Add(69.6358337f);
                        sList_01.Add("HAULER");

                        Pos2 = new Vector3(80.162323f, 96.900589f, 80.9277344f);
                        fList_01.Add(69.3761826f);
                        iList_02.Add(0); iList_02.Add(0); iList_02.Add(3);
                        sList_01.Add("Trailers3");
                    }
                    else
                    {
                        vFuMiss = new Vector3(-1150.782f, -1753.358f, 3.445312f);

                        vTarget_02 = new Vector3(-1176.02f, -1745.94f, 3.769235f);
                        iList_01.Add(0); iList_01.Add(0); iList_01.Add(2);
                        fList_01.Add(32.27144f);
                        sList_01.Add("HAULER");

                        Pos2 = new Vector3(-1156.029f, -1768.435f, 3.749536f);
                        fList_01.Add(304.4875f);
                        iList_02.Add(0); iList_02.Add(0); iList_02.Add(3);
                        sList_01.Add("TRFlat");
                        iMissionVar_01 = 4;
                    }
                }
                else if (iLocationX == 3)
                {
                    if (iRandomDrops == 1)
                    {
                        vFuMiss = new Vector3(-3016.491f, 112.4102f, 11.63074f);

                        vTarget_02 = new Vector3(-3044.382f, 112.861f, 11.11644f);
                        iList_01.Add(4); iList_01.Add(1); iList_01.Add(1);
                        fList_01.Add(320.2346f);
                        sList_01.Add("SADLER");

                        Pos2 = new Vector3(-3050.341f, 117.9787f, 11.13216f);
                        fList_01.Add(296.1413f);
                        iList_02.Add(5); iList_02.Add(4); iList_02.Add(3);
                        sList_01.Add("BoatTrailer");

                        iMissionVar_01 = 2;
                        BeOnOff[5] = true;
                    }
                    else if (iRandomDrops == 2)
                    {
                        vFuMiss = new Vector3(-2050.414f, 3435.068f, 30.70889f);

                        vTarget_02 = new Vector3(-2006f, 3432.691f, 31.10116f);
                        iList_01.Add(0); iList_01.Add(0); iList_01.Add(2);
                        fList_01.Add(169.6632f);
                        sList_01.Add("HAULER");

                        Pos2 = new Vector3(-2014.785f, 3403.857f, 30.89259f);
                        fList_01.Add(354.9245f);
                        iList_02.Add(0); iList_02.Add(0); iList_02.Add(3);
                        sList_01.Add("Tanker");
                    }
                    else if (iRandomDrops == 3)
                    {
                        vFuMiss = new Vector3(-137.2966f, 956.023f, 235.2326f);

                        vTarget_02 = new Vector3(-121.1676f, 980.1492f, 235.5942f);
                        iList_01.Add(0); iList_01.Add(0); iList_01.Add(2);
                        fList_01.Add(21.69683f);
                        sList_01.Add("HAULER");

                        Pos2 = new Vector3(-122.6281f, 999.8234f, 235.5098f);
                        fList_01.Add(118.5581f);
                        iList_02.Add(0); iList_02.Add(3); iList_02.Add(0);
                        sList_01.Add("TR4");
                    }
                    else if (iRandomDrops == 4)
                    {
                        vFuMiss = new Vector3(-1945.494f, 1764.059f, 174.6315f);

                        vTarget_02 = new Vector3(-1939.415f, 1774.918f, 173.8567f);
                        iList_01.Add(0); iList_01.Add(0); iList_01.Add(2);
                        fList_01.Add(202.0231f);
                        sList_01.Add("HAULER");

                        Pos2 = new Vector3(-1943.552f, 1753.167f, 174.7893f);
                        fList_01.Add(98.43806f);
                        iList_02.Add(0); iList_02.Add(0); iList_02.Add(3);
                        sList_01.Add("TrailerLogs");
                    }
                    else if (iRandomDrops == 5)
                    {
                        vFuMiss = new Vector3(-3120.74f, 1140.872f, 19.91989f);

                        vTarget_02 = new Vector3(-3169.865f, 1103.403f, 20.49249f);
                        iList_01.Add(0); iList_01.Add(0); iList_01.Add(2);
                        fList_01.Add(335.688f);
                        sList_01.Add("HAULER");

                        Pos2 = new Vector3(-3153.93f, 1136.16f, 20.63562f);
                        fList_01.Add(332.7231f);
                        iList_02.Add(5); iList_02.Add(1); iList_02.Add(3);
                        sList_01.Add("Trailers3");

                    }
                    else if (iRandomDrops == 6)
                    {
                        vFuMiss = new Vector3(-2503.669f, 2321.646f, 32.48883f);

                        vTarget_02 = new Vector3(-2521.919f, 2340.696f, 32.83128f);
                        iList_01.Add(0); iList_01.Add(0); iList_01.Add(2);
                        fList_01.Add(33.80985f);
                        sList_01.Add("HAULER");

                        Pos2 = new Vector3(-2531.293f, 2337.344f, 32.83128f);
                        fList_01.Add(213.8355f);
                        iList_02.Add(0); iList_02.Add(0); iList_02.Add(3);
                        sList_01.Add("Trailers2");
                    }
                    else
                    {
                        vFuMiss = new Vector3(-2348.202f, 3424.02f, 27.9888f);

                        vTarget_02 = new Vector3(-2322.54517f, 3418.34668f, 30.728764f);
                        iList_01.Add(0); iList_01.Add(0); iList_01.Add(1);
                        fList_01.Add(125.572144f);
                        sList_01.Add("HAULER");

                        Pos2 = new Vector3(-2316.95166f, 3407.44556f, 31.0615314f);
                        fList_01.Add(55.7717514f);
                        iList_02.Add(0); iList_02.Add(0); iList_02.Add(3);
                        sList_01.Add("TRFlat");

                        iMissionVar_01 = 5;
                    }
                }
                else if (iLocationX == 4)
                {
                    if (iRandomDrops == 1)
                    {
                        vFuMiss = new Vector3(1328.782f, -725.6939f, 65.49901f);

                        vTarget_02 = new Vector3(1361.874f, -743.7559f, 66.59701f);
                        iList_01.Add(4); iList_01.Add(1); iList_01.Add(1);
                        fList_01.Add(54.01971f);
                        sList_01.Add("SADLER");

                        Pos2 = new Vector3(1346.27f, -749.6741f, 66.81572f);
                        fList_01.Add(335.8355f);
                        iList_02.Add(1); iList_02.Add(1); iList_02.Add(3);
                        sList_01.Add("TrailerSmall");

                        BeOnOff[5] = true;
                    }
                    else if (iRandomDrops == 2)
                    {
                        vFuMiss = new Vector3(1726.71f, -1688.844f, 112.0552f);

                        vTarget_02 = new Vector3(1706.042f, -1627.395f, 112.2603f);
                        iList_01.Add(0); iList_01.Add(0); iList_01.Add(2);
                        fList_01.Add(199.5738f);
                        sList_01.Add("HAULER");

                        Pos2 = new Vector3(1724.371f, -1629.598f, 112.2381f);
                        fList_01.Add(100.7514f);
                        iList_02.Add(0); iList_02.Add(0); iList_02.Add(3);
                        sList_01.Add("Tanker");
                    }
                    else if (iRandomDrops == 3)
                    {
                        vFuMiss = new Vector3(1071.812f, 251.8387f, 80.34699f);

                        vTarget_02 = new Vector3(1130.737f, 256.5732f, 80.62725f);
                        iList_01.Add(0); iList_01.Add(0); iList_01.Add(2);
                        fList_01.Add(62.14423f);
                        sList_01.Add("HAULER");

                        Pos2 = new Vector3(1184.038f, 308.7288f, 81.76277f);
                        fList_01.Add(148.0724f);
                        iList_02.Add(0); iList_02.Add(0); iList_02.Add(3);
                        sList_01.Add("TR4");
                    }
                    else if (iRandomDrops == 4)
                    {
                        vFuMiss = new Vector3(2633.327f, -666.3212f, 45.05252f);

                        vTarget_02 = new Vector3(2669.122f, -670.3106f, 41.32516f);
                        iList_01.Add(0); iList_01.Add(0); iList_01.Add(2);
                        fList_01.Add(51.11717f);
                        sList_01.Add("HAULER");

                        Pos2 = new Vector3(2664.854f, -718.6713f, 38.804f);
                        fList_01.Add(353.1165f);
                        iList_02.Add(0); iList_02.Add(0); iList_02.Add(3);
                        sList_01.Add("TrailerLogs");
                    }
                    else if (iRandomDrops == 5)
                    {
                        vFuMiss = new Vector3(1098.428f, -964.3766f, 45.72594f);

                        vTarget_02 = new Vector3(1117.077f, -971.0321f, 46.35445f);
                        iList_01.Add(0); iList_01.Add(0); iList_01.Add(2);
                        fList_01.Add(15.01618f);
                        sList_01.Add("HAULER");

                        Pos2 = new Vector3(1109.738f, -977.0201f, 45.58455f);
                        fList_01.Add(358.6365f);
                        iList_02.Add(5); iList_02.Add(1); iList_02.Add(3);
                        sList_01.Add("Trailers2");
                    }
                    else if (iRandomDrops == 6)
                    {
                        vFuMiss = new Vector3(2007.269f, 2330.177f, 91.67516f);

                        vTarget_02 = new Vector3(2053.598f, 2343.118f, 95.95683f);
                        iList_01.Add(0); iList_01.Add(0); iList_01.Add(2);
                        fList_01.Add(72.90163f);
                        sList_01.Add("HAULER");

                        Pos2 = new Vector3(2072.751f, 2326.649f, 94.15781f);
                        fList_01.Add(2.400884f);
                        iList_02.Add(0); iList_02.Add(0); iList_02.Add(3);
                        sList_01.Add("Trailers4");
                    }
                    else
                    {
                        vFuMiss = new Vector3(2487.399f, -311.2546f, 92.48515f);

                        vTarget_02 = new Vector3(2452.478f, -382.8772f, 92.76414f);
                        iList_01.Add(0); iList_01.Add(0); iList_01.Add(2);
                        fList_01.Add(0.7681398f);
                        sList_01.Add("HAULER");

                        Pos2 = new Vector3(2441.679f, -403.0796f, 92.7643f);
                        fList_01.Add(7.175557f);
                        iList_02.Add(0); iList_02.Add(0); iList_02.Add(3);
                        sList_01.Add("TRFlat");

                        iMissionVar_01 = 6;
                    }
                }
                else if (iLocationX == 5)
                {
                    if (iRandomDrops == 1)
                    {
                        vFuMiss = new Vector3(2035.326f, 4975.73f, 40.52308f);

                        vTarget_02 = new Vector3(2019.71f, 4975.145f, 40.78775f);
                        iList_01.Add(0); iList_01.Add(0); iList_01.Add(1);
                        fList_01.Add(224.3041f);
                        sList_01.Add("Tractor2");

                        Pos2 = new Vector3(1973.837f, 4929.82f, 42.86214f);
                        fList_01.Add(221.9362f);
                        iList_02.Add(0); iList_02.Add(0); iList_02.Add(3);
                        sList_01.Add("BaleTrailer");

                        BeOnOff[4] = false;
                    }
                    else if (iRandomDrops == 2)
                    {
                        vFuMiss = new Vector3(349.9426f, 3450.312f, 35.24071f);

                        vTarget_02 = new Vector3(330.8282f, 3426.112f, 36.15924f);
                        iList_01.Add(0); iList_01.Add(0); iList_01.Add(2);
                        fList_01.Add(302.2827f);
                        sList_01.Add("HAULER");

                        Pos2 = new Vector3(360.6637f, 3420.844f, 35.92651f);
                        fList_01.Add(44.69192f);
                        iList_02.Add(0); iList_02.Add(0); iList_02.Add(3);
                        sList_01.Add("Tanker");
                    }
                    else if (iRandomDrops == 3)
                    {
                        vFuMiss = new Vector3(1269.771f, 2686.284f, 37.07439f);

                        vTarget_02 = new Vector3(1261.841f, 2714.181f, 37.97709f);
                        iList_01.Add(0); iList_01.Add(0); iList_01.Add(2);
                        fList_01.Add(175.1569f);
                        sList_01.Add("HAULER");

                        Pos2 = new Vector3(1255.957f, 2727.672f, 38.26131f);
                        fList_01.Add(257.0442f);
                        iList_02.Add(0); iList_02.Add(0); iList_02.Add(3);
                        sList_01.Add("TR4");
                    }
                    else if (iRandomDrops == 4)
                    {
                        vFuMiss = new Vector3(372.0221f, 4441.502f, 62.35544f);

                        vTarget_02 = new Vector3(355.9398f, 4435.545f, 62.97076f);
                        iList_01.Add(0); iList_01.Add(0); iList_01.Add(2);
                        fList_01.Add(286.9983f);
                        sList_01.Add("HAULER");

                        Pos2 = new Vector3(353.5205f, 4451.039f, 62.58485f);
                        fList_01.Add(9.616344f);
                        iList_02.Add(0); iList_02.Add(0); iList_02.Add(3);
                        sList_01.Add("TrailerLogs");
                    }
                    else if (iRandomDrops == 5)
                    {
                        vFuMiss = new Vector3(2705.346f, 3437.811f, 55.30576f);

                        vTarget_02 = new Vector3(2673.697f, 3459.063f, 55.48596f);
                        iList_01.Add(0); iList_01.Add(0); iList_01.Add(2);
                        fList_01.Add(159.7133f);
                        sList_01.Add("HAULER");

                        Pos2 = new Vector3(2688.073f, 3455.131f, 55.54828f);
                        fList_01.Add(246.7866f);
                        iList_02.Add(5); iList_02.Add(1); iList_02.Add(3);
                        sList_01.Add("Trailers2");
                    }
                    else if (iRandomDrops == 6)
                    {
                        vFuMiss = new Vector3(2927.18f, 4381.792f, 49.92478f);

                        vTarget_02 = new Vector3(2908.09f, 4396.396f, 50.00734f);
                        iList_01.Add(0); iList_01.Add(0); iList_01.Add(2);
                        fList_01.Add(203.1556f);
                        sList_01.Add("HAULER");

                        Pos2 = new Vector3(2913.583f, 4381.726f, 50.06978f);
                        fList_01.Add(300.387f);
                        iList_02.Add(0); iList_02.Add(0); iList_02.Add(3);
                        sList_01.Add("Trailers4");
                    }
                    else
                    {
                        vFuMiss = new Vector3(2392.1f, 3106.98f, 47.16814f);

                        vTarget_02 = new Vector3(2368.4104f, 3072.97778f, 47.3949661f);
                        iList_01.Add(0); iList_01.Add(0); iList_01.Add(2);
                        fList_01.Add(-85.3864975f);
                        sList_01.Add("HAULER");

                        Pos2 = new Vector3(2380.41235f, 3055.48877f, 47.5238419f);
                        fList_01.Add(-4.92874575f);
                        iList_02.Add(0); iList_02.Add(0); iList_02.Add(3);
                        sList_01.Add("TRFlat");
                        iMissionVar_01 = 7;
                    }
                }
                else
                {
                    if (iRandomDrops == 1)
                    {
                        vFuMiss = new Vector3(1421.157f, 6512.979f, 18.82927f);

                        vTarget_02 = new Vector3(1441.045f, 6549.028f, 14.71096f);
                        iList_01.Add(0); iList_01.Add(0); iList_01.Add(1);
                        fList_01.Add(151.6632f);
                        sList_01.Add("PHANTOM3");

                        Pos2 = new Vector3(1445.419f, 6567.67f, 13.804f);
                        fList_01.Add(189.62f);
                        iList_02.Add(5); iList_02.Add(2); iList_02.Add(3);
                        sList_01.Add("TR3");

                        iMissionVar_01 = 1;
                        BeOnOff[4] = false;
                    }
                    else if (iRandomDrops == 2)
                    {
                        vFuMiss = new Vector3(-271.979553f, 6054.87109f, 30.5201645f);

                        vTarget_02 = new Vector3(-264.875366f, 6064.52686f, 31.6996689f);
                        iList_01.Add(0); iList_01.Add(0); iList_01.Add(2);
                        fList_01.Add(124.022133f);
                        sList_01.Add("HAULER");

                        Pos2 = new Vector3(-266.915894f, 6043.49365f, 33.6108665f);
                        fList_01.Add(48.0526314f);
                        iList_02.Add(0); iList_02.Add(0); iList_02.Add(3);
                        sList_01.Add("Tanker");
                    }
                    else if (iRandomDrops == 3)
                    {
                        vFuMiss = new Vector3(-180.0294f, 6207.577f, 30.71581f);

                        vTarget_02 = new Vector3(-191.8061f, 6235.027f, 31.26501f);
                        iList_01.Add(0); iList_01.Add(0); iList_01.Add(2);
                        fList_01.Add(143.6489f);
                        sList_01.Add("HAULER");

                        Pos2 = new Vector3(-188.498f, 6216.789f, 31.26373f);
                        fList_01.Add(137.8783f);
                        iList_02.Add(0); iList_02.Add(0); iList_02.Add(3);
                        sList_01.Add("TR4");
                    }
                    else if (iRandomDrops == 4)
                    {
                        vFuMiss = new Vector3(-713.5744f, 5437.847f, 43.84855f);

                        vTarget_02 = new Vector3(-678.776f, 5446.003f, 47.7954f);
                        iList_01.Add(0); iList_01.Add(0); iList_01.Add(2);
                        fList_01.Add(96.20191f);
                        sList_01.Add("HAULER");

                        Pos2 = new Vector3(-693.7496f, 5450.548f, 45.94859f);
                        fList_01.Add(161.9147f);
                        iList_02.Add(0); iList_02.Add(0); iList_02.Add(3);
                        sList_01.Add("TrailerLogs");
                    }
                    else if (iRandomDrops == 5)
                    {
                        vFuMiss = new Vector3(59.17513f, 6351.615f, 30.72162f);

                        vTarget_02 = new Vector3(80.85661f, 6338.149f, 30.99732f);
                        iList_01.Add(0); iList_01.Add(0); iList_01.Add(2);
                        fList_01.Add(29.95448f);
                        sList_01.Add("HAULER");

                        Pos2 = new Vector3(66.80647f, 6328.484f, 30.99738f);
                        fList_01.Add(29.63831f);
                        iList_02.Add(5); iList_02.Add(2); iList_02.Add(3);
                        sList_01.Add("Trailers2");
                    }       //clucling bell
                    else if (iRandomDrops == 6)
                    {
                        vFuMiss = new Vector3(1475.028f, 6363.07f, 23.11986f);

                        vTarget_02 = new Vector3(1518.817f, 6335.46f, 23.89224f);
                        iList_01.Add(0); iList_01.Add(0); iList_01.Add(2);
                        fList_01.Add(63.61759f);
                        sList_01.Add("HAULER");

                        Pos2 = new Vector3(1520.656f, 6342.605f, 23.82088f);
                        fList_01.Add(79.14994f);
                        iList_02.Add(0); iList_02.Add(0); iList_02.Add(3);
                        sList_01.Add("Trailers3");
                    }
                    else
                    {
                        vFuMiss = new Vector3(-192.29f, 6224.45f, 30.73361f);

                        vTarget_02 = new Vector3(-189.22319f, 6227.36475f, 30.724144f);
                        iList_01.Add(0); iList_01.Add(0); iList_01.Add(2);
                        fList_01.Add(-133.408386f);
                        sList_01.Add("HAULER");

                        Pos2 = new Vector3(-180.428238f, 6254.9502f, 30.8538399f);
                        fList_01.Add(136.375473f);
                        iList_02.Add(0); iList_02.Add(0); iList_02.Add(3);
                        sList_01.Add("TRFlat");
                        iMissionVar_01 = 8;
                    }
                }

                if (sList_01[1] == "TrailerSmall")
                {
                    if (iList_02[1] == 1)
                    {
                        vLanding.Add(new Vector3(-1110.96301f, -969.025635f, 2.12206745f));
                        fLanding.Add(25.5751801f);

                        vLanding.Add(new Vector3(1377.99341f, -783.588928f, 67.2080688f));
                        fLanding.Add(105.335281f);

                        vLanding.Add(new Vector3(-641.539795f, 414.723083f, 101.099205f));
                        fLanding.Add(-90.2160568f);

                        vLanding.Add(new Vector3(-758.682007f, 689.416016f, 144.064377f));
                        fLanding.Add(90.4148941f);

                        vLanding.Add(new Vector3(-1449.4552f, 417.275146f, 109.657585f));
                        fLanding.Add(-22.8696251f);

                        vLanding.Add(new Vector3(2523.14404f, 2609.68311f, 37.8381119f));
                        fLanding.Add(-91.0439987f);

                        vLanding.Add(new Vector3(1821.28589f, 3762.71533f, 33.3168983f));
                        fLanding.Add(-62.9100876f);

                        vLanding.Add(new Vector3(-2355.23389f, 3983.6604f, 25.8079605f));
                        fLanding.Add(157.899887f);

                        vLanding.Add(new Vector3(-382.671906f, 6268.66553f, 30.5778828f));
                        fLanding.Add(45.7088776f);

                        vLanding.Add(new Vector3(-314.736938f, 6312.88965f, 32.2202721f));
                        fLanding.Add(42.7720032f);
                    }
                    else
                    {
                        vLanding.Add(new Vector3(-509.351288f, -1046.11047f, 23.3272915f));
                        fLanding.Add(-0.0795852169f);

                        vLanding.Add(new Vector3(-137.43605f, -1110.94556f, 21.5815506f));
                        fLanding.Add(-20.6047344f);

                        vLanding.Add(new Vector3(25.8547287f, -608.913635f, 31.4598351f));
                        fLanding.Add(-20.196516f);

                        vLanding.Add(new Vector3(85.2726364f, -394.824005f, 40.8818054f));
                        fLanding.Add(66.8641357f);

                        vLanding.Add(new Vector3(748.328857f, 1296.30579f, 360.186096f));
                        fLanding.Add(88.3792419f);

                        vLanding.Add(new Vector3(2480.62573f, 1571.38245f, 32.4823608f));
                        fLanding.Add(-1.74579334f);

                        vLanding.Add(new Vector3(853.397278f, 2382.42627f, 54.0125084f));
                        fLanding.Add(178.097137f);

                        vLanding.Add(new Vector3(217.765945f, 2804.43262f, 45.5458946f));
                        fLanding.Add(99.8036652f);

                        vLanding.Add(new Vector3(38.5795593f, 6551.83594f, 31.3189888f));
                        fLanding.Add(-138.19249f);

                        vLanding.Add(new Vector3(2974.93994f, 3485.31616f, 71.276123f));
                        fLanding.Add(-69.7504807f);
                    }
                }                                      //cartow building
                else if (sList_01[1] == "BoatTrailer")
                {
                    vLanding.Add(new Vector3(3827.93726f, 4458.40381f, 3.10548544f));
                    fLanding.Add(85.8570023f);

                    vLanding.Add(new Vector3(919.963562f, 6625.1543f, 2.90874457f));
                    fLanding.Add(173.669235f);

                    vLanding.Add(new Vector3(-1828.9895f, 4827.70752f, 2.87617302f));
                    fLanding.Add(-177.994217f);

                    vLanding.Add(new Vector3(1307.84753f, 4308.85645f, 37.7292519f));
                    fLanding.Add(-28.4870186f);

                    vLanding.Add(new Vector3(2834.63232f, -626.620483f, 1.9626832f));
                    fLanding.Add(127.369308f);

                    vLanding.Add(new Vector3(-776.093018f, -1494.7395f, 2.36467934f));
                    fLanding.Add(-70.9605255f);

                    vLanding.Add(new Vector3(-2127.01147f, -507.200745f, 2.38656282f));
                    fLanding.Add(-38.2807922f);

                    vLanding.Add(new Vector3(-2841.69141f, -50.286541f, 2.65081716f));
                    fLanding.Add(-10.0867329f);

                    vLanding.Add(new Vector3(1900.96936f, 271.449402f, 162.069397f));
                    fLanding.Add(66.7673035f);

                    vLanding.Add(new Vector3(-2113.08521f, 2616.7063f, 1.16549754f));
                    fLanding.Add(-2.8661015f);

                }                                  //cartow boats
                else if (sList_01[1] == "TrailerLogs")
                {
                    vLanding.Add(new Vector3(-600.907166f, 5314.76758f, 72.1718292f));
                    fLanding.Add(178.960266f);

                    vLanding.Add(new Vector3(-600.907166f, 5314.76758f, 72.1718292f));
                    fLanding.Add(178.960266f);
                }                                  //logs
                else if (sList_01[1] == "Tanker")
                {
                    vLanding.Add(new Vector3(201.706512f, 6609.80664f, 33.5040016f));
                    fLanding.Add(-174.628067f);

                    vLanding.Add(new Vector3(1718.03357f, 6421.43799f, 35.1461182f));
                    fLanding.Add(155.184662f);

                    vLanding.Add(new Vector3(1710.64404f, 4942.03467f, 43.9811249f));
                    fLanding.Add(55.0813866f);

                    vLanding.Add(new Vector3(2689.84521f, 3270.24731f, 57.0715866f));
                    fLanding.Add(151.022812f);

                    vLanding.Add(new Vector3(1767.00977f, 3342.54663f, 42.9462929f));
                    fLanding.Add(-56.6397514f);

                    vLanding.Add(new Vector3(238.970428f, 2581.32959f, 47.2509918f));
                    fLanding.Add(12.3229818f);

                    vLanding.Add(new Vector3(1205.6554f, 2640.80176f, 39.6584435f));
                    fLanding.Add(-49.3368835f);

                    vLanding.Add(new Vector3(-2527.49634f, 2342.89697f, 34.8895149f));
                    fLanding.Add(-146.733856f);

                    vLanding.Add(new Vector3(-2066.74878f, -307.759369f, 14.9781094f));
                    fLanding.Add(83.7123413f);

                    vLanding.Add(new Vector3(-1788.55676f, 812.106873f, 140.32756f));
                    fLanding.Add(-136.713791f);

                    vLanding.Add(new Vector3(-707.440369f, -933.286255f, 20.8482552f));
                    fLanding.Add(-179.535675f);

                    vLanding.Add(new Vector3(-513.268127f, -1215.98083f, 20.3033447f));
                    fLanding.Add(-25.5111389f);

                    vLanding.Add(new Vector3(-37.5024796f, -1745.79309f, 31.0049324f));
                    fLanding.Add(49.9814415f);

                    vLanding.Add(new Vector3(-351.678589f, -1495.59314f, 32.1655235f));
                    fLanding.Add(-89.408371f);

                    vLanding.Add(new Vector3(293.942474f, -1247.40784f, 31.1290493f));
                    fLanding.Add(89.8089905f);

                    vLanding.Add(new Vector3(1198.44507f, -1387.46313f, 37.0564842f));
                    fLanding.Add(179.531647f);

                    vLanding.Add(new Vector3(1174.90955f, -316.092377f, 71.0136032f));
                    fLanding.Add(-80.0130463f);

                    vLanding.Add(new Vector3(607.418823f, 278.556122f, 104.941833f));
                    fLanding.Add(-36.8987694f);

                    vLanding.Add(new Vector3(2550.10205f, 342.768372f, 110.295273f));
                    fLanding.Add(-92.6763077f);
                }                                       //oil
                else if (sList_01[1] == "BaleTrailer")
                {
                    vLanding.Add(new Vector3(2158.03052f, 5004.8125f, 42.1355591f));
                    fLanding.Add(-44.8184586f);

                    vLanding.Add(new Vector3(2254.65015f, 4883.06543f, 41.6035385f));
                    fLanding.Add(-136.409607f);

                    vLanding.Add(new Vector3(2523.52222f, 4750.68555f, 35.1064644f));
                    fLanding.Add(-62.4214897f);

                    vLanding.Add(new Vector3(422.064178f, 6475.21484f, 29.5487003f));
                    fLanding.Add(44.4835701f);
                }                                  //FarmBails
                else if (sList_01[1] == "TR4")
                {
                    vLanding.Add(new Vector3(99.0087585f, 6631.01367f, 31.6002846f));
                    fLanding.Add(135.440948f);

                    vLanding.Add(new Vector3(1187.34521f, 2656.61743f, 38.0703392f));
                    fLanding.Add(-43.5819778f);

                    vLanding.Add(new Vector3(-357.62558f, -118.449944f, 38.9477882f));
                    fLanding.Add(160.653152f);

                    vLanding.Add(new Vector3(-215.448395f, -1304.18994f, 31.5689278f));
                    fLanding.Add(90.2919846f);

                    vLanding.Add(new Vector3(-1111.0177f, -2015.53943f, 13.4474592f));
                    fLanding.Add(-54.0391006f);

                    vLanding.Add(new Vector3(716.472473f, -1073.01697f, 22.5152283f));
                    fLanding.Add(0.378921598f);
                }                                          //Car transport
                else if (sList_01[1] == "TRFlat")
                {
                    if (iLocationX == 1)
                    {
                        vLanding.Add(new Vector3(1243.297f, -2433.65308f, 45.3330574f));
                        fLanding.Add(-38.9057388f);

                        vLanding.Add(new Vector3(-114.813278f, -963.726685f, 27.6428108f));
                        fLanding.Add(-18.8352337f);

                        vLanding.Add(new Vector3(-473.597321f, -989.356995f, 23.9153442f));
                        fLanding.Add(-0.120605901f);

                        vLanding.Add(new Vector3(2061.81519f, 1994.63745f, 87.1274414f));
                        fLanding.Add(-79.1791687f);

                        vLanding.Add(new Vector3(1034.73145f, 2517.10449f, 47.0310822f));
                        fLanding.Add(-177.771225f);

                        vLanding.Add(new Vector3(2950.72607f, 2747.46899f, 43.837101f));
                        fLanding.Add(-76.0417709f);

                        vLanding.Add(new Vector3(302.862793f, 2825.10474f, 43.8036537f));
                        fLanding.Add(-62.97966f);

                        vLanding.Add(new Vector3(2472.52344f, 4995.29004f, 46.6257629f));
                        fLanding.Add(13.9295664f);

                        vLanding.Add(new Vector3(49.1725807f, 6543.50293f, 31.6342773f));
                        fLanding.Add(132.536423f);
                    }            //excivator
                    else if (iLocationX == 2)
                    {
                        vLanding.Add(new Vector3(-193.830093f, 6535.92236f, 11.4619503f));
                        fLanding.Add(45.2233429f);

                        vLanding.Add(new Vector3(1360.80115f, 6571.1792f, 12.4974566f));
                        fLanding.Add(-93.9727173f);

                        vLanding.Add(new Vector3(2775.99414f, -712.487549f, 6.44669056f));
                        fLanding.Add(102.446518f);

                        vLanding.Add(new Vector3(-1470.12756f, -1010.40344f, 6.73606825f));
                        fLanding.Add(-39.6965294f);

                        vLanding.Add(new Vector3(-2972.06152f, 75.4476242f, 11.8682137f));
                        fLanding.Add(67.9630661f);

                        vLanding.Add(new Vector3(-3236.25439f, 971.136353f, 13.2940416f));
                        fLanding.Add(-172.761902f);

                        vLanding.Add(new Vector3(-2416.30103f, 4216.13086f, 10.1810179f));
                        fLanding.Add(159.587128f);
                    }       //lifeguard
                    else if (iLocationX == 3)
                    {
                        vLanding.Add(new Vector3(289.530365f, 6789.52051f, 16.0601311f));
                        fLanding.Add(176.694809f);

                        vLanding.Add(new Vector3(2346.24023f, 3105.67017f, 48.5939026f));
                        fLanding.Add(80.3602295f);

                        vLanding.Add(new Vector3(2522.72705f, -383.111084f, 93.3571625f));
                        fLanding.Add(-176.703537f);

                        vLanding.Add(new Vector3(463.029999f, -3052.0293f, 6.46859169f));
                        fLanding.Add(-0.776377499f);
                    }       //tank
                    else if (iLocationX == 4)
                    {
                        vLanding.Add(new Vector3(592.515381f, -2234.84546f, 6.328722f));
                        fLanding.Add(173.125397f);

                        vLanding.Add(new Vector3(-1790.24243f, -1196.4978f, 13.3846426f));
                        fLanding.Add(46.0287552f);

                        vLanding.Add(new Vector3(-3295.36353f, 949.93573f, 2.40607309f));
                        fLanding.Add(-133.360397f);

                        vLanding.Add(new Vector3(2776.98096f, -711.937012f, 6.24071741f));
                        fLanding.Add(96.7795029f);

                        vLanding.Add(new Vector3(3817.65088f, 4462.21826f, 4.17419147f));
                        fLanding.Add(80.8513794f);

                        vLanding.Add(new Vector3(-1581.25134f, 5166.8877f, 19.9296551f));
                        fLanding.Add(-169.814514f);

                    }       //sub
                    else if (iLocationX == 5)
                    {
                        vLanding.Add(new Vector3(-469.229614f, 6012.50049f, 31.7028084f));
                        fLanding.Add(-44.8321609f);

                        vLanding.Add(new Vector3(2109.62451f, 4769.58838f, 41.5741615f));
                        fLanding.Add(103.006218f);

                        vLanding.Add(new Vector3(1765.31189f, 3308.73828f, 41.5343399f));
                        fLanding.Add(-124.641823f);

                        vLanding.Add(new Vector3(-887.014038f, -2740.71387f, 14.197897f));
                        fLanding.Add(-29.2633762f);

                        vLanding.Add(new Vector3(614.030701f, -3199.12158f, 6.43414211f));
                        fLanding.Add(0.421159804f);
                    }       //bussard
                    else
                    {
                        vLanding.Add(new Vector3(438.083588f, 6534.14014f, 28.3629112f));
                        fLanding.Add(87.4674454f);

                        vLanding.Add(new Vector3(2863.79663f, 4476.31104f, 48.8668289f));
                        fLanding.Add(71.199707f);

                        vLanding.Add(new Vector3(2552.03003f, 4678.40674f, 34.2864456f));
                        fLanding.Add(14.720993f);

                        vLanding.Add(new Vector3(2351.0332f, 4848.26465f, 41.3890457f));
                        fLanding.Add(133.8638f);

                        vLanding.Add(new Vector3(2144.23633f, 5103.41895f, 46.4994583f));
                        fLanding.Add(176.383179f);

                        vLanding.Add(new Vector3(1921.5614f, 4954.52637f, 47.875164f));
                        fLanding.Add(146.935654f);
                    }       //tracktor
                }                                       //Flat bed special
                else if (sList_01[1] == "TrailerLarge")
                {
                    BeOnOff[4] = false;

                    vLanding.Add(new Vector3(-323.085632f, 6097.1333f, 33.3882637f));
                    fLanding.Add(-134.808548f);

                    vLanding.Add(new Vector3(1706.32568f, 3765.24023f, 36.2598228f));
                    fLanding.Add(-129.21257f);

                    vLanding.Add(new Vector3(-1156.69629f, 2665.04224f, 20.0024719f));
                    fLanding.Add(-139.270493f);

                    vLanding.Add(new Vector3(-3140.04956f, 1080.09705f, 22.5441208f));
                    fLanding.Add(172.270477f);

                    vLanding.Add(new Vector3(2583.35986f, 294.780945f, 110.375427f));
                    fLanding.Add(-0.216235146f);

                    vLanding.Add(new Vector3(220.758362f, -36.8360443f, 71.6077576f));
                    fLanding.Add(-110.192146f);

                    vLanding.Add(new Vector3(-1341.56445f, -395.338104f, 38.5462875f));
                    fLanding.Add(-61.0989265f);

                    vLanding.Add(new Vector3(-667.071167f, -952.963806f, 23.1632137f));
                    fLanding.Add(90.2988434f);

                    vLanding.Add(new Vector3(-9.44796371f, -1115.28906f, 30.0155125f));
                    fLanding.Add(159.378174f);

                    vLanding.Add(new Vector3(869.133545f, -1010.2074f, 32.5693741f));
                    fLanding.Add(-87.9180527f);

                    vLanding.Add(new Vector3(822.234558f, -2139.48877f, 31.0022354f));
                    fLanding.Add(-0.858717561f);

                }                                 //Moc
                else if (sList_01[1] == "Trailers4")
                {
                    if (iLocationX == 1)
                    {
                        vLanding.Add(new Vector3(-267.513489f, -2506.23193f, 7.98866272f));
                        fLanding.Add(-129.586594f);

                        vLanding.Add(new Vector3(-755.989319f, -2590.99756f, 15.8290958f));
                        fLanding.Add(-119.83416f);

                        vLanding.Add(new Vector3(1736.01526f, -1537.75952f, 114.689445f));
                        fLanding.Add(-109.618004f);

                        vLanding.Add(new Vector3(-2350.87524f, 268.786224f, 167.507065f));
                        fLanding.Add(24.0140762f);

                        vLanding.Add(new Vector3(173.027603f, 2740.09717f, 45.4140015f));
                        fLanding.Add(-80.1745987f);

                        vLanding.Add(new Vector3(-262.224243f, 6041.43555f, 33.8759575f));
                        fLanding.Add(47.4274979f);
                    }
                    else
                    {
                        vLanding.Add(new Vector3(1054.10132f, -3185.5769f, 7.89159679f));
                        fLanding.Add(0.366428256f);

                        vLanding.Add(new Vector3(1062.34521f, -3185.0542f, 7.88837099f));
                        fLanding.Add(0.0400855467f);

                        vLanding.Add(new Vector3(1029.83923f, -3184.98706f, 7.89341259f));
                        fLanding.Add(-0.18349506f);

                        vLanding.Add(new Vector3(1001.64807f, -3185.27588f, 7.88654709f));
                        fLanding.Add(-0.658392727f);

                        vLanding.Add(new Vector3(945.273804f, -3185.6582f, 7.88733292f));
                        fLanding.Add(-0.579209387f);

                        vLanding.Add(new Vector3(904.430847f, -3185.24756f, 7.88988447f));
                        fLanding.Add(0.197140321f);

                        vLanding.Add(new Vector3(912.779846f, -3154.38989f, 7.8868866f));
                        fLanding.Add(179.355408f);

                        vLanding.Add(new Vector3(937.215454f, -3154.64844f, 7.89202595f));
                        fLanding.Add(179.897858f);

                        vLanding.Add(new Vector3(925.196472f, -3130.49438f, 7.89248562f));
                        fLanding.Add(-0.551380992f);

                        vLanding.Add(new Vector3(896.569397f, -3131.42773f, 7.88800287f));
                        fLanding.Add(-0.320617199f);

                        vLanding.Add(new Vector3(937.152161f, -3208.96851f, 7.88690424f));
                        fLanding.Add(179.848038f);

                        vLanding.Add(new Vector3(912.741577f, -3209.35864f, 7.8869276f));
                        fLanding.Add(179.083237f);

                        vLanding.Add(new Vector3(961.359619f, -3208.98486f, 7.8936162f));
                        fLanding.Add(179.297287f);

                        vLanding.Add(new Vector3(1025.8175f, -3208.93823f, 7.8591032f));
                        fLanding.Add(179.854385f);
                    }
                }                                    //Docks
                else if (sList_01[1] == "TR3")
                {
                    vLanding.Add(new Vector3(-6.853896f, -2671.194f, 6.061446f));
                    fLanding.Add(359.2327f);

                    vLanding.Add(new Vector3(1314.15588f, 4319.32959f, 38.2047119f));
                    fLanding.Add(-11.3011627f);

                    vLanding.Add(new Vector3(-743.048462f, -1411.8623f, 5.07558441f));
                    fLanding.Add(-129.855209f);
                }                                          //TheYacht
                else
                {
                    if (sList_01[1] == "Trailers2")
                    {
                        if (iList_02[1] == 0)
                        {
                            vLanding.Add(new Vector3(-175.230972f, 6315.18066f, 33.1843491f));
                            fLanding.Add(44.4998398f);

                            vLanding.Add(new Vector3(1711.97986f, 4803.80762f, 43.7056236f));
                            fLanding.Add(88.2249527f);

                            vLanding.Add(new Vector3(-2168.47314f, 4278.23975f, 50.8839073f));
                            fLanding.Add(150.181625f);

                            vLanding.Add(new Vector3(1415.77502f, 3614.80176f, 36.8567238f));
                            fLanding.Add(-161.646698f);

                            vLanding.Add(new Vector3(1968.50085f, 3836.62549f, 33.9244957f));
                            fLanding.Add(-61.3197556f);

                            vLanding.Add(new Vector3(1988.87683f, 3033.85107f, 48.9826088f));
                            fLanding.Add(56.925148f);

                            vLanding.Add(new Vector3(1231.93787f, -435.719025f, 69.6632843f));
                            fLanding.Add(75.7629013f);

                            vLanding.Add(new Vector3(-77.1392593f, 210.29512f, 98.4323807f));
                            fLanding.Add(88.9063721f);

                            vLanding.Add(new Vector3(-1584.78882f, -484.340454f, 37.502285f));
                            fLanding.Add(51.7328453f);

                            vLanding.Add(new Vector3(83.4808273f, -1305.65686f, 31.1522522f));
                            fLanding.Add(31.1827564f);

                            vLanding.Add(new Vector3(-14.9991703f, -1819.10571f, 27.7579517f));
                            fLanding.Add(139.035431f);

                            vLanding.Add(new Vector3(473.852783f, -1853.79211f, 29.4370251f));
                            fLanding.Add(31.2378998f);
                        }       //pisviser
                        else if (iList_02[1] == 2)
                        {
                            vLanding.Add(new Vector3(-131.284637f, -260.33429f, 45.0527039f));
                            fLanding.Add(160.799149f);

                            vLanding.Add(new Vector3(-180.695251f, -1438.3551f, 33.2319298f));
                            fLanding.Add(-41.8488159f);

                            vLanding.Add(new Vector3(-1679.80225f, -1065.97827f, 15.0860128f));
                            fLanding.Add(49.651844f);
                        }       //Cluckin' Bell,
                        else
                        {
                            vLanding.Add(new Vector3(-79.5839767f, 6491.02686f, 33.4201279f));
                            fLanding.Add(-135.151855f);

                            vLanding.Add(new Vector3(2671.229f, 3515.27271f, 54.6488991f));
                            fLanding.Add(67.6688766f);

                            vLanding.Add(new Vector3(583.459167f, 2792.896f, 44.0722694f));
                            fLanding.Add(3.83367729f);

                            vLanding.Add(new Vector3(-3167.20728f, 1132.35229f, 22.9611683f));
                            fLanding.Add(-23.7842388f);

                            vLanding.Add(new Vector3(-246.748489f, -232.697006f, 38.4498291f));
                            fLanding.Add(86.5699539f);

                            vLanding.Add(new Vector3(1110.49707f, -785.055908f, 60.1917152f));
                            fLanding.Add(0.401507914f);

                            vLanding.Add(new Vector3(101.056709f, -1606.48511f, 31.4083958f));
                            fLanding.Add(-128.579117f);
                        }
                    }
                    else
                    {
                        vLanding.Add(new Vector3(-79.5839767f, 6491.02686f, 33.4201279f));
                        fLanding.Add(-135.151855f);

                        vLanding.Add(new Vector3(2671.229f, 3515.27271f, 54.6488991f));
                        fLanding.Add(67.6688766f);

                        vLanding.Add(new Vector3(583.459167f, 2792.896f, 44.0722694f));
                        fLanding.Add(3.83367729f);

                        vLanding.Add(new Vector3(-246.748489f, -232.697006f, 38.4498291f));
                        fLanding.Add(86.5699539f);

                        vLanding.Add(new Vector3(-1342.24048f, -750.770569f, 24.3265934f));
                        fLanding.Add(37.3924332f);

                        vLanding.Add(new Vector3(1110.49707f, -785.055908f, 60.1917152f));
                        fLanding.Add(0.401507914f);

                        vLanding.Add(new Vector3(101.056709f, -1606.48511f, 31.4083958f));
                        fLanding.Add(-128.579117f);
                    }
                    //0-pisvisor
                    //1-blank
                    //2-cluckbell
                    //3-burgershot-non wov upandatom
                    //5-water-wov
                    //6-luqur-wov
                    //7-sprunk-wov
                    //8.dollar pills-wov
                    //if (sList_01[1] == "Trailers2" || sList_01[1] == "Trailers3")
                }      //Cluckin' Bell, Pisswasser, Up-n-Atom Burger.
            }

            if (BeOnOff[5])
                iMissionVar_03 = 1;
            else
                iMissionVar_03 = 2;

            int iRanDes = RandInt(0, vLanding.Count - 1);
            vTarget_01 = vLanding[iRanDes];
            vTarget_01.Z -= 1.00f;
            fList_01.Add(fLanding[iRanDes]);


            VehicleSpawn(sList_01[0], vTarget_02, fList_01[0], false, false, true, false, iList_01[0], iList_01[1], iMissionVar_03, 1, true);
            VehicleSpawn(sList_01[1], Pos2, fList_01[1], false, false, false, false, iList_02[0], iList_02[1], iList_02[2], 2, false);
            VehicleSpawn(sList_01[1], vTarget_01, fList_01[2], false, false, false, false, iList_02[0], iList_02[1], 0, 3, false);

            vTarget_01.Z = vTarget_01.Z - 1.1f;
            vGetaway = vTarget_02;

            iTime_01.Clear();
            iList_01.Clear();
            iList_02.Clear();
            sList_01.Clear();
            iTime_01.Add(0);
            iTime_01.Add(0);

            if (BeOnOff[5])
                sList_01 = BuildMishLists(1);
            else
                sList_01 = BuildMishLists(2);

            iMissionVar_04 = 0;

            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Truckin, iRandomDrops ==  " + iRandomDrops, tEx);

            bOnTheJob = true;
        }
        public class TruckBuild
        {
            public int Local { get; set; }

            public Vector3 FubarStop { get; set; }
            public Vector3 TruckinStart01 { get; set; }
            public float TruckinDir01 { get; set; }
            public Vector3 TruckinStart02 { get; set; }
            public float TruckinDir02 { get; set; }
            public List<Vector3> TruckinEnd { get; set; }
            public List<float> TruckinDir03 { get; set; }
            public string TruckinTrail { get; set; }
            public int VehVar { get; set; }
            public int LiveryExtra { get; set; }
            public int VehLivery { get; set; }

            public TruckBuild()
            {
                TruckinEnd = new List<Vector3>();
                TruckinDir03 = new List<float>();
            }
        }
        private void GetAwayDriver()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("GetAwayDriver Loc == " + iLocationX, tEx);

            if (iLocationX == 99)
            {
                BigMessageThread.MessageInstance.ShowSimpleShard("Pacific Standard", "", 5000);
                ttTextBar_01.Label = "" + sAltLang[292] + "";
                iMissionVar_03 = 4500000;
            }
            else
            {
                BigMessageThread.MessageInstance.ShowSimpleShard(sAltLang[1], "", 5000);
                iMissionVar_03 = RandInt(1100000, 1400000);
            }

            VTBTimerPool.Add(ttTextBar_01);
            ttTextBar_01.Label = "" + sAltLang[292] + "";

            iList_01.Clear();
            iList_02.Clear();
            iFireList.Clear();
            iTime_01.Clear();
            BeOnOff.Clear();
            MishVic.Clear();
            MishPed.Clear();

            BeOnOff.Add(false);//            bAlowAir       0
            BeOnOff.Add(false);//            bNoDamages     1
            BeOnOff.Add(true);//             bIgnoreFirst   2
            BeOnOff.Add(true);//             bMoveYourV     3
            BeOnOff.Add(false);//            bNotWanted     4
            BeOnOff.Add(false);//            bBankAlarm     5
            BeOnOff.Add(false);//            b4Seater       6
            BeOnOff.Add(false);//            bLostDollas    7
            BeOnOff.Add(false);//            bCashFlow      8
            BeOnOff.Add(false);//            bCashOver      9
            BeOnOff.Add(false);//            bPedCanFly     10

            if (FindBuiltMissions(2))
            {

            }

            if (iLocationX == 1)
            {
                Vector3 Pos = new Vector3(153.14f, -1040.56f, 29.36f);
                NPCSpawn(RandNPC(13), Pos, 77.30f, 50, 120, 0, 1, 0, null, 0, false, false, 0, 0);

                Vector3 Pos2 = new Vector3(146.36f, -1037.06f, 29.36f);
                NPCSpawn(RandNPC(13), Pos, 77.30f, 50, 120, 0, 1, 0, null, 0, false, false, 0, 0);

                Vector3 TellaPos = new Vector3(149.51f, -1042.43f, 29.37f);
                NPCSpawn("cs_bankman", Pos, 77.30f, 50, 120, 0, 1, 0, null, 0, false, false, 0, 0);

                Vector3 Rob1p = new Vector3(143.89f, -1042.30f, 29.36f);
                NPCSpawn("mp_m_freemode_01", Pos, 77.30f, 50, 120, 1, 2, 0, null, 9, false, false, 1, 0);
                NPCSpawn("mp_m_freemode_01", Pos, 77.30f, 50, 120, 1, 3, 0, null, 9, false, false, 2, 0);
                NPCSpawn("mp_m_freemode_01", Pos, 77.30f, 50, 120, 1, 4, 0, null, 9, false, false, 3, 0);

                vGetaway = new Vector3(1889.65f, 334.11f, 161.75f);
                fMission_01 = 230.15f;
                sVehType = "Buzzard";

                vTarget_01 = new Vector3(153.49f, -1028.8f, 28.27f);
                vTarget_02 = new Vector3(1876.16f, 305.61f, 162.7f);
                vTarget_03 = new Vector3(150.75f, -1038.1f, 28.37f);
            }
            else if (iLocationX == 2)
            {
                if (RandBool(12))
                {
                    Vector3 Pos = new Vector3(-1210.38f, -328.4f, 37.78f);
                    NPCSpawn(RandNPC(13), Pos, 139.00f, 50, 120, 0, 1, 0, null, 0, false, false, 0, 0);
                    Vector3 Pos2 = new Vector3(-1218.69f, -331.80f, 37.78f);
                    NPCSpawn(RandNPC(13), Pos, 341.00f, 50, 120, 0, 1, 0, null, 0, false, false, 0, 0);

                    Vector3 TellaPos = new Vector3(-1213.4f, -332.9f, 37.78f);
                    NPCSpawn("cs_bankman", Pos, 212.40f, 50, 120, 0, 1, 0, null, 0, false, false, 0, 0);

                    Vector3 Rob1p = new Vector3(-1215.89f, -335.14f, 37.78f);
                    NPCSpawn("mp_m_freemode_01", Pos, 77.30f, 50, 120, 1, 2, 0, null, 9, false, false, 1, 0);
                    NPCSpawn("mp_m_freemode_01", Pos, 77.30f, 50, 120, 1, 3, 0, null, 9, false, false, 2, 0);
                    NPCSpawn("mp_m_freemode_01", Pos, 77.30f, 50, 120, 1, 4, 0, null, 9, false, false, 3, 0);

                    sVehType = "Akula";
                    vGetaway = new Vector3(-453.58f, 1146.85f, 325.03f);
                    fMission_01 = 325.52f;

                    vTarget_01 = new Vector3(-1215.89f, -316.1f, 36.6f);
                    vTarget_02 = new Vector3(-414.55f, 1180.28f, 324.64f);
                    vTarget_03 = new Vector3(-1213.96f, -328.49f, 36.79f);
                }
                else
                {
                    Vector3 Pos = new Vector3(-355.93f, -46.87f, 49.87f);
                    NPCSpawn(RandNPC(13), Pos, 234.39f, 50, 120, 0, 1, 0, null, 0, false, false, 0, 0);

                    Vector3 Pos2 = new Vector3(-348.05f, -50.75f, 49.87f);
                    NPCSpawn(RandNPC(13), Pos, 87.90f, 50, 120, 0, 1, 0, null, 0, false, false, 0, 0);

                    Vector3 TellaPos = new Vector3(-351.39f, -51.48f, 49.03f);
                    NPCSpawn("cs_bankman", Pos, 332.69f, 50, 120, 0, 1, 0, null, 0, false, false, 0, 0);

                    Vector3 Rob1p = new Vector3(-356.51f, -50.15f, 49.87f);
                    NPCSpawn("mp_m_freemode_01", Pos, 77.30f, 50, 120, 1, 2, 0, null, 3, false, false, 1, 0);
                    NPCSpawn("mp_m_freemode_01", Pos, 77.30f, 50, 120, 1, 3, 0, null, 3, false, false, 2, 0);
                    NPCSpawn("mp_m_freemode_01", Pos, 77.30f, 50, 120, 1, 4, 0, null, 3, false, false, 3, 0);

                    vGetaway = new Vector3(-1623.89f, -2281.51f, 0.27f);
                    fMission_01 = 47.60f;
                    sVehType = "Speeder";

                    vTarget_01 = new Vector3(-333.14f, -34.69f, 46.68f);
                    vTarget_02 = new Vector3(-1574.94f, -2303.91f, 4.91f);
                    vTarget_03 = new Vector3(-350.13f, -47.35f, 48.04f);
                }
            }
            else if (iLocationX == 3)
            {
                Vector3 Pos = new Vector3(-2963.27f, 485.51f, 15.7f);
                NPCSpawn(RandNPC(13), Pos, 167.00f, 50, 120, 0, 1, 0, null, 0, false, false, 0, 0);
                Vector3 Pos2 = new Vector3(-2965.05f, 478.89f, 15.7f);
                NPCSpawn(RandNPC(13), Pos, 232.70f, 50, 120, 0, 1, 0, null, 0, false, false, 0, 0);

                Vector3 TellaPos = new Vector3(-2961.03f, 482.98f, 15.7f);
                NPCSpawn("cs_bankman", Pos, 332.69f, 50, 120, 0, 1, 0, null, 0, false, false, 0, 0);

                Vector3 Rob1p = new Vector3(-2960.44f, 477.55f, 15.7f);
                NPCSpawn("mp_m_freemode_01", Pos, 77.30f, 50, 120, 1, 2, 0, null, 9, false, false, 1, 0);
                NPCSpawn("mp_m_freemode_01", Pos, 77.30f, 50, 120, 1, 3, 0, null, 9, false, false, 2, 0);
                NPCSpawn("mp_m_freemode_01", Pos, 77.30f, 50, 120, 1, 4, 0, null, 9, false, false, 3, 0);

                sVehType = "Speeder";
                vGetaway = new Vector3(-2955.16f, 3581.19f, -1.07f);
                fMission_01 = 24.29f;

                vTarget_01 = new Vector3(-2973.78f, 481.35f, 14.25f);
                vTarget_02 = new Vector3(-2935.22f, 3531.49f, 7.06f);
                vTarget_03 = new Vector3(-2965.327f, 482.8784f, 14.7068f);
            }
            else if (iLocationX == 4)
            {
                BeOnOff[10] = true;

                Vector3 Pos = new Vector3(317.33f, -278.82f, 54.16f);
                NPCSpawn(RandNPC(13), Pos, 63.00f, 50, 120, 0, 1, 0, null, 0, false, false, 0, 0);
                Vector3 Pos2 = new Vector3(309.55f, -275.55f, 54.16f);
                NPCSpawn(RandNPC(13), Pos, 246.80f, 50, 120, 0, 1, 0, null, 0, false, false, 0, 0);

                Vector3 TellaPos = new Vector3(313.73f, -280.54f, 54.16f);
                NPCSpawn("cs_bankman", Pos, 212.40f, 50, 120, 0, 1, 0, null, 0, false, false, 0, 0);

                Vector3 Rob1p = new Vector3(308.59f, -279.34f, 54.16f);
                NPCSpawn("mp_m_freemode_01", Pos, 77.30f, 50, 120, 1, 2, 0, null, 9, false, false, 1, 0);
                NPCSpawn("mp_m_freemode_01", Pos, 77.30f, 50, 120, 1, 3, 0, null, 9, false, false, 2, 0);
                NPCSpawn("mp_m_freemode_01", Pos, 77.30f, 50, 120, 1, 4, 0, null, 9, false, false, 3, 0);

                sVehType = "Luxor2";
                vGetaway = new Vector3(1702.16f, 3256.69f, 40.01f);
                fMission_01 = 106.06f;

                vTarget_01 = new Vector3(318.37f, -268.25f, 52.75f);
                vTarget_02 = new Vector3(1727.79f, 3251.74f, 40.23f);
                vTarget_03 = new Vector3(314.91f, -276.55f, 53.17f);
            }
            else if (iLocationX == 5)
            {
                Vector3 Pos = new Vector3(1172.02f, 2704.79f, 38.08f);
                NPCSpawn(RandNPC(23), Pos, 291.00f, 50, 120, 0, 1, 0, null, 0, false, false, 0, 0);
                Vector3 Pos2 = new Vector3(1180.37f, 2704.63f, 38.08f);
                NPCSpawn(RandNPC(23), Pos, 2.02f, 50, 120, 0, 1, 0, null, 0, false, false, 0, 0);

                Vector3 TellaPos = new Vector3(1174.78f, 2708.3f, 38.08f);
                NPCSpawn("cs_bankman", Pos, 212.40f, 50, 120, 0, 1, 0, null, 0, false, false, 0, 0);

                Vector3 Rob1p = new Vector3(1180.47f, 2709.34f, 38.08f);
                NPCSpawn("mp_m_freemode_01", Pos, 77.30f, 50, 120, 1, 2, 0, null, 9, false, false, 1, 0);
                NPCSpawn("mp_m_freemode_01", Pos, 77.30f, 50, 120, 1, 3, 0, null, 9, false, false, 2, 0);
                NPCSpawn("mp_m_freemode_01", Pos, 77.30f, 50, 120, 1, 4, 0, null, 9, false, false, 3, 0);

                sVehType = "Marquis";
                vGetaway = new Vector3(3852.91f, 4472.09f, -2.48f);
                fMission_01 = 276.27f;

                vTarget_01 = new Vector3(1175.87f, 2696.26f, 36.96f);
                vTarget_02 = new Vector3(3821.78f, 4461.86f, 2.5f);
                vTarget_03 = new Vector3(1175.08f, 2704.38f, 37.09f);
            }
            else if (iLocationX == 99)
            {
                iMissionSeq = 0;
                iJobType = 2;

                Vector3 Pos = new Vector3(240.84f, 220.54f, 106.28f);
                NPCSpawn(RandNPC(23), Pos, 77.3f, 50, 120, 0, 1, 0, null, 0, false, false, 0, 0);
                Vector3 Pos2 = new Vector3(256.06f, 212.28f, 106.28f);
                NPCSpawn(RandNPC(23), Pos2, 144.2f, 50, 120, 0, 1, 0, null, 0, false, false, 0, 0);

                Vector3 TellaPos = new Vector3(252.73f, 226.67f, 106.28f);
                NPCSpawn("cs_bankman", TellaPos, 212.40f, 50, 120, 0, 1, 0, null, 0, false, false, 0, 0);

                Vector3 Rob1p = new Vector3(235.14f, 217.75f, 106.28f);
                NPCSpawn("mp_m_freemode_01", Rob1p, 77.30f, 50, 120, 1, 2, 0, null, 9, false, false, 1, 0);
                NPCSpawn("mp_m_freemode_01", Rob1p, 77.30f, 50, 120, 1, 3, 0, null, 9, false, false, 2, 0);
                NPCSpawn("mp_m_freemode_01", Rob1p, 77.30f, 50, 120, 1, 4, 0, null, 9, false, false, 3, 0);

                vGetaway = new Vector3(-1580.96f, 4388.05f, -0.8f);
                fMission_01 = 42.0f;
                sVehType = "Dinghy4";

                vTarget_01 = new Vector3(226.55f, 211.96f, 104.54f);
                vTarget_02 = new Vector3(-1608.15f, 4371.05f, 1.44f);
                vTarget_03 = new Vector3(237.3f, 217.47f, 106.2f);

                BeOnOff[0] = true;

                bPlayingNewMissions = true;
                bLookingForPB = false;
                bJobLoaded = true;
            }
            else
            {
                Vector3 Pos = new Vector3(-113.77f, 6465.91f, 31.62f);
                NPCSpawn(RandNPC(23), Pos, 291.00f, 50, 120, 0, 1, 0, null, 0, false, false, 0, 0);
                Vector3 Pos2 = new Vector3(-103.79f, 6468.15f, 31.62f);
                NPCSpawn(RandNPC(23), Pos, 2.02f, 50, 120, 0, 1, 0, null, 0, false, false, 0, 0);

                Vector3 TellaPos = new Vector3(-111.15f, 6470.05f, 31.62f);
                NPCSpawn("cs_bankman", Pos, 212.40f, 50, 120, 0, 1, 0, null, 0, false, false, 0, 0);

                Vector3 Rob1p = new Vector3(-101.58f, 6463.33f, 31.62f);
                NPCSpawn("mp_m_freemode_01", Pos, 77.30f, 50, 120, 1, 2, 0, null, 9, false, false, 1, 0);
                NPCSpawn("mp_m_freemode_01", Pos, 77.30f, 50, 120, 1, 3, 0, null, 9, false, false, 2, 0);
                NPCSpawn("mp_m_freemode_01", Pos, 77.30f, 50, 120, 1, 4, 0, null, 9, false, false, 3, 0);

                sVehType = "Frogger";
                vGetaway = new Vector3(3344.84f, 5507f, 19.2f);
                fMission_01 = 227.0f;

                vTarget_01 = new Vector3(-117.14f, 6455.7f, 30.42f);
                vTarget_02 = new Vector3(3336f, 5474.17f, 18.83f);
                vTarget_03 = new Vector3(-110.94f, 6462.72f, 30.64f);
            }

            iTime_01.Add(0);
            iPlayGroup = Function.Call<int>(Hash.CREATE_GROUP, 0);
            if (iPlayGroup != 0)
            {
                Function.Call(Hash.SET_PED_AS_GROUP_MEMBER, Game.Player.Character, iPlayGroup);
                Function.Call(Hash.SET_PED_AS_GROUP_LEADER, Game.Player.Character, iPlayGroup);
            }

            bOnTheJob = true;
        }
        private void Packages()
        {
            //iPackTimein = 60;//1 mins
            //iPackTimein = 120;//2 mins
            //iPackTimein = 180;//3 mins
            //iPackTimein = 240;//4 mins
            //iPackTimein = 300;//5 mins
            //iPackTimein = 360;//6 mins
            //iPackTimein = 420;//7 mins
            //iPackTimein = 480;//8 mins
            //iPackTimein = 540;//9 mins
            //iPackTimein = 600;//10 mins

            BigMessageThread.MessageInstance.ShowSimpleShard(sAltLang[2], "", 5000);
            VectorList_01.Clear();
            VectorList_02.Clear();
            iDeliverList.Clear();
            VTBTimerPool.Add(ttTextBar_01);
            ttTextBar_01.Label = "" + sAltLang[293] + "";
            ttTextBar_02.Label = "" + sAltLang[291] + "";
            fCorSize = 5.00f;
            iTime_01.Clear();

            iTime_01.Add(0);//iPackTimein   0
            iTime_01.Add(0);//iPackPlus     1
        
            BeOnOff.Clear();

            BeOnOff.Add(false);//bPackCount 0
            BeOnOff.Add(false);//bMoveYourV 1
            BeOnOff.Add(false);//bTruckBlip 2
            BeOnOff.Add(false);//bLiveExport 3
            BeOnOff.Add(false);//bTargTogg 4

            int iRandomDrops = 0;

            if (bTestRun)
            {
                bJobLoaded = true;
                iJobType = 3;
                iRandomDrops = 5;
            }
            else
            {
                if (FindBuiltMissions(2))
                {
                    if (bBulderOnly)
                        iRandomDrops = 5;
                    else
                        iRandomDrops = FindRandom(2, 1, 5);
                }
                else
                    iRandomDrops = FindRandom(2, 1, 4);
            }

            if (bOnCayoLand)
            {
                sList_01.Clear();

                vGetaway = new Vector3(4491.126f, -4511.222f, 4.357188f); fGetDir = 289.3603f;
                if (bTrainM)
                    VehicleSpawn("WINKY", vGetaway, fGetDir, false, false, true, false, 0, 0, 4, 1, true);
                else
                    VehicleSpawn("REBEL", vGetaway, fGetDir, false, false, true, false, 0, 0, 4, 1, true);

                List<Vector3> Pos_01 = new List<Vector3>();

                //Graple
                Pos_01.Add(new Vector3(3901.277f, -4694.813f, 4.234453f));
                Pos_01.Add(new Vector3(4495.951f, -4734.207f, 10.84465f));
                Pos_01.Add(new Vector3(4873.813f, -4485.711f, 10.15341f));
                Pos_01.Add(new Vector3(4863.543f, -4635.776f, 14.18864f));
                Pos_01.Add(new Vector3(4895.215f, -4792.363f, 2.784456f));
                Pos_01.Add(new Vector3(5107.291f, -4578.146f, 29.71777f));
                Pos_01.Add(new Vector3(5130.018f, -4609.434f, 12.69085f));
                Pos_01.Add(new Vector3(4866.521f, -5160.332f, 2.434262f));
                Pos_01.Add(new Vector3(5140.08f, -5085.565f, 2.292881f));
                Pos_01.Add(new Vector3(4903.876f, -5331.577f, 29.14107f));
                Pos_01.Add(new Vector3(5266.809f, -5430.166f, 141.041f));
                Pos_01.Add(new Vector3(5612.969f, -5651.019f, 10.05457f));
                Pos_01.Add(new Vector3(5600.291f, -5459.215f, 10.72322f));
                Pos_01.Add(new Vector3(5593.851f, -5224.01f, 14.34492f));
                Pos_01.Add(new Vector3(5403.367f, -5174.496f, 31.46212f));

                while (VectorList_01.Count < 4)
                {
                    int iRand = RandInt(0, Pos_01.Count - 1);
                    VectorList_01.Add(Pos_01[iRand]);
                    Pos_01.RemoveAt(iRand);
                    sList_01.Add("h4_prop_h4_bag_hook_01a");
                }
                Pos_01.Clear();

                //Clothing
                Pos_01.Add(new Vector3(4501.908f, -4522.904f, 4.412361f));
                Pos_01.Add(new Vector3(4527.481f, -4535.834f, 7.552054f));
                Pos_01.Add(new Vector3(4765.726f, -4777.026f, 4.855045f));
                Pos_01.Add(new Vector3(5059.213f, -4591.081f, 2.906231f));
                Pos_01.Add(new Vector3(5077.466f, -4630.137f, 2.390313f));
                Pos_01.Add(new Vector3(5169.982f, -4675.766f, 2.435424f));
                Pos_01.Add(new Vector3(5164.579f, -5049.855f, 4.335027f));
                Pos_01.Add(new Vector3(5010.848f, -5201.055f, 2.516255f));
                Pos_01.Add(new Vector3(4927.385f, -5272.393f, 5.658763f));
                Pos_01.Add(new Vector3(4950.118f, -5321.06f, 8.083879f));
                Pos_01.Add(new Vector3(4886.743f, -5460.385f, 30.73853f));
                Pos_01.Add(new Vector3(5108.986f, -5522.397f, 54.2145f));
                Pos_01.Add(new Vector3(5272.928f, -5425.16f, 65.59611f));

                while (VectorList_01.Count < 8)
                {
                    int iRand = RandInt(0, Pos_01.Count - 1);
                    VectorList_01.Add(Pos_01[iRand]);
                    Pos_01.RemoveAt(iRand);
                    sList_01.Add("h4_prop_h4_crate_cloth_01a");
                }
                Pos_01.Clear();

                //BoltCutters
                Pos_01.Add(new Vector3(4074.888f, -4664.603f, 4.288707f));
                Pos_01.Add(new Vector3(4415.872f, -4478.275f, 4.334019f));
                Pos_01.Add(new Vector3(4535.767f, -4543.152f, 4.970639f));
                Pos_01.Add(new Vector3(4505.364f, -4654.637f, 11.63728f));
                Pos_01.Add(new Vector3(5071.25f, -4634.065f, 2.359646f));
                Pos_01.Add(new Vector3(4841.807f, -5171.894f, 2.265403f));
                Pos_01.Add(new Vector3(4878.454f, -5114.993f, 2.197809f));
                Pos_01.Add(new Vector3(5215.129f, -5126.617f, 6.260477f));
                Pos_01.Add(new Vector3(5328.317f, -5265.676f, 33.18594f));
                Pos_01.Add(new Vector3(5400.062f, -5172.845f, 31.38728f));
                Pos_01.Add(new Vector3(5422.316f, -5239.97f, 35.46599f));

                while (VectorList_01.Count < 12)
                {
                    int iRand = RandInt(0, Pos_01.Count - 1);
                    VectorList_01.Add(Pos_01[iRand]);
                    Pos_01.RemoveAt(iRand);
                    sList_01.Add("h4_prop_h4_bolt_cutter_01a");
                }
                Pos_01.Clear();

                //Cutting Powder
                Pos_01.Add(new Vector3(5404.683f, -5170.87f, 31.43855f));
                Pos_01.Add(new Vector3(5215.685f, -5131.827f, 6.293792f));
                Pos_01.Add(new Vector3(4919.547f, -5273.42f, 5.646538f));

                int iRand2 = RandInt(0, Pos_01.Count - 1);
                VectorList_01.Add(Pos_01[iRand2]);
                sList_01.Add("h4_prop_h4_powdercleaner_01a");

                vTarget_05 = vGetaway;

                Packages_SortCayo(sList_01, VectorList_01, new Vector3(4985.809f, -5713.806f, 18.8802f));
                iParcelCost = RandInt(25, 45);
                sMissionVar_01 = "h4_prop_h4_powdercleaner_01a";
                vTarget_05.Z = vTarget_05.Z - 1.00f;

                iTime_01[0] = 600;
            }
            else if (iRandomDrops == 5)
            {
                int iBuild = 0;
                
                if (!bTestRun)
                    iBuild = RandInt(0, MyMissions.PackersXM.Count() - 1);

                vFuMiss = MyMissions.PackersXM[iBuild].FarstStart;
                vGetaway = MyMissions.PackersXM[iBuild].PackVehStart;
                fGetDir = MyMissions.PackersXM[iBuild].PackVehDir;
                if (MyMissions.PackersXM[iBuild].Livery != -1)
                    VehicleSpawn(MyMissions.PackersXM[iBuild].PackVehType, vGetaway, fGetDir, false, false, true, false, 5, MyMissions.PackersXM[iBuild].Livery, 4, 1, true);
                else
                    VehicleSpawn(MyMissions.PackersXM[iBuild].PackVehType, vGetaway, fGetDir, false, false, true, false, 0, 0, 4, 1, true);
                VectorList_02 = new List<Vector3>(MyMissions.PackersXM[iBuild].PackDrops);
                vTarget_05 = vGetaway;
                vTarget_05.Z -= 1.00f;
                iParcelCost = RandInt(10, 30);
                sMissionVar_01 = MyMissions.PackersXM[iBuild].PackDropType;
                if (!bTestRun)
                {
                    if (VectorList_02.Count > 6)
                    {
                        int iMy = VectorList_02.Count - 1;
                        Packages_DeliverThis(RandInt(4, iMy));
                    }
                    else
                        Packages_DeliverThis(VectorList_02.Count - 1);
                }
                else
                {
                    VectorList_01 = VectorList_02;
                    for (int i = 0; i < VectorList_01.Count; i++)
                        iDeliverList.Add(i);
                }
                if (VectorList_01.Count > 1)
                    iTime_01[0] = (int)VectorList_01[0].DistanceTo(VectorList_01[VectorList_01.Count - 1]);

                iTime_01[0] += (VectorList_01.Count * 100);
            }
            else if (iLocationX == 1)
            {
                int iRanBox = RandInt(2, 9);
                if (iRanBox < 4)
                    iTime_01[0] = 180;//3 mins
                else if (iRanBox == 4)
                    iTime_01[0] = 240;//4 mins
                else if (iRanBox == 5)
                    iTime_01[0] = 300;//5 mins
                else if (iRanBox == 6)
                    iTime_01[0] = 360;//6 mins
                else if (iRanBox == 7)
                    iTime_01[0] = 420;//7 mins
                else if (iRanBox == 8)
                    iTime_01[0] = 480;//8 mins
                else
                    iTime_01[0] = 540;//9 mins

                vFuMiss = new Vector3(-412.229f, -2840.585f, 5.491673f);

                vGetaway = new Vector3(-417.4f, -2853.87f, 5.64f);
                fGetDir = 182.6f;
                VehicleSpawn("Mule2", vGetaway, fGetDir, false, false, true, false, 1, 4, 4, 1, false);
                if (iRandomDrops == 1)  // Seaport
                {
                    VectorList_02.Add(new Vector3(606.1331f, -3076.071f, 6.06932f));
                    VectorList_02.Add(new Vector3(670.8724f, -2656.838f, 6.081181f));
                    VectorList_02.Add(new Vector3(368.3771f, -2449.551f, 6.103002f));
                    VectorList_02.Add(new Vector3(262.8023f, -2501.746f, 6.440527f));
                    VectorList_02.Add(new Vector3(134.7997f, -2477.386f, 5.999991f));
                    VectorList_02.Add(new Vector3(116.2258f, -2559.884f, 5.999993f));
                    VectorList_02.Add(new Vector3(11.09534f, -2675.23f, 6.008894f));
                    VectorList_02.Add(new Vector3(-44.1941f, -2729.565f, 6.147783f));
                    VectorList_02.Add(new Vector3(-111.609f, -2675.784f, 6.006345f));
                    VectorList_02.Add(new Vector3(-234.9835f, -2663.382f, 6.000295f));
                    VectorList_02.Add(new Vector3(-289.2259f, -2459.019f, 7.294806f));
                    VectorList_02.Add(new Vector3(-336.0657f, -2457.042f, 7.294814f));
                    VectorList_02.Add(new Vector3(-299.5649f, -2598.12f, 6.000296f));
                    VectorList_02.Add(new Vector3(-314.4655f, -2777.074f, 5.00024f));
                    VectorList_02.Add(new Vector3(1211.444f, -3103.413f, 6.027918f));
                    VectorList_02.Add(new Vector3(1195.812f, -3254.429f, 7.095187f));
                    VectorList_02.Add(new Vector3(755.6094f, -3181.837f, 7.405778f));
                    VectorList_02.Add(new Vector3(821.003f, -3196.436f, 5.900819f));
                    VectorList_02.Add(new Vector3(814.2813f, -2982.313f, 6.02089f));
                }
                else if (iRandomDrops == 2)  // Airport
                {
                    VectorList_02.Add(new Vector3(-541.3153f, -2227.74f, 6.394024f));
                    VectorList_02.Add(new Vector3(-623.8204f, -2361.339f, 13.95158f));
                    VectorList_02.Add(new Vector3(-685.3821f, -2413.586f, 13.94453f));
                    VectorList_02.Add(new Vector3(-705.3857f, -2448.599f, 13.9444f));
                    VectorList_02.Add(new Vector3(-710.1678f, -2528.124f, 13.9444f));
                    VectorList_02.Add(new Vector3(-815.3716f, -2782.938f, 13.94609f));
                    VectorList_02.Add(new Vector3(-925.5151f, -2547.041f, 14.05221f));
                    VectorList_02.Add(new Vector3(-863.3908f, -2387.771f, 14.02718f));
                    VectorList_02.Add(new Vector3(-832.1877f, -2347.607f, 14.57062f));
                    VectorList_02.Add(new Vector3(-1070.43f, -2249.979f, 12.10998f));
                    VectorList_02.Add(new Vector3(-1098.497f, -2138.16f, 13.39889f));
                    VectorList_02.Add(new Vector3(-1168.532f, -2022.022f, 13.16054f));
                    VectorList_02.Add(new Vector3(-1071.398f, -2003.326f, 15.78551f));
                    VectorList_02.Add(new Vector3(-967.1698f, -2069.492f, 9.405894f));
                    VectorList_02.Add(new Vector3(-821.2372f, -2103.405f, 8.960634f));
                    VectorList_02.Add(new Vector3(-754.8344f, -2226.979f, 5.786045f));
                    VectorList_02.Add(new Vector3(-429.6969f, -2166.995f, 10.32835f));
                    VectorList_02.Add(new Vector3(-457.2208f, -2266.364f, 8.515819f));
                    VectorList_02.Add(new Vector3(-110.3373f, -2235.801f, 7.811676f));
                    VectorList_02.Add(new Vector3(-398.9398f, -1876.624f, 20.52785f));
                    VectorList_02.Add(new Vector3(-468.7385f, -1717.421f, 18.79402f));
                    VectorList_02.Add(new Vector3(-553.7200f, -1813.109f, 22.82181f));
                    VectorList_02.Add(new Vector3(-591.1908f, -1774.49f, 22.77674f));
                    VectorList_02.Add(new Vector3(-586.3838f, -1588.896f, 26.75115f));
                }
                else if (iRandomDrops == 3) // cypress.mess
                {
                    VectorList_02.Add(new Vector3(1736.674f, -1609.645f, 112.4697f));
                    VectorList_02.Add(new Vector3(1561.137f, -2133.279f, 77.4785f));
                    VectorList_02.Add(new Vector3(1459.511f, -1935.92f, 71.30696f));
                    VectorList_02.Add(new Vector3(1455.132f, -1682.857f, 66.06307f));
                    VectorList_02.Add(new Vector3(1193.554f, -1240.154f, 36.32576f));
                    VectorList_02.Add(new Vector3(1122.821f, -1303.704f, 34.71646f));
                    VectorList_02.Add(new Vector3(994.2419f, -1555.895f, 30.75485f));
                    VectorList_02.Add(new Vector3(918.1321f, -1516.955f, 30.96606f));
                    VectorList_02.Add(new Vector3(903.4687f, -1590.887f, 30.22392f));
                    VectorList_02.Add(new Vector3(804.6454f, -1666.87f, 30.86449f));
                    VectorList_02.Add(new Vector3(746.9606f, -1862.089f, 29.29224f));
                    VectorList_02.Add(new Vector3(1025.895f, -1686.251f, 33.57116f));
                    VectorList_02.Add(new Vector3(928.8152f, -1726.541f, 32.15963f));
                    VectorList_02.Add(new Vector3(897.4868f, -1864.518f, 30.61937f));
                    VectorList_02.Add(new Vector3(1087.357f, -1970.058f, 31.01467f));
                    VectorList_02.Add(new Vector3(973.9832f, -1978.706f, 30.63801f));
                    VectorList_02.Add(new Vector3(890.3286f, -2001.457f, 30.61759f));
                    VectorList_02.Add(new Vector3(953.8917f, -2117.238f, 30.55156f));
                    VectorList_02.Add(new Vector3(879.512f, -2166.26f, 32.27139f));
                    VectorList_02.Add(new Vector3(840.3463f, -2292.076f, 30.51253f));
                    VectorList_02.Add(new Vector3(864.4549f, -2361.586f, 31.51551f));
                    VectorList_02.Add(new Vector3(943.5316f, -2169.565f, 30.5664f));
                    VectorList_02.Add(new Vector3(1002.891f, -2161.235f, 30.55158f));
                    VectorList_02.Add(new Vector3(1041.598f, -2170.343f, 31.50933f));
                    VectorList_02.Add(new Vector3(1019.803f, -2381.706f, 30.49956f));
                    VectorList_02.Add(new Vector3(1095.563f, -2227.028f, 31.304f));
                    VectorList_02.Add(new Vector3(1091.22f, -2279.994f, 30.14508f));
                    VectorList_02.Add(new Vector3(1083.314f, -2413.066f, 30.23936f));
                    VectorList_02.Add(new Vector3(923.9042f, -2533.111f, 28.30268f));
                    VectorList_02.Add(new Vector3(1211.444f, -3103.413f, 6.027918f));
                    VectorList_02.Add(new Vector3(1195.812f, -3254.429f, 7.095187f));
                    VectorList_02.Add(new Vector3(755.6094f, -3181.837f, 7.405778f));
                    VectorList_02.Add(new Vector3(821.003f, -3196.436f, 5.900819f));
                    VectorList_02.Add(new Vector3(814.2813f, -2982.313f, 6.02089f));
                }
                else  // strwberry
                {
                    iTime_01[0] = iTime_01[0] - 60;
                    VectorList_02.Add(new Vector3(109.8548f, -1595.567f, 30.89486f));
                    VectorList_02.Add(new Vector3(211.0892f, -1856.77f, 27.20064f));
                    VectorList_02.Add(new Vector3(257.4243f, -1801.21f, 27.11315f));
                    VectorList_02.Add(new Vector3(479.7857f, -2168.685f, 5.918276f));
                    VectorList_02.Add(new Vector3(450.7411f, -1881.882f, 26.81059f));
                    VectorList_02.Add(new Vector3(540.288f, -1945.175f, 24.98511f));
                    VectorList_02.Add(new Vector3(552.86f, -1639.724f, 28.15303f));
                    VectorList_02.Add(new Vector3(488.4154f, -1524.887f, 29.29461f));
                    VectorList_02.Add(new Vector3(454.5216f, -1305.83f, 30.12104f));
                    VectorList_02.Add(new Vector3(349.7768f, -1246.292f, 32.50904f));
                    VectorList_02.Add(new Vector3(150.8443f, -1338.228f, 29.20241f));
                    VectorList_02.Add(new Vector3(5.289824f, -1308.736f, 30.16653f));
                    VectorList_02.Add(new Vector3(-78.11802f, -1392.021f, 29.32072f));
                    VectorList_02.Add(new Vector3(-175.5446f, -1268.026f, 32.59798f));
                    VectorList_02.Add(new Vector3(-315.9799f, -1337.25f, 31.37128f));
                    VectorList_02.Add(new Vector3(-205.8848f, -1353.025f, 31.26374f));
                    VectorList_02.Add(new Vector3(727.3312f, -1191.563f, 24.27694f));
                    VectorList_02.Add(new Vector3(866.8922f, -966.7406f, 27.86195f));
                    VectorList_02.Add(new Vector3(742.6314f, -949.1918f, 25.63259f));
                    VectorList_02.Add(new Vector3(866.7693f, -1059.789f, 28.92712f));
                    VectorList_02.Add(new Vector3(895.7161f, -1140.812f, 25.94267f));
                    VectorList_02.Add(new Vector3(915.3958f, -1267.584f, 25.56782f));
                    VectorList_02.Add(new Vector3(754.502f, -1261.593f, 26.32873f));
                    VectorList_02.Add(new Vector3(731.8141f, -1387.889f, 26.48004f));
                }
                vTarget_05 = new Vector3(-417.4f, -2853.87f, 5.0f);
                iParcelCost = RandInt(40, 50);
                sMissionVar_01 = "hei_prop_heist_wooden_box";
                Packages_DeliverThis(iRanBox);
            }
            else if (iLocationX == 2)
            {
                int iRanBox = RandInt(4, 11);
                if (iRanBox == 4)
                    iTime_01[0] = 180;//3 mins
                else if (iRanBox == 5)
                    iTime_01[0] = 240;//4 mins
                else if (iRanBox == 6)
                    iTime_01[0] = 300;//5 mins
                else if (iRanBox == 7)
                    iTime_01[0] = 360;//6 mins
                else if (iRanBox == 8)
                    iTime_01[0] = 420;//7 mins
                else if (iRanBox == 9)
                    iTime_01[0] = 480;//8 mins
                else if (iRanBox == 10)
                    iTime_01[0] = 540;//9 mins
                else
                    iTime_01[0] = 600;//10 mins

                vFuMiss = new Vector3(61.74551f, 99.28784f, 78.44849f);

                vGetaway = new Vector3(68.3553f, 120.66f, 79.04f);
                fGetDir = 159.0f;
                VehicleSpawn("Boxville2", vGetaway, fGetDir, false, false, true, false, 2, 1, 4, 1, false);
                if (iRandomDrops == 1)
                { // burton vinwood                   
                    VectorList_02.Clear();
                    VectorList_02.Add(new Vector3(-356.741f, 16.12581f, 47.85474f));
                    VectorList_02.Add(new Vector3(-362.0493f, 57.46016f, 54.4298f));
                    VectorList_02.Add(new Vector3(-411.5159f, 152.6001f, 81.74309f));
                    VectorList_02.Add(new Vector3(-384.4481f, 153.008f, 81.74698f));
                    VectorList_02.Add(new Vector3(-303.3091f, 84.56718f, 76.66209f));
                    VectorList_02.Add(new Vector3(-313.5391f, 83.60252f, 75.65311f));
                    VectorList_02.Add(new Vector3(-332.7193f, 88.68687f, 71.21808f));
                    VectorList_02.Add(new Vector3(-263.5449f, 98.93026f, 77.56315f));
                    VectorList_02.Add(new Vector3(-188.5497f, 184.8336f, 88.60064f));
                    VectorList_02.Add(new Vector3(-154.3215f, 214.6461f, 98.32927f));
                    VectorList_02.Add(new Vector3(-143.7316f, 174.7767f, 93.62655f));
                    VectorList_02.Add(new Vector3(-161.3621f, 161.0014f, 89.70206f));
                    VectorList_02.Add(new Vector3(-206.0126f, -7.720617f, 60.62708f));
                    VectorList_02.Add(new Vector3(-161.1083f, -4.599355f, 66.46642f));
                    VectorList_02.Add(new Vector3(-102.2039f, -31.8603f, 70.44765f));
                    VectorList_02.Add(new Vector3(-18.69028f, -68.38952f, 61.37531f));
                    VectorList_02.Add(new Vector3(-27.58074f, -61.06355f, 67.59225f));
                    VectorList_02.Add(new Vector3(-21.88984f, -23.86292f, 73.24532f));
                    VectorList_02.Add(new Vector3(-14.02445f, -11.82469f, 79.34619f));
                    VectorList_02.Add(new Vector3(20.95977f, 114.1915f, 87.27728f));
                    VectorList_02.Add(new Vector3(107.7924f, 54.56335f, 81.77329f));
                    VectorList_02.Add(new Vector3(189.1337f, 11.49182f, 81.41087f));
                    VectorList_02.Add(new Vector3(212.0644f, 1.590603f, 79.19212f));
                    VectorList_02.Add(new Vector3(188.576f, 40.0778f, 87.82249f));
                    VectorList_02.Add(new Vector3(208.1531f, 73.78002f, 96.09595f));
                    VectorList_02.Add(new Vector3(284.9831f, 47.12731f, 96.6929f));
                    VectorList_02.Add(new Vector3(254.5233f, 25.36229f, 92.12718f));
                    VectorList_02.Add(new Vector3(388.1746f, 2.197361f, 91.41467f));
                    VectorList_02.Add(new Vector3(485.1955f, 212.3895f, 108.3095f));
                }
                else if (iRandomDrops == 2)
                {// little soul vaspuci
                    iTime_01[0] = iTime_01[0] - 60;
                    VectorList_02.Clear();
                    VectorList_02.Add(new Vector3(-1177.005f, -1073.163f, 5.906403f));
                    VectorList_02.Add(new Vector3(-1183.198f, -1064.417f, 2.150418f));
                    VectorList_02.Add(new Vector3(-1191.016f, -1054.863f, 2.150433f));
                    VectorList_02.Add(new Vector3(-1188.258f, -1041.719f, 2.150275f));
                    VectorList_02.Add(new Vector3(-1201.109f, -1031.956f, 2.150406f));
                    VectorList_02.Add(new Vector3(-1204.234f, -1021.773f, 5.945113f));
                    VectorList_02.Add(new Vector3(-1338.218f, -941.2662f, 15.35802f));
                    VectorList_02.Add(new Vector3(-1353.765f, -908.0026f, 12.4705f));
                    VectorList_02.Add(new Vector3(-1335.845f, -1146.224f, 6.731401f));
                    VectorList_02.Add(new Vector3(-1252.488f, -1143.985f, 8.513974f));
                    VectorList_02.Add(new Vector3(-1172.675f, -1260.892f, 14.90674f));
                    VectorList_02.Add(new Vector3(-1229.549f, -1235.521f, 11.02771f));
                    VectorList_02.Add(new Vector3(-1306.429f, -1229.076f, 8.980485f));
                    VectorList_02.Add(new Vector3(-1317.88f, -1238.943f, 7.168704f));
                    VectorList_02.Add(new Vector3(-1272.146f, -1295.553f, 8.285895f));
                    VectorList_02.Add(new Vector3(-1246.816f, -1358.752f, 7.820462f));
                    VectorList_02.Add(new Vector3(-1145.777f, -1466.309f, 7.690706f));
                    VectorList_02.Add(new Vector3(-1156.229f, -1574.861f, 8.345174f));
                    VectorList_02.Add(new Vector3(-1098.117f, -1673.513f, 8.39401f));
                    VectorList_02.Add(new Vector3(-1059.984f, -1657.836f, 4.674311f));
                    VectorList_02.Add(new Vector3(-1070.926f, -1636.006f, 8.194701f));
                    VectorList_02.Add(new Vector3(-1076.572f, -1620.789f, 4.442664f));
                    VectorList_02.Add(new Vector3(-1078.258f, -1616.337f, 4.428094f));
                    VectorList_02.Add(new Vector3(-1093.088f, -1607.943f, 8.458809f));
                    VectorList_02.Add(new Vector3(-1112.636f, -1577.709f, 8.679523f));
                    VectorList_02.Add(new Vector3(-1148.522f, -1523.617f, 10.62805f));
                    VectorList_02.Add(new Vector3(-1116.498f, -1506.122f, 4.403326f));
                    VectorList_02.Add(new Vector3(-1110.924f, -1498.482f, 4.672343f));
                    VectorList_02.Add(new Vector3(-1102.588f, -1492.073f, 4.887649f));
                    VectorList_02.Add(new Vector3(-1108.559f, -1527.218f, 6.779534f));
                    VectorList_02.Add(new Vector3(-1091.374f, -1517.666f, 4.792679f));
                    VectorList_02.Add(new Vector3(-1086.088f, -1503.486f, 5.707945f));
                    VectorList_02.Add(new Vector3(-1085.366f, -1558.724f, 4.489116f));
                    VectorList_02.Add(new Vector3(-1077.584f, -1553.464f, 4.625066f));
                    VectorList_02.Add(new Vector3(-1066.284f, -1545.243f, 4.902433f));
                    VectorList_02.Add(new Vector3(-1057.291f, -1551.201f, 4.911008f));
                    VectorList_02.Add(new Vector3(-1043.943f, -1579.937f, 5.03639f));
                    VectorList_02.Add(new Vector3(-1048.449f, -1579.996f, 4.944197f));
                    VectorList_02.Add(new Vector3(-1056.9f, -1587.358f, 4.613483f));
                    VectorList_02.Add(new Vector3(-1038.341f, -1609.897f, 5.003761f));
                    VectorList_02.Add(new Vector3(-956.5812f, -1432.736f, 7.679167f));
                    VectorList_02.Add(new Vector3(-868.7635f, -1286.318f, 13.20004f));
                    VectorList_02.Add(new Vector3(-936.1241f, -1310.397f, 9.70009f));
                    VectorList_02.Add(new Vector3(-869.3542f, -1103.725f, 6.445571f));
                    VectorList_02.Add(new Vector3(-903.3987f, -1005.532f, 2.150328f));
                    VectorList_02.Add(new Vector3(-913.8767f, -989.0179f, 2.150327f));
                    VectorList_02.Add(new Vector3(-908.3992f, -976.228f, 2.150325f));
                    VectorList_02.Add(new Vector3(-942.7357f, -969.0355f, 2.150114f));
                    VectorList_02.Add(new Vector3(-934.5264f, -939.1158f, 2.145313f));
                    VectorList_02.Add(new Vector3(-947.3409f, -927.6057f, 2.145313f));
                    VectorList_02.Add(new Vector3(-975.7267f, -909.0048f, 2.159486f));
                    VectorList_02.Add(new Vector3(-1022.753f, -896.6989f, 5.41547f));
                    VectorList_02.Add(new Vector3(-1023.957f, -912.3516f, 6.961076f));
                    VectorList_02.Add(new Vector3(-1042.891f, -924.6329f, 3.154166f));
                    VectorList_02.Add(new Vector3(-1053.634f, -929.9891f, 7.554896f));
                    VectorList_02.Add(new Vector3(-1061.149f, -943.5154f, 2.182675f));
                    VectorList_02.Add(new Vector3(-1091.015f, -925.9146f, 3.146876f));
                    VectorList_02.Add(new Vector3(-1161.481f, -973.403f, 2.150194f));
                    VectorList_02.Add(new Vector3(-1181.619f, -988.9208f, 2.150193f));
                    VectorList_02.Add(new Vector3(-1204.326f, -943.4292f, 8.114918f));
                    VectorList_02.Add(new Vector3(-1151.095f, -913.4648f, 6.628778f));
                    VectorList_02.Add(new Vector3(-1042.812f, -1024.366f, 2.150358f));
                    VectorList_02.Add(new Vector3(-1008.249f, -1036.944f, 2.150358f));
                    VectorList_02.Add(new Vector3(-1000.026f, -1030.441f, 2.150311f));
                    VectorList_02.Add(new Vector3(-997.8235f, -1012.419f, 2.150311f));
                    VectorList_02.Add(new Vector3(-967.3852f, -1008.264f, 2.15031f));
                    VectorList_02.Add(new Vector3(-978.1533f, -990.1673f, 4.545312f));
                    VectorList_02.Add(new Vector3(-995.0858f, -966.8881f, 2.54532f));
                    VectorList_02.Add(new Vector3(-1018.765f, -963.067f, 2.150194f));
                    VectorList_02.Add(new Vector3(-1027.697f, -968.8497f, 2.1502f));
                    VectorList_02.Add(new Vector3(-1035.725f, -984.0291f, 2.150194f));
                    VectorList_02.Add(new Vector3(-1055.298f, -998.6008f, 6.410484f));
                    VectorList_02.Add(new Vector3(-1130.638f, -1031.046f, 2.150357f));
                    VectorList_02.Add(new Vector3(-1122.727f, -1027.076f, 2.150356f));
                    VectorList_02.Add(new Vector3(-1113.141f, -1018.701f, 2.150358f));
                    VectorList_02.Add(new Vector3(-1103.691f, -1013.49f, 2.150357f));
                    VectorList_02.Add(new Vector3(-1101.415f, -1082.764f, 2.150356f));
                    VectorList_02.Add(new Vector3(-1128.448f, -1080.953f, 4.222689f));
                    VectorList_02.Add(new Vector3(-1064.395f, -1057.067f, 6.411655f));
                    VectorList_02.Add(new Vector3(-1075.633f, -1026.472f, 4.545251f));
                    VectorList_02.Add(new Vector3(-921.0966f, -1095.091f, 2.15031f));
                    VectorList_02.Add(new Vector3(-946.3143f, -1050.763f, 2.171845f));
                    VectorList_02.Add(new Vector3(-951.3636f, -1079.171f, 2.15031f));
                    VectorList_02.Add(new Vector3(-960.2056f, -1109.441f, 2.150381f));
                    VectorList_02.Add(new Vector3(-982.7823f, -1066.106f, 2.150313f));
                    VectorList_02.Add(new Vector3(-982.4726f, -1083.512f, 2.545213f));
                    VectorList_02.Add(new Vector3(-970.9428f, -1120.898f, 2.171845f));
                    VectorList_02.Add(new Vector3(-991.4828f, -1103.666f, 2.150312f));
                    VectorList_02.Add(new Vector3(-986.8842f, -1122.311f, 4.545273f));
                    VectorList_02.Add(new Vector3(-1031.39f, -1109.176f, 2.1586f));
                    VectorList_02.Add(new Vector3(-1004.998f, -1154.655f, 2.158741f));
                    VectorList_02.Add(new Vector3(-1022.293f, -1160.524f, 2.1586f));
                    VectorList_02.Add(new Vector3(-1031.984f, -1173.81f, 2.158597f));
                    VectorList_02.Add(new Vector3(-1063.752f, -1132.606f, 2.158602f));
                    VectorList_02.Add(new Vector3(-1091.859f, -1145.276f, 2.158598f));
                    VectorList_02.Add(new Vector3(-1064.242f, -1159.144f, 2.159603f));
                    VectorList_02.Add(new Vector3(-1068.306f, -1163.143f, 2.745344f));
                    VectorList_02.Add(new Vector3(-1099.331f, -1210.65f, 2.538017f));
                    VectorList_02.Add(new Vector3(-1094.835f, -1218.866f, 2.674695f));
                    VectorList_02.Add(new Vector3(-1087.718f, -1230.778f, 2.91478f));
                    VectorList_02.Add(new Vector3(-1126.017f, -1172.03f, 2.357591f));
                    VectorList_02.Add(new Vector3(-1128.641f, -1162.314f, 6.494957f));
                    VectorList_02.Add(new Vector3(-1128.47f, -1143.433f, 2.840051f));
                    VectorList_02.Add(new Vector3(-1145.392f, -1127.529f, 6.503163f));
                    VectorList_02.Add(new Vector3(-1142.907f, -1122.372f, 2.643049f));
                    VectorList_02.Add(new Vector3(-1159.114f, -1100.559f, 6.531281f));
                }
                else if (iRandomDrops == 3)
                {//delpero rockford
                    iTime_01[0] = iTime_01[0] - 60;
                    VectorList_02.Clear();
                    VectorList_02.Add(new Vector3(-1469.499f, 23.98446f, 53.64318f));
                    VectorList_02.Add(new Vector3(-1509.753f, 6.369807f, 56.06623f));
                    VectorList_02.Add(new Vector3(-1579.321f, 12.67341f, 61.08215f));
                    VectorList_02.Add(new Vector3(-1625.327f, 8.889999f, 62.53669f));
                    VectorList_02.Add(new Vector3(-1599.91f, -33.59167f, 58.19274f));
                    VectorList_02.Add(new Vector3(-1544.099f, -98.91996f, 54.52899f));
                    VectorList_02.Add(new Vector3(-1481.332f, -41.2363f, 56.84435f));
                    VectorList_02.Add(new Vector3(-1182.347f, 305.6922f, 69.89175f));
                    VectorList_02.Add(new Vector3(-1134.616f, 362.8218f, 74.93424f));
                    VectorList_02.Add(new Vector3(-1111.962f, 313.533f, 66.97783f));
                    VectorList_02.Add(new Vector3(-1041.385f, 296.4107f, 66.7803f));
                    VectorList_02.Add(new Vector3(-1045.758f, 374.5154f, 69.94336f));
                    VectorList_02.Add(new Vector3(-870.2264f, 357.041f, 85.10243f));
                    VectorList_02.Add(new Vector3(-889.8139f, 311.1008f, 84.12887f));
                    VectorList_02.Add(new Vector3(-805.5648f, 250.4268f, 79.11285f));
                    VectorList_02.Add(new Vector3(-1043.047f, 237.5888f, 64.16473f));
                    VectorList_02.Add(new Vector3(-1020.127f, 162.336f, 58.53504f));
                    VectorList_02.Add(new Vector3(-975.7432f, 103.4353f, 55.89742f));
                    VectorList_02.Add(new Vector3(-908.3871f, 125.7879f, 55.31467f));
                    VectorList_02.Add(new Vector3(-949.7228f, 214.9841f, 67.34995f));
                    VectorList_02.Add(new Vector3(-889.1459f, 201.5653f, 69.83292f));
                    VectorList_02.Add(new Vector3(-794.7856f, 176.6714f, 72.83533f));
                    VectorList_02.Add(new Vector3(-819.6236f, 108.1988f, 56.65382f));
                    VectorList_02.Add(new Vector3(-896.2682f, 50.55714f, 50.03809f));
                    VectorList_02.Add(new Vector3(-929.5912f, 32.33089f, 49.22243f));
                    VectorList_02.Add(new Vector3(-895.6555f, -23.75793f, 41.92866f));
                    VectorList_02.Add(new Vector3(-856.2868f, -33.26972f, 44.154f));
                }
                else
                {// vinwood hills
                    iTime_01[0] = iTime_01[0] + 60;
                    VectorList_02.Clear();
                    VectorList_02.Add(new Vector3(-876.4699f, 486.163f, 87.81596f));
                    VectorList_02.Add(new Vector3(-814.6655f, 465.4533f, 90.76906f));
                    VectorList_02.Add(new Vector3(-831.5496f, 512.7079f, 94.61716f));
                    VectorList_02.Add(new Vector3(-900.957f, 507.1272f, 92.22887f));
                    VectorList_02.Add(new Vector3(-859.8825f, 549.3598f, 97.02918f));
                    VectorList_02.Add(new Vector3(-903.6682f, 549.173f, 97.32504f));
                    VectorList_02.Add(new Vector3(-898.3152f, 598.1339f, 104.9367f));
                    VectorList_02.Add(new Vector3(-924.5178f, 562.5059f, 99.80518f));
                    VectorList_02.Add(new Vector3(-951.625f, 613.6896f, 109.6659f));
                    VectorList_02.Add(new Vector3(-947.6028f, 568.3109f, 101.4761f));
                    VectorList_02.Add(new Vector3(-973.9167f, 583.9152f, 101.9155f));
                    VectorList_02.Add(new Vector3(-1107.415f, 593.4894f, 104.4546f));
                    VectorList_02.Add(new Vector3(-1031.149f, 564.9263f, 100.5148f));
                    VectorList_02.Add(new Vector3(-1068.457f, 562.9708f, 102.7286f));
                    VectorList_02.Add(new Vector3(-1126.343f, 552.0135f, 102.2961f));
                    VectorList_02.Add(new Vector3(-1146.912f, 547.5715f, 101.4294f));
                    VectorList_02.Add(new Vector3(-1164.63f, 589.8889f, 101.8328f));
                    VectorList_02.Add(new Vector3(-1200.821f, 582.1893f, 100.1303f));
                    VectorList_02.Add(new Vector3(-1197.679f, 533.1424f, 96.21648f));
                    VectorList_02.Add(new Vector3(-1290.315f, 501.1377f, 97.55988f));
                    VectorList_02.Add(new Vector3(-932.3692f, 472.0573f, 85.11881f));
                    VectorList_02.Add(new Vector3(-983.5774f, 442.0766f, 79.97154f));
                    VectorList_02.Add(new Vector3(-970.5432f, 534.5553f, 81.67139f));
                    VectorList_02.Add(new Vector3(-1012.013f, 527.2021f, 79.61324f));
                    VectorList_02.Add(new Vector3(-984.8823f, 475.62f, 82.26645f));
                    VectorList_02.Add(new Vector3(-1013.231f, 457.128f, 79.36449f));
                    VectorList_02.Add(new Vector3(-1060.118f, 515.8932f, 84.381f));
                    VectorList_02.Add(new Vector3(-1067.292f, 482.6874f, 85.3016f));
                    VectorList_02.Add(new Vector3(-1036.205f, 443.2584f, 72.86395f));
                    VectorList_02.Add(new Vector3(-1105.836f, 429.959f, 75.6862f));
                    VectorList_02.Add(new Vector3(-1118.202f, 505.9364f, 82.24579f));
                    VectorList_02.Add(new Vector3(-1161.977f, 501.0114f, 86.0938f));
                    VectorList_02.Add(new Vector3(-1160.795f, 434.7254f, 86.63664f));
                    VectorList_02.Add(new Vector3(-1215.607f, 458.8355f, 91.85357f));
                    VectorList_02.Add(new Vector3(-1257.983f, 447.0746f, 94.73567f));
                    VectorList_02.Add(new Vector3(-1294.518f, 455.4332f, 97.35609f));
                    VectorList_02.Add(new Vector3(-1308.411f, 453.3697f, 99.70641f));
                    VectorList_02.Add(new Vector3(-1332.115f, 491.9036f, 102.4476f));
                    VectorList_02.Add(new Vector3(-1346.35f, 441.8075f, 100.9924f));
                    VectorList_02.Add(new Vector3(-1409.876f, 445.3276f, 112.22f));
                    VectorList_02.Add(new Vector3(-1392.663f, 517.6506f, 123.292f));
                    VectorList_02.Add(new Vector3(-1452.043f, 545.3224f, 120.7994f));
                    VectorList_02.Add(new Vector3(-1458.978f, 500.1378f, 117.5965f));
                    VectorList_02.Add(new Vector3(-1493.765f, 541.6144f, 118.2722f));
                    VectorList_02.Add(new Vector3(-1493.509f, 421.1047f, 111.2437f));
                    VectorList_02.Add(new Vector3(-1542.629f, 408.7433f, 109.6781f));
                    VectorList_02.Add(new Vector3(-1067.901f, 821.439f, 166.8808f));
                    VectorList_02.Add(new Vector3(-1097.104f, 824.2603f, 168.6352f));
                    VectorList_02.Add(new Vector3(-1145.602f, 799.0558f, 167.4061f));
                    VectorList_02.Add(new Vector3(-1107.727f, 738.1865f, 159.9176f));
                    VectorList_02.Add(new Vector3(-1144.178f, 718.804f, 155.4649f));
                    VectorList_02.Add(new Vector3(-1197.619f, 694.1948f, 147.4094f));
                    VectorList_02.Add(new Vector3(-1219.122f, 665.3551f, 144.5338f));
                    VectorList_02.Add(new Vector3(-1223.961f, 636.0889f, 142.7451f));
                    VectorList_02.Add(new Vector3(-1262.987f, 692.0536f, 150.6537f));
                    VectorList_02.Add(new Vector3(-1282.651f, 663.9969f, 144.8519f));
                    VectorList_02.Add(new Vector3(-1270.896f, 629.1021f, 143.23f));
                    VectorList_02.Add(new Vector3(-1331.552f, 588.2698f, 134.37f));
                    VectorList_02.Add(new Vector3(-1384.961f, 606.8231f, 133.8726f));
                    VectorList_02.Add(new Vector3(-1372.576f, 585.5729f, 131.4471f));
                    VectorList_02.Add(new Vector3(-1356.573f, 537.3622f, 124.6708f));
                    VectorList_02.Add(new Vector3(-1400.062f, 577.7793f, 127.0419f));
                    VectorList_02.Add(new Vector3(-599.9012f, 481.0077f, 109.0135f));
                    VectorList_02.Add(new Vector3(-585.5557f, 541.2571f, 109.6203f));
                    VectorList_02.Add(new Vector3(-615.4255f, 475.7243f, 108.8786f));
                    VectorList_02.Add(new Vector3(-640.5946f, 519.4641f, 109.6877f));
                    VectorList_02.Add(new Vector3(-657.5634f, 462.1192f, 110.3896f));
                    VectorList_02.Add(new Vector3(-679.0991f, 511.4417f, 113.526f));
                    VectorList_02.Add(new Vector3(-741.4827f, 507.2439f, 110.1819f));
                    VectorList_02.Add(new Vector3(-709.9409f, 439.7062f, 106.8985f));
                    VectorList_02.Add(new Vector3(-747.0872f, 409.5476f, 96.0173f));
                    VectorList_02.Add(new Vector3(-775.8024f, 476.9246f, 100.1721f));
                    VectorList_02.Add(new Vector3(-833.1953f, 404.6588f, 91.55969f));
                    VectorList_02.Add(new Vector3(-1070.472f, 749.7695f, 168.0472f));
                    VectorList_02.Add(new Vector3(-1059.009f, 712.2664f, 165.5936f));
                    VectorList_02.Add(new Vector3(-1020.068f, 718.5629f, 163.9963f));
                    VectorList_02.Add(new Vector3(-974.3307f, 685.3311f, 158.0342f));
                    VectorList_02.Add(new Vector3(-951.1431f, 683.4838f, 153.578f));
                    VectorList_02.Add(new Vector3(-908.5171f, 694.7616f, 151.4326f));
                    VectorList_02.Add(new Vector3(-886.0207f, 699.3416f, 151.2711f));
                    VectorList_02.Add(new Vector3(-853.3905f, 696.6192f, 148.7828f));
                    VectorList_02.Add(new Vector3(-809.6923f, 674.0168f, 147.2904f));
                    VectorList_02.Add(new Vector3(-763.8483f, 651.5327f, 145.5013f));
                    VectorList_02.Add(new Vector3(-751.5979f, 621.2493f, 142.2435f));
                    VectorList_02.Add(new Vector3(-745.7672f, 589.5885f, 142.6156f));
                    VectorList_02.Add(new Vector3(-703.7216f, 590.2789f, 142.0164f));
                    VectorList_02.Add(new Vector3(-687.9229f, 597.8907f, 143.642f));
                    VectorList_02.Add(new Vector3(-643.7551f, 632.6365f, 149.619f));
                    VectorList_02.Add(new Vector3(-704.4034f, 627.3926f, 155.1603f));
                    VectorList_02.Add(new Vector3(-568.2637f, 665.2595f, 145.4776f));
                    VectorList_02.Add(new Vector3(-544.3185f, 694.801f, 146.0745f));
                    VectorList_02.Add(new Vector3(-621.2768f, 637.5131f, 151.041f));
                    VectorList_02.Add(new Vector3(-707.6903f, 712.0728f, 162.0412f));
                    VectorList_02.Add(new Vector3(-663.5795f, 742.3569f, 174.2841f));
                    VectorList_02.Add(new Vector3(-601.3591f, 711.8802f, 180.0073f));
                    VectorList_02.Add(new Vector3(-608.6313f, 771.2157f, 188.5102f));
                    VectorList_02.Add(new Vector3(-554.4477f, 754.2482f, 185.425f));
                    VectorList_02.Add(new Vector3(-577.0934f, 812.272f, 191.2517f));
                    VectorList_02.Add(new Vector3(-658.4011f, 784.6013f, 196.5904f));
                    VectorList_02.Add(new Vector3(-781.4969f, 792.8298f, 214.57f));
                    VectorList_02.Add(new Vector3(-818.0649f, 795.6208f, 202.5863f));
                    VectorList_02.Add(new Vector3(-859.8956f, 766.4213f, 191.8201f));
                    VectorList_02.Add(new Vector3(-906.9011f, 752.5503f, 182.1613f));
                    VectorList_02.Add(new Vector3(-931.3448f, 827.0118f, 184.3368f));
                    VectorList_02.Add(new Vector3(-956.7988f, 846.5051f, 177.4667f));
                    VectorList_02.Add(new Vector3(-953.8853f, 736.2907f, 175.5582f));
                    VectorList_02.Add(new Vector3(-1011.727f, 773.0004f, 171.3789f));
                    VectorList_02.Add(new Vector3(-1019.988f, 829.1194f, 172.3859f));
                }
                vTarget_05 = new Vector3(68.3553f, 120.66f, 77.54f);
                iParcelCost = RandInt(20, 30);
                sMissionVar_01 = "prop_cs_cardbox_01";
                Packages_DeliverThis(iRanBox);
            }
            else if (iLocationX == 3)
            {
                vFuMiss = new Vector3(-3131.44f, 1111.76f, 20.12679f);

                vGetaway = new Vector3(-3139.27f, 1098.87f, 20.63f);
                fGetDir = 81.7f;
                VehicleSpawn("Rumpo2", vGetaway, fGetDir, false, false, true, false, 0, 0, 4, 1, true);
                if (iRandomDrops == 1)
                {
                    iTime_01[0] = 180;//3 mins
                    VectorList_02.Clear();
                    VectorList_02.Add(new Vector3(-3225.671f, 911.6782f, 13.99328f));
                    VectorList_02.Add(new Vector3(-3238.209f, 922.1356f, 13.95989f));
                    VectorList_02.Add(new Vector3(-3242.884f, 931.8699f, 17.22135f));
                    VectorList_02.Add(new Vector3(-3237.128f, 952.9849f, 13.14549f));
                    VectorList_02.Add(new Vector3(-3251.259f, 1027.374f, 11.75769f));
                    VectorList_02.Add(new Vector3(-3254.493f, 1063.829f, 11.1462f));
                    VectorList_02.Add(new Vector3(-3252.789f, 1077.478f, 11.03329f));
                    VectorList_02.Add(new Vector3(-3228.171f, 1092.434f, 10.75639f));
                    VectorList_02.Add(new Vector3(-3233.788f, 1110.743f, 10.57354f));
                    VectorList_02.Add(new Vector3(-3220.034f, 1137.555f, 9.895407f));
                    VectorList_02.Add(new Vector3(-3214.605f, 1149.277f, 9.895408f));
                    VectorList_02.Add(new Vector3(-3205.43f, 1151.904f, 9.662267f));
                    VectorList_02.Add(new Vector3(-3199.772f, 1165.077f, 9.654344f));
                    VectorList_02.Add(new Vector3(-3205.8f, 1186.661f, 9.664678f));
                    VectorList_02.Add(new Vector3(-3203.429f, 1206.695f, 12.82314f));
                    VectorList_02.Add(new Vector3(-3193.675f, 1230.114f, 10.04832f));
                    VectorList_02.Add(new Vector3(-3197.585f, 1274.163f, 12.66765f));
                    VectorList_02.Add(new Vector3(-3181.797f, 1310.762f, 14.55494f));
                }
                else if (iRandomDrops == 2)
                {
                    iTime_01[0] = 240;//4 mins
                    VectorList_02.Clear();
                    VectorList_02.Add(new Vector3(-3109.391f, 751.4032f, 24.70188f));
                    VectorList_02.Add(new Vector3(-3106.902f, 719.2998f, 20.61939f));
                    VectorList_02.Add(new Vector3(-3087.058f, 656.056f, 11.5886f));
                    VectorList_02.Add(new Vector3(-3051.573f, 569.4459f, 7.823583f));
                    VectorList_02.Add(new Vector3(-3044.509f, 564.0283f, 7.818895f));
                    VectorList_02.Add(new Vector3(-3036.565f, 558.9866f, 7.507683f));
                    VectorList_02.Add(new Vector3(-3036.482f, 544.608f, 7.507683f));
                    VectorList_02.Add(new Vector3(-3041.9f, 523.9325f, 7.426294f));
                    VectorList_02.Add(new Vector3(-3038.055f, 492.2998f, 6.767862f));
                    VectorList_02.Add(new Vector3(-3053.02f, 487.0674f, 6.779647f));
                    VectorList_02.Add(new Vector3(-3049.986f, 474.4078f, 6.779647f));
                    VectorList_02.Add(new Vector3(-3069.546f, 454.4254f, 9.643095f));
                    VectorList_02.Add(new Vector3(-3073.3f, 452.9189f, 6.357774f));
                    VectorList_02.Add(new Vector3(-3080.653f, 406.0587f, 6.968522f));
                    VectorList_02.Add(new Vector3(-3090.885f, 379.1903f, 7.112432f));
                    VectorList_02.Add(new Vector3(-3102.068f, 367.1784f, 7.119124f));
                    VectorList_02.Add(new Vector3(-3100.813f, 361.2336f, 7.59102f));
                    VectorList_02.Add(new Vector3(-3110.472f, 335.3844f, 7.493347f));
                    VectorList_02.Add(new Vector3(-3111.59f, 315.6106f, 8.38104f));
                    VectorList_02.Add(new Vector3(-3115.084f, 303.729f, 8.38104f));
                    VectorList_02.Add(new Vector3(-3115.483f, 294.5401f, 8.972106f));
                    VectorList_02.Add(new Vector3(-3131.787f, 247.3237f, 12.492f));
                    VectorList_02.Add(new Vector3(-3099.842f, 211.6886f, 14.0702f));
                    VectorList_02.Add(new Vector3(-2973.217f, 600.1259f, 24.24677f));
                    VectorList_02.Add(new Vector3(-2973.584f, 642.0483f, 25.79752f));
                    VectorList_02.Add(new Vector3(-2995.112f, 682.2404f, 25.04422f));
                    VectorList_02.Add(new Vector3(-2986.079f, 719.8495f, 28.49687f));
                    VectorList_02.Add(new Vector3(-3018.052f, 746.3233f, 27.58763f));
                }
                else if (iRandomDrops == 3)
                {
                    iTime_01[0] = 300;//5 mins
                    VectorList_02.Clear();
                    VectorList_02.Add(new Vector3(-1754.303f, -708.6591f, 10.39663f));
                    VectorList_02.Add(new Vector3(-1764.108f, -708.2756f, 10.6142f));
                    VectorList_02.Add(new Vector3(-1764.566f, -708.1951f, 14.04145f));
                    VectorList_02.Add(new Vector3(-1764.033f, -708.2069f, 17.64467f));
                    VectorList_02.Add(new Vector3(-1777.351f, -702.067f, 10.4848f));
                    VectorList_02.Add(new Vector3(-1776.769f, -691.2233f, 16.97348f));
                    VectorList_02.Add(new Vector3(-1780.731f, -680.2358f, 10.44997f));
                    VectorList_02.Add(new Vector3(-1793.184f, -673.2136f, 10.57397f));
                    VectorList_02.Add(new Vector3(-1803.759f, -662.3365f, 10.7237f));
                    VectorList_02.Add(new Vector3(-1817.498f, -657.4927f, 13.81193f));
                    VectorList_02.Add(new Vector3(-1827.267f, -652.1654f, 18.04963f));
                    VectorList_02.Add(new Vector3(-1834.165f, -641.7821f, 11.47759f));
                    VectorList_02.Add(new Vector3(-1836.708f, -631.6794f, 10.74891f));
                    VectorList_02.Add(new Vector3(-1838.648f, -629.8493f, 11.0014f));
                    VectorList_02.Add(new Vector3(-1879.679f, -606.2506f, 18.92933f));
                    VectorList_02.Add(new Vector3(-1885.089f, -600.3168f, 11.89937f));
                    VectorList_02.Add(new Vector3(-1885.209f, -600.2053f, 15.5457f));
                    VectorList_02.Add(new Vector3(-1884.697f, -600.3395f, 19.14856f));
                    VectorList_02.Add(new Vector3(-1890.028f, -592.5482f, 18.331f));
                    VectorList_02.Add(new Vector3(-1901.561f, -586.2667f, 11.8717f));
                    VectorList_02.Add(new Vector3(-1901.737f, -586.5366f, 15.50729f));
                    VectorList_02.Add(new Vector3(-1901.345f, -586.4103f, 18.8586f));
                    VectorList_02.Add(new Vector3(-1913.928f, -574.6428f, 11.43515f));
                    VectorList_02.Add(new Vector3(-1920.347f, -570.4515f, 11.91194f));
                    VectorList_02.Add(new Vector3(-1920.237f, -570.4377f, 14.7448f));
                    VectorList_02.Add(new Vector3(-1915.89f, -565.7648f, 17.67347f));
                    VectorList_02.Add(new Vector3(-1915.907f, -565.6242f, 20.47274f));
                    VectorList_02.Add(new Vector3(-1923.306f, -559.0013f, 12.06105f));
                    VectorList_02.Add(new Vector3(-1927.94f, -551.8524f, 11.84189f));
                    VectorList_02.Add(new Vector3(-1946.505f, -548.1843f, 14.72549f));
                    VectorList_02.Add(new Vector3(-1950.271f, -545.1097f, 14.72549f));
                    VectorList_02.Add(new Vector3(-1958.221f, -538.7208f, 11.89937f));
                    VectorList_02.Add(new Vector3(-1958.538f, -538.6161f, 15.55085f));
                    VectorList_02.Add(new Vector3(-1957.957f, -538.9095f, 19.15357f));
                    VectorList_02.Add(new Vector3(-1968.042f, -532.4321f, 12.17067f));
                    VectorList_02.Add(new Vector3(-1976.333f, -525.4742f, 18.92434f));
                    VectorList_02.Add(new Vector3(-1980.079f, -520.5913f, 11.894f));
                    VectorList_02.Add(new Vector3(-1980.366f, -520.8674f, 14.7404f));
                    VectorList_02.Add(new Vector3(-1976.356f, -516.4469f, 17.67827f));
                    VectorList_02.Add(new Vector3(-1976.218f, -516.0389f, 20.4677f));
                }
                else
                {
                    iTime_01[0] = 360;//6 mins
                    VectorList_02.Clear();
                    VectorList_02.Add(new Vector3(-1909.111f, 129.635f, 82.45064f));
                    VectorList_02.Add(new Vector3(-1859.039f, 207.8242f, 84.29408f));
                    VectorList_02.Add(new Vector3(-1959.546f, 212.3604f, 86.51141f));
                    VectorList_02.Add(new Vector3(-1893.244f, 251.7575f, 86.25306f));
                    VectorList_02.Add(new Vector3(-1981.675f, 244.1014f, 87.61314f));
                    VectorList_02.Add(new Vector3(-1908.839f, 292.472f, 88.60768f));
                    VectorList_02.Add(new Vector3(-1861.554f, 310.2534f, 89.11358f));
                    VectorList_02.Add(new Vector3(-1769.747f, 346.0624f, 93.37177f));
                    VectorList_02.Add(new Vector3(-1742.369f, 364.5176f, 88.72827f));
                    VectorList_02.Add(new Vector3(-1673.764f, 371.5128f, 85.11893f));
                    VectorList_02.Add(new Vector3(-2009.15f, 316.877f, 91.56063f));
                    VectorList_02.Add(new Vector3(-1919.008f, 356.4274f, 93.78138f));
                    VectorList_02.Add(new Vector3(-1931.474f, 398.6515f, 96.50707f));
                    VectorList_02.Add(new Vector3(-2021.623f, 369.8535f, 94.57845f));
                    VectorList_02.Add(new Vector3(-1932.137f, 452.8219f, 102.7027f));
                    VectorList_02.Add(new Vector3(-2027.374f, 449.6474f, 105.6779f));
                    VectorList_02.Add(new Vector3(-2037.174f, 495.6615f, 107.012f));
                    VectorList_02.Add(new Vector3(-1923.487f, 543.7314f, 114.82f));
                    VectorList_02.Add(new Vector3(-2004.955f, 602.0804f, 117.9033f));
                    VectorList_02.Add(new Vector3(-1929.894f, 595.8158f, 122.2849f));
                    VectorList_02.Add(new Vector3(-1994.404f, 639.9923f, 122.5362f));
                    VectorList_02.Add(new Vector3(-1878.629f, 651.9398f, 130.00f));
                }
                vTarget_05 = new Vector3(-3139.27f, 1098.87f, 19.63f);
                iParcelCost = RandInt(10, 30);
                sMissionVar_01 = "prop_paper_bag_01";
                Packages_DeliverThis(10);
            }
            else if (iLocationX == 4)
            {
                vFuMiss = new Vector3(954.853f, -146.4427f, 73.91478f);

                vGetaway = new Vector3(985.1311f, -138.0587f, 71.72433f);
                fGetDir = 58.15194f;
                VehicleSpawn("SlamVan2", vGetaway, fGetDir, false, false, true, false, 0, 0, 4, 1, true);
                VectorList_02.Clear();
                VectorList_02.Add(new Vector3(1207.021f, -673.2103f, 61.11215f));
                VectorList_02.Add(new Vector3(1213.941f, -701.9628f, 60.30816f));
                VectorList_02.Add(new Vector3(1215.253f, -729.3919f, 58.94733f));
                VectorList_02.Add(new Vector3(995.0197f, -739.0646f, 57.44802f));
                VectorList_02.Add(new Vector3(988.8434f, -710.9371f, 58.0252f));
                VectorList_02.Add(new Vector3(962.9817f, -696.3831f, 58.0994f));
                VectorList_02.Add(new Vector3(957.2084f, -665.1748f, 58.01148f));
                VectorList_02.Add(new Vector3(1002.87f, -591.4628f, 59.20106f));
                VectorList_02.Add(new Vector3(1018.085f, -566.4f, 59.66459f));
                VectorList_02.Add(new Vector3(1004.908f, -526.3587f, 60.40078f));
                VectorList_02.Add(new Vector3(983.4021f, -540.3289f, 59.63057f));
                VectorList_02.Add(new Vector3(964.0696f, -554.757f, 59.00647f));
                VectorList_02.Add(new Vector3(969.8193f, -576.8511f, 58.87088f));
                VectorList_02.Add(new Vector3(962.0546f, -606.3818f, 59.49267f));
                VectorList_02.Add(new Vector3(926.4136f, -570.8307f, 57.92761f));
                VectorList_02.Add(new Vector3(892.5603f, -595.6162f, 57.554f));
                VectorList_02.Add(new Vector3(868.2073f, -578.7185f, 57.647f));
                VectorList_02.Add(new Vector3(857.3127f, -560.0723f, 57.47778f));
                VectorList_02.Add(new Vector3(883.0701f, -550.0735f, 57.53517f));
                VectorList_02.Add(new Vector3(879.7803f, -506.7889f, 57.45839f));
                VectorList_02.Add(new Vector3(918.1938f, -519.1744f, 58.69641f));
                VectorList_02.Add(new Vector3(930.3493f, -485.4208f, 60.08249f));
                VectorList_02.Add(new Vector3(963.7202f, -496.1301f, 61.53802f));
                VectorList_02.Add(new Vector3(965.8538f, -463.4195f, 62.22671f));
                VectorList_02.Add(new Vector3(1014.155f, -460.7629f, 64.06299f));
                VectorList_02.Add(new Vector3(996.7019f, -441.6269f, 63.93599f));
                VectorList_02.Add(new Vector3(1066.67f, -450.9628f, 65.49625f));
                VectorList_02.Add(new Vector3(1061.671f, -477.5435f, 64.04195f));
                VectorList_02.Add(new Vector3(1056.921f, -502.142f, 62.67876f));
                VectorList_02.Add(new Vector3(1082.299f, -489.9038f, 63.51603f));
                VectorList_02.Add(new Vector3(1098.596f, -474.7681f, 66.93564f));
                VectorList_02.Add(new Vector3(1097.893f, -426.1955f, 67.28503f));
                VectorList_02.Add(new Vector3(942.2897f, -255.0595f, 67.49841f));
                VectorList_02.Add(new Vector3(932.2645f, -252.0051f, 68.14607f));
                VectorList_02.Add(new Vector3(927.1663f, -228.3628f, 70.33281f));
                VectorList_02.Add(new Vector3(878.4464f, -210.3623f, 70.78152f));
                VectorList_02.Add(new Vector3(853.2083f, -192.314f, 72.63569f));
                VectorList_02.Add(new Vector3(813.6287f, -168.7192f, 73.92041f));
                VectorList_02.Add(new Vector3(799.2471f, -161.8204f, 73.72651f));
                VectorList_02.Add(new Vector3(787.4902f, -143.8369f, 74.82004f));
                VectorList_02.Add(new Vector3(789.5784f, -121.7295f, 75.86514f));
                VectorList_02.Add(new Vector3(772.9427f, -133.7863f, 74.83371f));
                VectorList_02.Add(new Vector3(1268.203f, -422.6983f, 69.09253f));
                VectorList_02.Add(new Vector3(1267.012f, -447.5618f, 69.81529f));
                VectorList_02.Add(new Vector3(1269.74f, -483.0303f, 69.09258f));
                VectorList_02.Add(new Vector3(1263.176f, -500.3384f, 69.10938f));
                VectorList_02.Add(new Vector3(1255.999f, -525.82f, 69.04993f));
                VectorList_02.Add(new Vector3(1364.71f, -559.247f, 74.50141f));
                VectorList_02.Add(new Vector3(1379.771f, -592.6221f, 74.51224f));
                VectorList_02.Add(new Vector3(1350.297f, -590.8824f, 74.4875f));
                VectorList_02.Add(new Vector3(1324.882f, -572.6253f, 73.32757f));
                VectorList_02.Add(new Vector3(1251.123f, -570.0441f, 69.21765f));
                VectorList_02.Add(new Vector3(1254.815f, -596.3622f, 69.01241f));
                VectorList_02.Add(new Vector3(1261.984f, -613.939f, 68.88661f));
                VectorList_02.Add(new Vector3(1260.629f, -643.8718f, 67.85249f));
                VectorList_02.Add(new Vector3(1282.915f, -678.0354f, 65.91342f));
                VectorList_02.Add(new Vector3(1262.216f, -717.5988f, 64.4155f));
                VectorList_02.Add(new Vector3(1191.326f, -549.5949f, 64.66839f));
                VectorList_02.Add(new Vector3(1190.161f, -585.5353f, 64.16667f));
                VectorList_02.Add(new Vector3(1191.312f, -600.8296f, 63.97587f));
                VectorList_02.Add(new Vector3(1196.803f, -625.5676f, 63.02939f));

                vTarget_05 = new Vector3(985.1311f, -138.0587f, 72.72433f);
                iParcelCost = RandInt(100, 150);
                sMissionVar_01 = "ng_proc_binbag_01a";
                int iRanDel = RandInt(4, VectorList_02.Count / 2);
                if (iRanDel < 9)
                    iTime_01[0] = 180;//3 mins
                else if (iRanDel < 11)
                    iTime_01[0] = 240;//4 mins
                else if (iRanDel < 13)
                    iTime_01[0] = 300;//5 mins
                else if (iRanDel < 15)
                    iTime_01[0] = 360;//6 mins
                else if (iRanDel < 17)
                    iTime_01[0] = 420;//7 mins
                else
                    iTime_01[0] = 480;//8 mins
                Packages_DeliverThis(iRanDel);
            }
            else if (iLocationX == 5)
            {
                vFuMiss = new Vector3(1977.48f, 4653.158f, 40.45607f);

                vGetaway = new Vector3(1929.128f, 4645.529f, 39.35381f);
                fGetDir = 74.04933f;
                VehicleSpawn("Scrap", vGetaway, fGetDir, false, false, true, false, 1, 5, 4, 1, false);
                if (iRandomDrops == 1)
                {
                    iTime_01[0] = 300;//5 mins
                    VectorList_02.Clear();
                    VectorList_02.Add(new Vector3(3294.645f, 5188.46f, 18.41536f));
                    VectorList_02.Add(new Vector3(2234.094f, 5608.012f, 54.64093f));
                    VectorList_02.Add(new Vector3(2256.062f, 5158.674f, 57.96902f));
                    VectorList_02.Add(new Vector3(1697.929f, 4874.469f, 42.03117f));
                    VectorList_02.Add(new Vector3(1648.552f, 4781.981f, 42.11193f));
                    VectorList_02.Add(new Vector3(1717.678f, 4679.414f, 43.65579f));
                    VectorList_02.Add(new Vector3(1667.145f, 4680.101f, 43.05535f));
                    VectorList_02.Add(new Vector3(1677.29f, 4653.63f, 43.37117f));
                    VectorList_02.Add(new Vector3(1364.512f, 4359.951f, 44.4988f));
                    VectorList_02.Add(new Vector3(740.5996f, 4170.04f, 41.0878f));
                }
                else if (iRandomDrops == 2)
                {
                    iTime_01[0] = 210;//3 1/2 mins
                    VectorList_02.Clear();
                    VectorList_02.Add(new Vector3(1366.07f, 3648.678f, 33.78039f));
                    VectorList_02.Add(new Vector3(1441.558f, 3630.086f, 34.97598f));
                    VectorList_02.Add(new Vector3(1424.652f, 3665.129f, 39.72842f));
                    VectorList_02.Add(new Vector3(1503.234f, 3699.392f, 39.05916f));
                    VectorList_02.Add(new Vector3(1641.75f, 3729.399f, 35.06714f));
                    VectorList_02.Add(new Vector3(1648.607f, 3810.293f, 38.65067f));
                    VectorList_02.Add(new Vector3(1669.977f, 3743.251f, 34.86417f));
                    VectorList_02.Add(new Vector3(1745.342f, 3700.265f, 34.34354f));
                    VectorList_02.Add(new Vector3(1779.095f, 3642.883f, 34.47246f));
                    VectorList_02.Add(new Vector3(1782.287f, 3745.965f, 34.65663f));
                    VectorList_02.Add(new Vector3(1746.644f, 3785.375f, 34.83487f));
                    VectorList_02.Add(new Vector3(1778.128f, 3802.267f, 38.36934f));
                    VectorList_02.Add(new Vector3(1811.733f, 3853.763f, 34.53526f));
                    VectorList_02.Add(new Vector3(1719.855f, 3851.263f, 34.79908f));
                    VectorList_02.Add(new Vector3(1712.258f, 3844.736f, 35.09302f));
                    VectorList_02.Add(new Vector3(1737.591f, 3899.409f, 35.559f));
                    VectorList_02.Add(new Vector3(1781.677f, 3907.481f, 39.80395f));
                    VectorList_02.Add(new Vector3(1815.851f, 3907.366f, 37.2175f));
                    VectorList_02.Add(new Vector3(1885.031f, 3911.95f, 33.09767f));
                    VectorList_02.Add(new Vector3(1920.32f, 3890.656f, 32.65907f));
                    VectorList_02.Add(new Vector3(1903.048f, 3876.147f, 32.4305f));
                    VectorList_02.Add(new Vector3(1859.193f, 3852.417f, 33.03402f));
                    VectorList_02.Add(new Vector3(1871.298f, 3806.77f, 32.64043f));
                    VectorList_02.Add(new Vector3(1894.649f, 3785.76f, 32.77509f));
                    VectorList_02.Add(new Vector3(1947.112f, 3803.384f, 32.03712f));
                    VectorList_02.Add(new Vector3(1915.621f, 3822.773f, 32.43993f));
                    VectorList_02.Add(new Vector3(1939.32f, 3851.287f, 32.16716f));
                    VectorList_02.Add(new Vector3(1975.69f, 3814.874f, 33.42525f));
                }
                else if (iRandomDrops == 3)
                {
                    iTime_01[0] = 210;//3 1/2 mins
                    VectorList_02.Clear();
                    VectorList_02.Add(new Vector3(2184.301f, 3503.538f, 45.41576f));
                    VectorList_02.Add(new Vector3(2190.204f, 3340.191f, 45.70337f));
                    VectorList_02.Add(new Vector3(2152.329f, 3390.411f, 45.40681f));
                    VectorList_02.Add(new Vector3(2168.019f, 3379.724f, 46.43439f));
                    VectorList_02.Add(new Vector3(2379.093f, 3350.109f, 47.95228f));
                    VectorList_02.Add(new Vector3(2484.173f, 3446.39f, 51.06676f));
                    VectorList_02.Add(new Vector3(2482.338f, 3722.635f, 43.92163f));
                    VectorList_02.Add(new Vector3(2412.371f, 4034.768f, 36.81679f));
                    VectorList_02.Add(new Vector3(2552.169f, 4281.502f, 41.61633f));
                    VectorList_02.Add(new Vector3(2637.038f, 4245.829f, 44.80367f));
                    VectorList_02.Add(new Vector3(2726.922f, 4143.099f, 44.28887f));
                    VectorList_02.Add(new Vector3(2734.81f, 4274.33f, 48.5205f));
                }
                else
                {
                    iTime_01[0] = 300;//5 mins
                    VectorList_02.Clear();
                    VectorList_02.Add(new Vector3(1541.871f, 2239.158f, 77.69897f));
                    VectorList_02.Add(new Vector3(1379.956f, 2164.427f, 97.81518f));
                    VectorList_02.Add(new Vector3(768.7703f, 2177.563f, 52.37225f));
                    VectorList_02.Add(new Vector3(730.4855f, 2332.482f, 50.53867f));
                    VectorList_02.Add(new Vector3(-264.924f, 2206.832f, 130.0993f));
                    VectorList_02.Add(new Vector3(-33.62269f, 1943.332f, 190.1862f));
                    VectorList_02.Add(new Vector3(201.6048f, 2437.004f, 60.46714f));
                    VectorList_02.Add(new Vector3(380.8315f, 2574.337f, 43.51957f));
                    VectorList_02.Add(new Vector3(470.6082f, 2607.824f, 44.47719f));
                    VectorList_02.Add(new Vector3(498.1459f, 2605.617f, 43.69965f));
                    VectorList_02.Add(new Vector3(995.9922f, 2719.427f, 40.08806f));
                    VectorList_02.Add(new Vector3(982.1971f, 2669.811f, 40.06126f));
                    VectorList_02.Add(new Vector3(1582.44f, 2906.777f, 56.95695f));
                }
                vTarget_05 = new Vector3(1929.128f, 4645.529f, 39.35381f);
                iParcelCost = RandInt(10, 20);
                sMissionVar_01 = "";
                BeOnOff[3] = true;
                Packages_DeliverThis(6);
            }
            else
            {
                vFuMiss = new Vector3(-422.5247f, 6061.337f, 30.88972f);

                vGetaway = new Vector3(-410.65f, 6064.71f, 31.08f);
                fGetDir = 182.5f;
                VehicleSpawn("Cruiser", vGetaway, fGetDir, false, false, true, false, 0, 0, 4, 1, false);
                if (iRandomDrops == 1)
                {
                    iTime_01[0] = 180;//3 mins
                    VectorList_01.Clear();
                    VectorList_01.Add(new Vector3(35.34615f, 6662.261f, 32.1904f));
                    VectorList_01.Add(new Vector3(-8.791785f, 6652.338f, 31.11401f));
                    VectorList_01.Add(new Vector3(-40.96972f, 6637.074f, 31.08753f));
                    VectorList_01.Add(new Vector3(-130.0771f, 6551.079f, 29.52209f));
                    VectorList_01.Add(new Vector3(-230.2176f, 6444.808f, 31.19743f));
                    VectorList_01.Add(new Vector3(-247.7849f, 6412.838f, 31.19486f));
                    VectorList_01.Add(new Vector3(-271.8068f, 6399.928f, 31.34099f));
                    VectorList_01.Add(new Vector3(-368.535f, 6340.365f, 29.84361f));
                    VectorList_01.Add(new Vector3(-406.8186f, 6313.565f, 28.94281f));
                    VectorList_01.Add(new Vector3(-448.7317f, 6272.207f, 33.33007f));
                    VectorList_01.Add(new Vector3(-454.3108f, 6198.265f, 29.55284f));
                }
                else if (iRandomDrops == 2)
                {
                    iTime_01[0] = 180;//3 mins
                    VectorList_01.Clear();
                    VectorList_01.Add(new Vector3(0.8270233f, 6613.946f, 31.87855f));
                    VectorList_01.Add(new Vector3(-27.163f, 6597.772f, 31.86064f));
                    VectorList_01.Add(new Vector3(-45.85287f, 6583.171f, 32.17552f));
                    VectorList_01.Add(new Vector3(-105.2644f, 6528.991f, 30.16692f));
                    VectorList_01.Add(new Vector3(-190.2481f, 6411.322f, 31.91249f));
                    VectorList_01.Add(new Vector3(-214.6027f, 6396.603f, 33.08506f));
                    VectorList_01.Add(new Vector3(-228.32f, 6378.578f, 31.759f));
                    VectorList_01.Add(new Vector3(-249.2476f, 6371.27f, 31.48093f));
                    VectorList_01.Add(new Vector3(-282.0695f, 6352.01f, 32.48915f));
                    VectorList_01.Add(new Vector3(-303.2068f, 6329.105f, 32.48937f));
                    VectorList_01.Add(new Vector3(-333.4198f, 6303.397f, 33.08813f));
                    VectorList_01.Add(new Vector3(-358.663f, 6261.862f, 31.48751f));
                    VectorList_01.Add(new Vector3(-379.498f, 6253.611f, 31.8508f));
                }
                else if (iRandomDrops == 3)
                {
                    iTime_01[0] = 120;//2 mins
                    VectorList_01.Clear();
                    VectorList_01.Add(new Vector3(32.80961f, 6595.813f, 32.47044f));
                    VectorList_01.Add(new Vector3(13.30143f, 6577.16f, 32.73557f));
                    VectorList_01.Add(new Vector3(-14.45749f, 6558.055f, 33.24044f));
                    VectorList_01.Add(new Vector3(-163.1803f, 6390.546f, 31.47822f));
                    VectorList_01.Add(new Vector3(-346.0628f, 6222.56f, 31.48944f));
                    VectorList_01.Add(new Vector3(-355.9504f, 6206.227f, 31.4893f));
                    VectorList_01.Add(new Vector3(-373.7543f, 6190.161f, 31.72942f));
                }
                else
                {
                    iTime_01[0] = 60;//1 mins
                    VectorList_01.Clear();
                    VectorList_01.Add(new Vector3(-482.027f, 6277.658f, 13.35727f));
                    VectorList_01.Add(new Vector3(-454.451f, 6337.76f, 12.78236f));
                    VectorList_01.Add(new Vector3(-399.6143f, 6379.244f, 14.10481f));
                }
                vTarget_05 = new Vector3(-410.65f, 6064.71f, 30.08f);
                iParcelCost = RandInt(2, 4);
                sMissionVar_01 = "prop_cliff_paper";
                fCorSize = 2.50f;
            }

            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Packages, iRandomDrops == "+ iRandomDrops, tEx);

            bOnTheJob = true;
        }
        public class PackBuild
        {
            public int Local { get; set; }
            public Vector3 FarstStart { get; set; }
            public Vector3 PackVehStart { get; set; }
            public float PackVehDir { get; set; }
            public string PackVehType { get; set; }
            public string PackDropType { get; set; }
            public int Livery { get; set; }
            public List<Vector3> PackDrops { get; set; }

            public PackBuild()
            {
                PackDrops = new List<Vector3>();
            }
        }
        private void Convicts()
        {
            BigMessageThread.MessageInstance.ShowSimpleShard(sAltLang[3], "", 5000);
            VectorList_01.Clear();
            iList_01.Clear();
            iTime_01.Clear();
            BeOnOff.Clear();
            List<Vector3> Marching = new List<Vector3>();

            int iRandomDrops = 0;

            if (bTestRun)
            {
                bJobLoaded = true;
                iJobType = 4;
                iRandomDrops = 6;
            }
            else
            {
                if (FindBuiltMissions(3))
                {
                    if (bBulderOnly)
                        iRandomDrops = 6;
                    else
                        iRandomDrops = FindRandom(3, 1, 6);
                }
                else
                    iRandomDrops = FindRandom(3, 1, 5);
            }

            if (iRandomDrops == 6)
            {
                int iBuild = 0;

                if (!bTestRun)
                    iBuild = RandInt(0, MyMissions.ConsXM.Count() - 1);

                Marching = new List<Vector3>(MyMissions.ConsXM[iBuild].ConMarch);

                if (MyMissions.ConsXM[iBuild].Local == 1)
                {
                    vFuMiss = new Vector3(808.463f, -1292.11f, 26.20689f);
                    vGetaway = new Vector3(859.1813f, -1350.158f, 26.32215f); fGetDir = 89.46764f;
                }
                else if (MyMissions.ConsXM[iBuild].Local == 2)
                {
                    vFuMiss = new Vector3(-550.1166f, -147.5585f, 38.26155f);
                    vGetaway = new Vector3(-561.4053f, -163.2523f, 38.38601f); fGetDir = 112.3586f;
                }
                else if (MyMissions.ConsXM[iBuild].Local == 3)
                {
                    vFuMiss = new Vector3(-1155.791f, -833.9677f, 14.30229f);
                    vGetaway = new Vector3(-1066.42f, -855.1868f, 5.125729f); fGetDir = 215.7682f;
                }
                else if (MyMissions.ConsXM[iBuild].Local == 4)
                {
                    vFuMiss = new Vector3(574.4177f, -65.24456f, 71.70435f);
                    vGetaway = new Vector3(541.0709f, -43.40835f, 71.08759f); fGetDir = 208.7263f;
                }
                else if (MyMissions.ConsXM[iBuild].Local == 5)
                {
                    vFuMiss = new Vector3(1861.364f, 3670.887f, 33.91336f);
                    vGetaway = new Vector3(1863.648f, 3676.296f, 33.94254f); fGetDir = 120.0636f;
                }
                else 
                {
                    vFuMiss = new Vector3(-438.1813f, 6040.049f, 31.34058f);
                    vGetaway = new Vector3(-460.7939f, 6020.269f, 31.6007f); fGetDir = 316.3787f;
                }
            }
            else if (iLocationX == 1)
            {
                if (iRandomDrops == 1)
                {
                    Marching.Add(new Vector3(228.6289f, -1394.52f, 30.494f));
                    Marching.Add(new Vector3(252.5324f, -1400.599f, 30.53424f));
                    Marching.Add(new Vector3(273.3281f, -1378.727f, 31.95101f));
                    Marching.Add(new Vector3(273.2798f, -1359.458f, 31.93511f));
                    Marching.Add(new Vector3(250.2143f, -1339.669f, 31.92071f));
                    Marching.Add(new Vector3(235.2781f, -1346.481f, 30.5051f));
                    Marching.Add(new Vector3(219.2509f, -1365.954f, 30.56017f));
                }
                else if (iRandomDrops == 2)
                {
                    Marching.Add(new Vector3(-227.1508f, -2023.395f, 27.75543f));
                    Marching.Add(new Vector3(-222.3802f, -2007.24f, 27.75543f));
                    Marching.Add(new Vector3(-219.4253f, -1989.297f, 27.75542f));
                    Marching.Add(new Vector3(-221.2715f, -1971.702f, 27.75571f));
                    Marching.Add(new Vector3(-224.2942f, -1960.297f, 27.75689f));
                    Marching.Add(new Vector3(-240.3955f, -1966.939f, 29.94605f));
                    Marching.Add(new Vector3(-239.069f, -1973.878f, 29.94605f));
                    Marching.Add(new Vector3(-237.4634f, -1992.5f, 29.94605f));
                    Marching.Add(new Vector3(-240.9862f, -2009.94f, 29.94605f));
                    Marching.Add(new Vector3(-249.9569f, -2026.076f, 29.94605f));
                    Marching.Add(new Vector3(-263.3784f, -2040.735f, 29.94605f));
                    Marching.Add(new Vector3(-277.9292f, -2048.336f, 29.94605f));
                    Marching.Add(new Vector3(-273.3261f, -2064.927f, 27.75543f));
                    Marching.Add(new Vector3(-246.0456f, -2048.949f, 27.75543f));
                    Marching.Add(new Vector3(-235.4299f, -2037.349f, 27.75543f));
                }
                else if (iRandomDrops == 3)
                {
                    Marching.Add(new Vector3(-924.767f, -2571.403f, 13.97616f));
                    Marching.Add(new Vector3(-943.3739f, -2565.557f, 13.93645f));
                    Marching.Add(new Vector3(-961.3f, -2544.967f, 13.98062f));
                    Marching.Add(new Vector3(-967.3834f, -2523.3f, 13.98103f));
                    Marching.Add(new Vector3(-965.3172f, -2502.885f, 13.98098f));
                    Marching.Add(new Vector3(-960.5615f, -2492.263f, 13.98057f));
                    Marching.Add(new Vector3(-947.3313f, -2478.542f, 13.9807f));
                    Marching.Add(new Vector3(-932.3168f, -2470.56f, 13.9807f));
                    Marching.Add(new Vector3(-913.9728f, -2467.62f, 13.98073f));
                    Marching.Add(new Vector3(-889.0792f, -2472.986f, 13.98049f));
                    Marching.Add(new Vector3(-872.939f, -2489.196f, 13.98072f));
                    Marching.Add(new Vector3(-866.3092f, -2501.952f, 13.98075f));
                    Marching.Add(new Vector3(-863.3466f, -2512.478f, 13.98059f));
                    Marching.Add(new Vector3(-863.6301f, -2528.947f, 13.98072f));
                    Marching.Add(new Vector3(-869.4406f, -2546.69f, 13.97835f));
                    Marching.Add(new Vector3(-884.2811f, -2561.323f, 13.98074f));
                    Marching.Add(new Vector3(-896.1907f, -2568.416f, 13.98074f));
                    Marching.Add(new Vector3(-903.6213f, -2570.235f, 13.98074f));
                }
                else if (iRandomDrops == 4)
                {
                    Marching.Add(new Vector3(-287.7649f, -1638.534f, 31.84882f));
                    Marching.Add(new Vector3(-298.8279f, -1656.257f, 31.84881f));
                    Marching.Add(new Vector3(-317.5655f, -1644.264f, 31.85344f));
                    Marching.Add(new Vector3(-303.9065f, -1622.695f, 31.84882f));
                }
                else
                {
                    Marching.Add(new Vector3(1476.682f, -1984.691f, 70.69158f));
                    Marching.Add(new Vector3(1453.445f, -1972.131f, 70.44451f));
                    Marching.Add(new Vector3(1434.379f, -1986.595f, 65.75795f));
                    Marching.Add(new Vector3(1423.388f, -2007.92f, 61.90174f));
                    Marching.Add(new Vector3(1433.237f, -2031.683f, 57.47531f));
                    Marching.Add(new Vector3(1469.974f, -2042.295f, 57.02632f));
                    Marching.Add(new Vector3(1478.932f, -2002.187f, 68.38514f));
                }

                vFuMiss = new Vector3(808.463f, -1292.11f, 26.20689f);

                vGetaway = new Vector3(859.1813f, -1350.158f, 26.32215f); fGetDir = 89.46764f;

            }
            else if (iLocationX == 2)
            {
                if (iRandomDrops == 1)
                {
                    Marching.Add(new Vector3(129.9129f, -988.9407f, 29.32248f));
                    Marching.Add(new Vector3(169.9703f, -880.6992f, 30.55882f));
                    Marching.Add(new Vector3(174.1833f, -881.5703f, 30.89416f));
                    Marching.Add(new Vector3(186.1561f, -849.1542f, 31.16665f));
                    Marching.Add(new Vector3(193.5296f, -847.7554f, 30.91245f));
                    Marching.Add(new Vector3(263.498f, -872.455f, 29.17216f));
                    Marching.Add(new Vector3(211.1392f, -1018.212f, 29.30549f));
                }
                else if (iRandomDrops == 2)
                {
                    Marching.Add(new Vector3(356.3345f, 160.7301f, 103.0043f));
                    Marching.Add(new Vector3(222.6689f, 208.8755f, 105.5123f));
                    Marching.Add(new Vector3(266.2624f, 328.2007f, 105.5289f));
                    Marching.Add(new Vector3(339.1058f, 311.9287f, 104.5361f));
                    Marching.Add(new Vector3(404.6719f, 292.2426f, 102.9655f));
                }
                else if (iRandomDrops == 3)
                {
                    Marching.Add(new Vector3(-68.89455f, -402.1517f, 37.29737f));
                    Marching.Add(new Vector3(-103.1039f, -389.6021f, 36.63163f));
                    Marching.Add(new Vector3(-108.889f, -409.1098f, 35.77497f));
                    Marching.Add(new Vector3(-127.2451f, -411.5541f, 34.58294f));
                    Marching.Add(new Vector3(-139.3882f, -421.2568f, 33.74562f));
                    Marching.Add(new Vector3(-148.7219f, -435.5255f, 33.47985f));
                    Marching.Add(new Vector3(-153.0547f, -451.4209f, 33.79173f));
                    Marching.Add(new Vector3(-145.8188f, -464.7188f, 33.17519f));
                    Marching.Add(new Vector3(-132.132f, -472.3099f, 33.07674f));
                    Marching.Add(new Vector3(-121.9619f, -474.8518f, 33.34896f));
                    Marching.Add(new Vector3(-89.17182f, -474.3718f, 34.96899f));
                    Marching.Add(new Vector3(-77.55576f, -466.7515f, 36.39326f));
                    Marching.Add(new Vector3(-67.24388f, -449.3546f, 38.11158f));
                    Marching.Add(new Vector3(-64.59761f, -437.8882f, 38.43552f));
                    Marching.Add(new Vector3(-64.19228f, -419.8323f, 38.09665f));
                }
                else if (iRandomDrops == 4)
                {
                    Marching.Add(new Vector3(-736.3101f, 90.46006f, 55.58132f));
                    Marching.Add(new Vector3(-737.0633f, 69.59921f, 54.30896f));
                    Marching.Add(new Vector3(-734.0124f, 47.01559f, 47.47584f));
                    Marching.Add(new Vector3(-728.4005f, 29.74567f, 42.26787f));
                    Marching.Add(new Vector3(-703.6444f, 36.59576f, 43.22058f));
                    Marching.Add(new Vector3(-681.6513f, 46.41314f, 43.09964f));
                    Marching.Add(new Vector3(-661.1816f, 46.04203f, 41.12265f));
                    Marching.Add(new Vector3(-658.776f, 85.53405f, 52.46266f));
                    Marching.Add(new Vector3(-662.4477f, 103.3301f, 56.80659f));
                    Marching.Add(new Vector3(-662.0488f, 119.3575f, 57.01698f));
                    Marching.Add(new Vector3(-675.6852f, 115.9964f, 56.75283f));
                    Marching.Add(new Vector3(-709.5087f, 98.95238f, 56.07108f));
                    Marching.Add(new Vector3(-718.9947f, 95.15092f, 55.8739f));
                }
                else
                {
                    Marching.Add(new Vector3(-1765.645f, -1149.159f, 13.07916f));
                    Marching.Add(new Vector3(-1837.407f, -1227.053f, 13.01728f));
                    Marching.Add(new Vector3(-1869.622f, -1210.43f, 13.01711f));
                    Marching.Add(new Vector3(-1831.916f, -1162.537f, 13.01727f));
                    Marching.Add(new Vector3(-1806.807f, -1181.257f, 13.01744f));
                    Marching.Add(new Vector3(-1797.633f, -1177.67f, 13.01751f));
                    Marching.Add(new Vector3(-1786.751f, -1169.576f, 13.01768f));
                    Marching.Add(new Vector3(-1660.035f, -1023.637f, 13.01778f));
                    Marching.Add(new Vector3(-1652.489f, -1014.507f, 13.01739f));
                    Marching.Add(new Vector3(-1659.945f, -1009.417f, 13.01739f));
                    Marching.Add(new Vector3(-1709.898f, -1070.201f, 13.01735f));
                    Marching.Add(new Vector3(-1709.359f, -1083.783f, 13.10089f));
                }

                vFuMiss = new Vector3(-550.1166f, -147.5585f, 38.26155f);

                vGetaway = new Vector3(-561.4053f, -163.2523f, 38.38601f); fGetDir = 112.3586f;

            }
            else if (iLocationX == 3)
            {
                if (iRandomDrops == 1)
                {
                    Marching.Add(new Vector3(-2891.325f, -8.690169f, 7.963134f));
                    Marching.Add(new Vector3(-2910.282f, -37.03131f, 3.024998f));
                    Marching.Add(new Vector3(-2999.717f, 0.8205602f, 4.733732f));
                    Marching.Add(new Vector3(-2997.566f, 30.52503f, 7.300454f));
                    Marching.Add(new Vector3(-2995.444f, 36.81783f, 7.95881f));
                    Marching.Add(new Vector3(-2992.152f, 35.16978f, 8.5967f));
                    Marching.Add(new Vector3(-2987.468f, 42.83352f, 11.6085f));
                    Marching.Add(new Vector3(-2939.735f, 20.68083f, 11.60792f));
                    Marching.Add(new Vector3(-2943.227f, 12.65156f, 11.60476f));
                    Marching.Add(new Vector3(-2918.954f, 1.69491f, 11.60532f));
                    Marching.Add(new Vector3(-2891.381f, -6.391256f, 11.60316f));
                    Marching.Add(new Vector3(-2888.387f, 2.114674f, 11.608f));
                    Marching.Add(new Vector3(-2886.561f, 0.7008348f, 11.608f));
                    Marching.Add(new Vector3(-2888.892f, -7.902122f, 7.959469f));
                }
                else if (iRandomDrops == 2)
                {
                    Marching.Add(new Vector3(-1486.228f, 875.5378f, 182.6471f));
                    Marching.Add(new Vector3(-1478.33f, 831.1494f, 181.7178f));
                    Marching.Add(new Vector3(-1514.694f, 814.3276f, 181.9242f));
                    Marching.Add(new Vector3(-1521.786f, 816.0013f, 181.8818f));
                    Marching.Add(new Vector3(-1532.458f, 826.3513f, 181.4863f));
                    Marching.Add(new Vector3(-1543.011f, 817.2687f, 182.2451f));
                    Marching.Add(new Vector3(-1549.201f, 782.2504f, 188.5506f));
                    Marching.Add(new Vector3(-1558.725f, 777.4117f, 189.1925f));
                    Marching.Add(new Vector3(-1584.688f, 765.293f, 189.1942f));
                    Marching.Add(new Vector3(-1592.872f, 784.2383f, 189.194f));
                    Marching.Add(new Vector3(-1578.12f, 790.5488f, 189.1929f));
                    Marching.Add(new Vector3(-1585.357f, 804.7038f, 185.9943f));
                    Marching.Add(new Vector3(-1575.385f, 809.5252f, 185.9944f));
                    Marching.Add(new Vector3(-1578.809f, 818.0173f, 185.9939f));
                    Marching.Add(new Vector3(-1534.582f, 848.1694f, 181.7705f));
                    Marching.Add(new Vector3(-1521.602f, 854.8638f, 181.5947f));
                    Marching.Add(new Vector3(-1496.966f, 870.4911f, 181.9422f));
                }
                else if (iRandomDrops == 3)
                {
                    Marching.Add(new Vector3(-1893.8f, 1974.631f, 143.1386f));
                    Marching.Add(new Vector3(-1929.31f, 1969.096f, 148.8142f));
                    Marching.Add(new Vector3(-1966.108f, 1968.237f, 154.9804f));
                    Marching.Add(new Vector3(-1982.965f, 1961.467f, 160.8532f));
                    Marching.Add(new Vector3(-1987.9f, 1950.067f, 167.1869f));
                    Marching.Add(new Vector3(-1982.987f, 1941.103f, 171.1532f));
                    Marching.Add(new Vector3(-1945.131f, 1917.294f, 173.789f));
                    Marching.Add(new Vector3(-1938.31f, 1890.808f, 179.907f));
                    Marching.Add(new Vector3(-1954.827f, 1842.859f, 180.2473f));
                    Marching.Add(new Vector3(-1957.488f, 1830.848f, 178.8064f));
                    Marching.Add(new Vector3(-1945.764f, 1820.129f, 172.0853f));
                    Marching.Add(new Vector3(-1937.965f, 1823.133f, 170.6982f));
                    Marching.Add(new Vector3(-1920.848f, 1840.997f, 166.5749f));
                    Marching.Add(new Vector3(-1899.503f, 1851.748f, 160.8903f));
                    Marching.Add(new Vector3(-1879.112f, 1865.361f, 156.9021f));
                    Marching.Add(new Vector3(-1841.115f, 1891.895f, 146.2764f));
                    Marching.Add(new Vector3(-1836.474f, 1901.321f, 145.8237f));
                    Marching.Add(new Vector3(-1839.368f, 1912.564f, 147.3022f));
                    Marching.Add(new Vector3(-1853.069f, 1930.572f, 150.2391f));
                    Marching.Add(new Vector3(-1878.708f, 1956.751f, 145.8794f));
                }
                else if (iRandomDrops == 4)
                {
                    Marching.Add(new Vector3(-319.6601f, 2786.814f, 59.43f));
                    Marching.Add(new Vector3(-337.5543f, 2800.789f, 58.15808f));
                    Marching.Add(new Vector3(-338.9051f, 2804.992f, 58.13386f));
                    Marching.Add(new Vector3(-327.3314f, 2822.454f, 58.19631f));
                    Marching.Add(new Vector3(-317.4219f, 2826.94f, 58.47928f));
                    Marching.Add(new Vector3(-312.7925f, 2831.25f, 58.25769f));
                    Marching.Add(new Vector3(-310.0566f, 2831.212f, 58.38048f));
                    Marching.Add(new Vector3(-297.7459f, 2823.444f, 59.15673f));
                    Marching.Add(new Vector3(-299.6138f, 2818.963f, 59.19112f));
                    Marching.Add(new Vector3(-295.6808f, 2811.254f, 58.98975f));
                    Marching.Add(new Vector3(-308.6064f, 2790.959f, 59.41709f));
                    Marching.Add(new Vector3(-316.4038f, 2787.014f, 59.56699f));
                    Marching.Add(new Vector3(-323.0881f, 2789.975f, 59.20899f));
                }
                else
                {
                    Marching.Add(new Vector3(-2768.271f, 2695.774f, 1.370201f));
                    Marching.Add(new Vector3(-2755.266f, 2703.515f, 1.416718f));
                    Marching.Add(new Vector3(-2735.553f, 2738.595f, 1.462122f));
                    Marching.Add(new Vector3(-2730.177f, 2799.426f, 1.757612f));
                    Marching.Add(new Vector3(-2717.147f, 2824.657f, 1.186048f));
                    Marching.Add(new Vector3(-2730.011f, 2855.175f, 1.459975f));
                    Marching.Add(new Vector3(-2720.936f, 2897.158f, 1.232428f));
                    Marching.Add(new Vector3(-2723.055f, 2915.156f, 1.214248f));
                    Marching.Add(new Vector3(-2717.156f, 2934.323f, 1.675791f));
                    Marching.Add(new Vector3(-2736.917f, 2953.923f, 2.776649f));
                    Marching.Add(new Vector3(-2746.004f, 2954.125f, 2.354859f));
                    Marching.Add(new Vector3(-2751.835f, 2943.838f, 2.075438f));
                    Marching.Add(new Vector3(-2752.229f, 2914.945f, 1.281913f));
                    Marching.Add(new Vector3(-2752.62f, 2887.3f, 1.572614f));
                    Marching.Add(new Vector3(-2756.117f, 2854.283f, 1.468493f));
                    Marching.Add(new Vector3(-2764.645f, 2779.508f, 2.047434f));
                    Marching.Add(new Vector3(-2769.536f, 2743.653f, 2.138904f));
                    Marching.Add(new Vector3(-2776.014f, 2720.484f, 2.238141f));
                }

                vFuMiss = new Vector3(-1155.791f, -833.9677f, 14.30229f);

                vGetaway = new Vector3(-1066.42f, -855.1868f, 5.125729f); fGetDir = 215.7682f;

            }
            else if (iLocationX == 4)
            {
                if (iRandomDrops == 1)
                {
                    Marching.Add(new Vector3(1061.091f, -558.9828f, 59.28479f));
                    Marching.Add(new Vector3(1066.203f, -597.2649f, 56.83318f));
                    Marching.Add(new Vector3(1062.106f, -610.6114f, 56.76826f));
                    Marching.Add(new Vector3(1022.904f, -655.5869f, 58.68858f));
                    Marching.Add(new Vector3(1020.39f, -657.876f, 58.61199f));
                    Marching.Add(new Vector3(1020.476f, -698.0944f, 56.81086f));
                    Marching.Add(new Vector3(1056.699f, -719.1822f, 56.815f));
                    Marching.Add(new Vector3(1088.558f, -738.0333f, 56.76314f));
                    Marching.Add(new Vector3(1132.372f, -738.0198f, 56.74362f));
                    Marching.Add(new Vector3(1143.484f, -710.3257f, 56.80364f));
                    Marching.Add(new Vector3(1127.766f, -660.5972f, 56.68017f));
                    Marching.Add(new Vector3(1126.506f, -644.8978f, 56.77164f));
                    Marching.Add(new Vector3(1119.372f, -633.5688f, 56.78326f));
                    Marching.Add(new Vector3(1118.719f, -612.4344f, 56.74827f));
                    Marching.Add(new Vector3(1124.979f, -604.9899f, 56.74682f));
                    Marching.Add(new Vector3(1139.324f, -591.7932f, 56.75398f));
                    Marching.Add(new Vector3(1142.248f, -582.8869f, 56.75351f));
                    Marching.Add(new Vector3(1133.203f, -563.3502f, 56.99999f));
                    Marching.Add(new Vector3(1125.851f, -551.4424f, 56.93082f));
                    Marching.Add(new Vector3(1105.572f, -540.5275f, 57.76503f));
                    Marching.Add(new Vector3(1105.599f, -540.5577f, 57.76052f));
                    Marching.Add(new Vector3(1100.637f, -540.5255f, 57.95548f));
                    Marching.Add(new Vector3(1100.362f, -527.494f, 63.07243f));
                    Marching.Add(new Vector3(1073.51f, -530.7902f, 62.03668f));
                }
                else if (iRandomDrops == 2)
                {
                    Marching.Add(new Vector3(1163.911f, 280.2455f, 82.19042f));
                    Marching.Add(new Vector3(991.5728f, -11.44712f, 81.85177f));
                    Marching.Add(new Vector3(993.7879f, -40.10574f, 81.92294f));
                    Marching.Add(new Vector3(1011.639f, -65.61469f, 82.19008f));
                    Marching.Add(new Vector3(1038.523f, -82.89301f, 82.19008f));
                    Marching.Add(new Vector3(1072.831f, -82.7739f, 82.16786f));
                    Marching.Add(new Vector3(1095.682f, -69.53146f, 82.08484f));
                    Marching.Add(new Vector3(1265.938f, 178.9096f, 81.98807f));
                    Marching.Add(new Vector3(1273.632f, 195.978f, 81.91003f));
                    Marching.Add(new Vector3(1274.658f, 222.6223f, 81.90385f));
                    Marching.Add(new Vector3(1261.318f, 257.1254f, 82.07339f));
                    Marching.Add(new Vector3(1235.155f, 278.5591f, 82.08091f));
                    Marching.Add(new Vector3(1209.412f, 284.0538f, 82.0095f));
                }
                else if (iRandomDrops == 3)
                {
                    Marching.Add(new Vector3(2493.767f, -317.9808f, 92.99265f));
                    Marching.Add(new Vector3(2465.75f, -331.269f, 92.99268f));
                    Marching.Add(new Vector3(2445.703f, -353.545f, 92.98891f));
                    Marching.Add(new Vector3(2446.853f, -417.4889f, 92.99274f));
                    Marching.Add(new Vector3(2474.773f, -444.7306f, 92.99303f));
                    Marching.Add(new Vector3(2480.923f, -437.5063f, 92.99287f));
                    Marching.Add(new Vector3(2479.751f, -420.7701f, 93.73516f));
                    Marching.Add(new Vector3(2481.842f, -406.8932f, 93.73528f));
                    Marching.Add(new Vector3(2494.202f, -390.2369f, 94.11994f));
                    Marching.Add(new Vector3(2493.491f, -374.688f, 94.11996f));
                    Marching.Add(new Vector3(2481.127f, -358.7106f, 93.73526f));
                    Marching.Add(new Vector3(2481.344f, -341.2011f, 93.00871f));
                    Marching.Add(new Vector3(2480.642f, -324.369f, 92.99266f));
                }
                else if (iRandomDrops == 4)
                {
                    Marching.Add(new Vector3(1443.998f, 1032.925f, 114.2406f));
                    Marching.Add(new Vector3(1507.861f, 1033.247f, 114.2185f));
                    Marching.Add(new Vector3(1514.412f, 1043.134f, 114.2258f));
                    Marching.Add(new Vector3(1514.912f, 1101.076f, 114.2287f));
                    Marching.Add(new Vector3(1502.632f, 1178.213f, 114.2156f));
                    Marching.Add(new Vector3(1484.8f, 1185.216f, 114.1505f));
                    Marching.Add(new Vector3(1434.625f, 1186.282f, 114.1913f));
                    Marching.Add(new Vector3(1433.847f, 1092.753f, 114.2267f));
                }
                else
                {
                    Marching.Add(new Vector3(2692.736f, 1705.75f, 24.68079f));
                    Marching.Add(new Vector3(2806.105f, 1705.584f, 24.68113f));
                    Marching.Add(new Vector3(2818.727f, 1704.424f, 24.69106f));
                    Marching.Add(new Vector3(2823.846f, 1699.423f, 24.71452f));
                    Marching.Add(new Vector3(2824.438f, 1696.413f, 24.69556f));
                    Marching.Add(new Vector3(2824.696f, 1647.154f, 24.64242f));
                    Marching.Add(new Vector3(2782.65f, 1647.183f, 24.60208f));
                    Marching.Add(new Vector3(2780.294f, 1653.693f, 24.53028f));
                    Marching.Add(new Vector3(2711.461f, 1654.09f, 24.53372f));
                    Marching.Add(new Vector3(2711.587f, 1647.229f, 24.60396f));
                    Marching.Add(new Vector3(2698.269f, 1646.656f, 24.60472f));
                    Marching.Add(new Vector3(2695.426f, 1649.674f, 24.61012f));
                    Marching.Add(new Vector3(2694.013f, 1653.814f, 24.62069f));
                    Marching.Add(new Vector3(2694.363f, 1691.255f, 24.69635f));
                    Marching.Add(new Vector3(2696.989f, 1695.163f, 24.7006f));
                    Marching.Add(new Vector3(2702.095f, 1696.548f, 24.66678f));
                }

                vFuMiss = new Vector3(574.4177f, -65.24456f, 71.70435f);

                vGetaway = new Vector3(541.0709f, -43.40835f, 71.08759f); fGetDir = 208.7263f;

            }
            else if (iLocationX == 5)
            {
                if (iRandomDrops == 1)
                {
                    Marching.Add(new Vector3(1623.121f, 3228.294f, 40.41154f));
                    Marching.Add(new Vector3(1548.318f, 3147.528f, 40.53161f));
                    Marching.Add(new Vector3(1099.019f, 3015.776f, 40.56151f));
                    Marching.Add(new Vector3(1074.616f, 3035.108f, 41.24891f));
                    Marching.Add(new Vector3(1085.017f, 3076.249f, 40.42923f));
                }
                else if (iRandomDrops == 2)
                {
                    Marching.Add(new Vector3(1090.78f, 3566.191f, 34.09589f));
                    Marching.Add(new Vector3(1091.477f, 3610.838f, 33.05823f));
                    Marching.Add(new Vector3(1047.076f, 3610.903f, 33.11738f));
                    Marching.Add(new Vector3(1012.615f, 3597.394f, 33.21322f));
                    Marching.Add(new Vector3(1017.906f, 3568.242f, 33.92956f));
                }
                else if (iRandomDrops == 3)
                {
                    Marching.Add(new Vector3(73.27388f, 3633.642f, 39.70792f));
                    Marching.Add(new Vector3(27.01976f, 3700.822f, 39.70713f));
                    Marching.Add(new Vector3(28.15174f, 3713.856f, 39.71289f));
                    Marching.Add(new Vector3(35.53751f, 3726.467f, 39.65743f));
                    Marching.Add(new Vector3(73.20634f, 3740.686f, 39.71008f));
                    Marching.Add(new Vector3(83.90422f, 3739.935f, 39.69468f));
                    Marching.Add(new Vector3(99.68319f, 3726.861f, 39.67576f));
                    Marching.Add(new Vector3(102.9181f, 3719.429f, 39.70041f));
                    Marching.Add(new Vector3(82.71038f, 3679.274f, 39.71919f));
                    Marching.Add(new Vector3(81.40222f, 3636.785f, 39.69534f));
                }
                else if (iRandomDrops == 4)
                {
                    Marching.Add(new Vector3(1041.883f, 2191.695f, 44.96709f));
                    Marching.Add(new Vector3(1066.888f, 2213.252f, 46.80863f));
                    Marching.Add(new Vector3(1031.368f, 2213.759f, 51.05772f));
                    Marching.Add(new Vector3(989.4823f, 2218.621f, 47.55013f));
                    Marching.Add(new Vector3(997.8649f, 2204.891f, 46.05443f));
                    Marching.Add(new Vector3(1021.423f, 2190.472f, 45.28568f));
                }
                else
                {
                    Marching.Add(new Vector3(2440.191f, 4837.629f, 36.53263f));
                    Marching.Add(new Vector3(2428.567f, 4921.247f, 43.66103f));
                    Marching.Add(new Vector3(2472.179f, 4965.375f, 45.16649f));
                    Marching.Add(new Vector3(2480.896f, 4990.179f, 46.22219f));
                    Marching.Add(new Vector3(2478.137f, 5002.943f, 45.85592f));
                    Marching.Add(new Vector3(2466.199f, 5016.405f, 45.56878f));
                    Marching.Add(new Vector3(2416.468f, 4969.382f, 46.13856f));
                    Marching.Add(new Vector3(2386.791f, 4938.182f, 42.70732f));
                    Marching.Add(new Vector3(2363.594f, 4912.43f, 41.9899f));
                    Marching.Add(new Vector3(2373.377f, 4895.569f, 41.92224f));
                    Marching.Add(new Vector3(2394.373f, 4874.57f, 40.84945f));
                }

                vFuMiss = new Vector3(1861.364f, 3670.887f, 33.91336f);

                vGetaway = new Vector3(1863.648f, 3676.296f, 33.94254f); fGetDir = 120.0636f;
            }
            else
            {
                if (iRandomDrops == 1)
                {
                    Marching.Add(new Vector3(234.6885f, 6418.486f, 30.96218f));
                    Marching.Add(new Vector3(248.8196f, 6415.337f, 31.88116f));
                    Marching.Add(new Vector3(269.739f, 6414.965f, 32.11745f));
                    Marching.Add(new Vector3(288.8002f, 6420.939f, 31.35575f));
                    Marching.Add(new Vector3(298.797f, 6432.084f, 31.80929f));
                    Marching.Add(new Vector3(301.9339f, 6444.203f, 32.29673f));
                    Marching.Add(new Vector3(306.1744f, 6493.814f, 29.37009f));
                    Marching.Add(new Vector3(250.2143f, 6489.353f, 30.67807f));
                    Marching.Add(new Vector3(171.8803f, 6482.01f, 31.94304f));
                    Marching.Add(new Vector3(175.2863f, 6475.943f, 31.89293f));
                }
                else if (iRandomDrops == 2)
                {
                    Marching.Add(new Vector3(157.3289f, 7044.97f, 1.865713f));
                    Marching.Add(new Vector3(102.7529f, 7073.901f, 1.931986f));
                    Marching.Add(new Vector3(52.24357f, 7079.25f, 2.17193f));
                    Marching.Add(new Vector3(23.56722f, 7052.823f, 1.409035f));
                    Marching.Add(new Vector3(31.16364f, 7023.305f, 7.387625f));
                    Marching.Add(new Vector3(41.1493f, 7013.06f, 8.625368f));
                    Marching.Add(new Vector3(36.24067f, 6995.254f, 8.021345f));
                    Marching.Add(new Vector3(73.45621f, 6951.467f, 11.52127f));
                    Marching.Add(new Vector3(76.90339f, 6968.756f, 10.14844f));
                    Marching.Add(new Vector3(96.15324f, 6976.542f, 9.490364f));
                    Marching.Add(new Vector3(144.0458f, 6980.392f, 8.019959f));
                    Marching.Add(new Vector3(157.614f, 6990.637f, 4.969121f));
                    Marching.Add(new Vector3(158.9223f, 7011.254f, 3.681879f));
                }
                else if (iRandomDrops == 3)
                {
                    Marching.Add(new Vector3(-576.4569f, 5452.922f, 60.71923f));
                    Marching.Add(new Vector3(-560.6669f, 5474.996f, 61.77381f));
                    Marching.Add(new Vector3(-552.685f, 5494.2f, 59.80086f));
                    Marching.Add(new Vector3(-550.2758f, 5515.276f, 59.87648f));
                    Marching.Add(new Vector3(-572.0354f, 5544.016f, 52.74706f));
                    Marching.Add(new Vector3(-601.4049f, 5515.799f, 49.60851f));
                    Marching.Add(new Vector3(-620.7578f, 5506.275f, 51.13645f));
                    Marching.Add(new Vector3(-634.4025f, 5477.448f, 53.29848f));
                    Marching.Add(new Vector3(-637.6897f, 5453.631f, 52.85682f));
                    Marching.Add(new Vector3(-595.5697f, 5458.982f, 59.10485f));
                }
                else if (iRandomDrops == 4)
                {
                    Marching.Add(new Vector3(-334.3983f, 6183.464f, 31.42284f));
                    Marching.Add(new Vector3(-305.0548f, 6212.236f, 31.45675f));
                    Marching.Add(new Vector3(-302.0125f, 6213.075f, 31.39697f));
                    Marching.Add(new Vector3(-284.0596f, 6234.494f, 31.49339f));
                    Marching.Add(new Vector3(-237.9272f, 6281.979f, 31.45799f));
                    Marching.Add(new Vector3(-252.1601f, 6297.677f, 31.45717f));
                    Marching.Add(new Vector3(-301.6298f, 6251.044f, 31.51244f));
                    Marching.Add(new Vector3(-305.8697f, 6247.805f, 31.43438f));
                    Marching.Add(new Vector3(-318.1996f, 6232.045f, 31.48331f));
                    Marching.Add(new Vector3(-322.5253f, 6227.77f, 31.46884f));
                    Marching.Add(new Vector3(-360.4957f, 6191.922f, 31.48243f));
                }
                else
                {
                    Marching.Add(new Vector3(-1445.911f, 4228.153f, 49.88695f));
                    Marching.Add(new Vector3(-1437.855f, 4232.769f, 48.72689f));
                    Marching.Add(new Vector3(-1414.334f, 4225.317f, 42.9243f));
                    Marching.Add(new Vector3(-1406.202f, 4234.257f, 39.57491f));
                    Marching.Add(new Vector3(-1398.107f, 4235.384f, 37.1693f));
                    Marching.Add(new Vector3(-1381.473f, 4242.933f, 32.96693f));
                    Marching.Add(new Vector3(-1379.1f, 4227.457f, 27.85471f));
                    Marching.Add(new Vector3(-1375.508f, 4221.704f, 26.20435f));
                    Marching.Add(new Vector3(-1371.023f, 4221.62f, 24.55573f));
                    Marching.Add(new Vector3(-1369.318f, 4234.283f, 21.74896f));
                    Marching.Add(new Vector3(-1365.844f, 4237.374f, 20.58922f));
                    Marching.Add(new Vector3(-1362.55f, 4222.789f, 18.0125f));
                    Marching.Add(new Vector3(-1357.766f, 4223.158f, 16.33216f));
                    Marching.Add(new Vector3(-1355.488f, 4230.613f, 14.08321f));
                    Marching.Add(new Vector3(-1349.775f, 4261.309f, 7.204568f));
                    Marching.Add(new Vector3(-1350.807f, 4280.167f, 3.489815f));
                    Marching.Add(new Vector3(-1366.992f, 4291.422f, 2.879005f));
                    Marching.Add(new Vector3(-1375.258f, 4295.798f, 2.808748f));
                    Marching.Add(new Vector3(-1409.907f, 4301.811f, 5.031199f));
                    Marching.Add(new Vector3(-1511.659f, 4307.015f, 5.628844f));
                    Marching.Add(new Vector3(-1585.516f, 4343.747f, 3.159351f));
                    Marching.Add(new Vector3(-1610.404f, 4373.366f, 2.441379f));
                    Marching.Add(new Vector3(-1644.269f, 4431.979f, 3.232418f));
                    Marching.Add(new Vector3(-1677.754f, 4452.332f, 2.484089f));
                    Marching.Add(new Vector3(-1734.826f, 4452.425f, 4.763266f));
                    Marching.Add(new Vector3(-1783.387f, 4475.105f, 11.17609f));
                    Marching.Add(new Vector3(-1815.323f, 4479.708f, 17.87292f));
                    Marching.Add(new Vector3(-1842.674f, 4500.0f, 22.1328f));
                    Marching.Add(new Vector3(-1855.061f, 4500.765f, 22.36915f));
                    Marching.Add(new Vector3(-1878.805f, 4481.325f, 26.10547f));
                    Marching.Add(new Vector3(-1912.77f, 4482.177f, 29.16429f));
                    Marching.Add(new Vector3(-1927.905f, 4460.231f, 34.65511f));
                    Marching.Add(new Vector3(-1905.194f, 4437.292f, 42.7122f));
                    Marching.Add(new Vector3(-1870.033f, 4417.005f, 48.25819f));
                    Marching.Add(new Vector3(-1739.497f, 4344.018f, 62.30252f));
                    Marching.Add(new Vector3(-1701.276f, 4303.689f, 69.18857f));
                    Marching.Add(new Vector3(-1659.563f, 4215.886f, 82.93988f));
                    Marching.Add(new Vector3(-1637.42f, 4205.126f, 84.06075f));
                    Marching.Add(new Vector3(-1587.657f, 4200.398f, 81.1502f));
                    Marching.Add(new Vector3(-1567.076f, 4205.095f, 78.5675f));
                    Marching.Add(new Vector3(-1566.948f, 4205.121f, 78.53695f));
                    Marching.Add(new Vector3(-1489.583f, 4226.147f, 57.02686f));
                    Marching.Add(new Vector3(-1461.699f, 4225.801f, 52.18763f));
                }

                vFuMiss = new Vector3(-438.1813f, 6040.049f, 31.34058f);

                vGetaway = new Vector3(-460.7939f, 6020.269f, 31.6007f); fGetDir = 316.3787f;
            }

            iMissionVar_01 = RandInt(0, Marching.Count - 1);

            if (Marching.Count > 0)
                VectorList_01 = Marching;
            iPlayGroup = Function.Call<int>(Hash.CREATE_GROUP, 0);


            VehicleSpawn("PBus", vGetaway, fGetDir, false, false, bShowRoute, true, 0, 0, 5, 1, false);

            vTarget_01 = VectorList_01[iMissionVar_01];

            BeOff[0] = false;
            BeOff[1] = false;
            BeOff[2] = false;
            BeOff[3] = false;

            BeOnOff.Add(false);//bTruckBlip

            iTime_01.Add(0);

            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Convicts, iRandomDrops == " + iRandomDrops, tEx);

            bOnTheJob = true;
        }
        public class ConsBuild
        {
            public int Local { get; set; }
            public List<Vector3> ConMarch { get; set; }

            public ConsBuild()
            {
                ConMarch = new List<Vector3>();
            }
        }
        private void FUber()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("FUber", tEx);

            iList_01.Clear();
            BeOnOff.Clear();

            int iFubPick = 0;

            iCashBouns = 5;

            string MyZone = World.GetZoneNameLabel(Game.Player.Character.Position);

            if (iLocationX == 1)
            {
                if (MyZone == "AIRP")
                    iFubPick = 1;
                else if (MyZone == "ELYSIAN")
                    iFubPick = 2;
                else if (MyZone == "TERMINA")
                    iFubPick = 3;
                else if (MyZone == "CYPRE")
                    iFubPick = 4;
                else if (MyZone == "EBURO")//houses
                    iFubPick = 5;
                else if (MyZone == "MURRI")
                    iFubPick = 6;
                else if (MyZone == "BANNING" || MyZone == "STAD")
                    iFubPick = 7;
                else if (MyZone == "RANCHO")//houses
                    iFubPick = 8;
                else if (MyZone == "DAVIS")//houses
                    iFubPick = 9;
                else if (MyZone == "LOSPUER" || MyZone == "DELSOL")
                    iFubPick = 10;
                else if (MyZone == "CHAMH")//houses
                    iFubPick = 11;
                else if (MyZone == "STRAW")
                    iFubPick = 12;
                else if (MyZone == "LMESA")
                    iFubPick = 13;
                else
                    iFubPick = 0;
            }
            else if (iLocationX == 2)
            {
                if (MyZone == "SKID")
                    iFubPick = 1;
                else if (MyZone == "LEGSQU")
                    iFubPick = 2;
                else if (MyZone == "TEXTI")
                    iFubPick = 3;
                else if (MyZone == "PBOX")
                    iFubPick = 4;
                else if (MyZone == "DTVINE")
                    iFubPick = 5;
                else if (MyZone == "KOREAT")//   houses
                    iFubPick = 6;
                else if (MyZone == "VCANA")//    houses
                    iFubPick = 7;
                else if (MyZone == "VESP")
                    iFubPick = 8;
                else if (MyZone == "BEACH")
                    iFubPick = 9;
                else if (MyZone == "DELBE")
                    iFubPick = 10;
                else if (MyZone == "DELPE" || MyZone == "SanAnd")
                    iFubPick = 11;
                else if (MyZone == "MOVIE" || MyZone == "MORN")
                    iFubPick = 12;
                else if (MyZone == "ROCKF" || MyZone == "golf")//    houses
                    iFubPick = 13;
                else if (MyZone == "BURTON")
                    iFubPick = 14;
                else if (MyZone == "ALTA")//    housese 
                    iFubPick = 15;
                else if (MyZone == "HAWICK")//  houses 
                    iFubPick = 16;
                else if (MyZone == "WVINE")//    houses
                    iFubPick = 17;
                else
                    iFubPick = 0;
            }
            else if (iLocationX == 3)
            {
                if (MyZone == "RICHM" || MyZone == "RGLEN") // houses
                    iFubPick = 1;
                else if (MyZone == "PBLUFF")
                    iFubPick = 2;
                else if (MyZone == "BHAMCA" || MyZone == "BANHAMC" || MyZone == "CHU")// houses
                    iFubPick = 3;
                else if (MyZone == "TONGVAH" || MyZone == "TONGVAV")
                    iFubPick = 4;
                else
                    iFubPick = 0;
            }
            else if (iLocationX == 4)
            {
                if (MyZone == "MIRR") // houses
                    iFubPick = 1;
                else if (MyZone == "PALHIGH" || MyZone == "NOOSE")
                    iFubPick = 2;
                else if (MyZone == "TATAMO" || MyZone == "PALMPOW" || MyZone == "WINDF")
                    iFubPick = 3;
                else if (MyZone == "HORS" || MyZone == "EAST_V")
                    iFubPick = 4;
                else if (MyZone == "CHIL")
                    iFubPick = 5;
                else
                    iFubPick = 0;
            }
            else if (iLocationX == 5)
            {
                if (MyZone == "GREATC" || MyZone == "ZANCUDO" || MyZone == "SLAB")
                    iFubPick = 1;
                else if (MyZone == "DESRT" || MyZone == "HARMO" || MyZone == "RTRAK" || MyZone == "JAIL") // houes
                    iFubPick = 2;
                else if (MyZone == "ZQ_UAR")
                    iFubPick = 3;
                else if (MyZone == "SANDY")// houses
                    iFubPick = 4;
                else if (MyZone == "ALAMO")
                    iFubPick = 5;
                else if (MyZone == "SANCHIA" || MyZone == "HUMLAB")
                    iFubPick = 6;
                else if (MyZone == "GRAPES" || MyZone == "GALFISH")// houses
                    iFubPick = 7;
                else
                    iFubPick = 0;
            }
            else
            {
                if (MyZone == "ARMYB" || MyZone == "MTJOSE" || MyZone == "NCHU" || MyZone == "CANNY" || MyZone == "CCREAK" || MyZone == "CMSW" || MyZone == "PALCOV")
                    iFubPick = 1;
                else if (MyZone == "MTCHIL" || MyZone == "PROCOB" || MyZone == "PALFOR")
                    iFubPick = 2;
                else if (MyZone == "PALETO") // houses
                    iFubPick = 3;
                else if (MyZone == "BRADP" || MyZone == "MTGORDO" || MyZone == "ELGORL")
                    iFubPick = 4;
                else
                    iFubPick = 0;
            }

            if (bTestRun)
            {
                iFubPick = 1;
                Fubar_Vectors(1, 1, false, true);
                vTarget_02 = VectorList_01[0];//Park Here
                vTarget_01 = VectorList_02[0];//Ped Spawn
                Fubar_Vectors(iLocationX, iFubPick, true, false);
            }
            else
            {
                if (iFubPick == 0)
                    iFubPick = Fubar_Vectors(iLocationX, iFubPick, true, true);
                else
                    iFubPick = Fubar_Vectors(iLocationX, iFubPick, false, true);

                int iRandomPicks = iRandomPicks = RandInt(0, VectorList_01.Count - 1);

                vTarget_02 = VectorList_01[iRandomPicks];//Park Here
                while (vGetaway.DistanceTo(vTarget_02) < 2.00f)
                {
                    iRandomPicks = iRandomPicks = RandInt(0, VectorList_01.Count - 1);
                    vTarget_02 = VectorList_01[iRandomPicks];//Park Here
                }
                vTarget_01 = VectorList_02[iRandomPicks];//Ped Spawn
            }

            int iRanDest = FindRandom(4, 0, 50);
            if (iRanDest < 20)
            {
                int YourDest = RandInt(0, VectorList_01.Count - 1);
                vTarget_03 = VectorList_01[YourDest];
                while (vTarget_02.DistanceTo(vTarget_03) < 30.00f)
                {
                    YourDest = RandInt(0, VectorList_01.Count - 1);
                    vTarget_03 = VectorList_01[YourDest];
                }
            }
            else if (iRanDest < 35)
            {
                int iZoneOut = iFubPick;

                while (iZoneOut == iFubPick)
                    iZoneOut = Fubar_Vectors(iLocationX, 0, true, false);

                int iBe = RandInt(0, VectorList_01.Count - 1);

                vTarget_03 = VectorList_01[iBe];
            }
            else if (iRanDest < 49)
            {
                int iPickDiff = iLocationX;

                if (iPickDiff > 1 && iPickDiff < 6)
                {
                    if (RandBool(2))
                        iPickDiff += 1;
                    else
                        iPickDiff -= 1;
                }
                else if (iPickDiff == 1)
                    iPickDiff = 2;
                else
                    iPickDiff = 5;

                Fubar_Vectors(iPickDiff, 0, true, false);

                int iBe = RandInt(0, VectorList_01.Count - 1);

                vTarget_03 = VectorList_01[iBe];
            }
            else
            {
                vTarget_03 = new Vector3(-1033.683f, -2722.559f, 12.99118f);
            }

            vTarget_02.Z -= 1.0f;
            vTarget_03.Z -= 1.0f;

            vGetaway = vTarget_03;

            if (!bMoreFubar)
            {
                VTBTimerPool.Add(ttTextBar_01);
                ttTextBar_01.Label = "" + sAltLang[294] + "";
                BigMessageThread.MessageInstance.ShowSimpleShard(sAltLang[4], "", 5000);
                VehicleSpawn("Dilettante", World.GetNextPositionOnStreet(Game.Player.Character.Position), fphdirect, false, false, false, true, 3, 1, 1, 1, true);
            }

            iList_01.Add(0);//iToteTaxi  0
            iList_01.Add(0);//iDeadTaxi  1
            iList_01.Add(0);//iAngerTax  2
            iList_01.Add(RandInt(1, 3));//iFUberPass  3
            iList_01.Add(0);//iStupidPed 4

            BeOnOff.Add(false);//bTruckBlip 0
            BeOnOff.Add(false);//bMoveYourV 1
            BeOnOff.Add(false);//bVAComplete2
            BeOnOff.Add(false);//bRadioPlay 3
            iMissionSeq = 0;
            bOnTheJob = true;
        }
        public class FuberBuild
        {
            public int Local { get; set; }
            public Vector3 FUbarCar { get; set; }
            public Vector3 FUbarPed { get; set; }
        }
        private void Pilot()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Pilot", tEx);

            if (iLocationX == 1)
            {
                vFuMiss = new Vector3(-808.957f, -1558.815f, 6.031153f);

                BigMessageThread.MessageInstance.ShowSimpleShard(sAltLang[5], sAltLang[80], 5000);
                VTBTimerPool.Add(ttTextBar_03);
                ttTextBar_03.Label = "" + sAltLang[305] + "";
                iCoronaList.Clear();
                PropList_01.Clear();
                iTime_01.Clear();
                iList_01.Clear();
                fList_01.Clear();
                BeOnOff.Clear();

                string fInflateGate = "ar_prop_inflategates_cp_h2";
                string fStartBlock = "stt_prop_stunt_bblock_huge_02";
                Vector3 posy = new Vector3(-837.200867f, -1628.32861f, -0.25f);
                Vector3 Rota = new Vector3(0.0f, 0.0f, -47.1415977f);
                BuildProp(fStartBlock, posy, Rota, true, true);

                posy = new Vector3(-1770.9104f, -1190.31116f, -1.75f);
                Rota = new Vector3(0.0f, 0.0f, 50.78582f);
                BuildProp(fInflateGate, posy, Rota, true, true);

                posy = new Vector3(-1614.61548f, -1297.24561f, -1.75f);
                Rota = new Vector3(0.0f, 0.0f, -46.1202126f);
                BuildProp(fInflateGate, posy, Rota, true, true);

                posy = new Vector3(-1735.17041f, -1146.11926f, -1.75f);
                Rota = new Vector3(0.0f, 0.0f, -127.55275f);
                BuildProp(fInflateGate, posy, Rota, true, true);

                posy = new Vector3(-1548.09167f, -1366.90845f, -1.75f);
                Rota = new Vector3(0.0f, 0.0f, 128.643829f);
                BuildProp(fInflateGate, posy, Rota, true, true);

                posy = new Vector3(-1638.41821f, -1146.68958f, -1.75f);
                Rota = new Vector3(0.0f, 0.0f, -134.754181f);
                BuildProp(fInflateGate, posy, Rota, true, true);

                posy = new Vector3(-1764.59583f, -1277.83801f, -1.75f);
                Rota = new Vector3(0.0f, 0.0f, 44.9944763f);
                BuildProp(fInflateGate, posy, Rota, true, true);

                posy = new Vector3(-1725.89832f, -1406.23682f, 1.75f);
                Rota = new Vector3(0.0f, 0.0f, -50.0115967f);
                BuildProp(fInflateGate, posy, Rota, true, true);

                posy = new Vector3(-1669.31799f, -1470.46326f, 1.75f);
                Rota = new Vector3(0.0f, 0.0f, 125.150612f);
                BuildProp(fInflateGate, posy, Rota, true, true);

                posy = new Vector3(-819.915039f, -1612.55334f, -5.71f);
                Rota = new Vector3(0.00f, 179.99f, 132.76f);
                BuildProp("prop_ind_barge_02", posy, Rota, true, true);

                VectorList_01.Clear();
                VectorList_01.Add(new Vector3(-1606.878f, -1063.248f, 39.63494f));
                VectorList_01.Add(new Vector3(-1441.708f, -1286.413f, 17.71205f));
                VectorList_01.Add(new Vector3(-1507.741f, -1620.703f, 215.414f));
                VectorList_01.Add(new Vector3(-1660.58f, -1355.754f, 42.74666f));
                VectorList_01.Add(new Vector3(-1762.695f, -1156.728f, 50.28794f));
                VectorList_01.Add(new Vector3(-1778.513f, -961.5923f, 45.5566f));
                VectorList_01.Add(new Vector3(-1637.696f, -906.721f, 40.6034f));
                VectorList_01.Add(new Vector3(-1485.101f, -1016.242f, 45.83596f));
                VectorList_01.Add(new Vector3(-1497.698f, -1237.158f, 50.0643f));
                VectorList_01.Add(new Vector3(-1588.551f, -1342.19f, 45.82077f));
                VectorList_01.Add(new Vector3(-1706.297f, -1449.52f, 43.77718f));
                VectorList_01.Add(new Vector3(-1867.604f, -1559.695f, 35.9673f));
                VectorList_01.Add(new Vector3(-2144.738f, -1466.103f, 49.63389f));
                VectorList_01.Add(new Vector3(-2174.646f, -1240.072f, 43.40317f));
                VectorList_01.Add(new Vector3(-2026.626f, -1144.635f, 43.44013f));
                VectorList_01.Add(new Vector3(-1841.927f, -1130.624f, 44.5578f));
                VectorList_01.Add(new Vector3(-1743.697f, -1180.515f, 43.03557f));
                VectorList_01.Add(new Vector3(-1587.45f, -1447.784f, 46.62258f));
                VectorList_01.Add(new Vector3(-1012.828f, -1792.611f, 42.19064f));
                vTarget_01 = new Vector3(-810.1065f, -1603.461f, 0.21f);//plane spawn point
                VehicleSpawn("Howard", vTarget_01, 131.772f, false, true, true, false, 2, 3, 6, 1, true);

                iTime_01.Add(0);//iColourTime   0

                iList_01.Add(0);//iColour       0
                iList_01.Add(0);//iCorronas     1
                iList_01.Add(0);//iLaptime     2

                fList_01.Add(0.00f);
                fList_01.Add(0.00f);
                fList_01.Add(0.00f);

                BeOnOff.Add(false);//PlaneSmoke
            }
            else if (iLocationX == 2)
            {
                vFuMiss = new Vector3(-752.767f, -243.5818f, 36.58149f);

                VectorList_01.Clear();
                VectorList_02.Clear();
         
                VectorList_01.Add(new Vector3(-1082.904f, -1262.042f, 5.601765f));//White Widow Garage -La Puerta--Area 2
                VectorList_01.Add(new Vector3(274.8883f, -3015.478f, 5.697752f));//Pier 400 Utility Building -Elysian Island--Area 1
                VectorList_01.Add(new Vector3(51.19014f, -2571.348f, 6.004592f));//Pacific Bait Storage -Elysian Island--Area 1
                VectorList_01.Add(new Vector3(-424.7138f, 185.4996f, 80.79431f));//Foreclosed Garage -West Vinewood--Area 2
                VectorList_01.Add(new Vector3(247.5364f, -1956.876f, 23.20047f));//Convenience Store Lockup -Rancho--Area 1
                VectorList_01.Add(new Vector3(896.3674f, -1036.089f, 35.11144f)); //Celltowa Unit -La Mesa--Area 1
                VectorList_01.Add(new Vector3(499.7f, -652.116f, 24.90832f));  //Railyard Warehouse -La Mesa--Area 1
                VectorList_01.Add(new Vector3(539.6681f, -1945.474f, 24.98463f));   //Old Power Station -Rancho--Area 1
                VectorList_01.Add(new Vector3(-315.2117f, -2698.162f, 7.550228f));  //LS Marine Building 3 -Elysian Island--Area 1
                VectorList_01.Add(new Vector3(1569.585f, -2130.049f, 78.33009f));   //GEE Warehouse -El Burro Heights--Area 4
                VectorList_01.Add(new Vector3(-528.1617f, -1784.413f, 21.5696f));   //Fridgit Annexe -La Puerta--Area 1
                VectorList_01.Add(new Vector3(-324.7966f, -1356.194f, 31.29572f));  //Disused Factory Outlet -Strawberry--Area 1
                VectorList_01.Add(new Vector3(367.8993f, 351.118f, 103.116f)); // Discount Retail Unit -Downtown Vinewood--Area 2
                VectorList_01.Add(new Vector3(-1268.326f, -812.3163f, 17.10782f)); //Derriere Lingerie Backlot -Del Perro--Area 2
                VectorList_01.Add(new Vector3(-1042.583f, -2023.351f, 13.16157f)); //Xero Gas Factory -LSIA--Area 1 
                VectorList_01.Add(new Vector3(1037.856f, -2173.218f, 31.53337f));   //Wholesale Furniture -Cypress Flats--Area 1 
                VectorList_01.Add(new Vector3(-245.2137f, 203.542f, 83.92123f));    //West Vinewood Backlot -West Vinewood--Area 2
                VectorList_01.Add(new Vector3(95.99369f, -2216.351f, 6.171199f));   //Walker & Sons Warehouse -Banning--Area 1
                VectorList_01.Add(new Vector3(926.5911f, -1560.207f, 30.74203f));   //Logistics Depot -La Mesa--Area 1
                VectorList_01.Add(new Vector3(759.4894f, -909.5288f, 25.28011f));   //Darnel Bros Warehouse -La Mesa--Area 1
                VectorList_01.Add(new Vector3(1017.381f, -2529.118f, 28.30198f));   //Cypress Warehouses -Cypress Flats--Area 1
                VectorList_01.Add(new Vector3(-863.278f, -2717.185f, 13.93703f)); //Bilgeco Warehouse -LSIA--Area 1
                VectorList_01.Add(new Vector3(1213.582f, -1256.47f, 35.22673f));   //Murrieta Heights--Area 4
                VectorList_01.Add(new Vector3(-514.9291f, -2202.32f, 6.394022f));   //LSIA_2--Area 1
                VectorList_01.Add(new Vector3(-1151.348f, -2171.485f, 13.27091f));  //LSIA_1--Area 1
                VectorList_01.Add(new Vector3(-632.261f, -1779.464f, 23.99491f));   //La Puerta--Area 1
                VectorList_01.Add(new Vector3(1002.028f, -1855.53f, 31.03982f));    //La Mesa--Area 1
                VectorList_01.Add(new Vector3(144.3457f, -3005.535f, 7.030923f));   //Elysian Island--Area 1
                VectorList_01.Add(new Vector3(1754.477f, -1649.149f, 112.6555f));   //El Burro Heights--Area 4
                VectorList_01.Add(new Vector3(-72.075f, -1821.423f, 26.94197f));    //Davis--Area 1
                VectorList_01.Add(new Vector3(804.5797f, -2220.493f, 29.44927f)); //Cypress Flats--Area 1

                VectorList_02.Add(new Vector3(-1071.595f, -1257.742f, 5.765803f));
                VectorList_02.Add(new Vector3(265.5325f, -3013.481f, 5.733489f));
                VectorList_02.Add(new Vector3(53.12275f, -2555.897f, 6.000017f));
                VectorList_02.Add(new Vector3(-440.39f, 184.3075f, 75.24253f));
                VectorList_02.Add(new Vector3(235.1687f, -1939.101f, 23.467f));
                VectorList_02.Add(new Vector3(899.2383f, -1021.448f, 34.96652f));
                VectorList_02.Add(new Vector3(512.4969f, -646.7656f, 24.75116f));
                VectorList_02.Add(new Vector3(566.2303f, -1947.01f, 24.77984f));
                VectorList_02.Add(new Vector3(-299.1319f, -2700.198f, 6.000292f));
                VectorList_02.Add(new Vector3(1553.864f, -2141.628f, 77.51177f));
                VectorList_02.Add(new Vector3(-531.0887f, -1769.243f, 21.3567f));
                VectorList_02.Add(new Vector3(-338.617f, -1375.384f, 31.29641f));
                VectorList_02.Add(new Vector3(363.4832f, 318.7624f, 103.5593f));
                VectorList_02.Add(new Vector3(-1278.058f, -818.5338f, 17.11186f));
                VectorList_02.Add(new Vector3(-1062.267f, -2021.632f, 13.16158f));
                VectorList_02.Add(new Vector3(1065.253f, -2174.105f, 31.85984f));
                VectorList_02.Add(new Vector3(-260.1906f, 193.9405f, 85.02009f));
                VectorList_02.Add(new Vector3(89.80456f, -2215.411f, 6.049509f));
                VectorList_02.Add(new Vector3(910.07f, -1561.849f, 30.74919f));
                VectorList_02.Add(new Vector3(772.2822f, -908.2357f, 25.27207f));
                VectorList_02.Add(new Vector3(1004.686f, -2510.55f, 28.30198f));
                VectorList_02.Add(new Vector3(-887.592f, -2731.941f, 13.82849f));
                VectorList_02.Add(new Vector3(1204.382f, -1266.914f, 35.22673f));
                VectorList_02.Add(new Vector3(-498.4551f, -2180.958f, 7.789339f));
                VectorList_02.Add(new Vector3(-1165.239f, -2188.126f, 13.19559f));
                VectorList_02.Add(new Vector3(-640.1238f, -1792.985f, 24.17831f));
                VectorList_02.Add(new Vector3(1007.468f, -1864.927f, 30.88983f));
                VectorList_02.Add(new Vector3(133.2242f, -2988.763f, 7.030922f));
                VectorList_02.Add(new Vector3(1778.321f, -1664.141f, 112.6454f));
                VectorList_02.Add(new Vector3(-60.11577f, -1834.603f, 26.73312f));
                VectorList_02.Add(new Vector3(810.2488f, -2236.852f, 29.70855f));

                BigMessageThread.MessageInstance.ShowSimpleShard(sAltLang[5], sAltLang[81], 5000);
                vTarget_01 = new Vector3(-760.15f, -226.8486f, 36.28f);
                int iRandStar = FindRandom(5, 0, VectorList_01.Count - 1);
                vTarget_02 = VectorList_02[iRandStar];
                vTarget_03 = VectorList_01[iRandStar];

                int iRandomDrops = RandInt(1, 4);
                if (iRandomDrops == 1)
                {
                    vTarget_04 = new Vector3(-75.10117f, -819.2855f, 326.1752f);
                    vTarget_05 = new Vector3(-75.07004f, -824.8751f, 321.2919f);
                }
                else if (iRandomDrops == 2)
                {
                    vTarget_04 = new Vector3(-144.6091f, -593.4995f, 211.7752f);
                    vTarget_05 = new Vector3(-136.1827f, -596.647f, 206.9157f);
                }
                else if (iRandomDrops == 3)
                {
                    vTarget_04 = new Vector3(-1391.722f, -477.6622f, 91.25081f);
                    vTarget_05 = new Vector3(-1369.462f, -471.949f, 84.44692f);
                }
                else
                {
                    vTarget_04 = new Vector3(-1582.136f, -569.4719f, 116.3276f);
                    vTarget_05 = new Vector3(-1561.048f, -569.0844f, 114.4493f);
                }

                Vector3 Pos = new Vector3(-738.2433f, -222.94f, 47.47f);
                VehicleSpawn("Volatus", Pos, 252.7368f, false, true, false, false, 2, 4, 0, 1, false);
            }
            else if (iLocationX == 3)
            {
                vFuMiss = new Vector3(-2471.704f, 3226.925f, 32.31913f);

                BigMessageThread.MessageInstance.ShowSimpleShard(sAltLang[5], sAltLang[82], 5000);
                VTBTimerPool.Add(ttTextBar_01);
                ttTextBar_01.Label = "" + sAltLang[290] + "";
                BeOnOff.Clear();
                iTime_01.Clear();

                vTarget_01 = new Vector3(-1576.321f, 2786.125f, 15.9334f);
                vTarget_02 = new Vector3(-2477.7f, 3258.43f, 31.77f);
                vTarget_03 = new Vector3(1713.36f, 3253.13f, 40.07f);
                vTarget_04 = new Vector3(2127.9f, 4806.1f, 40.19f);
                iMissionVar_01 = 0;
                VehicleSpawn("Strikeforce", vTarget_02, 160.00f, false, true, false, false, 5, 6, 0, 1, true);

                BeOnOff.Add(true); //   bInFort             0

                iTime_01.Add(0);//      iDogTimer   0 
            }
            else if (iLocationX == 4)
            {
                vFuMiss = new Vector3(2558.651f, -344.7433f, 92.48465f);
                BeOnOff.Clear();
                BigMessageThread.MessageInstance.ShowSimpleShard(sAltLang[5], sAltLang[83], 5000);
                vTarget_01 = new Vector3(2543.80f, -334.29f, 93.10f);
                vTarget_02 = new Vector3(2539.93f, -330.10f, 96.70f);
                vTarget_03 = new Vector3(2510.70f, -342.00f, 117.13f);
                int iRandomDrops = RandInt(1, 3);
                if (iRandomDrops == 1)
                {
                    PropList_01.Clear();
                    VectorList_01.Clear();
                    string Bargey = "prop_ind_barge_01_cr";
                    Vector3 posy = new Vector3(3670.565f, 2609.00f, 0.10f);
                    Vector3 Rota = new Vector3(0.00f, 0.00f, 98.40f);
                    BuildProp(Bargey, posy, Rota, true, true);

                    posy = new Vector3(3637.07f, 2528.74f, 0.10f);
                    Rota = new Vector3(0.00f, 0.00f, -169.60f);
                    BuildProp(Bargey, posy, Rota, true, true);

                    vTarget_04 = new Vector3(3611.642f, 2528.678f, 512.2806f);
                    Vector3 vHere_02 = new Vector3(2995.679f, 2217.538f, 515.8416f);
                    Vector3 vHere_03 = new Vector3(2713.421f, 2018.943f, 465.5262f);
                    Vector3 vHere_04 = new Vector3(2197.234f, 1622.248f, 445.9396f);
                    Vector3 vHere_05 = new Vector3(1822.196f, 1146.567f, 460.0574f);
                    Vector3 vHere_06 = new Vector3(1359.407f, 494.0837f, 442.5105f);
                    Vector3 vHere_07 = new Vector3(995.6508f, -0.3318772f, 394.4747f);
                    Vector3 vHere_08 = new Vector3(431.698f, -806.3925f, 306.9451f);
                    Vector3 vHere_09 = new Vector3(-253.8699f, -1835.442f, 227.2719f);
                    vTarget_05 = new Vector3(-505.2578f, -2193.864f, 31.27496f);
                    VectorList_01.Add(vTarget_05);
                    VectorList_01.Add(vHere_09);
                    VectorList_01.Add(vHere_08);
                    VectorList_01.Add(vHere_07);
                    VectorList_01.Add(vHere_06);
                    VectorList_01.Add(vHere_05);
                    VectorList_01.Add(vHere_04);
                    VectorList_01.Add(vHere_03);
                    VectorList_01.Add(vHere_02);
                }
                else if (iRandomDrops == 2)
                {
                    PropList_01.Clear();
                    VectorList_01.Clear();
                    string sBargey = "prop_ind_barge_01_cr";
                    Vector3 posy = new Vector3(-3300.00f, 2437.00f, 0.10f);
                    Vector3 Rota = new Vector3(0.00f, 0.00f, -90.40f);
                    BuildProp(sBargey, posy, Rota, true, true);
                    posy = new Vector3(-3296.00f, 2407.21f, 1.00f);
                    Rota = new Vector3(0.00f, 0.00f, 178.50f);
                    BuildProp(sBargey, posy, Rota, true, true);
                    vTarget_04 = new Vector3(-3300.00f, 2437.00f, 521.408f);
                    Vector3 vHere_02 = new Vector3(-2504.913f, 1880.594f, 490.6801f);
                    Vector3 vHere_03 = new Vector3(-1913.291f, 1420.218f, 433.8033f);
                    Vector3 vHere_04 = new Vector3(-1403.295f, 1085.122f, 403.0447f);
                    Vector3 vHere_05 = new Vector3(-949.6682f, 701.1384f, 383.1638f);
                    Vector3 vHere_06 = new Vector3(-304.0422f, 172.7121f, 319.8065f);
                    Vector3 vHere_07 = new Vector3(315.7495f, -336.6328f, 259.5117f);
                    Vector3 vHere_08 = new Vector3(1495.177f, -1398.264f, 187.2499f);
                    Vector3 vHere_09 = new Vector3(1665.258f, -1532.604f, 204.2363f);
                    vTarget_05 = new Vector3(1764.635f, -1650.477f, 124.0762f);
                    VectorList_01.Add(vTarget_05);
                    VectorList_01.Add(vHere_09);
                    VectorList_01.Add(vHere_08);
                    VectorList_01.Add(vHere_07);
                    VectorList_01.Add(vHere_06);
                    VectorList_01.Add(vHere_05);
                    VectorList_01.Add(vHere_04);
                    VectorList_01.Add(vHere_03);
                    VectorList_01.Add(vHere_02);
                }
                else
                {
                    PropList_01.Clear();
                    VectorList_01.Clear();
                    string sBargey = "prop_ind_barge_01_cr";
                    Vector3 posy = new Vector3(-2333.73f, 5065.85f, 0.10f);
                    Vector3 Rota = new Vector3(0.00f, 0.00f, -90.40f);
                    BuildProp(sBargey, posy, Rota, true, true);
                    posy = new Vector3(-2306.34f, 5148.768f, 0.10f);
                    Rota = new Vector3(0.00f, 0.00f, 178.50f);
                    BuildProp(sBargey, posy, Rota, true, true);
                    vTarget_04 = new Vector3(-2335.00f, 5127.00f, 529.949f);
                    Vector3 vHere_02 = new Vector3(-2061.499f, 4527.216f, 495.0395f);
                    Vector3 vHere_03 = new Vector3(-1706.212f, 3642.564f, 397.6057f);
                    Vector3 vHere_04 = new Vector3(-1282.026f, 2777.223f, 380.9995f);
                    Vector3 vHere_05 = new Vector3(-685.1597f, 2187.614f, 379.6081f);
                    Vector3 vHere_06 = new Vector3(-224.9484f, 1741.988f, 393.4701f);
                    Vector3 vHere_07 = new Vector3(-4.271536f, 1384.082f, 377.8856f);
                    Vector3 vHere_08 = new Vector3(268.4175f, 854.5297f, 335.7408f);
                    Vector3 vHere_09 = new Vector3(526.3968f, 256.4404f, 297.1049f);
                    Vector3 vHere_10 = new Vector3(901.7145f, -528.7383f, 230.9604f);
                    Vector3 vHere_11 = new Vector3(1098.566f, -1081.197f, 206.9486f);
                    vTarget_05 = new Vector3(1203.487f, -1269.62f, 49.9391f);
                    VectorList_01.Add(vTarget_05);
                    VectorList_01.Add(vHere_11);
                    VectorList_01.Add(vHere_10);
                    VectorList_01.Add(vHere_09);
                    VectorList_01.Add(vHere_08);
                    VectorList_01.Add(vHere_07);
                    VectorList_01.Add(vHere_06);
                    VectorList_01.Add(vHere_05);
                    VectorList_01.Add(vHere_04);
                    VectorList_01.Add(vHere_03);
                    VectorList_01.Add(vHere_02);
                }

                BeOnOff.Add(false);//   bFlightHight  0
                VehicleSpawn("Buzzard", vTarget_03, 90.00f, false, true, false, false, 0, 0, 0, 1, false);
            }
            else if (iLocationX == 5)
            {
                vFuMiss = new Vector3(2167.74f, 4771.713f, 40.70564f);

                //Grapesead crop dusting...
                BigMessageThread.MessageInstance.ShowSimpleShard(sAltLang[5], sAltLang[84], 5000);
                VTBTimerPool.Add(ttTextBar_01);
                ttTextBar_01.Label = "" + sAltLang[295] + "";
                BeOnOff.Clear();
                iTime_01.Clear();
                VectorList_01.Clear();

                iTime_01.Add(0);//                  iPosionTime     0

                vTarget_01 = new Vector3(2130.47f, 4812.37f, 40.22f);
                vTarget_02 = new Vector3(1833.0f, 4667.55f, 65.0f);
                int iRandomDrops = FindRandom(6, 1, 5);
                if (iRandomDrops == 1)
                {
                    iTime_01[0] = 14000;
                    Vector3 vHere_01 = new Vector3(2448.722f, 4809.713f, 55.75618f);
                    Vector3 vHere_02 = new Vector3(2505.565f, 4865.3f, 55.75618f);
                    Vector3 vHere_03 = new Vector3(2478.393f, 4844.374f, 55.75618f);
                    Vector3 vHere_04 = new Vector3(2552.147f, 4779.53f, 55.75618f);
                    Vector3 vHere_05 = new Vector3(2614.088f, 4768.742f, 55.75618f);
                    Vector3 vHere_06 = new Vector3(2532.115f, 4842.767f, 55.75618f);
                    VectorList_01.Add(vHere_06);
                    VectorList_01.Add(vHere_05);
                    VectorList_01.Add(vHere_04);
                    VectorList_01.Add(vHere_03);
                    VectorList_01.Add(vHere_02);
                    VectorList_01.Add(vHere_01);
                }
                else if (iRandomDrops == 2)
                {
                    iTime_01[0] = 14000;
                    Vector3 vHere_01 = new Vector3(2576.481f, 4765.511f, 60.00237f);
                    Vector3 vHere_02 = new Vector3(2671.52f, 4668.758f, 60.00237f);
                    Vector3 vHere_03 = new Vector3(2572.585f, 4658.025f, 60.00237f);
                    Vector3 vHere_04 = new Vector3(2676.44f, 4525.318f, 60.00237f);
                    Vector3 vHere_05 = new Vector3(2602.719f, 4587.295f, 60.00237f);
                    Vector3 vHere_06 = new Vector3(2527.707f, 4515.359f, 60.00237f);
                    VectorList_01.Add(vHere_06);
                    VectorList_01.Add(vHere_05);
                    VectorList_01.Add(vHere_04);
                    VectorList_01.Add(vHere_03);
                    VectorList_01.Add(vHere_02);
                    VectorList_01.Add(vHere_01);
                }
                else if (iRandomDrops == 3)
                {
                    iTime_01[0] = 14000;
                    Vector3 vHere_01 = new Vector3(2849.052f, 4730.358f, 70.11709f);
                    Vector3 vHere_02 = new Vector3(2886.181f, 4596.32f, 70.11709f);
                    Vector3 vHere_03 = new Vector3(2815.923f, 4723.78f, 70.11709f);
                    Vector3 vHere_04 = new Vector3(2839.474f, 4581.26f, 70.11709f);
                    Vector3 vHere_05 = new Vector3(2860.864f, 4660.234f, 70.11709f);
                    Vector3 vHere_06 = new Vector3(2955.208f, 4681.459f, 70.11709f);
                    VectorList_01.Add(vHere_06);
                    VectorList_01.Add(vHere_05);
                    VectorList_01.Add(vHere_04);
                    VectorList_01.Add(vHere_03);
                    VectorList_01.Add(vHere_02);
                    VectorList_01.Add(vHere_01);
                }
                else if (iRandomDrops == 4)
                {
                    iTime_01[0] = 14000;
                    Vector3 vHere_01 = new Vector3(801.4687f, 6461.438f, 60.01804f);
                    Vector3 vHere_02 = new Vector3(613.8648f, 6482.624f, 60.01804f);
                    Vector3 vHere_03 = new Vector3(353.5813f, 6470.871f, 60.01804f);
                    Vector3 vHere_04 = new Vector3(217.6227f, 6462.814f, 60.01804f);
                    Vector3 vHere_05 = new Vector3(124.6508f, 6506.21f, 60.01804f);
                    Vector3 vHere_06 = new Vector3(374.664f, 6520.164f, 60.01804f);
                    VectorList_01.Add(vHere_06);
                    VectorList_01.Add(vHere_05);
                    VectorList_01.Add(vHere_04);
                    VectorList_01.Add(vHere_03);
                    VectorList_01.Add(vHere_02);
                    VectorList_01.Add(vHere_01);
                }
                else
                {
                    iTime_01[0] = 14000;
                    Vector3 vHere_01 = new Vector3(-1880.2f, 2107.816f, 163.7816f);
                    Vector3 vHere_02 = new Vector3(-1866.956f, 2270.744f, 99.97744f);
                    Vector3 vHere_03 = new Vector3(-1834.532f, 2114.699f, 154.4291f);
                    Vector3 vHere_04 = new Vector3(-1781.521f, 2252.621f, 115.4473f);
                    Vector3 vHere_05 = new Vector3(-1600.278f, 2192.43f, 106.3301f);
                    Vector3 vHere_06 = new Vector3(-1767.172f, 2377.229f, 78.32089f);
                    VectorList_01.Add(vHere_06);
                    VectorList_01.Add(vHere_05);
                    VectorList_01.Add(vHere_04);
                    VectorList_01.Add(vHere_03);
                    VectorList_01.Add(vHere_02);
                    VectorList_01.Add(vHere_01);
                }

                BeOnOff.Add(false);//       bNonLoopFx  0 
                BeOnOff.Add(false);//       bDustTogg   1
                BeOnOff.Add(false);//       bEcoMental  2 

                VehicleSpawn("Duster", vTarget_01, 117.50f, false, true, false, false, 0, 0, 0, 1, false);
            }
            else
            {
                BigMessageThread.MessageInstance.ShowSimpleShard(sAltLang[5], sAltLang[85], 5000);
                VectorList_01.Clear();
                BeOnOff.Clear();
                VTBTimerPool.Add(ttTextBar_01);
                ttTextBar_01.Label = "" + sAltLang[296] + "";

                vFuMiss = new Vector3(-279.6988f, 6106.246f, 30.70985f);

                vTarget_01 = new Vector3(-279.598f, 6130.19f, 31.28f);//rota 262.7
                vTarget_02 = new Vector3(-267.95f, 6141f, 31.53f);//rota 121

                List<Vector3> Higgs = new List<Vector3>();

                int iRandFirst = RandInt(1, 5);
                if (iRandFirst == 1)
                    Higgs.Add(new Vector3(3099.649f, 6041.718f, 123.2769f));
                else if (iRandFirst == 2)
                    Higgs.Add(new Vector3(2827.337f, 5966.326f, 351.5675f));
                else if (iRandFirst == 3)
                    Higgs.Add(new Vector3(3321.136f, 5147.967f, 18.30022f));
                else if (iRandFirst == 4)
                    Higgs.Add(new Vector3(499.3408f, 5591.032f, 795.0212f));
                else
                    Higgs.Add(new Vector3(1511.96f, 6626.829f, 2.50751f));
                iRandFirst = RandInt(1, 5);
                if (iRandFirst == 1)
                    Higgs.Add(new Vector3(34.92531f, 6942f, 16.43684f));
                else if (iRandFirst == 2)
                    Higgs.Add(new Vector3(-207.7613f, 6546.077f, 11.09517f));
                else if (iRandFirst == 3)
                    Higgs.Add(new Vector3(-987.3856f, 6248.711f, 2.825436f));
                else if (iRandFirst == 4)
                    Higgs.Add(new Vector3(-1577.118f, 5158.229f, 19.9019f));
                else
                    Higgs.Add(new Vector3(-2197.535f, 5179.065f, 15.65481f));
                iRandFirst = RandInt(1, 5);
                if (iRandFirst == 1)
                    Higgs.Add(new Vector3(-925.0684f, 4837.404f, 308.8438f));
                else if (iRandFirst == 2)
                    Higgs.Add(new Vector3(-2411.968f, 4233.252f, 10.08531f));
                else if (iRandFirst == 3)
                    Higgs.Add(new Vector3(-3112.612f, 3409.361f, 2.275631f));
                else if (iRandFirst == 4)
                    Higgs.Add(new Vector3(1312.213f, 4327.11f, 38.16022f));
                else
                    Higgs.Add(new Vector3(-768.5018f, 5543.954f, 33.48962f));
                iRandFirst = RandInt(1, 5);
                if (iRandFirst == 1)
                    Higgs.Add(new Vector3(246.9969f, 7431.734f, 17.13332f));
                else if (iRandFirst == 2)
                    Higgs.Add(new Vector3(1856.761f, 6401.458f, 46.38666f));
                else if (iRandFirst == 3)
                    Higgs.Add(new Vector3(3676.37f, 4977.885f, 15.71186f));
                else if (iRandFirst == 4)
                    Higgs.Add(new Vector3(3633.82f, 5670.996f, 8.751589f));
                else
                    Higgs.Add(new Vector3(-1178.777f, 3843.314f, 487.167f));
                VectorList_01 = FarToNear(Higgs, vTarget_01);
                BeOnOff.Add(false);// bGetInHeli    0 
                VehicleSpawn("Swift", vTarget_01, 262.7f, false, true, false, false, 24, 0, 0, 1, false);
            }
            bOnTheJob = true;
        }
        private void Ambulance()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Ambulance", tEx);

            fList_01.Clear();
            sList_01.Clear();
            VectorList_01.Clear();
            VectorList_02.Clear();
            BeOnOff.Clear();
            iTime_01.Clear();
            iList_01.Clear();

            VectorList_02.Add(new Vector3(294.84f, -1439.035f, 28.8041f));
            VectorList_02.Add(new Vector3(363.3773f, -588.3364f, 27.683f));
            VectorList_02.Add(new Vector3(-492.237f, -334.1218f, 33.37f));
            VectorList_02.Add(new Vector3(1153.971f, -1514.0f, 33.69f));
            VectorList_02.Add(new Vector3(1813.8746f, 3686.3318f, 33.2243f));
            VectorList_02.Add(new Vector3(-229.238f, 6312.495f, 30.3f));
            int iTotals = 0;

            if (iLocationX == 1)
            {
                vFuMiss = new Vector3(349.6006f, -1487.052f, 28.75062f);

                VectorList_01.Add(new Vector3(1295.991f, -1588.85f, 52.19732f));
                VectorList_01.Add(new Vector3(-307.0375f, -1189.777f, 24.1509f));
                VectorList_01.Add(new Vector3(-348.3725f, -1314f, 31.40127f));
                VectorList_01.Add(new Vector3(-332.9052f, -1565.624f, 25.23175f));
                VectorList_01.Add(new Vector3(-232.7374f, -1369.014f, 31.25828f));
                VectorList_01.Add(new Vector3(-177.1512f, -1274.484f, 32.59555f));
                VectorList_01.Add(new Vector3(-58.69757f, -1223.602f, 28.71806f));
                VectorList_01.Add(new Vector3(4.041627f, -1306.417f, 30.16679f));
                VectorList_01.Add(new Vector3(4.798547f, -1214.869f, 26.70302f));
                VectorList_01.Add(new Vector3(156.0699f, -1222.187f, 29.5406f));
                VectorList_01.Add(new Vector3(135.7204f, -1320.296f, 29.20231f));
                VectorList_01.Add(new Vector3(259.1181f, -1205.05f, 29.28905f));
                VectorList_01.Add(new Vector3(301.2187f, -1249.861f, 29.44078f));
                VectorList_01.Add(new Vector3(442.3185f, -1244.345f, 30.26213f));
                VectorList_01.Add(new Vector3(473.2682f, -1283.217f, 29.53937f));
                VectorList_01.Add(new Vector3(476.9983f, -1524.71f, 29.30152f));
                VectorList_01.Add(new Vector3(417.7134f, -1541.646f, 29.2505f));
                VectorList_01.Add(new Vector3(543.3961f, -1602.051f, 28.65779f));
                VectorList_01.Add(new Vector3(288.6476f, -1601.094f, 31.26226f));
                VectorList_01.Add(new Vector3(131.9738f, -1545.597f, 29.24033f));
                VectorList_01.Add(new Vector3(124.1449f, -1487.002f, 29.14162f));
                VectorList_01.Add(new Vector3(37.06306f, -1456.389f, 29.3117f));
                VectorList_01.Add(new Vector3(-132.3365f, -1419.739f, 31.30029f));
                VectorList_01.Add(new Vector3(-219.7744f, -1530.927f, 31.61536f));
                VectorList_01.Add(new Vector3(-265.1535f, -1571.182f, 32.06605f));
                VectorList_01.Add(new Vector3(-302.5743f, -1641.343f, 32.18322f));
                VectorList_01.Add(new Vector3(-8.088839f, -1494.789f, 30.08593f));
                VectorList_01.Add(new Vector3(11.41061f, -1607.148f, 29.39714f));
                VectorList_01.Add(new Vector3(60.42377f, -1619.376f, 29.42404f));
                VectorList_01.Add(new Vector3(-41.85682f, -1676.044f, 29.4227f));
                VectorList_01.Add(new Vector3(-150.7254f, -1623.922f, 33.65359f));
                VectorList_01.Add(new Vector3(8.481181f, -1727.738f, 29.30294f));
                VectorList_01.Add(new Vector3(-14.10281f, -1816.332f, 25.85069f));
                VectorList_01.Add(new Vector3(190.6884f, -1843.94f, 27.20505f));
                VectorList_01.Add(new Vector3(168.1409f, -1715.241f, 29.29168f));
                VectorList_01.Add(new Vector3(229.2058f, -1761.528f, 28.6836f));
                VectorList_01.Add(new Vector3(280.5085f, -1735.393f, 29.35996f));
                VectorList_01.Add(new Vector3(163.5823f, -1676.922f, 29.7743f));
                VectorList_01.Add(new Vector3(567.0923f, -1608.899f, 27.74163f));
                VectorList_01.Add(new Vector3(542.2665f, -1740.724f, 30.69151f));
                VectorList_01.Add(new Vector3(560.0998f, -1775.572f, 33.4808f));
                VectorList_01.Add(new Vector3(564.1755f, -1836.491f, 25.332f));
                VectorList_01.Add(new Vector3(600.1234f, -1875.706f, 24.85271f));
                VectorList_01.Add(new Vector3(516.8292f, -1947.492f, 24.98512f));
                VectorList_01.Add(new Vector3(445.7083f, -1901.135f, 26.69668f));
                VectorList_01.Add(new Vector3(219.2378f, -1993.643f, 19.67838f));
                VectorList_01.Add(new Vector3(182.7478f, -2029.663f, 18.24595f));
                VectorList_01.Add(new Vector3(421.1747f, -2058.19f, 22.28779f));
                VectorList_01.Add(new Vector3(367.4519f, -2118.551f, 16.34019f));
                VectorList_01.Add(new Vector3(585.4458f, -2073.127f, 15.60356f));
                VectorList_01.Add(new Vector3(543.8434f, -2406.682f, 5.871284f));
                VectorList_01.Add(new Vector3(477.4642f, -2250.117f, 5.917679f));
                VectorList_01.Add(new Vector3(395.1972f, -2214.458f, 5.917676f));
                VectorList_01.Add(new Vector3(240.7368f, -2210.84f, 8.013161f));
                VectorList_01.Add(new Vector3(131.5114f, -2204.566f, 7.186296f));
                VectorList_01.Add(new Vector3(280.5862f, -2168.832f, 12.64457f));
                VectorList_01.Add(new Vector3(99.07872f, -2067.101f, 17.68201f));
                VectorList_01.Add(new Vector3(-107.3909f, -1848.81f, 5.748288f));
                VectorList_01.Add(new Vector3(-559.9066f, -1456.414f, 10.88732f));
                VectorList_01.Add(new Vector3(-661.9313f, -1688.835f, 25.0436f));
                VectorList_01.Add(new Vector3(-603.6251f, -1781.529f, 23.64001f));
                VectorList_01.Add(new Vector3(-455.9268f, -1672.153f, 19.29108f));
                VectorList_01.Add(new Vector3(-497.0885f, -1752.62f, 18.30396f));
                VectorList_01.Add(new Vector3(-571.8822f, -1690.514f, 20.03663f));
                VectorList_01.Add(new Vector3(-489.2251f, -1641.585f, 18.20733f));
                VectorList_01.Add(new Vector3(-260.8029f, -1889.738f, 27.75541f));
                VectorList_01.Add(new Vector3(-275.4695f, -2100.006f, 22.04967f));
                VectorList_01.Add(new Vector3(-132.2104f, -1983.053f, 22.80532f));
                VectorList_01.Add(new Vector3(-565.9182f, -2237.333f, 5.917212f));
                VectorList_01.Add(new Vector3(-433.3442f, -2195.788f, 9.847511f));
                VectorList_01.Add(new Vector3(-385.141f, -2283.689f, 7.608184f));
                VectorList_01.Add(new Vector3(-177.4064f, -2270.748f, 7.821116f));
                VectorList_01.Add(new Vector3(-108.484f, -2234.651f, 7.811672f));
                VectorList_01.Add(new Vector3(-779.1458f, -2234.354f, 5.942057f));
                VectorList_01.Add(new Vector3(-747.5679f, -2086.397f, 12.7347f));
                VectorList_01.Add(new Vector3(-914.3769f, -2039.792f, 9.404987f));
                VectorList_01.Add(new Vector3(-1165.538f, -2047.71f, 14.51669f));
                VectorList_01.Add(new Vector3(-1214.923f, -2058.038f, 14.42374f));
                VectorList_01.Add(new Vector3(-876.9254f, -2149.601f, 8.929814f));
                VectorList_01.Add(new Vector3(-1057.923f, -2090.583f, 13.29208f));
                VectorList_01.Add(new Vector3(-925.5623f, -2344.835f, 6.763047f));
                VectorList_01.Add(new Vector3(-710.0975f, -2527.765f, 13.9444f));
                VectorList_01.Add(new Vector3(-811.5503f, -2780.453f, 13.94471f));
                VectorList_01.Add(new Vector3(-1033.112f, -2731.714f, 13.75664f));
                VectorList_01.Add(new Vector3(-890.3541f, -2385.502f, 14.02436f));
                VectorList_01.Add(new Vector3(-531.0646f, -2903.05f, 6.000385f));
                VectorList_01.Add(new Vector3(-335.2472f, -2793.107f, 5.000239f));
                VectorList_01.Add(new Vector3(-247.0453f, -2686.215f, 6.000299f));
                VectorList_01.Add(new Vector3(-372.5172f, -2667.43f, 6.020175f));
                VectorList_01.Add(new Vector3(-433.7004f, -2667.901f, 6.000216f));
                VectorList_01.Add(new Vector3(-337.6092f, -2439.792f, 6.000635f));
                VectorList_01.Add(new Vector3(-251.6559f, -2421.585f, 6.000635f));
                VectorList_01.Add(new Vector3(-110.3893f, -2565.354f, 6.00071f));
                VectorList_01.Add(new Vector3(-107.665f, -2674.75f, 6.006342f));
                VectorList_01.Add(new Vector3(-77.84619f, -2667.905f, 6.00266f));
                VectorList_01.Add(new Vector3(53.03234f, -2682.723f, 6.009068f));
                VectorList_01.Add(new Vector3(27.75469f, -2566.049f, 6.005089f));
                VectorList_01.Add(new Vector3(135.6209f, -2483.69f, 6.094528f));
                VectorList_01.Add(new Vector3(285.0528f, -2492.843f, 6.440169f));
                VectorList_01.Add(new Vector3(380.5201f, -2426.611f, 6.041658f));
                VectorList_01.Add(new Vector3(362.3727f, -2649.536f, 6.221566f));
                VectorList_01.Add(new Vector3(322.363f, -2758.287f, 5.996541f));
                VectorList_01.Add(new Vector3(287.2047f, -3000.646f, 5.759924f));
                VectorList_01.Add(new Vector3(266.4539f, -3232.93f, 5.790268f));
                VectorList_01.Add(new Vector3(160.1541f, -3321.103f, 5.992997f));
                VectorList_01.Add(new Vector3(122.4961f, -3180.883f, 5.956728f));
                VectorList_01.Add(new Vector3(142.343f, -3103.598f, 5.896312f));
                VectorList_01.Add(new Vector3(671.1514f, -2657.151f, 6.081183f));
                VectorList_01.Add(new Vector3(658.5178f, -3018.126f, 6.045217f));
                VectorList_01.Add(new Vector3(451.8949f, -2932.97f, 6.040792f));
                VectorList_01.Add(new Vector3(439.1473f, -2737.697f, 6.668174f));
                VectorList_01.Add(new Vector3(473.197f, -2571.102f, 6.375737f));
                VectorList_01.Add(new Vector3(841.8812f, -3205.756f, 6.004801f));
                VectorList_01.Add(new Vector3(834.9917f, -3346.321f, 5.900516f));
                VectorList_01.Add(new Vector3(1241.977f, -3238.619f, 6.028767f));
                VectorList_01.Add(new Vector3(1293.745f, -3094.569f, 5.906603f));
                VectorList_01.Add(new Vector3(1043.904f, -2979.187f, 5.901051f));
                VectorList_01.Add(new Vector3(1112.307f, -3031.898f, 5.901045f));
                VectorList_01.Add(new Vector3(1002.462f, -3090.521f, 5.90104f));
                VectorList_01.Add(new Vector3(944.5012f, -3085.445f, 5.900763f));
                VectorList_01.Add(new Vector3(853.6526f, -3096.722f, 5.900853f));
                VectorList_01.Add(new Vector3(702.4927f, -2332.333f, 25.25414f));
                VectorList_01.Add(new Vector3(706.869f, -2105.826f, 29.16093f));
                VectorList_01.Add(new Vector3(851.0704f, -2129.359f, 30.29191f));
                VectorList_01.Add(new Vector3(833.6018f, -2309.2f, 30.49599f));
                VectorList_01.Add(new Vector3(804.8823f, -2373.59f, 29.09732f));
                VectorList_01.Add(new Vector3(924.3118f, -2532.779f, 28.30266f));
                VectorList_01.Add(new Vector3(1073.938f, -2444.706f, 29.27938f));
                VectorList_01.Add(new Vector3(976.6308f, -2360.208f, 31.82376f));
                VectorList_01.Add(new Vector3(1017.847f, -2193.912f, 31.53337f));
                VectorList_01.Add(new Vector3(1126.734f, -2303.074f, 30.71645f));
                VectorList_01.Add(new Vector3(1128.196f, -2068.839f, 31.01188f));
                VectorList_01.Add(new Vector3(1105.453f, -1984.081f, 31.01881f));
                VectorList_01.Add(new Vector3(1027.578f, -1879.27f, 37.38991f));
                VectorList_01.Add(new Vector3(1073.075f, -1840.03f, 37.30691f));
                VectorList_01.Add(new Vector3(942.8682f, -1721.185f, 30.4981f));
                VectorList_01.Add(new Vector3(750.1907f, -1941.338f, 29.19209f));
                VectorList_01.Add(new Vector3(769.6085f, -1642.769f, 30.14714f));
                VectorList_01.Add(new Vector3(923.7332f, -1521.389f, 31.03543f));
                VectorList_01.Add(new Vector3(1003.24f, -1563.05f, 30.75877f));
                VectorList_01.Add(new Vector3(998.4811f, -1489.542f, 31.39792f));
                VectorList_01.Add(new Vector3(982.7969f, -1379.169f, 31.48456f));
                VectorList_01.Add(new Vector3(1193.731f, -1266.771f, 35.19605f));
                VectorList_01.Add(new Vector3(1328.51f, -1661.897f, 51.23643f));
                VectorList_01.Add(new Vector3(1336.514f, -1848.901f, 57.08916f));
                VectorList_01.Add(new Vector3(1251.493f, -1965.263f, 44.3163f));
                VectorList_01.Add(new Vector3(1251.912f, -2288.496f, 50.93319f));
                VectorList_01.Add(new Vector3(1260.006f, -2567.281f, 42.71802f));
                VectorList_01.Add(new Vector3(1528.078f, -2539.776f, 57.22543f));
                VectorList_01.Add(new Vector3(1567.723f, -2164.728f, 77.56761f));
                VectorList_01.Add(new Vector3(1363.382f, -2100.701f, 51.99954f));
                VectorList_01.Add(new Vector3(1454.57f, -1893.724f, 71.86729f));
                VectorList_01.Add(new Vector3(1592.455f, -1693.269f, 88.09962f));
                VectorList_01.Add(new Vector3(1691.731f, -1654.241f, 112.4008f));

                vGetaway = new Vector3(328.9428f, -1472.228f, 29.51733f);
                fGetDir = 231.2519f;

                sHospital = "Central Los Santos Medical Center";

                iTotals = FindRandom(36, 0, VectorList_01.Count - 1);
            }
            else if (iLocationX == 2)
            {
                vFuMiss = new Vector3(366.1713f, -540.9857f, 28.22815f);

                VectorList_01.Add(new Vector3(-1275.577f, 312.0424f, 65.51177f));
                VectorList_01.Add(new Vector3(-1152.01f, 72.72306f, 57.15506f));
                VectorList_01.Add(new Vector3(-1097.044f, 68.95177f, 54.02635f));
                VectorList_01.Add(new Vector3(-952.0342f, -77.34747f, 40.06761f));
                VectorList_01.Add(new Vector3(-1103.319f, -115.9165f, 41.55255f));
                VectorList_01.Add(new Vector3(-1236.093f, -4.297013f, 48.26363f));
                VectorList_01.Add(new Vector3(-1341.863f, 59.95958f, 55.24566f));
                VectorList_01.Add(new Vector3(-1349.179f, 22.04873f, 53.45015f));
                VectorList_01.Add(new Vector3(-1353.893f, -140.0306f, 49.57463f));
                VectorList_01.Add(new Vector3(-1412.771f, -139.7202f, 48.76534f));
                VectorList_01.Add(new Vector3(-1376.375f, -172.628f, 47.46911f));
                VectorList_01.Add(new Vector3(-1478.465f, -160.9035f, 48.82884f));
                VectorList_01.Add(new Vector3(-1323.68f, -252.9121f, 42.29361f));
                VectorList_01.Add(new Vector3(-1231.259f, -171.5737f, 39.3256f));
                VectorList_01.Add(new Vector3(-1167.888f, -233.8117f, 37.94518f));
                VectorList_01.Add(new Vector3(-1158.482f, -346.2335f, 36.64722f));
                VectorList_01.Add(new Vector3(-1302.805f, -453.5108f, 34.78057f));
                VectorList_01.Add(new Vector3(-1378.877f, -322.5248f, 39.86762f));
                VectorList_01.Add(new Vector3(-1407.346f, -254.5081f, 46.37916f));
                VectorList_01.Add(new Vector3(-1499.574f, -297.3288f, 48.69509f));
                VectorList_01.Add(new Vector3(-1552.723f, -264.136f, 48.26653f));
                VectorList_01.Add(new Vector3(-1479.695f, -337.8638f, 45.87229f));
                VectorList_01.Add(new Vector3(-1345.13f, -511.3288f, 23.26935f));
                VectorList_01.Add(new Vector3(-1552.965f, -580.7216f, 33.94003f));
                VectorList_01.Add(new Vector3(-1623.234f, -639.0882f, 32.66094f));
                VectorList_01.Add(new Vector3(-1667.016f, -508.0188f, 37.28838f));
                VectorList_01.Add(new Vector3(-1717.021f, -490.4058f, 41.61931f));
                VectorList_01.Add(new Vector3(-1929.574f, -384.9653f, 48.64286f));
                VectorList_01.Add(new Vector3(-2039.735f, -369.8246f, 44.10654f));
                VectorList_01.Add(new Vector3(-1823.997f, -370.9774f, 49.38745f));
                VectorList_01.Add(new Vector3(-1775.679f, -387.3345f, 46.47361f));
                VectorList_01.Add(new Vector3(-1662.762f, -385.4789f, 44.84059f));
                VectorList_01.Add(new Vector3(-1636.514f, -397.4153f, 43.01781f));
                VectorList_01.Add(new Vector3(-1561.058f, -414.9048f, 38.09902f));
                VectorList_01.Add(new Vector3(-1450.759f, -693.9831f, 26.3128f));
                VectorList_01.Add(new Vector3(-1355.457f, -599.0952f, 28.61878f));
                VectorList_01.Add(new Vector3(-1306.464f, -572.8126f, 29.30234f));
                VectorList_01.Add(new Vector3(-1212.349f, -722.1855f, 21.60095f));
                VectorList_01.Add(new Vector3(-1120.565f, -850.2847f, 19.69294f));
                VectorList_01.Add(new Vector3(-1179.563f, -903.1732f, 13.55116f));
                VectorList_01.Add(new Vector3(-1241.368f, -864.1287f, 12.7232f));
                VectorList_01.Add(new Vector3(-1271.507f, -882.5458f, 11.9303f));
                VectorList_01.Add(new Vector3(-1331.592f, -740.3315f, 25.25989f));
                VectorList_01.Add(new Vector3(-1664.258f, -1111.584f, 13.09503f));
                VectorList_01.Add(new Vector3(-1858.592f, -1242.062f, 8.615787f));
                VectorList_01.Add(new Vector3(-1846.416f, -1198.31f, 19.18477f));
                VectorList_01.Add(new Vector3(-1812.555f, -1223.38f, 19.16964f));
                VectorList_01.Add(new Vector3(-1564.53f, -906.8204f, 9.165163f));
                VectorList_01.Add(new Vector3(-1541.676f, -879.1148f, 10.2729f));
                VectorList_01.Add(new Vector3(-1866.732f, -613.0494f, 12.06257f));
                VectorList_01.Add(new Vector3(-2000.812f, -506.8006f, 11.63716f));
                VectorList_01.Add(new Vector3(-1902.603f, -711.7704f, 8.832592f));
                VectorList_01.Add(new Vector3(-1799.197f, -855.5845f, 7.630542f));
                VectorList_01.Add(new Vector3(-1657.15f, -1006.094f, 7.006292f));
                VectorList_01.Add(new Vector3(-1553.957f, -1151.978f, 2.322932f));
                VectorList_01.Add(new Vector3(-1518.391f, -1272.674f, 3.459242f));
                VectorList_01.Add(new Vector3(-1468.468f, -1384.666f, 2.512661f));
                VectorList_01.Add(new Vector3(-1433.639f, -1515.052f, 2.105373f));
                VectorList_01.Add(new Vector3(-1367.521f, -1619.662f, 2.3506f));
                VectorList_01.Add(new Vector3(-1295.23f, -1759.258f, 2.062442f));
                VectorList_01.Add(new Vector3(-1150.568f, -1644.182f, 4.37371f));
                VectorList_01.Add(new Vector3(-1118.646f, -1623.67f, 4.412444f));
                VectorList_01.Add(new Vector3(-1211.627f, -1575.931f, 4.607938f));
                VectorList_01.Add(new Vector3(-1285.411f, -1608.487f, 4.096843f));
                VectorList_01.Add(new Vector3(-1277.177f, -1538.849f, 4.313595f));
                VectorList_01.Add(new Vector3(-1229.568f, -1407.336f, 4.21226f));
                VectorList_01.Add(new Vector3(-1337.169f, -1280.162f, 4.84399f));
                VectorList_01.Add(new Vector3(-1318.917f, -1242.003f, 4.598817f));
                VectorList_01.Add(new Vector3(-1333.172f, -1158.473f, 4.516616f));
                VectorList_01.Add(new Vector3(-1339.545f, -1081.115f, 6.935713f));
                VectorList_01.Add(new Vector3(-1342.604f, -931.7051f, 11.75301f));
                VectorList_01.Add(new Vector3(-1192.887f, -1131.989f, 7.674825f));
                VectorList_01.Add(new Vector3(-1213.446f, -1063.908f, 8.387691f));
                VectorList_01.Add(new Vector3(-1242.203f, -1138.828f, 7.737703f));
                VectorList_01.Add(new Vector3(-1228.999f, -1230.91f, 7.030772f));
                VectorList_01.Add(new Vector3(-1171.263f, -1262.759f, 7.005009f));
                VectorList_01.Add(new Vector3(-1014.644f, -1366.579f, 5.553194f));
                VectorList_01.Add(new Vector3(-1185.957f, -1391.929f, 4.57114f));
                VectorList_01.Add(new Vector3(-1040.472f, -1475.02f, 5.575446f));
                VectorList_01.Add(new Vector3(-970.9581f, -1511.179f, 5.024017f));
                VectorList_01.Add(new Vector3(-1122.354f, -1447.301f, 5.050552f));
                VectorList_01.Add(new Vector3(-847.3286f, -1113.553f, 7.06216f));
                VectorList_01.Add(new Vector3(-1006.188f, -728.5076f, 21.52976f));
                VectorList_01.Add(new Vector3(-931.8746f, -731.1098f, 19.92262f));
                VectorList_01.Add(new Vector3(-834.2229f, -617.7413f, 29.02698f));
                VectorList_01.Add(new Vector3(-724.943f, -682.987f, 30.31257f));
                VectorList_01.Add(new Vector3(-791.8027f, -727.0508f, 27.27884f));
                VectorList_01.Add(new Vector3(-813.9529f, -809.52f, 19.52963f));
                VectorList_01.Add(new Vector3(-888.8446f, -852.8353f, 20.56604f));
                VectorList_01.Add(new Vector3(-803.2098f, -907.3216f, 19.10034f));
                VectorList_01.Add(new Vector3(-699.5457f, -931.8818f, 19.0139f));
                VectorList_01.Add(new Vector3(-693.5906f, -811.4927f, 24.01396f));
                VectorList_01.Add(new Vector3(-676.6083f, -879.3112f, 24.45689f));
                VectorList_01.Add(new Vector3(-657.4034f, -909.5959f, 24.23141f));
                VectorList_01.Add(new Vector3(-604.64f, -1062.089f, 21.78754f));
                VectorList_01.Add(new Vector3(-671.1124f, -1213.345f, 10.6417f));
                VectorList_01.Add(new Vector3(-652.1324f, -1148.927f, 9.152239f));
                VectorList_01.Add(new Vector3(-446.8413f, -1078.38f, 23.55053f));
                VectorList_01.Add(new Vector3(-459.3374f, -979.1005f, 23.54526f));
                VectorList_01.Add(new Vector3(-523.4534f, -879.4631f, 25.22615f));
                VectorList_01.Add(new Vector3(-489.6425f, -718.2501f, 33.21196f));
                VectorList_01.Add(new Vector3(-537.5546f, -626.5345f, 34.67635f));
                VectorList_01.Add(new Vector3(-693.3104f, -589.9702f, 31.55413f));
                VectorList_01.Add(new Vector3(-918.442f, -351.1229f, 38.96907f));
                VectorList_01.Add(new Vector3(-758.0732f, -408.6161f, 35.69364f));
                VectorList_01.Add(new Vector3(-981.1857f, -271.5476f, 38.28515f));
                VectorList_01.Add(new Vector3(-891.5757f, -214.5062f, 39.10325f));
                VectorList_01.Add(new Vector3(-792.9392f, -198.1893f, 37.28369f));
                VectorList_01.Add(new Vector3(-729.8556f, -293.4692f, 36.94607f));
                VectorList_01.Add(new Vector3(-623.5414f, -250.433f, 38.53127f));
                VectorList_01.Add(new Vector3(-698.5738f, -146.8939f, 37.84547f));
                VectorList_01.Add(new Vector3(-537.7913f, -215.5909f, 37.64979f));
                VectorList_01.Add(new Vector3(-462.8381f, -452.2699f, 34.20129f));
                VectorList_01.Add(new Vector3(-331.7549f, -435.6098f, 32.03751f));
                VectorList_01.Add(new Vector3(-238.6038f, -339.8153f, 30.02007f));
                VectorList_01.Add(new Vector3(-362.435f, -237.0402f, 36.08009f));
                VectorList_01.Add(new Vector3(-460.7722f, -61.74419f, 44.51339f));
                VectorList_01.Add(new Vector3(-378.2862f, -83.28149f, 45.6634f));
                VectorList_01.Add(new Vector3(-179.4025f, -165.1036f, 44.03228f));
                VectorList_01.Add(new Vector3(-323.7705f, -1066.44f, 29.38497f));
                VectorList_01.Add(new Vector3(-267.8411f, -982.2144f, 31.21548f));
                VectorList_01.Add(new Vector3(-119.4417f, -976.4725f, 30.4504f));
                VectorList_01.Add(new Vector3(-116.7756f, -1031.736f, 27.33035f));
                VectorList_01.Add(new Vector3(-201.7282f, -1115.89f, 22.88361f));
                VectorList_01.Add(new Vector3(-15.40278f, -1059.279f, 28.25936f));
                VectorList_01.Add(new Vector3(36.57449f, -1027.556f, 29.50605f));
                VectorList_01.Add(new Vector3(124.3465f, -1040.879f, 29.21977f));
                VectorList_01.Add(new Vector3(256.3816f, -1109.329f, 29.70339f));
                VectorList_01.Add(new Vector3(366.6701f, -1110.683f, 29.40641f));
                VectorList_01.Add(new Vector3(470.8782f, -1059.474f, 29.21167f));
                VectorList_01.Add(new Vector3(454.8644f, -861.613f, 27.60908f));
                VectorList_01.Add(new Vector3(462.0893f, -779.6675f, 27.35778f));
                VectorList_01.Add(new Vector3(464.6252f, -706.1085f, 27.5263f));
                VectorList_01.Add(new Vector3(459.5844f, -616.6682f, 28.49977f));
                VectorList_01.Add(new Vector3(464.7895f, -530.8231f, 28.53473f));
                VectorList_01.Add(new Vector3(369.9629f, -795.5699f, 29.28785f));
                VectorList_01.Add(new Vector3(214.6817f, -932.8238f, 24.14158f));
                VectorList_01.Add(new Vector3(180.892f, -970.239f, 29.57923f));
                VectorList_01.Add(new Vector3(47.86868f, -831.1182f, 31.07672f));
                VectorList_01.Add(new Vector3(-51.74949f, -773.9797f, 32.89146f));
                VectorList_01.Add(new Vector3(-209.035f, -794.7747f, 30.45401f));
                VectorList_01.Add(new Vector3(-307.2984f, -604.8634f, 33.55817f));
                VectorList_01.Add(new Vector3(-156.8815f, -579.5831f, 32.42447f));
                VectorList_01.Add(new Vector3(-51.37901f, -804.2873f, 44.2251f));
                VectorList_01.Add(new Vector3(129.2775f, -685.1415f, 42.02926f));
                VectorList_01.Add(new Vector3(305.582f, -618.9428f, 43.45035f));
                VectorList_01.Add(new Vector3(-117.5915f, -432.6723f, 35.91202f));
                VectorList_01.Add(new Vector3(47.2446f, -460.1062f, 42.93524f));
                VectorList_01.Add(new Vector3(127.5092f, -348.0383f, 45.66156f));
                VectorList_01.Add(new Vector3(237.1046f, -406.3701f, 47.92436f));
                VectorList_01.Add(new Vector3(389.6807f, -356.3604f, 48.02427f));
                VectorList_01.Add(new Vector3(286.2361f, -305.7621f, 49.86424f));
                VectorList_01.Add(new Vector3(385.7697f, -326.4211f, 46.86916f));
                VectorList_01.Add(new Vector3(120.7525f, -240.8967f, 53.35598f));
                VectorList_01.Add(new Vector3(-39.31205f, -184.7605f, 54.27045f));
                VectorList_01.Add(new Vector3(544.1168f, -188.0486f, 54.49725f));
                VectorList_01.Add(new Vector3(484.9264f, -225.7366f, 53.78141f));
                VectorList_01.Add(new Vector3(328.8309f, -193.218f, 54.22644f));
                VectorList_01.Add(new Vector3(202.7554f, -103.8833f, 68.90282f));
                VectorList_01.Add(new Vector3(209.2283f, -166.7125f, 56.34424f));
                VectorList_01.Add(new Vector3(146.1458f, -93.40529f, 64.56207f));
                VectorList_01.Add(new Vector3(54.08985f, -45.14072f, 69.39441f));
                VectorList_01.Add(new Vector3(-29.85673f, 3.081035f, 71.18885f));
                VectorList_01.Add(new Vector3(-171.0098f, -4.133281f, 58.21464f));
                VectorList_01.Add(new Vector3(-350.3228f, 29.56337f, 47.85376f));
                VectorList_01.Add(new Vector3(-500.8236f, 37.66475f, 52.57988f));
                VectorList_01.Add(new Vector3(-672.835f, 94.19141f, 55.85539f));
                VectorList_01.Add(new Vector3(-812.7924f, 47.48517f, 48.57475f));
                VectorList_01.Add(new Vector3(-772.8734f, 17.12931f, 40.65421f));
                VectorList_01.Add(new Vector3(-876.5214f, -24.95477f, 41.75396f));
                VectorList_01.Add(new Vector3(-890.4031f, 142.9519f, 63.01735f));
                VectorList_01.Add(new Vector3(-739.7845f, 247.8303f, 77.33287f));
                VectorList_01.Add(new Vector3(-664.3096f, 229.6056f, 85.08134f));
                VectorList_01.Add(new Vector3(-683.2351f, 311.7654f, 83.08416f));
                VectorList_01.Add(new Vector3(-630.1306f, 241.5545f, 81.91869f));
                VectorList_01.Add(new Vector3(-598.1657f, 324.3062f, 84.01013f));
                VectorList_01.Add(new Vector3(-559.8638f, 272.7294f, 83.01963f));
                VectorList_01.Add(new Vector3(-595.6068f, 178.9053f, 65.31698f));
                VectorList_01.Add(new Vector3(-425.4068f, 181.0757f, 80.6342f));
                VectorList_01.Add(new Vector3(-419.6145f, 265.5547f, 83.19469f));
                VectorList_01.Add(new Vector3(-367.4872f, 265.2892f, 84.84436f));
                VectorList_01.Add(new Vector3(-230.8123f, 293.7858f, 92.18646f));
                VectorList_01.Add(new Vector3(-276.5627f, 162.3596f, 78.75587f));
                VectorList_01.Add(new Vector3(-148.2416f, 154.9984f, 77.5014f));
                VectorList_01.Add(new Vector3(-29.5976f, 164.3102f, 94.99086f));
                VectorList_01.Add(new Vector3(-119.3471f, 358.8907f, 112.88f));
                VectorList_01.Add(new Vector3(-151.6026f, 290.5312f, 97.83833f));
                VectorList_01.Add(new Vector3(-84.97717f, 236.5968f, 100.5634f));
                VectorList_01.Add(new Vector3(-21.63676f, 243.5354f, 109.5534f));
                VectorList_01.Add(new Vector3(96.77094f, 177.6804f, 104.5986f));
                VectorList_01.Add(new Vector3(187.2232f, 84.45721f, 87.89471f));
                VectorList_01.Add(new Vector3(230.4962f, 110.8354f, 93.83304f));
                VectorList_01.Add(new Vector3(258.4269f, -15.61534f, 73.64758f));
                VectorList_01.Add(new Vector3(423.1389f, 56.73925f, 98.82393f));
                VectorList_01.Add(new Vector3(518.9357f, -31.32157f, 75.58662f));
                VectorList_01.Add(new Vector3(643.8714f, 144.6637f, 91.76051f));
                VectorList_01.Add(new Vector3(746.3617f, 220.468f, 87.02998f));
                VectorList_01.Add(new Vector3(465.7555f, 211.8628f, 103.104f));
                VectorList_01.Add(new Vector3(301.2422f, 260.3613f, 105.5253f));
                VectorList_01.Add(new Vector3(311.4685f, 344.5657f, 105.2014f));
                VectorList_01.Add(new Vector3(193.3728f, 325.8731f, 105.3934f));
                VectorList_01.Add(new Vector3(120.5809f, 281.1498f, 109.974f));

                vGetaway = new Vector3(341.4239f, -560.3026f, 28.51324f);
                fGetDir = 337.9559f;

                sHospital = "Pillbox Hill Medical Center";

                iTotals = FindRandom(37, 0, VectorList_01.Count - 1);
            }
            else if (iLocationX == 3)
            {
                vFuMiss = new Vector3(-415.4373f, -300.6146f, 34.15752f);

                VectorList_01.Add(new Vector3(-291.2712f, 2544.365f, 75.41582f));
                VectorList_01.Add(new Vector3(-278.5249f, 2844.024f, 53.98352f));
                VectorList_01.Add(new Vector3(-1130.211f, 2692.908f, 18.8004f));
                VectorList_01.Add(new Vector3(-1406.543f, 2515.155f, 32.94881f));
                VectorList_01.Add(new Vector3(-1654.044f, 3110.578f, 31.70347f));
                VectorList_01.Add(new Vector3(-1601.245f, 3045.645f, 33.65606f));
                VectorList_01.Add(new Vector3(-1638.142f, 3028.333f, 32.90874f));
                VectorList_01.Add(new Vector3(-1586.407f, 2791.162f, 16.92226f));
                VectorList_01.Add(new Vector3(-2082.62f, 2611.691f, 3.083975f));
                VectorList_01.Add(new Vector3(-2769.864f, 2715.421f, 2.349873f));
                VectorList_01.Add(new Vector3(-2519.016f, 2311.338f, 33.21602f));
                VectorList_01.Add(new Vector3(-1912.18f, 2083.522f, 140.3839f));
                VectorList_01.Add(new Vector3(-1970.93f, 1933.293f, 172.0175f));
                VectorList_01.Add(new Vector3(-1904.134f, 1780.671f, 170.6505f));
                VectorList_01.Add(new Vector3(-1743.91f, 1992.474f, 117.2028f));
                VectorList_01.Add(new Vector3(-1709.715f, 1884.546f, 161.3072f));
                VectorList_01.Add(new Vector3(-1587.619f, 2097.857f, 68.70098f));
                VectorList_01.Add(new Vector3(-1357.837f, 2160.219f, 51.93659f));
                VectorList_01.Add(new Vector3(-1514.324f, 1515.17f, 115.2731f));
                VectorList_01.Add(new Vector3(-1555.444f, 1376.918f, 126.8769f));
                VectorList_01.Add(new Vector3(-1839.605f, 791.3201f, 138.7291f));
                VectorList_01.Add(new Vector3(-1995.846f, 549.2031f, 110.1493f));
                VectorList_01.Add(new Vector3(-1680.208f, 494.1615f, 128.8708f));
                VectorList_01.Add(new Vector3(-1755.332f, 185.6081f, 64.43365f));
                VectorList_01.Add(new Vector3(-1736.217f, 204.3954f, 64.94268f));
                VectorList_01.Add(new Vector3(-1764.753f, 165.0018f, 64.94669f));
                VectorList_01.Add(new Vector3(-1713.108f, 141.3231f, 64.90344f));
                VectorList_01.Add(new Vector3(-1706.472f, 214.2735f, 62.38493f));
                VectorList_01.Add(new Vector3(-1629.256f, 268.8999f, 59.5435f));
                VectorList_01.Add(new Vector3(-1578.046f, 183.0742f, 58.86268f));
                VectorList_01.Add(new Vector3(-1634.716f, 181.6893f, 61.74959f));
                VectorList_01.Add(new Vector3(-2306.207f, 235.1366f, 167.5879f));
                VectorList_01.Add(new Vector3(-2291.757f, 367.4641f, 174.595f));
                VectorList_01.Add(new Vector3(-1697.997f, -271.6696f, 51.88332f));
                VectorList_01.Add(new Vector3(-1754.722f, -198.7336f, 57.46332f));
                VectorList_01.Add(new Vector3(-1693.734f, -148.4457f, 58.1592f));
                VectorList_01.Add(new Vector3(-2000.047f, -256.4221f, 29.09476f));
                VectorList_01.Add(new Vector3(-2187.31f, -400.8175f, 13.2528f));
                VectorList_01.Add(new Vector3(-2962.976f, 53.76942f, 11.6085f));
                VectorList_01.Add(new Vector3(-3056.343f, 90.29734f, 12.79408f));
                VectorList_01.Add(new Vector3(-2926.841f, -37.22206f, 2.298412f));
                VectorList_01.Add(new Vector3(-3040.794f, 27.46547f, 10.10806f));
                VectorList_01.Add(new Vector3(-3158.827f, 278.4117f, 2.351314f));
                VectorList_01.Add(new Vector3(-2954.031f, 386.1595f, 14.99633f));
                VectorList_01.Add(new Vector3(-2946.438f, 453.9384f, 15.29806f));
                VectorList_01.Add(new Vector3(-2966.865f, 432.5781f, 15.27232f));
                VectorList_01.Add(new Vector3(-3244.453f, 967.4296f, 12.73052f));
                VectorList_01.Add(new Vector3(-3250.323f, 1011.025f, 12.44748f));
                VectorList_01.Add(new Vector3(-3045.727f, 620.9409f, 7.451577f));
                VectorList_01.Add(new Vector3(-3152.753f, 1109.938f, 20.87215f));
                VectorList_01.Add(new Vector3(-2971.914f, 2129.081f, 41.13417f));

                vGetaway = new Vector3(-419.0133f, -333.0517f, 32.87f);
                fGetDir = 352.5294f;

                sHospital = "Mount Zonah Medical Center";

                iTotals = FindRandom(38, 0, VectorList_01.Count - 1);
            }
            else if (iLocationX == 4)
            {
                vFuMiss = new Vector3(1143.186f, -1490.784f, 34.17999f);

                VectorList_01.Add(new Vector3(-429.4246f, 1215.803f, 325.7583f));
                VectorList_01.Add(new Vector3(-341.2092f, 1305.813f, 336.8911f));
                VectorList_01.Add(new Vector3(-427.6469f, 1115.923f, 326.782f));
                VectorList_01.Add(new Vector3(-418.7949f, 1056.466f, 323.8432f));
                VectorList_01.Add(new Vector3(201.93f, 1165.923f, 227.0053f));
                VectorList_01.Add(new Vector3(705.3666f, 1199.944f, 325.2016f));
                VectorList_01.Add(new Vector3(757.2481f, 1275.769f, 360.2966f));
                VectorList_01.Add(new Vector3(1220.602f, 1897.394f, 77.92645f));
                VectorList_01.Add(new Vector3(1254.534f, 1829.831f, 81.44193f));
                VectorList_01.Add(new Vector3(1369.477f, 2184.939f, 97.82227f));
                VectorList_01.Add(new Vector3(1534.54f, 2228.073f, 77.68973f));
                VectorList_01.Add(new Vector3(1590.794f, 2198.697f, 78.8641f));
                VectorList_01.Add(new Vector3(2114.305f, 2235.576f, 104.764f));
                VectorList_01.Add(new Vector3(2355.571f, 2278.136f, 95.15147f));
                VectorList_01.Add(new Vector3(2296.979f, 1974.724f, 131.2879f));
                VectorList_01.Add(new Vector3(2078.363f, 1696.763f, 105.9699f));
                VectorList_01.Add(new Vector3(2617.165f, 1691.603f, 27.59538f));
                VectorList_01.Add(new Vector3(2676.148f, 1592.313f, 32.51419f));
                VectorList_01.Add(new Vector3(2746.124f, 1486.892f, 30.78432f));
                VectorList_01.Add(new Vector3(2887.79f, 1524.084f, 24.96322f));
                VectorList_01.Add(new Vector3(2360.47f, 2540.61f, 47.69607f));
                VectorList_01.Add(new Vector3(2339.34f, 2570.183f, 47.71948f));
                VectorList_01.Add(new Vector3(2562.806f, 2574.354f, 37.87205f));
                VectorList_01.Add(new Vector3(2617.214f, 2821.745f, 33.89419f));
                VectorList_01.Add(new Vector3(2629.834f, 2790.548f, 33.82434f));
                VectorList_01.Add(new Vector3(2629.363f, 2925.268f, 40.41792f));
                VectorList_01.Add(new Vector3(2832.357f, 2806.384f, 57.39913f));
                VectorList_01.Add(new Vector3(2953.996f, 2741.092f, 43.83486f));
                VectorList_01.Add(new Vector3(1534.691f, 1702.348f, 109.7114f));
                VectorList_01.Add(new Vector3(1566.587f, 860.5251f, 77.51894f));
                VectorList_01.Add(new Vector3(1899.624f, 584.2365f, 178.3987f));
                VectorList_01.Add(new Vector3(1917.581f, 380.3685f, 161.4969f));
                VectorList_01.Add(new Vector3(1662.717f, -26.68935f, 173.7747f));
                VectorList_01.Add(new Vector3(2568.399f, 484.7982f, 108.5263f));
                VectorList_01.Add(new Vector3(2506.034f, -383.8343f, 94.1134f));
                VectorList_01.Add(new Vector3(2544.437f, -313.6512f, 92.98766f));
                VectorList_01.Add(new Vector3(2435.032f, -413.4328f, 93.08391f));
                VectorList_01.Add(new Vector3(2506.621f, -451.7578f, 92.98555f));
                VectorList_01.Add(new Vector3(2676.567f, -659.6204f, 41.65691f));
                VectorList_01.Add(new Vector3(2824.429f, -742.3856f, 1.606231f));
                VectorList_01.Add(new Vector3(1361.785f, -702.8633f, 67.2277f));
                VectorList_01.Add(new Vector3(1324.952f, -756.6548f, 66.40025f));
                VectorList_01.Add(new Vector3(1139.244f, -780.0002f, 57.59484f));
                VectorList_01.Add(new Vector3(1132.807f, -798.575f, 57.57878f));
                VectorList_01.Add(new Vector3(1125.957f, -993.0307f, 45.91859f));
                VectorList_01.Add(new Vector3(1099.421f, -784.8134f, 58.26013f));
                VectorList_01.Add(new Vector3(1052.775f, -724.7465f, 57.48206f));
                VectorList_01.Add(new Vector3(1111.538f, -636.4796f, 56.8156f));
                VectorList_01.Add(new Vector3(1223.825f, -595.252f, 68.42015f));
                VectorList_01.Add(new Vector3(1233.239f, -465.8586f, 66.63689f));
                VectorList_01.Add(new Vector3(1146.365f, -453.3453f, 66.98067f));
                VectorList_01.Add(new Vector3(1101.174f, -550.124f, 56.65363f));
                VectorList_01.Add(new Vector3(1129.701f, -454.7057f, 66.45693f));
                VectorList_01.Add(new Vector3(1174.98f, -397.4349f, 67.81779f));
                VectorList_01.Add(new Vector3(1232.593f, -354.5934f, 69.06885f));
                VectorList_01.Add(new Vector3(1310.674f, -399.1987f, 67.71224f));
                VectorList_01.Add(new Vector3(1143.129f, -299.8851f, 68.78143f));
                VectorList_01.Add(new Vector3(1122.463f, -322.1445f, 67.14088f));
                VectorList_01.Add(new Vector3(1093.196f, -364.4661f, 67.02354f));
                VectorList_01.Add(new Vector3(836.7168f, -575.6613f, 57.10654f));
                VectorList_01.Add(new Vector3(706.3624f, -302.3811f, 59.23769f));
                VectorList_01.Add(new Vector3(743.7562f, -220.7275f, 66.09843f));
                VectorList_01.Add(new Vector3(811.6596f, -285.6776f, 66.45554f));
                VectorList_01.Add(new Vector3(838.2612f, -257.1425f, 65.61382f));
                VectorList_01.Add(new Vector3(877.7681f, -280.1527f, 65.49063f));
                VectorList_01.Add(new Vector3(957.6571f, -204.2076f, 73.12271f));
                VectorList_01.Add(new Vector3(849.0433f, -112.9065f, 79.46316f));
                VectorList_01.Add(new Vector3(979.2575f, -142.5325f, 74.22153f));
                VectorList_01.Add(new Vector3(983.4789f, -107.8521f, 74.33319f));
                VectorList_01.Add(new Vector3(1087.738f, 16.63198f, 80.87926f));
                VectorList_01.Add(new Vector3(1139.83f, 114.605f, 80.84036f));
                VectorList_01.Add(new Vector3(1261.257f, 323.3363f, 81.98537f));
                VectorList_01.Add(new Vector3(1103.61f, 222.222f, 80.98802f));
                VectorList_01.Add(new Vector3(885.9136f, -1.531257f, 78.76098f));
                VectorList_01.Add(new Vector3(1238.931f, -1097.322f, 38.52563f));
                VectorList_01.Add(new Vector3(1064.307f, -239.0685f, 57.94653f));

                vGetaway = new Vector3(1116.722f, -1502.635f, 34.46165f);
                fGetDir = 268.4588f;

                sHospital = "St. Fiacre Hospital";

                iTotals = FindRandom(39, 0, VectorList_01.Count - 1);
            }
            else if (iLocationX == 5)
            {
                vFuMiss = new Vector3(1824.192f, 3701.154f, 33.23653f);

                VectorList_01.Add(new Vector3(81.51405f, 4555.892f, 90.46643f));
                VectorList_01.Add(new Vector3(799.0942f, 4160.361f, 35.2229f));
                VectorList_01.Add(new Vector3(798.4566f, 4531.143f, 49.23855f));
                VectorList_01.Add(new Vector3(1335.921f, 4269.669f, 31.50312f));
                VectorList_01.Add(new Vector3(1307.986f, 4390.837f, 41.68717f));
                VectorList_01.Add(new Vector3(1796.021f, 4605.88f, 37.18285f));
                VectorList_01.Add(new Vector3(1674.801f, 4680.874f, 43.05534f));
                VectorList_01.Add(new Vector3(1706.065f, 4735.913f, 42.14462f));
                VectorList_01.Add(new Vector3(1725.979f, 4801.671f, 41.71417f));
                VectorList_01.Add(new Vector3(1642.043f, 4856.824f, 42.27125f));
                VectorList_01.Add(new Vector3(1696.117f, 4879.972f, 42.03887f));
                VectorList_01.Add(new Vector3(1678.268f, 4882.429f, 42.04193f));
                VectorList_01.Add(new Vector3(1672.494f, 4977.512f, 42.31419f));
                VectorList_01.Add(new Vector3(1714.319f, 4923.555f, 42.09154f));
                VectorList_01.Add(new Vector3(1861.355f, 4970.008f, 52.82473f));
                VectorList_01.Add(new Vector3(1900.041f, 4925.076f, 48.81167f));
                VectorList_01.Add(new Vector3(1998.057f, 4981.703f, 41.60786f));
                VectorList_01.Add(new Vector3(1983.406f, 5175.345f, 47.63911f));
                VectorList_01.Add(new Vector3(2264.839f, 5156.901f, 58.03756f));
                VectorList_01.Add(new Vector3(2381.871f, 5029.653f, 45.96196f));
                VectorList_01.Add(new Vector3(2360.25f, 4938.104f, 42.49917f));
                VectorList_01.Add(new Vector3(2244.616f, 4872.182f, 40.82914f));
                VectorList_01.Add(new Vector3(2422.265f, 4754.923f, 34.30349f));
                VectorList_01.Add(new Vector3(2359.47f, 4751.41f, 34.40399f));
                VectorList_01.Add(new Vector3(2302.268f, 4749.335f, 37.04872f));
                VectorList_01.Add(new Vector3(2144.68f, 4775.483f, 40.99308f));
                VectorList_01.Add(new Vector3(2012.107f, 4719.181f, 41.5946f));
                VectorList_01.Add(new Vector3(1944.651f, 4657.399f, 40.56476f));
                VectorList_01.Add(new Vector3(2194.838f, 5595.23f, 53.76274f));
                VectorList_01.Add(new Vector3(2589.505f, 5063.989f, 44.91933f));
                VectorList_01.Add(new Vector3(2724.282f, 5185.595f, 46.37607f));
                VectorList_01.Add(new Vector3(3315.647f, 5179.81f, 19.61458f));
                VectorList_01.Add(new Vector3(3393.677f, 5501.158f, 24.14926f));
                VectorList_01.Add(new Vector3(3718.582f, 4536.331f, 21.55841f));
                VectorList_01.Add(new Vector3(3823.788f, 4442.232f, 2.80595f));
                VectorList_01.Add(new Vector3(2575.538f, 4648.531f, 34.0546f));
                VectorList_01.Add(new Vector3(2853.658f, 4556.799f, 47.17968f));
                VectorList_01.Add(new Vector3(2897.936f, 4507.654f, 47.99141f));
                VectorList_01.Add(new Vector3(2889.991f, 4346.492f, 50.39873f));
                VectorList_01.Add(new Vector3(2971.468f, 3488.954f, 71.44313f));
                VectorList_01.Add(new Vector3(2676.799f, 3500.828f, 53.30354f));
                VectorList_01.Add(new Vector3(2633.805f, 3291.088f, 55.72838f));
                VectorList_01.Add(new Vector3(2472.229f, 3440.476f, 49.93312f));
                VectorList_01.Add(new Vector3(2376.8f, 3348.705f, 47.9312f));
                VectorList_01.Add(new Vector3(2369.887f, 3158.99f, 48.20874f));
                VectorList_01.Add(new Vector3(2340.908f, 3125.443f, 48.20874f));
                VectorList_01.Add(new Vector3(2428.426f, 3143.442f, 48.15261f));
                VectorList_01.Add(new Vector3(2409.005f, 3033.293f, 48.15258f));
                VectorList_01.Add(new Vector3(2341.584f, 3051.906f, 48.1518f));
                VectorList_01.Add(new Vector3(2057.751f, 3170.661f, 45.36538f));
                VectorList_01.Add(new Vector3(1993.976f, 3053.033f, 47.21455f));
                VectorList_01.Add(new Vector3(2893.15f, 3735.65f, 44.20612f));
                VectorList_01.Add(new Vector3(2709.993f, 4127.261f, 43.86822f));
                VectorList_01.Add(new Vector3(2734.949f, 4278.868f, 48.41084f));
                VectorList_01.Add(new Vector3(2705.414f, 4333.314f, 45.852f));
                VectorList_01.Add(new Vector3(2551.983f, 4281.257f, 41.61634f));
                VectorList_01.Add(new Vector3(2503.317f, 4207.412f, 39.91094f));
                VectorList_01.Add(new Vector3(2408.159f, 4299.113f, 35.22048f));
                VectorList_01.Add(new Vector3(2506.076f, 4080.691f, 38.65971f));
                VectorList_01.Add(new Vector3(2412.145f, 4034.883f, 36.81591f));
                VectorList_01.Add(new Vector3(2469.002f, 3831.031f, 39.94996f));
                VectorList_01.Add(new Vector3(2489.016f, 3773.163f, 44.11203f));
                VectorList_01.Add(new Vector3(2086.534f, 3499.129f, 43.43225f));
                VectorList_01.Add(new Vector3(2050.395f, 3683.347f, 34.58794f));
                VectorList_01.Add(new Vector3(1990.43f, 3793.121f, 32.18081f));
                VectorList_01.Add(new Vector3(1955.167f, 3839.283f, 32.18029f));
                VectorList_01.Add(new Vector3(1917.289f, 3908.558f, 33.44164f));
                VectorList_01.Add(new Vector3(1787.303f, 3895.257f, 34.38925f));
                VectorList_01.Add(new Vector3(1867.364f, 3760.323f, 33.0069f));
                VectorList_01.Add(new Vector3(1898.676f, 3732.602f, 32.71269f));
                VectorList_01.Add(new Vector3(1712.353f, 3844.636f, 35.09303f));
                VectorList_01.Add(new Vector3(1693.142f, 3786.374f, 34.76216f));
                VectorList_01.Add(new Vector3(1651.74f, 3805.848f, 34.96206f));
                VectorList_01.Add(new Vector3(1601.419f, 3826.67f, 34.17381f));
                VectorList_01.Add(new Vector3(1538.749f, 3798.993f, 34.40332f));
                VectorList_01.Add(new Vector3(1568.872f, 3684.475f, 34.73395f));
                VectorList_01.Add(new Vector3(1450.616f, 3754.751f, 31.9337f));
                VectorList_01.Add(new Vector3(1422.453f, 3663.262f, 39.71322f));
                VectorList_01.Add(new Vector3(1369.891f, 3651.806f, 33.9472f));
                VectorList_01.Add(new Vector3(1387.58f, 3617.335f, 38.90529f));
                VectorList_01.Add(new Vector3(1551.087f, 3516.637f, 35.91622f));
                VectorList_01.Add(new Vector3(1628.383f, 3656.517f, 35.12894f));
                VectorList_01.Add(new Vector3(1605.051f, 3569.886f, 38.77521f));
                VectorList_01.Add(new Vector3(1601.791f, 3586.172f, 38.76653f));
                VectorList_01.Add(new Vector3(1593.36f, 3593.009f, 38.76653f));
                VectorList_01.Add(new Vector3(1583.142f, 3616.987f, 38.77521f));
                VectorList_01.Add(new Vector3(1543.397f, 3593.187f, 35.45259f));
                VectorList_01.Add(new Vector3(1514.269f, 3570.81f, 38.73652f));
                VectorList_01.Add(new Vector3(1542.39f, 3589.362f, 38.76651f));
                VectorList_01.Add(new Vector3(1733.86f, 3031.972f, 61.92279f));
                VectorList_01.Add(new Vector3(957.741f, 3616.931f, 32.7385f));
                VectorList_01.Add(new Vector3(895.6479f, 3610.629f, 32.80084f));
                VectorList_01.Add(new Vector3(447.4222f, 3522.782f, 33.56482f));
                VectorList_01.Add(new Vector3(360.8811f, 3406.756f, 36.37774f));
                VectorList_01.Add(new Vector3(78.56032f, 3706.695f, 41.07283f));
                VectorList_01.Add(new Vector3(11.73879f, 3719.627f, 39.59069f));
                VectorList_01.Add(new Vector3(100.6081f, 3606.26f, 39.66945f));
                VectorList_01.Add(new Vector3(244.4168f, 3113.378f, 42.47698f));
                VectorList_01.Add(new Vector3(163.4923f, 3118.479f, 43.40684f));
                VectorList_01.Add(new Vector3(219.2472f, 2780.656f, 45.63362f));
                VectorList_01.Add(new Vector3(293.2191f, 2841.813f, 43.56917f));
                VectorList_01.Add(new Vector3(365.6619f, 2625.837f, 44.57616f));
                VectorList_01.Add(new Vector3(249.7715f, 2593.994f, 45.10711f));
                VectorList_01.Add(new Vector3(201.8722f, 2440.062f, 60.51326f));
                VectorList_01.Add(new Vector3(498.5258f, 2604.816f, 43.68026f));
                VectorList_01.Add(new Vector3(557.0615f, 2663.304f, 42.17883f));
                VectorList_01.Add(new Vector3(562.3815f, 2740.476f, 42.69144f));
                VectorList_01.Add(new Vector3(651.3659f, 2730.515f, 41.98263f));
                VectorList_01.Add(new Vector3(734.3535f, 2523.488f, 73.20567f));
                VectorList_01.Add(new Vector3(721.3502f, 2314.368f, 50.36142f));
                VectorList_01.Add(new Vector3(953.3123f, 2294.082f, 50.08419f));
                VectorList_01.Add(new Vector3(1142.236f, 2118.787f, 55.77753f));
                VectorList_01.Add(new Vector3(1020.972f, 2456.443f, 44.74253f));
                VectorList_01.Add(new Vector3(826.4545f, 2170.425f, 52.2709f));
                VectorList_01.Add(new Vector3(793.3954f, 2161.768f, 53.07783f));
                VectorList_01.Add(new Vector3(1065.421f, 2653.585f, 39.52509f));
                VectorList_01.Add(new Vector3(1138.976f, 2629.198f, 37.99173f));
                VectorList_01.Add(new Vector3(1183.547f, 2723.095f, 38.61087f));
                VectorList_01.Add(new Vector3(1254.578f, 2739.573f, 38.46508f));

                vGetaway = new Vector3(1827.306f, 3693.122f, 33.993f);
                fGetDir = 299.4382f;

                sHospital = "Sandy Shores Medical Center";

                iTotals = FindRandom(40, 0, VectorList_01.Count - 1);
            }
            else
            {
                vFuMiss = new Vector3(-222.471f, 6318.833f, 30.83202f);

                VectorList_01.Add(new Vector3(1870.273f, 6408.297f, 46.56896f));
                VectorList_01.Add(new Vector3(1691.686f, 6438.447f, 32.62918f));
                VectorList_01.Add(new Vector3(1599.166f, 6457.118f, 25.30086f));
                VectorList_01.Add(new Vector3(1586.865f, 6520.422f, 16.95047f));
                VectorList_01.Add(new Vector3(1464.029f, 6541.686f, 14.43836f));
                VectorList_01.Add(new Vector3(1363.895f, 6551.077f, 14.40837f));
                VectorList_01.Add(new Vector3(894.3557f, 6646.197f, 1.556715f));
                VectorList_01.Add(new Vector3(1543.212f, 6334.947f, 24.07725f));
                VectorList_01.Add(new Vector3(1504.889f, 6326.722f, 24.06939f));
                VectorList_01.Add(new Vector3(1442.115f, 6333.458f, 23.89027f));
                VectorList_01.Add(new Vector3(1437.23f, 6359.487f, 23.96965f));
                VectorList_01.Add(new Vector3(1345.684f, 6387.137f, 33.41008f));
                VectorList_01.Add(new Vector3(1088.342f, 6507.485f, 21.04118f));
                VectorList_01.Add(new Vector3(749.1741f, 6461.103f, 31.10237f));
                VectorList_01.Add(new Vector3(501.5004f, 6465.24f, 30.85743f));
                VectorList_01.Add(new Vector3(434.1044f, 6471.987f, 28.76303f));
                VectorList_01.Add(new Vector3(440.8949f, 6511.248f, 28.72778f));
                VectorList_01.Add(new Vector3(318.1997f, 6654.002f, 28.90871f));
                VectorList_01.Add(new Vector3(283.9963f, 6785.421f, 15.67939f));
                VectorList_01.Add(new Vector3(72.12117f, 6949.551f, 11.65868f));
                VectorList_01.Add(new Vector3(69.73324f, 6659.012f, 32.27151f));
                VectorList_01.Add(new Vector3(174.6193f, 6645.385f, 31.51025f));
                VectorList_01.Add(new Vector3(176.6928f, 6419.251f, 32.34123f));
                VectorList_01.Add(new Vector3(71.68548f, 6571.394f, 28.43097f));
                VectorList_01.Add(new Vector3(-0.9529091f, 6612.592f, 31.86915f));
                VectorList_01.Add(new Vector3(-46.67231f, 6582.178f, 32.167f));
                VectorList_01.Add(new Vector3(-112.2852f, 6367.177f, 31.45825f));
                VectorList_01.Add(new Vector3(-118.3919f, 6320.568f, 33.37083f));
                VectorList_01.Add(new Vector3(-207.5957f, 6573.147f, 10.99058f));
                VectorList_01.Add(new Vector3(-320.5085f, 6303.709f, 36.58052f));
                VectorList_01.Add(new Vector3(-313.5651f, 6270.607f, 31.48563f));
                VectorList_01.Add(new Vector3(-334.3918f, 6226.925f, 31.47299f));
                VectorList_01.Add(new Vector3(-371.3245f, 6255.206f, 31.47296f));
                VectorList_01.Add(new Vector3(-407.6978f, 6315.729f, 32.22515f));
                VectorList_01.Add(new Vector3(-450.4157f, 6270.474f, 33.31968f));
                VectorList_01.Add(new Vector3(-483.6811f, 6261.515f, 12.91183f));
                VectorList_01.Add(new Vector3(-429.724f, 6162.676f, 31.45789f));
                VectorList_01.Add(new Vector3(-325.7654f, 6181.24f, 32.30342f));
                VectorList_01.Add(new Vector3(-376.5441f, 6031.316f, 31.51441f));
                VectorList_01.Add(new Vector3(-116.9922f, 6095.342f, 31.06293f));
                VectorList_01.Add(new Vector3(-19.0751f, 6305.593f, 31.3614f));
                VectorList_01.Add(new Vector3(-436.3317f, 5983.188f, 31.49013f));
                VectorList_01.Add(new Vector3(-543.8734f, 5872.407f, 33.14574f));
                VectorList_01.Add(new Vector3(-628.5837f, 5823.533f, 23.83971f));
                VectorList_01.Add(new Vector3(-663.7585f, 5808.839f, 17.51111f));
                VectorList_01.Add(new Vector3(-750.4944f, 5814.406f, 17.49895f));
                VectorList_01.Add(new Vector3(-760.1648f, 5594.888f, 36.70619f));
                VectorList_01.Add(new Vector3(-791.933f, 5481.721f, 26.54518f));
                VectorList_01.Add(new Vector3(-803.6578f, 5391.052f, 34.49738f));
                VectorList_01.Add(new Vector3(-700.301f, 5448.565f, 40.45042f));
                VectorList_01.Add(new Vector3(-603.6163f, 5521.163f, 50.12442f));
                VectorList_01.Add(new Vector3(-469.8421f, 5355.837f, 80.73311f));
                VectorList_01.Add(new Vector3(-490.0967f, 5261.551f, 86.97383f));
                VectorList_01.Add(new Vector3(-556.4681f, 5320.503f, 73.58968f));
                VectorList_01.Add(new Vector3(-498.9151f, 4923.883f, 147.2367f));
                VectorList_01.Add(new Vector3(-639.7859f, 5096.952f, 131.0995f));
                VectorList_01.Add(new Vector3(-1035.138f, 4918.399f, 205.958f));
                VectorList_01.Add(new Vector3(-1027.445f, 4710.075f, 239.2344f));
                VectorList_01.Add(new Vector3(-853.9802f, 4830.626f, 297.7522f));
                VectorList_01.Add(new Vector3(-397.1013f, 4700.09f, 263.4803f));
                VectorList_01.Add(new Vector3(-523.509f, 4503.75f, 79.5913f));
                VectorList_01.Add(new Vector3(-521.1319f, 4370.738f, 67.45171f));
                VectorList_01.Add(new Vector3(-880.3391f, 4413.074f, 20.88786f));
                VectorList_01.Add(new Vector3(-1354.539f, 4289.695f, 1.934863f));
                VectorList_01.Add(new Vector3(-1564.575f, 4394.226f, 4.732732f));
                VectorList_01.Add(new Vector3(-1948.36f, 4455.686f, 35.51091f));
                VectorList_01.Add(new Vector3(-2129.363f, 4505.476f, 29.58157f));
                VectorList_01.Add(new Vector3(-2302.898f, 4385.215f, 10.15656f));
                VectorList_01.Add(new Vector3(-2196.619f, 4287.714f, 49.17346f));
                VectorList_01.Add(new Vector3(-2173.408f, 4289.769f, 49.049f));
                VectorList_01.Add(new Vector3(-2188.512f, 4251.55f, 48.93982f));
                VectorList_01.Add(new Vector3(-1014.172f, 4171.244f, 123.7002f));

                vGetaway = new Vector3(-267.2005f, 6337.363f, 32.18432f);
                fGetDir = 88.0215f;

                sHospital = "The Bay Care Center";

                iTotals = FindRandom(41, 0, VectorList_01.Count - 1);
            }

            if (bTestRun)
            {
                VectorList_01.Clear();
                bJobLoaded = true;
                iJobType = 7;
                iTotals = 0;

                if (iTestKit < MyMissions.AmbuXM.Count())
                {
                    VectorList_01.Add(MyMissions.AmbuXM[iTestKit].AmbPed);
                    iTestKit += 1;
                }
            }
            else if (FindBuiltMissions(5))
            {
                List<Vector3> NewStops_01 = new List<Vector3>();

                for (int i = 0; i < MyMissions.AmbuXM.Count; i++)
                        NewStops_01.Add(MyMissions.AmbuXM[i].AmbPed);

                if (NewStops_01.Count > 0)
                {
                    if (bBulderOnly)
                        VectorList_01.Clear();

                    for (int i = 0; i < NewStops_01.Count; i++)
                        VectorList_01.Add(NewStops_01[i]);

                    iTotals = RandInt(0, VectorList_01.Count - 1);
                }
            }

            ttTextBar_01.Text = "$ " + iCashBouns + "";
            vTarget_01 = VectorList_01[iTotals];

            for (int i = 0; i < VectorList_02.Count; i++)
            {
                float fDist = VectorList_02[i].DistanceTo(vTarget_01);
                fList_01.Add(fDist);
            }
            float fMin = fList_01[0];
            int iStation = 0;
            for (int i = 0; i < fList_01.Count; i++)
            {
                if (fList_01[i] < fMin)
                {
                    fMin = fList_01[i];
                    iStation = i;
                }
            }

            if (iStation == 0)
            {
                vTarget_02 = VectorList_02[0];
                vTarget_03 = new Vector3(293.6819f, -1448.296f, 29.966f);
            }
            else if (iStation == 1)
            {
                vTarget_02 = VectorList_02[1];
                vTarget_03 = new Vector3(359.5868f, -585.00f, 28.80f);
            }
            else if (iStation == 2)
            {
                vTarget_02 = VectorList_02[2];
                vTarget_03 = new Vector3(-497.76f, -328.71f, 34.5f);
            }
            else if (iStation == 3)
            {
                vTarget_02 = VectorList_02[3];
                vTarget_03 = new Vector3(1150.85f, -1529.34f, 35.37f);
            }
            else if (iStation == 4)
            {
                vTarget_02 = VectorList_02[4];
                vTarget_03 = new Vector3(1816.146f, 3678.7f, 34.27f);
            }
            else
            {
                vTarget_02 = VectorList_02[5];
                vTarget_03 = new Vector3(-248f, 6332.4766f, 32.4f);
            }

            BeOnOff.Add(false);//       bNonLoopFx  0 
            BeOnOff.Add(false);//       bPackCount  1 
            BeOnOff.Add(false);//       bMedic      2   
            BeOnOff.Add(false);//       bMoveYourV  3 
            BeOnOff.Add(false);//       bTruckBlip  4 
            BeOnOff.Add(false);//       bNoMedical  5 
            BeOnOff.Add(false);//       bNotimmer   6 
            BeOnOff.Add(false);//       bhalfTimer  7 

            if (!bAmberAntz)
            {
                BigMessageThread.MessageInstance.ShowSimpleShard(sAltLang[6], "", 5000);
                VehicleSpawn("Ambulance", vGetaway, fGetDir, false, false, true, true, 0, 0, 8, 1, true);
                VTBTimerPool.Add(ttTextBar_01);
                ttTextBar_01.Label = "" + sAltLang[298] + "";
                ttTextBar_02.Label = "" + sAltLang[291] + "";
                iCashReward = 0;
                BeOnOff[4] = true;
            }
            iTime_01.Add(0);//  iPackPlus   0 
            iTime_01.Add(0);//  iColourTime 1 

            iList_01.Add(0);//  iStupidPed  0
            iList_01.Add(0);//  illness  0 

            if (bCovidInf)
                iList_01[1] = 2;
            else
            {
                int iRanDow = FindRandom(42, 0, 45);
                if (iRanDow < 3)
                    iList_01[1] = 2;
                else if (iRanDow < 15)
                    iList_01[1] = 1;
                else if (iRanDow < 25)
                    iList_01[1] = 3;
                else if (iRanDow < 35)
                    iList_01[1] = 4;
                else
                    iList_01[1] = 5;
            }
            Ambulance_Fluids(iList_01[1]);

            bOnTheJob = true;
        }
        public class AmbBuild
        {
            public int Local { get; set; }
            public Vector3 AmbPed { get; set; }
        }
        private void Follow()
        {
            BigMessageThread.MessageInstance.ShowSimpleShard(sAltLang[7], "", 5000);
            VTBTimerPool.Add(BtSlideBar);
            BtSlideBar.Label = "" + sAltLang[307] + "";
            ttTextBar_01.Label = "" + sAltLang[303] + "";
            BeOnOff.Clear();
            iTime_01.Clear();
            iList_01.Clear();
            if (Function.Call<int>(Hash.GET_CLOCK_HOURS) > 21 || Function.Call<int>(Hash.GET_CLOCK_HOURS) < 5 && iLocationX > 4)
            {
                int iRanAb = RandInt(1, 3);
                if (iRanAb < 2)
                    iMissionVar_01 = FindRandom(8, 1, 5);
                else
                    iMissionVar_01 = 6;
            }
            else
                iMissionVar_01 = FindRandom(8, 1, 5);

            iList_01.Add(0);//  iStupidPed  0
            iList_01.Add(0);//  iVehPay     1
            iList_01.Add(0);//  iVehMaxHeal 2
            iList_01.Add(0);//  iVehBroken  3

            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Follow, iMissionVar_01 == " + iMissionVar_01, tEx);

            if (iMissionVar_01 == 3)
                ttTextBar_02.Label = "" + sAltLang[297] + "";
            //alien abduction...Random Drive.iMissionVar_01 = 6
            if (iLocationX == 1)
            {
                VectorList_01.Clear();
                VectorList_02.Clear();
                if (iMissionVar_01 == 1)//npc travel to althoraties--fib/etc
                {
                    VectorList_01.Add(new Vector3(360.5464f, -1584.165f, 29.29195f));//--runto
                    VectorList_01.Add(new Vector3(368.7477f, -1568.24f, 29.28557f));//--car stop
                }       //Take out the two npc's route the npcs--find safe house for each zone.iMissionVar_01 = 1
                else if (iMissionVar_01 == 2)//npc travel to blow up spot
                {
                    int iRanEnd = RandInt(0, 10);
                    if (iRanEnd == 1)
                        VectorList_01.Add(new Vector3(-212.9721f, -1492.458f, 31.26519f));
                    else if (iRanEnd == 2)
                        VectorList_01.Add(new Vector3(-220.3911f, -1730.155f, 32.30098f));
                    else if (iRanEnd == 3)
                        VectorList_01.Add(new Vector3(1104.397f, -1461.017f, 34.69287f));
                    else if (iRanEnd == 4)
                        VectorList_01.Add(new Vector3(113.1834f, -1944.621f, 20.72637f));
                    else if (iRanEnd == 5)
                        VectorList_01.Add(new Vector3(522.5928f, -2120.974f, 5.986337f));
                    else if (iRanEnd == 6)
                        VectorList_01.Add(new Vector3(1124.81f, -1254.712f, 20.65065f));
                    else if (iRanEnd == 7)
                        VectorList_01.Add(new Vector3(1549.309f, -2571.281f, 55.69209f));
                    else if (iRanEnd == 8)
                        VectorList_01.Add(new Vector3(180.2808f, -3307.198f, 5.593638f));
                    else if (iRanEnd == 9)
                        VectorList_01.Add(new Vector3(-514.3119f, -2754.772f, 6.000218f));
                    else
                        VectorList_01.Add(new Vector3(-1202.346f, -2051.986f, 13.92475f));
                }       //Follow to end then arial atack the car at end point.iMissionVar_01 = 2
                else if (iMissionVar_01 == 3)//ambush player
                {
                    int iRanEnd = RandInt(1, 8);
                    if (iRanEnd == 1)
                    {
                        VectorList_01.Add(new Vector3(-466.3487f, -1681.311f, 19.00033f));
                        VectorList_01.Add(new Vector3(-468.6617f, -1696.539f, 18.82487f));
                        VectorList_01.Add(new Vector3(-470.0145f, -1707.781f, 18.89761f));
                        VectorList_01.Add(new Vector3(-433.1457f, -1720.573f, 18.95468f));
                        VectorList_01.Add(new Vector3(-422.8595f, -1699.194f, 19.10666f));
                        VectorList_01.Add(new Vector3(-443.4807f, -1703.646f, 18.90604f));//-- park
                    }
                    else if (iRanEnd == 2)
                    {
                        VectorList_01.Add(new Vector3(-220.8786f, -2652.528f, 11.79702f));
                        VectorList_01.Add(new Vector3(-233.6745f, -2651.991f, 11.79702f));
                        VectorList_01.Add(new Vector3(-237.1441f, -2667.249f, 8.876022f));
                        VectorList_01.Add(new Vector3(-217.7384f, -2651.669f, 6.000296f));
                        VectorList_01.Add(new Vector3(-236.7321f, -2651.404f, 6.000294f));
                        VectorList_01.Add(new Vector3(-229.2889f, -2647.295f, 6.000293f));
                    }
                    else if (iRanEnd == 3)
                    {
                        VectorList_01.Add(new Vector3(428.1903f, -2912.532f, 6.736246f));
                        VectorList_01.Add(new Vector3(544.6238f, -2906.799f, 6.736241f));
                        VectorList_01.Add(new Vector3(491.8947f, -2911.617f, 6.73115f));
                        VectorList_01.Add(new Vector3(478.3532f, -2912.956f, 6.729879f));
                        VectorList_01.Add(new Vector3(479.5107f, -2940.874f, 6.044461f));

                        string sPlank = "prop_rub_planks_03";
                        Vector3 posy = new Vector3(487.212799f, -2925.94751f, 6.18317032f);
                        Vector3 Rota = new Vector3(-55.0000572f, -1.209414f, -1.243144f);
                        BuildProp(sPlank, posy, Rota, true, true);
                    }
                    else if (iRanEnd == 4)
                    {
                        VectorList_01.Add(new Vector3(1742.744f, -1618.212f, 116.1949f));
                        VectorList_01.Add(new Vector3(1707.913f, -1616.933f, 112.4624f));
                        VectorList_01.Add(new Vector3(1697.077f, -1557.716f, 112.6263f));
                        VectorList_01.Add(new Vector3(1714.654f, -1597.784f, 113.8148f));
                        VectorList_01.Add(new Vector3(1720.242f, -1599.38f, 112.5155f));
                        VectorList_01.Add(new Vector3(1737.309f, -1597.527f, 112.5378f));
                        VectorList_01.Add(new Vector3(1731.439f, -1570.151f, 112.6263f));
                    }
                    else if (iRanEnd == 5)
                    {
                        VectorList_01.Add(new Vector3(304.6562f, -2040.644f, 20.18769f));
                        VectorList_01.Add(new Vector3(336.1408f, -2015.46f, 25.80145f));
                        VectorList_01.Add(new Vector3(371.3257f, -2047.301f, 22.06841f));
                        VectorList_01.Add(new Vector3(347.0751f, -2068.79f, 20.88846f));
                        VectorList_01.Add(new Vector3(344.499f, -2035.49f, 21.85677f));
                        VectorList_01.Add(new Vector3(329.0612f, -2035.297f, 20.95919f));
                    }
                    else if (iRanEnd == 6)
                    {
                        VectorList_01.Add(new Vector3(445.6512f, -1558.722f, 29.28262f));
                        VectorList_01.Add(new Vector3(420.9958f, -1569.005f, 29.3926f));
                        VectorList_01.Add(new Vector3(433.3597f, -1535.887f, 29.28205f));
                        VectorList_01.Add(new Vector3(433.0142f, -1560.252f, 32.79224f));
                        VectorList_01.Add(new Vector3(425.2534f, -1549.954f, 29.07599f));
                    }
                    else if (iRanEnd == 7)
                    {
                        VectorList_01.Add(new Vector3(-346.0823f, -1338.078f, 37.30556f));
                        VectorList_01.Add(new Vector3(-329.6708f, -1340.884f, 31.29306f));
                        VectorList_01.Add(new Vector3(-347.8383f, -1315.876f, 31.41311f));
                        VectorList_01.Add(new Vector3(-334.7632f, -1313.421f, 31.4002f));
                        VectorList_01.Add(new Vector3(-336.9937f, -1318.542f, 31.37252f));
                        VectorList_01.Add(new Vector3(-327.2391f, -1326.327f, 31.34753f));
                    }
                    else
                    {
                        VectorList_01.Add(new Vector3(986.048f, -1547.899f, 38.09137f));
                        VectorList_01.Add(new Vector3(991.3909f, -1529.613f, 30.86609f));
                        VectorList_01.Add(new Vector3(1003.014f, -1539.112f, 30.83599f));
                        VectorList_01.Add(new Vector3(992.9978f, -1550.005f, 30.75492f));
                        VectorList_01.Add(new Vector3(987.3577f, -1535.514f, 30.75465f));
                    }
                }       //abush player at end point.iMissionVar_01 = 3
                else if (iMissionVar_01 == 4)//sell the car
                {
                    VectorList_01.Add(new Vector3(1204.6427f, -3105.188f, 4.3991f));
                    VectorList_01.Add(new Vector3(1175.856f, -3103.262f, 5.028f));
                }       //have player steal and deliver a vehcle. find delivery point for each zone.iMissionVar_01 = 4
                else if (iMissionVar_01 == 5)// car goes to heli safe zone thing.
                {
                    VectorList_01.Add(new Vector3(-488.9879f, -1822.73f, 22.68803f));   //Heli spot	
                    VectorList_01.Add(new Vector3(-507.5099f, -1805.486f, 22.12456f)); //park
                }        //have player protect two in car against two attacking cars--Find diffren safe zone for each zone.iMissionVar_01 = 5

                int iRanMid = FindRandom(25, 1, 22);
                if (iRanMid == 1)
                {
                    VectorList_02.Add(new Vector3(29.23337f, -1348.415f, 29.49703f));
                    VectorList_01.Add(new Vector3(28.0686f, -1357.108f, 28.65457f));
                    VectorList_01.Add(new Vector3(63.66151f, -1316.564f, 28.68255f));
                }
                else if (iRanMid == 2)
                {
                    VectorList_02.Add(new Vector3(81.74303f, -1391.563f, 29.38763f));
                    VectorList_01.Add(new Vector3(86.91164f, -1390.736f, 28.6442f));
                    VectorList_01.Add(new Vector3(89.8817f, -1393.499f, 28.70121f));
                }
                else if (iRanMid == 3)
                {
                    VectorList_02.Add(new Vector3(128.0179f, -1297.512f, 29.26953f));
                    VectorList_01.Add(new Vector3(132.0314f, -1307.579f, 28.52441f));
                    VectorList_01.Add(new Vector3(123.205f, -1361.701f, 28.69243f));
                }
                else if (iRanMid == 4)
                {
                    VectorList_02.Add(new Vector3(133.5348f, -1711.055f, 29.29162f));
                    VectorList_01.Add(new Vector3(129.9288f, -1717.183f, 28.49205f));
                    VectorList_01.Add(new Vector3(150.4179f, -1738.598f, 28.54851f));
                }
                else if (iRanMid == 5)
                {
                    VectorList_02.Add(new Vector3(-52.55956f, -1755.939f, 29.42101f));
                    VectorList_01.Add(new Vector3(-65.20522f, -1757.994f, 28.69993f));
                    VectorList_01.Add(new Vector3(-102.9381f, -1769.873f, 29.05534f));
                }
                else if (iRanMid == 6)
                {
                    VectorList_02.Add(new Vector3(-137.6957f, -2037.263f, 22.95606f));
                    VectorList_01.Add(new Vector3(-153.1859f, -2032.061f, 22.11925f));
                    VectorList_01.Add(new Vector3(-161.5409f, -2071.736f, 25.26752f));
                }
                else if (iRanMid == 7)
                {
                    VectorList_02.Add(new Vector3(-249.2285f, -1877.849f, 27.75544f));
                    VectorList_01.Add(new Vector3(-238.8648f, -1861.373f, 28.19997f));
                    VectorList_01.Add(new Vector3(-259.1034f, -1838.252f, 27.69475f));
                }
                else if (iRanMid == 8)
                {
                    VectorList_02.Add(new Vector3(-434.3504f, -2170.941f, 11.33855f));
                    VectorList_01.Add(new Vector3(-436.1488f, -2161.472f, 9.623337f));
                    VectorList_01.Add(new Vector3(-474.4507f, -2152.865f, 8.923837f));
                }
                else if (iRanMid == 9)
                {
                    VectorList_02.Add(new Vector3(-1037.877f, -2737.805f, 20.16927f));
                    VectorList_01.Add(new Vector3(-1033.819f, -2730.47f, 19.48834f));
                    VectorList_01.Add(new Vector3(-1081.809f, -2690.297f, 19.57225f));
                }
                else if (iRanMid == 10)
                {
                    VectorList_02.Add(new Vector3(-697.024f, -2282.052f, 13.06055f));
                    VectorList_01.Add(new Vector3(-688.7805f, -2285.939f, 12.39142f));
                    VectorList_01.Add(new Vector3(-616.1142f, -2267.951f, 5.357932f));
                }
                else if (iRanMid == 11)
                {
                    VectorList_02.Add(new Vector3(-878.5355f, -2179.119f, 9.809047f));
                    VectorList_01.Add(new Vector3(-886.9496f, -2188.644f, 7.948472f));
                    VectorList_01.Add(new Vector3(-851.291f, -2256.93f, 6.617734f));
                }
                else if (iRanMid == 12)
                {
                    VectorList_02.Add(new Vector3(-415.1752f, -2765.653f, 6.000383f));
                    VectorList_01.Add(new Vector3(-414.1678f, -2769.615f, 5.424991f));
                    VectorList_01.Add(new Vector3(-372.4109f, -2752.222f, 5.463089f));
                }
                else if (iRanMid == 13)
                {
                    VectorList_02.Add(new Vector3(256.8485f, -3061.773f, 5.863027f));
                    VectorList_01.Add(new Vector3(239.1449f, -3071.851f, 5.231382f));
                    VectorList_01.Add(new Vector3(283.8772f, -3122.928f, 5.085526f));
                }
                else if (iRanMid == 14)
                {
                    VectorList_02.Add(new Vector3(637.727f, -3013.609f, 6.227631f));
                    VectorList_01.Add(new Vector3(637.6893f, -3005.846f, 5.470101f));
                    VectorList_01.Add(new Vector3(589.182f, -3016.52f, 5.468886f));
                }
                else if (iRanMid == 15)
                {
                    VectorList_02.Add(new Vector3(1193.594f, -3256.138f, 7.095187f));
                    VectorList_01.Add(new Vector3(1173.26f, -3256.969f, 5.26041f));
                    VectorList_01.Add(new Vector3(1155.172f, -3321.503f, 5.352808f));
                }
                else if (iRanMid == 16)
                {
                    VectorList_02.Add(new Vector3(933.8091f, -1809.5f, 30.78419f));
                    VectorList_01.Add(new Vector3(949.5656f, -1808.37f, 30.56504f));
                    VectorList_01.Add(new Vector3(924.9987f, -1769.509f, 30.40345f));
                }
                else if (iRanMid == 17)
                {
                    VectorList_02.Add(new Vector3(820.9397f, -1632.992f, 30.74221f));
                    VectorList_01.Add(new Vector3(825.5375f, -1635.506f, 29.88921f));
                    VectorList_01.Add(new Vector3(834.3431f, -1578.166f, 29.98528f));
                }
                else if (iRanMid == 18)
                {
                    VectorList_02.Add(new Vector3(1322.209f, -1651.059f, 52.27487f));
                    VectorList_01.Add(new Vector3(1313.032f, -1639.093f, 51.49751f));
                    VectorList_01.Add(new Vector3(1268.845f, -1667.092f, 46.22371f));
                }
                else if (iRanMid == 19)
                {
                    VectorList_02.Add(new Vector3(1776.385f, -1617.179f, 112.3981f));
                    VectorList_01.Add(new Vector3(1780.726f, -1612.925f, 111.8114f));
                    VectorList_01.Add(new Vector3(1770.492f, -1577.206f, 111.994f));
                }
                else if (iRanMid == 20)
                {
                    VectorList_02.Add(new Vector3(1429.655f, -2596.344f, 48.05575f));
                    VectorList_01.Add(new Vector3(1429.385f, -2581.218f, 47.42775f));
                    VectorList_01.Add(new Vector3(1391.722f, -2575.155f, 48.10217f));
                }
                else if (iRanMid == 21)
                {
                    VectorList_02.Add(new Vector3(843.981f, -1025.446f, 28.19486f));
                    VectorList_01.Add(new Vector3(842.7297f, -1011.748f, 27.24161f));
                    VectorList_01.Add(new Vector3(806.2791f, -1008.782f, 25.5903f));
                }
                else
                {
                    VectorList_02.Add(new Vector3(791.995f, -736.0549f, 27.49739f));
                    VectorList_01.Add(new Vector3(780.7507f, -745.2405f, 26.79471f));
                    VectorList_01.Add(new Vector3(778.6619f, -799.9254f, 25.85231f));
                }
            }
            else if (iLocationX == 2)
            {
                VectorList_01.Clear();
                VectorList_02.Clear();
                if (iMissionVar_01 == 1)//npc travel to althoraties--fib/etc
                {
                    VectorList_01.Add(new Vector3(437.1844f, -979.4984f, 30.68965f));
                    VectorList_01.Add(new Vector3(399.3774f, -986.9354f, 29.44869f));
                }
                else if (iMissionVar_01 == 2)//npc travel to blow up spot
                {
                    int iRanEnd = RandInt(1, 7);
                    if (iRanEnd == 1)
                        VectorList_01.Add(new Vector3(-359.5196f, 289.2014f, 84.04865f));
                    else if (iRanEnd == 2)
                        VectorList_01.Add(new Vector3(515.2481f, -630.4966f, 24.06135f));
                    else if (iRanEnd == 3)
                        VectorList_01.Add(new Vector3(-355.3961f, -948.6683f, 30.38784f));
                    else if (iRanEnd == 4)
                        VectorList_01.Add(new Vector3(28.46826f, -889.8625f, 29.40291f));
                    else if (iRanEnd == 5)
                        VectorList_01.Add(new Vector3(-759.4818f, -576.5731f, 29.43292f));
                    else if (iRanEnd == 6)
                        VectorList_01.Add(new Vector3(-1663.27f, -851.8062f, 8.492905f));
                    else
                        VectorList_01.Add(new Vector3(-1161.485f, -1757.189f, 3.299878f));
                }
                else if (iMissionVar_01 == 3)//ambush player
                {
                    int iRanEnd = RandInt(1, 6);
                    if (iRanEnd == 1)
                    {
                        VectorList_01.Add(new Vector3(-941.4105f, 152.5079f, 65.02007f));
                        VectorList_01.Add(new Vector3(-920.506f, 157.4754f, 69.02317f));
                        VectorList_01.Add(new Vector3(-905.4229f, 155.7684f, 69.02409f));
                        VectorList_01.Add(new Vector3(-908.3251f, 153.3763f, 66.16821f));
                        VectorList_01.Add(new Vector3(-934.6646f, 161.8468f, 65.41588f));
                    }
                    else if (iRanEnd == 2)
                    {
                        VectorList_01.Add(new Vector3(121.0306f, -378.0263f, 42.7957f));
                        VectorList_01.Add(new Vector3(106.1587f, -379.3279f, 41.76587f));
                        VectorList_01.Add(new Vector3(109.7575f, -411.4167f, 41.21627f));
                        VectorList_01.Add(new Vector3(102.5173f, -453.8578f, 41.13155f));
                        VectorList_01.Add(new Vector3(104.8115f, -439.1882f, 41.51765f));
                        VectorList_01.Add(new Vector3(117.9353f, -429.0256f, 40.39623f));
                    }
                    else if (iRanEnd == 3)
                    {
                        VectorList_01.Add(new Vector3(-1455.117f, -680.4637f, 26.53085f));
                        VectorList_01.Add(new Vector3(-1446.568f, -694.6417f, 26.36806f));
                        VectorList_01.Add(new Vector3(-1424.018f, -660.3842f, 28.67337f));
                        VectorList_01.Add(new Vector3(-1433.032f, -662.9283f, 26.85435f));
                        VectorList_01.Add(new Vector3(-1441.234f, -667.9251f, 25.91721f));
                    }
                    else if (iRanEnd == 4)
                    {
                        VectorList_01.Add(new Vector3(-1121.113f, -974.092f, 6.632129f));
                        VectorList_01.Add(new Vector3(-1130.522f, -953.6594f, 6.628807f));
                        VectorList_01.Add(new Vector3(-1119.516f, -965.3847f, 2.150753f));
                        VectorList_01.Add(new Vector3(-1121.4f, -971.5309f, 2.160945f));
                        VectorList_01.Add(new Vector3(-1112.713f, -963.7789f, 1.6106f));
                    }
                    else if (iRanEnd == 5)
                    {
                        VectorList_01.Add(new Vector3(-1275.67f, -1347.123f, 9.711223f));
                        VectorList_01.Add(new Vector3(-1262.919f, -1345.914f, 4.083723f));
                        VectorList_01.Add(new Vector3(-1257.257f, -1365.544f, 4.053958f));
                        VectorList_01.Add(new Vector3(-1269.841f, -1367.156f, 4.299968f));
                        VectorList_01.Add(new Vector3(-1266.601f, -1358.039f, 3.523245f));
                    }
                    else
                    {
                        VectorList_01.Add(new Vector3(460.8025f, -762.4088f, 27.3578f));
                        VectorList_01.Add(new Vector3(452.9416f, -777.0596f, 27.3578f));
                        VectorList_01.Add(new Vector3(460.7719f, -770.8568f, 27.35778f));
                        VectorList_01.Add(new Vector3(448.8096f, -800.5675f, 27.80494f));
                        VectorList_01.Add(new Vector3(457.1569f, -796.0293f, 27.35778f));
                    }
                }
                else if (iMissionVar_01 == 4)//sell the car
                {
                    VectorList_01.Add(new Vector3(-13.47234f, -1082.492f, 25.67207f));
                    VectorList_01.Add(new Vector3(-28.76398f, -1085.738f, 26.56468f));
                }
                else if (iMissionVar_01 == 5)// car goes to heli safe zone thing.
                {
                    VectorList_01.Add(new Vector3(-119.3288f, -420.7425f, 35.39782f));
                    VectorList_01.Add(new Vector3(-152.6864f, -404.7901f, 33.60013f));
                }

                int iRanMid = FindRandom(26, 1, 28);
                if (iRanMid == 1)
                {
                    VectorList_02.Add(new Vector3(150.5676f, -1038.429f, 29.37779f));
                    VectorList_01.Add(new Vector3(154.8974f, -1031.307f, 28.5814f));
                    VectorList_01.Add(new Vector3(125.958f, -1018.502f, 28.63811f));
                }
                else if (iRanMid == 2)
                {
                    VectorList_02.Add(new Vector3(435.5468f, -981.9232f, 30.6896f));
                    VectorList_01.Add(new Vector3(403.8796f, -981.2629f, 28.64109f));
                    VectorList_01.Add(new Vector3(401.5371f, -1025.104f, 28.70385f));
                }
                else if (iRanMid == 3)
                {
                    VectorList_02.Add(new Vector3(419.2306f, -807.6665f, 29.50262f));
                    VectorList_01.Add(new Vector3(411.4574f, -809.9119f, 28.47944f));
                    VectorList_01.Add(new Vector3(408.4914f, -833.3914f, 28.61216f));
                }
                else if (iRanMid == 4)
                {
                    VectorList_02.Add(new Vector3(309.6114f, -728.0588f, 29.31677f));
                    VectorList_01.Add(new Vector3(319.8952f, -731.7748f, 28.5953f));
                    VectorList_01.Add(new Vector3(342.1745f, -687.5825f, 28.65983f));
                }
                else if (iRanMid == 5)
                {
                    VectorList_02.Add(new Vector3(17.77203f, -1114.053f, 29.80933f));
                    VectorList_01.Add(new Vector3(16.63231f, -1125.647f, 28.06987f));
                    VectorList_01.Add(new Vector3(45.7648f, -1108.079f, 28.51067f));
                }
                else if (iRanMid == 6)
                {
                    VectorList_02.Add(new Vector3(-157.7985f, -305.1355f, 39.73332f));
                    VectorList_01.Add(new Vector3(-147.679f, -305.7886f, 38.11828f));
                    VectorList_01.Add(new Vector3(-125.9831f, -248.4289f, 43.55973f));
                }
                else if (iRanMid == 7)
                {
                    VectorList_02.Add(new Vector3(126.7074f, -212.7012f, 54.55783f));
                    VectorList_01.Add(new Vector3(134.0649f, -199.8658f, 53.67999f));
                    VectorList_01.Add(new Vector3(89.80457f, -181.9914f, 54.18617f));
                }
                else if (iRanMid == 8)
                {
                    VectorList_02.Add(new Vector3(259.3805f, 204.2648f, 106.2831f));
                    VectorList_01.Add(new Vector3(254.653f, 186.6486f, 104.2287f));
                    VectorList_01.Add(new Vector3(274.2308f, 178.7519f, 103.8945f));
                }
                else if (iRanMid == 9)
                {
                    VectorList_02.Add(new Vector3(321.1473f, 179.5577f, 103.5865f));
                    VectorList_01.Add(new Vector3(316.4339f, 165.1335f, 102.9876f));
                    VectorList_01.Add(new Vector3(343.2505f, 153.9202f, 102.4657f));
                }
                else if (iRanMid == 10)
                {
                    VectorList_02.Add(new Vector3(377.0154f, 324.1906f, 103.5664f));
                    VectorList_01.Add(new Vector3(374.426f, 315.8162f, 102.6391f));
                    VectorList_01.Add(new Vector3(404.8438f, 305.6038f, 102.2811f));
                }
                else if (iRanMid == 11)
                {
                    VectorList_02.Add(new Vector3(245.0385f, -45.62914f, 69.94103f));
                    VectorList_01.Add(new Vector3(237.4628f, -59.92862f, 68.72849f));
                    VectorList_01.Add(new Vector3(263.1981f, -71.03434f, 69.25334f));
                }
                else if (iRanMid == 12)
                {
                    VectorList_02.Add(new Vector3(328.1036f, -73.02845f, 70.92542f));
                    VectorList_01.Add(new Vector3(323.9522f, -91.40186f, 68.08755f));
                    VectorList_01.Add(new Vector3(359.7021f, -102.1399f, 65.88079f));
                }
                else if (iRanMid == 13)
                {
                    VectorList_02.Add(new Vector3(392.07f, -366.2047f, 46.82951f));
                    VectorList_01.Add(new Vector3(403.1596f, -382.5547f, 46.07794f));
                    VectorList_01.Add(new Vector3(442.0821f, -345.303f, 46.78571f));
                }
                else if (iRanMid == 14)
                {
                    VectorList_02.Add(new Vector3(315.0392f, -276.8981f, 54.17453f));
                    VectorList_01.Add(new Vector3(319.6658f, -268.366f, 53.09295f));
                    VectorList_01.Add(new Vector3(278.2222f, -250.8765f, 53.26501f));
                }
                else if (iRanMid == 15)
                {
                    VectorList_02.Add(new Vector3(6.693173f, -984.5064f, 29.36952f));
                    VectorList_01.Add(new Vector3(12.53872f, -973.5062f, 28.7167f));
                    VectorList_01.Add(new Vector3(-11.21784f, -963.0413f, 28.64429f));
                }
                else if (iRanMid == 16)
                {
                    VectorList_02.Add(new Vector3(-1287.183f, -1116.392f, 6.990112f));
                    VectorList_01.Add(new Vector3(-1296.747f, -1115.58f, 6.019869f));
                    VectorList_01.Add(new Vector3(-1298.694f, -1150.089f, 5.026756f));
                }
                else if (iRanMid == 17)
                {
                    VectorList_02.Add(new Vector3(-1154.255f, -1424.516f, 4.954461f));
                    VectorList_01.Add(new Vector3(-1165.649f, -1415.353f, 4.265989f));
                    VectorList_01.Add(new Vector3(-1172.066f, -1453.376f, 3.89234f));
                }
                else if (iRanMid == 18)
                {
                    VectorList_02.Add(new Vector3(-818.3663f, -1078.256f, 11.3396f));
                    VectorList_01.Add(new Vector3(-809.4523f, -1083.536f, 10.74389f));
                    VectorList_01.Add(new Vector3(-823.6926f, -1034.418f, 12.74137f));
                }
                else if (iRanMid == 19)
                {
                    VectorList_02.Add(new Vector3(-663.9907f, -943.4654f, 21.82922f));
                    VectorList_01.Add(new Vector3(-661.7155f, -952.7981f, 20.87846f));
                    VectorList_01.Add(new Vector3(-646.4616f, -936.1199f, 21.87238f));
                }
                else if (iRanMid == 20)
                {
                    VectorList_02.Add(new Vector3(-711.6722f, -915.5839f, 19.21559f));
                    VectorList_01.Add(new Vector3(-710.6805f, -927.8516f, 18.54868f));
                    VectorList_01.Add(new Vector3(-682.2473f, -953.5211f, 20.12739f));
                }
                else if (iRanMid == 21)
                {
                    VectorList_02.Add(new Vector3(-1214.073f, -329.0381f, 37.79074f));
                    VectorList_01.Add(new Vector3(-1220.868f, -318.1037f, 37.08377f));
                    VectorList_01.Add(new Vector3(-1269.245f, -342.6541f, 36.22647f));
                }
                else if (iRanMid == 22)
                {
                    VectorList_02.Add(new Vector3(-350.3195f, -47.78835f, 49.04627f));
                    VectorList_01.Add(new Vector3(-331.8652f, -33.8008f, 47.3376f));
                    VectorList_01.Add(new Vector3(-377.7131f, -16.585f, 46.37019f));
                }
                else if (iRanMid == 23)
                {
                    VectorList_02.Add(new Vector3(-1225.991f, -903.5627f, 12.33818f));
                    VectorList_01.Add(new Vector3(-1231.791f, -897.3057f, 11.63345f));
                    VectorList_01.Add(new Vector3(-1260.357f, -915.747f, 10.61654f));
                }
                else if (iRanMid == 24)
                {
                    VectorList_02.Add(new Vector3(-715.5591f, -156.2034f, 37.41513f));
                    VectorList_01.Add(new Vector3(-725.0962f, -159.5366f, 36.48624f));
                    VectorList_01.Add(new Vector3(-700.7872f, -204.7722f, 36.45102f));
                }
                else if (iRanMid == 25)
                {
                    VectorList_02.Add(new Vector3(-822.507f, -187.3798f, 37.56894f));
                    VectorList_01.Add(new Vector3(-829.0215f, -192.5075f, 36.99609f));
                    VectorList_01.Add(new Vector3(-807.1179f, -233.9201f, 36.66647f));
                }
                else if (iRanMid == 26)
                {
                    VectorList_02.Add(new Vector3(-1313.495f, -390.4828f, 36.69578f));
                    VectorList_01.Add(new Vector3(-1331.804f, -392.1112f, 36.12673f));
                    VectorList_01.Add(new Vector3(-1354.216f, -413.1361f, 35.70697f));
                }
                else if (iRanMid == 27)
                {
                    VectorList_02.Add(new Vector3(-1455.13f, -232.8911f, 49.79767f));
                    VectorList_01.Add(new Vector3(-1459.44f, -228.1249f, 48.73184f));
                    VectorList_01.Add(new Vector3(-1478.014f, -243.8873f, 49.6101f));
                }
                else
                {
                    VectorList_02.Add(new Vector3(-1276.471f, 312.2378f, 65.51176f));
                    VectorList_01.Add(new Vector3(-1285.92f, 291.7623f, 64.34614f));
                    VectorList_01.Add(new Vector3(-1215.076f, 247.9535f, 66.87453f));
                }
            }
            else if (iLocationX == 3)
            {
                VectorList_01.Clear();
                VectorList_02.Clear();
                if (iMissionVar_01 == 1)//npc travel to althoraties--fib/etc
                {
                    VectorList_01.Add(new Vector3(-1093.32f, -809.6802f, 19.28031f));
                    VectorList_01.Add(new Vector3(-1109.039f, -794.2333f, 18.33924f));
                }
                else if (iMissionVar_01 == 2)//npc travel to blow up spot
                {
                    int iRanEnd = RandInt(1, 5);
                    if (iRanEnd == 1)
                        VectorList_01.Add(new Vector3(-1147.108f, 2655.513f, 16.8784f));
                    else if (iRanEnd == 2)
                        VectorList_01.Add(new Vector3(-2214.634f, 2314.952f, 31.92688f));
                    else if (iRanEnd == 3)
                        VectorList_01.Add(new Vector3(-2633.869f, 1408.097f, 133.7498f));
                    else if (iRanEnd == 4)
                        VectorList_01.Add(new Vector3(-1164.654f, 935.5737f, 196.8013f));
                    else
                        VectorList_01.Add(new Vector3(-1648.272f, -202.5842f, 54.42236f));
                }
                else if (iMissionVar_01 == 3)//ambush player
                {
                    int iRanEnd = RandInt(1, 5);
                    if (iRanEnd == 1)
                    {
                        VectorList_01.Add(new Vector3(-1916.915f, 1787.843f, 172.1105f));
                        VectorList_01.Add(new Vector3(-1927.097f, 1789.93f, 172.5048f));
                        VectorList_01.Add(new Vector3(-1953.392f, 1778.626f, 182.9692f));
                        VectorList_01.Add(new Vector3(-1951.746f, 1775.084f, 182.9704f));
                        VectorList_01.Add(new Vector3(-1930.831f, 1772.518f, 172.7545f));
                    }
                    else if (iRanEnd == 2)
                    {
                        VectorList_01.Add(new Vector3(-2960.012f, 50.08887f, 16.09332f));
                        VectorList_01.Add(new Vector3(-2947.078f, 58.85783f, 11.60851f));
                        VectorList_01.Add(new Vector3(-2954.036f, 49.58205f, 11.60851f));
                        VectorList_01.Add(new Vector3(-2965.753f, 54.34407f, 11.60851f));
                        VectorList_01.Add(new Vector3(-2972.483f, 70.1152f, 11.6085f));
                    }
                    else if (iRanEnd == 3)
                    {
                        VectorList_01.Add(new Vector3(-2959.741f, 446.2224f, 15.28847f));
                        VectorList_01.Add(new Vector3(-2947.957f, 450.3016f, 15.30228f));
                        VectorList_01.Add(new Vector3(-2965.23f, 433.1578f, 15.28108f));
                        VectorList_01.Add(new Vector3(-2961.716f, 443.0429f, 15.26522f));
                    }
                    else if (iRanEnd == 4)
                    {
                        VectorList_01.Add(new Vector3(-3023.697f, 755.4214f, 31.59152f));
                        VectorList_01.Add(new Vector3(-3007.525f, 737.8899f, 27.58927f));
                        VectorList_01.Add(new Vector3(-3020.523f, 759.449f, 27.58969f));
                        VectorList_01.Add(new Vector3(-3021.461f, 750.8193f, 27.5876f));
                        VectorList_01.Add(new Vector3(-3022.211f, 738.6611f, 26.48458f));
                    }
                    else
                    {
                        VectorList_01.Add(new Vector3(-2785.367f, 1441.805f, 100.8382f));
                        VectorList_01.Add(new Vector3(-2795.599f, 1434.323f, 100.9284f));
                        VectorList_01.Add(new Vector3(-2784.188f, 1434.718f, 100.9284f));
                        VectorList_01.Add(new Vector3(-2772.503f, 1435.061f, 100.4354f));
                    }
                }
                else if (iMissionVar_01 == 4)//sell the car
                {
                    VectorList_01.Add(new Vector3(-1131.881f, 2697.187f, 17.80042f));
                    VectorList_01.Add(new Vector3(-1121.609f, 2679.994f, 18.52382f));
                }
                else if (iMissionVar_01 == 5)// car goes to heli safe zone thing.
                {
                    VectorList_01.Add(new Vector3(-2954.219f, 2167.244f, 40.16458f));
                    VectorList_01.Add(new Vector3(-2968.396f, 2119.992f, 41.1056f));
                }

                int iRanMid = FindRandom(27, 1, 11);
                if (iRanMid == 1)
                {
                    VectorList_02.Add(new Vector3(-3023.628f, 81.30469f, 11.60812f));
                    VectorList_01.Add(new Vector3(-3017.194f, 92.83518f, 11.14902f));
                    VectorList_01.Add(new Vector3(-3023.84f, 158.7286f, 15.13305f));
                }
                else if (iRanMid == 2)
                {
                    VectorList_02.Add(new Vector3(-3039.551f, 589.3835f, 7.908935f));
                    VectorList_01.Add(new Vector3(-3031.718f, 592.6396f, 7.234287f));
                    VectorList_01.Add(new Vector3(-3051.739f, 648.9286f, 8.024443f));
                }
                else if (iRanMid == 3)
                {
                    VectorList_02.Add(new Vector3(-2965.294f, 483.0129f, 15.7068f));
                    VectorList_01.Add(new Vector3(-2974.928f, 480.5086f, 14.78557f));
                    VectorList_01.Add(new Vector3(-2984.725f, 408.2559f, 14.46988f));
                }
                else if (iRanMid == 4)
                {
                    VectorList_02.Add(new Vector3(-2972.692f, 390.6443f, 15.05512f));
                    VectorList_01.Add(new Vector3(-2981.137f, 391.2685f, 14.40238f));
                    VectorList_01.Add(new Vector3(-2993.822f, 338.7894f, 14.12743f));
                }
                else if (iRanMid == 5)
                {
                    VectorList_02.Add(new Vector3(-3240.85f, 1003.79f, 12.83072f));
                    VectorList_01.Add(new Vector3(-3234.54f, 1003.532f, 11.81621f));
                    VectorList_01.Add(new Vector3(-3213.248f, 1106.623f, 9.898706f));
                }
                else if (iRanMid == 6)
                {
                    VectorList_02.Add(new Vector3(-3169.013f, 1074.34f, 20.82919f));
                    VectorList_01.Add(new Vector3(-3157.267f, 1073.005f, 20.21522f));
                    VectorList_01.Add(new Vector3(-3115.631f, 1136.303f, 19.94344f));
                }
                else if (iRanMid == 7)
                {
                    VectorList_02.Add(new Vector3(-1823.114f, 788.9677f, 138.1927f));
                    VectorList_01.Add(new Vector3(-1807.822f, 783.0052f, 136.9682f));
                    VectorList_01.Add(new Vector3(-1764.408f, 801.2717f, 139.7294f));
                }
                else if (iRanMid == 8)
                {
                    VectorList_02.Add(new Vector3(-2289.872f, 361.6877f, 174.6018f));
                    VectorList_01.Add(new Vector3(-2296.743f, 376.432f, 174.0022f));
                    VectorList_01.Add(new Vector3(-2311.907f, 416.1378f, 174.0021f));
                }
                else if (iRanMid == 9)
                {
                    VectorList_02.Add(new Vector3(-1096.334f, 2706.922f, 19.11935f));
                    VectorList_01.Add(new Vector3(-1097.656f, 2693.289f, 19.14252f));
                    VectorList_01.Add(new Vector3(-1041.632f, 2727.878f, 22.51594f));
                }
                else if (iRanMid == 10)
                {
                    VectorList_02.Add(new Vector3(-1113.655f, 2691.379f, 18.55425f));
                    VectorList_01.Add(new Vector3(-1097.656f, 2693.289f, 19.14252f));
                    VectorList_01.Add(new Vector3(-1041.632f, 2727.878f, 22.51594f));
                }
                else
                {
                    VectorList_02.Add(new Vector3(-1576.248f, 2103.661f, 67.65606f));
                    VectorList_01.Add(new Vector3(-1572.975f, 2100.486f, 67.69952f));
                    VectorList_01.Add(new Vector3(-1541.537f, 2150.371f, 54.83641f));
                }
            }
            else if (iLocationX == 4)
            {
                VectorList_01.Clear();
                VectorList_02.Clear();
                if (iMissionVar_01 == 1)//npc travel to althoraties--fib/etc
                {
                    VectorList_01.Add(new Vector3(826.7388f, -1290.302f, 28.24066f));
                    VectorList_01.Add(new Vector3(806.112f, -1290.233f, 26.31686f));
                }
                else if (iMissionVar_01 == 2)//npc travel to blow up spot
                {
                    int iRanEnd = RandInt(1, 5);
                    if (iRanEnd == 1)
                        VectorList_01.Add(new Vector3(2280.166f, 2002.796f, 132.2157f));
                    else if (iRanEnd == 2)
                        VectorList_01.Add(new Vector3(2778.472f, -713.0547f, 5.608036f));
                    else if (iRanEnd == 3)
                        VectorList_01.Add(new Vector3(709.0997f, -290.3679f, 59.1889f));
                    else if (iRanEnd == 4)
                        VectorList_01.Add(new Vector3(1198.236f, -1066.468f, 41.19764f));
                    else
                        VectorList_01.Add(new Vector3(1371.678f, -747.1602f, 67.19487f));
                }
                else if (iMissionVar_01 == 3)//ambush player
                {
                    int iRanEnd = RandInt(1, 5);
                    if (iRanEnd == 1)
                    {
                        VectorList_01.Add(new Vector3(2736.188f, 1548.928f, 32.5069f));
                        VectorList_01.Add(new Vector3(2730.232f, 1529.587f, 32.50654f));
                        VectorList_01.Add(new Vector3(2719.819f, 1534.225f, 24.5007f));
                        VectorList_01.Add(new Vector3(2744.08f, 1551.935f, 24.50095f));
                        VectorList_01.Add(new Vector3(2740.117f, 1566.393f, 32.5075f));
                        VectorList_01.Add(new Vector3(2742.157f, 1566.531f, 24.50095f));
                        VectorList_01.Add(new Vector3(2693.872f, 1559.927f, 24.54244f));
                    }
                    else if (iRanEnd == 2)
                    {
                        VectorList_01.Add(new Vector3(2357.994f, 2607.385f, 46.51448f));
                        VectorList_01.Add(new Vector3(2351.258f, 2611.903f, 46.66764f));
                        VectorList_01.Add(new Vector3(2356.281f, 2621.718f, 46.66764f));
                        VectorList_01.Add(new Vector3(2380.117f, 2617.933f, 46.65619f));
                    }
                    else if (iRanEnd == 3)
                    {
                        VectorList_01.Add(new Vector3(1154.625f, -393.3374f, 72.85555f));
                        VectorList_01.Add(new Vector3(1146.096f, -407.4189f, 67.28852f));
                        VectorList_01.Add(new Vector3(1132.047f, -394.3004f, 67.2338f));
                        VectorList_01.Add(new Vector3(1135.685f, -381.2762f, 67.09464f));
                        VectorList_01.Add(new Vector3(1145.254f, -380.4049f, 67.04916f));
                    }
                    else if (iRanEnd == 4)
                    {
                        VectorList_01.Add(new Vector3(1139.505f, 89.88462f, 80.89087f));
                        VectorList_01.Add(new Vector3(1114.042f, 83.56051f, 80.89034f));
                        VectorList_01.Add(new Vector3(1103.433f, 74.87099f, 80.89034f));
                        VectorList_01.Add(new Vector3(1103.008f, 66.36649f, 80.89034f));
                        VectorList_01.Add(new Vector3(1136.152f, 60.93471f, 80.75613f));
                    }
                    else
                    {
                        VectorList_01.Add(new Vector3(995.9102f, -105.3168f, 74.09823f));
                        VectorList_01.Add(new Vector3(984.004f, -126.2193f, 73.99069f));
                        VectorList_01.Add(new Vector3(969.9445f, -110.1391f, 80.1138f));
                        VectorList_01.Add(new Vector3(972.4277f, -90.44528f, 74.35313f));
                        VectorList_01.Add(new Vector3(944.2719f, -122.1368f, 74.3932f));
                        VectorList_01.Add(new Vector3(976.4417f, -148.78f, 74.24051f));
                        VectorList_01.Add(new Vector3(964.5579f, -133.1566f, 74.3485f));
                    }
                }
                else if (iMissionVar_01 == 4)//sell the car
                {
                    VectorList_01.Add(new Vector3(1120.84f, -785.0795f, 56.72751f));
                    VectorList_01.Add(new Vector3(1130.572f, -775.5194f, 57.60971f));
                }
                else if (iMissionVar_01 == 5)// car goes to heli safe zone thing.
                {
                    VectorList_01.Add(new Vector3(1100.2f, -883.7745f, 48.78764f));
                    VectorList_01.Add(new Vector3(1113.32f, -857.6119f, 52.59922f));
                }

                int iRanMid = FindRandom(28, 1, 9);
                if (iRanMid == 1)
                {
                    VectorList_02.Add(new Vector3(2558.26f, 385.7349f, 108.6229f));
                    VectorList_01.Add(new Vector3(2565.313f, 385.7251f, 107.7566f));
                    VectorList_01.Add(new Vector3(2561.809f, 438.3223f, 107.7476f));
                }
                else if (iRanMid == 2)
                {
                    VectorList_02.Add(new Vector3(915.132f, -302.7374f, 65.63821f));
                    VectorList_01.Add(new Vector3(915.5397f, -322.9527f, 65.21774f));
                    VectorList_01.Add(new Vector3(975.765f, -264.062f, 66.41336f));
                }
                else if (iRanMid == 3)
                {
                    VectorList_02.Add(new Vector3(1140.036f, -980.8665f, 46.42763f));
                    VectorList_01.Add(new Vector3(1148.456f, -979.1394f, 45.51437f));
                    VectorList_01.Add(new Vector3(1149.726f, -929.6285f, 48.95156f));
                }
                else if (iRanMid == 4)
                {
                    VectorList_02.Add(new Vector3(1140.35f, -777.0135f, 57.59868f));
                    VectorList_01.Add(new Vector3(1147.356f, -766.6075f, 56.82197f));
                    VectorList_01.Add(new Vector3(1096.718f, -762.7686f, 57.0197f));
                }
                else if (iRanMid == 5)
                {
                    VectorList_02.Add(new Vector3(1148.3f, -643.3685f, 56.75234f));
                    VectorList_01.Add(new Vector3(1171.921f, -638.9775f, 61.83797f));
                    VectorList_01.Add(new Vector3(1168.966f, -581.2392f, 63.57932f));
                }
                else if (iRanMid == 6)
                {
                    VectorList_02.Add(new Vector3(1208.514f, -470.74f, 66.20801f));
                    VectorList_01.Add(new Vector3(1196.552f, -468.9954f, 65.4528f));
                    VectorList_01.Add(new Vector3(1188.679f, -496.7256f, 64.72223f));
                }
                else if (iRanMid == 7)
                {
                    VectorList_02.Add(new Vector3(1159.593f, -325.3616f, 69.20515f));
                    VectorList_01.Add(new Vector3(1161.269f, -337.5496f, 67.69138f));
                    VectorList_01.Add(new Vector3(1132.317f, -355.0282f, 66.31724f));
                }
                else if (iRanMid == 8)
                {
                    VectorList_02.Add(new Vector3(264.6922f, 1111.179f, 219.4086f));
                    VectorList_01.Add(new Vector3(272.2054f, 1119.912f, 219.4321f));
                    VectorList_01.Add(new Vector3(247.1488f, 1203.263f, 227.7251f));
                }
                else
                {
                    VectorList_02.Add(new Vector3(-414.2745f, 1164.385f, 325.8295f));
                    VectorList_01.Add(new Vector3(-415.3402f, 1177.515f, 325.368f));
                    VectorList_01.Add(new Vector3(-448.1671f, 1191.971f, 325.4735f));
                }
            }
            else if (iLocationX == 5)
            {
                VectorList_01.Clear();
                VectorList_02.Clear();
                if (iMissionVar_01 == 1)//npc travel to althoraties--fib/etc
                {
                    VectorList_01.Add(new Vector3(1856.081f, 3682.657f, 34.26738f));
                    VectorList_01.Add(new Vector3(1865.972f, 3673.243f, 33.81769f));
                }
                else if (iMissionVar_01 == 2)//npc travel to blow up spot
                {
                    int iRanEnd = RandInt(1, 10);
                    if (iRanEnd == 1)
                        VectorList_01.Add(new Vector3(1108.477f, 3403.804f, 33.55983f));
                    else if (iRanEnd == 2)
                        VectorList_01.Add(new Vector3(2050.62f, 3934.335f, 33.08924f));
                    else if (iRanEnd == 3)
                        VectorList_01.Add(new Vector3(377.3796f, 3605.99f, 32.98812f));
                    else if (iRanEnd == 4)
                        VectorList_01.Add(new Vector3(1762.063f, 3056.42f, 61.17683f));
                    else if (iRanEnd == 5)
                        VectorList_01.Add(new Vector3(754.2726f, 2563.917f, 75.38659f));
                    else if (iRanEnd == 6)
                        VectorList_01.Add(new Vector3(780.9742f, 2852.612f, 56.71167f));
                    else if (iRanEnd == 7)
                        VectorList_01.Add(new Vector3(381.162f, 4436.018f, 62.16729f));
                    else if (iRanEnd == 8)
                        VectorList_01.Add(new Vector3(2288.722f, 5095.484f, 48.42321f));
                    else if (iRanEnd == 9)
                        VectorList_01.Add(new Vector3(3322.251f, 5443.404f, 16.94511f));
                    else
                        VectorList_01.Add(new Vector3(2482.423f, 3397.792f, 49.97121f));
                }
                else if (iMissionVar_01 == 3)//ambush player
                {
                    int iRanEnd = RandInt(1, 10);
                    if (iRanEnd == 1)
                    {
                        VectorList_01.Add(new Vector3(1027.707f, 2435.173f, 49.56542f));
                        VectorList_01.Add(new Vector3(1027.986f, 2449.356f, 49.56542f));
                        VectorList_01.Add(new Vector3(1021.449f, 2460.057f, 49.56542f));
                        VectorList_01.Add(new Vector3(1009.09f, 2458.269f, 49.56554f));
                        VectorList_01.Add(new Vector3(1014.779f, 2442.407f, 43.97125f));
                    }
                    else if (iRanEnd == 2)
                    {
                        VectorList_01.Add(new Vector3(407.5113f, 2962.585f, 41.79216f));
                        VectorList_01.Add(new Vector3(411.2284f, 2967.025f, 41.87529f));
                        VectorList_01.Add(new Vector3(430.9095f, 2996.549f, 41.32463f));
                        VectorList_01.Add(new Vector3(374.102f, 2977.123f, 41.00305f));
                        VectorList_01.Add(new Vector3(394.9966f, 2982.83f, 40.35896f));
                    }
                    else if (iRanEnd == 3)
                    {
                        VectorList_01.Add(new Vector3(173.2763f, 2794.865f, 49.80713f));
                        VectorList_01.Add(new Vector3(176.9924f, 2778.042f, 46.07818f));
                        VectorList_01.Add(new Vector3(204.3632f, 2774.66f, 45.65338f));
                        VectorList_01.Add(new Vector3(214.0398f, 2774.114f, 45.65528f));
                        VectorList_01.Add(new Vector3(194.2831f, 2792.18f, 45.12713f));
                    }
                    else if (iRanEnd == 4)
                    {
                        VectorList_01.Add(new Vector3(1587.646f, 3607.843f, 42.11666f));
                        VectorList_01.Add(new Vector3(1591.415f, 3610.72f, 38.73139f));
                        VectorList_01.Add(new Vector3(1579.745f, 3615.354f, 38.7752f));
                        VectorList_01.Add(new Vector3(1578.052f, 3604.84f, 38.74046f));
                        VectorList_01.Add(new Vector3(1595.535f, 3598.655f, 35.43479f));
                        VectorList_01.Add(new Vector3(1603.089f, 3606.787f, 34.61742f));
                    }
                    else if (iRanEnd == 5)
                    {
                        VectorList_01.Add(new Vector3(1539.111f, 3795.603f, 38.17743f));
                        VectorList_01.Add(new Vector3(1557.168f, 3807.591f, 33.44397f));
                        VectorList_01.Add(new Vector3(1545.757f, 3801.669f, 33.42204f));
                        VectorList_01.Add(new Vector3(1550.309f, 3801.84f, 34.25225f));
                        VectorList_01.Add(new Vector3(1564.409f, 3795.103f, 33.5909f));
                    }
                    else if (iRanEnd == 6)
                    {
                        VectorList_01.Add(new Vector3(2268.36f, 4877.315f, 40.8889f));
                        VectorList_01.Add(new Vector3(2276.772f, 4870.61f, 40.96036f));
                        VectorList_01.Add(new Vector3(2291.448f, 4875.987f, 41.80824f));
                        VectorList_01.Add(new Vector3(2299.679f, 4876.243f, 41.80824f));
                        VectorList_01.Add(new Vector3(2320.396f, 4901.738f, 41.80821f));
                        VectorList_01.Add(new Vector3(2299.758f, 4899.009f, 40.7242f));
                    }
                    else if (iRanEnd == 7)
                    {
                        VectorList_01.Add(new Vector3(1657.649f, 4820.704f, 41.98249f));
                        VectorList_01.Add(new Vector3(1645.117f, 4839.243f, 42.02917f));
                        VectorList_01.Add(new Vector3(1642.364f, 4858.191f, 42.01729f));
                        VectorList_01.Add(new Vector3(1642.198f, 4849.808f, 45.47571f));
                        VectorList_01.Add(new Vector3(1645.205f, 4825.659f, 41.47425f));
                    }
                    else if (iRanEnd == 8)
                    {
                        VectorList_01.Add(new Vector3(1306.21f, 4347.69f, 41.32056f));
                        VectorList_01.Add(new Vector3(1342.688f, 4357.353f, 44.36367f));
                        VectorList_01.Add(new Vector3(1353.405f, 4339.191f, 38.57713f));
                        VectorList_01.Add(new Vector3(1339.785f, 4320.96f, 38.00051f));
                        VectorList_01.Add(new Vector3(1300.407f, 4309.272f, 37.59229f));
                        VectorList_01.Add(new Vector3(1320.972f, 4303.334f, 37.89163f));
                        VectorList_01.Add(new Vector3(1317.442f, 4330.553f, 37.66453f));
                    }
                    else if (iRanEnd == 9)
                    {
                        VectorList_01.Add(new Vector3(45.82893f, 3719.364f, 39.69672f));
                        VectorList_01.Add(new Vector3(58.60051f, 3692.243f, 39.92076f));
                        VectorList_01.Add(new Vector3(48.95095f, 3682.659f, 39.73145f));
                        VectorList_01.Add(new Vector3(5.152738f, 3698.356f, 39.55355f));
                        VectorList_01.Add(new Vector3(11.45968f, 3712.728f, 39.60435f));
                        VectorList_01.Add(new Vector3(29.00184f, 3715.389f, 39.1848f));
                    }
                    else
                    {
                        VectorList_01.Add(new Vector3(2365.323f, 3155.951f, 48.20874f));
                        VectorList_01.Add(new Vector3(2339.775f, 3125.729f, 48.20871f));
                        VectorList_01.Add(new Vector3(2352.162f, 3116.47f, 48.20871f));
                        VectorList_01.Add(new Vector3(2360.49f, 3128.69f, 48.20871f));
                        VectorList_01.Add(new Vector3(2373.907f, 3122.939f, 47.55207f));
                    }
                }
                else if (iMissionVar_01 == 4)//sell the car
                {
                    VectorList_01.Add(new Vector3(258.5934f, 2577.703f, 43.62426f));
                    VectorList_01.Add(new Vector3(266.1903f, 2599.558f, 44.74001f));
                }
                else if (iMissionVar_01 == 5)// car goes to heli safe zone thing.
                {
                    VectorList_01.Add(new Vector3(1029.049f, 3584.657f, 31.52591f));
                    VectorList_01.Add(new Vector3(1018.097f, 3621.509f, 32.06242f));
                }

                int iRanMid = FindRandom(29, 1, 14);
                if (iRanMid == 1)
                {
                    VectorList_02.Add(new Vector3(1933.079f, 3726.348f, 32.84442f));
                    VectorList_01.Add(new Vector3(1939.689f, 3718.473f, 31.62953f));
                    VectorList_01.Add(new Vector3(1938.509f, 3743.054f, 31.63459f));
                }
                else if (iRanMid == 2)
                {
                    VectorList_02.Add(new Vector3(1861.12f, 3749.396f, 33.04617f));
                    VectorList_01.Add(new Vector3(1851.967f, 3742.908f, 32.42038f));
                    VectorList_01.Add(new Vector3(1882.575f, 3745.844f, 32.02911f));
                }
                else if (iRanMid == 3)
                {
                    VectorList_02.Add(new Vector3(1698.635f, 3753.226f, 34.70535f));
                    VectorList_01.Add(new Vector3(1712.471f, 3758.034f, 33.43766f));
                    VectorList_01.Add(new Vector3(1713.685f, 3797.461f, 34.23224f));
                }
                else if (iRanMid == 4)
                {
                    VectorList_02.Add(new Vector3(1688.038f, 4820.677f, 42.07446f));
                    VectorList_01.Add(new Vector3(1678.884f, 4821.141f, 41.30297f));
                    VectorList_01.Add(new Vector3(1679.767f, 4781.978f, 41.27766f));
                }
                else if (iRanMid == 5)
                {
                    VectorList_02.Add(new Vector3(617.9573f, 2752.053f, 42.08813f));
                    VectorList_01.Add(new Vector3(620.6678f, 2735.253f, 41.34486f));
                    VectorList_01.Add(new Vector3(620.3091f, 2701.476f, 40.46325f));
                }
                else if (iRanMid == 6)
                {
                    VectorList_02.Add(new Vector3(544.3318f, 2671.773f, 42.1565f));
                    VectorList_01.Add(new Vector3(540.8783f, 2682.033f, 41.62656f));
                    VectorList_01.Add(new Vector3(520.9294f, 2683.099f, 41.9037f));
                }
                else if (iRanMid == 7)
                {
                    VectorList_02.Add(new Vector3(1394.043f, 3600.989f, 34.98092f));
                    VectorList_01.Add(new Vector3(1399.933f, 3591.951f, 34.19351f));
                    VectorList_01.Add(new Vector3(1431.433f, 3600.657f, 34.24733f));
                }
                else if (iRanMid == 8)
                {
                    VectorList_02.Add(new Vector3(1964.538f, 3741.424f, 32.34374f));
                    VectorList_01.Add(new Vector3(1970.567f, 3736.066f, 31.62642f));
                    VectorList_01.Add(new Vector3(2004.35f, 3752.087f, 31.7258f));
                }
                else if (iRanMid == 9)
                {
                    VectorList_02.Add(new Vector3(1699.717f, 4928.577f, 42.06368f));
                    VectorList_01.Add(new Vector3(1695.356f, 4935.955f, 41.38763f));
                    VectorList_01.Add(new Vector3(1665.608f, 4911.56f, 41.40209f));
                }
                else if (iRanMid == 10)
                {
                    VectorList_02.Add(new Vector3(2681.51f, 3283.092f, 55.24113f));
                    VectorList_01.Add(new Vector3(2688.923f, 3281.579f, 54.5511f));
                    VectorList_01.Add(new Vector3(2753.334f, 3349.12f, 55.46349f));
                }
                else if (iRanMid == 11)
                {
                    VectorList_02.Add(new Vector3(1989.972f, 3053.153f, 47.21529f));
                    VectorList_01.Add(new Vector3(1993.477f, 3063.049f, 46.35755f));
                    VectorList_01.Add(new Vector3(1950.738f, 3137.697f, 46.19405f));
                }
                else if (iRanMid == 12)
                {
                    VectorList_02.Add(new Vector3(1197.966f, 2704.411f, 38.2341f));
                    VectorList_01.Add(new Vector3(1184.5f, 2692.11f, 37.14613f));
                    VectorList_01.Add(new Vector3(1241.116f, 2684.684f, 36.91374f));
                }
                else if (iRanMid == 13)
                {
                    VectorList_02.Add(new Vector3(1166.357f, 2704.871f, 38.16949f));
                    VectorList_01.Add(new Vector3(1184.5f, 2692.11f, 37.14613f));
                    VectorList_01.Add(new Vector3(1241.116f, 2684.684f, 36.91374f));
                }
                else
                {
                    VectorList_02.Add(new Vector3(1175.296f, 2704.559f, 38.0978f));
                    VectorList_01.Add(new Vector3(1184.5f, 2692.11f, 37.14613f));
                    VectorList_01.Add(new Vector3(1241.116f, 2684.684f, 36.91374f));
                }
            }
            else
            {
                VectorList_01.Clear();
                VectorList_02.Clear();
                if (iMissionVar_01 == 1)//npc travel to althoraties--fib/etc
                {
                    VectorList_01.Add(new Vector3(-441.4881f, 6017.921f, 31.60883f));
                    VectorList_01.Add(new Vector3(-438.5785f, 6038.645f, 31.34055f));
                }
                else if (iMissionVar_01 == 2)//npc travel to blow up spot
                {
                    int iRanEnd = RandInt(1, 5);
                    if (iRanEnd == 1)
                        VectorList_01.Add(new Vector3(-1625.467f, 4745.729f, 52.33703f));
                    else if (iRanEnd == 2)
                        VectorList_01.Add(new Vector3(-719.379f, 5812.31f, 16.80513f));
                    else if (iRanEnd == 3)
                        VectorList_01.Add(new Vector3(-129.7749f, 6609.743f, 10.49038f));
                    else if (iRanEnd == 4)
                        VectorList_01.Add(new Vector3(257.5587f, 6933.455f, 8.108569f));
                    else
                        VectorList_01.Add(new Vector3(1603.805f, 6526.804f, 15.68663f));
                }
                else if (iMissionVar_01 == 3)//ambush player
                {
                    int iRanEnd = RandInt(1, 5);
                    if (iRanEnd == 1)
                    {
                        VectorList_01.Add(new Vector3(-699.522f, 5805.568f, 17.36731f));
                        VectorList_01.Add(new Vector3(-682.6395f, 5810.653f, 21.84249f));
                        VectorList_01.Add(new Vector3(-669.7758f, 5813.931f, 17.51829f));
                        VectorList_01.Add(new Vector3(-667.5911f, 5829.822f, 17.3313f));
                        VectorList_01.Add(new Vector3(-688.4876f, 5823.847f, 17.33291f));
                    }
                    else if (iRanEnd == 2)
                    {
                        VectorList_01.Add(new Vector3(-377.7809f, 6075.845f, 31.45531f));
                        VectorList_01.Add(new Vector3(-380.4823f, 6062.071f, 31.50013f));
                        VectorList_01.Add(new Vector3(-354.9041f, 6090.243f, 31.38692f));
                        VectorList_01.Add(new Vector3(-350.0206f, 6077.725f, 31.43814f));
                    }
                    else if (iRanEnd == 3)
                    {
                        VectorList_01.Add(new Vector3(401.3973f, 6473.691f, 29.16297f));
                        VectorList_01.Add(new Vector3(423.3479f, 6473.468f, 35.87312f));
                        VectorList_01.Add(new Vector3(426.7705f, 6477.21f, 28.79894f));
                        VectorList_01.Add(new Vector3(437.715f, 6501.934f, 28.81324f));
                        VectorList_01.Add(new Vector3(432.837f, 6501.687f, 28.78592f));
                        VectorList_01.Add(new Vector3(420.4396f, 6492.071f, 28.18608f));
                    }
                    else if (iRanEnd == 4)
                    {
                        VectorList_01.Add(new Vector3(1426.701f, 6566.481f, 16.16204f));
                        VectorList_01.Add(new Vector3(1465.058f, 6571.545f, 12.60599f));
                        VectorList_01.Add(new Vector3(1474.506f, 6550.378f, 13.98796f));
                        VectorList_01.Add(new Vector3(1472.12f, 6540.609f, 13.96069f));
                        VectorList_01.Add(new Vector3(1454.541f, 6549.437f, 14.87973f));
                    }
                    else
                    {
                        VectorList_01.Add(new Vector3(-824.7751f, 5418.944f, 34.2673f));
                        VectorList_01.Add(new Vector3(-827.1906f, 5399.262f, 34.56618f));
                        VectorList_01.Add(new Vector3(-823.722f, 5383.088f, 34.51685f));
                        VectorList_01.Add(new Vector3(-813.2783f, 5382.992f, 34.51685f));
                        VectorList_01.Add(new Vector3(-788.4846f, 5402.617f, 34.10927f));
                        VectorList_01.Add(new Vector3(-803.7128f, 5422.73f, 34.34464f));
                    }
                }
                else if (iMissionVar_01 == 4)//sell the car
                {
                    VectorList_01.Add(new Vector3(101.88f, 6634.28f, 30.43f));
                    VectorList_01.Add(new Vector3(122.8424f, 6628.6421f, 30.92f));
                }
                else if (iMissionVar_01 == 5)// car goes to heli safe zone thing.
                {
                    VectorList_01.Add(new Vector3(-563.5784f, 6176.025f, 6.705557f));
                    VectorList_01.Add(new Vector3(-546.8909f, 6179.143f, 6.584301f));
                }

                int iRanMid = FindRandom(30, 1, 13);
                if (iRanMid == 1)
                {
                    VectorList_02.Add(new Vector3(-701.1307f, 5805.21f, 17.33214f));
                    VectorList_01.Add(new Vector3(-701.0538f, 5815.281f, 16.50128f));
                    VectorList_01.Add(new Vector3(-728.2564f, 5764.872f, 17.65182f));
                }
                else if (iRanMid == 2)
                {
                    VectorList_02.Add(new Vector3(-757.4761f, 5589.087f, 36.70622f));
                    VectorList_01.Add(new Vector3(-776.839f, 5576.867f, 32.79653f));
                    VectorList_01.Add(new Vector3(-784.7336f, 5546.356f, 32.68147f));
                }
                else if (iRanMid == 3)
                {
                    VectorList_02.Add(new Vector3(-441.7554f, 6018.231f, 31.60533f));
                    VectorList_01.Add(new Vector3(-423.1526f, 6031.896f, 30.66116f));
                    VectorList_01.Add(new Vector3(-437.5349f, 6063.253f, 30.67015f));
                }
                else if (iRanMid == 4)
                {
                    VectorList_02.Add(new Vector3(-335.7032f, 6150.397f, 31.48905f));
                    VectorList_01.Add(new Vector3(-344.0456f, 6148.367f, 30.79785f));
                    VectorList_01.Add(new Vector3(-374.3185f, 6153.798f, 30.62915f));
                }
                else if (iRanMid == 5)
                {
                    VectorList_02.Add(new Vector3(-325.9989f, 6076.614f, 31.45477f));
                    VectorList_01.Add(new Vector3(-315.6501f, 6071.485f, 30.50856f));
                    VectorList_01.Add(new Vector3(-290.5639f, 6093.178f, 30.50189f));
                }
                else if (iRanMid == 6)
                {
                    VectorList_02.Add(new Vector3(-290.234f, 6198.825f, 31.50152f));
                    VectorList_01.Add(new Vector3(-287.1915f, 6207.178f, 30.71095f));
                    VectorList_01.Add(new Vector3(-320.5128f, 6244.212f, 30.81025f));
                }
                else if (iRanMid == 7)
                {
                    VectorList_02.Add(new Vector3(-280.6788f, 6231.598f, 31.69551f));
                    VectorList_01.Add(new Vector3(-287.9967f, 6238.822f, 30.63232f));
                    VectorList_01.Add(new Vector3(-283.2607f, 6213.795f, 30.77818f));
                }
                else if (iRanMid == 8)
                {
                    VectorList_02.Add(new Vector3(-110.1597f, 6463.812f, 31.62672f));
                    VectorList_01.Add(new Vector3(-116.1263f, 6456.284f, 30.75365f));
                    VectorList_01.Add(new Vector3(-112.3067f, 6415.033f, 30.67347f));
                }
                else if (iRanMid == 9)
                {
                    VectorList_02.Add(new Vector3(0.003763938f, 6515.981f, 31.88934f));
                    VectorList_01.Add(new Vector3(-6.885899f, 6520.164f, 30.58564f));
                    VectorList_01.Add(new Vector3(-25.514f, 6505.981f, 30.68832f));
                }
                else if (iRanMid == 10)
                {
                    VectorList_02.Add(new Vector3(104.1556f, 6615.081f, 32.43527f));
                    VectorList_01.Add(new Vector3(124.8537f, 6610.755f, 31.16878f));
                    VectorList_01.Add(new Vector3(224.9221f, 6572.477f, 31.09827f));
                }
                else if (iRanMid == 11)
                {
                    VectorList_02.Add(new Vector3(1469.311f, 6541.158f, 14.68089f));
                    VectorList_01.Add(new Vector3(1455.938f, 6547.631f, 14.16645f));
                    VectorList_01.Add(new Vector3(1429.994f, 6517.838f, 18.19917f));
                }
                else if (iRanMid == 12)
                {
                    VectorList_02.Add(new Vector3(1590.588f, 6448.094f, 25.31714f));
                    VectorList_01.Add(new Vector3(1586.027f, 6441.043f, 24.37673f));
                    VectorList_01.Add(new Vector3(1612.88f, 6411.742f, 26.3919f));
                }
                else
                {
                    VectorList_02.Add(new Vector3(1731.658f, 6412.44f, 35.03722f));
                    VectorList_01.Add(new Vector3(1722.062f, 6402.163f, 33.52321f));
                    VectorList_01.Add(new Vector3(1820.794f, 6365.858f, 39.26671f));
                }
            }
            fMission_01 = 0.00f;
            vGetaway = World.GetNextPositionOnStreet(VectorList_02[0].Around(550.00f));
            while (vGetaway.DistanceTo(VectorList_02[0]) < 150.00f || World.GetZoneNameLabel(vGetaway) == "AIRP" || World.GetZoneNameLabel(vGetaway) == "ARMYB" || World.GetZoneNameLabel(vGetaway) == "JAIL")
                vGetaway = World.GetNextPositionOnStreet(VectorList_02[0].Around(550.00f));
            vGetaway.Z = World.GetGroundHeight(vGetaway);
            AddTarget(vGetaway, true, true, 120.00f, false);
            iCanDrive = 1073742652;
            iMissionVar_03 = VectorList_01.Count - 1;
            iTime_01.Add(0);//                  0
            iTime_01.Add(0);//                  1
            iTime_01.Add(0);//                  2
            iTime_01.Add(0);//                  3
            iTime_01.Add(0);//                  4
            iTime_01.Add(0);//    iTimeTaken    5
            iTime_01.Add(0);//    iDogTimer     6

            BtSlideBar.BackgroundColor = Color.Black;

            BeOnOff.Add(false); //bFollowToo    0
            BeOnOff.Add(false); //bDoorEnter    1
            BeOnOff.Add(false); //bNocarz       2
            BeOnOff.Add(false); //bSpooky       3
            BeOnOff.Add(false); //bOnWheels     4
            BeOnOff.Add(false); //bFlashWarn    5
            BeOnOff.Add(false); //bPostPick     6
            BeOnOff.Add(false); //bTheyKnowU    7
            BeOnOff.Add(false); //bOntheHill    8
            BeOnOff.Add(false); //bJustSlowdown 9
            BeOnOff.Add(false); //bDamages      10 
            BeOnOff.Add(true);  //bAliens       11

            bOnTheJob = true;
        }
        private void FireDept()
        {
            if (!bReFire)
            {
                BigMessageThread.MessageInstance.ShowSimpleShard(sAltLang[8], "", 5000);
                VTBTimerPool.Add(ttTextBar_01);
                VTBTimerPool.Add(BtSlideBar);
                BtSlideBar.Label = "" + sAltLang[299] + "";
                ttTextBar_01.Label = "" + sAltLang[290] + "";
            }
            VectorList_01.Clear();
            VectorList_02.Clear();
            sList_01.Clear();
            BeOnOff.Clear();

            iMissionVar_01 = FindRandom(9, 1, 5);

            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("FireDept, iMissionVar_01 == " + iMissionVar_01, tEx);

            if (iLocationX == 1)
            {
                vFuMiss = new Vector3(212.9583f, -1625.14f, 28.66316f);

                vGetaway = new Vector3(216.1825f, -1639.169f, 29.6262f);
                fGetDir = 320.04f;

                if (iMissionVar_01 == 1)
                {
                    VectorList_01.Add(new Vector3(-994.2792f, -2520.325f, 13.41739f));
                    VectorList_01.Add(new Vector3(1165.043f, -3222.609f, 5.385954f));
                    VectorList_01.Add(new Vector3(933.6134f, -2081.24f, 30.13177f));
                    VectorList_01.Add(new Vector3(101.8374f, -1864.978f, 23.94473f));
                    VectorList_01.Add(new Vector3(68.45313f, -1497.742f, 28.89089f));
                    VectorList_01.Add(new Vector3(783.5147f, -1000.46f, 25.71556f));
                    VectorList_01.Add(new Vector3(464.176f, -1825.874f, 27.61972f));
                    VectorList_01.Add(new Vector3(523.4406f, -2984.174f, 5.628889f));
                    VectorList_01.Add(new Vector3(-172.0261f, -1920.919f, 24.72114f));
                    VectorList_01.Add(new Vector3(-108.2467f, -1354.8f, 28.97163f));
                }                //Put out fire vehicle
                else if (iMissionVar_01 == 2)
                {
                    VectorList_01.Add(new Vector3(-11.86616f, -1442.035f, 34.39618f));
                    VectorList_01.Add(new Vector3(130.4162f, -1538.652f, 35.24918f));
                    VectorList_01.Add(new Vector3(322.2232f, -1857.563f, 31.42738f));
                    VectorList_01.Add(new Vector3(116.4408f, -1962.625f, 24.9567f));
                    VectorList_01.Add(new Vector3(-564.8655f, -1815.113f, 28.62768f));
                    VectorList_01.Add(new Vector3(867.5987f, -3186.705f, 11.90496f));
                    VectorList_01.Add(new Vector3(1067.069f, -2242.364f, 39.09667f));
                    VectorList_01.Add(new Vector3(986.0532f, -1938.056f, 36.14178f));
                    VectorList_01.Add(new Vector3(1279.941f, -1720.043f, 57.64454f));
                    VectorList_01.Add(new Vector3(1446.823f, -1659.761f, 71.77194f));
                }           //Put out fire house
                else if (iMissionVar_01 == 3)
                {
                    VectorList_01.Add(new Vector3(168.2279f, -1469.199f, 29.14101f));
                    VectorList_01.Add(new Vector3(-32.64261f, -1301.234f, 29.18018f));
                    VectorList_01.Add(new Vector3(-183.6499f, -1292.177f, 31.29598f));
                    VectorList_01.Add(new Vector3(-347.7736f, -1346.667f, 31.27607f));
                    VectorList_01.Add(new Vector3(106.7457f, -1816.44f, 26.54376f));
                    VectorList_01.Add(new Vector3(146.9498f, -2251.595f, 6.100518f));
                    VectorList_01.Add(new Vector3(845.4675f, -2182.293f, 30.30516f));
                    VectorList_01.Add(new Vector3(957.0235f, -1574.832f, 30.50766f));
                    VectorList_01.Add(new Vector3(825.36f, -1065.384f, 28.01146f));
                    VectorList_01.Add(new Vector3(-889.3368f, -2377.061f, 13.94446f));
                }           //Put out fire Weeley bin
                else if (iMissionVar_01 == 4)
                {
                    VectorList_01.Add(new Vector3(1291.679f, -3297.902f, 29.66921f));
                    VectorList_01.Add(new Vector3(1291.644f, -3097.831f, 29.67135f));
                    VectorList_01.Add(new Vector3(1215.655f, -3039.276f, 29.67194f));
                    VectorList_01.Add(new Vector3(1241.651f, -2917.094f, 29.67264f));
                    VectorList_01.Add(new Vector3(1167.677f, -2971.612f, 26.50655f));
                    VectorList_01.Add(new Vector3(1168.145f, -3024.043f, 26.48057f));
                    VectorList_01.Add(new Vector3(1132.854f, -3082.943f, 26.49507f));
                    VectorList_01.Add(new Vector3(1110.612f, -3079.114f, 26.47818f));
                    VectorList_01.Add(new Vector3(1094.553f, -3083.247f, 26.47987f));
                    VectorList_01.Add(new Vector3(1111.938f, -3096.632f, 26.47397f));
                    VectorList_01.Add(new Vector3(1143.127f, -3141.438f, 26.51587f));
                    VectorList_01.Add(new Vector3(1138.888f, -3186.341f, 26.50941f));
                    VectorList_01.Add(new Vector3(1114.2f, -3185.723f, 26.47932f));
                    VectorList_01.Add(new Vector3(1096.056f, -3191.813f, 26.49187f));
                    VectorList_01.Add(new Vector3(1116.719f, -3201.176f, 26.49913f));
                    VectorList_01.Add(new Vector3(1086.128f, -3251.504f, 26.52527f));
                    VectorList_01.Add(new Vector3(990.0725f, -3251.274f, 26.51177f));
                    VectorList_01.Add(new Vector3(936.9215f, -3249.661f, 26.49739f));
                    VectorList_01.Add(new Vector3(905.3882f, -3277.524f, 26.52032f));
                    VectorList_01.Add(new Vector3(845.5408f, -3077.952f, 26.53317f));
                    VectorList_01.Add(new Vector3(863.0325f, -3046.677f, 26.43798f));
                    VectorList_01.Add(new Vector3(841.6652f, -3033.391f, 26.3549f));
                    VectorList_01.Add(new Vector3(861.61f, -3027.682f, 26.36877f));
                    VectorList_01.Add(new Vector3(1052.315f, -3024.135f, 26.47037f));
                    VectorList_01.Add(new Vector3(956.3048f, -2971.236f, 26.41847f));
                    VectorList_01.Add(new Vector3(799.3505f, -2996.139f, 28.38865f));
                    VectorList_01.Add(new Vector3(889.3361f, -2903.626f, 72.79205f));
                    VectorList_01.Add(new Vector3(936.29f, -2902.583f, 72.7716f));
                    VectorList_01.Add(new Vector3(979.8538f, -2902.635f, 72.76764f));
                    VectorList_01.Add(new Vector3(1098.602f, -2902.345f, 72.77314f));
                    VectorList_01.Add(new Vector3(1156.782f, -2902.367f, 72.77711f));
                    VectorList_01.Add(new Vector3(1011.328f, -2893.969f, 39.15147f));

                    VectorList_01.Add(new Vector3(572.2553f, -2995.879f, 26.48474f));
                    VectorList_01.Add(new Vector3(575.5235f, -2962.41f, 26.4988f));
                    VectorList_01.Add(new Vector3(473.9604f, -2995.885f, 26.44924f));
                    VectorList_01.Add(new Vector3(460.8048f, -3025.328f, 26.67603f));
                    VectorList_01.Add(new Vector3(554.0502f, -2934.709f, 29.73587f));
                    VectorList_01.Add(new Vector3(502.6572f, -2935.065f, 29.74292f));
                    VectorList_01.Add(new Vector3(455.2807f, -2935.065f, 29.76116f));
                    VectorList_01.Add(new Vector3(523.7552f, -2828.174f, 29.78361f));
                    VectorList_01.Add(new Vector3(338.5193f, -2794.75f, 45.21409f));
                    VectorList_01.Add(new Vector3(338.2984f, -2722.844f, 45.64907f));
                    VectorList_01.Add(new Vector3(224.4585f, -3158.101f, 65.68797f));
                    VectorList_01.Add(new Vector3(-429.4379f, -2667.802f, 29.7424f));
                    VectorList_01.Add(new Vector3(-342.6355f, -2580.616f, 29.73811f));
                    VectorList_01.Add(new Vector3(-321.0689f, -2534.835f, 29.70767f));
                    VectorList_01.Add(new Vector3(-433.2297f, -2441.131f, 29.75829f));
                    VectorList_01.Add(new Vector3(-1052.874f, -1972.312f, 37.22268f));
                    VectorList_01.Add(new Vector3(-998.3769f, -2020.712f, 36.92905f));

                    VectorList_01.Add(new Vector3(872.421f, -2516.42f, 52.28575f));
                    VectorList_01.Add(new Vector3(802.9731f, -2330.71f, 62.09148f));
                    VectorList_01.Add(new Vector3(913.6607f, -1975.478f, 46.53942f));
                    VectorList_01.Add(new Vector3(1008.241f, -1980.163f, 56.52905f));
                    VectorList_01.Add(new Vector3(910.2383f, -1681.333f, 51.11866f));
                    VectorList_01.Add(new Vector3(961.2083f, -1628.596f, 59.52196f));
                    VectorList_01.Add(new Vector3(931.1068f, -941.4008f, 59.08935f));
                    VectorList_01.Add(new Vector3(703.6652f, -794.9267f, 49.39186f));
                    VectorList_01.Add(new Vector3(333.7029f, -1434.128f, 46.50799f));
                    VectorList_01.Add(new Vector3(-620.0131f, -1622.162f, 41.04713f));
                    VectorList_01.Add(new Vector3(62.32458f, -1744.744f, 47.69528f));
                    VectorList_01.Add(new Vector3(205.1359f, -1667.906f, 44.8237f));
                    VectorList_01.Add(new Vector3(-341.5273f, -1332.629f, 37.30111f));
                    VectorList_01.Add(new Vector3(-306.5232f, -1309.234f, 42.25992f));
                    VectorList_01.Add(new Vector3(-146.7952f, -1273.506f, 47.8866f));
                }           //save cat
                else
                {
                    VectorList_01.Add(new Vector3(-994.2792f, -2520.325f, 13.41739f));
                    VectorList_01.Add(new Vector3(1165.043f, -3222.609f, 5.385954f));
                    VectorList_01.Add(new Vector3(933.6134f, -2081.24f, 30.13177f));
                    VectorList_01.Add(new Vector3(101.8374f, -1864.978f, 23.94473f));
                    VectorList_01.Add(new Vector3(68.45313f, -1497.742f, 28.89089f));
                    VectorList_01.Add(new Vector3(783.5147f, -1000.46f, 25.71556f));
                    VectorList_01.Add(new Vector3(464.176f, -1825.874f, 27.61972f));
                    VectorList_01.Add(new Vector3(523.4406f, -2984.174f, 5.628889f));
                    VectorList_01.Add(new Vector3(-172.0261f, -1920.919f, 24.72114f));
                    VectorList_01.Add(new Vector3(-108.2467f, -1354.8f, 28.97163f));
                }                            //chase driver throwing molitovs
            }
            else if (iLocationX == 2)
            {
                vFuMiss = new Vector3(-610.9536f, -61.93935f, 41.14728f);

                vGetaway = new Vector3(-632.3837f, -71.35f, 40.5971f);
                fGetDir = 355.0277f;

                if (iMissionVar_01 == 1)
                {
                    VectorList_01.Add(new Vector3(-640.8735f, -838.8285f, 24.45141f));
                    VectorList_01.Add(new Vector3(-1058.591f, -1024.118f, 1.774962f));
                    VectorList_01.Add(new Vector3(-1153.756f, -1339.463f, 4.697246f));
                    VectorList_01.Add(new Vector3(-1226.06f, -433.3082f, 33.18565f));
                    VectorList_01.Add(new Vector3(-699.404f, -19.63133f, 37.53633f));
                    VectorList_01.Add(new Vector3(-212.2905f, 127.8813f, 69.16212f));
                    VectorList_01.Add(new Vector3(354.2812f, 134.1312f, 102.6729f));
                    VectorList_01.Add(new Vector3(222.583f, -215.2652f, 53.6492f));
                    VectorList_01.Add(new Vector3(166.6302f, -829.5413f, 30.7629f));
                    VectorList_01.Add(new Vector3(-179.5928f, -885.489f, 28.94018f));
                }                //Put out fire vehicle
                else if (iMissionVar_01 == 2)
                {
                    VectorList_01.Add(new Vector3(-1130.439f, -954.3047f, 6.63213f));
                    VectorList_01.Add(new Vector3(-1144.074f, -1473.395f, 10.58288f));
                    VectorList_01.Add(new Vector3(-1464.831f, -381.295f, 44.77815f));
                    VectorList_01.Add(new Vector3(-487.8067f, -17.98136f, 49.55106f));
                    VectorList_01.Add(new Vector3(209.8121f, -859.6545f, 35.29748f));
                    VectorList_01.Add(new Vector3(-297.6049f, -921.7738f, 35.95244f));
                    VectorList_01.Add(new Vector3(-375.4223f, 268.4404f, 89.9464f));
                    VectorList_01.Add(new Vector3(-56.02592f, 62.35524f, 78.56653f));
                    VectorList_01.Add(new Vector3(529.6868f, -157.3343f, 61.4922f));
                    VectorList_01.Add(new Vector3(111.7982f, -204.2706f, 58.97997f));
                }           //Put out fire house
                else if (iMissionVar_01 == 3)
                {
                    VectorList_01.Add(new Vector3(227.3719f, 103.3158f, 93.67694f));
                    VectorList_01.Add(new Vector3(317.3839f, 262.8306f, 104.5204f));
                    VectorList_01.Add(new Vector3(101.9639f, 156.3715f, 104.6742f));
                    VectorList_01.Add(new Vector3(31.23298f, -82.09966f, 61.31293f));
                    VectorList_01.Add(new Vector3(-461.1617f, 61.62276f, 58.63753f));
                    VectorList_01.Add(new Vector3(66.71404f, -840.2115f, 30.84228f));
                    VectorList_01.Add(new Vector3(-1174.17f, -1145.426f, 5.673794f));
                    VectorList_01.Add(new Vector3(-1411.269f, -642.275f, 28.67337f));
                    VectorList_01.Add(new Vector3(-586.1796f, -754.062f, 29.48705f));
                    VectorList_01.Add(new Vector3(360.4597f, -791.2961f, 29.28889f));
                }           //Put out fire Weeley bin
                else if (iMissionVar_01 == 4)
                {
                    VectorList_01.Add(new Vector3(476.3651f, -1106.596f, 43.07563f));
                    VectorList_01.Add(new Vector3(328.7866f, -1083.011f, 60.76027f));
                    VectorList_01.Add(new Vector3(256.9861f, -1076.209f, 46.91187f));
                    VectorList_01.Add(new Vector3(270.5477f, -1112.897f, 88.81468f));
                    VectorList_01.Add(new Vector3(179.7601f, -1064.802f, 77.54419f));
                    VectorList_01.Add(new Vector3(157.3224f, -1096.997f, 49.15595f));
                    VectorList_01.Add(new Vector3(132.3442f, -1037.749f, 57.79681f));
                    VectorList_01.Add(new Vector3(61.4061f, -1012.916f, 79.79873f));
                    VectorList_01.Add(new Vector3(-1.850229f, -1008.47f, 89.18895f));
                    VectorList_01.Add(new Vector3(-115.7957f, -1034.861f, 73.26388f));
                    VectorList_01.Add(new Vector3(-204.6024f, -1115.44f, 68.76134f));
                    VectorList_01.Add(new Vector3(-103.547f, -967.7562f, 296.4356f));
                    VectorList_01.Add(new Vector3(313.6559f, -1010.011f, 67.10087f));
                    VectorList_01.Add(new Vector3(264.6782f, -1018.069f, 61.64767f));
                    VectorList_01.Add(new Vector3(346.7058f, -934.6441f, 59.4067f));
                    VectorList_01.Add(new Vector3(431.1995f, -772.4921f, 44.52592f));
                    VectorList_01.Add(new Vector3(476.3756f, -738.4252f, 37.37005f));
                    VectorList_01.Add(new Vector3(306.2323f, -682.1669f, 48.12825f));
                    VectorList_01.Add(new Vector3(-498.1141f, -1013.848f, 52.47272f));
                    VectorList_01.Add(new Vector3(-449.9911f, -1079.527f, 69.3056f));
                    VectorList_01.Add(new Vector3(-461.5373f, -975.8892f, 69.39433f));
                    VectorList_01.Add(new Vector3(-465.2135f, -883.8008f, 47.97074f));
                    VectorList_01.Add(new Vector3(-551.9822f, -806.2833f, 46.43217f));
                    VectorList_01.Add(new Vector3(-671.0413f, -901.4896f, 38.62354f));
                    VectorList_01.Add(new Vector3(-899.9804f, -1165.958f, 32.75018f));
                    VectorList_01.Add(new Vector3(-1365.236f, -742.3692f, 41.67976f));
                    VectorList_01.Add(new Vector3(-1324.883f, -685.3486f, 38.04457f));
                    VectorList_01.Add(new Vector3(-1293.015f, -755.4059f, 36.87294f));
                    VectorList_01.Add(new Vector3(-1487.217f, -187.9391f, 60.9091f));
                    VectorList_01.Add(new Vector3(-739.6456f, -225.3004f, 48.51866f));
                    VectorList_01.Add(new Vector3(-679.4846f, -187.2408f, 48.88316f));
                    VectorList_01.Add(new Vector3(-564.4636f, -99.02267f, 58.41212f));
                    VectorList_01.Add(new Vector3(-333.0135f, -143.9479f, 60.44822f));
                    VectorList_01.Add(new Vector3(-624.4688f, 224.8623f, 91.86295f));
                    VectorList_01.Add(new Vector3(-603.1412f, 232.4911f, 119.1692f));
                    VectorList_01.Add(new Vector3(-664.2288f, 248.1217f, 157.3557f));
                    VectorList_01.Add(new Vector3(-289.968f, 41.43173f, 79.15368f));
                    VectorList_01.Add(new Vector3(-141.4185f, -150.1915f, 93.70238f));
                    VectorList_01.Add(new Vector3(40.54626f, 163.8204f, 126.2164f));
                    VectorList_01.Add(new Vector3(93.12859f, 194.084f, 121.7974f));
                    VectorList_01.Add(new Vector3(189.3964f, 226.2902f, 143.6603f));
                    VectorList_01.Add(new Vector3(253.8096f, 222.4066f, 151.6328f));
                    VectorList_01.Add(new Vector3(345.8929f, 216.2764f, 132.6844f));
                    VectorList_01.Add(new Vector3(222.7777f, 154.0685f, 142.1764f));
                    VectorList_01.Add(new Vector3(128.3252f, -347.8029f, 102.5362f));
                    VectorList_01.Add(new Vector3(89.05368f, -335.8458f, 75.55274f));
                    VectorList_01.Add(new Vector3(50.01502f, -396.4807f, 73.93193f));
                    VectorList_01.Add(new Vector3(29.59245f, -447.1072f, 73.96286f));
                    VectorList_01.Add(new Vector3(47.13122f, -460.3961f, 99.80698f));
                    VectorList_01.Add(new Vector3(251.4838f, -310.3005f, 67.67139f));
                }           //save cat
                else
                {
                    VectorList_01.Add(new Vector3(-640.8735f, -838.8285f, 24.45141f));
                    VectorList_01.Add(new Vector3(-1058.591f, -1024.118f, 1.774962f));
                    VectorList_01.Add(new Vector3(-1153.756f, -1339.463f, 4.697246f));
                    VectorList_01.Add(new Vector3(-1226.06f, -433.3082f, 33.18565f));
                    VectorList_01.Add(new Vector3(-699.404f, -19.63133f, 37.53633f));
                    VectorList_01.Add(new Vector3(-212.2905f, 127.8813f, 69.16212f));
                    VectorList_01.Add(new Vector3(354.2812f, 134.1312f, 102.6729f));
                    VectorList_01.Add(new Vector3(222.583f, -215.2652f, 53.6492f));
                    VectorList_01.Add(new Vector3(166.6302f, -829.5413f, 30.7629f));
                    VectorList_01.Add(new Vector3(-179.5928f, -885.489f, 28.94018f));
                }                            //chase driver throwing molitovs
            }
            else if (iLocationX == 3)//fort access
            {
                vFuMiss = new Vector3(-2079.348f, 2842.614f, 32.30162f);

                vGetaway = new Vector3(-2107.329f, 2844.5947f, 32.8784f);
                fGetDir = 28.8017f;

                if (iMissionVar_01 == 1)
                {
                    VectorList_01.Add(new Vector3(-2024.08f, -175.2686f, 26.76026f));
                    VectorList_01.Add(new Vector3(-2960.124f, 98.36689f, 13.35277f));
                    VectorList_01.Add(new Vector3(-2985.582f, 544.3261f, 16.4247f));
                    VectorList_01.Add(new Vector3(-3100.223f, 1191.346f, 19.91869f));
                    VectorList_01.Add(new Vector3(-2652.758f, 1501.169f, 118.0722f));
                    VectorList_01.Add(new Vector3(-1514.433f, 2126.713f, 55.75016f));
                    VectorList_01.Add(new Vector3(-1991.367f, 696.023f, 142.7182f));
                    VectorList_01.Add(new Vector3(-2304.964f, 410.1695f, 174.0543f));
                    VectorList_01.Add(new Vector3(-1567.98f, -173.0723f, 55.11384f));
                    VectorList_01.Add(new Vector3(-2709.916f, 2291.146f, 18.22017f));
                }                //Put out fire vehicle
                else if (iMissionVar_01 == 2)
                {
                    VectorList_01.Add(new Vector3(-1996.864f, 554.9059f, 115.5041f));
                    VectorList_01.Add(new Vector3(-3033.075f, 519.4292f, 10.65713f));
                    VectorList_01.Add(new Vector3(-3001.448f, 723.1372f, 32.48245f));
                    VectorList_01.Add(new Vector3(-3191.196f, 1205.117f, 12.83127f));
                    VectorList_01.Add(new Vector3(-1929.775f, 159.919f, 89.87039f));
                    VectorList_01.Add(new Vector3(-1506.466f, 1511.146f, 118.0221f));
                    VectorList_01.Add(new Vector3(-1918.871f, 1782.752f, 177.2037f));
                    VectorList_01.Add(new Vector3(-427.2083f, 1210.563f, 328.9536f));
                    VectorList_01.Add(new Vector3(-849.713f, 785.8577f, 195.3546f));
                    VectorList_01.Add(new Vector3(-667.9451f, 745.3073f, 178.6693f));
                }           //Put out fire house
                else if (iMissionVar_01 == 3)
                {
                    VectorList_01.Add(new Vector3(-1134.84f, 2692.777f, 18.80042f));
                    VectorList_01.Add(new Vector3(-3198.06f, 1058.967f, 20.86343f));
                    VectorList_01.Add(new Vector3(-2958.009f, 442.2449f, 15.26188f));
                    VectorList_01.Add(new Vector3(-1819.236f, 806.6959f, 138.6937f));
                    VectorList_01.Add(new Vector3(-1702.201f, -282.2467f, 51.88353f));
                    VectorList_01.Add(new Vector3(-2236.478f, -362.0002f, 13.31052f));
                    VectorList_01.Add(new Vector3(-3032.547f, 581.7611f, 7.802179f));
                    VectorList_01.Add(new Vector3(-2569.291f, 2333.144f, 33.06003f));
                    VectorList_01.Add(new Vector3(-52.82417f, 1882.283f, 195.6634f));
                    VectorList_01.Add(new Vector3(-310.0613f, 2755.316f, 65.12257f));
                }           //Put out fire Weeley bin
                else if (iMissionVar_01 == 4)
                {
                    VectorList_01.Add(new Vector3(-2193.884f, 206.2736f, 194.5973f));
                    VectorList_01.Add(new Vector3(-2267.159f, 231.8456f, 194.6035f));
                    VectorList_01.Add(new Vector3(-2302.743f, 259.5676f, 194.5961f));
                    VectorList_01.Add(new Vector3(-2219.802f, 292.8602f, 197.586f));
                    VectorList_01.Add(new Vector3(-2007.743f, 534.8245f, 115.5028f));
                    VectorList_01.Add(new Vector3(-436.7817f, 1092.182f, 332.5417f));
                    VectorList_01.Add(new Vector3(-3003.661f, 65.5034f, 21.65238f));
                    VectorList_01.Add(new Vector3(-2995.803f, 417.5529f, 24.80296f));
                    VectorList_01.Add(new Vector3(-3077.884f, 768.1967f, 31.3661f));
                    VectorList_01.Add(new Vector3(-3168.635f, 1082.923f, 25.48027f));
                    VectorList_01.Add(new Vector3(-188.1258f, 1552.437f, 322.1524f));
                    VectorList_01.Add(new Vector3(-1952.7f, 1776.621f, 182.9692f));
                }           //save cat
                else
                {
                    VectorList_01.Add(new Vector3(-2024.08f, -175.2686f, 26.76026f));
                    VectorList_01.Add(new Vector3(-2960.124f, 98.36689f, 13.35277f));
                    VectorList_01.Add(new Vector3(-2985.582f, 544.3261f, 16.4247f));
                    VectorList_01.Add(new Vector3(-3100.223f, 1191.346f, 19.91869f));
                    VectorList_01.Add(new Vector3(-2652.758f, 1501.169f, 118.0722f));
                    VectorList_01.Add(new Vector3(-1514.433f, 2126.713f, 55.75016f));
                    VectorList_01.Add(new Vector3(-1991.367f, 696.023f, 142.7182f));
                    VectorList_01.Add(new Vector3(-2304.964f, 410.1695f, 174.0543f));
                    VectorList_01.Add(new Vector3(-1567.98f, -173.0723f, 55.11384f));
                    VectorList_01.Add(new Vector3(-2709.916f, 2291.146f, 18.22017f));
                }                            //chase driver throwing molitovs
            }
            else if (iLocationX == 4)
            {
                vFuMiss = new Vector3(1182.863f, -1446.108f, 34.32778f);

                vGetaway = new Vector3(1196.7448f, -1457.824f, 34.9314f);
                fGetDir = 357.4331f;

                if (iMissionVar_01 == 1)
                {
                    VectorList_01.Add(new Vector3(2604.583f, 2507.948f, 28.76816f));
                    VectorList_01.Add(new Vector3(2576.702f, 418.3727f, 108.0408f));
                    VectorList_01.Add(new Vector3(1331.708f, -1615.235f, 52.11648f));
                    VectorList_01.Add(new Vector3(918.6093f, -593.2044f, 56.90709f));
                    VectorList_01.Add(new Vector3(1269.138f, -540.7137f, 68.56045f));
                    VectorList_01.Add(new Vector3(873.0724f, -111.8709f, 79.04739f));
                    VectorList_01.Add(new Vector3(1233.344f, -1420.103f, 35.10855f));
                    VectorList_01.Add(new Vector3(1161.572f, -949.0202f, 47.99375f));
                    VectorList_01.Add(new Vector3(2589.429f, -371.2926f, 92.46644f));
                    VectorList_01.Add(new Vector3(2690.265f, 1642.243f, 24.16985f));
                }                //Put out fire vehicle
                else if (iMissionVar_01 == 2)
                {
                    VectorList_01.Add(new Vector3(960.6366f, -542.3948f, 65.13508f));
                    VectorList_01.Add(new Vector3(1201.479f, -499.6996f, 71.86517f));
                    VectorList_01.Add(new Vector3(1267.791f, -683.4991f, 70.217f));
                    VectorList_01.Add(new Vector3(1141.973f, -663.2056f, 61.46155f));
                    VectorList_01.Add(new Vector3(2719.809f, 1445.834f, 35.19713f));
                    VectorList_01.Add(new Vector3(2572.389f, 2569.716f, 46.74532f));
                    VectorList_01.Add(new Vector3(1912.73f, 580.1736f, 181.3683f));
                    VectorList_01.Add(new Vector3(832.8171f, -104.1443f, 87.12511f));
                    VectorList_01.Add(new Vector3(916.4573f, -233.383f, 74.47128f));
                    VectorList_01.Add(new Vector3(704.8089f, -305.7661f, 62.11916f));
                }           //Put out fire house
                else if (iMissionVar_01 == 3)
                {
                    VectorList_01.Add(new Vector3(995.0942f, -101.8012f, 74.25548f));
                    VectorList_01.Add(new Vector3(958.9585f, -203.4636f, 73.0535f));
                    VectorList_01.Add(new Vector3(823.3715f, -123.2328f, 80.31831f));
                    VectorList_01.Add(new Vector3(1123.522f, -466.1527f, 66.48949f));
                    VectorList_01.Add(new Vector3(1399.874f, -735.1304f, 67.34861f));
                    VectorList_01.Add(new Vector3(1085.153f, -795.2288f, 58.29309f));
                    VectorList_01.Add(new Vector3(2445.395f, -410.215f, 92.99274f));
                    VectorList_01.Add(new Vector3(2547.271f, 342.9552f, 108.4646f));
                    VectorList_01.Add(new Vector3(2677.061f, 1431.203f, 24.50079f));
                    VectorList_01.Add(new Vector3(2349.459f, 2590.092f, 46.66763f));
                }           //Put out fire Weeley bin
                else if (iMissionVar_01 == 4)
                {
                    VectorList_01.Add(new Vector3(1215.594f, -450.5941f, 78.89316f));
                    VectorList_01.Add(new Vector3(1164.803f, -413.7699f, 76.21971f));
                    VectorList_01.Add(new Vector3(1661.328f, -57.55085f, 180.1647f));
                    VectorList_01.Add(new Vector3(1664.93f, -28.03928f, 196.936f));
                    VectorList_01.Add(new Vector3(1659.583f, 24.31154f, 180.8738f));
                    VectorList_01.Add(new Vector3(777.0292f, 1175.766f, 345.956f));
                    VectorList_01.Add(new Vector3(763.7859f, 1186.064f, 349.0746f));
                    VectorList_01.Add(new Vector3(747.052f, 1188.127f, 347.9625f));
                    VectorList_01.Add(new Vector3(734.0124f, 1195.146f, 347.376f));
                    VectorList_01.Add(new Vector3(724.3994f, 1197.4f, 347.3737f));
                    VectorList_01.Add(new Vector3(711.2209f, 1197.981f, 348.5157f));
                    VectorList_01.Add(new Vector3(697.9388f, 1200.081f, 345.5103f));
                    VectorList_01.Add(new Vector3(692.9375f, 1201.533f, 345.5162f));
                    VectorList_01.Add(new Vector3(682.2012f, 1205.189f, 345.3227f));
                    VectorList_01.Add(new Vector3(672.1268f, 1211.487f, 344.3017f));
                    VectorList_01.Add(new Vector3(666.4395f, 1213.011f, 344.3014f));
                    VectorList_01.Add(new Vector3(1173.23f, -1495.477f, 52.01537f));
                    VectorList_01.Add(new Vector3(2515.141f, -336.8814f, 118.02f));
                    VectorList_01.Add(new Vector3(2469.504f, -383.0226f, 109.598f));
                    VectorList_01.Add(new Vector3(2506.518f, -421.7286f, 118.02f));
                    VectorList_01.Add(new Vector3(2730.042f, 1574.729f, 66.53805f));
                    VectorList_01.Add(new Vector3(2755.845f, 1536.177f, 48.14942f));
                    VectorList_01.Add(new Vector3(2803.933f, 1454.045f, 34.34682f));
                    VectorList_01.Add(new Vector3(2706.141f, 1435.278f, 32.47633f));
                    VectorList_01.Add(new Vector3(2369.119f, 2191.536f, 142.1539f));
                    VectorList_01.Add(new Vector3(777.1944f, -143.879f, 88.50739f));
                }           //save cat
                else
                {
                    VectorList_01.Add(new Vector3(2604.583f, 2507.948f, 28.76816f));
                    VectorList_01.Add(new Vector3(2576.702f, 418.3727f, 108.0408f));
                    VectorList_01.Add(new Vector3(1331.708f, -1615.235f, 52.11648f));
                    VectorList_01.Add(new Vector3(918.6093f, -593.2044f, 56.90709f));
                    VectorList_01.Add(new Vector3(1269.138f, -540.7137f, 68.56045f));
                    VectorList_01.Add(new Vector3(873.0724f, -111.8709f, 79.04739f));
                    VectorList_01.Add(new Vector3(1233.344f, -1420.103f, 35.10855f));
                    VectorList_01.Add(new Vector3(1161.572f, -949.0202f, 47.99375f));
                    VectorList_01.Add(new Vector3(2589.429f, -371.2926f, 92.46644f));
                    VectorList_01.Add(new Vector3(2690.265f, 1642.243f, 24.16985f));
                }                            //chase driver throwing molitovs
            }
            else if (iLocationX == 5)
            {
                vFuMiss = new Vector3(1714.219f, 3587.345f, 34.92292f);

                vGetaway = new Vector3(1698.2177f, 3585.0623f, 35.64f);
                fGetDir = -150.19f;

                if (iMissionVar_01 == 1)
                {
                    VectorList_01.Add(new Vector3(1889.192f, 3834.451f, 32.01105f));
                    VectorList_01.Add(new Vector3(1609.499f, 3675.907f, 34.07229f));
                    VectorList_01.Add(new Vector3(1667.149f, 4874.436f, 41.66345f));
                    VectorList_01.Add(new Vector3(2512.01f, 4135.024f, 38.16343f));
                    VectorList_01.Add(new Vector3(2824.888f, 4413.539f, 48.57113f));
                    VectorList_01.Add(new Vector3(1154.737f, 2684.383f, 37.74841f));
                    VectorList_01.Add(new Vector3(420.9953f, 2673.239f, 43.63997f));
                    VectorList_01.Add(new Vector3(860.386f, 2238.428f, 48.13387f));
                    VectorList_01.Add(new Vector3(2061.712f, 2999.06f, 44.66584f));
                    VectorList_01.Add(new Vector3(74.05325f, 3635.154f, 39.30263f));
                }                //Put out fire vehicle
                else if (iMissionVar_01 == 2)
                {
                    VectorList_01.Add(new Vector3(1929.717f, 3735.022f, 36.11206f));
                    VectorList_01.Add(new Vector3(1942.172f, 3800.411f, 35.659f));
                    VectorList_01.Add(new Vector3(2253.288f, 5168.728f, 62.60575f));
                    VectorList_01.Add(new Vector3(379.7092f, 3573.542f, 38.1857f));
                    VectorList_01.Add(new Vector3(1429.54f, 3668.432f, 39.72841f));
                    VectorList_01.Add(new Vector3(580.5334f, 2674.995f, 45.68588f));
                    VectorList_01.Add(new Vector3(201.2184f, 2437.865f, 60.52894f));
                    VectorList_01.Add(new Vector3(-38.18939f, 2871.778f, 62.79957f));
                    VectorList_01.Add(new Vector3(2033.008f, 3189.573f, 48.78548f));
                    VectorList_01.Add(new Vector3(885.9108f, 2866.014f, 60.9489f));
                }           //Put out fire house
                else if (iMissionVar_01 == 3)
                {
                    VectorList_01.Add(new Vector3(2018.387f, 4974.779f, 41.24078f));
                    VectorList_01.Add(new Vector3(1712.089f, 4804.994f, 41.78631f));
                    VectorList_01.Add(new Vector3(1639.633f, 4839.666f, 42.0242f));
                    VectorList_01.Add(new Vector3(2106.266f, 4768.405f, 41.2288f));
                    VectorList_01.Add(new Vector3(1504.209f, 3761.94f, 33.98816f));
                    VectorList_01.Add(new Vector3(1563.927f, 3572.856f, 33.74734f));
                    VectorList_01.Add(new Vector3(2474.682f, 3771.779f, 41.34366f));
                    VectorList_01.Add(new Vector3(1987.676f, 3035.25f, 47.0563f));
                    VectorList_01.Add(new Vector3(559.2806f, 2808.339f, 42.24008f));
                    VectorList_01.Add(new Vector3(305.5799f, 2875.192f, 43.50591f));
                }           //Put out fire Weeley bin
                else if (iMissionVar_01 == 4)
                {
                    VectorList_01.Add(new Vector3(1131.572f, 2172.286f, 79.24958f));
                    VectorList_01.Add(new Vector3(1051.139f, 2280.429f, 79.58818f));
                    VectorList_01.Add(new Vector3(948.9316f, 2409.468f, 81.34492f));
                    VectorList_01.Add(new Vector3(866.3375f, 2425.922f, 61.85048f));
                    VectorList_01.Add(new Vector3(268.298f, 2866.444f, 74.1741f));
                    VectorList_01.Add(new Vector3(1698.18f, 3294.714f, 48.90355f));
                    VectorList_01.Add(new Vector3(1574.685f, 3364.146f, 48.62924f));
                    VectorList_01.Add(new Vector3(1602.855f, 3576.606f, 42.1166f));
                    VectorList_01.Add(new Vector3(1539.183f, 3590.483f, 42.11139f));
                    VectorList_01.Add(new Vector3(2080.472f, 2947.048f, 56.4142f));
                    VectorList_01.Add(new Vector3(2048.698f, 2948.248f, 57.51494f));
                    VectorList_01.Add(new Vector3(2002.894f, 2930.274f, 56.96892f));
                    VectorList_01.Add(new Vector3(1967.429f, 2918.288f, 56.16158f));
                    VectorList_01.Add(new Vector3(2929.869f, 4267.528f, 92.55537f));
                    VectorList_01.Add(new Vector3(2891.89f, 4326.849f, 92.30695f));
                    VectorList_01.Add(new Vector3(2869.147f, 4403.046f, 72.18652f));
                    VectorList_01.Add(new Vector3(2371.665f, 4937.314f, 66.7841f));
                    VectorList_01.Add(new Vector3(1990.225f, 5027.133f, 61.6032f));
                    VectorList_01.Add(new Vector3(-223.6096f, 3667.955f, 64.41235f));
                    VectorList_01.Add(new Vector3(-194.5149f, 3633.459f, 64.44878f));
                }           //save cat
                else
                {
                    VectorList_01.Add(new Vector3(1889.192f, 3834.451f, 32.01105f));
                    VectorList_01.Add(new Vector3(1609.499f, 3675.907f, 34.07229f));
                    VectorList_01.Add(new Vector3(1667.149f, 4874.436f, 41.66345f));
                    VectorList_01.Add(new Vector3(2512.01f, 4135.024f, 38.16343f));
                    VectorList_01.Add(new Vector3(2824.888f, 4413.539f, 48.57113f));
                    VectorList_01.Add(new Vector3(1154.737f, 2684.383f, 37.74841f));
                    VectorList_01.Add(new Vector3(420.9953f, 2673.239f, 43.63997f));
                    VectorList_01.Add(new Vector3(860.386f, 2238.428f, 48.13387f));
                    VectorList_01.Add(new Vector3(2061.712f, 2999.06f, 44.66584f));
                    VectorList_01.Add(new Vector3(74.05325f, 3635.154f, 39.30263f));
                }                            //chase driver throwing molitovs
            }
            else
            {
                vFuMiss = new Vector3(-397.2693f, 6133.777f, 31.00628f);

                vGetaway = new Vector3(-376.7517f, 6128.0347f, 31.4968f);
                fGetDir = 44.8131f;

                if (iMissionVar_01 == 1)
                {
                    VectorList_01.Add(new Vector3(-1505.434f, 5000.363f, 62.35179f));
                    VectorList_01.Add(new Vector3(-945.9736f, 5415.901f, 38.02508f));
                    VectorList_01.Add(new Vector3(-666.4794f, 5980.88f, 12.4952f));
                    VectorList_01.Add(new Vector3(-223.158f, 6152.968f, 30.78292f));
                    VectorList_01.Add(new Vector3(69.45302f, 6612.893f, 31.14452f));
                    VectorList_01.Add(new Vector3(1351.396f, 6501.865f, 19.50821f));
                    VectorList_01.Add(new Vector3(-2233.997f, 4280.964f, 46.50346f));
                }                //Put out fire vehicle
                else if (iMissionVar_01 == 2)
                {
                    VectorList_01.Add(new Vector3(-305.9053f, 6205.513f, 35.65318f));
                    VectorList_01.Add(new Vector3(-251.0526f, 6257.79f, 32.06403f));
                    VectorList_01.Add(new Vector3(-242.4512f, 6365.154f, 35.85625f));
                    VectorList_01.Add(new Vector3(-128.2716f, 6362.34f, 36.97274f));
                    VectorList_01.Add(new Vector3(1415.824f, 6350.627f, 24.29479f));
                    VectorList_01.Add(new Vector3(-401.945f, 6374.469f, 18.88838f));
                    VectorList_01.Add(new Vector3(-677.7927f, 5840.36f, 21.64999f));
                    VectorList_01.Add(new Vector3(-566.8689f, 5249.597f, 73.6452f));
                    VectorList_01.Add(new Vector3(1585.052f, 6462.974f, 28.68683f));
                    VectorList_01.Add(new Vector3(34.16683f, 6556.016f, 33.7843f));
                }           //Put out fire house
                else if (iMissionVar_01 == 3)
                {
                    VectorList_01.Add(new Vector3(-414.3453f, 6177.978f, 31.4782f));
                    VectorList_01.Add(new Vector3(-369.1945f, 6060.814f, 31.50013f));
                    VectorList_01.Add(new Vector3(-293.1514f, 6270.734f, 31.49305f));
                    VectorList_01.Add(new Vector3(-230.3975f, 6261.953f, 31.48927f));
                    VectorList_01.Add(new Vector3(-72.35649f, 6392.305f, 31.49036f));
                    VectorList_01.Add(new Vector3(41.4637f, 6293.524f, 31.24101f));
                    VectorList_01.Add(new Vector3(408.895f, 6623.648f, 28.21533f));
                    VectorList_01.Add(new Vector3(-682.398f, 5782.822f, 17.33096f));
                    VectorList_01.Add(new Vector3(-566.9645f, 5375.292f, 70.23253f));
                    VectorList_01.Add(new Vector3(-2166.834f, 4280.235f, 48.95645f));
                }           //Put out fire Weeley bin
                else if (iMissionVar_01 == 4)
                {
                    VectorList_01.Add(new Vector3(-1363.01f, 4846.435f, 145.946f));
                    VectorList_01.Add(new Vector3(-549.4438f, 5307.896f, 114.1457f));
                    VectorList_01.Add(new Vector3(-481.26f, 5510.146f, 90.87598f));
                    VectorList_01.Add(new Vector3(-380.0862f, 6087.402f, 44.25043f));
                    VectorList_01.Add(new Vector3(-216.1708f, 6121.75f, 57.26805f));
                    VectorList_01.Add(new Vector3(-199.3291f, 6104.177f, 42.15685f));
                    VectorList_01.Add(new Vector3(-176.3717f, 6147.176f, 48.85651f));
                    VectorList_01.Add(new Vector3(-120.2041f, 6104.076f, 66.39037f));
                    VectorList_01.Add(new Vector3(-65.66806f, 6238.928f, 47.68965f));
                    VectorList_01.Add(new Vector3(-45.65261f, 6180.592f, 38.68678f));
                    VectorList_01.Add(new Vector3(-71.02359f, 6148.847f, 41.06273f));
                    VectorList_01.Add(new Vector3(-104.3453f, 6107.61f, 38.40263f));
                    VectorList_01.Add(new Vector3(81.18803f, 6284.646f, 42.21184f));
                    VectorList_01.Add(new Vector3(96.14279f, 6286.495f, 39.23028f));
                    VectorList_01.Add(new Vector3(128.8398f, 6302.992f, 39.22778f));
                    VectorList_01.Add(new Vector3(108.5047f, 6329.478f, 44.49485f));
                    VectorList_01.Add(new Vector3(424.5531f, 6475.905f, 35.87247f));
                    VectorList_01.Add(new Vector3(754.3704f, 6466.002f, 42.78326f));
                }           //save cat
                else
                {
                    VectorList_01.Add(new Vector3(-1505.434f, 5000.363f, 62.35179f));
                    VectorList_01.Add(new Vector3(-945.9736f, 5415.901f, 38.02508f));
                    VectorList_01.Add(new Vector3(-666.4794f, 5980.88f, 12.4952f));
                    VectorList_01.Add(new Vector3(-223.158f, 6152.968f, 30.78292f));
                    VectorList_01.Add(new Vector3(69.45302f, 6612.893f, 31.14452f));
                    VectorList_01.Add(new Vector3(1351.396f, 6501.865f, 19.50821f));
                    VectorList_01.Add(new Vector3(-2233.997f, 4280.964f, 46.50346f));
                }                            //chase driver throwing molitovs
            }

            BeOnOff.Add(false);//   bBurningC   0 
            BeOnOff.Add(false);//   bBackAtFort 1 
            BeOnOff.Add(false);//   bFortAccess 2 
            BeOnOff.Add(false);//   bTruckBlip  3
            BeOnOff.Add(false);//   bCatHat     4 

            iMissionVar_02 = 0;

            if (iLocationX == 3)
            {
                BeOnOff[1] = true;
                BeOnOff[2] = true;
                Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "restrictedareas");
            }

            if (iMissionVar_01 == 1)
            {
                Fire_StartinFires();
            }                //Put out fire vehicle
            else if (iMissionVar_01 == 2)
            {
                Fire_StartinFires();
            }           //Put out fire house
            else if (iMissionVar_01 == 3)
            {
                sList_01.Add("prop_bin_14a");
                sList_01.Add("prop_bin_14b");
                sList_01.Add("p_dumpster_t");

                Fire_StartinFires();
            }           //Put out fire Weeley bin
            else if (iMissionVar_01 == 4)
            {
                int iCat = FindRandom(52, 0, VectorList_01.Count - 1);
                vTarget_01 = VectorList_01[iCat];

                Fubar_Vectors(iLocationX, 0, true, false);

                int iRandomPicks = RandInt(0, VectorList_01.Count - 1);

                vTarget_02 = VectorList_01[iRandomPicks];
                vTarget_03 = VectorList_02[iRandomPicks];
            }           //save cat
            else
            {
                iTime_01.Clear();
                iTime_01.Add(0);
                Fire_StartinFires();
            }                            //chase driver throwing molitovs

            bOnTheJob = true;
        }
        private void HeresJohnny()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("HeresJohnny", tEx);

            BigMessageThread.MessageInstance.ShowSimpleShard(sAltLang[9], "", 5000);
            VTBTimerPool.Add(ttTextBar_01);
            ttTextBar_01.Label = "" + sAltLang[300] + "";
            ttTextBar_02.Label = "" + sAltLang[291] + "";
            fList_01.Clear();
            BeOnOff.Clear();
            VectorList_01.Clear();
            VectorList_02.Clear();
            VectorList_03.Clear();

            if (iLocationX == 1)
            {
                VectorList_01.Add(new Vector3(-1041.083f, -2718.568f, 12.93392f));
                VectorList_01.Add(new Vector3(-1061.077f, -2077.698f, 12.52617f));
                VectorList_01.Add(new Vector3(-395.7942f, -1874.429f, 19.77618f));
                VectorList_01.Add(new Vector3(-681.4741f, -1416.372f, 4.248418f));
                VectorList_01.Add(new Vector3(-138.5219f, -1630.083f, 31.84668f));
                VectorList_01.Add(new Vector3(308.1444f, -1377.628f, 31.08431f));
                VectorList_01.Add(new Vector3(605.5705f, -3045.7f, 5.317531f));
                VectorList_01.Add(new Vector3(1197.563f, -3097.259f, 5.071759f));
                VectorList_01.Add(new Vector3(1073.497f, -2182.429f, 30.73612f));
                VectorList_01.Add(new Vector3(829.1868f, -2120.764f, 28.58011f));
                VectorList_01.Add(new Vector3(409.894f, -1673.724f, 28.39863f));
                VectorList_01.Add(new Vector3(417.3291f, -1338.622f, 45.30168f));
                VectorList_01.Add(new Vector3(709.8922f, -989.934f, 23.31389f));
                VectorList_01.Add(new Vector3(834.902f, -1078.826f, 27.20664f));
                VectorList_01.Add(new Vector3(1715.123f, -1783.607f, 110.5077f));
                VectorList_01.Add(new Vector3(1484.828f, -1622.327f, 70.1957f));
                VectorList_01.Add(new Vector3(143.6719f, -1324.573f, 28.45681f));
                VectorList_01.Add(new Vector3(698.8793f, -1039.842f, 21.61163f));
                VectorList_01.Add(new Vector3(-328.418f, -2726.433f, 5.261106f));
                VectorList_01.Add(new Vector3(832.888f, -1577.809f, 29.72132f));

                VectorList_02.Add(new Vector3(763.0951f, -753.2785f, 26.15745f)); fList_01.Add(181.3244f);
                VectorList_02.Add(new Vector3(967.4774f, -1020.293f, 40.1831f)); fList_01.Add(267.9459f);
                VectorList_02.Add(new Vector3(890.8727f, -887.1221f, 26.18314f)); fList_01.Add(90.56949f);
                VectorList_02.Add(new Vector3(816.6873f, -920.8327f, 25.29131f)); fList_01.Add(359.3065f);
                VectorList_02.Add(new Vector3(841.8243f, -1160.949f, 24.59419f)); fList_01.Add(2.923792f);
                VectorList_02.Add(new Vector3(724.6313f, -1193.057f, 23.60598f)); fList_01.Add(253.3395f);
                VectorList_02.Add(new Vector3(1027.624f, -2398.818f, 29.17621f)); fList_01.Add(269.1856f);
                VectorList_02.Add(new Vector3(868.2722f, -2237.377f, 29.81623f)); fList_01.Add(124.5151f);
                VectorList_02.Add(new Vector3(476.8271f, -1543.507f, 28.55205f)); fList_01.Add(319.0801f);
                VectorList_02.Add(new Vector3(507.5983f, -1496.719f, 28.61389f)); fList_01.Add(165.8853f);
                VectorList_02.Add(new Vector3(572.3157f, -1567.647f, 27.92348f)); fList_01.Add(316.8122f);
                VectorList_02.Add(new Vector3(525.8751f, -1600.893f, 28.5511f)); fList_01.Add(48.28445f);
                VectorList_02.Add(new Vector3(-8.841423f, -1644.185f, 28.53421f)); fList_01.Add(309.7827f);
                VectorList_02.Add(new Vector3(-339.2939f, -1464.422f, 29.91447f)); fList_01.Add(267.1234f);
                VectorList_02.Add(new Vector3(-669.2146f, -2377.531f, 13.164f)); fList_01.Add(60.1353f);
                VectorList_02.Add(new Vector3(-1084.677f, -2231.546f, 12.56676f)); fList_01.Add(310.7375f);

                VectorList_03.Add(new Vector3(767.4902f, -763.3738f, 26.01537f));
                VectorList_03.Add(new Vector3(991.3975f, -1015.788f, 41.47733f));
                VectorList_03.Add(new Vector3(890.5455f, -909.1808f, 26.11003f));
                VectorList_03.Add(new Vector3(791.5894f, -929.159f, 24.87198f));
                VectorList_03.Add(new Vector3(869.3484f, -1166.822f, 24.3893f));
                VectorList_03.Add(new Vector3(763.2751f, -1198.393f, 23.78876f));
                VectorList_03.Add(new Vector3(1031.024f, -2414.611f, 28.67257f));
                VectorList_03.Add(new Vector3(882.3638f, -2243.256f, 30.04296f));
                VectorList_03.Add(new Vector3(493.0397f, -1555.147f, 28.71536f));
                VectorList_03.Add(new Vector3(519.2209f, -1498.67f, 28.65422f));
                VectorList_03.Add(new Vector3(565.6391f, -1555.059f, 28.6565f));
                VectorList_03.Add(new Vector3(511.4433f, -1604.321f, 28.65405f));
                VectorList_03.Add(new Vector3(4.830258f, -1649.614f, 28.75245f));
                VectorList_03.Add(new Vector3(-337.213f, -1440.709f, 29.61197f));
                VectorList_03.Add(new Vector3(-688.0628f, -2381.543f, 13.4418f));
                VectorList_03.Add(new Vector3(-1060.161f, -2238.28f, 11.75805f));
            }
            else if (iLocationX == 2)
            {
                VectorList_01.Add(new Vector3(139.7241f, -1081.181f, 28.44081f));
                VectorList_01.Add(new Vector3(29.14905f, -1029.682f, 28.69712f));
                VectorList_01.Add(new Vector3(-50.24825f, -785.8937f, 43.37382f));
                VectorList_01.Add(new Vector3(-71.04037f, -611.7898f, 35.39153f));
                VectorList_01.Add(new Vector3(-341.7037f, -761.6899f, 52.49443f));
                VectorList_01.Add(new Vector3(244.2844f, 193.9185f, 104.2734f));
                VectorList_01.Add(new Vector3(57.88021f, 18.9896f, 68.61149f));
                VectorList_01.Add(new Vector3(-387.251f, -127.8733f, 37.93008f));
                VectorList_01.Add(new Vector3(-421.0049f, -346.2681f, 32.3571f));
                VectorList_01.Add(new Vector3(-658.934f, -271.3972f, 35.04425f));
                VectorList_01.Add(new Vector3(-1387.674f, 28.38145f, 52.83684f));
                VectorList_01.Add(new Vector3(-1046.806f, 762.9147f, 166.6382f));
                VectorList_01.Add(new Vector3(234.3188f, -33.85854f, 68.96152f));
                VectorList_01.Add(new Vector3(332.2938f, -541.4509f, 27.99221f));
                VectorList_01.Add(new Vector3(-1057.122f, -1688.98f, 3.719565f));
                VectorList_01.Add(new Vector3(-1069.563f, -1420.941f, 4.624523f));
                VectorList_01.Add(new Vector3(-1277.739f, -1149.508f, 5.553957f));
                VectorList_01.Add(new Vector3(-1566.812f, -1035.633f, 12.26583f));
                VectorList_01.Add(new Vector3(-812.8978f, -1100.804f, 10.08981f));
                VectorList_01.Add(new Vector3(-1188.423f, -738.4568f, 19.60114f));

                VectorList_02.Add(new Vector3(-1532.188f, -345.0203f, 44.78691f)); fList_01.Add(111.9126f);
                VectorList_02.Add(new Vector3(-1553.959f, -403.1271f, 41.31369f)); fList_01.Add(229.697f);
                VectorList_02.Add(new Vector3(-1608.258f, -450.827f, 37.48773f)); fList_01.Add(139.5216f);
                VectorList_02.Add(new Vector3(-1457.42f, -497.9855f, 31.96311f)); fList_01.Add(13.19475f);
                VectorList_02.Add(new Vector3(-1240.887f, -255.6689f, 38.34529f)); fList_01.Add(338.0434f);
                VectorList_02.Add(new Vector3(-826.4299f, -439.9897f, 35.96603f)); fList_01.Add(122.2067f);
                VectorList_02.Add(new Vector3(-873.1349f, -368.9036f, 37.33173f)); fList_01.Add(206.889f);
                VectorList_02.Add(new Vector3(-993.2934f, -1425.717f, 4.348188f)); fList_01.Add(107.8907f);
                VectorList_02.Add(new Vector3(-812.9409f, -954.1818f, 14.73317f)); fList_01.Add(88.66773f);
                VectorList_02.Add(new Vector3(-760.0768f, -870.6204f, 20.73964f)); fList_01.Add(271.9166f);
                VectorList_02.Add(new Vector3(-786.7484f, -805.6275f, 19.95922f)); fList_01.Add(179.0629f);
                VectorList_02.Add(new Vector3(-667.9493f, -852.0062f, 23.61065f)); fList_01.Add(0.8087238f);
                VectorList_02.Add(new Vector3(-276.53f, -998.269f, 24.51661f)); fList_01.Add(250.5747f);
                VectorList_02.Add(new Vector3(-27.38151f, -623.9631f, 34.76946f)); fList_01.Add(250.3548f);
                VectorList_02.Add(new Vector3(-635.6614f, 56.31993f, 43.08276f)); fList_01.Add(93.84727f);
                VectorList_02.Add(new Vector3(-503.9017f, 84.24171f, 55.76758f)); fList_01.Add(88.76174f);
                VectorList_02.Add(new Vector3(-632.2485f, 152.6626f, 56.56872f)); fList_01.Add(85.54179f);
                VectorList_02.Add(new Vector3(-796.055f, 303.8038f, 85.02842f)); fList_01.Add(178.2735f);
                VectorList_02.Add(new Vector3(-206.0486f, 193.6038f, 79.80665f)); fList_01.Add(85.39515f);
                VectorList_02.Add(new Vector3(-215.8696f, 37.88378f, 58.94828f)); fList_01.Add(73.43102f);
                VectorList_02.Add(new Vector3(-33.43102f, -68.7942f, 58.63094f)); fList_01.Add(138.1592f);
                VectorList_02.Add(new Vector3(-10.6674f, 37.73257f, 70.93261f)); fList_01.Add(155.6066f);
                VectorList_02.Add(new Vector3(25.66169f, 82.36754f, 74.07247f)); fList_01.Add(247.7371f);
                VectorList_02.Add(new Vector3(280.3262f, -147.0995f, 64.40244f)); fList_01.Add(72.3112f);

                VectorList_03.Add(new Vector3(-1533.334f, -364.4132f, 43.67853f));
                VectorList_03.Add(new Vector3(-1529.481f, -390.7781f, 41.43423f));
                VectorList_03.Add(new Vector3(-1609.774f, -464.364f, 37.07407f));
                VectorList_03.Add(new Vector3(-1448.519f, -485.545f, 33.80241f));
                VectorList_03.Add(new Vector3(-1224.811f, -263.9234f, 37.97966f));
                VectorList_03.Add(new Vector3(-853.2125f, -455.0513f, 36.13256f));
                VectorList_03.Add(new Vector3(-859.6529f, -379.6357f, 38.95545f));
                VectorList_03.Add(new Vector3(-1021.435f, -1446.801f, 4.528006f));
                VectorList_03.Add(new Vector3(-840.0447f, -962.4284f, 14.67098f));
                VectorList_03.Add(new Vector3(-749.395f, -879.2277f, 20.89071f));
                VectorList_03.Add(new Vector3(-781.2857f, -827.0645f, 20.71199f));
                VectorList_03.Add(new Vector3(-678.5861f, -845.3114f, 23.52249f));
                VectorList_03.Add(new Vector3(-239.4945f, -1002.435f, 28.69679f));
                VectorList_03.Add(new Vector3(0.0340514f, -598.6345f, 37.23772f));
                VectorList_03.Add(new Vector3(-649.4835f, 42.97626f, 39.88513f));
                VectorList_03.Add(new Vector3(-541.7806f, 81.33409f, 57.01714f));
                VectorList_03.Add(new Vector3(-643.9061f, 145.3134f, 56.63571f));
                VectorList_03.Add(new Vector3(-786.1089f, 291.9819f, 85.20614f));
                VectorList_03.Add(new Vector3(-220.7553f, 188.6172f, 79.30544f));
                VectorList_03.Add(new Vector3(-228.0083f, 32.52436f, 57.26588f));
                VectorList_03.Add(new Vector3(-60.82083f, -68.11106f, 58.45665f));
                VectorList_03.Add(new Vector3(-2.753045f, 24.9047f, 70.547f));
                VectorList_03.Add(new Vector3(45.35606f, 72.65817f, 74.62936f));
                VectorList_03.Add(new Vector3(266.5732f, -138.9419f, 65.36573f));
            }
            else if (iLocationX == 3)
            {
                VectorList_01.Add(new Vector3(-1549.014f, -548.3881f, 33.60472f));
                VectorList_01.Add(new Vector3(-1326.126f, -394.6718f, 35.70398f));
                VectorList_01.Add(new Vector3(-1345.405f, -511.1104f, 31.31937f));
                VectorList_01.Add(new Vector3(-1643.713f, -232.7397f, 54.10257f));
                VectorList_01.Add(new Vector3(-2163.325f, -418.072f, 12.60256f));
                VectorList_01.Add(new Vector3(-3022.737f, 93.2095f, 10.85898f));
                VectorList_01.Add(new Vector3(-2964.872f, 358.821f, 14.01834f));
                VectorList_01.Add(new Vector3(-3245.632f, 987.9403f, 11.74526f));
                VectorList_01.Add(new Vector3(-3154.126f, 1089.095f, 19.95444f));
                VectorList_01.Add(new Vector3(-2571.136f, 2336.588f, 32.30839f));
                VectorList_01.Add(new Vector3(-1905.079f, 2013.517f, 140.4563f));
                VectorList_01.Add(new Vector3(-387.2896f, 1202.528f, 324.8897f));
                VectorList_01.Add(new Vector3(217.4675f, 1233.237f, 224.7079f));
                VectorList_01.Add(new Vector3(-2204.677f, 2318.118f, 32.16485f));
                VectorList_01.Add(new Vector3(-2636.95f, 1314.521f, 143.6815f));
                VectorList_01.Add(new Vector3(-1496.934f, 1513.846f, 114.4686f));
                VectorList_01.Add(new Vector3(-2286.872f, 409.126f, 173.7149f));
                VectorList_01.Add(new Vector3(-1580.878f, -377.0668f, 44.11908f));
                VectorList_01.Add(new Vector3(-1451.276f, -368.8031f, 42.75115f));
                VectorList_01.Add(new Vector3(-2024.668f, -347.4093f, 47.35437f));

                VectorList_02.Add(new Vector3(131.947f, 568.0752f, 182.8266f)); fList_01.Add(64.51907f);
                VectorList_02.Add(new Vector3(-189.3015f, 502.137f, 133.7102f)); fList_01.Add(79.99348f);
                VectorList_02.Add(new Vector3(-554.9893f, 665.6639f, 144.2542f)); fList_01.Add(339.4485f);
                VectorList_02.Add(new Vector3(-684.2095f, 603.2633f, 142.9608f)); fList_01.Add(337.039f);
                VectorList_02.Add(new Vector3(-742.5267f, 602.235f, 141.3216f)); fList_01.Add(252.8183f);
                VectorList_02.Add(new Vector3(-753.5316f, 626.5713f, 141.9162f)); fList_01.Add(219.3472f);
                VectorList_02.Add(new Vector3(-863.5941f, 699.2778f, 148.361f)); fList_01.Add(328.155f);
                VectorList_02.Add(new Vector3(-1297.894f, 456.6954f, 96.76454f)); fList_01.Add(276.7415f);
                VectorList_02.Add(new Vector3(-1414.112f, 538.3188f, 121.5406f)); fList_01.Add(108.2322f);
                VectorList_02.Add(new Vector3(-1133.141f, 2696.482f, 18.12704f)); fList_01.Add(144.8906f);

                VectorList_03.Add(new Vector3(130.148f, 574.3458f, 182.9167f));
                VectorList_03.Add(new Vector3(-204.0348f, 507.3595f, 131.8259f));
                VectorList_03.Add(new Vector3(-545.743f, 668.3389f, 143.3046f));
                VectorList_03.Add(new Vector3(-693.5018f, 605.1281f, 142.7581f));
                VectorList_03.Add(new Vector3(-727.9581f, 600.4442f, 141.3411f));
                VectorList_03.Add(new Vector3(-741.9579f, 616.4372f, 141.6683f));
                VectorList_03.Add(new Vector3(-872.7078f, 710.4829f, 148.966f));
                VectorList_03.Add(new Vector3(-1302.1f, 463.727f, 97.24272f));
                VectorList_03.Add(new Vector3(-1430.907f, 530.097f, 118.8338f));
                VectorList_03.Add(new Vector3(-1133.623f, 2660.846f, 16.86149f));
            }
            else if (iLocationX == 4)
            {
                VectorList_01.Add(new Vector3(876.9699f, -40.16737f, 78.01224f));
                VectorList_01.Add(new Vector3(758.0613f, -304.1064f, 59.12941f));
                VectorList_01.Add(new Vector3(1146.086f, -471.1216f, 65.80056f));
                VectorList_01.Add(new Vector3(1027.572f, -771.8019f, 57.28512f));
                VectorList_01.Add(new Vector3(2575.484f, 328.6403f, 107.7009f));
                VectorList_01.Add(new Vector3(2714.342f, 1391.438f, 23.77573f));
                VectorList_01.Add(new Vector3(1362.614f, 1190.502f, 111.8559f));
                VectorList_01.Add(new Vector3(646.2476f, 625.8518f, 128.159f));
                VectorList_01.Add(new Vector3(862.9474f, -428.6084f, 28.58277f));
                VectorList_01.Add(new Vector3(2541.387f, 2586.331f, 37.19322f));
                VectorList_01.Add(new Vector3(2019.421f, 2343.798f, 92.37755f));
                VectorList_01.Add(new Vector3(2674.441f, -798.6969f, 31.71748f));
                VectorList_01.Add(new Vector3(1905.316f, 564.2309f, 175.0699f));
                VectorList_01.Add(new Vector3(826.8267f, 1352.873f, 349.3413f));
                VectorList_01.Add(new Vector3(1116.142f, 255.1911f, 80.10362f));
                VectorList_01.Add(new Vector3(980.2012f, -217.2981f, 69.70745f));
                VectorList_01.Add(new Vector3(913.6071f, -261.5765f, 67.87341f));
                VectorList_01.Add(new Vector3(332.3805f, 870.631f, 194.396f));
                VectorList_01.Add(new Vector3(1122.022f, -958.9174f, 46.49674f));
                VectorList_01.Add(new Vector3(1201.854f, -1058.385f, 40.22353f));

                VectorList_02.Add(new Vector3(1352.448f, -1574.958f, 53.32595f)); fList_01.Add(215.6431f);
                VectorList_02.Add(new Vector3(902.6223f, -143.3312f, 75.93208f)); fList_01.Add(328.1572f);
                VectorList_02.Add(new Vector3(2465.714f, 1589.281f, 32.04578f)); fList_01.Add(273.0558f);
                VectorList_02.Add(new Vector3(394.2663f, 445.1308f, 143.1411f)); fList_01.Add(255.0541f);
                VectorList_02.Add(new Vector3(355.6105f, 437.9221f, 145.4459f)); fList_01.Add(294.3441f);

                VectorList_03.Add(new Vector3(1357.771f, -1586.517f, 52.27367f));
                VectorList_03.Add(new Vector3(896.9446f, -131.7422f, 76.66305f));
                VectorList_03.Add(new Vector3(2501.145f, 1590.861f, 31.98931f));
                VectorList_03.Add(new Vector3(413.0874f, 436.9318f, 141.6056f));
                VectorList_03.Add(new Vector3(374.8738f, 441.8295f, 143.6883f));
            }
            else if (iLocationX == 5)
            {
                VectorList_01.Add(new Vector3(756.8173f, 2529.267f, 72.63226f));
                VectorList_01.Add(new Vector3(1194.211f, 2695.812f, 37.42419f));
                VectorList_01.Add(new Vector3(621.0852f, 2724.247f, 41.33144f));
                VectorList_01.Add(new Vector3(353.738f, 2627.645f, 43.99853f));
                VectorList_01.Add(new Vector3(30.18124f, 2792.97f, 57.39325f));
                VectorList_01.Add(new Vector3(356.6727f, 3552.389f, 32.94365f));
                VectorList_01.Add(new Vector3(1626.912f, 3579.607f, 34.64998f));
                VectorList_01.Add(new Vector3(1887.315f, 3716.875f, 32.35853f));
                VectorList_01.Add(new Vector3(2034.266f, 3454.775f, 43.33938f));
                VectorList_01.Add(new Vector3(2436.803f, 3806.299f, 39.5065f));
                VectorList_01.Add(new Vector3(2489.314f, 4124.451f, 37.67253f));
                VectorList_01.Add(new Vector3(2560.723f, 4693.43f, 33.41275f));
                VectorList_01.Add(new Vector3(2148.872f, 4801.017f, 40.56701f));
                VectorList_01.Add(new Vector3(1801.27f, 4585.74f, 36.42428f));
                VectorList_01.Add(new Vector3(356.784f, 4454.051f, 62.3696f));
                VectorList_01.Add(new Vector3(1642.268f, 4839.343f, 41.52587f));
                VectorList_01.Add(new Vector3(1915.273f, 5130.429f, 44.47802f));
                VectorList_01.Add(new Vector3(3791.192f, 4469.835f, 5.294667f));
                VectorList_01.Add(new Vector3(3321.107f, 5143.908f, 17.75576f));
                VectorList_01.Add(new Vector3(721.6434f, 4176.446f, 40.20927f));

                VectorList_02.Add(new Vector3(191.7131f, 2787.094f, 44.95649f)); fList_01.Add(275.4593f);
                VectorList_02.Add(new Vector3(216.8162f, 2606.092f, 45.41368f)); fList_01.Add(10.91905f);
                VectorList_02.Add(new Vector3(639.272f, 2776.037f, 41.31077f)); fList_01.Add(356.1178f);
                VectorList_02.Add(new Vector3(1884.758f, 3768.683f, 32.17389f)); fList_01.Add(209.9817f);
                VectorList_02.Add(new Vector3(2552.551f, 4672.816f, 33.30616f)); fList_01.Add(18.82985f);
                VectorList_02.Add(new Vector3(1664.247f, 4768.503f, 41.31775f)); fList_01.Add(277.2863f);

                VectorList_03.Add(new Vector3(189.9987f, 2811.081f, 44.62182f));
                VectorList_03.Add(new Vector3(218.4454f, 2621.194f, 46.63481f));
                VectorList_03.Add(new Vector3(657.6193f, 2757.525f, 41.45344f));
                VectorList_03.Add(new Vector3(1899.49f, 3756.363f, 31.9322f));
                VectorList_03.Add(new Vector3(2545.275f, 4691.283f, 33.09167f));
                VectorList_03.Add(new Vector3(1673.208f, 4766.211f, 41.45985f));
            }
            else
            {
                VectorList_01.Add(new Vector3(-228.7692f, 6313.809f, 30.6689f));
                VectorList_01.Add(new Vector3(-314.9991f, 6072f, 30.56262f));
                VectorList_01.Add(new Vector3(434.9284f, 6535.594f, 27.34294f));
                VectorList_01.Add(new Vector3(183.9387f, 7041.575f, 1.482337f));
                VectorList_01.Add(new Vector3(-789.5906f, 5628.471f, 25.5773f));
                VectorList_01.Add(new Vector3(-1056.008f, 4780.963f, 235.0106f));
                VectorList_01.Add(new Vector3(-1526.405f, 4478.364f, 17.42576f));
                VectorList_01.Add(new Vector3(-377.0736f, 4276.489f, 47.22919f));
                VectorList_01.Add(new Vector3(-235.5413f, 4128.151f, 39.45612f));
                VectorList_01.Add(new Vector3(3312.311f, 5141.266f, 17.49276f));
                VectorList_01.Add(new Vector3(132.7263f, 6630.996f, 30.93512f));
                VectorList_01.Add(new Vector3(-462.7952f, 6009.6f, 30.58922f));
                VectorList_01.Add(new Vector3(-367.3727f, 4935.563f, 196.8069f));
                VectorList_01.Add(new Vector3(2361.862f, 5645.574f, 88.95358f));
                VectorList_01.Add(new Vector3(2325.98f, 5348.494f, 117.7516f));
                VectorList_01.Add(new Vector3(-957.2271f, 5532.75f, 4.997598f));
                VectorList_01.Add(new Vector3(-976.8973f, 6224.723f, 2.74015f));
                VectorList_01.Add(new Vector3(-773.1357f, 5531.051f, 32.72634f));
                VectorList_01.Add(new Vector3(1587.402f, 6445.721f, 24.39896f));
                VectorList_01.Add(new Vector3(-457.0739f, 5507.59f, 80.10921f));

                VectorList_02.Add(new Vector3(-2205.158f, 4247.259f, 47.0336f)); fList_01.Add(36.72251f);
                VectorList_02.Add(new Vector3(-244.3123f, 6237.997f, 30.81558f)); fList_01.Add(227.4248f);
                VectorList_02.Add(new Vector3(-71.92449f, 6430.187f, 30.76656f)); fList_01.Add(45.31582f);
                VectorList_02.Add(new Vector3(-11.0485f, 6562.656f, 31.28877f)); fList_01.Add(224.9607f);
                VectorList_02.Add(new Vector3(-105.092f, 6534.54f, 29.1365f)); fList_01.Add(46.96247f);
                VectorList_02.Add(new Vector3(-294.3618f, 6338.538f, 31.61744f)); fList_01.Add(46.27416f);

                VectorList_03.Add(new Vector3(-2225.065f, 4255.953f, 45.77827f));
                VectorList_03.Add(new Vector3(-266.9243f, 6209.992f, 31.01622f));
                VectorList_03.Add(new Vector3(-97.21156f, 6428.724f, 30.87597f));
                VectorList_03.Add(new Vector3(4.856897f, 6545.97f, 30.8189f));
                VectorList_03.Add(new Vector3(-110.4845f, 6547.493f, 28.97705f));
                VectorList_03.Add(new Vector3(-307.3465f, 6348.717f, 29.94456f));
            }

            int iRandSt = RandInt(0, VectorList_01.Count - 1);
            vTarget_01 = VectorList_01[iRandSt];

            int iRandVe = RandInt(0, VectorList_02.Count - 1);
            vGetaway = VectorList_02[iRandVe];

            List<string> SCarz = RandVeh(RandInt(1, 13));
            string sVictor = SCarz[RandInt(0, SCarz.Count - 1)];

            if (sCustomCarz.Count > 0 && RandInt(0, 20) < 10)
                sVictor = sCustomCarz[RandInt(0, sCustomCarz.Count)];

            if (bTestRun)
            {
                fList_01.Clear();
                VectorList_03.Clear();
                bJobLoaded = true;
                iJobType = 10;
                iRandSt = 0;
                iRandVe = 0;
                vGetaway = MyMissions.JohnsXM[0].JohnnyStart;
                vTarget_01 = MyMissions.JohnsXM[0].JohnnyPark;
                fList_01.Add(MyMissions.JohnsXM[0].JohnnyHeads);
                VectorList_03.Add(MyMissions.JohnsXM[0].FubarStop);
                sVictor = MyMissions.JohnsXM[0].JohnnyCar;
            }
            else if (FindBuiltMissions(7))
            {
                if (bBulderOnly || RandBool(3))
                {
                    fList_01.Clear();
                    VectorList_03.Clear();
                    bJobLoaded = true;
                    iJobType = 10;
                    iRandSt = 0;
                    iRandVe = 0;
                    int iRanMish = RandInt(0, MyMissions.JohnsXM.Count - 1);
                    vGetaway = MyMissions.JohnsXM[iRanMish].JohnnyStart;
                    vTarget_01 = MyMissions.JohnsXM[iRanMish].JohnnyPark;
                    fList_01.Add(MyMissions.JohnsXM[iRanMish].JohnnyHeads);
                    VectorList_03.Add(MyMissions.JohnsXM[iRanMish].FubarStop);
                    sVictor = MyMissions.JohnsXM[iRanMish].JohnnyCar;
                } 
            }

            VehicleSpawn(sVictor, vGetaway, fList_01[iRandVe], false, false, true, false, 0, 0, 1, 1, true);
            vFuMiss = VectorList_03[iRandVe];
            iCashBouns = RandInt(45000, 50000);
            iCashReward = 0;

            BeOnOff.Add(true);//        bMoveYourV  0 
            BeOnOff.Add(false);//       bTruckBlip  1 
            bOnTheJob = true;
        }
        public class JohnnyBuild
        {
            public int Local { get; set; }
            public Vector3 FubarStop { get; set; }
            public Vector3 JohnnyStart { get; set; }
            public float JohnnyHeads { get; set; }
            public Vector3 JohnnyPark { get; set; }
            public string JohnnyCar { get; set; }
        }
        private void Raceist()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Raceist, bSoloRace == " + bSoloRace, tEx);

            BigMessageThread.MessageInstance.ShowSimpleShard(sAltLang[10], "", 5000);
            VectorList_01.Clear();
            VectorList_02.Clear();
            VectorList_03.Clear();

            fList_01.Clear();
            fList_02.Clear();

            iCoronaList.Clear();
            iDeliverList.Clear();

            sList_01.Clear();

            BeOnOff.Clear();

            bool bPlayerMade = false;

            BeOnOff.Add(false);//       FreezPos
            BeOnOff.Add(false);//       NoVehSelect

            if (iCurrentLap < 1)
                iCurrentLap = 1;

            fMaxSpeed = 15.00f;

            MkStart = MarkerType.Number5;
            VTBTimerPool.Add(ttTextBar_01);
            VTBTimerPool.Add(ttTextBar_02);
            VTBTimerPool.Add(ttTextBar_03);
            ttTextBar_01.Label = "" + sAltLang[302] + "";
            ttTextBar_02.Label = "" + sAltLang[304] + "";
            ttTextBar_03.Label = "" + sAltLang[305] + "";

            iList_01.Clear();

            iList_01.Add(0);
            iList_01.Add(0);
            iList_01.Add(0);
            iList_01.Add(0);

            iList_02.Clear();

            iList_02.Add(0);//PlayerChecks  0
            iList_02.Add(1);//Npc1Checks    1
            iList_02.Add(1);//Npc2Checks    2
            iList_02.Add(1);//Npc3Checks    3
            iList_02.Add(0);//timer         4
            iList_02.Add(0);//position      5
            iList_02.Add(0);//VehicleSelect 6
            iList_02.Add(0);//iLapTime      7 
            iList_02.Add(0);//iWldTime      8 
            iList_02.Add(0);//iVehClass     9
            iList_02.Add(0);//iRacePed      10
            iList_02.Add(0);//iRaceCarz     11

            if (!bSoloRace)
            {
                VTBTimerPool.Add(ttTextBar_04);
                ttTextBar_04.Label = "" + sAltLang[301] + "";
                ttTextBar_02.Text = "00:00:01";
            }
            else
                ttTextBar_02.Text = "--:--:--";

            List<Vector3> RevRace = new List<Vector3>();

            if (bTestRun)
            {
                bJobLoaded = true;
                bSoloRace = false;
                iJobType = 11;
                bPlayerMade = true;
            }
            else if (FindBuiltMissions(8))
            {
                if (bBulderOnly || RandBool(4))
                {
                    bPlayerMade = true;
                }
            }

            if (bPlayerMade)
            {
                int iBuild = 0;

                if (!bTestRun)
                    iBuild = RandInt(0, MyMissions.RaceXM.Count);

                fCorSize = 10.00f;
                fAiCoronaListSize = 7.50f;
                fCoronaDirHt = 1.90f;
                fCoronaHight = 12.00f;
                iRacingStyle = 16777216;  //828;//

                if (MyMissions.RaceXM[iBuild].VehClass == 24 || MyMissions.RaceXM[iBuild].VehClass == 25 || MyMissions.RaceXM[iBuild].VehClass == 28)
                {
                    bFloater = true;
                    fCorSize = 20.00f;
                }
                else
                    bFloater = false;

                VectorList_01 = new List<Vector3>(MyMissions.RaceXM[iBuild].TheRace);

                List<float> MyFs = new List<float>(MyMissions.RaceXM[iBuild].RaceHead);

                List<Vector3> MyVecs = new List<Vector3>(MyMissions.RaceXM[iBuild].RaceCars);

                fList_01.Add(MyFs[0]);
                fList_01.Add(MyFs[1]);
                fList_01.Add(MyFs[1]);
                fList_01.Add(MyFs[1]);
                VectorList_03.Add(MyVecs[0]);
                VectorList_03.Add(MyVecs[1]);
                VectorList_03.Add(MyVecs[3]);
                VectorList_03.Add(MyVecs[4]);

                vTarget_01 = MyVecs[0];//yellow dot
                vTarget_05 = MyVecs[2];//race start
                vFuMiss = MyMissions.RaceXM[iBuild].FubStop;

                iList_02[10] = 40;
                iList_02[9] = MyMissions.RaceXM[iBuild].VehClass;
                iList_02[11] = 8;

                sList_01 = new List<string>(MyMissions.RaceXM[iBuild].AvalableVeh);
            }
            else if (iJobType == 23)
            {
                fCorSize = 20.00f;
                fAiCoronaListSize = 15.00f;
                fCoronaDirHt = 1.00f;
                fCoronaHight = 12.00f;
                iRacingStyle = 262144;
                bFloater = false;

                RevRace.Add(new Vector3(5147.734f, -5008.327f, 8.194172f));
                RevRace.Add(new Vector3(5163.934f, -5204.785f, 4.182639f));
                RevRace.Add(new Vector3(5069.657f, -5246.439f, 4.384394f));
                RevRace.Add(new Vector3(5016.076f, -5185.677f, 1.905935f));
                RevRace.Add(new Vector3(4946.305f, -5221.691f, 1.915694f));
                RevRace.Add(new Vector3(4924.707f, -5348.12f, 9.092091f));
                RevRace.Add(new Vector3(4843.653f, -5473.705f, 21.47081f));
                RevRace.Add(new Vector3(4959.707f, -5444.595f, 32.57549f));
                RevRace.Add(new Vector3(4985.145f, -5591.257f, 23.53427f));
                RevRace.Add(new Vector3(5095.909f, -5597.434f, 36.05911f));
                RevRace.Add(new Vector3(5193.088f, -5538.555f, 45.03407f));
                RevRace.Add(new Vector3(5336.574f, -5488.068f, 52.60291f));
                RevRace.Add(new Vector3(5429.529f, -5388.582f, 37.26349f));
                RevRace.Add(new Vector3(5431.015f, -5313.071f, 25.2255f));
                RevRace.Add(new Vector3(5523.693f, -5299.267f, 12.16038f));
                RevRace.Add(new Vector3(5497.296f, -5167.862f, 12.91647f));
                RevRace.Add(new Vector3(5368.384f, -5113.812f, 13.1756f));
                RevRace.Add(new Vector3(5270.312f, -5088.003f, 13.35778f));
                RevRace.Add(new Vector3(5214.976f, -5022.094f, 14.96472f));

                VectorList_03.Add(new Vector3(5174.001f, -4988.228f, 13.65166f)); fList_01.Add(248.1184f);
                VectorList_03.Add(new Vector3(5201.846f, -4995.511f, 13.75265f)); fList_01.Add(216.1224f);
                VectorList_03.Add(new Vector3(5196.402f, -5000.076f, 13.57836f)); fList_01.Add(220.9705f);
                VectorList_03.Add(new Vector3(5193.73f, -5002.414f, 13.46276f)); fList_01.Add(224.3312f);

                iList_02[10] = 44;
                iList_02[9] = 33;
                iList_02[11] = 7;
                vTarget_01 = VectorList_03[1];//yellow dot
                vTarget_05 = new Vector3(5199.167f, -4997.615f, 13.7541f);

                vFuMiss = VectorList_03[1];
            }
            else if (iLocationX == 1)
            {
                List<Vector3> RevBackup = new List<Vector3>();

                fCorSize = 10.00f;
                fAiCoronaListSize = 7.50f;
                fCoronaDirHt = 1.90f;
                fCoronaHight = 12.00f;
                iRacingStyle = 16777216;  //828;//
                bFloater = false;

                PropList_01.Clear();
                RevRace.Add(new Vector3(-57.20544f, -1637.819f, 28.57509f));
                RevRace.Add(new Vector3(-68.28426f, -1706.129f, 28.41583f));
                RevRace.Add(new Vector3(79.12366f, -1656.612f, 28.59166f));
                RevRace.Add(new Vector3(282.9262f, -1539.076f, 28.59111f));
                RevRace.Add(new Vector3(481.7351f, -1441.778f, 28.59613f));
                RevRace.Add(new Vector3(533.6118f, -1460.099f, 28.59089f));
                RevRace.Add(new Vector3(478.0335f, -1420.373f, 28.59172f));
                RevRace.Add(new Vector3(348.9517f, -1315.807f, 31.6308f));
                RevRace.Add(new Vector3(400.4664f, -1259.809f, 31.78956f));
                RevRace.Add(new Vector3(498.2137f, -1257.284f, 28.57402f));
                RevRace.Add(new Vector3(498.8779f, -957.3315f, 26.45624f));
                RevRace.Add(new Vector3(257.7741f, -956.0562f, 28.56417f));
                RevRace.Add(new Vector3(194.0435f, -1128.518f, 28.4595f));
                RevRace.Add(new Vector3(69.14757f, -1137.012f, 28.55371f));
                RevRace.Add(new Vector3(81.26402f, -1314.08f, 28.59313f));
                RevRace.Add(new Vector3(130.9812f, -1412.803f, 28.58896f));
                RevRace.Add(new Vector3(41.42286f, -1518.247f, 28.59016f));

                VectorList_02.Add(new Vector3(83.08556f, -1482.831f, 28.56946f));
                VectorList_02.Add(new Vector3(116.2179f, -1449.694f, 28.55403f));
                VectorList_02.Add(new Vector3(126.2271f, -1403.168f, 28.50347f));
                VectorList_02.Add(new Vector3(86.01027f, -1324.641f, 28.54881f));
                VectorList_02.Add(new Vector3(55.54393f, -1221.321f, 28.55342f));
                VectorList_02.Add(new Vector3(62.65983f, -1144.368f, 28.54875f));
                VectorList_02.Add(new Vector3(172.9235f, -1130.531f, 28.54345f));
                VectorList_02.Add(new Vector3(204.2364f, -1130.818f, 28.54396f));
                VectorList_02.Add(new Vector3(232.7088f, -984.435f, 28.50902f));
                VectorList_02.Add(new Vector3(269.795f, -953.684f, 28.53325f));
                VectorList_02.Add(new Vector3(456.4836f, -951.0273f, 27.48217f));
                VectorList_02.Add(new Vector3(484.7998f, -953.3574f, 26.572f));
                VectorList_02.Add(new Vector3(501.0209f, -984.5234f, 26.85003f));
                VectorList_02.Add(new Vector3(504.8291f, -1232.788f, 28.49609f));
                VectorList_02.Add(new Vector3(478.4326f, -1260.197f, 28.61223f));
                VectorList_02.Add(new Vector3(429.5378f, -1257.538f, 30.68373f));
                VectorList_02.Add(new Vector3(388.4329f, -1268.049f, 31.7557f));
                VectorList_02.Add(new Vector3(363.2329f, -1300.893f, 31.64578f));
                VectorList_02.Add(new Vector3(348.9722f, -1330.099f, 31.6453f));
                VectorList_02.Add(new Vector3(368.7035f, -1351.955f, 31.24252f));
                VectorList_02.Add(new Vector3(493.6837f, -1422.372f, 28.50945f));
                VectorList_02.Add(new Vector3(538.8262f, -1443.921f, 28.55858f));
                VectorList_02.Add(new Vector3(527.105f, -1459.275f, 28.57718f));
                VectorList_02.Add(new Vector3(504.3167f, -1441.177f, 28.55985f));
                VectorList_02.Add(new Vector3(472.496f, -1440.451f, 28.55931f));
                VectorList_02.Add(new Vector3(352.619f, -1504.48f, 28.49762f));
                VectorList_02.Add(new Vector3(149.4904f, -1620.73f, 28.50528f));
                VectorList_02.Add(new Vector3(-4.898925f, -1700.051f, 28.5401f));
                VectorList_02.Add(new Vector3(-62.16915f, -1706.672f, 28.33993f));
                VectorList_02.Add(new Vector3(-81.6236f, -1676.795f, 28.57453f));
                VectorList_02.Add(new Vector3(-39.12133f, -1614.408f, 28.58032f));

                fList_01.Add(239.7765f);
                fList_01.Add(320.2968f);
                fList_01.Add(320.2968f);
                fList_01.Add(320.2968f);
                VectorList_03.Add(new Vector3(-7.671109f, -1554.019f, 28.60843f));
                VectorList_03.Add(new Vector3(11.53736f, -1548.344f, 28.49794f));
                VectorList_03.Add(new Vector3(16.39961f, -1550.597f, 28.54076f));
                VectorList_03.Add(new Vector3(27.81766f, -1560.342f, 28.49625f));

                vTarget_01 = new Vector3(-8.997596f, -1558.797f, 29.29521f);//yellow dot
                vTarget_05 = new Vector3(25.00448f, -1556.959f, 29.34339f);//race start
                vFuMiss = new Vector3(9.226546f, -1548.999f, 28.73895f);

                iList_02[10] = 40;
                iList_02[9] = 10;
                iList_02[11] = 1;

                Racist01_CuttinCoroners();
            }
            else if (iLocationX == 2)
            {
                fCorSize = 5.00f;
                fAiCoronaListSize = 10.00f;
                fCoronaDirHt = 4.75f;
                fCoronaHight = 16.50f;
                iRacingStyle = 4194304;
                bFloater = false;

                RevRace.Add(new Vector3(-1645.748f, -1261.047f, 0.51f));
                RevRace.Add(new Vector3(-1702.272f, -1222.724f, 0.51f));
                RevRace.Add(new Vector3(-1737.956f, -1246.581f, 0.51f));
                RevRace.Add(new Vector3(-1686.184f, -1293.532f, 0.51f));
                RevRace.Add(new Vector3(-1637.875f, -1314.182f, 0.51f));
                RevRace.Add(new Vector3(-1619.987f, -1286.133f, 0.51f));
                RevRace.Add(new Vector3(-1600.089f, -1292.425f, 0.51f));
                RevRace.Add(new Vector3(-1600.401f, -1274.724f, 0.51f));
                RevRace.Add(new Vector3(-1577.251f, -1274.578f, 0.51f));
                RevRace.Add(new Vector3(-1623.311f, -1205.906f, 0.51f));
                RevRace.Add(new Vector3(-1647.99f, -1216.67f, 0.51f));

                fList_01.Add(131.3762f);
                fList_01.Add(316.4212f);
                fList_01.Add(316.4212f);
                fList_01.Add(316.4212f);
                VectorList_03.Add(new Vector3(-1620.501f, -1172.018f, -0.1960505f));
                VectorList_03.Add(new Vector3(-1651.03f, -1224.61f, -0.1960505f));
                VectorList_03.Add(new Vector3(-1653.03f, -1222.61f, -0.1960505f));
                VectorList_03.Add(new Vector3(-1656.03f, -1219.61f, -0.1960505f));

                vTarget_01 = new Vector3(-1620.775f, -1169.608f, 2.01689f);
                vTarget_05 = new Vector3(-1658.721f, -1218.04f, 0.51f);
                vFuMiss = new Vector3(-1594.706f, -1151.572f, 1.638812f);

                iList_02[10] = 41;
                iList_02[9] = 27;
                iList_02[11] = 2;

                World.TransitionToWeather(Weather.Clear, 1.00f);
            }
            else if (iLocationX == 3)
            {
                fCorSize = 5.00f;
                fAiCoronaListSize = 4.50f;
                fCoronaDirHt = 4.75f;
                fCoronaHight = 16.50f;
                iRacingStyle = 16777216;
                bFloater = false;

                RevRace.Add(new Vector3(-2331.796f, 381.784f, 174.1289f));
                RevRace.Add(new Vector3(-2343.833f, 370.0826f, 174.1318f));
                RevRace.Add(new Vector3(-2327.708f, 327.7558f, 169.7004f));
                RevRace.Add(new Vector3(-2304.872f, 301.6005f, 169.2651f));
                RevRace.Add(new Vector3(-2283.26f, 252.2816f, 169.2641f));
                RevRace.Add(new Vector3(-2262.935f, 259.5325f, 174.275f));
                RevRace.Add(new Vector3(-2232.867f, 264.308f, 174.2735f));
                RevRace.Add(new Vector3(-2201.387f, 192.5392f, 174.2181f));
                RevRace.Add(new Vector3(-2187.414f, 158.8263f, 170.0803f));
                RevRace.Add(new Vector3(-2187.76f, 126.1394f, 167.7306f));
                RevRace.Add(new Vector3(-2235.659f, 92.48656f, 155.8075f));
                RevRace.Add(new Vector3(-2287.136f, 0.04835975f, 119.2449f));
                RevRace.Add(new Vector3(-2268.17f, -24.82425f, 111.8399f));
                RevRace.Add(new Vector3(-2213.876f, 0.7592883f, 94.44165f));
                RevRace.Add(new Vector3(-2162.388f, -55.38888f, 62.89052f));
                RevRace.Add(new Vector3(-2137.922f, -92.5589f, 48.56309f));
                RevRace.Add(new Vector3(-2096.598f, -116.852f, 40.08492f));
                RevRace.Add(new Vector3(-2040.899f, -131.7518f, 27.49518f));
                RevRace.Add(new Vector3(-2023.657f, -146.6982f, 27.98518f));
                RevRace.Add(new Vector3(-2021.285f, -176.7086f, 27.34095f));
                RevRace.Add(new Vector3(-2131.501f, -252.1583f, 15.55162f));
                RevRace.Add(new Vector3(-2172.698f, -348.3796f, 12.82483f));
                RevRace.Add(new Vector3(-2295.309f, -326.6084f, 13.28643f));
                RevRace.Add(new Vector3(-2436.38f, -241.3617f, 15.91687f));
                RevRace.Add(new Vector3(-2582.869f, -161.056f, 20.66327f));
                RevRace.Add(new Vector3(-2560.825f, -127.8996f, 23.06373f));
                RevRace.Add(new Vector3(-2530.124f, -100.5304f, 31.51521f));
                RevRace.Add(new Vector3(-2508.333f, -99.49518f, 37.64386f));
                RevRace.Add(new Vector3(-2467.406f, -62.97541f, 51.28775f));
                RevRace.Add(new Vector3(-2452.199f, 4.705995f, 69.38241f));
                RevRace.Add(new Vector3(-2421.428f, 57.79004f, 89.13654f));
                RevRace.Add(new Vector3(-2399.918f, 81.81671f, 98.4449f));
                RevRace.Add(new Vector3(-2404.125f, 175.0274f, 123.3239f));
                RevRace.Add(new Vector3(-2398.74f, 218.4145f, 140.9025f));
                RevRace.Add(new Vector3(-2397.932f, 269.951f, 143.9396f));
                RevRace.Add(new Vector3(-2433.065f, 326.2294f, 145.9435f));
                RevRace.Add(new Vector3(-2441.734f, 369.3964f, 148.3107f));
                RevRace.Add(new Vector3(-2432.058f, 411.1215f, 154.1392f));
                RevRace.Add(new Vector3(-2443.225f, 460.9167f, 165.3897f));
                RevRace.Add(new Vector3(-2364.854f, 445.1956f, 187.1961f));
                RevRace.Add(new Vector3(-2335.563f, 392.416f, 175.573f));

                fList_01.Add(114.32859f);
                fList_01.Add(23.6091194f);
                fList_01.Add(23.6113968f);
                fList_01.Add(23.5850754f);
                VectorList_03.Add(new Vector3(-2333.18408f, 373.418335f, 173.049258f));
                VectorList_03.Add(new Vector3(-2325.45483f, 378.496948f, 173.271136f));
                VectorList_03.Add(new Vector3(-2326.72559f, 377.941162f, 173.27103f));
                VectorList_03.Add(new Vector3(-2329.80444f, 376.594757f, 173.271106f));

                vTarget_01 = new Vector3(-2336.077f, 365.7342f, 174.6066f);//yellow dot
                vTarget_05 = new Vector3(-2328.43091f, 377.191132f, 174.123444f);//race start
                vFuMiss = new Vector3(-2321.406f, 390.7362f, 173.9591f);

                iList_02[10] = 42;
                iList_02[9] = 12;
                iList_02[11] = 3;

                Racist03_HillRun();
            }
            else if (iLocationX == 4)
            {
                fCorSize = 45.00f;
                fCoronaDirHt = 0.00f;
                fAiCoronaListSize = 50.00f;
                fCoronaHight = 0.00f;
                iRacingStyle = 786469;//tbchanged
                bFloater = true;

                RevRace.Add(new Vector3(2191.374f, 2164.052f, 142.1804f));
                RevRace.Add(new Vector3(2079.089f, 2151.178f, 137.4246f));
                RevRace.Add(new Vector3(2052.427f, 2003.601f, 132.5833f));
                RevRace.Add(new Vector3(2052.165f, 1898.071f, 115.3032f));
                RevRace.Add(new Vector3(2065.159f, 1690.522f, 132.0897f));
                RevRace.Add(new Vector3(2079.600f, 1632.700f, 139.7131f));
                RevRace.Add(new Vector3(2200.755f, 1488.153f, 143.8672f));
                RevRace.Add(new Vector3(2221.752f, 1399.355f, 112.2035f));
                RevRace.Add(new Vector3(2306.348f, 1325.598f, 94.61472f));
                RevRace.Add(new Vector3(2393.861f, 1236.786f, 90.658f));
                RevRace.Add(new Vector3(2382.376f, 1412.095f, 82.45281f));
                RevRace.Add(new Vector3(2349.293f, 1504.679f, 85.25463f));
                RevRace.Add(new Vector3(2330.898f, 1606.148f, 85.83896f));
                RevRace.Add(new Vector3(2343.379f, 1669.146f, 88.64292f));
                RevRace.Add(new Vector3(2274.784f, 1837.136f, 135.2109f));
                RevRace.Add(new Vector3(2231.784f, 1897.136f, 135.2109f));

                fList_01.Add(147.2953f);
                fList_01.Add(183.8615f);
                fList_01.Add(183.8615f);
                fList_01.Add(183.8615f);
                VectorList_03.Add(new Vector3(2269.067f, 2047.752f, 127.4055f));
                VectorList_03.Add(new Vector3(2222.172f, 1990.882f, 143.2751f));
                VectorList_03.Add(new Vector3(2231.172f, 1989.882f, 143.2751f));
                VectorList_03.Add(new Vector3(2244.172f, 1989.882f, 143.2751f));

                vTarget_01 = new Vector3(2264.595f, 2033.737f, 129.4959f);
                vTarget_05 = new Vector3(2236.172f, 1989.882f, 143.2751f);
                vFuMiss = new Vector3(2218.207f, 2064.011f, 131.6865f);

                iList_02[10] = 43;
                iList_02[9] = 28;
                iList_02[11] = 4;

                BeOnOff[0] = true;
            }
            else if (iLocationX == 5)
            {
                fCorSize = 20.00f;
                fAiCoronaListSize = 15.00f;
                fCoronaDirHt = 1.00f;
                fCoronaHight = 12.00f;
                iRacingStyle = 262144;
                bFloater = false;

                RevRace.Add(new Vector3(1927.005f, 3940.72f, 31.91909f));
                RevRace.Add(new Vector3(2059.921f, 3725.649f, 32.54865f));
                RevRace.Add(new Vector3(2115.197f, 3638.173f, 37.36998f));
                RevRace.Add(new Vector3(2110.978f, 3573.82f, 41.26443f));
                RevRace.Add(new Vector3(2233.399f, 3292.721f, 45.86748f));
                RevRace.Add(new Vector3(2240.048f, 3247.199f, 47.50423f));
                RevRace.Add(new Vector3(2156.711f, 3255.74f, 45.4173f));
                RevRace.Add(new Vector3(2031.897f, 3303.491f, 45.26267f));
                RevRace.Add(new Vector3(1976.348f, 3289.763f, 45.02364f));
                RevRace.Add(new Vector3(1903.159f, 3316.971f, 43.47427f));
                RevRace.Add(new Vector3(1818.639f, 3294.215f, 42.58525f));
                RevRace.Add(new Vector3(1715.543f, 3477.923f, 37.33646f));
                RevRace.Add(new Vector3(1617.756f, 3648.473f, 34.31989f));
                RevRace.Add(new Vector3(1550.795f, 3758.07f, 34.00111f));
                RevRace.Add(new Vector3(1664.479f, 3859.182f, 34.37016f));
                RevRace.Add(new Vector3(1739.822f, 3918.892f, 34.42171f));
                RevRace.Add(new Vector3(1808.715f, 3941.348f, 33.18561f));

                fList_01.Add(14.08257f);
                fList_01.Add(97.06139f);
                fList_01.Add(97.06139f);
                fList_01.Add(97.06139f);
                VectorList_03.Add(new Vector3(1870.861f, 3917.92f, 31.94371f));
                VectorList_03.Add(new Vector3(1844.07f, 3950.798f, 32.01545f));
                VectorList_03.Add(new Vector3(1845.178f, 3947.744f, 32.05015f));
                VectorList_03.Add(new Vector3(1844.858f, 3944.031f, 32.01577f));

                vTarget_01 = new Vector3(1867.918f, 3925.331f, 32.94033f);//yellow dot
                vTarget_05 = new Vector3(1843.786f, 3946.197f, 32.54472f);//race start
                vFuMiss = new Vector3(1861.054f, 3910.356f, 32.52079f);

                iList_02[10] = 44;
                iList_02[9] = 11;
                iList_02[11] = 5;
            }
            else
            {
                List<float> RevFRace = new List<float>();

                fCorSize = 45.00f;
                fAiCoronaListSize = 35.00f;
                fCoronaDirHt = 0.00f;
                fCoronaHight = -5.50f;
                iRacingStyle = 786469;//17039360;
                bFloater = true;

                iCurrentLap = 1;

                RevRace.Add(new Vector3(24.82016f, 7334.861f, -0.00f));
                RevFRace.Add(164.2365f);
                RevRace.Add(new Vector3(3258.503f, 6502.657f, -0.00f));
                RevFRace.Add(139.4218f);
                RevRace.Add(new Vector3(4023.263f, 4619.553f, -0.00f));
                RevFRace.Add(92.5183f);
                RevRace.Add(new Vector3(4070.122f, 3664.816f, -0.00f));
                RevFRace.Add(76.0657f);
                RevRace.Add(new Vector3(2992.67f, 1262.628f, -0.00f));
                RevFRace.Add(103.6867f);
                RevRace.Add(new Vector3(3138.701f, -263.2599f, -0.00f));
                RevFRace.Add(87.1977f);
                RevRace.Add(new Vector3(2689.806f, -2212.811f, -0.00f));
                RevFRace.Add(32.6976f);
                RevRace.Add(new Vector3(1356.76f, -3377.767f, -0.00f));
                RevFRace.Add(11.1433f);
                RevRace.Add(new Vector3(-1561.713f, -3523.635f, -0.00f));
                RevFRace.Add(-25.4958f);
                RevRace.Add(new Vector3(-3370.541f, -2241.433f, -0.00f));
                RevFRace.Add(-71.65024f);
                RevRace.Add(new Vector3(-3469.20f, 112.624f, -0.00f));
                RevFRace.Add(-88.2799f);
                RevRace.Add(new Vector3(-3479.537f, 1116.318f, -0.00f));
                RevFRace.Add(98.463467f);
                RevRace.Add(new Vector3(-3250.67f, 3365.701f, -0.00f));
                RevFRace.Add(247.1053f);
                RevRace.Add(new Vector3(-1855.163f, 5297.628f, -0.00f));
                RevFRace.Add(226.9597f);

                fList_01.Add(30.84494f);
                fList_01.Add(129.9772f);
                fList_01.Add(130.9153f);
                fList_01.Add(133.0743f);
                VectorList_03.Add(new Vector3(-1613.572f, 5241.811f, 1.771683f));
                VectorList_03.Add(new Vector3(-1810.738f, 5341.485f, 1.229648f));
                VectorList_03.Add(new Vector3(-1802.738f, 5332.485f, 1.229648f));
                VectorList_03.Add(new Vector3(-1798.738f, 5327.485f, 1.229648f));

                vTarget_01 = new Vector3(-1606.975f, 5246.898f, 3.974101f);
                vTarget_05 = new Vector3(-1805.738f, 5337.485f, 1.229648f);
                vFuMiss = new Vector3(-1602.904f, 5241.12f, 3.46784f);

                iList_02[10] = 45;
                iList_02[11] = 6;
                World.TransitionToWeather(Weather.Clear, 1.00f);

                if (RevRace.Count > 0)
                    VectorList_01 = ListReverseVec3(RevRace);
                if (RevFRace.Count > 0)
                    fList_02 = ListReversefloat(RevFRace);

                BeOnOff[1] = true;

                RevRace.Clear();
                RevFRace.Clear();
                Racist06_Yachtclub();
            }

            if (RevRace.Count > 0)
                VectorList_01 = ListReverseVec3(RevRace);

            vTarget_01.Z = vTarget_01.Z - 1.00f;
            vTarget_05.Z = vTarget_05.Z - 1.00f;

            iTotalLap = iCurrentLap;

            Function.Call(Hash._0xC54A08C85AE4D410, 1.50f);

            AddTarget(VectorList_03[0], false, true, 1.00f, false);

            if (!bSubtitles)
                QuickSub(sAltLang[205] + "~b~" + sAltLang[128] + "~w~ " + sAltLang[206] + "~b~" + sAltLang[128] + "~w~.");

            if (!bPlayerMade)
                sList_01 = Racist_Carz(iList_02[11]);

            sMissionVar_01 = "";
            bOnTheJob = true;
        }
        public class RaceBuild
        {
            public int Local { get; set; }
            public Vector3 FubStop { get; set; }
            public List<Vector3> RaceCars { get; set; }
            public List<float> RaceHead { get; set; }
            public List<Vector3> TheRace { get; set; }
            public int VehClass { get; set; }
            public List<string> AvalableVeh { get; set; }

            public RaceBuild()
            {
                RaceCars = new List<Vector3>();
                RaceHead = new List<float>();
                TheRace = new List<Vector3>();
                AvalableVeh = new List<string>();
            }
        }
        private void BBBomb()
        {
            BigMessageThread.MessageInstance.ShowSimpleShard(sAltLang[11], "", 5000);
            fList_01.Clear();
            fList_02.Clear();
            VectorList_01.Clear();
            VectorList_02.Clear();
            VectorList_03.Clear();
            iTime_01.Clear();
            ttTextBar_02.Label = "" + sAltLang[306] + "";
            VTBTimerPool.Add(ttTextBar_02);

            VectorList_03.Add(new Vector3(432.0016f, -982.2522f, 30.71071f));
            VectorList_03.Add(new Vector3(826.6686f, -1290.105f, 28.24086f));
            VectorList_03.Add(new Vector3(360.6976f, -1583.997f, 29.29205f));
            VectorList_03.Add(new Vector3(639.3252f, 1.446257f, 82.78688f));
            VectorList_03.Add(new Vector3(-560.6122f, -133.5047f, 38.08427f));
            VectorList_03.Add(new Vector3(-1631.851f, -1014.673f, 13.11931f));
            VectorList_03.Add(new Vector3(-1093.045f, -809.5769f, 19.27813f));
            VectorList_03.Add(new Vector3(-1313.826f, -1527.571f, 4.41676f));
            VectorList_03.Add(new Vector3(1855.559f, 3682.646f, 34.26752f));
            VectorList_03.Add(new Vector3(-442.1248f, 6017.591f, 31.67277f));

            bool bUserBuild = false;

            int iRanPoz = 0;

            int iRandPosy = 0;

            if (bTestRun)
            {
                bJobLoaded = true;
                iJobType = 12;
                bUserBuild = true;
                iRanPoz = iTestKit;
            }
            else if (FindBuiltMissions(9))
            {
                if (bBulderOnly || RandBool(5))
                {
                    bUserBuild = true;
                    iRanPoz = RandInt(0, MyMissions.BombXM.Count - 1);
                }
            }

            if (bUserBuild)
            {
                vFuMiss = MyMissions.BombXM[iRanPoz].Fubstop;
                VectorList_01.Add(MyMissions.BombXM[iRanPoz].Bomb);
                fList_01.Add(MyMissions.BombXM[iRanPoz].Fheader);
                iTestKit += 1;
            }
            else if (iLocationX == 1)
            {
                iRandPosy = FindRandom(19, 1, 10);
                if (iRandPosy == 1)
                {
                    vFuMiss = new Vector3(802.9281f, -3113.601f, 5.394254f);
                    VectorList_01.Add(new Vector3(809.645996f, -3146.7771f, 5.42136478f)); fList_01.Add(49.5572357f);
                    VectorList_01.Add(new Vector3(759.653503f, -3198.10474f, 5.31337023f)); fList_01.Add(-179.695557f);
                    VectorList_01.Add(new Vector3(794.750122f, -3244.75098f, 14.1211061f)); fList_01.Add(178.63858f);
                    VectorList_01.Add(new Vector3(836.008118f, -3198.64917f, 13.737318f)); fList_01.Add(0.178615138f);
                    VectorList_01.Add(new Vector3(844.122559f, -3074.92749f, 23.4406586f)); fList_01.Add(179.319962f);
                }
                else if (iRandPosy == 2)
                {
                    vFuMiss = new Vector3(978.3376f, -2964.917f, 5.39352f);
                    VectorList_01.Add(new Vector3(1011.35748f, -2866.52734f, 38.3971634f)); fList_01.Add(1.05535889f);
                    VectorList_01.Add(new Vector3(979.365723f, -2878.87183f, 42.5198822f)); fList_01.Add(-88.67556f);
                    VectorList_01.Add(new Vector3(822.007996f, -2883.1499f, 12.9319744f)); fList_01.Add(-90.9461594f);
                    VectorList_01.Add(new Vector3(942.405945f, -2866.43408f, 15.6671467f)); fList_01.Add(179.7052f);
                    VectorList_01.Add(new Vector3(1077.89526f, -2866.35059f, 10.5003233f)); fList_01.Add(89.8087082f);
                }
                else if (iRandPosy == 3)
                {
                    vFuMiss = new Vector3(-15.48617f, -2629.367f, 5.49523f);
                    VectorList_01.Add(new Vector3(-36.4727859f, -2686.59888f, 5.23544931f)); fList_01.Add(-91.7282639f);
                    VectorList_01.Add(new Vector3(24.4833164f, -2656.25293f, 8.99747467f)); fList_01.Add(-0.328724951f);
                    VectorList_01.Add(new Vector3(16.0186195f, -2734.82397f, 5.23998642f)); fList_01.Add(0.118843608f);
                    VectorList_01.Add(new Vector3(-81.6152802f, -2726.91504f, 7.97542667f)); fList_01.Add(-1.00918067f);
                    VectorList_01.Add(new Vector3(-77.0177307f, -2664.97778f, 5.23544931f)); fList_01.Add(-0.344806939f);
                }
                else if (iRandPosy == 4)
                {
                    vFuMiss = new Vector3(-1040.477f, -2718.445f, 13.19968f);
                    VectorList_01.Add(new Vector3(-1070.98828f, -2734.62402f, 0.0501132458f)); fList_01.Add(-131.87027f);
                    VectorList_01.Add(new Vector3(-1049.2926f, -2737.86719f, 19.9042778f)); fList_01.Add(-27.8410625f);
                    VectorList_01.Add(new Vector3(-1061.24048f, -2721.07568f, 12.9918613f)); fList_01.Add(-120.162682f);
                    VectorList_01.Add(new Vector3(-984.430908f, -2714.77905f, 13.2442551f)); fList_01.Add(-17.0465107f);
                    VectorList_01.Add(new Vector3(-1014.86975f, -2748.21802f, 19.404501f)); fList_01.Add(64.6025238f);
                }
                else if (iRandPosy == 5)
                {
                    vFuMiss = new Vector3(-158.1563f, -2003.839f, 22.27131f);
                    VectorList_01.Add(new Vector3(-171.764771f, -1998.38391f, 27.1467056f)); fList_01.Add(172.2258f);
                    VectorList_01.Add(new Vector3(-129.011536f, -1992.28625f, 22.0405521f)); fList_01.Add(-90.1620636f);
                    VectorList_01.Add(new Vector3(-73.1962357f, -2003.56262f, 17.2521744f)); fList_01.Add(173.185059f);
                    VectorList_01.Add(new Vector3(-178.384598f, -2137.14282f, 18.063694f)); fList_01.Add(18.6282787f);
                    VectorList_01.Add(new Vector3(-217.650757f, -2016.13342f, 27.8908062f)); fList_01.Add(71.0807266f);
                }
                else if (iRandPosy == 6)
                {
                    vFuMiss = new Vector3(1047.66f, -2196.231f, 30.12133f);
                    VectorList_01.Add(new Vector3(990.069763f, -2204.72949f, 40.3480339f)); fList_01.Add(-5.66307878f);
                    VectorList_01.Add(new Vector3(992.549805f, -2195.22852f, 30.8230572f)); fList_01.Add(-93.8779297f);
                    VectorList_01.Add(new Vector3(942.604919f, -2270.18115f, 39.0710678f)); fList_01.Add(174.692917f);
                    VectorList_01.Add(new Vector3(977.92572f, -2175.93481f, 38.8139648f)); fList_01.Add(175.04985f);
                    VectorList_01.Add(new Vector3(1002.24054f, -2241.7356f, 33.9945335f)); fList_01.Add(85.2047882f);
                }
                else if (iRandPosy == 7)
                {
                    vFuMiss = new Vector3(197.5926f, -2188.438f, 6.60955f);
                    VectorList_01.Add(new Vector3(202.099182f, -2229.37793f, 5.18944311f)); fList_01.Add(-1.77546966f);
                    VectorList_01.Add(new Vector3(165.293518f, -2212.7854f, 12.6219416f)); fList_01.Add(90.6059341f);
                    VectorList_01.Add(new Vector3(126.135963f, -2242.2019f, 5.32065487f)); fList_01.Add(0.0544548295f);
                    VectorList_01.Add(new Vector3(123.235268f, -2204.79346f, 6.42151451f)); fList_01.Add(179.641144f);
                    VectorList_01.Add(new Vector3(102.064209f, -2175.32275f, 20.33498f)); fList_01.Add(-89.3424683f);
                }
                else if (iRandPosy == 8)
                {
                    vFuMiss = new Vector3(424.2131f, -1466.043f, 28.68664f);
                    VectorList_01.Add(new Vector3(457.746155f, -1472.93665f, 32.3358879f)); fList_01.Add(-163.168152f);
                    VectorList_01.Add(new Vector3(426.96109f, -1505.31909f, 40.1624489f)); fList_01.Add(-59.497551f);
                    VectorList_01.Add(new Vector3(490.714355f, -1523.04321f, 28.5266209f)); fList_01.Add(-131.216797f);
                    VectorList_01.Add(new Vector3(460.380432f, -1455.98413f, 32.7180061f)); fList_01.Add(-74.4183731f);
                    VectorList_01.Add(new Vector3(480.143341f, -1553.00354f, 32.0275269f)); fList_01.Add(-40.8613129f);
                }
                else if (iRandPosy == 9)
                {
                    vFuMiss = new Vector3(-91.74182f, -1240.411f, 28.44001f);
                    VectorList_01.Add(new Vector3(-61.2889137f, -1218.56775f, 27.9370804f)); fList_01.Add(91.5783691f);
                    VectorList_01.Add(new Vector3(-7.24806499f, -1215.04065f, 29.7718487f)); fList_01.Add(-0.940741658f);
                    VectorList_01.Add(new Vector3(-22.4572964f, -1283.50977f, 49.6661911f)); fList_01.Add(-15.0027161f);
                    VectorList_01.Add(new Vector3(-63.3148232f, -1327.68982f, 32.4317131f)); fList_01.Add(120.057899f);
                    VectorList_01.Add(new Vector3(-126.32859f, -1259.71521f, 49.8670044f)); fList_01.Add(-88.4529495f);
                }
                else
                {
                    vFuMiss = new Vector3(-411.0846f, -1715.506f, 18.74651f);
                    VectorList_01.Add(new Vector3(-440.010406f, -1677.32324f, 18.5263081f)); fList_01.Add(159.834549f);
                    VectorList_01.Add(new Vector3(-442.548737f, -1716.09949f, 18.4738827f)); fList_01.Add(81.7372894f);
                    VectorList_01.Add(new Vector3(-463.065369f, -1735.82104f, 19.0399647f)); fList_01.Add(-76.4177399f);
                    VectorList_01.Add(new Vector3(-513.388916f, -1676.56262f, 24.3209553f)); fList_01.Add(42.760952f);
                    VectorList_01.Add(new Vector3(-520.416992f, -1731.10938f, 21.1413231f)); fList_01.Add(55.2201462f);
                }
            }
            else if (iLocationX == 2)
            {
                iRandPosy = FindRandom(20, 1, 10);
                if (iRandPosy == 1)
                {
                    vFuMiss = new Vector3(-1196.651f, -1533.475f, 3.918629f);
                    VectorList_01.Add(new Vector3(-1175.37292f, -1547.41772f, 16.5733166f)); fList_01.Add(124.615746f);
                    VectorList_01.Add(new Vector3(-1156.82007f, -1574.55994f, 7.58400249f)); fList_01.Add(-145.622772f);
                    VectorList_01.Add(new Vector3(-1195.41077f, -1577.52576f, 3.84261274f)); fList_01.Add(-55.0179634f);
                    VectorList_01.Add(new Vector3(-1205.4834f, -1621.29712f, 3.60915422f)); fList_01.Add(35.5921669f);
                    VectorList_01.Add(new Vector3(-1245.9989f, -1531.13879f, 3.53143215f)); fList_01.Add(-103.252808f);
                }
                else if (iRandPosy == 2)
                {
                    vFuMiss = new Vector3(-1599.262f, -1039.933f, 12.51689f);
                    VectorList_01.Add(new Vector3(-1638.32666f, -1064.24597f, 12.3875465f)); fList_01.Add(-129.622437f);
                    VectorList_01.Add(new Vector3(-1631.20886f, -1038.297f, 12.3885536f)); fList_01.Add(-40.8498421f);
                    VectorList_01.Add(new Vector3(-1619.05652f, -1035.41553f, 12.3881044f)); fList_01.Add(140.250626f);
                    VectorList_01.Add(new Vector3(-1615.90149f, -1089.50293f, 30.6011219f)); fList_01.Add(-39.4154778f);
                    VectorList_01.Add(new Vector3(-1677.17944f, -1095.5625f, 12.3874826f)); fList_01.Add(-42.9677734f);
                }
                else if (iRandPosy == 3)
                {
                    vFuMiss = new Vector3(230.9913f, 43.84718f, 83.39185f);
                    VectorList_01.Add(new Vector3(213.35083f, 38.6580696f, 83.0438232f)); fList_01.Add(159.678879f);
                    VectorList_01.Add(new Vector3(207.971436f, 2.82237387f, 78.4323883f)); fList_01.Add(-20.0443115f);
                    VectorList_01.Add(new Vector3(199.070633f, -34.6884499f, 74.2225494f)); fList_01.Add(160.498917f);
                    VectorList_01.Add(new Vector3(271.420715f, 43.524807f, 99.6538162f)); fList_01.Add(69.0033646f);
                    VectorList_01.Add(new Vector3(227.189316f, -9.40581417f, 77.1833344f)); fList_01.Add(-110.679077f);
                }
                else if (iRandPosy == 4)
                {
                    vFuMiss = new Vector3(-75.34953f, 298.0136f, 105.7971f);
                    VectorList_01.Add(new Vector3(-77.657196f, 369.666321f, 111.698509f)); fList_01.Add(-116.77227f);
                    VectorList_01.Add(new Vector3(-2.17734241f, 290.335663f, 110.162666f)); fList_01.Add(155.254547f);
                    VectorList_01.Add(new Vector3(11.1071682f, 351.266602f, 111.33036f)); fList_01.Add(-115.512306f);
                    VectorList_01.Add(new Vector3(-40.6772881f, 347.204834f, 113.142052f)); fList_01.Add(65.0234146f);
                    VectorList_01.Add(new Vector3(-92.9653168f, 357.271667f, 111.986633f)); fList_01.Add(-23.6294918f);
                }
                else if (iRandPosy == 5)
                {
                    vFuMiss = new Vector3(0.3715829f, -394.5313f, 38.91852f);
                    VectorList_01.Add(new Vector3(19.4681225f, -415.481598f, 54.5251846f)); fList_01.Add(-19.2196465f);
                    VectorList_01.Add(new Vector3(47.769577f, -379.894592f, 73.1822586f)); fList_01.Add(160.543472f);
                    VectorList_01.Add(new Vector3(80.3583298f, -338.362122f, 66.4373856f)); fList_01.Add(-110.334671f);
                    VectorList_01.Add(new Vector3(51.0579681f, -404.374725f, 99.0550995f)); fList_01.Add(177.036438f);
                    VectorList_01.Add(new Vector3(69.2523041f, -406.944092f, 36.7874985f)); fList_01.Add(68.8189163f);
                }
                else if (iRandPosy == 6)
                {
                    vFuMiss = new Vector3(-111.1355f, -937.3212f, 28.73638f);
                    VectorList_01.Add(new Vector3(-171.934494f, -1003.9325f, 295.441681f)); fList_01.Add(117.471489f);
                    VectorList_01.Add(new Vector3(-130.317062f, -1106.66357f, 35.3745613f)); fList_01.Add(-160.492996f);
                    VectorList_01.Add(new Vector3(-169.545639f, -1010.7641f, 20.5120735f)); fList_01.Add(150.719666f);
                    VectorList_01.Add(new Vector3(-139.024612f, -1006.71912f, 38.499218f)); fList_01.Add(-110.756447f);
                    VectorList_01.Add(new Vector3(-153.401138f, -1098.71899f, 12.3522339f)); fList_01.Add(161.002625f);
                }
                else if (iRandPosy == 7)
                {
                    vFuMiss = new Vector3(-649.1975f, -891.6447f, 24.19453f);
                    VectorList_01.Add(new Vector3(-672.612061f, -908.727905f, 37.8687248f)); fList_01.Add(-91.6921463f);
                    VectorList_01.Add(new Vector3(-674.617737f, -881.09021f, 23.7142372f)); fList_01.Add(-88.9547501f);
                    VectorList_01.Add(new Vector3(-691.618225f, -916.815308f, 22.907135f)); fList_01.Add(179.975388f);
                    VectorList_01.Add(new Vector3(-573.192078f, -903.041931f, 24.9249763f)); fList_01.Add(177.645691f);
                    VectorList_01.Add(new Vector3(-698.135986f, -933.198425f, 18.2491283f)); fList_01.Add(-90.4771576f);
                }
                else if (iRandPosy == 8)
                {
                    vFuMiss = new Vector3(-1324.5f, -29.00793f, 49.34758f);
                    VectorList_01.Add(new Vector3(-1362.3877f, 88.9128799f, 59.8693504f)); fList_01.Add(-175.098099f);
                    VectorList_01.Add(new Vector3(-1357.61316f, 117.013184f, 55.5052834f)); fList_01.Add(-175.268814f);
                    VectorList_01.Add(new Vector3(-1346.82092f, 70.8044434f, 54.4808617f)); fList_01.Add(3.44622636f);
                    VectorList_01.Add(new Vector3(-1273.48499f, 33.3905106f, 48.6141777f)); fList_01.Add(32.2189789f);
                    VectorList_01.Add(new Vector3(-1315.87012f, 123.890732f, 56.4197693f)); fList_01.Add(127.454277f);
                }
                else if (iRandPosy == 9)
                {
                    vFuMiss = new Vector3(-579.8363f, -71.4973f, 41.48576f);
                    VectorList_01.Add(new Vector3(-568.578491f, -88.9845428f, 41.5704536f)); fList_01.Add(-78.783287f);
                    VectorList_01.Add(new Vector3(-610.379028f, -106.800728f, 39.2434387f)); fList_01.Add(7.33203363f);
                    VectorList_01.Add(new Vector3(-630.423523f, -136.875412f, 51.2252388f)); fList_01.Add(120.083588f);
                    VectorList_01.Add(new Vector3(-594.150452f, -140.687668f, 46.5919914f)); fList_01.Add(119.812538f);
                    VectorList_01.Add(new Vector3(-546.102783f, -202.427383f, 51.4382782f)); fList_01.Add(29.4465294f);
                }
                else 
                {
                    vFuMiss = new Vector3(148.7211f, -918.1437f, 29.51619f);
                    VectorList_01.Add(new Vector3(184.037308f, -903.02887f, 30.9313583f)); fList_01.Add(-125.325417f);
                    VectorList_01.Add(new Vector3(155.433258f, -958.396667f, 29.3011284f)); fList_01.Add(-109.844543f);
                    VectorList_01.Add(new Vector3(211.827744f, -934.979736f, 23.5111675f)); fList_01.Add(54.9836044f);
                    VectorList_01.Add(new Vector3(203.416916f, -882.158997f, 30.7335625f)); fList_01.Add(-125.298744f);
                    VectorList_01.Add(new Vector3(201.570679f, -954.157898f, 30.2224751f)); fList_01.Add(-56.1505318f);
                }
            }
            else if (iLocationX == 3)
            {
                iRandPosy = FindRandom(21, 1, 10);
                if (iRandPosy == 1)
                {
                    vFuMiss = new Vector3(-2295.458f, 378.6476f, 173.9588f);
                    VectorList_01.Add(new Vector3(-2306.03687f, 219.781464f, 166.836929f)); fList_01.Add(23.2707767f);
                    VectorList_01.Add(new Vector3(-2268.83008f, 218.431885f, 183.846649f)); fList_01.Add(-0.993731558f);
                    VectorList_01.Add(new Vector3(-2227.11108f, 305.985535f, 183.838531f)); fList_01.Add(114.073357f);
                    VectorList_01.Add(new Vector3(-2271.21973f, 228.493484f, 193.846603f)); fList_01.Add(88.5154114f);
                    VectorList_01.Add(new Vector3(-2182.44238f, 283.988159f, 169.013779f)); fList_01.Add(-65.4517212f);
                }
                else if (iRandPosy == 2)
                {
                    vFuMiss = new Vector3(-3021.246f, 107.1351f, 11.13024f);
                    VectorList_01.Add(new Vector3(-3026.08936f, 70.0190506f, 12.1424503f)); fList_01.Add(-121.525932f);
                    VectorList_01.Add(new Vector3(-3023.21338f, 38.083416f, 9.35300541f)); fList_01.Add(148.861786f);
                    VectorList_01.Add(new Vector3(-2951.51367f, 45.8909378f, 15.3285236f)); fList_01.Add(-27.0971222f);
                    VectorList_01.Add(new Vector3(-2876.16455f, 21.092083f, 10.8432178f)); fList_01.Add(-105.010078f);
                    VectorList_01.Add(new Vector3(-2947.42505f, 58.7796516f, 10.8437195f)); fList_01.Add(-25.1157227f);
                }
                else if (iRandPosy == 3)
                {
                    vFuMiss = new Vector3(-2977.945f, 443.8141f, 14.58083f);
                    VectorList_01.Add(new Vector3(-2948.21191f, 442.429077f, 14.5027485f)); fList_01.Add(-2.68304944f);
                    VectorList_01.Add(new Vector3(-2999.49194f, 417.899292f, 23.8814812f)); fList_01.Add(-94.9783478f);
                    VectorList_01.Add(new Vector3(-2954.35376f, 472.821899f, 14.7039127f)); fList_01.Add(-2.81995177f);
                    VectorList_01.Add(new Vector3(-2964.40649f, 454.892151f, 14.5514097f)); fList_01.Add(-90.9236679f);
                    VectorList_01.Add(new Vector3(-2955.82617f, 386.906616f, 14.2559147f)); fList_01.Add(87.2603912f);
                }
                else if (iRandPosy == 4)
                {
                    vFuMiss = new Vector3(-3133.762f, 1064.762f, 19.83897f);
                    VectorList_01.Add(new Vector3(-3157.29102f, 1043.32605f, 20.0635357f)); fList_01.Add(-25.0883083f);
                    VectorList_01.Add(new Vector3(-3178.81714f, 1075.49585f, 24.7243404f)); fList_01.Add(68.4889221f);
                    VectorList_01.Add(new Vector3(-3162.99146f, 1115.3053f, 20.0878944f)); fList_01.Add(-25.8738689f);
                    VectorList_01.Add(new Vector3(-3143.19922f, 1137.43311f, 20.715929f)); fList_01.Add(63.0035591f);
                    VectorList_01.Add(new Vector3(-3182.69507f, 1110.53735f, 20.3020573f)); fList_01.Add(63.9797325f);
                }
                else if (iRandPosy == 5)
                {
                    vFuMiss = new Vector3(-3233.352f, 980.6213f, 12.2523f);
                    VectorList_01.Add(new Vector3(-3247.62378f, 1010.95734f, 11.7046356f)); fList_01.Add(-94.7868729f);
                    VectorList_01.Add(new Vector3(-3262.13477f, 974.175415f, 7.58738518f)); fList_01.Add(-91.2626038f);
                    VectorList_01.Add(new Vector3(-3415.42114f, 957.682983f, 11.1512156f)); fList_01.Add(1.38209331f);
                    VectorList_01.Add(new Vector3(-3425.26465f, 984.458008f, 9.30355549f)); fList_01.Add(-89.6551514f);
                    VectorList_01.Add(new Vector3(-3407.46118f, 969.698853f, 7.53174496f)); fList_01.Add(-91.2883835f);
                }
                else if (iRandPosy == 6)
                {
                    vFuMiss = new Vector3(-1864.956f, 2036.339f, 137.4786f);
                    VectorList_01.Add(new Vector3(-1896.81689f, 2079.35254f, 140.23288f)); fList_01.Add(44.4430122f);
                    VectorList_01.Add(new Vector3(-1933.86938f, 2061.06616f, 140.074417f)); fList_01.Add(169.107574f);
                    VectorList_01.Add(new Vector3(-1851.02893f, 2074.62524f, 139.060486f)); fList_01.Add(115.648117f);
                    VectorList_01.Add(new Vector3(-1916.51245f, 2087.33252f, 136.176758f)); fList_01.Add(-120.526894f);
                    VectorList_01.Add(new Vector3(-1927.07349f, 2031.34033f, 139.974487f)); fList_01.Add(168.410797f);
                }
                else if (iRandPosy == 7)
                {
                    vFuMiss = new Vector3(-1794.419f, 481.9546f, 133.2008f);
                    VectorList_01.Add(new Vector3(-1843.30457f, 462.796997f, 126.109871f)); fList_01.Add(-22.2250099f);
                    VectorList_01.Add(new Vector3(-1847.16724f, 438.603333f, 125.34407f)); fList_01.Add(70.7081528f);
                    VectorList_01.Add(new Vector3(-1756.40283f, 427.365845f, 126.920204f)); fList_01.Add(-106.927696f);
                    VectorList_01.Add(new Vector3(-1785.23706f, 415.23111f, 112.888443f)); fList_01.Add(90.6045685f);
                    VectorList_01.Add(new Vector3(-1799.50708f, 408.22699f, 127.54287f)); fList_01.Add(0.0596792027f);
                }
                else if (iRandPosy == 8)
                {
                    vFuMiss = new Vector3(-1469.613f, 886.8474f, 182.3928f);
                    VectorList_01.Add(new Vector3(-1499.65405f, 801.135681f, 181.066208f)); fList_01.Add(-60.5556145f);
                    VectorList_01.Add(new Vector3(-1614.75208f, 752.878174f, 188.478317f)); fList_01.Add(25.1190033f);
                    VectorList_01.Add(new Vector3(-1605.3783f, 833.093262f, 185.229095f)); fList_01.Add(57.3495102f);
                    VectorList_01.Add(new Vector3(-1500.92432f, 858.718872f, 180.829987f)); fList_01.Add(-65.5763245f);
                    VectorList_01.Add(new Vector3(-1526.07764f, 832.607117f, 181.608551f)); fList_01.Add(-37.8450432f);
                }
                else if (iRandPosy == 9)
                {
                    vFuMiss = new Vector3(-410.68f, 1178.289f, 325.1302f);
                    VectorList_01.Add(new Vector3(-390.557617f, 1135.7179f, 321.864166f)); fList_01.Add(74.7756119f);
                    VectorList_01.Add(new Vector3(-423.333069f, 1073.1488f, 326.926575f)); fList_01.Add(-5.92038918f);
                    VectorList_01.Add(new Vector3(-461.054657f, 1080.46252f, 323.087341f)); fList_01.Add(-106.392441f);
                    VectorList_01.Add(new Vector3(-480.734589f, 1134.32983f, 319.331543f)); fList_01.Add(75.8536758f);
                    VectorList_01.Add(new Vector3(-413.261536f, 1054.94043f, 321.156494f)); fList_01.Add(-106.093178f);
                }
                else
                {
                    vFuMiss = new Vector3(-1665.253f, 129.2197f, 62.56456f);
                    VectorList_01.Add(new Vector3(-1707.02429f, 187.314087f, 63.1602402f)); fList_01.Add(125.172707f);
                    VectorList_01.Add(new Vector3(-1748.44714f, 236.415894f, 63.6840439f)); fList_01.Add(123.72879f);
                    VectorList_01.Add(new Vector3(-1667.6698f, 192.864044f, 60.9925156f)); fList_01.Add(-65.9685059f);
                    VectorList_01.Add(new Vector3(-1639.5083f, 275.937683f, 58.7905159f)); fList_01.Add(113.650391f);
                    VectorList_01.Add(new Vector3(-1724.89661f, 234.823654f, 57.7119102f)); fList_01.Add(-154.546265f);
                }
            }
            else if (iLocationX == 4)
            {
                iRandPosy = FindRandom(22, 1, 10);
                if (iRandPosy == 1)
                {
                    vFuMiss = new Vector3(1172.171f, -637.871f, 62.09513f);
                    VectorList_01.Add(new Vector3(1113.38f, -647.378784f, 56.0562897f)); fList_01.Add(-78.4457397f);
                    VectorList_01.Add(new Vector3(1135.96033f, -666.972351f, 56.3178024f)); fList_01.Add(-85.3810654f);
                    VectorList_01.Add(new Vector3(1073.27637f, -679.915161f, 56.7843018f)); fList_01.Add(26.534214f);
                    VectorList_01.Add(new Vector3(1118.66357f, -656.284363f, 56.0533752f)); fList_01.Add(-76.7573166f);
                    VectorList_01.Add(new Vector3(1070.69873f, -712.518555f, 57.7183113f)); fList_01.Add(-48.9688797f);
                }
                else if (iRandPosy == 2)
                {
                    vFuMiss = new Vector3(958.5806f, -148.603f, 73.9059f);
                    VectorList_01.Add(new Vector3(994.848572f, -129.160446f, 85.6969376f)); fList_01.Add(-29.5178738f);
                    VectorList_01.Add(new Vector3(999.608459f, -98.4904785f, 73.4324875f)); fList_01.Add(-35.5934372f);
                    VectorList_01.Add(new Vector3(998.469238f, -133.460144f, 73.3835754f)); fList_01.Add(-32.1555023f);
                    VectorList_01.Add(new Vector3(966.49884f, -102.447006f, 80.1008301f)); fList_01.Add(135.147354f);
                    VectorList_01.Add(new Vector3(944.348328f, -126.590645f, 73.6767654f)); fList_01.Add(-142.633774f);
                }
                else if (iRandPosy == 3)
                {
                    vFuMiss = new Vector3(1131.584f, 48.13541f, 80.24796f);
                    VectorList_01.Add(new Vector3(1082.08276f, 73.3747101f, 80.1255875f)); fList_01.Add(-33.1104012f);
                    VectorList_01.Add(new Vector3(1029.03943f, 126.204536f, 87.2256851f)); fList_01.Add(67.4846725f);
                    VectorList_01.Add(new Vector3(1051.75317f, 183.176697f, 84.2260742f)); fList_01.Add(-123.073242f);
                    VectorList_01.Add(new Vector3(1138.82678f, 95.5992432f, 80.1268158f)); fList_01.Add(57.5041122f);
                    VectorList_01.Add(new Vector3(1066.30237f, 164.464417f, 80.2258606f)); fList_01.Add(148.162048f);
                }
                else if (iRandPosy == 4)
                {
                    vFuMiss = new Vector3(1191.465f, -411.8354f, 67.14699f);
                    VectorList_01.Add(new Vector3(1172.94421f, -388.903412f, 70.8247833f)); fList_01.Add(-16.5683041f);
                    VectorList_01.Add(new Vector3(1147.29431f, -418.937134f, 71.1614609f)); fList_01.Add(-105.319504f);
                    VectorList_01.Add(new Vector3(1146.03455f, -406.520172f, 66.5182495f)); fList_01.Add(74.4052658f);
                    VectorList_01.Add(new Vector3(1180.08496f, -407.331512f, 66.9784622f)); fList_01.Add(-107.452271f);
                    VectorList_01.Add(new Vector3(1158.41931f, -442.632263f, 73.8063354f)); fList_01.Add(-103.666977f);
                }
                else if (iRandPosy == 5)
                {
                    vFuMiss = new Vector3(875.2722f, -557.2955f, 56.69806f);
                    VectorList_01.Add(new Vector3(915.505127f, -554.892395f, 57.1998138f)); fList_01.Add(117.551689f);
                    VectorList_01.Add(new Vector3(896.000244f, -533.375305f, 57.3694687f)); fList_01.Add(115.345772f);
                    VectorList_01.Add(new Vector3(864.222656f, -610.057373f, 57.5900345f)); fList_01.Add(-131.42012f);
                    VectorList_01.Add(new Vector3(846.061157f, -503.736542f, 54.0774498f)); fList_01.Add(137.622971f);
                    VectorList_01.Add(new Vector3(830.575867f, -561.436157f, 56.9481316f)); fList_01.Add(-169.737198f);
                }
                else if (iRandPosy == 6)
                {
                    vFuMiss = new Vector3(1202.495f, -1077.011f, 40.25689f);
                    VectorList_01.Add(new Vector3(1241.36121f, -1091.36121f, 44.7610016f)); fList_01.Add(32.837719f);
                    VectorList_01.Add(new Vector3(1227.50562f, -1081.46216f, 30.3923607f)); fList_01.Add(-55.7637291f);
                    VectorList_01.Add(new Vector3(1232.20044f, -1102.46375f, 34.6719437f)); fList_01.Add(-56.5835724f);
                    VectorList_01.Add(new Vector3(1253.17456f, -1061.66406f, 38.0805359f)); fList_01.Add(124.305061f);
                    VectorList_01.Add(new Vector3(1243.04724f, -1104.65125f, 30.3923607f)); fList_01.Add(-55.2475243f);
                }
                else if (iRandPosy == 7)
                {
                    vFuMiss = new Vector3(2523.324f, -381.7299f, 92.48529f);
                    VectorList_01.Add(new Vector3(2476.50732f, -378.263123f, 94.3548508f)); fList_01.Add(-1.13646483f);
                    VectorList_01.Add(new Vector3(2506.64502f, -435.494232f, 92.3568497f)); fList_01.Add(-91.3385239f);
                    VectorList_01.Add(new Vector3(2505.99829f, -430.043121f, 114.928169f)); fList_01.Add(46.8818436f);
                    VectorList_01.Add(new Vector3(2496.17139f, -347.269012f, 113.321602f)); fList_01.Add(46.2065773f);
                    VectorList_01.Add(new Vector3(2495.31567f, -306.552155f, 92.4610443f)); fList_01.Add(-0.499072462f);
                }
                else if (iRandPosy == 8)
                {
                    vFuMiss = new Vector3(2599.199f, 391.4112f, 107.763f);
                    VectorList_01.Add(new Vector3(2553.49854f, 390.691467f, 107.858208f)); fList_01.Add(-2.79013181f);
                    VectorList_01.Add(new Vector3(2579.21655f, 283.212494f, 107.842216f)); fList_01.Add(90.9094543f);
                    VectorList_01.Add(new Vector3(2545.33276f, 371.798828f, 107.849602f)); fList_01.Add(-93.7815704f);
                    VectorList_01.Add(new Vector3(2590.25928f, 484.250336f, 107.913864f)); fList_01.Add(89.8007507f);
                    VectorList_01.Add(new Vector3(2588.57275f, 362.679138f, 107.883064f)); fList_01.Add(-2.20973396f);
                }
                else if (iRandPosy == 9)
                {
                    vFuMiss = new Vector3(2687.026f, 1642.834f, 24.11814f);
                    VectorList_01.Add(new Vector3(2744.98633f, 1575.90454f, 49.9270821f)); fList_01.Add(164.616257f);
                    VectorList_01.Add(new Vector3(2758.74121f, 1544.79883f, 30.0270061f)); fList_01.Add(75.0416412f);
                    VectorList_01.Add(new Vector3(2724.42773f, 1486.93262f, 33.5497475f)); fList_01.Add(73.0875397f);
                    VectorList_01.Add(new Vector3(2723.02368f, 1570.79309f, 20.0587616f)); fList_01.Add(163.774384f);
                    VectorList_01.Add(new Vector3(2747.23315f, 1541.89563f, 49.9272461f)); fList_01.Add(-106.262947f);
                }
                else
                {
                    vFuMiss = new Vector3(2554.306f, 2702.626f, 41.32283f);
                    VectorList_01.Add(new Vector3(2608.36499f, 2782.50928f, 37.4999199f)); fList_01.Add(73.0545349f);
                    VectorList_01.Add(new Vector3(2676.93872f, 2791.14893f, 39.7588081f)); fList_01.Add(-92.1003418f);
                    VectorList_01.Add(new Vector3(2676.69995f, 2757.91992f, 37.9435005f)); fList_01.Add(-167.886292f);
                    VectorList_01.Add(new Vector3(2652.3606f, 2892.09961f, 40.333889f)); fList_01.Add(18.616457f);
                    VectorList_01.Add(new Vector3(2739.79883f, 2781.77515f, 34.9451523f)); fList_01.Add(-130.627518f);
                }
            }
            else if (iLocationX == 5)
            {
                iRandPosy = FindRandom(23, 1, 10);
                if (iRandPosy == 1)
                {
                    vFuMiss = new Vector3(1791.836f, 3310.597f, 41.19687f);
                    VectorList_01.Add(new Vector3(1760.46631f, 3333.75098f, 41.0341301f)); fList_01.Add(-60.9285088f);
                    VectorList_01.Add(new Vector3(1717.18787f, 3312.80859f, 40.4587135f)); fList_01.Add(104.220711f);
                    VectorList_01.Add(new Vector3(1686.48779f, 3287.50269f, 40.381752f)); fList_01.Add(-56.6268311f);
                    VectorList_01.Add(new Vector3(1702.23352f, 3290.57031f, 48.1616364f)); fList_01.Add(-150.332474f);
                    VectorList_01.Add(new Vector3(1751.89221f, 3307.82227f, 40.3885422f)); fList_01.Add(-35.8374481f);
                }
                else if (iRandPosy == 2)
                {
                    vFuMiss = new Vector3(252.9818f, 2845.228f, 43.02372f);
                    VectorList_01.Add(new Vector3(271.301727f, 2865.59009f, 73.4146347f)); fList_01.Add(-148.963898f);
                    VectorList_01.Add(new Vector3(323.372864f, 2893.89771f, 48.8086395f)); fList_01.Add(33.2550392f);
                    VectorList_01.Add(new Vector3(314.471649f, 2893.09741f, 45.7033653f)); fList_01.Add(-150.688766f);
                    VectorList_01.Add(new Vector3(305.861908f, 2815.77026f, 42.675209f)); fList_01.Add(26.1873627f);
                    VectorList_01.Add(new Vector3(261.925507f, 2870.33057f, 42.8570595f)); fList_01.Add(-149.869537f);
                }
                else if (iRandPosy == 3)
                {
                    vFuMiss = new Vector3(227.1032f, 2614.318f, 45.93844f);
                    VectorList_01.Add(new Vector3(263.242462f, 2591.16797f, 44.1902809f)); fList_01.Add(7.45335579f);
                    VectorList_01.Add(new Vector3(256.03186f, 2584.94897f, 44.1728058f)); fList_01.Add(-80.1387177f);
                    VectorList_01.Add(new Vector3(222.261185f, 2574.01587f, 45.2677231f)); fList_01.Add(-64.4093246f);
                    VectorList_01.Add(new Vector3(253.882507f, 2618.90088f, 44.4365807f)); fList_01.Add(-167.026947f);
                    VectorList_01.Add(new Vector3(226.356812f, 2594.91382f, 44.6472931f)); fList_01.Add(9.65452766f);
                }
                else if (iRandPosy == 4)
                {
                    vFuMiss = new Vector3(70.57696f, 3626.838f, 38.98684f);
                    VectorList_01.Add(new Vector3(65.1670685f, 3682.12085f, 39.0695343f)); fList_01.Add(-38.7010193f);
                    VectorList_01.Add(new Vector3(103.042175f, 3682.31689f, 38.9900818f)); fList_01.Add(178.937347f);
                    VectorList_01.Add(new Vector3(75.9722443f, 3700.92456f, 40.3174057f)); fList_01.Add(142.61824f);
                    VectorList_01.Add(new Vector3(50.1884613f, 3689.48706f, 39.1534233f)); fList_01.Add(55.6498299f);
                    VectorList_01.Add(new Vector3(13.6236525f, 3722.02563f, 38.8854294f)); fList_01.Add(135.858322f);
                }
                else if (iRandPosy == 5)
                {
                    vFuMiss = new Vector3(1346.571f, 4333.721f, 37.54305f);
                    VectorList_01.Add(new Vector3(1336.63928f, 4227.09131f, 33.1557808f)); fList_01.Add(-12.3485098f);
                    VectorList_01.Add(new Vector3(1301.85156f, 4310.08398f, 37.1902885f)); fList_01.Add(-36.0756073f);
                    VectorList_01.Add(new Vector3(1303.3363f, 4387.84277f, 41.012867f)); fList_01.Add(-104.631699f);
                    VectorList_01.Add(new Vector3(1345.84631f, 4390.4751f, 43.5789948f)); fList_01.Add(-10.9691658f);
                    VectorList_01.Add(new Vector3(1367.448f, 4309.30078f, 37.3232155f)); fList_01.Add(73.7938614f);

                }
                else if (iRandPosy == 6)
                {
                    vFuMiss = new Vector3(1662.025f, 4856.363f, 41.45222f);
                    VectorList_01.Add(new Vector3(1638.96558f, 4877.80664f, 41.2658691f)); fList_01.Add(-80.9843979f);
                    VectorList_01.Add(new Vector3(1677.8335f, 4882.03711f, 46.555172f)); fList_01.Add(56.2789268f);
                    VectorList_01.Add(new Vector3(1701.37695f, 4830.35791f, 41.2006454f)); fList_01.Add(97.2353363f);
                    VectorList_01.Add(new Vector3(1712.29382f, 4791.30713f, 41.2192345f)); fList_01.Add(-179.89595f);
                    VectorList_01.Add(new Vector3(1639.62451f, 4819.17432f, 41.2437439f)); fList_01.Add(106.796303f);
                }
                else if (iRandPosy == 7)
                {
                    vFuMiss = new Vector3(1959.503f, 4904.847f, 43.48162f);
                    VectorList_01.Add(new Vector3(1920.03833f, 4921.7373f, 49.0715103f)); fList_01.Add(-10.4585171f);
                    VectorList_01.Add(new Vector3(1899.67725f, 4926.01465f, 48.0826492f)); fList_01.Add(-25.7218609f);
                    VectorList_01.Add(new Vector3(1903.75891f, 4854.87012f, 45.7730637f)); fList_01.Add(-136.048981f);
                    VectorList_01.Add(new Vector3(1871.85815f, 4846.9541f, 43.8312416f)); fList_01.Add(132.546524f);
                    VectorList_01.Add(new Vector3(1927.67053f, 4822.84912f, 44.5983582f)); fList_01.Add(48.6232224f);
                }
                else if (iRandPosy == 8)
                {
                    vFuMiss = new Vector3(2548.815f, 4686.794f, 33.18369f);
                    VectorList_01.Add(new Vector3(2572.17017f, 4645.63135f, 33.2907944f)); fList_01.Add(-151.954727f);
                    VectorList_01.Add(new Vector3(2585.7981f, 4691.04248f, 33.0850677f)); fList_01.Add(-42.4792442f);
                    VectorList_01.Add(new Vector3(2573.95117f, 4661.96143f, 33.5484428f)); fList_01.Add(8.63050079f);
                    VectorList_01.Add(new Vector3(2556.88818f, 4635.43604f, 33.3011475f)); fList_01.Add(46.0045433f);
                    VectorList_01.Add(new Vector3(2532.60767f, 4669.80176f, 32.9970474f)); fList_01.Add(-134.173615f);
                }
                else if (iRandPosy == 9)
                {
                    vFuMiss = new Vector3(2417.808f, 3761.484f, 40.15976f);
                    VectorList_01.Add(new Vector3(2447.84204f, 3761.2146f, 40.8058815f)); fList_01.Add(146.996994f);
                    VectorList_01.Add(new Vector3(2495.11597f, 3762.37842f, 41.6409912f)); fList_01.Add(-67.1103516f);
                    VectorList_01.Add(new Vector3(2480.3623f, 3715.08521f, 42.7044678f)); fList_01.Add(34.1762276f);
                    VectorList_01.Add(new Vector3(2511.8833f, 3777.76636f, 52.1995506f)); fList_01.Add(90.5929565f);
                    VectorList_01.Add(new Vector3(2467.20288f, 3830.43506f, 39.1871643f)); fList_01.Add(103.786362f);
                }
                else
                {
                    vFuMiss = new Vector3(2374.891f, 3112.922f, 47.56325f);
                    VectorList_01.Add(new Vector3(2431.73267f, 3146.77271f, 47.3878136f)); fList_01.Add(103.512375f);
                    VectorList_01.Add(new Vector3(2426.57422f, 3053.45898f, 47.3878059f)); fList_01.Add(172.115082f);
                    VectorList_01.Add(new Vector3(2378.88379f, 3094.22754f, 47.8085098f)); fList_01.Add(-178.005478f);
                    VectorList_01.Add(new Vector3(2342.32495f, 3057.39038f, 48.3981247f)); fList_01.Add(-15.8540945f);
                    VectorList_01.Add(new Vector3(2368.69238f, 3033.12476f, 50.3187675f)); fList_01.Add(-179.434723f);
                }
            }
            else
            {
                iRandPosy = FindRandom(24, 1, 10);
                if (iRandPosy == 1)
                {
                    vFuMiss = new Vector3(-595.5298f, 5283.958f, 69.72607f);
                    VectorList_01.Add(new Vector3(-549.605164f, 5308.17236f, 113.395943f)); fList_01.Add(-22.503418f);
                    VectorList_01.Add(new Vector3(-543.165222f, 5329.26465f, 76.3908844f)); fList_01.Add(70.1343842f);
                    VectorList_01.Add(new Vector3(-545.467407f, 5364.88037f, 69.942955f)); fList_01.Add(89.9101563f);
                    VectorList_01.Add(new Vector3(-580.696167f, 5351.38281f, 69.4496765f)); fList_01.Add(-20.9698524f);
                    VectorList_01.Add(new Vector3(-559.73822f, 5288.10254f, 75.5423737f)); fList_01.Add(-110.181091f);
                }
                else if (iRandPosy == 2)
                {
                    vFuMiss = new Vector3(-783.1334f, 5547.864f, 32.92183f);
                    VectorList_01.Add(new Vector3(-765.957458f, 5597.17041f, 32.8351212f)); fList_01.Add(77.5357742f);
                    VectorList_01.Add(new Vector3(-753.154358f, 5592.48682f, 40.8949356f)); fList_01.Add(-90.2711334f);
                    VectorList_01.Add(new Vector3(-736.563721f, 5585.38477f, 35.9498825f)); fList_01.Add(89.6301804f);
                    VectorList_01.Add(new Vector3(-736.964539f, 5602.03955f, 40.8948288f)); fList_01.Add(-90.8948517f);
                    VectorList_01.Add(new Vector3(-740.715088f, 5595.06689f, 36.7780151f)); fList_01.Add(90.4016571f);
                }
                else if (iRandPosy == 3)
                {
                    vFuMiss = new Vector3(-696.6239f, 5825.393f, 16.56497f);
                    VectorList_01.Add(new Vector3(-680.09668f, 5812.51123f, 16.5661774f)); fList_01.Add(154.292908f);
                    VectorList_01.Add(new Vector3(-686.100586f, 5765.45801f, 16.746233f)); fList_01.Add(-26.9625206f);
                    VectorList_01.Add(new Vector3(-695.120728f, 5784.4248f, 16.5661774f)); fList_01.Add(65.6818237f);
                    VectorList_01.Add(new Vector3(-678.357422f, 5792.70313f, 16.5661774f)); fList_01.Add(-25.6781178f);
                    VectorList_01.Add(new Vector3(-681.087708f, 5802.27783f, 16.5661774f)); fList_01.Add(-23.4015446f);
                }
                else if (iRandPosy == 4)
                {
                    vFuMiss = new Vector3(1724.261f, 6391.394f, 33.69069f);
                    VectorList_01.Add(new Vector3(1734.29712f, 6423.84229f, 33.5694389f)); fList_01.Add(154.053497f);
                    VectorList_01.Add(new Vector3(1735.38293f, 6419.15479f, 34.2724648f)); fList_01.Add(-118.11824f);
                    VectorList_01.Add(new Vector3(1700.24219f, 6417.1377f, 31.9992771f)); fList_01.Add(-26.47719f);
                    VectorList_01.Add(new Vector3(1676.26892f, 6431.60596f, 30.9249725f)); fList_01.Add(-29.0275822f);
                    VectorList_01.Add(new Vector3(1686.12427f, 6442.84082f, 36.3949776f)); fList_01.Add(63.4788246f);
                }
                else if (iRandPosy == 5)
                {
                    vFuMiss = new Vector3(1490.958f, 6425.833f, 21.86567f);
                    VectorList_01.Add(new Vector3(1443.42358f, 6334.67969f, 23.0111351f)); fList_01.Add(-88.6909485f);
                    VectorList_01.Add(new Vector3(1436.92224f, 6360.79492f, 23.2124557f)); fList_01.Add(-92.9941711f);
                    VectorList_01.Add(new Vector3(1506.35645f, 6364.74316f, 15.62288f)); fList_01.Add(-17.094965f);
                    VectorList_01.Add(new Vector3(1524.55176f, 6319.58398f, 23.3277512f)); fList_01.Add(-33.5229607f);
                    VectorList_01.Add(new Vector3(1539.84167f, 6340.44531f, 23.3193321f)); fList_01.Add(-29.6696682f);
                }
                else if (iRandPosy == 6)
                {
                    vFuMiss = new Vector3(428.8315f, 6555.467f, 26.64591f);
                    VectorList_01.Add(new Vector3(442.875824f, 6503.93896f, 28.1512012f)); fList_01.Add(-85.516098f);
                    VectorList_01.Add(new Vector3(431.06723f, 6472.9541f, 28.0150928f)); fList_01.Add(139.681641f);
                    VectorList_01.Add(new Vector3(439.253174f, 6456.76367f, 35.1051598f)); fList_01.Add(-132.482132f);
                    VectorList_01.Add(new Vector3(422.303619f, 6446.06836f, 28.0441952f)); fList_01.Add(3.77886033f);
                    VectorList_01.Add(new Vector3(471.001709f, 6535.25195f, 32.2081261f)); fList_01.Add(-0.898896396f);
                }
                else if (iRandPosy == 7)
                {
                    vFuMiss = new Vector3(-204.2401f, 6315.154f, 30.92814f);
                    VectorList_01.Add(new Vector3(-176.68782f, 6237.38232f, 30.9946747f)); fList_01.Add(-44.0779114f);
                    VectorList_01.Add(new Vector3(-148.776337f, 6276.11621f, 30.7246685f)); fList_01.Add(-43.5058594f);
                    VectorList_01.Add(new Vector3(-168.356262f, 6284.93311f, 32.3960037f)); fList_01.Add(-135.329895f);
                    VectorList_01.Add(new Vector3(-218.207596f, 6291.26318f, 31.0372105f)); fList_01.Add(-135.676636f);
                    VectorList_01.Add(new Vector3(-197.466095f, 6263.94287f, 30.8898373f)); fList_01.Add(-139.04155f);
                }
                else if (iRandPosy == 8)
                {
                    vFuMiss = new Vector3(-399.8442f, 6125.085f, 30.87493f);
                    VectorList_01.Add(new Vector3(-362.671875f, 6105.99414f, 45.6095123f)); fList_01.Add(134.80751f);
                    VectorList_01.Add(new Vector3(-380.761841f, 6085.31982f, 38.8501587f)); fList_01.Add(-150.967361f);
                    VectorList_01.Add(new Vector3(-364.694641f, 6104.05811f, 34.6748886f)); fList_01.Add(-45.9018631f);
                    VectorList_01.Add(new Vector3(-366.427521f, 6105.625f, 38.6976166f)); fList_01.Add(-136.302612f);
                    VectorList_01.Add(new Vector3(-382.838074f, 6112.65527f, 30.7280693f)); fList_01.Add(44.574852f);
                }
                else if (iRandPosy == 9)
                {
                    vFuMiss = new Vector3(-53.81245f, 6297.023f, 30.90609f);
                    VectorList_01.Add(new Vector3(-63.2133217f, 6226.24609f, 46.7131081f)); fList_01.Add(32.7081795f);
                    VectorList_01.Add(new Vector3(-100.013115f, 6190.71289f, 30.6462097f)); fList_01.Add(41.6808014f);
                    VectorList_01.Add(new Vector3(-40.1956024f, 6180.41602f, 37.7744865f)); fList_01.Add(-59.5133896f);
                    VectorList_01.Add(new Vector3(-121.992249f, 6102.94189f, 65.6306229f)); fList_01.Add(-47.4416237f);
                    VectorList_01.Add(new Vector3(-169.23642f, 6144.6665f, 41.8776665f)); fList_01.Add(-136.109116f);
                }
                else
                {
                    vFuMiss = new Vector3(502.5401f, 5537.348f, 777.4535f);
                    VectorList_01.Add(new Vector3(442.443024f, 5572.52197f, 776.605896f)); fList_01.Add(174.680847f);
                    VectorList_01.Add(new Vector3(429.508545f, 5614.93945f, 765.461121f)); fList_01.Add(-172.733109f);
                    VectorList_01.Add(new Vector3(501.517029f, 5603.93652f, 797.150024f)); fList_01.Add(175.935944f);
                    VectorList_01.Add(new Vector3(451.204346f, 5568.1626f, 795.921875f)); fList_01.Add(140.872787f);
                    VectorList_01.Add(new Vector3(453.622345f, 5589.1665f, 780.444336f)); fList_01.Add(0.627222776f);
                }
            }

            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("BBBomb, iRandPosy == " + iRandPosy + ", iRanPoz == " + iRanPoz, tEx);

            iRanPoz = RandInt(0, VectorList_01.Count - 1);
            vTarget_01 = VectorList_01[iRanPoz];
            fMission_01 = fList_01[iRanPoz];
            for (int i = 0; i < VectorList_03.Count; i++)
            {
                float fDist = VectorList_03[i].DistanceTo(vTarget_01);
                fList_02.Add(fDist);
            }
            float fMin = fList_02[0];
            int iStation = 0;
            for (int i = 0; i < fList_02.Count; i++)
            {
                if (fList_02[i] < fMin)
                { fMin = fList_02[i]; iStation = i; }
            }

            if (iStation == 0)
            {
                //MissioRow
                VectorList_02.Add(new Vector3(424.9822f, -975.7164f, 30.70994f));
                VectorList_02.Add(new Vector3(430.0728f, -975.2698f, 30.71041f));
                VectorList_02.Add(new Vector3(431.8297f, -976.2233f, 30.7107f));
                vTarget_02 = new Vector3(432.0016f, -982.2522f, 30.71071f);
                vTarget_03 = new Vector3(422.6159f, -958.9047f, 28.73893f);
            }
            else if (iStation == 1)
            {
                //La Mesa
                VectorList_02.Add(new Vector3(818.5182f, -1286.459f, 26.29823f));
                VectorList_02.Add(new Vector3(817.4276f, -1291.899f, 26.28673f));
                VectorList_02.Add(new Vector3(818.553f, -1294.349f, 26.28424f));
                vTarget_02 = new Vector3(826.6686f, -1290.105f, 28.24086f);
                vTarget_03 = new Vector3(808.1988f, -1292.15f, 25.71989f);
            }
            else if (iStation == 2)
            {
                //Davis
                VectorList_02.Add(new Vector3(361.3124f, -1577.367f, 29.29205f));
                VectorList_02.Add(new Vector3(357.6923f, -1583.221f, 29.29205f));
                VectorList_02.Add(new Vector3(356.771f, -1584.818f, 29.29205f));
                vTarget_02 = new Vector3(360.6976f, -1583.997f, 29.29205f);
                vTarget_03 = new Vector3(369.5829f, -1569.948f, 28.73894f);
            }
            else if (iStation == 3)
            {
                //Vinewood
                VectorList_02.Add(new Vector3(644.7836f, 5.072305f, 82.78687f));
                VectorList_02.Add(new Vector3(639.6327f, -5.474602f, 82.78826f));
                VectorList_02.Add(new Vector3(640.5361f, -4.35584f, 82.7886f));
                vTarget_02 = new Vector3(639.3252f, 1.446257f, 82.78688f);
                vTarget_03 = new Vector3(666.3584f, -13.99784f, 83.09074f);
            }
            else if (iStation == 4)
            {
                //Rockford
                VectorList_02.Add(new Vector3(-564.3727f, -136.9801f, 38.13983f));
                VectorList_02.Add(new Vector3(-555.5646f, -134.1428f, 38.21357f));
                VectorList_02.Add(new Vector3(-555.6986f, -132.275f, 38.13365f));
                vTarget_02 = new Vector3(-560.6122f, -133.5047f, 38.08427f);
                vTarget_03 = new Vector3(-547.814f, -144.8625f, 37.73637f);
            }
            else if (iStation == 5)
            {
                //DelPerro
                VectorList_02.Add(new Vector3(-1633.709f, -1009.621f, 13.07926f));
                VectorList_02.Add(new Vector3(-1626.259f, -1014.065f, 13.14364f));
                VectorList_02.Add(new Vector3(-1627.825f, -1015.812f, 13.14277f));
                vTarget_02 = new Vector3(-1631.851f, -1014.673f, 13.11931f);
                vTarget_03 = new Vector3(-1628.884f, -1000.764f, 12.5358f);
            }
            else if (iStation == 6)
            {
                //Vespucci
                VectorList_02.Add(new Vector3(-1086.839f, -803.2225f, 19.25974f));
                VectorList_02.Add(new Vector3(-1099.912f, -812.1174f, 19.31997f));
                VectorList_02.Add(new Vector3(-1101.959f, -811.5011f, 19.31709f));
                vTarget_02 = new Vector3(-1093.045f, -809.5769f, 19.27813f);
                vTarget_03 = new Vector3(-1103.157f, -796.7576f, 17.90961f);
            }
            else if (iStation == 7)
            {
                //Vespucci Beach
                VectorList_02.Add(new Vector3(-1310.293f, -1536.93f, 4.313596f));
                VectorList_02.Add(new Vector3(-1306.709f, -1526.721f, 4.358545f));
                VectorList_02.Add(new Vector3(-1308.001f, -1524.764f, 4.389328f));
                vTarget_02 = new Vector3(-1313.826f, -1527.571f, 4.41676f);
                vTarget_03 = new Vector3(-1206.207f, -1442.319f, 3.878422f);
            }
            else if (iStation == 8)
            {
                //Sandy
                VectorList_02.Add(new Vector3(1855.079f, 3678.924f, 33.80996f));
                VectorList_02.Add(new Vector3(1860.517f, 3681.536f, 33.76942f));
                VectorList_02.Add(new Vector3(1859.754f, 3679.984f, 33.7042f));
                vTarget_02 = new Vector3(1855.559f, 3682.646f, 34.26752f);
                vTarget_03 = new Vector3(1860.758f, 3673.69f, 33.27175f);
            }
            else
            {
                //paleto
                VectorList_02.Add(new Vector3(-442.0172f, 6022.679f, 31.49011f));
                VectorList_02.Add(new Vector3(-435.961f, 6021.011f, 31.49011f));
                VectorList_02.Add(new Vector3(-437.0332f, 6019.181f, 31.49011f));
                vTarget_02 = new Vector3(-442.1248f, 6017.591f, 31.67277f);
                vTarget_03 = new Vector3(-440.5876f, 6037.623f, 30.83302f);
            }

            if (bTestRun)
                iTestKit += 1;

            iTime_01.Add(0);// BobmTimmer   0 
            bOnTheJob = true;
        }
        public class BombBuild
        {
            public int Local { get; set; }
            public Vector3 Fubstop { get; set; }
            public Vector3 Bomb { get; set; }
            public float Fheader { get; set; }
        }
        private void HitMan()
        {
            BigMessageThread.MessageInstance.ShowSimpleShard(sAltLang[12], "", 5000);
            VectorList_01.Clear();
            VectorList_02.Clear();
            VectorList_03.Clear();
            VectorList_04.Clear();

            List<Vector3> GuardWalk_01 = new List<Vector3>();
            List<Vector3> GuardWalk_02 = new List<Vector3>();
            List<Vector3> GuardWalk_03 = new List<Vector3>();

            fList_01.Clear();
            iList_01.Clear();
            PropList_01.Clear();
            BeOnOff.Clear();
            BeOnOff.Add(false);//   bDoorEnter  0 
            BeOnOff.Add(false);//   bOneAtaTime 1 

            bool bUserBuild = false;

            int iMishWop = 0;

            if (bTestRun)
            {
                bJobLoaded = true;
                iJobType = 13;
                bUserBuild = true;
            }
            else if (FindBuiltMissions(10))
            {
                if (bBulderOnly || RandBool(6))
                {
                    bUserBuild = true;
                    iMishWop = RandInt(0, MyMissions.HitXM.Count - 1);
                }
            }

            if (bUserBuild)
            {
                VectorList_01.Add(MyMissions.HitXM[iMishWop].Goon05[0]);    //--5
                fList_01.Add(0.00f);
                VectorList_01.Add(MyMissions.HitXM[iMishWop].Goon04[0]);   //--4
                fList_01.Add(0.00f);
                VectorList_01.Add(MyMissions.HitXM[iMishWop].Goon03[0]);   //--3
                fList_01.Add(0.00f);
                VectorList_01.Add(MyMissions.HitXM[iMishWop].Goon02);   //--2
                fList_01.Add(MyMissions.HitXM[iMishWop].Goon02Dir);
                VectorList_01.Add(MyMissions.HitXM[iMishWop].Goon01);   //--1
                fList_01.Add(MyMissions.HitXM[iMishWop].Goon01Dir);
                VectorList_01.Add(MyMissions.HitXM[iMishWop].Vboss);   //--0
                fList_01.Add(MyMissions.HitXM[iMishWop].BossDir);

                GuardWalk_01 = new List<Vector3>(MyMissions.HitXM[iMishWop].Goon03);

                GuardWalk_02 = new List<Vector3>(MyMissions.HitXM[iMishWop].Goon04);

                GuardWalk_03 = new List<Vector3>(MyMissions.HitXM[iMishWop].Goon05);

                vTarget_01 = MyMissions.HitXM[iMishWop].Vstart;
                vTarget_01.Z -= 1.00f;
                vTarget_02 = MyMissions.HitXM[iMishWop].Goon01;
                iMobStarz = RandInt(0, 52);

                vFuMiss = MyMissions.HitXM[iMishWop].FUbstop;

                sMissionVar_01 = RandNPC(iMobStarz);
            }
            else if (bOnCayoLand)
            {
                if (iAssMissionList[6] > 4)
                    iMishWop = RandInt(0, 4);
                else
                    iMishWop = iAssMissionList[6];

                if (iMishWop == 0)
                {
                    VectorList_01.Add(new Vector3(4473.899f, -4511.396f, 4.187176f)); fList_01.Add(203.6646f);//GuardWalk_03
                    VectorList_01.Add(new Vector3(4527.359f, -4528.516f, 4.155666f)); fList_01.Add(95.5695f);//GuardWalk_02
                    VectorList_01.Add(new Vector3(4497.993f, -4539.132f, 4.141154f)); fList_01.Add(296.4092f);//GuardWalk_01
                    VectorList_01.Add(new Vector3(4523.792f, -4536.616f, 7.552061f)); fList_01.Add(21.41515f);
                    VectorList_01.Add(new Vector3(4518.237f, -4550.28f, 7.56531f)); fList_01.Add(45.2341f);
                    VectorList_01.Add(new Vector3(4503.695f, -4553.788f, 4.1719f)); fList_01.Add(200.9265f);//0

                    GuardWalk_01.Add(new Vector3(4498.449f, -4538.28f, 4.171075f));
                    GuardWalk_01.Add(new Vector3(4511.435f, -4529.924f, 4.219851f));
                    GuardWalk_01.Add(new Vector3(4505.698f, -4511.168f, 3.960274f));
                    GuardWalk_01.Add(new Vector3(4490.829f, -4513.242f, 4.124402f));
                    GuardWalk_01.Add(new Vector3(4503.334f, -4509.995f, 4.092979f));
                    GuardWalk_01.Add(new Vector3(4512.584f, -4529.077f, 4.193905f));

                    GuardWalk_02.Add(new Vector3(4527.535f, -4527.914f, 4.193107f));
                    GuardWalk_02.Add(new Vector3(4521.755f, -4529.071f, 4.143321f));
                    GuardWalk_02.Add(new Vector3(4509.937f, -4510.527f, 4.114697f));
                    GuardWalk_02.Add(new Vector3(4526.833f, -4495.362f, 4.18601f));
                    GuardWalk_02.Add(new Vector3(4512.508f, -4503.898f, 4.183725f));
                    GuardWalk_02.Add(new Vector3(4517.468f, -4527.148f, 4.178466f));

                    GuardWalk_03.Add(new Vector3(4492.424f, -4570.478f, 5.6365f));
                    GuardWalk_03.Add(new Vector3(4471.955f, -4513.821f, 4.187965f));

                    vTarget_01 = new Vector3(4513.035f, -4451.502f, 3.732822f);

                    vTarget_02 = new Vector3(4503.695f, -4553.788f, 4.1719f);
                    iMobStarz = 52;
                    sMissionVar_01 = "IG_IslDJ_00";
                }
                else if (iMishWop == 1)
                {
                    VectorList_01.Add(new Vector3(5049.748f, -4607.531f, 2.979198f)); fList_01.Add(271.3009f);
                    VectorList_01.Add(new Vector3(5165.396f, -4702.243f, 2.153193f)); fList_01.Add(189.0447f);
                    VectorList_01.Add(new Vector3(5086.114f, -4682.189f, 2.360273f)); fList_01.Add(58.22127f);
                    VectorList_01.Add(new Vector3(5033.615f, -4631.193f, 21.68073f)); fList_01.Add(256.7936f);
                    VectorList_01.Add(new Vector3(5094.524f, -4655.409f, 1.757612f)); fList_01.Add(260.6545f);
                    VectorList_01.Add(new Vector3(5123.886f, -4642.248f, 1.400684f)); fList_01.Add(164.0761f);

                    GuardWalk_01.Add(new Vector3(5084.328f, -4681.426f, 2.385362f));
                    GuardWalk_01.Add(new Vector3(5072.037f, -4673.802f, 2.932216f));
                    GuardWalk_01.Add(new Vector3(5059.477f, -4634.299f, 2.648646f));
                    GuardWalk_01.Add(new Vector3(5035.237f, -4617.473f, 3.513743f));
                    GuardWalk_01.Add(new Vector3(5057.626f, -4636.332f, 2.633209f));
                    GuardWalk_01.Add(new Vector3(5069.723f, -4672.357f, 2.989979f));
                    GuardWalk_01.Add(new Vector3(5085.625f, -4681.076f, 2.407427f));

                    GuardWalk_02.Add(new Vector3(5166.854f, -4698.667f, 2.178764f));
                    GuardWalk_02.Add(new Vector3(5166.389f, -4671.986f, 2.766574f));
                    GuardWalk_02.Add(new Vector3(5173.757f, -4644.004f, 2.853223f));
                    GuardWalk_02.Add(new Vector3(5173.076f, -4635.888f, 2.819802f));
                    GuardWalk_02.Add(new Vector3(5173.601f, -4644.069f, 2.85945f));
                    GuardWalk_02.Add(new Vector3(5164.905f, -4674.674f, 2.70859f));
                    GuardWalk_02.Add(new Vector3(5166.289f, -4703.957f, 2.079124f));

                    GuardWalk_03.Add(new Vector3(5053.102f, -4607.109f, 2.916398f));
                    GuardWalk_03.Add(new Vector3(5079.043f, -4611.108f, 2.960062f));
                    GuardWalk_03.Add(new Vector3(5130.677f, -4624.859f, 2.82174f));
                    GuardWalk_03.Add(new Vector3(5153.719f, -4628.627f, 2.988436f));
                    GuardWalk_03.Add(new Vector3(5155.554f, -4597.353f, 3.518908f));
                    GuardWalk_03.Add(new Vector3(5139.344f, -4589.227f, 4.864506f));
                    GuardWalk_03.Add(new Vector3(5107.482f, -4614.512f, 2.567264f));
                    GuardWalk_03.Add(new Vector3(5068.46f, -4608.898f, 2.732914f));

                    vTarget_01 = new Vector3(4988.147f, -4535.954f, 8.097687f);

                    vTarget_02 = new Vector3(5123.886f, -4642.248f, 1.400684f);
                    iMobStarz = 52;
                    sMissionVar_01 = "IG_IslDJ_01";
                }
                else if (iMishWop == 2)
                {
                    VectorList_01.Add(new Vector3(5289.793f, -5218.747f, 31.35961f)); fList_01.Add(21.97847f);
                    VectorList_01.Add(new Vector3(5284.155f, -5286.204f, 31.78162f)); fList_01.Add(99.49783f);
                    VectorList_01.Add(new Vector3(5381.637f, -5303.728f, 35.72071f)); fList_01.Add(209.1627f);
                    VectorList_01.Add(new Vector3(5328.118f, -5263.481f, 37.27973f)); fList_01.Add(356.2472f);
                    VectorList_01.Add(new Vector3(5329.722f, -5273.086f, 36.87106f)); fList_01.Add(161.2967f);
                    VectorList_01.Add(new Vector3(5330.616f, -5270.467f, 33.18246f)); fList_01.Add(121.288f);

                    GuardWalk_01.Add(new Vector3(5381.01f, -5303.126f, 35.70126f));
                    GuardWalk_01.Add(new Vector3(5321.302f, -5249.752f, 32.57737f));

                    GuardWalk_02.Add(new Vector3(5280.464f, -5290.719f, 31.71746f));
                    GuardWalk_02.Add(new Vector3(5386.142f, -5184.534f, 31.11724f));

                    GuardWalk_03.Add(new Vector3(5285.92f, -5215.083f, 30.47023f));
                    GuardWalk_03.Add(new Vector3(5319.126f, -5247.02f, 32.57311f));
                    GuardWalk_03.Add(new Vector3(5349.337f, -5217.763f, 31.12744f));
                    GuardWalk_03.Add(new Vector3(5311.005f, -5179.859f, 29.67479f));
                    GuardWalk_03.Add(new Vector3(5349.229f, -5218.341f, 31.14395f));
                    GuardWalk_03.Add(new Vector3(5320.939f, -5247.692f, 32.56763f));

                    vTarget_01 = new Vector3(5257.43f, -5263.344f, 24.48767f);

                    vTarget_02 = new Vector3(5330.616f, -5270.467f, 33.18246f);
                    iMobStarz = 52;
                    sMissionVar_01 = "IG_IslDJ_02";
                }
                else if (iMishWop == 3)
                {
                    VectorList_01.Add(new Vector3(5114.223f, -5203.785f, 2.398109f)); fList_01.Add(222.4906f);
                    VectorList_01.Add(new Vector3(5120.153f, -5084.902f, 2.360956f)); fList_01.Add(160.834f);
                    VectorList_01.Add(new Vector3(5032.746f, -5116.829f, 5.319641f)); fList_01.Add(122.463f);
                    VectorList_01.Add(new Vector3(5046.298f, -5112.081f, 12.57241f)); fList_01.Add(359.2585f);
                    VectorList_01.Add(new Vector3(5040.758f, -5117.302f, 18.13903f)); fList_01.Add(131.8663f);
                    VectorList_01.Add(new Vector3(5042.745f, -5114.8f, 22.93991f)); fList_01.Add(94.88478f);

                    GuardWalk_01.Add(new Vector3(5036.303f, -5116.772f, 5.737444f));
                    GuardWalk_01.Add(new Vector3(5012.694f, -5129.415f, 2.9919f));
                    GuardWalk_01.Add(new Vector3(5018.085f, -5152.899f, 2.65039f));
                    GuardWalk_01.Add(new Vector3(5038.566f, -5195.042f, 2.682085f));
                    GuardWalk_01.Add(new Vector3(5044.731f, -5215.362f, 3.057317f));
                    GuardWalk_01.Add(new Vector3(5036.879f, -5194.092f, 2.545181f));
                    GuardWalk_01.Add(new Vector3(5019.313f, -5157.417f, 2.574997f));
                    GuardWalk_01.Add(new Vector3(5020.292f, -5132.826f, 3.109585f));
                    GuardWalk_01.Add(new Vector3(5027.321f, -5120.981f, 4.317581f));

                    GuardWalk_02.Add(new Vector3(5119.485f, -5085.836f, 2.299197f));
                    GuardWalk_02.Add(new Vector3(5114.708f, -5108.212f, 2.1675f));
                    GuardWalk_02.Add(new Vector3(5112.895f, -5121.462f, 2.206454f));
                    GuardWalk_02.Add(new Vector3(5112.96f, -5140.31f, 2.199696f));
                    GuardWalk_02.Add(new Vector3(5112.614f, -5156.182f, 2.245853f));
                    GuardWalk_02.Add(new Vector3(5112.858f, -5175.816f, 2.313444f));
                    GuardWalk_02.Add(new Vector3(5113.223f, -5202.912f, 2.384449f));
                    GuardWalk_02.Add(new Vector3(5121.214f, -5209.073f, 2.665782f));
                    GuardWalk_02.Add(new Vector3(5134.446f, -5206.216f, 2.926885f));
                    GuardWalk_02.Add(new Vector3(5130.966f, -5208.709f, 2.978797f));
                    GuardWalk_02.Add(new Vector3(5117.441f, -5208.045f, 2.54545f));
                    GuardWalk_02.Add(new Vector3(5114.211f, -5199.12f, 2.352396f));
                    GuardWalk_02.Add(new Vector3(5112.896f, -5175.494f, 2.310411f));
                    GuardWalk_02.Add(new Vector3(5113.439f, -5154.506f, 2.263836f));
                    GuardWalk_02.Add(new Vector3(5113.521f, -5136.032f, 2.311946f));
                    GuardWalk_02.Add(new Vector3(5113.716f, -5116.948f, 2.209894f));

                    GuardWalk_03.Add(new Vector3(5013.922f, -5135.069f, 2.982546f));
                    GuardWalk_03.Add(new Vector3(4986.65f, -5151.049f, 2.530167f));
                    GuardWalk_03.Add(new Vector3(4989.745f, -5169.334f, 2.545022f));
                    GuardWalk_03.Add(new Vector3(5000.681f, -5182.458f, 2.514796f));
                    GuardWalk_03.Add(new Vector3(5017.758f, -5184.628f, 2.520133f));
                    GuardWalk_03.Add(new Vector3(5026.959f, -5173.516f, 2.783011f));
                    GuardWalk_03.Add(new Vector3(5020.555f, -5144.618f, 2.671165f));

                    vTarget_01 = new Vector3(5155.222f, -5128.624f, 1.295301f);

                    vTarget_02 = new Vector3(5042.745f, -5114.8f, 22.93991f);
                    iMobStarz = 52;
                    sMissionVar_01 = "IG_IslDJ_03";
                }
                else
                {
                    VectorList_01.Add(new Vector3(5030.289f, -5749.438f, 16.27629f)); fList_01.Add(142.1352f);
                    VectorList_01.Add(new Vector3(5012.663f, -5743.717f, 19.86789f)); fList_01.Add(323.4758f);
                    VectorList_01.Add(new Vector3(5003.215f, -5751.935f, 28.68034f)); fList_01.Add(48.53479f);
                    VectorList_01.Add(new Vector3(5023.134f, -5748.972f, 19.87768f)); fList_01.Add(276.0576f);
                    VectorList_01.Add(new Vector3(5001.348f, -5754.646f, 19.87576f)); fList_01.Add(149.9054f);
                    VectorList_01.Add(new Vector3(5009.038f, -5754.581f, 28.84526f)); fList_01.Add(149.7885f);

                    GuardWalk_01.Add(new Vector3(5002.911f, -5752.313f, 28.68233f));
                    GuardWalk_01.Add(new Vector3(5006.708f, -5746.745f, 28.68233f));
                    GuardWalk_01.Add(new Vector3(5009.672f, -5741.836f, 26.49426f));
                    GuardWalk_01.Add(new Vector3(5018.38f, -5747.015f, 24.2728f));
                    GuardWalk_01.Add(new Vector3(5009.93f, -5741.321f, 26.49229f));
                    GuardWalk_01.Add(new Vector3(5006.693f, -5746.122f, 28.68328f));

                    GuardWalk_02.Add(new Vector3(5013.232f, -5743.474f, 19.88034f));
                    GuardWalk_02.Add(new Vector3(5005.97f, -5740.077f, 19.88021f));
                    GuardWalk_02.Add(new Vector3(5003.674f, -5736.941f, 19.88022f));
                    GuardWalk_02.Add(new Vector3(5002.887f, -5734.158f, 19.8803f));
                    GuardWalk_02.Add(new Vector3(5004.678f, -5738.075f, 19.88023f));
                    GuardWalk_02.Add(new Vector3(5007.891f, -5741.285f, 19.8802f));

                    GuardWalk_03.Add(new Vector3(5030.402f, -5749.088f, 16.27834f));
                    GuardWalk_03.Add(new Vector3(5020.631f, -5762.595f, 16.27756f));
                    GuardWalk_03.Add(new Vector3(5004.514f, -5774.552f, 16.27845f));
                    GuardWalk_03.Add(new Vector3(5024.32f, -5745.851f, 16.28125f));

                    vTarget_01 = new Vector3(4985.809f, -5713.806f, 18.8802f);

                    vTarget_02 = new Vector3(5009.038f, -5754.581f, 28.84526f);

                    iMobStarz = 52;
                    sMissionVar_01 = "IG_IslDJ_04";
                    BeOnOff[0] = true;
                }
            }
            else if (iLocationX == 1)
            {
                if (iAssMissionList[0] > 4)
                    iMishWop = RandInt(0, 4);
                else
                    iMishWop = iAssMissionList[0];

                if (iMishWop == 0)
                {
                    VectorList_01.Add(new Vector3(1229.62f, -2921.219f, 17.33289f));    //--5
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(1253.167f, -2950.298f, 9.319255f));   //--4
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(1228.313f, -2924.687f, 9.319263f));   //--3
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(1219.501f, -2915.277f, 5.866065f));   //--2
                    fList_01.Add(337.1597f);
                    VectorList_01.Add(new Vector3(1222.668f, -2914.625f, 5.880469f));   //--1
                    fList_01.Add(131.4427f);
                    VectorList_01.Add(new Vector3(1231.332f, -2917.555f, 26.45622f));   //--0
                    fList_01.Add(131.4427f);

                    GuardWalk_01.Add(new Vector3(1228.313f, -2924.687f, 9.319263f));
                    GuardWalk_01.Add(new Vector3(1252.82f, -2923.144f, 9.319261f));
                    GuardWalk_01.Add(new Vector3(1252.724f, -2950.048f, 9.319261f));
                    GuardWalk_01.Add(new Vector3(1229.017f, -2950.106f, 9.319257f));
                    GuardWalk_01.Add(new Vector3(1228.458f, -2939.91f, 9.319262f));

                    GuardWalk_02.Add(new Vector3(1253.167f, -2950.298f, 9.319255f));
                    GuardWalk_02.Add(new Vector3(1228.614f, -2951.87f, 9.319256f));
                    GuardWalk_02.Add(new Vector3(1228.804f, -3002.856f, 9.319259f));
                    GuardWalk_02.Add(new Vector3(1252.686f, -3002.903f, 9.319256f));
                    GuardWalk_02.Add(new Vector3(1252.763f, -2950.377f, 9.319261f));

                    GuardWalk_03.Add(new Vector3(1229.62f, -2921.219f, 17.33289f));
                    GuardWalk_03.Add(new Vector3(1251.382f, -2921.088f, 17.33288f));

                    vTarget_01 = new Vector3(1192.2f, -3067.692f, 4.987493f);
                    vTarget_02 = new Vector3(1233.217f, -2915.801f, 26.45624f);
                    iMobStarz = 16;

                    vFuMiss = new Vector3(1174.633f, -3086.502f, 5.347713f);
                }
                else if (iMishWop == 1)
                {
                    VectorList_01.Add(new Vector3(19.64524f, -2688.488f, 12.50f));   //--5
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(48.22489f, -2745.141f, 12.508f));   //--4
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(20.65493f, -2675.646f, 12.008f));    //--3
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(34.01345f, -2679.244f, 12.035f));   //--2
                    fList_01.Add(358.159f);
                    VectorList_01.Add(new Vector3(27.48125f, -2688.801f, 12.008f));   //--1
                    fList_01.Add(89.52501f);
                    VectorList_01.Add(new Vector3(33.84007f, -2691.393f, 12.008f));   //--0
                    fList_01.Add(176.5982f);

                    GuardWalk_01.Add(new Vector3(34.44283f, -2674.603f, 12.06331f));
                    GuardWalk_01.Add(new Vector3(47.15094f, -2675.877f, 12.00943f));
                    GuardWalk_01.Add(new Vector3(46.7704f, -2684.993f, 12.00943f));
                    GuardWalk_01.Add(new Vector3(44.09134f, -2685.037f, 12.00943f));
                    GuardWalk_01.Add(new Vector3(43.92788f, -2675.145f, 17.15017f));
                    GuardWalk_01.Add(new Vector3(23.88951f, -2675.556f, 17.15017f));
                    GuardWalk_01.Add(new Vector3(23.56731f, -2685.437f, 12.00879f));
                    GuardWalk_01.Add(new Vector3(20.8575f, -2684.973f, 12.00879f));
                    GuardWalk_01.Add(new Vector3(20.65493f, -2675.646f, 12.00879f));

                    GuardWalk_02.Add(new Vector3(43.55402f, -2745.357f, 13.51919f));
                    GuardWalk_02.Add(new Vector3(48.22489f, -2745.141f, 12.0066f));
                    GuardWalk_02.Add(new Vector3(47.78152f, -2719.32f, 12.00674f));
                    GuardWalk_02.Add(new Vector3(19.62543f, -2719.374f, 12.00684f));
                    GuardWalk_02.Add(new Vector3(19.58252f, -2744.939f, 12.00709f));
                    GuardWalk_02.Add(new Vector3(24.58426f, -2745.261f, 13.51921f));
                    GuardWalk_02.Add(new Vector3(24.58426f, -2745.261f, 13.51921f));
                    GuardWalk_02.Add(new Vector3(19.58252f, -2744.939f, 12.00709f));
                    GuardWalk_02.Add(new Vector3(19.62543f, -2719.374f, 12.00684f));
                    GuardWalk_02.Add(new Vector3(47.78152f, -2719.32f, 12.00674f));
                    GuardWalk_02.Add(new Vector3(48.22489f, -2745.141f, 12.0066f));
                    GuardWalk_02.Add(new Vector3(43.55402f, -2745.357f, 13.51919f));

                    GuardWalk_03.Add(new Vector3(19.24374f, -2718.498f, 12.00685f));
                    GuardWalk_03.Add(new Vector3(19.64524f, -2688.488f, 12.00685f));
                    GuardWalk_03.Add(new Vector3(48.12241f, -2689.036f, 12.00683f));
                    GuardWalk_03.Add(new Vector3(47.77153f, -2718.917f, 12.0066f));

                    vTarget_01 = new Vector3(59.60139f, -2637.591f, 5.029f);
                    vTarget_02 = new Vector3(35.26506f, -2679.888f, 12.03f);

                    Vector3 vSteps = new Vector3(45.138f, -2723.31f, 5.00f);
                    Vector3 vStepsR = new Vector3(0.00f, 0.00f, -91.0648f);
                    BuildProp("prop_portasteps_02", vSteps, vStepsR, true, false);
                    iMobStarz = 6;

                    vFuMiss = new Vector3(59.46093f, -2619.733f, 5.504735f);
                }
                else if (iMishWop == 2)
                {
                    VectorList_01.Add(new Vector3(322.4924f, -1549.453f, 36.29724f));   //--5
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(332.1236f, -1593.688f, 29.29193f));   //--4
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(309.5382f, -1565.522f, 36.28808f));   //--3
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(346.4529f, -1569.449f, 36.27796f));   //--2
                    fList_01.Add(318.1562f);
                    VectorList_01.Add(new Vector3(324.7176f, -1585.714f, 32.71544f));   //--1
                    fList_01.Add(138.8346f);
                    VectorList_01.Add(new Vector3(326.7136f, -1583.937f, 36.29747f));   //--0
                    fList_01.Add(138.74f);

                    GuardWalk_01.Add(new Vector3(309.5382f, -1565.522f, 36.28808f));
                    GuardWalk_01.Add(new Vector3(330.5859f, -1582.785f, 36.28808f));

                    GuardWalk_02.Add(new Vector3(301.2746f, -1567.027f, 29.3291f));
                    GuardWalk_02.Add(new Vector3(323.8167f, -1539.903f, 29.28773f));
                    GuardWalk_02.Add(new Vector3(355.2028f, -1566.285f, 29.29217f));
                    GuardWalk_02.Add(new Vector3(332.1236f, -1593.688f, 29.29193f));

                    GuardWalk_03.Add(new Vector3(346.3667f, -1569.814f, 36.27857f));
                    GuardWalk_03.Add(new Vector3(335.5739f, -1582.018f, 36.28791f));
                    GuardWalk_03.Add(new Vector3(345.8018f, -1569.149f, 36.27539f));
                    GuardWalk_03.Add(new Vector3(322.4924f, -1549.453f, 36.29724f));

                    vTarget_01 = new Vector3(379.8796f, -1638.833f, 31.50078f); //-- Start Point.
                    vTarget_02 = new Vector3(329.1955f, -1581.062f, 36.28808f); //-- Exit Near Target.

                    iMobStarz = 31;

                    vFuMiss = new Vector3(408.8784f, -1674.746f, 28.64179f);
                }
                else if (iMishWop == 3)
                {
                    VectorList_01.Add(new Vector3(180.4981f, -2234.048f, 5.980174f));   //--5
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(179.8964f, -2232.37f, 5.97946f));   //--4
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(95.33917f, -2190.859f, 5.997694f));   //--3
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(168.4527f, -2223.325f, 7.236109f));   //--2
                    fList_01.Add(150.681f);
                    VectorList_01.Add(new Vector3(167.09f, -2221.467f, 13.38672f));   //--1
                    fList_01.Add(174.5936f);
                    VectorList_01.Add(new Vector3(166.1355f, -2213.007f, 13.38672f));   //--0
                    fList_01.Add(352.9091f);

                    GuardWalk_01.Add(new Vector3(175.1628f, -2189.65f, 6.219862f));
                    GuardWalk_01.Add(new Vector3(95.33917f, -2190.859f, 5.997694f));

                    GuardWalk_02.Add(new Vector3(92.0293f, -2231.113f, 6.033323f));
                    GuardWalk_02.Add(new Vector3(179.8964f, -2232.37f, 5.97946f));

                    GuardWalk_03.Add(new Vector3(179.9824f, -2191.904f, 6.513243f));
                    GuardWalk_03.Add(new Vector3(180.4981f, -2234.048f, 5.980174f));

                    vTarget_01 = new Vector3(231.6781f, -2188.885f, 7.87558f); //-- Start Point.
                    vTarget_02 = new Vector3(95.9416f, -2216.171f, 6.171199f); //-- Exit Near Target.

                    iMobStarz = 8;

                    vFuMiss = new Vector3(239.7962f, -2096.332f, 16.64877f);
                }
                else
                {
                    VectorList_01.Add(new Vector3(820.2464f, -2506.051f, 37.43614f));   //--5
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(949.2033f, -2522.715f, 48.29663f));   //--4
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(881.1595f, -2501.313f, 48.29713f));   //--3
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(874.5434f, -2500.339f, 48.28411f));   //--2
                    fList_01.Add(220.1823f);
                    VectorList_01.Add(new Vector3(894.6924f, -2538.095f, 52.30277f));   //--1
                    fList_01.Add(225.5563f);
                    VectorList_01.Add(new Vector3(866.3467f, -2506.64f, 48.31793f));   //--0
                    fList_01.Add(262.1452f);

                    GuardWalk_01.Add(new Vector3(951.6783f, -2507.288f, 48.29662f));
                    GuardWalk_01.Add(new Vector3(881.1595f, -2501.313f, 48.29713f));

                    GuardWalk_02.Add(new Vector3(883.374f, -2516.431f, 48.2971f));
                    GuardWalk_02.Add(new Vector3(949.2033f, -2522.715f, 48.29663f));

                    GuardWalk_03.Add(new Vector3(820.2464f, -2506.051f, 36.43614f));
                    GuardWalk_03.Add(new Vector3(843.4808f, -2508.547f, 36.59108f));
                    GuardWalk_03.Add(new Vector3(844.4509f, -2501.387f, 40.51944f));
                    GuardWalk_03.Add(new Vector3(849.8228f, -2501.901f, 40.68602f));
                    GuardWalk_03.Add(new Vector3(847.6412f, -2523.593f, 40.5252f));
                    GuardWalk_03.Add(new Vector3(849.8228f, -2501.901f, 40.68602f));
                    GuardWalk_03.Add(new Vector3(844.4509f, -2501.387f, 40.51944f));
                    GuardWalk_03.Add(new Vector3(843.4808f, -2508.547f, 36.59108f));

                    vTarget_01 = new Vector3(801.6285f, -2496.214f, 21.14066f); //-- Start Point.
                    vTarget_02 = new Vector3(871.4811f, -2511.318f, 48.30745f); //-- Exit Near Target.

                    iMobStarz = 1;

                    vFuMiss = new Vector3(764.6891f, -2490.405f, 19.42806f);
                }

                sMissionVar_01 = RandNPC(iMobStarz);
            }
            else if (iLocationX == 2)
            {
                if (iAssMissionList[1] > 4)
                    iMishWop = RandInt(0, 4);
                else
                    iMishWop = iAssMissionList[1];

                if (iMishWop == 0)
                {
                    VectorList_01.Add(new Vector3(472.6585f, -808.6378f, 42.5186f));   //--5
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(469.6671f, -751.8098f, 37.37757f));   //--4
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(455.6923f, -772.2094f, 27.35778f));   //--3
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(456.881f, -725.7477f, 27.35909f));   //--2
                    fList_01.Add(356.1181f);
                    VectorList_01.Add(new Vector3(462.9327f, -736.3919f, 27.3614f));   //--1
                    fList_01.Add(159.2728f);
                    VectorList_01.Add(new Vector3(463.3673f, -730.1653f, 27.35761f));   //--0
                    fList_01.Add(88.53651f);

                    GuardWalk_01.Add(new Vector3(456.7629f, -702.7166f, 27.36512f));
                    GuardWalk_01.Add(new Vector3(455.6923f, -772.2094f, 27.35778f));

                    GuardWalk_02.Add(new Vector3(469.4762f, -737.4404f, 37.37773f));
                    GuardWalk_02.Add(new Vector3(487.7828f, -737.6826f, 37.37757f));
                    GuardWalk_02.Add(new Vector3(487.3804f, -750.106f, 37.37757f));
                    GuardWalk_02.Add(new Vector3(469.6671f, -751.8098f, 37.37757f));

                    GuardWalk_03.Add(new Vector3(472.7426f, -786.6891f, 42.5186f));
                    GuardWalk_03.Add(new Vector3(472.6585f, -808.6378f, 42.5186f));

                    vTarget_01 = new Vector3(416.3363f, -713.1559f, 28.354f); //-- Start Point.
                    vTarget_02 = new Vector3(466.1119f, -735.4749f, 27.36441f); //-- Exit Near Target.

                    iMobStarz = 7;
                    vFuMiss = new Vector3(400.7948f, -728.7968f, 28.64635f);
                }
                else if (iMishWop == 1)
                {
                    VectorList_01.Add(new Vector3(65.09759f, -390.6096f, 39.92027f));   //--5
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(65.80093f, -345.8131f, 67.19714f));   //--4
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(47.5579f, -398.3995f, 73.94062f));   //--3
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(46.32808f, -417.696f, 45.55898f));   //--2
                    fList_01.Add(250.7595f);
                    VectorList_01.Add(new Vector3(45.11557f, -402.7439f, 55.28497f));   //--1
                    fList_01.Add(109.7192f);
                    VectorList_01.Add(new Vector3(36.69075f, -368.9121f, 55.28428f));   //--0
                    fList_01.Add(341.8449f);

                    GuardWalk_01.Add(new Vector3(46.80554f, -411.3244f, 73.94062f));
                    GuardWalk_01.Add(new Vector3(59.13193f, -382.0238f, 73.94208f));
                    GuardWalk_01.Add(new Vector3(54.37819f, -375.5727f, 73.94208f));
                    GuardWalk_01.Add(new Vector3(58.97313f, -383.6569f, 73.94208f));
                    GuardWalk_01.Add(new Vector3(47.5579f, -398.3995f, 73.94062f));

                    GuardWalk_02.Add(new Vector3(89.48793f, -355.7539f, 67.19714f));
                    GuardWalk_02.Add(new Vector3(65.80093f, -345.8131f, 67.19714f));

                    GuardWalk_03.Add(new Vector3(52.64137f, -427.5997f, 39.9211f));
                    GuardWalk_03.Add(new Vector3(33.33545f, -419.8749f, 39.92244f));
                    GuardWalk_03.Add(new Vector3(47.21172f, -383.8306f, 39.92105f));
                    GuardWalk_03.Add(new Vector3(65.09759f, -390.6096f, 39.92027f));

                    vTarget_01 = new Vector3(118.4199f, -362.7799f, 41.58885f); //-- Start Point.
                    vTarget_02 = new Vector3(42.3642f, -373.4995f, 55.28429f); //-- Exit Near Target.

                    Vector3 PropX = new Vector3(44.1962852f, -375.137268f, 54.2930298f);
                    Vector3 PropR = new Vector3(0.00f, 0.00f, -109.909622f);
                    BuildProp("prop_portacabin01", PropX, PropR, true, true);

                    PropX = new Vector3(67.2774124f, -357.792114f, 66.3006134f);
                    PropR = new Vector3(-90.00f, -71.00f, 0.00f);
                    BuildProp("prop_const_fence03a_cr", PropX, PropR, true, true);

                    PropX = new Vector3(61.1067352f, -370.916534f, 63.9689331f);
                    PropR = new Vector3(-89.00f, 109.711678f, -180.00f);
                    BuildProp("prop_const_fence03a_cr", PropX, PropR, true, true);

                    PropX = new Vector3(58.0884781f, -375.2005f, 64.1185989f);
                    PropR = new Vector3(0.00f, 0.00f, -19.1175747f);
                    BuildProp("prop_conc_blocks01a", PropX, PropR, true, true);

                    PropX = new Vector3(68.0418549f, -351.828827f, 66.3754883f);
                    PropR = new Vector3(-13.00f, -4.38115f, -18.9079647f);
                    BuildProp("prop_conc_blocks01a", PropX, PropR, true, true);

                    iMobStarz = 50;

                    vFuMiss = new Vector3(146.7832f, -350.9908f, 43.03316f);
                }
                else if (iMishWop == 2)
                {
                    VectorList_01.Add(new Vector3(-830.2202f, -1181.61f, 6.563109f));   //--5
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(-807.8983f, -1250.295f, 15.55804f));   //--4
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(-748.4064f, -1243.806f, 10.62637f));   //--3
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(-749.2515f, -1215.959f, 10.62637f));   //--2
                    fList_01.Add(250.1729f);
                    VectorList_01.Add(new Vector3(-769.4945f, -1224.638f, 10.62638f));   //--1
                    fList_01.Add(196.7793f);
                    VectorList_01.Add(new Vector3(-797.2293f, -1263.064f, 10.62328f));   //--0
                    fList_01.Add(267.6799f);

                    GuardWalk_01.Add(new Vector3(-750.7853f, -1242.718f, 10.62638f));
                    GuardWalk_01.Add(new Vector3(-768.506f, -1226.165f, 10.62637f));
                    GuardWalk_01.Add(new Vector3(-774.0214f, -1231.924f, 10.62399f));
                    GuardWalk_01.Add(new Vector3(-771.0255f, -1234.603f, 10.62399f));
                    GuardWalk_01.Add(new Vector3(-774.5523f, -1231.954f, 10.62399f));
                    GuardWalk_01.Add(new Vector3(-768.0485f, -1226.437f, 10.62637f));
                    GuardWalk_01.Add(new Vector3(-748.4064f, -1243.806f, 10.62637f));

                    GuardWalk_02.Add(new Vector3(-797.392f, -1258.829f, 15.55804f));
                    GuardWalk_02.Add(new Vector3(-783.0823f, -1241.732f, 15.55848f));
                    GuardWalk_02.Add(new Vector3(-796.5568f, -1259.465f, 15.55804f));
                    GuardWalk_02.Add(new Vector3(-807.8983f, -1250.295f, 15.55804f));

                    GuardWalk_03.Add(new Vector3(-806.1038f, -1202.531f, 6.934639f));
                    GuardWalk_03.Add(new Vector3(-823.16f, -1223.631f, 7.36058f));
                    GuardWalk_03.Add(new Vector3(-838.9916f, -1241.554f, 6.933933f));
                    GuardWalk_03.Add(new Vector3(-821.95f, -1221.632f, 7.329305f));
                    GuardWalk_03.Add(new Vector3(-805.6579f, -1201.917f, 6.934637f));
                    GuardWalk_03.Add(new Vector3(-830.2202f, -1181.61f, 6.563109f));

                    vTarget_01 = new Vector3(-821.5909f, -1267.316f, 4.150073f); //-- Start Point.
                    vTarget_02 = new Vector3(-805.0609f, -1256.821f, 10.62327f); //-- Exit Near Target.

                    Vector3 PropX = new Vector3(-815.161377f, -1204.63574f, 5.95f);
                    Vector3 PropR = new Vector3(0.00f, 0.00f, -129.962433f);
                    BuildProp("prop_lev_crate_01", PropX, PropR, true, true);

                    PropX = new Vector3(-817.414551f, -1207.32458f, 5.95f);
                    PropR = new Vector3(0.00f, 0.00f, 129.962433f);
                    BuildProp("prop_lev_crate_01", PropX, PropR, true, true);

                    PropX = new Vector3(-816.227905f, -1206.00659f, 8.26f);
                    PropR = new Vector3(0.00f, 0.00f, -130.349335f);
                    BuildProp("prop_lev_crate_01", PropX, PropR, true, true);

                    iMobStarz = 38;

                    vFuMiss = new Vector3(-766.8001f, -1299.866f, 4.492908f);
                }
                else if (iMishWop == 3)
                {
                    VectorList_01.Add(new Vector3(-277.645f, -308.2796f, 18.29003f));   //--5
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(-292.5435f, -304.275f, 10.06316f));   //--4
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(-297.4647f, -296.5092f, 10.06316f));   //--3
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(-285.6105f, -338.2589f, 18.28811f));   //--2
                    fList_01.Add(134.0289f);
                    VectorList_01.Add(new Vector3(-296.5644f, -294.7615f, 10.06316f));   //--1
                    fList_01.Add(182.6955f);
                    VectorList_01.Add(new Vector3(-291.7663f, -292.7603f, 10.06316f));   //--0
                    fList_01.Add(199.104f);

                    GuardWalk_01.Add(new Vector3(-289.8233f, -297.2211f, 10.06316f));
                    GuardWalk_01.Add(new Vector3(-290.0239f, -312.5032f, 10.06316f));
                    GuardWalk_01.Add(new Vector3(-290.5504f, -353.0921f, 10.0631f));
                    GuardWalk_01.Add(new Vector3(-292.1029f, -359.7104f, 10.0631f));
                    GuardWalk_01.Add(new Vector3(-295.4711f, -361.8761f, 10.0631f));
                    GuardWalk_01.Add(new Vector3(-298.9847f, -358.6346f, 10.0631f));
                    GuardWalk_01.Add(new Vector3(-299.1021f, -311.0461f, 10.06316f));
                    GuardWalk_01.Add(new Vector3(-297.4647f, -296.5092f, 10.06316f));

                    GuardWalk_02.Add(new Vector3(-295.0848f, -310.6173f, 10.06316f));
                    GuardWalk_02.Add(new Vector3(-296.6198f, -310.4763f, 10.06316f));
                    GuardWalk_02.Add(new Vector3(-296.5306f, -326.6769f, 18.28813f));
                    GuardWalk_02.Add(new Vector3(-297.6626f, -332.7889f, 18.28813f));
                    GuardWalk_02.Add(new Vector3(-296.6054f, -337.818f, 18.294f));
                    GuardWalk_02.Add(new Vector3(-296.5121f, -353.4188f, 10.0631f));
                    GuardWalk_02.Add(new Vector3(-292.8206f, -353.284f, 10.0631f));
                    GuardWalk_02.Add(new Vector3(-292.6532f, -336.6879f, 18.28812f));
                    GuardWalk_02.Add(new Vector3(-291.6863f, -331.7599f, 18.28812f));
                    GuardWalk_02.Add(new Vector3(-292.7159f, -327.2827f, 18.28813f));
                    GuardWalk_02.Add(new Vector3(-292.5435f, -304.275f, 10.06316f));

                    GuardWalk_03.Add(new Vector3(-278.4434f, -331.541f, 18.28813f));
                    GuardWalk_03.Add(new Vector3(-285.9347f, -331.1507f, 18.28813f));
                    GuardWalk_03.Add(new Vector3(-278.8092f, -330.1296f, 18.28813f));
                    GuardWalk_03.Add(new Vector3(-278.6689f, -316.9438f, 18.28978f));
                    GuardWalk_03.Add(new Vector3(-277.645f, -308.2796f, 18.29003f));

                    vTarget_01 = new Vector3(-246.1797f, -336.1305f, 28.97524f); //-- Start Point.
                    vTarget_02 = new Vector3(-295.3865f, -288.4021f, 10.06316f); //-- Exit Near Target.

                    iMobStarz = 9;

                    vFuMiss = new Vector3(-255.8934f, -334.3924f, 29.29095f);
                }
                else
                {
                    VectorList_01.Add(new Vector3(-1849.297f, -1231.631f, 13.01728f));   //--5
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(-1830.23f, -1234.019f, 13.01734f));   //--4
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(-1870.061f, -1208.122f, 13.01711f));   //--3
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(-1837.848f, -1201.714f, 14.30476f));   //--2
                    fList_01.Add(166.2297f);
                    VectorList_01.Add(new Vector3(-1821.772f, -1203.717f, 19.16464f));   //--1
                    fList_01.Add(132.5266f);
                    VectorList_01.Add(new Vector3(-1848.826f, -1200.298f, 19.14339f));   //--0
                    fList_01.Add(165.824f);

                    GuardWalk_01.Add(new Vector3(-1870.086f, -1215.344f, 13.01713f));
                    GuardWalk_01.Add(new Vector3(-1858.132f, -1217.874f, 13.01717f));
                    GuardWalk_01.Add(new Vector3(-1840.758f, -1231.264f, 13.01732f));
                    GuardWalk_01.Add(new Vector3(-1833.656f, -1237.782f, 13.01729f));
                    GuardWalk_01.Add(new Vector3(-1819.635f, -1239.65f, 13.01727f));
                    GuardWalk_01.Add(new Vector3(-1788.522f, -1200.065f, 13.0173f));
                    GuardWalk_01.Add(new Vector3(-1824.51f, -1168.362f, 13.01732f));
                    GuardWalk_01.Add(new Vector3(-1836.096f, -1168.824f, 13.01725f));
                    GuardWalk_01.Add(new Vector3(-1870.061f, -1208.122f, 13.01711f));

                    GuardWalk_02.Add(new Vector3(-1833.688f, -1231.561f, 13.01734f));
                    GuardWalk_02.Add(new Vector3(-1836.393f, -1226.08f, 13.01728f));
                    GuardWalk_02.Add(new Vector3(-1808.704f, -1197.679f, 13.01745f));
                    GuardWalk_02.Add(new Vector3(-1803.548f, -1202.021f, 14.30476f));
                    GuardWalk_02.Add(new Vector3(-1803.025f, -1206.546f, 14.30477f));
                    GuardWalk_02.Add(new Vector3(-1799.925f, -1210.426f, 13.01728f));
                    GuardWalk_02.Add(new Vector3(-1805.519f, -1216.99f, 16.06497f));
                    GuardWalk_02.Add(new Vector3(-1812.613f, -1224.225f, 19.16972f));
                    GuardWalk_02.Add(new Vector3(-1821.701f, -1230.137f, 16.07651f));
                    GuardWalk_02.Add(new Vector3(-1830.23f, -1234.019f, 13.01734f));

                    GuardWalk_03.Add(new Vector3(-1849.402f, -1232.195f, 13.01728f));
                    GuardWalk_03.Add(new Vector3(-1841.599f, -1238.597f, 13.01727f));
                    GuardWalk_03.Add(new Vector3(-1829.071f, -1239.79f, 13.01727f));
                    GuardWalk_03.Add(new Vector3(-1807.84f, -1244.064f, 13.01744f));
                    GuardWalk_03.Add(new Vector3(-1823.396f, -1263.139f, 9.821608f));
                    GuardWalk_03.Add(new Vector3(-1832.576f, -1255.504f, 8.615788f));
                    GuardWalk_03.Add(new Vector3(-1851.096f, -1246.4f, 8.615793f));
                    GuardWalk_03.Add(new Vector3(-1858.264f, -1242.085f, 8.620294f));
                    GuardWalk_03.Add(new Vector3(-1849.297f, -1231.631f, 13.01728f));

                    vTarget_01 = new Vector3(-1749.522f, -1128.634f, 12.09095f); //-- Start Point.
                    vTarget_02 = new Vector3(-1845.067f, -1196.215f, 19.18509f); //-- Exit Near Target.

                    iMobStarz = 10;

                    vFuMiss = new Vector3(-1637.61f, -990.769f, 12.50938f);
                }

                sMissionVar_01 = RandNPC(iMobStarz);
            }
            else if (iLocationX == 3)
            {
                if (iAssMissionList[2] > 4)
                    iMishWop = RandInt(0, 4);
                else
                    iMishWop = iAssMissionList[2];

                if (iMishWop == 0)
                {
                    VectorList_01.Add(new Vector3(-2193.282f, 235.5259f, 184.6018f));   //--5
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(-2223.777f, 276.0439f, 198.1041f));   //--4
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(-2202.147f, 211.6152f, 194.6015f));   //--3
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(-2175.842f, 230.6704f, 184.6018f));   //--2
                    fList_01.Add(91.44373f);
                    VectorList_01.Add(new Vector3(-2182.791f, 225.1664f, 184.6018f));   //--1
                    fList_01.Add(117.0788f);
                    VectorList_01.Add(new Vector3(-2164.615f, 215.312f, 184.6018f));   //--0
                    fList_01.Add(194.0452f);

                    GuardWalk_01.Add(new Vector3(-2193.12f, 214.8187f, 194.6015f));
                    GuardWalk_01.Add(new Vector3(-2187.273f, 200.6972f, 194.6015f));
                    GuardWalk_01.Add(new Vector3(-2195.246f, 197.4945f, 194.6015f));
                    GuardWalk_01.Add(new Vector3(-2202.147f, 211.6152f, 194.6015f));

                    GuardWalk_02.Add(new Vector3(-2205.943f, 284.1791f, 198.1042f));
                    GuardWalk_02.Add(new Vector3(-2190.154f, 249.9319f, 198.1042f));
                    GuardWalk_02.Add(new Vector3(-2193.155f, 248.5463f, 198.1042f));
                    GuardWalk_02.Add(new Vector3(-2195.564f, 254.7708f, 198.1041f));
                    GuardWalk_02.Add(new Vector3(-2211.713f, 247.9421f, 198.1041f));
                    GuardWalk_02.Add(new Vector3(-2223.777f, 276.0439f, 198.1041f));

                    GuardWalk_03.Add(new Vector3(-2181.586f, 241.0944f, 184.6015f));
                    GuardWalk_03.Add(new Vector3(-2183.65f, 247.7438f, 184.6018f));
                    GuardWalk_03.Add(new Vector3(-2167.301f, 254.9386f, 184.6014f));
                    GuardWalk_03.Add(new Vector3(-2162.183f, 251.9092f, 184.6014f));
                    GuardWalk_03.Add(new Vector3(-2151.097f, 223.4035f, 184.6018f));
                    GuardWalk_03.Add(new Vector3(-2158.881f, 219.6353f, 184.6018f));
                    GuardWalk_03.Add(new Vector3(-2175.402f, 216.5356f, 184.6018f));
                    GuardWalk_03.Add(new Vector3(-2181.213f, 225.0541f, 184.6017f));
                    GuardWalk_03.Add(new Vector3(-2188.713f, 223.2862f, 184.6018f));
                    GuardWalk_03.Add(new Vector3(-2192.207f, 230.9244f, 184.6018f));
                    GuardWalk_03.Add(new Vector3(-2193.282f, 235.5259f, 184.6018f));

                    vTarget_01 = new Vector3(-2292.242f, 368.3256f, 173.6016f); //-- Start Point.
                    vTarget_02 = new Vector3(-2173.801f, 212.1749f, 184.6018f); //-- Exit Near Target.

                    iMobStarz = 13;
                    vFuMiss = new Vector3(-2289.002f, 382.1094f, 173.959f);
                }
                else if (iMishWop == 1)
                {
                    VectorList_01.Add(new Vector3(-1684.6f, -209.7332f, 57.53469f));   //--5
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(-1708.826f, -240.1459f, 54.11729f));   //--4
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(-1690.386f, -217.1109f, 57.54454f));   //--3
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(-1697.421f, -233.6458f, 55.70928f));   //--2
                    fList_01.Add(2.999983f);
                    VectorList_01.Add(new Vector3(-1724.445f, -241.228f, 53.95118f));   //--1
                    fList_01.Add(98.57713f);
                    VectorList_01.Add(new Vector3(-1719.305f, -235.0199f, 55.10064f));   //--0
                    fList_01.Add(0.00f);

                    GuardWalk_01.Add(new Vector3(-1696.339f, -231.1925f, 56f));
                    GuardWalk_01.Add(new Vector3(-1692.168f, -214.6881f, 57.5444f));
                    GuardWalk_01.Add(new Vector3(-1716.279f, -215.0625f, 57.53803f));
                    GuardWalk_01.Add(new Vector3(-1734.436f, -211.6512f, 57.45734f));
                    GuardWalk_01.Add(new Vector3(-1738.01f, -242.2859f, 53.65525f));
                    GuardWalk_01.Add(new Vector3(-1730.969f, -259.2317f, 51.58413f));
                    GuardWalk_01.Add(new Vector3(-1707.515f, -241.5851f, 54.14204f));
                    GuardWalk_01.Add(new Vector3(-1695.752f, -231.155f, 56.06041f));
                    GuardWalk_01.Add(new Vector3(-1690.386f, -217.1109f, 57.54454f));

                    GuardWalk_02.Add(new Vector3(-1712.414f, -247.3833f, 53.19257f));
                    GuardWalk_02.Add(new Vector3(-1733.539f, -259.792f, 51.58722f));
                    GuardWalk_02.Add(new Vector3(-1738.586f, -236.0341f, 54.09969f));
                    GuardWalk_02.Add(new Vector3(-1732.834f, -211.2153f, 57.50314f));
                    GuardWalk_02.Add(new Vector3(-1741.738f, -203.749f, 57.49961f));
                    GuardWalk_02.Add(new Vector3(-1754.511f, -192.491f, 57.54516f));
                    GuardWalk_02.Add(new Vector3(-1785.649f, -219.863f, 52.15072f));
                    GuardWalk_02.Add(new Vector3(-1771.741f, -230.7688f, 52.77929f));
                    GuardWalk_02.Add(new Vector3(-1759.96f, -235.5635f, 53.00547f));
                    GuardWalk_02.Add(new Vector3(-1745.87f, -239.4451f, 53.40018f));
                    GuardWalk_02.Add(new Vector3(-1726.956f, -241.0094f, 53.91877f));
                    GuardWalk_02.Add(new Vector3(-1708.826f, -240.1459f, 54.11729f));

                    GuardWalk_03.Add(new Vector3(-1685.734f, -209.1683f, 57.529f));
                    GuardWalk_03.Add(new Vector3(-1700.192f, -214.8236f, 57.47515f));
                    GuardWalk_03.Add(new Vector3(-1720.822f, -213.317f, 57.54206f));
                    GuardWalk_03.Add(new Vector3(-1735.292f, -209.2518f, 57.47928f));
                    GuardWalk_03.Add(new Vector3(-1742.708f, -203.6408f, 57.46876f));
                    GuardWalk_03.Add(new Vector3(-1749.761f, -193.5887f, 57.54453f));
                    GuardWalk_03.Add(new Vector3(-1749.049f, -186.0264f, 57.54453f));
                    GuardWalk_03.Add(new Vector3(-1740.429f, -173.0496f, 57.811f));
                    GuardWalk_03.Add(new Vector3(-1732.955f, -168.3997f, 58.54979f));
                    GuardWalk_03.Add(new Vector3(-1716.589f, -166.9732f, 57.50301f));
                    GuardWalk_03.Add(new Vector3(-1709.482f, -163.2827f, 57.4664f));
                    GuardWalk_03.Add(new Vector3(-1702.274f, -152.3726f, 57.45462f));
                    GuardWalk_03.Add(new Vector3(-1691.398f, -158.583f, 57.6211f));
                    GuardWalk_03.Add(new Vector3(-1684.761f, -168.9742f, 57.49302f));
                    GuardWalk_03.Add(new Vector3(-1679.721f, -185.9232f, 57.53905f));
                    GuardWalk_03.Add(new Vector3(-1679.45f, -199.283f, 57.54282f));
                    GuardWalk_03.Add(new Vector3(-1684.6f, -209.7332f, 57.53469f));

                    vTarget_01 = new Vector3(-1828.877f, -234.5518f, 39.79652f); //-- Start Point.
                    vTarget_02 = new Vector3(-1680.146f, -263.8997f, 51.88333f); //-- Exit Near Target.

                    iMobStarz = 39;

                    vFuMiss = new Vector3(-1842.027f, -237.2443f, 39.47428f);
                }
                else if (iMishWop == 2)
                {
                    VectorList_01.Add(new Vector3(-1322.103f, 31.90036f, 53.53466f));   //--5
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(-1362.258f, 111.99f, 60.62912f));   //--4
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(-1400.993f, 90.64942f, 53.70214f));   //--3
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(-1326.336f, 59.92653f, 53.54417f));   //--2
                    fList_01.Add(270.3112f);
                    VectorList_01.Add(new Vector3(-1335.88f, 44.74322f, 55.24566f));   //--1
                    fList_01.Add(281.351f);
                    VectorList_01.Add(new Vector3(-1338.219f, 40.63132f, 60.45979f));   //--0
                    fList_01.Add(225.7309f);

                    GuardWalk_01.Add(new Vector3(-1399.9f, 66.3326f, 53.34227f));
                    GuardWalk_01.Add(new Vector3(-1393.094f, 14.19838f, 53.2293f));
                    GuardWalk_01.Add(new Vector3(-1382.317f, 16.93267f, 53.57621f));
                    GuardWalk_01.Add(new Vector3(-1378.956f, 16.70747f, 53.51094f));
                    GuardWalk_01.Add(new Vector3(-1373.589f, 13.51838f, 53.42646f));
                    GuardWalk_01.Add(new Vector3(-1366.751f, 23.72099f, 53.77364f));
                    GuardWalk_01.Add(new Vector3(-1355.669f, 21.30159f, 53.35223f));
                    GuardWalk_01.Add(new Vector3(-1339.363f, 23.18568f, 53.33221f));
                    GuardWalk_01.Add(new Vector3(-1334.062f, 24.8021f, 53.5796f));
                    GuardWalk_01.Add(new Vector3(-1335.095f, 39.26785f, 53.56892f));
                    GuardWalk_01.Add(new Vector3(-1337.551f, 44.55224f, 55.24564f));
                    GuardWalk_01.Add(new Vector3(-1341.005f, 59.07327f, 55.24566f));
                    GuardWalk_01.Add(new Vector3(-1339.755f, 57.23912f, 55.24565f));
                    GuardWalk_01.Add(new Vector3(-1340.758f, 72.91788f, 55.24566f));
                    GuardWalk_01.Add(new Vector3(-1338.594f, 73.87442f, 55.24635f));
                    GuardWalk_01.Add(new Vector3(-1339.579f, 80.82087f, 54.30826f));
                    GuardWalk_01.Add(new Vector3(-1341.292f, 83.82114f, 54.47037f));
                    GuardWalk_01.Add(new Vector3(-1343.281f, 106.0034f, 56.14111f));
                    GuardWalk_01.Add(new Vector3(-1345.647f, 126.3551f, 56.23872f));
                    GuardWalk_01.Add(new Vector3(-1355.008f, 144.4275f, 56.2575f));
                    GuardWalk_01.Add(new Vector3(-1379.028f, 142.8582f, 56.08464f));
                    GuardWalk_01.Add(new Vector3(-1385.638f, 140.1001f, 55.89283f));
                    GuardWalk_01.Add(new Vector3(-1384.781f, 108.8661f, 54.98751f));
                    GuardWalk_01.Add(new Vector3(-1391.122f, 106.8313f, 54.66446f));
                    GuardWalk_01.Add(new Vector3(-1394.105f, 105.338f, 54.43337f));
                    GuardWalk_01.Add(new Vector3(-1397.381f, 102.0704f, 54.08099f));
                    GuardWalk_01.Add(new Vector3(-1400.337f, 96.6853f, 53.79763f));
                    GuardWalk_01.Add(new Vector3(-1400.993f, 90.64942f, 53.70214f));

                    GuardWalk_02.Add(new Vector3(-1359.25f, 109.761f, 60.62912f));
                    GuardWalk_02.Add(new Vector3(-1358.956f, 100.3841f, 60.62912f));
                    GuardWalk_02.Add(new Vector3(-1358.079f, 94.08092f, 60.62912f));
                    GuardWalk_02.Add(new Vector3(-1364.079f, 94.70335f, 60.62912f));
                    GuardWalk_02.Add(new Vector3(-1364.38f, 108.2094f, 60.62912f));
                    GuardWalk_02.Add(new Vector3(-1362.258f, 111.99f, 60.62912f));

                    GuardWalk_03.Add(new Vector3(-1329.007f, 108.6033f, 56.48982f));
                    GuardWalk_03.Add(new Vector3(-1322.103f, 31.90036f, 53.53466f));

                    vTarget_01 = new Vector3(-1297.746f, -29.46151f, 47.84842f); //-- Start Point.
                    vTarget_02 = new Vector3(-1343.658f, 41.14661f, 60.45583f); //-- Exit Near Target.

                    iMobStarz = 46;

                    vFuMiss = new Vector3(-1321.412f, -32.89452f, 48.9683f);
                }
                else if (iMishWop == 3)
                {
                    VectorList_01.Add(new Vector3(-1917.792f, 2076.364f, 140.3837f));   //--5
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(-1903.96f, 2091.038f, 140.3857f));   //--4
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(-1903.564f, 2092.86f, 140.3861f));   //--3
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(-1874.738f, 2089.304f, 140.9944f));   //--2
                    fList_01.Add(319.0304f);
                    VectorList_01.Add(new Vector3(-1854.385f, 2068.078f, 141.0906f));   //--1
                    fList_01.Add(173.2433f);
                    VectorList_01.Add(new Vector3(-1901.163f, 2092.905f, 140.3887f));   //--0
                    fList_01.Add(13.10736f);

                    GuardWalk_01.Add(new Vector3(-1917.044f, 2076.618f, 140.3836f));
                    GuardWalk_01.Add(new Vector3(-1903.564f, 2092.86f, 140.3861f));

                    GuardWalk_02.Add(new Vector3(-1879.473f, 2091.383f, 140.9938f));
                    GuardWalk_02.Add(new Vector3(-1863.216f, 2082.07f, 140.9942f));
                    GuardWalk_02.Add(new Vector3(-1865.948f, 2071.529f, 140.9967f));
                    GuardWalk_02.Add(new Vector3(-1883.579f, 2075.255f, 140.9974f));
                    GuardWalk_02.Add(new Vector3(-1903.96f, 2091.038f, 140.3857f));

                    GuardWalk_03.Add(new Vector3(-1897.665f, 2058.754f, 140.9139f));
                    GuardWalk_03.Add(new Vector3(-1917.792f, 2076.364f, 140.3837f));

                    vTarget_01 = new Vector3(-1885.544f, 1965.577f, 143.0124f); //-- Start Point.
                    vTarget_02 = new Vector3(-1893.668f, 2075.75f, 140.9977f); //-- Exit Near Target.

                    iMobStarz = 29;

                    vFuMiss = new Vector3(-1864.986f, 1959.259f, 143.7409f);
                }
                else
                {
                    VectorList_01.Add(new Vector3(-3023.458f, 53.66692f, 11.60313f));   //--5
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(-2963.148f, 52.59982f, 11.6085f));   //--4
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(-3008.228f, 12.22274f, 7.085264f));   //--3
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(-3035.323f, 61.27785f, 11.60313f));   //--2
                    fList_01.Add(67.78362f);
                    VectorList_01.Add(new Vector3(-3017.087f, 47.91266f, 11.60312f));   //--1
                    fList_01.Add(150.8523f);
                    VectorList_01.Add(new Vector3(-3029.618f, 60.41986f, 16.11314f));   //--0
                    fList_01.Add(111.0933f);

                    GuardWalk_01.Add(new Vector3(-3016.97f, 16.51763f, 6.705266f));
                    GuardWalk_01.Add(new Vector3(-3031.105f, 23.01101f, 10.11841f));
                    GuardWalk_01.Add(new Vector3(-3025.127f, 35.15769f, 10.11779f));
                    GuardWalk_01.Add(new Vector3(-3026.633f, 37.19355f, 10.11778f));
                    GuardWalk_01.Add(new Vector3(-3024.499f, 43.38901f, 10.11779f));
                    GuardWalk_01.Add(new Vector3(-3020.429f, 52.10837f, 11.60314f));
                    GuardWalk_01.Add(new Vector3(-3002.373f, 42.45235f, 11.6302f));
                    GuardWalk_01.Add(new Vector3(-2999.926f, 45.96546f, 11.6085f));
                    GuardWalk_01.Add(new Vector3(-2996.425f, 44.29176f, 11.606f));
                    GuardWalk_01.Add(new Vector3(-2998.59f, 38.51485f, 8.603334f));
                    GuardWalk_01.Add(new Vector3(-2995.228f, 37.27494f, 7.958846f));
                    GuardWalk_01.Add(new Vector3(-3008.228f, 12.22274f, 7.085264f));

                    GuardWalk_02.Add(new Vector3(-2962.402f, 55.89622f, 11.6085f));
                    GuardWalk_02.Add(new Vector3(-2967.744f, 64.93795f, 11.6085f));
                    GuardWalk_02.Add(new Vector3(-2968.336f, 71.34634f, 11.53587f));
                    GuardWalk_02.Add(new Vector3(-2963.681f, 74.33125f, 11.39804f));
                    GuardWalk_02.Add(new Vector3(-2939.467f, 63.2231f, 12.27784f));
                    GuardWalk_02.Add(new Vector3(-2924.334f, 55.33182f, 11.04195f));
                    GuardWalk_02.Add(new Vector3(-2924.985f, 46.85469f, 11.60516f));
                    GuardWalk_02.Add(new Vector3(-2930.876f, 34.74577f, 11.60752f));
                    GuardWalk_02.Add(new Vector3(-2937.264f, 19.42201f, 11.61003f));
                    GuardWalk_02.Add(new Vector3(-2987.228f, 42.28254f, 11.60849f));
                    GuardWalk_02.Add(new Vector3(-2988.122f, 40.62498f, 11.60306f));
                    GuardWalk_02.Add(new Vector3(-2999.879f, 45.80571f, 11.6085f));
                    GuardWalk_02.Add(new Vector3(-3003.888f, 42.82432f, 11.62649f));
                    GuardWalk_02.Add(new Vector3(-3033.602f, 59.71888f, 11.60313f));
                    GuardWalk_02.Add(new Vector3(-3064.749f, 92.10178f, 11.60836f));
                    GuardWalk_02.Add(new Vector3(-3060.458f, 97.07211f, 12.15885f));
                    GuardWalk_02.Add(new Vector3(-3047.299f, 107.7877f, 12.34625f));
                    GuardWalk_02.Add(new Vector3(-3026.591f, 90.21472f, 12.34663f));
                    GuardWalk_02.Add(new Vector3(-3023.905f, 87.06458f, 11.65143f));
                    GuardWalk_02.Add(new Vector3(-3017.124f, 81.91355f, 11.6752f));
                    GuardWalk_02.Add(new Vector3(-3011.966f, 82.15981f, 11.68586f));
                    GuardWalk_02.Add(new Vector3(-3003.249f, 83.73952f, 11.59328f));
                    GuardWalk_02.Add(new Vector3(-2983.661f, 72.34309f, 11.57396f));
                    GuardWalk_02.Add(new Vector3(-2975.731f, 63.75891f, 11.6085f));
                    GuardWalk_02.Add(new Vector3(-2976.61f, 59.97843f, 11.6085f));
                    GuardWalk_02.Add(new Vector3(-2963.148f, 52.59982f, 11.6085f));

                    GuardWalk_03.Add(new Vector3(-3035.562f, 61.8787f, 11.60313f));
                    GuardWalk_03.Add(new Vector3(-3030.359f, 72.34447f, 12.90223f));
                    GuardWalk_03.Add(new Vector3(-3032.417f, 75.52391f, 12.90223f));
                    GuardWalk_03.Add(new Vector3(-3040.525f, 75.92637f, 12.81855f));
                    GuardWalk_03.Add(new Vector3(-3061.576f, 96.1216f, 12.15868f));
                    GuardWalk_03.Add(new Vector3(-3050.11f, 107.5771f, 12.34624f));
                    GuardWalk_03.Add(new Vector3(-3064.66f, 91.81219f, 11.60813f));
                    GuardWalk_03.Add(new Vector3(-3031.909f, 58.83051f, 11.60313f));
                    GuardWalk_03.Add(new Vector3(-3023.458f, 53.66692f, 11.60313f));

                    vTarget_01 = new Vector3(-2890.587f, -6.512034f, 6.963f); //-- Start Point.
                    vTarget_02 = new Vector3(-3024.93f, 61.46458f, 16.11314f); //-- Exit Near Target.

                    iMobStarz = 12;

                    vFuMiss = new Vector3(-2831.061f, 38.20364f, 14.14951f);
                }

                sMissionVar_01 = RandNPC(iMobStarz);
            }
            else if (iLocationX == 4)
            {
                if (iAssMissionList[3] > 4)
                    iMishWop = RandInt(0, 4);
                else
                    iMishWop = iAssMissionList[3];

                if (iMishWop == 0)
                {
                    VectorList_01.Add(new Vector3(1252.049f, 320.0551f, 85.9905f));   //--5
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(1272.008f, 340.5941f, 81.99088f));   //--4
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(1250.756f, 306.1347f, 81.99088f));   //--3
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(1266.325f, 331.7076f, 81.99087f));   //--2
                    fList_01.Add(141.3652f);
                    VectorList_01.Add(new Vector3(1248.288f, 313.2198f, 85.99055f));   //--1
                    fList_01.Add(81.07424f);
                    VectorList_01.Add(new Vector3(1257.96f, 307.1272f, 85.99054f));   //--0
                    fList_01.Add(147.3938f);

                    GuardWalk_01.Add(new Vector3(1274.831f, 340.8813f, 81.99088f));
                    GuardWalk_01.Add(new Vector3(1292.302f, 325.9212f, 81.99088f));
                    GuardWalk_01.Add(new Vector3(1269.854f, 294.8071f, 81.99088f));
                    GuardWalk_01.Add(new Vector3(1250.756f, 306.1347f, 81.99088f));

                    GuardWalk_02.Add(new Vector3(1250.677f, 306.6872f, 81.99088f));
                    GuardWalk_02.Add(new Vector3(1229.07f, 320.3226f, 81.99088f));
                    GuardWalk_02.Add(new Vector3(1252.581f, 352.3154f, 81.99088f));
                    GuardWalk_02.Add(new Vector3(1272.008f, 340.5941f, 81.99088f));

                    GuardWalk_03.Add(new Vector3(1261.513f, 335.7514f, 85.99055f));
                    GuardWalk_03.Add(new Vector3(1271.821f, 328.9999f, 85.99055f));
                    GuardWalk_03.Add(new Vector3(1262.331f, 313.6626f, 85.99058f));
                    GuardWalk_03.Add(new Vector3(1252.049f, 320.0551f, 85.9905f));

                    vTarget_01 = new Vector3(1149.714f, 280.4417f, 80.12628f); //-- Start Point.
                    vTarget_02 = new Vector3(1261.124f, 310.6546f, 85.99054f); //-- Exit Near Target.

                    iMobStarz = 2;
                    vFuMiss = new Vector3(1102.137f, 259.7896f, 80.34773f);
                }
                else if (iMishWop == 1)
                {
                    VectorList_01.Add(new Vector3(2749.39f, 1487.837f, 30.79178f));   //--5
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(2737.501f, 1464.713f, 38.28245f));   //--4
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(2716.034f, 1503.323f, 42.24905f));   //--3
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(2739.402f, 1489.967f, 45.29512f));   //--2
                    fList_01.Add(72.30518f);
                    VectorList_01.Add(new Vector3(2715.213f, 1502.91f, 42.24908f));   //--1
                    fList_01.Add(147.3279f);
                    VectorList_01.Add(new Vector3(2710.728f, 1513.976f, 44.46539f));   //--0
                    fList_01.Add(83.04913f);

                    GuardWalk_01.Add(new Vector3(2716.129f, 1504.041f, 42.24908f));
                    GuardWalk_01.Add(new Vector3(2716.006f, 1500.687f, 42.24792f));
                    GuardWalk_01.Add(new Vector3(2713.639f, 1490.468f, 42.24908f));
                    GuardWalk_01.Add(new Vector3(2727.346f, 1486.386f, 42.24928f));
                    GuardWalk_01.Add(new Vector3(2733.738f, 1484.581f, 45.29513f));
                    GuardWalk_01.Add(new Vector3(2733.411f, 1481.977f, 45.29577f));
                    GuardWalk_01.Add(new Vector3(2737.539f, 1481.092f, 45.29577f));
                    GuardWalk_01.Add(new Vector3(2742.041f, 1498.155f, 45.31561f));
                    GuardWalk_01.Add(new Vector3(2738.764f, 1504.34f, 45.29539f));
                    GuardWalk_01.Add(new Vector3(2741.372f, 1514.76f, 45.29513f));
                    GuardWalk_01.Add(new Vector3(2735.535f, 1516.769f, 42.24856f));
                    GuardWalk_01.Add(new Vector3(2720.756f, 1520.449f, 42.24905f));
                    GuardWalk_01.Add(new Vector3(2716.034f, 1503.323f, 42.24905f));

                    GuardWalk_02.Add(new Vector3(2742.201f, 1481.54f, 38.28428f));
                    GuardWalk_02.Add(new Vector3(2742.236f, 1484.91f, 38.2868f));
                    GuardWalk_02.Add(new Vector3(2744.685f, 1493.659f, 38.28878f));
                    GuardWalk_02.Add(new Vector3(2745.892f, 1496.063f, 38.28703f));
                    GuardWalk_02.Add(new Vector3(2750.488f, 1511.828f, 38.28703f));
                    GuardWalk_02.Add(new Vector3(2746.019f, 1496.152f, 38.28718f));
                    GuardWalk_02.Add(new Vector3(2744.494f, 1493.08f, 38.2868f));
                    GuardWalk_02.Add(new Vector3(2741.634f, 1483.431f, 38.29844f));
                    GuardWalk_02.Add(new Vector3(2742.239f, 1481.693f, 38.28377f));
                    GuardWalk_02.Add(new Vector3(2737.501f, 1464.713f, 38.28245f));

                    GuardWalk_03.Add(new Vector3(2756.688f, 1486.927f, 30.79179f));
                    GuardWalk_03.Add(new Vector3(2780.408f, 1575.894f, 30.79191f));
                    GuardWalk_03.Add(new Vector3(2773.795f, 1577.714f, 30.79192f));
                    GuardWalk_03.Add(new Vector3(2749.39f, 1487.837f, 30.79178f));

                    vTarget_01 = new Vector3(2747.758f, 1559.025f, 23.50097f); //-- Start Point.
                    vTarget_02 = new Vector3(2723.476f, 1510.76f, 44.55572f); //-- Exit Near Target.

                    iMobStarz = 47;

                    vFuMiss = new Vector3(2685.917f, 1610.47f, 24.07866f);
                }
                else if (iMishWop == 2)
                {
                    VectorList_01.Add(new Vector3(2502.197f, -428.9225f, 114.0905f));   //--5
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(2512.221f, -352.3284f, 114.0875f));   //--4
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(2473.686f, -348.1714f, 109.5219f));   //--3
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(2495.181f, -401.2391f, 114.0868f));   //--2
                    fList_01.Add(28.69302f);
                    VectorList_01.Add(new Vector3(2486.144f, -352.1967f, 114.0861f));   //--1
                    fList_01.Add(74.73852f);
                    VectorList_01.Add(new Vector3(2467.513f, -344.0601f, 109.5219f));   //--0
                    fList_01.Add(86.07456f);

                    GuardWalk_01.Add(new Vector3(2466.756f, -357.4921f, 109.5219f));
                    GuardWalk_01.Add(new Vector3(2460.675f, -363.1433f, 109.522f));
                    GuardWalk_01.Add(new Vector3(2461.143f, -373.9704f, 109.5218f));
                    GuardWalk_01.Add(new Vector3(2463.292f, -376.8359f, 109.5218f));
                    GuardWalk_01.Add(new Vector3(2463.404f, -396.2715f, 109.522f));
                    GuardWalk_01.Add(new Vector3(2462.222f, -400.6283f, 109.5221f));
                    GuardWalk_01.Add(new Vector3(2462.864f, -405.1978f, 109.5221f));
                    GuardWalk_01.Add(new Vector3(2472.124f, -408.046f, 109.5221f));
                    GuardWalk_01.Add(new Vector3(2479.847f, -399.734f, 109.5221f));
                    GuardWalk_01.Add(new Vector3(2479.611f, -391.726f, 109.5221f));
                    GuardWalk_01.Add(new Vector3(2472.891f, -391.7273f, 109.5221f));
                    GuardWalk_01.Add(new Vector3(2473.624f, -376.7001f, 109.522f));
                    GuardWalk_01.Add(new Vector3(2480.025f, -376.3521f, 109.5221f));
                    GuardWalk_01.Add(new Vector3(2479.721f, -368.9119f, 109.5221f));
                    GuardWalk_01.Add(new Vector3(2474.433f, -362.9229f, 109.5219f));
                    GuardWalk_01.Add(new Vector3(2473.686f, -348.1714f, 109.5219f));

                    GuardWalk_02.Add(new Vector3(2512.194f, -358.8307f, 114.0873f));
                    GuardWalk_02.Add(new Vector3(2506.969f, -364.6768f, 114.0872f));
                    GuardWalk_02.Add(new Vector3(2492.725f, -365.5279f, 114.0866f));
                    GuardWalk_02.Add(new Vector3(2487.476f, -360.584f, 114.0864f));
                    GuardWalk_02.Add(new Vector3(2487.479f, -345.9434f, 114.086f));
                    GuardWalk_02.Add(new Vector3(2492.106f, -341.3466f, 114.086f));
                    GuardWalk_02.Add(new Vector3(2499.621f, -340.4717f, 114.0872f));
                    GuardWalk_02.Add(new Vector3(2492.786f, -340.835f, 114.086f));
                    GuardWalk_02.Add(new Vector3(2487.385f, -346.5126f, 114.086f));
                    GuardWalk_02.Add(new Vector3(2487.315f, -359.8349f, 114.0864f));
                    GuardWalk_02.Add(new Vector3(2492.966f, -365.4258f, 114.0867f));
                    GuardWalk_02.Add(new Vector3(2505.558f, -365.2966f, 114.087f));
                    GuardWalk_02.Add(new Vector3(2512.009f, -358.9853f, 114.0873f));
                    GuardWalk_02.Add(new Vector3(2512.221f, -352.3284f, 114.0875f));

                    GuardWalk_03.Add(new Vector3(2492.715f, -427.4875f, 114.0879f));
                    GuardWalk_03.Add(new Vector3(2486.577f, -421.6962f, 114.0877f));
                    GuardWalk_03.Add(new Vector3(2486.688f, -408.6144f, 114.0873f));
                    GuardWalk_03.Add(new Vector3(2492.931f, -402.5152f, 114.0871f));
                    GuardWalk_03.Add(new Vector3(2506.004f, -402.6693f, 114.0865f));
                    GuardWalk_03.Add(new Vector3(2512.103f, -408.8118f, 114.0866f));
                    GuardWalk_03.Add(new Vector3(2512.263f, -417.2939f, 114.0884f));
                    GuardWalk_03.Add(new Vector3(2512.247f, -409.3155f, 114.0866f));
                    GuardWalk_03.Add(new Vector3(2504.904f, -402.1249f, 114.0867f));
                    GuardWalk_03.Add(new Vector3(2493.43f, -401.8575f, 114.0871f));
                    GuardWalk_03.Add(new Vector3(2487f, -408.6649f, 114.0874f));
                    GuardWalk_03.Add(new Vector3(2486.758f, -421.5493f, 114.0878f));
                    GuardWalk_03.Add(new Vector3(2492.532f, -427.3813f, 114.0879f));
                    GuardWalk_03.Add(new Vector3(2502.197f, -428.9225f, 114.0905f));

                    vTarget_01 = new Vector3(2593.775f, -288.1873f, 91.88568f); //-- Start Point.
                    vTarget_02 = new Vector3(2474.46f, -340.6893f, 109.5219f); //-- Exit Near Target.

                    iMobStarz = 48;

                    vFuMiss = new Vector3(2580.741f, -283.8819f, 92.48505f);
                }
                else if (iMishWop == 3)
                {
                    VectorList_01.Add(new Vector3(172.946f, 1228.402f, 231.3267f));   //--5
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(190.265f, 1242.596f, 225.5947f));   //--4
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(166.5291f, 1231.856f, 229.5994f));   //--3
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(185.3232f, 1212.812f, 231.3265f));   //--2
                    fList_01.Add(201.5691f);
                    VectorList_01.Add(new Vector3(187.8561f, 1229.181f, 231.3266f));   //--1
                    fList_01.Add(282.6088f);
                    VectorList_01.Add(new Vector3(176.3479f, 1226.477f, 231.3266f));   //--0
                    fList_01.Add(172.7456f);

                    GuardWalk_01.Add(new Vector3(165.3706f, 1243.916f, 229.5994f));
                    GuardWalk_01.Add(new Vector3(170.317f, 1244.953f, 229.5994f));
                    GuardWalk_01.Add(new Vector3(162.8092f, 1243.388f, 229.5994f));
                    GuardWalk_01.Add(new Vector3(166.5291f, 1231.856f, 229.5994f));

                    GuardWalk_02.Add(new Vector3(197.3412f, 1210.515f, 225.5948f));
                    GuardWalk_02.Add(new Vector3(213.9503f, 1216.606f, 225.5947f));
                    GuardWalk_02.Add(new Vector3(196.4233f, 1213.144f, 225.5947f));
                    GuardWalk_02.Add(new Vector3(190.265f, 1242.596f, 225.5947f));

                    GuardWalk_03.Add(new Vector3(178.9831f, 1206.969f, 225.5954f));
                    GuardWalk_03.Add(new Vector3(183.5664f, 1204.313f, 225.5954f));
                    GuardWalk_03.Add(new Vector3(186.8263f, 1182.507f, 225.5946f));
                    GuardWalk_03.Add(new Vector3(186.1802f, 1162.673f, 225.5944f));
                    GuardWalk_03.Add(new Vector3(197.4359f, 1139.935f, 225.5943f));
                    GuardWalk_03.Add(new Vector3(207.7782f, 1143.113f, 227.0093f));
                    GuardWalk_03.Add(new Vector3(202.2832f, 1166.904f, 227.0045f));
                    GuardWalk_03.Add(new Vector3(196.5689f, 1188.546f, 227.0101f));
                    GuardWalk_03.Add(new Vector3(186.8285f, 1188.397f, 225.5941f));
                    GuardWalk_03.Add(new Vector3(181.9728f, 1208.952f, 225.5955f));
                    GuardWalk_03.Add(new Vector3(178.0035f, 1208.04f, 225.5955f));
                    GuardWalk_03.Add(new Vector3(172.946f, 1228.402f, 231.3267f));

                    vTarget_01 = new Vector3(248.8441f, 1129.461f, 221.3617f); //-- Start Point.
                    vTarget_02 = new Vector3(179.6311f, 1232.698f, 231.3265f); //-- Exit Near Target.

                    iMobStarz = 5;

                    vFuMiss = new Vector3(261.4789f, 1142.812f, 221.6532f);
                }
                else
                {
                    VectorList_01.Add(new Vector3(650.3622f, 576.902f, 129.051f));   //--5
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(746.0137f, 602.2731f, 125.9197f));   //--4
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(677.7837f, 559.4578f, 129.0463f));   //--3
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(652.8771f, 578.6671f, 129.051f));   //--2
                    fList_01.Add(356.1734f);
                    VectorList_01.Add(new Vector3(714.191f, 556.9922f, 129.0508f));   //--1
                    fList_01.Add(253.2013f);
                    VectorList_01.Add(new Vector3(682.7437f, 567.4234f, 130.4613f));   //--0
                    fList_01.Add(157.7996f);

                    GuardWalk_01.Add(new Vector3(665.4657f, 570.3066f, 129.0466f));
                    GuardWalk_01.Add(new Vector3(596.5162f, 484.8895f, 144.6454f));
                    GuardWalk_01.Add(new Vector3(613.8167f, 472.9295f, 144.6454f));
                    GuardWalk_01.Add(new Vector3(627.2529f, 464.7474f, 144.6454f));
                    GuardWalk_01.Add(new Vector3(660.1801f, 452.9376f, 144.6453f));
                    GuardWalk_01.Add(new Vector3(695.9135f, 448.863f, 144.6446f));
                    GuardWalk_01.Add(new Vector3(697.3724f, 553.0838f, 129.0458f));
                    GuardWalk_01.Add(new Vector3(677.7837f, 559.4578f, 129.0463f));

                    GuardWalk_02.Add(new Vector3(738.6559f, 582.8843f, 125.9198f));
                    GuardWalk_02.Add(new Vector3(716.8008f, 590.9428f, 129.0509f));
                    GuardWalk_02.Add(new Vector3(710.4515f, 571.093f, 129.0509f));
                    GuardWalk_02.Add(new Vector3(716.4241f, 569.3599f, 129.0509f));
                    GuardWalk_02.Add(new Vector3(711.1804f, 555.2366f, 129.0509f));
                    GuardWalk_02.Add(new Vector3(715.435f, 569.7562f, 129.0509f));
                    GuardWalk_02.Add(new Vector3(710.6652f, 572.7615f, 129.0509f));
                    GuardWalk_02.Add(new Vector3(717.5749f, 590.2658f, 129.0509f));
                    GuardWalk_02.Add(new Vector3(738.647f, 582.5916f, 125.9197f));
                    GuardWalk_02.Add(new Vector3(746.0137f, 602.2731f, 125.9197f));

                    GuardWalk_03.Add(new Vector3(660.1697f, 606.0498f, 129.051f));
                    GuardWalk_03.Add(new Vector3(650.3622f, 576.902f, 129.051f));

                    vTarget_01 = new Vector3(773.4139f, 589.575f, 124.9152f); //-- Start Point.
                    vTarget_02 = new Vector3(700.5001f, 575.8657f, 130.4613f); //-- Exit Near Target.

                    iMobStarz = 3;

                    vFuMiss = new Vector3(790.1108f, 587.7974f, 125.2726f);
                }

                sMissionVar_01 = RandNPC(iMobStarz);
            }
            else if (iLocationX == 5)
            {
                if (iAssMissionList[4] > 4)
                    iMishWop = RandInt(0, 4);
                else
                    iMishWop = iAssMissionList[4];

                if (iMishWop == 0)
                {
                    VectorList_01.Add(new Vector3(340.744f, 2854.836f, 43.43604f));   //--5
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(295.8181f, 2892.656f, 43.60744f));   //--4
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(273.4195f, 2854.501f, 43.64209f));   //--3
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(315.1468f, 2884.779f, 49.57343f));   //--2
                    fList_01.Add(142.8985f);
                    VectorList_01.Add(new Vector3(272.5177f, 2866.132f, 74.17432f));   //--1
                    fList_01.Add(256.3994f);
                    VectorList_01.Add(new Vector3(273.4961f, 2864.117f, 64.92805f));   //--0
                    fList_01.Add(157.7332f);

                    GuardWalk_01.Add(new Vector3(311.9371f, 2877.399f, 43.48515f));
                    GuardWalk_01.Add(new Vector3(332.7512f, 2846.731f, 43.43607f));
                    GuardWalk_01.Add(new Vector3(287.2278f, 2831.782f, 43.43173f));
                    GuardWalk_01.Add(new Vector3(273.4195f, 2854.501f, 43.64209f));

                    GuardWalk_02.Add(new Vector3(263.0713f, 2876.522f, 43.61074f));
                    GuardWalk_02.Add(new Vector3(295.9029f, 2891.116f, 43.60786f));
                    GuardWalk_02.Add(new Vector3(306.0526f, 2875.568f, 43.50587f));
                    GuardWalk_02.Add(new Vector3(265.6938f, 2852.161f, 43.61774f));
                    GuardWalk_02.Add(new Vector3(305.3912f, 2875.516f, 43.50589f));
                    GuardWalk_02.Add(new Vector3(295.8181f, 2892.656f, 43.60744f));

                    GuardWalk_03.Add(new Vector3(284.8827f, 2828.409f, 43.43379f));
                    GuardWalk_03.Add(new Vector3(340.744f, 2854.836f, 43.43604f));

                    vTarget_01 = new Vector3(224.7818f, 2882.74f, 42.51745f); //-- Start Point.
                    vTarget_02 = new Vector3(268.1503f, 2861.51f, 65.96897f); //-- Exit Near Target.

                    iMobStarz = 4;
                    vFuMiss = new Vector3(230.3268f, 2916.2f, 42.67411f);
                }
                else if (iMishWop == 1)
                {
                    VectorList_01.Add(new Vector3(1557.302f, 3600.265f, 38.77518f));   //--5
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(1567.208f, 3600.576f, 35.43183f));   //--4
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(1503.925f, 3577.993f, 35.42987f));   //--3
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(1501.693f, 3578.562f, 35.41425f));   //--2
                    fList_01.Add(249.7173f);
                    VectorList_01.Add(new Vector3(1562.053f, 3612.89f, 38.73403f));   //--1
                    fList_01.Add(173.9365f);
                    VectorList_01.Add(new Vector3(1552.73f, 3587.81f, 38.73153f));   //--0
                    fList_01.Add(205.6844f);

                    GuardWalk_01.Add(new Vector3(1561.882f, 3612.627f, 35.43483f));
                    GuardWalk_01.Add(new Vector3(1570.241f, 3598.013f, 35.34276f));
                    GuardWalk_01.Add(new Vector3(1512.646f, 3564.601f, 35.34513f));
                    GuardWalk_01.Add(new Vector3(1508.009f, 3568.101f, 35.43494f));
                    GuardWalk_01.Add(new Vector3(1503.925f, 3577.993f, 35.42987f));

                    GuardWalk_02.Add(new Vector3(1570.469f, 3594.964f, 35.34573f));
                    GuardWalk_02.Add(new Vector3(1542.851f, 3572.031f, 35.36273f));
                    GuardWalk_02.Add(new Vector3(1513.98f, 3561.483f, 35.34253f));
                    GuardWalk_02.Add(new Vector3(1505.999f, 3574.725f, 38.72665f));
                    GuardWalk_02.Add(new Vector3(1504.937f, 3573.891f, 38.73009f));
                    GuardWalk_02.Add(new Vector3(1510.527f, 3563.786f, 38.73009f));
                    GuardWalk_02.Add(new Vector3(1569.854f, 3598.75f, 38.73285f));
                    GuardWalk_02.Add(new Vector3(1564.839f, 3607.901f, 38.73139f));
                    GuardWalk_02.Add(new Vector3(1563.257f, 3606.921f, 38.73143f));
                    GuardWalk_02.Add(new Vector3(1567.208f, 3600.576f, 35.43183f));

                    GuardWalk_03.Add(new Vector3(1556.338f, 3602.33f, 38.77517f));
                    GuardWalk_03.Add(new Vector3(1553.705f, 3606.639f, 38.73141f));
                    GuardWalk_03.Add(new Vector3(1549.766f, 3605.031f, 38.73141f));
                    GuardWalk_03.Add(new Vector3(1533.377f, 3594.701f, 38.73153f));
                    GuardWalk_03.Add(new Vector3(1535.362f, 3590.602f, 38.76653f));
                    GuardWalk_03.Add(new Vector3(1534.274f, 3586.417f, 38.7665f));
                    GuardWalk_03.Add(new Vector3(1537.886f, 3579.533f, 38.73153f));
                    GuardWalk_03.Add(new Vector3(1558.568f, 3592.217f, 38.73152f));
                    GuardWalk_03.Add(new Vector3(1557.302f, 3600.265f, 38.77518f));

                    vTarget_01 = new Vector3(1600.252f, 3601.43f, 34.24609f); //-- Start Point.
                    vTarget_02 = new Vector3(1554.511f, 3590.84f, 38.73137f); //-- Exit Near Target.

                    iMobStarz = 22;

                    vFuMiss = new Vector3(1583.455f, 3646.516f, 33.97811f);
                }
                else if (iMishWop == 2)
                {
                    VectorList_01.Add(new Vector3(2321.647f, 4847.645f, 41.80827f));   //--5
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(2297.261f, 4871.159f, 41.80822f));   //--4
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(2354.695f, 4873.283f, 41.80996f));   //--3
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(2306.544f, 4882.843f, 41.80826f));   //--2
                    fList_01.Add(45.17728f);
                    VectorList_01.Add(new Vector3(2307.568f, 4832.615f, 48.176f));   //--1
                    fList_01.Add(226.672f);
                    VectorList_01.Add(new Vector3(2328.1f, 4846.455f, 41.80822f));   //--0
                    fList_01.Add(232.1723f);

                    GuardWalk_01.Add(new Vector3(2318.967f, 4838.601f, 41.80822f));
                    GuardWalk_01.Add(new Vector3(2354.695f, 4873.283f, 41.80996f));

                    GuardWalk_02.Add(new Vector3(2298.175f, 4879.726f, 41.80826f));
                    GuardWalk_02.Add(new Vector3(2304.109f, 4889.827f, 41.80826f));
                    GuardWalk_02.Add(new Vector3(2324.028f, 4900.575f, 41.81262f));
                    GuardWalk_02.Add(new Vector3(2348.52f, 4878.257f, 41.81926f));
                    GuardWalk_02.Add(new Vector3(2353.455f, 4871.659f, 41.81401f));
                    GuardWalk_02.Add(new Vector3(2323.628f, 4845.782f, 41.80827f));
                    GuardWalk_02.Add(new Vector3(2297.261f, 4871.159f, 41.80822f));

                    GuardWalk_03.Add(new Vector3(2299.706f, 4869.14f, 41.80819f));
                    GuardWalk_03.Add(new Vector3(2321.647f, 4847.645f, 41.80827f));

                    vTarget_01 = new Vector3(2288.661f, 4979.157f, 40.81767f); //-- Start Point.
                    vTarget_02 = new Vector3(2332.987f, 4857.082f, 41.80821f); //-- Exit Near Target.

                    iMobStarz = 23;

                    vFuMiss = new Vector3(2267.126f, 4997.805f, 42.06471f);
                }
                else if (iMishWop == 3)
                {
                    VectorList_01.Add(new Vector3(1657.862f, 4834.355f, 47.17301f));   //--5
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(1638.303f, 4867.082f, 42.02855f));   //--4
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(1661.448f, 4827.105f, 42.07011f));   //--3
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(1647.802f, 4828.048f, 42.02239f));   //--2
                    fList_01.Add(22.90079f);
                    VectorList_01.Add(new Vector3(1650.428f, 4867.372f, 41.88936f));   //--1
                    fList_01.Add(263.617f);
                    VectorList_01.Add(new Vector3(1641.539f, 4851.53f, 45.50526f));   //--0
                    fList_01.Add(358.4285f);

                    GuardWalk_01.Add(new Vector3(1644.147f, 4825.98f, 42.01594f));
                    GuardWalk_01.Add(new Vector3(1635.695f, 4857.085f, 42.02081f));
                    GuardWalk_01.Add(new Vector3(1644.741f, 4825.145f, 41.99265f));
                    GuardWalk_01.Add(new Vector3(1661.448f, 4827.105f, 42.07011f));

                    GuardWalk_02.Add(new Vector3(1636.811f, 4890.342f, 42.04609f));
                    GuardWalk_02.Add(new Vector3(1638.303f, 4867.082f, 42.02855f));

                    GuardWalk_03.Add(new Vector3(1649.929f, 4833.092f, 47.17131f));
                    GuardWalk_03.Add(new Vector3(1657.862f, 4834.355f, 47.17301f));

                    vTarget_01 = new Vector3(1698.747f, 4881.217f, 41.0342f); //-- Start Point.
                    vTarget_02 = new Vector3(1642.261f, 4846.046f, 45.47531f); //-- Exit Near Target.

                    iMobStarz = 17;

                    vFuMiss = new Vector3(1674.996f, 4842.517f, 41.52208f);
                }
                else
                {
                    VectorList_01.Add(new Vector3(2709.445f, 2821.631f, 40.00f));   //--5
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(2671.472f, 2763.025f, 37.87803f));   //--4
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(2761.239f, 2806.703f, 41.73893f));   //--3
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(2690.285f, 2760.773f, 37.84019f));   //--2
                    fList_01.Add(195.2845f);
                    VectorList_01.Add(new Vector3(2677.376f, 2790.567f, 40.5186f));   //--1
                    fList_01.Add(256.1927f);
                    VectorList_01.Add(new Vector3(2712.72f, 2784.174f, 37.87799f));   //--0
                    fList_01.Add(295.9645f);

                    GuardWalk_01.Add(new Vector3(2759.709f, 2805.8f, 41.73897f));
                    GuardWalk_01.Add(new Vector3(2758.911f, 2807.281f, 41.73896f));
                    GuardWalk_01.Add(new Vector3(2755.162f, 2805.116f, 41.73896f));
                    GuardWalk_01.Add(new Vector3(2759.09f, 2806.964f, 41.73893f));
                    GuardWalk_01.Add(new Vector3(2760.083f, 2806.064f, 41.73896f));
                    GuardWalk_01.Add(new Vector3(2761.239f, 2806.703f, 41.73893f));

                    GuardWalk_02.Add(new Vector3(2688.278f, 2770.796f, 37.878f));
                    GuardWalk_02.Add(new Vector3(2692.782f, 2762.073f, 37.87238f));
                    GuardWalk_02.Add(new Vector3(2684.776f, 2758.062f, 37.87803f));
                    GuardWalk_02.Add(new Vector3(2678.576f, 2766.702f, 37.87803f));
                    GuardWalk_02.Add(new Vector3(2671.472f, 2763.025f, 37.87803f));

                    GuardWalk_03.Add(new Vector3(2732.909f, 2843.75f, 38.53904f));
                    GuardWalk_03.Add(new Vector3(2678.177f, 2841.705f, 40.0709f));
                    GuardWalk_03.Add(new Vector3(2676.612f, 2799.527f, 40.43023f));
                    GuardWalk_03.Add(new Vector3(2685.635f, 2798.989f, 40.23642f));
                    GuardWalk_03.Add(new Vector3(2687.616f, 2816.012f, 40.36447f));
                    GuardWalk_03.Add(new Vector3(2709.445f, 2821.631f, 40.00f));

                    vTarget_01 = new Vector3(2586.596f, 2723.151f, 41.64703f); //-- Start Point.
                    vTarget_02 = new Vector3(2707.149f, 2777.105f, 37.87799f); //-- Exit Near Target.

                    iMobStarz = 50;

                    vFuMiss = new Vector3(2555.999f, 2706.22f, 41.52115f);
                }

                sMissionVar_01 = RandNPC(iMobStarz);
            }
            else
            {
                if (iAssMissionList[5] > 4)
                    iMishWop = RandInt(0, 4);
                else
                    iMishWop = iAssMissionList[5];

                if (iMishWop == 0)
                {
                    VectorList_01.Add(new Vector3(-767.345f, 5583.257f, 33.60571f));   //--5
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(-755.4155f, 5598.173f, 41.66508f));   //--4
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(-738.0662f, 5595.271f, 41.65459f));   //--3
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(-736.4711f, 5588.167f, 41.65414f));   //--2
                    fList_01.Add(206.0923f);
                    VectorList_01.Add(new Vector3(-741.9067f, 5557.609f, 36.70968f));   //--1
                    fList_01.Add(178.5684f);
                    VectorList_01.Add(new Vector3(-737.0172f, 5567.404f, 36.70968f));   //--0
                    fList_01.Add(264.3277f);

                    GuardWalk_01.Add(new Vector3(-746.4897f, 5594.63f, 41.65459f));
                    GuardWalk_01.Add(new Vector3(-748.2638f, 5587.582f, 41.65414f));
                    GuardWalk_01.Add(new Vector3(-754.9839f, 5587.543f, 41.65474f));
                    GuardWalk_01.Add(new Vector3(-755.6539f, 5602.023f, 41.66507f));
                    GuardWalk_01.Add(new Vector3(-747.6964f, 5602.552f, 41.65459f));
                    GuardWalk_01.Add(new Vector3(-747.2025f, 5595.154f, 41.65459f));
                    GuardWalk_01.Add(new Vector3(-738.0662f, 5595.271f, 41.65459f));

                    GuardWalk_02.Add(new Vector3(-754.9137f, 5599.81f, 41.66511f));
                    GuardWalk_02.Add(new Vector3(-749.9346f, 5600.047f, 40.64637f));
                    GuardWalk_02.Add(new Vector3(-749.7846f, 5590.161f, 38.02629f));
                    GuardWalk_02.Add(new Vector3(-756.705f, 5589.916f, 36.71615f));
                    GuardWalk_02.Add(new Vector3(-758.0966f, 5588.067f, 36.70622f));
                    GuardWalk_02.Add(new Vector3(-760.3561f, 5587.396f, 36.70622f));
                    GuardWalk_02.Add(new Vector3(-760.1637f, 5601.39f, 36.70622f));
                    GuardWalk_02.Add(new Vector3(-757.8819f, 5601.993f, 36.70622f));
                    GuardWalk_02.Add(new Vector3(-757.6944f, 5591.96f, 36.70622f));
                    GuardWalk_02.Add(new Vector3(-751.4635f, 5591.595f, 38.0263f));
                    GuardWalk_02.Add(new Vector3(-751.5088f, 5598.002f, 40.64657f));
                    GuardWalk_02.Add(new Vector3(-755.4155f, 5598.173f, 41.66508f));

                    GuardWalk_03.Add(new Vector3(-757.9305f, 5584.678f, 36.70965f));
                    GuardWalk_03.Add(new Vector3(-757.6879f, 5600.951f, 36.70622f));
                    GuardWalk_03.Add(new Vector3(-760.2615f, 5601.565f, 36.70622f));
                    GuardWalk_03.Add(new Vector3(-759.8745f, 5584.589f, 36.70969f));
                    GuardWalk_03.Add(new Vector3(-767.577f, 5584.732f, 33.60597f));
                    GuardWalk_03.Add(new Vector3(-767.842f, 5582.199f, 33.60597f));
                    GuardWalk_03.Add(new Vector3(-761.2136f, 5582.326f, 36.70964f));
                    GuardWalk_03.Add(new Vector3(-754.5424f, 5583.642f, 36.70964f));

                    vTarget_01 = new Vector3(-823.821f, 5561.648f, 30.46187f); //-- Start Point.
                    vTarget_02 = new Vector3(-740.5261f, 5572.364f, 36.70968f); //-- Exit Near Target.

                    iMobStarz = 11;
                    vFuMiss = new Vector3(-800.3827f, 5563.648f, 31.62369f);
                }
                else if (iMishWop == 1)
                {
                    VectorList_01.Add(new Vector3(-514.6453f, 5271.71f, 80.65714f));   //--5
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(-527.8826f, 5291.014f, 74.17958f));   //--4
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(-526.7314f, 5308.281f, 80.23985f));   //--3
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(-557.3286f, 5283.622f, 77.1786f));   //--2
                    fList_01.Add(280.9823f);
                    VectorList_01.Add(new Vector3(-507.0502f, 5298.56f, 80.59415f));   //--1
                    fList_01.Add(125.2596f);
                    VectorList_01.Add(new Vector3(-534.6129f, 5295.723f, 76.22177f));   //--0
                    fList_01.Add(163.9837f);

                    GuardWalk_01.Add(new Vector3(-507.8468f, 5303.367f, 80.23985f));
                    GuardWalk_01.Add(new Vector3(-498.7983f, 5327.183f, 80.26272f));
                    GuardWalk_01.Add(new Vector3(-507.5448f, 5302.066f, 80.23985f));
                    GuardWalk_01.Add(new Vector3(-526.7314f, 5308.281f, 80.23985f));

                    GuardWalk_02.Add(new Vector3(-539.9435f, 5252.771f, 74.94093f));
                    GuardWalk_02.Add(new Vector3(-518.7679f, 5244.862f, 79.98583f));
                    GuardWalk_02.Add(new Vector3(-510.9202f, 5270.467f, 80.53647f));
                    GuardWalk_02.Add(new Vector3(-520.3823f, 5246.012f, 79.83928f));
                    GuardWalk_02.Add(new Vector3(-540.4612f, 5253.007f, 74.84053f));
                    GuardWalk_02.Add(new Vector3(-527.8826f, 5291.014f, 74.17958f));

                    GuardWalk_03.Add(new Vector3(-568.4789f, 5291.338f, 75.39369f));
                    GuardWalk_03.Add(new Vector3(-514.6453f, 5271.71f, 80.65714f));

                    vTarget_01 = new Vector3(-665.6201f, 5244.412f, 75.6614f); //-- Start Point.
                    vTarget_02 = new Vector3(-535.4f, 5296.632f, 76.25673f); //-- Exit Near Target.

                    iMobStarz = 19;

                    vFuMiss = new Vector3(-638.0407f, 5250.491f, 74.33782f);
                }
                else if (iMishWop == 2)
                {
                    VectorList_01.Add(new Vector3(-66.301f, 6346.253f, 31.49036f));   //--5
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(-110.2449f, 6315.527f, 31.49036f));   //--4
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(-99.96815f, 6328.335f, 35.50035f));   //--3
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(-84.6138f, 6361.315f, 31.5759f));   //--2
                    fList_01.Add(156.8777f);
                    VectorList_01.Add(new Vector3(-87.35072f, 6371.907f, 35.12779f));   //--1
                    fList_01.Add(37.15335f);
                    VectorList_01.Add(new Vector3(-81.57904f, 6364.71f, 35.41002f));   //--0
                    fList_01.Add(275.6308f);

                    GuardWalk_01.Add(new Vector3(-109.1785f, 6337.84f, 35.50075f));
                    GuardWalk_01.Add(new Vector3(-88.0182f, 6358.469f, 35.50075f));
                    GuardWalk_01.Add(new Vector3(-108.9201f, 6336.981f, 35.50075f));
                    GuardWalk_01.Add(new Vector3(-99.96815f, 6328.335f, 35.50035f));

                    GuardWalk_02.Add(new Vector3(-100.9715f, 6310.309f, 31.49037f));
                    GuardWalk_02.Add(new Vector3(-90.23823f, 6321.042f, 31.49037f));
                    GuardWalk_02.Add(new Vector3(-103.6349f, 6308.77f, 31.49044f));
                    GuardWalk_02.Add(new Vector3(-110.2449f, 6315.527f, 31.49036f));

                    GuardWalk_03.Add(new Vector3(-87.65194f, 6325.415f, 31.49036f));
                    GuardWalk_03.Add(new Vector3(-90.99855f, 6339.509f, 31.49036f));
                    GuardWalk_03.Add(new Vector3(-74.31131f, 6352.809f, 31.49036f));
                    GuardWalk_03.Add(new Vector3(-66.301f, 6346.253f, 31.49036f));

                    vTarget_01 = new Vector3(-135.5479f, 6334.841f, 30.47937f); //-- Start Point.
                    vTarget_02 = new Vector3(-84.49097f, 6362.68f, 35.50074f); //-- Exit Near Target.

                    iMobStarz = 24;

                    vFuMiss = new Vector3(-131.1716f, 6322.359f, 30.90629f);
                }
                else if (iMishWop == 3)
                {
                    VectorList_01.Add(new Vector3(-343.9828f, 6115.645f, 31.44182f));   //--5
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(-342.4623f, 6115.922f, 31.44272f));   //--4
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(-391.5671f, 6131.014f, 31.37105f));   //--3
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(-367.6535f, 6111.827f, 39.46238f));   //--2
                    fList_01.Add(302.0133f);
                    VectorList_01.Add(new Vector3(-375.8508f, 6120.208f, 35.43965f));   //--1
                    fList_01.Add(348.0855f);
                    VectorList_01.Add(new Vector3(-368.007f, 6099.551f, 35.43965f));   //--0
                    fList_01.Add(137.4085f);

                    GuardWalk_01.Add(new Vector3(-380.4186f, 6119.364f, 31.54456f));
                    GuardWalk_01.Add(new Vector3(-391.5671f, 6131.014f, 31.37105f));

                    GuardWalk_02.Add(new Vector3(-363.4133f, 6137.021f, 31.4421f));
                    GuardWalk_02.Add(new Vector3(-342.4623f, 6115.922f, 31.44272f));

                    GuardWalk_03.Add(new Vector3(-369.2594f, 6090.41f, 31.45273f));
                    GuardWalk_03.Add(new Vector3(-380.0799f, 6104.286f, 31.44447f));
                    GuardWalk_03.Add(new Vector3(-364.4882f, 6091.61f, 31.44446f));
                    GuardWalk_03.Add(new Vector3(-343.9828f, 6115.645f, 31.44182f));

                    vTarget_01 = new Vector3(-431.6277f, 6139.681f, 30.47821f); //-- Start Point.
                    vTarget_02 = new Vector3(-366.7797f, 6103.479f, 35.43965f); //-- Exit Near Target.

                    iMobStarz = 49;

                    vFuMiss = new Vector3(-420.1826f, 6124.761f, 30.82228f);
                }
                else
                {
                    VectorList_01.Add(new Vector3(1511.616f, 6332.944f, 23.97563f));   //--5
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(1433.309f, 6330.135f, 23.9949f));   //--4
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(1439.893f, 6334.007f, 23.92226f));   //--3
                    fList_01.Add(0.00f);
                    VectorList_01.Add(new Vector3(1511.34f, 6328.012f, 24.60712f));   //--2
                    fList_01.Add(51.32638f);
                    VectorList_01.Add(new Vector3(1434.69f, 6354.518f, 23.98501f));   //--1
                    fList_01.Add(120.5622f);
                    VectorList_01.Add(new Vector3(1414.122f, 6340.835f, 24.10848f));   //--0
                    fList_01.Add(94.37645f);

                    GuardWalk_01.Add(new Vector3(1438.554f, 6350.476f, 23.98502f));
                    GuardWalk_01.Add(new Vector3(1464.721f, 6353.114f, 23.84916f));
                    GuardWalk_01.Add(new Vector3(1439.869f, 6346.296f, 23.96572f));
                    GuardWalk_01.Add(new Vector3(1439.893f, 6334.007f, 23.92226f));

                    GuardWalk_02.Add(new Vector3(1422.331f, 6354.054f, 23.985f));
                    GuardWalk_02.Add(new Vector3(1418.82f, 6358.752f, 23.98615f));
                    GuardWalk_02.Add(new Vector3(1425.885f, 6348.37f, 23.985f));
                    GuardWalk_02.Add(new Vector3(1433.309f, 6330.135f, 23.9949f));

                    GuardWalk_03.Add(new Vector3(1485.165f, 6353.153f, 23.97673f));
                    GuardWalk_03.Add(new Vector3(1511.616f, 6332.944f, 23.97563f));

                    vTarget_01 = new Vector3(1625.025f, 6352.656f, 39.91281f); //-- Start Point.
                    vTarget_02 = new Vector3(1416.866f, 6339.506f, 24.39831f); //-- Exit Near Target.

                    iMobStarz = 33;

                    vFuMiss = new Vector3(1544.126f, 6403.336f, 23.61435f);
                }

                sMissionVar_01 = RandNPC(iMobStarz);
            }

            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("HitMan, iMishWop == "+ iMishWop, tEx);

            if (GuardWalk_01.Count > 0)
                VectorList_02 = ListReverseVec3(GuardWalk_01);

            if (GuardWalk_02.Count > 0)
                VectorList_03 = ListReverseVec3(GuardWalk_02);

            if (GuardWalk_03.Count > 0)
                VectorList_04 = ListReverseVec3(GuardWalk_03);

            iList_01.Add(0);
            iList_01.Add(0);
            iList_01.Add(0);

            bOnTheJob = true;
        }
        public class HitBuild
        {
            public int Local { get; set; }
            public Vector3 FUbstop { get; set; }
            public Vector3 Vstart { get; set; }
            public Vector3 Vboss { get; set; }
            public float BossDir { get; set; }
            public Vector3 Goon01 { get; set; }
            public float Goon01Dir { get; set; }
            public Vector3 Goon02 { get; set; }
            public float Goon02Dir { get; set; }
            public List<Vector3> Goon03 { get; set; }
            public List<Vector3> Goon04 { get; set; }
            public List<Vector3> Goon05 { get; set; }

            public HitBuild()
            {
                Goon03 = new List<Vector3>();
                Goon04 = new List<Vector3>();
                Goon05 = new List<Vector3>();
            }
        }
        private void MrMOneyMAn()
        {
            BigMessageThread.MessageInstance.ShowSimpleShard(sAltLang[13], "", 5000);
            VectorList_01.Clear();
            VectorList_02.Clear();
            BeOnOff.Clear();
            ttTextBar_01.Label = "" + sAltLang[291] + "";
            VTBTimerPool.Add(ttTextBar_01);

            int iRanLoc = 0;

            if (iLocationX == 1)
            {
                vGetaway = new Vector3(934.419f, -1578.40f, 29.94f);
                fGetDir = 88.32f;

                vTarget_02 = new Vector3(961.1391f, -1586.041f, 30.38947f);
                fphdirect = 297.1811f;

                vTarget_03 = new Vector3(934.419f, -1578.40f, 29.94f); //Depo
                vFuMiss = new Vector3(968.2625f, -1575.904f, 30.10956f);

                iRanLoc = RandInt(1, 6);
                if (iRanLoc == 1)
                {
                    //-----------Amunation
                    VectorList_01.Add(new Vector3(818.1103f, -2155.561f, 29.61901f)); //Door
                    VectorList_01.Add(new Vector3(811.7623f, -2148.854f, 29.63132f)); //Collect Pack
                    VectorList_01.Add(new Vector3(822.6222f, -2140.836f, 28.98856f)); //Park Truck
                }
                else if (iRanLoc == 2)
                {
                    //-----------Tattoo
                    VectorList_01.Add(new Vector3(1326.98f, -1654.731f, 52.27643f));
                    VectorList_01.Add(new Vector3(1321.362f, -1649.768f, 52.14555f));
                    VectorList_01.Add(new Vector3(1309.416f, -1655.837f, 50.73122f));
                }
                else if (iRanLoc == 3)
                {

                    //-----------garage straw
                    VectorList_01.Add(new Vector3(-43.22453f, -1748.926f, 29.42101f));
                    VectorList_01.Add(new Vector3(-53.39435f, -1756.822f, 29.43963f));
                    VectorList_01.Add(new Vector3(-53.6435f, -1764.465f, 28.96912f));
                }
                else if (iRanLoc == 4)
                {
                    //-----------Hair straw
                    VectorList_01.Add(new Vector3(141.3755f, -1705.638f, 29.29162f));
                    VectorList_01.Add(new Vector3(132.6712f, -1712.163f, 29.29171f));
                    VectorList_01.Add(new Vector3(133.0044f, -1719.993f, 28.52891f));
                }
                else if (iRanLoc == 5)
                {
                    //-----------Clothin straw
                    VectorList_01.Add(new Vector3(71.55688f, -1391.018f, 29.37615f));
                    VectorList_01.Add(new Vector3(83.43826f, -1391.65f, 29.41966f));
                    VectorList_01.Add(new Vector3(98.63625f, -1395.907f, 28.73691f));
                }
                else
                {
                    //-----------"247 straw
                    VectorList_01.Add(new Vector3(28.20053f, -1339.815f, 29.49702f));
                    VectorList_01.Add(new Vector3(28.86574f, -1349.547f, 29.32179f));
                    VectorList_01.Add(new Vector3(15.55747f, -1345.465f, 28.76207f));
                }
            }
            else if (iLocationX == 2)
            {
                vGetaway = new Vector3(-270.6081f, 285.802f, 90.00076f);
                fGetDir = 178.6714f;

                vTarget_02 = new Vector3(-277.6512f, 282.4237f, 89.88692f);
                fphdirect = 174.0191f;

                vTarget_03 = new Vector3(-270.6081f, 285.802f, 89.00076f); //Depo
                vFuMiss = new Vector3(-279.1794f, 272.047f, 88.99425f);

                iRanLoc = RandInt(1, 17);
                if (iRanLoc == 1)
                {
                    //-----------247 vinwood
                    VectorList_01.Add(new Vector3(378.172f, 333.1444f, 103.5664f));
                    VectorList_01.Add(new Vector3(376.2864f, 322.5743f, 103.4389f));
                    VectorList_01.Add(new Vector3(374.499f, 315.3937f, 102.8113f));
                }
                else if (iRanLoc == 2)
                {
                    //-----------tato vinewood
                    VectorList_01.Add(new Vector3(322.3571f, 185.3816f, 103.5865f));
                    VectorList_01.Add(new Vector3(320.9264f, 177.7515f, 103.5556f));
                    VectorList_01.Add(new Vector3(326.8551f, 163.4843f, 102.8829f));
                }
                else if (iRanLoc == 3)
                {
                    //-----------Amun Vinewood
                    VectorList_01.Add(new Vector3(255.1956f, -46.45491f, 69.94107f));
                    VectorList_01.Add(new Vector3(243.4802f, -44.94433f, 69.89601f));
                    VectorList_01.Add(new Vector3(237.7722f, -36.02295f, 69.19891f));
                }
                else if (iRanLoc == 4)
                {
                    //-----------Sub Vinwood
                    VectorList_01.Add(new Vector3(117.6362f, -234.1445f, 54.55783f));
                    VectorList_01.Add(new Vector3(127.3477f, -210.5648f, 54.53751f));
                    VectorList_01.Add(new Vector3(131.3723f, -198.0184f, 53.89521f));
                }
                else if (iRanLoc == 5)
                {
                    //-----------Hair Vinewood
                    VectorList_01.Add(new Vector3(-34.64671f, -155.6644f, 57.07654f));
                    VectorList_01.Add(new Vector3(-30.43615f, -146.8482f, 57.03374f));
                    VectorList_01.Add(new Vector3(-32.57223f, -135.1536f, 56.55999f));
                }
                else if (iRanLoc == 6)
                {
                    //-----------Poision Vinewood
                    VectorList_01.Add(new Vector3(-167.0284f, -299.8949f, 39.73331f));
                    VectorList_01.Add(new Vector3(-156.523f, -305.6676f, 39.60716f));
                    VectorList_01.Add(new Vector3(-145.5589f, -304.0175f, 38.54705f));
                }
                else if (iRanLoc == 7)
                {
                    //-----------Flesa Vinewood
                    VectorList_01.Add(new Vector3(-354.9683f, -54.16336f, 49.04631f));
                    VectorList_01.Add(new Vector3(-349.905f, -45.62924f, 49.0368f));
                    VectorList_01.Add(new Vector3(-333.5276f, -30.75565f, 47.31762f));
                }
                else if (iRanLoc == 8)
                {
                    //-----------Rockford poison
                    VectorList_01.Add(new Vector3(-705.4026f, -151.8214f, 37.41514f));
                    VectorList_01.Add(new Vector3(-716.6645f, -156.6859f, 36.98803f));
                    VectorList_01.Add(new Vector3(-713.6541f, -174.4834f, 36.29914f));
                }
                else if (iRanLoc == 9)
                {
                    //-----------Rockford Hair
                    VectorList_01.Add(new Vector3(-809.0403f, -180.0453f, 37.5689f));
                    VectorList_01.Add(new Vector3(-823.1348f, -188.0848f, 37.56448f));
                    VectorList_01.Add(new Vector3(-829.8032f, -193.5309f, 36.85846f));
                }
                else if (iRanLoc == 10)
                {
                    //-----------DOwntownAmun
                    VectorList_01.Add(new Vector3(13.78183f, -1105.942f, 29.79702f));
                    VectorList_01.Add(new Vector3(17.52078f, -1116.09f, 29.79116f));
                    VectorList_01.Add(new Vector3(29.00081f, -1111.169f, 28.78214f));
                }
                else if (iRanLoc == 11)
                {
                    //-----------Downtown Binko
                    VectorList_01.Add(new Vector3(429.239f, -807.9297f, 29.49116f));
                    VectorList_01.Add(new Vector3(417.9985f, -807.4713f, 29.39871f));
                    VectorList_01.Add(new Vector3(410.6239f, -808.3939f, 28.66582f));
                }
                else if (iRanLoc == 12)
                {
                    //-----------Saul Garrage
                    VectorList_01.Add(new Vector3(-709.3326f, -904.5909f, 19.21559f));
                    VectorList_01.Add(new Vector3(-711.9661f, -917.5385f, 19.1905f));
                    VectorList_01.Add(new Vector3(-711.6331f, -921.455f, 18.48202f));
                }
                else if (iRanLoc == 13)
                {
                    //-----------Saul Amun
                    VectorList_01.Add(new Vector3(-666.1755f, -933.9166f, 21.82924f));
                    VectorList_01.Add(new Vector3(-664.0195f, -945.0365f, 21.71522f));
                    VectorList_01.Add(new Vector3(-660.3688f, -952.5757f, 20.82885f));
                }
                else if (iRanLoc == 14)
                {
                    //-----------vesp binko
                    VectorList_01.Add(new Vector3(-822.8187f, -1069.324f, 11.32811f));
                    VectorList_01.Add(new Vector3(-818.163f, -1079.369f, 11.13253f));
                    VectorList_01.Add(new Vector3(-818.7191f, -1091.316f, 10.43837f));
                }
                else if (iRanLoc == 15)
                {
                    //-----------vesp hair
                    VectorList_01.Add(new Vector3(-1278.28f, -1119.134f, 6.990117f));
                    VectorList_01.Add(new Vector3(-1288.733f, -1116.69f, 6.95709f));
                    VectorList_01.Add(new Vector3(-1297.564f, -1118.927f, 5.959809f));
                }
                else if (iRanLoc == 16)
                {
                    //-----------vesp corner shop
                    VectorList_01.Add(new Vector3(-1220.407f, -915.9023f, 11.32622f));
                    VectorList_01.Add(new Vector3(-1227.223f, -901.9172f, 12.27057f));
                    VectorList_01.Add(new Vector3(-1231.168f, -896.8222f, 11.58054f));
                }
                else
                {
                    //-----------vesp tato
                    VectorList_01.Add(new Vector3(-1149.823f, -1428.394f, 4.954461f));
                    VectorList_01.Add(new Vector3(-1155.2f, -1423.332f, 4.770182f));
                    VectorList_01.Add(new Vector3(-1158.976f, -1415.312f, 4.262128f));
                }
            }
            else if (iLocationX == 3)
            {
                vGetaway = new Vector3(-1379.842f, -651.2659f, 28.15535f);
                fGetDir = 305.7188f;

                vTarget_02 = new Vector3(-1399.386f, -657.6003f, 28.67339f);
                fphdirect = 307.8122f;

                vTarget_03 = new Vector3(-1379.842f, -651.2659f, 27.15535f); //Depo
                vFuMiss = new Vector3(-1357.154f, -686.0685f, 24.80783f);

                iRanLoc = RandInt(1, 11);
                if (iRanLoc == 1)
                {
                    //-----------Cherm suburb
                    VectorList_01.Add(new Vector3(-3179.448f, 1033.921f, 20.86322f));
                    VectorList_01.Add(new Vector3(-3168.043f, 1056.976f, 20.85882f));
                    VectorList_01.Add(new Vector3(-3163.755f, 1067.212f, 20.14717f));
                }
                else if (iRanLoc == 2)
                {
                    //-----------Cherm tato
                    VectorList_01.Add(new Vector3(-3174.916f, 1075.816f, 20.82918f));
                    VectorList_01.Add(new Vector3(-3167.124f, 1073.91f, 20.84766f));
                    VectorList_01.Add(new Vector3(-3161.903f, 1073.675f, 20.13908f));
                }
                else if (iRanLoc == 3)
                {
                    //-----------Cherm amun
                    VectorList_01.Add(new Vector3(-3174.98f, 1084.587f, 20.83875f));
                    VectorList_01.Add(new Vector3(-3163.575f, 1082.781f, 20.84772f));
                    VectorList_01.Add(new Vector3(-3154.986f, 1085.563f, 20.16389f));
                }
                else if (iRanLoc == 4)
                {
                    //-----------Cherm 247 north
                    VectorList_01.Add(new Vector3(-3249.464f, 1004.355f, 12.83071f));
                    VectorList_01.Add(new Vector3(-3239.379f, 1004.18f, 12.46062f));
                    VectorList_01.Add(new Vector3(-3237.647f, 988.4939f, 11.97033f));
                }
                else if (iRanLoc == 5)
                {
                    //-----------Cherm 247 south
                    VectorList_01.Add(new Vector3(-3047.151f, 585.8731f, 7.908928f));
                    VectorList_01.Add(new Vector3(-3037.997f, 589.6797f, 7.815798f));
                    VectorList_01.Add(new Vector3(-3050.408f, 597.5205f, 6.909779f));
                }
                else if (iRanLoc == 6)
                {
                    //-----------Cherm cov store
                    VectorList_01.Add(new Vector3(-2959.535f, 387.8404f, 14.04316f));
                    VectorList_01.Add(new Vector3(-2973.912f, 390.9749f, 15.03499f));
                    VectorList_01.Add(new Vector3(-2981.786f, 390.5113f, 14.33195f));
                }
                else if (iRanLoc == 7)
                {
                    //-----------Cherm flesia
                    VectorList_01.Add(new Vector3(-2957.448f, 480.7054f, 15.70681f));
                    VectorList_01.Add(new Vector3(-2965.833f, 483.4164f, 15.69704f));
                    VectorList_01.Add(new Vector3(-2974.798f, 481.1916f, 14.72671f));
                }
                else if (iRanLoc == 8)
                {
                    //-----------Del P Flisia
                    VectorList_01.Add(new Vector3(-1212.138f, -335.7886f, 37.79067f));
                    VectorList_01.Add(new Vector3(-1214.548f, -327.7181f, 37.66832f));
                    VectorList_01.Add(new Vector3(-1219.321f, -315.0229f, 37.17657f));
                }
                else if (iRanLoc == 9)
                {
                    //-----------Del P amun
                    VectorList_01.Add(new Vector3(-1303.215f, -390.6413f, 36.69578f));
                    VectorList_01.Add(new Vector3(-1315.139f, -390.2487f, 36.56477f));
                    VectorList_01.Add(new Vector3(-1323.571f, -392.335f, 35.94392f));
                }
                else if (iRanLoc == 10)
                {
                    //-----------Del Poision
                    VectorList_01.Add(new Vector3(-1447.627f, -241.0643f, 49.81923f));
                    VectorList_01.Add(new Vector3(-1455.621f, -232.2648f, 49.78922f));
                    VectorList_01.Add(new Vector3(-1458.832f, -227.6372f, 48.64274f));
                }
                else
                {
                    //-----------Del Hillshop
                    VectorList_01.Add(new Vector3(-1828.599f, 798.9403f, 138.1795f));
                    VectorList_01.Add(new Vector3(-1821.645f, 787.6665f, 138.1489f));
                    VectorList_01.Add(new Vector3(-1818.875f, 784.5744f, 137.3242f));
                }
            }
            else if (iLocationX == 4)
            {
                vGetaway = new Vector3(1099.12f, -1270.16f, 19.795f);
                fGetDir = -51.03f;

                vTarget_02 = new Vector3(1098.566f, -1274.972f, 20.74246f);
                fphdirect = 312.774f;

                vTarget_03 = new Vector3(1099.12f, -1270.16f, 19.795f); //Depo
                vFuMiss = new Vector3(1125.113f, -1261.781f, 20.09493f);

                iRanLoc = RandInt(1, 6);
                if (iRanLoc == 1)
                {
                    //-----------Hair shop
                    VectorList_01.Add(new Vector3(1216.396f, -475.7311f, 66.20808f));
                    VectorList_01.Add(new Vector3(1206.959f, -470.4778f, 66.16388f));
                    VectorList_01.Add(new Vector3(1196.073f, -470.9982f, 65.57097f));
                }
                else if (iRanLoc == 2)
                {

                    //-----------Garrage
                    VectorList_01.Add(new Vector3(1160.074f, -314.111f, 69.20514f));
                    VectorList_01.Add(new Vector3(1159.967f, -327.2746f, 69.21417f));
                    VectorList_01.Add(new Vector3(1156.982f, -331.7316f, 68.32507f));
                }
                else if (iRanLoc == 3)
                {
                    //-----------Amun messa
                    VectorList_01.Add(new Vector3(846.6501f, -1035.193f, 28.3325f));
                    VectorList_01.Add(new Vector3(843.7968f, -1024.143f, 28.12939f));
                    VectorList_01.Add(new Vector3(839.9777f, -1011.106f, 27.00286f));
                }
                else if (iRanLoc == 4)
                {
                    //-----------Corner shop
                    VectorList_01.Add(new Vector3(1126.577f, -980.6263f, 45.41566f));
                    VectorList_01.Add(new Vector3(1142.111f, -981.1093f, 46.18622f));
                    VectorList_01.Add(new Vector3(1149.826f, -977.8307f, 45.73932f));
                }
                else if (iRanLoc == 5)
                {
                    //-----------TataV amun
                    VectorList_01.Add(new Vector3(2572.253f, 292.7031f, 108.7349f));
                    VectorList_01.Add(new Vector3(2569.835f, 304.0079f, 108.6078f));
                    VectorList_01.Add(new Vector3(2571.05f, 313.6378f, 107.9333f));
                }
                else
                {
                    //-----------TataV shope
                    VectorList_01.Add(new Vector3(2550.167f, 385.037f, 108.623f));
                    VectorList_01.Add(new Vector3(2560.021f, 385.3103f, 108.6211f));
                    VectorList_01.Add(new Vector3(2565.156f, 386.3684f, 107.9341f));
                }
            }
            else if (iLocationX == 5)
            {
                vGetaway = new Vector3(2470.4231f, 4079.9763f, 37.00f);
                fGetDir = -112.445f;

                vTarget_02 = new Vector3(2476.441f, 4087.215f, 38.11901f);
                fphdirect = 242.7f;

                vTarget_03 = new Vector3(2470.4231f, 4079.9763f, 37.00f); //Depo
                vFuMiss = new Vector3(2483.111f, 4082.512f, 37.41102f);

                iRanLoc = RandInt(0, 14);
                if (iRanLoc == 1)
                {
                    //-----------Harmon subur
                    VectorList_01.Add(new Vector3(617.5039f, 2775.508f, 42.08813f));
                    VectorList_01.Add(new Vector3(617.8914f, 2750.032f, 42.08892f));
                    VectorList_01.Add(new Vector3(617.494f, 2737.448f, 41.45228f));
                }
                else if (iRanLoc == 2)
                {
                    //-----------Harmon 247
                    VectorList_01.Add(new Vector3(546.1213f, 2663.55f, 42.1565f));
                    VectorList_01.Add(new Vector3(544.249f, 2673.423f, 42.15178f));
                    VectorList_01.Add(new Vector3(543.9064f, 2679.666f, 41.67859f));
                }
                else if (iRanLoc == 3)
                {
                    //-----------Gs Binco
                    VectorList_01.Add(new Vector3(1198.342f, 2713.979f, 38.22293f));
                    VectorList_01.Add(new Vector3(1198.509f, 2702.313f, 38.15563f));
                    VectorList_01.Add(new Vector3(1200.099f, 2695.825f, 37.36243f));
                }
                else if (iRanLoc == 4)
                {
                    //-----------Gs Corner
                    VectorList_01.Add(new Vector3(1168.47f, 2718.329f, 37.15754f));
                    VectorList_01.Add(new Vector3(1166.224f, 2703.072f, 38.17934f));
                    VectorList_01.Add(new Vector3(1164.742f, 2696.91f, 37.33692f));
                }
                else if (iRanLoc == 5)
                {
                    //-----------GS Falica
                    VectorList_01.Add(new Vector3(1176.768f, 2711.985f, 38.09777f));
                    VectorList_01.Add(new Vector3(1175.112f, 2702.563f, 38.1728f));
                    VectorList_01.Add(new Vector3(1175.921f, 2696.473f, 37.43602f));
                }
                else if (iRanLoc == 6)
                {
                    //-----------SAndy hair
                    VectorList_01.Add(new Vector3(1931.251f, 3734.453f, 32.84468f));
                    VectorList_01.Add(new Vector3(1933.528f, 3725.155f, 32.7968f));
                    VectorList_01.Add(new Vector3(1938.352f, 3717.634f, 31.7961f));
                }
                else if (iRanLoc == 7)
                {
                    //-----------SAndy 247
                    VectorList_01.Add(new Vector3(1959.433f, 3748.225f, 32.34375f));
                    VectorList_01.Add(new Vector3(1965.725f, 3740.154f, 32.32369f));
                    VectorList_01.Add(new Vector3(1970.195f, 3735.998f, 31.79704f));
                }
                else if (iRanLoc == 8)
                {
                    //-----------SAndy tatto
                    VectorList_01.Add(new Vector3(1865.294f, 3746.35f, 33.03188f));
                    VectorList_01.Add(new Vector3(1859.885f, 3748.965f, 33.01699f));
                    VectorList_01.Add(new Vector3(1857.872f, 3742.37f, 32.53915f));
                }
                else if (iRanLoc == 9)
                {
                    //-----------SAndy corner
                    VectorList_01.Add(new Vector3(1390.946f, 3607.937f, 34.98093f));
                    VectorList_01.Add(new Vector3(1394.429f, 3599.112f, 35.00449f));
                    VectorList_01.Add(new Vector3(1397.758f, 3594.731f, 34.39877f));
                }
                else if (iRanLoc == 10)
                {
                    //-----------SAndy amun
                    VectorList_01.Add(new Vector3(1689.871f, 3757.967f, 34.70535f));
                    VectorList_01.Add(new Vector3(1699.534f, 3751.866f, 34.51932f));
                    VectorList_01.Add(new Vector3(1705.501f, 3749.265f, 33.47446f));
                }
                else if (iRanLoc == 11)
                {
                    //-----------Grap Binko
                    VectorList_01.Add(new Vector3(1697.423f, 4821.755f, 42.06332f));
                    VectorList_01.Add(new Vector3(1686.561f, 4820.475f, 41.97686f));
                    VectorList_01.Add(new Vector3(1678.187f, 4819.64f, 41.48005f));
                }
                else if (iRanLoc == 12)
                {
                    //-----------Garp garrage
                    VectorList_01.Add(new Vector3(1706.918f, 4919.901f, 42.06368f));
                    VectorList_01.Add(new Vector3(1698.662f, 4929.488f, 42.07811f));
                    VectorList_01.Add(new Vector3(1698.783f, 4940.655f, 41.56523f));
                }
                else if (iRanLoc == 13)
                {
                    //-----------Char binko
                    VectorList_01.Add(new Vector3(-1102.444f, 2714.538f, 19.10787f));
                    VectorList_01.Add(new Vector3(-1095.547f, 2705.624f, 19.08519f));
                    VectorList_01.Add(new Vector3(-1093.724f, 2698.565f, 19.04576f));
                }
                else
                {
                    //-----------Charp Amu
                    VectorList_01.Add(new Vector3(-1121.844f, 2696.824f, 18.55415f));
                    VectorList_01.Add(new Vector3(-1112.695f, 2689.975f, 18.58567f));
                    VectorList_01.Add(new Vector3(-1108.882f, 2687.981f, 18.14283f));
                }
            }
            else
            {
                vGetaway = new Vector3(-32.27702f, 6420.57f, 30.94404f);
                fGetDir = 225.2031f;

                vTarget_02 = new Vector3(-38.61729f, 6420.182f, 31.49045f);
                fphdirect = 231.998f;

                vTarget_03 = new Vector3(-32.27702f, 6420.57f, 29.94404f); //Depo
                vFuMiss = new Vector3(-10.03841f, 6391.624f, 30.78662f);

                iRanLoc = RandInt(1, 5);
                if (iRanLoc == 1)
                {
                    //-----------Hair shop
                    VectorList_01.Add(new Vector3(-276.0725f, 6223.65f, 31.69553f));
                    VectorList_01.Add(new Vector3(-281.699f, 6232.842f, 31.60391f));
                    VectorList_01.Add(new Vector3(-286.0955f, 6241.862f, 30.79247f));
                }
                else if (iRanLoc == 2)
                {
                    //-----------tato
                    VectorList_01.Add(new Vector3(-295.0442f, 6199.955f, 31.48837f));
                    VectorList_01.Add(new Vector3(-289.1778f, 6199.99f, 31.46494f));
                    VectorList_01.Add(new Vector3(-286.6538f, 6203.642f, 30.81242f));
                }
                else if (iRanLoc == 3)
                {
                    //-----------amun
                    VectorList_01.Add(new Vector3(-334.0562f, 6081.944f, 31.45477f));
                    VectorList_01.Add(new Vector3(-324.8422f, 6075.586f, 31.24472f));
                    VectorList_01.Add(new Vector3(-317.418f, 6069.649f, 30.66432f));
                }
                else if (iRanLoc == 4)
                {
                    //-----------247
                    VectorList_01.Add(new Vector3(1734.999f, 6420.008f, 35.03723f));
                    VectorList_01.Add(new Vector3(1730.541f, 6410.849f, 35.00064f));
                    VectorList_01.Add(new Vector3(1728.83f, 6405.631f, 33.91109f));
                }
                else
                {
                    //-----------binko
                    VectorList_01.Add(new Vector3(6.315853f, 6508.681f, 31.87787f));
                    VectorList_01.Add(new Vector3(-1.083668f, 6516.653f, 31.87712f));
                    VectorList_01.Add(new Vector3(-6.146315f, 6518.496f, 30.76712f));
                }
            }

            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("MrMOneyMAn, iRanLoc == " + iRanLoc, tEx);

            VehicleSpawn("Stockade", vGetaway, fGetDir, false, false, true, false, 10, 0, 8, 1, false);
            ttTextBar_01.Label = "" + sAltLang[291] + "";

            BeOnOff.Add(false);//   bSuitCase   0   
            BeOnOff.Add(false);//   bJackIsBack 1   
            BeOnOff.Add(false);//   bMoneyVehAt 2   
            BeOnOff.Add(false);//   bJackWait   3   
            BeOnOff.Add(false);//   bTruckBlip  4   
            BeOnOff.Add(false);//   bMoveYourV  5   
            bOnTheJob = true;
        }
        private void SeaBattles()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("SeaBattles", tEx);

            if (!bOnlineStuffLoaded)
                LoadOnlineIps();

            if (iLocationX == 1)
            {
                BigMessageThread.MessageInstance.ShowSimpleShard(sAltLang[14], sAltLang[86], 5000);
                PropList_01.Clear();
                VectorList_01.Clear();
                VectorList_02.Clear();
                VehicleList_01.Clear();
                BeOnOff.Clear();

                Vector3 Vtug = new Vector3(-297.986f, -2508.42f, 0.28f);
                float fhead = 51.99f;
                VehicleSpawn("TUG", Vtug, fhead, false, false, false, false, 0, 0, 0, 5, false);

                Vector3 posy = new Vector3(-467.467f, -2421.15f, -0.86f);
                Vector3 Rota = new Vector3(0.00f, 0.00f, 140.04f);

                Prop_01 = BuildProp("prop_ind_barge_01_cr", posy, Rota, true, true);
                posy.Z = posy.Z - 3.50f;
                Vehicle ViCME = VehicleSpawn("SPEEDER", posy, Rota.Z, true, true, false, false, 23, 0, 0, 0, false);

                Prop_02 = BuildProp("zprop_bin_01a_old", Vtug, Rota, false, true);

                if (Prop_02 != null)
                    Prop_02.AttachTo(VehTrackin_05, 0, new Vector3(0.00f, -16.90f, 1.20f), new Vector3(0.00f, 0.00f, 90.00f));

                Prop_03 = BuildProp("prop_mp_base_marker", posy, Rota, false, true);

                if (Prop_01 != null && Prop_03 != null)
                    Prop_03.AttachTo(Prop_01, 0, new Vector3(0.07f, -16.80f, 0.95f), new Vector3(0.00f, 0.00f, 90.00f));

                vTarget_01 = new Vector3(-296.9974f, -2498.0f, 6.01f);
                vTarget_02 = new Vector3(-532.22f, -3142.22f, 4.879541f);

                List<string> SCarz = RandVeh(1);
                string sXCArs = SCarz[RandInt(0, SCarz.Count - 1)];

                Vector3 Vec = new Vector3(-451.83f, -2427.72f, 5.32f);
                VehicleSpawn(sXCArs, Vec, 48.22f, true, true, false, false, 0, 0, 0, 1, true);
                Vector3 Vec2 = new Vector3(-449.83f, -2425.72f, 5.32f);
                VehicleSpawn(sXCArs, Vec2, 48.22f, true, true, false, false, 0, 0, 0, 2, true);
                Vector3 Vec3 = new Vector3(-447.83f, -2423.72f, 5.32f);
                VehicleSpawn(sXCArs, Vec3, 48.22f, true, true, false, false, 0, 0, 0, 3, true);

                Vector3 vBargiePos01 = new Vector3(0.00f, 0.00f, 0.00f);
                Vector3 vBargieRot01 = new Vector3(0.00f, 0.00f, 0.00f);

                Vector3 vBargiePos02 = new Vector3(0.00f, 0.00f, 0.00f);
                Vector3 vBargieRot02 = new Vector3(0.00f, 0.00f, 0.00f);

                int iRandomDrops = RandInt(1, 3);

                if (iRandomDrops == 1)
                {
                    vBargiePos01 = new Vector3(3620.21f, 2629.51f, -1.525f);
                    vBargieRot01 = new Vector3(0.00f, 0.00f, 72.51f);

                    vBargiePos02 = new Vector3(3622.987f, 2586.88f, -1.525f);
                    vBargieRot02 = new Vector3(0.00f, 0.00f, 147.35f);

                    VectorList_01.Add(new Vector3(3649.372f, 2617.402f, 6.63372f));
                    VectorList_01.Add(new Vector3(3651.506f, 2614.691f, 6.633721f));
                    VectorList_01.Add(new Vector3(3627.223f, 2626.364f, 4.244568f));
                    VectorList_01.Add(new Vector3(3609.775f, 2630.035f, 4.244568f));
                    VectorList_01.Add(new Vector3(3628.146f, 2593.23f, 4.20523f));
                    VectorList_01.Add(new Vector3(3618.583f, 2578.76f, 4.20523f));

                    VectorList_02.Add(new Vector3(3420.099f, 2491.043f, 0.6345347f));
                    VectorList_02.Add(new Vector3(3405.634f, 2612.699f, 1.414109f));
                    VectorList_02.Add(new Vector3(3440.099f, 2712.043f, 1.188157f));
                    VectorList_02.Add(new Vector3(3549.929f, 2779.896f, 0.5909276f));
                    VectorList_02.Add(new Vector3(3675.02f, 2745.809f, -0.9453772f));
                    VectorList_02.Add(new Vector3(3710.018f, 2479.11f, -0.08554739f));

                    vTarget_03 = new Vector3(3652.68f, 2617.99f, 1.53f);
                    fphdirect = -48.99f;

                    vTarget_04 = new Vector3(2391.884f, 2606.851f, 714.0196f);

                    vTarget_05 = new Vector3(3461.911f, 2592.899f, 17.56484f);

                    fMission_02 = 129.3113f;

                    vGetaway = new Vector3(3638.695f, 2534.938f, 45.00f);
                }       //Area4
                else if (iRandomDrops == 2)
                {
                    vBargiePos01 = new Vector3(-3488.987f, 2567.464f, -1.525f);
                    vBargieRot01 = new Vector3(0.00f, 0.00f, 0.00f);

                    vBargiePos02 = new Vector3(-3461.614f, 2537.045f, -1.525f);
                    vBargieRot02 = new Vector3(0.00f, 0.00f, -90.782f);

                    VectorList_01.Add(new Vector3(-3504.892f, 2538.714f, 6.43768f));
                    VectorList_01.Add(new Vector3(-3503.309f, 2542.615f, 6.43768f));
                    VectorList_01.Add(new Vector3(-3468.269f, 2540.936f, 4.196299f));
                    VectorList_01.Add(new Vector3(-3455.491f, 2536.626f, 4.196299f));
                    VectorList_01.Add(new Vector3(-3490.959f, 2562.74f, 4.259959f));
                    VectorList_01.Add(new Vector3(-3488.732f, 2575.614f, 4.259959f));

                    VectorList_02.Add(new Vector3(-3361.782f, 2576.428f, 1.018636f));
                    VectorList_02.Add(new Vector3(-3429.236f, 2465.523f, -1.819907f));
                    VectorList_02.Add(new Vector3(-3388.378f, 2353.15f, 1.727046f));
                    VectorList_02.Add(new Vector3(-3304.568f, 2320.081f, 1.053782f));
                    VectorList_02.Add(new Vector3(-3198.47f, 2395.765f, 1.087626f));
                    VectorList_02.Add(new Vector3(-3210.874f, 2537.606f, 1.138748f));

                    vTarget_03 = new Vector3(-3506.61f, 2541.75f, 1.335f);
                    fphdirect = 59.99f;

                    vTarget_04 = new Vector3(-1986.925f, 2386.277f, 798.9652f);

                    vTarget_05 = new Vector3(-2777.655f, 2702.865f, 2.265981f);

                    fMission_02 = 151.1022f;

                    vGetaway = new Vector3(-3296.078f, 2434.163f, 45.00f);
                }       //Area 3
                else
                {
                    vBargiePos01 = new Vector3(-2294.5625f, 5076.313f, -1.525f);
                    vBargieRot01 = new Vector3(0.00f, 0.00f, -114.632f);

                    vBargiePos02 = new Vector3(-2291.265f, 5114.785f, -1.525f);
                    vBargieRot02 = new Vector3(0.00f, 0.00f, -58.89f);

                    VectorList_01.Add(new Vector3(-2325.56f, 5103.03f, 6.935183f));
                    VectorList_01.Add(new Vector3(-2329.237f, 5101.743f, 6.938537f));
                    VectorList_01.Add(new Vector3(-2300.375f, 5081.123f, 4.247458f));
                    VectorList_01.Add(new Vector3(-2287.496f, 5075.647f, 4.247458f));
                    VectorList_01.Add(new Vector3(-2285.91f, 5119.862f, 4.249745f));
                    VectorList_01.Add(new Vector3(-2296.667f, 5112.091f, 4.249745f));

                    VectorList_02.Add(new Vector3(-2366.315f, 5316.938f, 0.4459411f));
                    VectorList_02.Add(new Vector3(-2505.177f, 5118.204f, -1.392775f));
                    VectorList_02.Add(new Vector3(-2460.614f, 4977.973f, 2.337129f));
                    VectorList_02.Add(new Vector3(-2294.666f, 4919.8f, 2.374352f));
                    VectorList_02.Add(new Vector3(-2082.271f, 5040.844f, 0.138085f));
                    VectorList_02.Add(new Vector3(-1997.227f, 5188.623f, 1.223455f));
                    VectorList_02.Add(new Vector3(-1985.521f, 5297.569f, 1.387197f));
                    VectorList_02.Add(new Vector3(-2097.74f, 5386.565f, 0.2941358f));

                    vTarget_03 = new Vector3(-2329.28882f, 5105.92432f, 1.836f);//tug space
                    fphdirect = 27.899807f;

                    vTarget_04 = new Vector3(-1021.073f, 4403.199f, 716.9043f);

                    vTarget_05 = new Vector3(-2168.488f, 5191.466f, 45.00f);

                    fMission_02 = 222.6737f;

                    vGetaway = new Vector3(-2338.36f, 5068.45f, 15.797754f);
                }       //Area 6

                BuildProp("prop_ind_barge_01_cr", vBargiePos01, vBargieRot01, true, true);

                BuildProp("prop_ind_barge_01_cr", vBargiePos02, vBargieRot02, true, true);

                vFuMiss = new Vector3(-267.8495f, -2553.718f, 5.492561f);

                iMobStarz = RandInt(2, 10);

                BeOnOff.Add(false);//   bBargeDone  0   
                BeOnOff.Add(false);//   bChopRed    1 
                BeOnOff.Add(false);//   bTolow      2  
                BeOnOff.Add(false);//   bWait4Hel   3  
            }
            else if (iLocationX == 2)
            {
                BigMessageThread.MessageInstance.ShowSimpleShard(sAltLang[14], sAltLang[87], 5000);
                fList_01.Clear();
                VectorList_01.Clear();

                vTarget_01 = new Vector3(-2062.635f, -1025.35f, 14.89584f); //yahht pos.

                vTarget_02 = new Vector3(-792.833f, -1501.074f, 1.868256f);  // Seasparrow
                fList_01.Add(124.9655f);
                vTarget_03 = new Vector3(-1003.107f, -1060.22f, -0.7159257f);  // Speedboat
                fList_01.Add(117.8598f);
                vTarget_04 = new Vector3(-1125.589f, -1609.41f, 3.980671f);  // technical
                fList_01.Add(308.9667f);

                int iRandFub = RandInt(0, 30);
                if (iRandFub < 10)
                    vFuMiss = new Vector3(-759.5714f, -1488.978f, 4.493412f);
                else if (iRandFub < 20)
                    vFuMiss = new Vector3(-1021.038f, -1087.49f, 1.444673f);
                else
                    vFuMiss = new Vector3(-1132.264f, -1583.583f, 3.785678f);

                VectorList_01.Add(new Vector3(-2089.241f, -1017.131f, 12.77942f));
                VectorList_01.Add(new Vector3(-2084.963f, -1018.17f, 12.7819f));
                VectorList_01.Add(new Vector3(-2075.85f, -1023.987f, 11.90897f));
                VectorList_01.Add(new Vector3(-2057.141f, -1023.712f, 11.90752f));
                VectorList_01.Add(new Vector3(-2059.652f, -1029.798f, 11.90751f));
                VectorList_01.Add(new Vector3(-2038.46f, -1033.382f, 8.971486f));
                VectorList_01.Add(new Vector3(-2079.459f, -1026.553f, 8.971498f));
                VectorList_01.Add(new Vector3(-2050.709f, -1027.698f, 8.971485f));
                VectorList_01.Add(new Vector3(-2095.92f, -1014.094f, 8.980425f));
                VectorList_01.Add(new Vector3(-2088.441f, -1016.918f, 8.971198f));
                VectorList_01.Add(new Vector3(-2121.264f, -1007.252f, 7.992996f));
                VectorList_01.Add(new Vector3(-2101.255f, -1014.084f, 5.884184f));
                VectorList_01.Add(new Vector3(-2090.708f, -1016.646f, 5.88879f));
                VectorList_01.Add(new Vector3(-2075.17f, -1019.912f, 5.884132f));
                VectorList_01.Add(new Vector3(-2033.05f, -1039.868f, 5.882174f));
                VectorList_01.Add(new Vector3(-2029.334f, -1042.119f, 2.566328f));
                VectorList_01.Add(new Vector3(-2052.608f, -1035.781f, 2.563384f));
                VectorList_01.Add(new Vector3(-2053.243f, -1022.338f, 3.010738f));
                VectorList_01.Add(new Vector3(-2065.84f, -1027.916f, 3.061461f));
                VectorList_01.Add(new Vector3(-2069.564f, -1019.077f, 3.067517f));

                VTBTimerPool.Add(ttTextBar_01);
                ttTextBar_01.Label = "" + sAltLang[297] + "";

                iMissionVar_02 = 20;
                bYachtBypas = true;
                Water02_AddHeistYacht();
            }
            else if (iLocationX == 3)
            {
                BigMessageThread.MessageInstance.ShowSimpleShard(sAltLang[14], sAltLang[88], 5000);
                fList_01.Clear();
                BeOnOff.Clear();
                VectorList_01.Clear();
                VectorList_02.Clear();
                Vector3 vBoats = new Vector3(-1522.54f, 1504.275f, 109.20f);
                VehicleSpawn("Tropic", vBoats, 347.7118f, false, false, true, false, 11, 2, 14, 1, false);

                VectorList_01.Add(new Vector3(-2267.098f, 2718.057f, -0.1050927f));
                VectorList_01.Add(new Vector3(-2276.375f, 2800.253f, -0.02853893f));
                VectorList_01.Add(new Vector3(-2452.397f, 2758.311f, -0.1024196f));
                VectorList_01.Add(new Vector3(-2520.441f, 2781.299f, 0.01976691f));
                VectorList_01.Add(new Vector3(-2692.24f, 2803.303f, 0.09795412f));
                VectorList_01.Add(new Vector3(-2675.768f, 2549.733f, 0.09234437f));
                VectorList_01.Add(new Vector3(-2512.779f, 2457.329f, -0.1280194f));
                VectorList_01.Add(new Vector3(-2405.962f, 2498.461f, -0.1005725f));
                VectorList_01.Add(new Vector3(-2350.739f, 2531.461f, 0.1267544f));
                VectorList_01.Add(new Vector3(-2192.352f, 2542.014f, 0.1361143f));
                VectorList_01.Add(new Vector3(-2122.215f, 2487.729f, 0.1340764f));
                VectorList_01.Add(new Vector3(-2058.875f, 2488.626f, 0.1319462f));
                VectorList_01.Add(new Vector3(-1972.177f, 2535.516f, -0.03703161f));
                VectorList_01.Add(new Vector3(-1862.23f, 2559.718f, 0.08299349f));
                VectorList_01.Add(new Vector3(-1741.274f, 2562.792f, -0.05941249f));
                VectorList_01.Add(new Vector3(-1615.856f, 2555.23f, 0.007432766f));
                VectorList_01.Add(new Vector3(-1452.784f, 2256.166f, 16.83186f));
                VectorList_01.Add(new Vector3(-1435.809f, 2133.348f, 29.95456f));
                VectorList_01.Add(new Vector3(-1447.689f, 2105.221f, 41.10828f));
                VectorList_01.Add(new Vector3(-1453.399f, 2061.905f, 53.68446f));
                VectorList_01.Add(new Vector3(-1439.854f, 2001.397f, 56.65691f));
                VectorList_01.Add(new Vector3(-1476.355f, 1826.803f, 77.81793f));
                VectorList_01.Add(new Vector3(-1538.943f, 1693.724f, 92.91889f));

                VectorList_02.Add(new Vector3(-2271.455f, 2710.373f, 1.795847f));
                VectorList_02.Add(new Vector3(-2262.034f, 2797.965f, 1.158177f));
                VectorList_02.Add(new Vector3(-2443.822f, 2773.958f, 1.107026f));
                VectorList_02.Add(new Vector3(-2534.851f, 2785.696f, 1.705645f));
                VectorList_02.Add(new Vector3(-2686.559f, 2776.299f, 1.092641f));
                VectorList_02.Add(new Vector3(-2679.578f, 2560.405f, 3.279952f));
                VectorList_02.Add(new Vector3(-2502.054f, 2456.114f, 1.351156f));
                VectorList_02.Add(new Vector3(-2423.841f, 2488.548f, 1.536321f));
                VectorList_02.Add(new Vector3(-2335.076f, 2540.096f, 1.103614f));
                VectorList_02.Add(new Vector3(-2187.082f, 2533.962f, 1.61509f));
                VectorList_02.Add(new Vector3(-2135.926f, 2507.35f, 1.477846f));
                VectorList_02.Add(new Vector3(-2077.144f, 2481.595f, 1.757198f));
                VectorList_02.Add(new Vector3(-1959.703f, 2541.121f, 1.714661f));
                VectorList_02.Add(new Vector3(-1855.056f, 2563.261f, 1.079439f));
                VectorList_02.Add(new Vector3(-1746.728f, 2576.327f, 1.261585f));
                VectorList_02.Add(new Vector3(-1630.159f, 2546.065f, 1.604008f));
                VectorList_02.Add(new Vector3(-1462.37f, 2249.08f, 22.67013f));
                VectorList_02.Add(new Vector3(-1424.021f, 2124.391f, 43.95115f));
                VectorList_02.Add(new Vector3(-1449.981f, 2121.201f, 43.7417f));
                VectorList_02.Add(new Vector3(-1446.47f, 2074.82f, 55.03326f));
                VectorList_02.Add(new Vector3(-1434.415f, 2021.363f, 58.56808f));
                VectorList_02.Add(new Vector3(-1487.785f, 1819.803f, 81.04632f));
                VectorList_02.Add(new Vector3(-1549.853f, 1695.853f, 102.0555f));

                fList_01.Add(317.2858f);
                fList_01.Add(143.218f);
                fList_01.Add(162.8035f);
                fList_01.Add(3.788758f);
                fList_01.Add(16.96323f);
                fList_01.Add(62.12259f);
                fList_01.Add(84.93685f);
                fList_01.Add(282.6599f);
                fList_01.Add(70.49986f);
                fList_01.Add(344.4031f);
                fList_01.Add(174.1375f);
                fList_01.Add(261.1181f);
                fList_01.Add(75.94833f);
                fList_01.Add(63.00495f);
                fList_01.Add(273.4592f);
                fList_01.Add(302.6676f);
                fList_01.Add(287.7927f);
                fList_01.Add(62.98845f);
                fList_01.Add(306.0093f);
                fList_01.Add(97.05612f);
                fList_01.Add(136.722f);
                fList_01.Add(284.4136f);
                fList_01.Add(232.9542f);

                vTarget_02 = new Vector3(-2078.157f, 2600.188f, -0.09435405f);
                Water03_RandDest(8);

                VTBTimerPool.Add(BtSlideBar);
                BtSlideBar.Label = "" + sAltLang[308] + "";
                ttTextBar_02.Label = "" + sAltLang[291] + "";

                vFuMiss = new Vector3(-1504.369f, 1483.937f, 116.4095f);

                BeOnOff.Add(false);//   bOutOfWater 0 
                BeOnOff.Add(false);//   bOnTarget   1 
            }
            else if (iLocationX == 4)
            {
                BigMessageThread.MessageInstance.ShowSimpleShard(sAltLang[14], sAltLang[89], 5000);
                VectorList_01.Clear();
                iList_01.Clear();
                BeOnOff.Clear();
                Vector3 VechPos = new Vector3(658.0602f, -1499.01f, 9.931272f);
                VehicleSpawn("Blazer5", VechPos, 18.00f, false, false, true, false, 0, 0, 15, 1, true);

                VectorList_01.Add(new Vector3(644.6057f, -1453.172f, 8.380302f));
                VectorList_01.Add(new Vector3(617.7773f, -1362.886f, 8.36958f));
                VectorList_01.Add(new Vector3(598.3756f, -1306.039f, 8.368834f));
                VectorList_01.Add(new Vector3(593.0373f, -1246.08f, 8.466216f));
                VectorList_01.Add(new Vector3(593.0325f, -1177.757f, 8.655041f));
                VectorList_01.Add(new Vector3(593.1477f, -1102.322f, 8.863312f));
                VectorList_01.Add(new Vector3(591.6036f, -1011.895f, 9.112757f));
                VectorList_01.Add(new Vector3(591.8387f, -907.4847f, 9.397379f));
                VectorList_01.Add(new Vector3(597.3967f, -854.2623f, 9.520418f));
                VectorList_01.Add(new Vector3(585.8411f, -850.317f, 9.540106f));
                VectorList_01.Add(new Vector3(593.5573f, -795.2447f, 9.708557f));
                VectorList_01.Add(new Vector3(594.1461f, -696.8318f, 11.49453f));
                VectorList_01.Add(new Vector3(609.5754f, -615.5567f, 13.03183f));
                VectorList_01.Add(new Vector3(650.6841f, -525.8651f, 13.7698f));
                VectorList_01.Add(new Vector3(740.8145f, -445.4544f, 16.7115f));
                VectorList_01.Add(new Vector3(815.7368f, -420.1507f, 24.94323f));
                VectorList_01.Add(new Vector3(853.3591f, -413.1623f, 28.1094f));
                VectorList_01.Add(new Vector3(890.9553f, -406.0472f, 31.22633f));
                VectorList_01.Add(new Vector3(926.817f, -398.8194f, 40.30638f));
                VectorList_01.Add(new Vector3(977.196f, -377.061f, 44.12959f));
                VectorList_01.Add(new Vector3(1019.552f, -331.3167f, 47.8512f));
                VectorList_01.Add(new Vector3(1048.574f, -286.2695f, 49.32551f));
                VectorList_01.Add(new Vector3(1141.052f, -148.9637f, 53.11688f));
                VectorList_01.Add(new Vector3(1153.834f, -131.8845f, 53.92586f));
                VectorList_01.Add(new Vector3(1182.161f, -115.118f, 55.40979f));
                VectorList_01.Add(new Vector3(1193.617f, -107.5604f, 55.85151f));
                VectorList_01.Add(new Vector3(1228.677f, -83.05925f, 58.0977f));
                VectorList_01.Add(new Vector3(1220.656f, -91.59956f, 57.3595f));
                VectorList_01.Add(new Vector3(1240.186f, -84.26402f, 58.30257f));
                VectorList_01.Add(new Vector3(1267.35f, -60.69587f, 59.6433f));
                VectorList_01.Add(new Vector3(1299.277f, -50.74736f, 62.17868f));
                VectorList_01.Add(new Vector3(1326.597f, -55.19455f, 66.49007f));
                VectorList_01.Add(new Vector3(1350.118f, -60.14297f, 70.46875f));
                VectorList_01.Add(new Vector3(1367.034f, -67.37091f, 74.93937f));
                VectorList_01.Add(new Vector3(1383.645f, -78.74095f, 80.77425f));
                VectorList_01.Add(new Vector3(1403.523f, -79.4838f, 86.1574f));
                VectorList_01.Add(new Vector3(1429.455f, -73.40284f, 91.33286f));
                VectorList_01.Add(new Vector3(1447.304f, -69.76672f, 93.72147f));
                VectorList_01.Add(new Vector3(1463.348f, -66.92113f, 97.12095f));
                VectorList_01.Add(new Vector3(1478.598f, -61.89777f, 101.4568f));
                VectorList_01.Add(new Vector3(1498.115f, -55.76527f, 106.721f));
                VectorList_01.Add(new Vector3(1520.315f, -43.57081f, 113.1369f));
                VectorList_01.Add(new Vector3(1537.892f, -45.18201f, 116.3369f));
                VectorList_01.Add(new Vector3(1555.162f, -41.50235f, 118.0891f));
                VectorList_01.Add(new Vector3(1580.393f, -34.48945f, 119.9327f));
                VectorList_01.Add(new Vector3(1596.361f, -28.97597f, 120.3855f));
                VectorList_01.Add(new Vector3(1614.301f, -27.9798f, 122.7313f));
                VectorList_01.Add(new Vector3(1628.417f, -30.19465f, 125.4519f));
                VectorList_01.Add(new Vector3(1642.442f, -32.26805f, 129.3114f));
                VectorList_01.Add(new Vector3(1655.088f, -19.52f, 133.676f));

                BeOnOff.Add(false);//   bRubishFond 0 

                iList_01.Add(0);//  iBlowenIt 0 
                iList_01.Add(0);//  iPuckaFuker 1 

                VTBTimerPool.Add(ttTextBar_02);
                VTBTimerPool.Add(ttTextBar_01);
                ttTextBar_02.Label = "" + sAltLang[291] + "";
                ttTextBar_01.Label = "" + sAltLang[309] + "";
                iMissionVar_01 = VectorList_01.Count;
                vFuMiss = new Vector3(682.1233f, -1501.779f, 9.200512f);
            }
            else if (iLocationX == 5)
            {
                BigMessageThread.MessageInstance.ShowSimpleShard(sAltLang[14], sAltLang[90], 5000);
                VectorList_01.Clear();
                VectorList_02.Clear();
                iList_01.Clear();
                BeOnOff.Clear();
                VectorList_02.Add(new Vector3(-3417.66f, 981.9805f, 8.34669f));
                VectorList_01.Add(new Vector3(-3425.679f, 988.0658f, -0.4135762f));

                VectorList_02.Add(new Vector3(-1114.736f, -1007.078f, 2.177857f));
                VectorList_01.Add(new Vector3(-1116.891f, -1002.886f, -0.3947005f));

                VectorList_02.Add(new Vector3(-964.8194f, -996.0452f, 2.002331f));
                VectorList_01.Add(new Vector3(-960.1927f, -995.0172f, -0.5029534f));

                VectorList_02.Add(new Vector3(-951.4834f, -1137.628f, 2.17064f));
                VectorList_01.Add(new Vector3(-949.938f, -1142.282f, -0.4759525f));

                VectorList_02.Add(new Vector3(-902.7395f, -1334.835f, 1.605166f));
                VectorList_01.Add(new Vector3(-903.6382f, -1339.536f, -0.474332f));

                VectorList_02.Add(new Vector3(-906.389f, -1464.898f, 1.634168f));
                VectorList_01.Add(new Vector3(-911.6304f, -1468.966f, -0.4746946f));

                VectorList_02.Add(new Vector3(-762.3993f, -1377.127f, 1.595215f));
                VectorList_01.Add(new Vector3(-761.4526f, -1370.358f, -0.4747677f));

                VectorList_02.Add(new Vector3(-730.4474f, -1381.247f, 1.595219f));
                VectorList_01.Add(new Vector3(-735.7456f, -1381.012f, -0.4747501f));

                VectorList_02.Add(new Vector3(-291.5653f, -2769.219f, 2.1953f));
                VectorList_01.Add(new Vector3(-292.4311f, -2765.102f, -0.9227597f));

                VectorList_02.Add(new Vector3(-115.8161f, -2749.743f, 1.054507f));
                VectorList_01.Add(new Vector3(-119.3161f, -2739.881f, -0.4958232f));

                VectorList_02.Add(new Vector3(12.84902f, -2779.834f, 2.525953f));
                VectorList_01.Add(new Vector3(-2.132256f, -2773.471f, -0.3174165f));

                VectorList_02.Add(new Vector3(128.3928f, -2264.188f, 6.081558f));
                VectorList_01.Add(new Vector3(141.4335f, -2272.176f, -0.4737459f));

                VectorList_02.Add(new Vector3(3854.963f, 4460.619f, 1.849768f));
                VectorList_01.Add(new Vector3(3855.122f, 4447.122f, -0.4748148f));

                VectorList_02.Add(new Vector3(3373.243f, 5183.339f, 1.460242f));
                VectorList_01.Add(new Vector3(3372.931f, 5189.433f, -0.4748721f));

                VectorList_02.Add(new Vector3(-1612.876f, 5261.07f, 3.974101f));
                VectorList_01.Add(new Vector3(-1613.518f, 5269.683f, -0.147253f));

                VectorList_02.Add(new Vector3(712.3718f, 4101.125f, 35.78519f));
                VectorList_01.Add(new Vector3(707.4186f, 4110.55f, 29.52869f));

                vTarget_01 = new Vector3(1313.976f, 4318.277f, 38.14502f);
                Vector3 Vtar = new Vector3(1291.9556f, 4332.9907f, 37.6536f);
                VehicleSpawn("CARGOBOB2", Vtar, -120.36f, false, true, false, false, 0, 0, 0, 1, false);

                vFuMiss = new Vector3(1349.204f, 4370.698f, 43.82962f);

                BeOnOff.Add(false);//    bTruckBlip  0
                iList_01.Add(0);// timmer 
            }
            else
            {
                BigMessageThread.MessageInstance.ShowSimpleShard(sAltLang[14], sAltLang[91], 5000);
                fList_01.Clear();
                fList_02.Clear();
                VectorList_01.Clear();
                VectorList_02.Clear();

                VectorList_01.Add(new Vector3(514.5162f, 4817.99f, -68.99113f)); fList_01.Add(358.4791f);       //0
                VectorList_01.Add(new Vector3(515.1494f, 4833.569f, -68.99053f)); fList_01.Add(147.967f);       //1
                VectorList_01.Add(new Vector3(514.2175f, 4845.671f, -66.18684f)); fList_01.Add(171.5724f);       //2
                VectorList_01.Add(new Vector3(511.546f, 4839.045f, -66.18919f)); fList_01.Add(277.5858f);       //3
                VectorList_01.Add(new Vector3(514.0159f, 4826.606f, -62.58789f)); fList_01.Add(281.0165f);       //4
                VectorList_01.Add(new Vector3(516.7152f, 4835.981f, -62.58571f)); fList_01.Add(285.4374f);       //5
                VectorList_01.Add(new Vector3(512.8048f, 4834.631f, -62.58789f)); fList_01.Add(39.10049f);       //6
                VectorList_01.Add(new Vector3(512.0849f, 4847.815f, -62.58978f)); fList_01.Add(315.7887f);       //7
                VectorList_01.Add(new Vector3(514.315f, 4855.767f, -62.5621f)); fList_01.Add(331.6915f);       //8
                VectorList_01.Add(new Vector3(514.342f, 4862.028f, -62.5621f)); fList_01.Add(81.839f);       //9
                VectorList_01.Add(new Vector3(514.2056f, 4867.008f, -62.5621f)); fList_01.Add(345.2088f);       //10
                VectorList_01.Add(new Vector3(516.3999f, 4877.61f, -62.58648f)); fList_01.Add(247.0659f);       //11
                VectorList_01.Add(new Vector3(517.0668f, 4888.617f, -66.19463f)); fList_01.Add(315.7018f);
                VectorList_01.Add(new Vector3(511.3239f, 4898.304f, -66.14313f)); fList_01.Add(212.5531f);
                VectorList_01.Add(new Vector3(516.1567f, 4895.687f, -66.14314f)); fList_01.Add(210.9975f);
                VectorList_01.Add(new Vector3(515.4485f, 4886.842f, -68.98938f)); fList_01.Add(64.17663f);
                VectorList_01.Add(new Vector3(515.063f, 4874.99f, -68.99102f)); fList_01.Add(134.8187f);
                VectorList_01.Add(new Vector3(514.2709f, 4868.423f, -68.99116f)); fList_01.Add(169.0464f);
                VectorList_01.Add(new Vector3(514.1342f, 4857.547f, -68.99112f)); fList_01.Add(179.0815f);

                VectorList_02.Add(new Vector3(-1485.873f, 5874.927f, -23.60273f)); fList_02.Add(338.469f);
                VectorList_02.Add(new Vector3(-1452.883f, 5891.918f, -26.59448f)); fList_02.Add(40.32843f);
                VectorList_02.Add(new Vector3(-1470.491f, 5931.848f, -34.98941f)); fList_02.Add(351.9011f);

                Vector3 Posy = new Vector3(-1457.39f, 5976.5293f, -36.6497f);
                Vector3 Rota = new Vector3(0.00f, 0.00f, 38.4993f);

                BuildProp("xm_prop_x17_sub", Posy, Rota, false, true);

                vTarget_01 = new Vector3(-865.0032f, 5869.187f, -0.7135592f);
                vTarget_02 = new Vector3(512.4218f, 4836.779f, -63.58794f);
                vTarget_03 = new Vector3(514.3708f, 4844f, -63.58934f);
                vTarget_04 = new Vector3(-1415.453f, 6009.928f, -15.73509f);
                vTarget_05 = new Vector3(-1465.418f, 5970.25f, -8.544f);

                VehicleSpawn("STROMBERG", new Vector3(-323.972f, 6093.478f, 30.71f), -134.72f, false, false, true, false, 0, 0, 1, 1, true);

                vFuMiss = new Vector3(-307.1304f, 6081.307f, 30.701f);
            }
            bOnTheJob = true;
        }
        private void ImportsExpo()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("ImportsExpo", tEx);

            BigMessageThread.MessageInstance.ShowSimpleShard(sAltLang[15], "", 5000);
            VectorList_01.Clear();
            VectorList_02.Clear();
            fList_01.Clear();
            iTime_01.Clear();
            iList_01.Clear();
            iList_02.Clear();
            sList_01.Clear();
            BeOnOff.Clear();
            ttTextBar_01.Label = "" + sAltLang[300] + "";
            BtSlideBar.Label = "" + sAltLang[308] + "";
            BtSlideBar.BackgroundColor = Color.Black;
            BtSlideBar.ForegroundColor = Color.White;

            iList_01.Add(0);//  NoCars  0   
            iList_01.Add(0);//  VehType  1   
            iList_01.Add(0);//  VehHealth  2   

            BeOnOff.Add(false);//   bTruckBlip  0 

            iTime_01.Add(0);

            Vector3 PVec_01 = Vector3.Zero;
            Vector3 PRot_01 = Vector3.Zero;
            Vector3 PVec_02 = Vector3.Zero;
            Vector3 PRot_02 = Vector3.Zero;

            if (iLocationX == 1)
            {
                VectorList_01.Add(new Vector3(-471.7313f, -2423.815f, 3.063863f));
                VectorList_01.Add(new Vector3(-440.5895f, -2451.739f, 5.476831f));
                VectorList_01.Add(new Vector3(-271.6974f, -2615.334f, 5.519654f));

                VectorList_02.Add(new Vector3(-448.7739f, -2418.878f, 6.00079f)); fList_01.Add(150.2767f);
                VectorList_02.Add(new Vector3(-449.0481f, -2428.503f, 6.261684f)); fList_01.Add(229.8575f);

                PVec_01 = new Vector3(-467.467f, -2421.15f, -0.86f);
                PRot_01 = new Vector3(0.00f, 0.00f, -40.04f);

                PVec_02 = new Vector3(-460.349274f, -2434.24951f, 4.00978384f);
                PRot_02 = new Vector3(6.59998989f, 0.00f, 49.2614975f);
            }
            else if (iLocationX == 2)
            {
                VectorList_01.Add(new Vector3(-2155.33f, -528.2202f, 2.691958f));
                VectorList_01.Add(new Vector3(-2107.276f, -485.45f, 4.257054f));
                VectorList_01.Add(new Vector3(-2064.365f, -411.8389f, 10.8162f));

                VectorList_02.Add(new Vector3(-2137.034f, -487.0437f, 2.997781f)); fList_01.Add(248.9881f);
                VectorList_02.Add(new Vector3(-2130.624f, -489.7626f, 2.564268f)); fList_01.Add(329.4985f);

                PVec_01 = new Vector3(-2151.424f, -523.7899f, -2.06f);
                PRot_01 = new Vector3(0.00f, 0.00f, -46.224f);

                PVec_02 = new Vector3(-2139.552f, -508.325f, 1.06558251f);
                PRot_02 = new Vector3(15.3000126f, 0.00f, 137.25f);
            }
            else if (iLocationX == 3)
            {
                VectorList_01.Add(new Vector3(-3298.518f, 1270.644f, 1.726939f));
                VectorList_01.Add(new Vector3(-3220.54f, 1255.031f, 2.906645f));
                VectorList_01.Add(new Vector3(-3013.054f, 1207.983f, 16.53849f));

                VectorList_02.Add(new Vector3(-3256.225f, 1260.652f, 2.412136f)); fList_01.Add(255.7132f);
                VectorList_02.Add(new Vector3(-3253.803f, 1253.441f, 2.655439f)); fList_01.Add(22.71264f);

                PVec_01 = new Vector3(-3290.715f, 1271.307f, -2.56f);
                PRot_01 = new Vector3(0.00f, 0.00f, -103.5014f);

                PVec_02 = new Vector3(-3271.32544f, 1268.72021f, 0.56715298f);
                PRot_02 = new Vector3(15.3000135f, 0.00f, 77.8570786f);
            }
            else if (iLocationX == 4)
            {
                VectorList_01.Add(new Vector3(2872.187f, -625.9441f, 2.311935f));
                VectorList_01.Add(new Vector3(2807.857f, -655.1345f, 1.71902f));
                VectorList_01.Add(new Vector3(2738.233f, -688.6348f, 10.93631f));

                VectorList_02.Add(new Vector3(2835.066f, -633.0577f, 1.845662f)); fList_01.Add(135.2393f);
                VectorList_02.Add(new Vector3(2825.964f, -643.6343f, 1.232047f)); fList_01.Add(109.0696f);

                PVec_01 = new Vector3(2867.1411f, -629.7086f, -2.06f);
                PRot_01 = new Vector3(0.00f, 0.00f, 106.6414f);

                PVec_02 = new Vector3(2849.26367f, -637.624939f, 0.94101167f);
                PRot_02 = new Vector3(15.3000135f, 0.00f, -70.9093094f);
            }
            else if (iLocationX == 5)
            {
                VectorList_01.Add(new Vector3(3895.991f, 4465.392f, 1.885381f));
                VectorList_01.Add(new Vector3(3827.638f, 4464.061f, 2.2999f));
                VectorList_01.Add(new Vector3(3771.6f, 4463.569f, 6.473855f));

                VectorList_02.Add(new Vector3(3817.498f, 4456.074f, 3.678974f)); fList_01.Add(56.81924f);
                VectorList_02.Add(new Vector3(3807.958f, 4466.089f, 3.956213f)); fList_01.Add(97.24484f);

                PVec_01 = new Vector3(3891.6228f, 4466.2192f, -2.86f);
                PRot_01 = new Vector3(0.00f, 0.00f, 90.0789f);

                PVec_02 = new Vector3(3871.53296f, 4463.60156f, 1.43711805f);
                PRot_02 = new Vector3(5.8000083f, 0.00f, -89.8046951f);
            }
            else
            {
                VectorList_01.Add(new Vector3(-1838.067f, 4866.93f, 2.02f));
                VectorList_01.Add(new Vector3(-1829.18787f, 4812.896f, 2.887918f));
                VectorList_01.Add(new Vector3(-1745.28223f, 4665.32227f, 18.1445694f));

                VectorList_02.Add(new Vector3(-1824.44f, 4818.69f, 2.8897f)); fList_01.Add(159.27f);//Ped
                VectorList_02.Add(new Vector3(-1829.18787f, 4812.896f, 2.887918f)); fList_01.Add(136.00f);//Vehicle

                PVec_01 = new Vector3(-1836.00244f, 4862.52637f, -1.411000878f);
                PRot_01 = new Vector3(0.00f, 0.00f, -156.65f);

                PVec_02 = new Vector3(-1826.45215f, 4845.18213f, 1.51857018f);
                PRot_02 = new Vector3(14.3000679f, 0.00f, 23.1414642f);
            }

            BuildProp("prop_ind_barge_01_cr", PVec_01, PRot_01, true, true);
            BuildProp("imp_prop_impexp_bblock_lrg1", PVec_02, PRot_02, true, true);

            ImportsExpo_CollisionBug(iLocationX);

            bOnTheJob = true;
        }
        private void DebtCollect()
        {
            if (!bOnlineStuffLoaded)
                LoadOnlineIps();

            BigMessageThread.MessageInstance.ShowSimpleShard(sAltLang[16], "", 5000);
            VectorList_01.Clear();
            VectorList_02.Clear();
            BeOnOff.Clear();

            BeOnOff.Add(false);//   bSuitCase   0 
            BeOnOff.Add(false);//   bAddIplLd   1 

            fGetDir = 0.00f;

            int iRando = FindRandom(12, 1, 5);

            if (iLocationX == 1)
            {
                if (iRando == 1)
                {
                    VectorList_01.Add(new Vector3(1230.83f, -1591.396f, 53.77849f));
                    vFuMiss = new Vector3(1237.73f, -1610.2f, 51.86958f);
                }
                else if (iRando == 2)
                {
                    VectorList_01.Add(new Vector3(-1.921694f, -1442.32f, 30.96308f));
                    vFuMiss = new Vector3(-0.4836727f, -1455.9f, 29.8962f);
                }
                else if (iRando == 3)
                {
                    VectorList_01.Add(new Vector3(197.9588f, -1725.563f, 29.66365f));
                    vFuMiss = new Vector3(200.5367f, -1740.033f, 28.36587f);
                }
                else if (iRando == 4)
                {
                    VectorList_01.Add(new Vector3(171.032f, -1871.397f, 24.40023f));
                    vFuMiss = new Vector3(163.3284f, -1885.499f, 23.13896f);
                }
                else
                {
                    VectorList_01.Add(new Vector3(399.8479f, -1864.863f, 26.71638f));
                    vFuMiss = new Vector3(410.4913f, -1877.867f, 25.63404f);
                }

                // Small Apart;
                VectorList_01.Add(new Vector3(255.6427f, -1001.104f, -99.00988f));
                VectorList_01.Add(new Vector3(261.9597f, -1002.951f, -99.00864f));
                VectorList_01.Add(new Vector3(265.3889f, -995.8669f, -99.00861f));
                VectorList_01.Add(new Vector3(266.1645f, -1007.233f, -101.0086f)); //Start--works

                vTarget_01 = new Vector3(145.6812f, -1044.564f, 29.37781f);
                iCashReward = RandInt(600, 650);

                vTarget_03 = new Vector3(152.1862f, -1028.955f, 28.73017f);
            }
            else if (iLocationX == 2)
            {
                if (iRando == 1)
                {
                    VectorList_01.Add(new Vector3(-914.4083f, -455.2541f, 39.59985f));//                    Wezal App 26;

                    VectorList_01.Add(new Vector3(-899.3471f, -434.4514f, 89.2646f));
                    VectorList_01.Add(new Vector3(-894.4338f, -441.2721f, 89.26263f));
                    VectorList_01.Add(new Vector3(-891.5045f, -428.4247f, 89.25385f));
                    VectorList_01.Add(new Vector3(-900.9719f, -430.0855f, 94.05854f));
                    VectorList_01.Add(new Vector3(-900.9902f, -438.8939f, 94.05856f));
                    VectorList_01.Add(new Vector3(-899.51f, -440.603f, 94.05856f));
                    VectorList_01.Add(new Vector3(-895.0486f, -446.9772f, 95.46671f));
                    VectorList_01.Add(new Vector3(-881.1011f, -447.6875f, 95.46118f));
                    VectorList_01.Add(new Vector3(-890.693f, -453.1191f, 95.46118f));  //Start
                    fGetDir = -70.00f;

                    vFuMiss = new Vector3(-932.4382f, -461.422f, 36.64993f);
                }        //Wezal App 26;
                else if (iRando == 2)
                {
                    VectorList_01.Add(new Vector3(-774.9841f, 313.0516f, 85.69816f));

                    VectorList_01.Add(new Vector3(-755.1921f, 324.9401f, 199.4861f));
                    VectorList_01.Add(new Vector3(-756.4911f, 321.966f, 199.5233f));
                    VectorList_01.Add(new Vector3(-763.6169f, 318.8523f, 199.4911f));
                    VectorList_01.Add(new Vector3(-763.3571f, 328.4738f, 199.4863f));
                    VectorList_01.Add(new Vector3(-778.1786f, 315.4348f, 195.8864f));
                    VectorList_01.Add(new Vector3(-778.4504f, 327.8043f, 196.086f));
                    VectorList_01.Add(new Vector3(-763.5885f, 331.035f, 196.086f));
                    VectorList_01.Add(new Vector3(-773.4202f, 334.114f, 196.086f));
                    VectorList_01.Add(new Vector3(-774.23f, 342.00f, 196.6862f)); //start
                    fGetDir = 90.00f;

                    vFuMiss = new Vector3(-772.3277f, 294.0016f, 85.0843f);
                }   //Eclips towers
                else if (iRando == 3)
                {
                    VectorList_01.Add(new Vector3(-47.98295f, -587.1663f, 37.95301f));

                    VectorList_01.Add(new Vector3(-41.4437f, -583.9338f, 78.83031f));
                    VectorList_01.Add(new Vector3(-34.13421f, -583.5911f, 78.86551f));
                    VectorList_01.Add(new Vector3(-27.02728f, -580.8799f, 79.23077f));
                    VectorList_01.Add(new Vector3(-11.76741f, -586.218f, 79.43074f));
                    VectorList_01.Add(new Vector3(-9.632593f, -595.597f, 79.43023f));
                    VectorList_01.Add(new Vector3(-9.363688f, -597.8205f, 79.43023f));
                    VectorList_01.Add(new Vector3(-31.17531f, -595.0803f, 80.03091f));  //Start

                    fGetDir = -110.00f;

                    vFuMiss = new Vector3(-60.04512f, -575.9579f, 36.77391f);
                }   //Integraty 28;
                else if (iRando == 4)
                {
                    VectorList_01.Add(new Vector3(-175.3135f, 502.5657f, 137.4208f));

                    VectorList_01.Add(new Vector3(-172.6292f, 492.1187f, 130.0437f));
                    VectorList_01.Add(new Vector3(-173.6727f, 490.9218f, 130.0437f));
                    VectorList_01.Add(new Vector3(-167.9145f, 490.3182f, 133.8722f));
                    VectorList_01.Add(new Vector3(-166.1767f, 494.7598f, 133.8438f));
                    VectorList_01.Add(new Vector3(-166.8645f, 479.2725f, 133.8438f));
                    VectorList_01.Add(new Vector3(-164.5432f, 479.6711f, 133.8438f));
                    VectorList_01.Add(new Vector3(-165.7053f, 484.7502f, 137.2585f));
                    VectorList_01.Add(new Vector3(-167.4492f, 495.1891f, 137.6537f));
                    VectorList_01.Add(new Vector3(-173.8757f, 497.8188f, 137.666f)); //Start
                    fGetDir = -170.00f;

                    vFuMiss = new Vector3(-186.034f, 507.852f, 134.6451f);
                }   //Wild oats Dr
                else
                {
                    VectorList_01.Add(new Vector3(119.5764f, 564.1172f, 183.9593f));

                    VectorList_01.Add(new Vector3(117.9137f, 567.4348f, 176.6971f));
                    VectorList_01.Add(new Vector3(118.6697f, 569.1439f, 176.6971f));
                    VectorList_01.Add(new Vector3(124.1776f, 555.1124f, 180.4973f));
                    VectorList_01.Add(new Vector3(123.6576f, 541.2617f, 180.4975f));
                    VectorList_01.Add(new Vector3(126.0195f, 543.5494f, 183.9233f));
                    VectorList_01.Add(new Vector3(123.7556f, 555.7462f, 184.2971f));
                    VectorList_01.Add(new Vector3(117.4815f, 559.4827f, 184.3049f)); //Start
                    fGetDir = 180.00f;

                    vFuMiss = new Vector3(121.7479f, 572.1733f, 182.6833f);
                }                    //Whispy mount drv

                vTarget_01 = new Vector3(263.0179f, 220.9197f, 101.6833f);
                iCashReward = RandInt(5000, 5500);

                vTarget_03 = new Vector3(219.8759f, 220.3288f, 105.0024f);
            }
            else if (iLocationX == 3)
            {
                if (iRando == 1)
                {
                    VectorList_01.Add(new Vector3(-3194.99f, 1221.228f, 10.04832f));
                    vFuMiss = new Vector3(-3183.036f, 1220.357f, 9.448875f);
                }
                else if (iRando == 2)
                {
                    VectorList_01.Add(new Vector3(-3232.137f, 1067.74f, 11.01528f));
                    vFuMiss = new Vector3(-3224.607f, 1070.247f, 10.52774f);
                }
                else if (iRando == 3)
                {
                    VectorList_01.Add(new Vector3(-2992.66f, 707.0112f, 28.49655f));
                    vFuMiss = new Vector3(-3014.989f, 698.4484f, 22.38799f);
                }
                else if (iRando == 4)
                {
                    VectorList_01.Add(new Vector3(-3093.228f, 349.4763f, 7.537311f));
                    vFuMiss = new Vector3(-3080.656f, 335.7588f, 6.774641f);
                }
                else
                {
                    VectorList_01.Add(new Vector3(-3038.996f, 492.8183f, 6.772681f));
                    vFuMiss = new Vector3(-3027.013f, 488.6257f, 6.350005f);
                }
                // Medi Apart;
                VectorList_01.Add(new Vector3(338.8605f, -1003.227f, -99.19618f));
                VectorList_01.Add(new Vector3(343.8432f, -1002.688f, -99.19618f));
                VectorList_01.Add(new Vector3(351.9203f, -995.3839f, -99.19619f));
                VectorList_01.Add(new Vector3(347.5306f, -994.1599f, -99.19618f));
                VectorList_01.Add(new Vector3(346.5659f, -1012.851f, -99.19622f)); //Start--

                vTarget_01 = new Vector3(-2957.636f, 480.4899f, 15.70684f);
                iCashReward = RandInt(600, 650);

                vTarget_03 = new Vector3(-2972.304f, 464.4413f, 14.66363f);
            }
            else if (iLocationX == 4)
            {
                if (iRando == 1)
                {
                    VectorList_01.Add(new Vector3(1262.519f, -429.8223f, 70.02103f));
                    vFuMiss = new Vector3(1277.271f, -426.1381f, 68.48877f);
                }
                else if (iRando == 2)
                {
                    VectorList_01.Add(new Vector3(930.8569f, -245.4462f, 69.00272f));
                    vFuMiss = new Vector3(923.9637f, -254.9505f, 67.8756f);
                }
                else if (iRando == 3)
                {
                    VectorList_01.Add(new Vector3(963.6226f, -596.0009f, 59.90271f));
                    vFuMiss = new Vector3(943.9349f, -582.1475f, 57.51982f);
                }
                else if (iRando == 4)
                {
                    VectorList_01.Add(new Vector3(1250.951f, -621.413f, 69.41326f));
                    vFuMiss = new Vector3(1268.787f, -611.8056f, 68.43167f);
                }
                else
                {
                    VectorList_01.Add(new Vector3(1014.597f, -469.2007f, 64.50296f));
                    vFuMiss = new Vector3(1004.094f, -456.5672f, 63.2429f);
                }
                // Medi Apart;
                VectorList_01.Add(new Vector3(338.8605f, -1003.227f, -99.19618f));
                VectorList_01.Add(new Vector3(343.8432f, -1002.688f, -99.19618f));
                VectorList_01.Add(new Vector3(351.9203f, -995.3839f, -99.19619f));
                VectorList_01.Add(new Vector3(347.5306f, -994.1599f, -99.19618f));
                VectorList_01.Add(new Vector3(346.5659f, -1012.851f, -99.19622f)); //Start--

                vTarget_01 = new Vector3(310.4331f, -283.032f, 54.17452f);
                iCashReward = RandInt(600, 650);

                vTarget_03 = new Vector3(319.2635f, -267.6611f, 53.29949f);
            }
            else if (iLocationX == 5)
            {
                if (iRando == 1)
                {
                    VectorList_01.Add(new Vector3(749.2419f, 4184.243f, 41.08786f));
                    vFuMiss = new Vector3(752.2614f, 4191.2f, 40.24923f);
                }
                else if (iRando == 2)
                {
                    VectorList_01.Add(new Vector3(1683.31f, 4689.686f, 43.06617f));
                    vFuMiss = new Vector3(1693.769f, 4682.436f, 42.55414f);
                }
                else if (iRando == 3)
                {
                    VectorList_01.Add(new Vector3(2418.973f, 4020.583f, 36.83426f));
                    vFuMiss = new Vector3(2441.141f, 4002.953f, 36.43673f);
                }
                else if (iRando == 4)
                {
                    VectorList_01.Add(new Vector3(1728.636f, 3851.676f, 34.78353f));
                    vFuMiss = new Vector3(1737.227f, 3840.868f, 34.30986f);
                }
                else
                {
                    VectorList_01.Add(new Vector3(1925.207f, 3824.606f, 32.43999f));
                    vFuMiss = new Vector3(1907.435f, 3811.906f, 31.84607f);
                }
                // Small Apart;
                VectorList_01.Add(new Vector3(255.6427f, -1001.104f, -99.00988f));
                VectorList_01.Add(new Vector3(261.9597f, -1002.951f, -99.00864f));
                VectorList_01.Add(new Vector3(265.3889f, -995.8669f, -99.00861f));
                VectorList_01.Add(new Vector3(266.1645f, -1007.233f, -101.0086f)); //Start--works

                vTarget_01 = new Vector3(1177.34f, 2711.71f, 38.09776f);
                iCashReward = RandInt(600, 650);

                vTarget_03 = new Vector3(1176.951f, 2692.882f, 37.39336f);
            }
            else
            {
                if (iRando == 1)
                {
                    VectorList_01.Add(new Vector3(-453.6041f, 6337.572f, 12.80778f));
                    vFuMiss = new Vector3(-459.0108f, 6357.438f, 11.73484f);
                }
                else if (iRando == 2)
                {
                    VectorList_01.Add(new Vector3(1510.197f, 6326.338f, 24.60714f));
                    vFuMiss = new Vector3(1477.047f, 6357.187f, 23.2679f);
                }
                else if (iRando == 3)
                {
                    VectorList_01.Add(new Vector3(35.3881f, 6662.907f, 32.1904f));
                    vFuMiss = new Vector3(35.00813f, 6649.879f, 30.96768f);
                }
                else if (iRando == 4)
                {
                    VectorList_01.Add(new Vector3(-213.8764f, 6396.349f, 33.0851f));
                    vFuMiss = new Vector3(-215.1514f, 6413.896f, 30.95057f);
                }
                else
                {
                    VectorList_01.Add(new Vector3(-379.7733f, 6252.729f, 31.85119f));
                    vFuMiss = new Vector3(-394.9077f, 6278.917f, 29.127f);
                }
                // Small Apart;
                VectorList_01.Add(new Vector3(255.6427f, -1001.104f, -99.00988f));
                VectorList_01.Add(new Vector3(261.9597f, -1002.951f, -99.00864f));
                VectorList_01.Add(new Vector3(265.3889f, -995.8669f, -99.00861f));
                VectorList_01.Add(new Vector3(266.1645f, -1007.233f, -101.0086f)); //Start--works

                vTarget_01 = new Vector3(-103.3442f, 6477.649f, 31.62672f);
                iCashReward = RandInt(600, 650);

                vTarget_03 = new Vector3(-139.4577f, 6458.511f, 30.94309f);
            }

            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("DebtCollect, iRando == " + iRando, tEx);

            Vector3 ThisPalce = VectorList_01[VectorList_01.Count - 1];
            if (iLocationX == 2 && iRando == 2)
            {
                BeOnOff[1] = true;
                LoadInMissionIPLs(10, true);
            }

            AppeyNess(ThisPalce);

            bOnTheJob = true;
        }
        private void BikerRaids()
        {
            if (!bOnlineStuffLoaded)
                LoadOnlineIps();
            //Clubhouse = 246273 
            //Second Clubhouse = 246529
            BigMessageThread.MessageInstance.ShowSimpleShard(sAltLang[17], "", 5000);
            fList_01.Clear();
            VectorList_01.Clear();
            VectorList_02.Clear();
            VectorList_03.Clear();
            iTime_01.Clear();
            BeOnOff.Clear();

            iMissionVar_02 = 0;

            if (iLocationX == 1)
            {
                int iRand = FindRandom(16, 1, 5);
                if (iRand == 1)
                {
                    //Coke
                    VectorList_01.Add(new Vector3(-253.127f, -2591.235f, 6.00063f)); //Area 1
                    VectorList_02.Add(new Vector3(-257.52f, -2578.633f, 5.747865f)); fGetDir = 358.6416f;
                    iMissionVar_02 = 1;

                    vFuMiss = new Vector3(-271.448f, -2605.758f, 5.513664f);
                }
                else if (iRand == 2)
                {
                    //CounterF
                    VectorList_01.Add(new Vector3(671.4573f, -2667.482f, 6.081184f)); //Area 1
                    VectorList_02.Add(new Vector3(665.4442f, -2661.298f, 5.828631f)); fGetDir = 173.3453f;
                    iMissionVar_02 = 2;

                    vFuMiss = new Vector3(640.4276f, -2677.848f, 5.591949f);
                }
                else if (iRand == 3)
                {
                    //Forgery
                    VectorList_01.Add(new Vector3(-331.4328f, -2779.082f, 5.145244f)); //Area 1
                    VectorList_02.Add(new Vector3(-339.66f, -2785.07f, 4.747363f)); fGetDir = 90.13049f;
                    iMissionVar_02 = 3;

                    vFuMiss = new Vector3(-354.8958f, -2755.537f, 5.536752f);
                }
                else if (iRand == 4)
                {   //Meth
                    VectorList_01.Add(new Vector3(1181.329f, -3113.877f, 6.028024f)); //Area 1
                    VectorList_02.Add(new Vector3(1177.212f, -3099.988f, 5.61451f)); fGetDir = 93.3966f;
                    iMissionVar_02 = 4;

                    vFuMiss = new Vector3(1164.82f, -3098.476f, 5.294124f);
                }
                else
                {
                    //Weed
                    VectorList_01.Add(new Vector3(137.1495f, -2472.777f, 5.999994f)); //Area 1
                    VectorList_02.Add(new Vector3(141.4945f, -2480.523f, 5.747184f)); fGetDir = 231.874f;
                    iMissionVar_02 = 5;

                    vFuMiss = new Vector3(157.942f, -2489.262f, 5.479729f);
                }
                vTarget_01 = new Vector3(67.73476f, 2788.052f, 57.8783f);
            }
            else if (iLocationX == 2)
            {
                if (RandBool(7))
                {
                    //CounterF
                    VectorList_01.Add(new Vector3(-1171.181f, -1380.728f, 4.968224f)); //Area 2
                    VectorList_02.Add(new Vector3(-1185.14f, -1380.52f, 4.612405f)); fGetDir = 25.45f;
                    iMissionVar_02 = 2;

                    vFuMiss = new Vector3(-1195.177f, -1369.412f, 4.025767f);
                }
                else
                {
                    //Weed
                    VectorList_01.Add(new Vector3(102.2836f, 175.3346f, 104.5978f)); //Area 2
                    VectorList_02.Add(new Vector3(105.2762f, 166.4761f, 104.2679f)); fGetDir = 252.1446f;
                    iMissionVar_02 = 5;

                    vFuMiss = new Vector3(57.21848f, 188.8472f, 104.4442f);
                }
                vTarget_01 = new Vector3(1730.088f, 3711.632f, 34.21038f);
            }
            else if (iLocationX == 3)
            {
                //Coke
                VectorList_01.Add(new Vector3(-1462.757f, -381.7663f, 38.84196f)); //Area 3
                VectorList_02.Add(new Vector3(-1458.237f, -385.976f, 38.17595f)); fGetDir = 126.5163f;
                iMissionVar_02 = 1;

                vTarget_01 = new Vector3(-356.9074f, 6069.39f, 31.49843f);

                vFuMiss = new Vector3(-1476.011f, -411.1121f, 36.16133f);
            }
            else if (iLocationX == 4)
            {
                int iRand = FindRandom(18, 1, 3);
                if (iRand == 1)
                {
                    //Meth
                    VectorList_01.Add(new Vector3(1454.523f, -1651.867f, 66.99489f)); //Area 4
                    VectorList_02.Add(new Vector3(1462.962f, -1638.762f, 68.51147f)); fGetDir = 303.1189f;
                    iMissionVar_02 = 4;

                    vFuMiss = new Vector3(1418.365f, -1638.559f, 59.83923f);
                }
                else if (iRand == 2)
                {
                    //Forgery
                    VectorList_01.Add(new Vector3(299.2111f, -759.0056f, 29.35474f)); //Area 3
                    VectorList_02.Add(new Vector3(307.9433f, -763.4205f, 28.97479f)); fGetDir = 159.9837f;
                    iMissionVar_02 = 3;

                    vFuMiss = new Vector3(311.2955f, -755.9443f, 28.75925f);
                }
                else
                {
                    //Meth
                    VectorList_01.Add(new Vector3(201.7818f, 2461.978f, 55.68566f));   //Area 4
                    VectorList_02.Add(new Vector3(216.4589f, 2456.052f, 56.29801f)); fGetDir = 346.6528f;
                    iMissionVar_02 = 4;

                    vFuMiss = new Vector3(215.3635f, 2456.214f, 56.08536f);
                }

                vTarget_01 = new Vector3(-362.3576f, 6069.657f, 31.75538f);
            }
            else if (iLocationX == 5)
            {
                int iRand = FindRandom(17, 1, 4);
                if (iRand == 1)
                {
                    //Coke
                    VectorList_01.Add(new Vector3(387.5507f, 3585.138f, 33.29227f)); //Area 5
                    VectorList_02.Add(new Vector3(373.2563f, 3593.6711f, 33.615f)); fGetDir = -49.502f;
                    iMissionVar_02 = 1;

                    vFuMiss = new Vector3(403.8936f, 3592.87f, 32.79099f);
                }
                else if (iRand == 2)
                {
                    //CounterF
                    VectorList_01.Add(new Vector3(635.1768f, 2774.864f, 42.00759f)); //Area 5
                    VectorList_02.Add(new Vector3(651.8953f, 2789.042f, 41.32149f)); fGetDir = 183.952f;
                    iMissionVar_02 = 2;

                    vFuMiss = new Vector3(655.0673f, 2757.986f, 41.44898f);
                }
                else if (iRand == 3)
                {
                    //Forgery
                    VectorList_01.Add(new Vector3(1657.198f, 4850.345f, 41.98742f));  //Area 5
                    VectorList_02.Add(new Vector3(1661.595f, 4855.484f, 41.66934f)); fGetDir = 8.066874f;
                    iMissionVar_02 = 3;

                    vFuMiss = new Vector3(1665.656f, 4841.49f, 41.50963f);
                }
                else
                {
                    //Weed
                    VectorList_01.Add(new Vector3(2848.198f, 4450.209f, 48.51353f));    //Area 5
                    VectorList_02.Add(new Vector3(2840.699f, 4450.243f, 48.33881f)); fGetDir = 198.1508f;
                    iMissionVar_02 = 5;

                    vFuMiss = new Vector3(2850.218f, 4428.765f, 48.43183f);
                }
                vTarget_01 = new Vector3(-1467.747f, -927.0994f, 10.09529f);
            }
            else
            {
                int iRand = FindRandom(16, 1, 5);
                if (iRand == 1)
                {
                    //Coke
                    VectorList_01.Add(new Vector3(51.57604f, 6486.273f, 31.42688f)); //Area 6
                    VectorList_02.Add(new Vector3(60.02742f, 6467.314f, 30.91507f)); fGetDir = 133.8197f;
                    iMissionVar_02 = 1;

                    vFuMiss = new Vector3(69.85964f, 6464.673f, 30.8649f);
                }
                else if (iRand == 2)
                {
                    //CounterF
                    VectorList_01.Add(new Vector3(-413.7644f, 6172.072f, 31.47821f)); //Area 6
                    VectorList_02.Add(new Vector3(-420.6328f, 6175.214f, 31.22611f)); fGetDir = 315.02f;
                    iMissionVar_02 = 2;

                    vFuMiss = new Vector3(-392.2291f, 6168.831f, 31.05536f);
                }
                else if (iRand == 3)
                {
                    //Forgery
                    VectorList_01.Add(new Vector3(-163.5257f, 6334.902f, 31.58081f)); //Area 6
                    VectorList_02.Add(new Vector3(-156.981f, 6335.649f, 31.23901f)); fGetDir = 223.7198f;
                    iMissionVar_02 = 3;

                    vFuMiss = new Vector3(-153.3542f, 6334.087f, 31.03994f);
                }
                else if (iRand == 4)
                {
                    //Meth
                    VectorList_01.Add(new Vector3(90.31782f, 6340.292f, 31.37566f)); //Area 6
                    VectorList_02.Add(new Vector3(79.48358f, 6340.361f, 30.97269f)); fGetDir = 116.1504f;
                    iMissionVar_02 = 4;


                    vFuMiss = new Vector3(85.23461f, 6375.621f, 30.71994f);
                }
                else
                {
                    //Weed
                    VectorList_01.Add(new Vector3(416.7168f, 6520.83f, 27.71297f)); //Area 6
                    VectorList_02.Add(new Vector3(427.0963f, 6529.909f, 27.48225f)); fGetDir = 354.0391f;
                    iMissionVar_02 = 5;

                    vFuMiss = new Vector3(426.2917f, 6549.695f, 27.08142f);
                }
                vTarget_01 = new Vector3(260.4337f, -1823.662f, 26.79713f);
            }

            if (iMissionVar_02 == 1)
            {
                VectorList_03.Add(new Vector3(1101.271f, -3197.999f, -38.99346f));
                VectorList_03.Add(new Vector3(1093.563f, -3194.035f, -38.99346f));
                VectorList_03.Add(new Vector3(1093.422f, -3197.22f, -38.99346f));
                VectorList_03.Add(new Vector3(1087.632f, -3196.166f, -38.99346f));
                VectorList_03.Add(new Vector3(1088.632f, -3187.793f, -38.99346f));  //start

                fMission_01 = 180.00f;
            }        //Coke Warehouse = 247553
            else if (iMissionVar_02 == 2)
            {
                VectorList_03.Add(new Vector3(1137.116f, -3194.313f, -40.39756f));
                VectorList_03.Add(new Vector3(1127.94f, -3194.983f, -40.40163f));
                VectorList_03.Add(new Vector3(1121.973f, -3195.467f, -40.40202f));
                VectorList_03.Add(new Vector3(1117.973f, -3195.85f, -40.40057f));
                VectorList_03.Add(new Vector3(1138.141f, -3198.814f, -39.66573f));  //start

                fMission_01 = 0.00f;
            }   //Counterfeit Cash Warehouse = 247809
            else if (iMissionVar_02 == 3)
            {
                VectorList_03.Add(new Vector3(1157.049f, -3198.495f, -39.00798f));
                VectorList_03.Add(new Vector3(1159.132f, -3191.732f, -39.00798f));
                VectorList_03.Add(new Vector3(1164.112f, -3192.009f, -39.00798f));
                VectorList_03.Add(new Vector3(1166.495f, -3196.158f, -39.00798f));
                VectorList_03.Add(new Vector3(1173.276f, -3196.729f, -39.00798f));  //start

                fMission_01 = 90.00f;
            }   //Documents Forgery Warehouse = 246785
            else if (iMissionVar_02 == 4)
            {
                VectorList_03.Add(new Vector3(1016.395f, -3195.819f, -38.99313f));
                VectorList_03.Add(new Vector3(1009.775f, -3200.557f, -38.99313f));
                VectorList_03.Add(new Vector3(1003.916f, -3195.244f, -38.99313f));
                VectorList_03.Add(new Vector3(999.0506f, -3199.958f, -38.99313f));
                VectorList_03.Add(new Vector3(997.2625f, -3200.779f, -36.3937f)); //start

                fMission_01 = -90.00f;
            }   //Meth Warehouse = 247041
            else
            {
                VectorList_03.Add(new Vector3(1042.56f, -3195.37f, -38.16234f));
                VectorList_03.Add(new Vector3(1036.336f, -3206.347f, -38.17264f));
                VectorList_03.Add(new Vector3(1054.596f, -3200.797f, -39.16124f));
                VectorList_03.Add(new Vector3(1058.92f, -3193.996f, -39.16131f));
                VectorList_03.Add(new Vector3(1066.142f, -3183.28f, -39.16345f));  //start

                fMission_01 = 90.00f;
            }                            //Weed Warehouse = 247297

            iMissionVar_01 = FindRandom(13, 1, 3);

            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("BikerRaids, iMissionVar_01 == " + iMissionVar_01 + ",iMissionVar_02 == " + iMissionVar_02, tEx);

            Vector3 VT = VectorList_01[0];
            VT.Z -= 1.00f;
            TheYellowCorona(VT, 1.00f);
            AddTarget(VT, true, true, 1.00f, false);

            iCashBouns = 500;
            iTime_01.Add(0);
            iTime_01.Add(1);
            BeOnOff.Add(false);//   bSuitCase   0 
            BeOnOff.Add(false);//   bTruckBlip  1 
            BeOnOff.Add(false);//   bMoveYourV  2 
            BeOnOff.Add(false);//   bDoOnce     3    
            BeOnOff.Add(false);//   bBypassShare4  

            LoadInMissionIPLs(iMissionVar_02, true);
            bOnTheJob = true;
        }
        private void CargoCollect()
        {
            if (!bOnlineStuffLoaded)
                LoadOnlineIps();

            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("CargoCollect", tEx);

            BigMessageThread.MessageInstance.ShowSimpleShard(sAltLang[18], "", 5000);
            fList_01.Clear();
            fList_02.Clear();
            BeOnOff.Clear();
            VectorList_01.Clear();
            VectorList_02.Clear();
            VectorList_03.Clear();
            VectorList_04.Clear();

            List<Vector3> vList = new List<Vector3>();

            List<Vector3> FuFuList = new List<Vector3>();

            if (iLocationX == 1)
            {
                int iRanBiz = FindRandom(10, 1, 3);
                if (iRanBiz == 1)
                {
                    FuFuList.Add(new Vector3(286.4788f, -2993.62f, 5.228967f));
                    FuFuList.Add(new Vector3(53.62731f, -2554.311f, 5.491848f));
                    FuFuList.Add(new Vector3(235.7016f, -1936.402f, 23.04256f));
                    FuFuList.Add(new Vector3(905.642f, -1006.598f, 34.17911f));

                    VectorList_01.Add(new Vector3(274.8883f, -3015.478f, 5.697752f));//Pier 400 Utility Building -Elysian Island--Area 1
                    VectorList_01.Add(new Vector3(51.19014f, -2571.348f, 6.004592f));//Pacific Bait Storage -Elysian Island--Area 1
                    VectorList_01.Add(new Vector3(247.5364f, -1956.876f, 23.20047f));//Convenience Store Lockup -Rancho--Area 1
                    VectorList_01.Add(new Vector3(896.3674f, -1036.089f, 35.11144f)); //Celltowa Unit -La Mesa--Area 1

                    VectorList_03.Add(new Vector3(143.8923f, -3002.613f, 7.030982f)); fList_01.Add(3.425886f);
                    VectorList_03.Add(new Vector3(57.65947f, -2563.766f, 6.001038f)); fList_01.Add(356.2111f);
                    VectorList_03.Add(new Vector3(246.8526f, -1967.732f, 21.96168f)); fList_01.Add(222.8701f);
                    VectorList_03.Add(new Vector3(908.6414f, -1054.812f, 32.82803f)); fList_01.Add(74.6995f);

                    VectorList_04.Add(new Vector3(164.4823f, -2989.739f, 5.713963f)); fList_02.Add(269.5402f);
                    VectorList_04.Add(new Vector3(70.94057f, -2559.056f, 5.804798f)); fList_02.Add(181.4869f);
                    VectorList_04.Add(new Vector3(257.1387f, -1957.479f, 22.83393f)); fList_02.Add(48.34646f);
                    VectorList_04.Add(new Vector3(892.3995f, -1021.739f, 34.78522f)); fList_02.Add(92.14743f);
                    iMissionVar_01 = 8;
                }   //LargeWarehose
                else if (iRanBiz == 2)
                {
                    FuFuList.Add(new Vector3(501.4008f, -672.8757f, 24.63765f));
                    FuFuList.Add(new Vector3(534.1782f, -1898.31f, 24.7183f));
                    FuFuList.Add(new Vector3(-316.4882f, -2674.782f, 5.540444f));
                    FuFuList.Add(new Vector3(-515.141f, -1779.458f, 20.61676f));
                    FuFuList.Add(new Vector3(-288.9933f, -1369.201f, 30.67698f));

                    VectorList_01.Add(new Vector3(499.7f, -652.116f, 24.90832f));  //Railyard Warehouse -La Mesa--Area 1
                    VectorList_01.Add(new Vector3(539.6681f, -1945.474f, 24.98463f));   //Old Power Station -Rancho--Area 1
                    VectorList_01.Add(new Vector3(-315.2117f, -2698.162f, 7.550228f));  //LS Marine Building 3 -Elysian Island--Area 1
                    VectorList_01.Add(new Vector3(-528.1617f, -1784.413f, 21.5696f));   //Fridgit Annexe -La Puerta--Area 1
                    VectorList_01.Add(new Vector3(-324.7966f, -1356.194f, 31.29572f));  //Disused Factory Outlet -Strawberry--Area 1

                    VectorList_03.Add(new Vector3(495.9565f, -636.6316f, 24.94718f)); fList_01.Add(292.6637f);
                    VectorList_03.Add(new Vector3(541.1272f, -1944.672f, 24.98512f)); fList_01.Add(314.951f);
                    VectorList_03.Add(new Vector3(-294.8669f, -2691.587f, 6.000297f)); fList_01.Add(131.9584f);
                    VectorList_03.Add(new Vector3(-548.0119f, -1801.606f, 22.02978f)); fList_01.Add(60.1952f);
                    VectorList_03.Add(new Vector3(-327.7578f, -1348.119f, 31.35056f)); fList_01.Add(89.34285f);

                    VectorList_04.Add(new Vector3(515.2159f, -627.2473f, 24.56723f)); fList_02.Add(353.3535f);
                    VectorList_04.Add(new Vector3(550.1658f, -1929.799f, 24.62446f)); fList_02.Add(303.8734f);
                    VectorList_04.Add(new Vector3(-312.2143f, -2719.738f, 5.804877f)); fList_02.Add(136.3163f);
                    VectorList_04.Add(new Vector3(-552.5865f, -1786.923f, 21.97653f)); fList_02.Add(331.8421f);
                    VectorList_04.Add(new Vector3(-336.1457f, -1353.774f, 31.15578f)); fList_02.Add(178.9565f);

                    iMissionVar_01 = 7;
                }   //MedWarehose
                else
                {
                    FuFuList.Add(new Vector3(-1074.949f, -2025.39f, 12.55295f));
                    FuFuList.Add(new Vector3(1050.773f, -2173.575f, 31.1052f));
                    FuFuList.Add(new Vector3(129.747f, -2191.982f, 5.514949f));
                    FuFuList.Add(new Vector3(849.6513f, -1562.424f, 29.30508f));
                    FuFuList.Add(new Vector3(771.269f, -938.0235f, 25.09335f));
                    FuFuList.Add(new Vector3(1002.289f, -2472.827f, 27.96207f));
                    FuFuList.Add(new Vector3(-881.3438f, -2725.938f, 13.32079f));

                    VectorList_01.Add(new Vector3(-1042.583f, -2023.351f, 13.16157f)); //Xero Gas Factory -LSIA--Area 1 
                    VectorList_01.Add(new Vector3(1037.856f, -2173.218f, 31.53337f));   //Wholesale Furniture -Cypress Flats--Area 1 
                    VectorList_01.Add(new Vector3(95.99369f, -2216.351f, 6.171199f));   //Walker & Sons Warehouse -Banning--Area 1
                    VectorList_01.Add(new Vector3(926.5911f, -1560.207f, 30.74203f));   //Logistics Depot -La Mesa--Area 1
                    VectorList_01.Add(new Vector3(759.4894f, -909.5288f, 25.28011f));   //Darnel Bros Warehouse -La Mesa--Area 1
                    VectorList_01.Add(new Vector3(1017.381f, -2529.118f, 28.30198f));   //Cypress Warehouses -Cypress Flats--Area 1
                    VectorList_01.Add(new Vector3(-863.278f, -2717.185f, 13.93703f)); //Bilgeco Warehouse -LSIA--Area 1

                    VectorList_03.Add(new Vector3(-1049.724f, -2018.736f, 13.16158f)); fList_01.Add(138.4975f);
                    VectorList_03.Add(new Vector3(1040.495f, -2177.792f, 31.47174f)); fList_01.Add(260.5353f);
                    VectorList_03.Add(new Vector3(108.8328f, -2203.059f, 7.653018f)); fList_01.Add(353.475f);
                    VectorList_03.Add(new Vector3(924.2091f, -1563.939f, 30.72375f)); fList_01.Add(91.18757f);
                    VectorList_03.Add(new Vector3(762.2568f, -899.5262f, 25.17671f)); fList_01.Add(274.0542f);
                    VectorList_03.Add(new Vector3(1014.684f, -2525.242f, 28.30399f)); fList_01.Add(72.11306f);
                    VectorList_03.Add(new Vector3(-876.1209f, -2732.82f, 13.82849f)); fList_01.Add(60.4894f);

                    VectorList_04.Add(new Vector3(-1054.654f, -2016.696f, 12.96902f)); fList_02.Add(317.3377f);
                    VectorList_04.Add(new Vector3(1047.039f, -2168.228f, 31.5702f)); fList_02.Add(354.6175f);
                    VectorList_04.Add(new Vector3(102.823f, -2194.802f, 5.878262f)); fList_02.Add(88.19944f);
                    VectorList_04.Add(new Vector3(900.8614f, -1556.664f, 30.46791f)); fList_02.Add(126.1308f);
                    VectorList_04.Add(new Vector3(753.0141f, -881.3607f, 24.88846f)); fList_02.Add(90.48436f);
                    VectorList_04.Add(new Vector3(1012.498f, -2492.435f, 28.11445f)); fList_02.Add(339.6606f);
                    VectorList_04.Add(new Vector3(-891.7543f, -2740.43f, 13.63446f)); fList_02.Add(150.4673f);

                    iMissionVar_01 = 6;
                }   //SmallWarehose
                vList.Add(new Vector3(-385.749f, 1211.177f, 325.6418f));
                vList.Add(new Vector3(198.1118f, 1235.713f, 225.46f));
                vList.Add(new Vector3(612.6734f, 634.253f, 128.9111f));
                vList.Add(new Vector3(1118.019f, 235.4945f, 80.85564f));
                vList.Add(new Vector3(907.884f, -55.81165f, 78.76413f));
                vList.Add(new Vector3(2541.999f, -396.4591f, 92.99284f));
                vList.Add(new Vector3(2579.628f, 439.6417f, 108.4557f));
                vList.Add(new Vector3(2660.208f, 1685.798f, 24.48824f));
                vList.Add(new Vector3(2725.141f, 1355.962f, 24.524f));
                vList.Add(new Vector3(2547.122f, 2613.274f, 37.94488f));
            }
            else if (iLocationX == 2)
            {
                int iRanBiz = FindRandom(10, 1, 3);
                if (iRanBiz == 1)
                {
                    FuFuList.Add(new Vector3(-1061.154f, -1269.829f, 5.439614f));
                    FuFuList.Add(new Vector3(-407.0453f, 229.2834f, 82.85832f));

                    VectorList_01.Add(new Vector3(-1082.904f, -1262.042f, 5.601765f));//White Widow Garage -La Puerta--Area 2
                    VectorList_01.Add(new Vector3(-424.7138f, 185.4996f, 80.79431f));//Foreclosed Garage -West Vinewood--Area 2

                    VectorList_03.Add(new Vector3(-1083.866f, -1254.879f, 5.404573f)); fList_01.Add(303.3562f);
                    VectorList_03.Add(new Vector3(-421.5192f, 182.9661f, 80.50156f)); fList_01.Add(259.9094f);

                    VectorList_04.Add(new Vector3(-1073.89f, -1263.036f, 5.657478f)); fList_02.Add(211.2767f);
                    VectorList_04.Add(new Vector3(-400.0655f, 203.4503f, 83.0389f)); fList_02.Add(358.319f);

                    iMissionVar_01 = 8;
                }   //LargeWarehose
                else if (iRanBiz == 2)
                {
                    FuFuList.Add(new Vector3(354.6386f, 320.6063f, 103.3927f));
                    FuFuList.Add(new Vector3(-1247.178f, -881.2542f, 11.61784f));

                    VectorList_01.Add(new Vector3(367.8993f, 351.118f, 103.116f)); // Discount Retail Unit -Downtown Vinewood--Area 2
                    VectorList_01.Add(new Vector3(-1268.326f, -812.3163f, 17.10782f)); //Derriere Lingerie Backlot -Del Perro--Area 2

                    VectorList_03.Add(new Vector3(367.2045f, 337.8325f, 103.3221f)); fList_01.Add(206.8836f);
                    VectorList_03.Add(new Vector3(-1267.413f, -817.7491f, 17.09917f)); fList_01.Add(126.7912f);

                    VectorList_04.Add(new Vector3(354.9602f, 321.4632f, 103.7651f)); fList_02.Add(74.92898f);
                    VectorList_04.Add(new Vector3(-1286.751f, -813.6746f, 17.1413f)); fList_02.Add(123.7716f);

                    iMissionVar_01 = 7;
                }   //MedWarehose
                else
                {
                    FuFuList.Add(new Vector3(-231.9018f, 194.6969f, 80.62703f));

                    VectorList_01.Add(new Vector3(-245.2137f, 203.542f, 83.92123f));    //West Vinewood Backlot -West Vinewood--Area 2

                    VectorList_03.Add(new Vector3(-262.4737f, 200.0251f, 85.27554f)); fList_01.Add(185.1555f);

                    VectorList_04.Add(new Vector3(-273.088f, 200.9226f, 85.51161f)); fList_02.Add(58.10743f);

                    iMissionVar_01 = 6;
                }   //SmallWarehose

                vList.Add(new Vector3(366.5912f, 2633.793f, 44.49739f));
                vList.Add(new Vector3(621.1447f, 2724.342f, 41.82872f));
                vList.Add(new Vector3(1124.017f, 2648.292f, 37.99646f));
                vList.Add(new Vector3(1996.471f, 3055.928f, 47.05279f));
                vList.Add(new Vector3(1869.733f, 2584.461f, 45.67206f));
                vList.Add(new Vector3(2662.729f, 3260.35f, 55.24051f));
                vList.Add(new Vector3(2763.139f, 3458.586f, 55.75253f));
                vList.Add(new Vector3(318.086f, 3460.958f, 36.01319f));
                vList.Add(new Vector3(1420.838f, 3622.756f, 34.87066f));
                vList.Add(new Vector3(1546.354f, 3782.107f, 34.06033f));
                vList.Add(new Vector3(1704.99f, 3765.2f, 34.3701f));
                vList.Add(new Vector3(1885.653f, 3720.016f, 32.85341f));
                vList.Add(new Vector3(1959.192f, 3765.042f, 32.1996f));
                vList.Add(new Vector3(2480.416f, 4114.066f, 38.06472f));
                vList.Add(new Vector3(3333.39f, 5160.618f, 18.30962f));
                vList.Add(new Vector3(2904.15f, 4396.701f, 50.2622f));
                vList.Add(new Vector3(1793.418f, 4585.181f, 37.21337f));
                vList.Add(new Vector3(1690.838f, 4770.571f, 41.92147f));
            }
            else if (iLocationX == 3)
            {
                FuFuList.Add(new Vector3(-3016.109f, 3351.985f, 9.94969f));
                FuFuList.Add(new Vector3(-3119.893f, 1315.089f, 19.23047f));

                VectorList_01.Add(new Vector3(-3031.497f, 3334.082f, 10.19057f));//Area 3
                VectorList_01.Add(new Vector3(-3157.577f, 1376.335f, 16.88033f)); //Area 3

                VectorList_03.Add(new Vector3(-3027.749f, 3334.768f, 10.03492f)); fList_01.Add(277.8759f);
                VectorList_03.Add(new Vector3(-3152.141f, 1376.579f, 17.34282f)); fList_01.Add(276.9177f);

                VectorList_04.Add(new Vector3(-3009.387f, 3352.261f, 10.34941f)); fList_02.Add(12.67088f);
                VectorList_04.Add(new Vector3(-3138.906f, 1340.406f, 19.2906f)); fList_02.Add(200.9747f);

                vList.Add(new Vector3(-1539.419f, 4935.714f, 61.53736f));
                vList.Add(new Vector3(-1576.76f, 5168.608f, 19.03519f));
                vList.Add(new Vector3(-759.3788f, 5547.596f, 33.48568f));
                vList.Add(new Vector3(-674.0231f, 5779.188f, 17.33097f));
                vList.Add(new Vector3(-265.0732f, 6064.716f, 31.4644f));
                vList.Add(new Vector3(-391.4352f, 6083.209f, 31.50013f));
                vList.Add(new Vector3(-137.5783f, 6356.531f, 31.49063f));
                vList.Add(new Vector3(-225.8601f, 6347.249f, 32.3539f));
                vList.Add(new Vector3(-70.07785f, 6355.13f, 31.49036f));
                vList.Add(new Vector3(62.98142f, 6378.325f, 31.23985f));
                vList.Add(new Vector3(1585.525f, 6446.103f, 25.1308f));
                vList.Add(new Vector3(1447.849f, 6579.536f, 13.04301f));
                iMissionVar_01 = 9;                //Bunkers
            }
            else if (iLocationX == 4)
            {

                int iRanBiz = FindRandom(7, 1, 2);

                if (iRanBiz == 1)
                {
                    FuFuList.Add(new Vector3(1535.109f, -2184.418f, 76.80535f));

                    VectorList_01.Add(new Vector3(1569.585f, -2130.049f, 78.33009f));   //GEE Warehouse -El Burro Heights--Area 4

                    VectorList_03.Add(new Vector3(1566.348f, -2153.749f, 77.55859f)); fList_01.Add(351.1119f);

                    VectorList_04.Add(new Vector3(1549.432f, -2147.021f, 77.32233f)); fList_02.Add(159.8675f);

                    iMissionVar_01 = 7;
                }   //MedWarehose
                else
                {
                    FuFuList.Add(new Vector3(1530.614f, 2202.683f, 78.0166f));

                    VectorList_01.Add(new Vector3(1572.153f, 2226.005f, 78.28186f));//Area 4

                    VectorList_03.Add(new Vector3(1571.915f, 2223.302f, 78.40997f)); fList_01.Add(166.6924f);

                    VectorList_04.Add(new Vector3(1569.052f, 2206.243f, 78.74351f)); fList_02.Add(93.91222f);

                    iMissionVar_01 = 9;
                }        //Bunkers
                vList.Add(new Vector3(418.5228f, -1323.451f, 45.99149f));
                vList.Add(new Vector3(-707.1237f, -2125.089f, 5.991802f));
                vList.Add(new Vector3(-1032.987f, -2644.564f, 21.60494f));
                vList.Add(new Vector3(-912.8343f, -2602.602f, 31.60501f));
                vList.Add(new Vector3(-323.3053f, -2730.198f, 6.010223f));
                vList.Add(new Vector3(-53.84815f, -2106.136f, 16.70485f));
                vList.Add(new Vector3(-226.6113f, -1485.485f, 31.32402f));
                vList.Add(new Vector3(30.41531f, -1740.875f, 29.30323f));
                vList.Add(new Vector3(708.2263f, -1392.039f, 26.30967f));
                vList.Add(new Vector3(782.2178f, -2961.597f, 5.800721f));
                vList.Add(new Vector3(829.4429f, -2120.328f, 29.33405f));
                vList.Add(new Vector3(997.9778f, -1955.919f, 30.81864f));
                vList.Add(new Vector3(1311.081f, -1664.154f, 51.23629f));
                vList.Add(new Vector3(1184.142f, -1554.17f, 34.69258f));
                vList.Add(new Vector3(1443.838f, -2611.028f, 48.32217f));
            }
            else if (iLocationX == 5)
            {
                FuFuList.Add(new Vector3(2496.238f, 3212.709f, 48.39721f));
                FuFuList.Add(new Vector3(2038.698f, 3317.65f, 45.21719f));
                FuFuList.Add(new Vector3(851.0466f, 3091.883f, 39.46188f));
                FuFuList.Add(new Vector3(514.5208f, 3062.716f, 39.45173f));
                FuFuList.Add(new Vector3(53.01784f, 2849.96f, 53.94388f));
                FuFuList.Add(new Vector3(1710.984f, 4700.84f, 42.20218f));

                VectorList_01.Add(new Vector3(2489.491f, 3162.176f, 49.01019f));//Area 5
                VectorList_01.Add(new Vector3(2109.757f, 3325.773f, 45.35473f));//Area 5
                VectorList_01.Add(new Vector3(849.797f, 3021.237f, 41.31252f));//Area 5
                VectorList_01.Add(new Vector3(492.7792f, 3013.473f, 40.95134f));//Area 5
                VectorList_01.Add(new Vector3(38.98915f, 2931.238f, 55.86897f));//Area 5
                VectorList_01.Add(new Vector3(1801.849f, 4705.611f, 39.79904f));//Area 5

                VectorList_03.Add(new Vector3(2488.411f, 3167.057f, 49.19688f)); fList_01.Add(12.43598f);
                VectorList_03.Add(new Vector3(2104.299f, 3323.37f, 45.35637f)); fList_01.Add(115.0392f);
                VectorList_03.Add(new Vector3(849.9589f, 3026.213f, 41.26106f)); fList_01.Add(355.2358f);
                VectorList_03.Add(new Vector3(495.1412f, 3017.337f, 41.01286f)); fList_01.Add(332.5786f);
                VectorList_03.Add(new Vector3(41.57499f, 2926.659f, 55.6709f)); fList_01.Add(210.2706f);
                VectorList_03.Add(new Vector3(1795.429f, 4705.885f, 40.02833f)); fList_01.Add(79.38572f);

                VectorList_04.Add(new Vector3(2497.187f, 3204.1f, 48.84472f)); fList_02.Add(314.7668f);
                VectorList_04.Add(new Vector3(2070.462f, 3315.039f, 45.44235f)); fList_02.Add(149.7169f);
                VectorList_04.Add(new Vector3(870.8865f, 3050.909f, 40.64046f)); fList_02.Add(338.0659f);
                VectorList_04.Add(new Vector3(482.8536f, 3034.044f, 39.86146f)); fList_02.Add(315.2647f);
                VectorList_04.Add(new Vector3(14.42008f, 2908.858f, 57.50762f)); fList_02.Add(192.1089f);
                VectorList_04.Add(new Vector3(1770.261f, 4714.629f, 40.91407f)); fList_02.Add(89.64275f);
                iMissionVar_01 = 9;                //Bunkers
                vList.Add(new Vector3(484.9134f, -1102.252f, 29.20086f));
                vList.Add(new Vector3(9.671286f, -1063.956f, 38.15213f));
                vList.Add(new Vector3(-320.6418f, -753.4194f, 48.42424f));
                vList.Add(new Vector3(-673.2905f, -609.6758f, 25.30779f));
                vList.Add(new Vector3(-499.6268f, 170.145f, 70.93163f));
                vList.Add(new Vector3(-367.1788f, -45.75231f, 54.42317f));
                vList.Add(new Vector3(-1228.149f, -667.3433f, 35.53881f));
                vList.Add(new Vector3(-1267.663f, -216.0041f, 56.10192f));
                vList.Add(new Vector3(-1230.685f, -386.1529f, 53.79265f));
                vList.Add(new Vector3(-2011.531f, -329.1964f, 48.10631f));
            }
            else
            {
                FuFuList.Add(new Vector3(-380.6723f, 4279.208f, 48.06001f));
                FuFuList.Add(new Vector3(-679.215f, 5955.822f, 14.62427f));

                VectorList_01.Add(new Vector3(-389.0054f, 4340.79f, 56.16319f));//Area 6
                VectorList_01.Add(new Vector3(-756.1978f, 5944.006f, 19.9384f));//Area 6

                VectorList_03.Add(new Vector3(-388.3983f, 4335.65f, 55.97264f)); fList_01.Add(190.199f);
                VectorList_03.Add(new Vector3(-750.7578f, 5944.738f, 19.66197f)); fList_01.Add(277.7047f);

                VectorList_04.Add(new Vector3(-380.4007f, 4281.34f, 48.93768f)); fList_02.Add(229.943f);
                VectorList_04.Add(new Vector3(-750.405f, 5933.408f, 18.99001f)); fList_02.Add(191.6073f);
                iMissionVar_01 = 9;               //Bunkers
                vList.Add(new Vector3(-1650.93f, -226.0081f, 55.04493f));
                vList.Add(new Vector3(-2166.621f, -392.1426f, 13.33964f));
                vList.Add(new Vector3(-1905.582f, 2017.274f, 140.9272f));
                vList.Add(new Vector3(-2339.518f, 293.3825f, 169.4672f));
                vList.Add(new Vector3(-2988.337f, 86.62109f, 11.5693f));
                vList.Add(new Vector3(-2965.499f, 359.8159f, 14.76993f));
                vList.Add(new Vector3(-3052.89f, 602.9825f, 7.294055f));
                vList.Add(new Vector3(-3245.57f, 988.1583f, 12.5006f));
                vList.Add(new Vector3(-3138.26f, 1091.163f, 20.64276f));
                vList.Add(new Vector3(-1154.366f, 2677.421f, 18.09391f));
            }

            if (iMissionVar_01 == 6)
            {
                VectorList_02.Add(new Vector3(1000.237f, -3091.657f, -38.9999f));
                VectorList_02.Add(new Vector3(1017.577f, -3099.977f, -38.99988f));
                VectorList_02.Add(new Vector3(1011.025f, -3105.29f, -38.99988f));
                VectorList_02.Add(new Vector3(1012.526f, -3094.295f, -38.99988f));
                VectorList_02.Add(new Vector3(1022.533f, -3094.535f, -38.99987f));
                VectorList_02.Add(new Vector3(1022.373f, -3102.042f, -38.99987f));
                VectorList_02.Add(new Vector3(1021.009f, -3110.479f, -38.99987f));
                VectorList_02.Add(new Vector3(1007.563f, -3111.366f, -38.99987f));
                VectorList_02.Add(new Vector3(996.416f, -3107.894f, -38.99988f));
                VectorList_02.Add(new Vector3(992.7119f, -3097.946f, -38.99586f));    //start
                fMission_01 = -90.00f;
            }
            else if (iMissionVar_01 == 7)
            {
                VectorList_02.Add(new Vector3(1064.339f, -3106.556f, -38.99995f));
                VectorList_02.Add(new Vector3(1070.742f, -3105.32f, -38.99995f));
                VectorList_02.Add(new Vector3(1070.318f, -3099.159f, -38.99995f));
                VectorList_02.Add(new Vector3(1063.515f, -3099.027f, -38.99995f));
                VectorList_02.Add(new Vector3(1056.528f, -3098.606f, -38.99995f));
                VectorList_02.Add(new Vector3(1048.456f, -3097.323f, -38.99995f));    //start
                fMission_01 = -90.00f;
            }
            else if (iMissionVar_01 == 8)
            {
                VectorList_02.Add(new Vector3(1102.655f, -3100.313f, -38.99995f));
                VectorList_02.Add(new Vector3(1097.039f, -3102.641f, -38.99995f));
                VectorList_02.Add(new Vector3(1087.757f, -3099.406f, -38.99995f));   //start
                fMission_01 = -90.00f;
            }
            else
            {
                VectorList_02.Add(new Vector3(868.2318f, -3230.087f, -98.29446f));
                VectorList_02.Add(new Vector3(886.4559f, -3212.001f, -98.19621f));
                VectorList_02.Add(new Vector3(908.8542f, -3211.221f, -98.22218f));
                VectorList_02.Add(new Vector3(906.2184f, -3229.914f, -98.29436f));
                VectorList_02.Add(new Vector3(943.6704f, -3236.479f, -98.2968f));
                VectorList_02.Add(new Vector3(931.1979f, -3214.218f, -98.26333f));
                VectorList_02.Add(new Vector3(940.9261f, -3197.448f, -98.26443f));
                VectorList_02.Add(new Vector3(893.1318f, -3179.854f, -97.11796f));
                VectorList_02.Add(new Vector3(904.9841f, -3200.06f, -97.18797f));
                VectorList_02.Add(new Vector3(893.9405f, -3206.172f, -98.18995f));
                VectorList_02.Add(new Vector3(882.6129f, -3204.415f, -98.1963f));
                VectorList_02.Add(new Vector3(866.1926f, -3217.693f, -97.87908f));
                VectorList_02.Add(new Vector3(856.3937f, -3228.032f, -98.47646f));
                VectorList_02.Add(new Vector3(855.9623f, -3230.793f, -98.47524f));
                VectorList_02.Add(new Vector3(868.3938f, -3238.448f, -98.29231f));
                VectorList_02.Add(new Vector3(894.5801f, -3245.898f, -98.25877f));     //start
                fMission_01 = 90.00f;
            }

            iMissionVar_03 = RandInt(0, VectorList_01.Count - 1);
            vTarget_01 = VectorList_01[iMissionVar_03];

            vFuMiss = FuFuList[iMissionVar_03];

            vTarget_03 = vList[RandInt(0, vList.Count - 1)];
            vTarget_03.Z -= 1.00f;

            BeOnOff.Add(false);//   bForkStuck  0   
            BeOnOff.Add(false);//   bForkBlip   1   
            BeOnOff.Add(false);//   bTruckBlip  2  
            BeOnOff.Add(false);//   bDoOnce     3 
            BeOnOff.Add(false);//   bMoveYourV  4 
            BeOnOff.Add(false);//   bSuitCase   5 

            vTarget_01.Z -= 1.00f;
            AddTarget(vTarget_01, true, true, 1.00f, false);
            TheYellowCorona(vTarget_01, 1.00f);

            LoadInMissionIPLs(iMissionVar_01, true);

            bOnTheJob = true;
        }
        private void DeepDown()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("DeepDown", tEx);

            BigMessageThread.MessageInstance.ShowSimpleShard(sAltLang[19], "", 5000);
            PropList_01.Clear();
            fList_01.Clear();
            BeOnOff.Clear();
            VectorList_01.Clear();
            VectorList_02.Clear();

            if (iLocationX == 1)
            {
                VectorList_01.Add(new Vector3(1829.751f, -2962.983f, -41.09711f));
                VectorList_01.Add(new Vector3(881.9769f, -3480.864f, -12.39751f));
                VectorList_01.Add(new Vector3(271.4858f, -2290.783f, -8.27566f));
                VectorList_01.Add(new Vector3(-199.2741f, -2862.99f, -11.28995f));

                VectorList_02.Add(new Vector3(604.118408f, -2109.82544f, 0.632450938f)); fList_01.Add(174.998993f);
                VectorList_02.Add(new Vector3(604.118408f, -2109.82544f, 0.632450938f)); fList_01.Add(174.998993f);
                VectorList_02.Add(new Vector3(604.118408f, -2109.82544f, 0.632450938f)); fList_01.Add(174.998993f);
                VectorList_02.Add(new Vector3(604.118408f, -2109.82544f, 0.632450938f)); fList_01.Add(174.998993f);

                VectorList_03.Add(new Vector3(584.8275f, -2091.987f, 14.14371f));
                VectorList_03.Add(new Vector3(584.8275f, -2091.987f, 14.14371f));
                VectorList_03.Add(new Vector3(584.8275f, -2091.987f, 14.14371f));
                VectorList_03.Add(new Vector3(584.8275f, -2091.987f, 14.14371f));
            }
            else if (iLocationX == 2)
            {
                VectorList_01.Add(new Vector3(-1892.526f, -1307.415f, -35.69325f));
                VectorList_01.Add(new Vector3(-2843.658f, -574.4394f, -44.94706f));

                VectorList_02.Add(new Vector3(-1798.24133f, -1231.06409f, 0.431125998f)); fList_01.Add(139.999176f);
                VectorList_02.Add(new Vector3(-1798.24133f, -1231.06409f, 0.431125998f)); fList_01.Add(139.999176f);

                VectorList_03.Add(new Vector3(-1602.185f, -1035.632f, 12.55381f));
                VectorList_03.Add(new Vector3(-1602.185f, -1035.632f, 12.55381f));
            }
            else if (iLocationX == 3)
            {
                VectorList_01.Add(new Vector3(-3189.769f, 3026.521f, -30.46286f));
                VectorList_01.Add(new Vector3(-3252.511f, 3681.582f, -23.06396f));
                VectorList_01.Add(new Vector3(-3374.703f, 504.2789f, -24.57951f));
                VectorList_01.Add(new Vector3(-3163.912f, 3003.868f, -38.98509f));

                VectorList_02.Add(new Vector3(-3426.61743f, 948.637329f, 0.913f)); fList_01.Add(89.9997f);
                VectorList_02.Add(new Vector3(-3426.61743f, 948.637329f, 0.913f)); fList_01.Add(89.9997f);
                VectorList_02.Add(new Vector3(-3426.61743f, 948.637329f, 0.913f)); fList_01.Add(89.9997f);
                VectorList_02.Add(new Vector3(-3426.61743f, 948.637329f, 0.913f)); fList_01.Add(89.9997f);

                VectorList_03.Add(new Vector3(-3233.816f, 967.9095f, 12.50666f));
                VectorList_03.Add(new Vector3(-3233.816f, 967.9095f, 12.50666f));
                VectorList_03.Add(new Vector3(-3233.816f, 967.9095f, 12.50666f));
                VectorList_03.Add(new Vector3(-3233.816f, 967.9095f, 12.50666f));
            }
            else if (iLocationX == 4)
            {
                VectorList_01.Add(new Vector3(2655.749f, -1395.955f, -12.85984f));
                VectorList_01.Add(new Vector3(3164.551f, -364.2288f, -19.23776f));

                VectorList_02.Add(new Vector3(2873.02f, -719.071f, 0.6788f)); fList_01.Add(-78.999f);
                VectorList_02.Add(new Vector3(2873.02f, -719.071f, 0.6788f)); fList_01.Add(-78.999f);

                VectorList_03.Add(new Vector3(2779.22f, -714.098f, 5.011173f));
                VectorList_03.Add(new Vector3(2779.22f, -714.098f, 5.011173f));
            }
            else if (iLocationX == 5)
            {
                VectorList_01.Add(new Vector3(3886.64f, 3041.357f, -16.14589f));
                VectorList_01.Add(new Vector3(4279.323f, 2971.412f, -170.3207f));
                VectorList_01.Add(new Vector3(4218.59f, 3616.418f, -34.40534f));

                VectorList_02.Add(new Vector3(3863.60f, 4468.92f, 0.3944f)); fList_01.Add(-86.9996f);
                VectorList_02.Add(new Vector3(3863.60f, 4468.92f, 0.3944f)); fList_01.Add(-86.9996f);
                VectorList_02.Add(new Vector3(3863.60f, 4468.92f, 0.3944f)); fList_01.Add(-86.9996f);

                VectorList_03.Add(new Vector3(3789.329f, 4463.776f, 5.342578f));
                VectorList_03.Add(new Vector3(3789.329f, 4463.776f, 5.342578f));
                VectorList_03.Add(new Vector3(3789.329f, 4463.776f, 5.342578f));
            }
            else
            {
                VectorList_01.Add(new Vector3(3401.174f, 6310.327f, -44.94764f));
                VectorList_01.Add(new Vector3(3269.4f, 6419.564f, -46.06504f));
                VectorList_01.Add(new Vector3(2649.136f, 6661.476f, -17.16622f));
                VectorList_01.Add(new Vector3(747.8029f, 7393.903f, -108.1086f));
                VectorList_01.Add(new Vector3(-951.4739f, 6692.083f, -32.37279f));

                VectorList_02.Add(new Vector3(-1617.081f, 5254.33f, 0.352575f)); fList_01.Add(26.5998f);
                VectorList_02.Add(new Vector3(-1617.081f, 5254.33f, 0.352575f)); fList_01.Add(26.5998f);
                VectorList_02.Add(new Vector3(-1617.081f, 5254.33f, 0.352575f)); fList_01.Add(26.5998f);
                VectorList_02.Add(new Vector3(-1617.081f, 5254.33f, 0.352575f)); fList_01.Add(26.5998f);
                VectorList_02.Add(new Vector3(-1617.081f, 5254.33f, 0.352575f)); fList_01.Add(26.5998f);

                VectorList_03.Add(new Vector3(-1577.156f, 5165.118f, 19.04766f));
                VectorList_03.Add(new Vector3(-1577.156f, 5165.118f, 19.04766f));
                VectorList_03.Add(new Vector3(-1577.156f, 5165.118f, 19.04766f));
                VectorList_03.Add(new Vector3(-1577.156f, 5165.118f, 19.04766f));
                VectorList_03.Add(new Vector3(-1577.156f, 5165.118f, 19.04766f));
            }

            if (bTestRun)
            {
                VectorList_01.Clear();
                VectorList_02.Clear();
                VectorList_03.Clear();
                fList_01.Clear();
                bJobLoaded = true;
                iJobType = 20;
                VectorList_01.Add(MyMissions.SharksXM[0].StartPoint);
                VectorList_02.Add(MyMissions.SharksXM[0].SubSpawn); fList_01.Add(MyMissions.SharksXM[0].SubHead);
                VectorList_03.Add(MyMissions.SharksXM[0].FubStop);
            }
            else if (FindBuiltMissions(6))
            {
                List<Vector3> NewStops_01 = new List<Vector3>();
                List<Vector3> NewStops_02 = new List<Vector3>();
                List<float> NewDirection = new List<float>();
                List<Vector3> NewStops_03 = new List<Vector3>();

                for (int i = 0; i < MyMissions.SharksXM.Count; i++)
                {
                    NewStops_01.Add(MyMissions.SharksXM[i].StartPoint);
                    NewStops_02.Add(MyMissions.SharksXM[i].SubSpawn); NewDirection.Add(MyMissions.SharksXM[i].SubHead);
                    NewStops_03.Add(MyMissions.SharksXM[i].FubStop);
                }

                if (NewStops_01.Count > 0)
                {
                    if (bBulderOnly || RandBool(14))
                    {
                        VectorList_01.Clear();
                        VectorList_02.Clear();
                        VectorList_03.Clear();
                        fList_01.Clear();

                        for (int i = 0; i < NewStops_01.Count; i++)
                        {
                            VectorList_01.Add(NewStops_01[i]);
                            VectorList_02.Add(NewStops_02[i]); fList_01.Add(NewDirection[i]);
                            VectorList_03.Add(NewStops_03[i]);
                        }
                    }
                }

            }
            int iSwim = RandInt(0, VectorList_01.Count - 1);
            vTarget_01 = VectorList_01[iSwim];

            vFuMiss = VectorList_03[iSwim];

            VehicleSpawn("SUBMERSIBLE2", VectorList_02[iSwim], fList_01[iSwim], false, false, true, true, 27, 0, 21, 1, false);

            BeOnOff.Add(false);//   bTruckBlip  0 
            BeOnOff.Add(false);//   bSuitCase   1 
            bOnTheJob = true;
        }
        public class DeapBuild
        {
            public int Local { get; set; }
            public Vector3 FubStop { get; set; }
            public Vector3 StartPoint { get; set; }
            public Vector3 SubSpawn { get; set; }
            public float SubHead { get; set; }
        }
        private void TheCayoMissions()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("TheCayoMissions iJobType == " + iJobType, tEx);

            if (iJobType == 21)
            {
                Packages();
            }      //Packages
            else if (iJobType == 22)
            {
                BigMessageThread.MessageInstance.ShowSimpleShard(sAltLang[7], "", 5000);
                VTBTimerPool.Add(BtSlideBar);
                BtSlideBar.Label = "" + sAltLang[307] + "";
                ttTextBar_01.Label = "" + sAltLang[303] + "";
                iTime_01.Clear();
                BeOnOff.Clear();

                iTime_01.Add(0);
                iTime_01.Add(0);
                iTime_01.Add(0);
                iTime_01.Add(0);
                iTime_01.Add(0);

                iCashReward = 0;

                int iRandm = FindRandom(34, 1, 3);

                fList_01.Clear();
                fList_02.Clear();
                VectorList_01.Clear();
                VectorList_02.Clear();
                VectorList_03.Clear();

                if (iRandm == 1)
                {
                    VectorList_01.Add(new Vector3(4961.72f, -4823.566f, 5.969322f));
                    VectorList_01.Add(new Vector3(4968.433f, -4710.264f, 8.319826f));
                    VectorList_01.Add(new Vector3(5005.988f, -4715.379f, 10.74354f));
                    VectorList_01.Add(new Vector3(5014.907f, -4768.094f, 17.62075f));
                    VectorList_01.Add(new Vector3(5049.153f, -4835.865f, 19.09438f));
                    VectorList_01.Add(new Vector3(5107.04f, -4888.757f, 15.08302f));
                    VectorList_01.Add(new Vector3(5105.134f, -4946.161f, 17.234f));
                    VectorList_01.Add(new Vector3(5132.717f, -4944.722f, 14.9087f));
                    VectorList_01.Add(new Vector3(5139.033f, -4949.664f, 14.52732f));
                    VectorList_01.Add(new Vector3(5138.216f, -4956.092f, 14.51503f));
                    VectorList_01.Add(new Vector3(5148.449f, -4964.634f, 13.98844f));
                    VectorList_01.Add(new Vector3(5150.176f, -4973.736f, 13.15734f));
                    VectorList_01.Add(new Vector3(5198.056f, -5050.193f, 12.95233f));

                    vTarget_02 = new Vector3(4967.81f, -4668.752f, 11.41602f);

                    iCashReward = RandInt(500,550);
                }
                else if (iRandm == 2)
                {
                    VectorList_01.Add(new Vector3(5007.773f, -4926.326f, 9.441853f));
                    VectorList_01.Add(new Vector3(5052.629f, -4910.178f, 15.26108f));
                    VectorList_01.Add(new Vector3(5071.191f, -4920.844f, 17.56548f));
                    VectorList_01.Add(new Vector3(5112.578f, -4949.875f, 16.03908f));
                    VectorList_01.Add(new Vector3(5132.667f, -4944.529f, 14.91733f));
                    VectorList_01.Add(new Vector3(5138.29f, -4948.303f, 14.5717f));
                    VectorList_01.Add(new Vector3(5139.203f, -4956.247f, 14.48044f));
                    VectorList_01.Add(new Vector3(5148.311f, -4964.622f, 13.99567f));
                    VectorList_01.Add(new Vector3(5149.051f, -4974.38f, 13.15724f));
                    VectorList_01.Add(new Vector3(5159.524f, -5001.336f, 10.62832f));
                    VectorList_01.Add(new Vector3(5166.199f, -5003.822f, 11.54279f));
                    VectorList_01.Add(new Vector3(5195.089f, -5049.757f, 12.72364f));

                    vTarget_02 = new Vector3(5022.979f, -4871.323f, 14.67111f);

                    iCashReward = RandInt(500, 550);
                }
                else
                {
                    VectorList_01.Add(new Vector3(4511.16f, -4517.847f, 3.587658f));
                    VectorList_01.Add(new Vector3(4515.872f, -4527.401f, 3.652275f));
                    VectorList_01.Add(new Vector3(4543.808f, -4535.727f, 5.535728f));
                    VectorList_01.Add(new Vector3(4629.189f, -4544.506f, 13.17307f));
                    VectorList_01.Add(new Vector3(4725.248f, -4534.113f, 25.95804f));
                    VectorList_01.Add(new Vector3(4803.674f, -4562.749f, 22.14445f));
                    VectorList_01.Add(new Vector3(4908.089f, -4615.26f, 14.42918f));
                    VectorList_01.Add(new Vector3(4951.479f, -4657.686f, 12.37331f));
                    VectorList_01.Add(new Vector3(4964.315f, -4697.906f, 8.262118f));
                    VectorList_01.Add(new Vector3(4999.572f, -4713.235f, 10.152f));
                    VectorList_01.Add(new Vector3(5015.257f, -4751.375f, 14.55854f));
                    VectorList_01.Add(new Vector3(5035.354f, -4785.92f, 17.62213f));
                    VectorList_01.Add(new Vector3(5060.729f, -4837.399f, 18.13685f));
                    VectorList_01.Add(new Vector3(5074.84f, -4883.288f, 16.71885f));
                    VectorList_01.Add(new Vector3(5098.159f, -4917.585f, 16.05454f));
                    VectorList_01.Add(new Vector3(5108.796f, -4947.615f, 15.96881f));
                    VectorList_01.Add(new Vector3(5131.853f, -4944.349f, 14.43147f));
                    VectorList_01.Add(new Vector3(5138.741f, -4949.731f, 14.01434f));
                    VectorList_01.Add(new Vector3(5138.146f, -4955.658f, 13.98357f));
                    VectorList_01.Add(new Vector3(5148.977f, -4964.736f, 13.43088f));
                    VectorList_01.Add(new Vector3(5148.332f, -4978.535f, 12.0283f));
                    VectorList_01.Add(new Vector3(5158.495f, -4999.322f, 10.34334f));
                    VectorList_01.Add(new Vector3(5166.982f, -5004.785f, 11.12053f));
                    VectorList_01.Add(new Vector3(5192.109f, -5050.282f, 11.95023f));

                    vTarget_02 = new Vector3(4523.574f, -4614.735f, 11.39894f);

                    iCashReward = RandInt(950, 1000);
                }

                iRandm = RandInt(1, 5);
                if (iRandm == 1)
                {
                    VectorList_02.Add(new Vector3(5233.71f, -5055.481f, 14.41616f));
                    VectorList_02.Add(new Vector3(5269.771f, -5102.388f, 13.13458f));
                    VectorList_02.Add(new Vector3(5278.364f, -5125.787f, 13.75129f));
                    VectorList_02.Add(new Vector3(5287.151f, -5145.533f, 22.36536f));
                    VectorList_02.Add(new Vector3(5308.764f, -5180.225f, 29.13452f));
                    VectorList_02.Add(new Vector3(5346.964f, -5218.778f, 30.71546f));
                    VectorList_02.Add(new Vector3(5333.356f, -5267.576f, 32.84147f));
                    fMission_01 = 133.7113f;

                    iCashReward += RandInt(500, 550);
                }
                else if (iRandm == 2)
                {
                    VectorList_02.Add(new Vector3(5194.607f, -5067.506f, 11.8923f));
                    VectorList_02.Add(new Vector3(5174.759f, -5130.188f, 2.333519f));
                    VectorList_02.Add(new Vector3(5186.785f, -5133.329f, 3.339868f));
                    fMission_01 = 249.0917f;

                    iCashReward += RandInt(200, 250);
                }
                else if (iRandm == 3)
                {
                    VectorList_02.Add(new Vector3(5203.195f, -5075.889f, 10.8781f));
                    VectorList_02.Add(new Vector3(5224.331f, -5128.517f, 6.7265f));
                    VectorList_02.Add(new Vector3(5198.844f, -5199.504f, 12.17268f));
                    VectorList_02.Add(new Vector3(5158.8f, -5215.011f, 5.527559f));
                    VectorList_02.Add(new Vector3(5143.752f, -5271.163f, 8.674473f));
                    VectorList_02.Add(new Vector3(5096.204f, -5284.654f, 5.629894f));
                    VectorList_02.Add(new Vector3(5016.943f, -5179.651f, 1.995464f));
                    VectorList_02.Add(new Vector3(4995.838f, -5182.11f, 1.955377f));

                    VectorList_02.Add(new Vector3(4991.229f, -5169.521f, 2.579536f));
                    VectorList_02.Add(new Vector3(4975.339f, -5150.584f, 2.530874f));
                    VectorList_02.Add(new Vector3(4969.555f, -5123.96f, 2.733868f));
                    VectorList_02.Add(new Vector3(4959.88f, -5114.331f, 2.909248f));
                    fMission_01 = 342.8236f;

                    iCashReward += RandInt(700, 850);
                }
                else if (iRandm == 4)
                {
                    VectorList_02.Add(new Vector3(5203.195f, -5075.889f, 10.8781f));
                    VectorList_02.Add(new Vector3(5224.331f, -5128.517f, 6.7265f));
                    VectorList_02.Add(new Vector3(5198.844f, -5199.504f, 12.17268f));
                    VectorList_02.Add(new Vector3(5158.8f, -5215.011f, 5.527559f));
                    VectorList_02.Add(new Vector3(5143.752f, -5271.163f, 8.674473f));
                    VectorList_02.Add(new Vector3(5096.204f, -5284.654f, 5.629894f));
                    VectorList_02.Add(new Vector3(5016.943f, -5179.651f, 1.995464f));
                    VectorList_02.Add(new Vector3(4995.838f, -5182.11f, 1.955377f));

                    VectorList_02.Add(new Vector3(4974.74f, -5198.996f, 2.475773f));
                    VectorList_02.Add(new Vector3(4943.943f, -5217.656f, 2.516457f));
                    VectorList_02.Add(new Vector3(4922.802f, -5216.061f, 2.440305f));
                    VectorList_02.Add(new Vector3(4914.682f, -5227.528f, 2.52028f));
                    VectorList_02.Add(new Vector3(4920.186f, -5238.085f, 2.522556f));
                    fMission_01 = 214.1936f;

                    iCashReward += RandInt(700, 850);
                }
                else
                {
                    VectorList_02.Add(new Vector3(5203.195f, -5075.889f, 10.8781f));
                    VectorList_02.Add(new Vector3(5224.331f, -5128.517f, 6.7265f));
                    VectorList_02.Add(new Vector3(5198.844f, -5199.504f, 12.17268f));
                    VectorList_02.Add(new Vector3(5158.8f, -5215.011f, 5.527559f));
                    VectorList_02.Add(new Vector3(5143.752f, -5271.163f, 8.674473f));
                    VectorList_02.Add(new Vector3(5096.204f, -5284.654f, 5.629894f));
                    VectorList_02.Add(new Vector3(5016.943f, -5179.651f, 1.995464f));
                    VectorList_02.Add(new Vector3(4995.838f, -5182.11f, 1.955377f));

                    VectorList_02.Add(new Vector3(4995.05f, -5167.059f, 2.694044f));
                    fMission_01 = 295.8683f;

                    iCashReward += RandInt(500, 550);
                }

                VectorList_03.Add(new Vector3(5115.762f, -5404.809f, 21.81437f)); fList_01.Add(66.24686f);
                VectorList_03.Add(new Vector3(5113.277f, -5399.584f, 22.52935f)); fList_01.Add(152.3342f);
                VectorList_03.Add(new Vector3(5106.564f, -5406.225f, 21.23528f)); fList_01.Add(284.2396f);

                vTarget_05 = new Vector3(5110.793f, -5404.554f, 23.40375f);//the henging iron
                BeOnOff.Add(false);// Sneaky        0   
                BeOnOff.Add(false);// bFlashWarn    1  
                BeOnOff.Add(false);// bTheyKnowU    2  
                BeOnOff.Add(false);// bDoOnce       3    
                fList_02.Add(0.00f);
                fList_02.Add(0.00f);
            }       //Follow
            else if (iJobType == 23)
            {
                iPlayerChoise = 8;
                bControlerSelect = true;
            }       //Raceist
            else if (iJobType == 24)
            {
                HitMan();
            }       //Assassination
            else
            {
                BigMessageThread.MessageInstance.ShowSimpleShard(sAltLang[393], "", 5000);
                fList_01.Clear();
                fList_02.Clear();
                iTime_01.Clear();
                VectorList_01.Clear();
                VectorList_02.Clear();
                VectorList_03.Clear();

                vTarget_01 = new Vector3(4887.682f, -5747.711f, 116.7361f);
                fphdirect = 331.936f;
                bPedCanFly = false;
                iMissionVar_02 = FindRandom(35, 1, 3);

                if (iMissionVar_02 == 1)
                {
                    VectorList_01.Add(new Vector3(5083.081f, -5429.721f, 91.19279f)); fList_01.Add(327.6324f);
                    VectorList_01.Add(new Vector3(5111.587f, -5172.778f, 82.07673f)); fList_01.Add(39.21318f);
                    VectorList_01.Add(new Vector3(5020.269f, -5066.57f, 58.27757f)); fList_01.Add(78.82922f);
                    VectorList_01.Add(new Vector3(4878.171f, -5074.571f, 44.4136f)); fList_01.Add(149.9168f);

                    VectorList_02.Add(new Vector3(4977.092f, -5234.123f, 5.362415f));
                    VectorList_02.Add(new Vector3(4954.453f, -5214.639f, 2.526253f));
                    VectorList_02.Add(new Vector3(4981.531f, -5194.562f, 2.431887f));
                    VectorList_02.Add(new Vector3(4985.519f, -5177.848f, 2.494078f));
                    VectorList_02.Add(new Vector3(4968.461f, -5169.152f, 1.989646f));

                    VectorList_03.Add(new Vector3(4919.874f, -5150.256f, 0.8445827f)); fList_02.Add(68.7543f);
                    VectorList_03.Add(new Vector3(4862.507f, -5147.771f, 0.2120789f)); fList_02.Add(96.23953f);
                    VectorList_03.Add(new Vector3(4791.742f, -5156.351f, 0.9501548f)); fList_02.Add(96.89198f);
                    VectorList_03.Add(new Vector3(4616.667f, -5183.412f, 0.3926994f)); fList_02.Add(98.49694f);
                    VectorList_03.Add(new Vector3(4308.156f, -5304.354f, 0.7222227f)); fList_02.Add(124.8904f);

                    sMissionVar_01 = sAltLang[395];
                }
                else if (iMissionVar_02 == 2)
                {
                    VectorList_01.Add(new Vector3(5133.882f, -4887.601f, 92.11411f)); fList_01.Add(317.4302f);
                    VectorList_01.Add(new Vector3(5259.402f, -4663.197f, 84.42941f)); fList_01.Add(28.20848f);
                    VectorList_01.Add(new Vector3(5126.226f, -4516.298f, 58.03263f)); fList_01.Add(103.8986f);
                    VectorList_01.Add(new Vector3(4972.652f, -4673.413f, 45.36294f)); fList_01.Add(212.9373f);

                    VectorList_02.Add(new Vector3(5040.295f, -4701.252f, 7.407453f));
                    VectorList_02.Add(new Vector3(5061.636f, -4641.003f, 2.585966f));
                    VectorList_02.Add(new Vector3(5065.153f, -4629.664f, 2.471225f));
                    VectorList_02.Add(new Vector3(5080.699f, -4634.967f, 1.898226f));

                    VectorList_03.Add(new Vector3(5110.091f, -4645.685f, 0.1159754f)); fList_02.Add(249.2792f);
                    VectorList_03.Add(new Vector3(5130.176f, -4663.891f, 0.1220539f)); fList_02.Add(208.313f);
                    VectorList_03.Add(new Vector3(5171.159f, -4739.768f, 1.031728f)); fList_02.Add(206.4276f);
                    VectorList_03.Add(new Vector3(5209.934f, -4783.289f, 0.0811865f)); fList_02.Add(266.0689f);
                    VectorList_03.Add(new Vector3(5379.867f, -4791.873f, 1.245439f)); fList_02.Add(267.1191f);
                    VectorList_03.Add(new Vector3(5642.272f, -4776.828f, 1.898507f)); fList_02.Add(278.6447f);

                    sMissionVar_01 = sAltLang[396];
                }
                else
                {
                    VectorList_01.Add(new Vector3(4566.874f, -5000.102f, 77.30904f)); fList_01.Add(12.97973f);

                    VectorList_02.Add(new Vector3(4614.354f, -4531.724f, 12.35623f));
                    VectorList_02.Add(new Vector3(4582.088f, -4511.286f, 10.25273f));
                    VectorList_02.Add(new Vector3(4543.866f, -4505.861f, 4.452652f));
                    VectorList_02.Add(new Vector3(4485.055f, -4498.207f, 4.189588f));

                    vTarget_02 = new Vector3(2702.896f, -5152.048f, 410.2933f);
                    bPedCanFly = true;

                    sMissionVar_01 = sAltLang[397];
                }

                iTime_01.Add(0);
                VehicleSpawn("VALKYRIE", new Vector3(4889.581f, -5738.292f, 25.7357f), 339.405f, true, true, true, true, 28, 0, 7, 1, false);
            }       //Thief--build npcs/pilot robio and player runnin away.
            bOnTheJob = true;
        }
        private void TheCayoConnection(bool bLoadCayo)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("TheCayoConnection, bLoadCayo == " + bLoadCayo, tEx);

            if (bLoadCayo)
            {
                CayoPhones.Clear();
                List<Vector3> CayPos = new List<Vector3>();
                List<Vector3> CayRot = new List<Vector3>();

                CayPos.Add(new Vector3(4969.19336f, -5600.90381f, 23.20f)); CayRot.Add(new Vector3(0.00f, 0.00f, -31.9523754f));
                CayPos.Add(new Vector3(5099.08643f, -5719.28613f, 16.00f)); CayRot.Add(new Vector3(0.00f, 0.00f, -124.599854f));
                CayPos.Add(new Vector3(5368.04688f, -5434.42529f, 48.70f)); CayRot.Add(new Vector3(0.00f, 0.00f, 145.241089f));
                CayPos.Add(new Vector3(4892.95898f, -5453.17578f, 30.40f)); CayRot.Add(new Vector3(0.00f, 0.00f, -2.67467785f));
                CayPos.Add(new Vector3(4914.79004f, -5294.33057f, 7.90f)); CayRot.Add(new Vector3(3.00f, -1.00f, -88.7225647f));
                CayPos.Add(new Vector3(5117.92285f, -5189.38135f, 2.10f)); CayRot.Add(new Vector3(0.00f, 0.00f, -90.0995636f));
                CayPos.Add(new Vector3(5152.40479f, -5058.93018f, 3.80f)); CayRot.Add(new Vector3(0.00f, 0.00f, 87.5917511f));
                CayPos.Add(new Vector3(5142.36719f, -4952.96729f, 14.00f)); CayRot.Add(new Vector3(0.00f, 0.00f, 49.3263206f));
                CayPos.Add(new Vector3(5028.74512f, -4635.70703f, 4.70f)); CayRot.Add(new Vector3(0.00f, 0.00f, -101.267654f));
                CayPos.Add(new Vector3(4872.50977f, -4482.87988f, 9.80f)); CayRot.Add(new Vector3(0.00f, 0.00f, 88.2257385f));
                CayPos.Add(new Vector3(4492.33105f, -4522.10205f, 4.10f)); CayRot.Add(new Vector3(0.00f, 0.00f, 109.983139f));
                CayPos.Add(new Vector3(4365.35645f, -4579.11377f, 4.00f)); CayRot.Add(new Vector3(0.00f, 0.00f, -69.9810333f));
                CayPos.Add(new Vector3(5177.31738f, -4651.67627f, 2.20f)); CayRot.Add(new Vector3(0.00f, 0.00f, 167.547989f));
                CayPos.Add(new Vector3(5264.31201f, -5420.22607f, 65.50f)); CayRot.Add(new Vector3(0.00f, 0.00f, 55.1944542f));
                CayPos.Add(new Vector3(5132.79688f, -5527.75342f, 53.70f)); CayRot.Add(new Vector3(0.00f, 0.00f, 119.800873f));
                CayPos.Add(new Vector3(5032.13135f, -5759.62793f, 15.30f)); CayRot.Add(new Vector3(0.00f, 0.00f, 138.167618f));
                CayPos.Add(new Vector3(5038.44678f, -5120.1416f, 5.50f)); CayRot.Add(new Vector3(0.00f, 0.00f, -178.255859f));

                for (int i = 0; i < CayPos.Count; i++)
                {
                    Prop Bpox = BuildProp("p_phonebox_02_s", CayPos[i], CayRot[i], true, true);
                    if (Bpox != null)
                        CayoPhones.Add(new Prop(Bpox.Handle));
                }
                PropList_01.Clear();
                bOnCayoLand = true;
            }
            else
            {
                for (int i = 0; i < CayoPhones.Count; i++)
                    CayoPhones[i].Delete();
                CayoPhones.Clear();

                bOnCayoLand = false;
            }
        }
        private void AreULocal()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("AreULocal", tEx);

            if (bOnCayoLand)
            {
                iJobType = FindRandom(33, 21, 25);
                iPlayerChoise = 1;
                bControlerSelect = true;
            }
            else
            {
                WhereAreYou();

                if (bMoreFubar)
                    PlayerPlays();
                else
                    JobLot();
            }
        }
        private void WhereAreYou()
        {
            Vector3 PlayPos = Game.Player.Character.Position;
            string MyZone = World.GetZoneNameLabel(PlayPos);
            if (MyZone == "AIRP" || MyZone == "ELYSIAN" || MyZone == "TERMINA" || MyZone == "CYPRE" || MyZone == "EBURO" || MyZone == "MURRI" || MyZone == "BANNING" || MyZone == "RANCHO" || MyZone == "DAVIS" || MyZone == "STAD" || MyZone == "LOSPUER" || MyZone == "CHAMH" || MyZone == "STRAW" || MyZone == "LMESA" || MyZone == "DELSOL")
                iLocationX = 1;
            else if (MyZone == "SKID" || MyZone == "LEGSQU" || MyZone == "TEXTI" || MyZone == "PBOX" || MyZone == "DTVINE" || MyZone == "KOREAT" || MyZone == "VCANA" || MyZone == "VESP" || MyZone == "BEACH" || MyZone == "DELBE" || MyZone == "DELPE" || MyZone == "SanAnd" || MyZone == "MOVIE" || MyZone == "MORN" || MyZone == "ROCKF" || MyZone == "BURTON" || MyZone == "ALTA" || MyZone == "HAWICK" || MyZone == "WVINE" || MyZone == "golf")
                iLocationX = 2;
            else if (MyZone == "RICHM" || MyZone == "PBLUFF" || MyZone == "BHAMCA" || MyZone == "BANHAMC" || MyZone == "CHU" || MyZone == "RGLEN" || MyZone == "TONGVAH" || MyZone == "TONGVAV" || MyZone == "LAGO")
                iLocationX = 3;
            else if (MyZone == "PALHIGH" || MyZone == "NOOSE" || MyZone == "TATAMO" || MyZone == "MIRR" || MyZone == "EAST_V" || MyZone == "HORS" || MyZone == "CHIL" || MyZone == "PALMPOW" || MyZone == "WINDF" || MyZone == "VINE" || MyZone == "LDAM" || MyZone == "LACT")
                iLocationX = 4;
            else if (MyZone == "GREATC" || MyZone == "ZANCUDO" || MyZone == "SLAB" || MyZone == "DESRT" || MyZone == "HARMO" || MyZone == "RTRAK" || MyZone == "JAIL" || MyZone == "ZQ_UAR" || MyZone == "SANDY" || MyZone == "ALAMO" || MyZone == "SANCHIA" || MyZone == "HUMLAB" || MyZone == "GRAPES" || MyZone == "GALFISH")
                iLocationX = 5;
            else if (MyZone == "OCEANA")
            {
                if (PlayPos.Y < -1941.00f)
                    iLocationX = 1;
                else if (PlayPos.X > 1480.00f && PlayPos.Y < 2450.00f)
                    iLocationX = 4;
                else if (PlayPos.X < -830.00f && PlayPos.Y < -420.00f)
                    iLocationX = 2;
                else if (PlayPos.X < -2150.00f && PlayPos.Y > -420.00f && PlayPos.Y < 3580.00f)
                    iLocationX = 3;
                else if (PlayPos.X > 2460.00f && PlayPos.Y < 5140.00f)
                    iLocationX = 5;
                else
                    iLocationX = 6;
            }
            else
                iLocationX = 6;
        }
        private void JobLot()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("JobLot", tEx);

            if (iMissionList.Count == 0)
                LessRandomMain();
            else
            {
                if (iMissionList.Count == 1)
                {
                    iJobType = iMissionList[0];
                    iMissionList.Clear();
                }
                else
                {
                    int iRan = RandInt(0, iMissionList.Count - 1);
                    iJobType = iMissionList[iRan];
                    iMissionList.RemoveAt(iRan);
                }
                iPlayerChoise = 1;
                bControlerSelect = true;
            }
        }
        private void TakeNote()
        {
            if (bOnCayoLand)
            {
                if (iJobType == 21)
                    StickySubTitle(sAltLang[24] + "~b~" + sAltLang[2] + "~w~" + sAltLang[25]);
                else if (iJobType == 22)
                    StickySubTitle(sAltLang[390] + "~b~" + sAltLang[7] + "~w~" + sAltLang[391]);
                else if (iJobType == 23)
                    StickySubTitle(sAltLang[49] + "'~b~" + sAltLang[10] + "~w~'. " + sAltLang[50] + "'~b~" + sAltLang[10] + "~w~'?");
                else if (iJobType == 24)
                    StickySubTitle(sAltLang[54] + "~b~" + sAltLang[12] + "~w~" + sAltLang[55]);
                else if (iJobType == 25)
                    StickySubTitle(sAltLang[392] + "~b~" + sAltLang[393] + "~w~" + sAltLang[394]);
            }
            else
            {
                if (iJobType == 1)
                    StickySubTitle(sAltLang[20] + "~b~" + sAltLang[0] + "~w~" + sAltLang[21]);
                else if (iJobType == 2)
                    StickySubTitle(sAltLang[22] + "~b~" + sAltLang[1] + "~w~" + sAltLang[23]);
                else if (iJobType == 3)
                    StickySubTitle(sAltLang[24] + "~b~" + sAltLang[2] + "~w~" + sAltLang[25]);
                else if (iJobType == 4)
                    StickySubTitle(sAltLang[26] + "~b~" + sAltLang[3] + "~w~" + sAltLang[27]);
                else if (iJobType == 5)
                    StickySubTitle(sAltLang[28] + "~b~" + sAltLang[4] + "~w~" + sAltLang[29]);
                else if (iJobType == 6)
                {
                    if (iLocationX == 1)
                        StickySubTitle(sAltLang[30] + "~b~" + sAltLang[31] + "" + sAltLang[5] + "~w~.");
                    else if (iLocationX == 2)
                        StickySubTitle(sAltLang[32] + "~b~" + sAltLang[33] + "" + sAltLang[5] + "~w~" + sAltLang[34]);
                    else if (iLocationX == 3)
                        StickySubTitle(sAltLang[35] + "~b~" + sAltLang[5] + "~w~" + sAltLang[36]);
                    else if (iLocationX == 4)
                        StickySubTitle(sAltLang[37] + "~b~" + sAltLang[5] + "~w~" + sAltLang[38]);
                    else if (iLocationX == 5)
                        StickySubTitle(sAltLang[76] + "~b~" + sAltLang[5] + "~w~ " + sAltLang[39]);
                    else
                        StickySubTitle(sAltLang[40] + "~b~" + sAltLang[5] + "s~w~" + sAltLang[77]);
                }
                else if (iJobType == 7)
                    StickySubTitle(sAltLang[41] + "~b~" + sAltLang[42] + "" + sAltLang[6] + "" + sAltLang[43] + "~w~'.");
                else if (iJobType == 8)
                    StickySubTitle(sAltLang[44] + "~b~" + sAltLang[7] + "~w~ " + sAltLang[179]);
                else if (iJobType == 9)
                    StickySubTitle("'~b~" + sAltLang[8] + "~w~" + sAltLang[45]);
                else if (iJobType == 10)
                    StickySubTitle(sAltLang[46] + "~b~" + sAltLang[9] + "" + sAltLang[47] + "~w~" + sAltLang[48]);
                else if (iJobType == 11)
                    StickySubTitle(sAltLang[49] + "'~b~" + sAltLang[10] + "~w~'. " + sAltLang[50] + "'~b~" + sAltLang[10] + "~w~'?");
                else if (iJobType == 12)
                    StickySubTitle(sAltLang[52] + "~b~" + sAltLang[11] + "~w~" + sAltLang[53]);
                else if (iJobType == 13)
                    StickySubTitle(sAltLang[54] + "~b~" + sAltLang[12] + "~w~" + sAltLang[55]);
                else if (iJobType == 14)
                    StickySubTitle(sAltLang[56] + "~b~" + sAltLang[13] + "" + sAltLang[57] + "~w~" + sAltLang[58]);
                else if (iJobType == 15)
                {
                    if (iLocationX == 1)
                        StickySubTitle(sAltLang[59] + "~b~" + sAltLang[14] + "~w~" + sAltLang[60]);
                    else if (iLocationX == 2)
                    {
                        if (bYachtOwner)
                            StickySubTitle(sAltLang[59] + "~b~" + sAltLang[14] + "~w~" + sAltLang[384]);
                        else
                            StickySubTitle(sAltLang[59] + "~b~" + sAltLang[14] + "~w~" + sAltLang[61]);
                    }
                    else if (iLocationX == 3)
                        StickySubTitle(sAltLang[59] + "~b~" + sAltLang[14] + "~w~" + sAltLang[62]);
                    else if (iLocationX == 4)
                        StickySubTitle(sAltLang[59] + "~b~" + sAltLang[14] + "~w~" + sAltLang[63]);
                    else if (iLocationX == 5)
                        StickySubTitle(sAltLang[59] + "~b~" + sAltLang[14] + "~w~" + sAltLang[64]);
                    else
                        StickySubTitle(sAltLang[59] + "~b~" + sAltLang[14] + "~w~" + sAltLang[65]);
                }
                else if (iJobType == 16)
                    StickySubTitle(sAltLang[66] + "~b~" + sAltLang[15] + "~w~" + sAltLang[67]);
                else if (iJobType == 17)
                    StickySubTitle(sAltLang[68] + "~b~" + sAltLang[16] + "~w~" + sAltLang[69]);
                else if (iJobType == 18)
                    StickySubTitle(sAltLang[70] + "~b~" + sAltLang[17] + "~w~" + sAltLang[71]);
                else if (iJobType == 19)
                    StickySubTitle(sAltLang[72] + "~b~" + sAltLang[18] + "~w~" + sAltLang[73]);
                else if (iJobType == 20)
                    StickySubTitle(sAltLang[74] + "~b~" + sAltLang[19] + "~w~" + sAltLang[75]);
                else
                    StickySubTitle(sAltLang[310]);
            }
        }
        private void CleanMishlists()
        {
            MyMissions.TruckersXM.Clear();
            MyMissions.PackersXM.Clear();
            MyMissions.ConsXM.Clear();
            MyMissions.FubardXM.Clear();
            MyMissions.AmbuXM.Clear();
            MyMissions.SharksXM.Clear();
            MyMissions.JohnsXM.Clear();
            MyMissions.RaceXM.Clear();
            MyMissions.BombXM.Clear();
            MyMissions.HitXM.Clear();
        }
        private void BuildMissions(int iType, string sBuildName)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("BuildMissions, Type == " + iType + ", fileName == " + sBuildName, tEx);

            if (!Directory.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/"))
                Directory.CreateDirectory("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/");

            if (iType == 1)
            {
                if (File.Exists(sBuildName))
                {
                    MissionBuilder Mb = LoadMissionBuilder(sBuildName);

                    for (int i = 0; i < Mb.TruckersXM.Count; i++)
                        MyMissions.TruckersXM.Add(Mb.TruckersXM[i]);

                    MyMissions.ConsXM = Mb.ConsXM;
                    MyMissions.PackersXM = Mb.PackersXM;
                    MyMissions.FubardXM = Mb.FubardXM;
                    MyMissions.AmbuXM = Mb.AmbuXM;
                    MyMissions.SharksXM = Mb.SharksXM;
                    MyMissions.JohnsXM = Mb.JohnsXM;
                    MyMissions.RaceXM = Mb.RaceXM;
                    MyMissions.BombXM = Mb.BombXM;
                    MyMissions.HitXM = Mb.HitXM;
                }
                SaveMissionBuilder(MyMissions, sBuildName);
            }   //Trucking
            else if (iType == 2)
            {
                if (File.Exists(sBuildName))
                {
                    MissionBuilder Mb = LoadMissionBuilder(sBuildName);

                    for (int i = 0; i < Mb.PackersXM.Count; i++)
                        MyMissions.PackersXM.Add(Mb.PackersXM[i]);

                    MyMissions.TruckersXM = Mb.TruckersXM;
                    MyMissions.ConsXM = Mb.ConsXM;
                    MyMissions.FubardXM = Mb.FubardXM;
                    MyMissions.AmbuXM = Mb.AmbuXM;
                    MyMissions.SharksXM = Mb.SharksXM;
                    MyMissions.JohnsXM = Mb.JohnsXM;
                    MyMissions.RaceXM = Mb.RaceXM;
                    MyMissions.BombXM = Mb.BombXM;
                    MyMissions.HitXM = Mb.HitXM;
                }
                SaveMissionBuilder(MyMissions, sBuildName);
            }       //Packages
            else if (iType == 3)
            {
                if (File.Exists(sBuildName))
                {
                    MissionBuilder Mb = LoadMissionBuilder(sBuildName);

                    for (int i = 0; i < Mb.ConsXM.Count; i++)
                        MyMissions.ConsXM.Add(Mb.ConsXM[i]);

                    MyMissions.TruckersXM = Mb.TruckersXM;
                    MyMissions.PackersXM = Mb.PackersXM;
                    MyMissions.FubardXM = Mb.FubardXM;
                    MyMissions.AmbuXM = Mb.AmbuXM;
                    MyMissions.SharksXM = Mb.SharksXM;
                    MyMissions.JohnsXM = Mb.JohnsXM;
                    MyMissions.RaceXM = Mb.RaceXM;
                    MyMissions.BombXM = Mb.BombXM;
                    MyMissions.HitXM = Mb.HitXM;
                }
                SaveMissionBuilder(MyMissions, sBuildName);
            }       //Convicts
            else if (iType == 4)
            {
                if (File.Exists(sBuildName))
                {
                    MissionBuilder Mb = LoadMissionBuilder(sBuildName);

                    for (int i = 0; i < Mb.FubardXM.Count; i++)
                        MyMissions.FubardXM.Add(Mb.FubardXM[i]);

                    MyMissions.TruckersXM = Mb.TruckersXM;
                    MyMissions.ConsXM = Mb.ConsXM;
                    MyMissions.PackersXM = Mb.PackersXM;
                    MyMissions.AmbuXM = Mb.AmbuXM;
                    MyMissions.SharksXM = Mb.SharksXM;
                    MyMissions.JohnsXM = Mb.JohnsXM;
                    MyMissions.RaceXM = Mb.RaceXM;
                    MyMissions.BombXM = Mb.BombXM;
                    MyMissions.HitXM = Mb.HitXM;
                }
                SaveMissionBuilder(MyMissions, sBuildName);
            }       //FUber
            else if (iType == 5)
            {
                if (File.Exists(sBuildName))
                {
                    MissionBuilder Mb = LoadMissionBuilder(sBuildName);

                    for (int i = 0; i < Mb.AmbuXM.Count; i++)
                        MyMissions.AmbuXM.Add(Mb.AmbuXM[i]);

                    MyMissions.TruckersXM = Mb.TruckersXM;
                    MyMissions.ConsXM = Mb.ConsXM;
                    MyMissions.PackersXM = Mb.PackersXM;
                    MyMissions.FubardXM = Mb.FubardXM;
                    MyMissions.SharksXM = Mb.SharksXM;
                    MyMissions.JohnsXM = Mb.JohnsXM;
                    MyMissions.RaceXM = Mb.RaceXM;
                    MyMissions.BombXM = Mb.BombXM;
                    MyMissions.HitXM = Mb.HitXM;
                }
                SaveMissionBuilder(MyMissions, sBuildName);
            }       //Ambulance
            else if (iType == 6)
            {
                if (File.Exists(sBuildName))
                {
                    MissionBuilder Mb = LoadMissionBuilder(sBuildName);

                    for (int i = 0; i < Mb.SharksXM.Count; i++)
                        MyMissions.SharksXM.Add(Mb.SharksXM[i]);

                    MyMissions.TruckersXM = Mb.TruckersXM;
                    MyMissions.ConsXM = Mb.ConsXM;
                    MyMissions.PackersXM = Mb.PackersXM;
                    MyMissions.FubardXM = Mb.FubardXM;
                    MyMissions.AmbuXM = Mb.AmbuXM;
                    MyMissions.JohnsXM = Mb.JohnsXM;
                    MyMissions.RaceXM = Mb.RaceXM;
                    MyMissions.BombXM = Mb.BombXM;
                    MyMissions.HitXM = Mb.HitXM;
                }
                SaveMissionBuilder(MyMissions, sBuildName);
            }       //Sharks
            else if (iType == 7)
            {
                if (File.Exists(sBuildName))
                {
                    MissionBuilder Mb = LoadMissionBuilder(sBuildName);

                    for (int i = 0; i < Mb.JohnsXM.Count; i++)
                        MyMissions.JohnsXM.Add(Mb.JohnsXM[i]);

                    MyMissions.TruckersXM = Mb.TruckersXM;
                    MyMissions.ConsXM = Mb.ConsXM;
                    MyMissions.PackersXM = Mb.PackersXM;
                    MyMissions.FubardXM = Mb.FubardXM;
                    MyMissions.AmbuXM = Mb.AmbuXM;
                    MyMissions.SharksXM = Mb.SharksXM;
                    MyMissions.RaceXM = Mb.RaceXM;
                    MyMissions.BombXM = Mb.BombXM;
                    MyMissions.HitXM = Mb.HitXM;
                }
                SaveMissionBuilder(MyMissions, sBuildName);
            }      //Johnny
            else if (iType == 8)
            {
                if (File.Exists(sBuildName))
                {
                    MissionBuilder Mb = LoadMissionBuilder(sBuildName);

                    for (int i = 0; i < Mb.RaceXM.Count; i++)
                        MyMissions.RaceXM.Add(Mb.RaceXM[i]);

                    MyMissions.TruckersXM = Mb.TruckersXM;
                    MyMissions.ConsXM = Mb.ConsXM;
                    MyMissions.PackersXM = Mb.PackersXM;
                    MyMissions.FubardXM = Mb.FubardXM;
                    MyMissions.AmbuXM = Mb.AmbuXM;
                    MyMissions.SharksXM = Mb.SharksXM;
                    MyMissions.JohnsXM = Mb.JohnsXM;
                    MyMissions.BombXM = Mb.BombXM;
                    MyMissions.HitXM = Mb.HitXM;
                }
                SaveMissionBuilder(MyMissions, sBuildName);
            }       //Raceist
            else if (iType == 9)
            {
                if (File.Exists(sBuildName))
                {
                    MissionBuilder Mb = LoadMissionBuilder(sBuildName);

                    for (int i = 0; i < Mb.BombXM.Count; i++)
                        MyMissions.BombXM.Add(Mb.BombXM[i]);

                    MyMissions.TruckersXM = Mb.TruckersXM;
                    MyMissions.ConsXM = Mb.ConsXM;
                    MyMissions.PackersXM = Mb.PackersXM;
                    MyMissions.FubardXM = Mb.FubardXM;
                    MyMissions.AmbuXM = Mb.AmbuXM;
                    MyMissions.SharksXM = Mb.SharksXM;
                    MyMissions.JohnsXM = Mb.JohnsXM;
                    MyMissions.RaceXM = Mb.RaceXM;
                    MyMissions.HitXM = Mb.HitXM;
                }
                SaveMissionBuilder(MyMissions, sBuildName);
            }       //BBBomb
            else if (iType == 10)
            {
                if (File.Exists(sBuildName))
                {
                    MissionBuilder Mb = LoadMissionBuilder(sBuildName);

                    for (int i = 0; i < Mb.HitXM.Count; i++)
                        MyMissions.HitXM.Add(Mb.HitXM[i]);

                    MyMissions.TruckersXM = Mb.TruckersXM;
                    MyMissions.ConsXM = Mb.ConsXM;
                    MyMissions.PackersXM = Mb.PackersXM;
                    MyMissions.FubardXM = Mb.FubardXM;
                    MyMissions.AmbuXM = Mb.AmbuXM;
                    MyMissions.SharksXM = Mb.SharksXM;
                    MyMissions.JohnsXM = Mb.JohnsXM;
                    MyMissions.RaceXM = Mb.RaceXM;
                    MyMissions.BombXM = Mb.BombXM;
                }
                SaveMissionBuilder(MyMissions, sBuildName);
            }       //HitMan

            CleanMishlists();
        }
        public class MissionBuilder
        {
            public List<TruckBuild> TruckersXM { get; set; }
            public List<PackBuild> PackersXM { get; set; }
            public List<ConsBuild> ConsXM { get; set; }
            public List<FuberBuild> FubardXM { get; set; }
            public List<AmbBuild> AmbuXM { get; set; }
            public List<DeapBuild> SharksXM { get; set; }
            public List<JohnnyBuild> JohnsXM { get; set; }
            public List<RaceBuild> RaceXM { get; set; }
            public List<BombBuild> BombXM { get; set; }
            public List<HitBuild> HitXM { get; set; }

            public MissionBuilder()
            {
                TruckersXM = new List<TruckBuild>();
                PackersXM = new List<PackBuild>();
                ConsXM = new List<ConsBuild>();
                FubardXM = new List<FuberBuild>();
                AmbuXM = new List<AmbBuild>();
                SharksXM = new List<DeapBuild>();
                JohnsXM = new List<JohnnyBuild>();
                RaceXM = new List<RaceBuild>();
                BombXM = new List<BombBuild>();
                HitXM = new List<HitBuild>();
            }
        }
        public void SaveMissionBuilder(MissionBuilder config, string fileName)
        {
            XmlSerializer xml = new XmlSerializer(typeof(MissionBuilder));
            using (StreamWriter sw = new StreamWriter(fileName))
            {
                xml.Serialize(sw, config);
            }
        }
        public MissionBuilder LoadMissionBuilder(string fileName)
        {
            XmlSerializer xml = new XmlSerializer(typeof(MissionBuilder));
            using (StreamReader sr = new StreamReader(fileName))
            {
                return (MissionBuilder)xml.Deserialize(sr);
            }
        }
        public bool FindBuiltMissions(int iType)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("FindBuiltMissions, Type == " + iType, tEx);

            bool bMishcons = false;

            CleanMishlists();

            if (iType == 1)
            {
                if (Directory.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/"))
                {
                    string[] MyBulders = Directory.GetFiles("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/");
                    for (int i = 0; i < MyBulders.Count(); i++)
                    {
                        if (File.Exists(MyBulders[i]))
                        {
                            MissionBuilder Mb = LoadMissionBuilder(MyBulders[i]);
                            for (int ii = 0; ii < Mb.TruckersXM.Count; ii++)
                            {
                                if (iLocationX == Mb.TruckersXM[ii].Local)
                                {
                                    MyMissions.TruckersXM.Add(Mb.TruckersXM[ii]);
                                    bMishcons = true;
                                }
                            }
                        }
                    }
                }
            }       //Trucking
            else if (iType == 2)
            {
                if (Directory.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/"))
                {
                    string[] MyBulders = Directory.GetFiles("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/");
                    for (int i = 0; i < MyBulders.Count(); i++)
                    {
                        if (File.Exists(MyBulders[i]))
                        {
                            MissionBuilder Mb = LoadMissionBuilder(MyBulders[i]);
                            for (int ii = 0; ii < Mb.PackersXM.Count; ii++)
                            {
                                if (iLocationX == Mb.PackersXM[ii].Local)
                                {
                                    MyMissions.PackersXM.Add(Mb.PackersXM[ii]);
                                    bMishcons = true;
                                }
                            }
                        }
                    }
                }
            }       //Packages
            else if (iType == 3)
            {
                if (Directory.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/"))
                {
                    string[] MyBulders = Directory.GetFiles("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/");
                    for (int i = 0; i < MyBulders.Count(); i++)
                    {
                        if (File.Exists(MyBulders[i]))
                        {
                            MissionBuilder Mb = LoadMissionBuilder(MyBulders[i]);
                            for (int ii = 0; ii < Mb.ConsXM.Count; ii++)
                            {
                                if (iLocationX == Mb.ConsXM[ii].Local)
                                {
                                    MyMissions.ConsXM.Add(Mb.ConsXM[ii]);
                                    bMishcons = true;
                                }
                            }
                        }
                    }
                }
            }       //Convicts
            else if (iType == 4)
            {
                if (Directory.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/"))
                {
                    string[] MyBulders = Directory.GetFiles("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/");
                    for (int i = 0; i < MyBulders.Count(); i++)
                    {
                        if (File.Exists(MyBulders[i]))
                        {
                            MissionBuilder Mb = LoadMissionBuilder(MyBulders[i]);
                            for (int ii = 0; ii < Mb.FubardXM.Count; ii++)
                            {
                                if (iLocationX == Mb.FubardXM[ii].Local)
                                {
                                    MyMissions.FubardXM.Add(Mb.FubardXM[ii]);
                                    bMishcons = true;
                                }
                            }
                        }
                    }
                }
            }       //FUber
            else if (iType == 5)
            {
                if (Directory.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/"))
                {
                    string[] MyBulders = Directory.GetFiles("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/");
                    for (int i = 0; i < MyBulders.Count(); i++)
                    {
                        if (File.Exists(MyBulders[i]))
                        {
                            MissionBuilder Mb = LoadMissionBuilder(MyBulders[i]);
                            for (int ii = 0; ii < Mb.AmbuXM.Count; ii++)
                            {
                                if (iLocationX == Mb.AmbuXM[ii].Local)
                                {
                                    MyMissions.AmbuXM.Add(Mb.AmbuXM[ii]);
                                    bMishcons = true;
                                }
                            }
                        }
                    }
                }
            }       //Ambulance
            else if (iType == 6)
            {
                if (Directory.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/"))
                {
                    string[] MyBulders = Directory.GetFiles("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/");
                    for (int i = 0; i < MyBulders.Count(); i++)
                    {
                        if (File.Exists(MyBulders[i]))
                        {
                            MissionBuilder Mb = LoadMissionBuilder(MyBulders[i]);
                            for (int ii = 0; ii < Mb.SharksXM.Count; ii++)
                            {
                                if (iLocationX == Mb.SharksXM[ii].Local)
                                {
                                    MyMissions.SharksXM.Add(Mb.SharksXM[ii]);
                                    bMishcons = true;
                                }
                            }
                        }
                    }
                }
            }       //Sharks
            else if (iType == 7)
            {
                if (Directory.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/"))
                {
                    string[] MyBulders = Directory.GetFiles("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/");
                    for (int i = 0; i < MyBulders.Count(); i++)
                    {
                        if (File.Exists(MyBulders[i]))
                        {
                            MissionBuilder Mb = LoadMissionBuilder(MyBulders[i]);
                            for (int ii = 0; ii < Mb.JohnsXM.Count; ii++)
                            {
                                if (iLocationX == Mb.JohnsXM[ii].Local)
                                {
                                    MyMissions.JohnsXM.Add(Mb.JohnsXM[ii]);
                                    bMishcons = true;
                                }
                            }
                        }
                    }
                }
            }       //Johnny
            else if (iType == 8)
            {
                if (Directory.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/"))
                {
                    string[] MyBulders = Directory.GetFiles("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/");
                    for (int i = 0; i < MyBulders.Count(); i++)
                    {
                        if (File.Exists(MyBulders[i]))
                        {
                            MissionBuilder Mb = LoadMissionBuilder(MyBulders[i]);
                            for (int ii = 0; ii < Mb.RaceXM.Count; ii++)
                            {
                                if (iLocationX == Mb.RaceXM[ii].Local)
                                {
                                    MyMissions.RaceXM.Add(Mb.RaceXM[ii]);
                                    bMishcons = true;
                                }
                            }
                        }
                    }
                }
            }       //Raceist
            else if (iType == 9)
            {
                if (Directory.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/"))
                {
                    string[] MyBulders = Directory.GetFiles("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/");
                    for (int i = 0; i < MyBulders.Count(); i++)
                    {
                        if (File.Exists(MyBulders[i]))
                        {
                            MissionBuilder Mb = LoadMissionBuilder(MyBulders[i]);
                            for (int ii = 0; ii < Mb.BombXM.Count; ii++)
                            {
                                if (iLocationX == Mb.BombXM[ii].Local)
                                { 
                                    MyMissions.BombXM.Add(Mb.BombXM[ii]);
                                    bMishcons = true;
                                }
                            }
                        }
                    }
                }
            }       //BBBomb
            else if (iType == 10)
            {
                if (Directory.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/"))
                {
                    string[] MyBulders = Directory.GetFiles("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/");
                    for (int i = 0; i < MyBulders.Count(); i++)
                    {
                        if (File.Exists(MyBulders[i]))
                        {
                            MissionBuilder Mb = LoadMissionBuilder(MyBulders[i]);
                            for (int ii = 0; ii < Mb.HitXM.Count; ii++)
                            {
                                if (iLocationX == Mb.HitXM[ii].Local)
                                {
                                    MyMissions.HitXM.Add(Mb.HitXM[ii]);
                                    bMishcons = true;
                                }
                            }
                        }
                    }
                }
            }       //HitMan

            return bMishcons;
        }
        public List<string> BuildMishLists(int itype)
        {
            List<string> MishString = new List<string>();

            if (itype == 1)
            {
                MishString.Add("SADLER"); //
                MishString.Add("BISON"); //
                MishString.Add("BISON2"); //<!-- McGill-Olsen Bison -->
                MishString.Add("BISON3"); //<!-- Mighty Bush Bison -->
                MishString.Add("BOBCATXL"); //
                MishString.Add("INSURGENT3"); //<!-- Insurgent Pick-Up Custom -->
                MishString.Add("TECHNICAL3"); //<!-- Technical Custom -->
            }
            else if (itype == 2)
            {
                MishString.Add("HAULER"); //
                MishString.Add("HAULER2"); //<!-- Hauler Custom -->
                MishString.Add("PACKER"); //
                MishString.Add("PHANTOM"); //
                MishString.Add("PHANTOM3"); //<!-- Phantom Custom -->
                MishString.Add("BARRACKS2"); //<!-- Barracks Semi -->
            }
            else if (itype == 3)
            {
                MishString.Add("Tractor2"); //
            }
            else if (itype == 4)
            {
                MishString.Add("TrailerSmall");
                MishString.Add("BoatTrailer");
                MishString.Add("BaleTrailer");
                MishString.Add("graintrailer");
                MishString.Add("armytanker");
                MishString.Add("Tanker");
                MishString.Add("armytrailer");
                MishString.Add("tr2");
                MishString.Add("TR4");
                MishString.Add("TrailerLogs");
                MishString.Add("trailers");
                MishString.Add("Trailers2");
                MishString.Add("Trailers3");
                MishString.Add("Trailers4");
                MishString.Add("tvtrailer");
            }
            else if (itype == 5)
            {
                MishString.Add("POUNDER");
                MishString.Add("BENSON");
                MishString.Add("Mule2");
                MishString.Add("Boxville2");
                MishString.Add("BURRITO");
                MishString.Add("PONY");
                MishString.Add("Rumpo2");
                MishString.Add("RUMPO3");
                MishString.Add("SPEEDO");
                MishString.Add("SlamVan2");
                MishString.Add("Cruiser");
            }
            else if (itype == 6)
            {
                MishString.Add("prop_rub_cage01b");
                MishString.Add("prop_sacktruck_02b");
                MishString.Add("hei_prop_heist_wooden_box");
                MishString.Add("prop_cs_cardbox_01");
                MishString.Add("prop_cardbordbox_03a");
                MishString.Add("prop_ball_box");
                MishString.Add("ng_proc_box_01a");
                MishString.Add("prop_box_ammo03a");
                MishString.Add("prop_tshirt_box_02");
                MishString.Add("ng_proc_binbag_01a");
                MishString.Add("prop_cliff_paper");
            }
            else if (itype == 7)
            {
                if (Directory.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/"))
                {
                    string[] MyBulders = Directory.GetFiles("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/");
                    for (int i = 0; i < MyBulders.Count(); i++)
                        MishString.Add(MyBulders[i]);
                }
            }
            return MishString;
        }
        private void Trucking_Attachments()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Trucking_Attachments", tEx);

            if (iMissionVar_01 == 1)
                Function.Call(Hash.ATTACH_VEHICLE_TO_TRAILER, VehTrackin_01.Handle, VehTrackin_02.Handle, 5.0f);
            else if (iMissionVar_01 == 2)
                VehicleSpawn("Tropic2", VehTrackin_02.Position, VehTrackin_02.Heading, true, false, false, false, 16, 1, 0, 0, false);
            else if (iMissionVar_01 == 3)
                VehicleSpawn("Bulldozer", VehTrackin_02.Position, VehTrackin_02.Heading, true, false, false, false, 16, 2, 0, 0, false);
            else if (iMissionVar_01 == 4)
                VehicleSpawn("Lguard", VehTrackin_02.Position, VehTrackin_02.Heading, true, false, false, false, 16, 2, 0, 0, false);
            else if (iMissionVar_01 == 5)
                VehicleSpawn("RHINO", VehTrackin_02.Position, VehTrackin_02.Heading, true, false, false, false, 16, 3, 0, 0, false);
            else if (iMissionVar_01 == 6)
                VehicleSpawn("SUBMERSIBLE2", VehTrackin_02.Position, VehTrackin_02.Heading, true, false, false, false, 16, 5, 0, 0, false);
            else if (iMissionVar_01 == 7)
            {
                List<int> MyExtras = new List<int>();
                Vehicle Buzz = VehicleSpawn("Buzzard", VehTrackin_02.Position, VehTrackin_02.Heading, true, false, false, false, 16, 3, 0, 0, false);
                MyExtras.Add(16);
                ModExtras(Buzz, MyExtras);
            }
            else if (iMissionVar_01 == 8)
                VehicleSpawn("Tractor2", VehTrackin_02.Position, VehTrackin_02.Heading, true, false, false, false, 16, 4, 0, 0, false);
        }
        private void Trucking_LostTrail()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Trucking_LostTrail", tEx);

            iTime_01[0] = Game.GameTime + 10000;
            float fDir = VehTrackin_02.Heading;
            float fHi = VehTrackin_02.Position.Z + 1.00f;

            VehTrackin_02.Rotation = new Vector3(0.0f, 0.0f, fDir);
            VehTrackin_02.Position = new Vector3(VehTrackin_02.Position.X, VehTrackin_02.Position.Y, fHi);
        }
        private void Trucking_TruckStop()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Trucking_TruckStop", tEx);

            VehTrackin_03.Position = vTarget_01;
            VehTrackin_03.Heading = fList_01[2];
            while (!VehTrackin_03.IsOnAllWheels)
            {
                StayOnGround(VehTrackin_03);
                Script.Wait(100);
            }
            VehTrackin_03.FreezePosition = true;
            VehTrackin_03.Alpha = 120;
            VehTrackin_03.Heading = fList_01[2];
            TheYellowCorona(vTarget_01, 10.00f);
        }
        private void Trucking_CashNCrash()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Trucking_CashNCrash", tEx);

            float fVehCheck = VehTrackin_01.BodyHealth + VehTrackin_01.EngineHealth + VehTrackin_01.PetrolTankHealth;
            iList_01.Add((int)fVehCheck);
            MishVic.Add(new Vehicle(VehTrackin_01.Handle));
            fVehCheck = VehTrackin_02.BodyHealth + VehTrackin_02.EngineHealth + VehTrackin_02.PetrolTankHealth;
            iList_01.Add((int)fVehCheck);
            MishVic.Add(new Vehicle(VehTrackin_02.Handle));
            float fdist = Vector3.Distance2D(VehTrackin_02.Position, vTarget_01);
            int icash = (int)fdist;
            icash = icash / 10;
            iCrash4Cash = icash * 50;
            if (BeOnOff[5])
                iCrash4Cash = iCrash4Cash / 2;
            iCashReward = iCrash4Cash;
        }
        private void Getaway_Robbers(Ped pME, int iSet)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Getaway_Robbers, iSet == " + iSet, tEx);

            if (iSet == 2)
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, pME, 1, 57, 4, 2);//mask
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, pME, 2, 0, 0, 2);//hair
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, pME, 3, 0, 0, 2);//Torso
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, pME, 4, 34, 0, 2);//Legs
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, pME, 5, 45, 0, 2);//Hands
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, pME, 6, 12, 0, 2);//shoes
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, pME, 7, 0, 0, 2);//Scarf
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, pME, 8, 0, 0, 2);//AccTop
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, pME, 9, 0, 0, 2);//Armor
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, pME, 10, 0, 0, 2);//Emb--not used
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, pME, 11, 251, 0, 2);//Top2

                RandPlayerTypes(pME, true);
            }
            else if (iSet == 3)
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, pME, 1, 56, 2, 2);//mask
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, pME, 2, 0, 0, 2);//hair
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, pME, 3, 0, 0, 2);//Torso
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, pME, 4, 38, 0, 2);//Legs
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, pME, 5, 45, 0, 2);//Hands
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, pME, 6, 25, 0, 2);//shoes
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, pME, 7, 0, 0, 2);//Scarf
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, pME, 8, -1, 0, 2);//AccTop
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, pME, 9, 0, 0, 2);//Armor
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, pME, 10, 0, 0, 2);//Emb--not used
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, pME, 11, 218, 0, 2);//Top2

                RandPlayerTypes(pME, true);
            }
            else
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, pME, 1, 16, 4, 2);//mask
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, pME, 2, 0, 0, 2);//hair
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, pME, 3, 0, 0, 2);//Torso
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, pME, 4, 35, 0, 2);//Legs
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, pME, 5, 45, 0, 2);//Hands
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, pME, 6, 51, 0, 2);//shoes
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, pME, 7, 0, 0, 2);//Scarf
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, pME, 8, -1, 0, 2);//AccTop
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, pME, 9, 0, 0, 2);//Armor
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, pME, 10, 0, 0, 2);//Emb--not used
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, pME, 11, 203, 2, 2);//Top2

                RandPlayerTypes(pME, true);
            }
        }
        private void Getaway_FearInBank()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Getaway_FearInBank", tEx);

            int iSit = 0;
            for (int i = 0; i < PedList_01.Count; i++)
            {
                iSit = iSit + 1;
                Ped pMeOff = PedList_01[i];
                EnterPlayerVeh(pMeOff, iSit, 2.00f);
                Script.Wait(500);
            }
            int iPanic = PedList_03.Count;
            for (int i = 0; i < PedList_03.Count; i++)
                PedList_03[i].Task.FleeFrom(Game.Player.Character);
        }
        private void Getaway_RobDaBank()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Getaway_RobDaBank", tEx);

            Game.Player.WantedLevel = 4;
            VehTrackin_05.IsDriveable = true;
            VehTrackin_05.HandbrakeOn = false;

            float fVehCheck = VehTrackin_05.BodyHealth + VehTrackin_05.EngineHealth + VehTrackin_05.PetrolTankHealth;
            iList_01.Add((int)fVehCheck);
            MishVic.Add(new Vehicle(VehTrackin_05.Handle));

            iList_02.Add(Npc_01.Health);
            MishPed.Add(new Ped(Npc_01.Handle));

            iList_02.Add(Npc_02.Health);
            MishPed.Add(new Ped(Npc_02.Handle));

            iList_02.Add(Npc_03.Health);
            MishPed.Add(new Ped(Npc_03.Handle));

            iList_02.Add(Game.Player.Character.Health);
            MishPed.Add(new Ped(Game.Player.Character.Handle));

            iCashReward = iMissionVar_03;

            VehicleSpawn(sVehType, vGetaway, fMission_01, true, true, false, false, 0, 0, 0, 1, false);

            FriendOfPlayer(Npc_01);
            FriendOfPlayer(Npc_02);
            FriendOfPlayer(Npc_03);
            ArmNpcSmall(Npc_01);
            ArmNpcSmall(Npc_02);
            ArmNpcSmall(Npc_03);

            BeOnOff[7] = true;

            if (!BeOnOff[0])
                NSCoinInvestments(false, 25, 50, "Fleeca Shares");
        }
        private void Getaway_StopLoss()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Getaway_StopLoss", tEx);

            for (int i = 0; i < iFireList.Count; i++)
                Function.Call(Hash.STOP_PARTICLE_FX_LOOPED, iFireList[i], true);

            iFireList.Clear();
            iTime_01[0] = 0;
            BeOnOff[9] = false;
            BeOnOff[8] = false;
        }
        private void Getaway_CarSwap(Vehicle Vhick)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Getaway_CarSwap", tEx);

            Vehicle Vreplace = World.CreateVehicle(Vhick.Model, new Vector3(1563.228f, 3793.665f, 33.65359f));
            Vreplace.IsPersistent = true;
            VehicleList_01.Add(new Vehicle(Vreplace.Handle));
            Function.Call(Hash.SET_VEHICLE_MOD_KIT, Vreplace, 0);
            if (Vhick.IsToggleModOn(VehicleToggleMod.Turbo))
                Vreplace.ToggleMod(VehicleToggleMod.Turbo, true);
            if (Vhick.IsToggleModOn(VehicleToggleMod.XenonHeadlights))
                Vreplace.ToggleMod(VehicleToggleMod.XenonHeadlights, true);
            for (int i = 0; i < 67; i++)
            {
                int imoded = Function.Call<int>(Hash.GET_VEHICLE_MOD, Vhick, i);
                Function.Call(Hash.SET_VEHICLE_MOD, Vreplace, i, imoded, true);
            }
            Vector3 VeVecP = Vhick.Position;
            Vector3 VeVecO = Vhick.Rotation;
            Vhick.Delete();
            VehicleWarp(Vreplace, Game.Player.Character, 1);
            Vreplace.Position = VeVecP;
            Vreplace.Rotation = VeVecO;
            VehTrackin_05 = Vreplace;
            iMissionSeq = 3;
            RemoveTargets();
            World.AddExplosion(vTarget_03, ExplosionType.Flare, 1.0f, 0.0f);
            EnterAnyVeh(VehTrackin_05, Npc_01, 1, 2.00f);
            EnterAnyVeh(VehTrackin_05, Npc_02, 2, 2.00f);
            EnterAnyVeh(VehTrackin_05, Npc_03, 3, 2.00f);
            iWait4Sec = Game.GameTime + 15000;
            VehTrackin_05.EngineRunning = false;
            VehTrackin_05.IsExplosionProof = false;
            VehTrackin_05.IsOnlyDamagedByPlayer = false;
            VehTrackin_05.IsFireProof = false;
            BeOnOff[7] = true;
        }
        private void Packages_DeliverThis(int iDropIt)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Packages_DeliverThis, iDropIt == " + iDropIt, tEx);

            VectorList_01.Clear();
            iDeliverList.Clear();
            int iRanRange = VectorList_02.Count - 1;
            while (iDropIt > 0)
            {
                int iRan = RandInt(0, iRanRange);
                if (iDeliverList.Count == 0)
                {
                    iDeliverList.Add(iRan);
                    iDropIt = iDropIt - 1;
                }
                else
                {
                    if (!iDeliverList.Contains(iRan))
                    {
                        iDeliverList.Add(iRan);
                        iDropIt = iDropIt - 1;
                    }
                }
            }
            iDeliverList.Sort();
            int iDelCount = iDeliverList.Count;
            while (iDelCount > 0)
            {
                iDelCount = iDelCount - 1;
                if (VectorCheck(VectorList_02, iDelCount))
                    VectorList_01.Add(VectorList_02[iDeliverList[iDelCount]]);
            }
        }
        private void Packages_SortCayo(List<string> ObName, List<Vector3> ListToFix, Vector3 vStartPoint)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Packages_SortCayo", tEx);

            List<Vector3> NewVList = new List<Vector3>();
            List<string> NewSList = new List<string>();

            List<float> fDistanceTo = new List<float>();

            int iListtoFix = ListToFix.Count;

            Vector3 vFurthest = Vector3.Zero;

            for (int i = 0; i < ListToFix.Count; i++)
                fDistanceTo.Add(ListToFix[i].DistanceTo(vStartPoint));

            float fMax = fDistanceTo[0];
            int iV = 0;

            for (int i = 0; i < fDistanceTo.Count; i++)
            {
                if (fDistanceTo[i] < fMax)
                {
                    fMax = fDistanceTo[i];
                    iV = i;
                }
            }
            vFurthest = ListToFix[iV];

            NewVList.Add(ListToFix[iV]);
            NewSList.Add(ObName[iV]);
            ListToFix.RemoveAt(iV);
            ObName.RemoveAt(iV);

            while (NewVList.Count != iListtoFix)
            {
                fDistanceTo.Clear();
                for (int i = 0; i < ListToFix.Count; i++)
                    fDistanceTo.Add(ListToFix[i].DistanceTo(vFurthest));

                if (ListToFix.Count > 1)
                {
                    float fMin = fDistanceTo[0];
                    int iNext = 0;

                    for (int i = 0; i < fDistanceTo.Count; i++)
                    {
                        if (fDistanceTo[i] < fMin)
                        {
                            fMin = fDistanceTo[i];
                            iNext = i;
                        }
                    }
                    vFurthest = ListToFix[iNext];

                    NewVList.Add(ListToFix[iNext]);
                    NewSList.Add(ObName[iNext]);
                    ListToFix.RemoveAt(iNext);
                    ObName.RemoveAt(iNext);
                }
                else
                {
                    NewVList.Add(ListToFix[0]);
                    NewSList.Add(ObName[0]);
                }
            }
       
            VectorList_01 = ListReverseVec3(NewVList);
            sList_01 = ListReverseString(NewSList);
        }
        private void Packages_LiveExport()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Packages_LiveExport", tEx);

            Ped PHen = NPCSpawn("a_c_hen", vTarget_01, 0.00f, 40, 150, 0, 0, 0, null, 0, false, false, 0, 0);
            PHen.AttachTo(VehTrackin_01, VehTrackin_01.GetBoneIndex("bodyshell"), new Vector3(-0.70f, -0.20f, 0.48f), new Vector3(0.00f, 0.00f, RandFlow(0.01f, 359.99f)));

            PHen = NPCSpawn("a_c_hen", vTarget_01, 0.00f, 40, 150, 0, 0, 0, null, 0, false, false, 0, 0);
            PHen.AttachTo(VehTrackin_01, VehTrackin_01.GetBoneIndex("bodyshell"), new Vector3(-0.40f, -1.00f, 0.48f), new Vector3(0.00f, 0.00f, RandFlow(0.01f, 359.99f)));

            PHen = NPCSpawn("a_c_hen", vTarget_01, 0.00f, 40, 150, 0, 0, 0, null, 0, false, false, 0, 0);
            PHen.AttachTo(VehTrackin_01, VehTrackin_01.GetBoneIndex("bodyshell"), new Vector3(0.40f, -1.20f, 0.48f), new Vector3(0.00f, 0.00f, RandFlow(0.01f, 359.99f)));

            PHen = NPCSpawn("a_c_hen", vTarget_01, 0.00f, 40, 150, 0, 0, 0, null, 0, false, false, 0, 0);
            PHen.AttachTo(VehTrackin_01, VehTrackin_01.GetBoneIndex("bodyshell"), new Vector3(0.80f, -0.20f, 0.48f), new Vector3(0.00f, 0.00f, RandFlow(0.01f, 359.99f)));

            PHen = NPCSpawn("a_c_hen", vTarget_01, 0.00f, 40, 150, 0, 0, 0, null, 0, false, false, 0, 0);
            PHen.AttachTo(VehTrackin_01, VehTrackin_01.GetBoneIndex("bodyshell"), new Vector3(0.50f, -2.40f, 0.48f), new Vector3(0.00f, 0.00f, RandFlow(0.01f, 359.99f)));

            PHen = NPCSpawn("a_c_hen", vTarget_01, 0.00f, 40, 150, 0, 0, 0, null, 0, false, false, 0, 0);
            PHen.AttachTo(VehTrackin_01, VehTrackin_01.GetBoneIndex("bodyshell"), new Vector3(-0.80f, -2.80f, 0.48f), new Vector3(0.00f, 0.00f, RandFlow(0.01f, 359.99f)));
        }
        private void Convicts_DumpCons()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Convicts_DumpCons", tEx);

            for (int i = 0; i < 7; i++)
            {
                Script.Wait(500);
                if (i == 0)
                    NPCSpawn("s_m_y_prisoner_01", vTarget_01, 0.00f, 50, 120, 1, 5, 0, null, 0, true, false, 1, 0);
                else
                    NPCSpawn("s_m_y_prisoner_01", vTarget_01, 0.00f, 50, 120, 1, 6, 0, null, 0, true, false, 0, 0);
            }
            BeOff[1] = true;
        }
        private void Convicts_KrishaToBus()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Convicts_KrishaToBus", tEx);

            Game.FadeScreenOut(1000);
            Script.Wait(1000);

            int iSitEre = VehTrackin_01.PassengerSeats;

            for (int i = 0; i < PedList_01.Count; i++)
            {
                FreeSeat(VehTrackin_01, iSitEre, false);
                PedList_01[i].CurrentBlip.Remove();
                WarptoAnyVeh(VehTrackin_01, PedList_01[i], iSitEre, false);
                iSitEre -= 1;
            }

            iMissionSeq = 5;
            iWait4Sec = Game.GameTime + 15000;
            TheYellowCorona(vTarget_02, 5.00f);
            AddTarget(vTarget_02, true, true, 1.00f, false);
            Game.FadeScreenIn(1000);
        }
        private void Convicts_KrishaLine(Ped Harry, bool Leader)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Convicts_KrishaLine, Leader == " + Leader, tEx);

            iList_01.Add(iMissionVar_01);
            if (Leader)
            {
                Harry.RelationshipGroup = GroupANPCs;
                if (iPlayGroup != 0)
                {
                    Function.Call(Hash.SET_PED_AS_GROUP_MEMBER, Harry, iPlayGroup);
                    Function.Call(Hash.SET_PED_AS_GROUP_LEADER, Harry, iPlayGroup);
                }
            }
            else
            {
                Harry.RelationshipGroup = GroupANPCs;
                if (iPlayGroup != 0)
                    Function.Call(Hash.SET_PED_AS_GROUP_MEMBER, Harry, iPlayGroup);
            }
            iList_01[iList_01.Count - 1] = PedWalkies(Harry, VectorList_01, iList_01[iList_01.Count - 1]);
        }
        private void Convicts_WalkLoop()
        {
            int iBeenHit = 0;
            for (int i = 0; i < PedList_01.Count; i++)
            {
                if (PedList_01[i].HasBeenDamagedBy(Game.Player.Character))
                    iBeenHit += 1;
                else if (PedList_01[i].IsFleeing)
                    iBeenHit += 1;
                else if (PedList_01[i].Position.DistanceTo(VectorList_01[iList_01[i]]) < 1.50f)
                    iList_01[i] = PedWalkies(PedList_01[i], VectorList_01, iList_01[i]);
            }

            if (iBeenHit > 0)
            {
                iBeenHit = 0;
                if (BeOff[0])
                {
                    BeOff[0] = false;
                    Hare.Stop();
                }

                Script.Wait(2000);
                for (int i = 0; i < PedList_01.Count; i++)
                {
                    if (PedList_01[i].HasBeenDamagedBy(Game.Player.Character))
                        iBeenHit += 1;
                    else if (PedList_01[i].IsDead)
                        iBeenHit += 1;
                }
                if (iBeenHit == PedList_01.Count)
                    iMissionSeq = 25;
                else
                    iMissionSeq = 45;
            }
            else
                BeOff[3] = false;
        }
        private void CopKillerz()
        {
            Vehicle[] CopKillar = World.GetNearbyVehicles(Game.Player.Character, 50.0f);

            for (int i = 0; i < CopKillar.Count(); i++)
            {
                if (VehExists(CopKillar, i))
                {
                    if (CopKillar[i].ClassType == VehicleClass.Emergency && CopKillar[i].IsPersistent == false)
                        CopKillar[i].Delete();
                }
            }
        }
        public int Fubar_Vectors(int Local, int iArea, bool bRandom, bool bFirst)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Fubar_Vectors, Local == " + Local + ", iArea == " + iArea + ", bRandom == " + bRandom, tEx);

            VectorList_01.Clear();//park
            VectorList_02.Clear();//ped


            if (Local == 1)
            {
                if (bRandom)
                    iArea = RandInt(1, 13);

                if (iArea == 1)//        "AIRP")
                {
                    VectorList_02.Add(new Vector3(-1042.819f, -2746.101f, 21.3594f));
                    VectorList_01.Add(new Vector3(-1033.355f, -2730.467f, 19.36782f));
                    VectorList_02.Add(new Vector3(-880.0367f, -2175.426f, 9.809046f));
                    VectorList_01.Add(new Vector3(-886.2841f, -2188.905f, 7.813149f));
                    VectorList_02.Add(new Vector3(-702.2244f, -2275.315f, 13.45538f));
                    VectorList_01.Add(new Vector3(-691.0641f, -2288.052f, 12.27384f));
                    VectorList_02.Add(new Vector3(-675.5292f, -2398.912f, 16.1189f));
                    VectorList_01.Add(new Vector3(-684.2182f, -2401.862f, 13.94477f));
                    VectorList_02.Add(new Vector3(-894.1396f, -2401.645f, 14.02436f));
                    VectorList_01.Add(new Vector3(-905.5909f, -2407.064f, 13.35347f));
                }
                else if (iArea == 2)//        "ELYSIAN")
                {
                    VectorList_02.Add(new Vector3(-423.3445f, -2788.727f, 6.000384f));
                    VectorList_01.Add(new Vector3(-419.82f, -2782.47f, 5.294005f));
                    VectorList_02.Add(new Vector3(-301.2311f, -2611.85f, 17.10094f));
                    VectorList_01.Add(new Vector3(-303.4613f, -2595.057f, 5.298008f));
                    VectorList_02.Add(new Vector3(374.0266f, -2420f, 6.041661f));
                    VectorList_01.Add(new Vector3(370.1503f, -2430.4f, 5.335281f));
                    VectorList_02.Add(new Vector3(-259.8698f, -2678.943f, 6.355639f));
                    VectorList_01.Add(new Vector3(-255.6797f, -2683.559f, 5.293688f));
                    VectorList_02.Add(new Vector3(-328.3435f, -2700.521f, 7.549515f));
                    VectorList_01.Add(new Vector3(-332.4807f, -2694.783f, 5.321131f));
                    VectorList_02.Add(new Vector3(-332.4876f, -2792.459f, 5.00024f));
                    VectorList_01.Add(new Vector3(-355.9153f, -2791.711f, 5.294162f));
                    VectorList_02.Add(new Vector3(581.9357f, -2723.062f, 7.186927f));
                    VectorList_01.Add(new Vector3(582.1222f, -2731.58f, 5.349043f));
                    VectorList_02.Add(new Vector3(661.4727f, -2644.04f, 8.406054f));
                    VectorList_01.Add(new Vector3(656.2927f, -2658.732f, 5.375378f));
                    VectorList_02.Add(new Vector3(308.5914f, -2861.397f, 6.015434f));
                    VectorList_01.Add(new Vector3(301.2867f, -2857.547f, 5.317563f));
                    VectorList_02.Add(new Vector3(213.5255f, -3077.135f, 7.01534f));
                    VectorList_01.Add(new Vector3(212.4372f, -3070.709f, 5.087289f));

                }
                else if (iArea == 3)//        "TERMINA")
                {
                    VectorList_02.Add(new Vector3(1240.476f, -3179.404f, 7.104862f));
                    VectorList_01.Add(new Vector3(1252.465f, -3172.607f, 5.094413f));
                    VectorList_02.Add(new Vector3(1229.969f, -2912.093f, 9.319263f));
                    VectorList_01.Add(new Vector3(1215.25f, -2916.509f, 5.159297f));
                    VectorList_02.Add(new Vector3(1009.878f, -2893.166f, 11.26011f));
                    VectorList_01.Add(new Vector3(1001.554f, -2909.409f, 5.193929f));
                    VectorList_02.Add(new Vector3(813.5453f, -2982.219f, 6.020936f));
                    VectorList_01.Add(new Vector3(827.9223f, -2976.194f, 5.198393f));
                    VectorList_02.Add(new Vector3(1239.33f, -3002.832f, 9.319263f));
                    VectorList_01.Add(new Vector3(1216.304f, -2994.296f, 5.358681f));
                    VectorList_02.Add(new Vector3(1005.204f, -2891.085f, 11.26011f));
                    VectorList_01.Add(new Vector3(1008.078f, -2909.402f, 5.393286f));
                }
                else if (iArea == 4)//        "CYPRE")
                {
                    VectorList_02.Add(new Vector3(982.0045f, -1805.02f, 35.48458f));
                    VectorList_01.Add(new Vector3(985.834f, -1793.137f, 30.51365f));
                    VectorList_02.Add(new Vector3(906.4805f, -1932.75f, 30.62246f));
                    VectorList_01.Add(new Vector3(902.3698f, -1935.763f, 29.90796f));
                    VectorList_02.Add(new Vector3(938.6974f, -2127.271f, 30.50483f));
                    VectorList_01.Add(new Vector3(932.3851f, -2126.394f, 29.60342f));
                    VectorList_02.Add(new Vector3(902.7444f, -2273.203f, 32.54755f));
                    VectorList_01.Add(new Vector3(910.3268f, -2272.678f, 29.83482f));
                    VectorList_02.Add(new Vector3(990.9307f, -2431.029f, 31.24243f));
                    VectorList_01.Add(new Vector3(984.599f, -2434.663f, 27.98843f));
                    VectorList_02.Add(new Vector3(805.5872f, -2380.521f, 29.0977f));
                    VectorList_01.Add(new Vector3(802.0189f, -2380.978f, 28.39072f));
                    VectorList_02.Add(new Vector3(703.8163f, -2196.052f, 29.17698f));
                    VectorList_01.Add(new Vector3(708.5906f, -2197.963f, 28.48933f));
                    VectorList_02.Add(new Vector3(1018.954f, -2511.357f, 28.48421f));
                    VectorList_01.Add(new Vector3(1011.88f, -2509.148f, 27.59706f));
                    VectorList_02.Add(new Vector3(743.4415f, -1797.433f, 29.29167f));
                    VectorList_01.Add(new Vector3(737.1614f, -1796.497f, 28.58462f));

                }
                else if (iArea == 5)//        "EBURO")
                {
                    VectorList_02.Add(new Vector3(1258.926f, -1761.398f, 49.67699f));
                    VectorList_01.Add(new Vector3(1252.724f, -1749.146f, 46.87161f));
                    VectorList_02.Add(new Vector3(1250.658f, -1734.747f, 52.03196f));
                    VectorList_01.Add(new Vector3(1261.994f, -1740.818f, 49.06741f));
                    VectorList_02.Add(new Vector3(1295.26f, -1739.837f, 54.27173f));
                    VectorList_01.Add(new Vector3(1298.471f, -1728.669f, 53.11452f));
                    VectorList_02.Add(new Vector3(1289.748f, -1711.345f, 55.27933f));
                    VectorList_01.Add(new Vector3(1303.558f, -1708.63f, 54.35196f));
                    VectorList_02.Add(new Vector3(1314.942f, -1732.162f, 54.70008f));
                    VectorList_01.Add(new Vector3(1316.505f, -1719.276f, 53.91096f));
                    VectorList_02.Add(new Vector3(1316.928f, -1699.868f, 57.83794f));
                    VectorList_01.Add(new Vector3(1325.958f, -1710.673f, 54.93906f));
                    VectorList_02.Add(new Vector3(1365.561f, -1720.873f, 65.63401f));
                    VectorList_01.Add(new Vector3(1361.208f, -1706.997f, 60.67844f));
                    VectorList_02.Add(new Vector3(1355.67f, -1690.747f, 60.49119f));
                    VectorList_01.Add(new Vector3(1360.257f, -1700.94f, 60.10064f));
                    VectorList_02.Add(new Vector3(1342.94f, -1579.568f, 54.0538f));
                    VectorList_01.Add(new Vector3(1353.538f, -1577.313f, 53.16742f));
                    VectorList_02.Add(new Vector3(1411.792f, -1490.745f, 60.65726f));
                    VectorList_01.Add(new Vector3(1414.42f, -1502.572f, 59.29406f));
                    VectorList_02.Add(new Vector3(1382.07f, -1544.12f, 57.10718f));
                    VectorList_01.Add(new Vector3(1378.299f, -1537.098f, 55.76317f));
                    VectorList_02.Add(new Vector3(1379.234f, -1515.886f, 58.02826f));
                    VectorList_01.Add(new Vector3(1372.943f, -1522.675f, 56.37854f));
                    VectorList_02.Add(new Vector3(1360.438f, -1555.744f, 56.34147f));
                    VectorList_01.Add(new Vector3(1357.027f, -1544.014f, 53.8348f));
                    VectorList_02.Add(new Vector3(1337.987f, -1525.484f, 54.17774f));
                    VectorList_01.Add(new Vector3(1340.507f, -1539.055f, 52.13292f));
                    VectorList_02.Add(new Vector3(1315.645f, -1526.977f, 51.80762f));
                    VectorList_01.Add(new Vector3(1320.099f, -1542.56f, 49.60325f));
                    VectorList_02.Add(new Vector3(1326.927f, -1552.963f, 54.05164f));
                    VectorList_01.Add(new Vector3(1317.267f, -1553.681f, 49.75652f));
                    VectorList_02.Add(new Vector3(1286.392f, -1603.538f, 54.82489f));
                    VectorList_01.Add(new Vector3(1280.522f, -1585.16f, 51.23847f));
                    VectorList_02.Add(new Vector3(1230.891f, -1591.095f, 53.76609f));
                    VectorList_01.Add(new Vector3(1241.029f, -1606.726f, 52.13516f));
                    VectorList_02.Add(new Vector3(1244.871f, -1626.249f, 53.28225f));
                    VectorList_01.Add(new Vector3(1237.989f, -1615.666f, 51.32797f));
                    VectorList_02.Add(new Vector3(1206.614f, -1608.26f, 50.34828f));
                    VectorList_01.Add(new Vector3(1219.272f, -1620.496f, 48.36689f));
                    VectorList_02.Add(new Vector3(1214.302f, -1643.783f, 48.64599f));
                    VectorList_01.Add(new Vector3(1207.69f, -1633.361f, 45.57808f));
                    VectorList_02.Add(new Vector3(1193.243f, -1622.892f, 45.22145f));
                    VectorList_01.Add(new Vector3(1194.241f, -1636.156f, 42.71461f));
                    VectorList_02.Add(new Vector3(1193.184f, -1656.018f, 43.02645f));
                    VectorList_01.Add(new Vector3(1187.123f, -1647.503f, 40.10266f));

                }
                else if (iArea == 6)//        "MURRI")
                {
                    VectorList_02.Add(new Vector3(1155.98f, -1546.396f, 34.84367f));
                    VectorList_01.Add(new Vector3(1154.955f, -1515.225f, 34.10002f));
                    VectorList_02.Add(new Vector3(1192.315f, -1248.059f, 39.93959f));
                    VectorList_01.Add(new Vector3(1200.000f, -1264.236f, 34.63448f));
                    VectorList_02.Add(new Vector3(1165.555f, -1347.332f, 35.96715f));
                    VectorList_01.Add(new Vector3(1172.089f, -1347.337f, 34.20704f));
                    VectorList_02.Add(new Vector3(1098.399f, -1275.067f, 20.7339f));
                    VectorList_01.Add(new Vector3(1097.589f, -1271.286f, 19.56124f));
                    VectorList_02.Add(new Vector3(1139.061f, -961.2004f, 47.53792f));
                    VectorList_01.Add(new Vector3(1141.401f, -955.7689f, 47.78555f));

                }
                else if (iArea == 7)//        "BANNING")+"STAD")
                {
                    VectorList_02.Add(new Vector3(-130.1736f, -2240.337f, 7.989907f));
                    VectorList_01.Add(new Vector3(-126.3377f, -2247.762f, 7.219027f));
                    VectorList_02.Add(new Vector3(167.6787f, -2222.852f, 7.23611f));
                    VectorList_01.Add(new Vector3(169.2989f, -2230.687f, 5.440534f));
                    VectorList_02.Add(new Vector3(-179.5384f, -2129.996f, 22.82841f));
                    VectorList_01.Add(new Vector3(-160.7402f, -2138.382f, 16.19898f));
                    VectorList_02.Add(new Vector3(-305.949f, -2191.671f, 10.83942f));
                    VectorList_01.Add(new Vector3(-295.472f, -2186.849f, 9.631311f));
                    VectorList_02.Add(new Vector3(-238.3608f, -1899.795f, 27.82936f));
                    VectorList_01.Add(new Vector3(-235.4618f, -1862.648f, 28.29552f));
                    VectorList_02.Add(new Vector3(-248.779f, -2025.752f, 29.94605f));
                    VectorList_01.Add(new Vector3(-228.6881f, -2048.887f, 27.02817f));
                    VectorList_02.Add(new Vector3(-236.8143f, -1996.463f, 29.94605f));
                    VectorList_01.Add(new Vector3(-206.9641f, -2002.085f, 27.02783f));
                }
                else if (iArea == 8)//        "RANCHO")
                {
                    VectorList_02.Add(new Vector3(297.2595f, -2097.519f, 17.66359f));
                    VectorList_01.Add(new Vector3(281.283f, -2084.28f, 16.11637f));
                    VectorList_02.Add(new Vector3(295.5801f, -2093.154f, 17.66357f));
                    VectorList_01.Add(new Vector3(281.283f, -2084.28f, 16.11637f));
                    VectorList_02.Add(new Vector3(293.3682f, -2087.566f, 17.66357f));
                    VectorList_01.Add(new Vector3(281.283f, -2084.28f, 16.11637f));
                    VectorList_02.Add(new Vector3(293.0396f, -2086.144f, 17.66357f));
                    VectorList_01.Add(new Vector3(281.283f, -2084.28f, 16.11637f));
                    VectorList_02.Add(new Vector3(289.6334f, -2077.022f, 17.66078f));
                    VectorList_01.Add(new Vector3(281.283f, -2084.28f, 16.11637f));
                    VectorList_02.Add(new Vector3(287.9153f, -2072.455f, 17.66359f));
                    VectorList_01.Add(new Vector3(281.283f, -2084.28f, 16.11637f));
                    VectorList_02.Add(new Vector3(279.6186f, -2042.905f, 19.76756f));
                    VectorList_01.Add(new Vector3(276.5648f, -2033.824f, 17.92848f));
                    VectorList_02.Add(new Vector3(280.6062f, -2041.752f, 19.76755f));
                    VectorList_01.Add(new Vector3(276.5648f, -2033.824f, 17.92848f));
                    VectorList_02.Add(new Vector3(287.0049f, -2034.633f, 19.76756f));
                    VectorList_01.Add(new Vector3(276.5648f, -2033.824f, 17.92848f));
                    VectorList_02.Add(new Vector3(289.5717f, -2031.132f, 19.76725f));
                    VectorList_01.Add(new Vector3(276.5648f, -2033.824f, 17.92848f));
                    VectorList_02.Add(new Vector3(313.9517f, -2040.767f, 20.93602f));
                    VectorList_01.Add(new Vector3(333.4731f, -2039.357f, 20.45381f));
                    VectorList_02.Add(new Vector3(317.11f, -2043.383f, 20.93639f));
                    VectorList_01.Add(new Vector3(333.4731f, -2039.357f, 20.45381f));
                    VectorList_02.Add(new Vector3(325.714f, -2050.058f, 20.9364f));
                    VectorList_01.Add(new Vector3(333.4731f, -2039.357f, 20.45381f));
                    VectorList_02.Add(new Vector3(334.11f, -2057.375f, 20.93613f));
                    VectorList_01.Add(new Vector3(333.4731f, -2039.357f, 20.45381f));
                    VectorList_02.Add(new Vector3(342.4112f, -2064.538f, 20.93642f));
                    VectorList_01.Add(new Vector3(333.4731f, -2039.357f, 20.45381f));
                    VectorList_02.Add(new Vector3(345.5887f, -2067.228f, 20.93641f));
                    VectorList_01.Add(new Vector3(333.4731f, -2039.357f, 20.45381f));
                    VectorList_02.Add(new Vector3(357.6005f, -2073.108f, 21.74449f));
                    VectorList_01.Add(new Vector3(333.4731f, -2039.357f, 20.45381f));
                    VectorList_02.Add(new Vector3(364.8902f, -2064.472f, 21.74449f));
                    VectorList_01.Add(new Vector3(333.4731f, -2039.357f, 20.45381f));
                    VectorList_02.Add(new Vector3(371.1835f, -2057.155f, 21.7445f));
                    VectorList_01.Add(new Vector3(333.4731f, -2039.357f, 20.45381f));
                    VectorList_02.Add(new Vector3(364.3695f, -2045.641f, 22.35371f));
                    VectorList_01.Add(new Vector3(333.4731f, -2039.357f, 20.45381f));
                    VectorList_02.Add(new Vector3(360.5106f, -2042.656f, 22.3543f));
                    VectorList_01.Add(new Vector3(333.4731f, -2039.357f, 20.45381f));
                    VectorList_02.Add(new Vector3(353.1429f, -2036.6f, 22.35431f));
                    VectorList_01.Add(new Vector3(333.4731f, -2039.357f, 20.45381f));
                    VectorList_02.Add(new Vector3(351.7538f, -2035.112f, 22.35429f));
                    VectorList_01.Add(new Vector3(333.4731f, -2039.357f, 20.45381f));
                    VectorList_02.Add(new Vector3(344.6013f, -2029.163f, 22.3543f));
                    VectorList_01.Add(new Vector3(333.4731f, -2039.357f, 20.45381f));
                    VectorList_02.Add(new Vector3(343.1128f, -2028.159f, 22.35431f));
                    VectorList_01.Add(new Vector3(333.4731f, -2039.357f, 20.45381f));
                    VectorList_02.Add(new Vector3(335.6897f, -2021.638f, 22.3543f));
                    VectorList_01.Add(new Vector3(333.4731f, -2039.357f, 20.45381f));
                    VectorList_02.Add(new Vector3(332.3005f, -2018.967f, 22.35416f));
                    VectorList_01.Add(new Vector3(333.4731f, -2039.357f, 20.45381f));
                    VectorList_02.Add(new Vector3(331.4324f, -1981.701f, 24.16728f));
                    VectorList_01.Add(new Vector3(320.3594f, -1981.213f, 22.35782f));
                    VectorList_02.Add(new Vector3(334.114f, -1978.607f, 24.16728f));
                    VectorList_01.Add(new Vector3(320.3594f, -1981.213f, 22.35782f));
                    VectorList_02.Add(new Vector3(324.9895f, -1989.26f, 24.16728f));
                    VectorList_01.Add(new Vector3(320.3594f, -1981.213f, 22.35782f));
                    VectorList_02.Add(new Vector3(383.8976f, -1994.846f, 24.23498f));
                    VectorList_01.Add(new Vector3(373.5545f, -1970.037f, 23.65805f));
                    VectorList_02.Add(new Vector3(374.5296f, -1991.047f, 24.235f));
                    VectorList_01.Add(new Vector3(373.5545f, -1970.037f, 23.65805f));
                    VectorList_02.Add(new Vector3(364f, -1987.414f, 24.23451f));
                    VectorList_01.Add(new Vector3(373.5545f, -1970.037f, 23.65805f));
                    VectorList_02.Add(new Vector3(405.9168f, -1751.467f, 29.71029f));
                    VectorList_01.Add(new Vector3(394.1053f, -1743.29f, 28.61055f));
                    VectorList_02.Add(new Vector3(430.7849f, -1741f, 29.60396f));
                    VectorList_01.Add(new Vector3(423.1591f, -1729.126f, 28.65469f));
                    VectorList_02.Add(new Vector3(430.6302f, -1725.376f, 29.60146f));
                    VectorList_01.Add(new Vector3(419.5047f, -1713.15f, 28.55581f));
                    VectorList_02.Add(new Vector3(443.4339f, -1707.119f, 29.70905f));
                    VectorList_01.Add(new Vector3(432.6241f, -1698.296f, 28.5797f));
                    VectorList_02.Add(new Vector3(490.0269f, -1714.521f, 29.70519f));
                    VectorList_01.Add(new Vector3(502.9299f, -1717.948f, 28.608f));
                    VectorList_02.Add(new Vector3(479.9201f, -1736.504f, 29.15102f));
                    VectorList_01.Add(new Vector3(477.463f, -1744.357f, 28.29779f));
                    VectorList_02.Add(new Vector3(472.2731f, -1774.885f, 29.07085f));
                    VectorList_01.Add(new Vector3(479.7751f, -1776.714f, 27.98321f));
                    VectorList_02.Add(new Vector3(513.6623f, -1780.66f, 28.91397f));
                    VectorList_01.Add(new Vector3(500.4468f, -1782.357f, 27.80231f));
                    VectorList_02.Add(new Vector3(495.4278f, -1823.095f, 28.86971f));
                    VectorList_01.Add(new Vector3(484.5051f, -1813.766f, 27.56089f));
                    VectorList_02.Add(new Vector3(368.6719f, -1896.409f, 25.17853f));
                    VectorList_01.Add(new Vector3(380.2398f, -1906.966f, 24.08315f));
                    VectorList_02.Add(new Vector3(385.4476f, -1881.849f, 26.03137f));
                    VectorList_01.Add(new Vector3(396.2569f, -1891.434f, 24.66819f));
                    VectorList_02.Add(new Vector3(399.448f, -1864.953f, 26.71635f));
                    VectorList_01.Add(new Vector3(411.071f, -1877.123f, 25.58627f));
                    VectorList_02.Add(new Vector3(427.4836f, -1841.994f, 28.46345f));
                    VectorList_01.Add(new Vector3(434.6688f, -1854.25f, 26.93241f));
                    VectorList_02.Add(new Vector3(440.0391f, -1830.395f, 28.36186f));
                    VectorList_01.Add(new Vector3(448.5591f, -1841.51f, 27.25047f));
                    VectorList_02.Add(new Vector3(349.0762f, -1820.522f, 28.8941f));
                    VectorList_01.Add(new Vector3(346.9402f, -1807.412f, 27.83603f));
                    VectorList_02.Add(new Vector3(328.6295f, -1845.301f, 27.74807f));
                    VectorList_01.Add(new Vector3(316.558f, -1835.695f, 26.40304f));
                    VectorList_02.Add(new Vector3(269.8459f, -1916.823f, 26.18237f));
                    VectorList_01.Add(new Vector3(258.692f, -1905.442f, 25.32743f));
                    VectorList_02.Add(new Vector3(250.4847f, -1935.005f, 24.69927f));
                    VectorList_01.Add(new Vector3(238.5349f, -1929.15f, 23.39324f));
                    VectorList_02.Add(new Vector3(324.2186f, -1938.26f, 25.01898f));
                    VectorList_01.Add(new Vector3(335.2216f, -1950.085f, 23.79116f));
                    VectorList_02.Add(new Vector3(295.8637f, -1972.111f, 22.90082f));
                    VectorList_01.Add(new Vector3(306.892f, -1983.827f, 21.45563f));
                    VectorList_02.Add(new Vector3(280.3494f, -1993.836f, 20.8038f));
                    VectorList_01.Add(new Vector3(292.5224f, -2000.789f, 19.75769f));
                    VectorList_02.Add(new Vector3(256.7441f, -2023.586f, 19.26635f));
                    VectorList_01.Add(new Vector3(268.5673f, -2030.575f, 17.92979f));

                }
                else if (iArea == 9)//        "DAVIS")
                {
                    VectorList_02.Add(new Vector3(-50.39761f, -1783.597f, 28.30082f));
                    VectorList_01.Add(new Vector3(-57.99997f, -1797.434f, 26.75445f));
                    VectorList_02.Add(new Vector3(-20.35306f, -1858.548f, 25.40867f));
                    VectorList_01.Add(new Vector3(-12.61712f, -1846.052f, 24.31055f));
                    VectorList_02.Add(new Vector3(-10.39145f, -1883.942f, 24.14204f));
                    VectorList_01.Add(new Vector3(1.918285f, -1876.412f, 23.1049f));
                    VectorList_02.Add(new Vector3(5.216082f, -1884.246f, 23.69726f));
                    VectorList_01.Add(new Vector3(16.6125f, -1871.542f, 22.67904f));
                    VectorList_02.Add(new Vector3(45.92031f, -1864.545f, 23.27833f));
                    VectorList_01.Add(new Vector3(31.95667f, -1873.358f, 22.1308f));
                    VectorList_02.Add(new Vector3(23.177f, -1896.414f, 22.96589f));
                    VectorList_01.Add(new Vector3(34.17988f, -1886.511f, 21.71531f));
                    VectorList_02.Add(new Vector3(54.39722f, -1873.642f, 22.80583f));
                    VectorList_01.Add(new Vector3(52.75089f, -1878.867f, 21.62855f));
                    VectorList_02.Add(new Vector3(39.40047f, -1911.863f, 21.9535f));
                    VectorList_01.Add(new Vector3(53.0804f, -1901.614f, 20.94305f));
                    VectorList_02.Add(new Vector3(76.59599f, -1948.475f, 21.17416f));
                    VectorList_01.Add(new Vector3(91.37643f, -1935.88f, 20.10258f));
                    VectorList_02.Add(new Vector3(85.55811f, -1958.879f, 21.12167f));
                    VectorList_01.Add(new Vector3(98.82529f, -1948.292f, 20.11119f));
                    VectorList_02.Add(new Vector3(114.092f, -1961.006f, 21.33425f));
                    VectorList_01.Add(new Vector3(107.2141f, -1949.395f, 20.13007f));
                    VectorList_02.Add(new Vector3(100.4846f, -1912.679f, 21.40742f));
                    VectorList_01.Add(new Vector3(93.13752f, -1924.911f, 20.08893f));
                    VectorList_02.Add(new Vector3(104.29f, -1885.105f, 24.31878f));
                    VectorList_01.Add(new Vector3(106.311f, -1878.515f, 23.34496f));
                    VectorList_02.Add(new Vector3(130.2774f, -1853.328f, 25.23479f));
                    VectorList_01.Add(new Vector3(124.8095f, -1868.742f, 23.66036f));
                    VectorList_02.Add(new Vector3(128.0303f, -1896.44f, 23.6742f));
                    VectorList_01.Add(new Vector3(137.0386f, -1882.512f, 22.94671f));
                    VectorList_02.Add(new Vector3(171.1915f, -1871.533f, 24.40023f));
                    VectorList_01.Add(new Vector3(162.018f, -1884.568f, 23.05028f));
                    VectorList_02.Add(new Vector3(192.1942f, -1883.464f, 25.05676f));
                    VectorList_01.Add(new Vector3(185.4829f, -1895.689f, 23.09596f));
                    VectorList_02.Add(new Vector3(179.1025f, -1924.555f, 21.37102f));
                    VectorList_01.Add(new Vector3(175.1854f, -1934.801f, 20.40962f));
                    VectorList_02.Add(new Vector3(149.0806f, -1960.494f, 19.45883f));
                    VectorList_01.Add(new Vector3(160.0891f, -1971.575f, 17.89874f));

                }
                else if (iArea == 10)//        "LOSPUER"){  (MyZone == "DELSOL")
                {
                    VectorList_02.Add(new Vector3(-1040.85f, -1475.032f, 5.57517f));
                    VectorList_01.Add(new Vector3(-1047.524f, -1466.829f, 4.423398f));
                    VectorList_02.Add(new Vector3(-1038.237f, -1396.715f, 5.553193f));
                    VectorList_01.Add(new Vector3(-1048.505f, -1398.825f, 4.83193f));
                    VectorList_02.Add(new Vector3(-822.8834f, -1222.964f, 7.36541f));
                    VectorList_01.Add(new Vector3(-828.3438f, -1216.498f, 6.34208f));
                    VectorList_02.Add(new Vector3(-783.1737f, -1351.898f, 8.99978f));
                    VectorList_01.Add(new Vector3(-783.9278f, -1333.898f, 4.407724f));
                    VectorList_02.Add(new Vector3(-753.3792f, -1511.745f, 5.016343f));
                    VectorList_01.Add(new Vector3(-753.189f, -1501.009f, 4.408158f));
                    VectorList_02.Add(new Vector3(-499.4994f, -1714.084f, 19.89919f));
                    VectorList_01.Add(new Vector3(-508.1526f, -1720.533f, 18.72518f));
                    VectorList_02.Add(new Vector3(-621.099f, -1640.762f, 25.97497f));
                    VectorList_01.Add(new Vector3(-625.2062f, -1645.418f, 25.23293f));

                }
                else if (iArea == 11)//        "CHAMH")
                {
                    VectorList_02.Add(new Vector3(-212.6789f, -1669.577f, 34.4632f));
                    VectorList_01.Add(new Vector3(-187.9321f, -1672.19f, 32.86395f));
                    VectorList_02.Add(new Vector3(-213.5734f, -1608.434f, 34.86931f));
                    VectorList_01.Add(new Vector3(-186.8391f, -1607.341f, 33.37147f));
                    VectorList_02.Add(new Vector3(-170.9348f, -1538.064f, 35.1156f));
                    VectorList_01.Add(new Vector3(-148.8884f, -1552.597f, 34.02704f));
                    VectorList_02.Add(new Vector3(-117.0381f, -1477.216f, 33.8227f));
                    VectorList_01.Add(new Vector3(-133.6183f, -1500.327f, 33.46594f));
                    VectorList_02.Add(new Vector3(-158.1097f, -1680.082f, 33.83337f));
                    VectorList_01.Add(new Vector3(-163.4962f, -1701.08f, 30.80787f));
                    VectorList_02.Add(new Vector3(-141.8925f, -1693.16f, 32.87245f));
                    VectorList_01.Add(new Vector3(-163.4962f, -1701.08f, 30.80787f));
                    VectorList_02.Add(new Vector3(-147.9179f, -1688.423f, 32.87242f));
                    VectorList_01.Add(new Vector3(-163.4962f, -1701.08f, 30.80787f));
                    VectorList_02.Add(new Vector3(-142.2503f, -1693.109f, 36.1673f));
                    VectorList_01.Add(new Vector3(-163.4962f, -1701.08f, 30.80787f));
                    VectorList_02.Add(new Vector3(-147.5f, -1688.599f, 36.16715f));
                    VectorList_01.Add(new Vector3(-163.4962f, -1701.08f, 30.80787f));
                    VectorList_02.Add(new Vector3(-158.2306f, -1679.633f, 36.96638f));
                    VectorList_01.Add(new Vector3(-163.4962f, -1701.08f, 30.80787f));
                    VectorList_02.Add(new Vector3(-116.7299f, -1660.611f, 32.56437f));
                    VectorList_01.Add(new Vector3(-101.5155f, -1679.808f, 28.62062f));
                    VectorList_02.Add(new Vector3(-80.86539f, -1612.877f, 31.48242f));
                    VectorList_01.Add(new Vector3(-59.22719f, -1629.017f, 28.62579f));
                    VectorList_02.Add(new Vector3(-138.0755f, -1590.171f, 34.24369f));
                    VectorList_01.Add(new Vector3(-158.3103f, -1577.135f, 34.18251f));

                }
                else if (iArea == 12)//        "STRAW")
                {
                    VectorList_02.Add(new Vector3(20.65767f, -1506.336f, 31.85014f));
                    VectorList_01.Add(new Vector3(12.1674f, -1519.459f, 28.89222f));
                    VectorList_02.Add(new Vector3(-295.9617f, -1342.609f, 31.31202f));
                    VectorList_01.Add(new Vector3(-289.9343f, -1345.626f, 30.58545f));
                    VectorList_02.Add(new Vector3(-121.1603f, -1290.486f, 29.3136f));
                    VectorList_01.Add(new Vector3(-113.7367f, -1291.787f, 28.59361f));
                    VectorList_02.Add(new Vector3(87.13698f, -1295.678f, 29.20869f));
                    VectorList_01.Add(new Vector3(81.75984f, -1302.132f, 28.60637f));
                    VectorList_02.Add(new Vector3(-32.69242f, -1446.294f, 31.89136f));
                    VectorList_01.Add(new Vector3(-38.02354f, -1450.038f, 30.98904f));
                    VectorList_02.Add(new Vector3(-64.27878f, -1449.677f, 32.52492f));
                    VectorList_01.Add(new Vector3(-63.81673f, -1462.527f, 31.47367f));
                    VectorList_02.Add(new Vector3(-83.0243f, -1399.693f, 29.32075f));
                    VectorList_01.Add(new Vector3(-80.07758f, -1405.342f, 28.81458f));
                    VectorList_02.Add(new Vector3(53.03144f, -1479.529f, 29.27781f));
                    VectorList_01.Add(new Vector3(68.60536f, -1476.826f, 28.69232f));
                }
                else //        "LMESA")
                {
                    VectorList_02.Add(new Vector3(792.9578f, -735.9182f, 27.56665f));
                    VectorList_01.Add(new Vector3(781.3509f, -749.787f, 26.57809f));
                    VectorList_02.Add(new Vector3(895.0829f, -896.4345f, 27.78768f));
                    VectorList_01.Add(new Vector3(886.1035f, -903.9097f, 25.76367f));
                    VectorList_02.Add(new Vector3(871.4327f, -1146.561f, 25.98947f));
                    VectorList_01.Add(new Vector3(866.3556f, -1155.935f, 23.91385f));
                    VectorList_02.Add(new Vector3(826.7053f, -1289.793f, 28.24066f));
                    VectorList_01.Add(new Vector3(808.5062f, -1289.575f, 25.62454f));
                    VectorList_02.Add(new Vector3(830.7275f, -1054.169f, 28.66163f));
                    VectorList_01.Add(new Vector3(825.2499f, -1066.779f, 27.53641f));
                    VectorList_02.Add(new Vector3(844.934f, -851.4561f, 26.54606f));
                    VectorList_01.Add(new Vector3(828.899f, -839.3197f, 25.84308f));
                    VectorList_02.Add(new Vector3(793.6158f, -735.8035f, 27.74888f));
                    VectorList_01.Add(new Vector3(784.0593f, -737.003f, 27.11176f));
                }

            }
            else if (Local == 2)
            {
                if (bRandom)
                    iArea = RandInt(1, 17);

                if (iArea == 1)//        "SKID" 
                {
                    VectorList_02.Add(new Vector3(354.2527f, -1028.431f, 29.33105f));
                    VectorList_01.Add(new Vector3(357.0464f, -1036.737f, 28.64928f));
                    VectorList_02.Add(new Vector3(433.7992f, -982.1172f, 30.70951f));
                    VectorList_01.Add(new Vector3(402.9555f, -983.3735f, 28.84099f));
                    VectorList_02.Add(new Vector3(396.8822f, -1169.79f, 29.29176f));
                    VectorList_01.Add(new Vector3(397.0258f, -1158.473f, 28.7617f));
                    VectorList_02.Add(new Vector3(417.872f, -767.4501f, 29.41702f));
                    VectorList_01.Add(new Vector3(409.3581f, -768.8823f, 28.73415f));
                    VectorList_02.Add(new Vector3(391.4617f, -930.6711f, 29.41866f));
                    VectorList_01.Add(new Vector3(399.9209f, -926.3832f, 28.82933f));
                    VectorList_02.Add(new Vector3(377.8676f, -999.1207f, 29.45313f));
                    VectorList_01.Add(new Vector3(395.0699f, -1009.7f, 28.8324f));
                }
                else if (iArea == 2)//        "LEGSQU" 
                {
                    VectorList_02.Add(new Vector3(177.0969f, -979.6016f, 29.99313f));
                    VectorList_01.Add(new Vector3(168.3188f, -1010.917f, 28.80831f));
                    VectorList_02.Add(new Vector3(104.949f, -932.8635f, 29.81259f));
                    VectorList_01.Add(new Vector3(116.4733f, -936.0852f, 29.14896f));
                    VectorList_02.Add(new Vector3(184.9182f, -887.6499f, 31.11672f));
                    VectorList_01.Add(new Vector3(171.2225f, -871.0737f, 29.9788f));
                    VectorList_02.Add(new Vector3(273.7766f, -833.3542f, 29.41132f));
                    VectorList_01.Add(new Vector3(264.5758f, -838.8533f, 28.76188f));
                    VectorList_02.Add(new Vector3(287.8855f, -919.9745f, 29.29419f));
                    VectorList_01.Add(new Vector3(277.9113f, -922.6801f, 28.36518f));
                }
                else if (iArea == 3)//        "TEXTI"  
                {
                    VectorList_02.Add(new Vector3(458.9576f, -853.5832f, 27.33997f));
                    VectorList_01.Add(new Vector3(470.0547f, -829.0839f, 25.8446f));
                    VectorList_02.Add(new Vector3(460.754f, -769.7076f, 27.3578f));
                    VectorList_01.Add(new Vector3(455.3673f, -763.0317f, 26.82866f));
                    VectorList_02.Add(new Vector3(394.7988f, -711.6652f, 29.28482f));
                    VectorList_01.Add(new Vector3(401.2914f, -712.3533f, 28.64416f));
                    VectorList_02.Add(new Vector3(418.4028f, -767.5741f, 29.42775f));
                    VectorList_01.Add(new Vector3(410.084f, -769.1244f, 28.67112f));
                    VectorList_02.Add(new Vector3(494.0114f, -571.1681f, 24.55081f));
                    VectorList_01.Add(new Vector3(504.4706f, -581.2975f, 24.25294f));
                }
                else if (iArea == 4)//        "PBOX"   
                {
                    VectorList_02.Add(new Vector3(-115.7897f, -603.7586f, 36.28072f));
                    VectorList_01.Add(new Vector3(-106.2625f, -608.1697f, 35.52522f));
                    VectorList_02.Add(new Vector3(-66.73456f, -801.8816f, 44.22729f));
                    VectorList_01.Add(new Vector3(-51.92704f, -784.653f, 43.60859f));
                    VectorList_02.Add(new Vector3(7.609715f, -706.3086f, 45.97303f));
                    VectorList_01.Add(new Vector3(35.64244f, -715.6297f, 43.52236f));
                    VectorList_02.Add(new Vector3(110.041f, -637.1196f, 44.24202f));
                    VectorList_01.Add(new Vector3(96.78452f, -633.0899f, 43.6225f));
                    VectorList_02.Add(new Vector3(92.1524f, -741.7303f, 45.75599f));
                    VectorList_01.Add(new Vector3(58.26967f, -741.9115f, 43.56817f));
                    VectorList_02.Add(new Vector3(-97.36321f, -1014.177f, 27.27522f));
                    VectorList_01.Add(new Vector3(-97.16437f, -1020.443f, 26.74354f));
                    VectorList_02.Add(new Vector3(-177.6473f, -1158.428f, 23.81366f));
                    VectorList_01.Add(new Vector3(-176.7727f, -1149.438f, 22.50645f));
                    VectorList_02.Add(new Vector3(-286.7964f, -1060.97f, 27.20541f));
                    VectorList_01.Add(new Vector3(-277.104f, -1064.466f, 25.28302f));
                    VectorList_02.Add(new Vector3(-210.6174f, -1021.075f, 30.1405f));
                    VectorList_01.Add(new Vector3(-215.2424f, -1005.848f, 28.64495f));
                    VectorList_02.Add(new Vector3(-232.0792f, -915.1109f, 32.31084f));
                    VectorList_01.Add(new Vector3(-211.4211f, -921.6801f, 28.6483f));
                    VectorList_02.Add(new Vector3(-185.1166f, -788.0728f, 30.45403f));
                    VectorList_01.Add(new Vector3(-165.662f, -797.7302f, 31.10581f));
                    VectorList_02.Add(new Vector3(102.106f, -818.2697f, 31.34554f));
                    VectorList_01.Add(new Vector3(105.2083f, -807.3613f, 30.75293f));
                    VectorList_02.Add(new Vector3(5.52696f, -984.9729f, 29.3564f));
                    VectorList_01.Add(new Vector3(8.179337f, -971.4874f, 28.87354f));
                    VectorList_02.Add(new Vector3(43.79702f, -998.0366f, 29.33619f));
                    VectorList_01.Add(new Vector3(48.0556f, -993.5015f, 28.70993f));
                }
                else if (iArea == 5)//        "DTVINE"  
                {
                    VectorList_02.Add(new Vector3(58.5491f, 224.3279f, 109.3446f));
                    VectorList_01.Add(new Vector3(60.29726f, 236.8945f, 108.9385f));
                    VectorList_02.Add(new Vector3(285.691f, 200.2816f, 104.3727f));
                    VectorList_01.Add(new Vector3(291.9229f, 176.447f, 103.5972f));
                    VectorList_02.Add(new Vector3(339.964f, 179.0237f, 103.0279f));
                    VectorList_01.Add(new Vector3(333.5558f, 160.7843f, 102.7396f));
                    VectorList_02.Add(new Vector3(299.9526f, 135.8692f, 104.1121f));
                    VectorList_01.Add(new Vector3(304.2964f, 145.2028f, 103.1819f));
                    VectorList_02.Add(new Vector3(220.6625f, 304.7425f, 105.5735f));
                    VectorList_01.Add(new Vector3(232.6737f, 301.8434f, 105.0194f));
                    VectorList_02.Add(new Vector3(80.90257f, 273.1755f, 110.2102f));
                    VectorList_01.Add(new Vector3(80.73256f, 268.3891f, 109.1223f));
                    VectorList_02.Add(new Vector3(225.0676f, 336.988f, 105.6021f));
                    VectorList_01.Add(new Vector3(231.3641f, 346.6825f, 104.9356f));
                    VectorList_02.Add(new Vector3(511.6814f, 228.5841f, 104.7448f));
                    VectorList_01.Add(new Vector3(525.1632f, 253.7698f, 102.4465f));
                    VectorList_02.Add(new Vector3(554.7083f, 150.9967f, 99.23253f));
                    VectorList_01.Add(new Vector3(543.8952f, 150.5306f, 98.23286f));
                    VectorList_02.Add(new Vector3(538.4095f, 101.4291f, 96.52667f));
                    VectorList_01.Add(new Vector3(528.6589f, 105.3687f, 95.66783f));
                    VectorList_02.Add(new Vector3(619.7996f, 18.79947f, 87.9332f));
                    VectorList_01.Add(new Vector3(624.3416f, 30.71176f, 87.93405f));
                }
                else if (iArea == 6)//        "KOREAT" 
                {
                    VectorList_02.Add(new Vector3(-491.3341f, -705.1888f, 29.66495f));
                    VectorList_01.Add(new Vector3(-492.4659f, -668.1738f, 32.25398f));
                    VectorList_02.Add(new Vector3(-818.8256f, -575.5591f, 30.27625f));
                    VectorList_01.Add(new Vector3(-805.1441f, -569.605f, 29.59624f));
                    VectorList_02.Add(new Vector3(-1006.886f, -729.0814f, 21.52976f));
                    VectorList_01.Add(new Vector3(-1012.787f, -720.1366f, 20.16511f));
                    VectorList_02.Add(new Vector3(-796.8664f, -684.7003f, 29.54898f));
                    VectorList_01.Add(new Vector3(-800.4079f, -667.2416f, 27.86353f));
                    VectorList_02.Add(new Vector3(-668.2699f, -971.0567f, 22.34084f));
                    VectorList_01.Add(new Vector3(-670.9226f, -961.2521f, 20.42223f));
                    VectorList_02.Add(new Vector3(-667.4276f, -1105.683f, 14.68489f));
                    VectorList_01.Add(new Vector3(-677.4309f, -1101.269f, 13.99504f));
                    VectorList_02.Add(new Vector3(-699.7384f, -1032.83f, 16.10666f));
                    VectorList_01.Add(new Vector3(-689.7061f, -1054.854f, 14.72245f));
                    VectorList_02.Add(new Vector3(-759.088f, -1047.608f, 13.5029f));
                    VectorList_01.Add(new Vector3(-744.5236f, -1048.969f, 11.68449f));
                    VectorList_02.Add(new Vector3(-601.835f, -1127.903f, 22.32424f));
                    VectorList_01.Add(new Vector3(-589.35f, -1129.539f, 21.64803f));
                    VectorList_02.Add(new Vector3(-729.3005f, -879.8181f, 22.71092f));
                    VectorList_01.Add(new Vector3(-740.5681f, -876.4502f, 21.08265f));
                    VectorList_02.Add(new Vector3(-693.7856f, -810.1913f, 24.01492f));
                    VectorList_01.Add(new Vector3(-691.8843f, -826.7587f, 23.26679f));
                    VectorList_02.Add(new Vector3(-471.3071f, -865.2595f, 23.96403f));
                    VectorList_01.Add(new Vector3(-472.2751f, -872.899f, 23.29834f));
                    VectorList_02.Add(new Vector3(-598.7448f, -930.2391f, 23.86363f));
                    VectorList_01.Add(new Vector3(-603.0508f, -953.1522f, 21.49878f));
                    VectorList_02.Add(new Vector3(-546.7633f, -810.2938f, 30.7459f));
                    VectorList_01.Add(new Vector3(-549.5628f, -827.8044f, 27.73886f));
                    VectorList_02.Add(new Vector3(-580.7145f, -778.4678f, 25.01723f));
                    VectorList_01.Add(new Vector3(-616.8736f, -778.3973f, 24.68242f));
                }
                else if (iArea == 7)//        "VCANA"   
                {
                    VectorList_02.Add(new Vector3(-951.0064f, -905.6769f, 2.745484f));
                    VectorList_01.Add(new Vector3(-948.0278f, -898.9374f, 1.633701f));
                    VectorList_02.Add(new Vector3(-947.7943f, -927.8657f, 2.14531f));
                    VectorList_01.Add(new Vector3(-938.8552f, -926.405f, 1.61489f));
                    VectorList_02.Add(new Vector3(-927.522f, -949.3549f, 2.746102f));
                    VectorList_01.Add(new Vector3(-920.4854f, -950.0219f, 1.63327f));
                    VectorList_02.Add(new Vector3(-864.665f, -1101.799f, 6.447026f));
                    VectorList_01.Add(new Vector3(-852.7875f, -1096.924f, 1.632867f));
                    VectorList_02.Add(new Vector3(-1035.512f, -1227.947f, 6.346426f));
                    VectorList_01.Add(new Vector3(-1039.014f, -1234.404f, 5.340991f));
                    VectorList_02.Add(new Vector3(-1126.493f, -1172.118f, 2.357592f));
                    VectorList_01.Add(new Vector3(-1132.724f, -1174f, 1.654989f));
                    VectorList_02.Add(new Vector3(-1136.023f, -1153.578f, 2.744121f));
                    VectorList_01.Add(new Vector3(-1144.977f, -1154.373f, 2.274264f));
                    VectorList_02.Add(new Vector3(-1143.087f, -1144.126f, 2.853676f));
                    VectorList_01.Add(new Vector3(-1148.846f, -1145.358f, 2.308584f));
                    VectorList_02.Add(new Vector3(-1183.264f, -1064.341f, 2.150421f));
                    VectorList_01.Add(new Vector3(-1188.896f, -1065.672f, 1.620275f));
                    VectorList_02.Add(new Vector3(-1191.291f, -1054.983f, 2.150431f));
                    VectorList_01.Add(new Vector3(-1197.972f, -1056.369f, 1.621082f));
                    VectorList_02.Add(new Vector3(-1195.782f, -1036.116f, 2.167662f));
                    VectorList_01.Add(new Vector3(-1205.348f, -1040.543f, 1.62129f));
                    VectorList_02.Add(new Vector3(-1201.187f, -1032.25f, 2.150407f));
                    VectorList_01.Add(new Vector3(-1206.196f, -1032.939f, 1.620837f));
                    VectorList_02.Add(new Vector3(-1090.517f, -925.978f, 3.145119f));
                    VectorList_01.Add(new Vector3(-1095.53f, -918.2084f, 2.423995f));
                    VectorList_02.Add(new Vector3(-1031.229f, -902.9789f, 3.69277f));
                    VectorList_01.Add(new Vector3(-1036.207f, -898.7838f, 3.906092f));
                    VectorList_02.Add(new Vector3(-1022.78f, -896.4982f, 5.418818f));
                    VectorList_01.Add(new Vector3(-1024.35f, -889.9529f, 5.115498f));
                    VectorList_02.Add(new Vector3(-1116.821f, -895.3629f, 7.796868f));
                    VectorList_01.Add(new Vector3(-1104.145f, -913.7859f, 2.350959f));
                    VectorList_02.Add(new Vector3(-1151.271f, -913.3595f, 6.628776f));
                    VectorList_01.Add(new Vector3(-1139.727f, -927.0404f, 2.08931f));
                    VectorList_02.Add(new Vector3(-1179.832f, -929.8004f, 6.628771f));
                    VectorList_01.Add(new Vector3(-1174.866f, -945.9295f, 2.647262f));
                    VectorList_02.Add(new Vector3(-1075.694f, -1026.807f, 4.545152f));
                    VectorList_01.Add(new Vector3(-1068.656f, -1021.217f, 1.508651f));
                    VectorList_02.Add(new Vector3(-1108.508f, -1041.39f, 2.150356f));
                    VectorList_01.Add(new Vector3(-1107.058f, -1048.322f, 1.620899f));
                    VectorList_02.Add(new Vector3(-1122.273f, -1046.655f, 2.150357f));
                    VectorList_01.Add(new Vector3(-1121.254f, -1052.749f, 1.621226f));
                    VectorList_02.Add(new Vector3(-1127.787f, -1081.126f, 4.222689f));
                    VectorList_01.Add(new Vector3(-1133.471f, -1071.877f, 1.57613f));
                    VectorList_02.Add(new Vector3(-1114.697f, -1069.593f, 2.150359f));
                    VectorList_01.Add(new Vector3(-1122.547f, -1065.817f, 1.533568f));
                    VectorList_02.Add(new Vector3(-1068.539f, -1049.219f, 6.411661f));
                    VectorList_01.Add(new Vector3(-1071.924f, -1038.167f, 1.585658f));
                    VectorList_02.Add(new Vector3(-1022.088f, -1022.706f, 2.150359f));
                    VectorList_01.Add(new Vector3(-1024.648f, -1013.672f, 1.609797f));
                    VectorList_02.Add(new Vector3(-1008.787f, -1014.9f, 2.150308f));
                    VectorList_01.Add(new Vector3(-1010.491f, -1007.871f, 1.620196f));
                    VectorList_02.Add(new Vector3(-990.2632f, -975.8735f, 4.222694f));
                    VectorList_01.Add(new Vector3(-984.612f, -983.4828f, 1.519559f));
                    VectorList_02.Add(new Vector3(-1022.818f, -998.0176f, 2.150195f));
                    VectorList_01.Add(new Vector3(-1014.343f, -1000.667f, 1.580476f));
                    VectorList_02.Add(new Vector3(-1053.879f, -1006.539f, 2.150193f));
                    VectorList_01.Add(new Vector3(-1049.045f, -1018.238f, 1.620131f));
                    VectorList_02.Add(new Vector3(-1068.322f, -1163.15f, 2.745448f));
                    VectorList_01.Add(new Vector3(-1071.766f, -1158.873f, 1.581696f));
                    VectorList_02.Add(new Vector3(-1046.051f, -1159.626f, 2.158599f));
                    VectorList_01.Add(new Vector3(-1047.434f, -1150.759f, 1.629194f));
                    VectorList_02.Add(new Vector3(-1035.156f, -1129.51f, 2.158599f));
                    VectorList_01.Add(new Vector3(-1035.165f, -1136.228f, 1.53474f));
                    VectorList_02.Add(new Vector3(-1034.903f, -1147.1f, 2.158599f));
                    VectorList_01.Add(new Vector3(-1042.317f, -1143.031f, 1.560673f));
                    VectorList_02.Add(new Vector3(-1024.528f, -1139.903f, 2.745337f));
                    VectorList_01.Add(new Vector3(-1025.213f, -1134.372f, 1.653199f));
                    VectorList_02.Add(new Vector3(-942.9496f, -1075.458f, 2.745272f));
                    VectorList_01.Add(new Vector3(-937.7101f, -1079.082f, 1.564626f));
                    VectorList_02.Add(new Vector3(-952.4178f, -1077.698f, 2.671045f));
                    VectorList_01.Add(new Vector3(-949.9753f, -1082.455f, 1.620425f));
                    VectorList_02.Add(new Vector3(-948.5066f, -1107.555f, 2.171847f));
                    VectorList_01.Add(new Vector3(-952.9219f, -1093.12f, 1.620167f));
                    VectorList_02.Add(new Vector3(-960.0089f, -1109.859f, 2.150314f));
                    VectorList_01.Add(new Vector3(-962.6642f, -1101.267f, 1.620263f));
                    VectorList_02.Add(new Vector3(-976.8805f, -1092.348f, 4.22256f));
                    VectorList_01.Add(new Vector3(-970.9733f, -1099.311f, 1.592695f));
                    VectorList_02.Add(new Vector3(-991.6511f, -1103.455f, 2.150309f));
                    VectorList_01.Add(new Vector3(-983.785f, -1106.11f, 1.490934f));
                    VectorList_02.Add(new Vector3(-986.5675f, -1121.498f, 4.545396f));
                    VectorList_01.Add(new Vector3(-993.0151f, -1115.217f, 1.615117f));
                }
                else if (iArea == 8)//        "VESP"   
                {
                    VectorList_02.Add(new Vector3(-1247.026f, -1358.836f, 7.820425f));
                    VectorList_01.Add(new Vector3(-1239.632f, -1355.699f, 3.180847f));
                    VectorList_02.Add(new Vector3(-1272.103f, -1295.553f, 8.285895f));
                    VectorList_01.Add(new Vector3(-1258.842f, -1302.896f, 3.152466f));
                    VectorList_02.Add(new Vector3(-1237.916f, -1238.131f, 11.02771f));
                    VectorList_01.Add(new Vector3(-1251.62f, -1239.837f, 5.372354f));
                    VectorList_02.Add(new Vector3(-1271.541f, -1198.63f, 5.366247f));
                    VectorList_01.Add(new Vector3(-1270.787f, -1213.683f, 4.082492f));
                    VectorList_02.Add(new Vector3(-1300.529f, -1233.508f, 4.486339f));
                    VectorList_01.Add(new Vector3(-1294.273f, -1232.306f, 3.760854f));
                    VectorList_02.Add(new Vector3(-1286.419f, -1267.013f, 4.516672f));
                    VectorList_01.Add(new Vector3(-1280.713f, -1274.322f, 3.15608f));
                }
                else if (iArea == 9)//        "BEACH"  
                {
                    VectorList_02.Add(new Vector3(-1418.114f, -1021.361f, 4.927687f));
                    VectorList_01.Add(new Vector3(-1397.046f, -1028.397f, 3.637372f));
                    VectorList_02.Add(new Vector3(-1348.222f, -1081.693f, 6.938175f));
                    VectorList_01.Add(new Vector3(-1329.58f, -1094.18f, 6.160664f));
                    VectorList_02.Add(new Vector3(-1347.625f, -1214.454f, 5.944139f));
                    VectorList_01.Add(new Vector3(-1349.045f, -1201.545f, 3.703147f));
                    VectorList_02.Add(new Vector3(-1182.977f, -1773.753f, 3.908463f));
                    VectorList_01.Add(new Vector3(-1175.066f, -1771.921f, 3.109406f));
                    VectorList_02.Add(new Vector3(-1155.814f, -1574.51f, 8.345077f));
                    VectorList_01.Add(new Vector3(-1149.69f, -1583.255f, 3.570674f));
                    VectorList_02.Add(new Vector3(-1174.325f, -1598.715f, 4.373224f));
                    VectorList_01.Add(new Vector3(-1155.435f, -1588.295f, 3.608639f));
                    VectorList_02.Add(new Vector3(-1213.075f, -1531.63f, 4.283716f));
                    VectorList_01.Add(new Vector3(-1192.247f, -1527.082f, 3.59797f));
                    VectorList_02.Add(new Vector3(-1226.105f, -1439.336f, 4.336521f));
                    VectorList_01.Add(new Vector3(-1207.356f, -1438.97f, 3.637824f));
                    VectorList_02.Add(new Vector3(-1301.149f, -1387.367f, 4.482184f));
                    VectorList_01.Add(new Vector3(-1285.8f, -1393.937f, 3.718754f));
                }
                else if (iArea == 10)//        "DELBE"   
                {
                    VectorList_02.Add(new Vector3(-1666.039f, -978.4476f, 8.159396f));
                    VectorList_01.Add(new Vector3(-1647.855f, -950.4069f, 7.125754f));
                    VectorList_02.Add(new Vector3(-1519.308f, -893.8687f, 13.68465f));
                    VectorList_01.Add(new Vector3(-1518.693f, -880.8948f, 9.37102f));
                    VectorList_02.Add(new Vector3(-1605.442f, -1001.208f, 13.01739f));
                    VectorList_01.Add(new Vector3(-1606.668f, -1012.511f, 12.27762f));
                    VectorList_02.Add(new Vector3(-1558.287f, -968.8815f, 17.41216f));
                    VectorList_01.Add(new Vector3(-1554.237f, -982.1717f, 12.2773f));
                    VectorList_02.Add(new Vector3(-1608.203f, -1073.929f, 13.01849f));
                    VectorList_01.Add(new Vector3(-1600.424f, -1043.029f, 12.28701f));
                }
                else if (iArea == 11)//        "DELPE" MyZone 0)//        "SanAnd"  
                {
                    VectorList_02.Add(new Vector3(-1371.109f, -685.431f, 24.98824f));
                    VectorList_01.Add(new Vector3(-1369.095f, -693.772f, 24.12055f));
                    VectorList_02.Add(new Vector3(-1285.63f, -566.7027f, 31.7124f));
                    VectorList_01.Add(new Vector3(-1276.193f, -555.6957f, 29.53902f));
                    VectorList_02.Add(new Vector3(-1388.62f, -586.6864f, 30.21924f));
                    VectorList_01.Add(new Vector3(-1393.777f, -581.3997f, 29.44041f));
                    VectorList_02.Add(new Vector3(-1540.682f, -454.5637f, 40.51902f));
                    VectorList_01.Add(new Vector3(-1533.505f, -441.2186f, 34.70186f));
                    VectorList_02.Add(new Vector3(-1558.364f, -417.0175f, 38.09856f));
                    VectorList_01.Add(new Vector3(-1568.341f, -421.9239f, 37.19434f));
                    VectorList_02.Add(new Vector3(-1697.246f, -422.2608f, 46.02833f));
                    VectorList_01.Add(new Vector3(-1710.424f, -411.8491f, 44.21511f));
                    VectorList_02.Add(new Vector3(-1710.878f, -494.3299f, 41.61913f));
                    VectorList_01.Add(new Vector3(-1715.123f, -502.8709f, 37.30872f));
                    VectorList_02.Add(new Vector3(-1662.496f, -532.7106f, 36.02411f));
                    VectorList_01.Add(new Vector3(-1667.62f, -542.1003f, 34.23432f));
                    VectorList_02.Add(new Vector3(-1459.068f, -659.1591f, 33.38121f));
                    VectorList_01.Add(new Vector3(-1465.437f, -654.7037f, 28.76304f));
                    VectorList_02.Add(new Vector3(-1456.073f, -648.6187f, 33.38124f));
                    VectorList_01.Add(new Vector3(-1465.565f, -654.2465f, 28.85791f));
                    VectorList_02.Add(new Vector3(-1472.997f, -646.3132f, 33.3812f));
                    VectorList_01.Add(new Vector3(-1465.436f, -654.7052f, 28.76287f));
                    VectorList_02.Add(new Vector3(-1481.831f, -652.4942f, 29.58295f));
                    VectorList_01.Add(new Vector3(-1465.436f, -654.7052f, 28.76331f));
                    VectorList_02.Add(new Vector3(-1467.847f, -665.3153f, 29.58303f));
                    VectorList_01.Add(new Vector3(-1465.436f, -654.7053f, 28.76324f));
                    VectorList_02.Add(new Vector3(-1453.239f, -653.4661f, 29.5829f));
                    VectorList_01.Add(new Vector3(-1465.436f, -654.7053f, 28.76223f));
                    VectorList_02.Add(new Vector3(-1356.744f, -791.3961f, 20.24218f));
                    VectorList_01.Add(new Vector3(-1362.593f, -800.9634f, 18.49312f));
                    VectorList_02.Add(new Vector3(-1279.467f, -876.9868f, 11.93032f));
                    VectorList_01.Add(new Vector3(-1286.797f, -883.9025f, 10.54494f));
                    VectorList_02.Add(new Vector3(-1329.545f, -938.4286f, 12.35571f));
                    VectorList_01.Add(new Vector3(-1318.439f, -923.1606f, 10.46153f));
                }
                else if (iArea == 12)//        "MOVIE"    "MORN"     
                {
                    VectorList_02.Add(new Vector3(-1050.773f, -520.3962f, 36.58971f));
                    VectorList_01.Add(new Vector3(-1048.93f, -512.7054f, 35.2984f));
                    VectorList_02.Add(new Vector3(-1012.066f, -480.3816f, 39.97066f));
                    VectorList_01.Add(new Vector3(-1026.763f, -492.9765f, 36.2079f));
                    VectorList_02.Add(new Vector3(-1460.172f, -168.6274f, 48.81977f));
                    VectorList_01.Add(new Vector3(-1446.605f, -149.2165f, 48.38486f));
                    VectorList_02.Add(new Vector3(-1369.502f, -169.7315f, 47.48642f));
                    VectorList_01.Add(new Vector3(-1393.748f, -156.9173f, 46.6925f));
                    VectorList_02.Add(new Vector3(-1423.839f, -215.8649f, 46.50041f));
                    VectorList_01.Add(new Vector3(-1420.433f, -190.4328f, 46.38483f));
                    VectorList_02.Add(new Vector3(-1376.746f, -285.9489f, 43.46873f));
                    VectorList_01.Add(new Vector3(-1390.941f, -288.5725f, 42.58349f));
                    VectorList_02.Add(new Vector3(-1472.6f, -329.9493f, 44.81713f));
                    VectorList_01.Add(new Vector3(-1450.284f, -334.9542f, 43.68563f));
                    VectorList_02.Add(new Vector3(-1532.739f, -275.296f, 49.71008f));
                    VectorList_01.Add(new Vector3(-1524.951f, -279.0801f, 48.89013f));
                }
                else if (iArea == 13)//        "ROCKF"       "golf"  
                {
                    VectorList_02.Add(new Vector3(-1354.29f, -140.058f, 49.57456f));
                    VectorList_01.Add(new Vector3(-1357.142f, -147.6312f, 47.79842f));
                    VectorList_02.Add(new Vector3(-1026.242f, 315.9842f, 66.88311f));
                    VectorList_01.Add(new Vector3(-1041.429f, 321.4409f, 66.07804f));
                    VectorList_02.Add(new Vector3(-1026.074f, 360.7628f, 71.36153f));
                    VectorList_01.Add(new Vector3(-1015.007f, 358.0407f, 69.87968f));
                    VectorList_02.Add(new Vector3(-892.2721f, 352.8219f, 85.47115f));
                    VectorList_01.Add(new Vector3(-887.5854f, 369.4475f, 84.2992f));
                    VectorList_02.Add(new Vector3(-875.8641f, 315.7621f, 84.15994f));
                    VectorList_01.Add(new Vector3(-870.7113f, 302.4772f, 83.24094f));
                    VectorList_02.Add(new Vector3(-819.4623f, 268.2599f, 86.38909f));
                    VectorList_01.Add(new Vector3(-825.0667f, 272.9646f, 85.54727f));
                    VectorList_02.Add(new Vector3(-948.934f, 320.3693f, 71.35191f));
                    VectorList_01.Add(new Vector3(-947.6569f, 308.0075f, 70.40042f));
                    VectorList_02.Add(new Vector3(-1037.066f, 207.9634f, 64.56448f));
                    VectorList_01.Add(new Vector3(-1046.699f, 221.1928f, 63.02604f));
                    VectorList_02.Add(new Vector3(-949.5158f, 196.6293f, 67.39026f));
                    VectorList_01.Add(new Vector3(-953.416f, 187.3162f, 65.85413f));
                    VectorList_02.Add(new Vector3(-916.7498f, 203.2301f, 69.43185f));
                    VectorList_01.Add(new Vector3(-910.2756f, 188.7189f, 68.70294f));
                    VectorList_02.Add(new Vector3(-993.275f, 162.2733f, 62.14541f));
                    VectorList_01.Add(new Vector3(-989.3348f, 144.4876f, 59.88694f));
                    VectorList_02.Add(new Vector3(-971.3362f, 122.028f, 57.04857f));
                    VectorList_01.Add(new Vector3(-960.4633f, 111.0401f, 55.67738f));
                    VectorList_02.Add(new Vector3(-923.2835f, 124.1776f, 55.53205f));
                    VectorList_01.Add(new Vector3(-918.8908f, 110.3132f, 54.57633f));
                    VectorList_02.Add(new Vector3(-934.5027f, 3.251942f, 47.74643f));
                    VectorList_01.Add(new Vector3(-925.3032f, 10.76216f, 46.97826f));
                    VectorList_02.Add(new Vector3(-896.5391f, -4.971326f, 43.79887f));
                    VectorList_01.Add(new Vector3(-886.3248f, -9.607732f, 42.53655f));
                    VectorList_02.Add(new Vector3(-841.3217f, -24.86731f, 40.39839f));
                    VectorList_01.Add(new Vector3(-830.4749f, -33.85237f, 37.74441f));
                    VectorList_02.Add(new Vector3(-766.9527f, -23.84942f, 41.08041f));
                    VectorList_01.Add(new Vector3(-758.5886f, -36.68955f, 36.94484f));
                    VectorList_02.Add(new Vector3(-247.7577f, -329.3505f, 27.60481f));
                    VectorList_01.Add(new Vector3(-256.4178f, -337.0367f, 29.11594f));
                    VectorList_02.Add(new Vector3(-481.2264f, -401.667f, 34.5466f));
                    VectorList_01.Add(new Vector3(-483.3846f, -386.6872f, 33.41516f));
                    VectorList_02.Add(new Vector3(-570.5855f, -395.0763f, 35.05656f));
                    VectorList_01.Add(new Vector3(-572.5616f, -383.1132f, 34.1718f));
                    VectorList_02.Add(new Vector3(-554.2025f, -329.9634f, 35.1568f));
                    VectorList_01.Add(new Vector3(-547.9968f, -325.5482f, 34.29967f));
                    VectorList_02.Add(new Vector3(-561.881f, -131.3118f, 38.43238f));
                    VectorList_01.Add(new Vector3(-553.8245f, -147.4621f, 37.40226f));
                    VectorList_02.Add(new Vector3(-730.188f, -130.8872f, 38.07042f));
                    VectorList_01.Add(new Vector3(-738.5037f, -131.5499f, 36.61028f));
                    VectorList_02.Add(new Vector3(-723.9586f, -280.9983f, 37.1396f));
                    VectorList_01.Add(new Vector3(-729.4451f, -285.4275f, 36.20818f));
                    VectorList_02.Add(new Vector3(-759.3776f, -209.7389f, 37.27201f));
                    VectorList_01.Add(new Vector3(-767.3508f, -207.0348f, 36.53815f));
                    VectorList_02.Add(new Vector3(-801.4948f, -177.8358f, 38.13674f));
                    VectorList_01.Add(new Vector3(-792.1018f, -177.4919f, 36.5426f));
                    VectorList_02.Add(new Vector3(-845.2264f, -123.8861f, 34.92541f));
                    VectorList_01.Add(new Vector3(-841.033f, -139.4222f, 36.93386f));
                    VectorList_02.Add(new Vector3(-814.8182f, -202.0733f, 37.48641f));
                    VectorList_01.Add(new Vector3(-824.1635f, -202.3184f, 36.6447f));
                    VectorList_02.Add(new Vector3(-1044.833f, -231.1025f, 39.01435f));
                    VectorList_01.Add(new Vector3(-1051.043f, -216.2052f, 37.00772f));
                    VectorList_02.Add(new Vector3(-733.4784f, -318.2313f, 36.5607f));
                    VectorList_01.Add(new Vector3(-742.6403f, -325.5553f, 35.38481f));
                    VectorList_02.Add(new Vector3(-769.0097f, -355.9413f, 37.33335f));
                    VectorList_01.Add(new Vector3(-766.2805f, -343.241f, 35.31346f));
                    VectorList_02.Add(new Vector3(-720.5628f, -411.4023f, 34.98101f));
                    VectorList_01.Add(new Vector3(-732.4562f, -411.7837f, 34.55416f));
                    VectorList_02.Add(new Vector3(-783.394f, -391.1441f, 37.33352f));
                    VectorList_01.Add(new Vector3(-788.0407f, -402.7892f, 35.16359f));
                    VectorList_02.Add(new Vector3(-1026.703f, -418.8185f, 39.61594f));
                    VectorList_01.Add(new Vector3(-1048.815f, -391.3591f, 36.82092f));
                    VectorList_02.Add(new Vector3(-1095.178f, -325.564f, 37.82364f));
                    VectorList_01.Add(new Vector3(-1095.845f, -317.3362f, 36.92531f));
                    VectorList_02.Add(new Vector3(-1164.338f, -348.5981f, 36.63751f));
                    VectorList_01.Add(new Vector3(-1168.575f, -341.5084f, 36.32198f));
                    VectorList_02.Add(new Vector3(-1232.031f, -143.9317f, 40.40824f));
                    VectorList_01.Add(new Vector3(-1207.98f, -129.8569f, 40.29033f));

                    VectorList_02.Add(new Vector3(-1189.34f, 292.0604f, 69.89325f));
                    VectorList_01.Add(new Vector3(-1183.382f, 286.2881f, 68.78954f));
                    VectorList_02.Add(new Vector3(-1146.913f, 381.85f, 71.31322f));
                    VectorList_01.Add(new Vector3(-1131.19f, 382.7086f, 70.02845f));
                    VectorList_02.Add(new Vector3(-1274.038f, 315.7936f, 65.51176f));
                    VectorList_01.Add(new Vector3(-1286.176f, 295.006f, 64.15466f));
                    VectorList_02.Add(new Vector3(-1366.692f, 56.64131f, 54.09836f));
                    VectorList_01.Add(new Vector3(-1379.541f, 55.16712f, 52.9743f));
                }
                else if (iArea == 14)//        "BURTON"  
                {
                    VectorList_02.Add(new Vector3(-137.9203f, -256.7903f, 43.59498f));
                    VectorList_01.Add(new Vector3(-130.958f, -259.2365f, 42.49442f));
                    VectorList_02.Add(new Vector3(-431.2309f, -24.3851f, 46.22859f));
                    VectorList_01.Add(new Vector3(-424.1801f, -25.54552f, 45.52f));
                    VectorList_02.Add(new Vector3(-490.0871f, 27.91375f, 46.29721f));
                    VectorList_01.Add(new Vector3(-487.0178f, 21.20043f, 44.28422f));
                    VectorList_02.Add(new Vector3(-509.5037f, -22.15906f, 45.60895f));
                    VectorList_01.Add(new Vector3(-531.4308f, -24.39477f, 43.63002f));
                    VectorList_02.Add(new Vector3(-433.5324f, -159.0408f, 37.82975f));
                    VectorList_01.Add(new Vector3(-443.5297f, -167.6072f, 36.80051f));
                    VectorList_02.Add(new Vector3(-310.7526f, -278.0241f, 31.71694f));
                    VectorList_01.Add(new Vector3(-294.5354f, -278.9979f, 30.3766f));
                }
                else if (iArea == 15)//        "ALTA"
                {
                    VectorList_02.Add(new Vector3(337.1231f, -224.7314f, 58.01926f));
                    VectorList_01.Add(new Vector3(323.8887f, -216.8452f, 53.70169f));
                    VectorList_02.Add(new Vector3(337.1165f, -224.7166f, 54.22176f));
                    VectorList_01.Add(new Vector3(323.8885f, -216.8456f, 53.70388f));
                    VectorList_02.Add(new Vector3(340.9855f, -214.898f, 54.22177f));
                    VectorList_01.Add(new Vector3(323.8886f, -216.8452f, 53.70319f));
                    VectorList_02.Add(new Vector3(311.2467f, -203.8005f, 58.01926f));
                    VectorList_01.Add(new Vector3(323.8888f, -216.8456f, 53.70368f));
                    VectorList_02.Add(new Vector3(310.719f, -217.6171f, 58.01925f));
                    VectorList_01.Add(new Vector3(323.8882f, -216.8456f, 53.70445f));
                    VectorList_02.Add(new Vector3(307.2587f, -216.3905f, 54.22177f));
                    VectorList_01.Add(new Vector3(323.8895f, -216.8458f, 53.70464f));
                    VectorList_02.Add(new Vector3(311.9126f, -204.0758f, 54.22183f));
                    VectorList_01.Add(new Vector3(323.8886f, -216.8453f, 53.70185f));
                    VectorList_02.Add(new Vector3(140.2924f, -286.6419f, 50.44962f));
                    VectorList_01.Add(new Vector3(128.9395f, -307.2529f, 44.80704f));
                    VectorList_02.Add(new Vector3(85.26392f, -268.0471f, 47.79923f));
                    VectorList_01.Add(new Vector3(81.0944f, -291.2837f, 46.27134f));
                    VectorList_02.Add(new Vector3(1.905731f, -240.8442f, 51.86057f));
                    VectorList_01.Add(new Vector3(6.666971f, -263.2705f, 46.87637f));
                    VectorList_02.Add(new Vector3(141.3129f, -379.8523f, 43.25697f));
                    VectorList_01.Add(new Vector3(133.2358f, -376.0379f, 42.86023f));
                    VectorList_02.Add(new Vector3(-52.99578f, -397.6029f, 38.12812f));
                    VectorList_01.Add(new Vector3(-30.21463f, -405.3861f, 39.05763f));
                    VectorList_02.Add(new Vector3(-30.1248f, -347.0221f, 46.32362f));
                    VectorList_01.Add(new Vector3(-14.9734f, -356.9637f, 40.29393f));
                }
                else if (iArea == 16)//        "HAWICK"  
                {
                    VectorList_02.Add(new Vector3(271.4294f, -208.6099f, 61.57072f));
                    VectorList_01.Add(new Vector3(274.9666f, -187.8761f, 61.16962f));
                    VectorList_02.Add(new Vector3(220.3426f, -92.2359f, 69.61214f));
                    VectorList_01.Add(new Vector3(215.4621f, -65.28774f, 68.67736f));
                    VectorList_02.Add(new Vector3(207.7987f, -190.7932f, 54.39412f));
                    VectorList_01.Add(new Vector3(205.085f, -199.0758f, 53.51561f));
                    VectorList_02.Add(new Vector3(26.37074f, -168.5097f, 55.57018f));
                    VectorList_01.Add(new Vector3(24.60649f, -156.8087f, 55.36599f));
                    VectorList_02.Add(new Vector3(-13.98569f, -110.5151f, 56.83979f));
                    VectorList_01.Add(new Vector3(-15.4755f, -117.5756f, 56.37433f));
                }
                else //        "WVINE" 
                {
                    VectorList_02.Add(new Vector3(-479.2487f, 218.3924f, 83.69603f));
                    VectorList_01.Add(new Vector3(-480.8465f, 224.3893f, 82.71607f));
                    VectorList_02.Add(new Vector3(-569.7756f, 169.5958f, 66.56587f));
                    VectorList_01.Add(new Vector3(-551.2469f, 168.4349f, 66.6234f));
                    VectorList_02.Add(new Vector3(-511.6719f, 108.9022f, 63.79959f));
                    VectorList_01.Add(new Vector3(-512.4089f, 123.2785f, 62.79382f));
                    VectorList_02.Add(new Vector3(-392.7119f, 151.4118f, 65.52414f));
                    VectorList_01.Add(new Vector3(-395.6694f, 132.4798f, 65.08716f));
                    VectorList_02.Add(new Vector3(-208.1687f, 159.859f, 74.05302f));
                    VectorList_01.Add(new Vector3(-220.4445f, 162.1267f, 72.90894f));
                    VectorList_02.Add(new Vector3(-149.0777f, 121.9784f, 70.22536f));
                    VectorList_01.Add(new Vector3(-164.8017f, 106.0881f, 69.87028f));
                    VectorList_02.Add(new Vector3(-329.4156f, 97.45921f, 67.05153f));
                    VectorList_01.Add(new Vector3(-321.8814f, 115.0459f, 66.84548f));
                    VectorList_02.Add(new Vector3(-355.3001f, 94.91445f, 70.5202f));
                    VectorList_01.Add(new Vector3(-346.1362f, 108.3023f, 66.27882f));
                    VectorList_02.Add(new Vector3(-355.2776f, 15.46274f, 47.85473f));
                    VectorList_01.Add(new Vector3(-356.3561f, 33.08219f, 47.41592f));
                    VectorList_02.Add(new Vector3(-314.8544f, 83.60764f, 71.66293f));
                    VectorList_01.Add(new Vector3(-315.9304f, 72.05852f, 65.04311f));
                    VectorList_02.Add(new Vector3(-282.1409f, 12.98766f, 54.75249f));
                    VectorList_01.Add(new Vector3(-269.334f, 27.04459f, 54.35106f));
                    VectorList_02.Add(new Vector3(-219.1817f, -3.427589f, 52.36488f));
                    VectorList_01.Add(new Vector3(-225.7999f, 4.687866f, 52.03117f));
                    VectorList_02.Add(new Vector3(-161.3873f, -3.951782f, 62.46285f));
                    VectorList_01.Add(new Vector3(-152.9026f, -1.673734f, 57.37193f));
                    VectorList_02.Add(new Vector3(-117.107f, -37.25715f, 62.19587f));
                    VectorList_01.Add(new Vector3(-129.4191f, -26.90284f, 57.75457f));
                    VectorList_02.Add(new Vector3(-77.88377f, 7.237984f, 70.25868f));
                    VectorList_01.Add(new Vector3(-71.19195f, -3.913839f, 69.62611f));
                    VectorList_02.Add(new Vector3(-0.08573192f, -15.04306f, 71.10311f));
                    VectorList_01.Add(new Vector3(0.01606551f, 5.507839f, 70.46945f));
                }
            }
            else if (Local == 3)
            {
                if (bRandom)
                    iArea = RandInt(1, 4);

                if (iArea == 1)//        "RICHM" && MyZone 0)//        "RGLEN" 
                {
                    VectorList_02.Add(new Vector3(-1878.568f, 214.5692f, 84.43929f));
                    VectorList_01.Add(new Vector3(-1873.862f, 193.8993f, 83.7653f));
                    VectorList_02.Add(new Vector3(-1892.024f, 235.6097f, 86.25183f));
                    VectorList_01.Add(new Vector3(-1905.712f, 242.3712f, 85.72104f));
                    VectorList_02.Add(new Vector3(-1921.954f, 308.4248f, 89.07661f));
                    VectorList_01.Add(new Vector3(-1928.648f, 297.501f, 88.54451f));
                    VectorList_02.Add(new Vector3(-1930.378f, 369.2367f, 93.78211f));
                    VectorList_01.Add(new Vector3(-1938.424f, 360.773f, 93.05482f));
                    VectorList_02.Add(new Vector3(-1941.7f, 386.0603f, 96.50709f));
                    VectorList_01.Add(new Vector3(-1950.128f, 401.4925f, 95.74673f));
                    VectorList_02.Add(new Vector3(-1943.1f, 449.7197f, 102.9281f));
                    VectorList_01.Add(new Vector3(-1955.434f, 447.6809f, 100.4078f));
                    VectorList_02.Add(new Vector3(-1939.811f, 534.4824f, 114.8257f));
                    VectorList_01.Add(new Vector3(-1941.551f, 552.8403f, 114.2949f));
                    VectorList_02.Add(new Vector3(-1929.164f, 595.4424f, 122.2849f));
                    VectorList_01.Add(new Vector3(-1944.052f, 582.5765f, 118.1756f));
                    VectorList_02.Add(new Vector3(-1897.366f, 642.0092f, 130.2086f));
                    VectorList_01.Add(new Vector3(-1888.728f, 626.4341f, 129.4718f));
                    VectorList_02.Add(new Vector3(-1967.342f, 649.6359f, 122.5363f));
                    VectorList_01.Add(new Vector3(-1973.95f, 622.8629f, 121.8698f));
                    VectorList_02.Add(new Vector3(-2000.012f, 613.8847f, 117.9034f));
                    VectorList_01.Add(new Vector3(-1987.878f, 603.7962f, 117.3801f));
                    VectorList_02.Add(new Vector3(-2024.877f, 478.917f, 107.1619f));
                    VectorList_01.Add(new Vector3(-2011.932f, 484.1914f, 106.5138f));
                    VectorList_02.Add(new Vector3(-2022.839f, 455.3822f, 105.753f));
                    VectorList_01.Add(new Vector3(-2008.189f, 454.4774f, 102.1402f));
                    VectorList_02.Add(new Vector3(-2011.445f, 350.2057f, 94.4791f));
                    VectorList_01.Add(new Vector3(-2000.829f, 367.4298f, 93.97578f));
                    VectorList_02.Add(new Vector3(-2009.404f, 289.1414f, 91.97834f));
                    VectorList_01.Add(new Vector3(-1992.321f, 294.4626f, 91.25754f));
                    VectorList_02.Add(new Vector3(-1970.168f, 246.2813f, 87.81215f));
                    VectorList_01.Add(new Vector3(-1975.152f, 260.3556f, 86.71169f));
                    VectorList_02.Add(new Vector3(-1960.694f, 212.0906f, 86.81219f));
                    VectorList_01.Add(new Vector3(-1955.168f, 214.5622f, 85.54868f));
                    VectorList_02.Add(new Vector3(-1931.561f, 162.9542f, 84.65261f));
                    VectorList_01.Add(new Vector3(-1934.191f, 184.5886f, 84.06035f));
                    VectorList_02.Add(new Vector3(-1906.881f, 141.3684f, 81.64087f));
                    VectorList_01.Add(new Vector3(-1892.904f, 136.0754f, 80.95974f));
                }
                else if (iArea == 2)//        "PBLUFF" 
                {
                    VectorList_02.Add(new Vector3(-3023.749f, 80.59142f, 11.60812f));
                    VectorList_01.Add(new Vector3(-3017.372f, 88.69462f, 11.07981f));
                    VectorList_02.Add(new Vector3(-2189.858f, -399.3562f, 13.30098f));
                    VectorList_01.Add(new Vector3(-2181.863f, -409.2686f, 12.5398f));
                    VectorList_02.Add(new Vector3(-2073.705f, -126.1924f, 35.80942f));
                    VectorList_01.Add(new Vector3(-2038.215f, -136.9038f, 26.9034f));
                    VectorList_02.Add(new Vector3(-1857.052f, -348.5349f, 49.83775f));
                    VectorList_01.Add(new Vector3(-1861.999f, -353.8299f, 48.71446f));
                    VectorList_02.Add(new Vector3(-1684.828f, -292.6348f, 51.8908f));
                    VectorList_01.Add(new Vector3(-1685.22f, -300.6436f, 51.28144f));
                    VectorList_02.Add(new Vector3(-2295.177f, 363.814f, 174.6016f));
                    VectorList_01.Add(new Vector3(-2296.555f, 376.1144f, 173.9368f));
                }
                else if (iArea == 3)//        "BHAMCA" && MyZone 0)//        "BANHAMC"  && MyZone 0)//        "CHU" 
                {
                    VectorList_02.Add(new Vector3(-3110.801f, 750.4182f, 24.70186f));
                    VectorList_01.Add(new Vector3(-3097.423f, 743.9031f, 20.48927f));
                    VectorList_02.Add(new Vector3(-3107.09f, 718.6204f, 20.633f));
                    VectorList_01.Add(new Vector3(-3100.444f, 716.2214f, 19.83283f));
                    VectorList_02.Add(new Vector3(-3086.756f, 664.8164f, 11.58845f));
                    VectorList_01.Add(new Vector3(-3072.689f, 658.2528f, 10.44048f));
                    VectorList_02.Add(new Vector3(-3036.034f, 574.8292f, 7.823583f));
                    VectorList_01.Add(new Vector3(-3026.632f, 573.8799f, 7.016073f));
                    VectorList_02.Add(new Vector3(-3036.793f, 558.8264f, 7.507683f));
                    VectorList_01.Add(new Vector3(-3030.468f, 556.2008f, 6.872155f));
                    VectorList_02.Add(new Vector3(-3039.289f, 492.8857f, 6.772714f));
                    VectorList_01.Add(new Vector3(-3031.783f, 498.2742f, 6.175517f));
                    VectorList_02.Add(new Vector3(-3047.145f, 485.2661f, 6.779647f));
                    VectorList_01.Add(new Vector3(-3038.043f, 477.445f, 6.115459f));
                    VectorList_02.Add(new Vector3(-3067.425f, 439.884f, 6.360351f));
                    VectorList_01.Add(new Vector3(-3052.8f, 441.2135f, 5.709949f));
                    VectorList_02.Add(new Vector3(-3088.146f, 391.8495f, 11.44504f));
                    VectorList_01.Add(new Vector3(-3072.913f, 393.2456f, 6.335815f));
                    VectorList_02.Add(new Vector3(-3091.191f, 378.8426f, 7.112263f));
                    VectorList_01.Add(new Vector3(-3077.573f, 371.858f, 6.424158f));
                    VectorList_02.Add(new Vector3(-3092.814f, 349.5691f, 7.532001f));
                    VectorList_01.Add(new Vector3(-3088.889f, 341.8463f, 6.776845f));
                    VectorList_02.Add(new Vector3(-3101.632f, 332.9786f, 7.493346f));
                    VectorList_01.Add(new Vector3(-3089.019f, 324.63f, 6.851557f));
                    VectorList_02.Add(new Vector3(-3106.015f, 313.4806f, 8.38104f));
                    VectorList_01.Add(new Vector3(-3095.504f, 304.6574f, 7.801707f));
                    VectorList_02.Add(new Vector3(-3109.53f, 301.7948f, 8.381039f));
                    VectorList_01.Add(new Vector3(-3095.505f, 304.6575f, 7.800583f));
                    VectorList_02.Add(new Vector3(-3111.452f, 296.164f, 8.972106f));
                    VectorList_01.Add(new Vector3(-3100.482f, 289.2973f, 8.56084f));
                    VectorList_02.Add(new Vector3(-3114.491f, 253.7804f, 12.492f));
                    VectorList_01.Add(new Vector3(-3101.362f, 251.1279f, 11.42317f));
                    VectorList_02.Add(new Vector3(-3095.399f, 217.7303f, 14.58094f));
                    VectorList_01.Add(new Vector3(-3083.608f, 223.2508f, 13.3014f));
                    VectorList_02.Add(new Vector3(-2972.425f, 599.5049f, 24.4398f));
                    VectorList_01.Add(new Vector3(-2981.605f, 604.1546f, 19.10135f));
                    VectorList_02.Add(new Vector3(-2971.332f, 635.1398f, 25.7979f));
                    VectorList_01.Add(new Vector3(-2981.608f, 653.7446f, 24.52167f));
                    VectorList_02.Add(new Vector3(-2991.647f, 677.6633f, 25.03615f));
                    VectorList_01.Add(new Vector3(-3001.683f, 688.0192f, 24.008f));
                    VectorList_02.Add(new Vector3(-2989.949f, 729.2177f, 28.49687f));
                    VectorList_01.Add(new Vector3(-2995.868f, 721.2349f, 27.84494f));
                    VectorList_02.Add(new Vector3(-3021.26f, 751.2949f, 27.5876f));
                    VectorList_01.Add(new Vector3(-3017.81f, 738.942f, 27.08741f));
                    VectorList_02.Add(new Vector3(-3226.107f, 911.2578f, 13.99327f));
                    VectorList_01.Add(new Vector3(-3216.154f, 914.3242f, 13.51317f));
                    VectorList_02.Add(new Vector3(-3238.567f, 923.0718f, 13.95989f));
                    VectorList_01.Add(new Vector3(-3224.866f, 927.2133f, 13.43289f));
                    VectorList_02.Add(new Vector3(-3238.777f, 929.2819f, 17.14999f));
                    VectorList_01.Add(new Vector3(-3230.473f, 938.7974f, 13.24235f));
                    VectorList_02.Add(new Vector3(-3237.766f, 952.3402f, 13.12962f));
                    VectorList_01.Add(new Vector3(-3233.314f, 948.5009f, 12.81998f));
                    VectorList_02.Add(new Vector3(-3251.234f, 1043.102f, 11.75771f));
                    VectorList_01.Add(new Vector3(-3236.66f, 1037.344f, 11.17605f));
                    VectorList_02.Add(new Vector3(-3245.689f, 1062.886f, 11.14619f));
                    VectorList_01.Add(new Vector3(-3233.137f, 1057.34f, 10.66858f));
                    VectorList_02.Add(new Vector3(-3235.27f, 1076.041f, 11.03331f));
                    VectorList_01.Add(new Vector3(-3229.212f, 1071.461f, 10.40678f));
                    VectorList_02.Add(new Vector3(-3231.806f, 1081.586f, 10.8089f));
                    VectorList_01.Add(new Vector3(-3226.823f, 1086.945f, 10.19171f));
                    VectorList_02.Add(new Vector3(-3228.666f, 1092.662f, 10.77182f));
                    VectorList_01.Add(new Vector3(-3226.825f, 1086.943f, 10.17782f));
                    VectorList_02.Add(new Vector3(-3224.834f, 1113.216f, 10.57764f));
                    VectorList_01.Add(new Vector3(-3218.955f, 1105.772f, 9.89898f));
                    VectorList_02.Add(new Vector3(-3213.26f, 1134.408f, 9.895407f));
                    VectorList_01.Add(new Vector3(-3204.593f, 1136.673f, 9.370088f));
                    VectorList_02.Add(new Vector3(-3210.196f, 1146.144f, 9.895408f));
                    VectorList_01.Add(new Vector3(-3204.592f, 1136.674f, 9.367161f));
                    VectorList_02.Add(new Vector3(-3199.891f, 1165.147f, 9.654341f));
                    VectorList_01.Add(new Vector3(-3196.638f, 1160.642f, 9.050935f));
                    VectorList_02.Add(new Vector3(-3205.993f, 1187.009f, 9.664687f));
                    VectorList_01.Add(new Vector3(-3191.01f, 1181.408f, 8.82839f));
                    VectorList_02.Add(new Vector3(-3194.872f, 1209.193f, 9.424752f));
                    VectorList_01.Add(new Vector3(-3186.948f, 1201.075f, 8.994352f));
                    VectorList_02.Add(new Vector3(-3194.43f, 1230.428f, 10.04832f));
                    VectorList_01.Add(new Vector3(-3186.025f, 1226.601f, 9.543797f));
                    VectorList_02.Add(new Vector3(-3190.776f, 1297.634f, 19.06739f));
                    VectorList_01.Add(new Vector3(-3176.015f, 1294.986f, 13.88427f));
                    VectorList_02.Add(new Vector3(-2794.065f, 1436.65f, 100.9284f));
                    VectorList_01.Add(new Vector3(-2784.956f, 1431.801f, 100.3998f));
                }
                else //        "TONGVAH" && MyZone 0)//        "TONGVAV" 
                {
                    VectorList_02.Add(new Vector3(-1516.543f, 1505.643f, 115.0055f));
                    VectorList_01.Add(new Vector3(-1502.462f, 1493.975f, 115.4031f));
                    VectorList_02.Add(new Vector3(-1585.992f, 2110.469f, 65.85062f));
                    VectorList_01.Add(new Vector3(-1579.633f, 2097.453f, 68.14568f));
                    VectorList_02.Add(new Vector3(-1897.6f, 2058.515f, 140.9148f));
                    VectorList_01.Add(new Vector3(-1889.138f, 2045.076f, 140.233f));
                    VectorList_02.Add(new Vector3(-1743.845f, 2379.063f, 47.18592f));
                    VectorList_01.Add(new Vector3(-1745.479f, 2391.582f, 42.8428f));
                    VectorList_02.Add(new Vector3(-1717.544f, 1874.892f, 163.155f));
                    VectorList_01.Add(new Vector3(-1713.895f, 1883.34f, 160.9319f));
                }
            }
            else if (Local == 4)
            {
                if (bRandom)
                    iArea = RandInt(1, 5);

                if (iArea == 1)//        "MIRR" 
                {
                    VectorList_02.Add(new Vector3(1303.104f, -528.0761f, 71.46065f));
                    VectorList_01.Add(new Vector3(1309.066f, -535.1337f, 70.73479f));
                    VectorList_02.Add(new Vector3(1328.005f, -536.041f, 72.44083f));
                    VectorList_01.Add(new Vector3(1317.968f, -538.2343f, 71.43388f));
                    VectorList_02.Add(new Vector3(1348.163f, -547.7917f, 73.89162f));
                    VectorList_01.Add(new Vector3(1353.236f, -555.9352f, 73.63641f));
                    VectorList_02.Add(new Vector3(1372.689f, -555.9731f, 74.68577f));
                    VectorList_01.Add(new Vector3(1362.776f, -557.3074f, 73.77276f));
                    VectorList_02.Add(new Vector3(1388.346f, -569.6031f, 74.49653f));
                    VectorList_01.Add(new Vector3(1388.113f, -578.3655f, 73.77274f));
                    VectorList_02.Add(new Vector3(1385.853f, -593.0632f, 74.48546f));
                    VectorList_01.Add(new Vector3(1378.244f, -597.2811f, 73.77341f));
                    VectorList_02.Add(new Vector3(1367.295f, -606.2516f, 74.71093f));
                    VectorList_01.Add(new Vector3(1359.627f, -600.3322f, 73.77345f));
                    VectorList_02.Add(new Vector3(1342f, -597.175f, 74.7008f));
                    VectorList_01.Add(new Vector3(1347.955f, -577.8033f, 73.62755f));
                    VectorList_02.Add(new Vector3(1323.486f, -582.6028f, 73.24638f));
                    VectorList_01.Add(new Vector3(1318.944f, -574.3151f, 72.35325f));
                    VectorList_02.Add(new Vector3(1301.144f, -573.8477f, 71.73234f));
                    VectorList_01.Add(new Vector3(1295.759f, -566.8878f, 70.58719f));
                    VectorList_02.Add(new Vector3(1203.279f, -557.5997f, 69.40067f));
                    VectorList_01.Add(new Vector3(1184.475f, -555.3583f, 63.85255f));
                    VectorList_02.Add(new Vector3(1201.368f, -578.7299f, 69.13488f));
                    VectorList_01.Add(new Vector3(1183.985f, -584.4063f, 63.49017f));
                    VectorList_02.Add(new Vector3(1203.674f, -599.1799f, 68.06352f));
                    VectorList_01.Add(new Vector3(1186.999f, -604.1857f, 63.22091f));
                    VectorList_02.Add(new Vector3(1206.905f, -619.9584f, 66.43616f));
                    VectorList_01.Add(new Vector3(1203.073f, -613.0959f, 65.27635f));
                    VectorList_02.Add(new Vector3(1221.432f, -668.447f, 63.50019f));
                    VectorList_01.Add(new Vector3(1215.585f, -665.6649f, 62.1657f));
                    VectorList_02.Add(new Vector3(1222.634f, -696.9823f, 60.80664f));
                    VectorList_01.Add(new Vector3(1222.546f, -704.6004f, 60.25977f));
                    VectorList_02.Add(new Vector3(1228.98f, -725.4678f, 60.79766f));
                    VectorList_01.Add(new Vector3(1223.973f, -728.1918f, 59.96362f));
                    VectorList_02.Add(new Vector3(1265.76f, -703.2062f, 64.56302f));
                    VectorList_01.Add(new Vector3(1276.88f, -709.9447f, 64.16968f));
                    VectorList_02.Add(new Vector3(1271.215f, -683.229f, 66.03163f));
                    VectorList_01.Add(new Vector3(1276.321f, -672.1403f, 65.55285f));
                    VectorList_02.Add(new Vector3(1265.496f, -648.1833f, 67.92143f));
                    VectorList_01.Add(new Vector3(1281.524f, -636.264f, 67.85822f));
                    VectorList_02.Add(new Vector3(1243.872f, -634.2845f, 69.32861f));
                    VectorList_01.Add(new Vector3(1258.799f, -622.2938f, 68.90398f));
                    VectorList_02.Add(new Vector3(1233.232f, -593.3051f, 69.42253f));
                    VectorList_01.Add(new Vector3(1244.551f, -585.997f, 68.82187f));
                    VectorList_02.Add(new Vector3(1242.479f, -565.8297f, 69.65738f));
                    VectorList_01.Add(new Vector3(1258.098f, -565.493f, 68.23525f));
                    VectorList_02.Add(new Vector3(1239.262f, -513.1147f, 69.12914f));
                    VectorList_01.Add(new Vector3(1248.86f, -522.4438f, 68.26224f));
                    VectorList_02.Add(new Vector3(1251.532f, -494.2249f, 69.90682f));
                    VectorList_01.Add(new Vector3(1261.78f, -493.555f, 68.59668f));
                    VectorList_02.Add(new Vector3(1260.101f, -479.5116f, 70.18879f));
                    VectorList_01.Add(new Vector3(1278.476f, -478.6996f, 68.22017f));
                    VectorList_02.Add(new Vector3(1266.084f, -458.3353f, 70.51691f));
                    VectorList_01.Add(new Vector3(1273.115f, -455.0135f, 68.57989f));
                    VectorList_02.Add(new Vector3(1262.461f, -429.394f, 70.01487f));
                    VectorList_01.Add(new Vector3(1275.764f, -424.0667f, 68.22583f));
                    VectorList_02.Add(new Vector3(999.6509f, -602.5077f, 59.24988f));
                    VectorList_01.Add(new Vector3(1007.827f, -589.7651f, 58.31434f));
                    VectorList_02.Add(new Vector3(1010.405f, -572.106f, 60.59447f));
                    VectorList_01.Add(new Vector3(1024.028f, -564.0795f, 58.89515f));
                    VectorList_02.Add(new Vector3(976.5464f, -580.268f, 59.85033f));
                    VectorList_01.Add(new Vector3(968.4319f, -570.5289f, 58.0456f));
                    VectorList_02.Add(new Vector3(965.8971f, -609.0874f, 59.49282f));
                    VectorList_01.Add(new Vector3(954.2767f, -596.7289f, 58.6325f));
                    VectorList_02.Add(new Vector3(919.8752f, -569.8582f, 58.36637f));
                    VectorList_01.Add(new Vector3(933.074f, -577.1251f, 56.91011f));
                    VectorList_02.Add(new Vector3(965.7161f, -542.8255f, 59.35909f));
                    VectorList_01.Add(new Vector3(973.2179f, -554.7656f, 58.32329f));
                    VectorList_02.Add(new Vector3(988.0938f, -525.8449f, 60.69068f));
                    VectorList_01.Add(new Vector3(989.012f, -543.071f, 58.85779f));
                    VectorList_02.Add(new Vector3(1005.954f, -511.3791f, 60.83396f));
                    VectorList_01.Add(new Vector3(1005.942f, -519.3906f, 59.9563f));
                    VectorList_02.Add(new Vector3(1056.8f, -448.1799f, 66.25742f));
                    VectorList_01.Add(new Vector3(1064.382f, -445.4654f, 65.09992f));
                    VectorList_02.Add(new Vector3(1051.081f, -470.3268f, 64.29682f));
                    VectorList_01.Add(new Vector3(1068.162f, -473.2799f, 63.43224f));
                    VectorList_02.Add(new Vector3(1046.621f, -497.4203f, 64.07932f));
                    VectorList_01.Add(new Vector3(1051.812f, -488.407f, 63.14861f));
                    VectorList_02.Add(new Vector3(1089.776f, -484.1317f, 65.66021f));
                    VectorList_01.Add(new Vector3(1077.637f, -482.2654f, 63.0863f));
                    VectorList_02.Add(new Vector3(1097.907f, -464.9969f, 67.3194f));
                    VectorList_01.Add(new Vector3(1080.9f, -462.766f, 64.13667f));
                    VectorList_02.Add(new Vector3(1099.318f, -438.5551f, 67.7905f));
                    VectorList_01.Add(new Vector3(1099.034f, -429.365f, 66.62222f));
                    VectorList_02.Add(new Vector3(1100.173f, -411.3625f, 67.55515f));
                    VectorList_01.Add(new Vector3(1090.41f, -417.8437f, 66.27037f));
                    VectorList_02.Add(new Vector3(1121.068f, -396.8421f, 68.32484f));
                    VectorList_01.Add(new Vector3(1103.595f, -399.2865f, 66.98724f));
                    VectorList_02.Add(new Vector3(1014.722f, -469.2599f, 64.50301f));
                    VectorList_01.Add(new Vector3(1013.713f, -452.9554f, 63.72364f));
                    VectorList_02.Add(new Vector3(970.1812f, -502.0331f, 62.1409f));
                    VectorList_01.Add(new Vector3(960.3265f, -501.11f, 60.9422f));
                    VectorList_02.Add(new Vector3(946.805f, -518.6298f, 60.62551f));
                    VectorList_01.Add(new Vector3(945.9794f, -509.9754f, 59.78003f));
                    VectorList_02.Add(new Vector3(924.0212f, -525.62f, 59.78107f));
                    VectorList_01.Add(new Vector3(922.7343f, -509.6968f, 58.43071f));
                    VectorList_02.Add(new Vector3(892.7018f, -540.6726f, 58.50655f));
                    VectorList_01.Add(new Vector3(886.5193f, -554.0729f, 57.34649f));
                    VectorList_02.Add(new Vector3(979.9705f, -627.5128f, 59.23589f));
                    VectorList_01.Add(new Vector3(974.6395f, -619.7267f, 58.43463f));
                    VectorList_02.Add(new Vector3(989.3026f, -738.9448f, 57.46308f));
                    VectorList_01.Add(new Vector3(1010.657f, -726.6682f, 57.08143f));
                    VectorList_02.Add(new Vector3(979.4105f, -716.0731f, 58.22066f));
                    VectorList_01.Add(new Vector3(982.3991f, -708.5142f, 57.17782f));
                    VectorList_02.Add(new Vector3(970.9582f, -701.2431f, 58.48196f));
                    VectorList_01.Add(new Vector3(972.29f, -686.0255f, 57.32935f));
                    VectorList_02.Add(new Vector3(944.2244f, -678.2466f, 58.44977f));
                    VectorList_01.Add(new Vector3(967.3783f, -656.6362f, 56.90245f));
                    VectorList_02.Add(new Vector3(939.8877f, -663.1575f, 58.01383f));
                    VectorList_01.Add(new Vector3(951.2182f, -653.0005f, 57.47144f));
                    VectorList_02.Add(new Vector3(929.2795f, -639.2144f, 58.24234f));
                    VectorList_01.Add(new Vector3(929.0761f, -626.1235f, 57.30887f));
                    VectorList_02.Add(new Vector3(903.2495f, -615.7738f, 58.45334f));
                    VectorList_01.Add(new Vector3(913.0081f, -620.7134f, 57.60374f));
                    VectorList_02.Add(new Vector3(874.7638f, -607.1186f, 58.21776f));
                    VectorList_01.Add(new Vector3(878.3079f, -592.7166f, 57.42387f));
                    VectorList_02.Add(new Vector3(862.0755f, -582.3646f, 58.15649f));
                    VectorList_01.Add(new Vector3(874.6371f, -586.4609f, 57.19283f));
                    VectorList_02.Add(new Vector3(846.4515f, -551.504f, 57.70799f));
                    VectorList_01.Add(new Vector3(851.7446f, -564.995f, 57.30214f));
                    VectorList_02.Add(new Vector3(850.5616f, -532.464f, 57.92542f));
                    VectorList_01.Add(new Vector3(865.4143f, -535.7256f, 56.76198f));
                    VectorList_02.Add(new Vector3(861.998f, -509.8099f, 57.32896f));
                    VectorList_01.Add(new Vector3(859.9089f, -522.9789f, 56.90236f));
                    VectorList_02.Add(new Vector3(878.6312f, -498.1406f, 58.09062f));
                    VectorList_01.Add(new Vector3(881.3627f, -513.0558f, 56.80643f));
                    VectorList_02.Add(new Vector3(901.3936f, -472.5109f, 59.01522f));
                    VectorList_01.Add(new Vector3(914.4992f, -490.2616f, 58.60363f));
                    VectorList_02.Add(new Vector3(922.1134f, -478.2256f, 61.0836f));
                    VectorList_01.Add(new Vector3(938.1192f, -489.2669f, 59.6607f));
                    VectorList_02.Add(new Vector3(943.9189f, -463.2539f, 61.39602f));
                    VectorList_01.Add(new Vector3(944.2679f, -471.275f, 60.84516f));
                    VectorList_02.Add(new Vector3(961.065f, -458.4801f, 62.39756f));
                    VectorList_01.Add(new Vector3(975.4355f, -452.9048f, 62.0961f));
                    VectorList_02.Add(new Vector3(988.1276f, -433.536f, 63.89075f));
                    VectorList_01.Add(new Vector3(998.2275f, -435.7723f, 63.65527f));
                    VectorList_02.Add(new Vector3(1004.812f, -414.8121f, 64.94271f));
                    VectorList_01.Add(new Vector3(1022.149f, -430.826f, 64.61664f));
                    VectorList_02.Add(new Vector3(1029.585f, -409.1599f, 65.94939f));
                    VectorList_01.Add(new Vector3(1025.356f, -423.0311f, 65.07549f));
                    VectorList_02.Add(new Vector3(1060.76f, -378.5183f, 68.23116f));
                    VectorList_01.Add(new Vector3(1058.172f, -388.1536f, 67.40376f));
                }
                else if (iArea == 2)//        "PALHIGH" || MyZone 0)//        "NOOSE" 
                {
                    VectorList_02.Add(new Vector3(2520.735f, -414.4421f, 94.12382f));
                    VectorList_01.Add(new Vector3(2531.759f, -404.8683f, 92.42744f));
                    VectorList_02.Add(new Vector3(2515.324f, -357.0011f, 94.13097f));
                    VectorList_01.Add(new Vector3(2533.931f, -360.9075f, 92.42843f));
                    VectorList_02.Add(new Vector3(2459.782f, -383.9377f, 93.32551f));
                    VectorList_01.Add(new Vector3(2451.829f, -383.2078f, 92.42839f));
                    VectorList_02.Add(new Vector3(2825.373f, -648.0712f, 1.867333f));
                    VectorList_01.Add(new Vector3(2824.316f, -667.1207f, 0.7700033f));
                    VectorList_02.Add(new Vector3(1890.609f, -1019.087f, 78.56707f));
                    VectorList_01.Add(new Vector3(1898.707f, -1020.049f, 78.33401f));
                }
                else if (iArea == 3)//        "TATAMO" || MyZone 0)//        "PALMPOW" || MyZone 0)//        "WINDF" 
                {
                    VectorList_02.Add(new Vector3(2562.764f, 2591.259f, 38.08143f));
                    VectorList_01.Add(new Vector3(2553.303f, 2616.184f, 37.38126f));
                    VectorList_02.Add(new Vector3(2617.469f, 1690.186f, 27.59884f));
                    VectorList_01.Add(new Vector3(2630.439f, 1650.774f, 25.7706f));
                    VectorList_02.Add(new Vector3(2722.836f, 1510.59f, 24.5007f));
                    VectorList_01.Add(new Vector3(2709.175f, 1521.067f, 23.93703f));
                    VectorList_02.Add(new Vector3(2461.603f, 1575.208f, 33.11259f));
                    VectorList_01.Add(new Vector3(2472.126f, 1583.449f, 32.15523f));
                    VectorList_02.Add(new Vector3(1659.634f, -14.56253f, 169.9923f));
                    VectorList_01.Add(new Vector3(1666.431f, -17.75419f, 173.2095f));
                    VectorList_02.Add(new Vector3(1903.146f, 592.4578f, 178.3986f));
                    VectorList_01.Add(new Vector3(1915.557f, 571.7368f, 174.9158f));
                    VectorList_02.Add(new Vector3(2580.549f, 464.5234f, 108.6211f));
                    VectorList_01.Add(new Vector3(2579.158f, 457.8897f, 107.8901f));
                }
                else if (iArea == 4)//        "HORS" || MyZone 0)//        "EAST_V"
                {
                    VectorList_02.Add(new Vector3(705.1702f, -303.5435f, 59.24223f));
                    VectorList_01.Add(new Vector3(704.0766f, -290.1624f, 58.62016f));
                    VectorList_02.Add(new Vector3(977.1418f, -196.2304f, 74.84734f));
                    VectorList_01.Add(new Vector3(961.8153f, -201.5031f, 72.54203f));
                    VectorList_02.Add(new Vector3(894.9619f, -179.6218f, 74.70035f));
                    VectorList_01.Add(new Vector3(909.2927f, -175.4855f, 73.63686f));
                    VectorList_02.Add(new Vector3(981.9587f, -103.4368f, 74.84873f));
                    VectorList_01.Add(new Vector3(979.7997f, -115.6234f, 73.57495f));
                    VectorList_02.Add(new Vector3(952.8666f, -252.3892f, 67.98509f));
                    VectorList_01.Add(new Vector3(946.447f, -255.0999f, 67.03085f));
                    VectorList_02.Add(new Vector3(930.8372f, -245.196f, 69.00294f));
                    VectorList_01.Add(new Vector3(924.669f, -254.4765f, 67.81981f));
                    VectorList_02.Add(new Vector3(921.0618f, -238.4596f, 70.17359f));
                    VectorList_01.Add(new Vector3(912.358f, -246.1808f, 68.61733f));
                    VectorList_02.Add(new Vector3(880.0348f, -205.1522f, 71.97648f));
                    VectorList_01.Add(new Vector3(872.5756f, -206.5369f, 70.22362f));
                    VectorList_02.Add(new Vector3(840.3095f, -181.7112f, 74.18803f));
                    VectorList_01.Add(new Vector3(840.9575f, -195.8371f, 72.03631f));
                    VectorList_02.Add(new Vector3(808.4063f, -164.1897f, 75.74919f));
                    VectorList_01.Add(new Vector3(803.6614f, -177.258f, 72.21603f));
                    VectorList_02.Add(new Vector3(798.9208f, -159.3197f, 74.89246f));
                    VectorList_01.Add(new Vector3(789.8212f, -171.2433f, 73.21214f));
                    VectorList_02.Add(new Vector3(773.602f, -150.4751f, 75.61332f));
                    VectorList_01.Add(new Vector3(768.3834f, -159.254f, 73.72443f));
                }
                else //        "CHIL" 
                {
                    VectorList_02.Add(new Vector3(-419.193f, 1146.05f, 325.8549f));
                    VectorList_01.Add(new Vector3(-412.1227f, 1174.139f, 325.0765f));
                    VectorList_02.Add(new Vector3(217.3246f, 1192.034f, 225.5947f));
                    VectorList_01.Add(new Vector3(229.2496f, 1194.73f, 224.8951f));
                    VectorList_02.Add(new Vector3(815.1804f, 543.0743f, 125.9202f));
                    VectorList_01.Add(new Vector3(816.4588f, 561.2748f, 125.2159f));
                    VectorList_02.Add(new Vector3(659.97f, 592.8452f, 129.0509f));
                    VectorList_01.Add(new Vector3(645.7329f, 599.199f, 128.346f));
                    VectorList_02.Add(new Vector3(-189.7077f, 977.7711f, 236.135f));
                    VectorList_01.Add(new Vector3(-169.762f, 971.246f, 236.3166f));
                    VectorList_02.Add(new Vector3(-144.6623f, 884.5777f, 233.5724f));
                    VectorList_01.Add(new Vector3(-137.541f, 904.4686f, 235.2376f));
                    VectorList_02.Add(new Vector3(-85.99014f, 834.6893f, 235.9201f));
                    VectorList_01.Add(new Vector3(-106.22f, 833.5862f, 235.2054f));
                    VectorList_02.Add(new Vector3(-46.26027f, 899.7635f, 231.5049f));
                    VectorList_01.Add(new Vector3(-72.19061f, 896.1033f, 235.0206f));
                    VectorList_02.Add(new Vector3(-104.0571f, 974.8898f, 235.7569f));
                    VectorList_01.Add(new Vector3(-124.1415f, 990.1696f, 235.2449f));
                }
            }
            else if (Local == 5)
            {
                if (bRandom)
                    iArea = RandInt(1, 7);

                if (iArea == 1)//        "GREATC" || MyZone 0)//        "ZANCUDO" || MyZone 0)//        "SLAB" 
                {
                    VectorList_02.Add(new Vector3(8.881083f, 3685.904f, 39.61732f));
                    VectorList_01.Add(new Vector3(26.05397f, 3685.02f, 39.06121f));
                    VectorList_02.Add(new Vector3(-462.365f, 2865.509f, 35.04441f));
                    VectorList_01.Add(new Vector3(-449.1972f, 2861.065f, 35.08772f));
                    VectorList_02.Add(new Vector3(-1105.215f, 2696.135f, 18.61517f));
                    VectorList_01.Add(new Vector3(-1098.553f, 2690.11f, 19.06244f));
                    VectorList_02.Add(new Vector3(-290.5939f, 2528.723f, 74.61299f));
                    VectorList_01.Add(new Vector3(-283.2376f, 2542.211f, 74.01343f));
                    VectorList_02.Add(new Vector3(-310.4129f, 2794.155f, 59.46859f));
                    VectorList_01.Add(new Vector3(-317.8717f, 2748.369f, 66.60876f));
                }
                else if (iArea == 2)//        "DESRT" || MyZone 0)//        "HARMO" || MyZone 0)//        "RTRAK" || MyZone 0)//        "JAIL" 
                {
                    VectorList_02.Add(new Vector3(1106.108f, 2652.767f, 38.14092f));
                    VectorList_01.Add(new Vector3(1137.087f, 2665.955f, 37.20128f));
                    VectorList_02.Add(new Vector3(1106.378f, 2648.518f, 38.14092f));
                    VectorList_01.Add(new Vector3(1137.087f, 2665.955f, 37.20128f));
                    VectorList_02.Add(new Vector3(1107.603f, 2641.913f, 38.14375f));
                    VectorList_01.Add(new Vector3(1137.087f, 2665.955f, 37.20128f));
                    VectorList_02.Add(new Vector3(1115.116f, 2641.803f, 38.14375f));
                    VectorList_01.Add(new Vector3(1137.087f, 2665.955f, 37.20128f));
                    VectorList_02.Add(new Vector3(1121.895f, 2641.998f, 38.14375f));
                    VectorList_01.Add(new Vector3(1137.087f, 2665.955f, 37.20128f));
                    VectorList_02.Add(new Vector3(1125.351f, 2641.756f, 38.14389f));
                    VectorList_01.Add(new Vector3(1137.087f, 2665.955f, 37.20128f));
                    VectorList_02.Add(new Vector3(1133.093f, 2641.903f, 38.1437f));
                    VectorList_01.Add(new Vector3(1137.087f, 2665.955f, 37.20128f));
                    VectorList_02.Add(new Vector3(1136.419f, 2641.913f, 38.1437f));
                    VectorList_01.Add(new Vector3(1137.087f, 2665.955f, 37.20128f));
                    VectorList_02.Add(new Vector3(1141.487f, 2642.028f, 38.1437f));
                    VectorList_01.Add(new Vector3(1137.087f, 2665.955f, 37.20128f));
                    VectorList_02.Add(new Vector3(1142.277f, 2643.694f, 38.1437f));
                    VectorList_01.Add(new Vector3(1137.087f, 2665.955f, 37.20128f));
                    VectorList_02.Add(new Vector3(1142.131f, 2651.322f, 38.14091f));
                    VectorList_01.Add(new Vector3(1137.087f, 2665.955f, 37.20128f));
                    VectorList_02.Add(new Vector3(1142.421f, 2654.643f, 38.1504f));
                    VectorList_01.Add(new Vector3(1137.087f, 2665.955f, 37.20128f));
                    VectorList_02.Add(new Vector3(722.1896f, 2330.87f, 51.75035f));
                    VectorList_01.Add(new Vector3(716.0236f, 2341.886f, 49.38189f));
                    VectorList_02.Add(new Vector3(791.8693f, 2176.558f, 52.64839f));
                    VectorList_01.Add(new Vector3(811.7886f, 2178.157f, 51.58363f));
                    VectorList_02.Add(new Vector3(1535.814f, 2231.998f, 77.69906f));
                    VectorList_01.Add(new Vector3(1524.794f, 2230.634f, 74.86063f));
                    VectorList_02.Add(new Vector3(1392.468f, 2162.03f, 97.74464f));
                    VectorList_01.Add(new Vector3(1402.862f, 2163.731f, 97.28335f));
                    VectorList_02.Add(new Vector3(1586.27f, 2906.867f, 57.97039f));
                    VectorList_01.Add(new Vector3(1587.733f, 2896.49f, 56.26361f));
                    VectorList_02.Add(new Vector3(980.3115f, 2666.715f, 40.05014f));
                    VectorList_01.Add(new Vector3(994.0294f, 2674.613f, 39.1761f));
                    VectorList_02.Add(new Vector3(976.7388f, 2730.973f, 39.51086f));
                    VectorList_01.Add(new Vector3(969.2026f, 2716.069f, 38.97165f));
                    VectorList_02.Add(new Vector3(890.3466f, 2854.747f, 57.0004f));
                    VectorList_01.Add(new Vector3(880.4413f, 2853.6f, 56.27011f));
                    VectorList_02.Add(new Vector3(848.1699f, 2864.064f, 58.48573f));
                    VectorList_01.Add(new Vector3(858.4886f, 2849.197f, 57.06968f));
                    VectorList_02.Add(new Vector3(859.2158f, 2877.006f, 57.98265f));
                    VectorList_01.Add(new Vector3(872.1891f, 2869.081f, 56.36434f));
                    VectorList_02.Add(new Vector3(564.4514f, 2598.54f, 43.8341f));
                    VectorList_01.Add(new Vector3(556.0435f, 2596.402f, 42.30201f));
                    VectorList_02.Add(new Vector3(506.3685f, 2610.314f, 43.94688f));
                    VectorList_01.Add(new Vector3(497.8611f, 2614.855f, 42.44781f));
                    VectorList_02.Add(new Vector3(470.9477f, 2607.567f, 44.4772f));
                    VectorList_01.Add(new Vector3(466.2688f, 2616.857f, 42.74304f));
                    VectorList_02.Add(new Vector3(382.2904f, 2576.652f, 44.23201f));
                    VectorList_01.Add(new Vector3(376.918f, 2575.872f, 43.00775f));
                    VectorList_02.Add(new Vector3(366.9477f, 2571.536f, 44.49765f));
                    VectorList_01.Add(new Vector3(355.9208f, 2574.071f, 43.0085f));
                    VectorList_02.Add(new Vector3(348.3048f, 2565.5f, 43.51952f));
                    VectorList_01.Add(new Vector3(342.304f, 2562.802f, 43.01845f));
                    VectorList_02.Add(new Vector3(201.1159f, 2442.344f, 60.4483f));
                    VectorList_01.Add(new Vector3(211.0188f, 2443.243f, 57.91403f));
                    VectorList_02.Add(new Vector3(392.1702f, 2634.382f, 44.66927f));
                    VectorList_01.Add(new Vector3(385.7183f, 2639.736f, 43.9827f));
                    VectorList_02.Add(new Vector3(384.7893f, 2632.815f, 44.68297f));
                    VectorList_01.Add(new Vector3(373.8996f, 2634.392f, 43.98769f));
                    VectorList_02.Add(new Vector3(379.0063f, 2630.322f, 44.64661f));
                    VectorList_01.Add(new Vector3(374.3689f, 2634.371f, 43.79418f));
                    VectorList_02.Add(new Vector3(372.6312f, 2628.28f, 44.68018f));
                    VectorList_01.Add(new Vector3(373.8996f, 2634.392f, 43.98738f));
                    VectorList_02.Add(new Vector3(366.9004f, 2624.87f, 44.67241f));
                    VectorList_01.Add(new Vector3(373.9002f, 2634.391f, 43.98606f));
                    VectorList_02.Add(new Vector3(359.1547f, 2623.402f, 44.68687f));
                    VectorList_01.Add(new Vector3(347.9727f, 2626.478f, 43.98643f));
                    VectorList_02.Add(new Vector3(354.2147f, 2620.051f, 44.67242f));
                    VectorList_01.Add(new Vector3(347.9726f, 2626.479f, 43.98935f));
                    VectorList_02.Add(new Vector3(346.7339f, 2618.583f, 44.68309f));
                    VectorList_01.Add(new Vector3(347.9692f, 2626.481f, 43.99496f));
                    VectorList_02.Add(new Vector3(341.5994f, 2615.505f, 44.66917f));
                    VectorList_01.Add(new Vector3(347.9725f, 2626.479f, 43.9882f));
                    VectorList_02.Add(new Vector3(-35.57145f, 2871.392f, 59.59684f));
                    VectorList_01.Add(new Vector3(-37.22775f, 2865.152f, 58.68879f));
                    VectorList_02.Add(new Vector3(195.0032f, 3030.994f, 43.88666f));
                    VectorList_01.Add(new Vector3(199.7019f, 3038.737f, 42.86736f));
                    VectorList_02.Add(new Vector3(241.1663f, 3107.958f, 42.48717f));
                    VectorList_01.Add(new Vector3(233.7224f, 3094.945f, 41.97177f));
                    VectorList_02.Add(new Vector3(190.2618f, 3094.545f, 43.07414f));
                    VectorList_01.Add(new Vector3(177.1561f, 3095.674f, 42.49979f));
                    VectorList_02.Add(new Vector3(248.6368f, 3180.585f, 42.91877f));
                    VectorList_01.Add(new Vector3(236.9269f, 3163.9f, 42.0658f));
                }
                else if (iArea == 3)//        "ZQ_UAR" 
                {
                    VectorList_02.Add(new Vector3(2569.701f, 2719.698f, 42.90607f));
                    VectorList_01.Add(new Vector3(2574.727f, 2716.069f, 41.63546f));
                    VectorList_02.Add(new Vector3(2833.906f, 2806.462f, 57.40425f));
                    VectorList_01.Add(new Vector3(2828.2f, 2796.574f, 56.86005f));
                    VectorList_02.Add(new Vector3(2745.813f, 2787.738f, 35.57073f));
                    VectorList_01.Add(new Vector3(2732.689f, 2780.434f, 35.11758f));
                    VectorList_02.Add(new Vector3(2706.889f, 2776.905f, 37.87803f));
                    VectorList_01.Add(new Vector3(2695.961f, 2773.133f, 37.06485f));
                    VectorList_02.Add(new Vector3(2627.236f, 2935.35f, 40.42284f));
                    VectorList_01.Add(new Vector3(2622.771f, 2910.397f, 35.8194f));
                    VectorList_02.Add(new Vector3(2663.344f, 2891.49f, 36.90667f));
                    VectorList_01.Add(new Vector3(2659.201f, 2899.723f, 35.50852f));
                    VectorList_02.Add(new Vector3(2601.118f, 2803.863f, 33.82192f));
                    VectorList_01.Add(new Vector3(2592.893f, 2797.829f, 33.27939f));

                }
                else if (iArea == 4)//        "SANDY" 
                {
                    VectorList_02.Add(new Vector3(2389.463f, 3341.572f, 47.72219f));
                    VectorList_01.Add(new Vector3(2396.545f, 3325.496f, 46.83057f));
                    VectorList_02.Add(new Vector3(2392.829f, 3320.546f, 48.45065f));
                    VectorList_01.Add(new Vector3(2396.545f, 3325.496f, 46.83057f));
                    VectorList_02.Add(new Vector3(2489.863f, 3442.953f, 50.06467f));
                    VectorList_01.Add(new Vector3(2477.348f, 3425.041f, 49.09996f));
                    VectorList_02.Add(new Vector3(1385.014f, 3659.524f, 34.92771f));
                    VectorList_01.Add(new Vector3(1385.874f, 3676.129f, 32.83449f));
                    VectorList_02.Add(new Vector3(1406.574f, 3656.235f, 34.21167f));
                    VectorList_01.Add(new Vector3(1397.748f, 3669.189f, 33.09452f));
                    VectorList_02.Add(new Vector3(1536.855f, 3707.824f, 34.82714f));
                    VectorList_01.Add(new Vector3(1521.929f, 3719.167f, 33.54586f));
                    VectorList_02.Add(new Vector3(1827.154f, 3729.609f, 33.96196f));
                    VectorList_01.Add(new Vector3(1831.226f, 3722.84f, 32.44462f));
                    VectorList_02.Add(new Vector3(1851.281f, 3784.816f, 33.04296f));
                    VectorList_01.Add(new Vector3(1847.915f, 3766.17f, 32.21405f));
                    VectorList_02.Add(new Vector3(1900.309f, 3772.731f, 32.87964f));
                    VectorList_01.Add(new Vector3(1906.825f, 3784.434f, 31.81898f));
                    VectorList_02.Add(new Vector3(1880.978f, 3810.795f, 32.77878f));
                    VectorList_01.Add(new Vector3(1892.596f, 3815.768f, 31.49548f));
                    VectorList_02.Add(new Vector3(1777.051f, 3799.372f, 34.54548f));
                    VectorList_01.Add(new Vector3(1769.489f, 3788.509f, 33.01802f));
                    VectorList_02.Add(new Vector3(1639.738f, 3731.604f, 35.0671f));
                    VectorList_01.Add(new Vector3(1648.793f, 3727.542f, 33.49438f));
                    VectorList_02.Add(new Vector3(1661.924f, 3820.039f, 35.46976f));
                    VectorList_01.Add(new Vector3(1666.821f, 3808.889f, 34.00944f));
                    VectorList_02.Add(new Vector3(1691.653f, 3866.071f, 34.90841f));
                    VectorList_01.Add(new Vector3(1682.875f, 3870.218f, 34.03076f));
                    VectorList_02.Add(new Vector3(1837.934f, 3916.815f, 33.24038f));
                    VectorList_01.Add(new Vector3(1837.688f, 3902.202f, 32.38109f));
                    VectorList_02.Add(new Vector3(1832.167f, 3868.24f, 34.2976f));
                    VectorList_01.Add(new Vector3(1822.602f, 3874.45f, 32.92525f));
                    VectorList_02.Add(new Vector3(1858.24f, 3854.265f, 33.08321f));
                    VectorList_01.Add(new Vector3(1864.39f, 3845.125f, 31.78188f));
                    VectorList_02.Add(new Vector3(1902.802f, 3866.26f, 33.06639f));
                    VectorList_01.Add(new Vector3(1908.797f, 3859.409f, 31.54244f));
                    VectorList_02.Add(new Vector3(1894.084f, 3895.881f, 33.15143f));
                    VectorList_01.Add(new Vector3(1884.966f, 3886.014f, 32.10987f));
                    VectorList_02.Add(new Vector3(1916.24f, 3909.3f, 33.44159f));
                    VectorList_01.Add(new Vector3(1929.137f, 3921.694f, 31.60845f));
                    VectorList_02.Add(new Vector3(1936.745f, 3891.11f, 32.53016f));
                    VectorList_01.Add(new Vector3(1937.799f, 3877.645f, 31.41957f));
                    VectorList_02.Add(new Vector3(2179.24f, 3496.884f, 45.88393f));
                    VectorList_01.Add(new Vector3(2171.346f, 3506.891f, 44.64259f));
                    VectorList_02.Add(new Vector3(2163.232f, 3374.59f, 46.14158f));
                    VectorList_01.Add(new Vector3(2169.843f, 3365.11f, 44.7066f));
                    VectorList_02.Add(new Vector3(2200.855f, 3318.164f, 46.88804f));
                    VectorList_01.Add(new Vector3(2214.03f, 3309.552f, 45.19223f));
                }
                else if (iArea == 5)//        "ALAMO" 
                {
                    VectorList_02.Add(new Vector3(387.3527f, 3584.745f, 33.29222f));
                    VectorList_01.Add(new Vector3(378.4148f, 3592.091f, 32.48848f));
                    VectorList_02.Add(new Vector3(438.4768f, 3570.548f, 33.89853f));
                    VectorList_01.Add(new Vector3(426.7444f, 3578.094f, 32.42588f));
                    VectorList_02.Add(new Vector3(911.0425f, 3644.367f, 32.67706f));
                    VectorList_01.Add(new Vector3(910.9032f, 3637.734f, 31.6573f));
                    VectorList_02.Add(new Vector3(899.5674f, 3582.851f, 33.41278f));
                    VectorList_01.Add(new Vector3(908.0741f, 3590.216f, 32.38536f));
                    VectorList_02.Add(new Vector3(959.2548f, 3619.023f, 32.66993f));
                    VectorList_01.Add(new Vector3(950.4551f, 3615.18f, 31.81508f));
                }
                else if (iArea == 6)//        "SANCHIA" || MyZone 0)//        "HUMLAB" 
                {
                    VectorList_02.Add(new Vector3(3807.908f, 4478.596f, 6.365325f));
                    VectorList_01.Add(new Vector3(3794.228f, 4467.279f, 4.846033f));
                    VectorList_02.Add(new Vector3(3725.273f, 4525.252f, 22.46952f));
                    VectorList_01.Add(new Vector3(3712.427f, 4519.564f, 20.82699f));
                    VectorList_02.Add(new Vector3(3688.062f, 4562.869f, 25.18306f));
                    VectorList_01.Add(new Vector3(3694.858f, 4557.306f, 24.63262f));
                    VectorList_02.Add(new Vector3(2890.177f, 4391.291f, 50.33842f));
                    VectorList_01.Add(new Vector3(2898.639f, 4387.975f, 49.53016f));
                    VectorList_02.Add(new Vector3(2660.38f, 3291.893f, 55.82876f));
                    VectorList_01.Add(new Vector3(2650.044f, 3282.463f, 54.71011f));
                    VectorList_02.Add(new Vector3(2632.871f, 3258.812f, 55.46336f));
                    VectorList_01.Add(new Vector3(2638.369f, 3265.512f, 54.72956f));
                }
                else //        "GRAPES" || MyZone 0)//        "GALFISH"
                {
                    VectorList_02.Add(new Vector3(1338.701f, 4359.917f, 44.36738f));
                    VectorList_01.Add(new Vector3(1345.047f, 4368.24f, 43.90841f));
                    VectorList_02.Add(new Vector3(1366.181f, 4358.456f, 44.5f));
                    VectorList_01.Add(new Vector3(1368.074f, 4367.771f, 43.932f));
                    VectorList_02.Add(new Vector3(1374.121f, 4381.065f, 45.11992f));
                    VectorList_01.Add(new Vector3(1367.757f, 4376.39f, 43.89225f));
                    VectorList_02.Add(new Vector3(1429.394f, 4377.73f, 44.59793f));
                    VectorList_01.Add(new Vector3(1423.805f, 4384.286f, 43.51751f));
                    VectorList_02.Add(new Vector3(1663.095f, 4775.675f, 42.00761f));
                    VectorList_01.Add(new Vector3(1670.112f, 4769.056f, 41.45914f));
                    VectorList_02.Add(new Vector3(1659.559f, 4756.741f, 41.96615f));
                    VectorList_01.Add(new Vector3(1670.749f, 4751.769f, 41.44023f));
                    VectorList_02.Add(new Vector3(1675.876f, 4680.809f, 43.05522f));
                    VectorList_01.Add(new Vector3(1686.044f, 4680.881f, 42.62078f));
                    VectorList_02.Add(new Vector3(1718.966f, 4676.812f, 43.65579f));
                    VectorList_01.Add(new Vector3(1711.55f, 4669.007f, 42.65202f));
                    VectorList_02.Add(new Vector3(1674.403f, 4657.681f, 43.37113f));
                    VectorList_01.Add(new Vector3(1681.119f, 4653.235f, 42.55849f));
                    VectorList_02.Add(new Vector3(1724.62f, 4641.602f, 43.87546f));
                    VectorList_01.Add(new Vector3(1723.476f, 4629.428f, 42.39647f));
                    VectorList_02.Add(new Vector3(1966.87f, 4634.104f, 41.1016f));
                    VectorList_01.Add(new Vector3(1963.076f, 4643.931f, 39.92876f));
                }
            }
            else
            {
                if (bRandom)
                    iArea = RandInt(1, 4);

                if (iArea == 1)//        "NCHU" || MyZone 0)//        "MTJOSE" || MyZone 0)//        "ARMYB"     "CANNY" || MyZone 0)//        "CCREAK"   "CMSW" ||  MyZone 0)//        "PALCOV" 
                {
                    VectorList_02.Add(new Vector3(-2192.83f, 4285.766f, 49.17549f));
                    VectorList_01.Add(new Vector3(-2197.211f, 4268.291f, 48.03174f));
                    VectorList_02.Add(new Vector3(-2230.192f, 3481.066f, 30.16892f));
                    VectorList_01.Add(new Vector3(-2244.532f, 3473.812f, 29.93354f));

                    VectorList_02.Add(new Vector3(-1555.876f, 4460.74f, 17.30642f));
                    VectorList_01.Add(new Vector3(-1553.37f, 4480.744f, 19.11336f));
                    VectorList_02.Add(new Vector3(-1072.359f, 4369.473f, 13.50683f));
                    VectorList_01.Add(new Vector3(-1065.936f, 4376.642f, 11.79403f));
                    VectorList_02.Add(new Vector3(-1350.143f, 4261.536f, 7.27169f));
                    VectorList_01.Add(new Vector3(-1360.185f, 4297.027f, 1.867007f));

                    VectorList_02.Add(new Vector3(-1042.253f, 4909.827f, 208.3053f));
                    VectorList_01.Add(new Vector3(-1037.468f, 4916.057f, 206.3439f));
                    VectorList_02.Add(new Vector3(-1490.407f, 4981.597f, 63.35542f));
                    VectorList_01.Add(new Vector3(-1496.595f, 4981.688f, 62.52434f));
                    VectorList_02.Add(new Vector3(-1567.983f, 5178.375f, 15.77355f));
                    VectorList_01.Add(new Vector3(-1581.282f, 5165.406f, 19.15366f));
                }
                else if (iArea == 2)//        "MTCHIL" || MyZone 0)//        "PROCOB" || MyZone 0)//        "PALFOR" 
                {
                    VectorList_02.Add(new Vector3(-502.3836f, 5264.665f, 80.61025f));
                    VectorList_01.Add(new Vector3(-512.0334f, 5258.259f, 80.2546f));
                    VectorList_02.Add(new Vector3(-552.933f, 5348.917f, 74.74302f));
                    VectorList_01.Add(new Vector3(-566.3308f, 5352.837f, 69.61542f));
                    VectorList_02.Add(new Vector3(-709.4831f, 5769.405f, 17.5092f));
                    VectorList_01.Add(new Vector3(-694.3478f, 5772.844f, 16.9762f));
                    VectorList_02.Add(new Vector3(-701.7791f, 5765.044f, 17.51088f));
                    VectorList_01.Add(new Vector3(-694.3478f, 5772.844f, 16.9762f));
                    VectorList_02.Add(new Vector3(-698.0701f, 5763.163f, 17.51098f));
                    VectorList_01.Add(new Vector3(-694.3478f, 5772.844f, 16.9762f));
                    VectorList_02.Add(new Vector3(-694.1993f, 5761.503f, 17.511f));
                    VectorList_01.Add(new Vector3(-694.3478f, 5772.844f, 16.9762f));
                    VectorList_02.Add(new Vector3(-689.9605f, 5759.66f, 17.511f));
                    VectorList_01.Add(new Vector3(-694.3478f, 5772.844f, 16.9762f));
                    VectorList_02.Add(new Vector3(-687.4717f, 5758.861f, 17.511f));
                    VectorList_01.Add(new Vector3(-694.3478f, 5772.844f, 16.9762f));
                    VectorList_02.Add(new Vector3(-685.622f, 5762.833f, 17.511f));
                    VectorList_01.Add(new Vector3(-694.3478f, 5772.844f, 16.9762f));
                    VectorList_02.Add(new Vector3(-682.1684f, 5770.896f, 17.51058f));
                    VectorList_01.Add(new Vector3(-694.3478f, 5772.844f, 16.9762f));
                    VectorList_02.Add(new Vector3(-683.8336f, 5766.68f, 17.511f));
                    VectorList_01.Add(new Vector3(-694.3478f, 5772.844f, 16.9762f));
                    VectorList_02.Add(new Vector3(-749.814f, 5598.417f, 40.64638f));
                    VectorList_01.Add(new Vector3(-772.4623f, 5583.537f, 33.13069f));
                    VectorList_02.Add(new Vector3(-841.0642f, 5401.115f, 34.61522f));
                    VectorList_01.Add(new Vector3(-838.1064f, 5410.326f, 34.10001f));
                }
                else if (iArea == 3)//        "PALETO" 
                {
                    VectorList_02.Add(new Vector3(-371.8559f, 6335.212f, 29.84368f));
                    VectorList_01.Add(new Vector3(-359.8704f, 6328.174f, 29.0792f));
                    VectorList_02.Add(new Vector3(-272.5724f, 6400.933f, 31.50485f));
                    VectorList_01.Add(new Vector3(-262.445f, 6402.843f, 30.19f));
                    VectorList_02.Add(new Vector3(-246.0781f, 6414.225f, 31.4606f));
                    VectorList_01.Add(new Vector3(-248.9544f, 6406.491f, 30.78173f));
                    VectorList_02.Add(new Vector3(-230.1529f, 6445.155f, 31.19745f));
                    VectorList_01.Add(new Vector3(-223.0589f, 6432.951f, 30.84467f));
                    VectorList_02.Add(new Vector3(-130.6867f, 6551.887f, 29.87188f));
                    VectorList_01.Add(new Vector3(-124.9483f, 6550.625f, 29.07267f));
                    VectorList_02.Add(new Vector3(-41.50317f, 6637.042f, 31.08753f));
                    VectorList_01.Add(new Vector3(-39.79873f, 6625.59f, 29.81621f));
                    VectorList_02.Add(new Vector3(-9.389118f, 6654.011f, 31.50423f));
                    VectorList_01.Add(new Vector3(-14.04558f, 6645.291f, 30.75609f));
                    VectorList_02.Add(new Vector3(35.13187f, 6662.611f, 32.19038f));
                    VectorList_01.Add(new Vector3(22.50064f, 6655.907f, 31.11742f));

                    VectorList_02.Add(new Vector3(-453.2734f, 6337.072f, 13.09414f));
                    VectorList_01.Add(new Vector3(-447.8893f, 6347.536f, 11.89663f));
                    VectorList_02.Add(new Vector3(-480.8771f, 6266.04f, 13.6347f));
                    VectorList_01.Add(new Vector3(-491.188f, 6263.797f, 11.58691f));
                    VectorList_02.Add(new Vector3(-14.98113f, 6557.459f, 33.24044f));
                    VectorList_01.Add(new Vector3(-6.39504f, 6559.146f, 31.26225f));
                    VectorList_02.Add(new Vector3(11.70875f, 6578.31f, 33.0708f));
                    VectorList_01.Add(new Vector3(18.09615f, 6580.185f, 31.61535f));
                    VectorList_02.Add(new Vector3(25.71288f, 6602.099f, 32.47048f));
                    VectorList_01.Add(new Vector3(41.19342f, 6605.401f, 31.70087f));
                    VectorList_02.Add(new Vector3(1.700827f, 6612.539f, 32.07838f));
                    VectorList_01.Add(new Vector3(-4.421872f, 6617.645f, 30.76105f));
                    VectorList_02.Add(new Vector3(-26.80732f, 6597.684f, 31.86026f));
                    VectorList_01.Add(new Vector3(-17.67091f, 6608.921f, 30.31045f));
                    VectorList_02.Add(new Vector3(-33.86079f, 6571.095f, 31.47055f));
                    VectorList_01.Add(new Vector3(-39.9745f, 6591.987f, 29.84397f));
                    VectorList_02.Add(new Vector3(-105.4981f, 6528.586f, 30.16692f));
                    VectorList_01.Add(new Vector3(-108.3041f, 6537.882f, 29.08501f));
                    VectorList_02.Add(new Vector3(-180.695f, 6404.67f, 31.88605f));
                    VectorList_01.Add(new Vector3(-190.6143f, 6415.651f, 31.17549f));
                    VectorList_02.Add(new Vector3(-213.6821f, 6396.523f, 33.0851f));
                    VectorList_01.Add(new Vector3(-207.1203f, 6407.241f, 31.05694f));
                    VectorList_02.Add(new Vector3(-227.5194f, 6378.039f, 31.75923f));
                    VectorList_01.Add(new Vector3(-223.1334f, 6385.887f, 30.87843f));
                    VectorList_02.Add(new Vector3(-247.9305f, 6370.228f, 31.84764f));
                    VectorList_01.Add(new Vector3(-256.1295f, 6362.513f, 30.77239f));
                    VectorList_02.Add(new Vector3(-280.6378f, 6350.979f, 32.57881f));
                    VectorList_01.Add(new Vector3(-272.5419f, 6360.252f, 31.20849f));
                    VectorList_02.Add(new Vector3(-302.668f, 6327.436f, 32.88649f));
                    VectorList_01.Add(new Vector3(-295.5428f, 6339.388f, 31.43028f));
                    VectorList_02.Add(new Vector3(-316.6211f, 6294.715f, 32.48936f));
                    VectorList_01.Add(new Vector3(-316.8424f, 6315.597f, 31.3995f));
                    VectorList_02.Add(new Vector3(-374.4959f, 6190.917f, 31.72955f));
                    VectorList_01.Add(new Vector3(-376.7037f, 6183.094f, 30.78619f));
                    VectorList_02.Add(new Vector3(-367.3759f, 6213.406f, 31.84218f));
                    VectorList_01.Add(new Vector3(-366.3954f, 6200.037f, 30.78314f));
                    VectorList_02.Add(new Vector3(-347.6381f, 6225.237f, 31.8841f));
                    VectorList_01.Add(new Vector3(-348.7925f, 6217.142f, 30.78026f));
                    VectorList_02.Add(new Vector3(-371.1718f, 6267.241f, 31.87273f));
                    VectorList_01.Add(new Vector3(-367.3638f, 6281.116f, 29.35941f));
                    VectorList_02.Add(new Vector3(-379.793f, 6252.999f, 31.85118f));
                    VectorList_01.Add(new Vector3(-383.5283f, 6268.838f, 29.99367f));
                    VectorList_02.Add(new Vector3(-454.6533f, 6204.072f, 29.55285f));
                    VectorList_01.Add(new Vector3(-437.5063f, 6204.955f, 28.87807f));
                    VectorList_02.Add(new Vector3(-446.5808f, 6259.138f, 30.0415f));
                    VectorList_01.Add(new Vector3(-431.2646f, 6264.82f, 29.62897f));
                    VectorList_02.Add(new Vector3(-406.9542f, 6313.816f, 28.94232f));
                    VectorList_01.Add(new Vector3(-394.35f, 6309.122f, 28.48195f));
                }
                else //        "BRADP" || MyZone 0)//        "MTGORDO" || MyZone 0)//        "ELGORL"
                {
                    VectorList_02.Add(new Vector3(2017.828f, 6265.965f, 45.32155f));
                    VectorList_01.Add(new Vector3(2002.664f, 6241.593f, 45.94011f));
                    VectorList_02.Add(new Vector3(3380.229f, 5501.306f, 23.49531f));
                    VectorList_01.Add(new Vector3(3357.473f, 5510.913f, 18.17108f));
                    VectorList_02.Add(new Vector3(3346.712f, 5179.848f, 14.0603f));
                    VectorList_01.Add(new Vector3(3327.778f, 5151.634f, 17.95325f));
                    VectorList_02.Add(new Vector3(2935.547f, 5323.863f, 100.555f));
                    VectorList_01.Add(new Vector3(2917.3f, 5312.813f, 95.62965f));
                }
            }

            if (bTestRun)
            {
                if (bFirst)
                {
                    using (StreamWriter tEx = File.AppendText(sBeeLogs))
                        BeeLog("MyMissions.FubardXM == " + MyMissions.FubardXM.Count + ", iTestKit == " + iTestKit, tEx);

                    VectorList_01.Clear();
                    VectorList_02.Clear();
                    bJobLoaded = true;
                    iJobType = 5;

                    VectorList_01.Add(MyMissions.FubardXM[iTestKit].FUbarCar);
                    VectorList_02.Add(MyMissions.FubardXM[iTestKit].FUbarPed);
                    iTestKit += 1;
                }
            }
            else
            {
                if (FindBuiltMissions(4))
                {
                    List<Vector3> NewStops_01 = new List<Vector3>();
                    List<Vector3> NewStops_02 = new List<Vector3>();

                    for (int i = 0; i < MyMissions.FubardXM.Count; i++)
                    {
                        NewStops_01.Add(MyMissions.FubardXM[i].FUbarCar);
                        NewStops_02.Add(MyMissions.FubardXM[i].FUbarPed);
                    }

                    if (NewStops_01.Count > 0)
                    {
                        for (int i = 0; i < NewStops_01.Count; i++)
                        {
                            VectorList_01.Add(NewStops_01[i]);
                            VectorList_02.Add(NewStops_02[i]);
                        }
                    }
                }
            }

            return iArea;
        }
        private void Fubar_CarShare()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Fubar_CarShare", tEx);

            FreeSeat(VehTrackin_01, 2, true);
            FreeSeat(VehTrackin_01, 3, true);
            FreeSeat(VehTrackin_01, 4, true);

            float fAce = Function.Call<float>(Hash.GET_HEADING_FROM_VECTOR_2D, vTarget_01.X - vTarget_02.X, vTarget_01.Y - vTarget_02.Y);

            if (iList_01[3] == 1)
            {
                int iRandNumb = RandInt(0, 30);
                if (iRandNumb < 10)
                    NPCSpawn(RandNPC(RandInt(1, 35)), vTarget_01, fAce, 40, 180, 0, 8, 0, null, 0, true, false, 1, 0);
                else if (iRandNumb < 20)
                    NPCSpawn(RandNPC(RandInt(1, 35)), vTarget_01, fAce, 40, 180, 0, 9, 0, null, 0, true, false, 1, 0);
                else
                    NPCSpawn(RandNPC(RandInt(1, 35)), vTarget_01, fAce, 40, 180, 0, 10, 0, null, 0, true, false, 1, 0);
            }
            else if (iList_01[3] == 2)
            {
                NPCSpawn(RandNPC(RandInt(1, 35)), vTarget_01, fAce, 40, 180, 0, 9, 0, null, 0, true, false, 1, 0);
                NPCSpawn(RandNPC(RandInt(1, 35)), vTarget_01, fAce, 40, 180, 0, 10, 0, null, 0, true, false, 2, 0);
            }
            else
            {
                NPCSpawn(RandNPC(RandInt(1, 35)), vTarget_01, fAce, 40, 180, 0, 8, 0, null, 0, true, false, 1, 0);
                NPCSpawn(RandNPC(RandInt(1, 35)), vTarget_01, fAce, 40, 180, 0, 9, 0, null, 0, true, false, 2, 0);
                NPCSpawn(RandNPC(RandInt(1, 35)), vTarget_01, fAce, 40, 180, 0, 10, 0, null, 0, true, false, 3, 0);
            }
        }
        private void Fubar_AngreyTaxi()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Fubar_AngreyTaxi", tEx);

            int iTax = RandInt(0, 50);
            if (iTax < 15 && Game.Player.Character.IsInVehicle(VehTrackin_01))
            {
                if (iAngerTax < 1)
                {
                    iAngerTax = 10;
                    FindAndReplaceVeh(Game.Player.Character.Position, 0, 25, 0, 20, 0, false, false, true, 95.00f, 35.00f, "TAXI", false, RandInt(2, 5), 10, false);
                }
            }
            else
                BeOnOff[2] = false;
            iAngerTax = iAngerTax - 1;
        }
        private void Fubar_CleanTaxi()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Fubar_CleanTaxi", tEx);

            for (int i = 0; i < PedList_02.Count; i++)
            {
                Vehicle VehX = PedList_02[i].LastVehicle;
                if (PedList_02[i].CurrentBlip.Exists())
                    PedList_02[i].CurrentBlip.Remove();
                VehicleList_01.Remove(VehX);
                PedList_02[i].Task.FleeFrom(Game.Player.Character);
                PedList_02[i].MarkAsNoLongerNeeded();
                VehX.MarkAsNoLongerNeeded();
            }
            PedList_02.Clear();
        }
        private void Pilot01_ChecksNBalance(bool bEnd)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Pilot01_ChecksNBalance, bEnd == " + bEnd, tEx);

            for (int i = 0; i < iCoronaList.Count; i++)
                Function.Call(Hash.DELETE_CHECKPOINT, iCoronaList[i]);

            iCoronaList.Clear();
            iMissionVar_01 -= 1;
            vTarget_02 = VectorList_01[iMissionVar_01];
            if (iMissionVar_01 > 0)
            {
                int mark2 = iMissionVar_01 - 1;
                vTarget_05 = VectorList_01[mark2];
                AddTarget(vTarget_05, false, false, 0.50f, false);
                Pilot01_RedNutCheckPoints(false, false);
            }
            AddTarget(vTarget_02, false, true, 1.00f, false);
            Pilot01_RedNutCheckPoints(bEnd, true);
        }
        private void Pilot01_RedNutCheckPoints(bool bFinish, bool bPrimary)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Pilot01_RedNutCheckPoints, bFinish == " + bFinish + ", bPrimary == " + bPrimary, tEx);

            if (bFinish)
            {
                int iCorona = 42;

                float posX1 = vTarget_02.X;
                float posY1 = vTarget_02.Y;
                float posZ1 = vTarget_02.Z;
                float posX2 = vTarget_05.X;
                float posY2 = vTarget_05.Y;
                float posZ2 = vTarget_05.Z;
                float radius = 15.00f;

                int red = 255;
                int green = 255;
                int blue = 0;
                int alpha = 100;
                int reserved = 170;

                int ThisCheck = Function.Call<int>(Hash.CREATE_CHECKPOINT, iCorona, posX1, posY1, posZ1, posX2, posY2, posZ2, radius, red, green, blue, alpha, reserved);
                iCoronaList.Add(ThisCheck);

                red = 0;
                green = 102;
                blue = 255;
                alpha = 150;
                Function.Call(Hash._SET_CHECKPOINT_ICON_RGBA, ThisCheck, red, green, blue, alpha);

                iList_01[1] = iCorona;
            }
            else
            {
                if (bPrimary)
                {                    //37 == flat 38 == left, 39 == Right, 40 == invert
                    int iCorona = 37;

                    if (iMissionVar_01 == 1)
                        iCorona = 40;
                    else if (iMissionVar_01 == 4)
                        iCorona = 40;
                    else if (iMissionVar_01 == 5)
                        iCorona = 38;
                    else if (iMissionVar_01 == 6)
                        iCorona = 38;
                    else if (iMissionVar_01 == 7)
                        iCorona = 38;
                    else if (iMissionVar_01 == 8)
                        iCorona = 38;
                    else if (iMissionVar_01 == 9)
                        iCorona = 40;
                    else if (iMissionVar_01 == 11)
                        iCorona = 38;
                    else if (iMissionVar_01 == 12)
                        iCorona = 38;
                    else if (iMissionVar_01 == 13)
                        iCorona = 38;
                    else if (iMissionVar_01 == 14)
                        iCorona = 38;
                    else if (iMissionVar_01 == 15)
                        iCorona = 38;
                    else if (iMissionVar_01 == 16)
                    {
                        iList_01[2] = Game.GameTime;
                        iCorona = 38;
                    }
                    else if (iMissionVar_01 == 17)
                        iCorona = 37;
                    else if (iMissionVar_01 == 18)
                        iCorona = 42;

                    float posX1 = vTarget_02.X;
                    float posY1 = vTarget_02.Y;
                    float posZ1 = vTarget_02.Z;
                    float posX2 = vTarget_05.X;
                    float posY2 = vTarget_05.Y;
                    float posZ2 = vTarget_05.Z;
                    float radius = 15.00f;

                    int red = 255;
                    int green = 255;
                    int blue = 0;
                    int alpha = 100;
                    int reserved = 0;

                    int ThisCheck = Function.Call<int>(Hash.CREATE_CHECKPOINT, iCorona, posX1, posY1, posZ1, posX2, posY2, posZ2, radius, red, green, blue, alpha, reserved);
                    iCoronaList.Add(ThisCheck);

                    red = 0;
                    green = 102;
                    blue = 255;
                    alpha = 150;
                    Function.Call(Hash._SET_CHECKPOINT_ICON_RGBA, ThisCheck, red, green, blue, alpha);

                    iList_01[1] = iCorona;
                }
                else
                {
                    int iCorona = 42;

                    float posX1 = vTarget_05.X;
                    float posY1 = vTarget_05.Y;
                    float posZ1 = vTarget_05.Z;
                    float posX2 = vTarget_02.X;
                    float posY2 = vTarget_02.Y;
                    float posZ2 = vTarget_02.Z;
                    float radius = 7.50f;

                    int red = 255;
                    int green = 128;
                    int blue = 0;
                    int alpha = 100;
                    int reserved = 0;

                    int ThisCheck = Function.Call<int>(Hash.CREATE_CHECKPOINT, iCorona, posX1, posY1, posZ1, posX2, posY2, posZ2, radius, red, green, blue, alpha, reserved);
                    iCoronaList.Add(ThisCheck);
                }
            }
        }
        private void Pilot04_ImportBob(Vehicle Vhicary)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Pilot04_ImportBob", tEx);

            int irandCar = RandInt(1, 50);
            if (irandCar < 10)
                Vhicary.NumberPlate = "D3V1L";
            else if (irandCar < 20)
                Vhicary.NumberPlate = "D34TH4U";
            else if (irandCar < 30)
                Vhicary.NumberPlate = "C4TCHM3";
            else if (irandCar < 40)
                Vhicary.NumberPlate = "D3V1L";
            else
                Vhicary.NumberPlate = "M4K3B4NK";
            Vhicary.AttachTo(VehTrackin_02, Vhicary.Handle, new Vector3(0.0f, 0.0f, -3.0f), new Vector3(0.0f, -15.0f, 0.0f));
        }
        private void Pilot06_TakeAPhoto(Ped Pedx)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Pilot06_TakeAPhoto", tEx);

            PedBlimp(Pedx, BlipColor.BlueLight, 0.75f, false, false);
            Function.Call(Hash.TASK_LEAVE_VEHICLE, Pedx, Pedx.CurrentVehicle, 256);
            Script.Wait(1000);
            Pedx.Task.WanderAround();
        }
        private void Pilot06_GoBacktoOff(Ped Pedx)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Pilot06_GoBacktoOff", tEx);

            Function.Call(Hash.TASK_LEAVE_VEHICLE, Pedx, Pedx.CurrentVehicle, 1);
            Script.Wait(1000);
            Pedx.Task.GoTo(vTarget_02);
        }
        private void Ambulance_StartLine()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Ambulance_StartLine", tEx);

            BeOnOff[2] = true;
            VehTrackin_01.CurrentBlip.Remove();
            AddTarget(vTarget_02, true, true, 1.00f, false);
            TheYellowCorona(vTarget_02, 5.00f);
            float fdist = World.CalculateTravelDistance(vTarget_01, vTarget_02);
            int idist = (int)fdist;
            iCrash4Cash += idist / 8;
            int iPack = idist * 65;
            if (iPack < 30000)
                iPack = 30000;

            iTime_01[0] = Game.GameTime + iPack;

            if (BeOnOff[7])
            {
                int iHalf = iPack / 3;
                iTime_01[0] = Game.GameTime + (iHalf * 2);
                iCrash4Cash = 0;
            }

            VTBTimerPool.Add(ttTextBar_02);

            if (BeOnOff[6])
                iCrash4Cash = 0;
            else
                BeOnOff[1] = true;
            BeOnOff[3] = true;
        }
        private void Ambulance_Menu()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Ambulance_Menu", tEx);

            YtmenuPool = new MenuPool();

            string sWhatsTheProb = "";
            if (bCovidInf)
            {
                int iRan = RandInt(1, 5);
                if (iRan == 1)
                    sWhatsTheProb = sAltLang[445];
                else if (iRan == 2)
                    sWhatsTheProb = sAltLang[446];
                else if (iRan == 3)
                    sWhatsTheProb = sAltLang[446] + sAltLang[446] + sAltLang[446];
                else if (iRan == 4)
                    sWhatsTheProb = sAltLang[446] + sAltLang[446] + sAltLang[446] + " .. " + sAltLang[446] + sAltLang[446];
                else
                    sWhatsTheProb = sAltLang[446] + sAltLang[447] + sAltLang[446];
            }
            else if (iList_01[1] == 1)
            {
                int iRan = RandInt(1, 5);
                if (iRan == 1)
                    sWhatsTheProb = sAltLang[440];
                else if (iRan == 2)
                    sWhatsTheProb = sAltLang[441];
                else if (iRan == 3)
                    sWhatsTheProb = sAltLang[442];
                else if (iRan == 4)
                    sWhatsTheProb = sAltLang[443];
                else 
                    sWhatsTheProb = sAltLang[444];
            }       //Injury
            else if (iList_01[1] == 2)
            {
                int iRan = RandInt(1, 5);
                if (iRan == 1)
                    sWhatsTheProb = sAltLang[445];
                else if (iRan == 2)
                    sWhatsTheProb = sAltLang[446];
                else if (iRan == 3)
                    sWhatsTheProb = sAltLang[446] + sAltLang[446] + sAltLang[446];
                else if (iRan == 4)
                    sWhatsTheProb = sAltLang[446] + sAltLang[446] + sAltLang[446] + " .. " + sAltLang[446] + sAltLang[446];
                else
                    sWhatsTheProb = sAltLang[446] + sAltLang[447] + sAltLang[446];
            }       //Covid
            else if (iList_01[1] == 3)
            {
                int iRan = RandInt(1, 5);
                if (iRan == 1)
                    sWhatsTheProb = sAltLang[448];
                else if (iRan == 2)
                    sWhatsTheProb = sAltLang[449];
                else if (iRan == 3)
                    sWhatsTheProb = sAltLang[450];
                else if (iRan == 4)
                    sWhatsTheProb = sAltLang[451];
                else
                    sWhatsTheProb = sAltLang[452];
            }       //Burns
            else if (iList_01[1] == 4)
            {
                int iRan = RandInt(1, 5);
                if (iRan == 1)
                    sWhatsTheProb = sAltLang[453];
                else if (iRan == 2)
                    sWhatsTheProb = sAltLang[454];
                else if (iRan == 3)
                    sWhatsTheProb = sAltLang[455];
                else if (iRan == 4)
                    sWhatsTheProb = sAltLang[456];
                else
                    sWhatsTheProb = sAltLang[457];
            }       //Vomit/Diarea
            else
            {
                int iRan = RandInt(1, 5);
                if (iRan == 1)
                    sWhatsTheProb = sAltLang[458];
                else if (iRan == 2)
                    sWhatsTheProb = sAltLang[459];
                else if (iRan == 3)
                    sWhatsTheProb = sAltLang[460];
                else if (iRan == 4)
                    sWhatsTheProb = sAltLang[461];
                else
                    sWhatsTheProb = sAltLang[462];
            }                             //Fake 

            var mainMenu = new UIMenu(sAltLang[434], sWhatsTheProb);
            mainMenu.ControlDisablingEnabled = true;
            mainMenu.SetMenuWidthOffset(100);
            YtmenuPool.Add(mainMenu);
            Ambulance_Diagnosis(mainMenu);
            YtmenuPool.RefreshIndex();
            bMenuOpen = true;
            mainMenu.Visible = !mainMenu.Visible;
        }
        private void Ambulance_Diagnosis(UIMenu XMen)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Ambulance_Diagnosis", tEx);

            int iAniTime = 4000;

            var Rand_01 = new UIMenuItem(sAltLang[435], "");

            var Rand_02 = new UIMenuItem(sAltLang[436], "");

            var Rand_03 = new UIMenuItem(sAltLang[437], "");

            var Rand_04 = new UIMenuItem(sAltLang[438], "");

            var Rand_05 = new UIMenuItem(sAltLang[439], "");

            XMen.AddItem(Rand_01);
            XMen.AddItem(Rand_02);
            XMen.AddItem(Rand_03);
            XMen.AddItem(Rand_04);
            XMen.AddItem(Rand_05);

            XMen.OnItemSelect += (sender, item, index) =>
            {
                if (item == Rand_01)
                {
                    if (iList_01[1] == 1)
                    {
                        iCrash4Cash = RandInt(50, 100);
                        iMissionSeq = 15;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                    else if (iList_01[1] == 2)
                    {
                        bCovidInf = true;
                        BeOnOff[6] = true;
                        iMissionSeq = 16;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                    else if (iList_01[1] == 3)
                    {
                        BeOnOff[7] = true;
                        iMissionSeq = 16;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                    else if (iList_01[1] == 4)
                    {
                        BeOnOff[7] = true;
                        iMissionSeq = 16;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                    else
                    {
                        BeOnOff[6] = true;
                        iMissionSeq = 16;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                }
                else if (item == Rand_02)
                {
                    if (iList_01[1] == 1)
                    {
                        BeOnOff[7] = true;
                        iMissionSeq = 16;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                    else if (iList_01[1] == 2)
                    {
                        iCrash4Cash = RandInt(50, 100);
                        iMissionSeq = 15;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                    else if (iList_01[1] == 3)
                    {
                        BeOnOff[7] = true;
                        iMissionSeq = 16;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                    else if (iList_01[1] == 4)
                    {
                        BeOnOff[7] = true;
                        iMissionSeq = 16;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                    else
                    {
                        BeOnOff[6] = true;
                        iMissionSeq = 16;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                }
                else if (item == Rand_03)
                {
                    if (iList_01[1] == 1)
                    {
                        BeOnOff[7] = true;
                        iMissionSeq = 16;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                    else if (iList_01[1] == 2)
                    {
                        bCovidInf = true;
                        BeOnOff[6] = true;
                        iMissionSeq = 16;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                    else if (iList_01[1] == 3)
                    {
                        iCrash4Cash = RandInt(50, 100);
                        iMissionSeq = 15;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                    else if (iList_01[1] == 4)
                    {
                        BeOnOff[7] = true;
                        iMissionSeq = 16;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                    else
                    {
                        BeOnOff[6] = true;
                        iMissionSeq = 16;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                }
                else if (item == Rand_04)
                {
                    if (iList_01[1] == 1)
                    {
                        BeOnOff[7] = true;
                        iMissionSeq = 16;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                    else if (iList_01[1] == 2)
                    {
                        BeOnOff[6] = true;
                        bCovidInf = true;
                        iMissionSeq = 16;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                    else if (iList_01[1] == 3)
                    {
                        BeOnOff[7] = true;
                        iMissionSeq = 16;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                    else if (iList_01[1] == 4)
                    {
                        iCrash4Cash = RandInt(50, 100);
                        iMissionSeq = 15;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                    else
                    {
                        BeOnOff[6] = true;
                        iMissionSeq = 16;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                }
                else if (item == Rand_05)
                {
                    if (iList_01[1] == 1)
                    {
                        iMissionSeq = 17;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                    }
                    else if (iList_01[1] == 2)
                    {
                        bCovidInf = true;
                        iMissionSeq = 18;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                    }
                    else if (iList_01[1] == 3)
                    {
                        iMissionSeq = 17;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                    }
                    else if (iList_01[1] == 4)
                    {
                        iMissionSeq = 17;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                    }
                    else
                    {
                        iCrash4Cash = RandInt(50, 100);
                        iMissionSeq = 18;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                    }
                }

                bMenuOpen = false;
                XMen.Visible = !XMen.Visible;
            };
        }
        private void Ambulance_Fluids(int iMessy)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Ambulance_Fluids, iMessy == " + iMessy, tEx);

            if (iMessy == 1)
            {
                sList_01.Add("scr_solomon3");
                sList_01.Add("scr_trev4_747_blood_splash");
                sList_01.Add("cut_trevor1");
                sList_01.Add("cs_trev1_blood_pool");
                sList_01.Add("core"); 
                sList_01.Add("ped_foot_decal_blood");
            }
            else if (iMessy == 2)
            {

            }
            else if (iMessy == 3)
            {
                sList_01.Add("cut_chinese1");
                sList_01.Add("cs_cig_exhale_mouth");
                sList_01.Add("cut_chinese1");
                sList_01.Add("cs_cig_smoke");
                sList_01.Add("core");
                sList_01.Add("ent_amb_smoke_factory_white");
            }
            else if (iMessy == 4)
            {
                sList_01.Add("scr_reburials");
                sList_01.Add("scr_burial_dirt");
                sList_01.Add("scr_player_timetable_scene");
                sList_01.Add("scr_pts_vomit_water");
                sList_01.Add("core");
                sList_01.Add("ent_amb_fly_swarm");
            }
        }
        private void Follow_ButTherArntAny()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Follow_ButTherArntAny", tEx);

            vGetaway = World.GetNextPositionOnStreet(VectorList_02[0].Around(550.00f));
            while (vGetaway.DistanceTo(VectorList_02[0]) < 150.00f || World.GetZoneNameLabel(vGetaway) == "AIRP" || World.GetZoneNameLabel(vGetaway) == "ARMYB" || World.GetZoneNameLabel(vGetaway) == "JAIL")
                vGetaway = World.GetNextPositionOnStreet(VectorList_02[0].Around(550.00f));
            AddTarget(vGetaway, true, true, 250.00f, false);
        }
        private void Follow_AmbushPlayer()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Follow_AmbushPlayer", tEx);

            iMissionVar_03 = iMissionVar_03 - 1;
            int iNpNum = RandInt(6, 12);
            iAmbushCount = iNpNum + 2;
            while (iNpNum > 0)
            {
                iNpNum -= 1;
                int iLocal = 0;
                if (iMissionVar_03 > 0)
                    iLocal = RandInt(0, iMissionVar_03);
                Vector3 Vrond = VectorList_01[iLocal];
                NPCSpawn(RandNPC(RandInt(1, 35)), Vrond, 0.00f, 55, 180, 2, 0, 0, null, 7, true, true, 0, 0);
            }
        }
        private void Follow_DefToOff()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Follow_DefToOff", tEx);

            VehTrackin_01.CurrentBlip.Remove();
            Function.Call(Hash.TASK_LEAVE_VEHICLE, Npc_01, Npc_01.CurrentVehicle, 256);
            Function.Call(Hash.TASK_LEAVE_VEHICLE, Npc_02, Npc_02.CurrentVehicle, 256);
            Npc_01.Task.ClearAll();
            Npc_02.Task.ClearAll();
            PedBlimp(Npc_01, BlipColor.Red, 0.75f, false, false);
            PedBlimp(Npc_02, BlipColor.Red, 0.75f, false, false);
            FightingPlayer(Npc_01);
            FightingPlayer(Npc_02);
        }
        private void Follow_CArSaleSeatChecker()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Follow_CArSaleSeatChecker", tEx);

            int iSittinON = VehTrackin_01.PassengerSeats;
            while (iSittinON > 1)
            {
                FreeSeat(VehTrackin_01, iSittinON, false);
                iSittinON -= 1;
            }
        }
        private void Follow_SpiningAround(Vehicle VSpin)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Follow_SpiningAround", tEx);

            Vehicle VRota = World.GetClosestVehicle(VSpin.Position, 30.00f);
            VSpin.Rotation = VRota.Rotation;
        }
        private void Follow_RunToHeli()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Follow_RunToHeli", tEx);

            Function.Call(Hash.TASK_LEAVE_VEHICLE, Npc_01, Npc_01.CurrentVehicle, 1);
            Function.Call(Hash.TASK_LEAVE_VEHICLE, Npc_02, Npc_02.CurrentVehicle, 1);
            Script.Wait(500);
            EnterAnyVeh(VehTrackin_02, Npc_01, 1, 2.00f);
            Script.Wait(500);
            EnterAnyVeh(VehTrackin_02, Npc_02, 2, 2.00f);
        }
        private void Fire_StartinFires()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Fire_StartinFires", tEx);

            int iSee = VectorList_01.Count - 1;
            int iCounts = RandInt(0, iSee);
            while (VectorList_01[iCounts] == vTarget_01)
                iCounts = RandInt(0, iSee);

            vTarget_01 = VectorList_01[iCounts];
        }
        public bool Fire_BurnOut()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Fire_BurnOut", tEx);

            bool bOver = false;

            if (iMissionVar_02 < Game.GameTime)
                bOver = true;
            else
            {
                int iTimeLeft = Game.GameTime - iMissionVar_02;
                iTimeLeft = iTimeLeft + 60000;
                float fSake = (int)iTimeLeft;
                float fTimeLeft = fSake / 60000.00f;

                float fCash = fTimeLeft * 1000.00f;
                double iRewRD = (float)fCash;
                iCashBouns = 1000 - (int)Math.Floor(iRewRD);

                if (fTimeLeft > 0.90)
                    BtSlideBar.ForegroundColor = Color.Red;
                else
                    BtSlideBar.ForegroundColor = Color.Yellow;

                BtSlideBar.Percentage = fTimeLeft;
                ttTextBar_01.Text = "$ " + iCashBouns + "";

                VTBTimerPool.Draw();
            }
            return bOver;
        }
        public bool Fire_IntheHall(Vector3 VFire)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Fire_IntheHall", tEx);

            bool Bfiredup = false;
            int iFirey = Function.Call<int>(Hash.GET_NUMBER_OF_FIRES_IN_RANGE, VFire.X, VFire.Y, VFire.Z, 5.00f);
            if (iFirey < 1)
                Bfiredup = true;
            return Bfiredup;
        }
        private void Fire_ShootRanPed()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Fire_ShootRanPed", tEx);

            iWait4Sec = Game.GameTime + RandInt(1000, 3000);
            bool pEddFound = false;
            Ped[] PedTargs = World.GetNearbyPeds(Npc_01.Position, 25.00f);
            for (int i = 0; i < PedTargs.Count(); i++)
            {
                if (PedExists(PedTargs, i) && !pEddFound)
                {
                    if (!PedTargs[i].IsInVehicle())
                    {
                        Npc_01.Task.VehicleShootAtPed(PedTargs[i]);
                        pEddFound = true;
                        break;
                    }
                }
            }
        }
        private void Johnny_PlayerAntics()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Johnny_PlayerAntics", tEx);

            int RandSettin = RandInt(0, 40);
            if (RandSettin < 10)
            {
                int iNpNum = RandInt(1, 5);
                while (iNpNum > 0)
                {
                    iNpNum -= 1;
                    Vector3 Vrond = vTarget_01.Around(5.00f);
                    NPCSpawn(RandNPC(RandInt(1, 35)), Vrond, 0.00f, 10, 0, 0, 26, 0, null, 0, false, false, 0, 0);
                }
            }
            else if (RandSettin < 20)
            {
                int iNpNum = RandInt(1, 5);
                int iRanVeh = RandInt(1, 25);
                while (iNpNum > 0)
                {
                    iNpNum -= 1;
                    Vector3 Vrond = vTarget_01.Around(25.00f);
                    List<string> SCarz = RandVeh(iRanVeh);
                    string sXCArs = SCarz[RandInt(0, SCarz.Count - 1)];

                    VehicleSpawn(sXCArs, Vrond, 0.0f, false, false, false, false, 14, 0, 0, 0, false);
                }
            }
        }
        private void Racist01_CuttinCoroners()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Racist01_CuttinCoroners", tEx);

            List<Vector3> tyres = new List<Vector3>();
            List<Vector3> DIrtyres = new List<Vector3>();
            List<Vector3> Barria5b = new List<Vector3>();
            List<Vector3> DIrBarria5b = new List<Vector3>();
            List<Vector3> Barria5c = new List<Vector3>();
            List<Vector3> DIrBarria5c = new List<Vector3>();

            //prop_offroad_tyres02
            tyres.Add(new Vector3(122.46772f, -1402.58154f, 28.2209042f));
            DIrtyres.Add(new Vector3(0f, 0f, 43.4979668f));

            tyres.Add(new Vector3(134.731232f, -1122.40649f, 28.2854965f));
            DIrtyres.Add(new Vector3(0f, 0f, -90.3373718f));

            tyres.Add(new Vector3(189.030289f, -1119.86292f, 28.3538044f));
            DIrtyres.Add(new Vector3(0f, 0f, -39.3384705f));

            tyres.Add(new Vector3(267.302094f, -960.90448f, 28.2495869f));
            DIrtyres.Add(new Vector3(0f, 0f, -62.7546768f));

            tyres.Add(new Vector3(447.244843f, -948.033752f, 27.7269848f));
            DIrtyres.Add(new Vector3(0f, 0f, -35.8590736f));

            tyres.Add(new Vector3(491.717438f, -963.937744f, 26.2332829f));
            DIrtyres.Add(new Vector3(0f, 0f, 145.158417f));

            tyres.Add(new Vector3(490.921295f, -1248.39526f, 28.2085484f));
            DIrtyres.Add(new Vector3(0f, 0f, 79.8484573f));

            tyres.Add(new Vector3(369.98996f, -1280.54028f, 31.4419361f));
            DIrtyres.Add(new Vector3(0f, 0f, 76.744278f));

            tyres.Add(new Vector3(355.938202f, -1322.16223f, 31.3997276f));
            DIrtyres.Add(new Vector3(0f, 0f, -137.257172f));

            tyres.Add(new Vector3(364.90448f, -1360.60632f, 31.0141903f));
            DIrtyres.Add(new Vector3(0f, 0f, -126.578819f));

            tyres.Add(new Vector3(384.523956f, -1383.27698f, 29.5502499f));
            DIrtyres.Add(new Vector3(0f, 0f, -140.356598f));

            tyres.Add(new Vector3(528.631592f, -1443.76416f, 28.4827259f));
            DIrtyres.Add(new Vector3(0f, 0f, -106.975151f));

            tyres.Add(new Vector3(528.105896f, -1453.0918f, 28.4733265f));
            DIrtyres.Add(new Vector3(0f, 0f, -8.25796509f));

            tyres.Add(new Vector3(515.173828f, -1459.48267f, 28.2009857f));
            DIrtyres.Add(new Vector3(0f, 0f, 133.603577f));

            tyres.Add(new Vector3(-3.41955328f, -1709.98901f, 28.2653797f));
            DIrtyres.Add(new Vector3(0f, 0f, 101.067284f));

            tyres.Add(new Vector3(-66.3390732f, -1700.91211f, 28.3244007f));
            DIrtyres.Add(new Vector3(0f, 0f, 48.3295479f));

            tyres.Add(new Vector3(-50.748188f, -1615.15039f, 28.5367039f));
            DIrtyres.Add(new Vector3(0f, 0f, -39.5391006f));

            tyres.Add(new Vector3(162.163742f, -1136.48083f, 28.2811192f));
            DIrtyres.Add(new Vector3(0f, 0f, -94.883606f));

            //prop_barier_conc_05b
            Barria5b.Add(new Vector3(110.921623f, -1339.88501f, 28.2572842f));
            DIrBarria5b.Add(new Vector3(0f, 0f, 31.9550514f));

            Barria5b.Add(new Vector3(83.4083786f, -1295.09045f, 28.2713833f));
            DIrBarria5b.Add(new Vector3(0f, 0f, 29.2692757f));

            Barria5b.Add(new Vector3(215.495865f, -1004.33557f, 28.2150841f));
            DIrBarria5b.Add(new Vector3(0f, 0f, -19.8856354f));

            Barria5b.Add(new Vector3(269.79306f, -963.805542f, 28.2771168f));
            DIrBarria5b.Add(new Vector3(0f, 0f, -54.2640572f));

            Barria5b.Add(new Vector3(395.188965f, -944.879211f, 28.3552189f));
            DIrBarria5b.Add(new Vector3(0f, 0f, -87.0277557f));

            Barria5b.Add(new Vector3(359.1474f, -1320.27161f, 31.4880676f));
            DIrBarria5b.Add(new Vector3(0f, 0f, -147.598572f));

            Barria5b.Add(new Vector3(361.209015f, -1364.48608f, 30.8907452f));
            DIrBarria5b.Add(new Vector3(0f, 0f, -129.105026f));

            Barria5b.Add(new Vector3(525.075928f, -1443.69983f, 28.4256954f));
            DIrBarria5b.Add(new Vector3(0f, 0f, 178.272415f));

            Barria5b.Add(new Vector3(528.781006f, -1447.57849f, 28.4044838f));
            DIrBarria5b.Add(new Vector3(0f, 0f, -89.0889969f));

            Barria5b.Add(new Vector3(525.234375f, -1449.87964f, 28.3978481f));
            DIrBarria5b.Add(new Vector3(0f, 0f, -58.0283356f));

            Barria5b.Add(new Vector3(518.058044f, -1443.28809f, 28.3465939f));
            DIrBarria5b.Add(new Vector3(0f, 0f, -40.3511009f));

            Barria5b.Add(new Vector3(459.665161f, -1437.22156f, 28.4974918f));
            DIrBarria5b.Add(new Vector3(0f, 0f, -167.915848f));

            Barria5b.Add(new Vector3(467.140961f, -1435.75891f, 28.3444614f));
            DIrBarria5b.Add(new Vector3(0f, 0f, -167.055756f));

            Barria5b.Add(new Vector3(475.003479f, -1433.80078f, 28.3439007f));
            DIrBarria5b.Add(new Vector3(0f, 0f, -163.846619f));

            Barria5b.Add(new Vector3(482.640839f, -1432.68225f, 28.3435593f));
            DIrBarria5b.Add(new Vector3(0f, 0f, -176.133057f));

            Barria5b.Add(new Vector3(490.243378f, -1432.97522f, 28.3437958f));
            DIrBarria5b.Add(new Vector3(0f, 0f, 173.305527f));

            Barria5b.Add(new Vector3(497.894958f, -1434.34961f, 28.3437843f));
            DIrBarria5b.Add(new Vector3(0f, 0f, 168.938705f));

            Barria5b.Add(new Vector3(505.740204f, -1436.14612f, 28.3444023f));
            DIrBarria5b.Add(new Vector3(0f, 0f, 163.636688f));

            Barria5b.Add(new Vector3(512.548828f, -1439.16479f, 28.3457832f));
            DIrBarria5b.Add(new Vector3(0f, 0f, 147.398254f));

            Barria5b.Add(new Vector3(463.30603f, -1402.93921f, 28.2705708f));
            DIrBarria5b.Add(new Vector3(0f, 0f, -115.698044f));

            Barria5b.Add(new Vector3(499.068054f, -1415.24463f, 28.2942982f));
            DIrBarria5b.Add(new Vector3(0f, 0f, -95.4208755f));

            Barria5b.Add(new Vector3(304.983093f, -1539.54712f, 28.3010712f));
            DIrBarria5b.Add(new Vector3(0f, 0f, 119.050766f));

            Barria5b.Add(new Vector3(290.046997f, -1552.2157f, 28.2959747f));
            DIrBarria5b.Add(new Vector3(0f, 0f, 117.944687f));

            Barria5b.Add(new Vector3(251.510681f, -1570.3252f, 28.2937469f));
            DIrBarria5b.Add(new Vector3(0f, 0f, 119.295738f));

            Barria5b.Add(new Vector3(35.6568375f, -1695.77893f, 28.2886333f));
            DIrBarria5b.Add(new Vector3(0f, 0f, 124.663857f));

            Barria5b.Add(new Vector3(-21.9301167f, -1720.48315f, 28.2897129f));
            DIrBarria5b.Add(new Vector3(0f, 0f, 113.118652f));

            Barria5b.Add(new Vector3(-64.1996002f, -1698.14136f, 28.1586208f));
            DIrBarria5b.Add(new Vector3(0f, 0f, 51.8217163f));

            Barria5b.Add(new Vector3(127.637085f, -1451.76343f, 28.2965965f));
            DIrBarria5b.Add(new Vector3(0f, 0f, -40.4909897f));


            //prop_barier_conc_05c
            Barria5c.Add(new Vector3(119.922188f, -1402.82202f, 28.3287086f));
            DIrBarria5c.Add(new Vector3(0f, 0f, 5.71901083f));

            Barria5c.Add(new Vector3(44.2727737f, -1185.3949f, 28.3193874f));
            DIrBarria5c.Add(new Vector3(0f, 0f, 0.750671625f));

            Barria5c.Add(new Vector3(134.736282f, -1119.88855f, 28.3493576f));
            DIrBarria5c.Add(new Vector3(0f, 0f, -90.3373718f));

            Barria5c.Add(new Vector3(161.939865f, -1139.49316f, 28.3205223f));
            DIrBarria5c.Add(new Vector3(0f, 0f, -93.1709976f));

            Barria5c.Add(new Vector3(186.538162f, -1117.75452f, 28.3043823f));
            DIrBarria5c.Add(new Vector3(0f, 0f, -39.3384705f));

            Barria5c.Add(new Vector3(446.926697f, -945.237732f, 27.7108383f));
            DIrBarria5c.Add(new Vector3(0f, 0f, -86.522171f));

            Barria5c.Add(new Vector3(382.359833f, -1385.38782f, 29.5984516f));
            DIrBarria5c.Add(new Vector3(0f, 0f, -132.186996f));

            Barria5c.Add(new Vector3(480.914886f, -1410.19495f, 28.3370304f));
            DIrBarria5c.Add(new Vector3(0f, 0f, -102.849426f));

            Barria5c.Add(new Vector3(513.25238f, -1458.83459f, 28.2676449f));
            DIrBarria5c.Add(new Vector3(0f, 0f, -137.689453f));

            Barria5c.Add(new Vector3(466.083008f, -1453.17126f, 28.3300266f));
            DIrBarria5c.Add(new Vector3(0f, 0f, -81.9346542f));

            Barria5c.Add(new Vector3(454.647827f, -1455.87292f, 28.3243465f));
            DIrBarria5c.Add(new Vector3(0f, 0f, 112.986038f));

            Barria5c.Add(new Vector3(434.78006f, -1464.86206f, 28.3290043f));
            DIrBarria5c.Add(new Vector3(0f, 0f, 124.36203f));

            Barria5c.Add(new Vector3(404.466461f, -1482.51245f, 28.3287659f));
            DIrBarria5c.Add(new Vector3(0f, 0f, 119.748581f));

            Barria5c.Add(new Vector3(378.707764f, -1497.11279f, 28.3295612f));
            DIrBarria5c.Add(new Vector3(0f, 0f, 121.408302f));

            Barria5c.Add(new Vector3(357.973755f, -1509.37952f, 28.3255081f));
            DIrBarria5c.Add(new Vector3(0f, 0f, 133.542206f));

            Barria5c.Add(new Vector3(221.061432f, -1588.55225f, 28.3352489f));
            DIrBarria5c.Add(new Vector3(0f, 0f, 128.105988f));

            Barria5c.Add(new Vector3(204.273041f, -1597.25732f, 28.3782368f));
            DIrBarria5c.Add(new Vector3(0f, 0f, 124.09008f));

            Barria5c.Add(new Vector3(182.068329f, -1611.32544f, 28.3483143f));
            DIrBarria5c.Add(new Vector3(0f, 0f, 124.726067f));

            Barria5c.Add(new Vector3(86.4852676f, -1666.45117f, 28.2754936f));
            DIrBarria5c.Add(new Vector3(0f, 0f, 129.008636f));

            Barria5c.Add(new Vector3(-1.97026682f, -1712.42456f, 28.3230057f));
            DIrBarria5c.Add(new Vector3(0f, 0f, 115.200958f));

            Barria5c.Add(new Vector3(-52.7458801f, -1613.45166f, 28.3278618f));
            DIrBarria5c.Add(new Vector3(0f, 0f, -33.5547562f));

            for (int i = 0; i < tyres.Count; i++)
                BuildProp("prop_offroad_tyres02", tyres[i], DIrtyres[i], true, true);

            for (int i = 0; i < Barria5b.Count; i++)
                BuildProp("prop_barier_conc_05b", Barria5b[i], DIrBarria5b[i], true, true);

            for (int i = 0; i < Barria5c.Count; i++)
                BuildProp("prop_barier_conc_05c", Barria5c[i], DIrBarria5c[i], true, true);

            bCutingCul = true;
            Function.Call((Hash)0x9BAE5AD2508DF078, true);
        }
        private void Racist03_HillRun()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Racist03_HillRun", tEx);

            List<Vector3> Ramp = new List<Vector3>();
            List<Vector3> DirRamp = new List<Vector3>();

            List<Vector3> Barria = new List<Vector3>();
            List<Vector3> DIrBarria = new List<Vector3>();

            //xs_prop_x18_flatbed_ramp
            Ramp.Add(new Vector3(-2574.48193f, -141.341949f, 20.5641022f));
            DirRamp.Add(new Vector3(-10.00f, -4.334721f, -35.195816f));

            Ramp.Add(new Vector3(-2570.40015f, -144.145248f, 20.5497684f));
            DirRamp.Add(new Vector3(-7.999998f, -0.00f, -34.9950371f));

            //ba_prop_battle_barrier_02a
            Barria.Add(new Vector3(-2567.00317f, -142.685059f, 21.2081394f));
            DIrBarria.Add(new Vector3(-8.99999428f, 11.5999641f, -169.04039f));

            Barria.Add(new Vector3(-2564.80737f, -142.008041f, 21.7090607f));
            DIrBarria.Add(new Vector3(-1.00000131f, 10.9999943f, -167.961807f));

            Barria.Add(new Vector3(-2571.99585f, -141.98912f, 20.5829697f));
            DIrBarria.Add(new Vector3(0f, 0f, 144.958115f));

            Barria.Add(new Vector3(-2575.01318f, -138.19809f, 20.9650898f));
            DIrBarria.Add(new Vector3(-8.999998f, -9.9999876f, 114.058754f));

            Barria.Add(new Vector3(-2575.1001f, -135.624237f, 21.6847382f));
            DIrBarria.Add(new Vector3(-3.00f, -15.9999781f, 90.1086349f));

            for (int i = 0; i < Ramp.Count; i++)
                BuildProp("xs_prop_x18_flatbed_ramp", Ramp[i], DirRamp[i], true, true);

            for (int i = 0; i < Barria.Count; i++)
                BuildProp("ba_prop_battle_barrier_02a", Barria[i], DIrBarria[i], true, true);


            Vector3 PropX = new Vector3(-2334.56836f, 390.689636f, 173.520493f);
            Vector3 PropR = new Vector3(0.00f, 0.00f, 114.343819f);
            BuildProp("prop_byard_rampold_cr", PropX, PropR, true, true);

            PropX = new Vector3(-2198.53613f, 184.315048f, 171.740598f);
            PropR = new Vector3(0.00f, -10.50f, 116.3285f);
            BuildProp("xs_prop_arena_pipe_ramp_01a", PropX, PropR, true, true);

            PropX = new Vector3(-2266.31201f, 258.361664f, 173.58552f);
            PropR = new Vector3(0.00f, 0.00f, 110.899078f);
            BuildProp("lts_prop_lts_ramp_02", PropX, PropR, true, true);

            PropX = new Vector3(-2286.13672f, 248.969284f, 169.193893f);
            PropR = new Vector3(0.00f, 0.00f, 112.677765f);
            BuildProp("stt_prop_tyre_wall_02", PropX, PropR, true, true);

            PropX = new Vector3(-2335.29443f, 392.395569f, 173.546069f);
            PropR = new Vector3(0.00f, 0.00f, 23.607132f);
            BuildProp("prop_mp_ramp_03", PropX, PropR, true, true);
        }
        private void Racist06_Yachtclub()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Racist06_Yachtclub", tEx);

            PropList_01.Clear();

            for (int i = 0; i < VectorList_01.Count; i++)
            {
                Vector3 vCheckP = VectorList_01[i];
                Vector3 vCheckR = new Vector3(0.00f, 0.00f, fList_02[i]);
                vCheckP.Z = -25.00f;
                Prop Popoff = BuildProp("ar_prop_ar_neon_gate_02a", vCheckP, vCheckR, true, true);
                if (Popoff != null)
                    Popoff.HasCollision = false;
            }
        }
        public List<string> Racist_Carz(int iRace)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Racist_Carz, iRace == " + iRace, tEx);

            List<string> sVehicles = new List<string>();

            if (iRace == 1)
            {
                if (bTrainM)
                {
                    sVehicles.Add("FORMULA"); //<!-- PR4, should be Open Wheel class-->
                    sVehicles.Add("FORMULA2"); //<!-- R88, should be Open Wheel class-->
                    sVehicles.Add("OPENWHEEL1"); //
                    sVehicles.Add("OPENWHEEL2"); //
                }
                else
                {
                    sVehicles.Add("SPEEDO2"); //<!-- Clown Van -->
                    sVehicles.Add("TACO"); //
                }
                if (sCustomCarz.Count > 0)
                {
                    for (int i = 0; i < sCustomCarz.Count; i++)
                        sVehicles.Add(sCustomCarz[i]);
                }
            }
            else if (iRace == 2)
            {
                sVehicles.Add("SEASHARK"); //
                sVehicles.Add("SEASHARK2"); //<!-- Lifeguard Seashark -->
                sVehicles.Add("SEASHARK3"); //<!-- Seashark yacht variant -->

                if (sCustomBoatsz.Count > 0)
                {
                    for (int i = 0; i < sCustomBoatsz.Count; i++)
                        sVehicles.Add(sCustomBoatsz[i]);
                }
            }
            else if (iRace == 3)
            {
                sVehicles.Add("BMX"); //
                sVehicles.Add("CRUISER"); //
                sVehicles.Add("TRIBIKE2"); //<!-- Endurex Race Bike -->
                sVehicles.Add("FIXTER"); //
                sVehicles.Add("SCORCHER"); //
                sVehicles.Add("TRIBIKE3"); //<!-- Tri-Cycles Race Bike -->
                sVehicles.Add("TRIBIKE"); //<!-- Whippet Race Bike -->
            }
            else if (iRace == 4)
            {
                sVehicles.Add("BUZZARD2"); //<!-- Buzzard -->
                sVehicles.Add("HAVOK"); //
                sVehicles.Add("FROGGER"); //
                if (bTrainM)
                    sVehicles.Add("SEASPARROW2"); //

                if (sCustomChopperz.Count > 0)
                {
                    for (int i = 0; i < sCustomChopperz.Count; i++)
                        sVehicles.Add(sCustomChopperz[i]);
                }
            }
            else if (iRace == 5)
            {
                sVehicles.Add("AKUMA"); //
                sVehicles.Add("AVARUS"); //
                sVehicles.Add("CHIMERA"); //
                sVehicles.Add("DEFILER"); //
                sVehicles.Add("DIABLOUS"); //
                sVehicles.Add("DIABLOUS2"); //<!-- Diabolus Custom -->
                sVehicles.Add("DOUBLE"); //
                sVehicles.Add("ENDURO"); //
                sVehicles.Add("ESSKEY"); //
                sVehicles.Add("FAGGIO2"); //
                sVehicles.Add("FAGGIO3"); //<!-- Faggio Mod -->
                sVehicles.Add("FAGGIO"); //<!-- Faggio Sport -->
                sVehicles.Add("GARGOYLE"); //
                sVehicles.Add("HAKUCHOU"); //
                sVehicles.Add("HAKUCHOU2"); //<!-- Hakuchou Drag -->
                sVehicles.Add("HEXER"); //
                sVehicles.Add("INNOVATION"); //
                sVehicles.Add("LECTRO"); //
                sVehicles.Add("MANCHEZ"); //
                sVehicles.Add("NEMESIS"); //
                sVehicles.Add("NIGHTBLADE"); //
                sVehicles.Add("PCJ"); //
                sVehicles.Add("RATBIKE"); //
                sVehicles.Add("RUFFIAN"); //
                sVehicles.Add("SANCHEZ"); //<!-- Sanchez livery variant -->
                sVehicles.Add("SANCHEZ2"); //
                sVehicles.Add("THRUST"); //
                sVehicles.Add("VADER"); //
                sVehicles.Add("VINDICATOR"); //
                sVehicles.Add("WOLFSBANE"); //
                sVehicles.Add("ZOMBIEB"); //<!-- Zombie Chopper -->
                if (bTrainM)
                {
                    sVehicles.Add("MANCHEZ2"); //><!-- Maibatsu Manchez Scout -->
                }
            }
            else if (iRace == 6)
            {
                sVehicles.Add("MARQUIS");
            }
            else if (iRace == 7)
            {
                sVehicles.Add("SULTANRS");
                sVehicles.Add("COMET4");
                sVehicles.Add("TAMPA2");
                sVehicles.Add("GB200");
                sVehicles.Add("KURUMA");
                sVehicles.Add("TROPHYTRUCK2");
                sVehicles.Add("TROPHYTRUCK");
                if (bTrainM)
                {
                    sVehicles.Add("ISSI7");
                    sVehicles.Add("SUGOI");
                    sVehicles.Add("SULTAN2");
                    sVehicles.Add("WINKY");
                    sVehicles.Add("OUTLAW");
                    sVehicles.Add("VAGRANT");
                }

                if (sCustomCarz.Count > 0)
                {
                    for (int i = 0; i < sCustomCarz.Count; i++)
                        sVehicles.Add(sCustomCarz[i]);
                }
            }
            else if (iRace == 8)
            {
                for (int i = 0; i < sList_01.Count; i++)
                    sVehicles.Add(sList_01[i]);
            }
            return sVehicles;
        }
        private void Racist_StartLine()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Racist_StartLine", tEx);

            VehTrackin_01.CurrentBlip.Remove();
            VehTrackin_01 = Game.Player.Character.CurrentVehicle;
            if (!VehTrackin_01.IsPersistent)
            {
                VehTrackin_01.IsPersistent = true;
                bIsVehPers = true;
            }
            VehTrackin_01.FreezePosition = true;
            Game.FadeScreenOut(1000);
            Script.Wait(1000);
            VehTrackin_01.Position = vTarget_05;
            VehTrackin_01.Heading = fList_01[1];

            if (iLocationX == 2 || iLocationX == 6)
            {
                VehTrackin_01.FreezePosition = false;
                VehTrackin_01.IsDriveable = false;
                Function.Call(Hash.SET_BOAT_ANCHOR, VehTrackin_01, true);
            }

            if (!bSoloRace)
            {
                if (sMissionVar_01 == "")
                {
                    sMissionVar_01 = sList_01[RandInt(0, sList_01.Count - 1)];
                }

                VehicleSpawn(sMissionVar_01, VectorList_03[1], fList_01[1], false, BeOnOff[0], false, false, 21, 0, 0, 2, true);
                VehicleSpawn(sMissionVar_01, VectorList_03[2], fList_01[2], false, BeOnOff[0], false, false, 21, 0, 0, 3, true);
                VehicleSpawn(sMissionVar_01, VectorList_03[3], fList_01[3], false, BeOnOff[0], false, false, 21, 0, 0, 4, true);

                NPCSpawn(RandNPC(iList_02[10]), VehTrackin_02.Position, 0.00f, 65, 120, 0, 14, 1, VehTrackin_02, 0, true, false, 1, 0);
                NPCSpawn(RandNPC(iList_02[10]), VehTrackin_03.Position, 0.00f, 65, 120, 0, 14, 1, VehTrackin_03, 0, true, false, 2, 0);
                NPCSpawn(RandNPC(iList_02[10]), VehTrackin_04.Position, 0.00f, 65, 120, 0, 14, 1, VehTrackin_04, 0, true, false, 3, 0);
            }

            Game.FadeScreenIn(1000);
            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "NET_RACE_START_EVENT_MASTER", 0, true);

            Function.Call(Hash.DISPLAY_RADAR, false);

            Vector3 Campo = VehTrackin_01.Position + (VehTrackin_01.ForwardVector * 4.00f) + (VehTrackin_01.UpVector * 1.50f);
            if (iLocationX == 6 || iLocationX == 4)
                Campo = VehTrackin_01.Position + (VehTrackin_01.ForwardVector * 14.00f) + (VehTrackin_01.UpVector * 3.00f);

            Vector3 Camro = new Vector3(0.00f, 0.00f, VehTrackin_01.Heading - 180.00f);

            cCams = World.CreateCamera(Campo, Camro, 50.00f);
            Function.Call(Hash.RENDER_SCRIPT_CAMS, 1, 1, cCams.Handle, 0, 0);
            Script.Wait(8000);

            CleanCams();
            RemoveTargets();
            CleanFakeBlips();
            fMaxSpeed = Function.Call<float>(Hash._GET_VEHICLE_MAX_SPEED, VehTrackin_01.Model);
        }
        private void Racist_CountDown()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Racist_CountDown", tEx);

            iList_02[4] = Game.GameTime + 1000;

            if (iMissionVar_02 == 5)
                MkStart = MarkerType.Number4;
            else if (iMissionVar_02 == 4)
                MkStart = MarkerType.Number3;
            else if (iMissionVar_02 == 3)
                MkStart = MarkerType.Number2;
            else
                MkStart = MarkerType.Number1;
            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "CHECKPOINT_UNDER_THE_BRIDGE", "HUD_MINI_GAME_SOUNDSET", true);
            iMissionVar_02 -= 1;

            if (!bSoloRace)
            {
                int iPlayHorn = RandInt(1, 4);
                int iPlayFor = RandInt(500, 900);
                if (iPlayHorn == 1)
                    VehTrackin_02.SoundHorn(iPlayFor);
                else if (iPlayHorn == 2)
                    VehTrackin_03.SoundHorn(iPlayFor);
                else if (iPlayHorn == 3)
                    VehTrackin_04.SoundHorn(iPlayFor);
                else
                {
                    VehTrackin_02.SoundHorn(iPlayFor);
                    VehTrackin_04.SoundHorn(iPlayFor -150);
                }
            }
        }
        private void Racist_PosTime(bool bLapX)
        {
            if (!bSoloRace)
            {
                int iRaceRiot = 4;

                if (iList_02[0] == iList_02[1])
                {
                    if (Game.Player.Character.Position.DistanceTo(vTarget_01) < Npc_01.Position.DistanceTo(vTarget_01))
                        iRaceRiot = iRaceRiot - 1;
                }
                else if (iList_02[0] > iList_02[1])
                    iRaceRiot = iRaceRiot - 1;

                if (iList_02[0] == iList_02[2])
                {
                    if (Game.Player.Character.Position.DistanceTo(vTarget_01) < Npc_02.Position.DistanceTo(vTarget_01))
                        iRaceRiot = iRaceRiot - 1;
                }
                else if (iList_02[0] > iList_02[2])
                    iRaceRiot = iRaceRiot - 1;

                if (iList_02[0] == iList_02[3])
                {
                    if (Game.Player.Character.Position.DistanceTo(vTarget_01) < Npc_03.Position.DistanceTo(vTarget_01))
                        iRaceRiot = iRaceRiot - 1;
                }
                else if (iList_02[0] > iList_02[3])
                    iRaceRiot = iRaceRiot - 1;

                ttTextBar_04.Text = "" + iRaceRiot + "/4";             
            }
            int iLapTotal = iList_02[7] - Game.GameTime;
            iLapTotal *= -1;

            if (bLapX)
                FindTheTime(iLapTotal, 1, "", true);

            if (!bSoloRace)
                Racist_Racers();
        }
        private void Racist_OnACorner(Ped Peddy, int iCheck, List<Vector3> vLaps, Vehicle vhick)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Racist_OnACorner", tEx);

            Vector3 vBefore = vLaps[iCheck];

            Vector3 vAfter = vLaps[iCheck];

            if (iCheck == 0)
                vBefore = vLaps[vLaps.Count - 1];
            else
                vBefore = vLaps[iCheck - 1];

            if (iCheck == vLaps.Count - 1)
                vAfter = vLaps[0];
            else
                vAfter = vLaps[iCheck + 1];

            float dxA = vLaps[iCheck].X - vBefore.X;
            float dyA = vLaps[iCheck].Y - vBefore.Y;

            float fHeadding1 = Function.Call<float>(Hash.GET_HEADING_FROM_VECTOR_2D, dxA, dyA);

            float dxB = vLaps[iCheck].X - vAfter.X;
            float dyB = vLaps[iCheck].Y - vAfter.Y;

            float fHeadding2 = Function.Call<float>(Hash.GET_HEADING_FROM_VECTOR_2D, dxB, dyB);

            float fHeaddin = fHeadding2 - fHeadding1;

            if (fHeaddin < 0)
                fHeaddin *= -1;

            if (fHeaddin < 110 || fHeaddin > 250)
                Raceisums(Peddy, vLaps[iCheck], vhick, 17.00f);

        }
        private void Racist_Racers()
        {
            if (iLocationX == 1 && iList_02[11] != 8)
            {
                if (Npc_01.IsDead)
                    iMissionSeq = 45;
                else if (VehTrackin_02.Position.DistanceTo(vTarget_02) < 45.00f)
                {
                    if (bOnCorner_01)
                    {
                        if (VehTrackin_02.Position.DistanceTo(vTarget_02) < fAiCoronaListSize)
                        {
                            bOnCorner_01 = false;
                            iList_01[1] += 1;
                            if (iList_01[1] == VectorList_02.Count)
                                iList_01[1] = 0;

                            vTarget_02 = VectorList_02[iList_01[1]];
                            Raceisums(Npc_01, vTarget_02, VehTrackin_02, fMaxSpeed);
                            iList_02[1] += 1;
                        }
                    }
                    else
                    {
                        Racist_OnACorner(Npc_01, iList_01[1], VectorList_02, VehTrackin_02);
                        bOnCorner_01 = true;
                    }
                }
                else if (!VehTrackin_02.IsOnAllWheels)
                    VehTrackin_02.Rotation = new Vector3(0.00f, 0.00f, VehTrackin_02.Heading);

                if (Npc_02.IsDead)
                    iMissionSeq = 45;
                else if (VehTrackin_03.Position.DistanceTo(vTarget_03) < 45.00f)
                {
                    if (bOnCorner_02)
                    {
                        if (VehTrackin_03.Position.DistanceTo(vTarget_03) < fAiCoronaListSize)
                        {
                            bOnCorner_02 = false;
                            iList_01[2] += 1;
                            if (iList_01[2] == VectorList_02.Count)
                                iList_01[2] = 0;

                            vTarget_03 = VectorList_02[iList_01[2]];
                            Raceisums(Npc_02, vTarget_03, VehTrackin_03, fMaxSpeed);
                            iList_02[2] += 1;
                        }
                    }
                    else
                    {
                        Racist_OnACorner(Npc_02, iList_01[2], VectorList_02, VehTrackin_03);
                        bOnCorner_02 = true;
                    }
                }
                else if (!VehTrackin_03.IsOnAllWheels)
                    VehTrackin_03.Rotation = new Vector3(0.00f, 0.00f, VehTrackin_03.Heading);

                if (Npc_03.IsDead)
                    iMissionSeq = 45;
                else if (VehTrackin_04.Position.DistanceTo(vTarget_04) < 45.00f)
                {
                    if (bOnCorner_03)
                    {
                        if (VehTrackin_04.Position.DistanceTo(vTarget_04) < fAiCoronaListSize)
                        {
                            bOnCorner_03 = false;
                            iList_01[3] += 1;
                            if (iList_01[3] == VectorList_02.Count)
                                iList_01[3] = 0;

                            vTarget_04 = VectorList_02[iList_01[3]];
                            Raceisums(Npc_03, vTarget_04, VehTrackin_04, fMaxSpeed);
                            iList_02[3] += 1;
                        }
                    }
                    else
                    {
                        Racist_OnACorner(Npc_03, iList_01[3], VectorList_02, VehTrackin_04);
                        bOnCorner_03 = true;
                    }
                }
                else if (!VehTrackin_04.IsOnAllWheels)
                    VehTrackin_04.Rotation = new Vector3(0.00f, 0.00f, VehTrackin_04.Heading);

                if (VehTrackin_01.Position.DistanceTo(vTarget_05) < 30.00f)
                {
                    iList_01[0] += 1;
                    if (iList_01[0] == VectorList_02.Count)
                        iList_01[0] = 0;

                    vTarget_05 = VectorList_02[iList_01[0]];
                    iList_02[0] += 1;
                }
            }
            else if (iLocationX == 4 || iLocationX == 6 && iList_02[11] != 8)
            {
                if (!Npc_01.IsDead)
                {
                    if (VehTrackin_02.Position.DistanceTo(vTarget_02) < fAiCoronaListSize)
                    {
                        iList_01[1] += 1;
                        if (iList_01[1] == VectorList_01.Count)
                            iList_01[1] = 0;

                        vTarget_02 = VectorList_01[iList_01[1]];
                        Raceisums(Npc_01, vTarget_02, VehTrackin_02, fMaxSpeed);
                        iList_02[1] += 1;
                    }
                }

                if (!Npc_02.IsDead)
                {
                    if (VehTrackin_03.Position.DistanceTo(vTarget_03) < fAiCoronaListSize)
                    {
                        iList_01[2] += 1;
                        if (iList_01[2] == VectorList_01.Count)
                            iList_01[2] = 0;

                        vTarget_03 = VectorList_01[iList_01[2]];
                        Raceisums(Npc_02, vTarget_03, VehTrackin_03, fMaxSpeed);
                        iList_02[2] += 1;
                    }
                }

                if (!Npc_03.IsDead)
                {
                    if (VehTrackin_04.Position.DistanceTo(vTarget_04) < fAiCoronaListSize)
                    {
                        iList_01[3] += 1;
                        if (iList_01[3] == VectorList_01.Count)
                            iList_01[3] = 0;

                        vTarget_04 = VectorList_01[iList_01[3]];
                        Raceisums(Npc_03, vTarget_04, VehTrackin_04, fMaxSpeed);
                        iList_02[3] += 1;
                    }
                }
            }
            else
            {
                if (Npc_01.IsDead)
                    iMissionSeq = 45;
                else if (VehTrackin_02.Position.DistanceTo(vTarget_02) < 45.00f)
                {
                    if (bOnCorner_01)
                    {
                        if (VehTrackin_02.Position.DistanceTo(vTarget_02) < fAiCoronaListSize)
                        {
                            bOnCorner_01 = false;
                            iList_01[1] += 1;
                            if (iList_01[1] == VectorList_01.Count)
                                iList_01[1] = 0;

                            vTarget_02 = VectorList_01[iList_01[1]];
                            Raceisums(Npc_01, vTarget_02, VehTrackin_02, fMaxSpeed);
                            iList_02[1] += 1;
                        }
                    }
                    else
                    {
                        Racist_OnACorner(Npc_01, iList_01[1], VectorList_01, VehTrackin_02);
                        bOnCorner_01 = true;
                    }
                }

                if (Npc_02.IsDead)
                    iMissionSeq = 45;
                else if (VehTrackin_03.Position.DistanceTo(vTarget_03) < 45.00f)
                {
                    if (bOnCorner_02)
                    {
                        if (VehTrackin_03.Position.DistanceTo(vTarget_03) < fAiCoronaListSize)
                        {
                            bOnCorner_02 = false;
                            iList_01[2] += 1;
                            if (iList_01[2] == VectorList_01.Count)
                                iList_01[2] = 0;

                            vTarget_03 = VectorList_01[iList_01[2]];
                            Raceisums(Npc_02, vTarget_03, VehTrackin_03, fMaxSpeed);
                            iList_02[2] += 1;
                        }
                    }
                    else
                    {
                        Racist_OnACorner(Npc_02, iList_01[2], VectorList_01, VehTrackin_03);
                        bOnCorner_02 = true;
                    }
                }

                if (Npc_03.IsDead)
                    iMissionSeq = 45;
                else if (VehTrackin_04.Position.DistanceTo(vTarget_04) < 45.00f)
                {
                    if (bOnCorner_03)
                    {
                        if (VehTrackin_04.Position.DistanceTo(vTarget_04) < fAiCoronaListSize)
                        {
                            bOnCorner_03 = false;
                            iList_01[3] += 1;
                            if (iList_01[3] == VectorList_01.Count)
                                iList_01[3] = 0;

                            vTarget_04 = VectorList_01[iList_01[3]];
                            Raceisums(Npc_03, vTarget_04, VehTrackin_04, fMaxSpeed);
                            iList_02[3] += 1;
                        }
                    }
                    else
                    {
                        Racist_OnACorner(Npc_03, iList_01[3], VectorList_01, VehTrackin_04);
                        bOnCorner_03 = true;
                    }
                }
            }
        }
        public int CheckPointPro(bool bEnd, List<Vector3> CheckList, int iCheckPoints)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("CheckPointPro, iCheckPoints == " + iCheckPoints + ", bEnd == " + bEnd, tEx);

            CleanUpCheckPoints();
            RemoveTargets();

            if (iLocationX != 1)
                iList_02[0] += 1;
            iCheckPoints += 1;
            int iCheck = iCheckPoints + 1;

            if (bEnd)
            {
                iCheck = 0;
                vTarget_01 = CheckList[iCheck];
                RacingBlimps(true, vTarget_01);
                Racist_AddRaceCheckPoints(true, CheckList, iCheck);
            }
            else
            {
                if (iCheck == CheckList.Count)
                    iCheck = 0;
                else if (iCheckPoints == CheckList.Count)
                    iCheck = 1;

                if (iCheckPoints < CheckList.Count)
                {
                    vTarget_01 = CheckList[iCheckPoints];
                    RacingBlimps(true, vTarget_01);
                    RacingBlimps(false, CheckList[iCheck]);
                }
                else
                {
                    iCheckPoints = 0;
                    vTarget_01 = CheckList[iCheckPoints];
                    RacingBlimps(true, vTarget_01);
                    RacingBlimps(false, CheckList[iCheck]);
                }
                Racist_AddRaceCheckPoints(false, CheckList, iCheckPoints);

                iCheck = iCheckPoints;
            }

            return iCheck;
        }
        private void Racist_AddRaceCheckPoints(bool bFinish, List<Vector3> CheckList, int iCheckPoints)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Racist_AddRaceCheckPoints, iCheckPoints == " + iCheckPoints + ", bFinish == " + bFinish, tEx);

            int type = 0;

            if (bFinish)
            {
                type = 4;
                if (bFloater)
                    type = 42;

                float posX1 = CheckList[iCheckPoints].X;
                float posY1 = CheckList[iCheckPoints].Y;
                float posZ1 = CheckList[iCheckPoints].Z - fCoronaHight;
                float posX2 = CheckList[iCheckPoints + 1].X;
                float posY2 = CheckList[iCheckPoints + 1].Y;
                float posZ2 = CheckList[iCheckPoints + 1].Z - fCoronaHight;

                int red = 255;
                int green = 255;
                int blue = 0;
                int alpha = 255;
                int reserved = 0;
                int ThisCheck = Function.Call<int>(Hash.CREATE_CHECKPOINT, type, posX1, posY1, posZ1, posX2, posY2, posZ2, fCorSize, red, green, blue, alpha, reserved);
                iCoronaList.Add(ThisCheck);

                red = 0;
                green = 102;
                blue = 255;
                alpha = 255;
                Function.Call(Hash._SET_CHECKPOINT_ICON_RGBA, ThisCheck, red, green, blue, alpha);
                if (bFloater == false)
                    Function.Call(Hash._0x4B5B4DA5D79F1943, ThisCheck, fCoronaDirHt + 0.50f);
            }
            else
            {
                Vector3 vBefore = CheckList[iCheckPoints];

                Vector3 vAfter = CheckList[iCheckPoints];

                if (iCheckPoints == 0)
                    vBefore = CheckList[CheckList.Count - 1];
                else
                    vBefore = CheckList[iCheckPoints - 1];

                if (iCheckPoints == CheckList.Count - 1)
                    vAfter = CheckList[0];
                else
                    vAfter = CheckList[iCheckPoints + 1];

                float dxA = CheckList[iCheckPoints].X - vBefore.X;
                float dyA = CheckList[iCheckPoints].Y - vBefore.Y;

                float fHeadding1 = Function.Call<float>(Hash.GET_HEADING_FROM_VECTOR_2D, dxA, dyA);

                float dxB = CheckList[iCheckPoints].X - vAfter.X;
                float dyB = CheckList[iCheckPoints].Y - vAfter.Y;

                float fHeadding2 = Function.Call<float>(Hash.GET_HEADING_FROM_VECTOR_2D, dxB, dyB);

                float fHeaddin = fHeadding2 - fHeadding1;

                if (fHeaddin < 0)
                    fHeaddin = fHeaddin * -1;
                if (fHeaddin < 35 || fHeaddin > 325)
                {
                    if (bFloater)
                        type = 14;
                    else
                        type = 2;
                }
                else if (fHeaddin < 110 || fHeaddin > 250)
                {
                    if (bFloater)
                        type = 13;
                    else
                        type = 1;
                }
                else
                {
                    if (bFloater)
                        type = 12;
                    else
                        type = 0;
                }
                float posX1 = CheckList[iCheckPoints].X;
                float posY1 = CheckList[iCheckPoints].Y;
                float posZ1 = CheckList[iCheckPoints].Z - fCoronaHight;
                float posX2 = vAfter.X;
                float posY2 = vAfter.Y;
                float posZ2 = vAfter.Z - fCoronaHight;

                int red = 255;
                int green = 255;
                int blue = 0;
                int alpha = 255;
                int reserved = 0;
                int ThisCheck = Function.Call<int>(Hash.CREATE_CHECKPOINT, type, posX1, posY1, posZ1, posX2, posY2, posZ2, fCorSize, red, green, blue, alpha, reserved);
                iCoronaList.Add(ThisCheck);

                red = 0;
                green = 102;
                blue = 255;
                alpha = 255;
                Function.Call(Hash._SET_CHECKPOINT_ICON_RGBA, ThisCheck, red, green, blue, alpha);
                if (bFloater == false)
                    Function.Call(Hash._0x4B5B4DA5D79F1943, ThisCheck, fCoronaDirHt);
            }
        }
        private void RacingBlimps(bool bPrimary, Vector3 vPlace)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("RacingBlimps, bPrimary == " + bPrimary, tEx);

            if (bPrimary)
            {
                Target_01 = GTA.World.CreateBlip(vPlace);
                Target_01.Color = BlipColor.Yellow;
                iBliper.Add(Target_01.Handle);
                WriteBlips();
            }
            else
            {
                Target_02 = GTA.World.CreateBlip(vPlace);
                Target_02.Color = BlipColor.Yellow;
                Target_02.Scale = 0.50f;
                iBliper.Add(Target_02.Handle);
                WriteBlips();
            }
        }
        private void Raceisums(Ped PedX, Vector3 vEctor, Vehicle Vhick, float fSpeeds)
        {
            if (VehTrackin_03.ClassType == VehicleClass.Helicopters)
            {
                PedX.Task.ClearAll();
                float fheadder = Function.Call<float>(Hash.GET_HEADING_FROM_VECTOR_2D, PedX.Position.X - vEctor.X, PedX.Position.Y - vEctor.Y - 180.00f);
                FlyAway(PedX, vEctor, fSpeeds, 0.00f);
            }
            else if (VehTrackin_03.ClassType == VehicleClass.Boats)
            {
                PedX.Task.ClearAll();
                Function.Call(Hash.TASK_BOAT_MISSION, PedX, Vhick, 0, 0, vEctor.X, vEctor.Y, vEctor.Z, 4, fSpeeds / 2.00f, iRacingStyle, 2.50f, 7);
                Function.Call(Hash.SET_BLOCKING_OF_NON_TEMPORARY_EVENTS, PedX, true);
            }
            else
                DriveToDest(Vhick, vEctor, PedX, fSpeeds, iRacingStyle);
        }
        private void RaceEnd(bool bFail)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("RaceEnd, bFail == " + bFail, tEx);

            if (bCutingCul)
            {
                bCutingCul = false;
                Function.Call((Hash)0x9BAE5AD2508DF078, false);
            }

            Function.Call(Hash._0xC54A08C85AE4D410, 0.00f);

            if (bFail)
                GameOver(true, "", false, 0);
            else
            {
                int iRaceRiot = 4;
                if (!bSoloRace)
                {
                    if (iList_02[0] == iList_02[1])
                    {
                        if (Game.Player.Character.Position.DistanceTo(vTarget_01) < Npc_01.Position.DistanceTo(vTarget_01))
                            iRaceRiot = iRaceRiot - 1;
                    }
                    else if (iList_02[0] > iList_02[1])
                        iRaceRiot = iRaceRiot - 1;

                    if (iList_02[0] == iList_02[2])
                    {
                        if (Game.Player.Character.Position.DistanceTo(vTarget_01) < Npc_02.Position.DistanceTo(vTarget_01))
                            iRaceRiot = iRaceRiot - 1;
                    }
                    else if (iList_02[0] > iList_02[2])
                        iRaceRiot = iRaceRiot - 1;

                    if (iList_02[0] == iList_02[3])
                    {
                        if (Game.Player.Character.Position.DistanceTo(vTarget_01) < Npc_03.Position.DistanceTo(vTarget_01))
                            iRaceRiot = iRaceRiot - 1;
                    }
                    else if (iList_02[0] > iList_02[3])
                        iRaceRiot = iRaceRiot - 1;
                }
                int iBaseTime = 0;

                if (iLocationX == 1)
                    iBaseTime = 70000;
                else if (iLocationX == 2)
                    iBaseTime = 52000;
                else if (iLocationX == 3)
                    iBaseTime = 258000;
                else if (iLocationX == 4)
                    iBaseTime = 68000;
                else if (iLocationX == 5)
                    iBaseTime = 61000;
                else if (bOnCayoLand)
                    iBaseTime = 99000;

                for (int i = 0; i < iDeliverList.Count; i++)
                {
                    if (iLocationX == 6)
                        iCashReward += (iDeliverList[i] * -1) / 100;
                    else
                    {
                        if ((iDeliverList[i] * -1) < iBaseTime)
                            iCashReward += 1000;
                    }
                }

                if (iRaceRiot == 4)
                    iCashReward += 50;
                else if (iRaceRiot == 3)
                    iCashReward += 100;
                else if (iRaceRiot == 2)
                    iCashReward += 500;
                else
                    iCashReward += 10000;

                iList_02[5] = iRaceRiot;
                iDeliverList.Sort();
                int iBest = iDeliverList[iDeliverList.Count - 1];
                iBest = iBest * -1;
                FindTheTime(iBest, 5, sAltLang[311], false);
            }
        }
        private void BbBomb_BombSquad()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("BbBomb_BombSquad", tEx);

            for (int i = 0; i < VectorList_02.Count; i++)
            {
                Vector3 Vec = VectorList_02[i];
                float Fdir = RandFlow(-180.00f, 180.00f);
                NPCSpawn(RandNPC(36), Vec, Fdir, 60, 190, 0, 15, 0, null, 2, false, false, 0, 0);
            }
        }
        private void BbBomb_BombAtractor(Ped Peddy)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("BbBomb_BombAtractor", tEx);

            Function.Call(Hash.SET_PED_PATH_CAN_USE_CLIMBOVERS, Peddy, true);
            Function.Call(Hash.SET_PED_PATH_CAN_USE_LADDERS, Peddy, true);
            Function.Call(Hash.SET_PED_PATH_CAN_DROP_FROM_HEIGHT, Peddy, true);
            Peddy.Task.ClearAll();
            Peddy.Task.WanderAround(vTarget_01, 7.50f);
        }
        private void MoneyMan_HeyBud()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("MoneyMan_HeyBud", tEx);

            Game.Player.Character.CanBeDraggedOutOfVehicle = true;
            Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Npc_01, 0, false);
            Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Npc_01, 2, true);
            Npc_01.BlockPermanentEvents = true;
            Npc_01.RelationshipGroup = AttackingNPCs;
            Npc_01.Task.ShuffleToNextVehicleSeat(VehTrackin_01);
            Script.Wait(2000);
            if (Npc_01.SeatIndex != VehicleSeat.Driver)
            {
                Game.Player.Character.Task.LeaveVehicle(VehTrackin_01, LeaveVehicleFlags.BailOut);
                Npc_01.Task.ShuffleToNextVehicleSeat(VehTrackin_01);
            }
            Npc_01.Task.ClearAll();
            Npc_01.Task.CruiseWithVehicle(VehTrackin_01, 75.00f, 828);
            PedList_02.Add(new Ped(Npc_01.Handle));
            PedList_01.Clear();
        }
        private void MoneyMan_GetJack()
        {
            iWait4Sec = Game.GameTime + 500;

            if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
            {
                int iRan = -99;
                float fFirst = 25.00f;
                for (int i = 0; i < PedList_02.Count; i++)
                {
                    Ped Peddy = PedList_02[i];
                    float fDis = Peddy.Position.DistanceTo(VehTrackin_01.Position);
                    if (Peddy.IsDead)
                    {
                        if (Peddy.CurrentBlip.Exists())
                            Peddy.CurrentBlip.Remove();
                        if (Peddy.IsInVehicle(VehTrackin_01))
                            BeOnOff[3] = false;
                    }
                    else if (Peddy.IsInVehicle(VehTrackin_01))
                    {

                    }
                    else
                    {
                        if (fDis < fFirst)
                        {
                            fFirst = fDis;
                            iRan = i;
                        }
                    }
                }

                if (iRan != -99)
                {
                    Ped Peddy = PedList_02[iRan];
                    if (!BeOnOff[3])
                    {
                        Peddy.Task.ClearAll();
                        Peddy.AlwaysKeepTask = true;
                        Peddy.BlockPermanentEvents = true;
                        Function.Call(Hash.TASK_ENTER_VEHICLE, Peddy, VehTrackin_01, -1, -1, 2.00f, 1, 0);
                        while (!Peddy.IsInVehicle() && !Peddy.IsDead && Peddy.Position.DistanceTo(VehTrackin_01.Position) < 15)
                            Script.Wait(100);
                        Peddy.Task.CruiseWithVehicle(VehTrackin_01, 55.00f, 0);
                        BeOnOff[3] = true;
                        iCashReward *= 4;
                        iGotYourVan = Game.GameTime + 60000;
                    }
                }
            }
            else
            {
                for (int i = 0; i < PedList_02.Count; i++)
                {
                    Ped Peddy = PedList_02[i];
                    if (Peddy.IsDead)
                    {
                        if (Peddy.CurrentBlip.Exists())
                            Peddy.CurrentBlip.Remove();
                    }
                    else if (BeOnOff[2])
                    {
                        if (Peddy.Position.DistanceTo(VehTrackin_01.Position) < 25.00f && !Peddy.Weapons.HasWeapon(WeaponHash.Bat))
                        {
                            if (VehTrackin_01.IsStopped)
                            {
                                Function.Call(Hash.TASK_LEAVE_VEHICLE, Peddy, Peddy.CurrentVehicle, 256);
                                Peddy.Weapons.Give(WeaponHash.Bat, 1, false, false);
                                ArmNpcMid(Peddy);
                            }
                        }
                        else if (!VehTrackin_01.IsStopped && Peddy.Weapons.HasWeapon(WeaponHash.Bat) && Peddy.Position.DistanceTo(VehTrackin_01.Position) > 35.00f)
                        {
                            Peddy.Weapons.RemoveAll();
                            ArmNpcSmall(Peddy);
                            Peddy.Task.VehicleChase(Game.Player.Character);
                        }
                    }
                }
            }

            for (int i = 0; i < VehicleList_01.Count; i++)
            {
                if (VehicleList_01[i].CurrentBlip.Exists())
                {
                    if (VehicleList_01[i].CurrentBlip.Color == BlipColor.Red)
                    {
                        if (VehicleList_01[i].IsSeatFree(VehicleSeat.Driver))
                            VehicleList_01[i].CurrentBlip.Remove();
                        else if (VehicleList_01[i].GetPedOnSeat(VehicleSeat.Driver).IsDead)
                            VehicleList_01[i].CurrentBlip.Remove();
                    }
                }
            }
        }
        private void MoneyMan_Attacks()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("MoneyMan_Attacks", tEx);

            Game.Player.Character.CanBeDraggedOutOfVehicle = true;

            int iRanAttack = FindRandom(11, 1, 6);

            if (iRanAttack == 1)
            {
                BeOnOff[1] = true;
                FindAndReplaceVeh(VehTrackin_01.Position, 20, 10, 0, 8, 0, false, true, true, 155.00f, 35.00f, "", false, RandInt(1, 4),  0, true);
                iCashReward *= 2;
                BeOnOff[2] = true;
            }            // vehicle chase
            else if (iRanAttack == 2)
            {
                BeOnOff[1] = true;
                int iCountEm = RandInt(5, 10);
                Vector3 VFor = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 30);
                FindAPed(VFor, 30.00f, iCountEm, 3, 2, false);
            }       // mob attack 
            else if (iRanAttack == 3)
            {
                AddDogFighters(1);
                iCashReward *= 8;
            }       // plane attack
            else if (iRanAttack == 4)
            {

            }       // Blank...No Attack
            else if (iRanAttack == 5)
            {
                BeOnOff[1] = true;
                FindAndReplaceVeh(VehTrackin_01.Position, 21, 11, 0, 8, 2, false, true, true, 155.00f, 45.00f, "", false, 1, 0, true);
                iCashReward *= 8;
            }       // tank attack
            else
            {
                MoneyMan_HeyBud();
                BeOnOff[1] = true;
                iCashReward *= 24;
            }                            // passenger attacks
        }
        private void Water01_BargeCars(Vehicle Veh, Prop Barge, int iPosition)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Water01_BargeCars, iPosition == " + iPosition, tEx);

            if (iPosition == 1)
                Veh.AttachTo(Barge, 0, new Vector3(2.00f, 8.00f, 2.57f), new Vector3(0.00f, 0.00f, 90.00f));
            else if (iPosition == 2)
                Veh.AttachTo(Barge, 0, new Vector3(2.00f, 1.00f, 2.57f), new Vector3(0.00f, 0.00f, 90.00f));
            else
                Veh.AttachTo(Barge, 0, new Vector3(1.60f, -6.80f, 2.57f), new Vector3(0.00f, 0.00f, 50.00f));
        }
        private void Water01_BargeTow(Vehicle Barge, Vehicle Boat)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Water01_BargeTow", tEx);

            float fxPos1 = 0.00f;
            float fyPos1 = -18.00f;
            float fzPos1 = 2.00f;

            float fxPos2 = 0.00f;
            float fyPos2 = 17.00f;
            float fzPos2 = 2.00f;

            float fxRot = 0.00f;
            float fyRot = 0.00f;
            float fzRot = 0.00f;

            float breakForce = 999999.00f;

            bool fixedRot = false;
            bool p15 = true;
            bool collision = true;
            bool teleport = false;
            int p18 = 2;

            Function.Call(Hash.ATTACH_ENTITY_TO_ENTITY_PHYSICALLY, Barge.Handle, Boat.Handle, 0, Boat.GetBoneIndex("bodyshell"), fxPos1, fyPos1, fzPos1, fxPos2, fyPos2, fzPos2, fxRot, fyRot, fzRot, breakForce, fixedRot, p15, collision, teleport, p18);
        }
        private void Water01_RentoMob()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Water01_RentoMob", tEx);

            Water01_BargeCars(VehTrackin_01, PropList_01[3], 1);
            Water01_BargeCars(VehTrackin_02, PropList_01[3], 3);
            Water01_BargeCars(VehTrackin_03, PropList_01[3], 2);

            for (int i = 0; i < VectorList_01.Count; i++)
                NPCSpawn(RandNPC(iMobStarz), VectorList_01[i], 0.00f, 65, 180, 1, 18, 0, null, 2, true, false, 0, 0);

            BeOnOff[0] = true;
        }
        private void Water01_BargeFloat()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Water01_BargeFloat", tEx);

            Prop Bargie01 = PropList_01[PropList_01.Count - 1];
            Prop Bargie02 = PropList_01[PropList_01.Count - 2];

            Vector3 Vrot = new Vector3(VehicleList_01[0].Rotation.X, VehicleList_01[0].Rotation.Y, Bargie01.Rotation.Z);

            if (Vrot.X < 8.00f && Vrot.X > -8.00f && Vrot.Y < 8.00f && Vrot.Y > -8.00f)
                Bargie01.Rotation = Vrot;

            Vector3 Vrot2 = new Vector3(VehicleList_01[0].Rotation.X, VehicleList_01[0].Rotation.Y, Bargie02.Rotation.Z);

            if (Vrot2.X < 8.00f && Vrot2.X > -8.00f && Vrot2.Y < 8.00f && Vrot2.Y > -8.00f)
                Bargie02.Rotation = Vrot2;
        }
        private void Water01_BlowShitUp()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Water01_BlowShitUp", tEx);

            for (int i = 0; i < VehicleList_01.Count; i++)
            {
                Vehicle vCarp = VehicleList_01[i];
                vCarp.Detach();
                vCarp.IsInvincible = false;
                vCarp.Explode();
            }
            iMissionSeq = 45;
        }
        private void Water01_JetSkiTrackin()
        {
            iTracking = Game.GameTime + 1000;

            for (int i = 0; i < PedList_02.Count; i++)
            {
                if (PedList_02[i].IsDead)
                {
                    if (PedList_02[i].CurrentBlip.Exists())
                        PedList_02[i].CurrentBlip.Remove();
                    else
                        PedList_02[i].LastVehicle.CurrentBlip.Remove();

                    PedList_02[i].MarkAsNoLongerNeeded();
                    PedList_02.RemoveAt(i);


                }
                else if (!PedList_02[i].IsInVehicle())
                {
                    if (PedList_02[i].LastVehicle.CurrentBlip.Exists())
                        PedList_02[i].LastVehicle.CurrentBlip.Remove();
                    if (!PedList_02[i].CurrentBlip.Exists())
                        PedBlimp(PedList_02[i], BlipColor.Red3, 0.75f, false, false);
                }
            }

            if (PedList_02.Count < 8)
            {
                int iLocals = RandInt(0, VectorList_02.Count - 1);
                Vector3 Vat = VectorList_02[iLocals];
                float fedd = RandFlow(0.00f, 360.00f);
                VehicleSpawn("Seashark3", Vat, fedd, false, false, false, false, 15, 0, 23, 0, false);
            }
        }
        private void Water01_HaveACar()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Water01_HaveACar", tEx);

            VehTrackin_01.Detach();
            VehTrackin_01.FreezePosition = false;
            VehTrackin_01.Position = new Vector3(-448.75f, -2427.25f, 4.33f);
            VehTrackin_01.Heading = 139.65f;

            VehTrackin_02.Detach();
            VehTrackin_02.FreezePosition = false;
            VehTrackin_02.Position = new Vector3(-444.54f, -2430.93f, 4.33f);
            VehTrackin_02.Heading = 139.65f;

            VehTrackin_03.Detach();
            VehTrackin_03.FreezePosition = false;
            VehTrackin_03.Position = new Vector3(-440.53f, -2434.34f, 4.33f);
            VehTrackin_03.Heading = 139.65f;

            Vector3 Vhere = new Vector3(-446.42f, -2439.57f, 5.00f);
            SlowFastTravel(Vhere, 2.70f);
            iMissionSeq = 10;
        }
        private void Water02_AddHeistYacht()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Water02_AddHeistYacht", tEx);

            if (!bYachtLoaded)
            {
                List<string> sAddIpl = new List<string>();

                if (Function.Call<bool>(Hash.IS_IPL_ACTIVE, "smboat"))
                {
                    Function.Call(Hash.REMOVE_IPL, "smboat");
                    bOldYacht = true;
                }
                sAddIpl.Add("hei_yacht_heist_Lounge");
                sAddIpl.Add("hei_yacht_heist_LODLights");
                sAddIpl.Add("hei_yacht_heist_enginrm");
                sAddIpl.Add("hei_yacht_heist_DistantLights");
                sAddIpl.Add("hei_yacht_heist_Bridge");
                sAddIpl.Add("hei_yacht_heist_Bedrm");
                sAddIpl.Add("hei_yacht_heist_Bar");
                sAddIpl.Add("hei_yacht_heist");

                for (int i = 0; i < sAddIpl.Count; i++)
                {
                    if (!Function.Call<bool>(Hash.IS_IPL_ACTIVE, sAddIpl[i]))
                        Function.Call(Hash.REQUEST_IPL, sAddIpl[i]);
                }
                bYachtLoaded = true;
            }
        }
        private void Water02_YachtAttack()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Water02_YachtAttack", tEx);

            int iType = RandInt(1, 11);
            for (int i = 0; i < VectorList_01.Count; i++)
            {
                int iAccurate = RandInt(25, 75);
                NPCSpawn(RandNPC(iType), VectorList_01[i], 0.00f, iAccurate, 180, 2, 19, 0, null, 8, true, true, 0, 0);
            }
        }
        private void Water02_RemoveYacht()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Water02_RemoveYacht", tEx);

            if (bOldYacht)
            {
                List<string> sAddIpl = new List<string>();

                sAddIpl.Add("hei_yacht_heist_Lounge");
                sAddIpl.Add("hei_yacht_heist_LODLights");
                sAddIpl.Add("hei_yacht_heist_enginrm");
                sAddIpl.Add("hei_yacht_heist_DistantLights");
                sAddIpl.Add("hei_yacht_heist_Bridge");
                sAddIpl.Add("hei_yacht_heist_Bedrm");
                sAddIpl.Add("hei_yacht_heist_Bar");
                sAddIpl.Add("hei_yacht_heist");

                for (int i = 0; i < sAddIpl.Count; i++)
                {
                    if (Function.Call<bool>(Hash.IS_IPL_ACTIVE, sAddIpl[i]))
                        Function.Call(Hash.REMOVE_IPL, sAddIpl[i]);
                }

                if (!Function.Call<bool>(Hash.IS_IPL_ACTIVE, "smboat"))
                    Function.Call(Hash.REQUEST_IPL, "smboat");
            }
        }
        private void Water03_RandDest(int iDests)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Water03_RandDest, iDests == " + iDests, tEx);

            iDeliverList.Clear();
            iCashReward = 0;
            int iRanRange = VectorList_01.Count - 1;
            HashSet<int> numbers = new HashSet<int>();
            while (numbers.Count < iDests)
                numbers.Add(RandInt(0, iRanRange));

            while (iDests > 0)
            {
                iDests -= 1;
                iDeliverList.Add(numbers.ElementAt(iDests));
            }

            iDeliverList.Sort();
            for (int i = 0; i < iDeliverList.Count; i++)
                iCashReward = iCashReward + iDeliverList[i];

            iCashReward = iCashReward * 5;
        }
        private void Water04_AddTheRubbish()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Water04_AddTheRubbish", tEx);

            PropList_01.Clear();

            for (int i = 0; i < VectorList_01.Count; i++)
            {
                string stype = "prop_rad_waste_barrel_01";

                int iobject = RandInt(0, 4);
                if (iobject == 1)
                    stype = "prop_rub_tyre_01";
                else if (iobject == 2)
                    stype = "prop_rub_tyre_02";
                else if (iobject == 3)
                    stype = "prop_rub_tyre_03";
                else if (iobject == 4)
                    stype = "prop_rub_washer_01";

                Vector3 VPickPos = VectorList_01[i];
                int iType = Function.Call<int>(Hash.GET_HASH_KEY, stype);
                Prop Picker = World.CreateAmbientPickup(PickupType.VehicleCustomScript, VPickPos, iType, 100);
                Picker.IsPersistent = true;
                Picker.AddBlip();
                Picker.CurrentBlip.IsShortRange = false;
                Picker.CurrentBlip.Sprite = BlipSprite.Package2;
                Picker.CurrentBlip.Color = BlipColor.Green;
                PropList_01.Add(new Prop(Picker.Handle));
            }

            iMissionSeq = 2;
            iList_01[0] = Game.GameTime + 140000;
        }
        private void Water04_RemoveRubbish()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Water04_RemoveRubbish", tEx);

            for (int i = 0; i < PropList_01.Count; i++)
            {
                PropList_01[i].CurrentBlip.Remove();
                PropList_01[i].Delete();
            }

            PropList_01.Clear();
            BeOnOff[0] = true;
        }
        private void Water05_InYourBoat()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Water05_InYourBoat", tEx);

            bool bInvehic = false;
            Ped Pedp = Game.Player.Character;
            int iVeh = VehicleList_01.Count;

            while (iVeh > 0 && !bInvehic)
            {
                iVeh -= 1;
                Vehicle Veh = VehicleList_01[iVeh];
                if (Veh.IsDead)
                {
                    iMissionSeq = 45;
                    bInvehic = true;
                }
                else if (Pedp.IsInVehicle())
                {
                    if (Pedp.IsInVehicle(Veh) && Veh.Model != VehicleHash.Cargobob2)
                    {
                        iMissionSeq = 3;
                        VehTrackin_01 = Veh;
                        Water05_BoatMarkerRem();
                    }
                    else
                    {
                        if (Pedp.CurrentVehicle.Model == VehicleHash.Cargobob || Pedp.CurrentVehicle.Model == VehicleHash.Cargobob2 || Pedp.CurrentVehicle.Model == VehicleHash.Cargobob3 || Pedp.CurrentVehicle.Model == VehicleHash.Cargobob4)
                        {
                            if (Function.Call<bool>(Hash.IS_VEHICLE_ATTACHED_TO_CARGOBOB, Pedp.CurrentVehicle, Veh))
                            {
                                iMissionSeq = 3;
                                VehTrackin_01 = Veh;
                                Water05_BoatMarkerRem();
                            }
                        }
                    }
                }
            }
        }
        private void Water05_BlipTheBoats()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Water05_BlipTheBoats", tEx);

            for (int i = 0; i < VehicleList_01.Count; i++)
            {
                if (VehicleList_01[i].Model != VehicleHash.Cargobob2)
                    VehBlip(VehicleList_01[i], BlipSprite.Speedboat, false, false);
            }
        }
        private void Water05_BoatMarkerRem()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Water05_BoatMarkerRem", tEx);

            for (int i = 0; i < VehicleList_01.Count; i++)
            {
                if (VehicleList_01[i].CurrentBlip.Exists())
                    VehicleList_01[i].CurrentBlip.Remove();
            }

            int iTargs = RandInt(0, VectorList_01.Count - 1);
            vTarget_01 = VectorList_01[iTargs];
            vTarget_02 = VectorList_02[iTargs];
            iList_01[0] = Game.GameTime;
            AddTarget(vTarget_01, true, true, 1.00f, false);
            TheYellowCorona(vTarget_01, 5.00f);
        }
        private void Water06_SubCam()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Water06_SubCam", tEx);

            Game.FadeScreenOut(1000);
            Script.Wait(1000);
            Ped Peddy = Game.Player.Character;

            Peddy.Task.ClearAllImmediately();

            Function.Call(Hash.DISPLAY_RADAR, false);
            Vector3 Campo = VectorList_02[0];
            Vector3 Camro = new Vector3(-4.00f, 0.00f, fList_02[0]);
            cCams = World.CreateCamera(Campo, Camro, 50.00f);
            Function.Call(Hash.RENDER_SCRIPT_CAMS, 1, 1, cCams.Handle, 0, 0);

            VehTrackin_01.Position = VectorList_02[1];
            VehTrackin_01.Rotation = new Vector3(-0.00f, 0.00f, fList_02[1]);

            WarptoAnyVeh(VehTrackin_01, Peddy, 1, false);
            Peddy.Task.DriveTo(VehTrackin_01, VectorList_02[2], 3.00f, 15.00f, 16777216);

            Game.FadeScreenIn(1000);
            Script.Wait(11000);
            Game.FadeScreenOut(1000);
            Script.Wait(1000);
            Peddy.Task.ClearAllImmediately();
            CleanCams();

            Game.Player.Character.Task.LeaveVehicle();
            Game.Player.Character.Position = new Vector3(514.3094f, 4887.639f, -62.59013f);
            Script.Wait(500);
            ShutThatDoor(VectorList_01[1], "0x19a63c9b");
            Water06_FillTheSub();
            Game.FadeScreenIn(1000);
        }
        private void Water06_FillTheSub()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Water06_FillTheSub", tEx);

            int iAm = 33;

            for (int i = 0; i < VectorList_01.Count; i++)
            {
                int iAccurate = RandInt(25, 75);

                if (i == 1)
                    NPCSpawn(RandNPC(iAm), VectorList_01[i], fList_01[i], iAccurate, 180, 2, 1, 0, null, 0, true, false, 2, 0);//cowering
                else if (i == 7 || i == 4)
                    NPCSpawn(RandNPC(iAm), VectorList_01[i], fList_01[i], iAccurate, 180, 2, 37, 0, null, 8, true, true, 0, 0);//offence
                else if (i == 10 || i == 9 || i == 6 || i == 5)
                    NPCSpawn(RandNPC(iAm), VectorList_01[i], fList_01[i], iAccurate, 180, 2, 36, 0, null, 8, true, true, 0, 0);//defence
                else
                    NPCSpawn(RandNPC(iAm), VectorList_01[i], fList_01[i], iAccurate, 180, 2, 35, 0, null, 8, true, true, 0, 0);//static
            }
        }
        private void HitMan_SecurtyDetail(string TheBoss)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("HitMan_SecurtyDetail, TheBoss == " + TheBoss, tEx);

            bool bTheBoss = true;
            int iMob = VectorList_01.Count;
            while (iMob > 0)
            {
                iMob -= 1;
                Script.Wait(100);
                if (bTheBoss)
                {
                    NPCSpawn(TheBoss, VectorList_01[iMob], fList_01[iMob], 75, 160, 2, 16, 0, null, 3, false, false, 1, 0);
                    bTheBoss = false;
                }
                else
                    NPCSpawn(RandNPC(iMobStarz), VectorList_01[iMob], fList_01[iMob], 75, 160, 2, 16, 0, null, 3, false, false, 0, 0);
            }
            iMissionSeq = 2;
        }
        private void Hitman_AddVisionCones(Ped Peddy)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Hitman_AddVisionCones", tEx);

            Peddy.IsPersistent = true;
            Function.Call(Hash.SET_PED_TARGET_LOSS_RESPONSE, Peddy, 2);
            Script.Wait(50);
            Function.Call((Hash)0xD30C50DF888D58B5, Peddy, true);
            Script.Wait(50);
            Function.Call((Hash)0x0C4BBF625CA98C4E, Peddy, true);
            Script.Wait(50);
            Function.Call((Hash)0x97C65887D4B37FA9, Peddy, 45.00f);
            Script.Wait(50);
            Function.Call(Hash.HIDE_SPECIAL_ABILITY_LOCKON_OPERATION, Peddy, true);
        }
        private void Hitman_RemoveVisionCones()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Hitman_RemoveVisionCones", tEx);

            for (int i = 0; i < PedList_02.Count; i++)
            {
                Function.Call((Hash)0xD30C50DF888D58B5, PedList_02[i], false);
                Function.Call((Hash)0x0C4BBF625CA98C4E, PedList_02[i], false);
            }
        }
        private void Hitman_ManualAI()
        {
            bool bToArms = false;
            List<Ped> DeadPed = new List<Ped>();
            DeadPed.Clear();

            for (int i = 0; i < PedList_02.Count; i++)
            {
                Ped pMe = PedList_02[i];
                if (pMe.IsDead)
                {
                    DeadPed.Add(new Ped(pMe.Handle));
                    if (pMe.CurrentBlip.Exists())
                        pMe.CurrentBlip.Color = BlipColor.BlueLight;
                    else
                    {
                        pMe.AddBlip();
                        pMe.CurrentBlip.Scale = 0.75f;
                        pMe.CurrentBlip.Color = BlipColor.BlueLight;
                    }
                }
                else
                {
                    if (i == 3)
                    {
                        if (!pMe.IsWalking)
                            iList_01[0] = PedWalkies(pMe, VectorList_02, iList_01[0]);
                        else if (pMe.Position.DistanceTo(VectorList_02[iList_01[0]]) < 1.00f)
                            pMe.Task.Wait(1000);
                    }
                    else if (i == 4)
                    {
                        if (!pMe.IsWalking)
                            iList_01[1] = PedWalkies(pMe, VectorList_03, iList_01[1]);
                        else if (pMe.Position.DistanceTo(VectorList_03[iList_01[1]]) < 1.00f)
                            pMe.Task.Wait(1000);
                    }
                    else if (i == 5)
                    {
                        if (!pMe.IsWalking)
                            iList_01[2] = PedWalkies(pMe, VectorList_04, iList_01[2]);
                        if (pMe.Position.DistanceTo(VectorList_04[iList_01[2]]) < 1.00f)
                            pMe.Task.Wait(1000);
                    }

                    if (!bToArms)
                        bToArms = BeenSpotted(pMe, Game.Player.Character, true);
                    else
                        break;
                }
            }

            if (DeadPed.Count > 0)
            {
                if (DeadPed.Count == 1)
                {
                    Ped IDead01 = DeadPed[0];
                    for (int i = 0; i < PedList_02.Count; i++)
                    {
                        Ped pMe = PedList_02[i];

                        if (!bToArms)
                            bToArms = BeenSpotted(pMe, IDead01, false);
                        else
                            break;
                    }
                }
                else if (DeadPed.Count == 2)
                {
                    Ped IDead01 = DeadPed[0];
                    Ped IDead02 = DeadPed[1];

                    for (int i = 0; i < PedList_02.Count; i++)
                    {
                        Ped pMe = PedList_02[i];
                        if (!bToArms)
                            bToArms = BeenSpotted(pMe, IDead01, false);
                        else
                            break;
                        if (!bToArms)
                            bToArms = BeenSpotted(pMe, IDead02, false);
                        else
                            break;
                    }
                }
                else if (DeadPed.Count == 3)
                {
                    Ped IDead01 = DeadPed[0];
                    Ped IDead02 = DeadPed[1];
                    Ped IDead03 = DeadPed[2];

                    for (int i = 0; i < PedList_02.Count; i++)
                    {
                        Ped pMe = PedList_02[i];
                        if (!bToArms)
                            bToArms = BeenSpotted(pMe, IDead01, false);
                        else
                            break;

                        if (!bToArms)
                            bToArms = BeenSpotted(pMe, IDead02, false);
                        else
                            break;

                        if (!bToArms)
                            bToArms = BeenSpotted(pMe, IDead03, false);
                        else
                            break;
                    }
                }
                else if (DeadPed.Count == 4)
                {
                    Ped IDead01 = DeadPed[0];
                    Ped IDead02 = DeadPed[1];
                    Ped IDead03 = DeadPed[2];
                    Ped IDead04 = DeadPed[3];

                    for (int i = 0; i < PedList_02.Count; i++)
                    {
                        Ped pMe = PedList_02[i];
                        if (!bToArms)
                            bToArms = BeenSpotted(pMe, IDead01, false);
                        else
                            break;

                        if (!bToArms)
                            bToArms = BeenSpotted(pMe, IDead02, false);
                        else
                            break;

                        if (!bToArms)
                            bToArms = BeenSpotted(pMe, IDead03, false);
                        else
                            break;

                        if (!bToArms)
                            bToArms = BeenSpotted(pMe, IDead04, false);
                        else
                            break;
                    }
                }
            }

            if (bToArms)
            {
                for (int i = 0; i < PedList_02.Count; i++)
                {
                    if (PedList_02[i].IsAlive)
                    {
                        PedList_02[i].Task.FightAgainst(Game.Player.Character);
                        PedList_02[i].AlwaysKeepTask = true;
                    }
                }
                Npc_01.Task.GoTo(vTarget_02);
                iMissionSeq = 40;
            }
            BeOnOff[1] = true;
        }
        public bool BeenSpotted(Ped Guard, Ped Target, bool bAlive)
        {
            bool bSeeingYou = false;
            Vector3 Vdir = (Target.Position - Guard.Position).Normalized;
            float fDirValue = Vector3.Dot(Vdir, Guard.ForwardVector);
            if (Function.Call<bool>(Hash.HAS_ENTITY_CLEAR_LOS_TO_ENTITY, Guard.Handle, Target.Handle, 17))
            {
                if (Guard.Position.DistanceTo(Target.Position) < 35.00f)
                {
                    if (fDirValue > 0.25f)
                        bSeeingYou = true;
                }
            }
            if (bAlive)
            {
                if (Function.Call<bool>(Hash.CAN_PED_HEAR_PLAYER, Target, Guard))
                    bSeeingYou = true;
                if (Guard.IsInCombatAgainst(Target))
                    bSeeingYou = true;
            }

            return bSeeingYou;
        }
        public string ImportsExpo_CarList(int iVechList)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("ImportsExpo_CarList, iVechList == " + iVechList, tEx);

            List<string> sVehicles = new List<string>();

            string sThisVehicle = "";

            if (iVechList == 1)
            {
                sVehicles.Add("PFISTER811");
                sVehicles.Add("ADDER");
                sVehicles.Add("AUTARCH");
                sVehicles.Add("BANSHEE2");
                sVehicles.Add("BULLET");
                sVehicles.Add("CHEETAH");
                sVehicles.Add("CYCLONE");
                sVehicles.Add("ENTITYXF");
                sVehicles.Add("ENTITY2");
                sVehicles.Add("SHEAVA");
                sVehicles.Add("FMJ");
                sVehicles.Add("GP1");
                sVehicles.Add("INFERNUS");
                sVehicles.Add("ITALIGTB");
                sVehicles.Add("ITALIGTB2");
                sVehicles.Add("OSIRIS");
                sVehicles.Add("NERO");
                sVehicles.Add("NERO2");
                sVehicles.Add("PENETRATOR");
                sVehicles.Add("LE7B");
                sVehicles.Add("REAPER");
                sVehicles.Add("VOLTIC2");
                sVehicles.Add("SC1");
                sVehicles.Add("SULTANRS");
                sVehicles.Add("T20");
                sVehicles.Add("TAIPAN");
                sVehicles.Add("TEMPESTA");
                sVehicles.Add("TEZERACT");
                sVehicles.Add("TURISMOR");
                sVehicles.Add("TYRANT");
                sVehicles.Add("TYRUS");
                sVehicles.Add("VACCA");
                sVehicles.Add("VAGNER");
                sVehicles.Add("VISIONE");
                sVehicles.Add("VOLTIC");
                sVehicles.Add("PROTOTIPO");
                sVehicles.Add("XA21");
                sVehicles.Add("ZENTORNO");
                if (bTrainM)
                {
                    sVehicles.Add("DEVESTE");
                    sVehicles.Add("EMERUS");
                    sVehicles.Add("FURIA");
                    sVehicles.Add("KRIEGER");
                    sVehicles.Add("THRAX");
                    sVehicles.Add("ZORRUSSO");
                    sVehicles.Add("TIGON");
                }

                int iCar = FindRandom(43, 0, sVehicles.Count - 1);
                sThisVehicle = sVehicles[iCar];
            }            //Super
            else if (iVechList == 2)
            {
                sVehicles.Add("COGCABRIO"); //
                sVehicles.Add("EXEMPLAR"); //
                sVehicles.Add("F620"); //
                sVehicles.Add("FELON"); //
                sVehicles.Add("FELON2"); //<!-- Felon GT -->
                sVehicles.Add("JACKAL"); //
                sVehicles.Add("ORACLE"); //
                sVehicles.Add("ORACLE2"); //<!-- Oracle XS -->
                sVehicles.Add("SENTINEL2"); //<!-- Sentinel -->
                sVehicles.Add("SENTINEL"); //<!-- Sentinel XS -->
                sVehicles.Add("WINDSOR"); //
                sVehicles.Add("WINDSOR2"); //<!-- Windsor Drop -->
                sVehicles.Add("ZION"); //
                sVehicles.Add("ZION2"); //<!-- Zion Cabrio -->

                int iCar = FindRandom(44, 0, sVehicles.Count - 1);
                sThisVehicle = sVehicles[iCar];
            }       //Coupe
            else if (iVechList == 3)
            {
                sVehicles.Add("NINEF"); //
                sVehicles.Add("NINEF2"); //<!-- 9F Cabrio -->
                sVehicles.Add("ALPHA"); //
                sVehicles.Add("BANSHEE"); //
                sVehicles.Add("BESTIAGTS"); //
                sVehicles.Add("BLISTA2"); //<!-- Blista Compact -->
                sVehicles.Add("BUFFALO"); //
                sVehicles.Add("BUFFALO2"); //<!-- Buffalo S -->
                sVehicles.Add("CARBONIZZARE"); //
                sVehicles.Add("COMET2"); //<!-- Comet -->
                sVehicles.Add("COMET3"); //<!-- Comet Retro Custom -->
                sVehicles.Add("COMET4"); //<!-- Comet Safari -->
                sVehicles.Add("COMET5"); //<!-- Comet SR -->
                sVehicles.Add("COQUETTE"); //
                sVehicles.Add("TAMPA2"); //<!-- Drift Tampa -->
                sVehicles.Add("ELEGY"); //<!-- Elegy Retro Custom -->
                sVehicles.Add("ELEGY2"); //<!-- Elegy RH8 -->
                sVehicles.Add("FELTZER2"); //<!-- Feltzer -->
                sVehicles.Add("FLASHGT"); //
                sVehicles.Add("FUROREGT"); //
                sVehicles.Add("FUSILADE"); //
                sVehicles.Add("FUTO"); //
                sVehicles.Add("GB200"); //
                sVehicles.Add("BLISTA3"); //<!-- Go Go Monkey Blista -->
                sVehicles.Add("HOTRING"); //
                sVehicles.Add("JESTER"); //
                sVehicles.Add("JESTER2"); //<!-- Jester (Racecar) -->
                sVehicles.Add("JESTER3"); //<!-- Jester Classic -->
                sVehicles.Add("KHAMELION"); //
                sVehicles.Add("KURUMA"); //
                sVehicles.Add("LYNX"); //
                sVehicles.Add("MASSACRO"); //
                sVehicles.Add("MASSACRO2"); //<!-- Massacro (Racecar) -->
                sVehicles.Add("NEON"); //
                sVehicles.Add("OMNIS"); //
                sVehicles.Add("PARIAH"); //
                sVehicles.Add("PENUMBRA"); //
                sVehicles.Add("RAIDEN"); //
                sVehicles.Add("RAPIDGT"); //
                sVehicles.Add("RAPIDGT2"); //<!-- Rapid GT Cabrio -->
                sVehicles.Add("RAPTOR"); //
                sVehicles.Add("REVOLTER"); //
                sVehicles.Add("RUSTON"); //
                sVehicles.Add("SCHAFTER4"); //<!-- Schafter LWB -->
                sVehicles.Add("SCHAFTER3"); //<!-- Schafter V12 -->
                sVehicles.Add("SCHWARZER"); //
                sVehicles.Add("SENTINEL3"); //<!-- Sentinel Classic -->
                sVehicles.Add("SEVEN70"); //
                sVehicles.Add("SPECTER"); //
                sVehicles.Add("SPECTER2"); //<!-- Specter Custom -->
                sVehicles.Add("BUFFALO3"); //<!-- Sprunk Buffalo -->
                sVehicles.Add("STREITER"); //
                sVehicles.Add("SULTAN"); //
                sVehicles.Add("SURANO"); //
                sVehicles.Add("TROPOS"); //
                sVehicles.Add("VERLIERER2"); //
                if (bTrainM)
                {
                    sVehicles.Add("DRAFTER"); //<!-- 8F Drafter -->
                    sVehicles.Add("IMORGON"); //
                    sVehicles.Add("ISSI7"); //<!-- Issi Sport -->
                    sVehicles.Add("ITALIGTO"); //
                    sVehicles.Add("JUGULAR"); //
                    sVehicles.Add("KOMODA"); //
                    sVehicles.Add("LOCUST"); //
                    sVehicles.Add("NEO"); //
                    sVehicles.Add("PARAGON"); //
                    sVehicles.Add("PARAGON2"); //<!-- Paragon R (Armored) -->
                    sVehicles.Add("SCHLAGEN"); //
                    sVehicles.Add("SUGOI"); //
                    sVehicles.Add("SULTAN2"); //<!-- Sultan Classic -->
                    sVehicles.Add("VSTR"); //<!-- V-STR -->
                    sVehicles.Add("COQUETTE4"); //<!-- Coquette D10  -->
                    sVehicles.Add("PENUMBRA2"); //<!-- Penumbra FF   -->
                    sVehicles.Add("ITALIRSX"); //><!-- Grotti Itali RSX -->Spports
                }

                int iCar = FindRandom(45, 0, sVehicles.Count - 1);
                sThisVehicle = sVehicles[iCar];
            }       //Sport
            else if (iVechList == 4)
            {
                sVehicles.Add("BLADE"); //
                sVehicles.Add("BUCCANEER"); //
                sVehicles.Add("BUCCANEER2"); //<!-- Buccaneer Custom -->
                sVehicles.Add("STALION2"); //<!-- Burger Shot Stallion -->
                sVehicles.Add("CHINO"); //
                sVehicles.Add("CHINO2"); //<!-- Chino Custom -->
                sVehicles.Add("COQUETTE3"); //<!-- Coquette BlackFin -->
                sVehicles.Add("DOMINATOR"); //
                sVehicles.Add("DOMINATOR3"); //<!-- Dominator GTX -->
                sVehicles.Add("YOSEMITE2"); //<!-- Drift Yosemite -->
                sVehicles.Add("DUKES"); //
                sVehicles.Add("ELLIE"); //
                sVehicles.Add("FACTION"); //
                sVehicles.Add("FACTION2"); //<!-- Faction Custom -->
                sVehicles.Add("FACTION3"); //<!-- Faction Custom Donk -->
                sVehicles.Add("GAUNTLET"); //
                sVehicles.Add("HERMES"); //
                sVehicles.Add("HOTKNIFE"); //
                sVehicles.Add("HUSTLER"); //
                sVehicles.Add("SLAMVAN2"); //<!-- Lost Slamvan -->
                sVehicles.Add("LURCHER"); //
                sVehicles.Add("MOONBEAM"); //
                sVehicles.Add("MOONBEAM2"); //<!-- Moonbeam Custom -->
                sVehicles.Add("NIGHTSHADE"); //
                sVehicles.Add("PHOENIX"); //
                sVehicles.Add("PICADOR"); //
                sVehicles.Add("DOMINATOR2"); //<!-- Pisswasser Dominator -->
                sVehicles.Add("RATLOADER"); //
                sVehicles.Add("RATLOADER2"); //<!-- Rat-Truck -->
                sVehicles.Add("GAUNTLET2"); //<!-- Redwood Gauntlet -->
                sVehicles.Add("RUINER"); //
                sVehicles.Add("SABREGT"); //
                sVehicles.Add("SABREGT2"); //<!-- Sabre Turbo Custom -->
                sVehicles.Add("SLAMVAN"); //
                sVehicles.Add("SLAMVAN3"); //<!-- Slamvan Custom -->
                sVehicles.Add("STALION"); //
                sVehicles.Add("TAMPA"); //
                sVehicles.Add("VIGERO"); //
                sVehicles.Add("VIRGO"); //
                sVehicles.Add("VIRGO3"); //<!-- Virgo Classic -->
                sVehicles.Add("VIRGO2"); //<!-- Virgo Classic Custom -->
                sVehicles.Add("VOODOO"); //
                sVehicles.Add("VOODOO2"); //<!-- Voodoo Custom -->
                sVehicles.Add("YOSEMITE"); //
                if (bTrainM)
                {
                    sVehicles.Add("CLIQUE"); //
                    sVehicles.Add("DEVIANT"); //
                    sVehicles.Add("GAUNTLET3"); //<!-- Gauntlet Classic -->
                    sVehicles.Add("GAUNTLET4"); //<!-- Gauntlet Hellfire -->
                    sVehicles.Add("PEYOTE2"); //<!-- Peyote Gasser -->
                    sVehicles.Add("IMPALER"); //
                    sVehicles.Add("TULIP"); //
                    sVehicles.Add("VAMOS"); //
                    sVehicles.Add("DUKES3"); //
                    sVehicles.Add("GAUNTLET5"); //
                    sVehicles.Add("MANANA2"); //
                    sVehicles.Add("PEYOTE3"); //
                    sVehicles.Add("GLENDALE2"); //
                    sVehicles.Add("YOSEMITE3"); //
                }

                int iCar = FindRandom(46, 0, sVehicles.Count - 1);
                sThisVehicle = sVehicles[iCar];
            }       //Mussle
            else if (iVechList == 5)
            {
                sVehicles.Add("Z190"); //<!-- 190z -->
                sVehicles.Add("ARDENT"); //
                sVehicles.Add("CASCO"); //
                sVehicles.Add("CHEBUREK"); //
                sVehicles.Add("CHEETAH2"); //<!-- Cheetah Classic -->
                sVehicles.Add("COQUETTE2"); //<!-- Coquette Classic -->
                sVehicles.Add("FAGALOA"); //
                sVehicles.Add("BTYPE2"); //<!-- FrÃ¤nken Stange -->
                sVehicles.Add("GT500"); //
                sVehicles.Add("INFERNUS2"); //<!-- Infernus Classic -->
                sVehicles.Add("JB700"); //
                sVehicles.Add("MAMBA"); //
                sVehicles.Add("MANANA"); //
                sVehicles.Add("MICHELLI"); //
                sVehicles.Add("MONROE"); //
                sVehicles.Add("PEYOTE"); //
                sVehicles.Add("PIGALLE"); //
                sVehicles.Add("RAPIDGT3"); //<!-- Rapid GT Classic -->
                sVehicles.Add("RETINUE"); //
                sVehicles.Add("BTYPE"); //<!-- Roosevelt -->
                sVehicles.Add("BTYPE3"); //<!-- Roosevelt Valor -->
                sVehicles.Add("SAVESTRA"); //
                sVehicles.Add("STINGER"); //
                sVehicles.Add("STINGERGT"); //
                sVehicles.Add("FELTZER3"); //<!-- Stirling GT -->
                sVehicles.Add("SWINGER"); //
                sVehicles.Add("TORERO"); //
                sVehicles.Add("TORNADO"); //
                sVehicles.Add("TORNADO2"); //<!-- Tornado Cabrio -->
                sVehicles.Add("TORNADO3"); //<!-- Rusty Tornado -->
                sVehicles.Add("TORNADO4"); //<!-- Mariachi Tornado -->
                sVehicles.Add("TORNADO5"); //<!-- Tornado Custom -->
                sVehicles.Add("TORNADO6"); //<!-- Tornado Rat Rod -->
                sVehicles.Add("TURISMO2"); //<!-- Turismo Classic -->
                sVehicles.Add("VISERIS"); //
                sVehicles.Add("ZTYPE"); //
                if (bTrainM)
                {
                    sVehicles.Add("DYNASTY"); //
                    sVehicles.Add("JB7002"); //<!-- JB 700W -->
                    sVehicles.Add("NEBULA"); //
                    sVehicles.Add("RETINUE2"); //<!-- Retinue MkII -->
                    sVehicles.Add("ZION3"); //<!-- Zion Classic -->
                    sVehicles.Add("COQUETTE4"); //<!-- Coquette D10  -->
                    sVehicles.Add("TOREADOR"); //><!-- Pegassi Toreador -->sportsClassic
                }

                int iCar = FindRandom(47, 0, sVehicles.Count - 1);
                sThisVehicle = sVehicles[iCar];
            }       //SportsClassic
            else if (iVechList == 6)
            {
                sVehicles.Add("BLISTA"); //
                sVehicles.Add("BRIOSO"); //
                sVehicles.Add("DILETTANTE"); //
                sVehicles.Add("ISSI2"); //
                sVehicles.Add("ISSI3"); //<!-- Issi Classic -->
                sVehicles.Add("PANTO"); //
                sVehicles.Add("PRAIRIE"); //
                sVehicles.Add("RHAPSODY"); //
                if (bTrainM)
                {
                    sVehicles.Add("ASBO"); //
                    sVehicles.Add("KANJO"); //<!-- Blista Kanjo -->
                    sVehicles.Add("CLUB");
                    sVehicles.Add("BRIOSO2"); //>Grotti Brioso 300
                    sVehicles.Add("WEEVIL"); //><!-- BF Weevil -->
                }

                int iCar = FindRandom(48, 0, sVehicles.Count - 1);
                sThisVehicle = sVehicles[iCar];
            }       //Compact
            else if (iVechList == 7)
            {
                sVehicles.Add("ASEA"); //
                sVehicles.Add("ASTEROPE"); //
                sVehicles.Add("COGNOSCENTI"); //
                sVehicles.Add("COGNOSCENTI2"); //<!-- Cognoscenti (Armored) -->
                sVehicles.Add("COG55"); //<!-- Cognoscenti 55 -->
                sVehicles.Add("COG552"); //<!-- Cognoscenti 55 (Armored) -->
                sVehicles.Add("EMPEROR"); //
                sVehicles.Add("EMPEROR2"); //<!-- Emperor beater variant -->
                sVehicles.Add("FUGITIVE"); //
                sVehicles.Add("GLENDALE"); //
                sVehicles.Add("INGOT"); //
                sVehicles.Add("INTRUDER"); //
                sVehicles.Add("PREMIER"); //
                sVehicles.Add("PRIMO"); //
                sVehicles.Add("PRIMO2"); //<!-- Primo Custom -->
                sVehicles.Add("REGINA"); //
                sVehicles.Add("ROMERO"); //
                sVehicles.Add("SCHAFTER2"); //
                sVehicles.Add("SCHAFTER6"); //<!-- Schafter LWB (Armored) -->
                sVehicles.Add("SCHAFTER5"); //<!-- Schafter V12 (Armored) -->
                sVehicles.Add("STAFFORD"); //
                sVehicles.Add("STANIER"); //
                sVehicles.Add("STRATUM"); //
                sVehicles.Add("STRETCH"); //
                sVehicles.Add("SUPERD"); //
                sVehicles.Add("SURGE"); //
                sVehicles.Add("TAILGATER"); //
                sVehicles.Add("WARRENER"); //
                sVehicles.Add("WASHINGTON"); //

                int iCar = FindRandom(49, 0, sVehicles.Count - 1);
                sThisVehicle = sVehicles[iCar];
            }       //Sedan
            else if (iVechList == 8)
            {
                sVehicles.Add("BIFTA"); //
                sVehicles.Add("BODHI2"); //
                sVehicles.Add("BRAWLER"); //
                sVehicles.Add("TROPHYTRUCK2"); //<!-- Desert Raid -->
                sVehicles.Add("DUBSTA3"); //<!-- Dubsta 6x6 -->
                sVehicles.Add("DUNE"); //
                sVehicles.Add("DLOADER"); //
                sVehicles.Add("FREECRAWLER"); //
                sVehicles.Add("HELLION");
                sVehicles.Add("BFINJECTION"); //
                sVehicles.Add("KALAHARI"); //
                sVehicles.Add("KAMACHO"); //
                sVehicles.Add("MESA3"); //<!-- Merryweather Mesa -->
                sVehicles.Add("RANCHERXL"); //
                sVehicles.Add("REBEL2"); //
                sVehicles.Add("RIATA"); //
                sVehicles.Add("REBEL"); //<!-- Rusty Rebel -->
                sVehicles.Add("SANDKING2"); //<!-- Sandking SWB -->
                sVehicles.Add("SANDKING"); //<!-- Sandking XL -->
                sVehicles.Add("DUNE2"); //<!-- Space Docker -->
                sVehicles.Add("TROPHYTRUCK"); //
                sVehicles.Add("RALLYTRUCK"); //<!-- Dune -->
                if (bTrainM)
                {
                    sVehicles.Add("CARACARA2"); //<!-- Caracara 4x4 -->
                    sVehicles.Add("EVERON"); //
                    sVehicles.Add("OUTLAW"); //
                    sVehicles.Add("VAGRANT"); //
                    sVehicles.Add("ZHABA"); //
                    sVehicles.Add("WINKY"); //><!-- Vapid Winky -->	
                }

                int iCar = FindRandom(50, 0, sVehicles.Count - 1);
                sThisVehicle = sVehicles[iCar];
            }       //Offroad
            else if (iVechList == 9)
            {
                sVehicles.Add("BALLER"); //
                sVehicles.Add("BALLER2"); //<!-- Baller 2nd gen variant -->
                sVehicles.Add("BALLER3"); //<!-- Baller LE -->
                sVehicles.Add("BALLER5"); //<!-- Baller LE (Armored) -->
                sVehicles.Add("BALLER4"); //<!-- Baller LE LWB -->
                sVehicles.Add("BALLER6"); //<!-- Baller LE LWB (Armored) -->
                sVehicles.Add("BJXL"); //
                sVehicles.Add("CAVALCADE"); //
                sVehicles.Add("CAVALCADE2"); //<!-- Cavalcade 2nd gen variant -->
                sVehicles.Add("CONTENDER"); //
                sVehicles.Add("DUBSTA"); //
                sVehicles.Add("DUBSTA2"); //<!-- Dubsta black variant -->
                sVehicles.Add("FQ2"); //
                sVehicles.Add("GRANGER"); //
                sVehicles.Add("GRESLEY"); //
                sVehicles.Add("HABANERO"); //
                sVehicles.Add("HUNTLEY"); //
                sVehicles.Add("LANDSTALKER"); //
                sVehicles.Add("MESA"); //
                sVehicles.Add("PATRIOT"); //
                sVehicles.Add("PATRIOT2"); //<!-- Patriot Stretch -->
                sVehicles.Add("RADI"); //
                sVehicles.Add("ROCOTO"); //
                sVehicles.Add("SEMINOLE"); //
                sVehicles.Add("SERRANO"); //
                sVehicles.Add("XLS"); //
                sVehicles.Add("XLS2"); //<!-- XLS (Armored) -->
                if (bTrainM)
                {
                    sVehicles.Add("NOVAK"); //
                    sVehicles.Add("REBLA"); //
                    sVehicles.Add("TOROS"); //
                    sVehicles.Add("LANDSTALKER2"); //
                    sVehicles.Add("SEMINOLE2"); //
                }

                int iCar = FindRandom(51, 0, sVehicles.Count - 1);
                sThisVehicle = sVehicles[iCar];
            }       //SUV
            else
            {
                int iCar = FindRandom(58, 0, sCustomCarz.Count - 1);
                sThisVehicle = sCustomCarz[iCar];
            }

            return sThisVehicle;
        }
        private void ImportsExpo_CollisionBug(int iZone)
        {

            if (iZone == 2)
            {

                Vector3 ReBug_01 = new Vector3(-2138.074f, -506.461f, 0.7643f);
                Vector3 ReBugRot_01 = new Vector3(0.00f, 0.00f, -132.534f);

                Vector3 ReBug_02 = new Vector3(-2141.46f, -510.81f, 2.20f);
                Vector3 ReBugRot_02 = new Vector3(0.00f, 0.00f, -133.70f);

                BuildProp("prop_byard_rampold", ReBug_01, ReBugRot_01, true, true);
                BuildProp("prop_byard_rampold", ReBug_02, ReBugRot_02, true, true);
            }
            else if (iZone == 3)
            {
                Vector3 ReBug_01 = new Vector3(-3268.10f, 1268.10f, 0.013f);
                Vector3 ReBugRot_01 = new Vector3(0.00f, 0.00f, 166.098f);

                Vector3 ReBug_02 = new Vector3(-3273.055f, 1269.149f, 1.398f);
                Vector3 ReBugRot_02 = new Vector3(0.00f, 0.00f, 166.793f);

                BuildProp("prop_byard_rampold", ReBug_01, ReBugRot_01, true, true);
                BuildProp("prop_byard_rampold", ReBug_02, ReBugRot_02, true, true);
            }
            else if (iZone == 4)
            {
                Vector3 ReBug_01 = new Vector3(2851.892f, -636.868f, 2.032f);
                Vector3 ReBugRot_01 = new Vector3(0.00f, 0.00f, 18.182f);

                Vector3 ReBug_02 = new Vector3(2847.08f, -638.29f, 0.862f);
                Vector3 ReBugRot_02 = new Vector3(0.00f, 0.00f, 15.956f);

                Vector3 ReBug_03 = new Vector3(2842.25f, -640.03f, -0.872f);
                Vector3 ReBugRot_03 = new Vector3(0.00f, 0.00f, 17.137f);

                BuildProp("prop_byard_rampold", ReBug_01, ReBugRot_01, true, true);
                BuildProp("prop_byard_rampold", ReBug_02, ReBugRot_02, true, true);
                BuildProp("prop_byard_rampold", ReBug_03, ReBugRot_03, true, true);
            }
            else if (iZone == 5)
            {
                Vector3 ReBug_01 = new Vector3(3874.278f, 4463.562f, 2.253f);
                Vector3 ReBugRot_01 = new Vector3(6.67f, 12.099f, 0.233f);

                Vector3 ReBug_02 = new Vector3(3869.579f, 4463.611f, 1.776f);
                Vector3 ReBugRot_02 = new Vector3(2.668f, 11.799f, -1.541f);

                Vector3 ReBug_03 = new Vector3(3865.168f, 4463.689f, 1.338f);
                Vector3 ReBugRot_03 = new Vector3(-1.067f, 12.799f, -2.16f);

                BuildProp("prop_byard_rampold", ReBug_01, ReBugRot_01, true, true);
                BuildProp("prop_byard_rampold", ReBug_02, ReBugRot_02, true, true);
                BuildProp("prop_byard_rampold", ReBug_03, ReBugRot_03, true, true);
            }
            else if (iZone == 6)
            {
                Vector3 ReBug_01 = new Vector3(-1827.69f, 4847.84f, 2.75f);
                Vector3 ReBugRot_01 = new Vector3(2.134f, 2.999f, 112.71f);

                Vector3 ReBug_02 = new Vector3(-1825.889f, 4843.404f, 1.618f);
                Vector3 ReBugRot_02 = new Vector3(-7.47f, 4.09f, 110.105f);

                Vector3 ReBug_03 = new Vector3(-1823.82f, 4838.69f, 0.171f);
                Vector3 ReBugRot_03 = new Vector3(5.33f, 2.299f, 110.10f);

                BuildProp("prop_byard_rampold", ReBug_01, ReBugRot_01, true, true);
                BuildProp("prop_byard_rampold", ReBug_02, ReBugRot_02, true, true);
                BuildProp("prop_byard_rampold", ReBug_03, ReBugRot_03, true, true);
            }
        }
        private void ImportsExpo_MoveYourBoat()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("ImportsExpo_MoveYourBoat", tEx);

            Vehicle[] VTarg = World.GetNearbyVehicles(VectorList_01[0], 55.00f);

            for (int i = 0; i < VTarg.Count(); i++)
            {
                if (VehExists(VTarg, i))
                {
                    if (VTarg[i].ClassType == VehicleClass.Boats)
                        VTarg[i].Delete();
                }
            }
        }
        private void ImportsExpo_Targit()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("ImportsExpo_Targit", tEx);

            Vector3 CorHi = VectorList_01[0];
            CorHi.Z -= 0.6f;
            if (iLocationX == 1)
                AddTarget(CorHi, false, true, 1.00f, false);
            else
                AddTarget(CorHi, true, true, 1.00f, false);
            TheYellowCorona(CorHi, 10.00f);
        }
        private void ImportsExpo_Gangz()
        {
            iTracking = Game.GameTime + 1000;

            for (int i = 0; i < PedList_02.Count; i++)
            {
                if (PedList_02[i].IsDead)
                {
                    if (PedList_02[i].CurrentBlip.Exists())
                        PedList_02[i].CurrentBlip.Remove();
                    PedList_02[i].MarkAsNoLongerNeeded();
                    PedList_02.RemoveAt(i);
                }
                else if (PedList_02[i].Position.DistanceTo(Game.Player.Character.Position) > 150.00f || Game.Player.Character.Position.DistanceTo(VectorList_01[0]) < 250.00f)
                {
                    PedList_02[i].Task.FleeFrom(Game.Player.Character);
                    if (PedList_02[i].CurrentBlip.Exists())
                        PedList_02[i].CurrentBlip.Remove();
                    PedList_02[i].MarkAsNoLongerNeeded();
                    PedList_02.RemoveAt(i);
                }
                else if (!PedList_02[i].IsInVehicle())
                {
                    if (!PedList_02[i].CurrentBlip.Exists())
                        PedBlimp(PedList_02[i], BlipColor.Red3, 0.75f, false, false);
                }
            }

            for (int i = 0; i < VehicleList_01.Count; i++)
            {
                if (VehicleList_01[i].CurrentBlip.Exists())
                {
                    if (VehicleList_01[i].CurrentBlip.Color == BlipColor.Red)
                    {
                        if (VehicleList_01[i].IsSeatFree(VehicleSeat.Driver) && VehicleList_01[i] != VehTrackin_01)
                        {
                            if (VehicleList_01[i].CurrentBlip.Exists())
                                VehicleList_01[i].CurrentBlip.Remove();
                            VehicleList_01[i].MarkAsNoLongerNeeded();
                            VehicleList_01.RemoveAt(i);
                        }
                        else
                        {
                            if (VehicleList_01[i].GetPedOnSeat(VehicleSeat.Driver).IsFleeing || VehicleList_01[i].GetPedOnSeat(VehicleSeat.Driver).IsDead)
                            {
                                if (VehicleList_01[i].CurrentBlip.Exists())
                                    VehicleList_01[i].CurrentBlip.Remove();
                                VehicleList_01[i].MarkAsNoLongerNeeded();
                                VehicleList_01.RemoveAt(i);
                            }
                        }
                    }
                }
            }

            if (iTime_01[0] < Game.GameTime)
            {
                if (PedList_02.Count < 6 && Game.Player.Character.Position.DistanceTo(VectorList_01[0]) > 250.00f)
                {
                    iTime_01[0] = Game.GameTime + 6000;
                    Vector3 Vpos = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 15);
                    FindAndReplaceVeh(Vpos, 0, 1, 0, 8, 0, false, false, true, 85.00f, 30.00f, "KURUMA", true, 2, 10, true);
                }
                else
                    iTime_01[0] = Game.GameTime + RandInt(30000, 45000);
            }
        }
        private void ImportsExpo_FunPlates(Vehicle vhicary)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("ImportsExpo_FunPlates", tEx);

            List<string> IPlate = new List<string>();
            IPlate.Add("JU52FKU");
            IPlate.Add("ZR0 KIDZ");
            IPlate.Add("MUAHAHA");
            IPlate.Add("P54CH0");
            IPlate.Add("B88B8BB");
            IPlate.Add("P004MAD");
            IPlate.Add("CARDIEM");
            IPlate.Add("MNNGFUL");
            IPlate.Add("SU55PCT");
            IPlate.Add("M11LFS");
            IPlate.Add("G5POT");
            IPlate.Add("H0R5SH1T");
            IPlate.Add("CU11NNT");
            IPlate.Add("PB4UGO");
            IPlate.Add("PMS247");
            IPlate.Add("HUF4RTD");
            IPlate.Add("N1NJA");
            IPlate.Add("STFUPLZ");
            IPlate.Add("3JOH22A");
            IPlate.Add("4EVERL8");
            IPlate.Add("KSMYGAS");
            IPlate.Add("EASYRDR");
            IPlate.Add("CYABYE");
            IPlate.Add("JEDIIAM");
            IPlate.Add("X32iAR0");
            IPlate.Add("JC51BEL");
            IPlate.Add("D4TBOI");
            IPlate.Add("YSOFFCR");
            IPlate.Add("TPL55FUN");
            IPlate.Add("A5RSE");
            IPlate.Add("BE11END");
            IPlate.Add("UT02SER");
            IPlate.Add("PENN15");
            IPlate.Add("UG04POO");

            vhicary.NumberPlate = IPlate[RandInt(0, IPlate.Count - 1)];
        }
        private void DebtCollect_LoadHood()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("DebtCollect_LoadHood", tEx);

            int iAm = RandInt(1, 11);
            for (int i = 1; i < VectorList_01.Count - 1; i++)
            {
                int iAccurate = RandInt(25, 55);
                NPCSpawn(RandNPC(iAm), VectorList_01[i], 0.00f, iAccurate, 180, 2, 19, 0, null, 8, true, true, 0, 0);
            }
        }
        private void BikerRaids_LoadClutter()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("BikerRaids_LoadClutter", tEx);

            sList_01.Clear();
            List<string> sOldPropL = new List<string>();
            List<string> sPropL = new List<string>();

            if (iMissionVar_02 == 1)
            {
                sOldPropL.Add("security_low");
                sOldPropL.Add("coke_cut_01");
                sOldPropL.Add("coke_cut_02");
                sOldPropL.Add("coke_cut_03");
                sOldPropL.Add("security_high");
                sOldPropL.Add("production_upgrade");
                sOldPropL.Add("production_basic");
                sOldPropL.Add("equipment_basic");
                sOldPropL.Add("equipment_upgrade");
                sOldPropL.Add("coke_cut_04");
                sOldPropL.Add("coke_cut_05");
                sOldPropL.Add("set_up");
                sOldPropL.Add("table_equipment");
                sOldPropL.Add("table_equipment_upgrade");
                sOldPropL.Add("coke_press_upgrade");
                sOldPropL.Add("coke_press_basic");

                if (iMissionVar_01 == 2)
                {
                    Vector3 Poz = new Vector3(1086.96191f, -3194.51221f, -39.9751938f);
                    Vector3 Rot = new Vector3(0.00f, 0.00f, -171.034943f);
                    BuildProp("prop_cratepile_07a_l1", Poz, Rot, true, false);

                    Poz = new Vector3(1094.07617f, -3193.77563f, -39.9933014f);
                    Rot = new Vector3(0.00f, 0.00f, -90.5383224f);
                    BuildProp("sm_prop_smug_crate_01a", Poz, Rot, true, false);

                    Poz = new Vector3(1096.43481f, -3198.1123f, -39.9933014f);
                    Rot = new Vector3(0.00f, 0.00f, -89.7508698f);
                    BuildProp("sm_prop_smug_crate_01a", Poz, Rot, true, false);
                }
                else
                {
                    sPropL.Add("coke_cut_01");
                    sPropL.Add("coke_cut_02");
                    sPropL.Add("coke_cut_03");
                    sPropL.Add("security_high");
                    sPropL.Add("production_upgrade");
                    sPropL.Add("equipment_upgrade");
                    sPropL.Add("coke_cut_04");
                    sPropL.Add("coke_cut_05");
                    sPropL.Add("set_up");
                    sPropL.Add("table_equipment_upgrade");
                    sPropL.Add("coke_press_upgrade");
                }
            }
            else if (iMissionVar_02 == 2)
            {
                sOldPropL.Add("counterfeit_security");
                sOldPropL.Add("counterfeit_cashpile10a");
                sOldPropL.Add("counterfeit_cashpile10b");
                sOldPropL.Add("counterfeit_cashpile10c");
                sOldPropL.Add("counterfeit_cashpile10d");
                sOldPropL.Add("counterfeit_cashpile20a");
                sOldPropL.Add("counterfeit_cashpile20b");
                sOldPropL.Add("counterfeit_cashpile20c");
                sOldPropL.Add("counterfeit_cashpile20d");
                sOldPropL.Add("counterfeit_cashpile100a");
                sOldPropL.Add("counterfeit_cashpile100b");
                sOldPropL.Add("counterfeit_cashpile100c");
                sOldPropL.Add("counterfeit_cashpile100d");
                sOldPropL.Add("counterfeit_low_security");
                sOldPropL.Add("counterfeit_setup");
                sOldPropL.Add("counterfeit_standard_equip_no_prod");
                sOldPropL.Add("counterfeit_upgrade_equip_no_prod");
                sOldPropL.Add("counterfeit_upgrade_equip");
                sOldPropL.Add("dryera_off");
                sOldPropL.Add("dryerb_off");
                sOldPropL.Add("dryerc_off");
                sOldPropL.Add("dryerd_off");
                sOldPropL.Add("dryera_on");
                sOldPropL.Add("dryerb_on");
                sOldPropL.Add("dryerc_on");
                sOldPropL.Add("dryerd_on");
                sOldPropL.Add("dryera_open");
                sOldPropL.Add("dryerb_open");
                sOldPropL.Add("dryerc_open");
                sOldPropL.Add("dryerd_open");
                sOldPropL.Add("money_cutter");
                sOldPropL.Add("special_chairs");

                if (iMissionVar_01 == 2)
                {
                    Vector3 Poz = new Vector3(1137.93652f, -3195.95581f, -40.6542892f);
                    Vector3 Rot = new Vector3(0.00f, 0.00f, -0.86184f);
                    BuildProp("prop_cons_plyboard_01", Poz, Rot, true, false);

                    Poz = new Vector3(1136.0896f, -3198.22876f, -40.660553f);
                    Rot = new Vector3(0.00f, 0.00f, 89.6559372f);
                    BuildProp("sm_prop_smug_crate_01a", Poz, Rot, true, false);

                    Poz = new Vector3(1136.03723f, -3198.22803f, -39.7015251f);
                    Rot = new Vector3(0.00f, 0.00f, 89.6559372f);
                    BuildProp("sm_prop_smug_crate_01a", Poz, Rot, true, false);

                    Poz = new Vector3(1129.00f, -3198.18506f, -40.660553f);
                    Rot = new Vector3(0.00f, 0.00f, -179.42128f);
                    BuildProp("sm_prop_smug_crate_01a", Poz, Rot, true, false);

                    Poz = new Vector3(1125.31262f, -3195.07422f, -41.4020462f);
                    Rot = new Vector3(0.00f, 0.00f, -0.603f);
                    BuildProp("sm_prop_smug_crate_01a", Poz, Rot, true, false);
                }
                else
                {
                    sPropL.Add("counterfeit_security");
                    sPropL.Add("counterfeit_cashpile20a");
                    sPropL.Add("counterfeit_cashpile100b");
                    sPropL.Add("counterfeit_cashpile100c");
                    sPropL.Add("counterfeit_cashpile100d");
                    sPropL.Add("counterfeit_setup");
                    sPropL.Add("counterfeit_upgrade_equip");
                    sPropL.Add("dryera_on");
                    sPropL.Add("dryerb_open");
                    sPropL.Add("dryerc_on");
                    sPropL.Add("dryerd_off");
                    sPropL.Add("money_cutter");
                    sPropL.Add("special_chairs");
                }
            }
            else if (iMissionVar_02 == 3)
            {
                sOldPropL.Add("equipment_upgrade");
                sOldPropL.Add("equipment_basic");
                sOldPropL.Add("production");
                sOldPropL.Add("security_high");
                sOldPropL.Add("security_low");
                sOldPropL.Add("set_up");
                sOldPropL.Add("clutter");
                sOldPropL.Add("interior_basic");
                sOldPropL.Add("interior_upgrade");
                sOldPropL.Add("Chair01");
                sOldPropL.Add("Chair02");
                sOldPropL.Add("Chair03");
                sOldPropL.Add("Chair04");
                sOldPropL.Add("Chair05");
                sOldPropL.Add("Chair06");
                sOldPropL.Add("Chair07");

                if (iMissionVar_01 == 2)
                {
                    sPropL.Add("interior_basic");
                }
                else
                {
                    sPropL.Add("equipment_upgrade");
                    sPropL.Add("production");
                    sPropL.Add("security_high");
                    sPropL.Add("clutter");
                    sPropL.Add("interior_upgrade");
                    sPropL.Add("Chair01");
                    sPropL.Add("Chair02");
                    sPropL.Add("Chair03");
                    sPropL.Add("Chair04");
                    sPropL.Add("Chair05");
                    sPropL.Add("Chair06");
                    sPropL.Add("Chair07");
                }
            }
            else if (iMissionVar_02 == 4)
            {
                sOldPropL.Add("meth_lab_upgrade");
                sOldPropL.Add("meth_lab_basic");
                sOldPropL.Add("meth_lab_production");
                sOldPropL.Add("meth_lab_security_high");
                sOldPropL.Add("meth_lab_setup");
                sOldPropL.Add("meth_lab_empty");

                if (iMissionVar_01 == 2)
                {
                    sPropL.Add("meth_lab_empty");

                    Vector3 Poz = new Vector3(999.5273f, -3199.010f, -37.4124f);
                    Vector3 Rot = new Vector3(0.00f, 0.00f, -90.2872f);
                    BuildProp("prop_cons_plyboard_01", Poz, Rot, true, false);

                    Poz = new Vector3(1005.87811f, -3200.47021f, -39.9929962f);
                    Rot = new Vector3(0.00f, 0.00f, -90.4774933f);
                    BuildProp("sm_prop_smug_crate_01a", Poz, Rot, true, false);

                    Poz = new Vector3(1007.12366f, -3196.58594f, -39.9929962f);
                    Rot = new Vector3(0.00f, 0.00f, -89.2303009f);
                    BuildProp("sm_prop_smug_crate_01a", Poz, Rot, true, false);

                    Poz = new Vector3(1007.12366f, -3196.58594f, -39.9929962f);
                    Rot = new Vector3(0.00f, 0.00f, -90.4774933f);
                    BuildProp("sm_prop_smug_crate_01a", Poz, Rot, true, false);

                    Poz = new Vector3(1007.12366f, -3196.58594f, -39.9929962f);
                    Rot = new Vector3(0.00f, 0.00f, -90.0826187f);
                    BuildProp("sm_prop_smug_crate_01a", Poz, Rot, true, false);
                }
                else
                {
                    sPropL.Add("meth_lab_upgrade");
                    sPropL.Add("meth_lab_production");
                    sPropL.Add("meth_lab_security_high");
                    sPropL.Add("meth_lab_setup");
                }
            }
            else
            {
                sOldPropL.Add("weed_growtha_stage1");
                sOldPropL.Add("weed_growtha_stage2");
                sOldPropL.Add("weed_growtha_stage3");
                sOldPropL.Add("weed_standard_equip");
                sOldPropL.Add("weed_upgrade_equip");
                sOldPropL.Add("weed_drying");
                sOldPropL.Add("weed_growthb_stage1");
                sOldPropL.Add("weed_growthb_stage2");
                sOldPropL.Add("weed_growthb_stage3");
                sOldPropL.Add("weed_growthc_stage1");
                sOldPropL.Add("weed_growthc_stage2");
                sOldPropL.Add("weed_growthc_stage3");
                sOldPropL.Add("weed_growthd_stage1");
                sOldPropL.Add("weed_growthd_stage2");
                sOldPropL.Add("weed_growthd_stage3");
                sOldPropL.Add("weed_growthe_stage1");
                sOldPropL.Add("weed_growthe_stage2");
                sOldPropL.Add("weed_growthe_stage3");
                sOldPropL.Add("weed_growthf_stage1");
                sOldPropL.Add("weed_growthf_stage2");
                sOldPropL.Add("weed_growthf_stage3");
                sOldPropL.Add("weed_growthg_stage1");
                sOldPropL.Add("weed_growthg_stage2");
                sOldPropL.Add("weed_growthg_stage3");
                sOldPropL.Add("weed_growthh_stage1");
                sOldPropL.Add("weed_growthh_stage2");
                sOldPropL.Add("weed_growthh_stage3");
                sOldPropL.Add("weed_growthi_stage1");
                sOldPropL.Add("weed_growthi_stage2");
                sOldPropL.Add("weed_growthi_stage3");
                sOldPropL.Add("weed_security_upgrade");
                sOldPropL.Add("weed_production");
                sOldPropL.Add("weed_set_up");
                sOldPropL.Add("weed_hosea");
                sOldPropL.Add("weed_hoseb");
                sOldPropL.Add("weed_hosec");
                sOldPropL.Add("weed_hosed");
                sOldPropL.Add("weed_hosee");
                sOldPropL.Add("weed_hosef");
                sOldPropL.Add("weed_hoseg");
                sOldPropL.Add("weed_hoseh");
                sOldPropL.Add("weed_hosei");
                sOldPropL.Add("light_growtha_stage23_standard");
                sOldPropL.Add("light_growthb_stage23_standard");
                sOldPropL.Add("light_growthc_stage23_standard");
                sOldPropL.Add("light_growthd_stage23_standard");
                sOldPropL.Add("light_growthe_stage23_standard");
                sOldPropL.Add("light_growthf_stage23_standard");
                sOldPropL.Add("light_growthg_stage23_standard");
                sOldPropL.Add("light_growthh_stage23_standard");
                sOldPropL.Add("light_growthi_stage23_standard");
                sOldPropL.Add("light_growtha_stage23_upgrade");
                sOldPropL.Add("light_growthb_stage23_upgrade");
                sOldPropL.Add("light_growthc_stage23_upgrade");
                sOldPropL.Add("light_growthd_stage23_upgrade");
                sOldPropL.Add("light_growthe_stage23_upgrade");
                sOldPropL.Add("light_growthf_stage23_upgrade");
                sOldPropL.Add("light_growthg_stage23_upgrade");
                sOldPropL.Add("light_growthh_stage23_upgrade");
                sOldPropL.Add("light_growthi_stage23_upgrade");
                sOldPropL.Add("weed_low_security");
                sOldPropL.Add("weed_chairs");

                if (iMissionVar_01 == 2)
                {
                    sPropL.Add("weed_growtha_stage1");
                    sPropL.Add("weed_growthb_stage1");
                    sPropL.Add("weed_growthc_stage1");
                    sPropL.Add("weed_growthd_stage1");
                    sPropL.Add("weed_growthe_stage1");
                    sPropL.Add("weed_growthf_stage1");
                    sPropL.Add("weed_growthg_stage1");
                    sPropL.Add("weed_growthh_stage1");
                    sPropL.Add("weed_growthi_stage1");
                    sPropL.Add("weed_standard_equip");

                    Vector3 Poz = new Vector3(1063.22192f, -3186.30127f, -40.1368523f);
                    Vector3 Rot = new Vector3(0.00f, 0.00f, -178.209686f);
                    BuildProp("sm_prop_smug_crate_01a", Poz, Rot, true, false);

                    Poz = new Vector3(1058.3396f, -3194.53247f, -40.1611748f);
                    Rot = new Vector3(0.00f, 0.00f, 90.4894867f);
                    BuildProp("sm_prop_smug_crate_01a", Poz, Rot, true, false);

                    Poz = new Vector3(1042.08301f, -3203.67603f, -39.1605415f);
                    Rot = new Vector3(0.00f, 0.00f, 31.8992805f);
                    BuildProp("sm_prop_smug_crate_01a", Poz, Rot, true, false);
                }
                else
                {
                    sPropL.Add("weed_growtha_stage3");
                    sPropL.Add("weed_upgrade_equip");
                    sPropL.Add("weed_drying");
                    sPropL.Add("weed_growthb_stage2");
                    sPropL.Add("weed_growthc_stage1");
                    sPropL.Add("weed_growthd_stage3");
                    sPropL.Add("weed_growthe_stage3");
                    sPropL.Add("weed_growthf_stage2");
                    sPropL.Add("weed_growthg_stage1");
                    sPropL.Add("weed_growthh_stage2");
                    sPropL.Add("weed_growthi_stage3");
                    sPropL.Add("weed_security_upgrade");
                    sPropL.Add("weed_production");
                    sPropL.Add("weed_hosea");
                    sPropL.Add("weed_hoseb");
                    sPropL.Add("weed_hosec");
                    sPropL.Add("weed_hosed");
                    sPropL.Add("weed_hosee");
                    sPropL.Add("weed_hosef");
                    sPropL.Add("weed_hoseg");
                    sPropL.Add("weed_hoseh");
                    sPropL.Add("weed_hosei");
                    sPropL.Add("light_growtha_stage23_upgrade");
                    sPropL.Add("light_growthb_stage23_upgrade");
                    sPropL.Add("light_growthc_stage23_upgrade");
                    sPropL.Add("light_growthd_stage23_upgrade");
                    sPropL.Add("light_growthe_stage23_upgrade");
                    sPropL.Add("light_growthf_stage23_upgrade");
                    sPropL.Add("light_growthg_stage23_upgrade");
                    sPropL.Add("light_growthh_stage23_upgrade");
                    sPropL.Add("light_growthi_stage23_upgrade");
                    sPropL.Add("weed_chairs");
                }
            }

            Vector3 Vloc = VectorList_03[VectorList_03.Count - 1];
            int iWare = Function.Call<int>(Hash.GET_INTERIOR_AT_COORDS, Vloc.X, Vloc.Y, Vloc.Z);

            if (!Function.Call<bool>(Hash.IS_INTERIOR_DISABLED, iWare))
            {
                for (int i = 0; i < sOldPropL.Count; i++)
                {
                    if (Function.Call<bool>(Hash._IS_INTERIOR_PROP_ENABLED, iWare, sOldPropL[i]))
                    {
                        Function.Call(Hash._DISABLE_INTERIOR_PROP, iWare, sOldPropL[i]);
                        sList_01.Add(sOldPropL[i]);
                    }
                }
            }
            else
            {
                Function.Call((Hash)0x2CA429C029CCF247, iWare);
                Function.Call(Hash.SET_INTERIOR_ACTIVE, iWare, true);
            }
            Function.Call(Hash.DISABLE_INTERIOR, iWare, false);

            for (int i = 0; i < sPropL.Count; i++)
            {
                if (!Function.Call<bool>(Hash._IS_INTERIOR_PROP_ENABLED, iWare, sPropL[i]))
                    Function.Call(Hash._ENABLE_INTERIOR_PROP, iWare, sPropL[i]);
            }
            Function.Call(Hash.REFRESH_INTERIOR, iWare);

            if (iMissionVar_01 == 2)
            {
                List<string> Contains = new List<string>();
                Contains.Add("prop_container_03a");
                Contains.Add("prop_container_03b");
                Contains.Add("prop_container_03mb");
                Contains.Add("prop_container_old1");


                int iCont = RandInt(0, Contains.Count - 1);
                Vector3 posy = new Vector3(VectorList_02[0].X, VectorList_02[0].Y, VectorList_02[0].Z - 0.90f);
                Vector3 Rots = new Vector3(0.00f, 0.00f, fGetDir);
                BuildProp(Contains[iCont], posy, Rots, true, true);

            }
        }
        private void BikerRaids_UnloadInt(int iInterior)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("BikerRaids_UnloadInt, iInterior == " + iInterior, tEx);

            List<string> sPropL = new List<string>();

            Vector3 Vloc = VectorList_03[VectorList_03.Count - 1];
            int iWare = Function.Call<int>(Hash.GET_INTERIOR_AT_COORDS, Vloc.X, Vloc.Y, Vloc.Z);

            if (iInterior == 1)
            {
                sPropL.Add("coke_cut_01");
                sPropL.Add("coke_cut_02");
                sPropL.Add("coke_cut_03");
                sPropL.Add("security_high");
                sPropL.Add("production_upgrade");
                sPropL.Add("equipment_upgrade");
                sPropL.Add("coke_cut_04");
                sPropL.Add("coke_cut_05");
                sPropL.Add("set_up");
                sPropL.Add("table_equipment_upgrade");
                sPropL.Add("coke_press_upgrade");
            }
            else if (iInterior == 2)
            {
                sPropL.Add("counterfeit_security");
                sPropL.Add("counterfeit_cashpile20a");
                sPropL.Add("counterfeit_cashpile100b");
                sPropL.Add("counterfeit_cashpile100c");
                sPropL.Add("counterfeit_cashpile100d");
                sPropL.Add("counterfeit_setup");
                sPropL.Add("counterfeit_upgrade_equip");
                sPropL.Add("dryera_on");
                sPropL.Add("dryerb_open");
                sPropL.Add("dryerc_on");
                sPropL.Add("dryerd_off");
                sPropL.Add("money_cutter");
                sPropL.Add("special_chairs");
            }
            else if (iInterior == 3)
            {
                sPropL.Add("equipment_upgrade");
                sPropL.Add("production");
                sPropL.Add("security_high");
                sPropL.Add("clutter");
                sPropL.Add("interior_upgrade");
                sPropL.Add("Chair01");
                sPropL.Add("Chair02");
                sPropL.Add("Chair03");
                sPropL.Add("Chair04");
                sPropL.Add("Chair05");
                sPropL.Add("Chair06");
                sPropL.Add("Chair07");
            }
            else if (iInterior == 4)
            {
                sPropL.Add("meth_lab_upgrade");
                sPropL.Add("meth_lab_production");
                sPropL.Add("meth_lab_security_high");
            }
            else
            {
                sPropL.Add("weed_growtha_stage3");
                sPropL.Add("weed_upgrade_equip");
                sPropL.Add("weed_drying");
                sPropL.Add("weed_growthb_stage2");
                sPropL.Add("weed_growthc_stage1");
                sPropL.Add("weed_growthd_stage3");
                sPropL.Add("weed_growthe_stage3");
                sPropL.Add("weed_growthf_stage2");
                sPropL.Add("weed_growthg_stage1");
                sPropL.Add("weed_growthh_stage2");
                sPropL.Add("weed_growthi_stage3");
                sPropL.Add("weed_security_upgrade");
                sPropL.Add("weed_hosea");
                sPropL.Add("weed_hoseb");
                sPropL.Add("weed_hosec");
                sPropL.Add("weed_hosed");
                sPropL.Add("weed_hosee");
                sPropL.Add("weed_hosef");
                sPropL.Add("weed_hoseg");
                sPropL.Add("weed_hoseh");
                sPropL.Add("weed_hosei");
                sPropL.Add("light_growtha_stage23_upgrade");
                sPropL.Add("light_growthb_stage23_upgrade");
                sPropL.Add("light_growthc_stage23_upgrade");
                sPropL.Add("light_growthd_stage23_upgrade");
                sPropL.Add("light_growthe_stage23_upgrade");
                sPropL.Add("light_growthf_stage23_upgrade");
                sPropL.Add("light_growthg_stage23_upgrade");
                sPropL.Add("light_growthh_stage23_upgrade");
                sPropL.Add("light_growthi_stage23_upgrade");
            }

            for (int i = 0; i < sPropL.Count; i++)
            {
                if (Function.Call<bool>(Hash._IS_INTERIOR_PROP_ENABLED, iWare, sPropL[i]))
                    Function.Call(Hash._DISABLE_INTERIOR_PROP, iWare, sPropL[i]);
            }

            int iGetOldSet = sList_01.Count;
            if (iGetOldSet > 0)
            {
                while (iGetOldSet > 0)
                {
                    iGetOldSet = iGetOldSet - 1;
                    Function.Call(Hash._ENABLE_INTERIOR_PROP, iWare, sList_01[iGetOldSet]);
                }
                sList_01.Clear();
            }
            else
            {
                Function.Call(Hash.SET_INTERIOR_ACTIVE, iWare, false);
                Function.Call(Hash.DISABLE_INTERIOR, iWare, true);

                LoadInMissionIPLs(iInterior, true);
            }

        }
        private void BikerRaids_LoadHood()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("BikerRaids_LoadHood", tEx);

            if (iMissionVar_01 == 2)
            {
                for (int i = 0; i < VectorList_03.Count; i++)
                    NPCSpawn(RandNPC(4), VectorList_03[1], 0.00f, 75, 180, 2, 0, 0, null, 8, true, true, 0, 0);
            }
            else
            {
                int iCan = VectorList_03.Count - 1;
                while (iCan > 1)
                {
                    iCan -= 1;
                    if (RandBool(8))
                    {
                        if (iMissionVar_02 == 1)
                            NPCSpawn("mp_f_cocaine_01", VectorList_03[iCan], 0.00f, 75, 180, 2, 32, 0, null, 0, true, false, 0, 0);
                        else if (iMissionVar_02 == 2)
                            NPCSpawn("mp_f_counterfeit_01", VectorList_03[iCan], 0.00f, 75, 180, 2, 32, 0, null, 0, true, false, 0, 0);
                        else if (iMissionVar_02 == 3)
                            NPCSpawn("mp_f_forgery_01", VectorList_03[iCan], 0.00f, 75, 180, 2, 32, 0, null, 0, true, false, 0, 0);
                        else if (iMissionVar_02 == 4)
                            NPCSpawn("mp_f_meth_01", VectorList_03[iCan], 0.00f, 75, 180, 2, 32, 0, null, 0, true, false, 0, 0);
                        else
                            NPCSpawn("mp_f_weed_01", VectorList_03[iCan], 0.00f, 75, 180, 2, 32, 0, null, 0, true, false, 0, 0);
                    }
                    else
                    {
                        if (iMissionVar_02 == 1)
                            NPCSpawn("mp_m_cocaine_01", VectorList_03[iCan], 0.00f, 75, 180, 2, 33, 0, null, 0, true, false, 0, 0);
                        else if (iMissionVar_02 == 2)
                            NPCSpawn("mp_m_counterfeit_01", VectorList_03[iCan], 0.00f, 75, 180, 2, 33, 0, null, 0, true, false, 0, 0);
                        else if (iMissionVar_02 == 3)
                            NPCSpawn("mp_m_forgery_01", VectorList_03[iCan], 0.00f, 75, 180, 2, 33, 0, null, 0, true, false, 0, 0);
                        else if (iMissionVar_02 == 4)
                            NPCSpawn("mp_m_meth_01", VectorList_03[iCan], 0.00f, 75, 180, 2, 33, 0, null, 0, true, false, 0, 0);
                        else
                            NPCSpawn("mp_m_weed_01", VectorList_03[iCan], 0.00f, 75, 180, 2, 33, 0, null, 0, true, false, 0, 0);
                    }
                }
                if (iMissionVar_02 == 1)
                    NPCSpawn("mp_m_cocaine_01", VectorList_03[0], 0.00f, 75, 180, 0, 20, 0, null, 8, true, true, 0, 0);
                else if (iMissionVar_02 == 2)
                    NPCSpawn("mp_m_counterfeit_01", VectorList_03[0], 0.00f, 75, 180, 0, 20, 0, null, 8, true, true, 0, 0);
                else if (iMissionVar_02 == 3)
                    NPCSpawn("mp_m_forgery_01", VectorList_03[0], 0.00f, 75, 180, 0, 20, 0, null, 8, true, true, 0, 0);
                else if (iMissionVar_02 == 4)
                    NPCSpawn("mp_m_meth_01", VectorList_03[0], 0.00f, 75, 180, 0, 20, 0, null, 8, true, true, 0, 0);
                else
                    NPCSpawn("mp_m_cocaine_01", VectorList_03[0], 0.00f, 75, 180, 0, 20, 0, null, 8, true, true, 0, 0);
            }
        }
        private void BikerRaids_KeepWalkin()
        {
            for (int i = 0; i < PedList_02.Count; i++)
            {
                Ped Pedx = PedList_02[i];
                if (Pedx.IsDead)
                    iMissionSeq = 44;
                else if (!Pedx.IsInVehicle(VehTrackin_01))
                {
                    if (Pedx.Position.DistanceTo(VectorList_03[VectorList_03.Count - 1]) < 1.50f)
                    {
                        if (Pedx.CurrentBlip.Exists())
                            Pedx.CurrentBlip.Remove();
                        WarptoAnyVeh(VehTrackin_01, Pedx, iMissionVar_03, false);
                        PedList_02.Remove(Pedx);
                        PedList_03.Add(new Ped(Pedx.Handle));
                        iMissionVar_03 = iMissionVar_03 + 1;
                    }
                    else if (Game.Player.IsTargetting(Pedx))
                    {
                        Pedx.Task.ClearAll();
                        Pedx.Task.GoTo(VectorList_03[VectorList_03.Count - 1], false);
                    }
                    else
                    {
                        Pedx.Task.ClearAll();
                        Pedx.Task.Cower(-1);
                    }
                }
            }

            for (int i = 0; i < PedList_03.Count; i++)
            {
                Ped Pedx = PedList_03[i];
                if (Pedx.IsDead)
                {
                    if (Pedx.CurrentBlip.Exists())
                        Pedx.CurrentBlip.Remove();
                    Pedx.MarkAsNoLongerNeeded();
                    PedList_03.Remove(Pedx);
                }
            }

            iWait4Sec = Game.GameTime + 2000;
        }
        private void BikerRaids_LostMCAtt(bool bVehTrack)
        {
            iTracking = Game.GameTime + 1000;

            for (int i = 0; i < PedList_02.Count; i++)
            {
                if (PedList_02[i].IsDead)
                {
                    if (PedList_02[i].CurrentBlip.Exists())
                        PedList_02[i].CurrentBlip.Remove();
                    PedList_02[i].MarkAsNoLongerNeeded();
                    PedList_02.RemoveAt(i);
                    iCashReward = iCashReward + iCashBouns;
                }
                else if (PedList_02[i].Position.DistanceTo(Game.Player.Character.Position) > 450.00f || Game.Player.Character.Position.DistanceTo(vTarget_01) < 250.00f)
                {
                    PedList_02[i].Task.FleeFrom(Game.Player.Character);
                    if (PedList_02[i].CurrentBlip.Exists())
                        PedList_02[i].CurrentBlip.Remove();
                    PedList_02[i].MarkAsNoLongerNeeded();
                    PedList_02.RemoveAt(i);
                }
                else if (!PedList_02[i].IsInVehicle())
                {
                    if (!PedList_02[i].CurrentBlip.Exists())
                        PedBlimp(PedList_02[i], BlipColor.Red3, 0.75f, false, false);
                }
            }

            for (int i = 0; i < VehicleList_01.Count; i++)
            {
                if (bVehTrack)
                {
                    if (VehicleList_01[i].IsSeatFree(VehicleSeat.Driver) && VehicleList_01[i] != VehTrackin_01)
                    {
                        if (VehicleList_01[i].CurrentBlip.Exists())
                            VehicleList_01[i].CurrentBlip.Remove();
                        VehicleList_01[i].MarkAsNoLongerNeeded();
                        VehicleList_01.RemoveAt(i);
                    }
                    else
                    {
                        if (VehicleList_01[i].GetPedOnSeat(VehicleSeat.Driver).IsFleeing)
                        {
                            if (VehicleList_01[i].CurrentBlip.Exists())
                                VehicleList_01[i].CurrentBlip.Remove();
                            VehicleList_01[i].MarkAsNoLongerNeeded();
                            VehicleList_01.RemoveAt(i);
                        }
                    }
                }
                else
                {
                    if (VehicleList_01[i].IsSeatFree(VehicleSeat.Driver))
                    {
                        if (VehicleList_01[i].CurrentBlip.Exists())
                            VehicleList_01[i].CurrentBlip.Remove();
                        VehicleList_01[i].MarkAsNoLongerNeeded();
                        VehicleList_01.RemoveAt(i);
                    }
                    else
                    {
                        if (VehicleList_01[i].GetPedOnSeat(VehicleSeat.Driver).IsFleeing)
                        {
                            if (VehicleList_01[i].CurrentBlip.Exists())
                                VehicleList_01[i].CurrentBlip.Remove();
                            VehicleList_01[i].MarkAsNoLongerNeeded();
                            VehicleList_01.RemoveAt(i);
                        }
                    }
                }
            }

            if (iTime_01[0] < Game.GameTime)
            {
                if (iMissionVar_01 == 2)
                {
                    if (PedList_02.Count < 6)
                        FindAndReplaceVeh(Game.Player.Character.Position, 32, 24, 0, 8, 4, false, false, true, 255.00f, 35.00f, "", true, 2, 10, true);
                }
                else
                {
                    if (PedList_02.Count < 6 && Game.Player.Character.Position.DistanceTo(vTarget_01) > 250.00f)
                        FindAndReplaceVeh(Game.Player.Character.Position, 32, 24, 0, 8, 4, false, false, true, 125.00f, 35.00f, "", true, 2, 10, true);
                    else
                        iTime_01[0] = Game.GameTime + RandInt(30000, 45000);
                }
            }
        }
        private void BikerRaids_BizzPedsSec(Ped Peddy, int iVariant)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("BikerRaids_BizzPedsSec, iVariant == " + iVariant, tEx);

            List<int> iComp = new List<int>();
            List<int> itext = new List<int>();
            if (iVariant == 1)
            {
                iComp.Add(1); itext.Add(2);//head
                iComp.Add(0); itext.Add(0);//beard
                iComp.Add(1); itext.Add(0);//hair
                iComp.Add(1); itext.Add(0);//Torso
                iComp.Add(1); itext.Add(0);//Legs
                iComp.Add(0); itext.Add(0);//Hands
                iComp.Add(1); itext.Add(0);//shoes
                iComp.Add(0); itext.Add(0);//Scarf
                iComp.Add(1); itext.Add(0);//AccTop
                iComp.Add(0); itext.Add(0);//Armor
                iComp.Add(0); itext.Add(0);//Emb--not used
                iComp.Add(0); itext.Add(0);//Top2
            }                //cocaine_
            else if (iVariant == 2)
            {
                iComp.Add(3); itext.Add(0);//head
                iComp.Add(0); itext.Add(0);//beard
                iComp.Add(2); itext.Add(0);//hair
                iComp.Add(2); itext.Add(0);//Torso
                iComp.Add(3); itext.Add(0);//Legs
                iComp.Add(0); itext.Add(0);//Hands
                iComp.Add(0); itext.Add(0);//shoes
                iComp.Add(0); itext.Add(0);//Scarf
                iComp.Add(0); itext.Add(0);//AccTop
                iComp.Add(0); itext.Add(0);//Armor
                iComp.Add(0); itext.Add(0);//Emb--not used
                iComp.Add(0); itext.Add(0);//Top2
            }           //counterfeit_
            else if (iVariant == 3)
            {
                iComp.Add(3); itext.Add(0);//head
                iComp.Add(0); itext.Add(0);//beard
                iComp.Add(0); itext.Add(0);//hair
                iComp.Add(3); itext.Add(0);//Torso
                iComp.Add(3); itext.Add(0);//Legs
                iComp.Add(0); itext.Add(0);//Hands
                iComp.Add(0); itext.Add(0);//shoes
                iComp.Add(0); itext.Add(0);//Scarf
                iComp.Add(1); itext.Add(0);//AccTop
                iComp.Add(0); itext.Add(0);//Armor
                iComp.Add(0); itext.Add(0);//Emb--not used
                iComp.Add(0); itext.Add(0);//Top2
            }           //forgery_
            else if (iVariant == 4)
            {
                iComp.Add(2); itext.Add(0);//head
                iComp.Add(0); itext.Add(0);//beard
                iComp.Add(2); itext.Add(0);//hair
                iComp.Add(2); itext.Add(0);//Torso
                iComp.Add(1); itext.Add(0);//Legs
                iComp.Add(0); itext.Add(0);//Hands
                iComp.Add(0); itext.Add(0);//shoes
                iComp.Add(0); itext.Add(0);//Scarf
                iComp.Add(2); itext.Add(0);//AccTop
                iComp.Add(0); itext.Add(0);//Armor
                iComp.Add(0); itext.Add(0);//Emb--not used
                iComp.Add(0); itext.Add(0);//Top2
            }           //meth_
            else
            {
                iComp.Add(1); itext.Add(2);//head
                iComp.Add(0); itext.Add(0);//beard
                iComp.Add(1); itext.Add(0);//hair
                iComp.Add(1); itext.Add(0);//Torso
                iComp.Add(1); itext.Add(0);//Legs
                iComp.Add(0); itext.Add(0);//Hands
                iComp.Add(1); itext.Add(0);//shoes
                iComp.Add(0); itext.Add(0);//Scarf
                iComp.Add(1); itext.Add(0);//AccTop
                iComp.Add(0); itext.Add(0);//Armor
                iComp.Add(0); itext.Add(0);//Emb--not used
                iComp.Add(0); itext.Add(0);//Top2
            }                                    //weed_

            for (int i = 0; i < iComp.Count; i++)
            {
                int iDrawId = iComp[i];
                int iDrawTx = itext[i];
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, i, iDrawId, iDrawTx, 2);
            }
        }
        private void BikerRaids_BizzPedsWork(Ped Peddy, int iVariant, bool bMale)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("BikerRaids_BizzPedsWork, iVariant == " + iVariant + ", bMale == " + bMale, tEx);

            List<int> iComp = new List<int>();
            List<int> itext = new List<int>();

            if (bMale)
            {
                if (iVariant == 1)
                {
                    int iRace = RandInt(0, 1);
                    iComp.Add(iRace); itext.Add(0);//head
                    iComp.Add(0); itext.Add(0);//beard
                    iComp.Add(0); itext.Add(0);//hair
                    iComp.Add(0); itext.Add(iRace);//Torso
                    iComp.Add(0); itext.Add(iRace);//Legs
                    iComp.Add(0); itext.Add(0);//Hands
                    iComp.Add(0); itext.Add(iRace);//shoes
                    iComp.Add(0); itext.Add(0);//Scarf
                    iComp.Add(0); itext.Add(0);//AccTop
                    iComp.Add(0); itext.Add(0);//Armor
                    iComp.Add(0); itext.Add(0);//Emb--not used
                    iComp.Add(0); itext.Add(0);//Top2
                }                //cocaine_
                else if (iVariant == 2)
                {
                    iComp.Add(RandInt(0, 1)); itext.Add(0);//head
                    iComp.Add(0); itext.Add(0);//beard
                    iComp.Add(0); itext.Add(0);//hair
                    iComp.Add(0); itext.Add(0);//Torso
                    iComp.Add(0); itext.Add(0);//Legs
                    iComp.Add(0); itext.Add(0);//Hands
                    iComp.Add(0); itext.Add(0);//shoes
                    iComp.Add(0); itext.Add(0);//Scarf
                    iComp.Add(0); itext.Add(0);//AccTop
                    iComp.Add(0); itext.Add(0);//Armor
                    iComp.Add(0); itext.Add(0);//Emb--not used
                    iComp.Add(1); itext.Add(0);//Top2
                }           //counterfeit_
                else if (iVariant == 3)
                {
                    iComp.Add(RandInt(0, 2)); itext.Add(0);//head
                    iComp.Add(0); itext.Add(0);//beard
                    iComp.Add(0); itext.Add(0);//hair
                    iComp.Add(0); itext.Add(0);//Torso
                    iComp.Add(RandInt(0, 1)); itext.Add(0);//Legs
                    iComp.Add(1); itext.Add(0);//Hands
                    iComp.Add(0); itext.Add(0);//shoes
                    iComp.Add(0); itext.Add(0);//Scarf
                    iComp.Add(0); itext.Add(0);//AccTop
                    iComp.Add(0); itext.Add(0);//Armor
                    iComp.Add(0); itext.Add(0);//Emb--not used
                    iComp.Add(0); itext.Add(0);//Top2
                }           //forgery_
                else if (iVariant == 4)
                {
                    iComp.Add(RandInt(0, 1)); itext.Add(0);//head
                    iComp.Add(0); itext.Add(0);//beard
                    iComp.Add(0); itext.Add(0);//hair
                    iComp.Add(RandInt(0, 1)); itext.Add(0);//Torso
                    iComp.Add(0); itext.Add(0);//Legs
                    iComp.Add(0); itext.Add(0);//Hands
                    iComp.Add(0); itext.Add(0);//shoes
                    iComp.Add(0); itext.Add(0);//Scarf
                    iComp.Add(0); itext.Add(0);//AccTop
                    iComp.Add(0); itext.Add(0);//Armor
                    iComp.Add(0); itext.Add(0);//Emb--not used
                    iComp.Add(0); itext.Add(0);//Top2
                }           //meth_
                else
                {
                    iComp.Add(RandInt(0, 1)); itext.Add(0);//head
                    iComp.Add(0); itext.Add(0);//beard
                    iComp.Add(0); itext.Add(0);//hair
                    iComp.Add(RandInt(0, 1)); itext.Add(0);//Torso
                    iComp.Add(RandInt(0, 3)); itext.Add(0);//Legs
                    iComp.Add(0); itext.Add(0);//Hands
                    iComp.Add(0); itext.Add(0);//shoes
                    iComp.Add(0); itext.Add(0);//Scarf
                    iComp.Add(0); itext.Add(0);//AccTop
                    iComp.Add(0); itext.Add(0);//Armor
                    iComp.Add(0); itext.Add(0);//Emb--not used
                    iComp.Add(0); itext.Add(0);//Top2
                }                                    //weed_
            }
            else
            {
                if (iVariant == 1)
                {
                    int iRace = RandInt(0, 1);
                    iComp.Add(iRace); itext.Add(0);//head
                    if (iRace == 0)
                        iRace = 1;
                    else
                        iRace = 3;
                    iComp.Add(0); itext.Add(0);//beard
                    iComp.Add(0); itext.Add(2);//hair
                    iComp.Add(0); itext.Add(iRace);//Torso
                    iComp.Add(0); itext.Add(iRace);//Leggs
                    iComp.Add(0); itext.Add(0);//Hands
                    if (iRace == 1)
                        iRace = 2;
                    else
                        iRace = 1;
                    iComp.Add(0); itext.Add(iRace);//shoes
                    iComp.Add(0); itext.Add(0);//Scarf
                    iComp.Add(0); itext.Add(0);//AccTop
                    iComp.Add(0); itext.Add(0);//Armor
                    iComp.Add(0); itext.Add(0);//Emb--not used
                    iComp.Add(0); itext.Add(0);//Top2
                }                //cocaine_
                else if (iVariant == 2)
                {
                    int iRace = RandInt(0, 2);

                    iComp.Add(iRace); itext.Add(0);//head
                    iComp.Add(0); itext.Add(0);//beard
                    iComp.Add(RandInt(0, 2)); itext.Add(0);//hair
                    if (iRace == 0)
                        iComp.Add(1);
                    else
                        iComp.Add(0);
                    itext.Add(0);//Torso
                    iComp.Add(RandInt(0, 1)); itext.Add(0);//Legs
                    iComp.Add(0); itext.Add(0);//Hands
                    iComp.Add(0); itext.Add(0);//shoes
                    iComp.Add(0); itext.Add(0);//Scarf
                    iComp.Add(0); itext.Add(0);//AccTop
                    iComp.Add(0); itext.Add(0);//Armor
                    iComp.Add(0); itext.Add(0);//Emb--not used
                    iComp.Add(0); itext.Add(0);//Top2
                }           //counterfeit_
                else if (iVariant == 3)
                {
                    int iRace = RandInt(0, 3);
                    iComp.Add(iRace); itext.Add(0);//head
                    iComp.Add(0); itext.Add(0);//beard
                    if (iRace == 0)
                        iComp.Add(RandInt(0, 1));
                    else if (iRace == 1)
                        iComp.Add(2);
                    else if (iRace == 2)
                        iComp.Add(4);
                    else
                        iComp.Add(5);
                    itext.Add(0);//hair
                    if (iRace == 0)
                        iComp.Add(RandInt(0, 1));
                    else if (iRace == 1)
                        iComp.Add(2);
                    else if (iRace == 2)
                        iComp.Add(3);
                    else
                        iComp.Add(4);
                    itext.Add(0);//Torso
                    if (iRace == 0)
                        iComp.Add(0);
                    else if (iRace == 1)
                        iComp.Add(3);
                    else if (iRace == 2)
                        iComp.Add(4);
                    else
                        iComp.Add(5);
                    itext.Add(0);//Legs
                    iComp.Add(0); itext.Add(0);//Hands
                    iComp.Add(0); itext.Add(0);//shoes
                    iComp.Add(0); itext.Add(0);//Scarf
                    iComp.Add(2); itext.Add(0);//AccTop
                    iComp.Add(0); itext.Add(0);//Armor
                    iComp.Add(0); itext.Add(0);//Emb--not used
                    iComp.Add(0); itext.Add(0);//Top2
                }           //forgery_
                else if (iVariant == 4)
                {
                    iComp.Add(0); itext.Add(0);//head
                    iComp.Add(0); itext.Add(0);//beard
                    iComp.Add(0); itext.Add(0);//hair
                    iComp.Add(0); itext.Add(0);//Torso
                    iComp.Add(0); itext.Add(0);//Legs
                    iComp.Add(0); itext.Add(0);//Hands
                    iComp.Add(0); itext.Add(0);//shoes
                    iComp.Add(0); itext.Add(0);//Scarf
                    iComp.Add(0); itext.Add(0);//AccTop
                    iComp.Add(0); itext.Add(0);//Armor
                    iComp.Add(0); itext.Add(0);//Emb--not used
                    iComp.Add(0); itext.Add(0);//Top2
                }           //meth_
                else
                {
                    iComp.Add(RandInt(0, 1)); itext.Add(0);//head
                    iComp.Add(0); itext.Add(0);//beard
                    iComp.Add(RandInt(0, 1)); itext.Add(0);//hair
                    iComp.Add(RandInt(0, 1)); itext.Add(0);//Torso
                    iComp.Add(0); itext.Add(0);//Legs
                    iComp.Add(0); itext.Add(0);//Hands
                    iComp.Add(0); itext.Add(0);//shoes
                    iComp.Add(0); itext.Add(0);//Scarf
                    iComp.Add(0); itext.Add(0);//AccTop
                    iComp.Add(0); itext.Add(0);//Armor
                    iComp.Add(0); itext.Add(0);//Emb--not used
                    iComp.Add(0); itext.Add(0);//Top2
                }                                    //weed_
            }

            for (int i = 0; i < iComp.Count; i++)
            {
                int iDrawId = iComp[i];
                int iDrawTx = itext[i];
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, i, iDrawId, iDrawTx, 2);
            }
        }
        private void CargoCollect_LoadClutter()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("CargoCollect_LoadClutter", tEx);

            sList_01.Clear();

            List<string> sOldPropL = new List<string>();
            List<string> sPropL = new List<string>();

            List<string> sIplProps = new List<string>();

            List<Vector3> vPosL = new List<Vector3>();
            List<Vector3> vRotL = new List<Vector3>();

            if (iMissionVar_01 == 6)
            {
                sPropL.Add("ex_prop_crate_ammo_bc");
                sPropL.Add("ex_prop_crate_ammo_sc");
                sPropL.Add("ex_prop_crate_art_02_bc");
                sPropL.Add("ex_prop_crate_art_02_sc");
                sPropL.Add("ex_prop_crate_art_bc");
                sPropL.Add("ex_prop_crate_art_sc");
                sPropL.Add("ex_prop_crate_biohazard_bc");
                sPropL.Add("ex_prop_crate_biohazard_sc");
                sPropL.Add("ex_prop_crate_bull_bc_02");
                sPropL.Add("ex_prop_crate_bull_sc_02");
                sPropL.Add("ex_prop_crate_closed_bc");
                sPropL.Add("ex_prop_crate_clothing_bc");
                sPropL.Add("ex_prop_crate_clothing_sc");
                sPropL.Add("ex_prop_crate_elec_bc");
                sPropL.Add("ex_prop_crate_elec_sc");
                sPropL.Add("ex_prop_crate_expl_bc");
                sPropL.Add("ex_prop_crate_expl_sc");
                sPropL.Add("ex_prop_crate_furjacket_bc");
                sPropL.Add("ex_prop_crate_furjacket_sc");
                sPropL.Add("ex_prop_crate_gems_bc");
                sPropL.Add("ex_prop_crate_gems_sc");
                sPropL.Add("ex_prop_crate_highend_pharma_bc");
                sPropL.Add("ex_prop_crate_highend_pharma_sc");
                sPropL.Add("ex_prop_crate_jewels_bc");
                sPropL.Add("ex_prop_crate_jewels_racks_bc");
                sPropL.Add("ex_prop_crate_jewels_racks_sc");
                sPropL.Add("ex_prop_crate_jewels_sc");
                sPropL.Add("ex_prop_crate_med_bc");
                sPropL.Add("ex_prop_crate_med_sc");
                sPropL.Add("ex_prop_crate_money_bc");
                sPropL.Add("ex_prop_crate_money_sc");
                sPropL.Add("ex_prop_crate_narc_bc");
                sPropL.Add("ex_prop_crate_narc_sc");
                sPropL.Add("ex_prop_crate_pharma_bc");
                sPropL.Add("ex_prop_crate_pharma_sc");
                sPropL.Add("ex_prop_crate_tob_bc");
                sPropL.Add("ex_prop_crate_tob_sc");
                sPropL.Add("ex_prop_crate_wlife_bc");
                sPropL.Add("ex_prop_crate_wlife_sc");
                vPosL.Add(new Vector3(993.540283f, -3106.50317f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 90.3173218f));

                vPosL.Add(new Vector3(993.613464f, -3108.85791f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 90.3172836f));

                vPosL.Add(new Vector3(993.627563f, -3111.30713f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 90.0285568f));

                vPosL.Add(new Vector3(1026.45764f, -3111.39185f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -90.5088501f));

                vPosL.Add(new Vector3(1026.49158f, -3108.96094f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -91.5257492f));

                vPosL.Add(new Vector3(1026.58093f, -3106.57007f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -92.247345f));

                vPosL.Add(new Vector3(1026.59241f, -3096.39868f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -89.2680435f));

                vPosL.Add(new Vector3(1026.57178f, -3094.00928f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -90.1735153f));

                vPosL.Add(new Vector3(1026.52124f, -3091.52783f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -89.9307022f));

                vPosL.Add(new Vector3(1018.1983f, -3091.97266f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.476310164f));

                vPosL.Add(new Vector3(1015.69733f, -3091.93994f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.435770541f));

                vPosL.Add(new Vector3(1013.37708f, -3091.9231f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.435770541f));

                vPosL.Add(new Vector3(1010.94269f, -3091.99048f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.435770541f));

                vPosL.Add(new Vector3(1008.54211f, -3091.96582f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.292574644f));

                vPosL.Add(new Vector3(1006.10889f, -3091.94946f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.192989498f));

                vPosL.Add(new Vector3(1003.64362f, -3092.01563f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.161341712f));

                vPosL.Add(new Vector3(1003.62604f, -3096.77515f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.314484f));

                vPosL.Add(new Vector3(1005.94946f, -3096.72095f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.550766f));

                vPosL.Add(new Vector3(1008.41229f, -3096.65039f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.137253f));

                vPosL.Add(new Vector3(1010.92987f, -3096.72266f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.72348f));

                vPosL.Add(new Vector3(1013.27228f, -3096.73364f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.72348f));

                vPosL.Add(new Vector3(1015.65753f, -3096.71753f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.097229f));

                vPosL.Add(new Vector3(1018.1651f, -3096.76782f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.611603f));

                vPosL.Add(new Vector3(1018.17334f, -3103.12134f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.277661294f));

                vPosL.Add(new Vector3(1015.73279f, -3103.15796f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.22517097f));

                vPosL.Add(new Vector3(1013.30994f, -3103.18921f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.0808141753f));

                vPosL.Add(new Vector3(1010.93365f, -3103.14746f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.04123235f));

                vPosL.Add(new Vector3(1008.41376f, -3103.2002f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.575374007f));

                vPosL.Add(new Vector3(1006.08307f, -3103.1687f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.0832482651f));

                vPosL.Add(new Vector3(1003.74823f, -3103.12988f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.51762819f));

                vPosL.Add(new Vector3(1003.52454f, -3108.12573f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.400208f));

                vPosL.Add(new Vector3(1006.0119f, -3108.06372f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.049744f));

                vPosL.Add(new Vector3(1008.41968f, -3108.17651f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.741226f));

                vPosL.Add(new Vector3(1010.80005f, -3108.24634f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.161118f));

                vPosL.Add(new Vector3(1013.21289f, -3108.11743f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.082748f));

                vPosL.Add(new Vector3(1015.71112f, -3108.11377f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.426285f));

                vPosL.Add(new Vector3(1018.01129f, -3108.07251f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.548035f));

                vPosL.Add(new Vector3(1018.01129f, -3108.07251f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.548035f));

                vPosL.Add(new Vector3(993.540283f, -3106.50317f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 90.3173218f));

                vPosL.Add(new Vector3(993.613464f, -3108.85791f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 90.3172836f));

                vPosL.Add(new Vector3(993.627563f, -3111.30713f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 90.0285568f));

                vPosL.Add(new Vector3(1026.45764f, -3111.39185f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -90.5088501f));

                vPosL.Add(new Vector3(1026.49158f, -3108.96094f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -91.5257492f));

                vPosL.Add(new Vector3(1026.58093f, -3106.57007f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -92.247345f));

                vPosL.Add(new Vector3(1026.59241f, -3096.39868f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -89.2680435f));

                vPosL.Add(new Vector3(1026.57178f, -3094.00928f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -90.1735153f));

                vPosL.Add(new Vector3(1026.52124f, -3091.52783f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -89.9307022f));

                vPosL.Add(new Vector3(1018.1983f, -3091.97266f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.476310164f));

                vPosL.Add(new Vector3(1015.69733f, -3091.93994f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.435770541f));

                vPosL.Add(new Vector3(1013.37708f, -3091.9231f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.435770541f));

                vPosL.Add(new Vector3(1010.94269f, -3091.99048f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.435770541f));

                vPosL.Add(new Vector3(1008.54211f, -3091.96582f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.292574644f));

                vPosL.Add(new Vector3(1006.10889f, -3091.94946f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.192989498f));

                vPosL.Add(new Vector3(1003.64362f, -3092.01563f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.161341712f));

                vPosL.Add(new Vector3(1003.62604f, -3096.77515f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.314484f));

                vPosL.Add(new Vector3(1005.94946f, -3096.72095f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.550766f));

                vPosL.Add(new Vector3(1008.41229f, -3096.65039f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.137253f));

                vPosL.Add(new Vector3(1010.92987f, -3096.72266f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.72348f));

                vPosL.Add(new Vector3(1013.27228f, -3096.73364f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.72348f));

                vPosL.Add(new Vector3(1015.65753f, -3096.71753f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.097229f));

                vPosL.Add(new Vector3(1018.1651f, -3096.76782f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.611603f));

                vPosL.Add(new Vector3(1018.17334f, -3103.12134f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.277661294f));

                vPosL.Add(new Vector3(1015.73279f, -3103.15796f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.22517097f));

                vPosL.Add(new Vector3(1013.30994f, -3103.18921f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.0808141753f));

                vPosL.Add(new Vector3(1010.93365f, -3103.14746f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.04123235f));

                vPosL.Add(new Vector3(1008.41376f, -3103.2002f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.575374007f));

                vPosL.Add(new Vector3(1006.08307f, -3103.1687f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.0832482651f));

                vPosL.Add(new Vector3(1003.74823f, -3103.12988f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.51762819f));

                vPosL.Add(new Vector3(1003.52454f, -3108.12573f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.400208f));

                vPosL.Add(new Vector3(1006.0119f, -3108.06372f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.049744f));

                vPosL.Add(new Vector3(1008.41968f, -3108.17651f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.741226f));

                vPosL.Add(new Vector3(1010.80005f, -3108.24634f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.161118f));

                vPosL.Add(new Vector3(1013.21289f, -3108.11743f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.082748f));

                vPosL.Add(new Vector3(1015.71112f, -3108.11377f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.426285f));

                vPosL.Add(new Vector3(1018.01129f, -3108.07251f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.548035f));

                vPosL.Add(new Vector3(993.540283f, -3106.50317f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 90.3173218f));

                vPosL.Add(new Vector3(993.613464f, -3108.85791f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 90.3172836f));

                vPosL.Add(new Vector3(993.627563f, -3111.30713f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 90.0285568f));

                vPosL.Add(new Vector3(1026.45764f, -3111.39185f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -90.5088501f));

                vPosL.Add(new Vector3(1026.49158f, -3108.96094f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -91.5257492f));

                vPosL.Add(new Vector3(1026.58093f, -3106.57007f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -92.247345f));

                vPosL.Add(new Vector3(1026.59241f, -3096.39868f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -89.2680435f));

                vPosL.Add(new Vector3(1026.57178f, -3094.00928f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -90.1735153f));

                vPosL.Add(new Vector3(1026.52124f, -3091.52783f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -89.9307022f));

                vPosL.Add(new Vector3(1018.1983f, -3091.97266f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.476310164f));

                vPosL.Add(new Vector3(1015.69733f, -3091.93994f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.435770541f));

                vPosL.Add(new Vector3(1013.37708f, -3091.9231f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.435770541f));

                vPosL.Add(new Vector3(1010.94269f, -3091.99048f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.435770541f));

                vPosL.Add(new Vector3(1008.54211f, -3091.96582f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.292574644f));

                vPosL.Add(new Vector3(1006.10889f, -3091.94946f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.192989498f));

                vPosL.Add(new Vector3(1003.64362f, -3092.01563f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.161341712f));

                vPosL.Add(new Vector3(1003.62604f, -3096.77515f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.314484f));

                vPosL.Add(new Vector3(1005.94946f, -3096.72095f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.550766f));

                vPosL.Add(new Vector3(1008.41229f, -3096.65039f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.137253f));

                vPosL.Add(new Vector3(1010.92987f, -3096.72266f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.72348f));

                vPosL.Add(new Vector3(1013.27228f, -3096.73364f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.72348f));

                vPosL.Add(new Vector3(1015.65753f, -3096.71753f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.097229f));

                vPosL.Add(new Vector3(1018.1651f, -3096.76782f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.611603f));

                vPosL.Add(new Vector3(1018.17334f, -3103.12134f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.277661294f));

                vPosL.Add(new Vector3(1015.73279f, -3103.15796f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.22517097f));

                vPosL.Add(new Vector3(1013.30994f, -3103.18921f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.0808141753f));

                vPosL.Add(new Vector3(1010.93365f, -3103.14746f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.04123235f));

                vPosL.Add(new Vector3(1008.41376f, -3103.2002f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.575374007f));

                vPosL.Add(new Vector3(1006.08307f, -3103.1687f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.0832482651f));

                vPosL.Add(new Vector3(1003.74823f, -3103.12988f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.51762819f));

                vPosL.Add(new Vector3(1003.52454f, -3108.12573f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.400208f));

                vPosL.Add(new Vector3(1006.0119f, -3108.06372f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.049744f));

                vPosL.Add(new Vector3(1008.41968f, -3108.17651f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.741226f));

                vPosL.Add(new Vector3(1010.80005f, -3108.24634f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.161118f));

                vPosL.Add(new Vector3(1013.21289f, -3108.11743f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.082748f));

                vPosL.Add(new Vector3(1015.71112f, -3108.11377f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.426285f));
            }
            else if (iMissionVar_01 == 7)
            {
                sPropL.Add("ex_prop_crate_ammo_bc");
                sPropL.Add("ex_prop_crate_ammo_sc");
                sPropL.Add("ex_prop_crate_art_02_bc");
                sPropL.Add("ex_prop_crate_art_02_sc");
                sPropL.Add("ex_prop_crate_art_bc");
                sPropL.Add("ex_prop_crate_art_sc");
                sPropL.Add("ex_prop_crate_biohazard_bc");
                sPropL.Add("ex_prop_crate_biohazard_sc");
                sPropL.Add("ex_prop_crate_bull_bc_02");
                sPropL.Add("ex_prop_crate_bull_sc_02");
                sPropL.Add("ex_prop_crate_closed_bc");
                sPropL.Add("ex_prop_crate_clothing_bc");
                sPropL.Add("ex_prop_crate_clothing_sc");
                sPropL.Add("ex_prop_crate_elec_bc");
                sPropL.Add("ex_prop_crate_elec_sc");
                sPropL.Add("ex_prop_crate_expl_bc");
                sPropL.Add("ex_prop_crate_expl_sc");
                sPropL.Add("ex_prop_crate_furjacket_bc");
                sPropL.Add("ex_prop_crate_furjacket_sc");
                sPropL.Add("ex_prop_crate_gems_bc");
                sPropL.Add("ex_prop_crate_gems_sc");
                sPropL.Add("ex_prop_crate_highend_pharma_bc");
                sPropL.Add("ex_prop_crate_highend_pharma_sc");
                sPropL.Add("ex_prop_crate_jewels_bc");
                sPropL.Add("ex_prop_crate_jewels_racks_bc");
                sPropL.Add("ex_prop_crate_jewels_racks_sc");
                sPropL.Add("ex_prop_crate_jewels_sc");
                sPropL.Add("ex_prop_crate_med_bc");
                sPropL.Add("ex_prop_crate_med_sc");
                sPropL.Add("ex_prop_crate_money_bc");
                sPropL.Add("ex_prop_crate_money_sc");
                sPropL.Add("ex_prop_crate_narc_bc");
                sPropL.Add("ex_prop_crate_narc_sc");
                sPropL.Add("ex_prop_crate_pharma_bc");
                sPropL.Add("ex_prop_crate_pharma_sc");
                sPropL.Add("ex_prop_crate_tob_bc");
                sPropL.Add("ex_prop_crate_tob_sc");
                sPropL.Add("ex_prop_crate_wlife_bc");
                sPropL.Add("ex_prop_crate_wlife_sc");

                vPosL.Add(new Vector3(1053.06958f, -3109.60938f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.971985f));

                vPosL.Add(new Vector3(1055.46899f, -3109.60938f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.971985f));

                vPosL.Add(new Vector3(1057.86841f, -3109.60938f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.971985f));

                vPosL.Add(new Vector3(1060.34558f, -3109.56226f, -39.8684998f));
                vRotL.Add(new Vector3(7.951f, 1.38546f, 179.230362f));

                vPosL.Add(new Vector3(1062.70618f, -3109.60889f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.56752f));

                vPosL.Add(new Vector3(1065.09741f, -3109.57202f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.158249f));

                vPosL.Add(new Vector3(1067.56262f, -3109.49097f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.2957f));

                vPosL.Add(new Vector3(1053.13843f, -3102.97461f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.120f));

                vPosL.Add(new Vector3(1055.59583f, -3102.91553f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.07f));

                vPosL.Add(new Vector3(1057.96082f, -3102.89697f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.9502151f));

                vPosL.Add(new Vector3(1060.41003f, -3103.0166f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.6247f));

                vPosL.Add(new Vector3(1062.84766f, -3103.02368f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.2546643f));

                vPosL.Add(new Vector3(1065.19763f, -3103.08398f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.939663887f));

                vPosL.Add(new Vector3(1067.58691f, -3103.0481f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.510466456f));

                vPosL.Add(new Vector3(1067.66296f, -3095.70117f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.324f));

                vPosL.Add(new Vector3(1065.21204f, -3095.84302f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.543f));

                vPosL.Add(new Vector3(1062.76624f, -3095.82129f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.543f));

                vPosL.Add(new Vector3(1060.35181f, -3095.79565f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.23f));

                vPosL.Add(new Vector3(1058.01526f, -3095.75488f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.764f));

                vPosL.Add(new Vector3(1055.63367f, -3095.78125f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.235f));

                vPosL.Add(new Vector3(1053.11145f, -3095.83276f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.23f));

                vPosL.Add(new Vector3(1053.05652f, -3095.56958f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.23f));

                vPosL.Add(new Vector3(1053.06958f, -3109.60938f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.971985f));

                vPosL.Add(new Vector3(1055.46899f, -3109.60938f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.971985f));

                vPosL.Add(new Vector3(1057.86841f, -3109.60938f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.971985f));

                vPosL.Add(new Vector3(1060.34558f, -3109.56226f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.230362f));

                vPosL.Add(new Vector3(1062.70618f, -3109.60889f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.56752f));

                vPosL.Add(new Vector3(1065.09741f, -3109.57202f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.158249f));

                vPosL.Add(new Vector3(1067.56262f, -3109.49097f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.2957f));

                vPosL.Add(new Vector3(1053.13843f, -3102.97461f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.120f));

                vPosL.Add(new Vector3(1055.59583f, -3102.91553f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.07f));

                vPosL.Add(new Vector3(1057.96082f, -3102.89697f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.9502151f));

                vPosL.Add(new Vector3(1060.41003f, -3103.0166f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.6247f));

                vPosL.Add(new Vector3(1062.84766f, -3103.02368f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.2546643f));

                vPosL.Add(new Vector3(1065.19763f, -3103.08398f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.939663887f));

                vPosL.Add(new Vector3(1067.58691f, -3103.0481f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.510466456f));

                vPosL.Add(new Vector3(1067.66296f, -3095.70117f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.324f));

                vPosL.Add(new Vector3(1065.21204f, -3095.84302f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.543f));

                vPosL.Add(new Vector3(1062.76624f, -3095.82129f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.543f));

                vPosL.Add(new Vector3(1060.35181f, -3095.79565f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.23f));

                vPosL.Add(new Vector3(1058.01526f, -3095.75488f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.764f));

                vPosL.Add(new Vector3(1055.63367f, -3095.78125f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.235f));
            }
            else if (iMissionVar_01 == 8)
            {
                sPropL.Add("ex_prop_crate_ammo_bc");
                sPropL.Add("ex_prop_crate_ammo_sc");
                sPropL.Add("ex_prop_crate_art_02_bc");
                sPropL.Add("ex_prop_crate_art_02_sc");
                sPropL.Add("ex_prop_crate_art_bc");
                sPropL.Add("ex_prop_crate_art_sc");
                sPropL.Add("ex_prop_crate_biohazard_bc");
                sPropL.Add("ex_prop_crate_biohazard_sc");
                sPropL.Add("ex_prop_crate_bull_bc_02");
                sPropL.Add("ex_prop_crate_bull_sc_02");
                sPropL.Add("ex_prop_crate_closed_bc");
                sPropL.Add("ex_prop_crate_clothing_bc");
                sPropL.Add("ex_prop_crate_clothing_sc");
                sPropL.Add("ex_prop_crate_elec_bc");
                sPropL.Add("ex_prop_crate_elec_sc");
                sPropL.Add("ex_prop_crate_expl_bc");
                sPropL.Add("ex_prop_crate_expl_sc");
                sPropL.Add("ex_prop_crate_furjacket_bc");
                sPropL.Add("ex_prop_crate_furjacket_sc");
                sPropL.Add("ex_prop_crate_gems_bc");
                sPropL.Add("ex_prop_crate_gems_sc");
                sPropL.Add("ex_prop_crate_highend_pharma_bc");
                sPropL.Add("ex_prop_crate_highend_pharma_sc");
                sPropL.Add("ex_prop_crate_jewels_bc");
                sPropL.Add("ex_prop_crate_jewels_racks_bc");
                sPropL.Add("ex_prop_crate_jewels_racks_sc");
                sPropL.Add("ex_prop_crate_jewels_sc");
                sPropL.Add("ex_prop_crate_med_bc");
                sPropL.Add("ex_prop_crate_med_sc");
                sPropL.Add("ex_prop_crate_money_bc");
                sPropL.Add("ex_prop_crate_money_sc");
                sPropL.Add("ex_prop_crate_narc_bc");
                sPropL.Add("ex_prop_crate_narc_sc");
                sPropL.Add("ex_prop_crate_pharma_bc");
                sPropL.Add("ex_prop_crate_pharma_sc");
                sPropL.Add("ex_prop_crate_tob_bc");
                sPropL.Add("ex_prop_crate_tob_sc");
                sPropL.Add("ex_prop_crate_wlife_bc");
                sPropL.Add("ex_prop_crate_wlife_sc");

                vPosL.Add(new Vector3(1088.74683f, -3096.75146f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.134708673f));

                vPosL.Add(new Vector3(1091.28345f, -3096.57813f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.429592818f));

                vPosL.Add(new Vector3(1095.08557f, -3096.76392f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.0687025115f));

                vPosL.Add(new Vector3(1097.58936f, -3096.76416f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.0687025115f));

                vPosL.Add(new Vector3(1101.25781f, -3096.7605f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.0687025115f));

                vPosL.Add(new Vector3(1103.82813f, -3096.75854f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.0687025115f));

                vPosL.Add(new Vector3(1103.76807f, -3096.77856f, -37.6984978f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.0687025115f));

                vPosL.Add(new Vector3(1101.26819f, -3096.77856f, -37.6984978f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.0687025115f));

                vPosL.Add(new Vector3(1097.56909f, -3096.77856f, -37.6984978f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.0687025115f));

                vPosL.Add(new Vector3(1094.96973f, -3096.77856f, -37.6984978f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.0687025115f));

                vPosL.Add(new Vector3(1091.27063f, -3096.77856f, -37.6984978f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.0687025115f));

                vPosL.Add(new Vector3(1088.77124f, -3096.77856f, -37.6984978f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.0687025115f));
            }
            else
            {
                sOldPropL.Add("upgrade_bunker_set");
                sOldPropL.Add("standard_bunker_set");
                sOldPropL.Add("bunker_style_a");
                sOldPropL.Add("bunker_style_b");
                sOldPropL.Add("bunker_style_c");
                sOldPropL.Add("office_upgrade_set");
                sOldPropL.Add("office_blocker_set");
                sOldPropL.Add("gun_locker_upgrade");
                sOldPropL.Add("gun_range_blocker_set");
                sOldPropL.Add("security_upgrade");
                sOldPropL.Add("standard_security_set");
                sOldPropL.Add("gun_wall_blocker");
                sOldPropL.Add("Upgrade_Bunker_Set_More");
                sOldPropL.Add("Gun_schematic_set");
                sOldPropL.Add("Standard_Bunker_Set_More");
                sOldPropL.Add("gun_range_lights");

                sPropL.Add("ba_prop_battle_crates_rifles_01a");
                vPosL.Add(new Vector3(923.458435f, -3232.69727f, -99.2854843f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -75.7848206f));

                sPropL.Add("ba_prop_battle_crates_rifles_02a");
                vPosL.Add(new Vector3(929.155457f, -3239.77051f, -99.2970276f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -178.224823f));

                sPropL.Add("ba_prop_battle_crates_rifles_03a");
                vPosL.Add(new Vector3(933.701721f, -3239.65088f, -99.296608f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -179.418991f));

                sPropL.Add("ba_prop_battle_crates_rifles_04a");
                vPosL.Add(new Vector3(937.145569f, -3239.61816f, -99.298645f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -179.418991f));

                sPropL.Add("ba_prop_battle_crates_sam_01a");
                vPosL.Add(new Vector3(945.674133f, -3239.41626f, -99.2993698f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -179.41893f));

                sPropL.Add("ba_prop_battle_crates_wpn_mix_01a");
                vPosL.Add(new Vector3(939.155457f, -3229.90967f, -99.2904587f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 4.85300207f));

                sPropL.Add("ex_prop_crate_ammo_bc");
                vPosL.Add(new Vector3(941.691467f, -3229.87817f, -99.1617279f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 92.9039536f));

                sPropL.Add("ex_prop_crate_ammo_sc");
                vPosL.Add(new Vector3(943.951721f, -3229.87671f, -99.1602554f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 92.9039307f));

                sPropL.Add("ex_prop_crate_closed_bc");
                vPosL.Add(new Vector3(945.808105f, -3229.85303f, -99.1671066f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 90.6525574f));

                sPropL.Add("ex_prop_crate_closed_ms");
                vPosL.Add(new Vector3(947.573181f, -3232.29004f, -99.1695251f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.809956074f));

                sPropL.Add("ex_prop_crate_closed_mw");
                vPosL.Add(new Vector3(950.064697f, -3235.10962f, -99.1710815f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.915191054f));

                sPropL.Add("ex_prop_crate_closed_sc");
                vPosL.Add(new Vector3(950.096985f, -3237.1189f, -99.1710205f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.902066052f));

                sPropL.Add("ex_prop_crate_closed_sc");
                vPosL.Add(new Vector3(947.812012f, -3235.34473f, -99.169487f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 3.0477345f));

                sPropL.Add("ex_prop_crate_closed_sc");
                vPosL.Add(new Vector3(947.911804f, -3237.26904f, -99.1703415f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 3.26426029f));

                sPropL.Add("xm_prop_crates_rifles_04a");
                vPosL.Add(new Vector3(943.516174f, -3237.59033f, -99.2979736f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -90.5018463f));

                sPropL.Add("xm_prop_rsply_crate04b");
                vPosL.Add(new Vector3(923.959961f, -3230.34619f, -99.2831802f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -177.508408f));

                sPropL.Add("xm_prop_rsply_crate04a");
                vPosL.Add(new Vector3(925.840698f, -3230.23999f, -99.2840424f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -176.445313f));

                sPropL.Add("xm_prop_crates_weapon_mix_01a");
                vPosL.Add(new Vector3(928.262634f, -3230.0459f, -99.2842865f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -178.892624f));

                sPropL.Add("xm_prop_crates_sam_01a");
                vPosL.Add(new Vector3(930.593567f, -3229.87354f, -99.286705f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -178.892624f));

                sPropL.Add("xm_prop_crates_rifles_04a");
                vPosL.Add(new Vector3(936.661133f, -3218.73535f, -99.2795868f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 94.1384048f));

                sPropL.Add("xm_prop_crates_rifles_03a");
                vPosL.Add(new Vector3(936.722473f, -3220.57959f, -99.2803268f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -86.8848953f));

                sPropL.Add("xm_prop_crates_rifles_02a");
                vPosL.Add(new Vector3(936.852478f, -3222.87402f, -99.2840652f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -86.8848953f));

                sPropL.Add("xm_prop_crates_rifles_01a");
                vPosL.Add(new Vector3(936.953247f, -3224.63818f, -99.2855988f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -86.8848953f));

                sPropL.Add("xm_prop_crates_pistols_01a");
                vPosL.Add(new Vector3(937.182495f, -3225.9292f, -99.2879486f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -85.8282471f));

                sPropL.Add("sm_prop_smug_rsply_crate01a");
                vPosL.Add(new Vector3(936.993591f, -3227.11353f, -99.2895279f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -87.3434677f));

                sPropL.Add("prop_lev_crate_01");
                vPosL.Add(new Vector3(921.080078f, -3220.96851f, -99.2501251f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.62611103f));

                sPropL.Add("prop_lev_crate_01");
                vPosL.Add(new Vector3(917.042358f, -3220.79346f, -99.2455246f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.62611103f));

                sPropL.Add("ba_prop_battle_crate_closed_bc");
                vPosL.Add(new Vector3(918.066956f, -3233.68555f, -99.1663589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 90.7133865f));

                sPropL.Add("ba_prop_battle_crate_closed_bc");
                vPosL.Add(new Vector3(918.043945f, -3231.16064f, -99.1604691f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 90.7133865f));

                sPropL.Add("ba_prop_battle_crates_pistols_01a");
                vPosL.Add(new Vector3(921.838196f, -3224.7959f, -99.2755661f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -90.946228f));

                sPropL.Add("ba_prop_battle_crates_rifles_01a");
                vPosL.Add(new Vector3(921.862f, -3223.17773f, -99.2730484f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -90.946228f));

                sPropL.Add("ba_prop_battle_crates_rifles_02a");
                vPosL.Add(new Vector3(939.838318f, -3223.61987f, -99.2871323f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 4.70347738f));

                sPropL.Add("ba_prop_battle_crates_rifles_03a");
                vPosL.Add(new Vector3(942.150024f, -3223.42725f, -99.2867813f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 4.70347738f));

                sPropL.Add("ba_prop_battle_crates_rifles_04a");
                vPosL.Add(new Vector3(944.407288f, -3223.2522f, -99.2895889f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 4.12604809f));

                sPropL.Add("ex_prop_crate_closed_mw");
                vPosL.Add(new Vector3(950.311523f, -3225.73633f, -99.1656265f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 176.068619f));

                sPropL.Add("ex_prop_crate_closed_mw");
                vPosL.Add(new Vector3(950.544617f, -3223.15308f, -99.1642532f));
                vRotL.Add(new Vector3(-2.07133613e-13f, -4.42925028e-07f, -0.492275923f));

                sPropL.Add("ex_prop_crate_closed_mw");
                vPosL.Add(new Vector3(950.307861f, -3220.7998f, -99.1628189f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -178.038986f));

                sPropL.Add("ex_prop_crate_closed_mw");
                vPosL.Add(new Vector3(950.035156f, -3217.32056f, -99.160141f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 2.68975663f));

                sPropL.Add("ex_prop_crate_expl_bc");
                vPosL.Add(new Vector3(949.020935f, -3200.24316f, -99.1220703f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 5.27651787f));

                sPropL.Add("ex_prop_crate_expl_sc");
                vPosL.Add(new Vector3(949.278137f, -3203.00098f, -99.1454468f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 10.0468082f));

                sPropL.Add("gr_prop_gr_cratespile_01a");
                vPosL.Add(new Vector3(929.098389f, -3222.29175f, -99.2777481f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.417297f));

                sPropL.Add("gr_prop_gr_cratespile_01a");
                vPosL.Add(new Vector3(929.611938f, -3219.28589f, -99.2745285f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.03194451f));

                sPropL.Add("prop_drop_crate_01_set");
                vPosL.Add(new Vector3(929.013245f, -3210.37598f, -99.2264404f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 101.008926f));

                sPropL.Add("prop_drop_crate_01_set2");
                vPosL.Add(new Vector3(931.444763f, -3209.92188f, -99.2284088f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -80.2574539f));

                sPropL.Add("vw_prop_vw_crate_01a");
                vPosL.Add(new Vector3(933.557861f, -3209.54028f, -99.2673721f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -79.994873f));

                sPropL.Add("xm_prop_crates_rifles_02a");
                vPosL.Add(new Vector3(934.024841f, -3211.7522f, -99.2699127f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 8.31225395f));

                sPropL.Add("xm_prop_crates_rifles_02a");
                vPosL.Add(new Vector3(936.893616f, -3211.4563f, -99.2716751f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -173.019577f));

                sPropL.Add("xm_prop_moderncrate_xplv_01");
                vPosL.Add(new Vector3(945.536255f, -3212.79736f, -99.2793274f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -3.96463776f));

                sPropL.Add("xm_prop_moderncrate_xplv_01");
                vPosL.Add(new Vector3(947.168213f, -3211.93115f, -99.2796097f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -22.0485935f));

                sPropL.Add("xm_prop_moderncrate_xplv_01");
                vPosL.Add(new Vector3(946.567566f, -3207.75977f, -99.2750854f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -160.683304f));

                sPropL.Add("xm_prop_moderncrate_xplv_01");
                vPosL.Add(new Vector3(945.042114f, -3209.36426f, -99.2753983f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -173.392944f));

                sPropL.Add("ba_prop_battle_crates_pistols_01a");
                vPosL.Add(new Vector3(942.401062f, -3205.79224f, -99.2703323f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -165.774109f));

                sPropL.Add("ba_prop_battle_crates_rifles_01a");
                vPosL.Add(new Vector3(938.989929f, -3206.86011f, -99.2680817f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -160.951111f));

                sPropL.Add("ba_prop_battle_crates_rifles_02a");
                vPosL.Add(new Vector3(940.641968f, -3206.20337f, -99.2700729f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -164.002213f));

                sPropL.Add("ba_prop_battle_crates_rifles_04a");
                vPosL.Add(new Vector3(937.973145f, -3205.21729f, -99.266922f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 108.560875f));

                sPropL.Add("ba_prop_battle_crates_sam_01a");
                vPosL.Add(new Vector3(937.26886f, -3203.03003f, -99.2639694f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 107.373161f));

                sPropL.Add("ba_prop_battle_crates_wpn_mix_01a");
                vPosL.Add(new Vector3(943.891479f, -3192.37769f, -99.2632904f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -85.060463f));

                sPropL.Add("ba_prop_battle_crates_rifles_04a");
                vPosL.Add(new Vector3(934.506409f, -3193.46558f, -99.2636108f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 6.42923689f));

                sPropL.Add("ba_prop_battle_crates_rifles_03a");
                vPosL.Add(new Vector3(937.003723f, -3193.18628f, -99.2624283f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 6.32424831f));

                sPropL.Add("ba_prop_battle_crate_beer_03");
                vPosL.Add(new Vector3(927.762695f, -3206.66333f, -99.2577667f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 100.031738f));

                sPropL.Add("ba_prop_battle_crate_beer_04");
                vPosL.Add(new Vector3(925.228271f, -3205.81738f, -99.254364f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -172.730911f));

                sPropL.Add("ba_prop_battle_crate_beer_02");
                vPosL.Add(new Vector3(927.243408f, -3204.80859f, -99.2604523f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -173.045685f));


                sIplProps.Add("upgrade_bunker_set");
                sIplProps.Add("bunker_style_c");
                sIplProps.Add("office_upgrade_set");
                sIplProps.Add("gun_locker_upgrade");
                sIplProps.Add("security_upgrade");
                sIplProps.Add("standard_security_set");
                sIplProps.Add("Upgrade_Bunker_Set_More");
                sIplProps.Add("Gun_schematic_set");
                sIplProps.Add("gun_range_lights");
            }

            Vector3 Vloc = VectorList_02[VectorList_02.Count - 1];
            int iWare = Function.Call<int>(Hash.GET_INTERIOR_AT_COORDS, Vloc.X, Vloc.Y, Vloc.Z);

            if (!Function.Call<bool>(Hash.IS_INTERIOR_DISABLED, iWare))
            {
                for (int i = 0; i < sOldPropL.Count; i++)
                {
                    if (Function.Call<bool>(Hash._IS_INTERIOR_PROP_ENABLED, iWare, sOldPropL[i]))
                    {
                        Function.Call(Hash._DISABLE_INTERIOR_PROP, iWare, sOldPropL[i]);
                        sList_01.Add(sOldPropL[i]);
                    }
                }
            }
            else
            {
                Function.Call((Hash)0x2CA429C029CCF247, iWare);
                Function.Call(Hash.SET_INTERIOR_ACTIVE, iWare, true);
            }
            Function.Call(Hash.DISABLE_INTERIOR, iWare, false);

            for (int i = 0; i < sIplProps.Count; i++)
            {
                if (!Function.Call<bool>(Hash._IS_INTERIOR_PROP_ENABLED, iWare, sIplProps[i]))
                    Function.Call(Hash._ENABLE_INTERIOR_PROP, iWare, sIplProps[i]);
            }
            Function.Call(Hash.REFRESH_INTERIOR, iWare);

            if (iMissionVar_01 == 6)
            {
                int iRanEnd = RandInt(0, 8);

                int iAddshit = vPosL.Count;
                while (iAddshit > 0)
                {
                    iAddshit = iAddshit - 1;
                    if (iAddshit == iRanEnd)
                    {
                        string sRanOb = "";
                        int iRanObj = RandInt(0, 60);
                        if (iRanObj < 10)
                        {
                            sRanOb = "ex_prop_crate_minig";
                            sMissionVar_02 = "Golden Minigun";
                        }
                        else if (iRanObj < 20)
                        {
                            sRanOb = "ex_prop_crate_oegg";
                            sMissionVar_02 = "Golden Egg";
                        }
                        else if (iRanObj < 30)
                        {
                            sRanOb = "ex_prop_crate_shide";
                            sMissionVar_02 = "Yetti Hide";
                        }
                        else if (iRanObj < 40)
                        {
                            sRanOb = "ex_prop_crate_freel";
                            sMissionVar_02 = "Film Reel";
                        }
                        else if (iRanObj < 50)
                        {
                            sRanOb = "ex_prop_crate_Watch";
                            sMissionVar_02 = "Antique Watch";
                        }
                        else
                        {
                            sRanOb = "ex_prop_crate_xldiam";
                            sMissionVar_02 = "Large Dimond";
                        }
                        Vector3 Vrot90 = vRotL[iAddshit];
                        Vrot90.Z = Vrot90.Z + 90.00f;
                        Prop_01 = BuildProp(sRanOb, vPosL[iAddshit], Vrot90, true, true);
                    }
                    else
                    {
                        string sRanOb = sPropL[RandInt(0, sPropL.Count - 1)];
                        Prop Proper = BuildProp(sRanOb, vPosL[iAddshit], vRotL[iAddshit], true, true);
                        if (Proper != null)
                            Proper.Position = new Vector3(Proper.Position.X, Proper.Position.Y, Proper.Position.Z - 0.10f);
                    }
                }
                vTarget_02 = new Vector3(1027.073f, -3101.486f, -38.999f);
            }
            else if (iMissionVar_01 == 7)
            {
                int iRanEnd = RandInt(0, 20);

                int iAddshit = vPosL.Count;
                while (iAddshit > 0)
                {
                    iAddshit = iAddshit - 1;
                    if (iAddshit == iRanEnd)
                    {
                        string sRanOb = "";
                        int iRanObj = RandInt(0, 60);
                        if (iRanObj < 10)
                        {
                            sRanOb = "ex_prop_crate_minig";
                            sMissionVar_02 = "Golden Minigun";
                        }
                        else if (iRanObj < 20)
                        {
                            sRanOb = "ex_prop_crate_oegg";
                            sMissionVar_02 = "Golden Egg";
                        }
                        else if (iRanObj < 30)
                        {
                            sRanOb = "ex_prop_crate_shide";
                            sMissionVar_02 = "Yetti Hide";
                        }
                        else if (iRanObj < 40)
                        {
                            sRanOb = "ex_prop_crate_freel";
                            sMissionVar_02 = "Film Reel";
                        }
                        else if (iRanObj < 50)
                        {
                            sRanOb = "ex_prop_crate_Watch";
                            sMissionVar_02 = "Antique Watch";
                        }
                        else
                        {
                            sRanOb = "ex_prop_crate_xldiam";
                            sMissionVar_02 = "Large Dimond";
                        }
                        Vector3 Vrot90 = vRotL[iAddshit];
                        Vrot90.Z = Vrot90.Z + 90.00f;
                        Prop_01 = BuildProp(sRanOb, vPosL[iAddshit], Vrot90, true, true);
                    }
                    else
                    {
                        string sRanOb = sPropL[RandInt(0, sPropL.Count - 1)];
                        Prop Proper = BuildProp(sRanOb, vPosL[iAddshit], vRotL[iAddshit], true, true);
                        if (Proper != null)
                            Proper.Position = new Vector3(Proper.Position.X, Proper.Position.Y, Proper.Position.Z - 0.10f);
                    }
                }
                vTarget_02 = new Vector3(1073.01f, -3102.541f, -38.99992f);
            }
            else if (iMissionVar_01 == 8)
            {
                int iRanEnd = RandInt(0, 5);

                int iAddshit = vPosL.Count;
                while (iAddshit > 0)
                {
                    iAddshit = iAddshit - 1;
                    if (iAddshit == iRanEnd)
                    {
                        string sRanOb = "";
                        int iRanObj = RandInt(0, 60);
                        if (iRanObj < 10)
                        {
                            sRanOb = "ex_prop_crate_minig";
                            sMissionVar_02 = "Golden Minigun";
                        }
                        else if (iRanObj < 20)
                        {
                            sRanOb = "ex_prop_crate_oegg";
                            sMissionVar_02 = "Golden Egg";
                        }
                        else if (iRanObj < 30)
                        {
                            sRanOb = "ex_prop_crate_shide";
                            sMissionVar_02 = "Yetti Hide";
                        }
                        else if (iRanObj < 40)
                        {
                            sRanOb = "ex_prop_crate_freel";
                            sMissionVar_02 = "Film Reel";
                        }
                        else if (iRanObj < 50)
                        {
                            sRanOb = "ex_prop_crate_Watch";
                            sMissionVar_02 = "Antique Watch";
                        }
                        else
                        {
                            sRanOb = "ex_prop_crate_xldiam";
                            sMissionVar_02 = "Large Dimond";
                        }
                        Vector3 Vrot90 = vRotL[iAddshit];
                        Vrot90.Z = Vrot90.Z + 90.00f;
                        Prop_01 = BuildProp(sRanOb, vPosL[iAddshit], Vrot90, true, true);
                    }
                    else
                    {
                        string sRanOb = sPropL[RandInt(0, sPropL.Count - 1)];
                        Prop Proper = BuildProp(sRanOb, vPosL[iAddshit], vRotL[iAddshit], true, true);
                        if (Proper != null)
                            Proper.Position = new Vector3(Proper.Position.X, Proper.Position.Y, Proper.Position.Z - 0.10f);
                    }
                }
                vTarget_02 = new Vector3(1104.75f, -3099.33f, -38.99996f);
            }
            else
            {
                int iRanEnd = RandInt(0, 60);
                if (iRanEnd < 10)
                {
                    Vector3 Poz = new Vector3(945.665f, -3237.394f, -99.17f);
                    Vector3 Rot = new Vector3(0.00f, 0.00f, 94.326f);
                    Prop_01 = BuildProp("ex_prop_crate_oegg", Poz, Rot, true, true);
                    sMissionVar_02 = "Golden Egg";
                }
                else if (iRanEnd < 20)
                {
                    Vector3 Poz = new Vector3(947.617f, -3229.75977f, -99.068f);
                    Vector3 Rot = new Vector3(0.00f, 0.00f, -90.36f);
                    Prop_01 = BuildProp("ex_prop_crate_shide", Poz, Rot, true, true);
                    sMissionVar_02 = "Yetti Hide";
                }
                else if (iRanEnd < 30)
                {
                    Vector3 Poz = new Vector3(928.077f, -3208.534f, -99.136f);
                    Vector3 Rot = new Vector3(0.00f, 0.00f, 4.884f);
                    Prop_01 = BuildProp("ex_prop_crate_minig", Poz, Rot, true, true);
                    sMissionVar_02 = "Golden Minigun";
                }
                else if (iRanEnd < 40)
                {
                    Vector3 Poz = new Vector3(945.47f, -3206.08f, -99.1497f);
                    Vector3 Rot = new Vector3(0.00f, 0.00f, 105.167f);
                    Prop_01 = BuildProp("ex_prop_crate_freel", Poz, Rot, true, true);
                    sMissionVar_02 = "Film Real";
                }
                else if (iRanEnd < 50)
                {
                    Vector3 Poz = new Vector3(944.21f, -3194.748f, -99.137f);
                    Vector3 Rot = new Vector3(0.00f, 0.00f, -172.513f);
                    Prop_01 = BuildProp("ex_prop_crate_Watch", Poz, Rot, true, true);
                    sMissionVar_02 = "Watch";
                }
                else
                {
                    Vector3 Poz = new Vector3(944.21f, -3194.748f, -99.136f);
                    Vector3 Rot = new Vector3(0.00f, 0.00f, -172.513f);
                    Prop_01 = BuildProp("ex_prop_crate_xldiam", Poz, Rot, true, true);
                    sMissionVar_02 = "Large Dimond";
                }

                int iAddshit = sPropL.Count;
                while (iAddshit > 0)
                {
                    iAddshit = iAddshit - 1;
                    BuildProp(sPropL[iAddshit], vPosL[iAddshit], vRotL[iAddshit], true, true);
                }
            }
        }
        private void CargoCollect_UnloadInt(int iInterior)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("CargoCollect_UnloadInt, iInterior == " + iInterior, tEx);

            List<string> sPropL = new List<string>();

            Vector3 Vloc = VectorList_02[VectorList_02.Count - 1];
            int iWare = Function.Call<int>(Hash.GET_INTERIOR_AT_COORDS, Vloc.X, Vloc.Y, Vloc.Z);

            if (iInterior == 8)
            {
                sPropL.Add("upgrade_bunker_set");
                sPropL.Add("bunker_style_c");
                sPropL.Add("office_upgrade_set");
                sPropL.Add("gun_locker_upgrade");
                sPropL.Add("security_upgrade");
                sPropL.Add("standard_security_set");
                sPropL.Add("Upgrade_Bunker_Set_More");
                sPropL.Add("Gun_schematic_set");
                sPropL.Add("gun_range_lights");
            }

            for (int i = 0; i < sPropL.Count; i++)
            {
                if (Function.Call<bool>(Hash._IS_INTERIOR_PROP_ENABLED, iWare, sPropL[i]))
                    Function.Call(Hash._DISABLE_INTERIOR_PROP, iWare, sPropL[i]);
            }

            int iGetOldSet = sList_01.Count;
            if (iGetOldSet > 0)
            {
                while (iGetOldSet > 0)
                {
                    iGetOldSet = iGetOldSet - 1;
                    Function.Call(Hash._ENABLE_INTERIOR_PROP, iWare, sList_01[iGetOldSet]);
                }
                sList_01.Clear();
            }
            else
            {
                Function.Call(Hash.SET_INTERIOR_ACTIVE, iWare, false);
                Function.Call(Hash.DISABLE_INTERIOR, iWare, true);

                //LoadInMissionIPLs(iInterior, true);
            }
        }
        private void CargoCollect_LoadHood()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("CargoCollect_LoadHood", tEx);

            int iAm = RandInt(1, 50);
            for (int i = 0; i < VectorList_02.Count - 1; i++)
                GenPlayerPed(VectorList_02[i], 0.00f, 45, 180, 2, 19, 0, null, 8, true, true, 0, false);
        }
        private void CargoCollect_ResetTruck(Vector3 vPosy, float fHeaders)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("CargoCollect_ResetTruck", tEx);

            while (Game.IsControlPressed(2, GTA.Control.Context))
                Script.Wait(1);

            Game.FadeScreenOut(1000);
            Script.Wait(1000);
            VehTrackin_01.Position = vPosy;
            VehTrackin_01.Heading = fHeaders;
            Game.FadeScreenIn(1000);
            BeOnOff[0] = false;
        }
        private void CargoCollect_Suprise()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("CargoCollect_Suprise", tEx);

            CleanUpPeds();
            Game.Player.Character.CanBeDraggedOutOfVehicle = true;
            Vector3 VmePos = Game.Player.Character.Position;
            iMissionVar_03 = FindRandom(14, 1, 5);

            if (iMissionVar_03 == 1)
            {
                FindAndReplaceVeh(VmePos, 20, 10, 0, 8, 1, false, true, true, 155.00f, 35.00f, "", false, RandInt(2, 4), 0, true);
                iCashReward += 4000;
            }       // Arena vehicle chase
            else if (iMissionVar_03 == 2)
            {
                AddDogFighters(3);
                iCashReward += 15000;
            }       // Hydra attack
            else if (iMissionVar_03 == 3)
            {
                Vector3 NewV = VmePos - (Game.Player.Character.ForwardVector * 500);
                NewV.Z = NewV.Z + 500.00f;
                List<string> SCarz = RandVeh(25);
                string sXCArs = SCarz[RandInt(0, SCarz.Count - 1)];
                VehicleSpawn(sXCArs, NewV, Game.Player.Character.Heading, false, false, false, false, 2, 8, 7, 0, true);
                iCashReward += 12000;
            }       // helli attack -- Make it work
            else if (iMissionVar_03 == 4)
            {
                int iCountEm = RandInt(5, 10);
                Vector3 VFor = VmePos + (Game.Player.Character.ForwardVector * 30);
                FindAPed(VFor, 55.00f, iCountEm, 5, 2, false);
                iCashReward += 10000;
            }       // Green Suit Mele Attack 
            else
            {
                iCashReward += 1000;
            }                            // No attacks
        }
        private void DeepDown_Addfish()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("DeepDown_Addfish", tEx);

            Vector3 FishStack = vTarget_01;
            int iFish = RandInt(8, 15);
            iCashReward = iFish * 500;
            for (int i = 0; i < iFish; i++)
            {
                FishStack.Z = FishStack.Z + 0.50f;
                if (RandBool(9))
                    FishStack.Y = FishStack.Y + 0.50f;
                else
                    FishStack.X = FishStack.X + 0.50f;

                NPCSpawn("a_c_sharktiger", vTarget_01, 0.00f, 55, 400, 2, 34, 0, null, 2, true, true, 0, 0);
            }
        }
        private void DeepDown_SwimtoBarrel()
        {
            for (int i = 0; i < PedList_02.Count; i++)
            {
                if (PedList_02[i].IsDead)
                {
                    PedList_02[i].CurrentBlip.Remove();
                    PedList_02[i].MarkAsNoLongerNeeded();
                    PedList_02.RemoveAt(i);
                }
                else if (PropList_01.Count > 0)
                {
                    PedList_02[i].Task.ClearAll();
                    PedList_02[i].Task.GoTo(PropList_01[0].Position, true, -1);
                }
                else if (PedList_02[i].Position.DistanceTo(vTarget_01) > 85.00f)
                {
                    PedList_02[i].Task.ClearAll();
                    PedList_02[i].Task.RunTo(vTarget_01, true, -1);
                }
                else
                {
                    PedList_02[i].Task.ClearAll();
                    PedList_02[i].Task.FleeFrom(Game.Player.Character);
                }
            }
        }
        private void DeepDown_DropBomb()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("DeepDown_DropBomb", tEx);

            while (Game.IsControlPressed(2, GTA.Control.Context))
                Script.Wait(1);
            BuildProp("prop_barrel_02b", new Vector3(VehTrackin_01.Position.X, VehTrackin_01.Position.Y, VehTrackin_01.Position.Z - 2.75f), Vector3.Zero, false, true);
            BeOnOff[1] = false;
        }
        public List<Vector3> FarToNear(List<Vector3> ListToFix, Vector3 vStartPoint)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("FarToNear", tEx);

            List<Vector3> NewVList = new List<Vector3>();
            List<float> fDistanceTo = new List<float>();

            Vector3 vFurthest = Vector3.Zero;

            int iListtoFix = ListToFix.Count;

            for (int i = 0; i < ListToFix.Count; i++)
                fDistanceTo.Add(ListToFix[i].DistanceTo(vStartPoint));

            float fMax = fDistanceTo[0];
            int iV = 0;

            for (int i = 0; i < fDistanceTo.Count; i++)
            {
                if (fDistanceTo[i] < fMax)
                {
                    fMax = fDistanceTo[i];
                    iV = i;
                }
            }
            vFurthest = ListToFix[iV];
            NewVList.Add(ListToFix[iV]);
            ListToFix.RemoveAt(iV);

            while (NewVList.Count != iListtoFix)
            {
                fDistanceTo.Clear();
                for (int i = 0; i < ListToFix.Count; i++)
                    fDistanceTo.Add(ListToFix[i].DistanceTo(vFurthest));

                if (ListToFix.Count > 1)
                {
                    float fMin = fDistanceTo[0];
                    int iNext = 0;

                    for (int i = 0; i < fDistanceTo.Count; i++)
                    {
                        if (fDistanceTo[i] < fMin)
                        {
                            fMin = fDistanceTo[i];
                            iNext = i;
                        }
                    }
                    vFurthest = ListToFix[iNext];

                    NewVList.Add(ListToFix[iNext]);
                    ListToFix.RemoveAt(iNext);
                }
                else
                    NewVList.Add(ListToFix[0]);
            }

            return NewVList;
        }
        public List<Vector3> ListReverseVec3(List<Vector3> VecList)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("ListReverseVec3", tEx);

            List<Vector3> SortedList = new List<Vector3>();

            int iList = VecList.Count;

            while (iList > 0)
            {
                iList -= 1;
                SortedList.Add(VecList[iList]);
            }

            return SortedList;
        }
        public List<string> ListReverseString(List<string> StrList)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("ListReverseString", tEx);

            List<string> SortedList = new List<string>();

            int iList = StrList.Count;

            while (iList > 0)
            {
                iList -= 1;
                SortedList.Add(StrList[iList]);
            }

            return SortedList;
        }
        public List<float> ListReversefloat(List<float> FlowList)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("ListReversefloat", tEx);

            List<float> SortedList = new List<float>();

            int iList = FlowList.Count;

            while (iList > 0)
            {
                iList -= 1;
                SortedList.Add(FlowList[iList]);
            }

            return SortedList;
        }
        private void KeepMoving(Ped Peddy, Vector3 Vtarg, int iWait4)
        {
            iWait4Sec = Game.GameTime + iWait4;
            if (BeInRange(0.75f, fKeepMoving, Peddy.Position.DistanceTo(Vtarg)))
            {
                Peddy.Task.ClearAll();
                Peddy.Position += Peddy.ForwardVector * 2.50f;
                Peddy.Task.RunTo(Vtarg, true, -1);
            }
            else
                fKeepMoving = Peddy.Position.DistanceTo(Vtarg);
        }
        private void YachtStuff_StartOnYacht()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("YachtStuff_StartOnYacht", tEx);

            Ped Peddy = Game.Player.Character;

            int iStart = FindRandom(15, 1, 5);
            if (iStart == 1)
            {
                Peddy.Position = new Vector3(-2022.449f, -1031.614f, 2.561438f);
                Peddy.Task.PlayAnimation("anim@mp_yacht@shower@female@", "shower_idle_a", 1.00f, -1, AnimationFlags.CancelableWithMovement);
            }
            else if (iStart == 2)
            {
                Peddy.Position = new Vector3(-2026.442f, -1043.872f, 2.561439f);
                Peddy.Task.PlayAnimation("anim@mp_yacht@shower@female@", "shower_idle_a", 1.00f, -1, AnimationFlags.CancelableWithMovement);
            }
            else if (iStart == 3)
            {
                bASleap = true;
                iMyBed = 0;
                YachtStuff_BedTime(YachtSleap[iMyBed]);
            }
            else if (iStart == 4)
            {
                bASleap = true;
                iMyBed = 1;
                YachtStuff_BedTime(YachtSleap[iMyBed]);
            }
            else
            {
                bASleap = true;
                iMyBed = 2;
                YachtStuff_BedTime(YachtSleap[iMyBed]);
            }

            Game.FadeScreenIn(1000);
        }
        private void YachtStuff_YachtRmovals()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("YachtStuff_YachtRmovals", tEx);

            YachtStuff_DanceFloor(false);
            CleanUpPeds();
            CleanUpProps();
            CleanUpVehicles();
            bYachtParty = false;
            YachtSit.Clear();
            YachtStuff_TheBlip(true);
            if (bDrinkig)
                TimeCycFade();
            iYachtDrink = 0;
        }
        private void YachtStuff_TheBlip(bool bOn)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("YachtStuff_TheBlip, bOn == " + bOn, tEx);

            if (bOn)
            {
                if (YachtBlip == null)
                {
                    YachtBlip = World.CreateBlip(vYachtBlip);
                    YachtBlip.Sprite = BlipSprite.Yacht;
                    YachtBlip.IsShortRange = true;
                    iBliper.Add(YachtBlip.Handle);
                    WriteBlips();
                }
            }
            else
            {
                if (YachtBlip != null)
                {
                    BlipCleaning(YachtBlip);
                    YachtBlip = null;
                }
            }
        }          
        private void YachtStuff_OntheYacht()
        {
            Ped Peddy = Game.Player.Character;
            Vector3 PlayPos = Peddy.Position;

            if (bASleap)
            {
                ControlerUI(sAltLang[314], 1);
                if (Game.IsControlJustPressed(2, GTA.Control.Detonate))
                {
                    ForceAnimOnce(Peddy, "savebighouse@", "f_getout_l_bighouse", Peddy.Position + (Peddy.RightVector * 0.60f), Peddy.Rotation);
                    Script.Wait(1000);
                    Peddy.Detach();
                    if (iMyBed == 0)
                    {
                        Peddy.Position = new Vector3(-2071.628f, -1020.615f, 5.880583f);
                        Peddy.Heading = 346.8368f;
                    }
                    else if (iMyBed == 1)
                    {
                        Peddy.Position = new Vector3(-2090.004f, -1013.44f, 5.874646f);
                        Peddy.Heading = 188.6417f;
                    }
                    else if (iMyBed == 2)
                    {
                        Peddy.Position = new Vector3(-2097.656f, -1013.154f, 5.882348f);
                        Peddy.Heading = 181.7787f;
                    }

                    while (Function.Call<bool>(Hash.GET_IS_TASK_ACTIVE, Peddy, 134))
                        Script.Wait(1);

                    CleanCams();
                    Peddy.FreezePosition = false;
                    Peddy.HasCollision = true;
                    bASleap = false;
                    iMyBed = 0;
                }
                else if (Peddy.Position.DistanceTo(YachtSleap[iMyBed].Position) > 2.00f)
                    YachtStuff_BedTime(YachtSleap[iMyBed]);
                else if (Peddy.Health < Peddy.MaxHealth && iWait4Sec < Game.GameTime)
                {
                    Peddy.Health = Peddy.Health + 1;
                    iWait4Sec = Game.GameTime + 500;
                }
                else
                {
                    if (iAmHash != 0)
                    {
                        if (!Function.Call<bool>(Hash.GET_IS_TASK_ACTIVE, Game.Player.Character, 134))
                            YachtStuff_BedTime(YachtSleap[iMyBed]);
                    }
                }
            }
            else if (bPianoSt)
            {
                ControlerUI(sAltLang[314], 1);
                if (Game.IsControlJustPressed(2, GTA.Control.Detonate))
                {
                    bPianoSt = false;
                    YachtStuff_Pianist(false);
                }
            }
            else if (VectorCheck(vYachtTrigList, 20))
            {
                if (PlayPos.DistanceTo(vYachtTrigList[0]) < 2.50f || PlayPos.DistanceTo(vYachtTrigList[1]) < 2.50f)
                {
                    if (bScubaGOn)
                    {
                        ControlerUI(sAltLang[313], 1);
                        if (Game.IsControlJustPressed(2, GTA.Control.Detonate))
                        {
                            WardOutPut("DefaultOut.XML", Peddy);
                            bScubaGOn = false;
                        }
                    }
                    else
                    {
                        ControlerUI(sAltLang[318], 1);
                        if (Game.IsControlJustPressed(2, GTA.Control.Detonate))
                        {
                            WardrobeScan(1);
                            bScubaGOn = true;
                        }
                    }
                }           //DiveWardrobe01/DiveWardrobe02
                else if (PlayPos.DistanceTo(vYachtTrigList[2]) < 2.50f)
                {
                    if (PlayPos.DistanceTo(vYachtTrigList[2]) < 1.25f && !bSwimSuit)
                    {
                        WardrobeScan(3);
                        bSwimSuit = true;
                    }
                    else
                    {
                        if (Game.Player.Character.Model != iAmHash)
                            bSwimSuit = false;
                    }
                    if (!bShowerON)
                    {
                        Vector3 Shower01 = new Vector3(-2026.023f, -1044.079f, 3.3116f);
                        Vector3 ShowerRoto01 = new Vector3(125f, 0.00f, -106.4265f);
                        if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, "scr_mp_house"))
                        {
                            Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_mp_house");
                            int iSpray = Function.Call<int>(Hash.START_PARTICLE_FX_LOOPED_AT_COORD, "ent_amb_shower", Shower01.X, Shower01.Y, Shower01.Z, ShowerRoto01.X, ShowerRoto01.Y, ShowerRoto01.Z, 1.00f, true, true, true, false);
                            iList_01.Add(iSpray);
                            int iSpray2 = Function.Call<int>(Hash.START_PARTICLE_FX_LOOPED_AT_COORD, "ent_amb_shower_steam", Shower01.X, Shower01.Y, Shower01.Z - 1.00f, 0.00f, 0.00f, 0.00f, 1.00f, true, true, true, false);
                            iList_01.Add(iSpray2);
                            bShowerON = true;
                        }
                        else
                        {
                            Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_mp_house");
                        }
                    }
                }           //Shower01
                else if (PlayPos.DistanceTo(vYachtTrigList[3]) < 2.50f)
                {
                    if (PlayPos.DistanceTo(vYachtTrigList[3]) < 1.25f && !bSwimSuit)
                    {
                        WardrobeScan(3);
                        bSwimSuit = true;
                    }
                    else
                    {
                        if (Game.Player.Character.Model != iAmHash)
                            bSwimSuit = false;
                    }
                    if (!bShowerON)
                    {
                        Vector3 Shower01 = new Vector3(-2021.994f, -1031.659f, 3.3116f);
                        Vector3 ShowerRoto01 = new Vector3(125f, 0.00f, -106.4265f);
                        if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, "scr_mp_house"))
                        {
                            Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_mp_house");
                            int iSpray = Function.Call<int>(Hash.START_PARTICLE_FX_LOOPED_AT_COORD, "ent_amb_shower", Shower01.X, Shower01.Y, Shower01.Z, ShowerRoto01.X, ShowerRoto01.Y, ShowerRoto01.Z, 1.00f, true, true, true, false);
                            iList_01.Add(iSpray);
                            int iSpray2 = Function.Call<int>(Hash.START_PARTICLE_FX_LOOPED_AT_COORD, "ent_amb_shower_steam", Shower01.X, Shower01.Y, Shower01.Z - 1.00f, 0.00f, 0.00f, 0.00f, 1.00f, true, true, true, false);
                            iList_01.Add(iSpray2);
                            bShowerON = true;
                        }
                        else
                        {
                            Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_mp_house");
                        }
                    }
                }           //Shower02
                else if (PlayPos.DistanceTo(vYachtTrigList[4]) < 1.00f)
                {
                    if (!bASleap)
                    {
                        ControlerUI(sAltLang[315], 1);
                        if (Game.IsControlJustPressed(2, GTA.Control.Detonate))
                        {
                            iMyBed = 0;
                            YachtStuff_BedTime(YachtSleap[iMyBed]);
                        }
                    }
                }           //Bed01
                else if (PlayPos.DistanceTo(vYachtTrigList[5]) < 1.00f)
                {
                    if (!bASleap)
                    {
                        ControlerUI(sAltLang[315], 1);
                        if (Game.IsControlJustPressed(2, GTA.Control.Detonate))
                        {
                            iMyBed = 1;
                            YachtStuff_BedTime(YachtSleap[iMyBed]);
                        }
                    }
                }           //Bed02
                else if (PlayPos.DistanceTo(vYachtTrigList[6]) < 1.00f)
                {
                    if (!bASleap)
                    {
                        ControlerUI(sAltLang[315], 1);
                        if (Game.IsControlJustPressed(2, GTA.Control.Detonate))
                        {
                            iMyBed = 2;
                            YachtStuff_BedTime(YachtSleap[iMyBed]);
                        }
                    }
                }           //Bed03  
                else if (PlayPos.DistanceTo(vYachtTrigList[7]) < 4.00f && PlayPos.Z > 3.00f)
                {
                    if (!bWetness)
                    {
                        if (PlayPos.DistanceTo(vYachtTrigList[7]) < 1.50f)
                        {
                            bWetness = true;
                            Function.Call(Hash.SET_PED_WETNESS_HEIGHT, Peddy, 0.85f);
                            Function.Call(Hash.SET_PED_WETNESS_ENABLED_THIS_FRAME, Peddy);
                        }
                    }
                    if (!bSwimSuit)
                    {
                        WardrobeScan(2);
                        bSwimSuit = true;
                    }
                    else
                    {
                        if (Game.Player.Character.Model != iAmHash)
                            bSwimSuit = false;
                        else if (iJacuzSit == 1)
                        {
                            ControlerUI(sAltLang[314], 1);
                            if (Game.IsControlJustPressed(2, GTA.Control.Detonate))
                            {
                                if (Peddy.Gender == Gender.Female)
                                    YachtStuff_JackStand(1, false);
                                else
                                    YachtStuff_JackStand(1, true);
                            }
                            else
                            {
                                if (!Function.Call<bool>(Hash.GET_IS_TASK_ACTIVE, Peddy, 134))
                                {
                                    if (Peddy.Gender == Gender.Female)
                                    {
                                        if (!bBacktoBase)
                                        {
                                            int iDell = RandInt(0, 4);
                                            if (iDell == 0)
                                                ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@standing@female@variation_01@", "idle_a", PlayPos, Peddy.Rotation);
                                            else if (iDell == 1)
                                                ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@standing@female@variation_01@", "idle_b", PlayPos, Peddy.Rotation);
                                            else if (iDell == 2)
                                                ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@standing@female@variation_01@", "idle_c", PlayPos, Peddy.Rotation);
                                            else if (iDell == 2)
                                                ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@standing@female@variation_01@", "idle_d", PlayPos, Peddy.Rotation);
                                        }
                                        else
                                            ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@standing@female@variation_01@", "base", PlayPos, Peddy.Rotation);
                                        bBacktoBase = !bBacktoBase;
                                    }
                                    else
                                    {
                                        if (!bBacktoBase)
                                        {
                                            int iDell = RandInt(0, 4);
                                            if (iDell == 0)
                                                ForceAnim(Peddy, "anim@amb@yacht@jacuzzi@standing@male@variation_01@", "idle_a", PlayPos, Peddy.Rotation);
                                            else if (iDell == 1)
                                                ForceAnim(Peddy, "anim@amb@yacht@jacuzzi@standing@male@variation_01@", "idle_b", PlayPos, Peddy.Rotation);
                                            else if (iDell == 2)
                                                ForceAnim(Peddy, "anim@amb@yacht@jacuzzi@standing@male@variation_01@", "idle_c", PlayPos, Peddy.Rotation);
                                            else if (iDell == 2)
                                                ForceAnim(Peddy, "anim@amb@yacht@jacuzzi@standing@male@variation_01@", "idle_d", PlayPos, Peddy.Rotation);
                                        }
                                        else
                                            ForceAnim(Peddy, "anim@amb@yacht@jacuzzi@standing@male@variation_01@", "base", PlayPos, Peddy.Rotation);
                                        bBacktoBase = !bBacktoBase;
                                    }
                                }
                            }
                        }
                        else if (iJacuzSit == 2)
                        {
                            ControlerUI(sAltLang[317], 1);
                            if (Game.IsControlJustPressed(2, GTA.Control.Detonate))
                            {
                                if (Peddy.Gender == Gender.Female)
                                    YachtStuff_JackStand(2, false);
                                else
                                    YachtStuff_JackStand(2, true);
                            }
                            else
                            {
                                if (!Function.Call<bool>(Hash.GET_IS_TASK_ACTIVE, Peddy, 134))
                                {
                                    if (Peddy.Gender == Gender.Female)
                                    {
                                        if (!bBacktoBase)
                                        {
                                            int iDell = RandInt(0, 4);
                                            if (iDell == 0)
                                                ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@female@variation_03@", "idle_a", PlayPos, Peddy.Rotation);
                                            else if (iDell == 1)
                                                ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@female@variation_03@", "idle_b", PlayPos, Peddy.Rotation);
                                            else if (iDell == 2)
                                                ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@female@variation_03@", "idle_c", PlayPos, Peddy.Rotation);
                                            else if (iDell == 2)
                                                ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@female@variation_03@", "idle_d", PlayPos, Peddy.Rotation);
                                            bBacktoBase = !bBacktoBase;
                                        }
                                        else
                                            ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@female@variation_03@", "base", PlayPos, Peddy.Rotation);
                                    }
                                    else
                                    {
                                        if (!bBacktoBase)
                                        {
                                            int iDell = RandInt(0, 4);
                                            if (iDell == 0)
                                                ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@male@variation_03@", "idle_a", PlayPos, Peddy.Rotation);
                                            else if (iDell == 1)
                                                ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@male@variation_03@", "idle_b", PlayPos, Peddy.Rotation);
                                            else if (iDell == 2)
                                                ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@male@variation_03@", "idle_c", PlayPos, Peddy.Rotation);
                                            else if (iDell == 2)
                                                ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@male@variation_03@", "idle_d", PlayPos, Peddy.Rotation);
                                            bBacktoBase = !bBacktoBase;
                                        }
                                        else
                                            ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@male@variation_03@", "base", PlayPos, Peddy.Rotation);
                                    }
                                }
                            }
                        }
                        else if (iJacuzSit == 22)
                        {
                            ControlerUI(sAltLang[317], 1);
                            if (Game.IsControlJustPressed(2, GTA.Control.Detonate))
                            {
                                if (Peddy.Gender == Gender.Female)
                                    YachtStuff_JackStand(2, false);
                                else
                                    YachtStuff_JackStand(2, true);
                            }
                            else
                            {
                                if (!Function.Call<bool>(Hash.GET_IS_TASK_ACTIVE, Peddy, 134))
                                {
                                    if (Peddy.Gender == Gender.Female)
                                    {
                                        if (!bBacktoBase)
                                        {
                                            int iDell = RandInt(0, 4);
                                            if (iDell == 0)
                                                ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@female@variation_03@", "idle_a", PlayPos, Peddy.Rotation);
                                            else if (iDell == 1)
                                                ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@female@variation_03@", "idle_b", PlayPos, Peddy.Rotation);
                                            else if (iDell == 2)
                                                ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@female@variation_03@", "idle_c", PlayPos, Peddy.Rotation);
                                            else if (iDell == 2)
                                                ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@female@variation_03@", "idle_d", PlayPos, Peddy.Rotation);
                                            bBacktoBase = !bBacktoBase;
                                        }
                                        else
                                            ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@female@variation_03@", "base", PlayPos, Peddy.Rotation);
                                    }
                                    else
                                    {
                                        if (!bBacktoBase)
                                        {
                                            int iDell = RandInt(0, 4);
                                            if (iDell == 0)
                                                ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@male@variation_03@", "idle_a", PlayPos, Peddy.Rotation);
                                            else if (iDell == 1)
                                                ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@male@variation_03@", "idle_b", PlayPos, Peddy.Rotation);
                                            else if (iDell == 2)
                                                ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@male@variation_03@", "idle_c", PlayPos, Peddy.Rotation);
                                            else if (iDell == 2)
                                                ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@male@variation_03@", "idle_d", PlayPos, Peddy.Rotation);
                                            bBacktoBase = !bBacktoBase;
                                        }
                                        else
                                            ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@male@variation_03@", "base", PlayPos, Peddy.Rotation);
                                    }
                                }
                            }
                        }
                        else if (iJacuzSit == 3)
                        {
                            ControlerUI(sAltLang[317], 1);
                            if (Game.IsControlJustPressed(2, GTA.Control.Detonate))
                            {
                                if (Peddy.Gender == Gender.Female)
                                    YachtStuff_JackStand(3, false);
                                else
                                    YachtStuff_JackStand(3, true);
                            }
                            else
                            {
                                if (!Function.Call<bool>(Hash.GET_IS_TASK_ACTIVE, Peddy, 134))
                                {
                                    if (Peddy.Gender == Gender.Female)
                                    {
                                        if (!bBacktoBase)
                                        {
                                            int iDell = RandInt(0, 4);
                                            if (iDell == 0)
                                                ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@female@variation_01@", "idle_a", PlayPos, Peddy.Rotation);
                                            else if (iDell == 1)
                                                ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@female@variation_01@", "idle_b", PlayPos, Peddy.Rotation);
                                            else if (iDell == 2)
                                                ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@female@variation_01@", "idle_c", PlayPos, Peddy.Rotation);
                                            else if (iDell == 2)
                                                ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@female@variation_01@", "idle_d", PlayPos, Peddy.Rotation);
                                            bBacktoBase = !bBacktoBase;
                                        }
                                        else
                                            ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@female@variation_03@", "base", PlayPos, Peddy.Rotation);
                                    }
                                    else
                                    {
                                        if (!bBacktoBase)
                                        {
                                            int iDell = RandInt(0, 4);
                                            if (iDell == 0)
                                                ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@male@variation_01@", "idle_a", PlayPos, Peddy.Rotation);
                                            else if (iDell == 1)
                                                ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@male@variation_01@", "idle_b", PlayPos, Peddy.Rotation);
                                            else if (iDell == 2)
                                                ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@male@variation_01@", "idle_c", PlayPos, Peddy.Rotation);
                                            else if (iDell == 2)
                                                ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@male@variation_01@", "idle_d", PlayPos, Peddy.Rotation);
                                            bBacktoBase = !bBacktoBase;
                                        }
                                        else
                                            ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@male@variation_01@", "base", PlayPos, Peddy.Rotation);
                                    }
                                }
                            }
                        }
                        else if (iJacuzSit == 33)
                        {
                            ControlerUI(sAltLang[317], 1);
                            if (Game.IsControlJustPressed(2, GTA.Control.Detonate))
                            {
                                if (Peddy.Gender == Gender.Female)
                                    YachtStuff_JackStand(3, false);
                                else
                                    YachtStuff_JackStand(3, true);
                            }
                            else
                            {
                                if (!Function.Call<bool>(Hash.GET_IS_TASK_ACTIVE, Peddy, 134))
                                {
                                    if (Peddy.Gender == Gender.Female)
                                    {
                                        if (!bBacktoBase)
                                        {
                                            int iDell = RandInt(0, 4);
                                            if (iDell == 0)
                                                ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@female@variation_01@", "idle_a", PlayPos, Peddy.Rotation);
                                            else if (iDell == 1)
                                                ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@female@variation_01@", "idle_b", PlayPos, Peddy.Rotation);
                                            else if (iDell == 2)
                                                ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@female@variation_01@", "idle_c", PlayPos, Peddy.Rotation);
                                            else if (iDell == 2)
                                                ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@female@variation_01@", "idle_d", PlayPos, Peddy.Rotation);
                                            bBacktoBase = !bBacktoBase;
                                        }
                                        else
                                            ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@female@variation_03@", "base", PlayPos, Peddy.Rotation);
                                    }
                                    else
                                    {
                                        if (!bBacktoBase)
                                        {
                                            int iDell = RandInt(0, 4);
                                            if (iDell == 0)
                                                ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@male@variation_01@", "idle_a", PlayPos, Peddy.Rotation);
                                            else if (iDell == 1)
                                                ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@male@variation_01@", "idle_b", PlayPos, Peddy.Rotation);
                                            else if (iDell == 2)
                                                ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@male@variation_01@", "idle_c", PlayPos, Peddy.Rotation);
                                            else if (iDell == 2)
                                                ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@male@variation_01@", "idle_d", PlayPos, Peddy.Rotation);
                                            bBacktoBase = !bBacktoBase;
                                        }
                                        else
                                            ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@male@variation_01@", "base", PlayPos, Peddy.Rotation);
                                    }
                                }
                            }
                        }
                        else if (PlayPos.DistanceTo(vYachtTrigList[12]) < 1.00f)
                        {
                            if (iJacuzSit == 0)
                            {
                                ControlerUI(sAltLang[322], 1);
                                if (Game.IsControlJustPressed(2, GTA.Control.Detonate))
                                {
                                    iJacuzSit = 1;
                                    bBacktoBase = false;
                                    YachtStuff_JackSit(iJacuzSit, vYachtTrigList[12], null, -170.23f);
                                }
                            }
                        }
                        else if (PlayPos.DistanceTo(vYachtTrigList[13]) < 1.00f)
                        {
                            if (iJacuzSit == 0)
                            {
                                ControlerUI(sAltLang[322], 1);
                                if (Game.IsControlJustPressed(2, GTA.Control.Detonate))
                                {
                                    iJacuzSit = 1;
                                    bBacktoBase = false;
                                    YachtStuff_JackSit(iJacuzSit, vYachtTrigList[13], null, -46.56f);
                                }
                            }
                        }
                        else if (PlayPos.DistanceTo(vYachtTrigList[14]) < 1.00f)
                        {
                            if (iJacuzSit == 0)
                            {
                                ControlerUI(sAltLang[316], 1);
                                if (Game.IsControlJustPressed(2, GTA.Control.Detonate))
                                {
                                    iJacuzSit = 2;
                                    bBacktoBase = false;
                                    Vector3 vSit = YachtSit[1].Position - (YachtSit[1].ForwardVector * 1.00f);
                                    YachtStuff_JackSit(iJacuzSit, vSit, YachtSit[1], 95.17f);
                                }
                            }
                        }       //Ysit_1
                        else if (PlayPos.DistanceTo(vYachtTrigList[15]) < 1.00f)
                        {
                            if (iJacuzSit == 0)
                            {
                                ControlerUI(sAltLang[316], 1);
                                if (Game.IsControlJustPressed(2, GTA.Control.Detonate))
                                {
                                    iJacuzSit = 3;
                                    bBacktoBase = false;
                                    Vector3 vSit = YachtSit[3].Position - (YachtSit[3].ForwardVector * 1.00f);
                                    YachtStuff_JackSit(iJacuzSit, vSit, YachtSit[3], -5.24f);
                                }
                            }
                        }       //Ysit_3
                        else if (PlayPos.DistanceTo(vYachtTrigList[16]) < 1.00f)
                        {
                            if (iJacuzSit == 0)
                            {
                                ControlerUI(sAltLang[316], 1);
                                if (Game.IsControlJustPressed(2, GTA.Control.Detonate))
                                {
                                    iJacuzSit = 33;
                                    bBacktoBase = false;
                                    Vector3 vSit = YachtSit[2].Position - (YachtSit[2].ForwardVector * 1.00f);
                                    YachtStuff_JackSit(iJacuzSit, vSit, YachtSit[2], 49.75f);
                                }
                            }
                        }       //Ysit_2
                        else if (PlayPos.DistanceTo(vYachtTrigList[17]) < 1.00f)
                        {
                            if (iJacuzSit == 0)
                            {
                                ControlerUI(sAltLang[316], 1);
                                if (Game.IsControlJustPressed(2, GTA.Control.Detonate))
                                {
                                    iJacuzSit = 22;
                                    bBacktoBase = false;
                                    Vector3 vSit = YachtSit[0].Position - (YachtSit[0].ForwardVector * 1.00f);
                                    YachtStuff_JackSit(iJacuzSit, vSit, YachtSit[0], 136.23f);
                                }
                            }
                        }       //Ysit_0
                    }

                }           //Jacuzy
                else if (PlayPos.DistanceTo(vYachtTrigList[8]) < 1.00f || PlayPos.DistanceTo(vYachtTrigList[9]) < 1.00f || PlayPos.DistanceTo(vYachtTrigList[10]) < 1.00f)
                {
                    if (!bMenuOpen)
                    {
                        ControlerUI(sAltLang[319], 1);
                        if (Game.IsControlJustPressed(2, GTA.Control.Detonate))
                        {
                            Function.Call(Hash.DISPLAY_RADAR, false);
                            Game.Player.Character.FreezePosition = true;
                            Game.Player.Character.Heading = 45.00f;
                            LauchWardrobe();
                        }
                    }
                }           //Wardrobes
                else if (PlayPos.DistanceTo(vYachtTrigList[11]) < 1.00f)
                {
                    if (!bPianoSt)
                    {
                        ControlerUI(sAltLang[321], 1);
                        if (Game.IsControlJustPressed(2, GTA.Control.Detonate))
                        {
                            bPianoSt = true;
                            YachtStuff_Pianist(true);
                        }
                    }

                }           //Piano
                else if (PlayPos.DistanceTo(vYachtTrigList[19]) < 0.75f)
                {
                    if (PropList_01.Count > 0)
                    {
                        if (!bDrinks)
                        {
                            ControlerUI(sAltLang[324], 1);
                            if (Game.IsControlJustPressed(2, GTA.Control.Detonate))
                            {
                                Peddy.FreezePosition = true;
                                Peddy.HasCollision = false;
                                Npc_01.FreezePosition = true;
                                Npc_01.HasCollision = false;
                                bDrinks = true;
                                YachtStuff_YachtDrink();
                            }
                        }
                    }
                }           //BarDrink
                else if (PlayPos.DistanceTo(vYachtTrigList[20]) < 1.50f)
                {
                    ControlerUI(sAltLang[325], 1);
                    StickySubTitle(sAltLang[326] + "~y~" + sDestList[iYachtFast] + "~w~.");
                    if (Game.IsControlJustPressed(2, GTA.Control.Sprint))
                        YachtStuff_FastTravel(iYachtFast);
                    else if (Game.IsControlJustPressed(2, GTA.Control.Detonate))
                    {
                        if (iYachtFast > 0)
                            iYachtFast = iYachtFast - 1;
                        else
                            iYachtFast = 11;
                    }
                    else if (Game.IsControlJustPressed(2, GTA.Control.Context))
                    {
                        if (iYachtFast < 11)
                            iYachtFast = iYachtFast + 1;
                        else
                            iYachtFast = 0;
                    }
                }           //Telepost Capitan
                else
                {
                    if (bShowerON)
                    {
                        YachtStuff_ShowerOff();
                        bShowerON = false;
                    }
                    else if (bSwimSuit)
                    {
                        WardOutPut("DefaultOut.XML", Peddy);
                        bSwimSuit = false;
                        bWetness = false;
                    }
                    else
                    {
                        for (int i = 0; i < vYachtDoorList.Count; i++)
                        {
                            Vector3 ThisDoor = vYachtDoorList[i];
                            ThisDoor.Z = ThisDoor.Z - 1.00f;
                            World.DrawMarker(MarkerType.VerticalCylinder, ThisDoor, Vector3.Zero, Vector3.Zero, new Vector3(0.10f, 0.10f, 0.50f), Color.WhiteSmoke);
                            if (PlayPos.DistanceTo(ThisDoor) < 1.50f)
                            {
                                ControlerUI(sAltLang[314], 1);
                                if (Game.IsControlJustPressed(2, GTA.Control.Detonate))
                                {
                                    Game.FadeScreenOut(1000);
                                    iDoors = iDoors + 1;
                                    if (iDoors > RandInt(25, 50))
                                    {
                                        Fubar_Vectors(RandInt(1, 6), 0, true, false);
                                        int iRandomPicks = RandInt(0, VectorList_02.Count - 1);
                                        SlowFastTravel(VectorList_02[iRandomPicks], 0.00f);
                                        iDoors = 0;
                                    }
                                    else
                                    {
                                        int iDoor = RandInt(0, vYachtDoorList.Count - 1);
                                        while (iDoor == i)
                                        {
                                            iDoor = RandInt(0, vYachtDoorList.Count - 1);
                                            Script.Wait(100);
                                        }
                                        SlowFastTravel(vYachtDoorList[iDoor], fYachtDoorList[iDoor]);
                                    }
                                    WriteXmlSet();
                                    Script.Wait(1000);
                                    Game.FadeScreenIn(1000);
                                }
                            }
                        }
                    }
                }
            }

            bYachPass = false;

            if (bYachtParty)
            {
                if (iKeepDance < Game.GameTime)
                    YachtStuff_DancePedDance();
            }
        }
        private void YachtStuff_YachtProps()
        {
            Vector3 Vpos = new Vector3(-2095.017f, -1016.652f, 9.0689f);
            Vector3 Vrot = new Vector3(0.00f, 0.00f, 82.53f);
            BuildProp("prop_bottle_macbeth", Vpos, Vrot, false, false);

            Vpos = new Vector3(-2094.737f, -1016.39f, 9.0965f);
            Vrot = new Vector3(0.00f, 0.00f, 130.60f);
            BuildProp("prop_drink_whisky", Vpos, Vrot, false, false);

            Vpos = new Vector3(-2023.91577f, -1038.049f, 4.73967075f);
            Vrot = new Vector3(0.00f, 0.00f, -96.4467087f);
            BuildProp("apa_mp_apa_yacht_jacuzzi_ripple1", Vpos, Vrot, true, false);

            Vpos = new Vector3(-2050.051f, -1028.00f, 8.007f);
            Vrot = new Vector3(0.00f, 0.00f, -65.65f);
            BuildProp("v_res_fh_benchshort", Vpos, Vrot, true, false);

            Vpos = new Vector3(-2022.31128f, -1036.34998f, 4.70065117f);
            Vrot = new Vector3(0.00f, 0.00f, -43.7661629f);
            Prop pChair = BuildProp("bkr_prop_clubhouse_chair_03", Vpos, Vrot, true, false);
            YachtSit.Add(new Prop(pChair.Handle));
            pChair.IsVisible = false;

            Vpos = new Vector3(-2024.10022f, -1040.25232f, 4.7080965f);
            Vrot = new Vector3(0.00f, 0.00f, 174.759735f);
            pChair = BuildProp("bkr_prop_clubhouse_chair_03", Vpos, Vrot, true, false);
            YachtSit.Add(new Prop(pChair.Handle));
            pChair.IsVisible = false;

            Vpos = new Vector3(-2021.71082f, -1037.71057f, 4.70063496f);
            Vrot = new Vector3(0.00f, 0.00f, -84.8238678f);
            pChair = BuildProp("bkr_prop_clubhouse_chair_03", Vpos, Vrot, true, false);
            YachtSit.Add(new Prop(pChair.Handle));
            pChair.IsVisible = false;

            Vpos = new Vector3(-2022.29175f, -1039.49048f, 4.70464563f);
            Vrot = new Vector3(0.00f, 0.00f, -130.24353f);
            pChair = BuildProp("bkr_prop_clubhouse_chair_03", Vpos, Vrot, true, false);
            YachtSit.Add(new Prop(pChair.Handle));
            pChair.IsVisible = false;

            Vpos = new Vector3(-2071.655f, -1021.949f, 4.92f);
            Vrot = new Vector3(0.00f, 0.00f, -18.00f);
            pChair = BuildProp("bkr_prop_biker_campbed_01", Vpos, Vrot, true, false);
            YachtSleap.Add(new Prop(pChair.Handle));
            pChair.IsVisible = false;

            Vpos = new Vector3(-2089.50f, -1012.338f, 5.02f);
            Vrot = new Vector3(0.00f, 0.00f, 160.00f);
            pChair = BuildProp("bkr_prop_biker_campbed_01", Vpos, Vrot, true, false);
            YachtSleap.Add(new Prop(pChair.Handle));
            pChair.IsVisible = false;

            Vpos = new Vector3(-2097.328f, -1011.636f, 5.02f);
            Vrot = new Vector3(0.00f, 0.00f, 160.00f);
            pChair = BuildProp("bkr_prop_biker_campbed_01", Vpos, Vrot, true, false);
            YachtSleap.Add(new Prop(pChair.Handle));
            pChair.IsVisible = false;

            Vpos = new Vector3(-2075.263f, -1018.314f, 6.60f);
            Vrot = new Vector3(7.00f, 0.00f, 40.1383f);
            pChair = BuildProp("ch_prop_ch_camera_01", Vpos, Vrot, true, false);
            YachtSlCam.Add(new Prop(pChair.Handle));
            pChair.IsVisible = false;

            Vpos = new Vector3(-2085.863f, -1010.814f, 6.60f);
            Vrot = new Vector3(9.00f, 0.00f, -79.86f);
            pChair = BuildProp("ch_prop_ch_camera_01", Vpos, Vrot, true, false);

            YachtSlCam.Add(new Prop(pChair.Handle));
            pChair.IsVisible = false;

            Vpos = new Vector3(-2092.863f, -1010.814f, 6.60f);
            Vrot = new Vector3(7.00f, 0.00f, -81.86f);
            pChair = BuildProp("ch_prop_ch_camera_01", Vpos, Vrot, true, false);
            YachtSlCam.Add(new Prop(pChair.Handle));
            pChair.IsVisible = false;
        }
        private void YachtStuff_YachtOwnerShip()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("YachtStuff_YachtOwnerShip", tEx);

            YachtStuff_TheBlip(false);

            Vector3 Vpos = new Vector3(-2095.131f, -1016.018f, 9.0805f);
            float fHead = -139.3908f;
            NPCSpawn("mp_f_boatstaff_01", Vpos, fHead, 65, 180, 0, 41, 0, null, 0, false, false, 1, 0);

            Vpos = new Vector3(-2085.108f, -1017.974f, 12.7819f);
            NPCSpawn("mp_m_boatstaff_01", Vpos, fHead, 65, 180, 0, 42, 0, null, 0, false, false, 2, 0);

            Vpos = new Vector3(-2022.369f, -1048.594f, 0.00f);
            fHead = 84.67f;
            VehicleSpawn("DINGHY4", Vpos, fHead, false, false, false, false, 9, 0, 0, 0, false);

            Vpos = new Vector3(-2016.061f, -1029.461f, 0.00f);
            fHead = 58.67f;
            VehicleSpawn("TORO2", Vpos, fHead, false, false, false, false, 9, 0, 0, 0, false);

            Vpos = new Vector3(-2012.37549f, -1034.19446f, 0.00f);
            fHead = -59.9995079f;
            VehicleSpawn("SEASHARK3", Vpos, fHead, false, false, false, false, 9, 0, 0, 0, false);

            Vpos = new Vector3(-2016.42212f, -1047.59546f, 0.00f);
            fHead = -135.900574f;
            VehicleSpawn("SEASHARK3", Vpos, fHead, false, false, false, false, 9, 0, 0, 0, false);

            Vpos = new Vector3(-2043.76f, -1031.577f, 11.66f);
            fHead = 71.4947052f;
            VehicleSpawn("SUPERVOLITO", Vpos, fHead, false, false, false, false, 0, 0, 0, 0, false);

            YachtStuff_YachtProps();
        }
        private void YachtStuff_FastTravel(int iDesin)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("YachtStuff_FastTravel, iDesin == " + iDesin, tEx);

            VectorList_01.Clear();
            float fHeads = 0.00f;
            Game.FadeScreenOut(500);
            Script.Wait(500);
            if (iDesin == 0)
            {
                VectorList_01.Add(new Vector3(-499.3371f, 6916.317f, 0.3944707f));//BoatSpawn
                VectorList_01.Add(new Vector3(-130.3926f, 6721.384f, 0.1196628f));//BoatDes
                VectorList_01.Add(new Vector3(-88.1898f, 6707.3398f, 1.1492f));//Phonebox
                VectorList_01.Add(new Vector3(0.00f, 0.00f, -143.4888f));//Phone Rota
                fHeads = 270.6326f;
            }           // 0 Paleto Bay");
            else if (iDesin == 1)
            {
                VectorList_01.Add(new Vector3(-1594.42f, 5429.262f, 1.06f));
                VectorList_01.Add(new Vector3(-1602.861f, 5267.00f, 0.20f));
                VectorList_01.Add(new Vector3(-1612.628f, 5262.2293f, 2.8357f));
                VectorList_01.Add(new Vector3(0.00f, 0.00f, 24.3751f));
                fHeads = 190.5146f;
            }           // 1 North Chumash");
            else if (iDesin == 2)
            {
                VectorList_01.Add(new Vector3(-3412.128f, 2566.43f, 2.06f));
                VectorList_01.Add(new Vector3(-2092.328f, 2606.613f, 0.12f));
                VectorList_01.Add(new Vector3(-2081.86f, 2616.8691f, 1.9556f));
                VectorList_01.Add(new Vector3(0.00f, 0.00f, -69.4728f));
                fHeads = 262.0154f;
            }           // 2 Lago Zancuda");
            else if (iDesin == 3)
            {
                VectorList_01.Add(new Vector3(-3628.237f, 538.8174f, 0.199f));
                VectorList_01.Add(new Vector3(-3425.647f, 945.775f, 0.69f));
                VectorList_01.Add(new Vector3(-3424.023f, 955.5846f, 7.0283f));
                VectorList_01.Add(new Vector3(0.00f, 0.00f, -0.0394f));
                fHeads = 337.3226f;
            }           // 3 Chumash");
            else if (iDesin == 4)
            {
                VectorList_01.Add(new Vector3(-2900.015f, -569.5109f, 0.185f));
                VectorList_01.Add(new Vector3(-3049.102f, -4.854892f, 0.722f));
                VectorList_01.Add(new Vector3(-3038.71f, 22.5648f, 5.7096f));
                VectorList_01.Add(new Vector3(0.00f, 0.00f, -25.905f));
                fHeads = 20.24796f;
            }           // 4 Pacific Bluffs");
            else if (iDesin == 5)
            {
                VectorList_01.Add(new Vector3(-222.6438f, -3752.753f, 0.0314f));
                VectorList_01.Add(new Vector3(66.860f, -2769.287f, 1.44f));
                VectorList_01.Add(new Vector3(62.7995f, -2759.156f, 4.9212f));
                VectorList_01.Add(new Vector3(0.00f, 0.00f, -90.1372f));
                fHeads = 1.71135f;
            }           // 5 Elysian Island");
            else if (iDesin == 6)
            {
                VectorList_01.Add(new Vector3(1738.537f, -3129.696f, 0.83f));
                VectorList_01.Add(new Vector3(895.8905f, -2644.206f, -1.014f));
                VectorList_01.Add(new Vector3(893.1291f, -2629.654f, 1.959f));
                VectorList_01.Add(new Vector3(0.00f, 0.00f, -16.5193f));
                fHeads = 52.103f;
            }           // 6 Terminal");
            else if (iDesin == 7)
            {
                VectorList_01.Add(new Vector3(3413.212f, -1098.86f, 0.719f));
                VectorList_01.Add(new Vector3(2852.93f, -727.5198f, 0.426f));
                VectorList_01.Add(new Vector3(2818.7285f, -741.573f, 1.1738f));
                VectorList_01.Add(new Vector3(0.3663f, 0.341f, 81.4615f));
                fHeads = 51.97708f;
            }           // 7 Palomino");
            else if (iDesin == 8)
            {
                VectorList_01.Add(new Vector3(3624.943f, 1232.093f, 0.169f));
                VectorList_01.Add(new Vector3(2899.158f, 1779.543f, 0.442f));
                VectorList_01.Add(new Vector3(2878.2939f, 1787.7893f, 3.00f));
                VectorList_01.Add(new Vector3(0.00f, 0.00f, -1.4055f));
                fHeads = 54.0335f;
            }           // 8 Palmer-Taylor");
            else if (iDesin == 9)
            {
                VectorList_01.Add(new Vector3(4480.12f, 4358.129f, 0.26f));
                VectorList_01.Add(new Vector3(3846.771f, 4451.328f, 0.164f));
                VectorList_01.Add(new Vector3(3829.1572f, 4465.0527f, 1.6065f));
                VectorList_01.Add(new Vector3(0.00f, 0.00f, 0.6556f));
                fHeads = 0.00f;
            }           // 9 San Chianski");
            else if (iDesin == 10)
            {
                VectorList_01.Add(new Vector3(3714.063f, 5297.999f, 0.142f));
                VectorList_01.Add(new Vector3(3418.38f, 5188.487f, 0.833f));
                VectorList_01.Add(new Vector3(3429.895f, 5178.62f, 6.282f));
                VectorList_01.Add(new Vector3(0.00f, 0.00f, -163.3262f));
                fHeads = 107.8634f;
            }           // 10 El Gordo");
            else
            {
                VectorList_01.Add(new Vector3(1529.896f, 7233.025f, 1.667f));
                VectorList_01.Add(new Vector3(1504.303f, 6647.771f, 0.413f));
                VectorList_01.Add(new Vector3(1521.023f, 6632.814f, 1.4227f));
                VectorList_01.Add(new Vector3(0.00f, 0.00f, 0.00f));
                fHeads = 172.111f;
            }           // 11 Procopio Beach");
            BuildProp("prop_phonebox_04", VectorList_01[2], VectorList_01[3], true, true);

            VehicleSpawn("DINGHY", VectorList_01[0], fHeads, true, false, false, false, 25, 0, 0, 1, false);
        }
        private void YachtStuff_BoatToShore()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("YachtStuff_BoatToShore", tEx);

            WarptoAnyVeh(VehTrackin_01, Game.Player.Character, 2, false);
            while (Game.Player.Character.IsInVehicle(VehTrackin_01))
                Script.Wait(500);
            YachtStuff_YachtRmovals();
        }
        private void YachtStuff_YachtScuba(int iped)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("YachtStuff_YachtScuba, iped == " + iped, tEx);

            Ped Peddy = Game.Player.Character;
            if (iped == 1)
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 0, 0, 0, 2);     //0 Head
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 1, 0, 0, 2);     //1 mask
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 2, -1, 0, 2);    //2 hair
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 3, 3, 0, 2);     //3 Torso
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 4, 3, 0, 2);     //4 Legs
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 5, 4, 0, 2);     //5 Hands
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 6, 2, 0, 2);     //6 shoes
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 7, 0, 0, 2);     //7 Scarf
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 8, 8, 0, 2);     //8 AccTop
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 9, 4, 0, 2);     //9 Armor
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 10, 0, 0, 2);    //10 Emb--not used
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 11, 0, 0, 2);    //11 Top2
                Function.Call(Hash.CLEAR_PED_PROP, Peddy, 0);    //0 Helmets, hats, earphones, masks
                Function.Call(Hash.CLEAR_PED_PROP, Peddy, 1);    //1 Glasses
                Function.Call(Hash.CLEAR_PED_PROP, Peddy, 2);    //2 Ear accessories
                Function.Call(Hash.CLEAR_PED_PROP, Peddy, 3);    //3 Bangles
                Function.Call(Hash.CLEAR_PED_PROP, Peddy, 4);    //4 Watch
            }       //Franklin
            else if (iped == 2)
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 0, 0, 0, 2);     //0 Head
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 1, 0, 0, 2);     //1 mask
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 2, -1, 0, 2);    //2 hair
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 3, 3, 0, 2);     //3 Torso
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 4, 3, 0, 2);     //4 Legs
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 5, 6, 0, 2);     //5 Hands
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 6, 3, 0, 2);     //6 shoes
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 7, 0, 0, 2);     //7 Scarf
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 8, 21, 0, 2);    //8 AccTop
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 9, 7, 0, 2);     //9 Armor
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 10, 0, 0, 2);    //10 Emb--not used
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 11, 0, 0, 2);    //11 Top2
                Function.Call(Hash.CLEAR_PED_PROP, Peddy, 0);    //0 Helmets, hats, earphones, masks
                Function.Call(Hash.CLEAR_PED_PROP, Peddy, 1);    //1 Glasses
                Function.Call(Hash.CLEAR_PED_PROP, Peddy, 2);    //2 Ear accessories
                Function.Call(Hash.CLEAR_PED_PROP, Peddy, 3);    //3 Bangles
                Function.Call(Hash.CLEAR_PED_PROP, Peddy, 4);    //4 Watch
            }       //Michael
            else if (iped == 3)
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 0, 0, 0, 2);     //0 Head
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 1, 0, 0, 2);     //1 mask
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 2, -1, 0, 2);    //2 hair
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 3, 6, 0, 2);     //3 Torso
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 4, 6, 0, 2);     //4 Legs
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 5, 3, 0, 2);     //5 Hands
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 6, 2, 0, 2);     //6 shoes
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 7, 0, 0, 2);     //7 Scarf
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 8, 15, 0, 2);    //8 AccTop
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 9, -1, 0, 2);    //9 Armor
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 10, 0, 0, 2);    //10 Emb--not used
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 11, -1, 0, 2);   //11 Top2
                Function.Call(Hash.CLEAR_PED_PROP, Peddy, 0);    //0 Helmets, hats, earphones, masks
                Function.Call(Hash.CLEAR_PED_PROP, Peddy, 1);    //1 Glasses
                Function.Call(Hash.CLEAR_PED_PROP, Peddy, 2);    //2 Ear accessories
                Function.Call(Hash.CLEAR_PED_PROP, Peddy, 3);    //3 Bangles
                Function.Call(Hash.CLEAR_PED_PROP, Peddy, 4);    //4 Watch
            }       //Trevor
            else if (iped == 4)
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 0, 0, 0, 2);     //0 Head
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 1, 122, 0, 2);     //1 mask
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 2, -1, 0, 2);    //2 hair
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 3, 169, 10, 2);     //3 Torso
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 4, 97, 11, 2);     //4 Legs
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 5, 0, 0, 2);     //5 Hands
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 6, 70, 5, 2);     //6 shoes
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 7, 0, 0, 2);     //7 Scarf
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 8, 187, 1, 2);     //8 AccTop
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 9, 0, 0, 2);     //9 Armor
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 10, 0, 0, 2);    //10 Emb--not used
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 11, 251, 11, 2);    //11 Top2
                Function.Call(Hash.CLEAR_PED_PROP, Peddy, 0);    //0 Helmets, hats, earphones, masks
                Function.Call(Hash.CLEAR_PED_PROP, Peddy, 1);    //1 Glasses
                Function.Call(Hash.CLEAR_PED_PROP, Peddy, 2);    //2 Ear accessories
                Function.Call(Hash.CLEAR_PED_PROP, Peddy, 3);    //3 Bangles
                Function.Call(Hash.CLEAR_PED_PROP, Peddy, 4);    //4 Watch
            }       //MpFemale--not done
            else if (iped == 5)
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 0, 0, 0, 2);     //0 Head
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 1, 122, 0, 2);     //1 mask
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 2, -1, 0, 2);    //2 hair
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 3, 138, 10, 2);     //3 Torso
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 4, 94, 4, 2);     //4 Legs
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 5, 0, 0, 2);     //5 Hands
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 6, 67, 11, 2);     //6 shoes
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 7, 0, 0, 2);     //7 Scarf
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 8, 151, 1, 2);     //8 AccTop
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 9, 0, 0, 2);     //9 Armor
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 10, 0, 0, 2);    //10 Emb--not used
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 11, 243, 11, 2);    //11 Top2
                Function.Call(Hash.CLEAR_PED_PROP, Peddy, 0);    //0 Helmets, hats, earphones, masks
                Function.Call(Hash.CLEAR_PED_PROP, Peddy, 1);    //1 Glasses
                Function.Call(Hash.CLEAR_PED_PROP, Peddy, 2);    //2 Ear accessories
                Function.Call(Hash.CLEAR_PED_PROP, Peddy, 3);    //3 Bangles
                Function.Call(Hash.CLEAR_PED_PROP, Peddy, 4);    //4 Watch
            }       //MpMale
            else
            {

            }
            bScubaGOn = true;
        }
        private void YachtStuff_YachtSwim(int iped)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("YachtStuff_YachtSwim, iped == " + iped, tEx);

            Ped Peddy = Game.Player.Character;
            if (iped == 1)
            {
                if (File.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Outfit/Franklin_Swim.xml"))
                    WardOutPut("Franklin_Swim.xml", Peddy);
                else
                {
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 3, 26, 0, 2);     //3 Torso
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 4, 18, 0, 2);     //4 Legs
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 5, 0, 0, 2);     //5 Hands
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 6, 15, 0, 2);     //6 shoes
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 7, 0, 0, 2);     //7 Scarf
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 8, 0, 0, 2);     //8 AccTop
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 9, 0, 0, 2);     //9 Armor
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 11, 0, 0, 2);    //11 Top2
                }
            }       //Franklin
            else if (iped == 2)
            {
                if (File.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Outfit/Michael_Swim.xml"))
                    WardOutPut("Michael_Swim.xml", Peddy);
                else
                {
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 3, 26, 0, 2);     //3 Torso
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 4, 18, 4, 2);     //4 Legs
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 5, 0, 0, 2);     //5 Hands
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 6, 1, 0, 2);     //6 shoes
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 7, 0, 0, 2);     //7 Scarf
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 8, 0, 0, 2);     //8 AccTop
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 9, 0, 0, 2);     //9 Armor
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 11, 0, 0, 2);    //11 Top2
                }
            }       //Michael
            else if (iped == 3)
            {
                if (File.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Outfit/Trevor_Swim.xml"))
                    WardOutPut("Trevor_Swim.xml", Peddy);
                else
                {
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 3, 16, 0, 2);     //3 Torso
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 4, 26, 0, 2);     //4 Legs
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 5, 0, 0, 2);     //5 Hands
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 6, -1, 0, 2);     //6 shoes
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 7, 0, 0, 2);     //7 Scarf
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 8, 0, 0, 2);     //8 AccTop
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 9, 0, 0, 2);     //9 Armor
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 11, 0, 0, 2);    //11 Top2
                }
            }       //Trevor
            else if (iped == 4)
            {
                if (File.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Outfit/FreeFemale_Swim.xml"))
                    WardOutPut("FreeFemale_Swim.xml", Peddy);
                else
                {
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 3, 15, 0, 2);     //3 Torso
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 4, 17, 9, 2);     //4 Legs
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 5, 0, 0, 2);     //5 Hands
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 6, 16, 3, 2);     //6 shoes
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 7, 0, 0, 2);     //7 Scarf
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 8, -1, 0, 2);     //8 AccTop
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 9, 0, 0, 2);     //9 Armor
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 10, 0, 0, 2);    //10 Emb--not used
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 11, 18, 11, 2);    //11 Top2
                }
            }       //MpFemale
            else if (iped == 5)
            {
                if (File.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Outfit/FreeMale_Swim.xml"))
                    WardOutPut("FreeMale_Swim.xml", Peddy);
                else
                {
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 3, 15, 0, 2);     //3 Torso
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 4, 18, 8, 2);     //4 Legs
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 5, 0, 0, 2);     //5 Hands
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 6, 5, 3, 2);     //6 shoes
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 7, 0, 0, 2);     //7 Scarf
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 8, -1, 0, 2);     //8 AccTop
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 9, 0, 0, 2);     //9 Armor
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 10, 0, 0, 2);    //10 Emb--not used
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 11, -1, 0, 2);    //11 Top2
                }
            }       //MpMale
            else
            {

            }

            Peddy.ClearBloodDamage();
        }
        private void YachtStuff_ShowerOff()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("YachtStuff_ShowerOff", tEx);

            for (int i = 0; i < iList_01.Count; i++)
                Function.Call(Hash.STOP_PARTICLE_FX_LOOPED, iList_01[i], true);

            iList_01.Clear();
        }
        private void YachtStuff_YachtDrink()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("YachtStuff_YachtDrink", tEx);

            VectorList_01.Clear();
            fList_01.Clear();

            Prop Glass = PropList_01[1];
            Prop Bottle = PropList_01[0];

            Function.Call(Hash.DISPLAY_RADAR, false);

            Npc_01.Task.ClearAllImmediately();
            Game.Player.Character.Task.ClearAllImmediately();

            Glass.HasCollision = false;
            Bottle.HasCollision = false;

            Function.Call(Hash.ATTACH_ENTITY_TO_ENTITY, Glass.Handle, Npc_01.Handle, 42, 0.00f, 0.00f, 0.00f, 0.00f, 0.00f, 0.00f, false, false, true, false, 2, true);
            Function.Call(Hash.ATTACH_ENTITY_TO_ENTITY, Bottle.Handle, Npc_01.Handle, 66, 0.00f, 0.00f, -0.10f, 0.00f, 0.00f, 0.00f, false, false, true, false, 2, true);

            Vector3 VMaidP = vYachtTrigList[18];
            Vector3 VMaidR = new Vector3(0.00f, 0.00f, 220.00f);

            Vector3 VPEddP = vYachtTrigList[19];
            Vector3 VPEddR = new Vector3(0.00f, 0.00f, 40.00f);

            if (iYachtDrink == 0)
            {
                Vector3 Campo = new Vector3(-2097.152f, -1019.854f, 9.7706f);
                Vector3 Camro = new Vector3(0.00f, 0.00f, 311.713f);
                cCams = World.CreateCamera(Campo, Camro, 50.00f);
                Function.Call(Hash.RENDER_SCRIPT_CAMS, 1, 1, cCams.Handle, 0, 0);

                ForceAnimOnce(Npc_01, "anim@mini@yacht@bar@drink@one", "one_bartender", VMaidP, VMaidR);
                ForceAnimOnce(Game.Player.Character, "anim@mini@yacht@bar@drink@one", "one_player", VPEddP, VPEddR);

                Script.Wait(1000);
                while (Function.Call<bool>(Hash.GET_IS_TASK_ACTIVE, Npc_01, 134))
                    Script.Wait(100);

                Game.Player.Character.Task.ClearAllImmediately();
                ForceAnim(Npc_01, "anim@mini@yacht@bar@drink@idle_a", "idle_a", Npc_01.Position, Npc_01.Rotation);
                Glass.HasCollision = true;
                Bottle.HasCollision = true;
                Glass.Detach();
                Bottle.Detach();
                Bottle.Position = new Vector3(-2095.017f, -1016.652f, 9.0689f);
                Glass.Position = new Vector3(-2094.737f, -1016.39f, 9.0965f);
                Game.Player.Character.FreezePosition = false;
                Game.Player.Character.HasCollision = true;
                CleanCams();
                Npc_01.FreezePosition = false;
                Npc_01.HasCollision = true;
                if (!bYachtParty)
                    YachtStuff_YachtParty();
                iYachtDrink += 1;
                bDrinks = false;

                Script.Wait(2000);
                YachtStuff_DancePedDance();
            }
            else if (iYachtDrink == 1)
            {
                Vector3 Campo = new Vector3(-2085.524f, -1012.565f, 9.7706f);
                Vector3 Camro = new Vector3(0.00f, 0.00f, 106.5425f);
                cCams = World.CreateCamera(Campo, Camro, 50.00f);
                Function.Call(Hash.RENDER_SCRIPT_CAMS, 1, 1, cCams.Handle, 0, 0);

                ForceAnimOnce(Npc_01, "anim@mini@yacht@bar@drink@two", "two_bartender", VMaidP, VMaidR);
                ForceAnimOnce(Game.Player.Character, "anim@mini@yacht@bar@drink@two", "two_player", VPEddP, VPEddR);

                Script.Wait(1000);
                while (Function.Call<bool>(Hash.GET_IS_TASK_ACTIVE, Npc_01, 134))
                    Script.Wait(100);

                Game.Player.Character.Task.ClearAllImmediately();
                ForceAnim(Npc_01, "anim@mini@yacht@bar@drink@idle_a", "idle_a", Npc_01.Position, Npc_01.Rotation);
                Glass.HasCollision = true;
                Bottle.HasCollision = true;
                Glass.Detach();
                Bottle.Detach();
                Bottle.Position = new Vector3(-2095.017f, -1016.652f, 9.0689f);
                Glass.Position = new Vector3(-2094.737f, -1016.39f, 9.0965f);
                CleanCams();
                Game.Player.Character.FreezePosition = false;
                Game.Player.Character.HasCollision = true;
                Npc_01.FreezePosition = false;
                Npc_01.HasCollision = true;
                bDrinkig = true;
                Function.Call(Hash.SET_TIMECYCLE_MODIFIER, "Drunk");
                DrunkMoves();

                iYachtDrink += 1;
                bDrinks = false;
            }
            else
            {
                Vector3 Campo = new Vector3(-2088.358f, -1021.988f, 9.7706f);
                Vector3 Camro = new Vector3(0.00f, 0.00f, 40.24986f);
                cCams = World.CreateCamera(Campo, Camro, 50.00f);
                Function.Call(Hash.RENDER_SCRIPT_CAMS, 1, 1, cCams.Handle, 0, 0);

                ForceAnimOnce(Npc_01, "anim@mini@yacht@bar@drink@three", "three_bartender", VMaidP, VMaidR);
                ForceAnimOnce(Game.Player.Character, "anim@mini@yacht@bar@drink@three", "three_player", VPEddP, VPEddR);

                Script.Wait(1000);
                while (Function.Call<bool>(Hash.GET_IS_TASK_ACTIVE, Npc_01, 134))
                    Script.Wait(100);
                Game.FadeScreenOut(1000);
                Script.Wait(1000);

                Game.Player.Character.Task.ClearAllImmediately();
                ForceAnim(Npc_01, "anim@mini@yacht@bar@drink@idle_a", "idle_a", Npc_01.Position, Npc_01.Rotation);
                Glass.HasCollision = true;
                Bottle.HasCollision = true;
                Glass.Detach();
                Bottle.Detach();
                Bottle.Position = new Vector3(-2095.017f, -1016.652f, 9.0689f);
                Glass.Position = new Vector3(-2094.737f, -1016.39f, 9.0965f);
                CleanCams();
                Game.Player.Character.FreezePosition = false;
                Game.Player.Character.HasCollision = true;
                Npc_01.FreezePosition = false;
                Npc_01.HasCollision = true;

                if (RandBool(10))
                {
                    VectorList_01.Add(new Vector3(-1612.182f, -1090.286f, 13.01287f)); fList_01.Add(228.086f);
                    VectorList_01.Add(new Vector3(-469.543f, -293.4074f, 42.21681f)); fList_01.Add(19.75726f);
                    VectorList_01.Add(new Vector3(-117.917f, -443.1541f, 35.90757f)); fList_01.Add(201.0832f);
                    VectorList_01.Add(new Vector3(-181.4628f, -630.9092f, 48.96748f)); fList_01.Add(64.58707f);
                    VectorList_01.Add(new Vector3(222.1761f, -959.4706f, 29.27803f)); fList_01.Add(323.3547f);
                    VectorList_01.Add(new Vector3(-385.0554f, -1887.786f, 29.94583f)); fList_01.Add(210.4333f);
                    VectorList_01.Add(new Vector3(-1201.949f, -1794.424f, 3.90786f)); fList_01.Add(49.55961f);
                    VectorList_01.Add(new Vector3(-471.416f, 1105.912f, 327.1167f)); fList_01.Add(103.245f);
                    VectorList_01.Add(new Vector3(-683.8403f, 5841.721f, 17.27512f)); fList_01.Add(39.61398f);
                    VectorList_01.Add(new Vector3(-1861.247f, 2071.181f, 140.9823f)); fList_01.Add(19.14237f);
                    VectorList_01.Add(new Vector3(-1248.798f, -158.9396f, 40.40816f)); fList_01.Add(153.0433f);
                    VectorList_01.Add(new Vector3(-604.6938f, 112.1578f, 68.13498f)); fList_01.Add(227.9515f);
                    VectorList_01.Add(new Vector3(209.702f, 47.96529f, 83.81937f)); fList_01.Add(247.4784f);
                    VectorList_01.Add(new Vector3(1007.89f, 139.731f, 84.9901f)); fList_01.Add(206.5416f);

                    int iPosy = FindRandom(31, 0, VectorList_01.Count - 1);
                    Vector3 Vspot = VectorList_01[iPosy];
                    Vector3 VRota = new Vector3(0.00f, 0.00f, fList_01[iPosy]);
                    Game.Player.Character.Position = Vspot;

                    ForceAnim(Game.Player.Character, "switch@trevor@puking_into_fountain", "trev_fountain_puke_loop", Vspot, VRota);
                    Script.Wait(1000);
                    Game.FadeScreenIn(2000);
                    while (Game.IsScreenFadingIn)
                        Script.Wait(100);
                    Script.Wait(2000);
                    ForceAnimOnce(Game.Player.Character, "switch@trevor@puking_into_fountain", "trev_fountain_puke_exit", Vspot, VRota);
                }
                else
                {
                    VectorList_01.Add(new Vector3(-1474.212f, 163.0681f, 55.76753f)); fList_01.Add(203.1384f);
                    VectorList_01.Add(new Vector3(683.9828f, 579.5739f, 130.4613f)); fList_01.Add(260.3782f);
                    VectorList_01.Add(new Vector3(455.0457f, 5572.154f, 781.1837f)); fList_01.Add(189.677f);
                    VectorList_01.Add(new Vector3(-1890.564f, 2085.58f, 140.9958f)); fList_01.Add(182.6543f);
                    VectorList_01.Add(new Vector3(-2182.649f, 238.1252f, 184.6018f)); fList_01.Add(110.7141f);
                    VectorList_01.Add(new Vector3(-3418.307f, 953.5591f, 8.346685f)); fList_01.Add(281.9393f);

                    int iPosy = FindRandom(32, 0, VectorList_01.Count - 1);
                    Vector3 Vspot = VectorList_01[iPosy];
                    Vector3 VRota = new Vector3(0.00f, 0.00f, fList_01[iPosy]);
                    Game.Player.Character.Position = Vspot;

                    ForceAnimOnce(Game.Player.Character, "missfam5_blackout", "pass_out", Vspot, VRota);
                    Game.FadeScreenIn(1000);
                    Script.Wait(1000);
                    while (Function.Call<bool>(Hash.GET_IS_TASK_ACTIVE, Game.Player.Character, 134))
                        Script.Wait(1);
                    ForceAnimOnce(Game.Player.Character, "missfam5_blackout", "vomit", Game.Player.Character.Position, Game.Player.Character.Rotation);
                    Script.Wait(1000);
                }

                while (Function.Call<bool>(Hash.GET_IS_TASK_ACTIVE, Game.Player.Character, 134))
                    Script.Wait(100);
                Game.Player.Character.Task.ClearAllImmediately();
                TimeCycFade();

                iYachtDrink += 1;
                bDrinks = false;
            }
        }
        private void YachtStuff_Pianist(bool bOn)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("YachtStuff_Pianist, bOn == " + bOn, tEx);

            if (bOn)
            {
                Game.Player.Character.FreezePosition = true;
                Game.Player.Character.HasCollision = false;
                Vector3 Vpos = new Vector3(-2049.95f, -1028.088f, 8.9625f);
                Vector3 Vrot = new Vector3(0.00f, 0.00f, -47.0688f);
                Game.Player.Character.Position = Vpos;
                Game.Player.Character.Rotation = Vrot;
                ForceAnim(Game.Player.Character, "mp_safehousevagos@boss", "vagos_boss_keyboard_base", Vpos, Vrot);
                Script.Wait(500);
                DipDar.PlayLooping();
            }
            else
            {
                DipDar.Stop();
                Game.Player.Character.Task.ClearAnimation("mp_safehousevagos@boss", "vagos_boss_keyboard_base");
                Game.Player.Character.FreezePosition = false;
                Game.Player.Character.HasCollision = true;
            }
        }
        private void YachtStuff_JackStand(int iStandard, bool bMale)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("YachtStuff_JackStand, iStandard == " + iStandard + ", bMale == " + bMale, tEx);

            Ped Peddy = Game.Player.Character;
            Vector3 Vpos = Peddy.Position + (Peddy.ForwardVector * 0.30f);
            Vector3 Vrot = Peddy.Rotation;
            Peddy.Detach();
            if (iStandard == 1)
            {
                if (bMale)
                {
                    ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@standing@male@variation_01@", "exit", Peddy.Position, Vrot);
                    Script.Wait(100);
                    while (Function.Call<bool>(Hash.GET_IS_TASK_ACTIVE, Peddy, 134))
                        Script.Wait(100);
                    iJacuzSit = 0;
                    Peddy.Task.ClearAllImmediately();
                }
                else
                {
                    ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@standing@female@variation_01@", "exit", Peddy.Position, Vrot);
                    Script.Wait(100);
                    while (Function.Call<bool>(Hash.GET_IS_TASK_ACTIVE, Peddy, 134))
                        Script.Wait(100);
                    iJacuzSit = 0;
                    Peddy.Task.ClearAllImmediately();
                }
            }
            else if (iStandard == 2)
            {
                if (bMale)
                {
                    ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@male@variation_03@", "exit", Vpos, Vrot);
                    Script.Wait(100);
                    while (Function.Call<bool>(Hash.GET_IS_TASK_ACTIVE, Peddy, 134))
                        Script.Wait(100);
                    iJacuzSit = 0;
                    Peddy.Task.ClearAllImmediately();
                }
                else
                {
                    ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@female@variation_03@", "exit", Vpos, Vrot);
                    Script.Wait(100);
                    while (Function.Call<bool>(Hash.GET_IS_TASK_ACTIVE, Peddy, 134))
                        Script.Wait(100);
                    iJacuzSit = 0;
                    Peddy.Task.ClearAllImmediately();
                }
            }
            else if (iStandard == 3)
            {
                if (bMale)
                {
                    ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@male@variation_01@", "exit", Vpos, Vrot);
                    Script.Wait(100);
                    while (Function.Call<bool>(Hash.GET_IS_TASK_ACTIVE, Peddy, 134))
                        Script.Wait(100);
                    iJacuzSit = 0;
                    Peddy.Task.ClearAllImmediately();
                }
                else
                {
                    ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@female@variation_01@", "exit", Vpos, Vrot);
                    Script.Wait(100);
                    while (Function.Call<bool>(Hash.GET_IS_TASK_ACTIVE, Peddy, 134))
                        Script.Wait(100);
                    iJacuzSit = 0;
                    Peddy.Task.ClearAllImmediately();
                }
            }
        }
        private void YachtStuff_JackSit(int iPose, Vector3 vInSitU, Prop pChair, float fAngle)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("YachtStuff_JackSit, iPose == " + iPose, tEx);

            Ped Peddy = Game.Player.Character;
            Vector3 TheCenter = new Vector3(-2023.765f, -1038.013f, 6.70f);
            Peddy.Task.GoTo(vInSitU, true, 1000);
            Script.Wait(1000);
            Function.Call(Hash.TASK_TURN_PED_TO_FACE_COORD, Peddy.Handle, TheCenter.X, TheCenter.Y, TheCenter.Z, 1000);
            Script.Wait(1000);
            Vector3 Vpos = Peddy.Position;
            Vector3 Vrot = new Vector3(0.00f, 0.00f, fAngle);

            if (Peddy.Gender == Gender.Male)
            {
                if (iPose == 1)
                {
                    ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@standing@male@variation_01@", "enter", Vpos, Vrot);
                    Script.Wait(100);
                    while (Function.Call<bool>(Hash.GET_IS_TASK_ACTIVE, Peddy, 134))
                        Script.Wait(100);
                    ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@standing@male@variation_01@", "base", Vpos, Vrot);
                    Script.Wait(100);
                }       //Stand
                else if (iPose == 2 || iPose == 22)
                {
                    if (pChair != null)
                        Game.Player.Character.AttachTo(pChair, 0, new Vector3(0.00f, 0.00f, 0.50f), new Vector3(0.00f, 0.00f, -180.00f));
                    ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@male@variation_03@", "enter", Vpos, Vrot);
                    Script.Wait(100);
                    while (Function.Call<bool>(Hash.GET_IS_TASK_ACTIVE, Peddy, 134))
                        Script.Wait(100);
                    ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@male@variation_03@", "base", Vpos, Vrot);
                    Script.Wait(100);
                }       //Sitouter
                else if (iPose == 3 || iPose == 33)
                {
                    if (pChair != null)
                        Game.Player.Character.AttachTo(pChair, 0, new Vector3(0.00f, 0.00f, 0.50f), new Vector3(0.00f, 0.00f, -180.00f));
                    ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@male@variation_01@", "enter", Vpos, Vrot);
                    Script.Wait(100);
                    while (Function.Call<bool>(Hash.GET_IS_TASK_ACTIVE, Peddy, 134))
                        Script.Wait(100);
                    ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@male@variation_01@", "base", Vpos, Vrot);
                    Script.Wait(100);
                }       //SiInner
            }
            else
            {
                if (iPose == 1)
                {
                    ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@standing@female@variation_01@", "enter", Vpos, Vrot);
                    Script.Wait(100);
                    while (Function.Call<bool>(Hash.GET_IS_TASK_ACTIVE, Peddy, 134))
                        Script.Wait(100);
                    ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@standing@female@variation_01@", "base", Vpos, Vrot);
                    Script.Wait(100);
                }       //Stand
                else if (iPose == 2 || iPose == 22)
                {
                    if (pChair != null)
                        Game.Player.Character.AttachTo(pChair, 0, new Vector3(0.00f, 0.00f, 0.50f), new Vector3(0.00f, 0.00f, -180.00f));
                    ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@female@variation_03@", "enter", Vpos, Vrot);
                    Script.Wait(100);
                    while (Function.Call<bool>(Hash.GET_IS_TASK_ACTIVE, Peddy, 134))
                        Script.Wait(100);
                    ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@female@variation_03@", "base", Vpos, Vrot);
                    Script.Wait(100);
                }       //Sitouter
                else if (iPose == 3 || iPose == 33)
                {
                    if (pChair != null)
                        Game.Player.Character.AttachTo(pChair, 0, new Vector3(0.00f, 0.00f, 0.50f), new Vector3(0.00f, 0.00f, -180.00f));
                    ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@female@variation_01@", "enter", Vpos, Vrot);
                    Script.Wait(100);
                    while (Function.Call<bool>(Hash.GET_IS_TASK_ACTIVE, Peddy, 134))
                        Script.Wait(100);
                    ForceAnimOnce(Peddy, "anim@amb@yacht@jacuzzi@seated@female@variation_01@", "base", Vpos, Vrot);
                    Script.Wait(100);
                }       //SiInner
            }
        }
        private void YachtStuff_BedTime(Prop PBed)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("YachtStuff_BedTime", tEx);

            Game.FadeScreenOut(1);
            iAmHash = Game.Player.Character.Model.Hash;

            Vector3 VOffPos = new Vector3(0.00f, 0.00f, 1.10f);
            Vector3 VOffRot = new Vector3(0.00f, 0.00f, 90.00f);

            Game.Player.Character.AttachTo(PBed, 0, VOffPos, VOffRot);

            Vector3 Campo = YachtSlCam[iMyBed].Position;
            Vector3 Camro = new Vector3(YachtSlCam[iMyBed].Rotation.X, YachtSlCam[iMyBed].Rotation.Y, YachtSlCam[iMyBed].Rotation.Z - 180.00f); ;

            CleanCams();

            Function.Call(Hash.DISPLAY_RADAR, false);

            cCams = World.CreateCamera(Campo, Camro, 50.00f);
            Function.Call(Hash.RENDER_SCRIPT_CAMS, 1, 1, cCams.Handle, 0, 0);

            ForceAnim(Game.Player.Character, "anim@mp_bedmid@right_var_04", "f_sleep_r_loop_bighouse", Game.Player.Character.Position, Game.Player.Character.Rotation);
            Game.FadeScreenIn(1000);
            Script.Wait(1000);
            if (bDrinkig)
            {
                Function.Call(Hash.CLEAR_TIMECYCLE_MODIFIER);
                bDrinkig = false;
                Function.Call(Hash.RESET_PED_MOVEMENT_CLIPSET, Game.Player.Character, 0.00f);
                iYachtDrink = 0;
            }
            bASleap = true;
        }
        private void YachtStuff_YachtParty()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("YachtStuff_YachtParty", tEx);

            Prop[] Pops = World.GetNearbyProps(vYachtBlip, 75.00f);

            DancingPed.Clear();

            for (int i = 0; i < Pops.Count(); i++)
            {
                if (PropExists(Pops, i))
                {
                    Ped Psit = null;

                    if (Pops[i].Model == Function.Call<int>(Hash.GET_HASH_KEY, "hei_prop_yah_seat_02") || Pops[i].Model == Function.Call<int>(Hash.GET_HASH_KEY, "hei_prop_yah_seat_03"))
                    {
                        if (RandInt(0, 20) < 10)
                        {
                            Psit = NPCSpawn(RandNPC(51), Pops[i].Position, Pops[i].Heading - 180f, 24, 150, 0, 0, 0, null, 0, false, false, 0, 0);
                            PedSitHere(Psit, Pops[i], 1);
                        }
                    }
                    else if (Pops[i].Model == Function.Call<int>(Hash.GET_HASH_KEY, "hei_prop_yah_lounger"))
                    {
                        if (RandInt(0, 20) < 10)
                        {
                            Psit = NPCSpawn(RandNPC(51), Pops[i].Position, Pops[i].Heading - 180f, 24, 150, 0, 0, 0, null, 0, false, false, 0, 0);
                            PedSitHere(Psit, Pops[i], 2);
                        }
                    }
                    else if (Pops[i].Model == Function.Call<int>(Hash.GET_HASH_KEY, "hei_prop_yah_seat_01"))
                    {
                        if (RandInt(0, 20) < 10)
                        {
                            Psit = NPCSpawn(RandNPC(51), Pops[i].Position, Pops[i].Heading - 180f, 24, 150, 0, 0, 0, null, 0, false, false, 0, 0);
                            PedSitHere(Psit, Pops[i], 8);
                        }
                    }
                }

            }

            List<Vector3> Pos_01 = new List<Vector3>();

            Pos_01.Add(new Vector3(-2041.087f, -1032.308f, 11.98071f));
            Pos_01.Add(new Vector3(-2101.375f, -1012.525f, 8.969614f));
            Pos_01.Add(new Vector3(-2118.985f, -1006.77f, 7.920915f));
            Pos_01.Add(new Vector3(-2088.573f, -1016.668f, 8.971194f));
            Pos_01.Add(new Vector3(-2031.578f, -1040.083f, 5.882085f));
            Pos_01.Add(new Vector3(-2029.057f, -1032.141f, 5.88269f));
            Pos_01.Add(new Vector3(-2046.618f, -1030.548f, 11.98071f));
            Pos_01.Add(new Vector3(-2059.485f, -1026.207f, 11.90751f));
            Pos_01.Add(new Vector3(-2067.97f, -1023.662f, 11.90972f));
            Pos_01.Add(new Vector3(-2039.228f, -1033.173f, 8.971494f));

            for (int i = 1; i < Pos_01.Count; i++)
            {
                if (i < 6)
                {
                    int iRanPeds = RandInt(2, 3);
                    for (int ii = 0; ii < iRanPeds; ii++)
                    {
                        Vector3 VPedPos = Pos_01[i].Around(2.50f);
                        VPedPos.Z = Pos_01[i].Z;
                        NPCSpawn(RandNPC(51), VPedPos, RandInt(0, 360), 24, 150, 0, 46, 0, null, 0, false, false, 0, 0);
                    }
                }
                else
                {
                    Ped DancinF = null;
                    if (i == Pos_01.Count - 1)
                    {
                        for (int ii = 0; ii < 9; ii++)
                        {
                            Vector3 VPedPos = Pos_01[i].Around(3.55f);
                            VPedPos.Z = Pos_01[i].Z;

                            DancinF = NPCSpawn(RandNPC(51), VPedPos, RandInt(0, 360), 24, 150, 0, 0, 0, null, 0, false, false, 0, 0);
                            DancingPed.Add(new Ped(DancinF.Handle));
                        }
                        Ped DJ = NPCSpawn("ig_djsolmike", Pos_01[0], 243.1566f, 24, 150, 0, 0, 0, null, 0, false, false, 0, 0);
                        DancingPed.Add(new Ped(DJ.Handle));
                    }
                    else
                    {
                        int iRanPeds = RandInt(4, 9);
                        for (int ii = 0; ii < iRanPeds; ii++)
                        {
                            Vector3 VPedPos = Pos_01[i].Around(3.75f);
                            VPedPos.Z = Pos_01[i].Z;

                            DancinF = NPCSpawn(RandNPC(51), VPedPos, RandInt(0, 360), 24, 150, 0, 0, 0, null, 0, false, false, 0, 0);
                            DancingPed.Add(new Ped(DancinF.Handle));
                        }
                    }
                }
            }

            if (VehicleList_01.Count > 0)
            {
                VehicleList_01[VehicleList_01.Count - 1].Delete();
                VehicleList_01.RemoveAt(VehicleList_01.Count - 1);
            }

            List<Vector3> Pos_02 = new List<Vector3>();
            List<Vector3> Pos_03 = new List<Vector3>();

            Pos_02.Add(new Vector3(-2040.42346f, -1030.69165f, 10.9861012f));
            Pos_03.Add(new Vector3(0.00f, 0.00f, 101.32431f));
            Pos_02.Add(new Vector3(-2041.55701f, -1034.10632f, 10.9861012f));
            Pos_03.Add(new Vector3(0.00f, 0.00f, 41.9800873f));
            Pos_02.Add(new Vector3(-2041.55701f, -1034.10632f, 12.2861061f));
            Pos_03.Add(new Vector3(0.00f, 0.00f, 43.9800797f));
            Pos_02.Add(new Vector3(-2040.42346f, -1030.69165f, 12.2861023f));
            Pos_03.Add(new Vector3(0.00f, 0.00f, 99.4242706f));

            for (int i = 0; i < Pos_02.Count; i++)
                BuildProp("stt_prop_speakerstack_01a", Pos_02[i], Pos_03[i], true, false);

            BuildProp("ba_prop_battle_dj_stand", new Vector3(-2039.91492f, -1032.71106f, 10.9857159f), new Vector3(0.00f, 0.00f, 71.5197449f), true, false);

            YachtStuff_DanceFloor(true);
            bYachtParty = true;
        }
        private void YachtStuff_DancePedDance()
        {
            iKeepDance = Game.GameTime + 10000;
            List<string> DancinFool = new List<string>();

            for (int i = 0; i < DancingPed.Count; i++)
            {
                bool bMale = false;
                int iRan = RandInt(1, 3);

                if (!Function.Call<bool>(Hash.GET_IS_TASK_ACTIVE, DancingPed[i], 134))
                {
                    DancingPed[i].Task.ClearAll();
                    DancinFool.Clear();

                    if (DancingPed[i].Gender == Gender.Male)
                        bMale = true;

                    DancinFool = DanceList(bMale, iRan);

                    ForceAnim(DancingPed[i], DancinFool[0], DancinFool[1], DancingPed[i].Position, DancingPed[i].Rotation);
                }

            }
        }
        private void YachtStuff_DanceFloor(bool bOn)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("YachtStuff_DanceFloor, bOn == " + bOn, tEx);

            if (bOn)
            {
                Prop Prps = BuildProp("prop_boombox_01", new Vector3(-2039.91492f, -1032.71106f, 9.50f), new Vector3(0.00f, 0.00f, 71.5197449f), true, true);
                while (Prps == null)
                    Prps = BuildProp("prop_boombox_01", new Vector3(-2039.91492f, -1032.71106f, 9.50f), new Vector3(0.00f, 0.00f, 71.5197449f), true, true);
                Prps.IsVisible = false;
                Prps.HasCollision = false;
                Function.Call((Hash)0x651D3228960D08AF, "SE_DLC_BTL_Yacht_Exterior_01", Prps);

                Prop Prps2 = BuildProp("prop_boombox_01", new Vector3(-2069.29f, -1023.21f, 11.91014f), new Vector3(0.00f, 0.00f, 248.9541f), true, true);
                while (Prps2 == null)
                    Prps2 = BuildProp("prop_boombox_01", new Vector3(-2069.29f, -1023.21f, 11.91014f), new Vector3(0.00f, 0.00f, 248.9541f), true, true);
                Prps2.IsVisible = false;
                Prps2.HasCollision = false;
                Function.Call((Hash)0x651D3228960D08AF, "SE_DLC_APT_Yacht_Bar", Prps2);

                Function.Call(Hash.SET_EMITTER_RADIO_STATION, "SE_DLC_BTL_Yacht_Exterior_01", Function.Call<string>(Hash.GET_RADIO_STATION_NAME, 29));
                Function.Call(Hash.SET_STATIC_EMITTER_ENABLED, "SE_DLC_BTL_Yacht_Exterior_01", true);

                Function.Call(Hash.SET_EMITTER_RADIO_STATION, "SE_DLC_APT_Yacht_Bar", Function.Call<string>(Hash.GET_RADIO_STATION_NAME, 29));
                Function.Call(Hash.SET_STATIC_EMITTER_ENABLED, "SE_DLC_APT_Yacht_Bar", true);
            }
            else
            {
                Function.Call(Hash.SET_STATIC_EMITTER_ENABLED, "SE_DLC_BTL_Yacht_Exterior_01", false);
                Function.Call(Hash.SET_STATIC_EMITTER_ENABLED, "SE_DLC_APT_Yacht_Bar", false);
            }
        }
        private void PedSitHere(Ped Peddy, Prop Chair, int iChair)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("PedSitHere, iChair == " + iChair, tEx);

            Vector3 vCharPos = new Vector3(Chair.Position.X, Chair.Position.Y, Chair.Position.Z + 0.55f);

            Peddy.Position = vCharPos;
            Peddy.Heading = Chair.Heading - 180.00f;

            if (iChair == 1)
            {
                List<string> SitVArs = new List<string>();

                SitVArs.Add("PROP_HUMAN_SEAT_CHAIR");
                SitVArs.Add("PROP_HUMAN_SEAT_CHAIR_UPRIGHT");
                //SitVArs.Add("PROP_HUMAN_SEAT_CHAIR_DRINK");//broken
                //SitVArs.Add("PROP_HUMAN_SEAT_CHAIR_DRINK_BEER");//broken
                //SitVArs.Add("PROP_HUMAN_SEAT_CHAIR_FOOD");//broken
                //SitVArs.Add("PROP_HUMAN_SEAT_CHAIR_MP_PLAYER");//broken

                PedScenario(Peddy, SitVArs[RandInt(0, SitVArs.Count - 1)], vCharPos, Chair.Heading - 180.00f, true);
            }
            else if (iChair == 2)
            {
                vCharPos += (Chair.ForwardVector * 0.30f);
                vCharPos.Z -= 0.10f;
                PedScenario(Peddy, "PROP_HUMAN_SEAT_SUNLOUNGER", vCharPos, Chair.Heading - 180.00f, true);
            }
            else if (iChair == 3)
                PedScenario(Peddy, "PROP_HUMAN_SEAT_ARMCHAIR", vCharPos, Chair.Heading - 180.00f, true);
            else if (iChair == 4)
                PedScenario(Peddy, "PROP_HUMAN_SEAT_BAR", vCharPos, Chair.Heading - 180.00f, true);
            else if (iChair == 5)
                PedScenario(Peddy, "PROP_HUMAN_SEAT_COMPUTER", vCharPos, Chair.Heading - 180.00f, true);
            else if (iChair == 6)
            {
                List<string> SitVArs = new List<string>();

                SitVArs.Add("PROP_HUMAN_SEAT_DECKCHAIR");
                SitVArs.Add("PROP_HUMAN_SEAT_DECKCHAIR_DRINK");

                PedScenario(Peddy, SitVArs[RandInt(0, SitVArs.Count - 1)], vCharPos, Chair.Heading - 180.00f, true);
            }
            else if (iChair == 7)
            {
                List<string> SitVArs = new List<string>();

                SitVArs.Add("PROP_HUMAN_SEAT_BENCH");
                SitVArs.Add("PROP_HUMAN_SEAT_BENCH_DRINK");
                SitVArs.Add("PROP_HUMAN_SEAT_BENCH_DRINK_BEER");
                SitVArs.Add("PROP_HUMAN_SEAT_BENCH_FOOD");

                PedScenario(Peddy, SitVArs[RandInt(0, SitVArs.Count - 1)], vCharPos, Chair.Heading - 180.00f, true);
            }
            else if (iChair == 8)
            {
                vCharPos = new Vector3(Chair.Position.X, Chair.Position.Y, Chair.Position.Z + 0.70f);

                List<string> SitVArs = new List<string>();

                SitVArs.Add("PROP_HUMAN_SEAT_CHAIR");
                SitVArs.Add("PROP_HUMAN_SEAT_CHAIR_UPRIGHT");
                //SitVArs.Add("PROP_HUMAN_SEAT_CHAIR_DRINK");
                //SitVArs.Add("PROP_HUMAN_SEAT_CHAIR_DRINK_BEER");
                //SitVArs.Add("PROP_HUMAN_SEAT_CHAIR_FOOD");
                //SitVArs.Add("PROP_HUMAN_SEAT_CHAIR_MP_PLAYER");

                PedScenario(Peddy, SitVArs[RandInt(0, SitVArs.Count - 1)], vCharPos, Chair.Heading - 180.00f, true);
            }

            Peddy.AlwaysKeepTask = false;
        }
        private void TimeCycFade()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("TimeCycFade", tEx);

            bDrinkig = false;
            Function.Call(Hash.SET_TIMECYCLE_MODIFIER_STRENGTH, 0.80f);
            Script.Wait(1000);
            Function.Call(Hash.SET_TIMECYCLE_MODIFIER_STRENGTH, 0.70f);
            Script.Wait(1000);
            Function.Call(Hash.SET_TIMECYCLE_MODIFIER_STRENGTH, 0.60f);
            Script.Wait(1000);
            Function.Call(Hash.SET_TIMECYCLE_MODIFIER_STRENGTH, 0.50f);
            Script.Wait(1000);
            Function.Call(Hash.SET_TIMECYCLE_MODIFIER_STRENGTH, 0.40f);
            Script.Wait(1000);
            Function.Call(Hash.SET_TIMECYCLE_MODIFIER_STRENGTH, 0.30f);
            Script.Wait(1000);
            Function.Call(Hash.SET_TIMECYCLE_MODIFIER_STRENGTH, 0.20f);
            Script.Wait(1000);
            Function.Call(Hash.SET_TIMECYCLE_MODIFIER_STRENGTH, 0.10f);
            Script.Wait(1000);
            Function.Call(Hash.CLEAR_TIMECYCLE_MODIFIER);
            if (bDrunkMove)
            {
                bDrunkMove = false;
                Function.Call(Hash.RESET_PED_MOVEMENT_CLIPSET, Game.Player.Character, 0.00f);
            }

        }
        private void DrunkMoves()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("DrunkMoves", tEx);

            bDrunkMove = false;
            int iTenPass = 10;
            while (!Function.Call<bool>(Hash.HAS_ANIM_SET_LOADED, "move_m@drunk@moderatedrunk") || iTenPass > 0)
            {
                iTenPass -= 1;
                Function.Call(Hash.REQUEST_ANIM_SET, "move_m@drunk@moderatedrunk");
                Script.Wait(100);
            }
            if (Function.Call<bool>(Hash.HAS_ANIM_SET_LOADED, "move_m@drunk@moderatedrunk"))
            {
                bDrunkMove = true;
                Function.Call(Hash.SET_PED_MOVEMENT_CLIPSET, Game.Player.Character.Handle, "move_m@drunk@moderatedrunk", 1.00f);
            }

            //Function.Call(Hash.SET_PED_MOVEMENT_CLIPSET, ped.Handle, "MOVE_M@DRUNK@VERYDRUNK", 0x3E800000);
        }
        public int VehDamage(Vehicle Vehic, int iMaxHealth, int iMaxValue, bool bShowPool,int iSeeWhatYouDidThere, bool bNeg)
        {
            int iAmDamagedBy = 0;

            float fVehCheck = Vehic.BodyHealth + Vehic.EngineHealth + Vehic.PetrolTankHealth;

            float fDeduct = (float)iMaxHealth - fVehCheck;

            int iPer = iMaxValue / iMaxHealth;

            if (bNeg)
            {
                int iDeduct = (int)fDeduct * iPer;
                iAmDamagedBy = iMaxValue - iDeduct;

                if (iSeeWhatYouDidThere < iAmDamagedBy)
                    iAmDamagedBy = iSeeWhatYouDidThere;
            }
            else
            {
                iAmDamagedBy = (int)fDeduct * iPer;

                if (iSeeWhatYouDidThere > iAmDamagedBy)
                    iAmDamagedBy = iSeeWhatYouDidThere;
            }

            if (bShowPool)
            {
                ttTextBar_01.Text = "$ " + ShowComs(iAmDamagedBy, true, false) + "";
                VTBTimerPool.Draw();
            }

            return iAmDamagedBy;
        }
        public int MultiDamage(List<int> iMaxHealVeh, List<int> iMaxHealPed, int iMaxValue, bool bShowPool, int iSeeWhatYouDidThere, bool bNeg)
        {
            int iAmDamagedBy = 0;
            int iMaxHealth = 0;

            if (MishVic.Count != iMaxHealVeh.Count)
            {
                using (StreamWriter tEx = File.AppendText(sBeeLogs))
                    BeeLog("MishVic.Count Error...", tEx);
                MishVic.Clear();
                iMaxHealVeh.Clear();
            }

            for (int i = 0; i < MishVic.Count; i++)
            {
                float fVehCheck = MishVic[i].BodyHealth + MishVic[i].EngineHealth + MishVic[i].PetrolTankHealth;
                float fDeduct = (float)iMaxHealVeh[i] - fVehCheck;

                iAmDamagedBy += (int)fDeduct;

                iMaxHealth += iMaxHealVeh[i];
            }

            if (MishPed.Count != iMaxHealPed.Count)
            {
                using (StreamWriter tEx = File.AppendText(sBeeLogs))
                    BeeLog("MishPed.Count Error...", tEx);
                MishPed.Clear();
                iMaxHealPed.Clear();
            }

            for (int i = 0; i < MishPed.Count; i++)
            {
                int iPedHeal = MishPed[i].Health;
                int iDeduct = iMaxHealPed[i] - iPedHeal;

                iAmDamagedBy += iDeduct;

                iMaxHealth += iMaxHealPed[i];
            }

            int iPer = iMaxValue / iMaxHealth;

            iAmDamagedBy *= iPer;

            if (bNeg)
            {
                iAmDamagedBy = iMaxValue - iAmDamagedBy;

                if (iSeeWhatYouDidThere < iAmDamagedBy)
                    iAmDamagedBy = iSeeWhatYouDidThere;
            }
            else
            {
                if (iSeeWhatYouDidThere > iAmDamagedBy)
                    iAmDamagedBy = iSeeWhatYouDidThere;
            }

            if (bShowPool)
            {
                ttTextBar_01.Text = "$ " + ShowComs(iAmDamagedBy, true, false) + "";
                VTBTimerPool.Draw();
            }

            return iAmDamagedBy;
        }
        private void ShutThatDoor(Vector3 VDoorPos, String SDoorTag)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("ShutThatDoor", tEx);

            Prop[] Opensesme = World.GetNearbyProps(VDoorPos, 6.00f);
            for (int i = 0; i < Opensesme.Count(); i++)
            {
                if (PropExists(Opensesme, i))
                {
                    Prop ThisDoor = Opensesme[i];
                    if (ThisDoor.Model == Function.Call<int>(Hash.GET_HASH_KEY, SDoorTag))
                    {
                        Function.Call(Hash.SET_STATE_OF_CLOSEST_DOOR_OF_TYPE, ThisDoor.Model.Hash, ThisDoor.Position.X, ThisDoor.Position.Y, ThisDoor.Position.Z, true, ThisDoor.Heading, 1);
                        ThisDoor.FreezePosition = true;
                    }
                }
            }
        }
        private void DoorsNear(Vector3 VDoorPos, float fRadius)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("DoorsNear", tEx);

            Prop[] Opensesme = World.GetNearbyProps(VDoorPos, fRadius);
            for (int i = 0; i < Opensesme.Count(); i++)
            {
                if (PropExists(Opensesme, i))
                {
                    Prop ThisDoor = Opensesme[i];
                    for (int ii = 0; ii < sDoorList.Count; ii++)
                    {
                        if (Function.Call<int>(Hash.GET_HASH_KEY, sDoorList[ii]) == ThisDoor.Model)
                        {
                            ThisDoor.FreezePosition = false;
                            Function.Call(Hash.SET_STATE_OF_CLOSEST_DOOR_OF_TYPE, ThisDoor.Model.Hash, ThisDoor.Position.X, ThisDoor.Position.Y, ThisDoor.Position.Z, false, 0, 1);
                        }
                    }
                }
            }
        }
        private void StopHere(Vehicle Vic)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("StopHere", tEx);

            while (Vic.IsInAir)
                Script.Wait(10);
            Vic.FreezePosition = true;
            Script.Wait(1000);
            Vic.FreezePosition = false;
        }
        private void GateIsNear(Vector3 VGatePos, float fRadius, bool bPropX)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("GateIsNear, bPropX == " + bPropX, tEx);

            Prop[] Opensesme = World.GetNearbyProps(VGatePos, fRadius);
            for (int i = 0; i < Opensesme.Count(); i++)
            {
                if (PropExists(Opensesme, i))
                {
                    Prop ThisDoor = Opensesme[i];
                    for (int ii = 0; ii < sGateList.Count; ii++)
                    {
                        if (ThisDoor.Model == Function.Call<int>(Hash.GET_HASH_KEY, "prop_facgate_04_r") || ThisDoor.Model == Function.Call<int>(Hash.GET_HASH_KEY, "prop_facgate_04_l") || ThisDoor.Model == Function.Call<int>(Hash.GET_HASH_KEY, "prop_fnclink_06gate2"))
                            ThisDoor.Delete();
                        else if (Function.Call<int>(Hash.GET_HASH_KEY, sGateList[ii]) == ThisDoor.Model)
                        {
                            Function.Call(Hash._DOOR_CONTROL, Function.Call<int>(Hash.GET_HASH_KEY, sGateList[ii]), ThisDoor.Position.X, ThisDoor.Position.Y, ThisDoor.Position.Z, false, 0.00f, 50.00f, 0.00f);
                            if (bPropX)
                                Prop_01 = ThisDoor;
                        }
                    }
                }
            }
        }
        private void MoveThatCar(Vector3 VPos)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("MoveThatCar", tEx);

            Vehicle[] Carsy = World.GetNearbyVehicles(VPos, 10.00f);

            for (int i = 0; i < Carsy.Count(); i++)
            {
                if (VehExists(Carsy, i))
                {
                    Vehicle VehicleX = Carsy[i];
                    if (!VehicleX.IsPersistent)
                    {
                        if (VehicleX.ClassType == VehicleClass.Utility)
                            VehicleX.Delete();
                        else
                        {
                            Ped Pedx = VehicleX.CreateRandomPedOnSeat(VehicleSeat.Driver);
                            Pedx.MarkAsNoLongerNeeded();
                        }
                    }
                }
            }
        }
        private void ImOnAPlane(Ped Pilot, Vehicle Plane, Vector3 Dest)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("ImOnAPlane", tEx);

            Pilot.Task.ClearAll();
            Function.Call(Hash.TASK_PLANE_MISSION, Pilot.Handle, Plane.Handle, 0, 0, Dest.X, Dest.Y, Dest.Z, 4, 100.0f, 0.0f, 90.0f, 0, 600.0f);
        }
        private void FlyAway(Ped Pedd, Vector3 vHeliDest, float fSpeed, float flanding)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("FlyAway", tEx);

            Vehicle vHeli = Pedd.CurrentVehicle;
            vHeli.FreezePosition = false;

            float HeliDesX = vHeliDest.X;
            float HeliDesY = vHeliDest.Y;
            float HeliDesZ = vHeliDest.Z;
            float HeliSpeed = fSpeed;
            float HeliLandArea = flanding;

            float dx = Pedd.Position.X - HeliDesX;
            float dy = Pedd.Position.Y - HeliDesY;
            float HeliDirect = Function.Call<float>(Hash.GET_HEADING_FROM_VECTOR_2D, dx, dy) - 180.00f;
            Function.Call(Hash.TASK_HELI_MISSION, Pedd.Handle, vHeli.Handle, 0, 0, HeliDesX, HeliDesY, HeliDesZ, 4, HeliSpeed, HeliLandArea, HeliDirect, -1, -1, -1, 0);
            Pedd.AlwaysKeepTask = true;
            Pedd.BlockPermanentEvents = true;
        }
        private void FlyToRightHere(Ped Pedd, Vehicle vHeli, Vector3 vHeliDest, float fSpeed, float fheader)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("FlyToRightHere", tEx);

            float HeliDesX = vHeliDest.X;
            float HeliDesY = vHeliDest.Y;
            float HeliDesZ = vHeliDest.Z;
            float HeliSpeed = fSpeed;
            float HeliDirect = fheader;
            Function.Call(Hash.TASK_HELI_MISSION, Pedd.Handle, vHeli.Handle, 0, 0, HeliDesX, HeliDesY, HeliDesZ, 4, HeliSpeed, 0, HeliDirect, -1, -1, -1, 0);
            Pedd.AlwaysKeepTask = true;
            Pedd.BlockPermanentEvents = true;
        }
        private void FlyNShoot(Ped Pedd, Vehicle vHeli, Ped Target)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("FlyNShoot", tEx);

            float HeliSpeed = 75.00f;
            //float HeliLandArea = flanding;

            float dx = Target.Position.X - vHeli.Position.X;
            float dy = Target.Position.Y - vHeli.Position.Y;
            float HeliDirect = Function.Call<float>(Hash.GET_HEADING_FROM_VECTOR_2D, dx, dy) - 180.00f;
            Function.Call(Hash.TASK_HELI_MISSION, Pedd.Handle, vHeli.Handle, 0, Target.Handle, 0, 0, 0, 9, HeliSpeed, 0, HeliDirect, -1, -1, -1, 0);
            Pedd.AlwaysKeepTask = true;
            Pedd.BlockPermanentEvents = true;
        }
        public Ped GenPlayerPed(Vector3 vLocal, float fAce, int iAim, int iHeal, int iList, int iTask, int iSeat, Vehicle vMyCar, int iGun, bool bBlip, bool bFightPlayer, int iNp, bool bGreeny)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("GenPlayerPed, iHeal == " + iHeal + ", iList == " + iList + ", iTask == " + iTask + ", iSeat == " + iSeat + ", iNp == " + iNp + ", bGreeny == " + bGreeny, tEx);

            Ped Peedoff = null;
            if (bGreeny)
            {
                if (RandBool(13))
                    Peedoff = NPCSpawn("mp_m_freemode_01", vLocal, fAce, iAim, iHeal, iList, iTask, iSeat, vMyCar, iGun, bBlip, bFightPlayer, iNp, 3);
                else
                    Peedoff = NPCSpawn("mp_f_freemode_01", vLocal, fAce, iAim, iHeal, iList, iTask, iSeat, vMyCar, iGun, bBlip, bFightPlayer, iNp, 4);
            }
            else
            {
                if (RandBool(13))
                    Peedoff = NPCSpawn("mp_m_freemode_01", vLocal, fAce, iAim, iHeal, iList, iTask, iSeat, vMyCar, iGun, bBlip, bFightPlayer, iNp, 1);
                else
                    Peedoff = NPCSpawn("mp_f_freemode_01", vLocal, fAce, iAim, iHeal, iList, iTask, iSeat, vMyCar, iGun, bBlip, bFightPlayer, iNp, 2);
            }
            return Peedoff;
        }
        public string RandNPC(int iRando)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("RandNPC, iRando == " + iRando, tEx);

            List<string> sPeds = new List<string>();

            string sPedds = "";

            if (iRando == 1)
            {
                sPeds.Add("a_m_m_og_boss_01");    //"OG Boss" />
                sPeds.Add("g_f_y_ballas_01");    //" Female" />
                sPeds.Add("g_m_y_ballaeast_01");    //"Ballas East Male" />
                sPeds.Add("g_m_y_ballaorig_01");    //"Ballas Original Male" />
                sPeds.Add("g_m_y_ballasout_01");    //"Ballas South Male" />
            }            //Ballas
            else if (iRando == 2)
            {
                sPeds.Add("mp_m_famdd_01");    //"Families DD Male" />
                sPeds.Add("g_f_y_families_01");    //"Families Female" />
                sPeds.Add("g_m_y_famca_01");    //"Families CA Male" />
                sPeds.Add("g_m_y_famdnf_01");    //"Families DNF Male" />
                sPeds.Add("g_m_y_famfor_01");    //"Families FOR Male" />
            }       //Families
            else if (iRando == 3)
            {
                sPeds.Add("g_f_importexport_01");    //"Import Export Female" />
                sPeds.Add("g_f_importexport_01");    //"Gang Female (Import-Export)" />
                sPeds.Add("g_m_importexport_01");    //"Gang Male (Import-Export)" />
            }       //Gang (Import-Export)
            else if (iRando == 4)
            {
                sPeds.Add("g_f_y_vagos_01");    //"Vagos Female" />
                sPeds.Add("g_f_y_lost_01");    //"The Lost MC Female" />
                sPeds.Add("g_m_y_lost_01");    //"The Lost MC Male" />
                sPeds.Add("g_m_y_lost_02");    //"The Lost MC Male 2" />
                sPeds.Add("g_m_y_lost_03");    //"The Lost MC Male 3" />
                sPeds.Add("a_m_m_mlcrisis_01");    //"Midlife Crisis Casino Bikers" />
                sPeds.Add("mp_m_exarmy_01");    //"Ex-Army Male" />
            }       //The Lost MC
            else if (iRando == 5)
            {
                sPeds.Add("g_m_m_korboss_01");    //"Korean Boss" />
                sPeds.Add("g_m_y_korlieut_01");    //"Korean Lieutenant" />
                sPeds.Add("g_m_y_korean_01");    //"Korean Young Male" />
                sPeds.Add("g_m_y_korean_02");    //"Korean Young Male 2" />
                sPeds.Add("a_m_m_ktown_01");    //"Korean Male" />
                sPeds.Add("a_m_o_ktown_01");    //"Korean Old Male" />
                sPeds.Add("a_m_y_ktown_01");    //"Korean Young Male" />
                sPeds.Add("a_m_y_ktown_02");    //"Korean Young Male 2" />
            }       //Korean
            else if (iRando == 6)
            {
                sPeds.Add("g_m_m_armboss_01");    //"Armenian Boss" />
                sPeds.Add("g_m_m_armgoon_01");    //"Armenian Goon" />
                sPeds.Add("g_m_y_armgoon_02");    //"Armenian Goon 2" />
                sPeds.Add("g_m_m_armlieut_01");    //"Armenian Lieutenant" />
            }       //Armenian
            else if (iRando == 7)
            {
                sPeds.Add("g_m_m_chiboss_01");    //"Chinese Boss" />
                sPeds.Add("g_m_m_chigoon_01");    //"Chinese Goon" />
                sPeds.Add("g_m_m_chigoon_02");    //"Chinese Goon 2" />
                sPeds.Add("g_m_m_chicold_01");    //"Chinese Goon Older" />
            }       //Chinese
            else if (iRando == 8)
            {
                sPeds.Add("g_m_m_mexboss_01");    //"Mexican Boss" />
                sPeds.Add("g_m_m_mexboss_02");    //"Mexican Boss 2" />
                sPeds.Add("g_m_y_mexgang_01");    //"Mexican Gang Member" />
                sPeds.Add("g_m_y_mexgoon_01");    //"Mexican Goon" />
                sPeds.Add("g_m_y_mexgoon_02");    //"Mexican Goon 2" />
                sPeds.Add("g_m_y_mexgoon_03");    //"Mexican Goon 3" />
                sPeds.Add("a_m_y_mexthug_01");    //"Mexican Thug" />
            }       //Mexican
            else if (iRando == 9)
            {
                sPeds.Add("g_m_y_pologoon_01");    //"Polynesian Goon" />
                sPeds.Add("g_m_y_pologoon_02");    //"Polynesian Goon 2" />
                sPeds.Add("a_m_m_polynesian_01");    //"Polynesian" />
                sPeds.Add("a_m_y_polynesian_01");    //"Polynesian Young" />
            }       //Polynesian
            else if (iRando == 10)
            {
                sPeds.Add("g_m_y_salvaboss_01");    //"Salvadoran Boss" />
                sPeds.Add("g_m_y_salvagoon_01");    //"Salvadoran Goon" />
                sPeds.Add("g_m_y_salvagoon_02");    //"Salvadoran Goon 2" />
                sPeds.Add("g_m_y_salvagoon_03");    //"Salvadoran Goon 3" />
            }       //Salvadoran
            else if (iRando == 11)
            {
                sPeds.Add("g_m_y_strpunk_01");    //"Street Punk" />
                sPeds.Add("g_m_y_strpunk_02");    //"Street Punk 2" />
            }       //Street Punk
            else if (iRando == 12)
            {
                sPeds.Add("a_f_m_beach_01");    //"Beach Female" />
                sPeds.Add("a_f_y_beach_01");    //"Beach Young Female" />
                sPeds.Add("a_f_m_bodybuild_01");    //"Bodybuilder Female" />
                sPeds.Add("a_f_y_fitness_01");    //"Fitness Female" />
                sPeds.Add("a_f_y_fitness_02");    //"Fitness Female 2" />
                sPeds.Add("a_f_y_runner_01");    //"Jogger Female" />
                sPeds.Add("a_f_y_yoga_01");    //"Yoga Female" />
                sPeds.Add("a_m_m_beach_01");    //"Beach Male" />
                sPeds.Add("a_m_m_beach_02");    //"Beach Male 2" />
                sPeds.Add("a_m_y_musclbeac_01");    //"Beach Muscle Male" />
                sPeds.Add("a_m_y_musclbeac_02");    //"Beach Muscle Male 2" />
                sPeds.Add("a_m_o_beach_01");    //"Beach Old Male" />
                sPeds.Add("a_m_y_beach_01");    //"Beach Young Male" />
                sPeds.Add("a_m_y_beach_02");    //"Beach Young Male 2" />
                sPeds.Add("a_m_y_beach_03");    //"Beach Young Male 3" />
                sPeds.Add("a_m_y_runner_01");    //"Jogger Male" />
                sPeds.Add("a_m_y_runner_02");    //"Jogger Male 2" />
                sPeds.Add("a_m_m_malibu_01");    //"Malibu Male" />
                sPeds.Add("a_m_y_sunbathe_01");    //"Sunbather Male" />
                sPeds.Add("a_m_y_surfer_01");    //"Surfer" />
                sPeds.Add("a_m_y_yoga_01");    //"Yoga Male" />
                sPeds.Add("a_m_y_hippy_01");    //"Hippie Male" />
                sPeds.Add("a_f_y_hippie_01");    //"Hippie Female" />
                sPeds.Add("a_m_y_beachvesp_01");    //"Vespucci Beach Male" />
                sPeds.Add("a_m_y_beachvesp_02");    //"Vespucci Beach Male 2" />
                sPeds.Add("u_m_y_party_01");    //"Partygoer" />
            }       //Beach
            else if (iRando == 13)
            {
                sPeds.Add("a_f_m_bevhills_01");    //"Beverly Hills Female" />
                sPeds.Add("a_f_m_bevhills_02");    //"Beverly Hills Female 2" />
                sPeds.Add("a_f_y_bevhills_01");    //"Beverly Hills Young Female" />
                sPeds.Add("a_f_y_bevhills_02");    //"Beverly Hills Young Female 2" />
                sPeds.Add("a_f_y_bevhills_03");    //"Beverly Hills Young Female 3" />
                sPeds.Add("a_f_y_bevhills_04");    //"Beverly Hills Young Female 4" />
                sPeds.Add("a_f_m_downtown_01");    //"Downtown Female" />
                sPeds.Add("a_f_y_scdressy_01");    //"Dressy Female" />
                sPeds.Add("a_f_y_vinewood_01");    //"Vinewood Female" />
                sPeds.Add("a_f_y_vinewood_02");    //"Vinewood Female 2" />
                sPeds.Add("a_f_y_vinewood_03");    //"Vinewood Female 3" />
                sPeds.Add("a_f_y_vinewood_04");    //"Vinewood Female 4" />
                sPeds.Add("a_f_y_clubcust_01");    //"Club Customer Female 1" />
                sPeds.Add("a_f_y_clubcust_02");    //"Club Customer Female 2" />
                sPeds.Add("a_f_y_clubcust_03");    //"Club Customer Female 3" />
                sPeds.Add("u_f_y_hotposh_01");    //"Hot Posh Female" />
                sPeds.Add("g_m_m_casrn_01");    //"Casino Guests?" />
                sPeds.Add("a_m_m_bevhills_01");    //"Beverly Hills Male" />
                sPeds.Add("a_m_m_bevhills_02");    //"Beverly Hills Male 2" />
                sPeds.Add("a_m_y_bevhills_01");    //"Beverly Hills Young Male" />
                sPeds.Add("a_m_y_bevhills_02");    //"Beverly Hills Young Male 2" />
                sPeds.Add("a_m_y_downtown_01");    //"Downtown Male" />
                sPeds.Add("a_m_y_hipster_01");    //"Hipster Male" />
                sPeds.Add("a_m_y_hipster_02");    //"Hipster Male 2" />
                sPeds.Add("a_m_y_hipster_03");    //"Hipster Male 3" />
                sPeds.Add("a_m_m_tennis_01");    //"Tennis Player Male" />
                sPeds.Add("a_m_y_vindouche_01");    //"Vinewood Douche" />
                sPeds.Add("a_m_y_vinewood_01");    //"Vinewood Male" />
                sPeds.Add("a_m_y_vinewood_02");    //"Vinewood Male 2" />
                sPeds.Add("a_m_y_vinewood_03");    //"Vinewood Male 3" />
                sPeds.Add("a_m_y_vinewood_04");    //"Vinewood Male 4" />
                sPeds.Add("a_m_y_clubcust_01");    //"Club Customer Male 1" />
                sPeds.Add("a_m_y_clubcust_02");    //"Club Customer Male 2" />
                sPeds.Add("a_m_y_clubcust_03");    //"Club Customer Male 3" />
                sPeds.Add("a_f_y_gencaspat_01");    //"Casual Casino Guest" />
                sPeds.Add("a_f_y_smartcaspat_01");    //"Formel Casino Guest" />
                sPeds.Add("a_f_y_hipster_01");    //"Hipster Female" />
                sPeds.Add("a_f_y_hipster_02");    //"Hipster Female 2" />
                sPeds.Add("a_f_y_hipster_03");    //"Hipster Female 3" />
                sPeds.Add("a_f_y_hipster_04");    //"Hipster Female 4" />
                sPeds.Add("a_f_y_tennis_01");    //"Tennis Player Female" />
                sPeds.Add("a_f_y_femaleagent");    //"Female Agent" />
                sPeds.Add("a_f_y_genhot_01");    //"General Hot Young Female" />
                sPeds.Add("a_m_y_gencaspat_01");    //"Casual Casino Guests" />
                sPeds.Add("a_m_y_smartcaspat_01");    //"Formel Casino Guests" />
            }       //HiClassStreet
            else if (iRando == 14)
            {
                sPeds.Add("a_f_m_business_02");    //"Business Female 2" />
                sPeds.Add("a_f_y_business_01");    //"Business Young Female" />
                sPeds.Add("a_f_y_business_02");    //"Business Young Female 2" />
                sPeds.Add("a_f_y_business_03");    //"Business Young Female 3" />
                sPeds.Add("a_f_y_business_04");    //"Business Young Female 4" />
            }       //Suits Female
            else if (iRando == 15)
            {
                sPeds.Add("a_f_m_eastsa_01");    //"East SA Female" />
                sPeds.Add("a_f_m_eastsa_02");    //"East SA Female 2" />
                sPeds.Add("a_f_y_eastsa_01");    //"East SA Young Female" />
                sPeds.Add("a_f_y_eastsa_02");    //"East SA Young Female 2" />
                sPeds.Add("a_f_y_eastsa_03");    //"East SA Young Female 3" />
                sPeds.Add("a_m_m_eastsa_01");    //"East SA Male" />
                sPeds.Add("a_m_m_eastsa_02");    //"East SA Male 2" />
                sPeds.Add("a_m_y_eastsa_01");    //"East SA Young Male" />
                sPeds.Add("a_m_y_eastsa_02");    //"East SA Young Male 2" />
            }       //East SA
            else if (iRando == 16)
            {
                sPeds.Add("u_m_y_baygor");    //"Kifflom Guy" />
                sPeds.Add("a_m_y_epsilon_01");    //"Epsilon Male" />
                sPeds.Add("a_m_y_epsilon_02");    //"Epsilon Male 2" />
                sPeds.Add("a_f_y_epsilon_01");    //"Epsilon Female" />
            }       //Epsilon
            else if (iRando == 17)
            {
                sPeds.Add("a_f_m_fatbla_01");    //"Fat Black Female" />
                sPeds.Add("a_f_m_fatcult_01");    //"Fat Cult Female" />
                sPeds.Add("a_f_m_fatwhite_01");    //"Fat White Female" />
                sPeds.Add("a_m_m_genfat_01");    //"General Fat Male" />
                sPeds.Add("a_m_m_genfat_02");    //"General Fat Male 2" />
                sPeds.Add("a_m_m_fatlatin_01");    //"Fat Latino Male" />
            }       //Fatties
            else if (iRando == 18)
            {
                sPeds.Add("a_f_o_genstreet_01");    //"General Street Old Female" />
                sPeds.Add("a_m_o_genstreet_01");    //"General Street Old Male" />
                sPeds.Add("a_m_y_genstreet_01");    //"General Street Young Male" />
                sPeds.Add("a_m_y_genstreet_02");    //"General Street Young Male 2" />
                sPeds.Add("a_m_y_stbla_01");    //"Black Street Male" />
                sPeds.Add("a_m_y_stbla_02");    //"Black Street Male 2" />
                sPeds.Add("a_m_m_stlat_02");    //"Latino Street Male 2" />
                sPeds.Add("a_m_y_stlat_01");    //"Latino Street Young Male" />
                sPeds.Add("a_m_y_latino_01");    //"Latino Young Male" />
                sPeds.Add("a_m_m_afriamer_01");    //"African American Male" />
                sPeds.Add("a_m_y_stwhi_01");    //"White Street Male" />
                sPeds.Add("a_m_y_stwhi_02");    //"White Street Male 2" />
                sPeds.Add("a_m_y_ktown_01");    //"Korean Young Male" />
                sPeds.Add("a_m_y_ktown_02");    //"Korean Young Male 2" />
                sPeds.Add("a_m_m_polynesian_01");    //"Polynesian" />
                sPeds.Add("a_m_y_polynesian_01");    //"Polynesian Young" />
                sPeds.Add("a_m_m_eastsa_01");    //"East SA Male" />
                sPeds.Add("a_m_m_eastsa_02");    //"East SA Male 2" />
                sPeds.Add("a_f_m_ktown_01");    //"Korean Female" />
                sPeds.Add("a_f_m_ktown_02");    //"Korean Female 2" />
                sPeds.Add("a_f_o_ktown_01");    //"Korean Old Female" />
            }       //Street
            else if (iRando == 19)
            {
                sPeds.Add("a_m_y_hiker_01");    //"Hiker Male" />
                sPeds.Add("a_f_y_hiker_01");    //"Hiker Female" />
            }       //Outdoors
            else if (iRando == 20)
            {
                sPeds.Add("a_m_m_skater_01");    //"Skater Male" />
                sPeds.Add("a_m_y_skater_01");    //"Skater Young Male" />
                sPeds.Add("a_m_y_skater_02");    //"Skater Young Male 2" />
                sPeds.Add("a_f_y_skater_01");    //"Skater Female" />
            }       //Skater
            else if (iRando == 21)
            {
                sPeds.Add("a_m_m_indian_01");    //"Indian Male" />
                sPeds.Add("a_m_y_indian_01");    //"Indian Young Male" />
                sPeds.Add("a_f_o_indian_01");    //"Indian Old Female" />
                sPeds.Add("a_f_y_indian_01");    //"Indian Young Female" />
            }       //indian
            else if (iRando == 22)
            {
                sPeds.Add("a_m_y_juggalo_01");    //"Juggalo Male" />
                sPeds.Add("a_f_y_juggalo_01");    //"Juggalo Female" />
            }       //Juggalo
            else if (iRando == 23)
            {
                sPeds.Add("a_m_y_methhead_01");    //"Meth Addict" />
                sPeds.Add("a_f_y_rurmeth_01");    //"Rural Meth Addict Female" />
                sPeds.Add("a_f_m_salton_01");    //"Salton Female" />
                sPeds.Add("a_f_o_salton_01");    //"Salton Old Female" />
                sPeds.Add("a_m_m_hillbilly_01");    //"Hillbilly Male" />
                sPeds.Add("a_m_m_hillbilly_02");    //"Hillbilly Male 2" />
                sPeds.Add("a_m_m_rurmeth_01");    //"Rural Meth Addict Male" />
                sPeds.Add("a_m_m_farmer_01");    //"Farmer" />
                sPeds.Add("a_m_m_salton_01");    //"Salton Male" />
                sPeds.Add("a_m_m_salton_02");    //"Salton Male 2" />
                sPeds.Add("a_m_m_salton_03");    //"Salton Male 3" />
                sPeds.Add("a_m_m_salton_04");    //"Salton Male 4" />
                sPeds.Add("a_m_o_salton_01");    //"Salton Old Male" />
                sPeds.Add("a_m_y_salton_01");    //"Salton Young Male" />
                sPeds.Add("a_m_m_mexcntry_01");    //"Mexican Rural" />

            }       //Rural
            else if (iRando == 24)
            {
                sPeds.Add("a_f_m_skidrow_01");    //"Skid Row Female" />
                sPeds.Add("a_m_m_skidrow_01");    //"Skid Row Male" />
                sPeds.Add("a_m_m_tramp_01");    //"Tramp Male" />
                sPeds.Add("a_m_o_tramp_01");    //"Tramp Old Male" />
                sPeds.Add("a_f_m_tramp_01");    //"Tramp Female" />
                sPeds.Add("a_f_m_trampbeac_01");    //"Beach Tramp Female" />
                sPeds.Add("a_m_m_trampbeac_01");    //"Beach Tramp Male" />
            }       //Tramp
            else if (iRando == 25)
            {
                sPeds.Add("a_f_m_soucent_01");    //"South Central Female" />
                sPeds.Add("a_f_m_soucent_02");    //"South Central Female 2" />
                sPeds.Add("a_f_m_soucentmc_01");    //"South Central MC Female" />
                sPeds.Add("a_f_o_soucent_01");    //"South Central Old Female" />
                sPeds.Add("a_f_o_soucent_02");    //"South Central Old Female 2" />
                sPeds.Add("a_f_y_soucent_01");    //"South Central Young Female" />
                sPeds.Add("a_f_y_soucent_02");    //"South Central Young Female 2" />
                sPeds.Add("a_f_y_soucent_03");    //"South Central Young Female 3" />
                sPeds.Add("a_m_m_socenlat_01");    //"South Central Latino Male" />
                sPeds.Add("a_m_m_soucent_01");    //"South Central Male" />
                sPeds.Add("a_m_m_soucent_02");    //"South Central Male 2" />
                sPeds.Add("a_m_m_soucent_03");    //"South Central Male 3" />
                sPeds.Add("a_m_m_soucent_04");    //"South Central Male 4" />
                sPeds.Add("a_m_o_soucent_01");    //"South Central Old Male" />
                sPeds.Add("a_m_o_soucent_02");    //"South Central Old Male 2" />
                sPeds.Add("a_m_o_soucent_03");    //"South Central Old Male 3" />
                sPeds.Add("a_m_y_soucent_01");    //"South Central Young Male" />
                sPeds.Add("a_m_y_soucent_02");    //"South Central Young Male 2" />
                sPeds.Add("a_m_y_soucent_03");    //"South Central Young Male 3" />
                sPeds.Add("a_m_y_soucent_04");    //"South Central Young Male 4" />
            }       //South Central
            else if (iRando == 26)
            {
                sPeds.Add("a_f_m_tourist_01");    //"Tourist Female" />
                sPeds.Add("a_f_y_tourist_01");    //"Tourist Young Female" />
                sPeds.Add("a_f_y_tourist_02");    //"Tourist Young Female 2" />
                sPeds.Add("a_m_m_tourist_01");    //"Tourist Male" />
            }       //Tourist 
            else if (iRando == 27)
            {
                sPeds.Add("a_m_m_paparazzi_01");    //"Paparazzi Male" />
                sPeds.Add("s_f_y_bartender_01");    //"Bartender" />
                sPeds.Add("cs_bankman");    //"Bank Manager" />
                sPeds.Add("mp_s_m_armoured_01");    //"Armoured Van Security Male" />
                sPeds.Add("mp_f_cardesign_01");    //"Office Garage Mechanic (Female)" />
                sPeds.Add("mp_g_m_pros_01");    //"Pros" />
                sPeds.Add("mp_m_securoguard_01");    //"Securoserve Guard (Male)" />
                sPeds.Add("mp_m_shopkeep_01");    //"Shopkeeper (Male)" />
                sPeds.Add("mp_f_bennymech_01");    //"Benny Mechanic (Female)" />
                sPeds.Add("s_f_y_airhostess_01");    //"Air Hostess" />
                sPeds.Add("s_f_m_fembarber");    //"Barber Female" />
                sPeds.Add("s_f_y_casino_01");    //"Casino Staff" />
                sPeds.Add("s_f_y_factory_01");    //"Factory Worker Female" />
                sPeds.Add("s_f_y_hooker_01");    //"Hooker" />
                sPeds.Add("s_f_y_hooker_02");    //"Hooker 2" />
                sPeds.Add("s_f_y_hooker_03");    //"Hooker 3" />
                sPeds.Add("s_f_y_scrubs_01");    //"Hospital Scrubs Female" />
                sPeds.Add("s_f_m_maid_01");    //"Maid" />
                sPeds.Add("s_f_y_migrant_01");    //"Migrant Female" />
                sPeds.Add("s_f_m_sweatshop_01");    //"Sweatshop Worker" />
                sPeds.Add("s_f_y_sweatshop_01");    //"Sweatshop Worker Young" />
                sPeds.Add("s_f_y_clubbar_01");    //"Club Bartender Female" />
                sPeds.Add("s_m_m_armoured_01");    //"Armoured Van Security" />
                sPeds.Add("s_m_m_armoured_02");    //"Armoured Van Security 2" />
                sPeds.Add("s_m_y_autopsy_01");    //"Autopsy Tech" />
                sPeds.Add("s_m_m_autoshop_01");    //"Autoshop Worker" />
                sPeds.Add("s_m_m_autoshop_02");    //"Autoshop Worker 2" />
                sPeds.Add("s_m_y_barman_01");    //"Barman" />
                sPeds.Add("s_m_m_cntrybar_01");    //"Bartender (Rural)" />
                sPeds.Add("s_m_m_bouncer_01");    //"Bouncer" />
                sPeds.Add("s_m_y_busboy_01");    //"Busboy" />
                sPeds.Add("s_m_y_casino_01");    //"Casino Staff" />
                sPeds.Add("s_m_y_chef_01");    //"Chef" />
                sPeds.Add("s_m_m_chemsec_01");    //"Chemical Plant Security" />
                sPeds.Add("s_m_m_ccrew_01");    //"Crew Member" />
                sPeds.Add("s_m_m_dockwork_01");    //"Dock Worker" />
                sPeds.Add("s_m_y_dockwork_01");    //"Dock Worker" />
                sPeds.Add("s_m_m_doctor_01");    //"Doctor" />
                sPeds.Add("s_m_y_doorman_01");    //"Doorman" />
                sPeds.Add("s_m_y_airworker");    //"Air Worker Male" />
                sPeds.Add("s_m_y_dwservice_01");    //"DW Airport Worker" />
                sPeds.Add("s_m_y_dwservice_02");    //"DW Airport Worker 2" />
                sPeds.Add("s_m_y_factory_01");    //"Factory Worker Male" />
                sPeds.Add("s_m_m_gaffer_01");    //"Gaffer" />
                sPeds.Add("s_m_y_garbage");    //"Garbage Worker" />
                sPeds.Add("s_m_m_gardener_01");    //"Gardener" />
                sPeds.Add("s_m_y_grip_01");    //"Grip" />
                sPeds.Add("s_m_m_hairdress_01");    //"Hairdresser Male" />
                sPeds.Add("s_m_m_janitor");    //"Janitor" />
                sPeds.Add("s_m_m_lifeinvad_01");    //"Life Invader Male" />
                sPeds.Add("s_m_m_linecook");    //"Line Cook" />
                sPeds.Add("s_m_m_lsmetro_01");    //"LS Metro Worker Male" />
                sPeds.Add("s_m_y_xmech_01");    //"Mechanic" />
                sPeds.Add("s_m_m_migrant_01");    //"Migrant Male" />
                sPeds.Add("s_m_y_pestcont_01");    //"Pest Control" />
                sPeds.Add("s_m_m_postal_01");    //"Postal Worker Male" />
                sPeds.Add("s_m_m_postal_02");    //"Postal Worker Male 2" />
                sPeds.Add("s_m_y_shop_mask");    //"Mask Salesman" />
                sPeds.Add("s_m_m_scientist_01");    //"Scientist" />
                sPeds.Add("s_m_m_security_01");    //"Security Guard" />
                sPeds.Add("s_m_m_strvend_01");    //"Street Vendor" />
                sPeds.Add("s_m_y_strvend_01");    //"Street Vendor Young" />
                sPeds.Add("s_m_m_gentransport");    //"Transport Worker Male" />
                sPeds.Add("s_m_m_trucker_01");    //"Trucker Male" />
                sPeds.Add("s_m_m_ups_01");    //"UPS Driver" />
                sPeds.Add("s_m_m_ups_02");    //"UPS Driver 2" />
                sPeds.Add("s_m_y_uscg_01");    //"US Coastguard" />
                sPeds.Add("s_m_y_valet_01");    //"Valet" />
                sPeds.Add("s_m_y_waiter_01");    //"Waiter" />
                sPeds.Add("s_m_y_winclean_01");    //"Window Cleaner" />
                sPeds.Add("s_m_y_clubbar_01");    //"Club Bartender Male" />
                sPeds.Add("s_m_y_waretech_01");    //"Warehouse Technician" />
                sPeds.Add("u_f_m_casinocash_01");    //"Casino Cashier" />
                sPeds.Add("u_f_m_casinoshop_01");    //"Casino shop owner" />
                sPeds.Add("u_m_m_bankman");    //"Bank Manager Male" />
                sPeds.Add("u_m_m_bikehire_01");    //"Bike Hire Guy" />
                sPeds.Add("u_m_y_burgerdrug_01");    //"Burger Drug Worker" />
                sPeds.Add("u_m_y_gunvend_01");    //"Gun Vendor" />
                sPeds.Add("u_m_m_jewelsec_01");    //"Jeweller Security" />
                sPeds.Add("u_m_y_paparazzi");    //"Paparazzi Young Male" />
                sPeds.Add("u_m_y_tattoo_01");    //"Tattoo Artist" />

            }       //Workers
            else if (iRando == 28)
            {
                sPeds.Add("a_m_y_dhill_01");    //"Downhill Cyclist" />
                sPeds.Add("a_m_y_jetski_01");    //"Jetskier" />
                sPeds.Add("a_m_y_motox_01");    //"Motocross Biker" />
                sPeds.Add("a_m_y_motox_02");    //"Motocross Biker 2" />
                sPeds.Add("a_m_y_roadcyc_01");    //"Road Cyclist" />
                sPeds.Add("u_m_y_cyclist_01");    //"Cyclist Male" />
                sPeds.Add("u_m_y_sbike");    //"Sports Biker" />
            }       //Sports
            else if (iRando == 29)
            {
                sPeds.Add("a_m_y_breakdance_01");    //"Breakdancer Male" />
                sPeds.Add("a_m_y_gay_01");    //"Gay Male" />
                sPeds.Add("a_m_y_gay_02");    //"Gay Male 2" />
                sPeds.Add("a_m_m_tranvest_01");    //"Transvestite Male" />
                sPeds.Add("a_m_m_tranvest_02");    //"Transvestite Male 2" />
                sPeds.Add("csb_bride");    //"Bride" />
                sPeds.Add("s_m_m_movalien_01");    //"Alien" />
                sPeds.Add("s_m_y_mime");    //"Mime Artist" />
                sPeds.Add("s_m_y_clown_01");    //"Clown" />
                sPeds.Add("s_m_o_busker_01");    //"Busker" />
                sPeds.Add("s_m_m_mariachi_01");    //"Mariachi" />
                sPeds.Add("s_m_m_movspace_01");    //"Movie Astronaut" />
                sPeds.Add("s_m_y_prisoner_01");    //"Prisoner" />
                sPeds.Add("s_m_y_prismuscl_01");    //"Prisoner (Muscular)" />
                sPeds.Add("s_m_y_robber_01");    //"Robber" />
                sPeds.Add("s_m_m_strperf_01");    //"Street Performer" />
                sPeds.Add("s_m_m_strpreach_01");    //"Street Preacher" />
                sPeds.Add("u_f_y_spyactress");    //"Spy Actress" />
                sPeds.Add("u_m_y_imporage");    //"Impotent Rage" />
                sPeds.Add("u_m_y_pogo_01");    //"Pogo the Monkey" />
                sPeds.Add("u_m_y_prisoner_01");    //"Prisoner" />
                sPeds.Add("u_m_y_rsranger_01");    //"Republican Space Ranger" />
                sPeds.Add("u_m_y_zombie_01");    //"Zombie" />
            }       //Novalty
            else if (iRando == 30)
            {
                sPeds.Add("a_m_m_hasjew_01");    //"Hasidic Jew Male" />
                sPeds.Add("a_m_y_hasjew_01");    //"Hasidic Jew Young Male" />
            }       //Hasidic
            else if (iRando == 31)
            {
                sPeds.Add("mp_m_fibsec_01");    //"FIB Security" />
                sPeds.Add("s_m_m_fiboffice_01");    //"FIB Office Worker" />
                sPeds.Add("s_m_m_fiboffice_02");    //"FIB Office Worker 2" />
                sPeds.Add("s_m_m_fibsec_01");    //"FIB Security" />
                sPeds.Add("s_m_m_highsec_01");    //"High Security" />
                sPeds.Add("s_m_m_highsec_02");    //"High Security 2" />
                sPeds.Add("s_m_m_ciasec_01");    //"IAA Security" />
                sPeds.Add("u_m_m_doa_01");    //"DOA Man" />
            }       //Fib
            else if (iRando == 32)
            {
                sPeds.Add("mp_f_helistaff_01");    //"Heli-Staff Female" />
                sPeds.Add("s_m_m_pilot_01");    //"Pilot" />
                sPeds.Add("s_m_y_pilot_01");    //"Pilot" />
                sPeds.Add("s_m_m_pilot_02");    //"Pilot 2" />
            }       //Pilots
            else if (iRando == 33)
            {
                //sPeds.Add("mp_m_avongoon");    //"Avon Goon" />
                sPeds.Add("mp_m_bogdangoon");    //"Bogdan Goon" />
                                                 //sPeds.Add("s_m_y_westsec_01");    //"Duggan Secruity" />
            }       //MP Goons
            else if (iRando == 34)
            {
                sPeds.Add("mp_f_stripperlite");    //"Stripper Lite (Female)" />
                sPeds.Add("s_f_y_stripper_01");    //"Stripper" />
                sPeds.Add("s_f_y_stripper_02");    //"Stripper 2" />
                sPeds.Add("s_f_y_stripperlite");    //"Stripper Lite" />
                sPeds.Add("u_f_y_danceburl_01");    //"Female Club Dancer (Burlesque)" />
                sPeds.Add("u_f_y_dancelthr_01");    //"Female Club Dancer (Leather)" />
                sPeds.Add("u_f_y_dancerave_01");    //"Female Club Dancer (Rave)" />
                sPeds.Add("u_m_y_danceburl_01");    //"Male Club Dancer (Burlesque)" />
                sPeds.Add("u_m_y_dancelthr_01");    //"Male Club Dancer (Leather)" />
                sPeds.Add("u_m_y_dancerave_01");    //"Male Club Dancer (Rave)" />
            }       //Dancers
            else if (iRando == 35)
            {
                sPeds.Add("mp_f_cocaine_01");    //"Biker Cocaine Female" />
                sPeds.Add("mp_m_cocaine_01");    //"Biker Cocaine Male" />
                sPeds.Add("mp_f_counterfeit_01");    //"Biker Counterfeit Female" />
                sPeds.Add("mp_m_counterfeit_01");    //"Biker Counterfeit Male" />
                sPeds.Add("mp_f_forgery_01");    //"Biker Forgery Female" />
                sPeds.Add("mp_m_forgery_01");    //"Biker Forgery Male" />
                sPeds.Add("mp_f_meth_01");    //"Biker Meth Female" />
                sPeds.Add("mp_m_meth_01");    //"Biker Meth Male" />
                sPeds.Add("mp_f_weed_01");    //"Biker Weed Female" />
                sPeds.Add("mp_m_weed_01");    //"Biker Weed Male" />
            }       //Biker Biz
            else if (iRando == 36)
            {

                sPeds.Add("s_m_y_ranger_01");    //"Ranger Male" />
                sPeds.Add("s_f_y_ranger_01");    //"Ranger Female" />
                sPeds.Add("s_m_y_sheriff_01");    //"Sheriff Male" />
                sPeds.Add("s_f_y_sheriff_01");    //"Sheriff Female" />
                sPeds.Add("s_m_y_hwaycop_01");    //"Highway Cop" />
                sPeds.Add("s_m_y_cop_01");    //"Cop Male" />
                sPeds.Add("s_f_y_cop_01");    //"Cop Female" />
            }       //Cops
            else if (iRando == 37)
            {
                sPeds.Add("a_c_chimp");    //"Chimp" />
            }       //Pogo the monkey--Dont use low lod
            else if (iRando == 38)
            {
                sPeds.Add("a_m_y_busicas_01");    //"Business Casual" />
                sPeds.Add("a_m_m_business_01");    //"Business Male" />
                sPeds.Add("a_m_y_business_01");    //"Business Young Male" />
                sPeds.Add("a_m_y_business_02");    //"Business Young Male 2" />
                sPeds.Add("a_m_y_business_03");    //"Business Young Male 3" />
                sPeds.Add("a_m_y_smartcaspat_01");    //"Formel Casino Guests" />
            }       //Suits Male
            else if (iRando == 39)
            {
                sPeds.Add("mp_m_g_vagfun_01");    //"Vagos Funeral" />
            }       //Vargos
            else if (iRando == 40)
            {
                sPeds.Add("a_m_y_motox_01");    //"Motocross Biker" />
                sPeds.Add("a_m_y_motox_02");    //"Motocross Biker 2" />
            }       //Racist - Cuttin corners F1
            else if (iRando == 41)
            {
                sPeds.Add("a_m_y_jetski_01");    //"Jetskier" />
            }       //Racist - Jet ski
            else if (iRando == 42)
            {
                sPeds.Add("a_m_y_cyclist_01");    //"Cyclist Male" />
                sPeds.Add("a_m_y_dhill_01");    //"Downhill Cyclist" />
                sPeds.Add("a_m_y_roadcyc_01");    //"Road Cyclist" />
            }       //Racist - Bike race
            else if (iRando == 43)
            {
                sPeds.Add("s_m_y_armymech_01");    //"Army Mechanic" />
                sPeds.Add("s_m_y_blackops_01");    //"Black Ops Soldier" />
                sPeds.Add("s_m_y_blackops_02");    //"Black Ops Soldier 2" />
                sPeds.Add("s_m_y_blackops_03");    //"Black Ops Soldier 3" />
                sPeds.Add("s_m_m_marine_01");    //"Marine" />
                sPeds.Add("s_m_m_marine_02");    //"Marine 2" />
                sPeds.Add("s_m_y_marine_01");    //"Marine Young" />
                sPeds.Add("s_m_y_marine_02");    //"Marine Young 2" />
                sPeds.Add("s_m_y_marine_03");    //"Marine Young 3" />
            }       //Racist - Havoc
            else if (iRando == 44)
            {
                sPeds.Add("a_m_y_motox_01");    //"Motocross Biker" />
                sPeds.Add("a_m_y_motox_02");    //"Motocross Biker 2" />
                sPeds.Add("g_f_y_vagos_01");    //"Vagos Female" />
                sPeds.Add("g_f_y_lost_01");    //"The Lost MC Female" />
                sPeds.Add("g_m_y_lost_01");    //"The Lost MC Male" />
                sPeds.Add("g_m_y_lost_02");    //"The Lost MC Male 2" />
                sPeds.Add("g_m_y_lost_03");    //"The Lost MC Male 3" />
                sPeds.Add("a_m_m_mlcrisis_01");    //"Midlife Crisis Casino Bikers" />
                sPeds.Add("mp_m_exarmy_01");    //"Ex-Army Male" />
            }       //Racist - Motobikes
            else if (iRando == 45)
            {
                sPeds.Add("a_f_y_beach_01");    //"Beach Young Female" />
                sPeds.Add("a_m_m_beach_01");    //"Beach Male" />
                sPeds.Add("a_m_m_beach_02");    //"Beach Male 2" />
                sPeds.Add("a_m_y_beach_01");    //"Beach Young Male" />
                sPeds.Add("a_m_y_beach_02");    //"Beach Young Male 2" />
                sPeds.Add("a_m_y_beach_03");    //"Beach Young Male 3" />
            }       //Racist - Yachts
            else if (iRando == 46)
            {
                sPeds.Add("a_m_m_golfer_01");    //"Golfer Male" />
                sPeds.Add("a_m_y_golfer_01");    //"Golfer Young Male" />
                sPeds.Add("a_f_y_golfer_01");    //"Golfer Young Female" />
            }       //golf
            else if (iRando == 47)
            {
                sPeds.Add("g_m_m_chemwork_01");    //"Chemical Plant Worker" />
                sPeds.Add("mp_f_meth_01");    //"Biker Meth Female" /> 
                sPeds.Add("mp_m_meth_01");    //"Biker Meth Male" />
            }       //industry workers
            else if (iRando == 48)
            {
                sPeds.Add("s_m_y_swat_01");    //"SWAT" />
                sPeds.Add("s_m_m_marine_01");    //"Marine" />
                sPeds.Add("s_m_m_marine_02");    //"Marine 2" />
                sPeds.Add("s_m_y_marine_01");    //"Marine Young" />
                sPeds.Add("s_m_y_marine_02");    //"Marine Young 2" />
                sPeds.Add("s_m_y_marine_03");    //"Marine Young 3" />
                sPeds.Add("s_m_y_blackops_01");    //"Black Ops Soldier" />
                sPeds.Add("s_m_y_blackops_02");    //"Black Ops Soldier 2" />
                sPeds.Add("s_m_y_blackops_03");    //"Black Ops Soldier 3" />
            }       //Black opps
            else if (iRando == 49)
            {
                sPeds.Add("s_f_y_baywatch_01");    //"Baywatch Female" />
                sPeds.Add("s_m_y_armymech_01");    //"Army Mechanic" />
                sPeds.Add("s_m_y_baywatch_01");    //"Baywatch Male" />
                sPeds.Add("csb_trafficwarden");    //"Traffic Warden" />
                sPeds.Add("s_m_y_fireman_01");    //"Fireman Male" />
                sPeds.Add("s_m_m_paramedic_01");    //"Paramedic" />
                sPeds.Add("s_m_m_prisguard_01");    //"Prison Guard" />
            }       //Random Services
            else if (iRando == 50)
            {
                sPeds.Add("a_m_m_mexlabor_01");    //"Mexican Labourer" />
                sPeds.Add("s_m_y_construct_01");    //"construction Worker" />
                sPeds.Add("s_m_y_construct_02");    //"construction Worker 2" />
                sPeds.Add("s_m_m_lathandy_01");    //"Latino Handyman Male" />
            }       //construction
            else if (iRando == 51)
            {
                sPeds.Add("a_f_m_beach_01");    //"Beach Female" />
                sPeds.Add("A_F_Y_Beach_02");
                sPeds.Add("a_f_y_beach_01");    //"Beach Young Female" />
                sPeds.Add("a_m_m_beach_01");    //"Beach Male" />
                sPeds.Add("a_m_m_beach_02");    //"Beach Male 2" />
                sPeds.Add("a_m_y_beach_01");    //"Beach Young Male" />
                sPeds.Add("a_m_y_beach_02");    //"Beach Young Male 2" />
                sPeds.Add("a_m_y_beach_03");    //"Beach Young Male 3" />
                sPeds.Add("a_m_m_malibu_01");    //"Malibu Male" />
                sPeds.Add("a_m_y_sunbathe_01");    //"Sunbather Male" />
                sPeds.Add("a_m_y_hippy_01");    //"Hippie Male" />
                sPeds.Add("a_f_y_hippie_01");    //"Hippie Female" />
                sPeds.Add("a_m_y_beachvesp_01");    //"Vespucci Beach Male" />
                sPeds.Add("a_m_y_beachvesp_02");    //"Vespucci Beach Male 2" />
                sPeds.Add("u_m_y_party_01");    //"Partygoer" />
            }       //YachtParty
            else if (iRando == 52)
            {
                sPeds.Add("G_M_M_CartelGuards_01");
                sPeds.Add("G_M_M_CartelGuards_02");

            }       //CayoMob
            else
            {
                sPeds.Add("a_m_m_tramp_01");    //"Tramp Male" />
            }


            if (sPeds.Count > 0)
            {
                if (sPeds.Count > 1)
                    sPedds = sPeds[RandInt(0, sPeds.Count - 1)];
                else
                    sPedds = sPeds[0];
            }
            else
                sPedds = "a_m_m_tramp_01";

            return sPedds;
        }
        public Ped NPCSpawn(string sPed, Vector3 vLocal, float fAce, int iAim, int iHeal, int iList, int iTask, int iSeat, Vehicle vMyCar, int iGun, bool bBlip, bool bFightPlayer, int iNp, int iFree)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("NPCSpawn, sPed == " + sPed + ", iHeal == " + iHeal + ", iList == " + iList + ", iTask == " + iTask + ", iSeat == " + iSeat + ", iNp == " + iNp + ", iFree == " + iFree, tEx);

            Ped BuildPed = null;

            var model = new Model(sPed);
            model.Request();    // Check if the model is valid
            if (model.IsInCdImage && model.IsValid)
            {
                while (!model.IsLoaded)
                    Wait(1);

                BuildPed = Function.Call<Ped>(Hash.CREATE_PED, 4, model, vLocal.X, vLocal.Y, vLocal.Z, fAce, false, false);
                Function.Call(Hash.SET_MODEL_AS_NO_LONGER_NEEDED, model.Hash);

                if (BuildPed.Exists())
                {
                    BuildPed.Accuracy = iAim;
                    BuildPed.MaxHealth = iHeal;
                    BuildPed.Health = iHeal;
                    if (iList == 1)
                        PedList_01.Add(new Ped(BuildPed.Handle));
                    else if (iList == 2)
                        PedList_02.Add(new Ped(BuildPed.Handle));
                    else
                        PedList_03.Add(new Ped(BuildPed.Handle));

                    if (iSeat > 0)
                    {
                        WarptoAnyVeh(vMyCar, BuildPed, iSeat, bFightPlayer);
                        if (bFightPlayer)
                        {
                            if (bBlip)
                                PedBlimp(BuildPed, BlipColor.Red3, 0.75f, false, false);
                        }
                        else
                        {
                            if (bBlip)
                                PedBlimp(BuildPed, BlipColor.BlueLight, 0.75f, false, false);
                        }

                    }
                    else
                    {
                        if (bFightPlayer)
                        {
                            if (bBlip)
                                PedBlimp(BuildPed, BlipColor.Red3, 0.75f, false, false);
                            BuildPed.IsEnemy = true;
                            BuildPed.CanBeTargette﻿d﻿ = true;
                            BuildPed.RelationshipGroup = AttackingNPCs;
                            Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, BuildPed, 0, true);
                            Function.Call(Hash.TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS, BuildPed, true);
                            BuildPed.Task.FightAgainst(Game.Player.Character);
                            BuildPed.AlwaysKeepTask = true;
                            ArmNpcMid(BuildPed);
                            ArmNpcSmall(BuildPed);
                        }
                        else
                        {
                            if (bBlip)
                                PedBlimp(BuildPed, BlipColor.BlueLight, 0.75f, false, false);
                        }
                    }

                    if (iNp > 0)
                    {
                        if (iNp == 1)
                            Npc_01 = BuildPed;
                        else if (iNp == 2)
                            Npc_02 = BuildPed;
                        else if (iNp == 3)
                            Npc_03 = BuildPed;
                        else if (iNp == 4)
                            Npc_04 = BuildPed;
                        else if (iNp == 5)
                            Npc_05 = BuildPed;
                        else if (iNp == 6)
                            Npc_06 = BuildPed;
                        else if (iNp == 7)
                            Npc_07 = BuildPed;
                        else if (iNp == 8)
                            FUbarDrv = BuildPed;
                    }

                    if (iGun > 0)
                        GunningIt(BuildPed, iGun);

                    if (iTask > 0)
                        NpcTasks(BuildPed, iTask);

                    if (iFree > 0)
                    {
                        Script.Wait(100);
                        if (iFree == 1)
                            OnlinePlayers(BuildPed, true, false);
                        else if (iFree == 2)
                            OnlinePlayers(BuildPed, false, false);
                        else if (iFree == 3)
                            OnlinePlayers(BuildPed, true, true);
                        else if (iFree == 4)
                            OnlinePlayers(BuildPed, false, true);
                    }
                }
                else
                    BuildPed = null;
            }
            else
                BuildPed = null;

            return BuildPed;
        }
        private void RandPlayerTypes(Ped Pedx, bool bMale)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("RandPlayerTypes, bMale == " + bMale, tEx);

            int shapeFirstID = 0;
            int shapeSecondID = 0;
            int shapeThirdID = 0;
            int skinFirstID = 1;
            int skinSecondID = 1;
            int skinThirdID = 1;
            float shapeMix = 0.0f;
            float skinMix = 0.0f;
            float thirdMix = 0.0f;
            bool isParent = false;

            if (bMale)
            {
                shapeFirstID = RandInt(0, 20);
                shapeSecondID = RandInt(0, 20);
                shapeThirdID = shapeFirstID;
                skinFirstID = shapeFirstID;
                skinSecondID = shapeSecondID;
                skinThirdID = shapeThirdID;
            }
            else
            {
                shapeFirstID = RandInt(21, 41);
                shapeSecondID = RandInt(21, 41);
                shapeThirdID = shapeFirstID;
                skinFirstID = shapeFirstID;
                skinSecondID = shapeSecondID;
                skinThirdID = shapeThirdID;
            }
            shapeMix = RandFlow(-0.9f, 0.9f);
            skinMix = RandFlow(0.9f, 0.99f);
            thirdMix = RandFlow(-0.9f, 0.9f);

            Function.Call(Hash.SET_PED_HEAD_BLEND_DATA, Pedx.Handle, shapeFirstID, shapeSecondID, shapeThirdID, skinFirstID, skinSecondID, skinThirdID, shapeMix, skinMix, thirdMix, isParent);

            int iFeature = 12;
            while (iFeature > 0)
            {
                iFeature = iFeature - 1;
                int iColour = 0;
                int iChange = RandInt(0, Function.Call<int>(Hash._GET_NUM_HEAD_OVERLAY_VALUES, iFeature));
                float fVar = RandFlow(0.45f, 0.99f);
                if (iFeature == 0)//Blemishes
                {
                    iChange = RandInt(0, iChange);
                }
                else if (iFeature == 1)//Facial Hair
                {
                    if (bMale)
                        iChange = RandInt(0, iChange);
                    else
                        iChange = 255;
                    iColour = 1;
                }
                else if (iFeature == 2)//Eyebrows
                {
                    iChange = RandInt(0, iChange);
                    iColour = 1;
                }
                else if (iFeature == 3)//Ageing
                {
                    iChange = 255;
                }
                else if (iFeature == 4)//Makeup
                {
                    if (RandInt(0, 50) < 40)
                    {
                        iChange = RandInt(0, iChange);
                    }
                    else
                        iChange = 255;
                }
                else if (iFeature == 5)//Blush
                {
                    if (!bMale)
                        iChange = RandInt(0, iChange);
                    else
                        iChange = 255;
                    iColour = 2;
                }
                else if (iFeature == 6)//Complexion
                {
                    iChange = RandInt(0, iChange);
                }
                else if (iFeature == 7)//Sun Damage
                {
                    iChange = 255;
                }
                else if (iFeature == 8)//Lipstick
                {
                    if (!bMale)
                        iChange = RandInt(0, iChange);
                    else
                        iChange = 255;
                    iColour = 2;
                }
                else if (iFeature == 9)//Moles/Freckles
                {
                    iChange = RandInt(0, iChange);
                }
                else if (iFeature == 10)//Chest Hair
                {
                    if (bMale)
                        iChange = RandInt(0, iChange);
                    else
                        iChange = 255;
                    iColour = 1;
                }
                else if (iFeature == 11)//Body Blemishes
                {
                    iChange = RandInt(0, iChange);
                }
                Function.Call(Hash.SET_PED_HEAD_OVERLAY, Pedx.Handle, iFeature, iChange, fVar);

                if (iColour > 0)
                    Function.Call(Hash._SET_PED_HEAD_OVERLAY_COLOR, Pedx.Handle, iFeature, iColour, RandInt(0, 64), 0);

                int iCount = Function.Call<int>(Hash.GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS, Game.Player.Character, 2);
                int iAm = RandInt(1, iCount);
                while (iAm == 24)
                    iAm = RandInt(1, iCount);
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 2, iAm, 0, 2);//hair
            }
            int iHair = RandInt(0, Function.Call<int>(Hash._GET_NUM_HAIR_COLORS));
            int iHair2 = RandInt(0, Function.Call<int>(Hash._GET_NUM_HAIR_COLORS));
            Function.Call(Hash._SET_PED_HAIR_COLOR, Pedx.Handle, iHair, iHair2);
        }
        private void OnlinePlayers(Ped Pedx, bool bMale, bool bGreenSuit)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("OnlinePlayers, bMale == " + bMale + ", bGreenSuit == " + bGreenSuit, tEx);

            bool bNoCloths = false;

            if (bMale)
            {
                if (bGreenSuit)
                {
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 1, 134, 8, 2);//mask
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 2, 0, 0, 2);//hair
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 3, 3, 0, 2);//Torso
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 4, 106, 8, 2);//Legs
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 5, 0, 0, 2);//Hands
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 6, 83, 8, 2);//shoes
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 7, 0, 0, 2);//Scarf
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 8, -1, 0, 2);//AccTop
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 9, 0, 0, 2);//Armor
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 10, 0, 0, 2);//Emb--not used
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 11, 274, 8, 2);//Top2
                }
                else
                {
                    if (Directory.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Outfit/"))
                    {
                        string sNamez = "FreeMale";
                        sWardrobe.Clear();
                        string[] sWrite = Directory.GetFiles("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Outfit/");
                        for (int i = 0; i < sWrite.Count(); i++)
                        {
                            string sting = sWrite[i];
                            if (sting.Contains(sNamez))
                            {
                                int iNum = sting.LastIndexOf("/") + 1;
                                sWardrobe.Add(sting.Substring(iNum));
                            }
                        }
                        int iWriteX = sWardrobe.Count;
                        if (iWriteX > 0)
                        {
                            iWriteX = RandInt(1, iWriteX - 1);
                            WardOutPut(sWardrobe[iWriteX], Pedx);
                        }
                        else
                            bNoCloths = true;
                    }
                    else
                        bNoCloths = true;

                    if (bNoCloths)
                    {
                        int RanChar = RandInt(1, 5);
                        if (RanChar == 1)
                        {
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 1, 0, 0, 2);//mask
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 2, 12, 4, 2);//hair
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 3, 1, 0, 2);//Torso
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 4, 1, 5, 2);//Legs
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 5, 0, 0, 2);//Hands
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 6, 65, 3, 2);//shoes
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 7, 0, 0, 2);//Scarf
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 8, 22, 4, 2);//AccTop
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 9, 0, 0, 2);//Armor
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 10, 0, 0, 2);//Emb--not used
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 11, 11, 0, 2);//Top2
                        }
                        else if (RanChar == 2)
                        {
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 1, 0, 0, 2);//mask
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 2, 14, 3, 2);//hair
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 3, 0, 0, 2);//Torso
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 4, 17, 0, 2);//Legs
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 5, 23, 4, 2);//Hands
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 6, 40, 1, 2);//shoes
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 7, 0, 0, 2);//Scarf
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 8, 26, 3, 2);//AccTop
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 9, 0, 0, 2);//Armor
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 10, 0, 0, 2);//Emb--not used
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 11, 35, 0, 2);//Top2
                        }
                        else if (RanChar == 3)
                        {
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 1, 147, 0, 2);//mask
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 2, 0, 0, 2);//hair
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 3, 167, 0, 2);//Torso
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 4, 33, 0, 2);//Legs
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 5, 0, 0, 2);//Hands
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 6, 36, 1, 2);//shoes
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 7, 0, 0, 2);//Scarf
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 8, -1, 0, 2);//AccTop
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 9, 0, 0, 2);//Armor
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 10, 0, 0, 2);//Emb--not used
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 11, 289, 0, 2);//Top2
                        }
                        else if (RanChar == 4)
                        {
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 1, 0, 0, 2);//mask
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 2, 11, 4, 2);//hair
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 3, 19, 0, 2);//Torso
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 4, 88, 7, 2);//Legs
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 5, 0, 0, 2);//Hands
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 6, 14, 2, 2);//shoes
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 7, 0, 0, 2);//Scarf
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 8, -1, 0, 2);//AccTop
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 9, 0, 0, 2);//Armor
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 10, 0, 0, 2);//Emb--not used
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 11, 273, 15, 2);//Top2
                        }
                        else
                        {
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 1, 125, 0, 2);//mask
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 2, 0, 0, 2);//hair
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 3, -1, 0, 2);//Torso
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 4, 114, 6, 2);//Legs
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 5, 0, 0, 2);//Hands
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 6, 78, 6, 2);//shoes
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 7, 0, 0, 2);//Scarf
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 8, -1, 0, 2);//AccTop
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 9, 0, 0, 2);//Armor
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 10, 0, 0, 2);//Emb--not used
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 11, 287, 6, 2);//Top2
                        }
                    }
                    RandPlayerTypes(Pedx, bMale);
                }
            }
            else
            {
                if (bGreenSuit)
                {
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 1, 134, 8, 2);//mask
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 2, 0, 0, 2);//hair
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 3, 13, 0, 2);//Torso
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 4, 113, 8, 2);//Legs
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 5, 0, 0, 2);//Hands
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 6, 87, 8, 2);//shoes
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 7, -1, 0, 2);//Scarf
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 8, -1, 0, 2);//AccTop
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 9, 0, 0, 2);//Armor
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 10, 0, 0, 2);//Emb--not used
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 11, 287, 8, 2);//Top2
                }
                else
                {
                    if (Directory.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Outfit/"))
                    {
                        string sNamez = "FreeFemale";
                        sWardrobe.Clear();
                        string[] sWrite = Directory.GetFiles("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Outfit/");
                        for (int i = 0; i < sWrite.Count(); i++)
                        {
                            string sting = sWrite[i];
                            if (sting.Contains(sNamez))
                            {
                                int iNum = sting.LastIndexOf("/") + 1;
                                sWardrobe.Add(sting.Substring(iNum));
                            }
                        }
                        int iWriteX = sWardrobe.Count;
                        if (iWriteX > 0)
                        {
                            iWriteX = RandInt(1, iWriteX - 1);
                            WardOutPut(sWardrobe[iWriteX], Pedx);

                            Function.Call(Hash.SET_PED_PROP_INDEX, Pedx, 2, RandInt(-1, Function.Call<int>(Hash.GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS, Pedx, 2)), RandInt(0, Function.Call<int>(Hash.GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS, Pedx, 2)), true);
                        }
                        else
                            bNoCloths = true;
                    }
                    else
                        bNoCloths = true;

                    if (bNoCloths)
                    {
                        int RanChar = RandInt(1, 5);
                        if (RanChar == 1)
                        {
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 1, 146, 0, 2);//mask
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 2, 0, 0, 2);//hair
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 3, -1, 1, 2);//Torso
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 4, 113, 1, 2);//Legs
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 5, 0, 0, 2);//Hands
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 6, 23, 8, 2);//shoes
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 7, 0, 0, 2);//Scarf
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 8, 0, 0, 2);//AccTop
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 9, 0, 0, 2);//Armor
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 10, 0, 0, 2);//Emb--not used
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 11, 287, 1, 2);//Top2
                        }
                        else if (RanChar == 2)
                        {
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 1, 0, 0, 2);//mask
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 2, 11, 3, 2);//hair
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 3, 169, 12, 2);//Torso
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 4, 93, 4, 2);//Legs
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 5, 0, 0, 2);//Hands
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 6, 3, 0, 2);//shoes
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 7, 0, 0, 2);//Scarf
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 8, -1, 0, 2);//AccTop
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 9, 0, 0, 2);//Armor
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 10, 0, 0, 2);//Emb--not used
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 11, -1, 0, 2);//Top2
                        }
                        else if (RanChar == 3)
                        {
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 1, 0, 0, 2);//mask
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 2, 13, 3, 2);//hair
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 3, -1, 0, 2);//Torso
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 4, 98, 4, 2);//Legs
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 5, 0, 0, 2);//Hands
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 6, 71, 4, 2);//shoes
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 7, 1, 5, 2);//Scarf
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 8, -1, 0, 2);//AccTop
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 9, 0, 0, 2);//Armor
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 10, 0, 0, 2);//Emb--not used
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 11, 254, 4, 2);//Top2
                        }
                        else if (RanChar == 4)
                        {
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 1, 0, 0, 2);//mask
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 2, 10, 1, 2);//hair
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 3, 15, 0, 2);//Torso
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 4, 9, 6, 2);//Legs
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 5, 0, 0, 2);//Hands
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 6, 54, 3, 2);//shoes
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 7, 100, 0, 2);//Scarf
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 8, 36, 1, 2);//AccTop
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 9, 0, 0, 2);//Armor
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 10, 0, 0, 2);//Emb--not used
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 11, 13, 5, 2);//Top2
                        }
                        else
                        {
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 1, 0, 0, 2);//mask
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 2, 2, 3, 2);//hair
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 3, 11, 0, 2);//Torso
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 4, 75, 1, 2);//Legs
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 5, 0, 0, 2);//Hands
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 6, 20, 5, 2);//shoes
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 7, 0, 0, 2);//Scarf
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 8, -1, 0, 2);//AccTop
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 9, 0, 0, 2);//Armor
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 10, 0, 0, 2);//Emb--not used
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx, 11, 208, 4, 2);//Top2
                        }
                    }
                    RandPlayerTypes(Pedx, bMale);
                }
            }
        }
        private void TheYellowCorona(Vector3 Vtech, float fRaid)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("TheYellowCorona", tEx);

            Vector3 Vsp = new Vector3(0.00f, 0.00f, 0.00f);
            int type = 47;

            float posX1 = Vtech.X;
            float posY1 = Vtech.Y;
            float posZ1 = Vtech.Z;
            float posX2 = Vsp.X;
            float posY2 = Vsp.Y;
            float posZ2 = Vsp.Z;

            int red = 255;
            int green = 255;
            int blue = 0;
            int alpha = 255;
            int reserved = 180;

            int ThisCheck = Function.Call<int>(Hash.CREATE_CHECKPOINT, type, posX1, posY1, posZ1, posX2, posY2, posZ2, fRaid, red, green, blue, alpha, reserved);
            Function.Call(Hash.SET_CHECKPOINT_CYLINDER_HEIGHT, ThisCheck, fRaid / 2, fRaid / 2, fRaid);
            iTargetList.Add(ThisCheck);
        }
        private void NpcTasks(Ped Peddy, int iTask)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("NpcTasks, iTask == " + iTask, tEx);

            if (iTask == 1)
            {
                Peddy.Task.Cower(-1);
            }             //Bank Rob Customer
            else if (iTask == 2)
            {
                Function.Call(Hash.TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS, Peddy, true);
                Getaway_Robbers(Peddy, iTask);
            }        //Bank Robbers
            else if (iTask == 3)
            {
                Function.Call(Hash.TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS, Peddy, true);
                Getaway_Robbers(Peddy, iTask);
            }        //Bank Robbers
            else if (iTask == 4)
            {
                Function.Call(Hash.TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS, Peddy, true);
                Getaway_Robbers(Peddy, iTask);
            }        //Bank Robbers
            else if (iTask == 5)
            {
                Convicts_KrishaLine(Peddy, true);
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 3, 0, 0, 2);
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 4, 0, 0, 2);
                Function.Call(Hash.SET_PED_PATH_CAN_USE_CLIMBOVERS, Peddy, true);
                Function.Call(Hash.SET_PED_PATH_CAN_USE_LADDERS, Peddy, true);
                Function.Call(Hash.SET_PED_PATH_CAN_DROP_FROM_HEIGHT, Peddy, true);
            }        //Convicts leader
            else if (iTask == 6)
            {
                Convicts_KrishaLine(Peddy, false);
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 3, 0, 0, 2);
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, 4, 0, 0, 2);
                Function.Call(Hash.SET_PED_PATH_CAN_USE_CLIMBOVERS, Peddy, true);
                Function.Call(Hash.SET_PED_PATH_CAN_USE_LADDERS, Peddy, true);
                Function.Call(Hash.SET_PED_PATH_CAN_DROP_FROM_HEIGHT, Peddy, true);
            }        //Convicts
            else if (iTask == 7)
            {
                Function.Call(Hash.SET_PED_PATH_CAN_USE_CLIMBOVERS, Peddy, true);
                Function.Call(Hash.SET_PED_PATH_CAN_USE_LADDERS, Peddy, true);
                Function.Call(Hash.SET_PED_PATH_CAN_DROP_FROM_HEIGHT, Peddy, true);
            }        //Mobility
            else if (iTask == 8)
            {
                Function.Call(Hash.SET_PED_PATH_CAN_USE_CLIMBOVERS, Peddy, true);
                Function.Call(Hash.SET_PED_PATH_CAN_USE_LADDERS, Peddy, true);
                Function.Call(Hash.SET_PED_PATH_CAN_DROP_FROM_HEIGHT, Peddy, true);
                EnterPlayerVeh(Peddy, 1, RandFlow(1.00f, 2.00f));
            }        //Fubar Passenger 01
            else if (iTask == 9)
            {
                Function.Call(Hash.SET_PED_PATH_CAN_USE_CLIMBOVERS, Peddy, true);
                Function.Call(Hash.SET_PED_PATH_CAN_USE_LADDERS, Peddy, true);
                Function.Call(Hash.SET_PED_PATH_CAN_DROP_FROM_HEIGHT, Peddy, true);
                EnterPlayerVeh(Peddy, 2, RandFlow(1.00f, 2.00f));
            }        //Fubar Passenger 02
            else if (iTask == 10)
            {
                Function.Call(Hash.SET_PED_PATH_CAN_USE_CLIMBOVERS, Peddy, true);
                Function.Call(Hash.SET_PED_PATH_CAN_USE_LADDERS, Peddy, true);
                Function.Call(Hash.SET_PED_PATH_CAN_DROP_FROM_HEIGHT, Peddy, true);
                EnterPlayerVeh(Peddy, 3, RandFlow(1.00f, 2.00f));
            }       //Fubar Passenger 03
            else if (iTask == 11)
            {
                Vector3 V3Me = Function.Call<Vector3>(Hash._0xCBDB9B923CACC92D, VehTrackin_02);
                List<string> SCarz = RandVeh(25);
                string sXCArs = SCarz[RandInt(0, SCarz.Count - 1)];
                VehicleSpawn(sXCArs, V3Me, VehTrackin_02.Heading, false, false, false, false, 7, 0, 0, 3, true);
            }       //Cargo add super car
            else if (iTask == 12)
            {
                Function.Call(Hash.SET_PED_RELATIONSHIP_GROUP_HASH, Peddy, Function.Call<int>(Hash.GET_HASH_KEY, "COUGAR"));
                Peddy.Task.PlayAnimation("creatures@cat@amb@world_cat_sleeping_ground@idle_a", "idle_a", 8.0f, -1, true, 1.0f);
                Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Peddy, 0, true);
                Peddy.AlwaysKeepTask = true;
                Peddy.BlockPermanentEvents = true;
            }       //Fire cat
            else if (iTask == 13)
            {
                Peddy.RelationshipGroup = GroupANPCs;
                PedScenario(Peddy, "WORLD_HUMAN_JOG_STANDING", Peddy.Position, Peddy.Heading, false);
                Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Peddy, 0, true);
            }       //Fire cat owner
            else if (iTask == 14)
            {
                Function.Call(Hash.SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE, Peddy, 1);
                Peddy.CanFlyThroughWindscreen = false;
            }       //Race Drivers
            else if (iTask == 15)
            {
                PedScenario(Peddy, "WORLD_HUMAN_COP_IDLES", Peddy.Position, Peddy.Heading, false);
            }       //Idle Cops
            else if (iTask == 16)
            {
                Peddy.IsEnemy = true;
                Hitman_AddVisionCones(Peddy);
                Peddy.BlockPermanentEvents = true;
            }       //HitMan Mobs
            else if (iTask == 17)
            {
                Peddy.CanBeDraggedOutOfVehicle = false;
                Peddy.BlockPermanentEvents = true;
            }       //MoneyMan Guard
            else if (iTask == 18)
            {
                Peddy.RelationshipGroup = PlayerGroups;
                Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Peddy, 0, true);
                Peddy.Task.FightAgainstHatedTargets(45.00f);
                Function.Call(Hash.SET_PED_COMBAT_MOVEMENT, Peddy, 2);
                Peddy.AlwaysKeepTask = true;
            }       //Water ImportGaurds
            else if (iTask == 19)
            {
                Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Peddy, 0, true);
                Function.Call(Hash.SET_PED_PATH_CAN_USE_CLIMBOVERS, Peddy, true);
                Function.Call(Hash.SET_PED_PATH_CAN_USE_LADDERS, Peddy, true);
                Function.Call(Hash.SET_PED_PATH_CAN_DROP_FROM_HEIGHT, Peddy, true);

                int iRan = RandInt(0, 35);
                if (iRan < 10)
                    Function.Call(Hash.SET_PED_COMBAT_MOVEMENT, Peddy, 0);
                else if (iRan < 30)
                    Function.Call(Hash.SET_PED_COMBAT_MOVEMENT, Peddy, 1);
                else
                    Function.Call(Hash.SET_PED_COMBAT_MOVEMENT, Peddy, 2);
            }       //Water YachtAttacks
            else if (iTask == 20)
            {
                Function.Call(Hash.SET_PED_PATH_CAN_USE_CLIMBOVERS, Peddy, true);
                Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Peddy, 0, true);
                Function.Call(Hash.SET_PED_RANDOM_COMPONENT_VARIATION, Peddy, false);
                BikerRaids_BizzPedsSec(Peddy, iMissionVar_02);
            }       //BikerBizSecurity
            else if (iTask == 21)
            {
                Peddy.Task.PlayAnimation("amb@world_human_stand_fishing@idle_a", "idle_b", 8.00f, -1, true, 1.00f);
                Prop FishRod = BuildProp("prop_fishing_rod_01", Peddy.Position, Vector3.Zero, true, true);
                if (FishRod != null)
                    FishRod.AttachTo(Peddy, Peddy.GetBoneIndex(Bone.SKEL_L_Hand), new Vector3(0.00f, -0.00f, 0.00f), new Vector3(-122.00f, 100.00f, 30.00f));
            }       //Water Phishing
            else if (iTask == 22)
            {
                Peddy.Task.ClearAll();
                Peddy.BlockPermanentEvents = true;
                vFuDest = World.GetNextPositionOnStreet(Game.Player.Character.Position);
                if (Peddy.IsInVehicle())
                {
                    FubarCarX = Peddy.CurrentVehicle;
                    VehicleList_01.Remove(FubarCarX);
                    PedList_03.Remove(Peddy);
                    Peddy.Task.DriveTo(FubarCarX, vFuDest, 3.00f, 35.00f, 536871355);
                    Peddy.CanBeDraggedOutOfVehicle = false;
                    bWeaponMan = true;
                }
                else
                {
                    CleanUpPeds();
                    CleanUpVehicles();

                }
            }       //WeaponsDealer
            else if (iTask == 23)
            {
                Vector3 vpos = VehTrackin_03.Position;
                vpos.Z = vpos.Z + 5.00f;
                FlyAway(Peddy, vpos, 55.00f, 5.00f);
                BeOnOff[1] = true;
            }       //WAter CargoPilot
            else if (iTask == 24)
            {
                float fSpeeds = 25.00f;
                Peddy.Task.ClearAll();
                Vector3 PlayPos = VehTrackin_03.Position;
                Peddy.DrownsInWater = false;
                Function.Call(Hash.SET_PED_PATH_CAN_USE_CLIMBOVERS, Peddy, true);
                Function.Call(Hash.SET_PED_PATH_CAN_USE_LADDERS, Peddy, true);
                Function.Call(Hash.SET_PED_PATH_CAN_DROP_FROM_HEIGHT, Peddy, true);
                Function.Call(Hash.TASK_BOAT_MISSION, Peddy, VehicleList_01[VehicleList_01.Count - 1], 0, 0, PlayPos.X, PlayPos.Y, PlayPos.Z, 4, fSpeeds, 16777216, 5.50f, 7);
            }       //WAter JetskiAttacks
            else if (iTask == 25)
            {
                Peddy.Task.ClearAll();
                Peddy.Task.Wait(-1);
                Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Peddy, 0, true);
                Peddy.AlwaysKeepTask = true;
                Peddy.BlockPermanentEvents = true;
            }       //Wait in vehicle
            else if (iTask == 26)
            {
                Peddy.ApplyDamage(99);
                Peddy.Health = 0;
            }       //DeadNPCs
            else if (iTask == 27)
            {
                if (Peddy.SeatIndex == VehicleSeat.Driver)
                {
                    Peddy.DrivingSpeed = 200.00f;
                    Peddy.DrivingStyle = 0;
                }
                Peddy.RelationshipGroup = GroupBNPCs;
                Peddy.Task.ClearAll();
                if (RandBool(11))
                    Peddy.Task.FightAgainst(Npc_01);
                else
                    Peddy.Task.FightAgainst(Npc_02);
                Peddy.AlwaysKeepTask = true;
                Peddy.CurrentBlip.Color = BlipColor.Red3;
            }       //Attack Npc01/02
            else if (iTask == 28)
            {
                ShowBoating(Peddy, VectorList_01[1], VehTrackin_01, 25.00f, 4194304);
                YachtStuff_BoatToShore();
            }       //Boat taxi
            else if (iTask == 29)
            {
                Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Peddy, 0, true);
                Function.Call(Hash.TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS, Peddy, true);
            }       //Ambuantz
            else if (iTask == 30)
            {
                WarptoAnyVeh(VehicleList_01[VehicleList_01.Count - 1], Peddy, 1, true);
                FlyNShoot(Peddy, VehicleList_01[VehicleList_01.Count - 1], Game.Player.Character);
            }       //CargoCollectHeliPilot
            else if (iTask == 31)
            {
                BbBomb_BombAtractor(Peddy);
            }       //Bbomb Atractor
            else if (iTask == 32)
            {
                Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Peddy, 0, true);
                Function.Call(Hash.TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS, Peddy, true);
                Function.Call(Hash.SET_PED_RANDOM_COMPONENT_VARIATION, Peddy, false);
                BikerRaids_BizzPedsWork(Peddy, iMissionVar_02, false);
            }       //BikerBizFemail
            else if (iTask == 33)
            {
                Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Peddy, 0, true);
                Function.Call(Hash.TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS, Peddy, true);
                Function.Call(Hash.SET_PED_RANDOM_COMPONENT_VARIATION, Peddy, false);
                BikerRaids_BizzPedsWork(Peddy, iMissionVar_02, true);
            }       //BikerBizmail
            else if (iTask == 34)
            {
                Function.Call(Hash.SET_PED_RELATIONSHIP_GROUP_HASH, Peddy, Function.Call<int>(Hash.GET_HASH_KEY, "COUGAR"));
                //Function.Call(Hash.SET_PED_COMBAT_ATTRIBUTES, Peddy, 46, true);
                Peddy.Task.FleeFrom(Game.Player.Character);
                //PedBlimp(Peddy, BlipColor.RedDark, 0.75f, true, false);
            }       //Big shark
            else if (iTask == 35)
            {
                Function.Call(Hash.SET_PED_COMBAT_MOVEMENT, Peddy, 0);
                Function.Call(Hash.SET_PED_RANDOM_COMPONENT_VARIATION, Peddy, false);
                Peddy.Task.FightAgainst(Game.Player.Character);
            }       //Combat - static
            else if (iTask == 36)
            {
                Function.Call(Hash.SET_PED_COMBAT_MOVEMENT, Peddy, 1);
                Function.Call(Hash.SET_PED_RANDOM_COMPONENT_VARIATION, Peddy, false);
                Peddy.Task.FightAgainst(Game.Player.Character);
            }       //Combat - Defence
            else if (iTask == 37)
            {
                Function.Call(Hash.SET_PED_COMBAT_MOVEMENT, Peddy, 2);
                Function.Call(Hash.SET_PED_RANDOM_COMPONENT_VARIATION, Peddy, false);
                Peddy.Task.FightAgainst(Game.Player.Character);
            }       //Combat - Offence
            else if (iTask == 38)
            {
                Peddy.Task.ClearAll();
                if (Peddy.IsInVehicle())
                    Peddy.Task.CruiseWithVehicle(Peddy.CurrentVehicle, 35.00f, 786603);
            }       //Drive RandDest
            else if (iTask == 39)
            {
                Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Peddy, 0, true);
                Peddy.AlwaysKeepTask = true;
                Peddy.BlockPermanentEvents = true;
                OnlinePlayers(Peddy, true, false);
            }       //Drive Playerped M
            else if (iTask == 40)
            {
                Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Peddy, 0, true);
                Peddy.AlwaysKeepTask = true;
                Peddy.BlockPermanentEvents = true;
                OnlinePlayers(Peddy, false, false);
            }       //Drive Playerped F
            else if (iTask == 41)
            {
                Peddy.CanBeTargette﻿d﻿ = false;
                Peddy.AlwaysKeepTask = true;
                Peddy.IsInvincible = true;
                Peddy.Task.PlayAnimation("anim@mini@yacht@bar@drink@idle_a", "idle_a", 1.00f, -1, true, 1.00f);
                Peddy.Task.AchieveHeading(-139.3908f);
            }       //Yacht Staff f
            else if (iTask == 42)
            {
                Peddy.CanBeTargette﻿d﻿ = false;
                Peddy.AlwaysKeepTask = true;
                Peddy.IsInvincible = true;
                ForceAnim(Peddy, "anim@amb@yacht@captain@", "idle", new Vector3(-2085.821f, -1017.94f, 12.7819f), new Vector3(0.00f, 0.00f, 73.96f));
            }       //Yacht Staff m
            else if (iTask == 43)
            {
                Vehicle VPlyTarget = null;
                Vehicle vPlane = VehicleList_01[VehicleList_01.Count - 1];
                if (Game.Player.Character.IsInVehicle())
                    VPlyTarget = Game.Player.Character.CurrentVehicle;
                else
                    VPlyTarget = Game.Player.Character.LastVehicle;
                Function.Call(Hash.TASK_PLANE_MISSION, Peddy, vPlane, VPlyTarget, 0, 0, 0, 0, 6, 0.0f, 0.0f, 180.0f, 1000.0f, -5000.0f);
                Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Peddy, 0, true);
                Peddy.AlwaysKeepTask = true;
                Peddy.BlockPermanentEvents = true;
                vPlane.CurrentBlip.Color = BlipColor.Red;
            }       //DogFighter
            else if (iTask == 44)
            {
                Peddy.Task.ClearAll();
                vFuDest = World.GetNextPositionOnStreet(Game.Player.Character.Position);
                if (Peddy.IsInVehicle())
                {
                    FubarCarX = Peddy.CurrentVehicle;
                    VehicleList_01.Remove(FubarCarX);
                    PedList_03.Remove(Peddy);
                    Peddy.Task.DriveTo(FubarCarX, vFuDest, 3.00f, 35.00f, 536871355);
                    Peddy.CanBeDraggedOutOfVehicle = false;
                    Peddy.AlwaysKeepTask = true;
                    Peddy.BlockPermanentEvents = true;
                    bFubarRide = true;
                }
                else
                {
                    CleanUpPeds();
                    CleanUpVehicles();
                }

            }       //FubarDelivery
            else if (iTask == 45)
            {
                Peddy.Task.ClearAll();
                Peddy.BlockPermanentEvents = true;
                vFuDest = World.GetNextPositionOnStreet(Game.Player.Character.Position);
                if (Peddy.IsInVehicle())
                {
                    FubarCarX = Peddy.CurrentVehicle;
                    VehicleList_01.Remove(FubarCarX);
                    PedList_03.Remove(Peddy);
                    Peddy.Task.DriveTo(FubarCarX, vFuDest, 3.00f, 35.00f, 536871355);
                    Peddy.CanBeDraggedOutOfVehicle = false;
                    bMeeddicc = true;
                }
                else
                {
                    CleanUpPeds();
                    CleanUpVehicles();

                }
            }       //Medic
            else if (iTask == 46)
            {
                PedScenario(Peddy, "WORLD_HUMAN_PARTYING", Peddy.Position, Peddy.Heading, false);
            }       //SenDance
            else if (iTask == 47)
            {
                Peddy.RelationshipGroup = AttackingNPCs;
                Function.Call(Hash.TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS, Peddy, true);
                Function.Call(Hash.SET_PED_PATH_CAN_USE_CLIMBOVERS, Peddy, true);
                Function.Call(Hash.SET_PED_PATH_CAN_USE_LADDERS, Peddy, true);
                Function.Call(Hash.SET_PED_PATH_CAN_DROP_FROM_HEIGHT, Peddy, true);
            }       //Ped Run to...
            else if (iTask == 48)
            {
                Peddy.RelationshipGroup = PlayerGroups;
                Function.Call(Hash.TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS, Peddy, true);
                Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Peddy, 0, true);
                Peddy.AlwaysKeepTask = true;
            }       //ValcaryPilot
        }
        private void JackThePlayer(Ped Pedd)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("JackThePlayer", tEx);

            Pedd.RelationshipGroup = AttackingNPCs;
            PedBlimp(Pedd, BlipColor.Red3, 0.75f, false, false);
            Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Pedd, 0, true);
            Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Pedd, 2, false);
            Function.Call(Hash.SET_PED_COMBAT_ATTRIBUTES, Pedd, 46, true);
            //Pedd.BlockPermanentEvents = true;
            Pedd.Task.FightAgainst(Game.Player.Character);
            Pedd.Weapons.RemoveAll();
            ArmNpcMel(Pedd);
            ArmNpcMid(Pedd);
        }
        private void FightingPlayer(Ped Pedd)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("FightingPlayer", tEx);

            Pedd.IsEnemy = true;
            Pedd.RelationshipGroup = AttackingNPCs;
            Pedd.Task.ClearAll();
            Pedd.Task.FightAgainst(Game.Player.Character);
            Pedd.AlwaysKeepTask = true;
        }
        private void ScaredBy(Vector3 vLoc)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("ScaredBy", tEx);

            Ped[] LocPeds = World.GetNearbyPeds(vLoc, 45.00f);
            for (int i = 0; i < LocPeds.Count(); i++)
            {
                if (PedExists(LocPeds, i))
                {
                    Ped Pedx = LocPeds[i];

                    if (Pedx.RelationshipGroup != Game.Player.Character.RelationshipGroup)
                    {
                        Pedx.Task.ClearAll();
                        Pedx.Task.ReactAndFlee(Game.Player.Character);
                        Pedx.AlwaysKeepTask = true;
                    }
                }
            }
        }
        private void FriendOfPlayer(Ped Peedd)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("FriendOfPlayer", tEx);

            Peedd.CanBeShotInVehicle = true;
            Peedd.RelationshipGroup = FollowingNPCs;
            Function.Call(Hash.SET_PED_AS_GROUP_MEMBER, Peedd, iPlayGroup);
            Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Peedd, 0, true);
            Peedd.AlwaysKeepTask = true;
            Function.Call(Hash.TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS, Peedd, false);
        }
        private void GunningIt(Ped Peddy, int iGun)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("GunningIt, iGun == " + iGun, tEx);

            if (iGun == 1)
                ArmNpcMel(Peddy);
            else if (iGun == 2)
                ArmNpcSmall(Peddy);
            else if (iGun == 3)
                ArmNpcMid(Peddy);
            else if (iGun == 4)
                ArmNpcMid(Peddy);
            else if (iGun == 5)
                ArmNpcSpace(Peddy);
            else if (iGun == 6)
                ArmNpcMolly(Peddy);
            else if (iGun == 7)
            {
                int iRanGun = RandInt(0, 50);
                if (iRanGun < 10)
                    ArmNpcSpace(Peddy);
                else if (iRanGun < 20)
                    ArmNpcMid(Peddy);
                else if (iRanGun < 30)
                    ArmNpcMid(Peddy);
                else if (iRanGun < 40)
                    ArmNpcSmall(Peddy);
                else
                    ArmNpcMel(Peddy);
            }
            else if (iGun == 8)
            {
                int iRanGun = RandInt(0, 30);
                if (iRanGun < 25)
                    ArmNpcMid(Peddy);
                else
                    ArmNpcMel(Peddy);
            }
            else if (iGun == 9)
            {
                ArmNpcSmall(Peddy);
                ArmNpcMid(Peddy);
            }
            else if (iGun == 10)
                Peddy.Weapons.Give(WeaponHash.UpNAtomizer, 9000, true, true);
        }
        private void ArmNpcSpace(Ped Peddy)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("ArmNpcSpace", tEx);

            Peddy.Weapons.Give(WeaponHash.UnholyHellbringer, 9000, true, true);
            Peddy.Weapons.Give(WeaponHash.UpNAtomizer, 9000, true, true);
            Peddy.Weapons.Give(WeaponHash.Widowmaker, 9000, true, true);
            Peddy.CanSwitchWeapons = true;
        }
        private void ArmNpcHeavy(Ped Peddy)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("ArmNpcHeavy", tEx);

            WeaponList_01.Clear();
            WeaponList_01.Add(WeaponHash.MG);
            //WeaponList_01.Add(WeaponHash.GrenadeLauncher);
            WeaponList_01.Add(WeaponHash.Minigun);
            //WeaponList_01.Add(WeaponHash.Railgun);
            //WeaponList_01.Add(WeaponHash.RPG);
            int iWeapTot = WeaponList_01.Count - 1;
            int iRandomWeap = RandInt(0, iWeapTot);
            Peddy.Weapons.Give(WeaponList_01[iRandomWeap], 9000, true, true);
            Peddy.CanSwitchWeapons = true;
        }
        private void ArmNpcMid(Ped Peddy)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("ArmNpcMid", tEx);

            WeaponList_01.Clear();
            WeaponList_01.Add(WeaponHash.AdvancedRifle);
            WeaponList_01.Add(WeaponHash.AssaultRifle);
            WeaponList_01.Add(WeaponHash.AssaultShotgun);
            WeaponList_01.Add(WeaponHash.AssaultSMG);
            WeaponList_01.Add(WeaponHash.BullpupRifle);
            WeaponList_01.Add(WeaponHash.BullpupShotgun);
            WeaponList_01.Add(WeaponHash.CarbineRifle);
            WeaponList_01.Add(WeaponHash.CombatPDW);
            WeaponList_01.Add(WeaponHash.CompactRifle);
            WeaponList_01.Add(WeaponHash.DoubleBarrelShotgun);
            WeaponList_01.Add(WeaponHash.Gusenberg);
            WeaponList_01.Add(WeaponHash.HeavyShotgun);
            WeaponList_01.Add(WeaponHash.PumpShotgun);
            WeaponList_01.Add(WeaponHash.SpecialCarbine);
            WeaponList_01.Add(WeaponHash.SweeperShotgun);
            int iWeapTot = WeaponList_01.Count - 1;
            int iRandomWeap = RandInt(0, iWeapTot);
            Peddy.Weapons.Give(WeaponList_01[iRandomWeap], 9000, true, true);
            Peddy.CanSwitchWeapons = true;
        }
        private void ArmNpcSmall(Ped Peddy)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("ArmNpcSmall", tEx);

            WeaponList_01.Clear();
            WeaponList_01.Add(WeaponHash.APPistol);
            WeaponList_01.Add(WeaponHash.DoubleActionRevolver);
            WeaponList_01.Add(WeaponHash.HeavyPistol);
            WeaponList_01.Add(WeaponHash.MachinePistol);
            WeaponList_01.Add(WeaponHash.MarksmanPistol);
            WeaponList_01.Add(WeaponHash.MicroSMG);
            WeaponList_01.Add(WeaponHash.Pistol);
            WeaponList_01.Add(WeaponHash.Pistol50);
            WeaponList_01.Add(WeaponHash.Revolver);
            WeaponList_01.Add(WeaponHash.SNSPistol);
            WeaponList_01.Add(WeaponHash.VintagePistol);

            Peddy.Weapons.Give(WeaponList_01[RandInt(0, WeaponList_01.Count - 1)], 9000, true, true);
            Peddy.CanSwitchWeapons = true;
        }
        private void ArmNpcMel(Ped Peddy)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("ArmNpcMel", tEx);

            WeaponList_01.Clear();
            WeaponList_01.Add(WeaponHash.BattleAxe);
            WeaponList_01.Add(WeaponHash.Bottle);
            WeaponList_01.Add(WeaponHash.Crowbar);
            WeaponList_01.Add(WeaponHash.Dagger);
            WeaponList_01.Add(WeaponHash.Flashlight);
            WeaponList_01.Add(WeaponHash.GolfClub);
            WeaponList_01.Add(WeaponHash.Hammer);
            WeaponList_01.Add(WeaponHash.Knife);
            WeaponList_01.Add(WeaponHash.Hatchet);
            WeaponList_01.Add(WeaponHash.KnuckleDuster);
            WeaponList_01.Add(WeaponHash.Machete);
            WeaponList_01.Add(WeaponHash.Nightstick);
            WeaponList_01.Add(WeaponHash.PoolCue);
            WeaponList_01.Add(WeaponHash.SwitchBlade);
            WeaponList_01.Add(WeaponHash.Wrench);
            int iWeapTot = WeaponList_01.Count - 1;
            int iRandomWeap = RandInt(0, iWeapTot);
            Peddy.Weapons.Give(WeaponList_01[iRandomWeap], 9000, true, true);
            Peddy.CanSwitchWeapons = true;
        }
        private void ArmNpcMolly(Ped Peddy)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("ArmNpcMolly", tEx);

            Peddy.Weapons.Give(WeaponHash.Molotov, 999, true, true);
            Peddy.CanSwitchWeapons = false;
        }
        private void StayInVehicle(Ped Peddy, bool bPlayer)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("StayInVehicle, bPlayer == " + bPlayer, tEx);

            if (bPlayer)
                bDontPull = true;

            Peddy.CanBeDraggedOutOfVehicle = false;
        }
        public List<string> DanceList(bool bMale, int iSpeed)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("DanceList, bMale == " + bMale + ", iSpeed == " + iSpeed, tEx);

            List<string> sDancing = new List<string>();
            List<string> Dance = new List<string>(); List<string> DanceVar = new List<string>();

            if (bMale)
            {
                if (iSpeed == 1)
                {
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v1_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v1_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v1_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v1_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v1_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v1_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v2_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v2_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v2_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v2_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v2_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v2_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_11_v1_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_11_v1_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_11_v1_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_11_v1_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_11_v1_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_11_v1_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v1_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v1_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v1_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v1_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v1_male^5");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v2_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v2_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v2_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v2_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v2_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v2_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v1_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v1_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v1_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v1_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v1_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v1_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v2_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v2_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v2_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v2_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v2_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v2_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v1_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v1_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v1_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v1_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v1_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v1_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v2_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v2_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v2_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v2_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v2_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v2_male^6");
                }
                else if (iSpeed == 2)
                {
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v1_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v1_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v1_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v1_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v1_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v1_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v2_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v2_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v2_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v2_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v2_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v2_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v1_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v1_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v1_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v1_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v1_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v1_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v2_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v2_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v2_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v2_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v2_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v2_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v1_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v1_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v1_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v1_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v1_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v1_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v2_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v2_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v2_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v2_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v2_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v2_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v1_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v1_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v1_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v1_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v1_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v1_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v2_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v2_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v2_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v2_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v2_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v2_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_17_v1_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_17_v1_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_17_v1_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_17_v1_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_17_v1_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_17_v1_male^6");
                }
                else
                {
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v1_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v1_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v1_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v1_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v1_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v1_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v2_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v2_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v2_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v2_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v2_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v2_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v1_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v1_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v1_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v1_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v1_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v1_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v2_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v2_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v2_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v2_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v2_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v2_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v1_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v1_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v1_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v1_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v1_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v1_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v2_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v2_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v2_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v2_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v2_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v2_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v1_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v1_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v1_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v1_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v1_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v1_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v2_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v2_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v2_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v2_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v2_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v2_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v1_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v1_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v1_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v1_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v1_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v1_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v2_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v2_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v2_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v2_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v2_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v2_male^6");
                }

                if (Dance.Count > 0)
                {
                    int iRand = RandInt(0, Dance.Count - 1);
                    sDancing.Add(Dance[iRand]);
                    sDancing.Add(DanceVar[iRand]);
                }
                else
                {
                    sDancing.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity");
                    sDancing.Add("li_dance_facedj_17_v2_male^6");
                }
            }
            else
            {
                if (iSpeed == 1)
                {
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v1_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v1_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v1_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v1_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v1_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v1_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v2_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v2_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v2_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v2_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v2_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v2_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_11_v1_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_11_v1_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_11_v1_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_11_v1_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_11_v1_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_11_v1_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v1_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v1_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v1_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v1_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v1_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v1_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v2_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v2_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v2_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v2_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v2_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v2_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v1_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v1_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v1_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v1_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v1_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v1_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v2_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v2_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v2_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v2_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v2_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v2_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v1_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v1_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v1_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v1_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v1_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v1_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v2_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v2_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v2_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v2_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v2_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v2_female^6");
                }
                else if (iSpeed == 2)
                {
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v1_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v1_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v1_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v1_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v1_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v1_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v2_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v2_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v2_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v2_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v2_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v2_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v1_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v1_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v1_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v1_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v1_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v1_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v2_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v2_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v2_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v2_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v2_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v2_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v1_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v1_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v1_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v1_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v1_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v1_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v2_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v2_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v2_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v2_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v2_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v2_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v1_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v1_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v1_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v1_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v1_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v1_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v2_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v2_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v2_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v2_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v2_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v2_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_17_v1_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_17_v1_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_17_v1_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_17_v1_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_17_v1_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_17_v1_female^6");
                }
                else
                {
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v1_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v1_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v1_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v1_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v1_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v1_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v2_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v2_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v2_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v2_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v2_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v2_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v1_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v1_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v1_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v1_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v1_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v1_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v2_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v2_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v2_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v2_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v2_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v2_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v1_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v1_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v1_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v1_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v1_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v1_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v2_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v2_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v2_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v2_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v2_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v2_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v1_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v1_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v1_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v1_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v1_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v1_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v2_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v2_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v2_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v2_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v2_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v2_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v1_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v1_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v1_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v1_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v1_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v1_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v2_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v2_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v2_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v2_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v2_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v2_female^6");
                }

                if (Dance.Count > 0)
                {
                    int iRand = RandInt(0, Dance.Count - 1);
                    sDancing.Add(Dance[iRand]);
                    sDancing.Add(DanceVar[iRand]);
                }
                else
                {
                    sDancing.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity");
                    sDancing.Add("li_dance_facedj_17_v2_female^6");
                }
            }

            return sDancing;
        }
        private void ForceAnim(Ped peddy, string sAnimDict, string sAnimName, Vector3 AnPos, Vector3 AnRot)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("ForceAnim, sAnimName == " + sAnimName, tEx);

            Function.Call(Hash.REQUEST_ANIM_DICT, sAnimDict);
            while (!Function.Call<bool>(Hash.HAS_ANIM_DICT_LOADED, sAnimDict))
                Script.Wait(100);
            Function.Call(Hash.TASK_PLAY_ANIM_ADVANCED, peddy.Handle, sAnimDict, sAnimName, AnPos.X, AnPos.Y, AnPos.Z, AnRot.X, AnRot.Y, AnRot.Z, 8.0f, 0.00f, -1, 1, 0.01f, 0, 0);
            Function.Call(Hash.REMOVE_ANIM_DICT, sAnimDict);
        }
        private void ForceAnimOnce(Ped peddy, string sAnimDict, string sAnimName, Vector3 AnPos, Vector3 AnRot)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("ForceAnimOnce, sAnimName == " + sAnimName, tEx);

            Function.Call(Hash.REQUEST_ANIM_DICT, sAnimDict);
            while (!Function.Call<bool>(Hash.HAS_ANIM_DICT_LOADED, sAnimDict))
                Script.Wait(100);
            Function.Call(Hash.TASK_PLAY_ANIM_ADVANCED, peddy.Handle, sAnimDict, sAnimName, AnPos.X, AnPos.Y, AnPos.Z, AnRot.X, AnRot.Y, AnRot.Z, 8.0f, 0.00f, -1, 0, 0.01f, 0, 0);
            Function.Call(Hash.REMOVE_ANIM_DICT, sAnimDict);
        }
        private void ForceAnimOnceEnding(Ped peddy, string sAnimDict, string sAnimName, Vector3 AnPos, Vector3 AnRot, float fEnder)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("ForceAnimOnce, sAnimName == " + sAnimName, tEx);

            Function.Call(Hash.REQUEST_ANIM_DICT, sAnimDict);
            while (!Function.Call<bool>(Hash.HAS_ANIM_DICT_LOADED, sAnimDict))
                Script.Wait(100);
            Function.Call(Hash.TASK_PLAY_ANIM_ADVANCED, peddy.Handle, sAnimDict, sAnimName, AnPos.X, AnPos.Y, AnPos.Z, AnRot.X, AnRot.Y, AnRot.Z, 8.0f, 0.00f, -1, 0, fEnder, 0, 0);
            Function.Call(Hash.REMOVE_ANIM_DICT, sAnimDict);
        }
        private void PedScenario(Ped Peddy, string sCenario, Vector3 Vpos, float fHead, bool bSeated)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("PedScenario, sCenario == " + sCenario, tEx);

            Function.Call(Hash.TASK_START_SCENARIO_AT_POSITION, Peddy.Handle, sCenario, Vpos.X, Vpos.Y, Vpos.Z, fHead, 0, bSeated, true);
        }
        public int PedWalkies(Ped Peddy, List<Vector3> MyLister, int iLocalList)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("PedWalkies", tEx);

            iLocalList += 1;
            if (iLocalList == MyLister.Count())
                iLocalList = 0;

            int iReturnInt = iLocalList;

            Peddy.Task.GoTo(MyLister[iReturnInt], true, -1);

            return iReturnInt;
        }
        public bool PedRunToFoward(Ped Peddy, List<Vector3> MyLister, int iLocal)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("PedRunToFoward", tEx);

            bool bInUse = true;

            if (iLocal < MyLister.Count)
                Peddy.Task.RunTo(MyLister[iLocal], true, -1);
            else
                bInUse = false;

            return bInUse;
        }
        private void EnterAnyVeh(Vehicle Vhic, Ped Peddy, int iSeat, float Run)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("EnterAnyVeh, iSeat == " + iSeat + ", Run == " + Run, tEx);

            if (Vhic.Exists())
            {
                Function.Call(Hash.TASK_ENTER_VEHICLE, Peddy, Vhic, -1, iSeat - 1, Run, 1, 0);
                Peddy.BlockPermanentEvents = true;
                Peddy.AlwaysKeepTask = true;
            }
        }
        private void EnterPlayerVeh(Ped Peddy, int iSeat, float Run)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("EnterPlayerVeh, iSeat == " + iSeat + ", Run == " + Run, tEx);

            Vehicle Vhick = Game.Player.Character.CurrentVehicle;
            EnterAnyVeh(Vhick, Peddy, iSeat, Run);
        }
        private void WarptoAnyVeh(Vehicle Vhic, Ped Peddy, int iSeat, bool bFightPlayer)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("WarptoAnyVeh, iSeat == " + iSeat + ", bFightPlayer == " + bFightPlayer, tEx);

            bool bFader = false;
            if (Peddy == Game.Player.Character)
            {
                Game.FadeScreenOut(1000);
                Script.Wait(1000);
                bFader = true;
            }

            while (!Peddy.IsInVehicle(Vhic))
            {
                VehicleWarp(Vhic, Peddy, iSeat);
                Script.Wait(100);
            }

            if (bFader)
            {
                Script.Wait(500);
                Game.FadeScreenIn(1000);
            }
            else if (bFightPlayer)
            {
                Peddy.IsEnemy = true;
                Peddy.CanBeTargette﻿d﻿ = true;
                Peddy.RelationshipGroup = AttackingNPCs;
                Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Peddy, 0, true);
                if (iSeat == 1)
                {
                    if (Game.Player.Character.IsInVehicle())
                        Peddy.Task.VehicleChase(Game.Player.Character);
                    else
                        Peddy.Task.DriveTo(Vhic, Game.Player.Character.Position, 10.00f, 45.00f, 0);
                }
                else
                    Peddy.Task.VehicleShootAtPed(Game.Player.Character);
                Peddy.Task.FightAgainst(Game.Player.Character);
                Peddy.AlwaysKeepTask = true;
            }
        }
        private void VehicleWarp(Vehicle Vhic, Ped Peddy, int iSeat)
        {
            Function.Call(Hash.SET_PED_INTO_VEHICLE, Peddy, Vhic, iSeat - 2);
        }
        private void WarptoPlayerVeh(Ped Peddy, int iSeat)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("WarptoPlayerVeh, iSeat == " + iSeat, tEx);

            Vehicle Vhick = Game.Player.Character.CurrentVehicle;
            if (Vhick.Exists())
            {
                while (!Peddy.IsInVehicle(Vhick))
                {
                    VehicleWarp(Vhick, Peddy, iSeat);
                    Script.Wait(500);
                }
            }
        }
        private void FreeSeat(Vehicle Vhick, int iSeat, bool bFlee)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("FreeSeat iSeat== "+ iSeat + ", bFlee == " + bFlee, tEx);
            if (!Function.Call<bool>(Hash.IS_VEHICLE_SEAT_FREE, Vhick, iSeat - 2))
            {
                Ped Peddy = Function.Call<Ped>(Hash.GET_PED_IN_VEHICLE_SEAT, Vhick, iSeat - 2);
                FleeFromVeh(Vhick, Peddy, iSeat, bFlee);
            }
        }
        private void FleeFromVeh(Vehicle Vhick, Ped Peddy, int iSeat, bool bFlee)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("FleeFromVeh iSeat== " + iSeat + ", bFlee == " + bFlee, tEx);

            int iTenPass = 10;
            Peddy.Task.ClearAll();
            if (bFlee)
            {
                while (Peddy.IsInVehicle(Vhick) && iTenPass > 0)
                {
                    Script.Wait(100);
                    Function.Call(Hash.TASK_LEAVE_VEHICLE, Peddy, Vhick, 4160);
                    iTenPass -= 1;
                }
                Peddy.Task.FleeFrom(Game.Player.Character);
            }

            else
            {
                Function.Call(Hash.TASK_LEAVE_VEHICLE, Peddy, Vhick, 16);
                Peddy.Position = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 4);
            }

        }
        private void ShowBoating(Ped PedX, Vector3 vEctor, Vehicle Vhick, float fSpeeds, int iDrivinStyle)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("ShowBoating", tEx);

            PedX.Task.ClearAll();
            Function.Call(Hash.TASK_BOAT_MISSION, PedX, Vhick, 0, 0, vEctor.X, vEctor.Y, vEctor.Z, 4, fSpeeds, iDrivinStyle, -1.0f, 7);
            Function.Call(Hash.SET_BLOCKING_OF_NON_TEMPORARY_EVENTS, PedX.Handle, true);
        }
        private void DriveToDest(Vehicle Vhickery, Vector3 TheDest, Ped Peddy, float fSpeding, int iDriveStyle)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("DriveToDest", tEx);

            Peddy.Task.ClearAll();
            Peddy.Task.DriveTo(Vhickery, TheDest, 1.50f, fSpeding, iDriveStyle);
            Peddy.AlwaysKeepTask = true;
            Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Peddy, 0, true);
            Peddy.AlwaysKeepTask = true;
            Peddy.BlockPermanentEvents = true;
        }
        private void PedBlimp(Ped pEdd, BlipColor blColour, float fSize, bool bFlashin, bool bShowR)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("PedBlimp", tEx);

            pEdd.AddBlip();
            pEdd.CurrentBlip.Scale = fSize;
            pEdd.CurrentBlip.Color = blColour;
            if (bFlashin)
            {
                pEdd.CurrentBlip.IsFlashing = true;
            }
            if (bShowR && bShowRoute)
            {
                pEdd.CurrentBlip.ShowRoute = true;
            }
        }
        private void VehBlip(Vehicle Vhic, BlipSprite blSprite, bool bFlashin, bool bShowR)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("VehBlip", tEx);

            BlipSprite MVB = MyVehBlimp(Vhic, blSprite);
            Vhic.AddBlip();
            Vhic.CurrentBlip.Sprite = MVB;
            Vhic.CurrentBlip.IsFlashing = bFlashin;

            if (bShowR && bShowRoute)
                Vhic.CurrentBlip.ShowRoute = true;
        }
        private void FakeBlimbs(Vector3 Vblips, BlipSprite Bsp, bool bClean)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("FakeBlimbs", tEx);

            if (bClean)
            {
                for (int i = 0; i < BlipList_01.Count; i++)
                    BlipCleaning(BlipList_01[i]);

                BlipList_01.Clear();
            }
            Blip Blip = World.CreateBlip(Vblips);
            Blip.Sprite = Bsp;
            Blip.IsFlashing = true;
            BlipList_01.Add(new Blip(Blip.Handle));
            iBliper.Add(Blip.Handle);
            WriteBlips();
        }
        private void AddTarget(Vector3 Vlocal, bool bRoute, bool bPrimary, float fRadius, bool bFlasher)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("AddTarget", tEx);

            if (bPrimary)
            {
                if (Target_01 == null)
                {
                    if (fRadius < 2.00f)
                    {
                        Target_01 = GTA.World.CreateBlip(Vlocal);
                        Target_01.Color = BlipColor.Yellow6;
                        Target_01.IsFlashing = bFlasher;
                        if (bRoute && bShowRoute)
                            Target_01.ShowRoute = true;
                    }
                    else
                    {
                        BackUpT = GTA.World.CreateBlip(Vlocal);
                        BackUpT.Color = BlipColor.Yellow;

                        Target_01 = GTA.World.CreateBlip(Vlocal, fRadius);
                        Target_01.Color = BlipColor.Yellow;
                        Target_01.Alpha = 85;
                        Target_01.IsFlashing = bFlasher;
                        if (bRoute && bShowRoute)
                            BackUpT.ShowRoute = true;
                        iBliper.Add(BackUpT.Handle);
                    }
                    iBliper.Add(Target_01.Handle);
                    WriteBlips();
                }
            }
            else
            {
                if (Target_02 == null)
                {
                    if (fRadius < 2.00f)
                    {
                        Target_02 = GTA.World.CreateBlip(Vlocal);
                        Target_02.Color = BlipColor.Orange;
                        Target_02.Scale = 0.5f;
                        Target_02.IsFlashing = bFlasher;
                    }
                    else
                    {
                        Target_02 = GTA.World.CreateBlip(Vlocal, fRadius);
                        Target_02.Color = BlipColor.Orange;
                        Target_02.Alpha = 85;
                        Target_02.IsFlashing = bFlasher;
                    }
                }
                iBliper.Remove(Target_02.Handle);
                WriteBlips();
            }
        }
        private void AddDogFighters(int iFighter)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("AddDogFighters, iFighter == " + iFighter, tEx);

            for (int i = 0; i < iFighter; i++)
            {
                Vector3 PlayerPozy = Game.Player.Character.Position.Around(1500.00f);
                PlayerPozy.Z = 1500.00f;
                float fRotate = Game.Player.Character.Heading;
                List<string> SCarz = RandVeh(23);
                string sXCArs = SCarz[RandInt(0, SCarz.Count - 1)];
                VehicleSpawn(sXCArs, PlayerPozy, fRotate, false, false, false, false, 13, 0, 6, 0, true);
            }
        }
        private void DogFighterTracking()
        {
            iWait4Sec = Game.GameTime + 1000;
            for (int i = 0; i < PedList_02.Count; i++)
            {
                if (PedList_02[i].IsInVehicle())
                {
                    Vehicle vMe = PedList_02[i].LastVehicle;
                    if (vMe.CurrentBlip.Exists())
                    {
                        if (vMe.IsOnFire || vMe.IsDead)
                        {
                            vMe.CurrentBlip.Remove();
                            vMe.Explode();
                            iMissionVar_01 += 1;
                            AddDogFighters(1);
                        }
                    }
                }
            }
        }
        private void RemoveDogFight()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("RemoveDogFight", tEx);

            for (int i = 0; i < VehicleList_01.Count; i++)
            {
                if (VehicleList_01[i].CurrentBlip.Exists())
                {
                    VehicleList_01[i].CurrentBlip.Remove();
                    VehicleList_01[i].Explode();
                }
            }
        }
        private void ClearTheWay()
        {
            iWait4Sec = Game.GameTime + 1000;
            Entity[] Entz = World.GetAllEntities();
            for (int i = 0; i < Entz.Count(); i++)
            {
                Entity Ent = Entz[i];
                if (EntityExists(Entz, i))
                {
                    if (Function.Call<bool>(Hash.IS_ENTITY_A_PED, Ent.Handle) && Ent.IsPersistent == false)
                        Ent.Delete();
                    if (Function.Call<bool>(Hash.IS_ENTITY_A_VEHICLE, Ent.Handle) && Ent.IsPersistent == false)
                        Ent.Delete();
                }
            }
        }
        private void FindTHeFight()
        {
            for (int i = 0; i < PedList_02.Count; i++)
            {
                Ped pPed = PedList_02[i];
                if (pPed.IsDead)
                {
                    if (pPed.CurrentBlip.Exists())
                        pPed.CurrentBlip.Remove();
                }
                else if (pPed.Position.DistanceTo(VehTrackin_03.Position) < 35.00f && pPed.Weapons.HasWeapon(WeaponHash.Molotov) == false)
                {
                    pPed.Task.ClearAll();
                    ArmNpcMolly(pPed);
                    Function.Call(Hash.SET_PED_COMBAT_ATTRIBUTES, pPed, 46, true);
                    Function.Call(Hash.TASK_DRIVE_BY, VehTrackin_03.Handle, 0, VehTrackin_03.Position.X, VehTrackin_03.Position.Y, VehTrackin_03.Position.Z, pPed.Position.DistanceTo(VehTrackin_03.Position), 90, true, 156631136);
                }
            }
        }
        private void YourFired(float fX, float fY, float fZ)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("YourFired", tEx);

            FakeBlimbs(new Vector3(fX, fY, fZ), BlipSprite.HotProperty, true);
            int UFire = Function.Call<int>(Hash.START_SCRIPT_FIRE, fX, fY, fZ, 15, false); 
            iFireList.Add(UFire);
        }
        public List<string> RandVeh(int iVechList)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("RandVeh, iVechList == " + iVechList, tEx);

            List<string> sVehicles = new List<string>();

            if (iVechList == 0)
            {
                if (sCustomCarz.Count > 0)
                    sVehicles = sCustomCarz;
                else
                    sVehicles.Add("BJXL");
            }            //Custom
            else if (iVechList == 1)
            {
                sVehicles.Add("PFISTER811");
                sVehicles.Add("ADDER");
                sVehicles.Add("AUTARCH");
                sVehicles.Add("BANSHEE2");
                sVehicles.Add("BULLET");
                sVehicles.Add("CHEETAH");
                sVehicles.Add("CYCLONE");
                sVehicles.Add("ENTITYXF");
                sVehicles.Add("ENTITY2");
                sVehicles.Add("SHEAVA");
                sVehicles.Add("FMJ");
                sVehicles.Add("GP1");
                sVehicles.Add("INFERNUS");
                sVehicles.Add("ITALIGTB");
                sVehicles.Add("ITALIGTB2");
                sVehicles.Add("OSIRIS");
                sVehicles.Add("NERO");
                sVehicles.Add("NERO2");
                sVehicles.Add("PENETRATOR");
                sVehicles.Add("LE7B");
                sVehicles.Add("REAPER");
                sVehicles.Add("VOLTIC2");
                sVehicles.Add("SC1");
                sVehicles.Add("SULTANRS");
                sVehicles.Add("T20");
                sVehicles.Add("TAIPAN");
                sVehicles.Add("TEMPESTA");
                sVehicles.Add("TEZERACT");
                sVehicles.Add("TURISMOR");
                sVehicles.Add("TYRANT");
                sVehicles.Add("TYRUS");
                sVehicles.Add("VACCA");
                sVehicles.Add("VAGNER");
                sVehicles.Add("VISIONE");
                sVehicles.Add("VOLTIC");
                sVehicles.Add("PROTOTIPO");
                sVehicles.Add("XA21");
                sVehicles.Add("ZENTORNO");
                if (bTrainM)
                {
                    sVehicles.Add("DEVESTE");
                    sVehicles.Add("EMERUS");
                    sVehicles.Add("FURIA");
                    sVehicles.Add("KRIEGER");
                    sVehicles.Add("THRAX");
                    sVehicles.Add("ZORRUSSO");
                    sVehicles.Add("TIGON");
                }
            }       //Super
            else if (iVechList == 2)
            {
                sVehicles.Add("COGCABRIO"); //
                sVehicles.Add("EXEMPLAR"); //
                sVehicles.Add("F620"); //
                sVehicles.Add("FELON"); //
                sVehicles.Add("FELON2"); //<!-- Felon GT -->
                sVehicles.Add("JACKAL"); //
                sVehicles.Add("ORACLE"); //
                sVehicles.Add("ORACLE2"); //<!-- Oracle XS -->
                sVehicles.Add("SENTINEL2"); //<!-- Sentinel -->
                sVehicles.Add("SENTINEL"); //<!-- Sentinel XS -->
                sVehicles.Add("WINDSOR"); //
                sVehicles.Add("WINDSOR2"); //<!-- Windsor Drop -->
                sVehicles.Add("ZION"); //
                sVehicles.Add("ZION2"); //<!-- Zion Cabrio -->
                if (bTrainM)
                    sVehicles.Add("PREVION"); //<!-- PREVION -->
            }       //Coupe
            else if (iVechList == 3)
            {
                sVehicles.Add("NINEF"); //
                sVehicles.Add("NINEF2"); //<!-- 9F Cabrio -->
                sVehicles.Add("ALPHA"); //
                sVehicles.Add("BANSHEE"); //
                sVehicles.Add("BESTIAGTS"); //
                sVehicles.Add("BLISTA2"); //<!-- Blista Compact -->
                sVehicles.Add("BUFFALO"); //
                sVehicles.Add("BUFFALO2"); //<!-- Buffalo S -->
                sVehicles.Add("CARBONIZZARE"); //
                sVehicles.Add("COMET2"); //<!-- Comet -->
                sVehicles.Add("COMET3"); //<!-- Comet Retro Custom -->
                sVehicles.Add("COMET4"); //<!-- Comet Safari -->
                sVehicles.Add("COMET5"); //<!-- Comet SR -->
                sVehicles.Add("COQUETTE"); //
                sVehicles.Add("TAMPA2"); //<!-- Drift Tampa -->
                sVehicles.Add("ELEGY"); //<!-- Elegy Retro Custom -->
                sVehicles.Add("ELEGY2"); //<!-- Elegy RH8 -->
                sVehicles.Add("FELTZER2"); //<!-- Feltzer -->
                sVehicles.Add("FLASHGT"); //
                sVehicles.Add("FUROREGT"); //
                sVehicles.Add("FUSILADE"); //
                sVehicles.Add("FUTO"); //
                sVehicles.Add("GB200"); //
                sVehicles.Add("BLISTA3"); //<!-- Go Go Monkey Blista -->
                sVehicles.Add("HOTRING"); //
                sVehicles.Add("JESTER"); //
                sVehicles.Add("JESTER2"); //<!-- Jester (Racecar) -->
                sVehicles.Add("JESTER3"); //<!-- Jester Classic -->
                sVehicles.Add("KHAMELION"); //
                sVehicles.Add("KURUMA"); //
                sVehicles.Add("LYNX"); //
                sVehicles.Add("MASSACRO"); //
                sVehicles.Add("MASSACRO2"); //<!-- Massacro (Racecar) -->
                sVehicles.Add("NEON"); //
                sVehicles.Add("OMNIS"); //
                sVehicles.Add("PARIAH"); //
                sVehicles.Add("PENUMBRA"); //
                sVehicles.Add("RAIDEN"); //
                sVehicles.Add("RAPIDGT"); //
                sVehicles.Add("RAPIDGT2"); //<!-- Rapid GT Cabrio -->
                sVehicles.Add("RAPTOR"); //
                sVehicles.Add("REVOLTER"); //
                sVehicles.Add("RUSTON"); //
                sVehicles.Add("SCHAFTER4"); //<!-- Schafter LWB -->
                sVehicles.Add("SCHAFTER3"); //<!-- Schafter V12 -->
                sVehicles.Add("SCHWARZER"); //
                sVehicles.Add("SENTINEL3"); //<!-- Sentinel Classic -->
                sVehicles.Add("SEVEN70"); //
                sVehicles.Add("SPECTER"); //
                sVehicles.Add("SPECTER2"); //<!-- Specter Custom -->
                sVehicles.Add("BUFFALO3"); //<!-- Sprunk Buffalo -->
                sVehicles.Add("STREITER"); //
                sVehicles.Add("SULTAN"); //
                sVehicles.Add("SURANO"); //
                sVehicles.Add("TROPOS"); //
                sVehicles.Add("VERLIERER2"); //
                if (bTrainM)
                {
                    sVehicles.Add("DRAFTER"); //<!-- 8F Drafter -->
                    sVehicles.Add("IMORGON"); //
                    sVehicles.Add("ISSI7"); //<!-- Issi Sport -->
                    sVehicles.Add("ITALIGTO"); //
                    sVehicles.Add("JUGULAR"); //
                    sVehicles.Add("KOMODA"); //
                    sVehicles.Add("LOCUST"); //
                    sVehicles.Add("NEO"); //
                    sVehicles.Add("PARAGON"); //
                    sVehicles.Add("PARAGON2"); //<!-- Paragon R (Armored) -->
                    sVehicles.Add("SCHLAGEN"); //
                    sVehicles.Add("SUGOI"); //
                    sVehicles.Add("SULTAN2"); //<!-- Sultan Classic -->
                    sVehicles.Add("VSTR"); //<!-- V-STR -->
                    sVehicles.Add("COQUETTE4"); //<!-- Coquette D10  -->
                    sVehicles.Add("PENUMBRA2"); //<!-- Penumbra FF   -->
                    sVehicles.Add("ITALIRSX"); //><!-- Grotti Itali RSX -->Spports
                    sVehicles.Add("CALICO"); //
                    sVehicles.Add("COMET6"); //
                    sVehicles.Add("CYPHER"); //
                    sVehicles.Add("EUROS"); //
                    sVehicles.Add("FUTO2"); //
                    sVehicles.Add("GROWLER"); //
                    sVehicles.Add("JESTER4"); //
                    sVehicles.Add("REMUS"); //
                    sVehicles.Add("RT3000"); //
                    sVehicles.Add("SULTAN3"); //
                    sVehicles.Add("VECTRE"); //
                    sVehicles.Add("ZR350"); //
                }
            }       //Sport
            else if (iVechList == 4)
            {
                sVehicles.Add("BLADE"); //
                sVehicles.Add("BUCCANEER"); //
                sVehicles.Add("BUCCANEER2"); //<!-- Buccaneer Custom -->
                sVehicles.Add("STALION2"); //<!-- Burger Shot Stallion -->
                sVehicles.Add("CHINO"); //
                sVehicles.Add("CHINO2"); //<!-- Chino Custom -->
                sVehicles.Add("COQUETTE3"); //<!-- Coquette BlackFin -->
                sVehicles.Add("DOMINATOR"); //
                sVehicles.Add("DOMINATOR3"); //<!-- Dominator GTX -->
                sVehicles.Add("YOSEMITE2"); //<!-- Drift Yosemite -->
                sVehicles.Add("DUKES"); //
                sVehicles.Add("ELLIE"); //
                sVehicles.Add("FACTION"); //
                sVehicles.Add("FACTION2"); //<!-- Faction Custom -->
                sVehicles.Add("FACTION3"); //<!-- Faction Custom Donk -->
                sVehicles.Add("GAUNTLET"); //
                sVehicles.Add("HERMES"); //
                sVehicles.Add("HOTKNIFE"); //
                sVehicles.Add("HUSTLER"); //
                sVehicles.Add("SLAMVAN2"); //<!-- Lost Slamvan -->
                sVehicles.Add("LURCHER"); //
                sVehicles.Add("MOONBEAM"); //
                sVehicles.Add("MOONBEAM2"); //<!-- Moonbeam Custom -->
                sVehicles.Add("NIGHTSHADE"); //
                sVehicles.Add("PHOENIX"); //
                sVehicles.Add("PICADOR"); //
                sVehicles.Add("DOMINATOR2"); //<!-- Pisswasser Dominator -->
                sVehicles.Add("RATLOADER"); //
                sVehicles.Add("RATLOADER2"); //<!-- Rat-Truck -->
                sVehicles.Add("GAUNTLET2"); //<!-- Redwood Gauntlet -->
                sVehicles.Add("RUINER"); //
                sVehicles.Add("SABREGT"); //
                sVehicles.Add("SABREGT2"); //<!-- Sabre Turbo Custom -->
                sVehicles.Add("SLAMVAN"); //
                sVehicles.Add("SLAMVAN3"); //<!-- Slamvan Custom -->
                sVehicles.Add("STALION"); //
                sVehicles.Add("TAMPA"); //
                sVehicles.Add("VIGERO"); //
                sVehicles.Add("VIRGO"); //
                sVehicles.Add("VIRGO3"); //<!-- Virgo Classic -->
                sVehicles.Add("VIRGO2"); //<!-- Virgo Classic Custom -->
                sVehicles.Add("VOODOO"); //
                sVehicles.Add("VOODOO2"); //<!-- Voodoo Custom -->
                sVehicles.Add("YOSEMITE"); //
                if (bTrainM)
                {
                    sVehicles.Add("CLIQUE"); //
                    sVehicles.Add("DEVIANT"); //
                    sVehicles.Add("GAUNTLET3"); //<!-- Gauntlet Classic -->
                    sVehicles.Add("GAUNTLET4"); //<!-- Gauntlet Hellfire -->
                    sVehicles.Add("PEYOTE2"); //<!-- Peyote Gasser -->
                    sVehicles.Add("IMPALER"); //
                    sVehicles.Add("TULIP"); //
                    sVehicles.Add("VAMOS"); //
                    sVehicles.Add("DUKES3"); //
                    sVehicles.Add("GAUNTLET5"); //
                    sVehicles.Add("MANANA2"); //
                    sVehicles.Add("PEYOTE3"); //
                    sVehicles.Add("GLENDALE2"); //
                    sVehicles.Add("YOSEMITE3"); //
                    sVehicles.Add("DOMINATOR7"); //
                    sVehicles.Add("DOMINATOR8"); //
                }
            }       //Mussle
            else if (iVechList == 5)
            {
                sVehicles.Add("Z190"); //<!-- 190z -->
                sVehicles.Add("ARDENT"); //
                sVehicles.Add("CASCO"); //
                sVehicles.Add("CHEBUREK"); //
                sVehicles.Add("CHEETAH2"); //<!-- Cheetah Classic -->
                sVehicles.Add("COQUETTE2"); //<!-- Coquette Classic -->
                sVehicles.Add("FAGALOA"); //
                sVehicles.Add("BTYPE2"); //<!-- FrÃ¤nken Stange -->
                sVehicles.Add("GT500"); //
                sVehicles.Add("INFERNUS2"); //<!-- Infernus Classic -->
                sVehicles.Add("JB700"); //
                sVehicles.Add("MAMBA"); //
                sVehicles.Add("MANANA"); //
                sVehicles.Add("MICHELLI"); //
                sVehicles.Add("MONROE"); //
                sVehicles.Add("PEYOTE"); //
                sVehicles.Add("PIGALLE"); //
                sVehicles.Add("RAPIDGT3"); //<!-- Rapid GT Classic -->
                sVehicles.Add("RETINUE"); //
                sVehicles.Add("BTYPE"); //<!-- Roosevelt -->
                sVehicles.Add("BTYPE3"); //<!-- Roosevelt Valor -->
                sVehicles.Add("SAVESTRA"); //
                sVehicles.Add("STINGER"); //
                sVehicles.Add("STINGERGT"); //
                sVehicles.Add("FELTZER3"); //<!-- Stirling GT -->
                sVehicles.Add("SWINGER"); //
                sVehicles.Add("TORERO"); //
                sVehicles.Add("TORNADO"); //
                sVehicles.Add("TORNADO2"); //<!-- Tornado Cabrio -->
                sVehicles.Add("TORNADO3"); //<!-- Rusty Tornado -->
                sVehicles.Add("TORNADO4"); //<!-- Mariachi Tornado -->
                sVehicles.Add("TORNADO5"); //<!-- Tornado Custom -->
                sVehicles.Add("TORNADO6"); //<!-- Tornado Rat Rod -->
                sVehicles.Add("TURISMO2"); //<!-- Turismo Classic -->
                sVehicles.Add("VISERIS"); //
                sVehicles.Add("ZTYPE"); //
                if (bTrainM)
                {
                    sVehicles.Add("DYNASTY"); //
                    sVehicles.Add("JB7002"); //<!-- JB 700W -->
                    sVehicles.Add("NEBULA"); //
                    sVehicles.Add("RETINUE2"); //<!-- Retinue MkII -->
                    sVehicles.Add("ZION3"); //<!-- Zion Classic -->
                    sVehicles.Add("COQUETTE4"); //<!-- Coquette D10  -->
                    sVehicles.Add("TOREADOR"); //><!-- Pegassi Toreador -->sportsClassic
                }
            }       //SportsClassic
            else if (iVechList == 6)
            {
                sVehicles.Add("BLISTA"); //
                sVehicles.Add("BRIOSO"); //
                sVehicles.Add("DILETTANTE"); //
                sVehicles.Add("ISSI2"); //
                sVehicles.Add("ISSI3"); //<!-- Issi Classic -->
                sVehicles.Add("PANTO"); //
                sVehicles.Add("PRAIRIE"); //
                sVehicles.Add("RHAPSODY"); //
                if (bTrainM)
                {
                    sVehicles.Add("ASBO"); //
                    sVehicles.Add("KANJO"); //<!-- Blista Kanjo -->
                    sVehicles.Add("CLUB");
                    sVehicles.Add("BRIOSO2"); //>Grotti Brioso 300
                    sVehicles.Add("WEEVIL"); //><!-- BF Weevil -->
                }
            }       //Compact
            else if (iVechList == 7)
            {
                sVehicles.Add("ASEA"); //
                sVehicles.Add("ASTEROPE"); //
                sVehicles.Add("COGNOSCENTI"); //
                sVehicles.Add("COGNOSCENTI2"); //<!-- Cognoscenti (Armored) -->
                sVehicles.Add("COG55"); //<!-- Cognoscenti 55 -->
                sVehicles.Add("COG552"); //<!-- Cognoscenti 55 (Armored) -->
                sVehicles.Add("EMPEROR"); //
                sVehicles.Add("EMPEROR2"); //<!-- Emperor beater variant -->
                sVehicles.Add("FUGITIVE"); //
                sVehicles.Add("GLENDALE"); //
                sVehicles.Add("INGOT"); //
                sVehicles.Add("INTRUDER"); //
                sVehicles.Add("PREMIER"); //
                sVehicles.Add("PRIMO"); //
                sVehicles.Add("PRIMO2"); //<!-- Primo Custom -->
                sVehicles.Add("REGINA"); //
                sVehicles.Add("ROMERO"); //
                sVehicles.Add("SCHAFTER2"); //
                sVehicles.Add("SCHAFTER6"); //<!-- Schafter LWB (Armored) -->
                sVehicles.Add("SCHAFTER5"); //<!-- Schafter V12 (Armored) -->
                sVehicles.Add("STAFFORD"); //
                sVehicles.Add("STANIER"); //
                sVehicles.Add("STRATUM"); //
                sVehicles.Add("STRETCH"); //
                sVehicles.Add("SUPERD"); //
                sVehicles.Add("SURGE"); //
                sVehicles.Add("TAILGATER"); //
                sVehicles.Add("WARRENER"); //
                sVehicles.Add("WASHINGTON"); //
                if (bTrainM)
                {
                    sVehicles.Add("TAILGATER2"); //
                    sVehicles.Add("WARRENER2"); //
                }
            }       //Sedan
            else if (iVechList == 8)
            {
                sVehicles.Add("BIFTA"); //
                sVehicles.Add("BODHI2"); //
                sVehicles.Add("BRAWLER"); //
                sVehicles.Add("TROPHYTRUCK2"); //<!-- Desert Raid -->
                sVehicles.Add("DUBSTA3"); //<!-- Dubsta 6x6 -->
                sVehicles.Add("DUNE"); //
                sVehicles.Add("DLOADER"); //
                sVehicles.Add("FREECRAWLER"); //
                sVehicles.Add("HELLION");
                sVehicles.Add("BFINJECTION"); //
                sVehicles.Add("KALAHARI"); //
                sVehicles.Add("KAMACHO"); //
                sVehicles.Add("MESA3"); //<!-- Merryweather Mesa -->
                sVehicles.Add("RANCHERXL"); //
                sVehicles.Add("REBEL2"); //
                sVehicles.Add("RIATA"); //
                sVehicles.Add("REBEL"); //<!-- Rusty Rebel -->
                sVehicles.Add("SANDKING2"); //<!-- Sandking SWB -->
                sVehicles.Add("SANDKING"); //<!-- Sandking XL -->
                sVehicles.Add("DUNE2"); //<!-- Space Docker -->
                sVehicles.Add("TROPHYTRUCK"); //
                sVehicles.Add("RALLYTRUCK"); //<!-- Dune -->
                if (bTrainM)
                {
                    sVehicles.Add("CARACARA2"); //<!-- Caracara 4x4 -->
                    sVehicles.Add("EVERON"); //
                    sVehicles.Add("OUTLAW"); //
                    sVehicles.Add("VAGRANT"); //
                    sVehicles.Add("ZHABA"); //
                    sVehicles.Add("WINKY"); //><!-- Vapid Winky -->	
                }
            }       //Offroad
            else if (iVechList == 9)
            {
                sVehicles.Add("BALLER"); //
                sVehicles.Add("BALLER2"); //<!-- Baller 2nd gen variant -->
                sVehicles.Add("BALLER3"); //<!-- Baller LE -->
                sVehicles.Add("BALLER5"); //<!-- Baller LE (Armored) -->
                sVehicles.Add("BALLER4"); //<!-- Baller LE LWB -->
                sVehicles.Add("BALLER6"); //<!-- Baller LE LWB (Armored) -->
                sVehicles.Add("BJXL"); //
                sVehicles.Add("CAVALCADE"); //
                sVehicles.Add("CAVALCADE2"); //<!-- Cavalcade 2nd gen variant -->
                sVehicles.Add("CONTENDER"); //
                sVehicles.Add("DUBSTA"); //
                sVehicles.Add("DUBSTA2"); //<!-- Dubsta black variant -->
                sVehicles.Add("FQ2"); //
                sVehicles.Add("GRANGER"); //
                sVehicles.Add("GRESLEY"); //
                sVehicles.Add("HABANERO"); //
                sVehicles.Add("HUNTLEY"); //
                sVehicles.Add("LANDSTALKER"); //
                sVehicles.Add("MESA"); //
                sVehicles.Add("PATRIOT"); //
                sVehicles.Add("PATRIOT2"); //<!-- Patriot Stretch -->
                sVehicles.Add("RADI"); //
                sVehicles.Add("ROCOTO"); //
                sVehicles.Add("SEMINOLE"); //
                sVehicles.Add("SERRANO"); //
                sVehicles.Add("XLS"); //
                sVehicles.Add("XLS2"); //<!-- XLS (Armored) -->
                if (bTrainM)
                {
                    sVehicles.Add("NOVAK"); //
                    sVehicles.Add("REBLA"); //
                    sVehicles.Add("TOROS"); //
                    sVehicles.Add("LANDSTALKER2"); //
                    sVehicles.Add("SEMINOLE2"); //
                }
            }       //SUV
            else if (iVechList == 10)
            {
                if (bTrainM)
                {
                    sVehicles.Add("FORMULA"); //<!-- PR4, should be Open Wheel class-->
                    sVehicles.Add("FORMULA2"); //<!-- R88, should be Open Wheel class-->
                    sVehicles.Add("OPENWHEEL1"); //
                    sVehicles.Add("OPENWHEEL2"); //
                }
                else
                {
                    sVehicles.Add("SPEEDO2"); //<!-- Clown Van -->
                    sVehicles.Add("TACO"); //
                }
            }       //F1
            else if (iVechList == 11)
            {
                sVehicles.Add("AKUMA"); //
                sVehicles.Add("AVARUS"); //
                sVehicles.Add("CHIMERA"); //
                sVehicles.Add("DEFILER"); //
                sVehicles.Add("DIABLOUS"); //
                sVehicles.Add("DIABLOUS2"); //<!-- Diabolus Custom -->
                sVehicles.Add("DOUBLE"); //
                sVehicles.Add("ENDURO"); //
                sVehicles.Add("ESSKEY"); //
                sVehicles.Add("FAGGIO2"); //
                sVehicles.Add("FAGGIO3"); //<!-- Faggio Mod -->
                sVehicles.Add("FAGGIO"); //<!-- Faggio Sport -->
                sVehicles.Add("GARGOYLE"); //
                sVehicles.Add("HAKUCHOU"); //
                sVehicles.Add("HAKUCHOU2"); //<!-- Hakuchou Drag -->
                sVehicles.Add("HEXER"); //
                sVehicles.Add("INNOVATION"); //
                sVehicles.Add("LECTRO"); //
                sVehicles.Add("MANCHEZ"); //
                sVehicles.Add("NEMESIS"); //
                sVehicles.Add("NIGHTBLADE"); //
                sVehicles.Add("PCJ"); //
                sVehicles.Add("RATBIKE"); //
                sVehicles.Add("RUFFIAN"); //
                sVehicles.Add("SANCHEZ"); //<!-- Sanchez livery variant -->
                sVehicles.Add("SANCHEZ2"); //
                sVehicles.Add("THRUST"); //
                sVehicles.Add("VADER"); //
                sVehicles.Add("VINDICATOR"); //
                sVehicles.Add("WOLFSBANE"); //
                sVehicles.Add("ZOMBIEB"); //<!-- Zombie Chopper -->
                if (bTrainM)
                {
                    sVehicles.Add("MANCHEZ2"); //><!-- Maibatsu Manchez Scout -->
                }
            }       //Motorcycle
            else if (iVechList == 12)
            {
                sVehicles.Add("BMX"); //
                sVehicles.Add("CRUISER"); //
                sVehicles.Add("TRIBIKE2"); //<!-- Endurex Race Bike -->
                sVehicles.Add("FIXTER"); //
                sVehicles.Add("SCORCHER"); //
                sVehicles.Add("TRIBIKE3"); //<!-- Tri-Cycles Race Bike -->
                sVehicles.Add("TRIBIKE"); //<!-- Whippet Race Bike -->
            }       //Bicycle
            else if (iVechList == 13)
            {
                sVehicles.Add("BLAZER"); //
                sVehicles.Add("BLAZER5"); //<!-- Blazer Aqua -->
                sVehicles.Add("BLAZER2"); //<!-- Blazer Lifeguard -->
                sVehicles.Add("BLAZER3"); //<!-- Hot Rod Blazer -->
                sVehicles.Add("BLAZER4"); //<!-- Street Blazer -->
                sVehicles.Add("BAGGER"); //
                sVehicles.Add("BATI"); //
                sVehicles.Add("BATI2"); //<!-- Bati 801RR -->
                sVehicles.Add("BF400"); //
                sVehicles.Add("CARBONRS"); //
                sVehicles.Add("CLIFFHANGER"); //
                sVehicles.Add("DAEMON"); //<!-- Daemon Lost MC variant -->
                sVehicles.Add("DAEMON2"); //<!-- Daemon Bikers DLC variant -->
                sVehicles.Add("FCR"); //
                sVehicles.Add("FCR2"); //<!-- FCR 1000 Custom -->
                sVehicles.Add("SANCTUS"); //
                sVehicles.Add("SHOTARO"); //
                sVehicles.Add("SOVEREIGN"); //
                sVehicles.Add("VORTEX"); //
                sVehicles.Add("ZOMBIEA"); //<!-- Zombie Bobber -->
                if (bTrainM)
                {
                    sVehicles.Add("S80"); //
                    sVehicles.Add("DEATHBIKE"); //<!-- Apocalypse Deathbike -->
                    sVehicles.Add("DEATHBIKE2"); //<!-- Future Shock Deathbike -->
                    sVehicles.Add("DEATHBIKE3"); //<!-- Nightmare Deathbike -->
                    sVehicles.Add("OPPRESSOR2"); //<!-- Oppressor Mk II -->
                    sVehicles.Add("OPPRESSOR"); //
                    sVehicles.Add("RROCKET"); //<!-- Rampant Rocket -->
                    sVehicles.Add("STRYDER"); //
                    sVehicles.Add("VERUS"); //><!-- Dinka Verus -->ATV
                    sVehicles.Add("VETO"); //><!-- Dinka Veto Classic -->GoCart
                    sVehicles.Add("VETO2"); //><!-- Dinka Veto Modern -->GoCart
                }
            }       //SingleSeat
            else if (iVechList == 14)
            {
                sVehicles.Add("BISON"); //
                sVehicles.Add("CONTENDER"); //
                sVehicles.Add("DUBSTA3"); //<!-- Dubsta 6x6 -->
                sVehicles.Add("GUARDIAN"); //
                sVehicles.Add("PICADOR"); //
                sVehicles.Add("SADLER"); //
                sVehicles.Add("SLAMVAN"); //
                sVehicles.Add("SLAMVAN3"); //<!-- Slamvan Custom -->
                sVehicles.Add("YOSEMITE"); //
                sVehicles.Add("CAMPER"); //
                sVehicles.Add("JOURNEY"); //
                sVehicles.Add("MINIVAN"); //
                sVehicles.Add("MINIVAN2"); //<!-- Minivan Custom -->
                sVehicles.Add("PARADISE"); //
                sVehicles.Add("SURFER"); //
                sVehicles.Add("SURFER2"); //<!-- Surfer beater variant -->
                sVehicles.Add("YOUGA"); //
                sVehicles.Add("YOUGA2"); //<!-- Youga Classic -->
                                         //if (bTrainM)
                                         //   sVehicles.Add("YOUGA3"); //<!-- Youga Classic 4x4 -->
            }       //Pickup + Vans
            else if (iVechList == 15)
            {
                sVehicles.Add("HAULER"); //
                sVehicles.Add("HAULER2"); //<!-- Hauler Custom -->
                sVehicles.Add("PACKER"); //
                sVehicles.Add("PHANTOM"); //
                sVehicles.Add("PHANTOM3"); //<!-- Phantom Custom -->
                sVehicles.Add("BARRACKS2"); //<!-- Barracks Semi -->
            }       //Trucks
            else if (iVechList == 16)
            {
                sVehicles.Add("DILETTANTE2"); //<!-- Merryweather Dilettante -->
                sVehicles.Add("BENSON"); //
                sVehicles.Add("BIFF"); //
                sVehicles.Add("DUMP"); //
                sVehicles.Add("FLATBED"); //
                sVehicles.Add("MIXER"); //
                sVehicles.Add("MIXER2"); //<!-- Mixer 8-wheel variant -->
                sVehicles.Add("MULE"); //
                sVehicles.Add("MULE2"); //<!-- Mule ramp door variant -->
                sVehicles.Add("MULE3"); //<!-- Mule heist variant -->
                sVehicles.Add("POUNDER"); //
                sVehicles.Add("RUBBLE"); //
                sVehicles.Add("TIPTRUCK"); //<!-- Tipper 4-wheel variant -->
                sVehicles.Add("TIPTRUCK2"); //<!-- Tipper 6-wheel variant -->
                sVehicles.Add("BISON"); //
                sVehicles.Add("BISON2"); //<!-- McGill-Olsen Bison -->
                sVehicles.Add("BISON3"); //<!-- Mighty Bush Bison -->
                sVehicles.Add("BOBCATXL"); //
                sVehicles.Add("BOXVILLE"); //<!-- LSDWP Boxville -->
                sVehicles.Add("BOXVILLE2"); //<!-- Go Postal Boxville -->
                sVehicles.Add("BOXVILLE3"); //<!-- Humane Labs Boxville -->
                sVehicles.Add("BOXVILLE4"); //<!-- PostOp Boxville -->
                sVehicles.Add("BURRITO"); //
                sVehicles.Add("BURRITO2"); //<!-- Burrito Bugstars variant -->
                sVehicles.Add("BURRITO3"); //<!-- Burrito civilian variant -->
                sVehicles.Add("BURRITO4"); //<!-- Burrito McGill-Olsen variant -->
                sVehicles.Add("BURRITO5"); //<!-- Burrito North Yankton variant -->
                sVehicles.Add("SPEEDO2"); //<!-- Clown Van -->
                sVehicles.Add("GBURRITO"); //<!-- Gang Burrito Lost MC variant -->
                sVehicles.Add("GBURRITO2"); //<!-- Gang Burrito heist variant -->
                sVehicles.Add("PONY"); //
                sVehicles.Add("PONY2"); //<!-- Pony Smoke on the Water variant -->
                sVehicles.Add("RUMPO"); //
                sVehicles.Add("RUMPO2"); //<!-- Rumpo Deludamol variant -->
                sVehicles.Add("RUMPO3"); //<!-- Rumpo Custom -->
                sVehicles.Add("SPEEDO"); //
                sVehicles.Add("TACO"); //
                sVehicles.Add("SCRAP"); //
                sVehicles.Add("TAXI"); //
                sVehicles.Add("TOWTRUCK2"); //<!-- Tow Truck Slamvan variant -->
                sVehicles.Add("TOWTRUCK"); //<!-- Towtruck Yankee variant -->
                sVehicles.Add("TRASH"); //
                sVehicles.Add("TRASH2"); //<!-- Trashmaster heist variant -->
                sVehicles.Add("UTILLITRUCK"); //<!-- Utility Truck cherry picker variant -->
                sVehicles.Add("UTILLITRUCK2"); //<!-- Utility Truck flatbed variant -->
                sVehicles.Add("UTILLITRUCK3"); //<!-- Utility Truck pick-up variant -->
                sVehicles.Add("WASTLNDR"); //
            }       //Comercial
            else if (iVechList == 17)
            {
                sVehicles.Add("AIRTUG"); //
                sVehicles.Add("BULLDOZER"); //
                sVehicles.Add("CUTTER"); //<!-- Big Yellow Cutting Machine -->
                sVehicles.Add("HANDLER"); //<!-- Dock Handler -->
                sVehicles.Add("CADDY"); //<!-- Caddy golf variant -->
                sVehicles.Add("CADDY2"); //<!-- Caddy civilian variant -->
                sVehicles.Add("CADDY3"); //<!-- Caddy bunker variant -->
                sVehicles.Add("DOCKTUG"); //
                sVehicles.Add("TRACTOR2"); //<!-- Fieldmaster -->
                sVehicles.Add("FORKLIFT"); //
                sVehicles.Add("MOWER"); //
                sVehicles.Add("RIPLEY"); //
                sVehicles.Add("TRACTOR"); //
            }       //Utility
            else if (iVechList == 18)
            {
                sVehicles.Add("AIRBUS"); //
                sVehicles.Add("BUS"); //
                sVehicles.Add("COACH"); //<!-- Dashound -->
                sVehicles.Add("PBUS2"); //<!-- Festival Bus -->
                sVehicles.Add("RENTALBUS"); //<!-- Rental Shuttle Bus -->
                sVehicles.Add("TOURBUS"); //
                sVehicles.Add("PBUS"); //<!-- Prison Bus -->
            }       //Bus
            else if (iVechList == 19)
            {
                sVehicles.Add("AMBULANCE"); //
                sVehicles.Add("BARRACKS"); //
                sVehicles.Add("CRUSADER"); //
                sVehicles.Add("FBI"); //<!-- FIB Buffalo -->
                sVehicles.Add("FBI2"); //<!-- FIB Granger -->
                sVehicles.Add("LGUARD"); //
                sVehicles.Add("PRANGER"); //<!-- Park Ranger -->
                sVehicles.Add("POLICEB"); //<!-- Police Bike -->
                sVehicles.Add("POLICE2"); //<!-- Police Cruiser Buffalo -->
                sVehicles.Add("POLICE"); //<!-- Police Cruiser Stanier -->
                sVehicles.Add("POLICE3"); //<!-- Police Cruiser Interceptor -->
                sVehicles.Add("POLICEOLD1"); //<!-- Police Rancher -->
                sVehicles.Add("RIOT"); //<!-- Police Riot -->
                sVehicles.Add("POLICEOLD2"); //<!-- Police Roadcruiser -->
                sVehicles.Add("POLICET"); //<!-- Police Transporter -->
                sVehicles.Add("SHERIFF"); //<!-- Sheriff Cruiser -->
                sVehicles.Add("SHERIFF2"); //<!-- Sheriff SUV -->
                sVehicles.Add("POLICE4"); //<!-- Unmarked Cruiser -->
                if (bTrainM)
                {
                    sVehicles.Add("SQUADDIE"); //><!-- Mammoth Squaddie -->
                    sVehicles.Add("slamtruck"); //Vapid Slamtruck -Utility
                    sVehicles.Add("VETIR"); //>Vetir--Patriot truck--
                }
            }       //Emergency
            else if (iVechList == 20)
            {
                sVehicles.Add("KURUMA2"); //<!-- Kuruma (Armored) -->
                sVehicles.Add("DUKES2"); //<!-- Duke O'Death -->
                sVehicles.Add("LIMO2"); //<!-- Turreted Limo -->
                sVehicles.Add("CARACARA"); //
                sVehicles.Add("DUNE3"); //<!-- Dune FAV -->
                sVehicles.Add("DUNE4"); //<!-- Ramp Buggy mission variant -->
                sVehicles.Add("DUNE5"); //<!-- Ramp Buggy -->
                sVehicles.Add("INSURGENT"); //
                sVehicles.Add("INSURGENT2"); //<!-- Insurgent Pick-Up -->
                sVehicles.Add("INSURGENT3"); //<!-- Insurgent Pick-Up Custom -->
                sVehicles.Add("MARSHALL"); //
                sVehicles.Add("MONSTER"); //<!-- Liberator -->
                sVehicles.Add("MENACER"); //
                sVehicles.Add("NIGHTSHARK"); //
                sVehicles.Add("TECHNICAL"); //
                sVehicles.Add("TECHNICAL2"); //<!-- Technical Aqua -->
                sVehicles.Add("TECHNICAL3"); //<!-- Technical Custom -->
                sVehicles.Add("GUARDIAN"); //
                sVehicles.Add("MULE4"); //<!-- Mule Custom -->
                sVehicles.Add("POUNDER2"); //<!-- Pounder Custom -->
                sVehicles.Add("SPEEDO4"); //<!-- Speedo Custom -->
                sVehicles.Add("PHANTOM2"); //<!-- Phantom Wedge -->
                sVehicles.Add("STOCKADE"); //<!-- Securicar -->
                sVehicles.Add("BOXVILLE5"); //<!-- Armored Boxville -->
                sVehicles.Add("TERBYTE"); //
                sVehicles.Add("BRICKADE"); //
                sVehicles.Add("APC"); //
                sVehicles.Add("BARRAGE"); //
                sVehicles.Add("CHERNOBOG"); //
                sVehicles.Add("HALFTRACK"); //
                sVehicles.Add("RIOT2"); //<!-- RCV -->
                sVehicles.Add("VIGILANTE"); //
                sVehicles.Add("TAMPA3"); //<!-- Weaponized Tampa -->
                sVehicles.Add("RUINER2"); //<!-- Ruiner 2000 -->
                sVehicles.Add("STROMBERG"); //
                sVehicles.Add("DELUXO"); //
                sVehicles.Add("SCRAMJET"); //
                if (bTrainM)
                {
                    sVehicles.Add("ZR380"); //<!-- Apocalypse ZR380 -->
                    sVehicles.Add("ZR3802"); //<!-- Future Shock ZR380 -->
                    sVehicles.Add("ZR3803"); //<!-- Nightmare ZR380 -->
                    sVehicles.Add("DOMINATOR4"); //<!-- Apocalypse Dominator -->
                    sVehicles.Add("IMPALER2"); //<!-- Apocalypse Impaler -->
                    sVehicles.Add("IMPERATOR"); //<!-- Apocalypse Imperator -->
                    sVehicles.Add("SLAMVAN4"); //<!-- Apocalypse Slamvan -->
                    sVehicles.Add("DOMINATOR5"); //<!-- Future Shock Dominator -->
                    sVehicles.Add("IMPALER3"); //<!-- Future Shock Impaler -->
                    sVehicles.Add("IMPERATOR2"); //<!-- Future Shock Imperator -->
                    sVehicles.Add("SLAMVAN5"); //<!-- Future Shock Slamvan -->
                    sVehicles.Add("DOMINATOR6"); //<!-- Nightmare Dominator -->
                    sVehicles.Add("IMPALER4"); //<!-- Nightmare Impaler -->
                    sVehicles.Add("IMPERATOR3"); //<!-- Nightmare Imperator -->
                    sVehicles.Add("SLAMVAN6"); //<!-- Nightmare Slamvan -->
                    sVehicles.Add("CERBERUS"); //<!-- Apocalypse Cerberus -->
                    sVehicles.Add("CERBERUS2"); //<!-- Future Shock Cerberus -->
                    sVehicles.Add("CERBERUS3"); //<!-- Nightmare Cerberus -->
                    sVehicles.Add("ISSI4"); //<!-- Apocalypse Issi -->
                    sVehicles.Add("ISSI5"); //<!-- Future Shock Issi -->
                    sVehicles.Add("ISSI6"); //<!-- Nightmare Issi -->
                    sVehicles.Add("BRUISER"); //<!-- Apocalypse Bruiser -->
                    sVehicles.Add("BRUTUS"); //<!-- Apocalypse Brutus -->
                    sVehicles.Add("MONSTER3"); //<!-- Apocalypse Sasquatch -->
                    sVehicles.Add("BRUISER2"); //<!-- Future Shock Bruiser -->
                    sVehicles.Add("BRUTUS2"); //<!-- Future Shock Brutus -->
                    sVehicles.Add("MONSTER4"); //<!-- Future Shock Sasquatch -->
                    sVehicles.Add("BRUISER3"); //<!-- Nightmare Bruiser -->
                    sVehicles.Add("BRUTUS3"); //<!-- Nightmare Brutus -->
                    sVehicles.Add("MONSTER5"); //<!-- Nightmare Sasquatch -->
                    sVehicles.Add("SCARAB"); //<!-- Apocalypse Scarab -->
                    sVehicles.Add("SCARAB2"); //<!-- Future Shock Scarab -->
                    sVehicles.Add("SCARAB3"); //<!-- Nightmare Scarab -->
                }
            }       //Millatary / SaintsRow
            else if (iVechList == 21)
            {
                sVehicles.Add("RHINO"); //
                sVehicles.Add("KHANJALI"); //<!-- TM-02 Khanjali -->
            }       //Tanks and Rockets
            else if (iVechList == 22)
            {
                sVehicles.Add("ALPHAZ1"); //
                sVehicles.Add("BLIMP"); //<!-- Atomic Blimp -->
                sVehicles.Add("AVENGER"); //
                sVehicles.Add("AVENGER2"); //<!-- Avenger with folded wings -->
                sVehicles.Add("BESRA"); //
                sVehicles.Add("BLIMP3"); //
                sVehicles.Add("CARGOPLANE"); //
                sVehicles.Add("CUBAN800"); //
                sVehicles.Add("DODO"); //
                sVehicles.Add("DUSTER"); //
                sVehicles.Add("HOWARD"); //<!-- Howard NX-25 -->
                sVehicles.Add("JET"); //
                sVehicles.Add("LUXOR"); //
                sVehicles.Add("LUXOR2"); //<!-- Luxor Deluxe -->
                sVehicles.Add("STUNT"); //<!-- Mallard -->
                sVehicles.Add("MAMMATUS"); //
                sVehicles.Add("MILJET"); //
                sVehicles.Add("MOGUL"); //
                sVehicles.Add("NIMBUS"); //
                sVehicles.Add("NOKOTA"); //<!-- P-45 Nokota -->
                sVehicles.Add("BOMBUSHKA"); //<!-- RM-10 Bombushka -->
                sVehicles.Add("SEABREEZE"); //
                sVehicles.Add("SHAMAL"); //
                sVehicles.Add("TITAN"); //
                sVehicles.Add("TULA"); //
                sVehicles.Add("MICROLIGHT"); //<!-- Ultralight -->
                sVehicles.Add("VELUM"); //
                sVehicles.Add("VELUM2"); //<!-- Velum 5-Seater -->
                sVehicles.Add("VESTRA"); //
                sVehicles.Add("VOLATOL"); //
                sVehicles.Add("BLIMP2"); //<!-- Xero Blimp -->
            }       //Planes
            else if (iVechList == 23)
            {
                sVehicles.Add("STRIKEFORCE"); //<!-- B-11 Strikeforce -->
                sVehicles.Add("HYDRA"); //
                sVehicles.Add("STARLING"); //<!-- LF-22 Starling -->
                sVehicles.Add("LAZER"); //<!-- P-996 LAZER -->
                sVehicles.Add("PYRO"); //
                sVehicles.Add("ROGUE"); //
                sVehicles.Add("MOLOTOK"); //<!-- V-65 Molotok -->
                if (bTrainM)
                {
                    sVehicles.Add("alkonost"); //ROsVeh.Add("86 Alkonost -Planes
                }
            }       //Attack Planes
            else if (iVechList == 24)
            {
                sVehicles.Add("BUZZARD2"); //<!-- Buzzard -->
                sVehicles.Add("HAVOK"); //
                sVehicles.Add("SEASPARROW"); //
                sVehicles.Add("CARGOBOB"); //<!-- Military Cargobob -->
                sVehicles.Add("CARGOBOB2"); //<!-- Jetsam Cargobob -->
                sVehicles.Add("FROGGER"); //
                sVehicles.Add("MAVERICK"); //
                sVehicles.Add("POLMAV"); //
                sVehicles.Add("SKYLIFT"); //
                sVehicles.Add("SUPERVOLITO"); //
                sVehicles.Add("SUPERVOLITO2"); //<!-- SuperVolito Carbon -->
                sVehicles.Add("SWIFT"); //
                sVehicles.Add("SWIFT2"); //<!-- Swift Deluxe -->
                sVehicles.Add("VOLATUS"); //
                if (bTrainM)
                {
                    sVehicles.Add("annihilator2"); //Annihilator Stealth -Helicopters
                    sVehicles.Add("seasparrow2"); //Sparrow -Helicopters
                }
            }       //Helicopters
            else if (iVechList == 25)
            {
                sVehicles.Add("AKULA"); //
                sVehicles.Add("ANNIHILATOR"); //
                sVehicles.Add("BUZZARD"); //<!-- Buzzard Attack Chopper -->
                sVehicles.Add("HUNTER"); //<!-- FH-1 Hunter -->
                sVehicles.Add("SAVAGE"); //
                sVehicles.Add("VALKYRIE"); //
                sVehicles.Add("VALKYRIE2"); //<!-- Valkyrie MOD.0 -->
            }       //Attack Helicopters
            else if (iVechList == 26)
            {
                sVehicles.Add("DINGHY"); //
                sVehicles.Add("DINGHY2"); //<!-- Dinghy 2-seater variant -->
                sVehicles.Add("DINGHY3"); //<!-- Dinghy heist variant -->
                sVehicles.Add("DINGHY4"); //<!-- Dinghy yacht variant -->
                sVehicles.Add("JETMAX"); //
                sVehicles.Add("SUBMERSIBLE2"); //<!-- Kraken -->
                sVehicles.Add("PREDATOR"); //
                sVehicles.Add("SPEEDER"); //
                sVehicles.Add("SPEEDER2"); //<!-- Speeder yacht variant -->
                sVehicles.Add("SQUALO"); //
                sVehicles.Add("SUBMERSIBLE"); //
                sVehicles.Add("SUNTRAP"); //
                sVehicles.Add("TORO"); //
                sVehicles.Add("TORO2"); //<!-- Toro yacht variant -->
                sVehicles.Add("TROPIC"); //
                sVehicles.Add("TROPIC2"); //<!-- Tropic yacht variant -->
                if (bTrainM)
                {
                    sVehicles.Add("avisa"); //Kraken Avisa -Boats
                    sVehicles.Add("dinghy5"); //Nagasaki Weaponized Dinghy -Boats
                    sVehicles.Add("longfin"); //Shitzu Longfin -Boats
                    sVehicles.Add("patrolboat"); //Kurtz 31 Patrol Boat -Boats
                }
            }       //Boats
            else if (iVechList == 27)
            {
                sVehicles.Add("SEASHARK"); //
                sVehicles.Add("SEASHARK2"); //<!-- Lifeguard Seashark -->
                sVehicles.Add("SEASHARK3"); //<!-- Seashark yacht variant -->
            }       //Jetskies
            else if (iVechList == 28)
            {
                sVehicles.Add("BUZZARD2"); //<!-- Buzzard -->
                sVehicles.Add("HAVOK"); //
                sVehicles.Add("SEASPARROW"); //
            }       //Hellies
            else if (iVechList == 29)
            {
                sVehicles.Add("MARQUIS");
            }       //Maques
            else if (iVechList == 30)
            {
                sVehicles.Add("RUINER3"); //<!-- Ruiner 2000 wreck -->
                sVehicles.Add("ASEA2"); //<!-- Asea North Yankton variant -->
                sVehicles.Add("EMPEROR3"); //<!-- Emperor North Yankton variant -->
                sVehicles.Add("MESA2"); //<!-- Mesa North Yankton variant -->
                sVehicles.Add("SADLER2"); //<!-- Sadler North Yankton variant -->
                sVehicles.Add("STOCKADE3"); //<!-- Securicar North Yankton variant -->
                sVehicles.Add("TRACTOR3"); //<!-- Fieldmaster North Yankton variant -->
                sVehicles.Add("SADLER2"); //<!-- Sadler North Yankton variant -->
            }       //Specilized/Cut Sceen/Band.
            else if (iVechList == 31)
            {
                sVehicles.Add("CARACARA"); //
                sVehicles.Add("INSURGENT3"); //<!-- Insurgent Pick-Up Custom -->
                sVehicles.Add("TECHNICAL"); //
                sVehicles.Add("TECHNICAL2"); //<!-- Technical Aqua -->
                sVehicles.Add("TECHNICAL3"); //<!-- Technical Custom -->
                sVehicles.Add("BOXVILLE5"); //<!-- Armored Boxville -->
            }       //The Piolt05 tecnicals.
            else if (iVechList == 32)
            {
                sVehicles.Add("AVARUS"); //
                sVehicles.Add("CHIMERA"); //
                sVehicles.Add("DAEMON"); //<!-- Daemon Lost MC variant -->
                sVehicles.Add("DIABLOUS"); //
                sVehicles.Add("GARGOYLE"); //
                sVehicles.Add("HEXER"); //
                sVehicles.Add("NIGHTBLADE"); //
                sVehicles.Add("WOLFSBANE"); //
                sVehicles.Add("ZOMBIEB"); //<!-- Zombie Chopper -->
                sVehicles.Add("SANCTUS"); //
                sVehicles.Add("ZOMBIEA"); //<!-- Zombie Bobber -->
            }       //Lost MC Bikes
            else if (iVechList == 33)
            {
                sVehicles.Add("SULTANRS");
                sVehicles.Add("COMET4");
                sVehicles.Add("TAMPA2");
                sVehicles.Add("GB200");
                sVehicles.Add("KURUMA");
                sVehicles.Add("TROPHYTRUCK2");
                sVehicles.Add("TROPHYTRUCK");
                if (bTrainM)
                {
                    sVehicles.Add("ISSI7");
                    sVehicles.Add("SUGOI");
                    sVehicles.Add("SULTAN2");
                    sVehicles.Add("WINKY");
                    sVehicles.Add("OUTLAW");
                    sVehicles.Add("VAGRANT");
                }
            }       //cayorace
            else
            {
                sVehicles.Add("BJXL"); //
            }

            if (sVehicles.Count == 0)
                sVehicles.Add("BJXL");

            return sVehicles;
        }
        public Vehicle VehicleSpawn(string sVehModel, Vector3 VecLocal, float VecHead, bool bIsInvinc, bool bFreeze, bool bRouteto, bool bFlasher, int iMod, int iExtraMod, int iBlip, int iVehTrack, bool bModShop)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("VehicleSpawn, sVehModel == " + sVehModel + ", bIsInvinc == " + bIsInvinc + ", bFreeze == " + bFreeze + ", iMod == " + iMod + ", iExtraMod == " + iExtraMod + ", iBlip == " + iBlip, tEx);

            Vehicle BuildVehicle = null;

            if (sVehModel == "" || !IsItARealVehicle(sVehModel))
                sVehModel = ImportsExpo_CarList(1);

            int iVehHash = Function.Call<int>(Hash.GET_HASH_KEY, sVehModel);

            if (Function.Call<bool>(Hash.IS_MODEL_IN_CDIMAGE, iVehHash) && Function.Call<bool>(Hash.IS_MODEL_A_VEHICLE, iVehHash))
            {
                Function.Call(Hash.REQUEST_MODEL, iVehHash);
                while (!Function.Call<bool>(Hash.HAS_MODEL_LOADED, iVehHash))
                    Wait(1);

                BuildVehicle = Function.Call<Vehicle>(Hash.CREATE_VEHICLE, iVehHash, VecLocal.X, VecLocal.Y, VecLocal.Z, VecHead, true, true);
                Function.Call(Hash.SET_MODEL_AS_NO_LONGER_NEEDED, iVehHash);

                if (iVehTrack > 0)
                {
                    if (iVehTrack == 1)
                        VehTrackin_01 = BuildVehicle;
                    else if (iVehTrack == 2)
                        VehTrackin_02 = BuildVehicle;
                    else if (iVehTrack == 3)
                        VehTrackin_03 = BuildVehicle;
                    else if (iVehTrack == 4)
                        VehTrackin_04 = BuildVehicle;
                    else if (iVehTrack == 5)
                        VehTrackin_05 = BuildVehicle;
                }
            }
            else
                BuildVehicle = null;

            if (BuildVehicle.Exists())
            {
                BuildVehicle.IsPersistent = true;
                BuildVehicle.IsInvincible = bIsInvinc;
                BuildVehicle.FreezePosition = bFreeze;
                VehicleList_01.Add(new Vehicle(BuildVehicle.Handle));

                if (iBlip > 0)
                {
                    BlipSprite Bs = BlipSprite.AlienWeapon;
                    if (iBlip == 1)
                        Bs = BlipSprite.PersonalVehicleCar;
                    else if (iBlip == 2)
                        Bs = BlipSprite.Truck;
                    else if (iBlip == 3)
                        Bs = BlipSprite.Trailer;
                    else if (iBlip == 4)
                        Bs = BlipSprite.Package2;
                    else if (iBlip == 5)
                        Bs = BlipSprite.Bus;
                    else if (iBlip == 6)
                        Bs = BlipSprite.Plane;
                    else if (iBlip == 7)
                        Bs = BlipSprite.Helicopter;
                    else if (iBlip == 8)
                        Bs = BlipSprite.ArmoredTruck;
                    else if (iBlip == 9)
                        Bs = BlipSprite.SportsCar;
                    else if (iBlip == 10)
                        Bs = BlipSprite.Crosshair2;
                    else if (iBlip == 11)
                        Bs = BlipSprite.Tank;
                    else if (iBlip == 12)
                        Bs = BlipSprite.Wastelander;
                    else if (iBlip == 13)
                        Bs = BlipSprite.HotProperty;
                    else if (iBlip == 14)
                        Bs = BlipSprite.Speedboat;
                    else if (iBlip == 15)
                        Bs = BlipSprite.QuadBike;
                    else if (iBlip == 16)
                        Bs = BlipSprite.Seabreeze;
                    else if (iBlip == 17)
                        Bs = BlipSprite.SeaSparrow;
                    else if (iBlip == 18)
                        Bs = BlipSprite.TechnicalAqua;
                    else if (iBlip == 19)
                        Bs = BlipSprite.RCBanditoTimeTrials;
                    else if (iBlip == 20)
                        Bs = BlipSprite.TowTruck2;
                    else if (iBlip == 21)
                        Bs = BlipSprite.Sub;
                    else if (iBlip == 22)
                        Bs = BlipSprite.Limo;
                    else if (iBlip == 23)
                        Bs = BlipSprite.Seashark;
                    else if (iBlip == 24)
                        Bs = BlipSprite.GangBike;
                    else if (iBlip == 25)
                        Bs = BlipSprite.Cab;
                    else if (iBlip == 26)
                        Bs = BlipSprite.Crosshair2;

                    VehBlip(BuildVehicle, Bs, bFlasher, bRouteto);
                }

                VehicleMods(BuildVehicle, iMod, iExtraMod, bModShop);
            }
            else
                BuildVehicle = null;

            return BuildVehicle;
        }
        private void MaxModsRandExtras(Vehicle Vehic)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("MaxModsRandExtras", tEx);

            bool bMotoBike = Vehic.ClassType == VehicleClass.Motorcycles;

            for (int i = 0; i < 50; i++)
            {
                int iSpoilher = Function.Call<int>(Hash.GET_NUM_VEHICLE_MODS, Vehic.Handle, i);

                if (i == 11 || i == 12 || i == 13 || i == 15 || i == 16)
                    Function.Call(Hash.SET_VEHICLE_MOD, Vehic.Handle, i, iSpoilher - 1, true);
                else if (i == 18 || i == 22)
                {

                }
                else if (i == 24)
                {
                    if (bMotoBike)
                        Function.Call(Hash.SET_VEHICLE_MOD, Vehic.Handle, i, Function.Call<int>(Hash.GET_VEHICLE_MOD, Vehic.Handle, 23), true);
                }
                else
                {
                    if (iSpoilher != 0)
                        Function.Call(Hash.SET_VEHICLE_MOD, Vehic.Handle, i, RandInt(0, iSpoilher - 1), true);
                }
            }
            if (Vehic.ClassType != VehicleClass.Cycles || Vehic.ClassType != VehicleClass.Helicopters || Vehic.ClassType != VehicleClass.Boats || Vehic.ClassType != VehicleClass.Planes)
            {
                Vehic.ToggleMod(VehicleToggleMod.XenonHeadlights, true);
                Vehic.ToggleMod(VehicleToggleMod.Turbo, true);
            }
        }
        private void ModExtras(Vehicle Vehic, List<int> VehExtras)
        {
            for (int i = 0; i < 15; i++)
            {
                if (Function.Call<bool>(Hash.DOES_EXTRA_EXIST, Vehic, i))
                    Function.Call(Hash.SET_VEHICLE_EXTRA, Vehic, i, true);
            }


            for (int i = 0; i < VehExtras.Count; i++)
            {
                if (Function.Call<bool>(Hash.DOES_EXTRA_EXIST, Vehic, VehExtras[i]))
                    Function.Call(Hash.SET_VEHICLE_EXTRA, Vehic, VehExtras[i], false);
            }
        }
        private void VehicleMods(Vehicle Vehic, int iMod, int iExtraMod, bool bModShop)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("VehicleMods, iMod == " + iMod + ", iExtraMod == " + iExtraMod, tEx);

            List<int> MyExtras = new List<int>();

            Function.Call(Hash.SET_VEHICLE_MOD_KIT, Vehic, 0);

            if (bModShop)
                MaxModsRandExtras(Vehic);

            if (iMod == 1)
            {
                if (iExtraMod > 0)
                    MyExtras.Add(iExtraMod);

                ModExtras(Vehic, MyExtras);
            }        // Extras
            else if (iMod == 2)
            {
                if (iExtraMod == 1)
                {
                    Vehic.PrimaryColor = VehicleColor.MatteWhite;
                    Vehic.SecondaryColor = VehicleColor.MatteMidnightBlue;
                }
                else if (iExtraMod == 2)
                {
                    Vehic.Livery = 6;
                }
                else if (iExtraMod == 3)
                {
                    Vehic.Livery = 9;
                    Vehic.PrimaryColor = VehicleColor.MetallicBlazeRed;
                }
                else if (iExtraMod == 4)
                {
                    Vehic.PrimaryColor = VehicleColor.MetallicBlack;
                    Vehic.SecondaryColor = VehicleColor.MetallicUltraBlue;

                }
                else if (iExtraMod == 5)
                {
                    Vehic.CurrentBlip.Color = BlipColor.Blue;
                    ImportsExpo_FunPlates(Vehic);
                    iMissionSeq = 3;
                }
                else if (iExtraMod == 6)
                {
                    Vehic.CurrentBlip.Color = BlipColor.Red3;
                    NPCSpawn(RandNPC(RandInt(1, 35)), Vehic.Position, 0.00f, 65, 120, 0, 38, 1, Vehic, 0, false, false, iExtraMod - 1, 0);
                    iMissionSeq = 3;
                }
                else if (iExtraMod == 7)
                {
                    Vehic.CurrentBlip.Color = BlipColor.Red3;
                    NPCSpawn(RandNPC(RandInt(1, 35)), Vehic.Position, 0.00f, 65, 120, 0, 32, 1, Vehic, 0, false, false, iExtraMod - 1, 0);
                    iMissionSeq = 3;
                }
                else if (iExtraMod == 8)
                {
                    Vehic.Position = new Vector3(Vehic.Position.X, Vehic.Position.Y, Vehic.Position.Z + 50.00f);
                    GenPlayerPed(Vehic.Position, 0.00f, 65, 170, 2, 30, 0, null, 0, false, false, 0, false);
                    Vehic.CurrentBlip.Color = BlipColor.Red;
                    int iNoSeats = Vehic.PassengerSeats + 1;
                    while (iNoSeats > 1)
                    {
                        GenPlayerPed(Vehic.Position, Vehic.Heading, 45, 160, 2, 99, iNoSeats, Vehic, 2, false, true, 0, false);
                        iNoSeats = iNoSeats - 1;
                    }
                }
                else if (iExtraMod == 9)
                {
                    Vehic.SetMod(VehicleMod.Roof, 1, true);
                }
                else if (iExtraMod == 10)
                {
                    Vehic.PrimaryColor = VehicleColor.MatteBlack;
                    Vehic.SecondaryColor = VehicleColor.MatteBlack;
                }
                else if (iExtraMod == 11)
                {
                    Vehic.PrimaryColor = VehicleColor.MetallicWhite;
                    Vehic.Alpha = 120;
                }
            }   // PaintJobs
            else if (iMod == 3)
            {
                if (iExtraMod == 1)
                {
                    Vehic.PrimaryColor = VehicleColor.MetallicWhite;
                    Vehic.SmashWindow(VehicleWindow.FrontLeftWindow);
                    Vehic.DirtLevel = 99.75f;
                    NPCSpawn(RandNPC(18), Vehic.Position, 0.00f, 65, 150, 2, 26, 1, Vehic, 2, false, false, 0, 0);
                    Vehic.CurrentBlip.Color = BlipColor.Yellow;
                }
                else if (iExtraMod == 2)
                    Vehic.LockStatus = VehicleLockStatus.Locked;
                else if (iExtraMod == 3)
                {
                    Vehic.PrimaryColor = VehicleColor.MetallicWhite;
                    Vehic.SmashWindow(VehicleWindow.FrontLeftWindow);
                    Vehic.DirtLevel = 99.75f;
                    NPCSpawn(RandNPC(18), Vehic.Position, 0.00f, 65, 150, 0, 44, 1, Vehic, 2, false, false, 8, 0);
                    Vehic.CurrentBlip.Color = BlipColor.Yellow;
                }
                else if (iExtraMod == 4)
                {
                    Peggs = Vehic;
                    if (Vehic.CurrentBlip.Exists())
                        Vehic.CurrentBlip.Color = BlipColor.NetPlayer1;
                    VehicleList_01.Remove(Vehic);
                    Function.Call(Hash.SET_VEHICLE_ON_GROUND_PROPERLY, Vehic);
                    bImports = true;
                }
                else if (iExtraMod == 5)
                {
                    FubarCarX = Vehic;
                    NPCSpawn("mp_m_weapexp_01", Vehic.Position, 0.00f, 99, 180, 0, 22, 1, Vehic, 7, false, false, 8, 0);
                    VehicleList_01.Remove(Vehic);
                }
                else if (iExtraMod == 6)
                {
                    FubarCarX = Vehic;
                    NPCSpawn("s_m_m_paramedic_01", Vehic.Position, 0.00f, 99, 180, 0, 45, 1, Vehic, 7, false, false, 8, 0);
                    VehicleList_01.Remove(Vehic);
                }
                else if (iExtraMod == 7)
                {
                    Peggs = Vehic;
                    Function.Call(Hash.SET_BOAT_ANCHOR, Vehic, true);
                    if (Vehic.CurrentBlip.Exists())
                        Vehic.CurrentBlip.Color = BlipColor.NetPlayer1;
                    VehicleList_01.Remove(Vehic);
                    bImports = true;
                }
                else if (iExtraMod == 8)
                {
                    Vehic.CurrentBlip.Color = BlipColor.Red;
                    RemoveTargets();
                }

            }   // Random Mods
            else if (iMod == 4)
            {
                if (iExtraMod == 1)
                {
                    MyExtras.Add(1);
                    MyExtras.Add(2);
                    MyExtras.Add(4);
                    MyExtras.Add(5);
                    MyExtras.Add(10);
                }
                ModExtras(Vehic, MyExtras);
            }   // Trucking Sadler 
            else if (iMod == 5)
            {
                if (iExtraMod == 99)
                {
                    int iLive = RandInt(0, Function.Call<int>(Hash.GET_VEHICLE_LIVERY_COUNT, Vehic));

                    Function.Call(Hash.SET_VEHICLE_LIVERY, Vehic, iLive);
                }
                else
                {
                    if (iExtraMod <= Function.Call<int>(Hash.GET_VEHICLE_LIVERY_COUNT, Vehic))
                        Vehic.Livery = iExtraMod;
                }

            }   // Livery
            else if (iMod == 6)
            {
                Vehic.EngineRunning = true;
                NPCSpawn(RandNPC(32), new Vector3(0.00f, 0.00f, 0.00f), 0.00f, 55, 140, 0, 11, 1, Vehic, 0, false, false, 1, 0);
                Function.Call(Hash._0x7BEB0C7A235F6F3B, Vehic, 0);
            }   // Add a NPCPiolot -- Job 6 area 4
            else if (iMod == 7)
            {
                Pilot04_ImportBob(Vehic);
            }   // Attach to cargobob -- Job 6 area 4
            else if (iMod == 8)
            {
                if (iExtraMod == 1)
                {
                    int iNoSeats = Vehic.PassengerSeats + 1;
                    int iRando = RandInt(1, 10);
                    while (iNoSeats > 0)
                    {
                        GenPlayerPed(Vehic.Position, Vehic.Heading, 45, 160, 2, 99, iNoSeats, Vehic, 2, false, true, 0, false);
                        iNoSeats = iNoSeats - 1;
                    }
                }
                else if (iExtraMod == 4)
                {
                    int iNoSeats = Vehic.PassengerSeats + 1;
                    while (iNoSeats > 0)
                    {
                        NPCSpawn(RandNPC(4), Vehic.Position, Vehic.Heading, 35, 150, 2, 99, iNoSeats, Vehic, 2, false, true, 0, 0);
                        iNoSeats = iNoSeats - 1;
                    }
                }
                else if (iExtraMod == 9)
                {
                    int iNoSeats = Vehic.PassengerSeats + 1;
                    int iRando = RandInt(1, 10);
                    while (iNoSeats > 0)
                    {
                        NPCSpawn(RandNPC(iRando), Vehic.Position, Vehic.Heading, 35, 150, 2, 27, iNoSeats, Vehic, 2, false, true, 0, 0);
                        iNoSeats = iNoSeats - 1;
                    }
                }
                else
                {
                    int iNoSeats = Vehic.PassengerSeats + 1;
                    int iRando = RandInt(1, 10);
                    while (iNoSeats > 0)
                    {
                        NPCSpawn(RandNPC(iRando), Vehic.Position, Vehic.Heading, 35, 150, 2, 99, iNoSeats, Vehic, 2, false, true, 0, 0);
                        iNoSeats = iNoSeats - 1;
                    }
                }
                if (Vehic.CurrentBlip.Exists())
                    Vehic.CurrentBlip.Color = BlipColor.Red;
                VehicleMods(Vehic, 2, 10, false);
            }   // Player Attackers..
            else if (iMod == 9)
            {
                Function.Call(Hash.SET_BOAT_ANCHOR, Vehic, true);
                if (iExtraMod > 9)
                {
                    int iExtras = 14;
                    while (iExtras > 0)
                    {
                        if (Vehic.ExtraExists(iExtras))
                            Vehic.ToggleExtra(iExtras, true);
                        iExtras = iExtras - 1;
                    }
                    Vehic.SecondaryColor = VehicleColor.BrushedBlackSteel;
                    if (iExtraMod == 10)
                        Vehic.PrimaryColor = VehicleColor.MatteDarkRed;
                    else if (iExtraMod == 11)
                        Vehic.PrimaryColor = VehicleColor.MatteYellow;
                    else if (iExtraMod == 12)
                        Vehic.PrimaryColor = VehicleColor.MatteLimeGreen;
                    else if (iExtraMod == 13)
                        Vehic.PrimaryColor = VehicleColor.MatteBlue;
                }
            }   // BoatAnchor
            else if (iMod == 10)
            {
                Vehic.MaxHealth = 3000;
                Vehic.Health = 3000;
                NPCSpawn("s_m_m_security_01", Vehic.Position, Vehic.Heading, 65, 180, 1, 17, 2, Vehic, 2, false, false, 1, 0);
            }   // Security Van
            else if (iMod == 11)
            {
                Function.Call(Hash.SET_BOAT_ANCHOR, Vehic, true);
                NPCSpawn("s_m_m_scientist_01", Vehic.Position, Vehic.Heading, 45, 130, 1, 25, 2, Vehic, 0, false, false, 1, 0);
                VehicleMods(Vehic, 1, iExtraMod, false);
            }   // Water Boat -- Area 3
            else if (iMod == 12)
            {
                Vehic.MaxHealth = 4000;
                Vehic.Health = 4000;
                Vehic.EngineRunning = true;
                NPCSpawn(RandNPC(32), new Vector3(0.00f, 0.00f, 0.00f), 0.00f, 55, 140, 2, 23, 1, Vehic, 0, false, false, 1, 0);
            }   // Water Boat -- Area 1 Cargobob
            else if (iMod == 13)
            {
                Function.Call(Hash._SET_VEHICLE_LANDING_GEAR, Vehic, 3);
                NPCSpawn(RandNPC(32), World.GetNextPositionOnStreet(Vehic.Position), 0.00f, 65, 190, 2, 43, 1, Vehic, 0, false, true, 0, 0);
            }   // Dogfighers
            else if (iMod == 14)
            {
                Vehic.Explode();
            }   // Blow up Veh
            else if (iMod == 15)
            {
                Vehic.EngineRunning = true;
                NPCSpawn(RandNPC(33), Vehic.Position, Vehic.Heading, 45, 180, 2, 24, 1, Vehic, 2, false, true, 0, 0);
                Vehic.CurrentBlip.Color = BlipColor.Red;

            }   // Water Boat -- Area 1 Jetski Attack 
            else if (iMod == 16)
            {
                if (iExtraMod == 1)
                    Vehic.AttachTo(VehTrackin_02, VehTrackin_02.GetBoneIndex("bodyshell"), new Vector3(0.00f, 0.70f, 1.01f), new Vector3(-92.09f, 0.00f, 0.00f));
                else if (iExtraMod == 2)
                    Vehic.AttachTo(VehTrackin_02, VehTrackin_02.GetBoneIndex("bodyshell"), new Vector3(0.00f, 0.00f, 1.01f), new Vector3(0.00f, 0.00f, 0.00f));
                else if (iExtraMod == 3)
                    Vehic.AttachTo(VehTrackin_02, VehTrackin_02.GetBoneIndex("bodyshell"), new Vector3(0.00f, 0.00f, 1.10f), new Vector3(0.00f, 0.00f, 0.00f));
                else if (iExtraMod == 4)
                    Vehic.AttachTo(VehTrackin_02, VehTrackin_02.GetBoneIndex("bodyshell"), new Vector3(0.00f, 0.00f, 1.51f), new Vector3(0.00f, 0.00f, 0.00f));
                else if (iExtraMod == 5)
                    Vehic.AttachTo(VehTrackin_02, VehTrackin_02.GetBoneIndex("bodyshell"), new Vector3(-0.40f, 0.00f, 2.70f), new Vector3(0.00f, 0.00f, -90.00f));
            }   // TruckingAttachments
            else if (iMod == 17)
            {
                Vehic.Alpha = 120;
                Function.Call(Hash.SET_VEHICLE_ON_GROUND_PROPERLY, Vehic);
            }   // BuildVeh
            else if (iMod == 18)
            {
                VehicleWarp(Vehic, Game.Player.Character, 1);
            }   // PlayerToVeh
            else if (iMod == 19)
            {

            }   // Empty
            else if (iMod == 20)
            {
                NPCSpawn(RandNPC(iExtraMod), Vehic.Position, 0.00f, 35, 120, 2, 0, 1, Vehic, 2, false, true, 0, 0);
                Vehic.CurrentBlip.Color = BlipColor.Red;
            }   // Crazy Taxies
            else if (iMod == 21)
            {
                if (iLocationX == 2 || iLocationX == 6)
                    VehicleMods(Vehic, 9, 0,false);

                Vehic.EngineRunning = true;
            }   // Raceing Drivers
            else if (iMod == 22)
            {
                int iNoSeats = Vehic.PassengerSeats + 1;
                int iRando = RandInt(1, 10);
                while (iNoSeats > 0)
                {
                    NPCSpawn(RandNPC(iRando), Vehic.Position, Vehic.Heading, 65, 150, 2, 27, iNoSeats, Vehic, 2, true, false, 0, 0);
                    iNoSeats = iNoSeats - 1;
                }
            }   // Follow Karumasz
            else if (iMod == 23)
            {
                Vehic.IsVisible = false;
                Function.Call(Hash.SET_BOAT_ANCHOR, Vehic, true);
                Prop_01.AttachTo(Vehic, Vehic.GetBoneIndex("bodyshell"), new Vector3(0.00f, 0.00f, 0.00f), new Vector3(0.00f, 0.00f, -180.00f));
                Prop_01.FreezePosition = false;
                Vehic.FreezePosition = false;
            }   // attach fake boat to barge
            else if (iMod == 24)
            {
                Vehic.Livery = 0;
                Vehic.PrimaryColor = VehicleColor.MetallicMarinerBlue;
                Vehic.SecondaryColor = VehicleColor.MetallicFrostWhite;
            }   // Heiltours
            else if (iMod == 25)
            {
                Vehic.PrimaryColor = VehicleColor.MatteBlack;
                NPCSpawn("mp_m_boatstaff_01", Vehic.Position, Vehic.Heading, 65, 180, 1, 28, 1, Vehic, 0, false, false, 0, 0);
            }   // WaterTaxi
            else if (iMod == 26)
            {
                Vehic.OpenDoor(VehicleDoor.Trunk, false, true);
            }   // Cargo Truck tale
            else if (iMod == 27)
            {
                Function.Call(Hash.SET_BOAT_ANCHOR, Vehic, true);
                Vehic.PrimaryColor = VehicleColor.MetallicNauticalBlue;
            }   // Blue Sub
            else if (iMod == 28)
            {
                NPCSpawn(RandNPC(32), Vehic.Position, 0.00f, 55, 140, 0, 48, 1, Vehic, 0, false, false, 1, 0);
                NPCSpawn("ig_juanstrickler", Vehic.Position, 0.00f, 55, 140, 0, 18, 4, Vehic, 0, false, false, 0, 0);
            }       //thief heli
            else if (iMod == 29)
            {
                BeOnOff[0] = true;
            }
        }
        public BlipSprite MyVehBlimp(Vehicle Vhick, BlipSprite BmySpite)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("MyVehBlimp", tEx);

            if (Vhick.Model == VehicleHash.Akula)
                BmySpite = BlipSprite.Akula;
            else if (Vhick.Model == VehicleHash.APC)
                BmySpite = BlipSprite.APC;
            else if (Vhick.Model == VehicleHash.Boxville5)
                BmySpite = BlipSprite.ArmoredBoxville;
            else if (Vhick.Model == VehicleHash.Strikeforce)
                BmySpite = BlipSprite.B11StrikeForce;
            else if (Vhick.Model == VehicleHash.Bombushka)
                BmySpite = BlipSprite.Bombushka;
            else if (Vhick.Model == VehicleHash.Bruiser)
                BmySpite = BlipSprite.Bruiser;
            else if (Vhick.Model == VehicleHash.Bruiser2)
                BmySpite = BlipSprite.Bruiser;
            else if (Vhick.Model == VehicleHash.Bruiser3)
                BmySpite = BlipSprite.Bruiser;
            else if (Vhick.Model == VehicleHash.Brutus)
                BmySpite = BlipSprite.Brutus;
            else if (Vhick.Model == VehicleHash.Brutus2)
                BmySpite = BlipSprite.Brutus;
            else if (Vhick.Model == VehicleHash.Brutus3)
                BmySpite = BlipSprite.Brutus;
            else if (Vhick.Model == VehicleHash.Caracara)
                BmySpite = BlipSprite.Caracara;
            else if (Vhick.Model == VehicleHash.Cerberus)
                BmySpite = BlipSprite.Cerberus;
            else if (Vhick.Model == VehicleHash.Cerberus2)
                BmySpite = BlipSprite.Cerberus;
            else if (Vhick.Model == VehicleHash.Cerberus3)
                BmySpite = BlipSprite.Cerberus;
            else if (Vhick.Model == VehicleHash.Chernobog)
                BmySpite = BlipSprite.Chernobog;
            else if (Vhick.Model == VehicleHash.Deathbike)
                BmySpite = BlipSprite.Deathbike;
            else if (Vhick.Model == VehicleHash.Deathbike2)
                BmySpite = BlipSprite.Deathbike;
            else if (Vhick.Model == VehicleHash.Deathbike3)
                BmySpite = BlipSprite.Deathbike;
            else if (Vhick.Model == VehicleHash.Deluxo)
                BmySpite = BlipSprite.Deluxo;
            else if (Vhick.Model == VehicleHash.Dominator4)
                BmySpite = BlipSprite.Dominator;
            else if (Vhick.Model == VehicleHash.Dominator5)
                BmySpite = BlipSprite.Dominator;
            else if (Vhick.Model == VehicleHash.Dominator6)
                BmySpite = BlipSprite.Dominator;
            else if (Vhick.Model == VehicleHash.Dune3)
                BmySpite = BlipSprite.DuneFAV;
            else if (Vhick.Model == VehicleHash.PBus2)
                BmySpite = BlipSprite.FestivalBus;
            else if (Vhick.Model == VehicleHash.HalfTrack)
                BmySpite = BlipSprite.HalfTrack;
            else if (Vhick.Model == VehicleHash.Havok)
                BmySpite = BlipSprite.Havok;
            else if (Vhick.Model == VehicleHash.Impaler)
                BmySpite = BlipSprite.Impaler;
            else if (Vhick.Model == VehicleHash.Impaler2)
                BmySpite = BlipSprite.Impaler;
            else if (Vhick.Model == VehicleHash.Impaler3)
                BmySpite = BlipSprite.Impaler;
            else if (Vhick.Model == VehicleHash.Impaler4)
                BmySpite = BlipSprite.Impaler;
            else if (Vhick.Model == VehicleHash.Imperator)
                BmySpite = BlipSprite.Imperator;
            else if (Vhick.Model == VehicleHash.Imperator2)
                BmySpite = BlipSprite.Imperator;
            else if (Vhick.Model == VehicleHash.Imperator3)
                BmySpite = BlipSprite.Imperator;
            else if (Vhick.Model == VehicleHash.Issi5)
                BmySpite = BlipSprite.Issi;
            else if (Vhick.Model == VehicleHash.Issi6)
                BmySpite = BlipSprite.Issi;
            else if (Vhick.Model == VehicleHash.Issi7)
                BmySpite = BlipSprite.Issi;
            else if (Vhick.Model == VehicleHash.Khanjari)
                BmySpite = BlipSprite.Khanjali;
            else if (Vhick.Model == VehicleHash.Menacer)
                BmySpite = BlipSprite.Menacer;
            else if (Vhick.Model == VehicleHash.Oppressor)
                BmySpite = BlipSprite.Oppressor;
            else if (Vhick.Model == VehicleHash.Oppressor2)
                BmySpite = BlipSprite.OppressorMkII;
            else if (Vhick.Model == VehicleHash.Phantom2)
                BmySpite = BlipSprite.PhantomWedge;
            else if (Vhick.Model == VehicleHash.Pounder2)
                BmySpite = BlipSprite.PounderCustom;
            else if (Vhick.Model == VehicleHash.Pyro)
                BmySpite = BlipSprite.Pyro;
            else if (Vhick.Model == VehicleHash.Dune4)
                BmySpite = BlipSprite.RampBuggy;
            else if (Vhick.Model == VehicleHash.Dune5)
                BmySpite = BlipSprite.RampBuggy;
            else if (Vhick.Model == VehicleHash.Voltic2)
                BmySpite = BlipSprite.RocketVoltic;
            else if (Vhick.Model == VehicleHash.Rogue)
                BmySpite = BlipSprite.Rogue;
            else if (Vhick.Model == VehicleHash.Ruiner2)
                BmySpite = BlipSprite.Ruiner2000;
            else if (Vhick.Model == VehicleHash.Scarab)
                BmySpite = BlipSprite.Scarab;
            else if (Vhick.Model == VehicleHash.Scarab2)
                BmySpite = BlipSprite.Scarab;
            else if (Vhick.Model == VehicleHash.Scarab3)
                BmySpite = BlipSprite.Scarab;
            else if (Vhick.Model == VehicleHash.Scramjet)
                BmySpite = BlipSprite.Scramjet;
            else if (Vhick.Model == VehicleHash.Seabreeze)
                BmySpite = BlipSprite.Seabreeze;
            else if (Vhick.Model == VehicleHash.SeaSparrow)
                BmySpite = BlipSprite.SeaSparrow;
            else if (Vhick.Model == VehicleHash.Stromberg)
                BmySpite = BlipSprite.Stromberg;
            else if (Vhick.Model == VehicleHash.Technical2)
                BmySpite = BlipSprite.TechnicalAqua;
            else if (Vhick.Model == VehicleHash.Molotok)
                BmySpite = BlipSprite.V65Molotok;
            else if (Vhick.Model == VehicleHash.Wastelander)
                BmySpite = BlipSprite.Wastelander;
            else if (Vhick.Model == VehicleHash.Tampa3)
                BmySpite = BlipSprite.WeaponizedTampa;
            else if (Vhick.Model == VehicleHash.ZR380)
                BmySpite = BlipSprite.ZR380;
            else if (Vhick.Model == VehicleHash.ZR3802)
                BmySpite = BlipSprite.ZR380;
            else if (Vhick.Model == VehicleHash.ZR3803)
                BmySpite = BlipSprite.ZR380;

            return BmySpite;
        }
        private void StayOnGround(Vehicle Vhick)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("StayOnGround", tEx);

            Function.Call<bool>(Hash.SET_VEHICLE_ON_GROUND_PROPERLY, Vhick);
        }
        public Prop BuildProp(string sProper, Vector3 Position, Vector3 Rotation, bool bFreeze, bool bSetLOD)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("BuildProp, sProper == " + sProper + ", bFreeze == " + bFreeze, tEx);

            Prop BuildPop = null;

            int iPropHash = Function.Call<int>(Hash.GET_HASH_KEY, sProper);

            if (Function.Call<bool>(Hash.IS_MODEL_IN_CDIMAGE, iPropHash))
            {
                Function.Call(Hash.REQUEST_MODEL, iPropHash);
                while (!Function.Call<bool>(Hash.HAS_MODEL_LOADED, iPropHash))
                    Script.Wait(1);

                int iProps = Function.Call<int>(Hash.CREATE_OBJECT, iPropHash, Position.X, Position.Y, Position.Z, false, true, false);
                BuildPop = new Prop(iProps);

                if (BuildPop.Exists())
                {
                    BuildPop.Rotation = Rotation;
                    BuildPop.IsPersistent = true;
                    BuildPop.HasCollision = true;
                    BuildPop.FreezePosition = bFreeze;

                    if (bSetLOD)
                        Function.Call(Hash.SET_ENTITY_LOD_DIST, BuildPop.Handle, 1500);

                    PropList_01.Add(new Prop(BuildPop.Handle));
                }
                else
                    BuildPop = null;

                Function.Call(Hash.SET_MODEL_AS_NO_LONGER_NEEDED, iPropHash);
            }
            else
                BuildPop = null;

            return BuildPop;
        }
        private void FindAndReplaceVeh(Vector3 Vec3, int RandList, int blip, int VehTRack, int iMods, int iModExtras, bool bRouteto, bool bFlasher, bool bDriver, float fRadi, float fMinRadi, string VModel, bool bMatchHight, int iVehCount, int iService, bool bModShop)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("FindAndReplaceVeh, VModel == " + VModel + ", RandList == " + RandList + ", blip == " + blip + ", VehTRack == " + VehTRack + ", iMods == " + iMods + ", iModExtras == " + iModExtras + ", bDriver == " + bDriver + ", iVehCount == " + iVehCount + ", iService == " + iService, tEx);

            if (World.GetNextPositionOnStreet(Game.Player.Character.Position).DistanceTo(Game.Player.Character.Position) < 95.00f)
            {
                Vehicle[] CarSpot = World.GetNearbyVehicles(Vec3, fRadi);
                for (int i = 0; i < CarSpot.Count(); i++)
                {
                    if (VehExists(CarSpot, i))
                    {
                        if (iVehCount > 0)
                        {
                            Vehicle Veh = CarSpot[i];
                            if (Veh.IsPersistent == false && Veh.Position.DistanceTo(Game.Player.Character.Position) > fMinRadi && Veh.ClassType != VehicleClass.Boats && Veh.ClassType != VehicleClass.Cycles && Veh.ClassType != VehicleClass.Helicopters && Veh.ClassType != VehicleClass.Planes && Veh.ClassType != VehicleClass.Trains && Veh != Game.Player.Character.CurrentVehicle && !Veh.IsOnScreen)
                            {
                                if (bMatchHight)
                                {
                                    if (Veh.Position.Z < Game.Player.Character.Position.Z + 5.00f)
                                    {
                                        if (!Veh.IsSeatFree(VehicleSeat.Driver) || Veh.EngineRunning)
                                        {
                                            iVehCount -= 1;
                                            Vector3 CarPos = Veh.Position;
                                            float CarRot = Veh.Heading;
                                            Veh.Delete();
                                            if (VModel == "")
                                            {
                                                List<string> SCarz = RandVeh(RandList);
                                                VModel = SCarz[RandInt(0, SCarz.Count - 1)];
                                            }
                                            VehicleSpawn(VModel, CarPos, CarRot, false, false, bRouteto, bFlasher, iMods, iModExtras, blip, VehTRack, bModShop);

                                            if (iService > 0)
                                                iService = 10;
                                        }
                                    }
                                }
                                else if (bDriver)
                                {
                                    if (!Veh.IsSeatFree(VehicleSeat.Driver) || Veh.EngineRunning)
                                    {
                                        iVehCount -= 1;
                                        Vector3 CarPos = Veh.Position;
                                        float CarRot = Veh.Heading;
                                        Veh.Delete();
                                        if (VModel == "")
                                        {
                                            List<string> SCarz = RandVeh(RandList);
                                            VModel = SCarz[RandInt(0, SCarz.Count - 1)];
                                        }
                                        VehicleSpawn(VModel, CarPos, CarRot, false, false, bRouteto, bFlasher, iMods, iModExtras, blip, VehTRack, bModShop);
                                        if (iService > 0)
                                            iService = 10;
                                    }
                                }
                                else
                                {
                                    Script.Wait(100);

                                    if (Veh.IsSeatFree(VehicleSeat.Driver) && !Veh.EngineRunning)
                                    {
                                        iVehCount -= 1;
                                        Vector3 CarPos = Veh.Position;
                                        float CarRot = Veh.Heading;
                                        Veh.Delete();
                                        if (iJobType == 16 && iMods == 2)
                                            iModExtras = 5;
                                        if (VModel == "")
                                        {
                                            List<string> SCarz = RandVeh(RandList);
                                            VModel = SCarz[RandInt(0, SCarz.Count - 1)];
                                        }
                                        VehicleSpawn(VModel, CarPos, CarRot, false, false, bRouteto, bFlasher, iMods, iModExtras, blip, VehTRack, bModShop);
                                        if (iService > 0)
                                            iService = 10;
                                    }
                                    else
                                    {
                                        iVehCount -= 1;
                                        Vector3 CarPos = Veh.Position;
                                        float CarRot = Veh.Heading;
                                        Veh.Delete();
                                        if (iJobType == 16 && iMods == 2)
                                            iModExtras = 6;
                                        if (VModel == "")
                                        {
                                            List<string> SCarz = RandVeh(RandList);
                                            VModel = SCarz[RandInt(0, SCarz.Count - 1)];
                                        }
                                        VehicleSpawn(VModel, CarPos, CarRot, false, false, bRouteto, bFlasher, iMods, iModExtras, blip, VehTRack, bModShop);

                                        if (iService > 0)
                                            iService = 10;
                                    }
                                }
                            }
                        }
                        else
                            i = CarSpot.Count();
                    }
                }
            }
            if (iService == 10)
            {

            }
            else if (iService > 0)
            {
                if (iService == 1)
                    UI.Notify(sAltLang[463]);
                else if (iService == 2)
                {
                    UI.Notify(sAltLang[464]);
                    YourCoinPopUp(200, 1, "ImportExport Refund");
                }
                else if (iService == 3)
                {
                    UI.Notify(sAltLang[466]);
                    YourCoinPopUp(500, 1, "Medical Refund");
                }
                else if (iService == 4)
                    UI.Notify(sAltLang[465]);
                else if (iService == 5)
                {
                    UI.Notify(sAltLang[464]);
                    YourCoinPopUp(200, 1, "Peggsus Refund");
                }
                bFubarRide = false;
                bIFrutiyAdd = false;
                bWeaponMan = false;
                bImports = false;
                bMeeddicc = false;
            }
            else if (iVehCount > 0)
            {
                FindaInt.Clear();

                iFindingStuff = 1;
                FindaInt.Clear();
                FindaBool.Clear();
                FindaInt.Add(RandList); FindaInt.Add(blip); FindaInt.Add(VehTRack); FindaInt.Add(iMods); FindaInt.Add(iModExtras); FindaInt.Add(iVehCount); FindaInt.Add(0); FindaInt.Add(0); FindaInt.Add(0);
                FindaBool.Add(bRouteto); FindaBool.Add(bFlasher); FindaBool.Add(bDriver); FindaBool.Add(bMatchHight); FindaBool.Add(bModShop);
                FindaString = VModel;
            }
        }
        private void FindNearestVeh(Vector3 Vec3, int RandList, int blip, int VehTRack, int iMods, int iModExtras, bool bRouteto, bool bFlasher, bool bDriver, float fRadi, float fMinRadi, string VModel, bool bMatchHight, int iVehCount, int iService, bool bModShop)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("FindNearestVeh, VModel == " + VModel + ", RandList == " + RandList + ", blip == " + blip + ", VehTRack == " + VehTRack + ", iMods == " + iMods + ", iModExtras == " + iModExtras + ", bDriver == " + bDriver + ", iVehCount == " + iVehCount + ", iService == " + iService, tEx);

            Vehicle ThisVehicle = null;
            ThisVehicle = World.GetClosestVehicle(Vec3, fRadi);

            if (ThisVehicle != null)
            {
                if (!ThisVehicle.IsPersistent && ThisVehicle.ClassType != VehicleClass.Boats && ThisVehicle.ClassType != VehicleClass.Cycles && ThisVehicle.ClassType != VehicleClass.Helicopters && ThisVehicle.ClassType != VehicleClass.Planes && ThisVehicle.ClassType != VehicleClass.Trains && ThisVehicle != Game.Player.Character.CurrentVehicle)
                {
                    if (ThisVehicle.IsOnScreen)
                        Game.FadeScreenOut(1);
                    Vector3 CarPos = ThisVehicle.Position;
                    float CarRot = ThisVehicle.Heading;
                    ThisVehicle.Delete();
                    if (VModel == "")
                    {
                        List<string> SCarz = RandVeh(RandList);
                        VModel = SCarz[RandInt(0, SCarz.Count - 1)];
                    }
                    VehicleSpawn(VModel, CarPos, CarRot, false, false, bRouteto, bFlasher, iMods, iModExtras, blip, VehTRack, bModShop);
                    Script.Wait(1000);
                    Game.FadeScreenIn(1000);
                }
                else
                {
                    FindAndReplaceVeh(Game.Player.Character.Position, RandList, blip, VehTRack, iMods, iModExtras, bRouteto, bFlasher, bDriver, 150.00f, 1.00f, VModel, bMatchHight, iVehCount, iService, bModShop);
                }
            }
            else
            {
                if (iService > 0)
                {
                    if (iService == 1)
                        UI.Notify(sAltLang[463]);
                    else if (iService == 2)
                    {
                        UI.Notify(sAltLang[464]);
                        YourCoinPopUp(200, 1, "ImportExport Refund");
                    }
                    else if (iService == 3)
                    {
                        UI.Notify(sAltLang[466]);
                        YourCoinPopUp(500, 1, "Medical Refund");
                    }
                    else if (iService == 4)
                        UI.Notify(sAltLang[465]);
                    else if (iService == 5)
                    {
                        UI.Notify(sAltLang[464]);
                        YourCoinPopUp(200, 1, "Peggsus Refund");
                    }
                    bFubarRide = false;
                    bIFrutiyAdd = false;
                    bWeaponMan = false;
                    bImports = false;
                    bMeeddicc = false;
                }
            }        
        }
        private void FindAPed(Vector3 vZone, float fRadius, int iCountEm, int iTask, int iPedList, bool bOffScreen)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("FindAPed, iCountEm == " + iCountEm + ", iTask == " + iTask + ", iPedList == " + iPedList + ", bOffScreen == " + bOffScreen, tEx);

            if (iTask == 2)
            {
                while (Game.Player.Character.IsInVehicle())
                    Script.Wait(1000);
            }

            if (World.GetNextPositionOnSidewalk(Game.Player.Character.Position).DistanceTo(Game.Player.Character.Position) < 55.00f)
            {
                Ped[] MadPeds = World.GetNearbyPeds(vZone, fRadius);
                for (int i = 0; i < MadPeds.Count(); i++)
                {
                    if (PedExists(MadPeds, i))
                    {
                        if (iCountEm > 0)
                        {
                            bool bThisOne = false;
                            Ped MadP = MadPeds[i];
                            if (bOffScreen)
                            {
                                if (!MadP.IsOnScreen && !MadP.IsInVehicle() && Function.Call<int>(Hash.GET_PED_TYPE, MadP) != 28 && MadP != Game.Player.Character && !MadP.IsPersistent)
                                    bThisOne = true;
                            }
                            else
                            {
                                if (!MadP.IsInVehicle() && Function.Call<int>(Hash.GET_PED_TYPE, MadP) != 28 && MadP != Game.Player.Character && !MadP.IsPersistent)
                                    bThisOne = true;
                            }

                            if (bThisOne)
                            {
                                iCountEm -= 1;
                                if (iTask == 1)
                                {
                                    MadP.IsPersistent = true;
                                    Npc_01 = MadP;
                                    MadP.Task.ClearAllImmediately();
                                    Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, MadP, 0, true);
                                    Function.Call(Hash.TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS, MadP, true);
                                }
                                else if (iTask == 2)
                                {
                                    Vector3 PedPos = MadP.Position;
                                    float PedRot = MadP.Heading;
                                    MadP.Delete();
                                    GenPlayerPed(PedPos, PedRot, 45, 160, 2, 7, 0, null, 7, true, true, 1, false);
                                }
                                else if (iTask == 3)
                                {
                                    MadP.IsPersistent = true;
                                    JackThePlayer(MadP);
                                }
                                else if (iTask == 4)
                                {
                                    MadP.IsPersistent = true;
                                    BbBomb_BombAtractor(MadP);
                                }
                                else if (iTask == 5)
                                {
                                    Vector3 PedPos = MadP.Position;
                                    float PedRot = MadP.Heading;
                                    MadP.Delete();
                                    GenPlayerPed(PedPos, PedRot, 45, 160, 2, 7, 0, null, 10, true, true, 1, true);
                                }

                                if (iPedList > -1)
                                {
                                    if (iPedList == 1)
                                        PedList_01.Add(new Ped(MadP.Handle));
                                    else if (iPedList == 2)
                                        PedList_02.Add(new Ped(MadP.Handle));
                                    else
                                        PedList_03.Add(new Ped(MadP.Handle));
                                }
                            }
                        }
                        else
                            i = MadPeds.Count();
                    }
                }
            }
            if (iCountEm > 0)
            {
                Script.Wait(500);
                if (iTask == 1)
                    NPCSpawn(RandNPC(RandInt(1, 35)), vZone, 0.00f, 45, 160, 0, 29, 0, null, 0, false, false, 1, 0);
                else if (iTask == 4)
                {
                    Vector3 Vec01 = vZone.Around(25.00f);
                    Vec01.Z = Vec01.Z + 1;
                    NPCSpawn(RandNPC(RandInt(1, 35)), Vec01, 0.00f, 45, 160, 0, 31, 0, null, 0, false, false, 1, 0);
                }
                else
                {
                    iFindingStuff = 2;
                    FindaInt.Clear();
                    FindaBool.Clear();
                    FindaInt.Add(0); FindaInt.Add(0); FindaInt.Add(0); FindaInt.Add(0); FindaInt.Add(0); FindaInt.Add(0); FindaInt.Add(iCountEm); FindaInt.Add(iTask); FindaInt.Add(iPedList);
                    FindaBool.Add(false); FindaBool.Add(false); FindaBool.Add(false); FindaBool.Add(false); FindaBool.Add(bOffScreen); FindaBool.Add(false);
                }
            }
        }
        private void FindingStuff()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("FindingStuff", tEx);

            iFindingTime = Game.GameTime + 1500;

            if (FindaInt.Count > 8 && FindaBool.Count > 4)
            {
                int FindRandList = FindaInt[0]; int Findblip = FindaInt[1]; int FindVehTRack = FindaInt[2]; int FindiMods = FindaInt[3]; int FindiModExtras = FindaInt[4]; int VehCount = FindaInt[5]; int FineiCountEm = FindaInt[6]; int FineiTask = FindaInt[7]; int FineiPedList = FindaInt[8];
                bool FindbRouteto = FindaBool[0]; bool FindbFlasher = FindaBool[1]; bool FindbDriver = FindaBool[2]; bool FindbMatchHight = FindaBool[3]; bool FindMaxMods = FindaBool[4];

                Vector3 FindVec3 = Game.Player.Character.Position;
                if (iFindingStuff == 1)
                {
                    if (World.GetNextPositionOnStreet(FindVec3).DistanceTo(FindVec3) < 95.00f)
                    {
                        iFindingStuff = 0;
                        FindAndReplaceVeh(FindVec3, FindRandList, Findblip, FindVehTRack, FindiMods, FindiModExtras, FindbRouteto, FindbFlasher, FindbDriver, 250.00f, 1.00f, FindaString, FindbMatchHight, VehCount, 0, FindMaxMods);
                    }
                }
                else if (iFindingStuff == 2)
                {
                    if (World.GetNextPositionOnSidewalk(FindVec3).DistanceTo(FindVec3) < 75.00f)
                    {
                        iFindingStuff = 0;
                        FindAPed(FindVec3, 150.00f, FineiCountEm, FineiTask, FineiPedList, FindMaxMods);
                    }
                }
            }
            else
                iFindingStuff = 0;
        }
        private void GameOver(bool bFail, string sPass, bool bAltEnd, int iCashOut)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("GameOver, bFail == " + bFail + ", bAltEnd == " + bAltEnd + ", iCashOut == " + iCashOut, tEx);

            bJobLoaded = false;
            iMissionSeq = 0;
            iFindingStuff = 0;
            RemoveTargets();
            CleanCams();
            CleanUpPeds();
            CleanUpProps();
            CleanUpVehicles();
            CleanFakeBlips();
            CleanUpCheckPoints();

            Game.Player.WantedLevel = 0;

            if (bEnemyStrength)
                Function.Call(Hash.SET_AI_WEAPON_DAMAGE_MODIFIER, 1.00f);

            string sEndMess = "";

            if (iCashOut != 0)
                sEndMess = "" + sPass + "" + sAltLang[312] + "" + ShowComs(iCashOut, true, true);

            Game.FadeScreenIn(100);

            if (bTestRun)
            {
                if (bFail)
                {
                    iBuildingUp = 8;
                    bTestRun = false;
                    bBuildMode = true;
                    HelperBarBuiler(11, false);
                }
                else
                {
                    bTestRun = false;
                    bBuildMode = true;
                    HelperBarBuiler(10, false);
                }
            }
            else
                BigMessLoad(bFail, sEndMess, bAltEnd, iCashOut);
        }
        private void BigMessLoad(bool bFail, string sMessyG, bool bAltEnd, int iCashOut)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("BigMessLoad, bFail == " + bFail + ", bAltEnd == " + bAltEnd + ", iCashOut == " + iCashOut, tEx);

            iScale = Function.Call<int>((Hash)0x11FE353CF9733E6F, "MIDSIZED_MESSAGE");
            Script.Wait(1500);
            while (!Function.Call<bool>(Hash.HAS_SCALEFORM_MOVIE_LOADED, iScale))
                Script.Wait(1);

            if (bAltEnd)
            {
                if (bGOURANGA)
                    BigMessTime("GOURANGA!", "", 15, false, iCashOut);
                else if (bAmberAntz)
                    BigMessTime(sAltLang[330], sMessyG, 6, true, iCashOut);
            }
            else
            {
                if (bFail)
                    BigMessTime(sAltLang[330], sMessyG, 6, false, iCashOut);
                else
                    BigMessTime(sAltLang[329], sMessyG, 12, true, iCashOut);
            }

            iWait4Sec = Game.GameTime + 8000;

            while (iWait4Sec > Game.GameTime)
            {
                Function.Call(Hash.DRAW_SCALEFORM_MOVIE_FULLSCREEN, iScale, 255, 255, 255, 255);
                Script.Wait(1);
            }


            if (bPacBouns)
            {
                PostMess();
                bControlerSelect = true;
                iWait4Sec = Game.GameTime + 7000;
            }
            else
                PostMess();

            unsafe
            {
                int SF = iScale;
                Function.Call(Hash.SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED, &SF);
            }
        }
        private void BigMessTime(string MainTitle, string SubTitle, int iColour, bool bCash, int iCashOut)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("BigMessTime, bCash == " + bCash + ", iCashOut == " + iCashOut, tEx);

            Function.Call(Hash._START_SCREEN_EFFECT, "SuccessNeutral", 8500, false);
            Function.Call(Hash._PUSH_SCALEFORM_MOVIE_FUNCTION, iScale, "SHOW_SHARD_MIDSIZED_MESSAGE");
            Function.Call(Hash._BEGIN_TEXT_COMPONENT, "STRING");
            Function.Call((Hash)0x6C188BE134E074AA, MainTitle);
            Function.Call(Hash._END_TEXT_COMPONENT);
            Function.Call(Hash._BEGIN_TEXT_COMPONENT, "STRING");
            Function.Call((Hash)0x6C188BE134E074AA, SubTitle);
            Function.Call(Hash._END_TEXT_COMPONENT);
            Function.Call(Hash._PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT, iColour);// color 0,1=white 2=black 3=grey 6,7,8=red 9,10,11=blue 12,13,14=yellow 15,16,17=orange 18,19,20=green 21,22,23=purple 
            Function.Call(Hash._POP_SCALEFORM_MOVIE_FUNCTION_VOID);
            if (bCash)
                YourCoinPopUp(iCashOut, 1, "NSPM Pay");
        }
        private void PostMess()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("PostMess", tEx);

            iMissionSeq = 0;
            iMissionVar_01 = 0;
            iMissionVar_02 = 0;
            iMissionVar_03 = 0;
            iMissionVar_04 = 0;
            iRepMisssion = 0;
            iLookForPB = 0;
            iCashBouns = 0;
            iCashReward = 0;
            iCrash4Cash = 0;
            iCurrentLap = 1;
            iLocationX = 0;

            VehTrackin_01 = null;
            VehTrackin_02 = null;
            VehTrackin_03 = null;
            VehTrackin_04 = null;
            VehTrackin_05 = null;

            Prop_01 = null;
            Prop_02 = null;
            Prop_03 = null;

            Npc_01 = null;
            Npc_02 = null;
            Npc_03 = null;
            Npc_04 = null;
            Npc_05 = null;
            Npc_06 = null;
            Npc_07 = null;

            Pick_01 = null;

            vFuMiss = Vector3.Zero;
            VTBTimerPool.Remove(BtSlideBar);
            VTBTimerPool.Remove(ttTextBar_01);
            VTBTimerPool.Remove(ttTextBar_02);
            VTBTimerPool.Remove(ttTextBar_03);
            VTBTimerPool.Remove(ttTextBar_04);

            bGOURANGA = false;
            bAmberAntz = false;
            bMoreFubar = false;
            bReFire = false;

            bPlayingNewMissions = false;
            bOnTheJob = false;
            bLookingForPB = true;

            CleanTriggers();
            WriteXmlSet();

            if (bDontPull)
                Game.Player.Character.CanBeDraggedOutOfVehicle = true;

            if (bPlayerAtt)
                FindAPed(Game.Player.Character.Position, 35.00f, 1, 2, 2, true);
        }
        private void BoxingClever()
        {
            ThisPhone = null;
            int iPhoney = 0;
            int iPhones = 0;
            Vector3 VplayPos = Game.Player.Character.Position;
            Prop[] StreetPhone = World.GetNearbyProps(VplayPos, 50.00f);
            while (PropExists(StreetPhone, iPhoney) && ThisPhone == null )
            {
                Prop MyPhone = StreetPhone[iPhoney];
                for (int i = 0; i < sPhoneType.Count; i++)
                {
                    if (MyPhone.Model == Function.Call<int>(Hash.GET_HASH_KEY, sPhoneType[i]))
                    {
                        if (MyPhone.Health > 850 && !MyPhone.HasBeenDamagedBy(Game.Player.Character))
                        {
                            MyPhone.IsPersistent = true;
                            ThisPhone = MyPhone;
                            iPhones = iPhoney;
                            break;
                        }
                    }
                }
                iPhoney += 1;
            }
            if (ThisPhone != null)
            {
                iPhoney = 0; 

                while (PropExists(StreetPhone, iPhones) && iPhoney < vOldPhoneBoxList.Count)
                {
                    if (ThisPhone.Position.DistanceTo(vOldPhoneBoxList[iPhoney]) < 3.00f)
                    {
                        ThisPhone.IsPersistent = false;
                        ThisPhone = null;
                        iPhoney = 99;
                        break;
                    }
                    iPhoney += 1;
                }

                iPhoney = 0;

                while (PropExists(StreetPhone, iPhones) && iPhoney < vPhoneBoxList.Count)
                {
                    if (ThisPhone.Position.DistanceTo(vPhoneBoxList[iPhoney]) < 3.00f)
                    {
                        ThisPhone.IsPersistent = false;
                        ThisPhone = null;
                        iPhoney = 99;
                        break;
                    }
                    iPhoney += 1;
                }

                if (ThisPhone != null)
                {
                    if (ThisPhone.Position.Y > -3370.00f)
                        bOnCayoLand = false;
                    else
                        bOnCayoLand = true;
                    AnswerYourPhone();
                }
                else
                    iLookForPB = 0;
            }
            else
                iLookForPB = 0;
        }
        private void AnswerYourPhone()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("AnswerYourPhone", tEx);

            vPhoneCorona = ThisPhone.Position - (ThisPhone.ForwardVector * 1);
            float fHigh = World.GetGroundHeight(vPhoneCorona);
            if (BeInRange(1.5f, fHigh, ThisPhone.Position.Z))
                vPhoneCorona.Z = fHigh;
            else
                vPhoneCorona.Z -= 0.5f;
            if (bPhoneCone)
            {
                PhoneBlip = GTA.World.CreateBlip(vPhoneCorona);
                PhoneBlip.Color = BlipColor.Green2;
                PhoneBlip.Scale = 0.80f;
                iBliper.Add(PhoneBlip.Handle);
                WriteBlips();
            }
            iLookForPB = 2;
        }
        private void SlowFastTravel(Vector3 VDest, float fHedd)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("SlowFastTravel", tEx);

            if (fHedd == 0.00f)
                fHedd = (int)RandInt(0, 360);
            Game.FadeScreenOut(1000);
            Script.Wait(1000);
            Game.Player.Character.Position = VDest;
            Game.Player.Character.Heading = fHedd;
            Script.Wait(2000);
            Game.FadeScreenIn(1000);
        }
        private void PlayerWarpToWaypoint(Vector3 YoWayz, bool bVehicle)
        {
            Game.Player.Character.FreezePosition = true;
            Vector3 vWarpTo = YoWayz;
            Game.FadeScreenOut(1000);
            Script.Wait(1000);
            if (bVehicle)
            {
                if (Game.Player.Character.IsInVehicle())
                    Game.Player.Character.CurrentVehicle.Position = vWarpTo;
                else
                    Game.Player.Character.Position = vWarpTo;
            }
            else
                Game.Player.Character.Position = vWarpTo;
            Script.Wait(2000);
            vWarpTo.Z = World.GetGroundHeight(new Vector2(vWarpTo.X, vWarpTo.Y));
            if (bVehicle)
            {
                if (Game.Player.Character.IsInVehicle())
                    Game.Player.Character.CurrentVehicle.Position = vWarpTo;
                else
                    Game.Player.Character.Position = vWarpTo;
            }
            else
                Game.Player.Character.Position = vWarpTo;
            Game.FadeScreenIn(1000);
            Game.Player.Character.FreezePosition = false;
            Script.Wait(1000);
            if (Game.Player.Character.IsInAir || Game.Player.Character.Position.Z < World.GetGroundHeight(new Vector2(Game.Player.Character.Position.X, Game.Player.Character.Position.Y)))
            {
                iWarpLoops -= 1;
                if (iWarpLoops > 1)
                    PlayerWarpToWaypoint(YoWayz, bVehicle);
            }

        }
        private void ZancudaClosed()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("ZancudaClosed", tEx);

            Function.Call(Has﻿h.REQUEST_SCRIPT, "restrictedareas");
            while (!Function.Ca﻿ll<bool>(Hash.HAS_SCRIPT_LOADED, "restrictedareas"))
                Script.Wait(1);
            Function.Call﻿(Hash.START_NEW_SCRIPT﻿, "restrictedareas", 1424);
            Fun﻿ction.Call(Hash.SET_SCRIPT_AS_NO_LONGER_NEEDED, "restrictedareas");
        }
        public bool EntityExists(Entity[] EntList, int iPos)
        {
            bool bExist = false;

            if (iPos < EntList.Count())
            {
                unsafe
                {
                    if (EntList[iPos].Exists())
                        bExist = true;
                }
            }

            return bExist;
        }
        public bool PropExists(Prop[] Proplist, int iPos)
        {
            bool bExist = false;

            if (iPos < Proplist.Count())
            {
                unsafe
                {
                    if (Proplist[iPos].Exists())
                        bExist = true;
                }
            }

            return bExist;
        }
        public bool VehExists(Vehicle[] Vlist, int iPos)
        {
            bool bExist = false;

            if (iPos < Vlist.Count())
            {
                unsafe
                {
                    if (Vlist[iPos].Exists())
                        bExist = true;
                }
            }

            return bExist;
        }
        public bool PedExists(Ped[] Pedlist, int iPos)
        {
            bool bExist = false;

            if (iPos < Pedlist.Count())
            {
                unsafe
                {
                    if (Pedlist[iPos].Exists())
                        bExist = true;
                }
            }

            return bExist;
        }
        public bool PedListExists(List<Ped> Pedlist, int iPos)
        {
            bool bExist = false;

            if (iPos < Pedlist.Count())
            {
                unsafe
                {
                    if (Pedlist[iPos].Exists())
                        bExist = true;
                }
            }

            return bExist;
        }
        public bool VectorCheck(List<Vector3> MyVectors, int iPos)
        {
            bool bCheck = false;

            if (iPos < MyVectors.Count)
                bCheck = true;

            return bCheck;
        }
        public bool PullProp(List<Prop> Proper, int iPos)
        {
            bool bReal = false;

            if (iPos < Proper.Count)
            {
                unsafe
                {
                    if (Proper[iPos].Exists())
                        bReal = true;
                }
            }

            return bReal;
        }
        private void PlaySoundFrom(string sAudioBank, string sSound, string sSoundSet, Vector3 Vposy, bool bPhone)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("PlaySoundFrom, bPhone == " + bPhone, tEx);

            while (!Function.Call<bool>(Hash.REQUEST_SCRIPT_AUDIO_BANK, sAudioBank, false))
                Script.Wait(1);
            iPhonedID = Function.Call<int>(Hash.GET_SOUND_ID);
            if (bPhone)
                Function.Call(Hash.PLAY_SOUND_FROM_COORD, iPhonedID, sSound, Vposy.X, Vposy.Y, Vposy.Z, 0, 0, 50, 0);
            else
                Function.Call(Hash.PLAY_SOUND_FROM_COORD, iPhonedID, sSound, Vposy.X, Vposy.Y, Vposy.Z, sSoundSet, 0, 0, 0);
        }
        private void StopThatSound()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("StopThatSound", tEx);

            Function.Call(Hash.STOP_SOUND, iPhonedID);
            Function.Call(Hash.RELEASE_SOUND_ID, iPhonedID);
            iPhonedID = 0;
        }
        public class CustomVeh
        {
            public List<string> MyCarz { get; set; }
            public List<string> MyPlanez { get; set; }
            public List<string> MyBoatz { get; set; }
            public List<string> MyChopperz { get; set; }

            public CustomVeh()
            {
                MyCarz = new List<string>();
                MyPlanez = new List<string>();
                MyBoatz = new List<string>();
                MyChopperz = new List<string>();
            }
        }
        public void SaveCustomVeh(CustomVeh config, string fileName)
        {
            XmlSerializer xml = new XmlSerializer(typeof(CustomVeh));
            using (StreamWriter sw = new StreamWriter(fileName))
            {
                xml.Serialize(sw, config);
            }
        }
        public CustomVeh LoadCustomVeh(string fileName)
        {
            XmlSerializer xml = new XmlSerializer(typeof(CustomVeh));
            using (StreamReader sr = new StreamReader(fileName))
            {
                return (CustomVeh)xml.Deserialize(sr);
            }
        }
        private void FindCustomCarz()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("FindCustomCarz", tEx);

            if (File.Exists(sNSPMAddonCarz))
            {
                CustomVeh Carzz = LoadCustomVeh(sNSPMAddonCarz);
                sCustomCarz = Carzz.MyCarz;
                sCustomPlanez = Carzz.MyPlanez;
                sCustomBoatsz = Carzz.MyBoatz;
                sCustomChopperz = Carzz.MyChopperz;

                for (int i = 0; i < sCustomCarz.Count; i++)
                {
                    if (!IsItARealVehicle(sCustomCarz[i]))
                        sCustomCarz.RemoveAt(i);
                }

                for (int i = 0; i < sCustomPlanez.Count; i++)
                {
                    if (!IsItARealVehicle(sCustomPlanez[i]))
                        sCustomPlanez.RemoveAt(i);
                }

                for (int i = 0; i < sCustomBoatsz.Count; i++)
                {
                    if (!IsItARealVehicle(sCustomBoatsz[i]))
                        sCustomBoatsz.RemoveAt(i);
                }

                for (int i = 0; i < sCustomChopperz.Count; i++)
                {
                    if (!IsItARealVehicle(sCustomChopperz[i]))
                        sCustomChopperz.RemoveAt(i);
                }

                AddNewCustoms();
            }
        }
        private void AddNewCustoms()
        {
            CustomVeh Carzz = new CustomVeh();

            Carzz.MyCarz = sCustomCarz;
            Carzz.MyPlanez = sCustomPlanez;
            Carzz.MyBoatz = sCustomBoatsz;
            Carzz.MyChopperz = sCustomChopperz;
            SaveCustomVeh(Carzz, sNSPMAddonCarz);
        }
        public bool IsItARealVehicle(string sVehName)
        {
            bool bIsReal = false;

            int iVehHash = Function.Call<int>(Hash.GET_HASH_KEY, sVehName);
            if (Function.Call<bool>(Hash.IS_MODEL_A_VEHICLE, iVehHash))
                bIsReal = true;

            return bIsReal;
        }
        public class Language
        {
            public List<string> AltLangs { get; set; }

            public Language()
            {
                AltLangs = new List<string>();
            }
        }
        public void BulidLang(Language config, string fileName)
        {
            XmlSerializer xml = new XmlSerializer(typeof(Language));
            using (StreamWriter sw = new StreamWriter(fileName))
            {
                xml.Serialize(sw, config);
            }
        }
        public Language LoadlangSetting(string fileName)
        {
            XmlSerializer xml = new XmlSerializer(typeof(Language));
            using (StreamReader sr = new StreamReader(fileName))
            {
                return (Language)xml.Deserialize(sr);
            }
        }
        public class BlipStore
        {
            public List<int> MyBlips { get; set; }

            public BlipStore()
            {
                MyBlips = new List<int>();
            }
        }
        public void SaveBlips(BlipStore config, string fileName)
        {
            XmlSerializer xml = new XmlSerializer(typeof(BlipStore));
            using (StreamWriter sw = new StreamWriter(fileName))
            {
                xml.Serialize(sw, config);
            }
        }
        public BlipStore LoadBlips(string fileName)
        {
            XmlSerializer xml = new XmlSerializer(typeof(BlipStore));
            using (StreamReader sr = new StreamReader(fileName))
            {
                return (BlipStore)xml.Deserialize(sr);
            }
        }
        private void WriteBlips()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("WriteBlips", tEx);

            if (iBliper.Count > 0)
            {
                BlipStore BStore = new BlipStore();
                BStore.MyBlips = iBliper;

                SaveBlips(BStore, sNSPMBlips);
            }
        }
        private void ReadBlips()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("ReadBlips", tEx);

            iBliper.Clear();

            if (File.Exists(sNSPMBlips))
            {
                BlipStore BStore = LoadBlips(sNSPMBlips);
                iBliper = BStore.MyBlips;
            }
        }
        public class XmlSetings
        {
            public bool Truckin { get; set; }
            public bool Getaway { get; set; }
            public bool Packages { get; set; }
            public bool Convicts { get; set; }
            public bool FUber { get; set; }
            public bool Pilot { get; set; }
            public bool Amulance { get; set; }
            public bool Follow { get; set; }
            public bool LSFD { get; set; }
            public bool Johnny { get; set; }
            public bool Raceist { get; set; }
            public bool BBBomb { get; set; }
            public bool Assassination { get; set; }
            public bool Gruppe6 { get; set; }
            public bool Sailor { get; set; }
            public bool ImportantEx { get; set; }
            public bool DebtCollect { get; set; }
            public bool MCBusiness { get; set; }
            public bool BayLift { get; set; }
            public bool Sharks { get; set; }

            public bool ShowRoute { get; set; }
            public bool EnemyStrength { get; set; }
            public bool FastTraveltoStart { get; set; }
            public bool Subtitles { get; set; }
            public bool PhoneCone { get; set; }
            public bool PhoneAudio { get; set; }
            public bool BulderOnly { get; set; }
            public int YachtPrice { get; set; }
            public bool PhoneAnim { set; get; }

            public int AssZone01 { get; set; }
            public int AssZone02 { get; set; }
            public int AssZone03 { get; set; }
            public int AssZone04 { get; set; }
            public int AssZone05 { get; set; }
            public int AssZone06 { get; set; }
            public int AssZone07 { get; set; }

            public int ModVersion { get; set; }
            public int SPDelayTime { get; set; }

            public string Fubard { get; set; }
            public string OwnaYacht { get; set; }
            public string NSPMCash { get; set; }
            public string Pegsus { get; set; }
            public string WantedBribe { get; set; }
            public string NSPMCLowRisk { get; set; }
            public string NSPMCHighRisk { get; set; }

            public string PegsSafeHeliTest { get; set; }
            public string PegsWarHeliTest { get; set; }
            public string PegsSafePlaneTest { get; set; }
            public string PegsWarPlaneTest { get; set; }
            public string PegsboatsTest { get; set; }
            public string PegsimortasTest { get; set; }
            public string MeddicTest { get; set; }

            public List<string> ImpXCars { get; set; }
            public List<int> ImpXList { get; set; }

            public List<Vector3> PhoneBlock { get; set; }

            public List<MyMk2Weaps> MySavedWeaps { get; set; }

            public XmlSetings()
            {
                ImpXCars = new List<string>();
                ImpXList = new List<int>();
                PhoneBlock = new List<Vector3>();
                MySavedWeaps = new List<MyMk2Weaps>();
            }
        }
        public void SaveXmlSettings(XmlSetings config, string fileName)
        {
            XmlSerializer xml = new XmlSerializer(typeof(XmlSetings));
            using (StreamWriter sw = new StreamWriter(fileName))
            {
                xml.Serialize(sw, config);
            }
        }
        public XmlSetings LoadXmlSetting(string fileName)
        {
            XmlSerializer xml = new XmlSerializer(typeof(XmlSetings));
            using (StreamReader sr = new StreamReader(fileName))
            {
                return (XmlSetings)xml.Deserialize(sr);
            }
        }
        private void ReadXmlSet()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("ReadXmlSet", tEx);

            if (File.Exists(sNSPMSet))
            {
                XmlSetings XSets = LoadXmlSetting(sNSPMSet);

                bTruckin = XSets.Truckin;
                bGetaway = XSets.Getaway;
                bPackages = XSets.Packages;
                bConvicts = XSets.Convicts;
                bFUber = XSets.FUber;
                bPilot = XSets.Pilot;
                bAmulance = XSets.Amulance;
                bFollow = XSets.Follow;
                bLSFD = XSets.LSFD;
                bJohnny = XSets.Johnny;
                bRaceist = XSets.Raceist;
                bBBBomb = XSets.BBBomb;
                bSailor = XSets.Sailor;
                bGruppe6 = XSets.Gruppe6;
                bAssassination = XSets.Assassination;
                bImportantEx = XSets.ImportantEx;
                bDebtCollect = XSets.DebtCollect;
                bMCBusiness = XSets.MCBusiness;
                bBayLift = XSets.BayLift;
                bSharks = XSets.Sharks;

                bShowRoute = XSets.ShowRoute;
                bEnemyStrength = XSets.EnemyStrength;
                bFastTraveltoStart = XSets.FastTraveltoStart;
                bSubtitles = XSets.Subtitles;
                bPhoneCone = XSets.PhoneCone;
                bPhoneAudio = XSets.PhoneAudio;
                bBulderOnly = XSets.BulderOnly;

                iAssMissionList[0] = XSets.AssZone01;
                iAssMissionList[1] = XSets.AssZone02;
                iAssMissionList[2] = XSets.AssZone03;
                iAssMissionList[3] = XSets.AssZone04;
                iAssMissionList[4] = XSets.AssZone05;
                iAssMissionList[5] = XSets.AssZone06;
                iAssMissionList[6] = XSets.AssZone07;

                iSPDelayTime = XSets.SPDelayTime;
                iYachtPrice = XSets.YachtPrice;
                iVersion = XSets.ModVersion;

                double iTooHigh = 0;

                if (XSets.Fubard.Count() < 41)
                    iTooHigh = CypherIn(XSets.Fubard);
                if (iTooHigh < 2100000000 && iTooHigh > 0)
                    iFubard = (int)iTooHigh;

                if (XSets.NSPMCash.Count() < 41)
                    iTooHigh = CypherIn(XSets.NSPMCash);
                if (iTooHigh < 2100000000 && iTooHigh > 0)
                    iNSPMBank = (int)iTooHigh;

                if (XSets.OwnaYacht.Count() < 41)
                    iTooHigh = CypherIn(XSets.OwnaYacht);
                if (iTooHigh < 2100000000 && iTooHigh > 0)
                    iOwnaYacht = (int)iTooHigh;

                if (XSets.Pegsus.Count() < 41)
                    iTooHigh = CypherIn(XSets.Pegsus);
                if (iTooHigh < 2100000000 && iTooHigh > 0)
                    iGotPegsus = (int)iTooHigh;

                if (XSets.WantedBribe.Count() < 41)
                    iTooHigh = CypherIn(XSets.WantedBribe);
                if (iTooHigh < 2100000000 && iTooHigh > 0)
                    iWantedBribe = (int)iTooHigh;

                if (XSets.NSPMCLowRisk.Count() < 41)
                    iTooHigh = CypherIn(XSets.NSPMCLowRisk);
                if (iTooHigh < 2100000000 && iTooHigh > 0)
                    iNSPMCLowRisk = (int)iTooHigh;

                if (XSets.NSPMCHighRisk.Count() < 41)
                    iTooHigh = CypherIn(XSets.NSPMCHighRisk);
                if (iTooHigh < 2100000000 && iTooHigh > 0)
                    iNSPMCHighRisk = (int)iTooHigh;

                if (XSets.PegsSafeHeliTest.Count() < 41)
                    iTooHigh = CypherIn(XSets.PegsSafeHeliTest);
                if (iTooHigh < 2100000000 && iTooHigh > 0)
                    iPegsSafeHeliTest = (int)iTooHigh;

                if (XSets.PegsWarHeliTest.Count() < 41)
                    iTooHigh = CypherIn(XSets.PegsWarHeliTest);
                if (iTooHigh < 2100000000 && iTooHigh > 0)
                    iPegsWarHeliTest = (int)iTooHigh;

                if (XSets.PegsSafePlaneTest.Count() < 41)
                    iTooHigh = CypherIn(XSets.PegsSafePlaneTest);
                if (iTooHigh < 2100000000 && iTooHigh > 0)
                    iPegsSafePlaneTest = (int)iTooHigh;

                if (XSets.PegsWarPlaneTest.Count() < 41)
                    iTooHigh = CypherIn(XSets.PegsWarPlaneTest);
                if (iTooHigh < 2100000000 && iTooHigh > 0)
                    iPegsWarPlaneTest = (int)iTooHigh;

                if (XSets.PegsboatsTest.Count() < 41)
                    iTooHigh = CypherIn(XSets.PegsboatsTest);
                if (iTooHigh < 2100000000 && iTooHigh > 0)
                    iPegsboatsTest = (int)iTooHigh;

                if (XSets.PegsimortasTest.Count() < 41)
                    iTooHigh = CypherIn(XSets.PegsimortasTest);
                if (iTooHigh < 2100000000 && iTooHigh > 0)
                    iPegsimortasTest = (int)iTooHigh;

                if (XSets.MeddicTest.Count() < 41)
                    iTooHigh = CypherIn(XSets.MeddicTest);
                if (iTooHigh < 2100000000 && iTooHigh > 0)
                    iMeddicTest = (int)iTooHigh;

                sImpExpVeh = XSets.ImpXCars;
                iImpExpList = XSets.ImpXList;

                Mk2WeapsMain = XSets.MySavedWeaps;

                if (sImpExpVeh.Count != iImpExpList.Count)
                {
                    sImpExpVeh.Clear();
                    iImpExpList.Clear();
                    sImpExpVeh.Add(ImportsExpo_CarList(1));
                    iImpExpList.Add(1);
                    sImpExpVeh.Add(ImportsExpo_CarList(2));
                    iImpExpList.Add(2);
                    sImpExpVeh.Add(ImportsExpo_CarList(3));
                    iImpExpList.Add(3);
                    sImpExpVeh.Add(ImportsExpo_CarList(4));
                    iImpExpList.Add(4);
                    sImpExpVeh.Add(ImportsExpo_CarList(5));
                    iImpExpList.Add(5);
                    sImpExpVeh.Add(ImportsExpo_CarList(6));
                    iImpExpList.Add(6);
                    sImpExpVeh.Add(ImportsExpo_CarList(7));
                    iImpExpList.Add(7);
                    sImpExpVeh.Add(ImportsExpo_CarList(8));
                    iImpExpList.Add(8);
                    sImpExpVeh.Add(ImportsExpo_CarList(9));
                    iImpExpList.Add(9);
                }
                vPhoneBoxList = XSets.PhoneBlock;
                bPhoneAnim = XSets.PhoneAnim;


                if (iVersion != 27100)
                {
                    bWeapSwap = true;
                    NagScreen();
                }
            }
            else
                NagScreen();
        }
        private void AddMissWeaps(List<MyMk2Weaps> DemWeaps, bool bOldTest)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("AddMissWeaps", tEx);

            if (DemWeaps != null)
            {
                if (bOldTest)
                {
                    bWeapSwap = false;
                    int iPed = MyChar();
                    for (int i = 0; i < Mk2WeapsMain.Count; i++)
                        Mk2WeapsMain[i].iPlayer = iPed;
                    WriteXmlSet();
                    AddMissWeaps(Mk2WeapsMain, false);
                }
                else
                {
                    int iThisChar = MyChar();
                    for (int i = 0; i < Mk2WeapsMain.Count; i++)
                    {
                        if (iThisChar == Mk2WeapsMain[i].iPlayer)
                        {
                            Function.Call(Hash.GIVE_WEAPON_TO_PED, Game.Player.Character, Function.Call<int>(Hash.GET_HASH_KEY, Mk2WeapsMain[i].Mk2Weap), 9999, false, true);
                            for (int ii = 0; ii < Mk2WeapsMain[i].Mk2Addon.Count; ii++)
                                Function.Call(Hash.GIVE_WEAPON_COMPONENT_TO_PED, Game.Player.Character, Function.Call<int>(Hash.GET_HASH_KEY, Mk2WeapsMain[i].Mk2Weap), Function.Call<int>(Hash.GET_HASH_KEY, Mk2WeapsMain[i].Mk2Addon[ii]));

                            Mk2WeapsMain[i].iAmmos = MK2AmmoAmount(Mk2WeapsMain[i].Mk2Weap);

                            FillMyAmmo(Mk2WeapsMain[i].Mk2Weap, Mk2WeapsMain[i].iAmmos);

                            if (Function.Call<int>(Hash.GET_AMMO_IN_PED_WEAPON, Game.Player.Character.Handle, Function.Call<int>(Hash.GET_HASH_KEY, Mk2WeapsMain[i].Mk2Weap)) < MK2AmmoAmount(Mk2WeapsMain[i].Mk2Weap))
                            {
                                Script.Wait(500);
                                FillMyAmmo(Mk2WeapsMain[i].Mk2Weap, Mk2WeapsMain[i].iAmmos);
                            }                         
                        }
                    }
                    WriteXmlSet();
                }
            }
        }
        private void NagScreen()
        {
            iVersion = 27100;
            UI.Notify(sAltLang[358]);
        }
        private void WriteXmlSet()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("WriteXmlSet", tEx);

            XmlSetings XSets = new XmlSetings();

            XSets.Truckin = bTruckin;
            XSets.Getaway = bGetaway;
            XSets.Packages = bPackages;
            XSets.Convicts = bConvicts;
            XSets.FUber = bFUber;
            XSets.Pilot = bPilot;
            XSets.Amulance = bAmulance;
            XSets.Follow = bFollow;
            XSets.LSFD = bLSFD;
            XSets.Johnny = bJohnny;
            XSets.Raceist = bRaceist;
            XSets.BBBomb = bBBBomb;
            XSets.Sailor = bSailor;
            XSets.Gruppe6 = bGruppe6;
            XSets.Assassination = bAssassination;
            XSets.ImportantEx = bImportantEx;
            XSets.DebtCollect = bDebtCollect;
            XSets.MCBusiness = bMCBusiness;
            XSets.BayLift = bBayLift;
            XSets.Sharks = bSharks;

            XSets.ShowRoute = bShowRoute;
            XSets.EnemyStrength = bEnemyStrength;
            XSets.FastTraveltoStart = bFastTraveltoStart;
            XSets.Subtitles = bSubtitles;
            XSets.PhoneCone = bPhoneCone;
            XSets.PhoneAudio = bPhoneAudio;

            XSets.AssZone01 = iAssMissionList[0];
            XSets.AssZone02 = iAssMissionList[1];
            XSets.AssZone03 = iAssMissionList[2];
            XSets.AssZone04 = iAssMissionList[3];
            XSets.AssZone05 = iAssMissionList[4];
            XSets.AssZone06 = iAssMissionList[5];
            XSets.AssZone07 = iAssMissionList[6];

            XSets.YachtPrice = iYachtPrice;

            XSets.ModVersion = iVersion;

            XSets.SPDelayTime = iSPDelayTime;

            XSets.Fubard = CypherOut(iFubard);
            XSets.NSPMCash = CypherOut(iNSPMBank);
            XSets.OwnaYacht = CypherOut(iOwnaYacht);
            XSets.Pegsus = CypherOut(iGotPegsus);
            XSets.WantedBribe = CypherOut(iWantedBribe);
            XSets.NSPMCLowRisk = CypherOut(iNSPMCLowRisk);
            XSets.NSPMCHighRisk = CypherOut(iNSPMCHighRisk);

            XSets.PegsSafeHeliTest = CypherOut(iPegsSafeHeliTest);
            XSets.PegsWarHeliTest = CypherOut(iPegsWarHeliTest);
            XSets.PegsSafePlaneTest = CypherOut(iPegsSafePlaneTest);
            XSets.PegsWarPlaneTest = CypherOut(iPegsWarPlaneTest);
            XSets.PegsboatsTest = CypherOut(iPegsboatsTest);
            XSets.PegsimortasTest = CypherOut(iPegsimortasTest);
            XSets.MeddicTest = CypherOut(iMeddicTest);

            XSets.ImpXCars = sImpExpVeh;
            XSets.ImpXList = iImpExpList;

            XSets.PhoneBlock = vPhoneBoxList;

            XSets.BulderOnly = bBulderOnly;

            XSets.PhoneAnim = bPhoneAnim;

            XSets.MySavedWeaps = Mk2WeapsMain;

            SaveXmlSettings(XSets, sNSPMSet);
        }
        private void SettingsMenu()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("SettingsMenu", tEx);

            YtmenuPool = new MenuPool();
            var mainMenu = new UIMenu("NSPM", sAltLang[345]);
            YtmenuPool.Add(mainMenu);
            MissionSelectSet(mainMenu);
            SettingsSet(mainMenu);
            MishconBuild(mainMenu);
            bOptionsMen = true;
            bMenuOpen = true;
            mainMenu.Visible = !mainMenu.Visible;
        }
        private void AddCustomVehcis(UIMenu XMen)
        {
            var SubHeadder = YtmenuPool.AddSubMenu(XMen, sAltLang[469] + sAltLang[128]);
            var Submenu_01 = YtmenuPool.AddSubMenu(SubHeadder, sAltLang[469] + sAltLang[122]);
            var Submenu_02 = YtmenuPool.AddSubMenu(SubHeadder, sAltLang[469] + sAltLang[148]);
            var Submenu_03 = YtmenuPool.AddSubMenu(SubHeadder, sAltLang[469] + sAltLang[236]);
            var Submenu_04 = YtmenuPool.AddSubMenu(SubHeadder, sAltLang[469] + sAltLang[33]);

            List<string> sub_01 = new List<string>();
            List<string> sub_02 = new List<string>();
            List<string> sub_03 = new List<string>();
            List<string> sub_04 = new List<string>();

            var AddCar = new UIMenuItem(sAltLang[470] + sAltLang[469] + sAltLang[122], "");
            Submenu_01.AddItem(AddCar);

            var AddPlanz = new UIMenuItem(sAltLang[470] + sAltLang[469] + sAltLang[148], "");
            Submenu_02.AddItem(AddPlanz);

            var AddBoatz = new UIMenuItem(sAltLang[470] + sAltLang[469] + sAltLang[236], "");
            Submenu_03.AddItem(AddBoatz);

            var AddHeli = new UIMenuItem(sAltLang[470] + sAltLang[469] + sAltLang[33], "");
            Submenu_04.AddItem(AddHeli);

            for (int i = 0; i < sCustomCarz.Count; i++)
            {
                var item_ = new UIMenuItem(GetEntName(sCustomCarz[i]), "Remove from list");
                Submenu_01.AddItem(item_);
                sub_01.Add(sCustomCarz[i]);
            }

            for (int i = 0; i < sCustomPlanez.Count; i++)
            {
                var item_ = new UIMenuItem(GetEntName(sCustomPlanez[i]), "Remove from list");
                Submenu_02.AddItem(item_);
                sub_02.Add(sCustomPlanez[i]);
            }

            for (int i = 0; i < sCustomBoatsz.Count; i++)
            {
                var item_ = new UIMenuItem(GetEntName(sCustomBoatsz[i]), "Remove from list");
                Submenu_03.AddItem(item_);
                sub_03.Add(sCustomBoatsz[i]);
            }

            for (int i = 0; i < sCustomChopperz.Count; i++)
            {
                var item_ = new UIMenuItem(GetEntName(sCustomChopperz[i]), "Remove from list");
                Submenu_04.AddItem(item_);
                sub_04.Add(sCustomChopperz[i]);
            }

            Submenu_01.OnItemSelect += (sender, item, index) =>
            {
                if (item == AddCar)
                {
                    string sName = Game.GetUserInput(255);
                    if (IsItARealVehicle(sName))
                        sCustomCarz.Add(sName);
                    else
                        UI.Notify("Invalid Vehicle ID");
                }
                else
                {
                    sCustomCarz.Remove(sub_01[index - 1]);
                }
                AddNewCustoms();
                YtmenuPool.CloseAllMenus();
            };

            Submenu_02.OnItemSelect += (sender, item, index) =>
            {
                if (item == AddPlanz)
                {
                    string sName = Game.GetUserInput(255);
                    if (IsItARealVehicle(sName))
                        sCustomPlanez.Add(sName);
                    else
                        UI.Notify("Invalid Vehicle ID");
                }
                else
                {
                    sCustomPlanez.Remove(sub_02[index - 1]);
                }
                AddNewCustoms();
                YtmenuPool.CloseAllMenus();
            };

            Submenu_03.OnItemSelect += (sender, item, index) =>
            {
                if (item == AddBoatz)
                {
                    string sName = Game.GetUserInput(255);
                    if (IsItARealVehicle(sName))
                        sCustomBoatsz.Add(sName);
                    else
                        UI.Notify("Invalid Vehicle ID");
                }
                else
                {
                    sCustomBoatsz.Remove(sub_03[index - 1]);
                }
                AddNewCustoms();
                YtmenuPool.CloseAllMenus();
            };

            Submenu_04.OnItemSelect += (sender, item, index) =>
            {
                if (item == AddHeli)
                {
                    string sName = Game.GetUserInput(255);
                    if (IsItARealVehicle(sName))
                        sCustomChopperz.Add(sName);
                    else
                        UI.Notify("Invalid Vehicle ID");
                }
                else
                {
                    sCustomChopperz.Remove(sub_04[index - 1]);
                }
                AddNewCustoms();
                YtmenuPool.CloseAllMenus();
            };
        }
        private void MissionSelectSet(UIMenu XMen)
        {
            var Selectmenu = YtmenuPool.AddSubMenu(XMen, sAltLang[51]);

            for (int i = 0; i < 1; i++) ;
            var Rand_01 = new UIMenuItem(sAltLang[0], "");
            if (bTruckin)
                Rand_01.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_02 = new UIMenuItem(sAltLang[1], "");
            if (bGetaway)
                Rand_02.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_03 = new UIMenuItem(sAltLang[2], "");
            if (bPackages)
                Rand_03.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_04 = new UIMenuItem(sAltLang[3], "");
            if (bConvicts)
                Rand_04.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_05 = new UIMenuItem(sAltLang[4], "");
            if (bFUber)
                Rand_05.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_06 = new UIMenuItem(sAltLang[5], "");
            if (bPilot)
                Rand_06.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_07 = new UIMenuItem(sAltLang[6], "");
            if (bAmulance)
                Rand_07.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_08 = new UIMenuItem(sAltLang[7], "");
            if (bFollow)
                Rand_08.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_09 = new UIMenuItem(sAltLang[8], "");
            if (bLSFD)
                Rand_09.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_10 = new UIMenuItem(sAltLang[9], "");
            if (bJohnny)
                Rand_10.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_11 = new UIMenuItem(sAltLang[10], "");
            if (bRaceist)
                Rand_11.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_12 = new UIMenuItem(sAltLang[11], "");
            if (bBBBomb)
                Rand_12.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_13 = new UIMenuItem(sAltLang[12], "");
            if (bAssassination)
                Rand_13.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_14 = new UIMenuItem(sAltLang[13], "");
            if (bGruppe6)
                Rand_14.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_15 = new UIMenuItem(sAltLang[14], "");
            if (bSailor)
                Rand_15.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_16 = new UIMenuItem(sAltLang[15], "");
            if (bImportantEx)
                Rand_16.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_17 = new UIMenuItem(sAltLang[16], "");
            if (bDebtCollect)
                Rand_17.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_18 = new UIMenuItem(sAltLang[17], "");
            if (bMCBusiness)
                Rand_18.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_19 = new UIMenuItem(sAltLang[18], "");
            if (bBayLift)
                Rand_19.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_20 = new UIMenuItem(sAltLang[19], "");
            if (bSharks)
                Rand_20.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            Selectmenu.AddItem(Rand_01);
            Selectmenu.AddItem(Rand_02);
            Selectmenu.AddItem(Rand_03);
            Selectmenu.AddItem(Rand_04);
            Selectmenu.AddItem(Rand_05);
            Selectmenu.AddItem(Rand_06);
            Selectmenu.AddItem(Rand_07);
            Selectmenu.AddItem(Rand_08);
            Selectmenu.AddItem(Rand_09);
            Selectmenu.AddItem(Rand_10);
            Selectmenu.AddItem(Rand_11);
            Selectmenu.AddItem(Rand_12);
            Selectmenu.AddItem(Rand_13);
            Selectmenu.AddItem(Rand_14);
            Selectmenu.AddItem(Rand_15);
            Selectmenu.AddItem(Rand_16);
            Selectmenu.AddItem(Rand_17);
            Selectmenu.AddItem(Rand_18);
            Selectmenu.AddItem(Rand_19);
            Selectmenu.AddItem(Rand_20);

            Selectmenu.OnItemSelect += (sender, item, index) =>
            {
                if (item == Rand_01)
                {
                    bTruckin = !bTruckin;
                    if (bTruckin)
                        Rand_01.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_01.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_02)
                {
                    bGetaway = !bGetaway;
                    if (bGetaway)
                        Rand_02.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_02.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_03)
                {
                    bPackages = !bPackages;
                    if (bPackages)
                        Rand_03.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_03.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_04)
                {
                    bConvicts = !bConvicts;
                    if (bConvicts)
                        Rand_04.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_04.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_05)
                {
                    bFUber = !bFUber;
                    if (bFUber)
                        Rand_05.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_05.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_06)
                {
                    bPilot = !bPilot;
                    if (bPilot)
                        Rand_06.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_06.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_07)
                {
                    bAmulance = !bAmulance;
                    if (bAmulance)
                        Rand_07.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_07.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_08)
                {
                    bFollow = !bFollow;
                    if (bFollow)
                        Rand_08.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_08.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_09)
                {
                    bLSFD = !bLSFD;
                    if (bLSFD)
                        Rand_09.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_09.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_10)
                {
                    bJohnny = !bJohnny;
                    if (bJohnny)
                        Rand_10.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_10.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_11)
                {
                    bRaceist = !bRaceist;
                    if (bRaceist)
                        Rand_11.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_11.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_12)
                {
                    bBBBomb = !bBBBomb;
                    if (bBBBomb)
                        Rand_12.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_12.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_13)
                {
                    bAssassination = !bAssassination;
                    if (bAssassination)
                        Rand_13.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_13.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_14)
                {
                    bGruppe6 = !bGruppe6;
                    if (bGruppe6)
                        Rand_14.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_14.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_15)
                {
                    bSailor = !bSailor;
                    if (bSailor)
                        Rand_15.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_15.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_16)
                {
                    bImportantEx = !bImportantEx;
                    if (bImportantEx)
                        Rand_16.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_16.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_17)
                {
                    bDebtCollect = !bDebtCollect;
                    if (bDebtCollect)
                        Rand_17.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_17.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_18)
                {
                    bMCBusiness = !bMCBusiness;
                    if (bMCBusiness)
                        Rand_18.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_18.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_19)
                {
                    bBayLift = !bBayLift;
                    if (bBayLift)
                        Rand_19.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_19.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_20)
                {
                    bSharks = !bSharks;
                    if (bSharks)
                        Rand_20.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_20.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                WriteXmlSet();
                iMissionList.Clear();
            };
        }
        private void SettingsSet(UIMenu XMen)
        {

            var Selectmenu = YtmenuPool.AddSubMenu(XMen, sAltLang[269]);

            var Rand_01 = new UIMenuItem(sAltLang[346], sAltLang[347]);
            if (bShowRoute)
                Rand_01.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_02 = new UIMenuItem(sAltLang[348], sAltLang[349]);
            if (bSubtitles)
                Rand_02.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_03 = new UIMenuItem(sAltLang[350], sAltLang[351]);
            if (bPhoneCone)
                Rand_03.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_04 = new UIMenuItem(sAltLang[352], sAltLang[353]);
            if (bEnemyStrength)
                Rand_04.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_05 = new UIMenuItem(sAltLang[354], sAltLang[355]);
            if (bFastTraveltoStart)
                Rand_05.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_06 = new UIMenuItem(sAltLang[385], sAltLang[386]);
            if (bPhoneAudio)
                Rand_06.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_07 = new UIMenuItem(sAltLang[467], sAltLang[468]);//Remove this phone...

            var Rand_08 = new UIMenuItem(sAltLang[525], sAltLang[523]);
            if (bBulderOnly)
                Rand_08.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_09 = new UIMenuItem(sAltLang[526], sAltLang[524]);
            if (bPhoneAnim)
                Rand_09.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_10 = new UIMenuItem(sAltLang[356], sAltLang[357]);
            if (bLoadUpOnYacht)
                Rand_10.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_11 = new UIMenuItem(sAltLang[380], sAltLang[381]);//setyachtpprice

            Selectmenu.AddItem(Rand_01);
            Selectmenu.AddItem(Rand_02);
            Selectmenu.AddItem(Rand_03);
            Selectmenu.AddItem(Rand_04);
            Selectmenu.AddItem(Rand_05);
            Selectmenu.AddItem(Rand_06);
            Selectmenu.AddItem(Rand_07);
            Selectmenu.AddItem(Rand_08);
            Selectmenu.AddItem(Rand_09);

            if (bYachtOwner)
                Selectmenu.AddItem(Rand_10);
            else
                Selectmenu.AddItem(Rand_11);

            AddCustomVehcis(Selectmenu);

            Selectmenu.OnItemSelect += (sender, item, index) =>
            {
                if (item == Rand_01)
                {
                    bShowRoute = !bShowRoute;
                    if (bShowRoute)
                        Rand_01.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_01.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_02)
                {
                    bSubtitles = !bSubtitles;
                    if (bSubtitles)
                        Rand_02.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_02.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_03)
                {
                    bPhoneCone = !bPhoneCone;
                    if (bPhoneCone)
                        Rand_03.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                    {
                        Rand_03.SetRightBadge(UIMenuItem.BadgeStyle.None);
                        bPhoneAudio = true;
                        Rand_07.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    }

                }
                else if (item == Rand_04)
                {
                    bEnemyStrength = !bEnemyStrength;
                    if (bEnemyStrength)
                        Rand_04.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_04.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_05)
                {
                    bFastTraveltoStart = !bFastTraveltoStart;
                    if (bFastTraveltoStart)
                        Rand_05.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_05.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_06)
                {
                    bPhoneAudio = !bPhoneAudio;
                    if (bPhoneAudio)
                        Rand_06.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                    {
                        Rand_06.SetRightBadge(UIMenuItem.BadgeStyle.None);
                        bPhoneCone = true;
                        Rand_06.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    }
                }
                else if (item == Rand_07)
                {
                    if (Rand_07.RightBadge != UIMenuItem.BadgeStyle.Tick)
                    {
                        vPhoneBoxList.Add(vPhoneCorona);
                        Rand_07.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    }
                }
                else if (item == Rand_08)
                {
                    bBulderOnly = !bBulderOnly;
                    if (bBulderOnly)
                        Rand_08.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_08.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_09)
                {
                    bPhoneAnim = !bPhoneAnim;
                    if (bPhoneAnim)
                        Rand_09.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_09.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_10)
                {
                    bLoadUpOnYacht = !bLoadUpOnYacht;
                    if (bLoadUpOnYacht)
                        Rand_10.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_10.SetRightBadge(UIMenuItem.BadgeStyle.None);
                    XMLSettings();
                }
                else if (item == Rand_11)
                {
                    bIFrutiyAdd = true;
                    bBankTransfer = true;
                    iCoinBats = 5;
                    YtmenuPool.CloseAllMenus();
                }
                WriteXmlSet();
            };
        }
        private void MishconBuild(UIMenu XMen)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("MishconBuild", tEx);

            var Buildmenu = YtmenuPool.AddSubMenu(XMen, "Build Menu");

            var Rand_01 = new UIMenuItem("Trucking", "Build a truck mission");

            var Rand_02 = new UIMenuItem("Packages", "Build a packages mission");

            var Rand_03 = new UIMenuItem("Convicts", "Build a convicts mission");

            var Rand_04 = new UIMenuItem("Fubar", "Build a fubar mission");

            var Rand_05 = new UIMenuItem("Ambulance", "Build a ambulance mission");

            var Rand_07 = new UIMenuItem("Johnny", "Build a Johnny mission");

            var Rand_08 = new UIMenuItem("Raceist", "Build a race");

            var Rand_09 = new UIMenuItem("BBBomb", "Build a BBBomb mission");

            var Rand_10 = new UIMenuItem("Hitman", "Build a assassination mission");

            var Rand_06 = new UIMenuItem("Sharks", "Build a sharks mission");

            Buildmenu.AddItem(Rand_01);
            Buildmenu.AddItem(Rand_02);
            Buildmenu.AddItem(Rand_03);
            Buildmenu.AddItem(Rand_04);
            Buildmenu.AddItem(Rand_05);
            Buildmenu.AddItem(Rand_07);
            Buildmenu.AddItem(Rand_08);
            Buildmenu.AddItem(Rand_09);
            Buildmenu.AddItem(Rand_10);
            Buildmenu.AddItem(Rand_06);

            Buildmenu.OnItemSelect += (sender, item, index) =>
            {
                if (item == Rand_01)
                    iBuildMode = 1;
                else if (item == Rand_02)
                    iBuildMode = 2;
                else if (item == Rand_03)
                    iBuildMode = 3;
                else if (item == Rand_04)
                    iBuildMode = 4;
                else if (item == Rand_05)
                    iBuildMode = 5;
                else if (item == Rand_06)
                    iBuildMode = 6;
                else if (item == Rand_07)
                    iBuildMode = 7;
                else if (item == Rand_08)
                    iBuildMode = 8;
                else if (item == Rand_09)
                    iBuildMode = 9;
                else if (item == Rand_10)
                    iBuildMode = 10;
                bBuildMode = true;
                Game.Player.IsInvincible = true;
                iBuildingUp = 0;
                CleanMishlists();
                YtmenuPool.CloseAllMenus();
            };
        }
        private void MishXMlListed(UIMenu XMen)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("MishXMlListed", tEx);

            string sOuter = sList_01[0];

            List<dynamic> xFiles = new List<dynamic>();

            for (int i = 0; i < sList_01.Count; i++)
            {
                string sting = sList_01[i];
                int iNum = sting.LastIndexOf("/") + 1;
                xFiles.Add(sting.Substring(iNum));
            }
            xFiles.Add("Create New File");
            sList_01.Add("Create New File");

            var ThisShizle = new UIMenuListItem("MissionXML", xFiles, 0);
            XMen.AddItem(ThisShizle);

            XMen.OnListChange += (sender, item, index) =>
            {
                if (item == ThisShizle)
                {
                    sOuter = sList_01[index];
                }
            };
            XMen.OnItemSelect += (sender, item, index) =>
            {
                if (sOuter == "Create New File")
                    sOuter = "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/" + Game.GetUserInput(255) + ".XML";
                BuildMissions(iBuildMode, sOuter);
                PostMess();
                iBuildMode = 99;
                YtmenuPool.CloseAllMenus();
            };
        }
        private void BackToBuildMenu(int iFileList)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("BackToBuildMenu", tEx);

            YtmenuPool = new MenuPool();
            var mainMenu = new UIMenu("Build Menu", sAltLang[345]);
            YtmenuPool.Add(mainMenu);
            if (iFileList == 1)
                MishXMlListed(mainMenu);
            else
                MishconBuild(mainMenu);
            bOptionsMen = true;
            bMenuOpen = true;
            mainMenu.Visible = !mainMenu.Visible;
        }
        public bool WhileButtonDown(int CButt)
        {
            ButtonDisabler(CButt);

            bool bButt = Function.Call<bool>(Hash.IS_DISABLED_CONTROL_PRESSED, 0, CButt);

            if (bButt)
            {
                while (!Function.Call<bool>(Hash.IS_DISABLED_CONTROL_JUST_RELEASED, 0, CButt))
                    Script.Wait(1);
            }

            return bButt;
        }
        public bool ButtonDown(int CButt)
        {
            ButtonDisabler(CButt);
            return Function.Call<bool>(Hash.IS_DISABLED_CONTROL_PRESSED, 0, CButt);
        }
        private void ButtonDisabler(int LButt)
        {
            Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, LButt, true);
        }
        public class ClothBank
        {
            public int Char { get; set; }

            public List<int> ClothA { get; set; }
            public List<int> ClothB { get; set; }

            public List<int> ExtraA { get; set; }
            public List<int> ExtraB { get; set; }

            public int ClothA_00 { get; set; }
            public int ClothA_01 { get; set; }
            public int ClothA_02 { get; set; }
            public int ClothA_03 { get; set; }
            public int ClothA_04 { get; set; }
            public int ClothA_05 { get; set; }
            public int ClothA_06 { get; set; }
            public int ClothA_07 { get; set; }
            public int ClothA_08 { get; set; }
            public int ClothA_09 { get; set; }
            public int ClothA_10 { get; set; }
            public int ClothA_11 { get; set; }

            public int ClothB_00 { get; set; }
            public int ClothB_01 { get; set; }
            public int ClothB_02 { get; set; }
            public int ClothB_03 { get; set; }
            public int ClothB_04 { get; set; }
            public int ClothB_05 { get; set; }
            public int ClothB_06 { get; set; }
            public int ClothB_07 { get; set; }
            public int ClothB_08 { get; set; }
            public int ClothB_09 { get; set; }
            public int ClothB_10 { get; set; }
            public int ClothB_11 { get; set; }

            public int ExtraA_00 { get; set; }
            public int ExtraA_01 { get; set; }
            public int ExtraA_02 { get; set; }
            public int ExtraA_03 { get; set; }
            public int ExtraA_04 { get; set; }
            public int ExtraA_05 { get; set; }
            public int ExtraA_06 { get; set; }
            public int ExtraA_07 { get; set; }
            public int ExtraA_08 { get; set; }
            public int ExtraA_09 { get; set; }

            public int ExtraB_00 { get; set; }
            public int ExtraB_01 { get; set; }
            public int ExtraB_02 { get; set; }
            public int ExtraB_03 { get; set; }
            public int ExtraB_04 { get; set; }
            public int ExtraB_05 { get; set; }
            public int ExtraB_06 { get; set; }
            public int ExtraB_07 { get; set; }
            public int ExtraB_08 { get; set; }
            public int ExtraB_09 { get; set; }

            public ClothBank()
            {
                ClothA = new List<int>();
                ClothB = new List<int>();
                ExtraA = new List<int>();
                ExtraB = new List<int>();
            }
        }
        public void SaveOutfitMain(ClothBank config, string fileName)
        {
            XmlSerializer xml = new XmlSerializer(typeof(ClothBank));
            using (StreamWriter sw = new StreamWriter(fileName))
            {
                xml.Serialize(sw, config);
            }
        }
        public ClothBank LoadOutfit(string fileName)
        {
            XmlSerializer xml = new XmlSerializer(typeof(ClothBank));
            using (StreamReader sr = new StreamReader(fileName))
            {
                return (ClothBank)xml.Deserialize(sr);
            }
        }
        private void WriteMyWard(int iChar, bool bDefault, List<int> iWard01, List<int> iWard02, List<int> iWardEx01, List<int> iWardEx02)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("WriteMyWard, iChar == " + iChar, tEx);

            string sNamez = "";
            if (iChar == 1)
                sNamez = "Franklin";
            else if (iChar == 2)
                sNamez = "Michael";
            else if (iChar == 3)
                sNamez = "Trevor";
            else if (iChar == 4)
                sNamez = "FreeFemale";
            else if (iChar == 5)
                sNamez = "FreeMale";
            else
                sNamez = "null";
            if (bDefault)
                WriteWardXML("DefaultOut", iWard01, iWard02, iWardEx01, iWardEx02, iChar);
            else
            {
                string sFileName = Game.GetUserInput(255);

                if (sFileName != "")
                    WriteWardXML(sNamez + "_" + sFileName, iWard01, iWard02, iWardEx01, iWardEx02, iChar);
            }
        }
        private void WriteWardXML(string sWardx, List<int> iWardX01, List<int> iWardX02, List<int> iWardXEX01, List<int> iWardXEX02, int iChar)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("WriteWardXML, sWardx == " + sWardx + ", iChar == " + iChar, tEx);

            ClothBank Cbank = new ClothBank();

            Cbank.Char = iChar;

            Cbank.ClothA = iWardX01;
            Cbank.ClothB = iWardX02;

            Cbank.ExtraA = iWardXEX01;
            Cbank.ExtraB = iWardXEX02;

            SaveOutfitMain(Cbank, "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Outfit/" + sWardx + ".Xml");
        }
        private void WardOutPut(string sTing, Ped Peddy)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("WardOutPut, sTing == " + sTing, tEx);

            List<int> iWardrobe01 = new List<int>();
            List<int> iWardrobe02 = new List<int>();
            List<int> iWardrobe01Extra = new List<int>();
            List<int> iWardrobe02Extra = new List<int>();

            if (File.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Outfit/" + sTing))
            {
                ClothBank Cloths = LoadOutfit("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Outfit/" + sTing);

                iWardrobe01 = Cloths.ClothA;
                iWardrobe02 = Cloths.ClothB;

                iWardrobe01Extra = Cloths.ExtraA;
                iWardrobe02Extra = Cloths.ExtraB;

                XmlPedDresser(Peddy, Cloths.Char, iWardrobe01, iWardrobe02, iWardrobe01Extra, iWardrobe02Extra);
            }
        }
        private void LauchWardrobe()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("LauchWardrobe", tEx);

            Ped Peddy = Game.Player.Character;
            if (Peddy.Model == PedHash.Franklin)
                sCurrentCharXML = "Franklin";
            else if (Peddy.Model == PedHash.Michael)
                sCurrentCharXML = "Michael";
            else if (Peddy.Model == PedHash.Trevor)
                sCurrentCharXML = "Trevor";
            else if (Peddy.Model == PedHash.FreemodeFemale01)
                sCurrentCharXML = "FreeFemale";
            else if (Peddy.Model == PedHash.FreemodeMale01)
                sCurrentCharXML = "FreeMale";
            else
                sCurrentCharXML = "null";
            if (sCurrentCharXML == "null")
            {
                UI.Notify(sAltLang[323]);
                Peddy.FreezePosition = false;
            }
            else
            {
                sWardrobe.Clear();
                string[] sWrite = Directory.GetFiles("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Outfit/");
                for (int i = 0; i < sWrite.Count(); i++)
                {
                    string sting = sWrite[i];
                    if (sting.Contains(sCurrentCharXML))
                        sWardrobe.Add(sting);
                }
                WardrobeScan(11);
                WardMenuMain();
            }

        }
        private void WardMenuMain()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("WardMenuMain", tEx);

            YtmenuPool = new MenuPool();
            var mainMenu = new UIMenu("", "...");
            var banner = new Sprite("shopui_title_highendfashion", "shopui_title_highendfashion", new Point(0, 0), new Size(0, 0));
            mainMenu.SetBannerType(banner);
            YtmenuPool.Add(mainMenu);
            WardMenu(mainMenu); //Here we add the  Sub Menus
            MakeMenuForXMl(mainMenu);
            YtmenuPool.RefreshIndex();
            bMenuOpen = true;
            mainMenu.Visible = !mainMenu.Visible;
        }
        private void MakeMenuForXMl(UIMenu XMen)
        {
            List<dynamic> dCloths = new List<dynamic>();

            dCloths.Add("DefaultOut.XML");

            int iFindOut = sWardrobe.Count;
            while (iFindOut > 0)
            {
                iFindOut = iFindOut - 1;
                string sting = sWardrobe[iFindOut];
                int iNum = sting.LastIndexOf("/") + 1;
                dCloths.Add(sting.Substring(iNum));
            }
            //dCloths.Add(0xF00D);// Dynamic!

            var newitem = new UIMenuListItem("Outfit", dCloths, 0);
            XMen.AddItem(newitem);
            XMen.OnListChange += (sender, item, index) =>
            {
                if (item == newitem)
                {
                    string sOuter = item.Items[index].ToString();
                    WardOutPut(sOuter, Game.Player.Character);
                }
            };
        }
        private void WardMenu(UIMenu XMen)
        {
            var playermodelmenu = YtmenuPool.AddSubMenu(XMen, sAltLang[327]);
            for (int i = 0; i < 1; i++) ;
            var captureWardrobe = new UIMenuItem(sAltLang[328], "");
            playermodelmenu.AddItem(captureWardrobe);
            playermodelmenu.OnItemSelect += (sender, item, index) =>
            {
                if (item == captureWardrobe)
                    WardrobeScan(10);
            };
        }
        private void WardrobeScan(int iOutfit)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("WardrobeScan, iOutfit == " + iOutfit, tEx);

            List<int> iWardrobe01 = new List<int>();
            List<int> iWardrobe02 = new List<int>();
            List<int> iWardrobe01Extra = new List<int>();
            List<int> iWardrobe02Extra = new List<int>();

            iAmHash = Game.Player.Character.Model.Hash;

            int iPed = 0;
            if (Game.Player.Character.Model == PedHash.Franklin)
                iPed = 1;
            else if (Game.Player.Character.Model == PedHash.Michael)
                iPed = 2;
            else if (Game.Player.Character.Model == PedHash.Trevor)
                iPed = 3;
            else if (Game.Player.Character.Model == PedHash.FreemodeFemale01)
                iPed = 4;
            else if (Game.Player.Character.Model == PedHash.FreemodeMale01)
                iPed = 5;
            else
                iPed = 99;
            if (iPed == 99)
                UI.Notify(sAltLang[323]);
            else
            {
                Ped Peddy = Game.Player.Character;

                int iCloth = 0;
                while (iCloth < 12)
                {
                    int iDrawId = Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, Peddy, iCloth);
                    iWardrobe01.Add(iDrawId);
                    int iTextId = Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, Peddy, iCloth);
                    iWardrobe02.Add(iTextId);
                    iCloth = iCloth + 1;
                }
                int iExtra = 0;
                while (iExtra < 5)
                {
                    int iDrawId = Function.Call<int>(Hash.GET_PED_PROP_INDEX, Peddy, iExtra);
                    iWardrobe01Extra.Add(iDrawId);
                    int iTextId = Function.Call<int>(Hash.GET_PED_PROP_TEXTURE_INDEX, Peddy, iExtra);
                    iWardrobe02Extra.Add(iTextId);
                    iExtra = iExtra + 1;
                }

                if (iOutfit == 1)
                {
                    WriteMyWard(iPed, true, iWardrobe01, iWardrobe02, iWardrobe01Extra, iWardrobe02Extra);
                    Function.Call(Hash.CLEAR_ALL_PED_PROPS, Game.Player.Character);
                    YachtStuff_YachtScuba(iPed);
                }
                else if (iOutfit == 2)
                {
                    WriteMyWard(iPed, true, iWardrobe01, iWardrobe02, iWardrobe01Extra, iWardrobe02Extra);
                    Function.Call(Hash.CLEAR_ALL_PED_PROPS, Game.Player.Character);
                    YachtStuff_YachtSwim(iPed);
                }
                else if (iOutfit == 3)
                {
                    WriteMyWard(iPed, true, iWardrobe01, iWardrobe02, iWardrobe01Extra, iWardrobe02Extra);
                    Function.Call(Hash.CLEAR_ALL_PED_PROPS, Game.Player.Character);
                    YachtStuff_YachtSwim(iPed);
                }
                else if (iOutfit == 10)
                    WriteMyWard(iPed, false, iWardrobe01, iWardrobe02, iWardrobe01Extra, iWardrobe02Extra);
                else if (iOutfit == 11)
                    WriteMyWard(iPed, true, iWardrobe01, iWardrobe02, iWardrobe01Extra, iWardrobe02Extra);
            }
        }
        private void ReWrightWard()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("ReWrightWard", tEx);

            if (Directory.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Ward/"))
            {
                sWardrobe.Clear();
                string[] sWrite = Directory.GetFiles("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Ward/");

                if (sWrite.Count() > 0)
                {
                    for (int i = 0; i < sWrite.Count(); i++)
                    {
                        string sting = sWrite[i];

                        int iNum = sting.LastIndexOf("/") + 1;
                        sWardrobe.Add(sting.Substring(iNum));
                    }
                    for (int i = 0; i < sWardrobe.Count; i++)
                    {
                        if (sWardrobe[i].Contains("Franklin"))
                            ReReWrite(sWardrobe[i], 1);
                        else if (sWardrobe[i].Contains("Michael"))
                            ReReWrite(sWardrobe[i], 2);
                        else if (sWardrobe[i].Contains("Trevor"))
                            ReReWrite(sWardrobe[i], 3);
                        else if (sWardrobe[i].Contains("FreeFemale"))
                            ReReWrite(sWardrobe[i], 4);
                        else if (sWardrobe[i].Contains("FreeMale"))
                            ReReWrite(sWardrobe[i], 5);
                    }
                    for (int i = 0; i < sWardrobe.Count; i++)
                        File.Delete("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Ward/" + sWardrobe[i]);
                }
                else
                    UI.Notify("No Outfits to transfer");
            }
        }
        private void ReReWrite(string sDir, int iChar)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("ReReWrite", tEx);

            List<int> iWardrobe01 = new List<int>();
            List<int> iWardrobe02 = new List<int>();
            List<int> iWardrobe01Extra = new List<int>();
            List<int> iWardrobe02Extra = new List<int>();

            if (File.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Ward/" + sDir))
            {
                ClothBank Cloths = LoadOutfit("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Ward/" + sDir);

                iWardrobe01.Add(Cloths.ClothA_00);
                iWardrobe01.Add(Cloths.ClothA_01);
                iWardrobe01.Add(Cloths.ClothA_02);
                iWardrobe01.Add(Cloths.ClothA_03);
                iWardrobe01.Add(Cloths.ClothA_04);
                iWardrobe01.Add(Cloths.ClothA_05);
                iWardrobe01.Add(Cloths.ClothA_06);
                iWardrobe01.Add(Cloths.ClothA_07);
                iWardrobe01.Add(Cloths.ClothA_08);
                iWardrobe01.Add(Cloths.ClothA_09);
                iWardrobe01.Add(Cloths.ClothA_10);
                iWardrobe01.Add(Cloths.ClothA_11);

                iWardrobe02.Add(Cloths.ClothB_00);
                iWardrobe02.Add(Cloths.ClothB_01);
                iWardrobe02.Add(Cloths.ClothB_02);
                iWardrobe02.Add(Cloths.ClothB_03);
                iWardrobe02.Add(Cloths.ClothB_04);
                iWardrobe02.Add(Cloths.ClothB_05);
                iWardrobe02.Add(Cloths.ClothB_06);
                iWardrobe02.Add(Cloths.ClothB_07);
                iWardrobe02.Add(Cloths.ClothB_08);
                iWardrobe02.Add(Cloths.ClothB_09);
                iWardrobe02.Add(Cloths.ClothB_10);
                iWardrobe02.Add(Cloths.ClothB_11);

                iWardrobe01Extra.Add(Cloths.ExtraA_00);
                iWardrobe01Extra.Add(Cloths.ExtraA_01);
                iWardrobe01Extra.Add(Cloths.ExtraA_02);
                iWardrobe01Extra.Add(Cloths.ExtraA_03);
                iWardrobe01Extra.Add(Cloths.ExtraA_04);
                iWardrobe01Extra.Add(Cloths.ExtraA_05);
                iWardrobe01Extra.Add(Cloths.ExtraA_06);
                iWardrobe01Extra.Add(Cloths.ExtraA_07);
                iWardrobe01Extra.Add(Cloths.ExtraA_08);
                iWardrobe01Extra.Add(Cloths.ExtraA_09);

                iWardrobe02Extra.Add(Cloths.ExtraB_00);
                iWardrobe02Extra.Add(Cloths.ExtraB_01);
                iWardrobe02Extra.Add(Cloths.ExtraB_02);
                iWardrobe02Extra.Add(Cloths.ExtraB_03);
                iWardrobe02Extra.Add(Cloths.ExtraB_04);
                iWardrobe02Extra.Add(Cloths.ExtraB_05);
                iWardrobe02Extra.Add(Cloths.ExtraB_06);
                iWardrobe02Extra.Add(Cloths.ExtraB_07);
                iWardrobe02Extra.Add(Cloths.ExtraB_08);
                iWardrobe02Extra.Add(Cloths.ExtraB_09);

                WriteWardXML(sDir, iWardrobe01, iWardrobe02, iWardrobe01Extra, iWardrobe02Extra, iChar);
            }
        }
        private void XmlPedDresser(Ped Peddy, int iPed, List<int> iWard01, List<int> iWard02, List<int> iWardEx01, List<int> iWardEx02)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("XmlPedDresser, iPed == " + iPed, tEx);

            if (iPed == 1 && Peddy.Model != PedHash.Franklin)
                UI.Notify(sAltLang[323]);
            else if (iPed == 2 && Peddy.Model != PedHash.Michael)
                UI.Notify(sAltLang[323]);
            else if (iPed == 3 && Peddy.Model != PedHash.Trevor)
                UI.Notify(sAltLang[323]);
            else if (iPed == 4 && Peddy.Model != PedHash.FreemodeFemale01)
                UI.Notify(sAltLang[323]);
            else if (iPed == 5 && Peddy.Model != PedHash.FreemodeMale01)
                UI.Notify(sAltLang[323]);
            else
            {
                Function.Call(Hash.CLEAR_ALL_PED_PROPS, Peddy);
                for (int i = 0; i < iWard01.Count; i++)
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy, i, iWard01[i], iWard02[i], 2);

                for (int i = 0; i < iWardEx01.Count; i++)
                    Function.Call(Hash.SET_PED_PROP_INDEX, Peddy, i, iWardEx01[i], iWardEx02[i], false);
            }
        }
        public class LessRandom
        {
            public List<int> LessRand_01 { get; set; }
            public List<int> LessRand_02 { get; set; }
            public List<int> LessRand_03 { get; set; }
            public List<int> LessRand_04 { get; set; }
            public List<int> LessRand_05 { get; set; }
            public List<int> LessRand_06 { get; set; }
            public List<int> LessRand_07 { get; set; }
            public List<int> LessRand_08 { get; set; }
            public List<int> LessRand_09 { get; set; }
            public List<int> LessRand_10 { get; set; }
            public List<int> LessRand_11 { get; set; }
            public List<int> LessRand_12 { get; set; }
            public List<int> LessRand_13 { get; set; }
            public List<int> LessRand_14 { get; set; }
            public List<int> LessRand_15 { get; set; }
            public List<int> LessRand_16 { get; set; }
            public List<int> LessRand_17 { get; set; }
            public List<int> LessRand_18 { get; set; }
            public List<int> LessRand_19 { get; set; }
            public List<int> LessRand_20 { get; set; }
            public List<int> LessRand_21 { get; set; }
            public List<int> LessRand_22 { get; set; }
            public List<int> LessRand_23 { get; set; }
            public List<int> LessRand_24 { get; set; }
            public List<int> LessRand_25 { get; set; }
            public List<int> LessRand_26 { get; set; }
            public List<int> LessRand_27 { get; set; }
            public List<int> LessRand_28 { get; set; }
            public List<int> LessRand_29 { get; set; }
            public List<int> LessRand_30 { get; set; }
            public List<int> LessRand_31 { get; set; }
            public List<int> LessRand_32 { get; set; }
            public List<int> LessRand_33 { get; set; }
            public List<int> LessRand_34 { get; set; }
            public List<int> LessRand_35 { get; set; }
            public List<int> LessRand_36 { get; set; }
            public List<int> LessRand_37 { get; set; }
            public List<int> LessRand_38 { get; set; }
            public List<int> LessRand_39 { get; set; }
            public List<int> LessRand_40 { get; set; }
            public List<int> LessRand_41 { get; set; }
            public List<int> LessRand_42 { get; set; }
            public List<int> LessRand_43 { get; set; }
            public List<int> LessRand_44 { get; set; }
            public List<int> LessRand_45 { get; set; }
            public List<int> LessRand_46 { get; set; }
            public List<int> LessRand_47 { get; set; }
            public List<int> LessRand_48 { get; set; }
            public List<int> LessRand_49 { get; set; }
            public List<int> LessRand_50 { get; set; }
            public List<int> LessRand_51 { get; set; }
            public List<int> LessRand_52 { get; set; }
            public List<int> LessRand_53 { get; set; }
            public List<int> LessRand_54 { get; set; }
            public List<int> LessRand_55 { get; set; }
            public List<int> LessRand_56 { get; set; }
            public List<int> LessRand_57 { get; set; }
            public List<int> LessRand_58 { get; set; }
            public List<int> LessRand_59 { get; set; }
            public List<int> LessRand_60 { get; set; }

            public List<bool> BeeRandom { get; set; }

            public LessRandom()
            {
                LessRand_01 = new List<int>();
                LessRand_02 = new List<int>();
                LessRand_03 = new List<int>();
                LessRand_04 = new List<int>();
                LessRand_05 = new List<int>();
                LessRand_06 = new List<int>();
                LessRand_07 = new List<int>();
                LessRand_08 = new List<int>();
                LessRand_09 = new List<int>();
                LessRand_10 = new List<int>();
                LessRand_11 = new List<int>();
                LessRand_12 = new List<int>();
                LessRand_13 = new List<int>();
                LessRand_14 = new List<int>();
                LessRand_15 = new List<int>();
                LessRand_16 = new List<int>();
                LessRand_17 = new List<int>();
                LessRand_18 = new List<int>();
                LessRand_19 = new List<int>();
                LessRand_20 = new List<int>();
                LessRand_21 = new List<int>();
                LessRand_22 = new List<int>();
                LessRand_23 = new List<int>();
                LessRand_24 = new List<int>();
                LessRand_25 = new List<int>();
                LessRand_26 = new List<int>();
                LessRand_27 = new List<int>();
                LessRand_28 = new List<int>();
                LessRand_29 = new List<int>();
                LessRand_30 = new List<int>();
                LessRand_31 = new List<int>();
                LessRand_32 = new List<int>();
                LessRand_33 = new List<int>();
                LessRand_34 = new List<int>();
                LessRand_35 = new List<int>();
                LessRand_36 = new List<int>();
                LessRand_37 = new List<int>();
                LessRand_38 = new List<int>();
                LessRand_39 = new List<int>();
                LessRand_40 = new List<int>();
                LessRand_41 = new List<int>();
                LessRand_42 = new List<int>();
                LessRand_43 = new List<int>();
                LessRand_44 = new List<int>();
                LessRand_45 = new List<int>();
                LessRand_46 = new List<int>();
                LessRand_47 = new List<int>();
                LessRand_48 = new List<int>();
                LessRand_49 = new List<int>();
                LessRand_50 = new List<int>();
                LessRand_51 = new List<int>();
                LessRand_52 = new List<int>();
                LessRand_53 = new List<int>();
                LessRand_54 = new List<int>();
                LessRand_55 = new List<int>();
                LessRand_56 = new List<int>();
                LessRand_57 = new List<int>();
                LessRand_58 = new List<int>();
                LessRand_59 = new List<int>();
                LessRand_60 = new List<int>();

                BeeRandom = new List<bool>();
            }
        }
        public void SaveLessRandom(LessRandom config, string fileName)
        {
            XmlSerializer xml = new XmlSerializer(typeof(LessRandom));
            using (StreamWriter sw = new StreamWriter(fileName))
            {
                xml.Serialize(sw, config);
            }
        }
        public LessRandom LoadRandoms(string fileName)
        {
            XmlSerializer xml = new XmlSerializer(typeof(LessRandom));
            using (StreamReader sr = new StreamReader(fileName))
            {
                return (LessRandom)xml.Deserialize(sr);
            }
        }
        private void BuildRanXml(bool bBulid, int iList, List<int> list)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("BuildRanXml, bBuild == "+ bBulid + ", iList == " + iList, tEx);

            LessRandom XSets = new LessRandom();

            if (bBulid)
            {
                XSets.LessRand_01 = list;
                XSets.LessRand_02 = list;
                XSets.LessRand_03 = list;
                XSets.LessRand_04 = list;
                XSets.LessRand_05 = list;
                XSets.LessRand_06 = list;
                XSets.LessRand_07 = list;
                XSets.LessRand_08 = list;
                XSets.LessRand_09 = list;
                XSets.LessRand_10 = list;
                XSets.LessRand_11 = list;
                XSets.LessRand_12 = list;
                XSets.LessRand_13 = list;
                XSets.LessRand_14 = list;
                XSets.LessRand_15 = list;
                XSets.LessRand_16 = list;
                XSets.LessRand_17 = list;
                XSets.LessRand_18 = list;
                XSets.LessRand_19 = list;
                XSets.LessRand_20 = list;
                XSets.LessRand_21 = list;
                XSets.LessRand_22 = list;
                XSets.LessRand_23 = list;
                XSets.LessRand_24 = list;
                XSets.LessRand_25 = list;
                XSets.LessRand_26 = list;
                XSets.LessRand_27 = list;
                XSets.LessRand_28 = list;
                XSets.LessRand_29 = list;
                XSets.LessRand_30 = list;
                XSets.LessRand_31 = list;
                XSets.LessRand_32 = list;
                XSets.LessRand_33 = list;
                XSets.LessRand_34 = list;
                XSets.LessRand_35 = list;
                XSets.LessRand_36 = list;
                XSets.LessRand_37 = list;
                XSets.LessRand_38 = list;
                XSets.LessRand_39 = list;
                XSets.LessRand_40 = list;
                XSets.LessRand_41 = list;
                XSets.LessRand_42 = list;
                XSets.LessRand_43 = list;
                XSets.LessRand_44 = list;
                XSets.LessRand_45 = list;
                XSets.LessRand_46 = list;
                XSets.LessRand_47 = list;
                XSets.LessRand_48 = list;
                XSets.LessRand_49 = list;
                XSets.LessRand_50 = list;
                XSets.LessRand_51 = list;
                XSets.LessRand_52 = list;
                XSets.LessRand_53 = list;
                XSets.LessRand_54 = list;
                XSets.LessRand_55 = list;
                XSets.LessRand_56 = list;
                XSets.LessRand_57 = list;
                XSets.LessRand_58 = list;
                XSets.LessRand_59 = list;
                XSets.LessRand_60 = list;
            }
            else
            {
                LessRandom XySets = LoadRandoms(sNSPMRandNum);

                XSets.LessRand_01 = XySets.LessRand_01;
                XSets.LessRand_02 = XySets.LessRand_02;
                XSets.LessRand_03 = XySets.LessRand_03;
                XSets.LessRand_04 = XySets.LessRand_04;
                XSets.LessRand_05 = XySets.LessRand_05;
                XSets.LessRand_06 = XySets.LessRand_06;
                XSets.LessRand_07 = XySets.LessRand_07;
                XSets.LessRand_08 = XySets.LessRand_08;
                XSets.LessRand_09 = XySets.LessRand_09;
                XSets.LessRand_10 = XySets.LessRand_10;
                XSets.LessRand_11 = XySets.LessRand_11;
                XSets.LessRand_12 = XySets.LessRand_12;
                XSets.LessRand_13 = XySets.LessRand_13;
                XSets.LessRand_14 = XySets.LessRand_14;
                XSets.LessRand_15 = XySets.LessRand_15;
                XSets.LessRand_16 = XySets.LessRand_16;
                XSets.LessRand_17 = XySets.LessRand_17;
                XSets.LessRand_18 = XySets.LessRand_18;
                XSets.LessRand_19 = XySets.LessRand_19;
                XSets.LessRand_20 = XySets.LessRand_20;
                XSets.LessRand_21 = XySets.LessRand_21;
                XSets.LessRand_22 = XySets.LessRand_22;
                XSets.LessRand_23 = XySets.LessRand_23;
                XSets.LessRand_24 = XySets.LessRand_24;
                XSets.LessRand_25 = XySets.LessRand_25;
                XSets.LessRand_26 = XySets.LessRand_26;
                XSets.LessRand_27 = XySets.LessRand_27;
                XSets.LessRand_28 = XySets.LessRand_28;
                XSets.LessRand_29 = XySets.LessRand_29;
                XSets.LessRand_30 = XySets.LessRand_30;
                XSets.LessRand_31 = XySets.LessRand_31;
                XSets.LessRand_32 = XySets.LessRand_32;
                XSets.LessRand_33 = XySets.LessRand_33;
                XSets.LessRand_34 = XySets.LessRand_34;
                XSets.LessRand_35 = XySets.LessRand_35;
                XSets.LessRand_36 = XySets.LessRand_36;
                XSets.LessRand_37 = XySets.LessRand_37;
                XSets.LessRand_38 = XySets.LessRand_38;
                XSets.LessRand_39 = XySets.LessRand_39;
                XSets.LessRand_40 = XySets.LessRand_40;
                XSets.LessRand_41 = XySets.LessRand_41;
                XSets.LessRand_42 = XySets.LessRand_42;
                XSets.LessRand_43 = XySets.LessRand_43;
                XSets.LessRand_44 = XySets.LessRand_44;
                XSets.LessRand_45 = XySets.LessRand_45;
                XSets.LessRand_46 = XySets.LessRand_46;
                XSets.LessRand_47 = XySets.LessRand_47;
                XSets.LessRand_48 = XySets.LessRand_48;
                XSets.LessRand_49 = XySets.LessRand_49;
                XSets.LessRand_50 = XySets.LessRand_50;
                XSets.LessRand_51 = XySets.LessRand_51;
                XSets.LessRand_52 = XySets.LessRand_52;
                XSets.LessRand_53 = XySets.LessRand_53;
                XSets.LessRand_54 = XySets.LessRand_54;
                XSets.LessRand_55 = XySets.LessRand_55;
                XSets.LessRand_56 = XySets.LessRand_56;
                XSets.LessRand_57 = XySets.LessRand_57;
                XSets.LessRand_58 = XySets.LessRand_58;
                XSets.LessRand_59 = XySets.LessRand_59;
                XSets.LessRand_60 = XySets.LessRand_60;

                if (iList == 1)
                    XSets.LessRand_01 = list;
                else if (iList == 2)
                    XSets.LessRand_02 = list;
                else if (iList == 3)
                    XSets.LessRand_03 = list;
                else if (iList == 4)
                    XSets.LessRand_04 = list;
                else if (iList == 5)
                    XSets.LessRand_05 = list;
                else if (iList == 6)
                    XSets.LessRand_06 = list;
                else if (iList == 7)
                    XSets.LessRand_07 = list;
                else if (iList == 8)
                    XSets.LessRand_08 = list;
                else if (iList == 9)
                    XSets.LessRand_09 = list;
                else if (iList == 10)
                    XSets.LessRand_10 = list;
                else if (iList == 11)
                    XSets.LessRand_11 = list;
                else if (iList == 12)
                    XSets.LessRand_12 = list;
                else if (iList == 13)
                    XSets.LessRand_13 = list;
                else if (iList == 14)
                    XSets.LessRand_14 = list;
                else if (iList == 15)
                    XSets.LessRand_15 = list;
                else if (iList == 16)
                    XSets.LessRand_16 = list;
                else if (iList == 17)
                    XSets.LessRand_17 = list;
                else if (iList == 18)
                    XSets.LessRand_18 = list;
                else if (iList == 19)
                    XSets.LessRand_19 = list;
                else if (iList == 20)
                    XSets.LessRand_20 = list;
                else if (iList == 21)
                    XSets.LessRand_21 = list;
                else if (iList == 22)
                    XSets.LessRand_22 = list;
                else if (iList == 23)
                    XSets.LessRand_23 = list;
                else if (iList == 24)
                    XSets.LessRand_24 = list;
                else if (iList == 25)
                    XSets.LessRand_25 = list;
                else if (iList == 26)
                    XSets.LessRand_26 = list;
                else if (iList == 27)
                    XSets.LessRand_27 = list;
                else if (iList == 28)
                    XSets.LessRand_28 = list;
                else if (iList == 29)
                    XSets.LessRand_29 = list;
                else if (iList == 30)
                    XSets.LessRand_30 = list;
                else if (iList == 31)
                    XSets.LessRand_31 = list;
                else if (iList == 32)
                    XSets.LessRand_32 = list;
                else if (iList == 33)
                    XSets.LessRand_33 = list;
                else if (iList == 34)
                    XSets.LessRand_34 = list;
                else if (iList == 35)
                    XSets.LessRand_35 = list;
                else if (iList == 36)
                    XSets.LessRand_36 = list;
                else if (iList == 37)
                    XSets.LessRand_37 = list;
                else if (iList == 38)
                    XSets.LessRand_38 = list;
                else if (iList == 39)
                    XSets.LessRand_39 = list;
                else if (iList == 40)
                    XSets.LessRand_40 = list;
                else if (iList == 41)
                    XSets.LessRand_41 = list;
                else if (iList == 42)
                    XSets.LessRand_42 = list;
                else if (iList == 43)
                    XSets.LessRand_43 = list;
                else if (iList == 44)
                    XSets.LessRand_44 = list;
                else if (iList == 45)
                    XSets.LessRand_45 = list;
                else if (iList == 46)
                    XSets.LessRand_46 = list;
                else if (iList == 47)
                    XSets.LessRand_47 = list;
                else if (iList == 48)
                    XSets.LessRand_48 = list;
                else if (iList == 49)
                    XSets.LessRand_49 = list;
                else if (iList == 50)
                    XSets.LessRand_50 = list;
                else if (iList == 51)
                    XSets.LessRand_51 = list;
                else if (iList == 52)
                    XSets.LessRand_52 = list;
                else if (iList == 53)
                    XSets.LessRand_53 = list;
                else if (iList == 54)
                    XSets.LessRand_54 = list;
                else if (iList == 55)
                    XSets.LessRand_55 = list;
                else if (iList == 56)
                    XSets.LessRand_56 = list;
                else if (iList == 57)
                    XSets.LessRand_57 = list;
                else if (iList == 58)
                    XSets.LessRand_58 = list;
                else if (iList == 59)
                    XSets.LessRand_59 = list;
                else if (iList == 60)
                    XSets.LessRand_60 = list;
            }

            SaveLessRandom(XSets, sNSPMRandNum);
        }
        public int FindRandom(int iList, int iMin, int iMax)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("FindRandom, iList == " + iList, tEx);

            List<int> IntList = new List<int>();
            int iBe = 0;

            if (!File.Exists(sNSPMRandNum))
                BuildRanXml(true, 0, IntList);

            LessRandom XSets = LoadRandoms(sNSPMRandNum);

            if (iList == 1)
                IntList = XSets.LessRand_01;
            else if (iList == 2)
                IntList = XSets.LessRand_02;
            else if (iList == 3)
                IntList = XSets.LessRand_03;
            else if (iList == 4)
                IntList = XSets.LessRand_04;
            else if (iList == 5)
                IntList = XSets.LessRand_05;
            else if (iList == 6)
                IntList = XSets.LessRand_06;
            else if (iList == 7)
                IntList = XSets.LessRand_07;
            else if (iList == 8)
                IntList = XSets.LessRand_08;
            else if (iList == 9)
                IntList = XSets.LessRand_09;
            else if (iList == 10)
                IntList = XSets.LessRand_10;
            else if (iList == 11)
                IntList = XSets.LessRand_11;
            else if (iList == 12)
                IntList = XSets.LessRand_12;
            else if (iList == 13)
                IntList = XSets.LessRand_13;
            else if (iList == 14)
                IntList = XSets.LessRand_14;
            else if (iList == 15)
                IntList = XSets.LessRand_15;
            else if (iList == 16)
                IntList = XSets.LessRand_16;
            else if (iList == 17)
                IntList = XSets.LessRand_17;
            else if (iList == 18)
                IntList = XSets.LessRand_18;
            else if (iList == 19)
                IntList = XSets.LessRand_19;
            else if (iList == 20)
                IntList = XSets.LessRand_20;
            else if (iList == 21)
                IntList = XSets.LessRand_21;
            else if (iList == 22)
                IntList = XSets.LessRand_22;
            else if (iList == 23)
                IntList = XSets.LessRand_23;
            else if (iList == 24)
                IntList = XSets.LessRand_24;
            else if (iList == 25)
                IntList = XSets.LessRand_25;
            else if (iList == 26)
                IntList = XSets.LessRand_26;
            else if (iList == 27)
                IntList = XSets.LessRand_27;
            else if (iList == 28)
                IntList = XSets.LessRand_28;
            else if (iList == 29)
                IntList = XSets.LessRand_29;
            else if (iList == 30)
                IntList = XSets.LessRand_30;
            else if (iList == 31)
                IntList = XSets.LessRand_31;
            else if (iList == 32)
                IntList = XSets.LessRand_32;
            else if (iList == 33)
                IntList = XSets.LessRand_33;
            else if (iList == 34)
                IntList = XSets.LessRand_34;
            else if (iList == 35)
                IntList = XSets.LessRand_35;
            else if (iList == 36)
                IntList = XSets.LessRand_36;
            else if (iList == 37)
                IntList = XSets.LessRand_37;
            else if (iList == 38)
                IntList = XSets.LessRand_38;
            else if (iList == 39)
                IntList = XSets.LessRand_39;
            else if (iList == 40)
                IntList = XSets.LessRand_40;
            else if (iList == 41)
                IntList = XSets.LessRand_41;
            else if (iList == 42)
                IntList = XSets.LessRand_42;
            else if (iList == 43)
                IntList = XSets.LessRand_43;
            else if (iList == 44)
                IntList = XSets.LessRand_44;
            else if (iList == 45)
                IntList = XSets.LessRand_45;
            else if (iList == 46)
                IntList = XSets.LessRand_46;
            else if (iList == 47)
                IntList = XSets.LessRand_47;
            else if (iList == 48)
                IntList = XSets.LessRand_48;
            else if (iList == 49)
                IntList = XSets.LessRand_49;
            else if (iList == 50)
                IntList = XSets.LessRand_50;
            else if (iList == 51)
                IntList = XSets.LessRand_51;
            else if (iList == 52)
                IntList = XSets.LessRand_52;
            else if (iList == 53)
                IntList = XSets.LessRand_53;
            else if (iList == 54)
                IntList = XSets.LessRand_54;
            else if (iList == 55)
                IntList = XSets.LessRand_55;
            else if (iList == 56)
                IntList = XSets.LessRand_56;
            else if (iList == 57)
                IntList = XSets.LessRand_57;
            else if (iList == 58)
                IntList = XSets.LessRand_58;
            else if (iList == 59)
                IntList = XSets.LessRand_59;
            else if (iList == 60)
                IntList = XSets.LessRand_60;

            if (IntList.Count == 0)
            {
                IntList.Clear();
                for (int i = iMin; i < iMax + 1; i++)
                    IntList.Add(i);
            }
            int iRanNum = RandInt(0, IntList.Count - 1);
            iBe = IntList[iRanNum];
            IntList.RemoveAt(iRanNum);

            if (iBe > iMax)
            {
                IntList.Clear();
                iBe = iMin;
            }
            BuildRanXml(false, iList, IntList);

            return iBe;
        }
        public double CypherIn(string sInput)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("CypherIn", tEx);

            List<string> sNumbers = new List<string>();
            sNumbers.Add("k3");         //0
            sNumbers.Add("ia");         //1
            sNumbers.Add("ju");         //2
            sNumbers.Add("8t");         //3
            sNumbers.Add("2y");         //4
            sNumbers.Add("ef");         //5
            sNumbers.Add("p0");         //6
            sNumbers.Add("dg");         //7
            sNumbers.Add("s4");         //8
            sNumbers.Add("1r");         //9
            sNumbers.Add("6h");         //10
            sNumbers.Add("ri");         //11
            sNumbers.Add("b9");         //12
            sNumbers.Add("f2");         //13
            sNumbers.Add("lo");         //14
            sNumbers.Add("bs");         //15
            sNumbers.Add("3g");         //16
            sNumbers.Add("et");         //17
            sNumbers.Add("jk");         //18
            sNumbers.Add("kl");         //19

            int iDec = 1;
            double iOutput = 0;
            int iSize = sInput.Length;
            while (iSize > 0)
            {
                iSize = iSize - 2;
                string sThis2 = sInput.Substring(iSize, 2);
                int iam = sNumbers.IndexOf(sThis2);
                if (iam < 10)
                {
                    if (iam != 0)
                        iOutput = iOutput + (iam * iDec);
                    iDec = iDec * 10;
                }
            }
            return iOutput;
        }
        public string CypherOut(int iOutput)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("CypherOut", tEx);

            string sNumbered = "";
            string sNum = "";
            string sLength = iOutput.ToString();

            List<string> sNumbers = new List<string>();
            sNumbers.Add("6h");         //10
            sNumbers.Add("ri");         //11
            sNumbers.Add("b9");         //12
            sNumbers.Add("f2");         //13
            sNumbers.Add("lo");         //14
            sNumbers.Add("bs");         //15
            sNumbers.Add("3g");         //16
            sNumbers.Add("et");         //17
            sNumbers.Add("jk");         //18
            sNumbers.Add("kl");         //19

            for (int i = 0; i < sLength.Length; i++)
            {
                string cNum = sLength.Substring(i, 1);

                if (cNum == "0")
                    sNum = "k3";
                else if (cNum == "1")
                    sNum = "ia";
                else if (cNum == "2")
                    sNum = "ju";
                else if (cNum == "3")
                    sNum = "8t";
                else if (cNum == "4")
                    sNum = "2y";
                else if (cNum == "5")
                    sNum = "ef";
                else if (cNum == "6")
                    sNum = "p0";
                else if (cNum == "7")
                    sNum = "dg";
                else if (cNum == "8")
                    sNum = "s4";
                else if (cNum == "9")
                    sNum = "1r";
                else
                    sNum = "";

                if (RandBool(1))
                    sNumbered = sNumbered + sNumbers[RandInt(0, sNumbers.Count - 1)] + sNum;
                else
                    sNumbered = sNumbered + sNum + sNumbers[RandInt(0, sNumbers.Count - 1)];
            }

            return sNumbered;
        }
        public bool RandBool(int iSelecta)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("RandBool, iSelecta == " + iSelecta, tEx);

            bool bAllEnd = false;
            if (LessRandBool.Count < 20)
            {
                for (int i = 0; i < 22; i++)
                    LessRandBool.Add(bAllEnd);
            }
            bAllEnd = LessRandBool[iSelecta];
            LessRandBool[iSelecta] = !LessRandBool[iSelecta];

            return bAllEnd;
        }
        public int RandInt(int minNumber, int maxNumber)
        {
            return Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, minNumber, maxNumber);
        }
        public float RandFlow(float minNumber, float maxNumber)
        {
            return Function.Call<float>(Hash.GET_RANDOM_FLOAT_IN_RANGE, minNumber, maxNumber);
        }
        public bool BeInRange(float fRange, float fValue_01, float fValue_02)
        {
            bool bInRange = false;

            if (fValue_01 < fValue_02 + fRange)
            {
                if (fValue_01 > fValue_02 - fRange)
                    bInRange = true;
            }

            return bInRange;
        }
        public bool BeInAngle(float fRange, float fValue_01, float fValue_02)
        {
            bool bInRange = false;

            if (fValue_01 < fRange)
            {
                if (fValue_02 > 360.00 - fRange)
                    bInRange = true;
            }
            else if (fValue_02 < fRange)
            {
                if (fValue_01 > 360.00 - fRange)
                    bInRange = true;
            }
            else if (fValue_01 < fValue_02 + fRange)
            {
                if (fValue_01 > fValue_02 - fRange)
                    bInRange = true;
            }

            return bInRange;
        }
        public string ShowComs(int iNumber, bool bMoney, bool bHalfSecs)
        {
            string sThis = "";

            if (bMoney)
            {
                int iTrashed = iNumber;
                int imill = 0;
                int iThou = 0;
                int irest = 0;
                string sZero1 = "";
                string sZero2 = "";
                string sDone = "";
                if (iTrashed < 1000)
                {
                    irest = iTrashed;
                    sDone = "" + irest;
                }
                else if (iTrashed < 1000000)
                {
                    iThou = iTrashed / 1000;
                    irest = iTrashed - (iThou * 1000);
                    if (irest < 10)
                        sDone = "" + iThou + ",00" + irest;
                    else if (irest < 100)
                        sDone = "" + iThou + ",0" + irest;
                    else
                        sDone = "" + iThou + "," + irest;
                }
                else
                {

                    imill = iTrashed / 1000000;

                    iThou = iTrashed - (imill * 1000000);
                    iThou = iThou / 1000;

                    irest = iTrashed - (imill * 1000000);
                    irest = irest - (iThou * 1000);

                    if (iThou < 10)
                        sZero1 = "00";
                    else if (iThou < 100)
                        sZero1 = "0";
                    else
                        sZero1 = "";

                    if (irest < 10)
                        sZero2 = "00";
                    else if (irest < 100)
                        sZero2 = "0";
                    else
                        sZero2 = "";
                    sDone = "" + imill + "," + sZero1 + iThou + "," + sZero2 + irest;
                }

                sThis = sDone;
            }
            else
            {
                int iLapMin = iNumber;
                int iLapSec = iNumber;
                int iLapHse = iNumber;
                string Zero_01 = "";
                string Zero_02 = "";
                string Zero_03 = "";

                iLapMin = iNumber / 60000;
                if (iLapMin < 0)
                    iLapMin = 0;
                else
                {
                    iLapSec = iNumber - (iLapMin * 60000);
                    iLapHse = iNumber - (iLapMin * 60000);
                }
                iLapSec = iLapSec / 1000;
                if (iLapSec < 0)
                    iLapSec = 0;
                else
                    iLapHse = iLapHse - (iLapSec * 1000);
                iLapHse = iLapHse / 10;
                if (iLapHse < 0)
                    iLapHse = 0;

                if (iLapMin < 10)
                    Zero_01 = "0";
                else
                    Zero_01 = "";

                if (iLapSec < 10)
                    Zero_02 = "0";
                else
                    Zero_02 = "";

                if (iLapHse < 10)
                    Zero_03 = "0";
                else
                    Zero_03 = "";

                if (bHalfSecs)
                    sThis = "" + Zero_01 + iLapMin + ":" + Zero_02 + iLapSec + ":" + Zero_03 + iLapHse + "";
                else
                    sThis = "" + Zero_01 + "" + iLapMin + ":" + Zero_02 + "" + iLapSec + "";
            }

            return sThis;
        }
        private void FindTheTime(int iTime, int iOutput, string sLabel, bool bDrawPool)
        {
            if (iOutput == 1)
            {
                ttTextBar_01.Text = ShowComs(iTime, false, true);
                int iLapBig = iList_02[8] - Game.GameTime;
                iLapBig = iLapBig * -1;
                ttTextBar_03.Text = ShowComs(iLapBig, false, true);
            }
            else if (iOutput == 2)
                ttTextBar_03.Text = ShowComs(iTime, false, true);
            else if (iOutput == 3)
                UI.ShowSubtitle("" + sLabel + "~o~" + ShowComs(iTime, false, true) + "~w~.", 15000);
            else if (iOutput == 4)
                UI.ShowSubtitle("" + sLabel + "~o~" + ShowComs(iTime, false, false) + "~w~.", 15000);
            else if (iOutput == 5)
            {
                UI.ShowSubtitle("" + sLabel + "~o~" + ShowComs(iTime, false, true) + "~w~.", 15000);
                if (bSoloRace)
                    GameOver(false, " " + ShowComs(iTime, false, true) + " ", false, iCashReward);
                else
                    GameOver(false, "Pos : " + iList_02[5] + "/4, ", false, iCashReward);
            }
            else if (iOutput == 6)
            {
                int iDeduct = iTime / 250;
                iCashBouns = iCrash4Cash + iDeduct;
                if (iCashBouns < 1)
                    iCashBouns = 0;
                ttTextBar_01.Text = "$" + iCashBouns + "";
                ttTextBar_02.Text = ShowComs(iTime, false, false);
            }
            else if (iOutput == 7)
                ttTextBar_01.Text = ShowComs(iTime, false, false);
            else if (iOutput == 8)
            {
                //Redundant
                ttTextBar_02.Text = ShowComs(iTime, false, false);
            }
            else if (iOutput == 9)
                ttTextBar_02.Text = ShowComs(iTime, false, false);

            if (bDrawPool)
                VTBTimerPool.Draw();
        }
        private void ControlerUI(string sText, int iDuration)
        {
            Function.Call(Hash._SET_TEXT_COMPONENT_FORMAT, "STRING");
            Function.Call(Hash._ADD_TEXT_COMPONENT_STRING, sText);
            Function.Call(Hash._0x238FFE5C7B0498A6, false, false, false, iDuration);
        }
        private void StickySubTitle(string sTing)
        {
            Function.Call(Hash.SET_TEXT_FONT, 0);
            Function.Call(Hash.SET_TEXT_SCALE, 0.55f, 0.55f);
            Function.Call(Hash.SET_TEXT_COLOUR, 255, 255, 255, 255);//white
            Function.Call(Hash.SET_TEXT_CENTRE, true); //
            Function.Call(Hash.SET_TEXT_DROPSHADOW, 4, 0, 0, 0, 0);//Dunknow--changed last 255 to 0
            Function.Call(Hash._SET_TEXT_ENTRY, "TWOSTRINGS");//
            Function.Call(Hash._ADD_TEXT_COMPONENT_STRING, sTing);
            Function.Call(Hash._DRAW_TEXT, 0.5f, 0.9f);

            //SET_TEXT_FONT
            //FontChaletLondon = 0,
            //FontHouseScript = 1,
            //FontMonospace = 2,
            //FontWingDings = 3,
            //FontChaletComprimeCologne = 4,
            //FontPricedown = 7
        }
        private void BaseHelpBar(List<int> iButtons, List<string> sInstuctions)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("BaseHelpBar", tEx);

            iScale = Function.Call<int>((Hash)0x11FE353CF9733E6F, "instructional_buttons");

            while (!Function.Call<bool>(Hash.HAS_SCALEFORM_MOVIE_LOADED, iScale))
                Script.Wait(1);

            Function.Call(Hash._CALL_SCALEFORM_MOVIE_FUNCTION_VOID, iScale, "CLEAR_ALL");
            Function.Call(Hash._PUSH_SCALEFORM_MOVIE_FUNCTION, iScale, "TOGGLE_MOUSE_BUTTONS");
            Function.Call(Hash._PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_BOOL, 0);
            Function.Call(Hash._POP_SCALEFORM_MOVIE_FUNCTION_VOID);

            Function.Call(Hash._CALL_SCALEFORM_MOVIE_FUNCTION_VOID, iScale, "CREATE_CONTAINER");

            int iAddOns = 0;

            List<string> MyButt = new List<string>();

            for (int i = 0; i < iButtons.Count; i++)
            {
                string ThisKey = Function.Call<string>(Hash._0x0499D7B09FC9B407, 2, iButtons[i], 1);
                //MyButt.Add(ThisKey);

                Function.Call(Hash._PUSH_SCALEFORM_MOVIE_FUNCTION, iScale, "SET_DATA_SLOT");
                Function.Call(Hash._PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT, iAddOns);
                Function.Call(Hash._0xE83A3E3557A56640, ThisKey);
                Function.Call(Hash._PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_STRING, sInstuctions[i]);
                Function.Call(Hash._POP_SCALEFORM_MOVIE_FUNCTION_VOID);
                iAddOns += 1;
            }

            Function.Call(Hash._PUSH_SCALEFORM_MOVIE_FUNCTION, iScale, "DRAW_INSTRUCTIONAL_BUTTONS");
            Function.Call(Hash._PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT, -1);
            Function.Call(Hash._POP_SCALEFORM_MOVIE_FUNCTION_VOID);

            bDisplayUiBar = true;

        }
        private void CloseBaseHelpBar()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("CloseBaseHelpBar", tEx);
            bDisplayUiBar = false;
            unsafe
            {
                int SF = iScale;
                Function.Call(Hash.SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED, &SF);
            }
        }
        private void HelperBarBuiler(int iPart, bool bWipe)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("HelperBarBuiler, Part == " + iPart+ " ,bwipe == " + bWipe, tEx);

            if (bWipe)
                CloseBaseHelpBar();

            List<string> MyInstructions = new List<string>();

            List<int> MyButtons = new List<int>();

            if (iPart == 10)
            {
                MyInstructions.Add(sAltLang[471]);
                MyInstructions.Add(sAltLang[472]);
                MyInstructions.Add(sAltLang[471]);
                MyInstructions.Add(sAltLang[473]);

                MyButtons.Add(21);
                MyButtons.Add(25);
                MyButtons.Add(22);
                MyButtons.Add(25);
            }
            else if (iPart == 11)
            {
                MyInstructions.Add(sAltLang[471]);
                MyInstructions.Add(sAltLang[474]);
                MyInstructions.Add(sAltLang[471]);
                MyInstructions.Add(sAltLang[473]);

                MyButtons.Add(21);
                MyButtons.Add(25);
                MyButtons.Add(22);
                MyButtons.Add(25);
            }
            else if (iBuildMode == 1)
            {
                if (iPart == 1)
                {
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[475]);
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[476]);
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[477]);
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[478]);
                    MyInstructions.Add(sAltLang[479]);
                    MyInstructions.Add(sAltLang[480]);

                    MyButtons.Add(47);
                    MyButtons.Add(25);
                    MyButtons.Add(51);
                    MyButtons.Add(25);
                    MyButtons.Add(27);
                    MyButtons.Add(25);
                    MyButtons.Add(173);
                    MyButtons.Add(25);
                    MyButtons.Add(21);
                    MyButtons.Add(22);
                }
                else if (iPart == 2)
                {
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[481]);
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[482]);
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[483]);
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[484]);
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[485]);
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[486]);
                    MyInstructions.Add(sAltLang[487]);
                    MyInstructions.Add(sAltLang[480]);

                    MyButtons.Add(47);
                    MyButtons.Add(25);
                    MyButtons.Add(51);
                    MyButtons.Add(25);
                    MyButtons.Add(34);
                    MyButtons.Add(25);
                    MyButtons.Add(35);
                    MyButtons.Add(25);
                    MyButtons.Add(32);
                    MyButtons.Add(25);
                    MyButtons.Add(33);
                    MyButtons.Add(25);
                    MyButtons.Add(21);
                    MyButtons.Add(22);
                }
                else if (iPart == 3)
                {
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[480]);
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[488]);

                    MyButtons.Add(22);
                    MyButtons.Add(25);
                    MyButtons.Add(21);
                    MyButtons.Add(25);
                }
                else if (iPart == 4)
                {
                    MyInstructions.Add(sAltLang[489]);
                    MyInstructions.Add(sAltLang[480]);
                    MyInstructions.Add(sAltLang[490]);

                    MyButtons.Add(23);
                    MyButtons.Add(22);
                    MyButtons.Add(21);
                }
            }
            else if (iBuildMode == 2)
            {
                if (iPart == 1)
                {
                    MyInstructions.Add(sAltLang[491]);
                    MyInstructions.Add(sAltLang[492]);
                    MyInstructions.Add(sAltLang[493]);
                    MyInstructions.Add(sAltLang[480]);
                    MyInstructions.Add(sAltLang[477]);
                    MyInstructions.Add(sAltLang[478]);

                    MyButtons.Add(47);
                    MyButtons.Add(51);
                    MyButtons.Add(21);
                    MyButtons.Add(22);
                    MyButtons.Add(27);
                    MyButtons.Add(173);
                }
                else if (iPart == 2)
                {
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[481]);
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[482]);
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[483]);
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[484]);
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[485]);
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[486]);
                    MyInstructions.Add(sAltLang[487]);
                    MyInstructions.Add(sAltLang[480]);

                    MyButtons.Add(47);
                    MyButtons.Add(25);
                    MyButtons.Add(51);
                    MyButtons.Add(25);
                    MyButtons.Add(34);
                    MyButtons.Add(25);
                    MyButtons.Add(35);
                    MyButtons.Add(25);
                    MyButtons.Add(32);
                    MyButtons.Add(25);
                    MyButtons.Add(33);
                    MyButtons.Add(25);
                    MyButtons.Add(21);
                    MyButtons.Add(22);
                }
                else if (iPart == 3)
                {
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[480]);
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[488]);

                    MyButtons.Add(22);
                    MyButtons.Add(25);
                    MyButtons.Add(21);
                    MyButtons.Add(25);
                }
                else if (iPart == 4)
                {
                    MyInstructions.Add(sAltLang[489]);
                    MyInstructions.Add(sAltLang[490]);

                    MyButtons.Add(21);
                    MyButtons.Add(22);
                }
                else if (iPart == 5)
                {
                    MyInstructions.Add(sAltLang[491]);
                    MyInstructions.Add(sAltLang[492]);
                    MyInstructions.Add(sAltLang[494]);
                    MyInstructions.Add(sAltLang[480]);

                    MyButtons.Add(47);
                    MyButtons.Add(51);
                    MyButtons.Add(21);
                    MyButtons.Add(22);
                }
                else if (iPart == 6)
                {
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[480]);
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[495]);
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[496]);

                    MyButtons.Add(22);
                    MyButtons.Add(25);
                    MyButtons.Add(21);
                    MyButtons.Add(25);
                    MyButtons.Add(23);
                    MyButtons.Add(25);
                }
            }
            else if (iBuildMode == 3)
            {
                if (iPart == 1)
                {
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[480]);
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[497]);
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[496]);

                    MyButtons.Add(22);
                    MyButtons.Add(25);
                    MyButtons.Add(21);
                    MyButtons.Add(25);
                    MyButtons.Add(23);
                    MyButtons.Add(25);
                }
            }
            else if (iBuildMode == 4)
            {
                if (iPart == 1)
                {
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[498]);

                    MyButtons.Add(21);
                    MyButtons.Add(25);
                }
                else if (iPart == 2)
                {
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[499]);

                    MyButtons.Add(21);
                    MyButtons.Add(25);
                }
                else if (iPart == 3)
                {
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[500]);
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[496]);

                    MyButtons.Add(21);
                    MyButtons.Add(25);
                    MyButtons.Add(23);
                    MyButtons.Add(25);
                }
            }
            else if (iBuildMode == 5)
            {
                if (iPart == 1)
                {
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[501]);
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[496]);

                    MyButtons.Add(21);
                    MyButtons.Add(25);
                    MyButtons.Add(23);
                    MyButtons.Add(25);
                }
            }
            else if (iBuildMode == 6)
            {
                if (iPart == 1)
                {
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[502]);

                    MyButtons.Add(21);
                    MyButtons.Add(25);
                }
                else if (iPart == 2)
                {
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[517]);

                    MyButtons.Add(21);
                    MyButtons.Add(25);
                }
            }
            else if (iBuildMode == 7)
            {
                if (iPart == 1)
                {
                    MyInstructions.Add(sAltLang[491]);
                    MyInstructions.Add(sAltLang[492]);
                    MyInstructions.Add(sAltLang[493]);
                    MyInstructions.Add(sAltLang[480]);
                    MyInstructions.Add(sAltLang[503]);
                    MyInstructions.Add(sAltLang[504]);

                    MyButtons.Add(47);
                    MyButtons.Add(51);
                    MyButtons.Add(21);
                    MyButtons.Add(22);
                    MyButtons.Add(27);
                    MyButtons.Add(173);
                }
                else if (iPart == 2)
                {
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[480]);
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[488]);

                    MyButtons.Add(22);
                    MyButtons.Add(25);
                    MyButtons.Add(21);
                    MyButtons.Add(25);
                }
            }
            else if (iBuildMode == 8)
            {
                if (iPart == 1)
                {
                    MyInstructions.Add(sAltLang[491]);
                    MyInstructions.Add(sAltLang[492]);
                    MyInstructions.Add(sAltLang[505]);
                    MyInstructions.Add(sAltLang[506]);
                    MyInstructions.Add(sAltLang[503]);
                    MyInstructions.Add(sAltLang[504]);

                    MyButtons.Add(47);
                    MyButtons.Add(51);
                    MyButtons.Add(21);
                    MyButtons.Add(22);
                    MyButtons.Add(27);
                    MyButtons.Add(173);
                }
                else if (iPart == 2)
                {
                    MyInstructions.Add(sAltLang[491]);
                    MyInstructions.Add(sAltLang[492]);
                    MyInstructions.Add(sAltLang[493]);
                    MyInstructions.Add(sAltLang[506]);

                    MyButtons.Add(47);
                    MyButtons.Add(51);
                    MyButtons.Add(21);
                    MyButtons.Add(22);
                }
                else if (iPart == 3)
                {
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[507]);

                    MyButtons.Add(21);
                    MyButtons.Add(25);
                }
                else if (iPart == 4)
                {
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[508]);

                    MyButtons.Add(21);
                    MyButtons.Add(25);
                }
                else if (iPart == 5)
                {
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[509] + iMissionVar_01);

                    MyButtons.Add(21);
                    MyButtons.Add(25);
                }
                else if (iPart == 6)
                {
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[510]);
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[489]);

                    MyButtons.Add(21);
                    MyButtons.Add(25);
                    MyButtons.Add(23);
                    MyButtons.Add(25);
                }
            }
            else if (iBuildMode == 9)
            {
                if (iPart == 1)
                {
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[511]);
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[512]);
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[489]);

                    MyButtons.Add(22);
                    MyButtons.Add(25);
                    MyButtons.Add(21);
                    MyButtons.Add(25);
                    MyButtons.Add(23);
                    MyButtons.Add(25);
                }
            }
            else if (iBuildMode == 10)
            {
                if (iPart == 1)
                {
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[513]);

                    MyButtons.Add(21);
                    MyButtons.Add(25);
                }
                else if (iPart == 2)
                {
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[480]);
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[514]);

                    MyButtons.Add(22);
                    MyButtons.Add(25);
                    MyButtons.Add(21);
                    MyButtons.Add(25);
                }
                else if (iPart == 3)
                {
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[480]);
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[515]);
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[516]);

                    MyButtons.Add(22);
                    MyButtons.Add(25);
                    MyButtons.Add(21);
                    MyButtons.Add(25);
                    MyButtons.Add(23);
                    MyButtons.Add(25);
                }
                else if (iPart == 4)
                {
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[480]);
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[515]);
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[517]);

                    MyButtons.Add(22);
                    MyButtons.Add(25);
                    MyButtons.Add(21);
                    MyButtons.Add(25);
                    MyButtons.Add(23);
                    MyButtons.Add(25);
                }
                else if (iPart == 5)
                {
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[480]);
                    MyInstructions.Add(sAltLang[471]);
                    MyInstructions.Add(sAltLang[517]);

                    MyButtons.Add(22);
                    MyButtons.Add(25);
                    MyButtons.Add(21);
                    MyButtons.Add(25);
                }
            }
            BaseHelpBar(MyButtons, MyInstructions);
        }
        private void QuickSub(string sTing)
        {
            UI.Notify(sTing);
        }
        private void LoadOnlineIps()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("LoadOnlineIps", tEx);

            if (!Function.Call<bool>(Hash.IS_IPL_ACTIVE, "vw_casino_billboard"))
            {
                List<string> sAddIpl = new List<string>();

                Function.Call(Hash._ENABLE_MP_DLC_MAPS, true);
                Function.Call(Hash._LOAD_MP_DLC_MAPS);

                Function.Call((Hash)0x9BAE5AD2508DF078, false);

                sAddIpl.Add("vw_casino_billboard_lod");
                sAddIpl.Add("vw_casino_billboard_lod(1)");
                sAddIpl.Add("vw_casino_billboard");
                sAddIpl.Add("hei_dlc_windows_casino_lod");
                sAddIpl.Add("hei_dlc_windows_casino");
                sAddIpl.Add("hei_dlc_casino_door_lod");
                sAddIpl.Add("hei_dlc_casino_door");
                sAddIpl.Add("hei_dlc_casino_aircon_lod");
                sAddIpl.Add("hei_dlc_casino_aircon");

                for (int i = 0; i < sAddIpl.Count; i++)
                {
                    if (!Function.Call<bool>(Hash.IS_IPL_ACTIVE, sAddIpl[i]))
                        Function.Call(Hash.REQUEST_IPL, sAddIpl[i]);
                }

                bOnlineStuffLoaded = true;
            }
            else
                bOnlineStuffLoaded = false;

        }
        private void LoadInMissionIPLs(int iPList, bool bAdd)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("LoadInMissionIPLs, iPList == " + iPList + ", bAdd == " + bAdd, tEx);

            List<string> sAddIpl = new List<string>();

            if (iPList == 1)
            {
                sAddIpl.Add("bkr_biker_interior_placement_interior_4_biker_dlc_int_ware03_milo_");
                sMissionVar_01 = "Coke";
            }//BikerCoke
            else if (iPList == 2)
            {
                sAddIpl.Add("bkr_biker_interior_placement_interior_5_biker_dlc_int_ware04_milo_");
                sMissionVar_01 = "Cash";
            }//Cash
            else if (iPList == 3)
            {
                sAddIpl.Add("bkr_biker_interior_placement_interior_6_biker_dlc_int_ware05_milo_");
                sMissionVar_01 = "Documents";
            }//Docs
            else if (iPList == 4)
            {
                sAddIpl.Add("bkr_biker_interior_placement_interior_2_biker_dlc_int_ware01_milo_");
                sMissionVar_01 = "Meth";
            }//Meth
            else if (iPList == 5)
            {
                sAddIpl.Add("bkr_biker_interior_placement_interior_3_biker_dlc_int_ware02_milo_");
                sMissionVar_01 = "Weed";
            }//Weed
            else if (iPList == 6)
            {
                sAddIpl.Add("ex_exec_warehouse_placement_interior_2_int_warehouse_l_dlc_milo");
                sMissionVar_01 = "Large Warehouse";
            }//LargeWare
            else if (iPList == 7)
            {
                sAddIpl.Add("ex_exec_warehouse_placement_interior_0_int_warehouse_m_dlc_milo");
                sMissionVar_01 = "Medium Warehouse";
            }//MedWare
            else if (iPList == 8)
            {
                sAddIpl.Add("ex_exec_warehouse_placement_interior_1_int_warehouse_s_dlc_milo");
                sMissionVar_01 = "Small Warehouse";
            }//SmalWare
            else if (iPList == 9)
            {
                sAddIpl.Add("gr_case10_bunkerclosed");
                sAddIpl.Add("gr_case9_bunkerclosed");
                sAddIpl.Add("gr_case3_bunkerclosed");
                sAddIpl.Add("gr_case0_bunkerclosed");
                sAddIpl.Add("gr_case1_bunkerclosed");
                sAddIpl.Add("gr_case2_bunkerclosed");
                sAddIpl.Add("gr_case5_bunkerclosed");
                sAddIpl.Add("gr_case7_bunkerclosed");
                sAddIpl.Add("gr_case11_bunkerclosed");
                sAddIpl.Add("gr_case6_bunkerclosed");
                sAddIpl.Add("gr_case4_bunkerclosed");

                sAddIpl.Add("gr_grdlc_interior_placement_interior_1_grdlc_int_02_milo_");
                sMissionVar_01 = "Bunker";
            }//Bunkers
            else if (iPList == 10)
            {
                sAddIpl.Add("apa_v_mp_h_01_b");
                sAddIpl.Add("apa_v_mp_h_02_b");
                sAddIpl.Add("apa_v_mp_h_03_b");
                sAddIpl.Add("apa_v_mp_h_04_b");
                sAddIpl.Add("apa_v_mp_h_05_b");
                sAddIpl.Add("apa_v_mp_h_06_b");
                sAddIpl.Add("apa_v_mp_h_07_b");
                sAddIpl.Add("apa_v_mp_h_08_b");
                sMissionVar_01 = "Appy";
            }//CustomApp

            if (bAdd)
            {
                if (iPList == 10)
                {
                    sAppCustomInt = sAddIpl[RandInt(0, sAddIpl.Count - 1)];
                    if (!Function.Call<bool>(Hash.IS_IPL_ACTIVE, sAppCustomInt))
                        Function.Call(Hash.REQUEST_IPL, sAppCustomInt);
                }
                else
                {
                    for (int i = 0; i < sAddIpl.Count; i++)
                    {
                        if (!Function.Call<bool>(Hash.IS_IPL_ACTIVE, sAddIpl[i]))
                            Function.Call(Hash.REQUEST_IPL, sAddIpl[i]);
                    }

                    if (iPList > 5)
                        CargoCollect_LoadClutter();
                    else
                        BikerRaids_LoadClutter();
                }
            }
            else
            {
                if (iPList == 10)
                {
                    if (Function.Call<bool>(Hash.IS_IPL_ACTIVE, sAppCustomInt))
                        Function.Call(Hash.REMOVE_IPL, sAppCustomInt);
                }
                else
                {
                    int iSwitch = sAddIpl.Count;
                    while (iSwitch > 0)
                    {
                        iSwitch = iSwitch - 1;
                        if (Function.Call<bool>(Hash.IS_IPL_ACTIVE, sAddIpl[iSwitch]))
                            Function.Call(Hash.REMOVE_IPL, sAddIpl[iSwitch]);
                        Script.Wait(100);
                    }
                }
            }
        }
        private void AppeyNess(Vector3 MyAppy)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("AppeyNess, MyAppy == " + MyAppy, tEx);

            int iApt = Function.Call<int>(Hash.GET_INTERIOR_AT_COORDS, MyAppy.X, MyAppy.Y, MyAppy.Z);
            if (Function.Call<bool>(Hash.IS_VALID_INTERIOR, iApt))
            {
                if (!Function.Call<bool>(Hash.IS_INTERIOR_READY, iApt))
                {
                    Function.Call((Hash)0x2CA429C029CCF247, iApt);
                    Function.Call(Hash.SET_INTERIOR_ACTIVE, iApt, true);
                    Function.Call(Hash.DISABLE_INTERIOR, iApt, false);
                }
            }

        }
        private void YourCoinPopUp(int iAdd, int iAcc, string sEnder)
        {
            string sTing = "";

            if (iAcc == 1)
                iNSPMBank += iAdd;
            else if (iAcc == 2)
                iNSPMCLowRisk += iAdd;
            else if (iAcc == 3)
                iNSPMCHighRisk += iAdd;

            if (iNSPMBank < 0)
                iNSPMBank = 0;
            else if (iNSPMCLowRisk < 0)
                iNSPMCLowRisk = 0;
            else if (iNSPMCHighRisk < 0)
                iNSPMCHighRisk = 0;
            else if (iNSPMBank > 2100000000)
                iNSPMBank = 2100000000;
            else if (iNSPMCLowRisk > 2100000000)
                iNSPMCLowRisk = 2100000000;
            else if (iNSPMCHighRisk > 2100000000)
                iNSPMCHighRisk = 2100000000;

            if (iAdd > 0)
            {
                if (iAcc == 1)
                    sTing = sAltLang[369] + sAltLang[373] + "~n~+~b~ " + ShowComs(iAdd, true, true) + "~w~ " + sEnder + "~n~ " + sAltLang[372] + ShowComs(iNSPMBank, true, true);
                else if (iAcc == 2)
                    sTing = sAltLang[370] + sAltLang[373] + "~n~+~b~ " + ShowComs(iAdd, true, true) + "~w~ " + sEnder + "~n~ " + sAltLang[372] + ShowComs(iNSPMCLowRisk, true, true);
                else if (iAcc == 3)
                    sTing = sAltLang[371] + sAltLang[373] + "~n~+~b~ " + ShowComs(iAdd, true, true) + "~w~ " + sEnder + "~n~ " + sAltLang[372] + ShowComs(iNSPMCHighRisk, true, true);
            }
            else
            {
                if (iAcc == 1)
                    sTing = sAltLang[369] + sAltLang[374] + "~n~-~r~ " + ShowComs(iAdd, true, true) + "~w~ " + sEnder + "~n~ " + sAltLang[372] + ShowComs(iNSPMBank, true, true);
                else if (iAcc == 2)
                    sTing = sAltLang[370] + sAltLang[374] + "~n~--~r~ " + ShowComs(iAdd, true, true) + "~w~ " + sEnder + "~n~ " + sAltLang[372] + ShowComs(iNSPMCLowRisk, true, true);
                else if (iAcc == 3)
                    sTing = sAltLang[371] + sAltLang[374] + "~n~--~r~ " + ShowComs(iAdd, true, true) + "~w~ " + sEnder + "~n~ " + sAltLang[372] + ShowComs(iNSPMCHighRisk, true, true);
            }

            UI.Notify(sTing);
        }
        public int NSPMCoin(int iGet)
        {
            int iCash;
            int iStat = 0;
            if (Game.Player.Character.Model == PedHash.Franklin)
                iStat = Function.Call<int>(Hash.GET_HASH_KEY, "SP1_TOTAL_CASH");
            else if (Game.Player.Character.Model == PedHash.Trevor)
                iStat = Function.Call<int>(Hash.GET_HASH_KEY, "SP2_TOTAL_CASH");
            else
                iStat = Function.Call<int>(Hash.GET_HASH_KEY, "SP0_TOTAL_CASH");

            unsafe
            {
                Function.Call<bool>(Hash.STAT_GET_INT, iStat, &iCash, -1);
            }


            if (iGet != 0)
            {
                iCash += iGet;
                Function.Call<bool>(Hash.STAT_SET_INT, iStat, iCash, true);
            }
            return iCash;
        }
        private void NSCoinCount(bool bAdd, int iAcc)
        {
            int iAmountTo = 1;

            if (bAdd)
            {
                if (iAcc == 1)
                {
                    if (NSPMCoin(0) > 0)
                    {
                        if (iNSPMBank < 2100000000)
                        {
                            if (iFaster_03 < Game.GameTime)
                            {
                                if (NSPMCoin(0) > 100000)
                                    iAmountTo = 100000;
                                else
                                    iFaster_03 = Game.GameTime + 2000;
                            }
                            else if (iFaster_02 < Game.GameTime)
                            {
                                if (NSPMCoin(0) > 10000)
                                    iAmountTo = 10000;
                                else
                                    iFaster_02 = Game.GameTime + 2000;
                            }
                            else if (iFaster_01 < Game.GameTime)
                            {
                                if (NSPMCoin(0) > 100)
                                    iAmountTo = 100;
                                else
                                    iFaster_01 = Game.GameTime + 2000;
                            }

                            iNSPMBank += iAmountTo;
                            NSPMCoin(iAmountTo * -1);
                        }
                    }
                }
                else if (iAcc == 2)
                {
                    if (iNSPMBank > 0)
                    {
                        if (iNSPMCLowRisk < 2100000000)
                        {
                            if (iFaster_03 < Game.GameTime)
                            {
                                if (iNSPMBank > 100000)
                                    iAmountTo = 100000;
                                else
                                    iFaster_03 = Game.GameTime + 2000;
                            }
                            else if (iFaster_02 < Game.GameTime)
                            {
                                if (iNSPMBank > 10000)
                                    iAmountTo = 10000;
                                else
                                    iFaster_02 = Game.GameTime + 2000;
                            }
                            else if (iFaster_01 < Game.GameTime)
                            {
                                if (iNSPMBank > 100)
                                    iAmountTo = 100;
                                else
                                    iFaster_01 = Game.GameTime + 2000;
                            }

                            iNSPMCLowRisk += iAmountTo;
                            iNSPMBank -= iAmountTo;
                        }
                    }
                }
                else if (iAcc == 3)
                {
                    if (iNSPMBank > 0)
                    {
                        if (iNSPMCHighRisk < 2100000000)
                        {
                            if (iFaster_03 < Game.GameTime)
                            {
                                if (iNSPMBank > 100000)
                                    iAmountTo = 100000;
                                else
                                    iFaster_03 = Game.GameTime + 2000;
                            }
                            else if (iFaster_02 < Game.GameTime)
                            {
                                if (iNSPMBank > 10000)
                                    iAmountTo = 10000;
                                else
                                    iFaster_02 = Game.GameTime + 2000;
                            }
                            else if (iFaster_01 < Game.GameTime)
                            {
                                if (iNSPMBank > 100)
                                    iAmountTo = 100;
                                else
                                    iFaster_01 = Game.GameTime + 2000;
                            }

                            iNSPMCHighRisk += iAmountTo;
                            iNSPMBank -= iAmountTo;
                        }
                    }
                }
                else if (iAcc == 5)
                {
                    if (iYachtPrice < 2100000000)
                    {
                        if (iFaster_03 < Game.GameTime)
                            iYachtPrice += +100000;
                        else if (iFaster_02 < Game.GameTime)
                            iYachtPrice += +10000;
                        else if (iFaster_01 < Game.GameTime)
                            iYachtPrice += +100;
                        else
                            iYachtPrice += +1;
                    }
                }
            }
            else
            {
                if (iAcc == 1)
                {
                    if (iNSPMBank > 0)
                    {
                        if (iFaster_03 < Game.GameTime)
                        {
                            if (iNSPMBank > 100000)
                                iAmountTo = 100000;
                            else
                                iFaster_03 = Game.GameTime + 2000;
                        }
                        else if (iFaster_02 < Game.GameTime)
                        {
                            if (iNSPMBank > 10000)
                                iAmountTo = 10000;
                            else
                                iFaster_02 = Game.GameTime + 2000;
                        }
                        else if (iFaster_01 < Game.GameTime)
                        {
                            if (iNSPMBank > 100)
                                iAmountTo = 100;
                            else
                                iFaster_01 = Game.GameTime + 2000;
                        }

                        iNSPMBank -= iAmountTo;
                        NSPMCoin(iAmountTo);
                    }
                }
                else if (iAcc == 2)
                {
                    if (iNSPMCLowRisk > 0)
                    {
                        if (iFaster_03 < Game.GameTime)
                        {
                            if (iNSPMCLowRisk > 100000)
                                iAmountTo = 100000;
                            else
                                iFaster_03 = Game.GameTime + 2000;
                        }
                        else if (iFaster_02 < Game.GameTime)
                        {
                            if (iNSPMCLowRisk > 10000)
                                iAmountTo = 10000;
                            else
                                iFaster_02 = Game.GameTime + 2000;
                        }
                        else if (iFaster_01 < Game.GameTime)
                        {
                            if (iNSPMCLowRisk > 100)
                                iAmountTo = 100;
                            else
                                iFaster_01 = Game.GameTime + 2000;
                        }

                        iNSPMCLowRisk -= iAmountTo;
                        iNSPMBank += iAmountTo;
                    }
                }
                else if (iAcc == 3)
                {
                    if (iNSPMCHighRisk > 0)
                    {
                        if (iFaster_03 < Game.GameTime)
                        {
                            if (iNSPMCHighRisk > 100000)
                                iAmountTo = 100000;
                            else
                                iFaster_03 = Game.GameTime + 2000;
                        }
                        else if (iFaster_02 < Game.GameTime)
                        {
                            if (iNSPMCHighRisk > 10000)
                                iAmountTo = 10000;
                            else
                                iFaster_02 = Game.GameTime + 2000;
                        }
                        else if (iFaster_01 < Game.GameTime)
                        {
                            if (iNSPMCHighRisk > 100)
                                iAmountTo = 100;
                            else
                                iFaster_01 = Game.GameTime + 2000;
                        }

                        iNSPMCHighRisk -= iAmountTo;
                        iNSPMBank += iAmountTo;
                    }
                }
                else if (iAcc == 5)
                {
                    if (iYachtPrice > 0)
                    {
                        if (iFaster_03 < Game.GameTime)
                        {
                            if (iYachtPrice > 100000)
                                iYachtPrice += -100000;
                            else
                                iFaster_03 = Game.GameTime + 2000;
                        }
                        else if (iFaster_02 < Game.GameTime)
                        {
                            if (iYachtPrice > 10000)
                                iYachtPrice += -10000;
                            else
                                iFaster_02 = Game.GameTime + 2000;
                        }
                        else if (iFaster_01 < Game.GameTime)
                        {
                            if (iYachtPrice > 100)
                                iYachtPrice += -100;
                            else
                                iFaster_01 = Game.GameTime + 2000;
                        }
                        else
                        {
                            if (iYachtPrice > 0)
                                iYachtPrice += -1;
                        }
                    }
                    else
                        iYachtPrice = 0;

                }
            }
        }
        private void NSCoinInvestments(bool bPlus, int iLow, int iHigh, string sEnder)
        {
            float fAdd = RandFlow((float)iLow, (float)iHigh);
            float fSum = 0.00f;
            if (bPlus)
            {
                if (iNSPMCHighRisk > 0)
                {
                    fSum = (float)iNSPMCHighRisk / 100.00f;
                    fSum *= fAdd;
                    YourCoinPopUp((int)fSum, 3, sEnder);
                }
                if (iNSPMCLowRisk > 0)
                {
                    fSum = iNSPMCLowRisk / 100;
                    fSum *= fAdd / 4.00f;
                    YourCoinPopUp((int)fSum, 2, sEnder);
                }
            }
            else
            {
                if (iNSPMCHighRisk > 0)
                {
                    fSum = iNSPMCHighRisk / 100;
                    fSum *= fAdd;
                    fSum *= -1;
                    YourCoinPopUp((int)fSum, 3, sEnder);
                }
                if (iNSPMCLowRisk > 0)
                {
                    fSum = iNSPMCLowRisk / 100;
                    fSum *= fAdd / 4;
                    fSum *= -1;
                    YourCoinPopUp((int)fSum, 2, sEnder);
                }
            }
        }
        private void Fubar_Carzz(bool bMissionTarget)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Fubar_Carzz, bMissionTarget == " + bMissionTarget, tEx);

            int iFifty = 10;
            if (bMissionTarget)
            {
                if (vFuMiss != Vector3.Zero)
                {
                    Game.FadeScreenOut(1000);
                    Script.Wait(1000);
                    FubarCarX.Position = vFuMiss;
                    Game.Player.Character.Task.LeaveVehicle();
                    Fubar_Math(false, false);
                    iFuFees *= -1;
                    YourCoinPopUp(iFuFees, 1, "Fubar Carz");
                    iFuFees = 0;
                    Game.FadeScreenIn(1000);
                    vFuMiss = Vector3.Zero;
                    Fubar_Clean();
                }
            }
            else
            {
                Game.FadeScreenOut(1000);
                Script.Wait(1000);
                FubarCarX.FreezePosition = true;
                vFuDest.Z = World.GetGroundHeight(vFuMiss);
                FubarCarX.Position = vFuDest;
                Script.Wait(1000);
                FubarCarX.FreezePosition = false;
                FubarCarX.Position = World.GetNextPositionOnStreet(vFuDest);
                while (World.GetStreetName(FubarCarX.Position) != World.GetStreetName(vFuDest) && iFifty > 0)
                {
                    Script.Wait(100);
                    iFifty -= 1;
                    FubarCarX.Position = World.GetNextPositionOnStreet(vFuDest);
                }
                if (iFifty < 1)
                    FubarCarX.Position = vFuDest;
                Game.Player.Character.Task.LeaveVehicle();
                Fubar_Math(false, false);
                iFuFees *= -1;
                YourCoinPopUp(iFuFees, 1, "Fubar Carz");
                iFuFees = 0;
                Game.FadeScreenIn(1000);
                Fubar_Clean();
            }
        }
        private void Fubar_Clean()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Fubar_Clean", tEx);

            if (FubarCarX.CurrentBlip.Exists())
                FubarCarX.CurrentBlip.Remove();
            FubarCarX.MarkAsNoLongerNeeded();
            FUbarDrv.MarkAsNoLongerNeeded();
            VTBTimerPool.Remove(FuBar);
            WriteXmlSet();
            iFubCarzz = 0;
            bFuToMishTarg = false;
            bIFrutiyAdd = false;
            bWeaponMan = false;
            bMeeddicc = false;
            FubarCarX = null;
            FUbarDrv = null;
        }
        private void Fubar_Math(bool bTextBar, bool bDriver)
        {
            iFuClock = Game.GameTime + 5000;

            if (bDriver)
            {                
                float fFIndFee = vTarget_02.DistanceTo(VehTrackin_01.Position) / 50;
                int iCost = (int)fFIndFee + 5;
                if (iCost > iCashBouns)
                    iCashBouns = iCost;

                if (bTextBar)
                    ttTextBar_01.Text = "$ " + iCashBouns + "";
            }
            else
            {
                if (iFubard > 99)
                    iFuFees = 0;
                else
                {
                    float fFIndFee = vFuFees.DistanceTo(FubarCarX.Position) / 50;
                    int iCost = (int)fFIndFee + 5;
                    if (iCost > iFuFees)
                        iFuFees = iCost;
                }
                if (bTextBar)
                    FuBar.Text = "NSCoin " + iFuFees;
            }
        }
        private void Fruits(int iAdd)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Fruits, iAdd == " + iAdd, tEx);

            if (iAdd == 0)
            {
                iFruit.CenterButtonColor = System.Drawing.Color.Orange;
                iFruit.LeftButtonColor = System.Drawing.Color.LimeGreen;
                iFruit.RightButtonColor = System.Drawing.Color.Purple;
                iFruit.CenterButtonIcon = SoftKeyIcon.Fire;
                iFruit.LeftButtonIcon = SoftKeyIcon.Police;
                iFruit.RightButtonIcon = SoftKeyIcon.Call;

                iFruitContact NSPMCoins = new iFruitContact("NSPM Bank");
                NSPMCoins.Answered += NSPMCoinAnswered;             // Linking the Answered event with our function
                NSPMCoins.DialTimeout = 4000;                       // Delay before answering
                NSPMCoins.Active = true;                            // true = the contact is available and will answer the phone
                NSPMCoins.Icon = ContactIcon.MazeBank;              // Contact's icon
                iFruit.Contacts.Add(NSPMCoins);                     // Add the contact to the phone
                UI.Notify(sAltLang[382] + "~b~NSPM Bank");
            }
            else if (iAdd == 1)
            {
                iFruitContact FubarCarz = new iFruitContact("Fubar Cars");
                FubarCarz.Answered += FubarsAnswered;
                FubarCarz.DialTimeout = 4000;
                FubarCarz.Active = true;
                FubarCarz.Icon = ContactIcon.Property_TaxiLot;
                iFruit.Contacts.Add(FubarCarz);
                UI.Notify(sAltLang[382] + "~b~Fubar Cars");
            }
            else if (iAdd == 2)
            {
                iFruitContact ImportantCarz = new iFruitContact("Import/Export Cars");
                ImportantCarz.Answered += ImportsAnswered;
                ImportantCarz.DialTimeout = 4000;
                ImportantCarz.Active = true;
                ImportantCarz.Icon = ContactIcon.LegendaryMotorsport;
                iFruit.Contacts.Add(ImportantCarz);
                UI.Notify(sAltLang[382] + "~b~Import/Export Cars");
            }
            else if (iAdd == 3)
            {
                iFruitContact GunDelivery = new iFruitContact("Mk2 Weapons Man");
                GunDelivery.Answered += WeapsAnswered;
                GunDelivery.DialTimeout = 4000;
                GunDelivery.Active = true;
                GunDelivery.Icon = ContactIcon.Ammunation;
                iFruit.Contacts.Add(GunDelivery);
                UI.Notify(sAltLang[382] + "~b~Weapons Man");
            }
            else if (iAdd == 4)
            {
                iFruitContact Peggasis = new iFruitContact("Pegasus Travel");
                Peggasis.Answered += PeggsAnswered;
                Peggasis.DialTimeout = 4000;
                Peggasis.Active = true;
                Peggasis.Icon = ContactIcon.Pegasus;
                iFruit.Contacts.Add(Peggasis);
                UI.Notify(sAltLang[382] + "~b~Pegasus Travel");
            }
            else if (iAdd == 5)
            {
                iFruitContact Bribes = new iFruitContact("Police Bribes");
                Bribes.Answered += BribesAnswered;
                Bribes.DialTimeout = 4000;
                Bribes.Active = true;
                Bribes.Icon = ContactIcon.MP_FibContact;
                iFruit.Contacts.Add(Bribes);
                UI.Notify(sAltLang[382] + "~b~Police Bribes");
            }
            else if (iAdd == 6)
            {
                iFruitContact Medic = new iFruitContact("Medicare");
                Medic.Answered += MedicAnswered;
                Medic.DialTimeout = 4000;
                Medic.Active = true;
                Medic.Icon = ContactIcon.Emergency;
                iFruit.Contacts.Add(Medic);
                UI.Notify(sAltLang[382] + "~b~Medicare");
            }
        }
        private void NSPMCoinAnswered(iFruitContact contact)
        {
            NSPMCoinAccount();
            iFruit.Close(1000);
        }
        private void NSPMCoinAccount()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("NSPMCoinAccount", tEx);

            YtmenuPool = new MenuPool();
            var mainMenu = new UIMenu("NSPMCoin", "NSPMCoin " + sAltLang[399]);
            YtmenuPool.Add(mainMenu);
            NSPMCurrentAcc(mainMenu);
            NSPMLowRiskAcc(mainMenu);
            NSPMHighRiskAcc(mainMenu);
            YtmenuPool.RefreshIndex();
            bMenuOpen = true;
            mainMenu.Visible = !mainMenu.Visible;
        }
        private void NSPMCurrentAcc(UIMenu XMen)
        {
            var CurrentAccmenu = YtmenuPool.AddSubMenu(XMen, "Current " + sAltLang[399]);

            var item_01 = new UIMenuItem(sAltLang[375], "");
            CurrentAccmenu.AddItem(item_01);

            var item_02 = new UIMenuItem(sAltLang[376], "");
            CurrentAccmenu.AddItem(item_02);

            var item_03 = new UIMenuItem(sAltLang[377], "");
            CurrentAccmenu.AddItem(item_03);

            CurrentAccmenu.OnItemSelect += (sender, item, index) =>
            {
                if (item == item_01)
                {
                    UI.Notify("Current Acc: " + ShowComs(iNSPMBank, true, true));
                    YtmenuPool.CloseAllMenus();
                }
                else if (item == item_02)
                {
                    bBankTransfer = true;
                    bIFrutiyAdd = true;
                    iCoinBats = 1;
                    YtmenuPool.CloseAllMenus();
                }
                else
                    YtmenuPool.CloseAllMenus();
            };
        }
        private void NSPMLowRiskAcc(UIMenu XMen)
        {
            var LowAccmenu = YtmenuPool.AddSubMenu(XMen, sAltLang[400]);

            var item_01 = new UIMenuItem(sAltLang[375], "");
            LowAccmenu.AddItem(item_01);

            var item_02 = new UIMenuItem(sAltLang[376], "");
            LowAccmenu.AddItem(item_02);

            var item_03 = new UIMenuItem(sAltLang[377], "");
            LowAccmenu.AddItem(item_03);

            LowAccmenu.OnItemSelect += (sender, item, index) =>
            {
                if (item == item_01)
                {
                    UI.Notify("Current Acc: " + ShowComs(iNSPMCLowRisk, true, true));
                    YtmenuPool.CloseAllMenus();
                }
                else if (item == item_02)
                {
                    bBankTransfer = true;
                    bIFrutiyAdd = true;
                    iCoinBats = 2;
                    YtmenuPool.CloseAllMenus();
                }
                else
                    YtmenuPool.CloseAllMenus();
            };
        }
        private void NSPMHighRiskAcc(UIMenu XMen)
        {
            var HighAccmenu = YtmenuPool.AddSubMenu(XMen, sAltLang[401]);

            var item_01 = new UIMenuItem(sAltLang[375], "");
            HighAccmenu.AddItem(item_01);

            var item_02 = new UIMenuItem(sAltLang[376], "");
            HighAccmenu.AddItem(item_02);

            var item_03 = new UIMenuItem(sAltLang[377], "");
            HighAccmenu.AddItem(item_03);

            HighAccmenu.OnItemSelect += (sender, item, index) =>
            {
                if (item == item_01)
                {
                    UI.Notify("Current Acc: " + ShowComs(iNSPMCHighRisk, true, true));
                    YtmenuPool.CloseAllMenus();
                }
                else if (item == item_02)
                {
                    bBankTransfer = true;
                    bIFrutiyAdd = true;
                    iCoinBats = 3;
                    YtmenuPool.CloseAllMenus();
                }
                else
                    YtmenuPool.CloseAllMenus();
            };
        }
        private void FubarsAnswered(iFruitContact contact)
        {
            if (bFubarRide)
            {
                Game.Player.Character.Task.ClearAll();
                bFubarRide = false;
                bIFrutiyAdd = false;
                Fubar_Clean();
            }
            else if (!Game.Player.Character.IsInVehicle())
            {
                bIFrutiyAdd = true;
                FindNearestVeh(Game.Player.Character.Position, 0, 1, 0, 3, 3, false, true, true, 120.00f, 35.00f, "Dilettante", true, 1, 1, true);
            }
            else
                UI.Notify(sAltLang[463]);
            iFruit.Close(2000);
        }
        private void ImportsAnswered(iFruitContact contact)
        {
            if (!Game.Player.Character.IsInVehicle())
            {
                if (bImports)
                {
                    Peggs.CurrentBlip.Remove();
                    Peggs.MarkAsNoLongerNeeded();
                    bIFrutiyAdd = false;
                    bImports = false;
                }
                else
                {
                    bIFrutiyAdd = true;
                    ImportsMenu();
                }
            }
            else
                UI.Notify(sAltLang[464]);
            iFruit.Close(2000);
        }
        private void ImportsMenu()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("ImportsMenu", tEx);

            YtmenuPool = new MenuPool();
            var mainMenu = new UIMenu(sAltLang[83], sAltLang[402]);
            YtmenuPool.Add(mainMenu);
            ImportExList(mainMenu);
            YtmenuPool.RefreshIndex();
            bMenuOpen = true;
            mainMenu.Visible = !mainMenu.Visible;
        }
        private void ImportExList(UIMenu XMen)
        {
            var Submenu_01 = YtmenuPool.AddSubMenu(XMen, sAltLang[403]);
            var Submenu_03 = YtmenuPool.AddSubMenu(XMen, sAltLang[404]);
            var Submenu_05 = YtmenuPool.AddSubMenu(XMen, sAltLang[405]);
            var Submenu_04 = YtmenuPool.AddSubMenu(XMen, sAltLang[406]);
            var Submenu_08 = YtmenuPool.AddSubMenu(XMen, sAltLang[407]);
            var Submenu_02 = YtmenuPool.AddSubMenu(XMen, sAltLang[408]);
            var Submenu_09 = YtmenuPool.AddSubMenu(XMen, sAltLang[409]);
            var Submenu_06 = YtmenuPool.AddSubMenu(XMen, sAltLang[410]);
            var Submenu_07 = YtmenuPool.AddSubMenu(XMen, sAltLang[411]);
            var Submenu_10 = YtmenuPool.AddSubMenu(XMen, sAltLang[469] + sAltLang[122]);

            List<string> sub_01 = new List<string>();
            List<string> sub_02 = new List<string>();
            List<string> sub_03 = new List<string>();
            List<string> sub_04 = new List<string>();
            List<string> sub_05 = new List<string>();
            List<string> sub_06 = new List<string>();
            List<string> sub_07 = new List<string>();
            List<string> sub_08 = new List<string>();
            List<string> sub_09 = new List<string>();
            List<string> sub_10 = new List<string>();

            if (!bTrainM)
            {
                for (int i = 0; i < sImpExpVeh.Count; i++)
                {
                    if (sTrainerOnly.Contains(sImpExpVeh[i]))
                    {
                        sImpExpVeh.RemoveAt(i);
                        iImpExpList.RemoveAt(i);
                    }
                }
            }

            for (int i = 0; i < sImpExpVeh.Count; i++)
            {
                if (iImpExpList[i] == 1)
                {
                    var item_ = new UIMenuItem(GetEntName(sImpExpVeh[i]), "");
                    Submenu_01.AddItem(item_);
                    sub_01.Add(sImpExpVeh[i]);
                }                //Super
                else if (iImpExpList[i] == 2)
                {
                    var item_ = new UIMenuItem(GetEntName(sImpExpVeh[i]), "");
                    Submenu_02.AddItem(item_);
                    sub_02.Add(sImpExpVeh[i]);
                }                //Coupe
                else if (iImpExpList[i] == 3)
                {
                    var item_ = new UIMenuItem(GetEntName(sImpExpVeh[i]), "");
                    Submenu_03.AddItem(item_);
                    sub_03.Add(sImpExpVeh[i]);
                }                //Sports
                else if (iImpExpList[i] == 4)
                {
                    var item_ = new UIMenuItem(GetEntName(sImpExpVeh[i]), "");
                    Submenu_04.AddItem(item_);
                    sub_04.Add(sImpExpVeh[i]);
                }                //Mussle
                else if (iImpExpList[i] == 5)
                {
                    var item_ = new UIMenuItem(GetEntName(sImpExpVeh[i]), "");
                    Submenu_05.AddItem(item_);
                    sub_05.Add(sImpExpVeh[i]);
                }                //SportsClassic
                else if (iImpExpList[i] == 6)
                {
                    var item_ = new UIMenuItem(GetEntName(sImpExpVeh[i]), "");
                    Submenu_06.AddItem(item_);
                    sub_06.Add(sImpExpVeh[i]);
                }                //Compact
                else if (iImpExpList[i] == 7)
                {
                    var item_ = new UIMenuItem(GetEntName(sImpExpVeh[i]), "");
                    Submenu_07.AddItem(item_);
                    sub_07.Add(sImpExpVeh[i]);
                }                //Sedan
                else if (iImpExpList[i] == 8)
                {
                    var item_ = new UIMenuItem(GetEntName(sImpExpVeh[i]), "");
                    Submenu_08.AddItem(item_);
                    sub_08.Add(sImpExpVeh[i]);
                }                //Offroad/
                else if (iImpExpList[i] == 9)
                {
                    var item_ = new UIMenuItem(GetEntName(sImpExpVeh[i]), "");
                    Submenu_09.AddItem(item_);
                    sub_09.Add(sImpExpVeh[i]);
                }               //SUV
                else
                {
                    if (IsItARealVehicle(sImpExpVeh[i]))
                    {
                        var item_ = new UIMenuItem(GetEntName(sImpExpVeh[i]), "");
                        Submenu_10.AddItem(item_);
                        sub_10.Add(sImpExpVeh[i]);
                    }
                    else
                    {
                        sImpExpVeh.RemoveAt(i);
                        iImpExpList.RemoveAt(i);
                    }
                }
            }

            Submenu_01.OnItemSelect += (sender, item, index) =>
            {
                if (iNSPMBank > 200)
                {
                    bIFrutiyAdd = true;
                    FindNearestVeh(Game.Player.Character.Position, 0, 1, 0, 3, 4, false, false, false, 120.00f, 1.00f, sub_01[index], false, 1, 2, true);
                    YourCoinPopUp(-200, 1, "ImportExport");
                }
                else
                    UI.Notify(sAltLang[368]);
                YtmenuPool.CloseAllMenus();
            };
            Submenu_02.OnItemSelect += (sender, item, index) =>
            {
                if (iNSPMBank > 200)
                {
                    bIFrutiyAdd = true;
                    FindAndReplaceVeh(Game.Player.Character.Position, 0, 1, 0, 3, 4, false, false, false, 120.00f, 1.00f, sub_02[index], false, 1, 2, true);
                    YourCoinPopUp(-200, 1, "ImportExport");
                }
                else
                    UI.Notify(sAltLang[368]);
                YtmenuPool.CloseAllMenus();
            };
            Submenu_03.OnItemSelect += (sender, item, index) =>
            {
                if (iNSPMBank > 200)
                {
                    bIFrutiyAdd = true;
                    FindAndReplaceVeh(Game.Player.Character.Position, 0, 1, 0, 3, 4, false, false, false, 120.00f, 1.00f, sub_03[index], false, 1, 2, true);
                    YourCoinPopUp(-200, 1, "ImportExport");
                }
                else
                    UI.Notify(sAltLang[368]);
                YtmenuPool.CloseAllMenus();
            };
            Submenu_04.OnItemSelect += (sender, item, index) =>
            {
                if (iNSPMBank > 200)
                {
                    bIFrutiyAdd = true;
                    FindAndReplaceVeh(Game.Player.Character.Position, 0, 1, 0, 3, 4, false, false, false, 120.00f, 1.00f, sub_04[index], false, 1, 2, true);
                    YourCoinPopUp(-200, 1, "ImportExport");
                }
                else
                    UI.Notify(sAltLang[368]);
                YtmenuPool.CloseAllMenus();
            };
            Submenu_05.OnItemSelect += (sender, item, index) =>
            {
                if (iNSPMBank > 200)
                {
                    bIFrutiyAdd = true;
                    FindAndReplaceVeh(Game.Player.Character.Position, 0, 1, 0, 3, 4, false, false, false, 120.00f, 1.00f, sub_05[index], false, 1, 2, true);
                    YourCoinPopUp(-200, 1, "ImportExport");
                }
                else
                    UI.Notify(sAltLang[368]);
                YtmenuPool.CloseAllMenus();
            };
            Submenu_06.OnItemSelect += (sender, item, index) =>
            {
                if (iNSPMBank > 200)
                {
                    bIFrutiyAdd = true;
                    FindAndReplaceVeh(Game.Player.Character.Position, 0, 1, 0, 3, 4, false, false, false, 120.00f, 1.00f, sub_06[index], false, 1, 2, true);
                    YourCoinPopUp(-200, 1, "ImportExport");
                }
                else
                    UI.Notify(sAltLang[368]);
                YtmenuPool.CloseAllMenus();
            };
            Submenu_07.OnItemSelect += (sender, item, index) =>
            {
                if (iNSPMBank > 200)
                {
                    bIFrutiyAdd = true;
                    FindAndReplaceVeh(Game.Player.Character.Position, 0, 1, 0, 3, 4, false, false, false, 120.00f, 1.00f, sub_07[index], false, 1, 2, true);
                    YourCoinPopUp(-200, 1, "ImportExport");
                }
                else
                    UI.Notify(sAltLang[368]);
                YtmenuPool.CloseAllMenus();
            };
            Submenu_08.OnItemSelect += (sender, item, index) =>
            {
                if (iNSPMBank > 200)
                {
                    bIFrutiyAdd = true;
                    FindAndReplaceVeh(Game.Player.Character.Position, 0, 1, 0, 3, 4, false, false, false, 120.00f, 1.00f, sub_08[index], false, 1, 2, true);
                    YourCoinPopUp(-200, 1, "ImportExport");
                }
                else
                    UI.Notify(sAltLang[368]);
                YtmenuPool.CloseAllMenus();
            };
            Submenu_09.OnItemSelect += (sender, item, index) =>
            {
                if (iNSPMBank > 200)
                {
                    bIFrutiyAdd = true;
                    FindAndReplaceVeh(Game.Player.Character.Position, 0, 1, 0, 3, 4, false, false, false, 120.00f, 1.00f, sub_09[index], false, 1, 2, true);
                    YourCoinPopUp(-200, 1, "ImportExport");
                }
                else
                    UI.Notify(sAltLang[368]);
                YtmenuPool.CloseAllMenus();
            };
            Submenu_10.OnItemSelect += (sender, item, index) =>
            {
                if (iNSPMBank > 200)
                {
                    bIFrutiyAdd = true;
                    FindAndReplaceVeh(Game.Player.Character.Position, 0, 1, 0, 3, 4, false, false, false, 120.00f, 1.00f, sub_10[index], false, 1, 2, true);
                    YourCoinPopUp(-200, 1, "ImportExport");
                }
                else
                    UI.Notify(sAltLang[368]);
                YtmenuPool.CloseAllMenus();
            };
        }
        private void MedicAnswered(iFruitContact contact)
        {
            if (!Game.Player.Character.IsInVehicle())
            {
                if (bIFrutiyAdd)
                {
                    bIFrutiyAdd = false;
                    bFubarRide = false;
                    Fubar_Clean();
                }
                else
                {
                    if (iNSPMBank > 500)
                    {
                        YourCoinPopUp(-500, 1, sAltLang[412]);
                        bIFrutiyAdd = true;
                        iFubCarzz = 0;
                        FindNearestVeh(Game.Player.Character.Position, 0, 8, 0, 3, 6, false, true, true, 120.00f, 25.00f, "AMBULANCE", true, 1, 3, true);
                    }
                    else
                        UI.Notify(sAltLang[368]);
                }
            }
            else
                UI.Notify(sAltLang[466]);
            iFruit.Close(2000);
        }
        private void WeapsAnswered(iFruitContact contact)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("WeapsAnswered, bWeaponMan == " + bWeaponMan, tEx);

            if (bWeaponMan)
            {
                bIFrutiyAdd = false;
                bFubarRide = false;
                Fubar_Clean();
            }
            else
            {
                YtmenuPool = new MenuPool();
                var mainMenu = new UIMenu(sAltLang[413], sAltLang[414]);
                YtmenuPool.Add(mainMenu);
                MkWepsOpt(mainMenu);
                YtmenuPool.RefreshIndex();
                bMenuOpen = true;
                mainMenu.Visible = !mainMenu.Visible;
            }
            iFruit.Close(2000);
        }
        private void MkWepsOpt(UIMenu XMen)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("MkWepsOpt", tEx);

            var Rand_01 = new UIMenuItem(sAltLang[528], "");

            var Rand_02 = new UIMenuItem(sAltLang[529], "");

            XMen.AddItem(Rand_01);
            XMen.AddItem(Rand_02);

            XMen.OnItemSelect += (sender, item, index) =>
            {
                if (item == Rand_01)
                {
                    bIFrutiyAdd = true;
                    iFubCarzz = 0;
                    FindNearestVeh(Game.Player.Character.Position, 0, 1, 0, 3, 5, false, true, true, 120.00f, 25.00f, "BOXVILLE5", true, 1, 4, true);
                    YtmenuPool.CloseAllMenus();
                }
                else if (item == Rand_02)
                {
                    AddMissWeaps(Mk2WeapsMain, bWeapSwap);
                    YtmenuPool.CloseAllMenus();
                }
            };
        }
        private void WeaponsMenu()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("WeaponsMenu", tEx);

            YtmenuPool = new MenuPool();
            var mainMenu = new UIMenu(sAltLang[413], sAltLang[414]);
            YtmenuPool.Add(mainMenu);
            Mk2WeapsList(mainMenu);
            YtmenuPool.RefreshIndex();
            bMenuOpen = true;
            bWepMenuX = true;
            mainMenu.Visible = !mainMenu.Visible;
        }
        private void Mk2WeapsList(UIMenu XMen)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Mk2WeapsList", tEx);

            List<int> iPrice = new List<int>();
            List<string> sWeap01 = new List<string>();
            List<string> sWeap02 = new List<string>();
            sWeap01.Add("Revolver Mk2"); iPrice.Add(99000); sWeap02.Add("weapon_revolver_mk2");
            sWeap01.Add("SNS Pistol Mk2"); iPrice.Add(79575); sWeap02.Add("weapon_snspistol_mk2");
            sWeap01.Add("Pistol Mk2"); iPrice.Add(73750); sWeap02.Add("weapon_pistol_mk2");
            sWeap01.Add("SMG Mk2"); iPrice.Add(85500); sWeap02.Add("weapon_smg_mk2");
            sWeap01.Add("Pump Shotgun Mk2"); iPrice.Add(82500); sWeap02.Add("weapon_pumpshotgun_mk2");
            sWeap01.Add("Bullpup Rifle Mk2"); iPrice.Add(105750); sWeap02.Add("weapon_bullpuprifle_mk2");
            sWeap01.Add("Special Carbine Mk2"); iPrice.Add(135000); sWeap02.Add("weapon_specialcarbine_mk2");
            sWeap01.Add("Assault Rifle Mk2"); iPrice.Add(98750); sWeap02.Add("weapon_assaultrifle_mk2");
            sWeap01.Add("Carbine Rifle Mk2"); iPrice.Add(107500); sWeap02.Add("weapon_carbinerifle_mk2");
            sWeap01.Add("Combat MG Mk2"); iPrice.Add(119000); sWeap02.Add("weapon_combatmg_mk2");
            sWeap01.Add("Marksman Rifle Mk2"); iPrice.Add(14900); sWeap02.Add("weapon_marksmanrifle_mk2");
            sWeap01.Add("Heavy Sniper Mk2"); iPrice.Add(165375); sWeap02.Add("weapon_heavysniper_mk2");

            for (int i = 0; i < sWeap01.Count; i++)
            {
                if (Function.Call<bool>(Hash.HAS_PED_GOT_WEAPON, Game.Player.Character, Function.Call<int>(Hash.GET_HASH_KEY, sWeap02[i]), false))
                    iPrice[i] = 0;
                AmmoAtachLiveList(XMen, i, sWeap01[i], sWeap02[i], iPrice[i]);
            }

            XMen.OnItemSelect += (sender, item, index) =>
            {
                if (iPrice[index] < iNSPMBank)
                    GiveMk2Weap(Game.Player.Character, sWeap02[index], iPrice[index]);
                else
                {
                    UI.Notify(sAltLang[368]);
                    YtmenuPool.CloseAllMenus();
                }
            };
        }
        private void AmmoAtachLiveList(UIMenu XMen, int iWeap, string sWeapName, string sWeapHash, int iPrice)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("AmmoAtachLiveList", tEx);

            var Midmenu = YtmenuPool.AddSubMenu(XMen, sWeapName, "NSCoin" + iPrice);

            Mk2CompListAmmo(Midmenu, iWeap, sWeapName, sWeapHash);
            Mk2CompListAttach(Midmenu, iWeap, sWeapName, sWeapHash);
            Mk2CompListLivery(Midmenu, iWeap, sWeapName, sWeapHash);
            Mk2AddAmmo(Midmenu, sWeapHash, sWeapName);
        }
        private void Mk2CompListAmmo(UIMenu XMen, int iWeap, string sWeap, string sWeapHash)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Mk2CompListAmmo", tEx);

            List<string> sAdd01 = new List<string>();
            List<string> sAdd02 = new List<string>();
            List<int> iCost = new List<int>();
            if (iWeap == 0)
            {
                sAdd01.Add("Default Rounds"); sAdd02.Add("COMPONENT_REVOLVER_MK2_CLIP_01"); iCost.Add(28);
                sAdd01.Add("Tracer Rounds"); sAdd02.Add("COMPONENT_REVOLVER_MK2_CLIP_TRACER"); iCost.Add(21);
                sAdd01.Add("Incendiary Rounds"); sAdd02.Add("COMPONENT_REVOLVER_MK2_CLIP_INCENDIARY"); iCost.Add(42);
                sAdd01.Add("Hollow Point Rounds"); sAdd02.Add("COMPONENT_REVOLVER_MK2_CLIP_HOLLOWPOINT"); iCost.Add(56);
                sAdd01.Add("Full Metal Jacket Rounds"); sAdd02.Add("COMPONENT_REVOLVER_MK2_CLIP_FMJ"); iCost.Add(98);
            }       //Revolver Mk2
            else if (iWeap == 1)
            {
                sAdd01.Add("Default Clip"); sAdd02.Add("COMPONENT_SNSPISTOL_MK2_CLIP_01"); iCost.Add(29);
                sAdd01.Add("Extended Clip"); sAdd02.Add("COMPONENT_SNSPISTOL_MK2_CLIP_02"); iCost.Add(59);
                sAdd01.Add("Tracer Rounds"); sAdd02.Add("COMPONENT_SNSPISTOL_MK2_CLIP_TRACER"); iCost.Add(22);
                sAdd01.Add("Incendiary Rounds"); sAdd02.Add("COMPONENT_SNSPISTOL_MK2_CLIP_INCENDIARY"); iCost.Add(43);
                sAdd01.Add("Hollow Point Rounds"); sAdd02.Add("COMPONENT_SNSPISTOL_MK2_CLIP_HOLLOWPOINT"); iCost.Add(58);
                sAdd01.Add("Full Metal Jacket Rounds"); sAdd02.Add("COMPONENT_SNSPISTOL_MK2_CLIP_FMJ"); iCost.Add(100);
            }       //SNS Pistol Mk2
            else if (iWeap == 2)
            {
                sAdd01.Add("Default Clip"); sAdd02.Add("COMPONENT_PISTOL_MK2_CLIP_01"); iCost.Add(57);
                sAdd01.Add("Extended Clip"); sAdd02.Add("COMPONENT_PISTOL_MK2_CLIP_02"); iCost.Add(87);
                sAdd01.Add("Tracer Rounds"); sAdd02.Add("COMPONENT_PISTOL_MK2_CLIP_TRACER"); iCost.Add(43);
                sAdd01.Add("Incendiary Rounds"); sAdd02.Add("COMPONENT_PISTOL_MK2_CLIP_INCENDIARY"); iCost.Add(58);
                sAdd01.Add("Hollow Point Rounds"); sAdd02.Add("COMPONENT_PISTOL_MK2_CLIP_HOLLOWPOINT"); iCost.Add(77);
                sAdd01.Add("Full Metal Jacket Rounds"); sAdd02.Add("COMPONENT_PISTOL_MK2_CLIP_FMJ"); iCost.Add(134);
            }       //Pistol Mk2
            else if (iWeap == 3)
            {
                sAdd01.Add("Default Clip"); sAdd02.Add("COMPONENT_SMG_MK2_CLIP_01"); iCost.Add(113);
                sAdd01.Add("Extended Clip"); sAdd02.Add("COMPONENT_SMG_MK2_CLIP_02"); iCost.Add(225);
                sAdd01.Add("Tracer Rounds"); sAdd02.Add("COMPONENT_SMG_MK2_CLIP_TRACER"); iCost.Add(85);
                sAdd01.Add("Incendiary Rounds"); sAdd02.Add("COMPONENT_SMG_MK2_CLIP_INCENDIARY"); iCost.Add(113);
                sAdd01.Add("Hollow Point Rounds"); sAdd02.Add("COMPONENT_SMG_MK2_CLIP_HOLLOWPOINT"); iCost.Add(151);
                sAdd01.Add("Full Metal Jacket Rounds"); sAdd02.Add("COMPONENT_SMG_MK2_CLIP_FMJ"); iCost.Add(264);
            }       //SMG Mk2
            else if (iWeap == 4)
            {
                sAdd01.Add("Default Shells"); sAdd02.Add("COMPONENT_PUMPSHOTGUN_MK2_CLIP_01"); iCost.Add(24);
                sAdd01.Add("Dragon's Breath Shells"); sAdd02.Add("COMPONENT_PUMPSHOTGUN_MK2_CLIP_INCENDIARY"); iCost.Add(36);
                sAdd01.Add("Steel Buckshot Shells"); sAdd02.Add("COMPONENT_PUMPSHOTGUN_MK2_CLIP_ARMORPIERCING"); iCost.Add(48);
                sAdd01.Add("Flechette Shells"); sAdd02.Add("COMPONENT_PUMPSHOTGUN_MK2_CLIP_HOLLOWPOINT"); iCost.Add(60);
                sAdd01.Add("Explosive Slugs"); sAdd02.Add("COMPONENT_PUMPSHOTGUN_MK2_CLIP_EXPLOSIVE"); iCost.Add(600);
            }       //Pump Shotgun Mk2
            else if (iWeap == 5)
            {
                sAdd01.Add("Default Clip"); sAdd02.Add("COMPONENT_BULLPUPRIFLE_MK2_CLIP_01"); iCost.Add(108);
                sAdd01.Add("Extended Clip"); sAdd02.Add("COMPONENT_BULLPUPRIFLE_MK2_CLIP_02"); iCost.Add(215);
                sAdd01.Add("Tracer Rounds"); sAdd02.Add("COMPONENT_BULLPUPRIFLE_MK2_CLIP_TRACER"); iCost.Add(68);
                sAdd01.Add("Incendiary Rounds"); sAdd02.Add("COMPONENT_BULLPUPRIFLE_MK2_CLIP_INCENDIARY"); iCost.Add(90);
                sAdd01.Add("Armor Piercing Rounds"); sAdd02.Add("COMPONENT_BULLPUPRIFLE_MK2_CLIP_ARMORPIERCING"); iCost.Add(150);
                sAdd01.Add("Full Metal Jacket Rounds"); sAdd02.Add("COMPONENT_BULLPUPRIFLE_MK2_CLIP_FMJ"); iCost.Add(210);
            }       //Bullpup Rifle Mk2
            else if (iWeap == 6)
            {
                sAdd01.Add("Default Clip"); sAdd02.Add("COMPONENT_SPECIALCARBINE_MK2_CLIP_01"); iCost.Add(108);
                sAdd01.Add("Extended Clip"); sAdd02.Add("COMPONENT_SPECIALCARBINE_MK2_CLIP_02"); iCost.Add(215);
                sAdd01.Add("Tracer Rounds"); sAdd02.Add("COMPONENT_SPECIALCARBINE_MK2_CLIP_TRACER"); iCost.Add(81);
                sAdd01.Add("Incendiary Rounds"); sAdd02.Add("COMPONENT_SPECIALCARBINE_MK2_CLIP_INCENDIARY"); iCost.Add(108);
                sAdd01.Add("Armor Piercing Rounds"); sAdd02.Add("COMPONENT_SPECIALCARBINE_MK2_CLIP_ARMORPIERCING"); iCost.Add(180);
                sAdd01.Add("Full Metal Jacket Rounds"); sAdd02.Add("COMPONENT_SPECIALCARBINE_MK2_CLIP_FMJ"); iCost.Add(252);
            }       //Special Carbine Mk2
            else if (iWeap == 7)
            {
                sAdd01.Add("Default Clip"); sAdd02.Add("COMPONENT_ASSAULTRIFLE_MK2_CLIP_01"); iCost.Add(42);
                sAdd01.Add("Extended Clip"); sAdd02.Add("COMPONENT_ASSAULTRIFLE_MK2_CLIP_02"); iCost.Add(81);
                sAdd01.Add("Tracer Rounds"); sAdd02.Add("COMPONENT_ASSAULTRIFLE_MK2_CLIP_TRACER"); iCost.Add(81);
                sAdd01.Add("Incendiary Rounds"); sAdd02.Add("COMPONENT_ASSAULTRIFLE_MK2_CLIP_INCENDIARY"); iCost.Add(108);
                sAdd01.Add("Armor Piercing Rounds"); sAdd02.Add("COMPONENT_ASSAULTRIFLE_MK2_CLIP_ARMORPIERCING"); iCost.Add(180);
                sAdd01.Add("Full Metal Jacket Rounds"); sAdd02.Add("COMPONENT_ASSAULTRIFLE_MK2_CLIP_FMJ"); iCost.Add(252);
            }       //Assault Rifle Mk2
            else if (iWeap == 8)
            {
                sAdd01.Add("Default Clip"); sAdd02.Add("COMPONENT_CARBINERIFLE_MK2_CLIP_01"); iCost.Add(40);
                sAdd01.Add("Extended Clip"); sAdd02.Add("COMPONENT_CARBINERIFLE_MK2_CLIP_02"); iCost.Add(79);
                sAdd01.Add("Tracer Rounds"); sAdd02.Add("COMPONENT_CARBINERIFLE_MK2_CLIP_TRACER"); iCost.Add(81);
                sAdd01.Add("Incendiary Rounds"); sAdd02.Add("COMPONENT_CARBINERIFLE_MK2_CLIP_INCENDIARY"); iCost.Add(108);
                sAdd01.Add("Armor Piercing Rounds"); sAdd02.Add("COMPONENT_CARBINERIFLE_MK2_CLIP_ARMORPIERCING"); iCost.Add(180);
                sAdd01.Add("Full Metal Jacket Rounds"); sAdd02.Add("COMPONENT_CARBINERIFLE_MK2_CLIP_FMJ"); iCost.Add(252);
            }       //Carbine Rifle Mk2
            else if (iWeap == 9)
            {
                sAdd01.Add("Default Clip"); sAdd02.Add("COMPONENT_COMBATMG_MK2_CLIP_01"); iCost.Add(277);
                sAdd01.Add("Extended Clip"); sAdd02.Add("COMPONENT_COMBATMG_MK2_CLIP_02"); iCost.Add(514);
                sAdd01.Add("Tracer Rounds"); sAdd02.Add("COMPONENT_COMBATMG_MK2_CLIP_TRACER"); iCost.Add(209);
                sAdd01.Add("Incendiary Rounds"); sAdd02.Add("COMPONENT_COMBATMG_MK2_CLIP_INCENDIARY"); iCost.Add(334);
                sAdd01.Add("Armor Piercing Rounds"); sAdd02.Add("COMPONENT_COMBATMG_MK2_CLIP_ARMORPIERCING"); iCost.Add(556);
                sAdd01.Add("Full Metal Jacket Rounds"); sAdd02.Add("COMPONENT_COMBATMG_MK2_CLIP_FMJ"); iCost.Add(779);
            }       //Combat MG Mk2
            else if (iWeap == 10)
            {
                sAdd01.Add("Default Clip"); sAdd02.Add("COMPONENT_MARKSMANRIFLE_MK2_CLIP_01"); iCost.Add(116);
                sAdd01.Add("Extended Clip"); sAdd02.Add("COMPONENT_MARKSMANRIFLE_MK2_CLIP_02"); iCost.Add(225);
                sAdd01.Add("Tracer Rounds"); sAdd02.Add("COMPONENT_MARKSMANRIFLE_MK2_CLIP_TRACER"); iCost.Add(87);
                sAdd01.Add("Incendiary Rounds"); sAdd02.Add("COMPONENT_MARKSMANRIFLE_MK2_CLIP_INCENDIARY"); iCost.Add(109);
                sAdd01.Add("Armor Piercing Rounds"); sAdd02.Add("COMPONENT_MARKSMANRIFLE_MK2_CLIP_ARMORPIERCING"); iCost.Add(182);
                sAdd01.Add("Full Metal Jacket Rounds"); sAdd02.Add("COMPONENT_MARKSMANRIFLE_MK2_CLIP_FMJ"); iCost.Add(254);
            }       //Marksman Rifle Mk2
            else if (iWeap == 11)
            {
                sAdd01.Add("Default Clip"); sAdd02.Add("COMPONENT_HEAVYSNIPER_MK2_CLIP_01"); iCost.Add(42);
                sAdd01.Add("Extended Clip"); sAdd02.Add("COMPONENT_HEAVYSNIPER_MK2_CLIP_02"); iCost.Add(81);
                sAdd01.Add("Incendiary Rounds"); sAdd02.Add("COMPONENT_HEAVYSNIPER_MK2_CLIP_INCENDIARY"); iCost.Add(87);
                sAdd01.Add("Armor Piercing Rounds"); sAdd02.Add("COMPONENT_HEAVYSNIPER_MK2_CLIP_ARMORPIERCING"); iCost.Add(145);
                sAdd01.Add("Full Metal Jacket Rounds"); sAdd02.Add("COMPONENT_HEAVYSNIPER_MK2_CLIP_FMJ"); iCost.Add(203);
                sAdd01.Add("Explosive Rounds"); sAdd02.Add("COMPONENT_HEAVYSNIPER_MK2_CLIP_EXPLOSIVE"); iCost.Add(1450);
            }       //Heavy Sniper Mk2

            var Lastmenu = YtmenuPool.AddSubMenu(XMen, sAltLang[415]);

            for (int i = 0; i < sAdd01.Count; i++)
            {
                var item_ = new UIMenuItem(sAdd01[i], "NSCoin " + iCost[i]);
                if (Function.Call<bool>(Hash.HAS_PED_GOT_WEAPON_COMPONENT, Game.Player.Character, Function.Call<int>(Hash.GET_HASH_KEY, sWeapHash), Function.Call<int>(Hash.GET_HASH_KEY, sAdd02[i])))
                {
                    item_.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    iCost[i] = 0;
                    item_.Description = "NSCoin 0";
                }
                Lastmenu.AddItem(item_);
            }
            Lastmenu.OnItemSelect += (sender, item, index) =>
            {
                if (iCost[index] < iNSPMBank)
                {
                    Mk2Addons(sWeapHash, sAdd02[index], iCost[index], true);
                    item.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    iCost[index] = 0;
                    item.Description = "NSCoin 0";

                    for (int i = 0; i < Lastmenu.MenuItems.Count; i++)
                    {
                        if (!Function.Call<bool>(Hash.HAS_PED_GOT_WEAPON_COMPONENT, Game.Player.Character, Function.Call<int>(Hash.GET_HASH_KEY, sWeapHash), Function.Call<int>(Hash.GET_HASH_KEY, sAdd02[i])))
                            Lastmenu.MenuItems[i].SetRightBadge(UIMenuItem.BadgeStyle.None);
                    }
                }
                else
                {
                    UI.Notify(sAltLang[368]);
                    YtmenuPool.CloseAllMenus();
                }
            };
        }
        private void Mk2CompListAttach(UIMenu XMen, int iWeap, string sWeap, string sWeapHash)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Mk2CompListAttach", tEx);

            List<string> sAdd01 = new List<string>();
            List<string> sAdd02 = new List<string>();
            List<int> iCost = new List<int>();
            if (iWeap == 0)
            {
                sAdd01.Add("Holographic Sight"); sAdd02.Add("COMPONENT_AT_SIGHTS"); iCost.Add(16250);
                sAdd01.Add("Small Scope"); sAdd02.Add("COMPONENT_AT_SCOPE_MACRO_MK2"); iCost.Add(25450);
                sAdd01.Add("Flashlight"); sAdd02.Add("COMPONENT_AT_PI_FLSH"); iCost.Add(7500);
                sAdd01.Add("Compensator"); sAdd02.Add("COMPONENT_AT_PI_COMP_03"); iCost.Add(21250);
            }       //Revolver Mk2
            else if (iWeap == 1)
            {
                sAdd01.Add("Flashlight"); sAdd02.Add("COMPONENT_AT_PI_FLSH_03"); iCost.Add(7500);
                sAdd01.Add("Mounted Scope"); sAdd02.Add("COMPONENT_AT_PI_RAIL_02"); iCost.Add(16250);
                sAdd01.Add("Suppressor"); sAdd02.Add("COMPONENT_AT_PI_SUPP_02"); iCost.Add(28750);
                sAdd01.Add("Compensator"); sAdd02.Add("COMPONENT_AT_PI_COMP_02"); iCost.Add(21250);
            }       //SNS Pistol Mk2
            else if (iWeap == 2)
            {
                sAdd01.Add("Mounted Scope"); sAdd02.Add("COMPONENT_AT_PI_RAIL"); iCost.Add(16250);
                sAdd01.Add("Flashlight"); sAdd02.Add("COMPONENT_AT_PI_FLSH_02"); iCost.Add(7500);
                sAdd01.Add("Suppressor"); sAdd02.Add("COMPONENT_AT_PI_SUPP_02"); iCost.Add(28750);
                sAdd01.Add("Compensator"); sAdd02.Add("COMPONENT_AT_PI_COMP"); iCost.Add(21250);
            }       //Pistol Mk2
            else if (iWeap == 3)
            {
                sAdd01.Add("Flashlight"); sAdd02.Add("COMPONENT_AT_AR_FLSH"); iCost.Add(7500);
                sAdd01.Add("Holographic Sight"); sAdd02.Add("COMPONENT_AT_SIGHTS_SMG"); iCost.Add(14800);
                sAdd01.Add("Small Scope"); sAdd02.Add("COMPONENT_AT_SCOPE_MACRO_02_SMG_MK2"); iCost.Add(19950);
                sAdd01.Add("Medium Scope"); sAdd02.Add("COMPONENT_AT_SCOPE_SMALL_SMG_MK2"); iCost.Add(24100);
                sAdd01.Add("Suppressor"); sAdd02.Add("COMPONENT_AT_PI_SUPP"); iCost.Add(34500);
                sAdd01.Add("Flat Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_01"); iCost.Add(25500);
                sAdd01.Add("Tactical Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_02"); iCost.Add(26755);
                sAdd01.Add("Fat-End Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_03"); iCost.Add(28010);
                sAdd01.Add("Precision Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_04"); iCost.Add(29260);
                sAdd01.Add("Heavy Duty Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_05"); iCost.Add(30515);
                sAdd01.Add("Slanted Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_06"); iCost.Add(31770);
                sAdd01.Add("Split-End Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_07"); iCost.Add(33025);
                sAdd01.Add("Default Barrel"); sAdd02.Add("COMPONENT_AT_SB_BARREL_01"); iCost.Add(1000);
                sAdd01.Add("Heavy Barrel"); sAdd02.Add("COMPONENT_AT_SB_BARREL_02"); iCost.Add(42000);
            }       //SMG Mk2
            else if (iWeap == 4)
            {
                sAdd01.Add("Holographic Sight"); sAdd02.Add("COMPONENT_AT_SIGHTS"); iCost.Add(29260);
                sAdd01.Add("Small Scope"); sAdd02.Add("COMPONENT_AT_SCOPE_MACRO_MK2"); iCost.Add(39920);
                sAdd01.Add("Medium Scope"); sAdd02.Add("COMPONENT_AT_SCOPE_SMALL_MK2"); iCost.Add(50785);
                sAdd01.Add("Flashlight"); sAdd02.Add("COMPONENT_AT_AR_FLSH"); iCost.Add(10500);
                sAdd01.Add("Suppressor"); sAdd02.Add("COMPONENT_AT_SR_SUPP_03"); iCost.Add(45860);
                sAdd01.Add("Squared Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_08"); iCost.Add(37650);
            }       //Pump Shotgun Mk2
            else if (iWeap == 5)
            {
                sAdd01.Add("Flashlight"); sAdd02.Add("COMPONENT_AT_AR_FLSH"); iCost.Add(10500);
                sAdd01.Add("Holographic Sight"); sAdd02.Add("COMPONENT_AT_SIGHTS"); iCost.Add(19600);
                sAdd01.Add("Small Scope"); sAdd02.Add("COMPONENT_AT_SCOPE_MACRO_02_MK2"); iCost.Add(23730);
                sAdd01.Add("Medium Scope"); sAdd02.Add("COMPONENT_AT_SCOPE_SMALL_MK2"); iCost.Add(34020);
                sAdd01.Add("Default Barrel"); sAdd02.Add("COMPONENT_AT_BP_BARREL_01"); iCost.Add(0);
                sAdd01.Add("Heavy Barrel"); sAdd02.Add("COMPONENT_AT_BP_BARREL_02"); iCost.Add(49000);
                sAdd01.Add("Suppressor"); sAdd02.Add("COMPONENT_AT_AR_SUPP"); iCost.Add(40250);
                sAdd01.Add("Flat Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_01"); iCost.Add(29750);
                sAdd01.Add("Tactical Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_02"); iCost.Add(31215);
                sAdd01.Add("Fat-End Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_03"); iCost.Add(32675);
                sAdd01.Add("Precision Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_04"); iCost.Add(34140);
                sAdd01.Add("Heavy Duty Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_05"); iCost.Add(35600);
                sAdd01.Add("Slanted Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_06"); iCost.Add(37065);
                sAdd01.Add("Split-End Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_07"); iCost.Add(38530);
                sAdd01.Add("Grip"); sAdd02.Add("COMPONENT_AT_AR_AFGRIP_02"); iCost.Add(14080);
            }       //Bullpup Rifle Mk2
            else if (iWeap == 6)
            {
                sAdd01.Add("Flashlight"); sAdd02.Add("COMPONENT_AT_AR_FLSH"); iCost.Add(10500);
                sAdd01.Add("Holographic Sight"); sAdd02.Add("COMPONENT_AT_SIGHTS"); iCost.Add(19600);
                sAdd01.Add("Small Scope"); sAdd02.Add("COMPONENT_AT_SCOPE_MACRO_MK2"); iCost.Add(23730);
                sAdd01.Add("Large Scope"); sAdd02.Add("COMPONENT_AT_SCOPE_MEDIUM_MK2"); iCost.Add(34020);
                sAdd01.Add("Suppressor"); sAdd02.Add("COMPONENT_AT_AR_SUPP_02"); iCost.Add(40250);
                sAdd01.Add("Flat Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_01"); iCost.Add(29750);
                sAdd01.Add("Tactical Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_02"); iCost.Add(31215);
                sAdd01.Add("Fat-End Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_03"); iCost.Add(32675);
                sAdd01.Add("Precision Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_04"); iCost.Add(34140);
                sAdd01.Add("Heavy Duty Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_05"); iCost.Add(35600);
                sAdd01.Add("Slanted Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_06"); iCost.Add(37065);
                sAdd01.Add("Split-End Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_07"); iCost.Add(38530);
                sAdd01.Add("Grip"); sAdd02.Add("COMPONENT_AT_AR_AFGRIP_02"); iCost.Add(14080);
                sAdd01.Add("Default Barrel"); sAdd02.Add("COMPONENT_AT_SC_BARREL_01"); iCost.Add(0);
                sAdd01.Add("Heavy Barrel"); sAdd02.Add("COMPONENT_AT_SC_BARREL_02"); iCost.Add(49000);
            }       //Special Carbine Mk2
            else if (iWeap == 7)
            {
                sAdd01.Add("Grip"); sAdd02.Add("COMPONENT_AT_AR_AFGRIP_02"); iCost.Add(14080);
                sAdd01.Add("Flashlight"); sAdd02.Add("COMPONENT_AT_AR_FLSH"); iCost.Add(10500);
                sAdd01.Add("Holographic Sight"); sAdd02.Add("COMPONENT_AT_SIGHTS"); iCost.Add(19600);
                sAdd01.Add("Small Scope"); sAdd02.Add("COMPONENT_AT_SCOPE_MACRO_MK2"); iCost.Add(23750);
                sAdd01.Add("Large Scope"); sAdd02.Add("COMPONENT_AT_SCOPE_MEDIUM_MK2"); iCost.Add(34020);
                sAdd01.Add("Suppressor"); sAdd02.Add("COMPONENT_AT_AR_SUPP_02"); iCost.Add(40250);
                sAdd01.Add("Flat Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_01"); iCost.Add(29750);
                sAdd01.Add("Tactical Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_02"); iCost.Add(31215);
                sAdd01.Add("Fat-End Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_03"); iCost.Add(32675);
                sAdd01.Add("Precision Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_04"); iCost.Add(34140);
                sAdd01.Add("Heavy Duty Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_05"); iCost.Add(35600);
                sAdd01.Add("Slanted Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_06"); iCost.Add(37065);
                sAdd01.Add("Split-End Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_07"); iCost.Add(38530);
                sAdd01.Add("Default Barrel"); sAdd02.Add("COMPONENT_AT_AR_BARREL_01"); iCost.Add(0);
                sAdd01.Add("Heavy Barrel"); sAdd02.Add("COMPONENT_AT_AR_BARREL_02"); iCost.Add(49000);
            }       //Assault Rifle Mk2
            else if (iWeap == 8)
            {
                sAdd01.Add("Grip"); sAdd02.Add("COMPONENT_AT_AR_AFGRIP_02"); iCost.Add(14080);
                sAdd01.Add("Flashlight"); sAdd02.Add("COMPONENT_AT_AR_FLSH"); iCost.Add(10500);
                sAdd01.Add("Holographic Sight"); sAdd02.Add("COMPONENT_AT_SIGHTS"); iCost.Add(19600);
                sAdd01.Add("Small Scope"); sAdd02.Add("COMPONENT_AT_SCOPE_MACRO_MK2"); iCost.Add(23730);
                sAdd01.Add("Large Scope"); sAdd02.Add("COMPONENT_AT_SCOPE_MEDIUM_MK2"); iCost.Add(34020);
                sAdd01.Add("Suppressor"); sAdd02.Add("COMPONENT_AT_AR_SUPP"); iCost.Add(40250);
                sAdd01.Add("Flat Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_01"); iCost.Add(29750);
                sAdd01.Add("Tactical Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_02"); iCost.Add(31215);
                sAdd01.Add("Fat-End Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_03"); iCost.Add(32675);
                sAdd01.Add("Precision Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_04"); iCost.Add(34140);
                sAdd01.Add("Heavy Duty Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_05"); iCost.Add(35600);
                sAdd01.Add("Slanted Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_06"); iCost.Add(37065);
                sAdd01.Add("Split-End Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_07"); iCost.Add(38530);
                sAdd01.Add("Default Barrel"); sAdd02.Add("COMPONENT_AT_CR_BARREL_01"); iCost.Add(0);
                sAdd01.Add("Heavy Barrel"); sAdd02.Add("COMPONENT_AT_CR_BARREL_02"); iCost.Add(49000);
            }       //Carbine Rifle Mk2
            else if (iWeap == 9)
            {
                sAdd01.Add("Grip"); sAdd02.Add("COMPONENT_AT_AR_AFGRIP_02"); iCost.Add(20180);
                sAdd01.Add("Holographic Sight"); sAdd02.Add("COMPONENT_AT_SIGHTS"); iCost.Add(26600);
                sAdd01.Add("Medium Scope"); sAdd02.Add("COMPONENT_AT_SCOPE_SMALL_MK2"); iCost.Add(36290);
                sAdd01.Add("Large Scope"); sAdd02.Add("COMPONENT_AT_SCOPE_MEDIUM_MK2"); iCost.Add(46170);
                sAdd01.Add("Flat Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_01"); iCost.Add(40375);
                sAdd01.Add("Tactical Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_02"); iCost.Add(42360);
                sAdd01.Add("Fat-End Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_03"); iCost.Add(44345);
                sAdd01.Add("Precision Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_04"); iCost.Add(46330);
                sAdd01.Add("Heavy Duty Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_05"); iCost.Add(48315);
                sAdd01.Add("Slanted Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_06"); iCost.Add(50305);
                sAdd01.Add("Split-End Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_07"); iCost.Add(52290);
                sAdd01.Add("Default Barrel"); sAdd02.Add("COMPONENT_AT_MG_BARREL_01"); iCost.Add(0);
                sAdd01.Add("Heavy Barrel"); sAdd02.Add("COMPONENT_AT_MG_BARREL_02"); iCost.Add(66500);
            }       //Combat MG Mk2
            else if (iWeap == 10)
            {
                sAdd01.Add("Flashlight"); sAdd02.Add("COMPONENT_AT_AR_FLSH"); iCost.Add(11250);
                sAdd01.Add("Zoom Scope"); sAdd02.Add("COMPONENT_AT_SCOPE_LARGE_FIXED_ZOOM_MK2"); iCost.Add(0);
                sAdd01.Add("Holographic Sight"); sAdd02.Add("COMPONENT_AT_SIGHTS"); iCost.Add(11485);
                sAdd01.Add("Large Scope"); sAdd02.Add("COMPONENT_AT_SCOPE_MEDIUM_MK2"); iCost.Add(17870);
                sAdd01.Add("Suppressor"); sAdd02.Add("COMPONENT_AT_AR_SUPP"); iCost.Add(60375);
                sAdd01.Add("Flat Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_01"); iCost.Add(44620);
                sAdd01.Add("Tactical Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_02"); iCost.Add(46815);
                sAdd01.Add("Fat-End Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_03"); iCost.Add(49010);
                sAdd01.Add("Precision Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_04"); iCost.Add(51205);
                sAdd01.Add("Heavy Duty Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_05"); iCost.Add(53400);
                sAdd01.Add("Slanted Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_06"); iCost.Add(55595);
                sAdd01.Add("Split-End Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_07"); iCost.Add(57790);
                sAdd01.Add("Grip"); sAdd02.Add("COMPONENT_AT_AR_AFGRIP_02"); iCost.Add(14080);
                sAdd01.Add("Default Barrel"); sAdd02.Add("COMPONENT_AT_MRFL_BARREL_01"); iCost.Add(0);
                sAdd01.Add("Heavy Barrel"); sAdd02.Add("COMPONENT_AT_MRFL_BARREL_02"); iCost.Add(73500);
            }       //Marksman Rifle Mk2
            else if (iWeap == 11)
            {
                sAdd01.Add("Advanced Scope"); sAdd02.Add("COMPONENT_AT_SCOPE_MAX"); iCost.Add(0);
                sAdd01.Add("Zoom Scope"); sAdd02.Add("COMPONENT_AT_SCOPE_LARGE_MK2"); iCost.Add(29595);
                sAdd01.Add("Night Vision Scope"); sAdd02.Add("COMPONENT_AT_SCOPE_NV"); iCost.Add(45950);
                sAdd01.Add("Thermal Scope"); sAdd02.Add("COMPONENT_AT_SCOPE_THERMAL"); iCost.Add(69000);
                sAdd01.Add("Suppressor"); sAdd02.Add("COMPONENT_AT_SR_SUPP_03"); iCost.Add(60375);
                sAdd01.Add("Squared Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_08"); iCost.Add(45010);
                sAdd01.Add("Bell-End Muzzle Brake"); sAdd02.Add("COMPONENT_AT_MUZZLE_09"); iCost.Add(57790);
                sAdd01.Add("Default Barrel"); sAdd02.Add("COMPONENT_AT_SR_BARREL_01"); iCost.Add(0);
                sAdd01.Add("Heavy Barrel"); sAdd02.Add("COMPONENT_AT_SR_BARREL_02"); iCost.Add(69825);
            }       //Heavy Sniper Mk2

            var Lastmenu = YtmenuPool.AddSubMenu(XMen, sAltLang[416]);

            for (int i = 0; i < sAdd01.Count; i++)
            {

                var item_ = new UIMenuItem(sAdd01[i], "NSCoin " + iCost[i]);
                if (Function.Call<bool>(Hash.HAS_PED_GOT_WEAPON_COMPONENT, Game.Player.Character, Function.Call<int>(Hash.GET_HASH_KEY, sWeapHash), Function.Call<int>(Hash.GET_HASH_KEY, sAdd02[i])))
                {
                    item_.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    iCost[i] = 0;
                    item_.Description = "NSCoin 0";
                }
                Lastmenu.AddItem(item_);
            }
            Lastmenu.OnItemSelect += (sender, item, index) =>
            {
                if (iCost[index] < iNSPMBank)
                {
                    Mk2Addons(sWeapHash, sAdd02[index], iCost[index], true);
                    item.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    iCost[index] = 0;
                    item.Description = "NSCoin 0";

                    for (int i = 0; i < Lastmenu.MenuItems.Count; i++)
                    {
                        if (!Function.Call<bool>(Hash.HAS_PED_GOT_WEAPON_COMPONENT, Game.Player.Character, Function.Call<int>(Hash.GET_HASH_KEY, sWeapHash), Function.Call<int>(Hash.GET_HASH_KEY, sAdd02[i])))
                            Lastmenu.MenuItems[i].SetRightBadge(UIMenuItem.BadgeStyle.None);
                    }
                }
                else
                {
                    UI.Notify(sAltLang[368]);
                    YtmenuPool.CloseAllMenus();
                }
            };
        }
        private void Mk2CompListLivery(UIMenu XMen, int iWeap, string sWeap, string sWeapHash)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Mk2CompListLivery", tEx);

            List<string> sAdd01 = new List<string>();
            List<string> sAdd02 = new List<string>();
            List<int> iCost = new List<int>();
            if (iWeap == 0)
            {
                sAdd01.Add("Digital Camo"); sAdd02.Add("COMPONENT_REVOLVER_MK2_CAMO"); iCost.Add(40000);
                sAdd01.Add("Brushstroke Camo"); sAdd02.Add("COMPONENT_REVOLVER_MK2_CAMO_02"); iCost.Add(43500);
                sAdd01.Add("Woodland Camo"); sAdd02.Add("COMPONENT_REVOLVER_MK2_CAMO_03"); iCost.Add(45000);
                sAdd01.Add("Skull"); sAdd02.Add("COMPONENT_REVOLVER_MK2_CAMO_04"); iCost.Add(49750);
                sAdd01.Add("Sessanta Nove"); sAdd02.Add("COMPONENT_REVOLVER_MK2_CAMO_05"); iCost.Add(75000);
                sAdd01.Add("Perseus"); sAdd02.Add("COMPONENT_REVOLVER_MK2_CAMO_06"); iCost.Add(57500);
                sAdd01.Add("Leopard"); sAdd02.Add("COMPONENT_REVOLVER_MK2_CAMO_07"); iCost.Add(51500);
                sAdd01.Add("Zebra"); sAdd02.Add("COMPONENT_REVOLVER_MK2_CAMO_08"); iCost.Add(53750);
                sAdd01.Add("Geometric"); sAdd02.Add("COMPONENT_REVOLVER_MK2_CAMO_09"); iCost.Add(55000);
                sAdd01.Add("Boom!"); sAdd02.Add("COMPONENT_REVOLVER_MK2_CAMO_10"); iCost.Add(60000);
                sAdd01.Add("Patriotic"); sAdd02.Add("COMPONENT_REVOLVER_MK2_CAMO_IND_01"); iCost.Add(100000);
            }       //Revolver Mk2
            else if (iWeap == 1)
            {
                sAdd01.Add("Digital Camo"); sAdd02.Add("COMPONENT_SNSPISTOL_MK2_CAMO"); iCost.Add(40000);
                sAdd01.Add("Brushstroke Camo"); sAdd02.Add("COMPONENT_SNSPISTOL_MK2_CAMO_02"); iCost.Add(43500);
                sAdd01.Add("Woodland Camo"); sAdd02.Add("COMPONENT_SNSPISTOL_MK2_CAMO_03"); iCost.Add(45000);
                sAdd01.Add("Skull"); sAdd02.Add("COMPONENT_SNSPISTOL_MK2_CAMO_04"); iCost.Add(49750);
                sAdd01.Add("Sessanta Nove"); sAdd02.Add("COMPONENT_SNSPISTOL_MK2_CAMO_05"); iCost.Add(75000);
                sAdd01.Add("Perseus"); sAdd02.Add("COMPONENT_SNSPISTOL_MK2_CAMO_06"); iCost.Add(57500);
                sAdd01.Add("Leopard"); sAdd02.Add("COMPONENT_SNSPISTOL_MK2_CAMO_07"); iCost.Add(51500);
                sAdd01.Add("Zebra"); sAdd02.Add("COMPONENT_SNSPISTOL_MK2_CAMO_08"); iCost.Add(53750);
                sAdd01.Add("Geometric"); sAdd02.Add("COMPONENT_SNSPISTOL_MK2_CAMO_09"); iCost.Add(55000);
                sAdd01.Add("Boom!"); sAdd02.Add("COMPONENT_SNSPISTOL_MK2_CAMO_10"); iCost.Add(60000);
                sAdd01.Add("Patriotic"); sAdd02.Add("COMPONENT_SNSPISTOL_MK2_CAMO_IND_01"); iCost.Add(60000);
                sAdd01.Add("Digital Slide"); sAdd02.Add("COMPONENT_SNSPISTOL_MK2_CAMO_SLIDE"); iCost.Add(40000);
                sAdd01.Add("Brushstroke Slide"); sAdd02.Add("COMPONENT_SNSPISTOL_MK2_CAMO_02_SLIDE"); iCost.Add(43500);
                sAdd01.Add("Woodland Slide"); sAdd02.Add("COMPONENT_SNSPISTOL_MK2_CAMO_03_SLIDE"); iCost.Add(45000);
                sAdd01.Add("Skull Slide"); sAdd02.Add("COMPONENT_SNSPISTOL_MK2_CAMO_04_SLIDE"); iCost.Add(49750);
                sAdd01.Add("Sessanta Nove Slide"); sAdd02.Add("COMPONENT_SNSPISTOL_MK2_CAMO_05_SLIDE"); iCost.Add(75000);
                sAdd01.Add("Perseus Slide"); sAdd02.Add("COMPONENT_SNSPISTOL_MK2_CAMO_06_SLIDE"); iCost.Add(57500);
                sAdd01.Add("Leopard Slide"); sAdd02.Add("COMPONENT_SNSPISTOL_MK2_CAMO_07_SLIDE"); iCost.Add(51500);
                sAdd01.Add("Zebra Slide"); sAdd02.Add("COMPONENT_SNSPISTOL_MK2_CAMO_08_SLIDE"); iCost.Add(53750);
                sAdd01.Add("Geometric Slide"); sAdd02.Add("COMPONENT_SNSPISTOL_MK2_CAMO_09_SLIDE"); iCost.Add(55000);
                sAdd01.Add("Boom! Slide"); sAdd02.Add("COMPONENT_SNSPISTOL_MK2_CAMO_10_SLIDE"); iCost.Add(60000);
                sAdd01.Add("Patriotic Slide"); sAdd02.Add("COMPONENT_SNSPISTOL_MK2_CAMO_IND_01_SLIDE"); iCost.Add(100000);
            }       //SNS Pistol Mk2
            else if (iWeap == 2)
            {
                sAdd01.Add("Digital Camo"); sAdd02.Add("COMPONENT_PISTOL_MK2_CAMO"); iCost.Add(40000);
                sAdd01.Add("Brushstroke Camo"); sAdd02.Add("COMPONENT_PISTOL_MK2_CAMO_02"); iCost.Add(43500);
                sAdd01.Add("Woodland Camo"); sAdd02.Add("COMPONENT_PISTOL_MK2_CAMO_03"); iCost.Add(45000);
                sAdd01.Add("Skull"); sAdd02.Add("COMPONENT_PISTOL_MK2_CAMO_04"); iCost.Add(49750);
                sAdd01.Add("Sessanta Nove"); sAdd02.Add("COMPONENT_PISTOL_MK2_CAMO_05"); iCost.Add(75000);
                sAdd01.Add("Perseus"); sAdd02.Add("COMPONENT_PISTOL_MK2_CAMO_06"); iCost.Add(57500);
                sAdd01.Add("Leopard"); sAdd02.Add("COMPONENT_PISTOL_MK2_CAMO_07"); iCost.Add(51500);
                sAdd01.Add("Zebra"); sAdd02.Add("COMPONENT_PISTOL_MK2_CAMO_08"); iCost.Add(53750);
                sAdd01.Add("Geometric"); sAdd02.Add("COMPONENT_PISTOL_MK2_CAMO_09"); iCost.Add(55000);
                sAdd01.Add("Boom!"); sAdd02.Add("COMPONENT_PISTOL_MK2_CAMO_10"); iCost.Add(60000);
                sAdd01.Add("Patriotic"); sAdd02.Add("COMPONENT_PISTOL_MK2_CAMO_IND_01"); iCost.Add(100000);
                sAdd01.Add("Digital Slide"); sAdd02.Add("COMPONENT_PISTOL_MK2_CAMO_SLIDE"); iCost.Add(40000);
                sAdd01.Add("Brushstroke Slide"); sAdd02.Add("COMPONENT_PISTOL_MK2_CAMO_02_SLIDE"); iCost.Add(40000);
                sAdd01.Add("Woodland Slide"); sAdd02.Add("COMPONENT_PISTOL_MK2_CAMO_03_SLIDE"); iCost.Add(40000);
                sAdd01.Add("Skull Slide"); sAdd02.Add("COMPONENT_PISTOL_MK2_CAMO_04_SLIDE"); iCost.Add(40000);
                sAdd01.Add("Sessanta Nove Slide"); sAdd02.Add("COMPONENT_PISTOL_MK2_CAMO_05_SLIDE"); iCost.Add(40000);
                sAdd01.Add("Perseus Slide"); sAdd02.Add("COMPONENT_PISTOL_MK2_CAMO_06_SLIDE"); iCost.Add(40000);
                sAdd01.Add("Leopard Slide"); sAdd02.Add("COMPONENT_PISTOL_MK2_CAMO_07_SLIDE"); iCost.Add(40000);
                sAdd01.Add("Zebra Slide"); sAdd02.Add("COMPONENT_PISTOL_MK2_CAMO_08_SLIDE"); iCost.Add(40000);
                sAdd01.Add("Geometric Slide"); sAdd02.Add("COMPONENT_PISTOL_MK2_CAMO_09_SLIDE"); iCost.Add(40000);
                sAdd01.Add("Boom! Slide"); sAdd02.Add("COMPONENT_PISTOL_MK2_CAMO_10_SLIDE"); iCost.Add(40000);
                sAdd01.Add("Patriotic Slide"); sAdd02.Add("COMPONENT_PISTOL_MK2_CAMO_IND_01_SLIDE"); iCost.Add(100000);
            }       //Pistol Mk2
            else if (iWeap == 3)
            {
                sAdd01.Add("Digital Camo"); sAdd02.Add("COMPONENT_SMG_MK2_CAMO"); iCost.Add(40000);
                sAdd01.Add("Brushstroke Camo"); sAdd02.Add("COMPONENT_SMG_MK2_CAMO_02"); iCost.Add(43500);
                sAdd01.Add("Woodland Camo"); sAdd02.Add("COMPONENT_SMG_MK2_CAMO_03"); iCost.Add(45000);
                sAdd01.Add("Skull"); sAdd02.Add("COMPONENT_SMG_MK2_CAMO_04"); iCost.Add(49750);
                sAdd01.Add("Sessanta Nove"); sAdd02.Add("COMPONENT_SMG_MK2_CAMO_05"); iCost.Add(75000);
                sAdd01.Add("Perseus"); sAdd02.Add("COMPONENT_SMG_MK2_CAMO_06"); iCost.Add(57500);
                sAdd01.Add("Leopard"); sAdd02.Add("COMPONENT_SMG_MK2_CAMO_07"); iCost.Add(51500);
                sAdd01.Add("Zebra"); sAdd02.Add("COMPONENT_SMG_MK2_CAMO_08"); iCost.Add(53500);
                sAdd01.Add("Geometric"); sAdd02.Add("COMPONENT_SMG_MK2_CAMO_09"); iCost.Add(55000);
                sAdd01.Add("Boom!"); sAdd02.Add("COMPONENT_SMG_MK2_CAMO_10"); iCost.Add(60000);
                sAdd01.Add("Patriotic"); sAdd02.Add("COMPONENT_SMG_MK2_CAMO_IND_01"); iCost.Add(100000);
            }       //SMG Mk2
            else if (iWeap == 4)
            {
                sAdd01.Add("Digital Camo"); sAdd02.Add("COMPONENT_PUMPSHOTGUN_MK2_CAMO"); iCost.Add(40000);
                sAdd01.Add("Brushstroke Camo"); sAdd02.Add("COMPONENT_PUMPSHOTGUN_MK2_CAMO_02"); iCost.Add(43500);
                sAdd01.Add("Woodland Camo"); sAdd02.Add("COMPONENT_PUMPSHOTGUN_MK2_CAMO_03"); iCost.Add(45000);
                sAdd01.Add("Skull"); sAdd02.Add("COMPONENT_PUMPSHOTGUN_MK2_CAMO_04"); iCost.Add(49750);
                sAdd01.Add("Sessanta Nove"); sAdd02.Add("COMPONENT_PUMPSHOTGUN_MK2_CAMO_05"); iCost.Add(75000);
                sAdd01.Add("Perseus"); sAdd02.Add("COMPONENT_PUMPSHOTGUN_MK2_CAMO_06"); iCost.Add(57500);
                sAdd01.Add("Leopard"); sAdd02.Add("COMPONENT_PUMPSHOTGUN_MK2_CAMO_07"); iCost.Add(51500);
                sAdd01.Add("Zebra"); sAdd02.Add("COMPONENT_PUMPSHOTGUN_MK2_CAMO_08"); iCost.Add(53750);
                sAdd01.Add("Geometric"); sAdd02.Add("COMPONENT_PUMPSHOTGUN_MK2_CAMO_09"); iCost.Add(55000);
                sAdd01.Add("Boom!"); sAdd02.Add("COMPONENT_PUMPSHOTGUN_MK2_CAMO_10"); iCost.Add(60000);
                sAdd01.Add("Patriotic"); sAdd02.Add("COMPONENT_PUMPSHOTGUN_MK2_CAMO_IND_01"); iCost.Add(100000);
            }       //Pump Shotgun Mk2
            else if (iWeap == 5)
            {
                sAdd01.Add("Digital Camo"); sAdd02.Add("COMPONENT_BULLPUPRIFLE_MK2_CAMO"); iCost.Add(40000);
                sAdd01.Add("Brushstroke Camo"); sAdd02.Add("COMPONENT_BULLPUPRIFLE_MK2_CAMO_02"); iCost.Add(43500);
                sAdd01.Add("Woodland Camo"); sAdd02.Add("COMPONENT_BULLPUPRIFLE_MK2_CAMO_03"); iCost.Add(45000);
                sAdd01.Add("Skull"); sAdd02.Add("COMPONENT_BULLPUPRIFLE_MK2_CAMO_04"); iCost.Add(49750);
                sAdd01.Add("Sessanta Nove"); sAdd02.Add("COMPONENT_BULLPUPRIFLE_MK2_CAMO_05"); iCost.Add(75000);
                sAdd01.Add("Perseus"); sAdd02.Add("COMPONENT_BULLPUPRIFLE_MK2_CAMO_06"); iCost.Add(57500);
                sAdd01.Add("Leopard"); sAdd02.Add("COMPONENT_BULLPUPRIFLE_MK2_CAMO_07"); iCost.Add(51500);
                sAdd01.Add("Zebra"); sAdd02.Add("COMPONENT_BULLPUPRIFLE_MK2_CAMO_08"); iCost.Add(53750);
                sAdd01.Add("Geometric"); sAdd02.Add("COMPONENT_BULLPUPRIFLE_MK2_CAMO_09"); iCost.Add(55000);
                sAdd01.Add("Boom!"); sAdd02.Add("COMPONENT_BULLPUPRIFLE_MK2_CAMO_10"); iCost.Add(60000);
                sAdd01.Add("Patriotic"); sAdd02.Add("COMPONENT_BULLPUPRIFLE_MK2_CAMO_IND_01"); iCost.Add(100000);
            }       //Bullpup Rifle Mk2
            else if (iWeap == 6)
            {
                sAdd01.Add("Digital Camo"); sAdd02.Add("COMPONENT_SPECIALCARBINE_MK2_CAMO"); iCost.Add(40000);
                sAdd01.Add("Brushstroke Camo"); sAdd02.Add("COMPONENT_SPECIALCARBINE_MK2_CAMO_02"); iCost.Add(43500);
                sAdd01.Add("Woodland Camo"); sAdd02.Add("COMPONENT_SPECIALCARBINE_MK2_CAMO_03"); iCost.Add(45000);
                sAdd01.Add("Skull"); sAdd02.Add("COMPONENT_SPECIALCARBINE_MK2_CAMO_04"); iCost.Add(49750);
                sAdd01.Add("Sessanta Nove"); sAdd02.Add("COMPONENT_SPECIALCARBINE_MK2_CAMO_05"); iCost.Add(75000);
                sAdd01.Add("Perseus"); sAdd02.Add("COMPONENT_SPECIALCARBINE_MK2_CAMO_06"); iCost.Add(57500);
                sAdd01.Add("Leopard"); sAdd02.Add("COMPONENT_SPECIALCARBINE_MK2_CAMO_07"); iCost.Add(51500);
                sAdd01.Add("Zebra"); sAdd02.Add("COMPONENT_SPECIALCARBINE_MK2_CAMO_08"); iCost.Add(53750);
                sAdd01.Add("Geometric"); sAdd02.Add("COMPONENT_SPECIALCARBINE_MK2_CAMO_09"); iCost.Add(55000);
                sAdd01.Add("Boom!"); sAdd02.Add("COMPONENT_SPECIALCARBINE_MK2_CAMO_10"); iCost.Add(60000);
                sAdd01.Add("Patriotic"); sAdd02.Add("COMPONENT_SPECIALCARBINE_MK2_CAMO_IND_01"); iCost.Add(100000);
            }       //Special Carbine Mk2
            else if (iWeap == 7)
            {
                sAdd01.Add("Digital Camo"); sAdd02.Add("COMPONENT_ASSAULTRIFLE_MK2_CAMO"); iCost.Add(40000);
                sAdd01.Add("Brushstroke Camo"); sAdd02.Add("COMPONENT_ASSAULTRIFLE_MK2_CAMO_02"); iCost.Add(43500);
                sAdd01.Add("Woodland Camo"); sAdd02.Add("COMPONENT_ASSAULTRIFLE_MK2_CAMO_03"); iCost.Add(45000);
                sAdd01.Add("Skull"); sAdd02.Add("COMPONENT_ASSAULTRIFLE_MK2_CAMO_04"); iCost.Add(49750);
                sAdd01.Add("Sessanta Nove"); sAdd02.Add("COMPONENT_ASSAULTRIFLE_MK2_CAMO_05"); iCost.Add(75000);
                sAdd01.Add("Perseus"); sAdd02.Add("COMPONENT_ASSAULTRIFLE_MK2_CAMO_06"); iCost.Add(57500);
                sAdd01.Add("Leopard"); sAdd02.Add("COMPONENT_ASSAULTRIFLE_MK2_CAMO_07"); iCost.Add(51500);
                sAdd01.Add("Zebra"); sAdd02.Add("COMPONENT_ASSAULTRIFLE_MK2_CAMO_08"); iCost.Add(53750);
                sAdd01.Add("Geometric"); sAdd02.Add("COMPONENT_ASSAULTRIFLE_MK2_CAMO_09"); iCost.Add(55000);
                sAdd01.Add("Boom!"); sAdd02.Add("COMPONENT_ASSAULTRIFLE_MK2_CAMO_10"); iCost.Add(60000);
                sAdd01.Add("Patriotic"); sAdd02.Add("COMPONENT_ASSAULTRIFLE_MK2_CAMO_IND_01"); iCost.Add(100000);
            }       //Assault Rifle Mk2
            else if (iWeap == 8)
            {
                sAdd01.Add("Digital Camo"); sAdd02.Add("COMPONENT_CARBINERIFLE_MK2_CAMO"); iCost.Add(40000);
                sAdd01.Add("Brushstroke Camo"); sAdd02.Add("COMPONENT_CARBINERIFLE_MK2_CAMO_02"); iCost.Add(43500);
                sAdd01.Add("Woodland Camo"); sAdd02.Add("COMPONENT_CARBINERIFLE_MK2_CAMO_03"); iCost.Add(45000);
                sAdd01.Add("Skull"); sAdd02.Add("COMPONENT_CARBINERIFLE_MK2_CAMO_04"); iCost.Add(49750);
                sAdd01.Add("Sessanta Nove"); sAdd02.Add("COMPONENT_CARBINERIFLE_MK2_CAMO_05"); iCost.Add(75000);
                sAdd01.Add("Perseus"); sAdd02.Add("COMPONENT_CARBINERIFLE_MK2_CAMO_06"); iCost.Add(57500);
                sAdd01.Add("Leopard"); sAdd02.Add("COMPONENT_CARBINERIFLE_MK2_CAMO_07"); iCost.Add(51500);
                sAdd01.Add("Zebra"); sAdd02.Add("COMPONENT_CARBINERIFLE_MK2_CAMO_08"); iCost.Add(53750);
                sAdd01.Add("Geometric"); sAdd02.Add("COMPONENT_CARBINERIFLE_MK2_CAMO_09"); iCost.Add(55000);
                sAdd01.Add("Boom!"); sAdd02.Add("COMPONENT_CARBINERIFLE_MK2_CAMO_10"); iCost.Add(60000);
                sAdd01.Add("Patriotic"); sAdd02.Add("COMPONENT_CARBINERIFLE_MK2_CAMO_IND_01"); iCost.Add(100000);
            }       //Carbine Rifle Mk2
            else if (iWeap == 9)
            {
                sAdd01.Add("Digital Camo"); sAdd02.Add("COMPONENT_COMBATMG_MK2_CAMO"); iCost.Add(40000);
                sAdd01.Add("Brushstroke Camo"); sAdd02.Add("COMPONENT_COMBATMG_MK2_CAMO_02"); iCost.Add(43500);
                sAdd01.Add("Woodland Camo"); sAdd02.Add("COMPONENT_COMBATMG_MK2_CAMO_03"); iCost.Add(45000);
                sAdd01.Add("Skull"); sAdd02.Add("COMPONENT_COMBATMG_MK2_CAMO_04"); iCost.Add(49750);
                sAdd01.Add("Sessanta Nove"); sAdd02.Add("COMPONENT_COMBATMG_MK2_CAMO_05"); iCost.Add(75000);
                sAdd01.Add("Perseus"); sAdd02.Add("COMPONENT_COMBATMG_MK2_CAMO_06"); iCost.Add(57500);
                sAdd01.Add("Leopard"); sAdd02.Add("COMPONENT_COMBATMG_MK2_CAMO_07"); iCost.Add(51500);
                sAdd01.Add("Zebra"); sAdd02.Add("COMPONENT_COMBATMG_MK2_CAMO_08"); iCost.Add(53750);
                sAdd01.Add("Geometric"); sAdd02.Add("COMPONENT_COMBATMG_MK2_CAMO_09"); iCost.Add(55000);
                sAdd01.Add("Boom!"); sAdd02.Add("COMPONENT_COMBATMG_MK2_CAMO_10"); iCost.Add(60000);
                sAdd01.Add("Patriotic"); sAdd02.Add("COMPONENT_COMBATMG_MK2_CAMO_IND_01"); iCost.Add(100000);
            }       //Combat MG Mk2
            else if (iWeap == 10)
            {
                sAdd01.Add("Digital Camo"); sAdd02.Add("COMPONENT_MARKSMANRIFLE_MK2_CAMO"); iCost.Add(40000);
                sAdd01.Add("Brushstroke Camo"); sAdd02.Add("COMPONENT_MARKSMANRIFLE_MK2_CAMO_02"); iCost.Add(43500);
                sAdd01.Add("Woodland Camo"); sAdd02.Add("COMPONENT_MARKSMANRIFLE_MK2_CAMO_03"); iCost.Add(45000);
                sAdd01.Add("Skull"); sAdd02.Add("COMPONENT_MARKSMANRIFLE_MK2_CAMO_04"); iCost.Add(49750);
                sAdd01.Add("Sessanta Nove"); sAdd02.Add("COMPONENT_MARKSMANRIFLE_MK2_CAMO_05"); iCost.Add(75000);
                sAdd01.Add("Perseus"); sAdd02.Add("COMPONENT_MARKSMANRIFLE_MK2_CAMO_06"); iCost.Add(57500);
                sAdd01.Add("Leopard"); sAdd02.Add("COMPONENT_MARKSMANRIFLE_MK2_CAMO_07"); iCost.Add(51500);
                sAdd01.Add("Zebra"); sAdd02.Add("COMPONENT_MARKSMANRIFLE_MK2_CAMO_08"); iCost.Add(53750);
                sAdd01.Add("Geometric"); sAdd02.Add("COMPONENT_MARKSMANRIFLE_MK2_CAMO_09"); iCost.Add(55000);
                sAdd01.Add("Boom!"); sAdd02.Add("COMPONENT_MARKSMANRIFLE_MK2_CAMO_10"); iCost.Add(60000);
                sAdd01.Add("Patriotic"); sAdd02.Add("COMPONENT_MARKSMANRIFLE_MK2_CAMO_IND_01"); iCost.Add(100000);
            }       //Marksman Rifle Mk2
            else if (iWeap == 11)
            {
                sAdd01.Add("Digital Camo"); sAdd02.Add("COMPONENT_HEAVYSNIPER_MK2_CAMO"); iCost.Add(40000);
                sAdd01.Add("Brushstroke Camo"); sAdd02.Add("COMPONENT_HEAVYSNIPER_MK2_CAMO_02"); iCost.Add(43500);
                sAdd01.Add("Woodland Camo"); sAdd02.Add("COMPONENT_HEAVYSNIPER_MK2_CAMO_03"); iCost.Add(45000);
                sAdd01.Add("Skull"); sAdd02.Add("COMPONENT_HEAVYSNIPER_MK2_CAMO_04"); iCost.Add(49750);
                sAdd01.Add("Sessanta Nove"); sAdd02.Add("COMPONENT_HEAVYSNIPER_MK2_CAMO_05"); iCost.Add(75000);
                sAdd01.Add("Perseus"); sAdd02.Add("COMPONENT_HEAVYSNIPER_MK2_CAMO_06"); iCost.Add(57500);
                sAdd01.Add("Leopard"); sAdd02.Add("COMPONENT_HEAVYSNIPER_MK2_CAMO_07"); iCost.Add(51500);
                sAdd01.Add("Zebra"); sAdd02.Add("COMPONENT_HEAVYSNIPER_MK2_CAMO_08"); iCost.Add(53750);
                sAdd01.Add("Geometric"); sAdd02.Add("COMPONENT_HEAVYSNIPER_MK2_CAMO_09"); iCost.Add(55000);
                sAdd01.Add("Boom!"); sAdd02.Add("COMPONENT_HEAVYSNIPER_MK2_CAMO_10"); iCost.Add(60000);
                sAdd01.Add("Patriotic"); sAdd02.Add("COMPONENT_HEAVYSNIPER_MK2_CAMO_IND_01"); iCost.Add(100000);
            }       //Heavy Sniper Mk2

            var Lastmenu = YtmenuPool.AddSubMenu(XMen, "Livary");

            for (int i = 0; i < sAdd01.Count; i++)
            {
                var item_ = new UIMenuItem(sAdd01[i], "NSCoin " + iCost[i]);
                if (Function.Call<bool>(Hash.HAS_PED_GOT_WEAPON_COMPONENT, Game.Player.Character, Function.Call<int>(Hash.GET_HASH_KEY, sWeapHash), Function.Call<int>(Hash.GET_HASH_KEY, sAdd02[i])))
                {
                    item_.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    iCost[i] = 0;
                    item_.Description = "NSCoin 0";
                }
                Lastmenu.AddItem(item_);
            }
            XMen.RefreshIndex();
            Lastmenu.OnItemSelect += (sender, item, index) =>
            {
                if (iCost[index] < iNSPMBank)
                {
                    Mk2Addons(sWeapHash, sAdd02[index], iCost[index], true);
                    item.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    iCost[index] = 0;
                    item.Description = "NSCoin 0";

                    for (int i = 0; i < Lastmenu.MenuItems.Count; i++)
                    {
                        if (!Function.Call<bool>(Hash.HAS_PED_GOT_WEAPON_COMPONENT, Game.Player.Character, Function.Call<int>(Hash.GET_HASH_KEY, sWeapHash), Function.Call<int>(Hash.GET_HASH_KEY, sAdd02[i])))
                            Lastmenu.MenuItems[i].SetRightBadge(UIMenuItem.BadgeStyle.None);
                    }
                }
                else
                {
                    UI.Notify(sAltLang[368]);
                    YtmenuPool.CloseAllMenus();
                }
            };
        }
        private void Mk2Addons(string sWeaps, string sAddon, int iCost, bool bAdd)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Mk2Addons", tEx);

            if (bAdd)
            {
                int iThisChar = MyChar();
                bool bAddtoList = true;
                int iAm = 0;

                if (Mk2WeapsMain.Count() > 0)
                {
                    for (int i = 0; i < Mk2WeapsMain.Count; i++)
                    {
                        if (Mk2WeapsMain[i].Mk2Weap == sWeaps && iThisChar == Mk2WeapsMain[i].iPlayer)
                        {
                            iAm = i;
                            bAddtoList = false;
                            break;
                        }
                    }
                }
                if (bAddtoList)
                {
                    iAm = Mk2WeapsMain.Count;
                    MyMk2Weaps ThisWeap = new MyMk2Weaps();
                    ThisWeap.Mk2Weap = sWeaps;
                    ThisWeap.iPlayer = iThisChar;
                    Mk2WeapsMain.Add(ThisWeap);
                }

                Ped Peddy = Game.Player.Character;
                Function.Call(Hash.GIVE_WEAPON_COMPONENT_TO_PED, Peddy, Function.Call<int>(Hash.GET_HASH_KEY, sWeaps), Function.Call<int>(Hash.GET_HASH_KEY, sAddon));
                bool bGot = true;
                for (int i = 0; i < Mk2WeapsMain[iAm].Mk2Addon.Count; i++)
                {
                    if (Mk2WeapsMain[iAm].Mk2Addon[i] == sAddon)
                    {
                        bGot = false;
                        break;
                    }
                }

                if (bGot)
                    Mk2WeapsMain[iAm].Mk2Addon.Add(sAddon);

                iCost *= -1;
                YourCoinPopUp(iCost, 1, "Weapons Man");
            }
            else
            {
                Function.Call(Hash.REMOVE_WEAPON_COMPONENT_FROM_PED, Game.Player.Character, Function.Call<int>(Hash.GET_HASH_KEY, sWeaps), Function.Call<int>(Hash.GET_HASH_KEY, sAddon));
                if (Mk2WeapsMain.Count() > 0)
                {
                    for (int i = 0; i < Mk2WeapsMain.Count; i++)
                    {
                        for (int ii = 0; ii < Mk2WeapsMain[i].Mk2Addon.Count; ii++)
                        {
                            if (Mk2WeapsMain[i].Mk2Addon[ii] == sAddon)
                                Mk2WeapsMain[i].Mk2Addon.RemoveAt(ii);
                        }
                    }
                }
            }
            WriteXmlSet();
        }
        private void GiveMk2Weap(Ped Peddy, string sWeap, int iPrice)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("GiveMk2Weap", tEx);

            int iThisPlayer = MyChar();

            bool bAddtoList = true;

            if (!Function.Call<bool>(Hash.HAS_PED_GOT_WEAPON, Peddy, Function.Call<int>(Hash.GET_HASH_KEY, sWeap), false))
            {
                iPrice *= -1;
                Function.Call(Hash.GIVE_WEAPON_TO_PED, Peddy, Function.Call<int>(Hash.GET_HASH_KEY, sWeap), 9999, false, true);
                YourCoinPopUp(iPrice, 1, "Weapon Man");
            }
            else
                Function.Call(Hash.SET_CURRENT_PED_WEAPON, Peddy, Function.Call<int>(Hash.GET_HASH_KEY, sWeap), true);

            if (Mk2WeapsMain.Count() > 0)
            {
                for (int i = 0; i < Mk2WeapsMain.Count; i++)
                {
                    if (Mk2WeapsMain[i].Mk2Weap == sWeap && Mk2WeapsMain[i].iPlayer == iThisPlayer)
                    {
                        bAddtoList = false;
                        break;
                    } 
                }
            }

            if (bAddtoList)
            {
                MyMk2Weaps ThisWeap = new MyMk2Weaps();
                ThisWeap.Mk2Weap = sWeap;
                ThisWeap.iPlayer = iThisPlayer;
                Mk2WeapsMain.Add(ThisWeap);
            }
            WriteXmlSet();
        }
        private void Mk2AddAmmo(UIMenu XMen, string sWeap, string WeapName)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("Mk2AddAmmo", tEx);

            var Ammosmenu = YtmenuPool.AddSubMenu(XMen, "Refill Ammo");

            int iAmmo = MK2AmmoAmount(sWeap);

            var item_ = new UIMenuItem(WeapName + "Refill", "NSCoin " + iAmmo);
            Ammosmenu.AddItem(item_);

            Ammosmenu.OnItemSelect += (sender, item, index) =>
            {
                if (iAmmo < iNSPMBank)
                {
                    FillMyAmmo(sWeap, iAmmo);
                    if (Function.Call<int>(Hash.GET_AMMO_IN_PED_WEAPON, Game.Player.Character.Handle, Function.Call<int>(Hash.GET_HASH_KEY, sWeap)) < iAmmo)
                        FillMyAmmo(sWeap, iAmmo);
                    item.Description = "";
                }
                else
                {
                    UI.Notify(sAltLang[368]);
                    YtmenuPool.CloseAllMenus();
                }
            };
        }
        private void FillMyAmmo(string sWeap, int iAmmo)
        {
            Function.Call<bool>(Hash.SET_AMMO_IN_CLIP, Game.Player.Character.Handle, Function.Call<int>(Hash.GET_HASH_KEY, sWeap), Function.Call<int>(Hash.GET_MAX_AMMO_IN_CLIP, Game.Player.Character.Handle, Function.Call<int>(Hash.GET_HASH_KEY, sWeap), false));
            Function.Call(Hash.SET_PED_AMMO, Game.Player.Character.Handle, Function.Call<int>(Hash.GET_HASH_KEY, sWeap), iAmmo);
        }
        public int MyChar()
        {
            int iAm = 0;
            if (Game.Player.Character.Model == PedHash.Michael)
                iAm = 1;
            else if (Game.Player.Character.Model == PedHash.Franklin)
                iAm = 2;
            else if (Game.Player.Character.Model == PedHash.Trevor)
                iAm = 3;
            return iAm;
        }
        public class MyMk2Weaps
        {
            public int iPlayer { get; set; }
            public string Mk2Weap { get; set; }
            public List<string> Mk2Addon { get; set; }
            public int iAmmos { get; set; }

            public MyMk2Weaps()
            {
                Mk2Addon = new List<string>();
            }
        }
        public int MK2AmmoAmount(string sWeap)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("MK2AmmoAmount", tEx);

            Ped Peddy = Game.Player.Character;
            int iAmmo = 0;
            int iWeap = Function.Call<int>(Hash.GET_HASH_KEY, sWeap);

            unsafe
            {
                Function.Call<bool>(Hash.GET_MAX_AMMO, Peddy.Handle, iWeap, &iAmmo);
            }
            return iAmmo;
        }
        public string GetEntName(string MyEnt)
        {
            string VehName = Function.Call<string>(Hash.GET_DISPLAY_NAME_FROM_VEHICLE_MODEL, Function.Call<int>(Hash.GET_HASH_KEY, MyEnt));
            if (Function.Call<bool>(Hash.DOES_TEXT_LABEL_EXIST, VehName))
                VehName = Function.Call<string>(Hash._GET_LABEL_TEXT, VehName);
            else
                VehName = "";

            return VehName;
        }
        private void PeggsAnswered(iFruitContact contact)
        {
            if (!Game.Player.Character.IsInVehicle())
            {
                if (bImports)
                {
                    Peggs.CurrentBlip.Remove();
                    Peggs.MarkAsNoLongerNeeded();
                    bIFrutiyAdd = false;
                    bImports = false;
                }
                else
                {
                    PeggsMenu();
                }
            }
            else
                UI.Notify(sAltLang[464]);
            iFruit.Close(2000);
        }
        private void PeggsMenu()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("PeggsMenu", tEx);

            YtmenuPool = new MenuPool();
            var mainMenu = new UIMenu("Pegasus", "Pegasus Lifestyle");
            YtmenuPool.Add(mainMenu);
            PeggesTopMenu(mainMenu);
            YtmenuPool.RefreshIndex();
            bMenuOpen = true;
            mainMenu.Visible = !mainMenu.Visible;
        }
        private void PeggesTopMenu(UIMenu XMen)
        {
            if (iPegsSafeHeli == iPegsSafeHeliTest)
                PeggsSafeHeliList(XMen);
            if (iPegsWarHeli == iPegsWarHeliTest)
                PeggsArmdHeliList(XMen);
            if (iPegsSafePlane == iPegsSafePlaneTest)
                PeggsSafeAirCraftList(XMen);
            if (iPegsWarPlane == iPegsWarPlaneTest)
                PeggsArmAirCraftList(XMen);
            if (iPegsboats == iPegsboatsTest)
                PeggsBoatsList(XMen);
            if (iPegsimortas == iPegsimortasTest)
                PeggsImpExpList(XMen);
            if (sCustomBoatsz.Count > 0 || sCustomPlanez.Count > 0 || sCustomChopperz.Count > 0)
                PeggsCustomList(XMen);

        }
        private void PeggsSafeHeliList(UIMenu XMen)
        {
            var SafeHelimenu = YtmenuPool.AddSubMenu(XMen, sAltLang[417]);

            List<string> sPegggisis = new List<string>();
            sPegggisis.Add("Buzzard");
            sPegggisis.Add("Jetsam Cargobob");
            sPegggisis.Add("Frogger");
            sPegggisis.Add("Maverick");
            sPegggisis.Add("Super Volito");
            sPegggisis.Add("Super Volito Carbon");
            sPegggisis.Add("Swift");
            sPegggisis.Add("Swift Deluxe");
            sPegggisis.Add("Volatus");

            for (int i = 0; i < sPegggisis.Count; i++)
            {
                var item_ = new UIMenuItem(sPegggisis[i], "NSCoin: 200");
                SafeHelimenu.AddItem(item_);
            }

            SafeHelimenu.OnItemSelect += (sender, item, index) =>
            {
                if (iNSPMBank > 200)
                {
                    bIFrutiyAdd = true;
                    PeggDrop(1, index);
                    YourCoinPopUp(-200, 1, "Pegasus");
                }
                else
                    UI.Notify(sAltLang[368]);
                YtmenuPool.CloseAllMenus();
            };
        }
        private void PeggsArmdHeliList(UIMenu XMen)
        {
            var ArmHelimenu = YtmenuPool.AddSubMenu(XMen, sAltLang[418]);

            List<string> sPegggisis = new List<string>();
            sPegggisis.Add("Akula");
            sPegggisis.Add("Annihilator");
            sPegggisis.Add("Buzzard Attack Chopper");
            sPegggisis.Add("Military Cargobob");
            sPegggisis.Add("FH-1 Hunter");
            sPegggisis.Add("Havok");
            sPegggisis.Add("Savage");
            sPegggisis.Add("Sea Sparrow");
            sPegggisis.Add("Valkyrie");

            for (int i = 0; i < sPegggisis.Count; i++)
            {
                var item_ = new UIMenuItem(sPegggisis[i], "NSCoin: 200");
                ArmHelimenu.AddItem(item_);
            }

            ArmHelimenu.OnItemSelect += (sender, item, index) =>
            {
                if (iNSPMBank > 200)
                {
                    bIFrutiyAdd = true;
                    PeggDrop(2, index);
                    YourCoinPopUp(-200, 1, "Pegasus");
                }
                else
                    UI.Notify(sAltLang[368]);
                YtmenuPool.CloseAllMenus();
            };
        }
        private void PeggsSafeAirCraftList(UIMenu XMen)
        {
            var SafePlanemenu = YtmenuPool.AddSubMenu(XMen, sAltLang[419]);

            List<string> sPegggisis = new List<string>();
            sPegggisis.Add("Atomic Blimp");
            sPegggisis.Add("Xero Blimp");
            sPegggisis.Add("Nightclub Blimp");
            sPegggisis.Add("Besra");
            sPegggisis.Add("Alpha-Z1");
            sPegggisis.Add("Cuban 800");
            sPegggisis.Add("Dodo");
            sPegggisis.Add("Duster");
            sPegggisis.Add("Howard NX-25");
            sPegggisis.Add("Luxor");
            sPegggisis.Add("Luxor Deluxe");
            sPegggisis.Add("Mallard");
            sPegggisis.Add("Mammatus");
            sPegggisis.Add("Miljet");
            sPegggisis.Add("Nimbus");
            sPegggisis.Add("Shamal");
            sPegggisis.Add("Velum");
            sPegggisis.Add("Velum 5-Seater");
            sPegggisis.Add("Vestra");
            sPegggisis.Add("Titan");


            for (int i = 0; i < sPegggisis.Count; i++)
            {
                var item_ = new UIMenuItem(sPegggisis[i], "NSCoin: 200");
                SafePlanemenu.AddItem(item_);
            }

            SafePlanemenu.OnItemSelect += (sender, item, index) =>
            {
                if (iNSPMBank > 200)
                {
                    bIFrutiyAdd = true;
                    PeggDrop(3, index);
                    YourCoinPopUp(-200, 1, "Pegasus");
                }
                else
                    UI.Notify(sAltLang[368]);
                YtmenuPool.CloseAllMenus();
            };
        }
        private void PeggsArmAirCraftList(UIMenu XMen)
        {
            var ArmPlanemenu = YtmenuPool.AddSubMenu(XMen, sAltLang[420]);

            List<string> sPegggisis = new List<string>();
            sPegggisis.Add("B-11 Strikeforce");
            sPegggisis.Add("Hydra");
            sPegggisis.Add("LF-22 Starling");
            sPegggisis.Add("Mogul");
            sPegggisis.Add("P-45 Nokota");
            sPegggisis.Add("P-996 LAZER");
            sPegggisis.Add("Pyro");
            sPegggisis.Add("Rogue");
            sPegggisis.Add("Seabreeze");
            sPegggisis.Add("Tula");
            sPegggisis.Add("Ultralight");
            sPegggisis.Add("V-65 Molotok");
            sPegggisis.Add("RM-10 Bombushka");
            sPegggisis.Add("Volatol");


            for (int i = 0; i < sPegggisis.Count; i++)
            {
                var item_ = new UIMenuItem(sPegggisis[i], "NSCoin: 200");
                ArmPlanemenu.AddItem(item_);
            }

            ArmPlanemenu.OnItemSelect += (sender, item, index) =>
            {
                if (iNSPMBank > 200)
                {
                    bIFrutiyAdd = true;
                    PeggDrop(4, index);
                    YourCoinPopUp(-200, 1, "Pegasus");
                }
                else
                    UI.Notify(sAltLang[368]);
                YtmenuPool.CloseAllMenus();
            };
        }
        private void PeggsBoatsList(UIMenu XMen)
        {
            var Boatsmenu = YtmenuPool.AddSubMenu(XMen, sAltLang[421]);

            List<string> sPegggisis = new List<string>();
            sPegggisis.Add("SeaShark");    //
            sPegggisis.Add("Dinghy");    //
            sPegggisis.Add("Dinghy 2-seater");    //<!-- Dinghy 2-seater variant -->
            sPegggisis.Add("Jetmax");    //
            sPegggisis.Add("Speeder");    //
            sPegggisis.Add("Squalo");    //
            sPegggisis.Add("Suntrap");    //
            sPegggisis.Add("Toro");    //
            sPegggisis.Add("Tropic");    //
            sPegggisis.Add("Marquis");    //
            sPegggisis.Add("Tug");    //
            sPegggisis.Add("Submersible");    //
            sPegggisis.Add("Kraken");    //<!-- Kraken -->
            sPegggisis.Add("Kraken Avisa"); //Kraken Avisa -Boats
            sPegggisis.Add("Weaponized Dinghy"); //Nagasaki Weaponized Dinghy -Boats
            sPegggisis.Add("Longfin"); //Shitzu Longfin -Boats
            sPegggisis.Add("Kurtz 31"); //Kurtz 31 Patrol Boat -Boats

            for (int i = 0; i < sPegggisis.Count; i++)
            {
                var item_ = new UIMenuItem(sPegggisis[i], "NSCoin: 200");
                Boatsmenu.AddItem(item_);
            }

            Boatsmenu.OnItemSelect += (sender, item, index) =>
            {
                if (iNSPMBank > 200)
                {
                    bIFrutiyAdd = true;
                    PeggDrop(5, index);
                    YourCoinPopUp(-200, 1, "Pegasus");
                }
                else
                    UI.Notify(sAltLang[368]);
                YtmenuPool.CloseAllMenus();
            };
        }
        private void PeggsImpExpList(UIMenu XMen)
        {
            var ImpExmenu = YtmenuPool.AddSubMenu(XMen, sAltLang[422]);

            List<string> sPegggisis = new List<string>();
            sPegggisis.Add("BF Ramp Buggy");    //
            sPegggisis.Add("Brute Armored Boxville");    //
            sPegggisis.Add("Coil Rocket Voltic");    //
            sPegggisis.Add("Imponte Ruiner 2000");    //
            sPegggisis.Add("Jobuilt Phantom Wedge");    //
            sPegggisis.Add("Karin Technical Aqua");    //
            sPegggisis.Add("MTL Wastelander");    //
            sPegggisis.Add("Nagasaki Blazer Aqua");    //

            for (int i = 0; i < sPegggisis.Count; i++)
            {
                var item_ = new UIMenuItem(sPegggisis[i], "NSCoin: 200");
                ImpExmenu.AddItem(item_);
            }

            ImpExmenu.OnItemSelect += (sender, item, index) =>
            {
                if (iNSPMBank > 200)
                {
                    bIFrutiyAdd = true;
                    PeggDrop(6, index);
                    YourCoinPopUp(-200, 1, "Pegasus");
                }
                else
                    UI.Notify(sAltLang[368]);
                YtmenuPool.CloseAllMenus();
            };
        }
        private void PeggsCustomList(UIMenu XMen)
        {
            var CusBoats = YtmenuPool.AddSubMenu(XMen, sAltLang[469] + sAltLang[236]);

            for (int i = 0; i < sCustomBoatsz.Count; i++)
            {
                var item_ = new UIMenuItem(sCustomBoatsz[i], "NSCoin: 200");
                CusBoats.AddItem(item_);
            }

            var CusPlanez = YtmenuPool.AddSubMenu(XMen, sAltLang[469] + sAltLang[148]);

            for (int i = 0; i < sCustomPlanez.Count; i++)
            {
                var item_ = new UIMenuItem(sCustomPlanez[i], "NSCoin: 200");
                CusPlanez.AddItem(item_);
            }

            var CusHeli = YtmenuPool.AddSubMenu(XMen, sAltLang[469] + sAltLang[33]);

            for (int i = 0; i < sCustomChopperz.Count; i++)
            {
                var item_ = new UIMenuItem(sCustomChopperz[i], "NSCoin: 200");
                CusHeli.AddItem(item_);
            }

            CusBoats.OnItemSelect += (sender, item, index) =>
            {
                if (iNSPMBank > 200)
                {
                    bIFrutiyAdd = true;
                    if (Game.Player.Character.IsInWater)
                    {
                        Vector3 vAirstrip = Game.Player.Character.Position + (Game.Player.Character.ForwardVector) * 5;
                        float fPlaneHead = Game.Player.Character.Heading;
                        VehicleSpawn(sCustomBoatsz[index], vAirstrip, fPlaneHead, false, false, true, true, 3, 7, 14, 0, true);
                        YourCoinPopUp(-200, 1, "Pegasus");
                    }
                    else
                    {
                        UI.Notify("you need to be in the water.");
                    }
                }
                else
                    UI.Notify(sAltLang[368]);
                YtmenuPool.CloseAllMenus();
            };

            CusPlanez.OnItemSelect += (sender, item, index) =>
            {
                if (iNSPMBank > 200)
                {
                    bIFrutiyAdd = true;
                    PeggAirports(sCustomPlanez[index]);
                    YourCoinPopUp(-200, 1, "Pegasus");
                }
                else
                    UI.Notify(sAltLang[368]);
                YtmenuPool.CloseAllMenus();
            };

            CusHeli.OnItemSelect += (sender, item, index) =>
            {
                if (iNSPMBank > 200)
                {
                    bIFrutiyAdd = true;
                    FindNearestVeh(Game.Player.Character.Position, 0, 7, 0, 3, 4, false, false, false, 120.00f, 1.00f, sCustomChopperz[index], false, 1, 5, true);
                    YourCoinPopUp(-200, 1, "Pegasus");
                }
                else
                    UI.Notify(sAltLang[368]);
                YtmenuPool.CloseAllMenus();
            };
        }
        private void PeggDrop(int iList, int iDrop)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("PeggDrop", tEx);

            List<string> sVehicles = new List<string>();

            if (iList == 1)
            {
                sVehicles.Add("BUZZARD2"); //<!-- Buzzard -->
                sVehicles.Add("CARGOBOB2"); //<!-- Jetsam Cargobob -->
                sVehicles.Add("FROGGER"); //
                sVehicles.Add("MAVERICK"); //
                sVehicles.Add("SUPERVOLITO"); //
                sVehicles.Add("SUPERVOLITO2"); //<!-- SuperVolito Carbon -->
                sVehicles.Add("SWIFT"); //
                sVehicles.Add("SWIFT2"); //<!-- Swift Deluxe -->
                sVehicles.Add("VOLATUS"); //

                FindNearestVeh(Game.Player.Character.Position, 0, 7, 0, 3, 4, false, false, false, 120.00f, 1.00f, sVehicles[iDrop], false, 1, 5, true);
            }
            else if (iList == 2)
            {
                sVehicles.Add("AKULA");
                sVehicles.Add("­ANNIHL");
                sVehicles.Add("BUZZARD"); //<!-- Buzzard -->
                sVehicles.Add("CARGOBOB"); //<!-- Military Cargobob -->
                sVehicles.Add("HUNTER"); //
                sVehicles.Add("HAVOK"); //
                sVehicles.Add("SAVAGE"); //                
                sVehicles.Add("SEASPARROW"); //
                sVehicles.Add("VALKYRIE"); //

                FindNearestVeh(Game.Player.Character.Position, 0, 7, 0, 3, 4, false, false, false, 120.00f, 1.00f, sVehicles[iDrop], false, 1, 5, true);
            }
            else if (iList == 3)
            {
                sVehicles.Add("BLIMP");    //<!-- Atomic Blimp -->
                sVehicles.Add("BLIMP2");    //<!-- Xero Blimp -->
                sVehicles.Add("BLIMP3");    //
                sVehicles.Add("BESRA");    //
                sVehicles.Add("ALPHAZ1");    //
                sVehicles.Add("CUBAN800");    //
                sVehicles.Add("DODO");    //
                sVehicles.Add("DUSTER");    //
                sVehicles.Add("HOWARD");    //<!-- Howard NX-25 -->
                sVehicles.Add("LUXOR");    //
                sVehicles.Add("LUXOR2");    //<!-- Luxor Deluxe -->
                sVehicles.Add("STUNT");    //<!-- Mallard -->
                sVehicles.Add("MAMMATUS");    //
                sVehicles.Add("MILJET");    //
                sVehicles.Add("NIMBUS");    //
                sVehicles.Add("SHAMAL");    //
                sVehicles.Add("VELUM");    //
                sVehicles.Add("VELUM2");    //<!-- Velum 5-Seater -->
                sVehicles.Add("VESTRA");    //
                sVehicles.Add("TITAN");    //

                PeggAirports(sVehicles[iDrop]);
            }
            else if (iList == 4)
            {
                sVehicles.Add("STRIKEFORCE");    //<!-- B-11 Strikeforce -->
                sVehicles.Add("HYDRA");    //
                sVehicles.Add("STARLING");    //<!-- LF-22 Starling -->
                sVehicles.Add("MOGUL");    //
                sVehicles.Add("NOKOTA");    //<!-- P-45 Nokota -->
                sVehicles.Add("LAZER");    //<!-- P-996 LAZER -->
                sVehicles.Add("PYRO");    //
                sVehicles.Add("ROGUE");    //
                sVehicles.Add("SEABREEZE");    //
                sVehicles.Add("TULA");    //
                sVehicles.Add("MICROLIGHT");    //<!-- Ultralight -->
                sVehicles.Add("MOLOTOK");    //<!-- V-65 Molotok -->
                sVehicles.Add("BOMBUSHKA");    //<!-- RM-10 Bombushka -->
                sVehicles.Add("VOLATOL");    //

                PeggAirports(sVehicles[iDrop]);
            }
            else if (iList == 5)
            {
                sVehicles.Add("SEASHARK");    //
                sVehicles.Add("DINGHY");    //
                sVehicles.Add("DINGHY2");    //<!-- Dinghy 2-seater variant -->
                sVehicles.Add("JETMAX");    //
                sVehicles.Add("SPEEDER");    //
                sVehicles.Add("SQUALO");    //
                sVehicles.Add("SUNTRAP");    //
                sVehicles.Add("TORO");    //
                sVehicles.Add("TROPIC");    //
                sVehicles.Add("MARQUIS");    //
                sVehicles.Add("TUG");    //
                sVehicles.Add("SUBMERSIBLE");    //
                sVehicles.Add("SUBMERSIBLE2");    //<!-- Kraken -->
                sVehicles.Add("avisa"); //Kraken Avisa -Boats
                sVehicles.Add("dinghy5"); //Nagasaki Weaponized Dinghy -Boats
                sVehicles.Add("longfin"); //Shitzu Longfin -Boats
                sVehicles.Add("patrolboat"); //Kurtz 31 Patrol Boat -Boats

                if (Game.Player.Character.IsInWater)
                {
                    Vector3 vAirstrip = Game.Player.Character.Position + (Game.Player.Character.ForwardVector) * 5;
                    float fPlaneHead = Game.Player.Character.Heading;
                    VehicleSpawn(sVehicles[iDrop], vAirstrip, fPlaneHead, false, false, true, true, 3, 7, 14, 0, true);
                }
                else
                {
                    UI.Notify("you need to be in the water.");
                }
            }
            else if (iList == 6)
            {
                sVehicles.Add("DUNE4");    //
                sVehicles.Add("BOXVILLE5");    //
                sVehicles.Add("VOLTIC2");    //
                sVehicles.Add("RUINER2");    //
                sVehicles.Add("PHANTOM2");    //
                sVehicles.Add("TECHNICAL2");    //
                sVehicles.Add("WASTLNDR");    //
                sVehicles.Add("BLAZER5");    //

                FindNearestVeh(Game.Player.Character.Position, 0, 1, 0, 3, 4, false, false, false, 120.00f, 1.00f, sVehicles[iDrop], false, 1, 5, true);
            }
        }
        private void PeggAirports(string sAircraft)
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("PeggAirports", tEx);

            List<Vector3> vAirStips = new List<Vector3>();
            List<float> fAir = new List<float>();
            List<float> fAirDist = new List<float>();

            vAirStips.Add(new Vector3(-906.7272f, 4820.796f, 306.5776f)); fAir.Add(267.1703f);
            vAirStips.Add(new Vector3(-1140.173f, 5389.716f, 4.901117f)); fAir.Add(312.6974f);
            vAirStips.Add(new Vector3(-923.3945f, 5576.326f, 4.37148f)); fAir.Add(127.6849f);
            vAirStips.Add(new Vector3(-923.0542f, 6162.888f, 6.044725f)); fAir.Add(31.88383f);
            vAirStips.Add(new Vector3(-590.921f, 6365.13f, 4.679955f)); fAir.Add(299.9048f);
            vAirStips.Add(new Vector3(-254.2323f, 6571.657f, 3.832674f)); fAir.Add(132.3192f);
            vAirStips.Add(new Vector3(600.0437f, 6634.574f, 13.46018f)); fAir.Add(258.6263f);
            vAirStips.Add(new Vector3(923.0565f, 6609.757f, 5.702214f)); fAir.Add(83.27197f);
            vAirStips.Add(new Vector3(1933.589f, 4713.754f, 42.33749f)); fAir.Add(297.6379f);
            vAirStips.Add(new Vector3(2874.167f, 3928.381f, 54.02859f)); fAir.Add(63.15288f);
            vAirStips.Add(new Vector3(2457.873f, 1117.116f, 80.76649f)); fAir.Add(265.2575f);
            vAirStips.Add(new Vector3(2173.284f, 2644.494f, 54.49402f)); fAir.Add(280.4862f);
            vAirStips.Add(new Vector3(2017.36f, 2729.405f, 51.34712f)); fAir.Add(0.2645806f);
            vAirStips.Add(new Vector3(1736.23f, 3261.618f, 42.48234f)); fAir.Add(106.1397f);
            vAirStips.Add(new Vector3(1086.105f, 3017.629f, 42.22773f)); fAir.Add(285.6882f);
            vAirStips.Add(new Vector3(-60.70419f, 3368.598f, 51.76259f)); fAir.Add(255.485f);
            vAirStips.Add(new Vector3(-819.7478f, 2580.281f, 77.56622f)); fAir.Add(337.8569f);
            vAirStips.Add(new Vector3(-1585.431f, 2962.705f, 34.51f)); fAir.Add(199.6444f);
            vAirStips.Add(new Vector3(-2013.2f, 2861.529f, 34.11044f)); fAir.Add(62.47633f);
            vAirStips.Add(new Vector3(-2738.26f, 2938.095f, 3.82725f)); fAir.Add(171.6526f);
            vAirStips.Add(new Vector3(-2763.089f, 2407.076f, 3.892683f)); fAir.Add(0.7815081f);
            vAirStips.Add(new Vector3(-2231.201f, 1478.06f, 312.9143f)); fAir.Add(256.8859f);
            vAirStips.Add(new Vector3(495.3068f, 737.1909f, 201.9226f)); fAir.Add(171.4047f);
            vAirStips.Add(new Vector3(1077.546f, -2637.157f, 10.16461f)); fAir.Add(253.2725f);
            vAirStips.Add(new Vector3(1488.146f, -2310.9f, 75.20724f)); fAir.Add(169.5389f);
            vAirStips.Add(new Vector3(2102.663f, -1286.447f, 172.338f)); fAir.Add(341.0411f);
            vAirStips.Add(new Vector3(-1653.35f, -2961.487f, 15.16018f)); fAir.Add(241.3029f);
            vAirStips.Add(new Vector3(-1583.563f, -2806.431f, 15.17272f)); fAir.Add(238.7381f);
            vAirStips.Add(new Vector3(-1366.345f, -2265.252f, 15.16539f)); fAir.Add(150.7039f);
            vAirStips.Add(new Vector3(-2060.022f, -529.9898f, 8.60621f)); fAir.Add(205.3437f);
            vAirStips.Add(new Vector3(-1736.404f, -795.8164f, 10.60102f)); fAir.Add(45.13831f);
            vAirStips.Add(new Vector3(-3247.287f, 1242.457f, 3.927659f)); fAir.Add(171.3576f);
            vAirStips.Add(new Vector3(-2897.66f, 1403.708f, 76.63241f)); fAir.Add(107.6411f);

            Vector3 vPos = Game.Player.Character.Position;

            for (int i = 0; i < vAirStips.Count; i++)
            {
                float fDist = vAirStips[i].DistanceTo(vPos);
                fAirDist.Add(fDist);
            }
            float fMin = fAirDist[0];
            int iAir = 0;
            for (int i = 0; i < fAirDist.Count; i++)
            {
                if (fAirDist[i] < fMin)
                { fMin = fAirDist[i]; iAir = i; }
            }

            VehicleSpawn(sAircraft, vAirStips[iAir], fAir[iAir], false, true, true, true, 3, 4, 6, 0, true);
        }
        private void BribesAnswered(iFruitContact contact)
        {
            if (iJustBribed < Game.GameTime)
            {
                if (Game.Player.WantedLevel <= 3)
                {
                    if (iNSPMBank > 499)
                    {
                        Game.Player.WantedLevel = 0;
                        YourCoinPopUp(-500, 1, sAltLang[423]);
                        iJustBribed = Game.GameTime + 240000;
                    }
                    else
                        UI.Notify(sAltLang[368]);
                }
                else
                    UI.Notify(sAltLang[383]);
            }
            else
            {
                int iTime = iJustBribed - Game.GameTime;
                UI.Notify(sAltLang[379] + ShowComs(iTime, false, false));
            }

            iFruit.Close(2000);
        }
        private void ListBuilder()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("ListBuilder", tEx);

            sPhoneType.Add("p_phonebox_02_s");
            sPhoneType.Add("prop_phonebox_04");
            sPhoneType.Add("prop_phonebox_03");
            sPhoneType.Add("prop_phonebox_02");
            sPhoneType.Add("prop_phonebox_01c");
            sPhoneType.Add("prop_phonebox_01b");
            sPhoneType.Add("prop_phonebox_01a");
            sPhoneType.Add("p_phonebox_01b_s");

            vOldPhoneBoxList.Add(new Vector3(214.317078f, -921.2575f, 29.6920071f));
            vOldPhoneBoxList.Add(new Vector3(-41.1469345f, -1730.33057f, 28.2996063f));
            vOldPhoneBoxList.Add(new Vector3(1769.25232f, 3337.95117f, 40.433075f));
            vOldPhoneBoxList.Add(new Vector3(1876.836f, 2701.69775f, 44.8391724f));
            vOldPhoneBoxList.Add(new Vector3(1584.86682f, 6451.15332f, 24.317152f));

            sDoorList.Add("prop_ld_bankdoors_02");
            sDoorList.Add("v_ilev_247door");
            sDoorList.Add("v_ilev_247door_r");
            sDoorList.Add("v_ilev_bank4door01");
            sDoorList.Add("v_ilev_bank4door02");
            sDoorList.Add("v_ilev_bl_doorsl_l");
            sDoorList.Add("v_ilev_bl_doorsl_r");
            sDoorList.Add("v_ilev_bs_door");
            sDoorList.Add("v_ilev_ch_glassdoor");
            sDoorList.Add("v_ilev_clothmiddoor");
            sDoorList.Add("v_ilev_cor_darkdoor");
            sDoorList.Add("v_ilev_cor_darkdoor");
            sDoorList.Add("v_ilev_cor_doorglassa");
            sDoorList.Add("v_ilev_cor_doorglassb");
            sDoorList.Add("v_ilev_cs_door01");
            sDoorList.Add("v_ilev_cs_door01_r");
            sDoorList.Add("v_ilev_csr_door_l");
            sDoorList.Add("v_ilev_csr_door_r");
            sDoorList.Add("v_ilev_csr_door_r");
            sDoorList.Add("v_ilev_gasdoor");
            sDoorList.Add("v_ilev_gasdoor_r");
            sDoorList.Add("v_ilev_gc_door03");
            sDoorList.Add("v_ilev_gc_door04");
            sDoorList.Add("v_ilev_genbankdoor1");
            sDoorList.Add("v_ilev_genbankdoor2");
            sDoorList.Add("v_ilev_hd_door_l");
            sDoorList.Add("v_ilev_hd_door_r");
            sDoorList.Add("v_ilev_ml_door1");
            sDoorList.Add("v_ilev_ph_door002");
            sDoorList.Add("v_ilev_ph_door01");
            sDoorList.Add("v_ilev_po_door");
            sDoorList.Add("v_ilev_ra_door1_l");
            sDoorList.Add("v_ilev_ra_door1_r");
            sDoorList.Add("v_ilev_stad_fdoor");
            sDoorList.Add("v_ilev_ta_door");
            sDoorList.Add("v_ilev_ss_door5_r");
            sDoorList.Add("v_corp_hicksdoor");
            sDoorList.Add("prop_strip_door_01");
            sDoorList.Add("hei_v_ilev_bk_gate_pris");
            sDoorList.Add("h4_prop_h4_gate_l_03a");
            sDoorList.Add("h4_prop_h4_gate_r_03a");
            sDoorList.Add("prop_strip_door_01");
            sDoorList.Add("sm_14_mp_door_l");
            sDoorList.Add("prop_map_door_01");
            sDoorList.Add("prop_sm1_11_doorl");
            sDoorList.Add("prop_control_rm_door_01");
            sDoorList.Add("prop_magenta_door");
            sDoorList.Add("prop_sc1_12_door");
            sDoorList.Add("v_ilev_deviantfrontdoor");

            sGateList.Add("prop_gate_prison_01");
            sGateList.Add("prop_gate_docks_ld");
            sGateList.Add("prop_facgate_01");
            sGateList.Add("prop_facgate_01b");
            sGateList.Add("prop_fnclink_06gate2");
            sGateList.Add("prop_facgate_04_l");
            sGateList.Add("prop_facgate_04_r");

            sDestList.Add("Paleto Bay");
            sDestList.Add("North Chumash");
            sDestList.Add("Lago Zancuda");
            sDestList.Add("Chumash");
            sDestList.Add("Pacific Bluffs");
            sDestList.Add("Elysian Island");
            sDestList.Add("Terminal");
            sDestList.Add("Palomino");
            sDestList.Add("Palmer-Taylor");
            sDestList.Add("San Chianski");
            sDestList.Add("El Gordo");
            sDestList.Add("Procopio Beach");

            sTrainerOnly.Add("DEVESTE"); //
            sTrainerOnly.Add("EMERUS"); //
            sTrainerOnly.Add("FURIA"); //
            sTrainerOnly.Add("KRIEGER"); //
            sTrainerOnly.Add("THRAX"); //
            sTrainerOnly.Add("ZORRUSSO"); //
            sTrainerOnly.Add("TIGON");
            sTrainerOnly.Add("DRAFTER"); //<!-- 8F Drafter -->
            sTrainerOnly.Add("IMORGON"); //
            sTrainerOnly.Add("ISSI7"); //<!-- Issi Sport -->
            sTrainerOnly.Add("ITALIGTO"); //
            sTrainerOnly.Add("JUGULAR"); //
            sTrainerOnly.Add("KOMODA"); //
            sTrainerOnly.Add("LOCUST"); //
            sTrainerOnly.Add("NEO"); //
            sTrainerOnly.Add("PARAGON"); //
            sTrainerOnly.Add("PARAGON2"); //<!-- Paragon R (Armored) -->
            sTrainerOnly.Add("SCHLAGEN"); //
            sTrainerOnly.Add("SUGOI"); //
            sTrainerOnly.Add("SULTAN2"); //<!-- Sultan Classic -->
            sTrainerOnly.Add("VSTR"); //<!-- V-STR -->
            sTrainerOnly.Add("COQUETTE4"); //<!-- Coquette D10  -->
            sTrainerOnly.Add("PENUMBRA2"); //<!-- Penumbra FF   -->
            sTrainerOnly.Add("CLIQUE"); //
            sTrainerOnly.Add("DEVIANT"); //
            sTrainerOnly.Add("GAUNTLET3"); //<!-- Gauntlet Classic -->
            sTrainerOnly.Add("GAUNTLET4"); //<!-- Gauntlet Hellfire -->
            sTrainerOnly.Add("PEYOTE2"); //<!-- Peyote Gasser -->
            sTrainerOnly.Add("IMPALER"); //
            sTrainerOnly.Add("TULIP"); //
            sTrainerOnly.Add("VAMOS"); //
            sTrainerOnly.Add("DUKES3"); //
            sTrainerOnly.Add("GAUNTLET5"); //
            sTrainerOnly.Add("MANANA2"); //
            sTrainerOnly.Add("PEYOTE3"); //
            sTrainerOnly.Add("GLENDALE2"); //
            sTrainerOnly.Add("YOSEMITE3"); //
            sTrainerOnly.Add("DYNASTY"); //
            sTrainerOnly.Add("JB7002"); //<!-- JB 700W -->
            sTrainerOnly.Add("NEBULA"); //
            sTrainerOnly.Add("RETINUE2"); //<!-- Retinue MkII -->
            sTrainerOnly.Add("ZION3"); //<!-- Zion Classic -->
            sTrainerOnly.Add("COQUETTE4"); //<!-- Coquette D10  -->
            sTrainerOnly.Add("ASBO"); //
            sTrainerOnly.Add("KANJO"); //<!-- Blista Kanjo -->
            sTrainerOnly.Add("CLUB");
            sTrainerOnly.Add("CARACARA2"); //<!-- Caracara 4x4 -->
            sTrainerOnly.Add("EVERON"); //
            sTrainerOnly.Add("OUTLAW"); //
            sTrainerOnly.Add("VAGRANT"); //
            sTrainerOnly.Add("ZHABA"); //
            sTrainerOnly.Add("NOVAK"); //
            sTrainerOnly.Add("REBLA"); //
            sTrainerOnly.Add("TOROS"); //
            sTrainerOnly.Add("LANDSTALKER2"); //
            sTrainerOnly.Add("SEMINOLE2"); //

            vYachtTrigList.Add(new Vector3(-2030.604f, -1041.843f, 2.566333f));     //0
            vYachtTrigList.Add(new Vector3(-2027.406f, -1031.263f, 2.566305f));     //1
            vYachtTrigList.Add(new Vector3(-2026.023f, -1044.079f, 3.5016f));       //2
            vYachtTrigList.Add(new Vector3(-2021.994f, -1031.659f, 3.5016f));       //3
            vYachtTrigList.Add(new Vector3(-2073.849f, -1021.678f, 5.884126f));     //4
            vYachtTrigList.Add(new Vector3(-2089.88f, -1013.522f, 5.884132f));      //5
            vYachtTrigList.Add(new Vector3(-2097.821f, -1013.057f, 5.88435f));      //6
            vYachtTrigList.Add(new Vector3(-2022.674f, -1038.524f, 5.580638f));     //7
            vYachtTrigList.Add(new Vector3(-2093.406f, -1013.812f, 5.884346f));     //8
            vYachtTrigList.Add(new Vector3(-2092.738f, -1012.015f, 5.884349f));     //9
            vYachtTrigList.Add(new Vector3(-2086.886f, -1013.086f, 5.884132f));     //10
            vYachtTrigList.Add(new Vector3(-2050.074f, -1028.000f, 8.971491f));     //11
            vYachtTrigList.Add(new Vector3(-2024.45f, -1035.888f, 5.57f));       //12-stand
            vYachtTrigList.Add(new Vector3(-2025.457f, -1039.567f, 5.57f));     //13-stand
            vYachtTrigList.Add(new Vector3(-2024.319f, -1040.304f, 5.57f));     //14-out
            vYachtTrigList.Add(new Vector3(-2022.741f, -1039.947f, 5.57f));     //15-in
            vYachtTrigList.Add(new Vector3(-2021.812f, -1037.576f, 5.57f));     //16-in
            vYachtTrigList.Add(new Vector3(-2022.5f, -1036.011f, 5.57f));        //17-out
            vYachtTrigList.Add(new Vector3(-2095.131f, -1016.018f, 9.0805f));       //18-BarMaid
            vYachtTrigList.Add(new Vector3(-2094.076f, -1017.452f, 9.0805f));       //19-BarDrink
            vYachtTrigList.Add(new Vector3(-2085.821f, -1017.94f, 12.7819f));       //20-capitan

            vYachtDoorList.Add(new Vector3(-2056.808f, -1031.276f, 8.97149f)); fYachtDoorList.Add(251.6967f);
            vYachtDoorList.Add(new Vector3(-2071.112f, -1028.82f, 5.882073f)); fYachtDoorList.Add(166.458f);
            vYachtDoorList.Add(new Vector3(-2076.274f, -1024.964f, 5.884129f)); fYachtDoorList.Add(62.59665f);
            vYachtDoorList.Add(new Vector3(-2070.088f, -1018.865f, 5.884129f)); fYachtDoorList.Add(79.79578f);
            vYachtDoorList.Add(new Vector3(-2078.324f, -1013.596f, 5.882021f)); fYachtDoorList.Add(255.3005f);
            vYachtDoorList.Add(new Vector3(-2067.564f, -1017.044f, 5.882022f)); fYachtDoorList.Add(338.0218f);
            vYachtDoorList.Add(new Vector3(-2036.542f, -1033.837f, 5.882352f)); fYachtDoorList.Add(235.3591f);
            vYachtDoorList.Add(new Vector3(-2071.008f, -1018.602f, 3.051447f)); fYachtDoorList.Add(241.4973f);

            for (int i = 0; i < 10; i++)
                iAssMissionList.Add(0);

            for (int i = 0; i < 20; i++)
            {
                bool bRands = true;
                int iWould = RandInt(1, 21);
                for (int ii = 0; ii < iWould; ii++)
                    bRands = !bRands;

                BeOff.Add(bRands);
                bRands = !bRands;
            }
        }
        private void PickUpThePhone()
        {
            float fThisWay = fphdirect - 88.00f;
            int iTFuckedUp = Game.GameTime + 12000;
            Game.Player.Character.FreezePosition = true;
            Script.Wait(500);
            Game.Player.Character.FreezePosition = false;
            Game.Player.Character.Task.GoTo(vPhoneCorona, true, -1);
            Script.Wait(2500);
            Game.Player.Character.Task.AchieveHeading(fThisWay, -1);
            while (!BeInAngle(2.50f, fThisWay, Game.Player.Character.Heading) && Game.GameTime < iTFuckedUp)
            {
                Game.Player.Character.Task.AchieveHeading(fThisWay, -1);
                Script.Wait(1000);
            }
            ForceAnimOnce(Game.Player.Character, "oddjobs@assassinate@multi@call", "ass_multi_target_call_p1", Game.Player.Character.Position, Game.Player.Character.Rotation);
            Script.Wait(4000);
            bPickUpHangUp = true;
        }
        private void OnLoadup()
        {
            using (StreamWriter tEx = File.AppendText(sBeeLogs))
                BeeLog("OnLoadup", tEx);

            World.SetRelationshipBetweenGroups(Relationship.Hate, GroupANPCs, GroupBNPCs);
            World.SetRelationshipBetweenGroups(Relationship.Hate, GroupBNPCs, GroupANPCs);
            World.SetRelationshipBetweenGroups(Relationship.Hate, PlayerGroups, AttackingNPCs);
            World.SetRelationshipBetweenGroups(Relationship.Hate, AttackingNPCs, PlayerGroups);
            World.SetRelationshipBetweenGroups(Relationship.Like, PlayerGroups, FriendlyNPCs);
            World.SetRelationshipBetweenGroups(Relationship.Like, FriendlyNPCs, PlayerGroups);
            World.SetRelationshipBetweenGroups(Relationship.Companion, PlayerGroups, FollowingNPCs);
            World.SetRelationshipBetweenGroups(Relationship.Companion, FollowingNPCs, PlayerGroups);

            ListBuilder();
            FindaLang();
            ReadXmlSet();
            GoFetchSettings();
            FindCustomCarz();

            Fruits(0);
            Fruits(3);

            if (iFubard > 0)
                Fruits(1);

            if (sImpExpVeh.Count > 0)
                Fruits(2);

            if (iProcessForPegs == iGotPegsus)
                Fruits(4);
            if (iWantedBribe > 0)
                Fruits(5);
            if (iMeddicTest == iMeddicc)
                Fruits(6);

            if (iYachtPrice < 0)
                iYachtPrice = 0;

            Hare.Load();
            DipDar.Load();
            Chatter.Load();

            if (!bSailor && !bDebtCollect && !bMCBusiness && !bBayLift && iOwnaYacht != iProcessForYacht)
                bOnlineStuffLoaded = false;
            else
                LoadOnlineIps();

            Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
            UI.Notify("New Street Phone Missions " + sVersion + " by ~b~Adopocalipt ~w~Loaded.");
            OldBlipCleaner();

            if (iOwnaYacht == iProcessForYacht)
            {
                bYachtOwner = true;
                YachtStuff_TheBlip(true);
                Water02_AddHeistYacht();
                if (bLoadUpOnYacht)
                    bYachtStart = true;
            }
            bLookingForPB = true;
        }
        private void OnTick(object sender, EventArgs e)
        {
            if (bMenuOpen)
            {
                if (YtmenuPool.IsAnyMenuOpen())
                    YtmenuPool.ProcessMenus();
                else
                {
                    Game.Player.Character.FreezePosition = false;
                    Function.Call(Hash.DISPLAY_RADAR, true);
                    bMenuOpen = false;
                    if (bOptionsMen)
                    {
                        bOptionsMen = false;
                        bOnTheJob = false;
                        bLookingForPB = true;
                    }
                    else if (bWepMenuX)
                    {
                        bWepMenuX = false;
                        bFubarRide = false;
                        FubarCarX.CloseDoor(VehicleDoor.BackLeftDoor, false);
                        FubarCarX.CloseDoor(VehicleDoor.BackRightDoor, false);
                        Fubar_Clean();
                    }
                }
            }
            else if (bControlerSelect)
            {
                if (bPacBouns)
                {
                    if (iWait4Sec < Game.GameTime)
                    {
                        iPlayerChoise = 4;
                        bPacBouns = false;
                    }
                }
                else if (iPlayerChoise == 1)
                {
                    ControlerUI(sAltLang[79], 1);
                    TakeNote();
                    if (Game.IsControlJustPressed(2, GTA.Control.Sprint))
                    {
                        if (iJobType == 11)
                        {
                            iCurrentLap = 1;
                            iPlayerChoise = 8;
                        }
                        else
                        {
                            iPlayerChoise = 0;
                            PlayerPlays();
                        }
                    }
                    else if (Game.IsControlJustPressed(2, GTA.Control.Jump))
                    {
                        iPlayerChoise = 0;
                        bOnTheJob = false;
                        bLookingForPB = true;
                    }
                    else if (Game.IsControlJustPressed(2, GTA.Control.Detonate))
                    {
                        iPlayerChoise = 0;
                        SettingsMenu();
                    }
                    else if (Game.Player.Character.Position.DistanceTo(vPhoneCorona) > 2.50f)
                    {
                        iPlayerChoise = 0;
                        bOnTheJob = false;
                        bLookingForPB = true;
                    }
                }
                else if (iPlayerChoise == 2)
                {
                    ControlerUI(sAltLang[78], 1);
                    if (Game.IsControlJustPressed(2, GTA.Control.Sprint))
                    {
                        RemoveTargets();
                        CleanUpPeds();
                        iPlayerChoise = 0;
                        bMoreFubar = true;
                        bJobLoaded = false;
                        if (iFubard == 0)
                            Fruits(1);
                        iFubard += 1;
                        iRepMisssion += 1;
                        iCashReward += iCashBouns;
                        AreULocal();
                    }
                    else if (Game.IsControlJustPressed(2, GTA.Control.Jump) || !(Game.Player.Character.IsInVehicle()))
                    {
                        bMoreFubar = false;
                        iPlayerChoise = 0;
                        if (iFubard == 0)
                            Fruits(1);
                        iFubard += 1;
                        iRepMisssion += 1;
                        iCashReward += iCashBouns;
                        iMissionSeq = 9;
                    }
                }
                else if (iPlayerChoise == 3)
                {
                    ControlerUI(sAltLang[78], 1);
                    if (Game.IsControlJustPressed(2, GTA.Control.Sprint))
                    {
                        iRepMisssion += 1;
                        iPlayerChoise = 0;
                        iMissionSeq = 0;
                        iCashReward += iCashBouns;
                        Ambulance();
                    }
                    else if (Game.IsControlJustPressed(2, GTA.Control.Jump))
                    {
                        bAmberAntz = false;
                        iPlayerChoise = 0;
                        iRepMisssion += 1;
                        iCashReward += iCashBouns;
                        iMissionSeq = 9;
                    }
                }
                else if (iPlayerChoise == 4)
                {
                    ControlerUI(sAltLang[78], 1);
                    StickySubTitle(sAltLang[331]);
                    if (Game.IsControlJustPressed(2, GTA.Control.Sprint))
                    {
                        iPlayerChoise = 0;
                        iMissionSeq = 0;
                        iLocationX = 99;
                        GetAwayDriver();
                    }
                    else if (Game.IsControlJustPressed(2, GTA.Control.Jump))
                    {
                        iPlayerChoise = 0;
                        PostMess();
                    }
                }
                else if (iPlayerChoise == 5)
                {
                    ControlerUI(sAltLang[78], 1);
                    if (Game.IsControlJustPressed(2, GTA.Control.Sprint))
                    {
                        CleanUpPeds();
                        CleanUpProps();
                        CleanUpVehicles();
                        CleanUpFire();
                        RemoveTargets();
                        iMissionSeq = 0;
                        iCashReward += iCashBouns;
                        iRepMisssion += 1;
                        iPlayerChoise = 0;
                        FireDept();
                    }
                    else if (Game.IsControlJustPressed(2, GTA.Control.Jump))
                    {
                        iMissionSeq = 40;
                        iCashReward += iCashBouns;
                        bReFire = false;
                        iRepMisssion += 1;
                        iPlayerChoise = 0;
                    }
                }
                else if (iPlayerChoise == 6)
                {
                    ControlerUI(sAltLang[332] + iCurrentLap, 1);
                    if (Game.IsControlJustPressed(2, GTA.Control.Sprint))
                    {
                        iPlayerChoise = 0;
                        if (bOnCayoLand)
                            Raceist();
                        else
                            PlayerPlays();
                    }
                    else if (Game.IsControlJustPressed(2, GTA.Control.Detonate))
                    {
                        if (iCurrentLap > 1)
                        {
                            iCurrentLap = iCurrentLap - 1;
                        }
                    }
                    else if (Game.IsControlJustPressed(2, GTA.Control.Context))
                    {
                        if (iCurrentLap < 10)
                            iCurrentLap = iCurrentLap + 1;
                    }
                }
                else if (iPlayerChoise == 7)
                {
                    ControlerUI(ShowComs(iYachtPrice, true, false) + sAltLang[333], 1);
                    if (iYachtPrice < 0)
                        iYachtPrice = 0;
                    else if (Game.IsControlJustPressed(2, GTA.Control.Sprint))
                    {
                        if (iNSPMBank > iYachtPrice)
                        {
                            iPlayerChoise = 9;
                            iCashReward = 0;
                            iYachtPrice *= -1;
                            YourCoinPopUp(iYachtPrice, 1, "Yacht Purchase");
                            iOwnaYacht = iProcessForYacht;
                            bYachtBypas = false;
                            bYachtOwner = true;
                            iYachtPrice = 0;
                            WriteXmlSet();
                        }
                        else
                        {
                            UI.Notify("Inserficaint funds avalable");
                            iPlayerChoise = 0;
                            iMissionSeq = 7;
                            iCashReward = 20000;
                            YachtStuff_TheBlip(false);
                            bYachtOwner = false;
                            iOwnaYacht = 0;
                            if (!VehTrackin_01.IsDead)
                                WarptoAnyVeh(VehTrackin_01, Game.Player.Character, 1, false);
                            else
                            {
                                Vector3 Vpos = new Vector3(-1848.826f, -1200.298f, 19.14339f);
                                SlowFastTravel(Vpos, 165.84f);
                            }
                            if (bOldYacht)
                                Water02_RemoveYacht();
                            WriteXmlSet();
                        }
                    }
                    else if (Game.IsControlJustPressed(2, GTA.Control.Jump))
                    {
                        iPlayerChoise = 0;
                        iMissionSeq = 7;
                        iCashReward = 20000;
                        YachtStuff_TheBlip(false);
                        bYachtOwner = false;
                        iOwnaYacht = 0;
                        if (!VehTrackin_01.IsDead)
                            WarptoAnyVeh(VehTrackin_01, Game.Player.Character, 1, false);
                        else
                        {
                            Vector3 Vpos = new Vector3(-1848.826f, -1200.298f, 19.14339f);
                            SlowFastTravel(Vpos, 165.84f);
                        }
                        if (bOldYacht)
                            Water02_RemoveYacht();
                        WriteXmlSet();
                    }
                }
                else if (iPlayerChoise == 8)
                {
                    if (bSoloRace)
                        ControlerUI(sAltLang[334] + sAltLang[335], 1);
                    else
                        ControlerUI(sAltLang[334] + sAltLang[336], 1);

                    if (Game.IsControlJustPressed(2, GTA.Control.Sprint))
                        iPlayerChoise = 6;
                    else if (Game.IsControlJustPressed(2, GTA.Control.Detonate))
                        bSoloRace = !bSoloRace;
                }
                else if (iPlayerChoise == 9)
                {
                    ControlerUI(sAltLang[320], 1);
                    if (Game.IsControlJustPressed(2, GTA.Control.Sprint))
                    {
                        iMissionSeq = 7;
                        iPlayerChoise = 0;
                        bLoadUpOnYacht = true;
                        WriteXmlSet();
                    }
                    else if (Game.IsControlJustPressed(2, GTA.Control.Jump))
                    {
                        iMissionSeq = 7;
                        iPlayerChoise = 0;
                        bLoadUpOnYacht = false;
                        WriteXmlSet();
                    }
                }
                else if (iPlayerChoise == 10)
                {
                    ControlerUI(sAltLang[363], 1);
                    TakeNote();
                    if (Game.IsControlJustPressed(2, GTA.Control.Detonate))
                    {
                        iPlayerChoise = 0;
                        SettingsMenu();
                    }
                    else if (Game.Player.Character.Position.DistanceTo(vPhoneCorona) > 2.50f)
                    {
                        iPlayerChoise = 0;
                        bOnTheJob = false;
                        bLookingForPB = true;
                    }
                }
                else
                {
                    if (bPickUpHangUp)
                    {
                        ForceAnimOnceEnding(Game.Player.Character, "oddjobs@assassinate@multi@call", "ass_multi_target_call_p1", Game.Player.Character.Position, Game.Player.Character.Rotation, 0.88f);
                        Script.Wait(4000);
                        Game.Player.Character.Task.ClearAnimation("oddjobs@assassinate@multi@call", "ass_multi_target_call_p1");
                    }
                    bPickUpHangUp = false;
                    bControlerSelect = false;
                }

            }
            else if (bBuildMode)
            {
                if (bDisplayUiBar)
                {
                    Function.Call(Hash.DRAW_SCALEFORM_MOVIE_FULLSCREEN, iScale, 255, 255, 255, 255);
                }
                if (iBuildMode == 1)
                {
                    if (iBuildingUp == 0)
                    {
                        ControlerUI(sAltLang[518], 1);

                        if (Function.Call<bool>(Hash.IS_WAYPOINT_ACTIVE))
                        {
                            TruckBuild Trucky = new TruckBuild();
                            MyMissions.TruckersXM.Add(Trucky); 
                            
                            fList_01.Clear();
                            VectorList_01.Clear();
                            sList_01.Clear();
                            BeOnOff.Clear();
                            BeOnOff.Add(false);
                            sList_01 = BuildMishLists(4);
                            iWarpLoops = 5;
                            PlayerWarpToWaypoint(World.GetWaypointPosition(), false);
                            vTarget_01 = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 10);
                            sMissionVar_01 = sList_01[0];
                            MyMissions.TruckersXM[0].LiveryExtra = 0;
                            MyMissions.TruckersXM[0].VehLivery = 0;
                            VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 17, 0, 26, 1, false);
                            HelperBarBuiler(1, false);
                            iBuildingUp += 1;
                        }
                    }
                    else if (iBuildingUp == 1)
                    {
                        vTarget_01 = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 10);
                        if (ButtonDown(25))
                        {
                            if (WhileButtonDown(47))
                            {
                                MyMissions.TruckersXM[0].VehVar -= 1;
                                if (MyMissions.TruckersXM[0].VehVar < 0)
                                    MyMissions.TruckersXM[0].VehVar = sList_01.Count - 1;

                                sMissionVar_01 = sList_01[MyMissions.TruckersXM[0].VehVar];
                                VehTrackin_01.Delete();
                                VehicleList_01.Remove(VehTrackin_01);
                                MyMissions.TruckersXM[0].LiveryExtra = 0;
                                MyMissions.TruckersXM[0].VehLivery = 0;
                                VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 17, 0, 26, 1, false);
                            }
                            else if (WhileButtonDown(51))
                            {
                                MyMissions.TruckersXM[0].VehVar += 1;
                                if (MyMissions.TruckersXM[0].VehVar > sList_01.Count - 1)
                                    MyMissions.TruckersXM[0].VehVar = 0;

                                sMissionVar_01 = sList_01[MyMissions.TruckersXM[0].VehVar];
                                VehTrackin_01.Delete();
                                VehicleList_01.Remove(VehTrackin_01);
                                MyMissions.TruckersXM[0].LiveryExtra = 0;
                                MyMissions.TruckersXM[0].VehLivery = 0;
                                VehTrackin_01 = null;
                                VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 17, 0, 26, 1, false);
                            }
                            else if (WhileButtonDown(27))
                            {
                                if (MyMissions.TruckersXM[0].VehVar == 0)
                                {
                                    MyMissions.TruckersXM[0].LiveryExtra = 1;
                                    MyMissions.TruckersXM[0].VehLivery = 2;

                                    VehicleMods(VehTrackin_01, 1, 2, false);
                                }
                                else
                                {
                                    int iCounter = Function.Call<int>(Hash.GET_VEHICLE_LIVERY_COUNT, VehTrackin_01);
                                    if (iCounter != -1)
                                    {
                                        MyMissions.TruckersXM[0].LiveryExtra = 5;
                                        if (MyMissions.TruckersXM[0].VehLivery < iCounter)
                                            MyMissions.TruckersXM[0].VehLivery += 1;
                                        else
                                            MyMissions.TruckersXM[0].VehLivery = 0;
                                        VehicleMods(VehTrackin_01, 5, MyMissions.TruckersXM[0].VehLivery, false);
                                    }
                                    else
                                        MyMissions.TruckersXM[0].LiveryExtra = 0;
                                }
                            }
                            else if (WhileButtonDown(173))
                            {
                                if (MyMissions.TruckersXM[0].VehVar == 0)
                                {
                                    MyMissions.TruckersXM[0].LiveryExtra = 1;
                                    MyMissions.TruckersXM[0].VehLivery = 1;

                                    VehicleMods(VehTrackin_01, 1, 1, false);
                                }
                                else
                                {
                                    int iCounter = Function.Call<int>(Hash.GET_VEHICLE_LIVERY_COUNT, VehTrackin_01);
                                    if (iCounter != -1)
                                    {
                                        MyMissions.TruckersXM[0].LiveryExtra = 5;
                                        if (MyMissions.TruckersXM[0].VehLivery > 0)
                                            MyMissions.TruckersXM[0].VehLivery -= 1;
                                        else
                                            MyMissions.TruckersXM[0].VehLivery = iCounter;
                                        VehicleMods(VehTrackin_01, 5, MyMissions.TruckersXM[0].VehLivery, false);
                                    }
                                    else
                                        MyMissions.TruckersXM[0].LiveryExtra = 0;
                                }
                            }
                        }
                        else if (WhileButtonDown(21))
                        {
                            iBuildingUp += 1;
                            if (MyMissions.TruckersXM[0].VehVar == 0)
                                fphdirect = 5.00f;
                            else if (MyMissions.TruckersXM[0].VehVar == 1 || MyMissions.TruckersXM[0].VehVar == 3)
                                fphdirect = 4.00f;
                            else if (MyMissions.TruckersXM[0].VehVar == 2)
                                fphdirect = 3.50f;
                            else if (MyMissions.TruckersXM[0].VehVar == 7 || MyMissions.TruckersXM[0].VehVar == 8)
                                fphdirect = 4.00f;
                            else
                                fphdirect = 2.50f;
                            MyMissions.TruckersXM[0].TruckinTrail = sMissionVar_01;
                            HelperBarBuiler(2, true);
                        }
                        else if (WhileButtonDown(22))
                        {
                            CloseBaseHelpBar();
                            iBuildingUp -= 1;
                            VehTrackin_01.Delete();
                            VehicleList_01.Remove(VehTrackin_01);
                        }
                    }
                    else if (iBuildingUp == 2)
                    {
                        if (Game.Player.Character.FreezePosition)
                            Game.Player.Character.FreezePosition = false;

                        if (ButtonDown(25))
                        {
                            if (ButtonDown(47))
                                fGetDir -= 1.00f;
                            else if (ButtonDown(51))
                                fGetDir += 1.00f;
                            else if (ButtonDown(34))
                                vGetaway = VehTrackin_01.Position - (VehTrackin_01.RightVector * 0.10f);
                            else if (ButtonDown(35))
                                vGetaway = VehTrackin_01.Position + (VehTrackin_01.RightVector * 0.10f);
                            else if (ButtonDown(32))
                                vGetaway = VehTrackin_01.Position + (VehTrackin_01.ForwardVector * 0.10f);
                            else if (ButtonDown(33))
                                vGetaway = VehTrackin_01.Position - (VehTrackin_01.ForwardVector * 0.10f);
                            else if (VehTrackin_01.Position.DistanceTo(Game.Player.Character.Position) > 75.00f)
                                vGetaway = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 10);

                            if (!Game.Player.Character.FreezePosition)
                                Game.Player.Character.FreezePosition = true;

                            float fGround = World.GetGroundHeight(new Vector2(vGetaway.X, vGetaway.Y));
                            VehTrackin_01.Position = new Vector3(vGetaway.X, vGetaway.Y, fGround + fphdirect);
                            VehTrackin_01.Rotation = new Vector3(0.00f, 0.00f, fGetDir);
                        }
                        else if (WhileButtonDown(21))
                        {
                            sList_01.Clear();
                            iBuildingUp += 1;
                            if (MyMissions.TruckersXM[0].VehVar == 0 || MyMissions.TruckersXM[0].VehVar == 1)
                                sList_01 = BuildMishLists(1);
                            else if (MyMissions.TruckersXM[0].VehVar == 2 || MyMissions.TruckersXM[0].VehVar == 3)
                                sList_01 = BuildMishLists(3);
                            else
                                sList_01 = BuildMishLists(2);
                            VehTrackin_01.FreezePosition = true;
                            MyMissions.TruckersXM[0].TruckinStart01 = vGetaway;
                            MyMissions.TruckersXM[0].TruckinDir01 = fGetDir;
                            WhereAreYou();
                            MyMissions.TruckersXM[0].Local = iLocationX;
                            MyMissions.TruckersXM[0].FubarStop = World.GetNextPositionOnStreet(Game.Player.Character.Position);
                            VehicleSpawn(sList_01[0], Game.Player.Character.Position, Game.Player.Character.Heading, true, false, false, false, 18, 0, 26, 2, false);
                            HelperBarBuiler(3, true);
                        }
                        else if (WhileButtonDown(22))
                        {
                            iBuildingUp -= 1;
                            HelperBarBuiler(1, true);
                        }
                        else
                        {
                            fGetDir = VehTrackin_01.Heading;
                            vGetaway = VehTrackin_01.Position;
                        }

                    }
                    else if (iBuildingUp == 3)
                    {  
                        if (ButtonDown(25))
                        {
                            if (WhileButtonDown(21))
                            {
                                Game.Player.Character.Task.LeaveVehicle();
                                iBuildingUp += 1;
                                MyMissions.TruckersXM[0].TruckinStart02 = VehTrackin_02.Position;
                                MyMissions.TruckersXM[0].TruckinDir02 = VehTrackin_02.Heading;
                                CloseBaseHelpBar();
                            }
                            else if (WhileButtonDown(22))
                            {
                                sList_01 = BuildMishLists(4);
                                Game.Player.Character.Task.LeaveVehicle();
                                VehicleList_01.Remove(VehTrackin_02);
                                VehTrackin_02.Delete();
                                VehTrackin_01.FreezePosition = false;
                                iBuildingUp -= 1;
                                HelperBarBuiler(2, true);
                            }
                        }
                    }
                    else if (iBuildingUp == 4)
                    {
                        ControlerUI(sAltLang[519], 1);
                        if (Function.Call<bool>(Hash.IS_WAYPOINT_ACTIVE))
                        {
                            iWarpLoops = 5;
                            PlayerWarpToWaypoint(World.GetWaypointPosition(), false);

                            vTarget_01 = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 10);
                            VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 17, 0, 26, 3, false);
                            iBuildingUp += 1;
                            HelperBarBuiler(2, false);
                        }
                        else if (WhileButtonDown(22))
                        {
                            if (BeOnOff[0])
                            {
                                HelperBarBuiler(4, false);
                                iBuildingUp = 6;
                            }
                            else
                            {
                                HelperBarBuiler(3, false);
                                iBuildingUp -= 1;
                            }
                        }
                    }
                    else if (iBuildingUp == 5)
                    {
                        if (Game.Player.Character.FreezePosition)
                            Game.Player.Character.FreezePosition = false;

                        if (ButtonDown(25))
                        {
                            if (ButtonDown(47))
                                fGetDir -= 1.00f;
                            else if (ButtonDown(51))
                                fGetDir += 1.00f;
                            else if (ButtonDown(34))
                                vGetaway = VehTrackin_03.Position - (VehTrackin_03.RightVector * 0.10f);
                            else if (ButtonDown(35))
                                vGetaway = VehTrackin_03.Position + (VehTrackin_03.RightVector * 0.10f);
                            else if (ButtonDown(32))
                                vGetaway = VehTrackin_03.Position + (VehTrackin_03.ForwardVector * 0.10f);
                            else if (ButtonDown(33))
                                vGetaway = VehTrackin_03.Position - (VehTrackin_03.ForwardVector * 0.10f);
                            else if (VehTrackin_03.Position.DistanceTo(Game.Player.Character.Position) > 75.00f)
                                vGetaway = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 10);

                            if (!Game.Player.Character.FreezePosition)
                                Game.Player.Character.FreezePosition = true;

                            float fGround = World.GetGroundHeight(new Vector2(vGetaway.X, vGetaway.Y));
                            VehTrackin_03.Position = new Vector3(vGetaway.X, vGetaway.Y, fGround + fphdirect);
                            VehTrackin_03.Rotation = new Vector3(0.00f, 0.00f, fGetDir);
                        }
                        else if (WhileButtonDown(21))
                        {
                            VehTrackin_03.FreezePosition = true;
                            fList_01.Add(fGetDir);
                            VectorList_01.Add(vGetaway);
                            VehicleList_01.Remove(VehTrackin_03);
                            VehTrackin_03.Delete();
                            Game.Player.Character.FreezePosition = false;
                            iBuildingUp += 1;
                            HelperBarBuiler(4, true);
                        }
                        else if (WhileButtonDown(22))
                        {
                            VehTrackin_03.Delete();
                            VehicleList_01.Remove(VehTrackin_03);
                            Game.Player.Character.FreezePosition = false;
                            iBuildingUp -= 1;
                            CloseBaseHelpBar();
                        }
                        else
                        {
                            fGetDir = VehTrackin_03.Heading;
                            vGetaway = VehTrackin_03.Position;
                        }
                    }
                    else if (iBuildingUp == 6)
                    {
                        if (WhileButtonDown(21))
                        {
                            BeOnOff[0] = true;
                            iBuildingUp = 4;
                            CloseBaseHelpBar();
                        }
                        else if (WhileButtonDown(22))
                        {
                            VectorList_01.RemoveAt(VectorList_01.Count - 1);
                            fList_01.RemoveAt(fList_01.Count - 1);
                            BeOnOff[0] = true;
                            iBuildingUp = 4;
                            CloseBaseHelpBar();
                        }
                        else if (WhileButtonDown(23))
                        {
                            bBuildMode = false;
                            iBuildingUp += 1;
                            CloseBaseHelpBar();
                            CleanUpVehicles();
                            MyMissions.TruckersXM[0].TruckinDir03 = new List<float>(fList_01);
                            MyMissions.TruckersXM[0].TruckinEnd = new List<Vector3>(VectorList_01);
                            VectorList_01.Clear();
                            fList_01.Clear();
                            bTestRun = true;
                            Truckin();
                            SlowFastTravel(vFuMiss, 0.00f);
                            Game.Player.IsInvincible = false;
                        }
                    }
                    else if (iBuildingUp == 7)
                    {
                        if (ButtonDown(25))
                        {
                            if (WhileButtonDown(21))
                            {
                                sList_01 = BuildMishLists(7);
                                if (sList_01.Count > 0)
                                {
                                    iBuildingUp = 10;
                                    BackToBuildMenu(1);
                                }
                                else
                                {
                                    string sFileName = "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/" + Game.GetUserInput(255) + ".XML";
                                    BuildMissions(iBuildMode, sFileName);
                                    PostMess();
                                    iBuildMode = 99;
                                }
                            }
                            else if (WhileButtonDown(22))
                            {
                                MyMissions.TruckersXM.Clear();
                                iBuildMode = 99;
                                PostMess();
                            }
                        }
                    }
                    else if (iBuildingUp == 8)
                    {
                        if (ButtonDown(25))
                        {
                            if (WhileButtonDown(21))
                            {
                                PostMess();
                                bBuildMode = false;
                                iBuildingUp = 7;
                                bTestRun = true;
                                Truckin();
                                SlowFastTravel(vFuMiss, 0.00f);
                                Game.Player.IsInvincible = false;
                            }
                            else if (WhileButtonDown(22))
                            {
                                MyMissions.TruckersXM.Clear();
                                iBuildMode = 99;
                                PostMess();
                            }
                        }
                    }
                }            //Trucking
                else if (iBuildMode == 2)
                {
                    if (iBuildingUp == 0)
                    {
                        ControlerUI(sAltLang[518], 1);

                        if (Function.Call<bool>(Hash.IS_WAYPOINT_ACTIVE))
                        {
                            MyMissions.PackersXM.Clear();
                            PackBuild Packy = new PackBuild();
                            MyMissions.PackersXM.Add(Packy);

                            sList_01.Clear();
                            sList_01 = BuildMishLists(5);
                            iMissionVar_01 = 0;
                            fMission_01 = 0.00f;
                            VectorList_01.Clear();
                            iWarpLoops = 5;
                            PlayerWarpToWaypoint(World.GetWaypointPosition(), false);
                            sMissionVar_01 = sList_01[0];
                            MyMissions.PackersXM[0].Livery = -1;
                            vTarget_01 = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 10);
                            VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 17, 0, 26, 1, false);
                            HelperBarBuiler(1, false);
                            iBuildingUp += 1;
                        }
                    }
                    else if (iBuildingUp == 1)
                    {
                        vTarget_01 = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 10);

                        if (WhileButtonDown(47))
                        {
                            iMissionVar_01 -= 1;
                            if (iMissionVar_01 < 0)
                                iMissionVar_01 = sList_01.Count - 1;

                            sMissionVar_01 = sList_01[iMissionVar_01];
                            VehTrackin_01.Delete();
                            VehicleList_01.Remove(VehTrackin_01);
                            VehTrackin_01 = null;
                            VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 17, 0, 26, 1, false);
                        }
                        else if (WhileButtonDown(51))
                        {
                            iMissionVar_01 += 1;
                            if (iMissionVar_01 > sList_01.Count - 1)
                                iMissionVar_01 = 0;

                            sMissionVar_01 = sList_01[iMissionVar_01];
                            VehTrackin_01.Delete();
                            VehicleList_01.Remove(VehTrackin_01);
                            MyMissions.PackersXM[0].Livery = -1;
                            VehTrackin_01 = null;
                            VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 17, 0, 26, 1, false);
                        }
                        else if (WhileButtonDown(27))
                        {
                            int iCounter = Function.Call<int>(Hash.GET_VEHICLE_LIVERY_COUNT, VehTrackin_01);
                            if (iCounter != -1)
                            {
                                if (MyMissions.PackersXM[0].Livery < iCounter)
                                    MyMissions.PackersXM[0].Livery += 1;
                                else
                                    MyMissions.PackersXM[0].Livery = -1;
                                VehicleMods(VehTrackin_01, 5, MyMissions.PackersXM[0].Livery, false);
                            }
                        }
                        else if (WhileButtonDown(173))
                        {
                            int iCounter = Function.Call<int>(Hash.GET_VEHICLE_LIVERY_COUNT, VehTrackin_01);
                            if (iCounter != -1)
                            {
                                if (MyMissions.PackersXM[0].Livery > 0)
                                    MyMissions.PackersXM[0].Livery -= 1;
                                else
                                    MyMissions.PackersXM[0].Livery = iCounter;
                                VehicleMods(VehTrackin_01, 5, MyMissions.PackersXM[0].Livery, false);
                            }
                        }
                        else if (WhileButtonDown(21))
                        {
                            iBuildingUp += 1;
                            VehicleWarp(VehTrackin_01, Game.Player.Character, 1);
                            HelperBarBuiler(3, true);
                        }
                        else if (WhileButtonDown(22))
                        {
                            CloseBaseHelpBar();
                            iBuildingUp -= 1;
                            MyMissions.PackersXM[0].Livery = -1;
                            VehTrackin_01.Delete();
                            VehicleList_01.Remove(VehTrackin_01);
                        }
                    }
                    else if (iBuildingUp == 2)
                    {
                        if (ButtonDown(25))
                        {
                            if (WhileButtonDown(21))
                            {
                                MyMissions.PackersXM[0].PackVehType = sMissionVar_01;

                                sList_01 = BuildMishLists(6);
                                sMissionVar_01 = sList_01[iMissionVar_01];
                                if (iMissionVar_01 == 0)
                                    fMission_01 = 1.00f;
                                else if (iMissionVar_01 == 1)
                                    fMission_01 = 1.00f;
                                else if (iMissionVar_01 == 2)
                                    fMission_01 = 0.80f;
                                else if (iMissionVar_01 == 3)
                                    fMission_01 = 0.70f;
                                else if (iMissionVar_01 == 4)
                                    fMission_01 = 1.00f;
                                else if (iMissionVar_01 == 5)
                                    fMission_01 = 0.5f;
                                else
                                    fMission_01 = 1.00f;
                                MyMissions.PackersXM[0].PackDropType = sMissionVar_01;
                                iMissionVar_01 = 0;

                                Game.Player.Character.Task.LeaveVehicle();
                                iBuildingUp += 1;
                                WhereAreYou();
                                MyMissions.PackersXM[0].Local = iLocationX;
                                MyMissions.PackersXM[0].FarstStart = World.GetNextPositionOnStreet(Game.Player.Character.Position);
                                MyMissions.PackersXM[0].PackVehStart = VehTrackin_01.Position;
                                MyMissions.PackersXM[0].PackVehDir = VehTrackin_01.Heading;

                                VehicleList_01.Remove(VehTrackin_01);
                                VehTrackin_01.Delete();
                                Prop_01 = BuildProp(sMissionVar_01, vTarget_01, Vector3.Zero, false, false);
                                Prop_01.HasCollision = false;
                                HelperBarBuiler(6, true);
                            }
                            else if (WhileButtonDown(22))
                            {
                                Game.Player.Character.Task.LeaveVehicle();
                                VehicleList_01.Remove(VehTrackin_01);
                                VehTrackin_01.Delete();
                                sList_01 = BuildMishLists(5);
                                iBuildingUp -= 1;
                                HelperBarBuiler(1, false);
                            }
                        }
                    }
                    else if (iBuildingUp == 3)
                    {
                        ControlerUI(sAltLang[518], 1);
                        vTarget_01 = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 2.50f);
                        Prop_01.Position = vTarget_01;
                        Function.Call(Hash.PLACE_OBJECT_ON_GROUND_PROPERLY, Prop_01.Handle);
                        if (ButtonDown(25))
                        {
                            if (WhileButtonDown(22))
                            {
                                if (VectorList_01.Count == 0)
                                {
                                    iBuildingUp -= 2;
                                    Prop_01.Delete();
                                    PropList_01.Remove(Prop_01);
                                    sList_01 = BuildMishLists(5);
                                    HelperBarBuiler(1, true);
                                    VectorList_01.Clear();
                                    CleanFakeBlips();
                                }
                                else
                                {
                                    VectorList_01.RemoveAt(VectorList_01.Count - 1);
                                    PropList_01[PropList_01.Count - 1].Delete();
                                    PropList_01.RemoveAt(PropList_01.Count - 1);
                                    BlipList_01[BlipList_01.Count - 1].Remove();
                                    BlipList_01.RemoveAt(BlipList_01.Count - 1);
                                }
                            }
                            else if (WhileButtonDown(21))
                            {
                                Prop pMark = BuildProp(sMissionVar_01, vTarget_01, Vector3.Zero, true, false);
                                FakeBlimbs(vTarget_01, BlipSprite.Crosshair2, false);
                                Function.Call(Hash.PLACE_OBJECT_ON_GROUND_PROPERLY, pMark.Handle);
                                Vector3 VBoxer = new Vector3(pMark.Position.X, pMark.Position.Y, pMark.Position.Z + fMission_01);
                                VectorList_01.Add(VBoxer);
                                UI.Notify("Drop No == " + VectorList_01.Count);
                            }
                            else if (WhileButtonDown(23))
                            {
                                if (VectorList_01.Count > 0)
                                {
                                    CleanFakeBlips();
                                    bBuildMode = false;
                                    iBuildingUp += 1;
                                    Prop_01.Delete();
                                    PropList_01.Remove(Prop_01);
                                    MyMissions.PackersXM[0].PackDrops = new List<Vector3>(VectorList_01);
                                    VectorList_01.Clear();
                                    CleanUpProps();
                                    CloseBaseHelpBar();
                                    bTestRun = true;
                                    Packages();
                                    SlowFastTravel(vFuMiss, 0.00f);
                                    Game.Player.IsInvincible = false;
                                }
                                else
                                    UI.Notify("No Drops");
                            }
                        }
                        else if (Function.Call<bool>(Hash.IS_WAYPOINT_ACTIVE))
                        {
                            iWarpLoops = 5;
                            PlayerWarpToWaypoint(World.GetWaypointPosition(), false);
                        }
                    }
                    else if (iBuildingUp == 4)
                    {
                        if (ButtonDown(25))
                        {
                            if (WhileButtonDown(21))
                            {
                                sList_01 = BuildMishLists(7);
                                if (sList_01.Count > 0)
                                {
                                    iBuildingUp = 10;
                                    BackToBuildMenu(1);
                                }
                                else
                                {
                                    string sFileName = "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/" + Game.GetUserInput(255) + ".XML";
                                    BuildMissions(iBuildMode, sFileName);
                                    PostMess();
                                    iBuildMode = 99;
                                }
                            }
                            else if (WhileButtonDown(22))
                            {
                                MyMissions.PackersXM.Clear();
                                iBuildMode = 99;
                                PostMess();
                            }
                        }
                    }
                    else if (iBuildingUp == 8)
                    {
                        if (ButtonDown(25))
                        {
                            if (WhileButtonDown(21))
                            {
                                PostMess();
                                iBuildingUp = 4;
                                bBuildMode = false;
                                bTestRun = true;
                                Packages();
                                SlowFastTravel(vFuMiss, 0.00f);
                                Game.Player.IsInvincible = false;
                            }
                            else if (WhileButtonDown(22))
                            {
                                MyMissions.PackersXM.Clear();
                                iBuildMode = 99;
                                PostMess();
                            }
                        }
                    }
                }       //Packages
                else if (iBuildMode == 3)
                {
                    if (iBuildingUp == 0)
                    {
                        ControlerUI(sAltLang[518], 1);
                        if (Function.Call<bool>(Hash.IS_WAYPOINT_ACTIVE))
                        {
                            ConsBuild Conny = new ConsBuild();
                            MyMissions.ConsXM.Add(Conny);

                            VectorList_01.Clear();
                            PlayerWarpToWaypoint(World.GetWaypointPosition(), false);
                            HelperBarBuiler(1, false);
                            iBuildingUp += 1;
                        }
                    }
                    else if (iBuildingUp == 1)
                    {
                        if (ButtonDown(25))
                        {
                            if (WhileButtonDown(22))
                            {
                                if (VectorList_01.Count > 0)
                                {
                                    VectorList_01.RemoveAt(VectorList_01.Count - 1);
                                    BlipList_01[BlipList_01.Count - 1].Remove();
                                    BlipList_01.RemoveAt(BlipList_01.Count - 1);
                                }
                                else
                                {
                                    iBuildingUp -= 1;
                                    CleanFakeBlips();
                                    CloseBaseHelpBar();
                                    VectorList_01.Clear();
                                }
                            }
                            else if (WhileButtonDown(21))
                            {
                                FakeBlimbs(Game.Player.Character.Position, BlipSprite.Crosshair2, false);
                                VectorList_01.Add(Game.Player.Character.Position);
                                UI.Notify("Stop No == " + VectorList_01.Count);
                            }
                            else if (WhileButtonDown(23))
                            {
                                if (VectorList_01.Count > 1)
                                {
                                    WhereAreYou();
                                    bBuildMode = false;
                                    iBuildingUp += 1;
                                    CleanFakeBlips();
                                    MyMissions.ConsXM[0].ConMarch = new List<Vector3>(VectorList_01);
                                    MyMissions.ConsXM[0].Local = iLocationX;
                                    VectorList_01.Clear();
                                    CloseBaseHelpBar();
                                    bTestRun = true;
                                    Convicts();
                                    SlowFastTravel(vFuMiss, 0.00f);
                                    Game.Player.IsInvincible = false;
                                }
                                else
                                    UI.Notify("No Drops");
                            }
                        }
                    }
                    else if (iBuildingUp == 2)
                    {
                        if (ButtonDown(25))
                        {
                            if (WhileButtonDown(21))
                            {
                                sList_01 = BuildMishLists(7);
                                if (sList_01.Count > 0)
                                {
                                    iBuildingUp = 10;
                                    BackToBuildMenu(1);
                                }
                                else
                                {
                                    string sFileName = "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/" + Game.GetUserInput(255) + ".XML";
                                    BuildMissions(iBuildMode, sFileName);
                                    PostMess();
                                    iBuildMode = 99;
                                }
                            }
                            else if (WhileButtonDown(22))
                            {
                                iBuildMode = 99;
                                MyMissions.ConsXM.Clear();
                                PostMess();
                            }
                        }
                    }
                    else if (iBuildingUp == 8)
                    {
                        if (ButtonDown(25))
                        {
                            if (WhileButtonDown(21))
                            {
                                PostMess();
                                bBuildMode = false;
                                iBuildingUp = 2;
                                bTestRun = true;
                                Convicts();
                                SlowFastTravel(vFuMiss, 0.00f);
                                Game.Player.IsInvincible = false;
                            }
                            else if (WhileButtonDown(22))
                            {
                                iBuildMode = 99;
                                MyMissions.ConsXM.Clear();
                                PostMess();
                            }
                        }
                    }
                }       //Convicts
                else if (iBuildMode == 4)
                {
                    if (iBuildingUp == 0)
                    {
                        VehicleSpawn("Dilettante", World.GetNextPositionOnStreet(Game.Player.Character.Position), 90.00f, true, false, false, true, 2, 11, 26, 1, true);
                        VehicleWarp(VehTrackin_01, Game.Player.Character, 1);
                        HelperBarBuiler(1, false);
                        iBuildingUp += 1;
                    }
                    else if (iBuildingUp == 1)
                    {
                        if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                        {
                            ControlerUI(sAltLang[518], 1);

                            if (ButtonDown(25))
                            {
                                if (WhileButtonDown(21))
                                {
                                    vTarget_01 = VehTrackin_01.Position;
                                    FakeBlimbs(vTarget_01, BlipSprite.Crosshair2, false);
                                    Function.Call(Hash.TASK_LEAVE_VEHICLE, Game.Player.Character, VehTrackin_01, 4160);
                                    HelperBarBuiler(2, true);
                                    iBuildingUp += 1;
                                }
                            }
                            else if (Function.Call<bool>(Hash.IS_WAYPOINT_ACTIVE))
                            {
                                iWarpLoops = 5;
                                PlayerWarpToWaypoint(World.GetWaypointPosition(), true);
                            }

                        }
                        else
                            ControlerUI(sAltLang[520], 1);
                    }
                    else if (iBuildingUp == 2)
                    {
                        if (!Game.Player.Character.IsInVehicle())
                        {
                            if (ButtonDown(25))
                            {
                                if (WhileButtonDown(21))
                                {
                                    WhereAreYou();
                                    FuberBuild Fubyar = new FuberBuild();
                                    Fubyar.Local = iLocationX;
                                    Fubyar.FUbarCar = vTarget_01;
                                    Fubyar.FUbarPed = Game.Player.Character.Position;
                                    MyMissions.FubardXM.Add(Fubyar);
                                    FakeBlimbs(vTarget_01, BlipSprite.Crosshair2, false);
                                    HelperBarBuiler(3, true);
                                    iBuildingUp += 1;
                                }
                            }
                        }
                        else
                            ControlerUI(sAltLang[178] + sAltLang[128], 1);
                    }
                    else if (iBuildingUp == 3)
                    {
                        if (ButtonDown(25))
                        {
                            if (WhileButtonDown(21))
                            {
                                iBuildingUp = 1;
                                HelperBarBuiler(1, true);
                                VehicleWarp(VehTrackin_01, Game.Player.Character, 1);
                            }
                            else if (WhileButtonDown(23))
                            {
                                CloseBaseHelpBar();
                                VehTrackin_01.Delete();
                                VehicleList_01.Remove(VehTrackin_01);
                                CleanFakeBlips();
                                bBuildMode = false;
                                iTestKit = 0;
                                iBuildingUp += 1;
                                bTestRun = true;
                                FUber();
                            }
                        }
                    }
                    else if (iBuildingUp == 4)
                    {
                        if (ButtonDown(25))
                        {
                            if (WhileButtonDown(21))
                            {
                                sList_01 = BuildMishLists(7);
                                if (sList_01.Count > 0)
                                {
                                    iBuildingUp = 10;
                                    BackToBuildMenu(1);
                                }
                                else
                                {
                                    string sFileName = "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/" + Game.GetUserInput(255) + ".XML";
                                    BuildMissions(iBuildMode, sFileName);
                                    PostMess();
                                    iBuildMode = 99;
                                }
                            }
                            else if (WhileButtonDown(22))
                            {
                                MyMissions.FubardXM.Clear();
                                iBuildMode = 99;
                                PostMess();
                            }
                        }
                    }
                    else if (iBuildingUp == 8)
                    {
                        if (ButtonDown(25))
                        {
                            if (WhileButtonDown(21))
                            {
                                PostMess();
                                bBuildMode = false;
                                bMoreFubar = false;
                                iBuildingUp = 4;
                                iTestKit = 0;
                                bTestRun = true;
                                FUber();
                            }
                            else if (WhileButtonDown(22))
                            {
                                MyMissions.FubardXM.Clear();
                                iBuildMode = 99;
                                PostMess();
                            }
                        }
                    }
                }       //FUber
                else if (iBuildMode == 5)
                {
                    if (iBuildingUp == 0)
                    {
                        iBuildingUp += 1;
                        HelperBarBuiler(1, false);
                    }
                    else if (iBuildingUp == 1)
                    {
                        ControlerUI(sAltLang[518], 1);
                        if (ButtonDown(25))
                        {
                            if (WhileButtonDown(21))
                            {
                                WhereAreYou();
                                AmbBuild Ambuly = new AmbBuild();
                                Ambuly.Local = iLocationX;
                                Ambuly.AmbPed = Game.Player.Character.Position;
                                FakeBlimbs(Game.Player.Character.Position, BlipSprite.Crosshair2, false);
                                MyMissions.AmbuXM.Add(Ambuly);
                                UI.Notify("Stop No == " + MyMissions.AmbuXM.Count);
                            }
                            else if (WhileButtonDown(23))
                            {
                                if (MyMissions.AmbuXM.Count > 0)
                                {
                                    bBuildMode = false;
                                    iBuildingUp += 1;
                                    CleanFakeBlips();
                                    CloseBaseHelpBar();
                                    bTestRun = true;
                                    iTestKit = 0;
                                    Ambulance();
                                    SlowFastTravel(vFuMiss, 0.00f);
                                    Game.Player.IsInvincible = false;
                                }
                                else
                                    UI.Notify("No Drops");
                            }
                        }
                        else if (Function.Call<bool>(Hash.IS_WAYPOINT_ACTIVE))
                            PlayerWarpToWaypoint(World.GetWaypointPosition(), false);
                    }
                    else if (iBuildingUp == 2)
                    {
                        if (ButtonDown(25))
                        {
                            if (WhileButtonDown(21))
                            {
                                sList_01 = BuildMishLists(7);
                                if (sList_01.Count > 0)
                                {
                                    iBuildingUp = 10;
                                    BackToBuildMenu(1);
                                }
                                else
                                {
                                    string sFileName = "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/" + Game.GetUserInput(255) + ".XML";
                                    BuildMissions(iBuildMode, sFileName);
                                    PostMess();
                                    iBuildMode = 99;
                                }
                            }
                        }
                        else if (WhileButtonDown(22))
                        {
                            MyMissions.AmbuXM.Clear();
                            iBuildMode = 99;
                            PostMess();
                        }
                    }
                    else if (iBuildingUp == 8)
                    {
                        if (ButtonDown(25))
                        {
                            if (WhileButtonDown(21))
                            {
                                PostMess();
                                bBuildMode = false;
                                iBuildingUp = 2;
                                bTestRun = true;
                                iTestKit = 0;
                                Ambulance();
                                SlowFastTravel(vFuMiss, 0.00f);
                                Game.Player.IsInvincible = false;
                            }
                            else if (WhileButtonDown(22))
                            {
                                iBuildMode = 99;
                                MyMissions.AmbuXM.Clear();
                                PostMess();
                            }
                        }
                    }
                }       //Ambulance
                else if (iBuildMode == 6)
                {
                    if (iBuildingUp == 0)
                    {
                        ControlerUI(sAltLang[518], 1);

                        if (Function.Call<bool>(Hash.IS_WAYPOINT_ACTIVE))
                        {
                            MyMissions.SharksXM.Clear();
                            DeapBuild Deepy = new DeapBuild();
                            MyMissions.SharksXM.Add(Deepy);
                            PlayerWarpToWaypoint(World.GetWaypointPosition(), false);
                            iBuildingUp += 1;
                        }
                    }
                    else if (iBuildingUp == 1)
                    {
                        if (Game.Player.Character.IsInWater)
                        {
                            VehicleSpawn("SUBMERSIBLE2", Game.Player.Character.Position, 90.00f, true, false, false, false, 18, 0, 26, 1, false);
                            HelperBarBuiler(1, false);
                            iBuildingUp += 1;
                        }
                        else
                        {
                            ControlerUI(sAltLang[518], 1);

                            if (Function.Call<bool>(Hash.IS_WAYPOINT_ACTIVE))
                                PlayerWarpToWaypoint(World.GetWaypointPosition(), false);
                        }
                    }
                    else if (iBuildingUp == 2)
                    {
                        if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                        {
                            ControlerUI(sAltLang[518], 1);

                            if (Function.Call<bool>(Hash.IS_WAYPOINT_ACTIVE))
                                PlayerWarpToWaypoint(World.GetWaypointPosition(), true);

                            if (ButtonDown(25))
                            {
                                if (WhileButtonDown(21))
                                {
                                    WhereAreYou();
                                    MyMissions.SharksXM[0].StartPoint = VehTrackin_01.Position;
                                    MyMissions.SharksXM[0].Local = iLocationX;
                                    FakeBlimbs(VehTrackin_01.Position, BlipSprite.Crosshair2, false);
                                    HelperBarBuiler(2, false);
                                    iBuildingUp += 1;
                                }
                            }
                        }
                        else
                            ControlerUI(sAltLang[103] + sAltLang[287], 1);
                    }
                    else if (iBuildingUp == 3)
                    {
                        if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                        {
                            ControlerUI(sAltLang[518], 1);

                            if (Function.Call<bool>(Hash.IS_WAYPOINT_ACTIVE))
                                PlayerWarpToWaypoint(World.GetWaypointPosition(), true);

                            if (ButtonDown(25))
                            {
                                if (WhileButtonDown(21))
                                {
                                    WhereAreYou();
                                    CleanFakeBlips();
                                    MyMissions.SharksXM[0].SubSpawn = VehTrackin_01.Position;
                                    MyMissions.SharksXM[0].SubHead = VehTrackin_01.Heading;
                                    MyMissions.SharksXM[0].FubStop = World.GetNextPositionOnStreet(VehTrackin_01.Position);
                                    Function.Call(Hash.TASK_LEAVE_VEHICLE, Game.Player.Character, VehTrackin_01, 4160);
                                    VehTrackin_01.Delete();
                                    VehicleList_01.Remove(VehTrackin_01);
                                    CloseBaseHelpBar();
                                    iBuildingUp += 1;
                                    bBuildMode = false;
                                    bTestRun = true;
                                    DeepDown();
                                    SlowFastTravel(vFuMiss, 0.00f);
                                    Game.Player.IsInvincible = false;
                                }
                            }
                        }
                        else
                            ControlerUI(sAltLang[103] + sAltLang[287], 1);
                    }
                    else if (iBuildingUp == 4)
                    {
                        if (ButtonDown(25))
                        {
                            if (WhileButtonDown(21))
                            {
                                sList_01 = BuildMishLists(7);
                                if (sList_01.Count > 0)
                                {
                                    iBuildingUp = 10;
                                    BackToBuildMenu(1);
                                }
                                else
                                {
                                    string sFileName = "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/" + Game.GetUserInput(255) + ".XML";
                                    BuildMissions(iBuildMode, sFileName);
                                    PostMess();
                                    iBuildMode = 99;
                                }
                            }
                            else if (WhileButtonDown(22))
                            {
                                MyMissions.SharksXM.Clear();
                                iBuildMode = 99;
                                PostMess();
                            }
                        }
                    }
                    else if (iBuildingUp == 8)
                    {
                        if (ButtonDown(25))
                        {
                            if (WhileButtonDown(21))
                            {
                                PostMess();
                                bBuildMode = false;
                                iBuildingUp = 4;
                                bTestRun = true;
                                DeepDown();
                                SlowFastTravel(vFuMiss, 0.00f);
                                Game.Player.IsInvincible = false;
                            }
                            else if (WhileButtonDown(22))
                            {
                                MyMissions.SharksXM.Clear();
                                iBuildMode = 99;
                                PostMess();
                            }
                        }
                    }
                }       //Sharks
                else if (iBuildMode == 7)
                {
                    if (iBuildingUp == 0)
                    {
                        ControlerUI(sAltLang[518], 1);

                        if (Function.Call<bool>(Hash.IS_WAYPOINT_ACTIVE))
                        {
                            iMissionVar_01 = 0;
                            iMissionVar_02 = 1;
                            sList_01.Clear();
                            sList_01 = RandVeh(iMissionVar_02);
                            sMissionVar_01 = sList_01[iMissionVar_01];

                            PlayerWarpToWaypoint(World.GetWaypointPosition(), false);
                            vTarget_01 = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 5);

                            VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 0, 0, 26, 1, true);

                            HelperBarBuiler(1, false);
                            iBuildingUp += 1;
                        }
                    }
                    else if (iBuildingUp == 1)
                    {
                        vTarget_01 = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 5);

                        if (WhileButtonDown(47))
                        {
                            iMissionVar_01 -= 1;
                            if (iMissionVar_01 < 0)
                                iMissionVar_01 = sList_01.Count - 1;

                            sMissionVar_01 = sList_01[iMissionVar_01];
                            VehTrackin_01.Delete();
                            VehicleList_01.Remove(VehTrackin_01);
                            VehTrackin_01 = null;
                            VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 0, 0, 26, 1, true);
                        }
                        else if (WhileButtonDown(51))
                        {
                            iMissionVar_01 += 1;
                            if (iMissionVar_01 > sList_01.Count - 1)
                                iMissionVar_01 = 0;

                            sMissionVar_01 = sList_01[iMissionVar_01];
                            VehTrackin_01.Delete();
                            VehicleList_01.Remove(VehTrackin_01);
                            VehTrackin_01 = null;
                            VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 0, 0, 26, 1, true);
                        }
                        else if (WhileButtonDown(27))
                        {
                            iMissionVar_01 = 0;
                            iMissionVar_02 += 1;
                            if (iMissionVar_02 > 14)
                                iMissionVar_02 = 0;
                            sList_01.Clear();
                            sList_01 = RandVeh(iMissionVar_02);
                            sMissionVar_01 = sList_01[iMissionVar_01];
                            VehTrackin_01.Delete();
                            VehicleList_01.Remove(VehTrackin_01);
                            VehTrackin_01 = null;
                            VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 0, 0, 26, 1, true);
                        }
                        else if (WhileButtonDown(173))
                        {
                            iMissionVar_01 = 0;
                            iMissionVar_02 -= 1;
                            if (iMissionVar_02 < 0)
                                iMissionVar_02 = 14;
                            sList_01.Clear();
                            sList_01 = RandVeh(iMissionVar_02);
                            sMissionVar_01 = sList_01[iMissionVar_01];
                            VehTrackin_01.Delete();
                            VehicleList_01.Remove(VehTrackin_01);
                            VehTrackin_01 = null;
                            VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 0, 0, 26, 1, true);
                        }
                        else if (WhileButtonDown(21))
                        {
                            iBuildingUp += 1;
                            VehicleWarp(VehTrackin_01, Game.Player.Character, 1);
                            HelperBarBuiler(2, true);
                        }
                        else if (WhileButtonDown(22))
                        {
                            CloseBaseHelpBar();
                            iBuildingUp -= 1;
                            VehTrackin_01.Delete();
                            VehicleList_01.Remove(VehTrackin_01);
                        }
                    }
                    else if (iBuildingUp == 2)
                    {
                        if (ButtonDown(25))
                        {
                            if (WhileButtonDown(21))
                            {
                                WhereAreYou();
                                JohnnyBuild John = new JohnnyBuild();
                                John.JohnnyCar = sMissionVar_01;
                                John.JohnnyStart = VehTrackin_01.Position;
                                John.JohnnyHeads = VehTrackin_01.Heading;
                                John.FubarStop = World.GetNextPositionOnStreet(VehTrackin_01.Position);
                                John.Local = iLocationX;
                                MyMissions.JohnsXM.Add(John);
                                FakeBlimbs(VehTrackin_01.Position, BlipSprite.Crosshair2, false);
                                iBuildingUp += 1;
                                HelperBarBuiler(2, true);
                            }
                            else if (WhileButtonDown(22))
                            {
                                Function.Call(Hash.TASK_LEAVE_VEHICLE, Game.Player.Character, VehTrackin_01, 4160);
                                VehicleList_01.Remove(VehTrackin_01);
                                VehTrackin_01.Delete();
                                iBuildingUp -= 1;
                                HelperBarBuiler(1, false);
                            }
                        }
                    }
                    else if (iBuildingUp == 3)
                    {
                        if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                        {
                            ControlerUI(sAltLang[518], 1);

                            if (ButtonDown(25))
                            {
                                if (WhileButtonDown(21))
                                {
                                    if (VehTrackin_01.Position.DistanceTo(MyMissions.JohnsXM[0].JohnnyStart) < 50.00f)
                                        UI.Notify(sAltLang[521]);
                                    else
                                    {
                                        MyMissions.JohnsXM[0].JohnnyPark = VehTrackin_01.Position;
                                        Function.Call(Hash.TASK_LEAVE_VEHICLE, Game.Player.Character, VehTrackin_01, 4160);
                                        VehicleList_01.Remove(VehTrackin_01);
                                        VehTrackin_01.Delete();
                                        iBuildingUp += 1;
                                        CleanFakeBlips();
                                        CloseBaseHelpBar();
                                        bBuildMode = false;
                                        bTestRun = true;
                                        HeresJohnny();
                                        SlowFastTravel(vFuMiss, 0.00f);
                                        Game.Player.IsInvincible = false;
                                    }
                                }
                            }
                            else if (Function.Call<bool>(Hash.IS_WAYPOINT_ACTIVE))
                                PlayerWarpToWaypoint(World.GetWaypointPosition(), true);
                        }
                        else
                            ControlerUI(sAltLang[103] + sAltLang[135], 1);
                    }
                    else if (iBuildingUp == 4)
                    {
                        if (ButtonDown(25))
                        {
                            if (ButtonDown(25))
                            {
                                if (WhileButtonDown(21))
                                {
                                    sList_01 = BuildMishLists(7);
                                    if (sList_01.Count > 0)
                                    {
                                        iBuildingUp = 10;
                                        BackToBuildMenu(1);
                                    }
                                    else
                                    {
                                        string sFileName = "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/" + Game.GetUserInput(255) + ".XML";
                                        BuildMissions(iBuildMode, sFileName);
                                        PostMess();
                                        iBuildMode = 99;
                                    }
                                }
                                else if (WhileButtonDown(22))
                                {
                                    MyMissions.JohnsXM.Clear();
                                    iBuildMode = 99;
                                    PostMess();
                                }
                            }
                        }
                    }
                    else if (iBuildingUp == 8)
                    {
                        if (ButtonDown(25))
                        {
                            if (WhileButtonDown(21))
                            {
                                PostMess();
                                bBuildMode = false;
                                iBuildingUp = 4;
                                bTestRun = true;
                                HeresJohnny();
                                SlowFastTravel(vFuMiss, 0.00f);
                                Game.Player.IsInvincible = false;
                            }
                            else if (WhileButtonDown(22))
                            {
                                MyMissions.JohnsXM.Clear();
                                iBuildMode = 99;
                                PostMess();
                            }
                        }
                    }
                }       //Johnny
                else if (iBuildMode == 8)
                {
                    if (iBuildingUp == 0)
                    {
                        ControlerUI(sAltLang[518], 1);

                        if (Function.Call<bool>(Hash.IS_WAYPOINT_ACTIVE))
                        {
                            iMissionVar_01 = 0;
                            iMissionVar_02 = 1;
                            sList_01.Clear();
                            sList_02.Clear();
                            sList_01 = RandVeh(iMissionVar_02);
                            sMissionVar_01 = sList_01[iMissionVar_01];

                            VectorList_01.Clear();
                            fList_01.Clear();

                            PlayerWarpToWaypoint(World.GetWaypointPosition(), false);
                            vTarget_01 = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 5);

                            VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 0, 0, 26, 1, true);

                            HelperBarBuiler(1, false);
                            iBuildingUp += 1;
                        }
                    }
                    else if (iBuildingUp == 1)
                    {
                        vTarget_01 = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 5);

                        if (WhileButtonDown(47))
                        {
                            iMissionVar_01 -= 1;
                            if (iMissionVar_01 < 0)
                                iMissionVar_01 = sList_01.Count - 1;

                            sMissionVar_01 = sList_01[iMissionVar_01];
                            VehTrackin_01.Delete();
                            VehicleList_01.Remove(VehTrackin_01);
                            VehTrackin_01 = null;
                            VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 0, 0, 26, 1, true);
                        }
                        else if (WhileButtonDown(51))
                        {
                            iMissionVar_01 += 1;
                            if (iMissionVar_01 > sList_01.Count - 1)
                                iMissionVar_01 = 0;

                            sMissionVar_01 = sList_01[iMissionVar_01];
                            VehTrackin_01.Delete();
                            VehicleList_01.Remove(VehTrackin_01);
                            VehTrackin_01 = null;
                            VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 0, 0, 26, 1, true);
                        }
                        else if (WhileButtonDown(27))
                        {
                            if (sList_02.Count == 0)
                            {
                                iMissionVar_01 = 0;
                                iMissionVar_02 += 1;
                                if (iMissionVar_02 > 28)
                                    iMissionVar_02 = 0;
                                else if (iMissionVar_02 == 22)
                                    iMissionVar_02 = 24;
                                sList_01.Clear();
                                sList_01 = RandVeh(iMissionVar_02);
                                sMissionVar_01 = sList_01[iMissionVar_01];
                                VehTrackin_01.Delete();
                                VehicleList_01.Remove(VehTrackin_01);
                                VehTrackin_01 = null;
                                VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 0, 0, 26, 1, true);
                            }
                        }
                        else if (WhileButtonDown(173))
                        {
                            if (sList_02.Count == 0)
                            {
                                iMissionVar_01 = 0;
                                iMissionVar_02 -= 1;
                                if (iMissionVar_02 < 0)
                                    iMissionVar_02 = 28;
                                else if (iMissionVar_02 == 23)
                                    iMissionVar_02 = 21;
                                sList_01.Clear();
                                sList_01 = RandVeh(iMissionVar_02);
                                sMissionVar_01 = sList_01[iMissionVar_01];
                                VehTrackin_01.Delete();
                                VehicleList_01.Remove(VehTrackin_01);
                                VehTrackin_01 = null;
                                VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 0, 0, 26, 1, true);
                            }
                        }
                        else if (WhileButtonDown(21))
                        {
                            if (!sList_02.Contains(sMissionVar_01))
                                sList_02.Add(sMissionVar_01);
                            HelperBarBuiler(2, true);
                        }
                        else if (WhileButtonDown(22))
                        {
                            if (sList_02.Count > 0)
                            {
                                iBuildingUp += 1;
                                iMissionVar_01 = 0;
                                VectorList_01.Clear();
                                fList_01.Clear();
                                VehicleWarp(VehTrackin_01, Game.Player.Character, 1);
                                HelperBarBuiler(3, true);
                            }
                        }
                    }
                    else if (iBuildingUp == 2)
                    {
                        if (ButtonDown(25))
                        {
                            if (WhileButtonDown(21))
                            {
                                iMissionVar_01 += 1;
                                VectorList_01.Add(VehTrackin_01.Position);
                                fList_01.Add(VehTrackin_01.Heading);
                                if (iMissionVar_01 == 1)
                                {
                                    WhereAreYou();
                                    vTarget_01 = World.GetNextPositionOnStreet(VehTrackin_01.Position);
                                    HelperBarBuiler(4, true);
                                }
                                else if (iMissionVar_01 < 5)
                                {
                                    HelperBarBuiler(5, true);
                                    VehTrackin_01.Position = VehTrackin_01.Position + (VehTrackin_01.RightVector * 4.00f);
                                }
                                else
                                {
                                    HelperBarBuiler(6, true);
                                    VectorList_02.Clear();
                                    iBuildingUp += 1;
                                }
                            }
                            else if (WhileButtonDown(22))
                            {
                                Function.Call(Hash.TASK_LEAVE_VEHICLE, Game.Player.Character, VehTrackin_01, 4160);
                                VehicleList_01.Remove(VehTrackin_01);
                                VehTrackin_01.Delete();
                                iBuildingUp -= 1;
                                HelperBarBuiler(1, false);
                            }
                        }
                    }
                    else if (iBuildingUp == 3)
                    {
                        if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                        {
                            vTarget_02 = Game.Player.Character.Position;
                            MarkerType Mt = MarkerType.VerticalCylinder;
                            if (iMissionVar_02 == 24 || iMissionVar_02 == 25 || iMissionVar_02 == 28)
                                Mt = MarkerType.VerticleCircle;
                            World.DrawMarker(Mt, vTarget_02, Vector3.Zero, Vector3.Zero, new Vector3(10.00f, 10.00f, 2.00f),Color.Yellow);

                            if (ButtonDown(25))
                            {
                                if (WhileButtonDown(21))
                                {
                                    VectorList_02.Add(vTarget_02);
                                    FakeBlimbs(vTarget_02, BlipSprite.Crosshair2, false);
                                }
                                else if (WhileButtonDown(23))
                                {
                                    if (VectorList_02.Count > 2)
                                    {
                                        RaceBuild Racey = new RaceBuild();
                                        Racey.Local = iLocationX;
                                        Racey.FubStop = vTarget_01;
                                        Racey.RaceCars = new List<Vector3>(VectorList_01);
                                        Racey.RaceHead = new List<float>(fList_01);
                                        Racey.TheRace = new List<Vector3>(VectorList_02);
                                        Racey.VehClass = iMissionVar_02;
                                        Racey.AvalableVeh = new List<string>(sList_02);

                                        MyMissions.RaceXM.Add(Racey);
                                        bBuildMode = false;
                                        iBuildingUp += 1;
                                        VehicleList_01.Remove(VehTrackin_01);
                                        VehTrackin_01.Delete();
                                        CloseBaseHelpBar();
                                        CleanFakeBlips();
                                        bTestRun = true;
                                        Raceist();
                                        SlowFastTravel(vFuMiss, 0.00f);
                                        Game.Player.IsInvincible = false;
                                    }
                                    else
                                        UI.Notify("No Drops");
                                }
                            }
                        }
                        else
                            ControlerUI(sAltLang[103] + sAltLang[135], 1);
                    }
                    else if (iBuildingUp == 4)
                    {
                        if (ButtonDown(25))
                        {
                            if (ButtonDown(25))
                            {
                                if (WhileButtonDown(21))
                                {
                                    sList_01 = BuildMishLists(7);
                                    if (sList_01.Count > 0)
                                    {
                                        iBuildingUp = 10;
                                        BackToBuildMenu(1);
                                    }
                                    else
                                    {
                                        string sFileName = "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/" + Game.GetUserInput(255) + ".XML";
                                        BuildMissions(iBuildMode, sFileName);
                                        PostMess();
                                        iBuildMode = 99;
                                    }
                                }
                                else if (WhileButtonDown(22))
                                {
                                    MyMissions.RaceXM.Clear();
                                    iBuildMode = 99;
                                    PostMess();
                                }
                            }
                        }
                    }
                    else if (iBuildingUp == 8)
                    {
                        if (ButtonDown(25))
                        {
                            if (WhileButtonDown(21))
                            {
                                PostMess();
                                bBuildMode = false;
                                iBuildingUp = 4;
                                bTestRun = true;
                                Raceist();
                                SlowFastTravel(vFuMiss, 0.00f);
                                Game.Player.IsInvincible = false;
                            }
                            else if (WhileButtonDown(22))
                            {
                                MyMissions.RaceXM.Clear();
                                iBuildMode = 99;
                                PostMess();
                            }
                        }
                    }
                }       //Raceist
                else if (iBuildMode == 9)
                {
                    if (iBuildingUp == 0)
                    {
                        ControlerUI(sAltLang[518], 1);

                        if (Function.Call<bool>(Hash.IS_WAYPOINT_ACTIVE))
                        {
                            iWarpLoops = 5;
                            PlayerWarpToWaypoint(World.GetWaypointPosition(), false);
                            VectorList_01.Clear();
                            VectorList_02.Clear();
                            iList_01.Clear();
                            fList_01.Clear();
                            vTarget_01 = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 5);
                            Prop_01 = BuildProp("ex_prop_adv_case_sm_flash", vTarget_01, Vector3.Zero, false, false);
                            Prop_01.HasCollision = false;
                            HelperBarBuiler(1, false);
                            iBuildingUp += 1;
                        }
                    }
                    else if (iBuildingUp == 1)
                    {
                        ControlerUI(sAltLang[518], 1);
                        vTarget_01 = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 2.50f);
                        Prop_01.Position = vTarget_01;
                        Function.Call(Hash.PLACE_OBJECT_ON_GROUND_PROPERLY, Prop_01.Handle);
                        if (ButtonDown(25))
                        {
                            if (WhileButtonDown(22))
                            {
                                if (PropList_01.Count > 1)
                                {
                                    PropList_01[PropList_01.Count - 1].Delete();
                                    PropList_01.Remove(PropList_01[PropList_01.Count - 1]);
                                    VectorList_01.RemoveAt(VectorList_01.Count - 1);
                                    VectorList_02.RemoveAt(VectorList_02.Count - 1);
                                    iList_01.RemoveAt(iList_01.Count - 1);
                                    fList_01.RemoveAt(fList_01.Count - 1);
                                    BlipList_01[BlipList_01.Count - 1].Remove();
                                    BlipList_01.RemoveAt(BlipList_01.Count - 1);
                                }
                            }
                            else if (WhileButtonDown(21))
                            {
                                WhereAreYou();
                                VectorList_02.Add(World.GetNextPositionOnStreet(vTarget_01));
                                iList_01.Add(iLocationX);
                                fList_01.Add(Prop_01.Heading);
                                Prop bPop = BuildProp("ex_prop_adv_case_sm_flash", vTarget_01, Vector3.Zero, true, false);
                                FakeBlimbs(vTarget_01, BlipSprite.Crosshair2, false);
                                Function.Call(Hash.PLACE_OBJECT_ON_GROUND_PROPERLY, bPop.Handle);
                                VectorList_01.Add(bPop.Position);
                                UI.Notify("Drop No == " + VectorList_01.Count);
                            }
                            else if (WhileButtonDown(23))
                            {
                                if (VectorList_01.Count > 0)
                                {
                                    for (int i = 0; i < VectorList_01.Count(); i++)
                                    {
                                        BombBuild Bombastic = new BombBuild();
                                        Bombastic.Local = iList_01[i];
                                        Bombastic.Bomb = VectorList_01[i];
                                        Bombastic.Fubstop = VectorList_02[i];
                                        Bombastic.Fheader = fList_01[i];
                                        MyMissions.BombXM.Add(Bombastic);
                                    }
                                    CleanFakeBlips();
                                    for (int i = 0; i < PropList_01.Count(); i++)
                                        PropList_01[i].Delete();
                                    bBuildMode = false;
                                    iBuildingUp += 1;                                  
                                    VectorList_01.Clear();
                                    VectorList_02.Clear();
                                    iList_01.Clear();
                                    CloseBaseHelpBar();
                                    bTestRun = true;
                                    iTestKit = 0;
                                    BBBomb();
                                    SlowFastTravel(vFuMiss, 0.00f);
                                    Game.Player.IsInvincible = false;
                                }
                                else
                                    UI.Notify("No Drops");
                            }
                        }
                        else if (Function.Call<bool>(Hash.IS_WAYPOINT_ACTIVE))
                        {
                            iWarpLoops = 5;
                            PlayerWarpToWaypoint(World.GetWaypointPosition(), false);
                        }
                    }
                    else if (iBuildingUp == 2)
                    {
                        if (ButtonDown(25))
                        {
                            if (WhileButtonDown(21))
                            {
                                sList_01 = BuildMishLists(7);
                                if (sList_01.Count > 0)
                                {
                                    iBuildingUp = 10;
                                    BackToBuildMenu(1);
                                }
                                else
                                {
                                    string sFileName = "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/" + Game.GetUserInput(255) + ".XML";
                                    BuildMissions(iBuildMode, sFileName);
                                    PostMess();
                                    iBuildMode = 99;
                                }
                            }
                            else if (WhileButtonDown(22))
                            {
                                MyMissions.BombXM.Clear();
                                iBuildMode = 99;
                                PostMess();
                            }
                        }
                    }
                    else if (iBuildingUp == 8)
                    {
                        if (ButtonDown(25))
                        {
                            if (WhileButtonDown(21))
                            {
                                PostMess();
                                bBuildMode = false;
                                iBuildingUp = 2;
                                iTestKit = 0;
                                bTestRun = true;
                                BBBomb();
                                SlowFastTravel(vFuMiss, 0.00f);
                                Game.Player.IsInvincible = false;
                            }
                            else if (WhileButtonDown(22))
                            {
                                MyMissions.BombXM.Clear();
                                iBuildMode = 99;
                                PostMess();
                            }
                        }
                    }
                }       //BBBomb
                else if (iBuildMode == 10)
                {
                    if (iBuildingUp == 0)
                    {
                        ControlerUI(sAltLang[518], 1);
                        if (Function.Call<bool>(Hash.IS_WAYPOINT_ACTIVE))
                        {
                            HitBuild BigHit = new HitBuild();
                            MyMissions.HitXM.Add(BigHit);
                            PlayerWarpToWaypoint(World.GetWaypointPosition(), false);
                            VectorList_01.Clear();
                            HelperBarBuiler(1, false);
                            iBuildingUp += 1;
                        }
                    }
                    else if (iBuildingUp == 1)
                    {
                        if (ButtonDown(25))
                        {
                            if (WhileButtonDown(21))
                            {
                                iBuildingUp += 1;
                                MyMissions.HitXM[0].Vboss = Game.Player.Character.Position;
                                MyMissions.HitXM[0].BossDir = Game.Player.Character.Heading;
                                FakeBlimbs(Game.Player.Character.Position, BlipSprite.BountyHit, false);
                                HelperBarBuiler(2, true);
                            }
                        }
                    }
                    else if (iBuildingUp == 2)
                    {
                        if (ButtonDown(25))
                        {
                            if (WhileButtonDown(22))
                            {
                                iBuildingUp -= 1;
                                HelperBarBuiler(1, true);
                            }
                            else if (WhileButtonDown(21))
                            {
                                iBuildingUp += 1;
                                MyMissions.HitXM[0].Goon01 = Game.Player.Character.Position;
                                MyMissions.HitXM[0].Goon01Dir = Game.Player.Character.Heading;
                                FakeBlimbs(Game.Player.Character.Position, BlipSprite.Crosshair2, false);
                            }
                        }
                    }
                    else if (iBuildingUp == 3)
                    {
                        if (ButtonDown(25))
                        {
                            if (WhileButtonDown(22))
                            {
                                iBuildingUp -= 1;
                            }
                            else if (WhileButtonDown(21))
                            {
                                iBuildingUp += 1;
                                MyMissions.HitXM[0].Goon02 = Game.Player.Character.Position;
                                MyMissions.HitXM[0].Goon02Dir = Game.Player.Character.Heading;
                                FakeBlimbs(Game.Player.Character.Position, BlipSprite.Crosshair2, false);
                                HelperBarBuiler(3, true);
                            }
                        }
                    }
                    else if (iBuildingUp == 4)
                    {
                        if (ButtonDown(25))
                        {
                            if (WhileButtonDown(22))
                            {
                                iBuildingUp -= 1;
                                HelperBarBuiler(2, true);
                                VectorList_01.Clear();
                            }
                            else if (WhileButtonDown(21))
                            {
                                VectorList_01.Add(Game.Player.Character.Position);
                                UI.Notify("Stop No == " + VectorList_01.Count);
                                FakeBlimbs(Game.Player.Character.Position, BlipSprite.TargetA, false);
                            }
                            else if (WhileButtonDown(23))
                            {
                                if (VectorList_01.Count > 1)
                                {
                                    iBuildingUp += 1;
                                    MyMissions.HitXM[0].Goon03 = new List<Vector3>(VectorList_01);
                                    VectorList_01.Clear();
                                }
                                else
                                    UI.Notify("No Stops");
                            }
                        }
                    }
                    else if (iBuildingUp == 5)
                    {
                        if (ButtonDown(25))
                        {
                            if (WhileButtonDown(22))
                            {
                                iBuildingUp -= 1;
                                VectorList_01.Clear();
                            }
                            else if (WhileButtonDown(21))
                            {
                                VectorList_01.Add(Game.Player.Character.Position);
                                UI.Notify("Stop No == " + VectorList_01.Count);
                                FakeBlimbs(Game.Player.Character.Position, BlipSprite.TargetB, false);
                            }
                            else if (WhileButtonDown(23))
                            {
                                if (VectorList_01.Count > 1)
                                {
                                    iBuildingUp += 1;
                                    MyMissions.HitXM[0].Goon04 = new List<Vector3>(VectorList_01);
                                    VectorList_01.Clear();
                                    HelperBarBuiler(4, true);
                                }
                                else
                                    UI.Notify("No Stops");
                            }
                        }
                    }
                    else if (iBuildingUp == 6)
                    {
                        if (ButtonDown(25))
                        {
                            if (WhileButtonDown(22))
                            {
                                iBuildingUp -= 1;
                                HelperBarBuiler(3, true);
                                VectorList_01.Clear();
                            }
                            else if (WhileButtonDown(21))
                            {
                                VectorList_01.Add(Game.Player.Character.Position);
                                UI.Notify("Stop No == " + VectorList_01.Count);
                                FakeBlimbs(Game.Player.Character.Position, BlipSprite.TargetC, false);
                            }
                            else if (WhileButtonDown(23))
                            {
                                if (VectorList_01.Count > 1)
                                {
                                    iBuildingUp += 1;
                                    MyMissions.HitXM[0].Goon05 = new List<Vector3>(VectorList_01);
                                    VectorList_01.Clear();
                                    HelperBarBuiler(5, true);
                                }
                                else
                                    UI.Notify("No Stops");
                            }
                        }
                    }
                    else if (iBuildingUp == 7)
                    {
                        if (ButtonDown(25))
                        {
                            if (WhileButtonDown(22))
                            {
                                iBuildingUp -= 1;
                                HelperBarBuiler(4, true);
                            }
                            else if (WhileButtonDown(21))
                            {
                                iBuildingUp = 9;
                                WhereAreYou();
                                MyMissions.HitXM[0].Local = iLocationX;
                                MyMissions.HitXM[0].Vstart = Game.Player.Character.Position;
                                MyMissions.HitXM[0].FUbstop = World.GetNextPositionOnStreet(Game.Player.Character.Position);
                                bBuildMode = false;
                                CleanFakeBlips();
                                CloseBaseHelpBar();
                                bTestRun = true;
                                PostMess();
                                HitMan();
                                SlowFastTravel(vFuMiss, 0.00f);
                                Game.Player.IsInvincible = false;
                            }
                        }
                    }
                    else if (iBuildingUp == 9)
                    {
                        if (ButtonDown(25))
                        {
                            if (WhileButtonDown(21))
                            {
                                sList_01 = BuildMishLists(7);
                                if (sList_01.Count > 0)
                                {
                                    iBuildingUp = 10;
                                    BackToBuildMenu(1);
                                }
                                else
                                {
                                    string sFileName = "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/" + Game.GetUserInput(255) + ".XML";
                                    BuildMissions(iBuildMode, sFileName);
                                    PostMess();
                                    iBuildMode = 99;
                                }
                            }
                            else if (WhileButtonDown(22))
                            {
                                MyMissions.HitXM.Clear();
                                iBuildMode = 99;
                                PostMess();
                            }
                        }
                    }
                    else if (iBuildingUp == 8)
                    {
                        if (ButtonDown(25))
                        {
                            if (WhileButtonDown(21))
                            {
                                PostMess();
                                iBuildingUp = 9;
                                bBuildMode = false;
                                bTestRun = true;
                                HitMan();
                                SlowFastTravel(vFuMiss, 0.00f);
                                Game.Player.IsInvincible = false;
                            }
                            else if (WhileButtonDown(22))
                            {
                                MyMissions.HitXM.Clear();
                                iBuildMode = 99;
                                PostMess();
                            }
                        }
                    }
                }      //HitMan
                else
                {
                    Game.Player.IsInvincible = false;
                    iBuildingUp = 0;
                    iBuildMode = 0;
                    bBuildMode = false;
                    BackToBuildMenu(0);
                }
            }
            else if (bOnTheJob)
            {
                if (bJobLoaded)
                {
                    if (Function.Call<bool>(Hash.IS_PLAYER_DEAD) || Function.Call<bool>(Hash.IS_PLAYER_BEING_ARRESTED) || Function.Call<bool>(Hash.IS_PLAYER_SWITCH_IN_PROGRESS))
                        iMissionSeq = 45;

                    if (!bPlayingNewMissions)
                    {
                        using (StreamWriter tEx = File.AppendText(sBeeLogs))
                            BeeLog("bPlayingNewMissions == " + iJobType, tEx);

                        bPlayingNewMissions = true;
                        XMLSettings();
                    }
                    else if (iJobType == 1)
                    {
                        if (iMissionSeq == 0)
                        {
                            if (VehicleList_01.Count > 1)
                            {
                                iMissionSeq = 1;
                                BeOnOff[0] = true;
                                if (bShowRoute)
                                    VehTrackin_01.CurrentBlip.ShowRoute = true;

                                if (iMissionVar_01 > 0)
                                    Trucking_Attachments();

                                if (bFastTraveltoStart)
                                    SlowFastTravel(vFuMiss, 0.00f);
                                else if (!bSubtitles)
                                    QuickSub(sAltLang[108] + sAltLang[101] + "~y~" + sAltLang[120] + "~w~.");
                            }
                        }
                        else if (iMissionSeq == 1)
                        {
                            if (bNotPause)
                            {
                                Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                bNotPause = false;
                            }

                            if (VehTrackin_02.IsDead)
                                iMissionSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                            {
                                iMissionSeq = 2;
                                Trucking_CashNCrash();
                                BeOnOff[0] = false;
                                VehTrackin_01.CurrentBlip.Remove();

                                if (!bSubtitles)
                                    QuickSub(sAltLang[100] + "~y~" + sAltLang[121] + " ~w~" + sAltLang[101] + "~b~" + sAltLang[120] + "~w~.");
                            }
                            else if (Game.Player.Character.Position.DistanceTo(VehTrackin_01.Position) < 35.00f)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[103] + "~b~" + sAltLang[120] + "~w~.");
                                if (BeOff[0])
                                {
                                    if (!VehTrackin_01.IsOnAllWheels)
                                    {
                                        StayOnGround(VehTrackin_01);
                                        VehTrackin_01.Heading = fList_01[0];
                                    }
                                    StayOnGround(VehTrackin_02);
                                    VehTrackin_02.Heading = fList_01[1];
                                    BeOff[0] = false;
                                }
                                else if (World.GetDistance(VehTrackin_01.Position, Game.Player.Character.Position) < 5.00f && BeOnOff[4])
                                {
                                    ControlerUI("~INPUT_DETONATE~ " + GetEntName(sList_01[iMissionVar_04]) + " ~INPUT_CONTEXT~", 1);
                                    if (Game.IsControlJustPressed(2, GTA.Control.Detonate))
                                    {
                                        if (iMissionVar_04 > 0)
                                            iMissionVar_04 -= 1;
                                        else
                                            iMissionVar_04 = sList_01.Count - 1;
                                        float fHeader = VehTrackin_01.Heading;
                                        VehicleList_01.Remove(VehTrackin_01);
                                        VehTrackin_01.CurrentBlip.Remove();
                                        VehTrackin_01.Delete();
                                        VehicleSpawn(sList_01[iMissionVar_04], vTarget_02, fHeader, false, false, true, false, 0, 0, iMissionVar_03, 1, BeOnOff[5]);
                                    }
                                    else if (Game.IsControlJustPressed(2, GTA.Control.Context))
                                    {
                                        if (iMissionVar_04 + 1 < sList_01.Count)
                                            iMissionVar_04 += 1;
                                        else
                                            iMissionVar_04 = 0;
                                        float fHeader = VehTrackin_01.Heading;
                                        VehicleList_01.Remove(VehTrackin_01);
                                        VehTrackin_01.CurrentBlip.Remove();
                                        VehTrackin_01.Delete();
                                        VehicleSpawn(sList_01[iMissionVar_04], vTarget_02, fHeader, false, false, true, false, 0, 0, iMissionVar_03, 1, BeOnOff[5]);
                                    }
                                }
                            }
                            else
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[108] + sAltLang[101] + "~y~" + sAltLang[120] + "~w~.");
                            }
                        }
                        else if (iMissionSeq == 2)
                        {
                            if (bSubtitles)
                                StickySubTitle(sAltLang[100] + "~y~" + sAltLang[121] + " ~w~" + sAltLang[101] + "~b~" + sAltLang[120] + "~w~.");

                            if (VehTrackin_01.IsDead || VehTrackin_02.IsDead)
                                iMissionSeq = 45;
                            else if (!VehTrackin_02.IsOnAllWheels && iTime_01[0] < Game.GameTime)
                                Trucking_LostTrail();
                            else if (VehTrackin_02.IsAttached())
                            {
                                iMissionSeq = 3;
                                BeOnOff[2] = true;
                                BeOnOff[1] = true;
                                VehTrackin_02.FreezePosition = false;
                                VehTrackin_02.CurrentBlip.Remove();
                                VehTrackin_02.Repair();
                                AddTarget(vTarget_01, true, true, 1.00f, false);
                                if (!bSubtitles)
                                    QuickSub(sAltLang[102] + "~b~" + sAltLang[121] + " ~w~" + sAltLang[104] + "~y~" + World.GetStreetName(vTarget_01) + "~w~.");
                            }
                        }
                        else if (iMissionSeq == 3)
                        {
                            if (BeOnOff[3] && World.GetDistance(vTarget_01, VehTrackin_02.Position) < 90.0f)
                            {
                                if (VehTrackin_03.HasCollision)
                                    VehTrackin_03.HasCollision = false;

                                MoveThatCar(vTarget_01);
                                Trucking_TruckStop();
                                BeOnOff[3] = false;
                            }

                            iCashReward = MultiDamage(iList_01, iList_02, iCrash4Cash, true, iCashReward, true);

                            if (VehTrackin_01.IsDead || VehTrackin_02.IsDead)
                                iMissionSeq = 45;
                            else if (World.GetDistance(vTarget_01, VehTrackin_02.Position) < 10.00f)
                            {
                                if (VehTrackin_03.HasCollision)
                                    VehTrackin_03.HasCollision = false;
                                else if (Game.Player.Character.IsInVehicle() && VehTrackin_02.IsAttached())
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[225] + "~b~" + sAltLang[121] + " ~w~" + sAltLang[101] + "~y~" + sAltLang[127] + "~w~.");
                                    ControlerUI(sAltLang[367], 1);
                                }
                                else
                                {
                                    float fParking = VehTrackin_02.Position.DistanceTo(VehTrackin_03.Position) * 5;
                                    fParking = fParking + VehTrackin_02.Rotation.DistanceTo(VehTrackin_03.Rotation) * 10;
                                    int iPkBouns = (int)fParking;
                                    iCashBouns = 1000 - iPkBouns;
                                    if (iCashBouns < 0)
                                        iCashBouns = 0;
                                    VehTrackin_01.EngineRunning = false;
                                    RemoveTargets();
                                    iMissionSeq = 4;
                                }
                            }
                            else
                            {
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    if (BeOnOff[0])
                                    {
                                        BeOnOff[0] = false;
                                        AddTarget(vTarget_01, true, true, 1.00f, false);
                                        VehTrackin_01.CurrentBlip.Remove();
                                    }
                                }
                                else
                                {
                                    if (!BeOnOff[0])
                                    {
                                        BeOnOff[0] = true;
                                        RemoveTargets();
                                        VehBlip(VehTrackin_01, BlipSprite.Truck, false, true);
                                    }
                                }

                                if (BeOnOff[2])
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[102] + "~b~" + sAltLang[121] + " ~w~" + sAltLang[104] + "~y~" + World.GetStreetName(vTarget_01) + "~w~.");

                                    if (!VehTrackin_02.IsAttached())
                                    {
                                        BeOnOff[2] = false;
                                        VehBlip(VehTrackin_02, BlipSprite.Trailer, true, true);
                                        iTime_01[1] = Game.GameTime + 45000;
                                        VTBTimerPool.Add(ttTextBar_02);
                                        if (!bSubtitles)
                                            QuickSub(sAltLang[100] + "~y~" + sAltLang[121] + " ~w~" + sAltLang[101] + "~b~" + sAltLang[120] + "~w~.");
                                    }
                                }
                                else
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[100] + "~y~" + sAltLang[121] + " ~w~" + sAltLang[101] + "~b~" + sAltLang[120] + "~w~.");

                                    if (!VehTrackin_02.IsOnAllWheels && iTime_01[0] < Game.GameTime)
                                        Trucking_LostTrail();
                                    else if (VehTrackin_02.IsAttached())
                                    {
                                        BeOnOff[2] = true;
                                        VehTrackin_02.CurrentBlip.Remove();
                                        VTBTimerPool.Remove(ttTextBar_02);
                                        if (bShowRoute)
                                            Target_01.ShowRoute = true;

                                        if (!bSubtitles)
                                            QuickSub(sAltLang[102] + "~b~" + sAltLang[121] + " ~w~" + sAltLang[104] + "~y~" + World.GetStreetName(vTarget_01) + "~w~.");

                                    }
                                    else if (iTime_01[1] > Game.GameTime)
                                    {
                                        int iTimeLeft = iTime_01[1] - Game.GameTime;
                                        FindTheTime(iTimeLeft, 9, "", true);
                                    }
                                    else
                                        iMissionSeq = 45;
                                }
                            }
                        }
                        else if (iMissionSeq == 4)
                        {
                            VehTrackin_03.Delete();
                            VehicleList_01.Remove(VehTrackin_03);
                            VehTrackin_01.FreezePosition = true;
                            Script.Wait(1000);
                            Game.Player.Character.Task.LeaveVehicle();
                            VehTrackin_01.FreezePosition = false;
                            VehTrackin_01.LockStatus = VehicleLockStatus.Locked;
                            iCashReward += iCashBouns;

                            if (!bTestRun)
                                NSCoinInvestments(true, 4, 6, "Big G Goods Shares");
                            if (iCashBouns > 0)
                                GameOver(false, "Parking Bouns: $" + iCashBouns + ", ",false, iCashReward);
                            else
                                GameOver(false, "", false, iCashReward);
                        }
                        else if (iMissionSeq == 45)
                        {
                            if (!bTestRun)
                                NSCoinInvestments(false, 5, 7, "Big G Goods Shares");
                            GameOver(true, "", false, 0);
                        }
                    }        //Truckin
                    else if (iJobType == 2)
                    {
                        if (iMissionSeq == 0)
                        {
                            if (PedList_01[2].Exists())
                            {
                                iMissionSeq = 1;
                                Function.Call((Hash)0xDC0F817884CDD856, 2, false);
                                Function.Call((Hash)0xDC0F817884CDD856, 4, true);
                                Function.Call((Hash)0xDC0F817884CDD856, 8, true);
                                Function.Call((Hash)0xDC0F817884CDD856, 12, false);

                                StayInVehicle(Game.Player.Character, true);
                                iWait4Sec = Game.GameTime + 5000;

                                BeOnOff[4] = false;

                                if (!bSubtitles)
                                    QuickSub(sAltLang[105] + "~b~" + sAltLang[122] + " ~w~" + sAltLang[106] + "~b~" + sAltLang[123] + " ~w~" + sAltLang[107]);
                            }
                        }
                        else if (iMissionSeq == 1)
                        {
                            if (bNotPause)
                            {
                                Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                bNotPause = false;
                            }
                            else if (Npc_01.IsDead || Npc_02.IsDead || Npc_03.IsDead)
                                iMissionSeq = 45;
                            else if (Game.Player.Character.IsInVehicle())
                            {
                                if (BeOnOff[6])
                                {
                                    if (!Game.Player.Character.IsInVehicle())
                                    {
                                        BeOnOff[6] = false;
                                        RemoveTargets();
                                        VehTrackin_05.IsPersistent = false;
                                        if (!bSubtitles)
                                            QuickSub(sAltLang[105] + "~b~" + sAltLang[122] + " ~w~" + sAltLang[106] + "~b~" + sAltLang[123] + " ~w~" + sAltLang[107]);
                                    }
                                    else if (World.GetDistance(vTarget_01, Game.Player.Character.Position) < 75.00f)
                                    {
                                        if (bSubtitles)
                                            StickySubTitle(sAltLang[109] + "~y~" + sAltLang[124] + "~w~.");
                                        else
                                        {
                                            if (BeOff[0])
                                            {
                                                QuickSub(sAltLang[109] + "~y~" + sAltLang[124] + "~w~.");
                                                BeOff[0] = false;
                                            }
                                        }
                                        World.DrawMarker(MarkerType.VerticalCylinder, vTarget_01, Vector3.Zero, Vector3.Zero, new Vector3(5.0f, 5.0f, 5.0f), color: Color.Yellow);
                                        if (BeOnOff[3])
                                        {
                                            MoveThatCar(vTarget_01);
                                            BeOnOff[3] = false;
                                        }
                                        if (World.GetDistance(vTarget_01, Game.Player.Character.Position) < 3.0f)
                                        {
                                            if (VehTrackin_05.IsStopped)
                                            {
                                                iMissionSeq = 2;
                                                BeOnOff[5] = true;
                                                PlaySoundFrom("Alarms", "Burglar_Bell", "Generic_Alarms", vTarget_03, false);
                                                DoorsNear(vTarget_03, 5.00f);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (bSubtitles)
                                            StickySubTitle(sAltLang[108] + "" + sAltLang[101] + "~y~" + sAltLang[124] + "~w~.");
                                    }
                                }
                                else
                                {
                                    if (BeOnOff[0] || Game.Player.Character.CurrentVehicle.ClassType != VehicleClass.Helicopters)
                                    {
                                        if (Game.Player.Character.CurrentVehicle.IsSeatFree(VehicleSeat.LeftRear))
                                        {
                                            VehTrackin_05 = Game.Player.Character.CurrentVehicle;
                                            BeOnOff[6] = true;
                                            VehTrackin_05.IsPersistent = true;
                                            AddTarget(vTarget_01, true, true, 1.00f, false);
                                            if (!bSubtitles)
                                                QuickSub(sAltLang[108] + "" + sAltLang[101] + "~y~" + sAltLang[124] + "~w~.");
                                        }
                                        else
                                        {
                                            if (bSubtitles)
                                                StickySubTitle(sAltLang[105] + "~b~" + sAltLang[122] + " ~w~" + sAltLang[106] + "~b~" + sAltLang[123] + " ~w~" + sAltLang[107]);
                                            else
                                                QuickSub(sAltLang[105] + "~b~" + sAltLang[122] + " ~w~" + sAltLang[106] + "~b~" + sAltLang[123] + " ~w~" + sAltLang[107]);
                                        }
                                    }
                                    else
                                    {
                                        if (bSubtitles)
                                            StickySubTitle(sAltLang[105] + "~b~" + sAltLang[122] + " ~w~" + sAltLang[106] + "~b~" + sAltLang[123] + " ~w~" + sAltLang[107]);
                                        else
                                            QuickSub(sAltLang[105] + "~b~" + sAltLang[122] + " ~w~" + sAltLang[106] + "~b~" + sAltLang[123] + " ~w~" + sAltLang[107]);
                                    }

                                }
                            }
                            else
                            {
                                if (BeOnOff[6])
                                {
                                    BeOnOff[6] = false;
                                    VehTrackin_05.IsPersistent = false;
                                    RemoveTargets();
                                }
                                else
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[105] + "~b~" + sAltLang[122] + " ~w~" + sAltLang[106] + "~b~" + sAltLang[123] + " ~w~" + sAltLang[107]);
                                }
                            }
                        }
                        else if (iMissionSeq == 2)
                        {
                            if (!BeOnOff[1])
                            {
                                if (VehTrackin_05.IsInvincible)
                                {
                                    BeOnOff[1] = true;
                                    Getaway_CarSwap(VehTrackin_05);
                                }
                                else
                                {
                                    iMissionSeq = 3;
                                    RemoveTargets();
                                    World.AddExplosion(vTarget_03, ExplosionType.Flare, 1.0f, 0.0f);
                                    Vehicle PlVeh = Game.Player.Character.CurrentVehicle;
                                    iWait4Sec = Game.GameTime + 15000;
                                    PlVeh.EngineRunning = false;
                                    PlVeh.IsExplosionProof = false;
                                    PlVeh.IsOnlyDamagedByPlayer = false;
                                    PlVeh.IsFireProof = false;
                                    VehicleList_01.Add(new Vehicle(PlVeh.Handle));
                                    Getaway_FearInBank();
                                }
                            }
                        }
                        else if (iMissionSeq == 3)
                        {
                            if (Npc_01.IsDead || Npc_02.IsDead || Npc_03.IsDead || VehTrackin_05.IsDead)
                                iMissionSeq = 45;
                            else if (Npc_01.IsInVehicle(VehTrackin_05) && Npc_02.IsInVehicle(VehTrackin_05) && Npc_03.IsInVehicle(VehTrackin_05))
                            {
                                iMissionSeq = 4;

                                Getaway_RobDaBank();

                                if (!bSubtitles)
                                    QuickSub(sAltLang[110] + "~r~" + sAltLang[125] + "~w~.");
                            }
                            else if (iWait4Sec < Game.GameTime)
                            {
                                if (!Npc_01.IsInVehicle(VehTrackin_05))
                                    VehicleWarp(VehTrackin_05, Npc_01, 2);
                                if (!Npc_02.IsInVehicle(VehTrackin_05))
                                    VehicleWarp(VehTrackin_05, Npc_02, 3);
                                if (!Npc_03.IsInVehicle(VehTrackin_05))
                                    VehicleWarp(VehTrackin_05, Npc_03, 4);
                            }
                        }
                        else if (iMissionSeq == 4)
                        {
                            if (Npc_01.IsDead || Npc_02.IsDead || Npc_03.IsDead || VehTrackin_05.IsDead)
                                iMissionSeq = 45;
                            else if (BeOnOff[5])
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[110] + "~r~" + sAltLang[125] + "~w~.");

                                if (World.GetDistance(vTarget_01, Game.Player.Character.Position) > 80.0f)
                                {
                                    BeOnOff[5] = false;
                                    StopThatSound();
                                }
                                else if (Game.Player.WantedLevel < 3)
                                    Game.Player.WantedLevel = 5;
                            }
                            else if (BeOnOff[4])
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[102] + "~b~" + sAltLang[126] + "~w~ " + sAltLang[101] + "~y~" + sAltLang[127] + "~w~.");

                                if (Game.Player.WantedLevel > 0)
                                {
                                    BeOnOff[4] = false;
                                    RemoveTargets();
                                }
                                else if (!Game.Player.Character.IsInVehicle())
                                    iMissionSeq = 45;
                                else if (World.GetDistance(vTarget_02, Game.Player.Character.Position) < 3.0f)
                                {
                                    iMissionSeq = 5;
                                    RemoveTargets();
                                    VehTrackin_05.IsDriveable = false;
                                    BeOnOff[7] = false;
                                    Game.Player.Character.Weapons.Give(WeaponHash.PetrolCan, 1, false, true);
                                    Game.Player.Character.Weapons.Give(WeaponHash.Molotov, 10, true, true);
                                    StopHere(VehTrackin_05);
                                }
                            }
                            else if (Game.Player.Character.IsInVehicle(VehTrackin_05))
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[110] + "~r~" + sAltLang[125] + "~w~.");

                                if (Game.Player.WantedLevel == 0)
                                {
                                    TheYellowCorona(vTarget_02, 5.00f);
                                    AddTarget(vTarget_02, true, true, 1.00f, false);
                                    BeOnOff[4] = true;

                                    if (!bSubtitles)
                                        QuickSub(sAltLang[102] + "~b~" + sAltLang[126] + "~w~ " + sAltLang[101] + "~y~" + sAltLang[127] + "~w~.");

                                }
                            }
                            else
                                iMissionSeq = 45;

                            if (BeOnOff[7])
                            {
                                iCashReward = MultiDamage(iList_01, iList_02, iMissionVar_03, true, iCashReward, true);

                                if (BeOnOff[2])
                                    BeOnOff[2] = false;
                                else
                                {
                                    if (iCashReward != iCashBouns)
                                    {
                                        iCashBouns = iCashReward;
                                        BeOnOff[8] = true;
                                        if (iTime_01[0] == 0)
                                            iTime_01[0] = Game.GameTime + 500;
                                    }
                                }

                                if (BeOnOff[8])
                                {
                                    if (BeOnOff[9])
                                    {
                                        if (Game.GameTime > iTime_01[0])
                                        {
                                            if (iFireList.Count > 0)
                                            {
                                                Function.Call(Hash.STOP_PARTICLE_FX_LOOPED, iFireList[iFireList.Count - 1], true);
                                                iFireList.RemoveAt(iFireList.Count - 1);
                                            }
                                            else
                                            {
                                                iTime_01[0] = 0;
                                                BeOnOff[9] = false;
                                                BeOnOff[8] = false;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, "scr_xs_celebration"))
                                        {
                                            Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_xs_celebration");
                                            int iPart = Function.Call<int>(Hash.START_PARTICLE_FX_LOOPED_ON_ENTITY, "scr_xs_money_rain", VehTrackin_05.Handle, 0.40f, 0.40f, 0.50f, 0.00f, 0.00f, 0.00f, 1.00f, false, true, false);
                                            Function.Call(Hash.SET_PARTICLE_FX_LOOPED_ALPHA, iPart, 1.00f);
                                            Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_xs_celebration");
                                            int iPart1 = Function.Call<int>(Hash.START_PARTICLE_FX_LOOPED_ON_ENTITY, "scr_xs_money_rain", VehTrackin_05.Handle, -0.40f, -0.40f, 0.50f, 0.00f, 0.00f, 0.00f, 1.00f, false, true, false);
                                            Function.Call(Hash.SET_PARTICLE_FX_LOOPED_ALPHA, iPart1, 1.00f);
                                            Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_xs_celebration");
                                            int iPart2 = Function.Call<int>(Hash.START_PARTICLE_FX_LOOPED_ON_ENTITY, "scr_xs_money_rain", VehTrackin_05.Handle, 0.40f, -0.40f, 0.50f, 0.00f, 0.00f, 0.00f, 1.00f, false, true, false);
                                            Function.Call(Hash.SET_PARTICLE_FX_LOOPED_ALPHA, iPart2, 1.00f);

                                            iFireList.Add(iPart);
                                            iFireList.Add(iPart1);
                                            iFireList.Add(iPart2);
                                            BeOnOff[9] = true;
                                        }
                                        else
                                        {
                                            Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_xs_celebration");
                                        }
                                    }
                                }
                            }
                        }
                        else if (iMissionSeq == 5)
                        {
                            if (VehicleList_01.Count > 1)
                            {
                                iMissionSeq = 6;
                                RemoveTargets();
                                Game.Player.Character.Task.LeaveVehicle();
                                VehTrackin_05.FreezePosition = false;
                                VehTrackin_01.IsInvincible = false;
                                VehTrackin_01.FreezePosition = false;
                                Function.Call(Hash.TASK_LEAVE_VEHICLE, Npc_01, Npc_01.CurrentVehicle, 1);
                                Function.Call(Hash.TASK_LEAVE_VEHICLE, Npc_02, Npc_02.CurrentVehicle, 1);
                                Function.Call(Hash.TASK_LEAVE_VEHICLE, Npc_03, Npc_03.CurrentVehicle, 1);
                                iWait4Sec = Game.GameTime + 500;

                                if (!bSubtitles)
                                    QuickSub("~r~" + sAltLang[111] + "~w~" + sAltLang[112] + "~b~" + sAltLang[128] + "~w~.");
                            }
                        }
                        else if (iMissionSeq == 6)
                        {
                            if (Npc_01.IsDead || Npc_02.IsDead || Npc_03.IsDead)
                                iMissionSeq = 45;
                            else if (iWait4Sec < Game.GameTime)
                            {
                                iMissionSeq = 7;
                                EnterAnyVeh(VehTrackin_01, Npc_01, 0, 2.00f);
                                EnterAnyVeh(VehTrackin_01, Npc_02, 1, 2.00f);
                                EnterAnyVeh(VehTrackin_01, Npc_03, 2, 2.00f);
                                iWait4Sec = Game.GameTime + 10000;
                            }

                            if (bSubtitles)
                                StickySubTitle("~r~" + sAltLang[111] + "~w~" + sAltLang[112] + "~b~" + sAltLang[128] + "~w~.");
                        }
                        else if (iMissionSeq == 7)
                        {
                            if (Npc_01.IsDead || Npc_02.IsDead || Npc_03.IsDead)
                                iMissionSeq = 45;
                            else if (iWait4Sec < Game.GameTime)
                            {
                                iMissionSeq = 10;
                                if (Npc_01.IsInVehicle(VehTrackin_01) == false)
                                    VehicleWarp(VehTrackin_01, Npc_01, 1);
                                if (Npc_02.IsInVehicle(VehTrackin_01) == false)
                                    VehicleWarp(VehTrackin_01, Npc_02, 2);
                                if (Npc_03.IsInVehicle(VehTrackin_01) == false)
                                    VehicleWarp(VehTrackin_01, Npc_03, 3);
                            }
                            else if (Npc_01.IsInVehicle(VehTrackin_01) && Npc_02.IsInVehicle(VehTrackin_01) && Npc_03.IsInVehicle(VehTrackin_01))
                                iMissionSeq = 10;
                            if (bSubtitles)
                                StickySubTitle("~r~" + sAltLang[111] + "~w~" + sAltLang[112] + "~b~" + sAltLang[128] + "~w~.");
                        }
                        else if (iMissionSeq == 10)
                        {
                            if (bSubtitles)
                                StickySubTitle("~r~" + sAltLang[111] + "~w~" + sAltLang[112] + "~b~" + sAltLang[128] + "~w~.");

                            if (Npc_01.IsDead || Npc_02.IsDead || Npc_03.IsDead)
                                iMissionSeq = 45;
                            else if (Npc_01.IsInVehicle(VehTrackin_01) && Npc_02.IsInVehicle(VehTrackin_01) && Npc_03.IsInVehicle(VehTrackin_01))
                            {
                                if (BeOnOff[10])
                                {
                                    BeOnOff[10] = false;
                                    Function.Call(Hash.TASK_PLANE_MISSION﻿, Npc_01, VehTrackin_01, 0, 0, -2352.11f, 2274.94f, 500.0f, 4, 100.0f, 0.0f, 90.0f, 0, 600.0f);
                                }
                                else if (VehTrackin_05.IsOnFire || VehTrackin_05.IsDead)
                                {

                                    if (iPlayGroup != 0)
                                    {
                                        Function.Call(Hash.REMOVE_GROUP, iPlayGroup);
                                        iPlayGroup = 0;
                                    }
                                    iCashReward = iCashReward / 4;
                                    VehTrackin_05.Explode();
                                    Function.Call((Hash)0xDC0F817884CDD856, 2, true);
                                    Function.Call((Hash)0xDC0F817884CDD856, 12, true);
                                    sMissionVar_01 = "empty";
                                    sMissionVar_02 = "empty";
                                    GameOver(false, "", false, iCashReward);
                                }
                            }
                        }
                        else if (iMissionSeq == 45)
                        {
                            Function.Call((Hash)0xDC0F817884CDD856, 2, true);
                            Function.Call((Hash)0xDC0F817884CDD856, 12, true);

                            if (iPlayGroup != 0)
                            {
                                Function.Call(Hash.REMOVE_GROUP, iPlayGroup);
                                iPlayGroup = 0;
                            }
                            if (BeOnOff[9])
                                Getaway_StopLoss();
                            if (BeOnOff[5])
                            {
                                BeOnOff[5] = false;
                                StopThatSound();
                            }
                            sMissionVar_01 = "empty";
                            sMissionVar_02 = "empty";
                            GameOver(true, "", false, 0);
                        }
                    }        //GetAwayDriver
                    else if (iJobType == 3)
                    {
                        if (BeOnOff[0])
                        {
                            if (iMissionVar_02 != -1)
                            {
                                if (iTime_01[1] > Game.GameTime)
                                {
                                    int iNumber = 0;
                                    iNumber = iMissionVar_02 + 1;
                                    ttTextBar_01.Text = "" + iNumber + "/" + iMissionVar_03 + "";

                                    int iTotal = iTime_01[1] - Game.GameTime;
                                    FindTheTime(iTotal, 9, "", true);
                                }
                                else
                                {
                                    if (iMissionSeq == 2)
                                    {
                                        iMissionSeq = 4;
                                        if (Game.Player.Character.IsInVehicle())
                                        {
                                            RemoveTargets();
                                            BeOnOff[2] = true;
                                            VehBlip(VehTrackin_01, BlipSprite.NightclubTruck, true, true);
                                        }
                                    }
                                    VTBTimerPool.Draw();
                                }
                            }
                            else
                            {
                                int iNumber = 0;
                                ttTextBar_01.Text = "" + iNumber + "/" + iMissionVar_03 + "";
                                VTBTimerPool.Draw();
                            }
                        }

                        if (iMissionSeq == 0)
                        {
                            if (VehicleList_01.Count > 0)
                            {
                                iMissionSeq = 1;
                                BeOnOff[2] = true;
                                if (bShowRoute)
                                    VehTrackin_01.CurrentBlip.ShowRoute = true;

                                if (bFastTraveltoStart)
                                    WarptoAnyVeh(VehTrackin_01, Game.Player.Character, 1, false);
                                else if (!bSubtitles)
                                    QuickSub(sAltLang[108] + sAltLang[101] + "~y~" + sAltLang[129] + "~w~ " + sAltLang[128] + ".");

                                if (BeOnOff[3])
                                    Packages_LiveExport();
                            }
                        }
                        else if (iMissionSeq == 1)
                        {
                            if (bNotPause)
                            {
                                Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                bNotPause = false;
                            }
                            if (VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                            {
                                iMissionSeq = 2;
                                BeOnOff[2] = true;
                                BeOnOff[4] = false;
                                iMissionVar_02 = VectorList_01.Count - 1;
                                iMissionVar_03 = VectorList_01.Count;
                                vTarget_01 = VectorList_01[iMissionVar_02];
                                vTarget_01.Z = vTarget_01.Z - 1.00f;

                                if (!bSubtitles)
                                    QuickSub(sAltLang[102] + "~b~" + sAltLang[130] + "~w~ " + sAltLang[101] + "~y~" + sAltLang[127] + "~w~.");
                            }
                            else if (Game.Player.Character.Position.DistanceTo(VehTrackin_01.Position) < 35.00f)
                            {
                                if (bSubtitles)
                                {
                                    if (iLocationX == 6)
                                        StickySubTitle(sAltLang[113] + "~b~" + sAltLang[129] + "~w~ " + sAltLang[128] + ".");
                                    else
                                        StickySubTitle(sAltLang[103] + "~b~" + sAltLang[129] + "~w~ " + sAltLang[128] + ".");
                                }

                                if (!VehTrackin_01.IsOnAllWheels)
                                {
                                    VehTrackin_01.Position = vGetaway;
                                    VehTrackin_01.Rotation = new Vector3(0.00f, 0.00f, fGetDir);
                                }
                            }
                            else
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[108] + sAltLang[101] + "~y~" + sAltLang[129] + "~w~ " + sAltLang[128] + ".");
                            }
                        }
                        else if (iMissionSeq == 2)
                        {
                            if (VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else if (World.GetDistance(vTarget_01, Game.Player.Character.Position) < 95.00f && BeOnOff[4])
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[102] + "~b~" + sAltLang[130] + "~w~ " + sAltLang[101] + "~y~" + sAltLang[127] + "~w~.");

                                if (World.GetDistance(vTarget_01, Game.Player.Character.Position) < 2.00f && Game.Player.Character.IsOnFoot && BeInRange(Game.Player.Character.Position.Z, vTarget_01.Z, 0.50f))
                                {
                                    iMissionSeq = 3;
                                    if (!BeOnOff[0])
                                    {
                                        BeOnOff[0] = true;
                                        VTBTimerPool.Add(ttTextBar_02);
                                        iTime_01[0] = iTime_01[0] * 1000;
                                        iTime_01[1] = Game.GameTime + iTime_01[0];
                                    }
                                    iWait4Sec = Game.GameTime + 2000;
                                    Game.Player.Character.Task.PlayAnimation("anim@mp_fireworks", "place_firework_3_box", 8.00f, 3000, true, 1.00f);
                                    BeOnOff[2] = true;
                                    RemoveTargets();
                                }
                            }
                            else if (BeOnOff[2])
                            {
                                if (bSubtitles)
                                {
                                    if (iLocationX == 6)
                                        StickySubTitle(sAltLang[113] + "~b~" + sAltLang[129] + "~w~ " + sAltLang[128] + ".");
                                    else
                                        StickySubTitle(sAltLang[103] + "~b~" + sAltLang[129] + "~w~ " + sAltLang[128] + ".");
                                }
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[2] = false;
                                    VehTrackin_01.CurrentBlip.Remove();
                                    BeOnOff[4] = true;
                                    AddTarget(vTarget_01, true, true, 1.00f, false);
                                    TheYellowCorona(vTarget_01, 1.00f);

                                    if (!bSubtitles)
                                        QuickSub(sAltLang[102] + "~b~" + sAltLang[130] + "~w~ " + sAltLang[101] + "~y~" + sAltLang[127] + "~w~.");

                                }
                            }
                            else
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[102] + "~b~" + sAltLang[130] + "~w~ " + sAltLang[101] + "~y~" + sAltLang[127] + "~w~.");

                                if (!Game.Player.Character.IsInVehicle(VehTrackin_01) && !BeOnOff[4])
                                {
                                    RemoveTargets();
                                    BeOnOff[2] = true;
                                    VehBlip(VehTrackin_01, BlipSprite.Package2, true, true);
                                }
                            }
                            if (!BeOnOff[0])
                            {
                                int iNumber = iMissionVar_02 + 1;
                                ttTextBar_01.Text = "" + iNumber + "/" + iMissionVar_03 + "";
                                VTBTimerPool.Draw();
                            }
                        }
                        else if (iMissionSeq == 3)
                        {
                            if (iWait4Sec < Game.GameTime)
                            {
                                if (BeOnOff[3])
                                {
                                    NPCSpawn("a_c_hen", vTarget_01, 0.00f, 40, 150, 1, 0, 0, null, 0, false, false, 0, 0);

                                    int iKillHen = PedList_03.Count - 1;
                                    if (iKillHen > -1)
                                    {
                                        PedList_03[iKillHen].Delete();
                                        PedList_03.RemoveAt(iKillHen);
                                    }
                                }
                                else
                                {
                                    if (bOnCayoLand)
                                        sMissionVar_01 = sList_01[iMissionVar_02];

                                    BuildProp(sMissionVar_01, vTarget_01, Vector3.Zero, false, false);
                                }
                                VehBlip(VehTrackin_01, BlipSprite.Package2, true, true);
                                if (iMissionVar_02 > 0)
                                {
                                    iMissionSeq = 2;
                                    BeOnOff[4] = false;
                                    iMissionVar_02 -= 1;
                                    vTarget_01 = VectorList_01[iMissionVar_02];
                                    vTarget_01.Z = vTarget_01.Z - 1.00f;
                                }
                                else
                                {
                                    iMissionVar_02 -= 1;
                                    BeOnOff[1] = true;
                                    iMissionSeq = 4;
                                }
                                if (!bSubtitles)
                                {
                                    if (iLocationX == 6)
                                        QuickSub(sAltLang[113] + "~b~" + sAltLang[129] + "~w~ " + sAltLang[128] + ".");
                                    else
                                        QuickSub(sAltLang[103] + "~b~" + sAltLang[129] + "~w~ " + sAltLang[128] + ".");
                                }
                            }
                        }
                        else if (iMissionSeq == 4)
                        {
                            if (VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else if (World.GetDistance(vTarget_05, VehTrackin_01.Position) < fCorSize)
                            {
                                Game.Player.Character.Task.LeaveVehicle();
                                VehTrackin_01.LockStatus = VehicleLockStatus.Locked;
                                RemoveTargets();
                                iMissionSeq = 5;
                            }
                            else if (BeOnOff[1] && World.GetDistance(vTarget_05, Game.Player.Character.Position) < 60.00f)
                            {
                                MoveThatCar(vTarget_05);
                                BeOnOff[1] = false;
                            }
                            else if (BeOnOff[2])
                            {
                                if (bSubtitles)
                                {
                                    if (iLocationX == 6)
                                        StickySubTitle(sAltLang[113] + "~b~" + sAltLang[129] + "~w~ " + sAltLang[128] + ".");
                                    else
                                        StickySubTitle(sAltLang[103] + "~b~" + sAltLang[129] + "~w~ " + sAltLang[128] + ".");
                                }

                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[2] = false;
                                    VehTrackin_01.CurrentBlip.Remove();
                                    AddTarget(vTarget_05, true, true, 1.00f, false);
                                    TheYellowCorona(vTarget_05, fCorSize);
                                    if (!bSubtitles)
                                        QuickSub(sAltLang[172] + "~b~" + sAltLang[128] + "~w~ " + sAltLang[101] + "~y~" + sAltLang[221] + "~w~.");

                                }
                            }
                            else
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[172] + "~b~" + sAltLang[128] + "~w~ " + sAltLang[101] + "~y~" + sAltLang[221] + "~w~.");

                                if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    RemoveTargets();
                                    BeOnOff[2] = true;
                                    VehBlip(VehTrackin_01, BlipSprite.Package2, true, true);
                                }
                            }
                        }
                        else if (iMissionSeq == 5)
                        {
                            int iBounus = 0;
                            if (iMissionVar_02 < 0)
                            {
                                iMissionVar_02 = 0;
                                iBounus = 10;
                            }
                            else
                                iMissionVar_02 = iMissionVar_02 + 1;

                            int iDeliverListed = iMissionVar_03 - iMissionVar_02;
                            iCashReward = iDeliverListed * iParcelCost;
                            if (iBounus > 0)
                                iCashReward = iCashReward * iBounus;

                            if (!bTestRun)
                            {
                                if (bOnCayoLand)
                                    NSCoinInvestments(true, 3, 5 + iBounus, "Madrass Inc");
                                else if (iLocationX == 1)
                                    NSCoinInvestments(true, 3, 5 + iBounus, "Post OP Shares");
                                else if (iLocationX == 2)
                                    NSCoinInvestments(true, 2, 4 + iBounus, "GoPostal Shares");
                                else if (iLocationX == 3)
                                    NSCoinInvestments(true, 4, 6 + iBounus, "Pop's Pills Shares");
                                else if (iLocationX == 4)
                                    NSCoinInvestments(false, 1, 2 + iBounus, "Dollar Pills Shares");
                                else if (iLocationX == 5)
                                    NSCoinInvestments(true, 2, 4 + iBounus, "Sunset Bleach Shares");
                                else
                                    NSCoinInvestments(true, 3, 9 + iBounus, "Weazel Shares");
                            }

                            GameOver(false, "" + sAltLang[337] + "" + iDeliverListed + "/" + iMissionVar_03 + ", ", false, iCashReward);
                        }
                        else if (iMissionSeq == 45)
                        {
                            if (!bTestRun)
                            {
                                if (iLocationX == 1)
                                    NSCoinInvestments(false, 4, 6, "Post OP Shares");
                                else if (iLocationX == 2)
                                    NSCoinInvestments(false, 5, 7, "GoPostal Shares");
                                else if (iLocationX == 3)
                                    NSCoinInvestments(false, 3, 8, "Pop's Pills Shares");
                                else if (iLocationX == 4)
                                    NSCoinInvestments(true, 7, 12, "Dollar Pills Shares");
                                else if (iLocationX == 5)
                                    NSCoinInvestments(false, 5, 7, "Sunset Bleach Shares");
                                else
                                    NSCoinInvestments(false, 3, 5, "Weazel Shares");
                            }
                            GameOver(true, "", false, 0);
                        }
                    }        //Packages
                    else if (iJobType == 4)
                    {
                        if (BeOff[2])
                        {
                            Game.Player.WantedLevel = 0;
                            Function.Call(Hash.SET_DISPATCH_COPS_FOR_PLAYER, Game.Player.Character, false);
                            Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "re_prison");
                            Function.Call(Hash.STOP_ALARM, "PRISON_ALARMS", 0);
                            Function.Call(Hash.CLEAR_AMBIENT_ZONE_STATE, "AZ_COUNTRYSIDE_PRISON_01_ANNOUNCER_GENERAL", 0);
                            Function.Call(Hash.CLEAR_AMBIENT_ZONE_STATE, "AZ_COUNTRYSIDE_PRISON_01_ANNOUNCER_WARNING", 0);

                            CopKillerz();
                        }

                        if (iMissionSeq == 0)
                        {
                            if (VehicleList_01.Count > 0)
                            {
                                iMissionSeq = 1;
                                BeOnOff[0] = true;
                                StayInVehicle(Game.Player.Character, true);

                                if (bFastTraveltoStart)
                                    WarptoAnyVeh(VehTrackin_01, Game.Player.Character, 1, false);
                                else if (!bSubtitles)
                                    QuickSub(sAltLang[113] + "~b~" + sAltLang[131] + "~w~.");

                            }
                        }
                        else if (iMissionSeq == 1)
                        {
                            if (bNotPause)
                            {
                                Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                bNotPause = false;
                            }
                            if (VehTrackin_01.IsDead || Game.Player.WantedLevel > 0)
                                iMissionSeq = 45;
                            else 
                            {
                                if (BeOnOff[0])
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[113] + "~b~" + sAltLang[131] + "~w~.");

                                    if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    {
                                        BeOnOff[0] = false;
                                        BeOff[5] = false;
                                        VehTrackin_01.CurrentBlip.Remove();
                                        AddTarget(vTarget_01, true, true, 1.00f, false);

                                        if (!bSubtitles)
                                            QuickSub(sAltLang[114] + "~r~" + sAltLang[132] + "~w~ " + sAltLang[115] + "~y~" + sAltLang[127] + "~w~.");

                                    }
                                    else if (Game.Player.Character.Position.DistanceTo(VehTrackin_01.Position) < 40.00f && BeOff[5])
                                    {
                                        if (!VehTrackin_01.IsOnAllWheels)
                                        {
                                            VehTrackin_01.Position = vGetaway;
                                            VehTrackin_01.Rotation = new Vector3(0.00f, 0.00f, fGetDir);
                                        }
                                    }
                                }
                                else
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[114] + "~r~" + sAltLang[132] + "~w~ " + sAltLang[115] + "~y~" + sAltLang[127] + "~w~.");

                                    if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    {
                                        RemoveTargets();
                                        BeOnOff[0] = true;
                                        VehTrackin_01.AddBlip();
                                        VehTrackin_01.CurrentBlip.Sprite = BlipSprite.Bus;
                                        if (bShowRoute)
                                            VehTrackin_01.CurrentBlip.ShowRoute = true;
                                    }
                                    else if (World.GetDistance(vTarget_01, Game.Player.Character.Position) < 90.0f)
                                    {
                                        iMissionSeq = 2;
                                        Convicts_DumpCons();
                                        RemoveTargets();
                                    }
                                }
                            }
                        }
                        else if (iMissionSeq == 2)
                        {
                            if (BeOff[1])
                            {
                                iMissionSeq = 3;
                                BeOnOff[0] = true;
                                VehBlip(VehTrackin_01, BlipSprite.Bus, false, true);
                                vTarget_02 = new Vector3(1848.24f, 2608.52f, 44.59f);
                                vTarget_03 = new Vector3(1823.44f, 2607.87f, 44.58f);
                                vTarget_04 = new Vector3(1690.85f, 2601.41f, 44.56f);
                                vTarget_05 = new Vector3(1846.57f, 2585.8f, 44.67f);//267.83
                            }
                            if (!bSubtitles)
                                QuickSub(sAltLang[116] + "~b~" + sAltLang[133] + "~w~" + sAltLang[117] + ".");
                        }
                        else if (iMissionSeq == 3)
                        {
                            if (bSubtitles)
                            {
                                if (BeOnOff[0])
                                    StickySubTitle(sAltLang[113] + "~b~" + sAltLang[131] + "~w~.");
                                else
                                {
                                    if (!BeOff[0])
                                        StickySubTitle(sAltLang[118] + "~r~" + sAltLang[132] + "~w~.");
                                    else
                                        StickySubTitle(sAltLang[116] + "~b~" + sAltLang[133] + "~w~" + sAltLang[117] + ".");
                                }
                            }

                            if (VehTrackin_01.IsDead || Game.Player.WantedLevel > 0)
                                iMissionSeq = 45;
                            else
                            {
                                if (BeOff[0])
                                {
                                    if (World.GetDistance(Npc_01.Position, Game.Player.Character.Position) > 40.0f)
                                    {
                                        BeOff[0] = false;
                                        Hare.Stop();
                                    }
                                }
                                else
                                {
                                    if (World.GetDistance(Npc_01.Position, Game.Player.Character.Position) < 30.0f)
                                    {
                                        BeOff[0] = true;
                                        Hare.PlayLooping();
                                    }
                                }

                                if (BeOnOff[0])
                                {
                                    if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    {
                                        BeOnOff[0] = false;
                                        VehTrackin_01.CurrentBlip.Remove();
                                    }
                                }
                                else
                                {
                                    if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    {
                                        BeOnOff[0] = true;
                                        VehTrackin_01.AddBlip();
                                        VehTrackin_01.CurrentBlip.Sprite = BlipSprite.Bus;
                                    }
                                    else if (BeOff[0])
                                    {
                                        if (Game.IsControlJustPressed(2, GTA.Control.VehicleHorn))
                                        {
                                            iMissionSeq = 4;
                                            BeOff[0] = false;
                                            iTime_01[0] = Game.GameTime;
                                            Hare.Stop();
                                            Convicts_KrishaToBus();
                                        }
                                        else
                                        {
                                            ControlerUI(sAltLang[361] + sAltLang[3], 1);
                                        }
                                    }
                                }
                            }

                            if (!BeOff[3])
                            {
                                BeOff[3] = true;
                                Convicts_WalkLoop();
                            }
                        }
                        else if (iMissionSeq == 4)
                        {
                            if (VehTrackin_01.IsDead || !Game.Player.Character.IsInVehicle() || Game.Player.WantedLevel > 0)
                            {
                                Game.FadeScreenIn(100);
                                iMissionSeq = 45;
                            }
                        }
                        else if (iMissionSeq == 5)
                        {
                            if (bSubtitles)
                                StickySubTitle(sAltLang[102] + "~r~" + sAltLang[132] + "~w~ " + sAltLang[104] + "~y~" + sAltLang[134] + "~w~.");
                            if (VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            if (World.GetDistance(vTarget_02, VehTrackin_01.Position) < 3.0f)
                            {
                                iMissionSeq = 6;
                                StopHere(VehTrackin_01);
                                RemoveTargets();

                                if (BeOff[0])
                                {
                                    BeOff[0] = false;
                                    Hare.Stop();
                                }
                                if (!BeOff[2])
                                {
                                    Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "restrictedareas");
                                    BeOff[2] = true;
                                }
                            }
                            else
                            {

                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    if (!BeOff[0])
                                    {
                                        if (iWait4Sec < Game.GameTime)
                                        {
                                            BeOff[0] = true;
                                            Hare.PlayLooping();
                                        }
                                    }
                                    else
                                    {
                                        if (Game.IsControlJustPressed(0, GTA.Control.VehicleHorn))
                                        {
                                            BeOff[0] = false;
                                            Hare.Stop();
                                            iWait4Sec = Game.GameTime + 8000;
                                        }
                                    }
                                    if (BeOnOff[0])
                                    {
                                        BeOnOff[0] = false;
                                        VehTrackin_01.CurrentBlip.Remove();
                                        AddTarget(vTarget_01, true, true, 1.00f, false);
                                    }
                                    else if (!BeOff[2])
                                    {
                                        if (World.GetDistance(vTarget_02, VehTrackin_01.Position) < 100.00f)
                                        {
                                            Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "restrictedareas");
                                            BeOff[2] = true;
                                        }
                                    }
                                }
                                else
                                    iMissionSeq = 45;
                            }
                        }
                        else if (iMissionSeq == 6)
                        {
                            if (bSubtitles)
                                StickySubTitle(sAltLang[102] + "~r~" + sAltLang[132] + "~w~ " + sAltLang[104] + "~y~" + sAltLang[134] + "~w~.");

                            iMissionSeq = 7;
                            GateIsNear(vTarget_02, 20.0f, true);
                            AddTarget(vTarget_03, true, true, 1.00f, false);
                            TheYellowCorona(vTarget_03, 5.00f);
                            iWait4Sec = Game.GameTime + 12000;
                        }
                        else if (iMissionSeq == 7)
                        {
                            if (bSubtitles)
                                StickySubTitle(sAltLang[102] + "~r~" + sAltLang[132] + "~w~ " + sAltLang[104] + "~y~" + sAltLang[134] + "~w~.");

                            if (Function.Call<bool>(Hash.IS_DOOR_CLOSED, Prop_01.GetHashCode()))
                                Function.Call(Hash._DOOR_CONTROL, Function.Call<int>(Hash.GET_HASH_KEY, "prop_gate_prison_01"), Prop_01.Position.X, Prop_01.Position.Y, Prop_01.Position.Z, false, 0.0f, 50.0f, 0.0f);

                            if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                            {
                                if (!BeOnOff[0])
                                    iMissionSeq = 45;
                            }
                            else if (World.GetDistance(vTarget_03, VehTrackin_01.Position) < 3.0f)
                            {
                                StopHere(VehTrackin_01);
                                iMissionSeq = 8;
                                RemoveTargets();
                            }
                        }
                        else if (iMissionSeq == 8)
                        {
                            if (bSubtitles)
                                StickySubTitle(sAltLang[102] + "~r~" + sAltLang[132] + "~w~ " + sAltLang[104] + "~y~" + sAltLang[134] + "~w~.");

                            iMissionSeq = 9;
                            GateIsNear(vTarget_03, 20.0f, true);
                            AddTarget(vTarget_04, true, true, 1.00f, false);
                            TheYellowCorona(vTarget_04, 5.00f);
                            iWait4Sec = Game.GameTime + 12000;
                        }
                        else if (iMissionSeq == 9)
                        {
                            if (bSubtitles)
                                StickySubTitle(sAltLang[102] + "~r~" + sAltLang[132] + "~w~ " + sAltLang[104] + "~y~" + sAltLang[134] + "~w~.");

                            if (Function.Call<bool>(Hash.IS_DOOR_CLOSED, Prop_01.GetHashCode()))
                                Function.Call(Hash._DOOR_CONTROL, Function.Call<int>(Hash.GET_HASH_KEY, "prop_gate_prison_01"), Prop_01.Position.X, Prop_01.Position.Y, Prop_01.Position.Z, false, 0.0f, 50.0f, 0.0f);

                            if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                iMissionSeq = 45;
                            else if (World.GetDistance(vTarget_04, Game.Player.Character.Position) < 3.0f)
                            {
                                StopHere(VehTrackin_01);
                                iMissionSeq = 10;
                                RemoveTargets();
                            }
                        }
                        else if (iMissionSeq == 10)
                        {
                            SlowFastTravel(vTarget_05, 267.83f);
                            BeOff[2] = false;
                            iCashReward = (iTime_01[0] - Game.GameTime) / 100 * -1;
                            if (iCashReward > 10000)
                                iCashReward = RandInt(9950, 9999);

                            if (iWantedBribe == 0)
                                Fruits(5);
                            iWantedBribe += 1;
                            Game.Player.IgnoredByPolice = false;
                            if (iPlayGroup != 0)
                            {
                                Function.Call(Hash.REMOVE_GROUP, iPlayGroup);
                                iPlayGroup = 0;
                            }
                            Function.Call(Hash.SET_DISPATCH_COPS_FOR_PLAYER, Game.Player.Character, true);
                            Function.Call(Has﻿h.REQUEST_SCRIPT, "restrictedareas");
                            Script.Wait(100);
                            if (Function.Ca﻿ll<bool>(Hash.HAS_SCRIPT_LOADED, "restrictedareas"))
                            {
                                Function.Call﻿(Hash.START_NEW_SCRIPT﻿, "restrictedareas", 1424);
                                Fun﻿ction.Call(Hash.SET_SCRIPT_AS_NO_LONGER_NEEDED, "restrictedareas");
                            }

                            GameOver(false, "", false, iCashReward);
                        }
                        else if (iMissionSeq == 25)
                        {
                            iMissionSeq = 99;
                            if (iPlayGroup != 0)
                            {
                                Function.Call(Hash.REMOVE_GROUP, iPlayGroup);
                                iPlayGroup = 0;
                            }

                            bGOURANGA = true;
                            iCashReward = (iTime_01[0] - Game.GameTime) / 10 * -1;
                            if (iCashReward > 5000)
                                iCashReward = RandInt(4950, 4999);
                            GameOver(false, "", true, iCashReward);
                        }
                        else if (iMissionSeq == 45)
                        {
                            if (BeOff[0])
                                Hare.Stop();

                            if (BeOff[2])
                            {
                                BeOff[2] = false;
                                SlowFastTravel(vTarget_05, 267.83f);
                                Game.Player.WantedLevel = 0;
                                Game.Player.IgnoredByPolice = false;
                                if (iPlayGroup != 0)
                                {
                                    Function.Call(Hash.REMOVE_GROUP, iPlayGroup);
                                    iPlayGroup = 0;
                                }
                                Function.Call(Hash.SET_DISPATCH_COPS_FOR_PLAYER, Game.Player.Character, true);
                                ZancudaClosed();
                                Script.Wait(100);
                            }
                            GameOver(true, "", false, 0);
                        }
                    }        //Convicts
                    else if (iJobType == 5)
                    {
                        if (iMissionSeq == 0)
                        {

                            iMissionSeq = 1;
                            iList_01[0] = 0;
                            iList_01[1] = 0;
                            StayInVehicle(Game.Player.Character, true);
                            if (!VehicleList_01.Contains(VehTrackin_01))
                                VehicleList_01.Add(new Vehicle(VehTrackin_01.Handle));
                            BeOnOff[0] = true;
                        }
                        else if (iMissionSeq == 1)
                        {
                            if (VehicleList_01.Count > 0)
                            {
                                iMissionSeq = 2;
                                BeOnOff[1] = true;
                                if (!bSubtitles && !bMoreFubar)
                                    QuickSub(sAltLang[103] + "'~b~" + sAltLang[135] + "~w~'.");

                                Fubar_AngreyTaxi();
                            }
                            else
                                iMissionSeq = 45;
                        }
                        else if (iMissionSeq == 2)
                        {
                            if (bNotPause)
                            {
                                Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                bNotPause = false;
                            }
                            else if (BeOnOff[2])
                            {
                                if (PedList_02.Count == 0)
                                {
                                    iAngerTax = 0;
                                    BeOnOff[2] = false;
                                }
                                else if (iList_01[0] == iList_01[1])
                                {
                                    BeOnOff[2] = false;
                                }
                                else if (iTracking < Game.GameTime)
                                    TheUltimateTracker(true);
                            }

                            if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable)
                                iMissionSeq = 45;
                            else if (BeOnOff[1] && World.GetDistance(vTarget_02, VehTrackin_01.Position) < 90.0f)
                            {
                                MoveThatCar(vTarget_02);
                                BeOnOff[1] = false;
                            }
                            else if (World.GetDistance(vTarget_02, VehTrackin_01.Position) < 4.0f)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[116] + "~b~" + sAltLang[133] + "~w~" + sAltLang[117] + ".");
                                else
                                {
                                    if (BeOff[0])
                                    {
                                        QuickSub(sAltLang[116] + "~b~" + sAltLang[133] + "~w~" + sAltLang[117] + ".");
                                        BeOff[0] = false;
                                    }
                                }
                                if (Game.Player.IsPressingHorn)
                                {
                                    iMissionSeq = 3;
                                    RemoveTargets();
                                    Game.Player.WantedLevel = 0;
                                    BeOnOff[2] = false;
                                    Fubar_CleanTaxi();
                                    iWait4Sec = Game.GameTime + RandInt(1000, 4000);
                                }
                                else
                                {
                                    ControlerUI(sAltLang[361] + sAltLang[136], 1);
                                }
                            }
                            else
                            {
                                if (BeOnOff[0])
                                {
                                    if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    {
                                        BeOnOff[0] = false;
                                        VehTrackin_01.CurrentBlip.Remove();
                                        TheYellowCorona(vTarget_02, 5.00f);
                                        AddTarget(vTarget_02, true, true, 1.00f, false);

                                        if (!bSubtitles)
                                            QuickSub(sAltLang[119] + "~b~" + sAltLang[136] + "~w~ " + sAltLang[99] + "~y~" + World.GetStreetName(vTarget_02) + "~w~.");
                                    }
                                    else
                                    {
                                        if (bSubtitles)
                                            StickySubTitle(sAltLang[103] + "'~b~" + sAltLang[135] + "~w~'.");
                                    }
                                }
                                else
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[119] + "~b~" + sAltLang[136] + "~w~ " + sAltLang[99] + "~y~" + World.GetStreetName(vTarget_02) + "~w~.");

                                    if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    {
                                        BeOnOff[0] = true;
                                        RemoveTargets();
                                        VehTrackin_01.AddBlip();
                                        VehTrackin_01.CurrentBlip.Sprite = BlipSprite.Cab;
                                        if (bShowRoute)
                                            VehTrackin_01.CurrentBlip.ShowRoute = true;
                                    }
                                }
                            }
                        }
                        else if (iMissionSeq == 3)
                        {
                            if (iWait4Sec < Game.GameTime)
                            {
                                Fubar_CarShare();

                                iMissionSeq = 4;
                            }
                        }
                        else if (iMissionSeq == 4)
                        {
                            if (iList_01[3] == 1)
                            {
                                if (PedList_03.Count > 0)
                                    iMissionSeq = 5;
                            }
                            else if (iList_01[3] == 2)
                            {
                                if (PedList_03.Count > 1)
                                    iMissionSeq = 5;
                            }
                            else
                            {
                                if (PedList_03.Count > 2)
                                    iMissionSeq = 5;
                            }
                        }
                        else if (iMissionSeq == 5)
                        {
                            if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable || Game.Player.IsAiming || Game.Player.WantedLevel > 0)
                                iMissionSeq = 45;
                            else if (iList_01[3] == 1)
                            {
                                if (Npc_01.IsDead)
                                    iMissionSeq = 45;
                                else if (Npc_01.IsInVehicle())
                                {
                                    if (!bSubtitles)
                                        QuickSub(sAltLang[98] + "~y~" + World.GetStreetName(vTarget_03) + "~w~.");
                                    iMissionSeq = 6;
                                    Npc_01.CurrentBlip.Remove();
                                    BeOnOff[1] = true;
                                    TheYellowCorona(vTarget_03, 5.00f);
                                    AddTarget(vTarget_03, true, true, 1.00f, false);
                                }
                                else if (Function.Call<bool>(Hash.IS_HORN_ACTIVE, VehTrackin_01) && iWait4Sec < Game.GameTime)
                                {
                                    iWait4Sec = Game.GameTime + 2000;
                                    iList_01[4] += 1;
                                    if (!Npc_01.IsInVehicle())
                                    {
                                        if (iList_01[4] < 3)
                                            EnterPlayerVeh(Npc_01, 1, 2.00f);
                                        else
                                            WarptoPlayerVeh(Npc_01, 1);
                                    }
                                }
                            }
                            else if (iList_01[3] == 2)
                            {
                                if (Npc_01.IsDead || Npc_02.IsDead)
                                    iMissionSeq = 43;
                                else if (Npc_01.IsInVehicle() && Npc_02.IsInVehicle())
                                {
                                    if (!bSubtitles)
                                        QuickSub(sAltLang[97] + "~y~" + World.GetStreetName(vTarget_03) + "~w~.");
                                    iMissionSeq = 6;
                                    Npc_01.CurrentBlip.Remove();
                                    Npc_02.CurrentBlip.Remove();
                                    BeOnOff[1] = true;
                                    TheYellowCorona(vTarget_03, 5.00f);
                                    AddTarget(vTarget_03, true, true, 1.00f, false);
                                }
                                else if (Function.Call<bool>(Hash.IS_HORN_ACTIVE, VehTrackin_01) && iWait4Sec < Game.GameTime)
                                {
                                    iWait4Sec = Game.GameTime + 2000;
                                    iList_01[4] += 1;
                                    if (!Npc_01.IsInVehicle())
                                    {
                                        if (iList_01[4] < 3)
                                            EnterPlayerVeh(Npc_01, 1, 2.00f);
                                        else
                                            WarptoPlayerVeh(Npc_01, 1);
                                    }
                                    else if (!Npc_02.IsInVehicle())
                                    {
                                        if (iList_01[4] < 3)
                                            EnterPlayerVeh(Npc_02, 2, 2.00f);
                                        else
                                            WarptoPlayerVeh(Npc_02, 2);
                                    }
                                }
                            }
                            else
                            {
                                if (Npc_01.IsDead || Npc_02.IsDead || Npc_03.IsDead)
                                    iMissionSeq = 43;
                                else if (Npc_01.IsInVehicle() && Npc_02.IsInVehicle() && Npc_03.IsInVehicle())
                                {
                                    if (!bSubtitles)
                                        QuickSub(sAltLang[97] + "~y~" + World.GetStreetName(vTarget_03) + "~w~.");
                                    iMissionSeq = 6;
                                    Npc_01.CurrentBlip.Remove();
                                    Npc_02.CurrentBlip.Remove();
                                    Npc_03.CurrentBlip.Remove();
                                    BeOnOff[1] = true;
                                    TheYellowCorona(vTarget_03, 5.00f);
                                    AddTarget(vTarget_03, true, true, 1.00f, false);
                                }
                                else if (Function.Call<bool>(Hash.IS_HORN_ACTIVE, VehTrackin_01) && iWait4Sec < Game.GameTime)
                                {
                                    iWait4Sec = Game.GameTime + 2000;
                                    iList_01[4] += 1;
                                    if (!Npc_01.IsInVehicle())
                                    {
                                        if (iList_01[4] < 3)
                                            EnterPlayerVeh(Npc_01, 1, 2.00f);
                                        else
                                            WarptoPlayerVeh(Npc_01, 1);
                                    }
                                    else if (!Npc_02.IsInVehicle())
                                    {
                                        if (iList_01[4] < 3)
                                            EnterPlayerVeh(Npc_02, 2, 2.00f);
                                        else
                                            WarptoPlayerVeh(Npc_02, 2);
                                    }
                                    else if (!Npc_03.IsInVehicle())
                                    {
                                        if (iList_01[4] < 3)
                                            EnterPlayerVeh(Npc_03, 3, 2.00f);
                                        else
                                            WarptoPlayerVeh(Npc_03, 3);
                                    }
                                }
                            }

                            if (iFuClock < Game.GameTime)
                                Fubar_Math(true, true);
                            VTBTimerPool.Draw();
                        }
                        else if (iMissionSeq == 6)
                        {
                            if (bSubtitles)
                            {
                                if (iList_01[3] == 1)
                                    StickySubTitle(sAltLang[98] + "~y~" + World.GetStreetName(vTarget_03) + "~w~.");
                                else
                                    StickySubTitle(sAltLang[97] + "~y~" + World.GetStreetName(vTarget_03) + "~w~.");
                            }

                            if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable || !Game.Player.Character.IsInVehicle() || Game.Player.IsAiming && Game.Player.Character.Weapons.Current.Hash != WeaponHash.Unarmed || Game.Player.WantedLevel > 0)
                                iMissionSeq = 45;
                            else if (BeOnOff[1])
                            {
                                if (World.GetDistance(vTarget_03, VehTrackin_01.Position) < 90.0f)
                                {
                                    MoveThatCar(vTarget_03);
                                    BeOnOff[1] = false;
                                }
                            }
                            else if (World.GetDistance(vTarget_03, VehTrackin_01.Position) < 4.00f)
                            {
                                if (VehTrackin_01.IsStopped)
                                {
                                    iWait4Sec = Game.GameTime + 1000;
                                    iMissionSeq = 7;
                                    RemoveTargets();
                                }
                            }
                            else
                            {
                                if (BeOnOff[3])
                                {
                                    if (iWait4Sec < Game.GameTime)
                                    {
                                        BeOnOff[3] = false;
                                        int iStation = RandInt(0, 20);
                                        if (iStation == 17)
                                            iStation = 255;
                                        Function.Call(Hash.SET_RADIO_TO_STATION_INDEX, iStation);
                                    }
                                }
                                else
                                {
                                    if (!VehTrackin_01.IsSeatFree(VehicleSeat.RightFront))
                                    {
                                        BeOnOff[3] = true;
                                        iWait4Sec = Game.GameTime + RandInt(8000, 25000);
                                    }
                                }
                            }

                            if (iFuClock < Game.GameTime)
                                Fubar_Math(true, true);
                            VTBTimerPool.Draw();
                        }
                        else if (iMissionSeq == 7)
                        {
                            if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable)
                                iMissionSeq = 45;
                            else if (Npc_01.IsInVehicle())
                            {
                                if (iWait4Sec < Game.GameTime)
                                {
                                    iWait4Sec = Game.GameTime + 4000;
                                    Function.Call(Hash.TASK_LEAVE_VEHICLE, Npc_01, Npc_01.CurrentVehicle, 1);
                                    if (iList_01[3] == 2)
                                    {
                                        Function.Call(Hash.TASK_LEAVE_VEHICLE, Npc_02, Npc_02.CurrentVehicle, 1);
                                    }
                                    else if (iList_01[3] == 3)
                                    {
                                        Function.Call(Hash.TASK_LEAVE_VEHICLE, Npc_02, Npc_02.CurrentVehicle, 1);
                                        Function.Call(Hash.TASK_LEAVE_VEHICLE, Npc_03, Npc_03.CurrentVehicle, 1);
                                    }
                                }
                            }
                            else
                            {
                                iMissionSeq = 8;
                                CleanUpPeds();
                            }
                            VTBTimerPool.Draw();
                        }
                        else if (iMissionSeq == 8)
                        {
                            if (bTestRun)
                            {
                                if (iTestKit < MyMissions.FubardXM.Count)
                                {
                                    iMissionSeq = 0;
                                    RemoveTargets();
                                    CleanUpPeds();
                                    bMoreFubar = true;
                                    bJobLoaded = false;
                                    FUber();
                                }
                                else
                                    iMissionSeq = 9;
                            }
                            else
                            {
                                iMissionSeq = 99;
                                iPlayerChoise = 2;
                                bControlerSelect = true;
                            }
                        }
                        else if (iMissionSeq == 9)
                        {
                            iCashReward = iCashBouns + (iRepMisssion * 10);
                            if (!bTestRun)
                            {
                                if (iRepMisssion < 25)
                                {
                                    if (iRepMisssion > 4)
                                        NSCoinInvestments(true, iRepMisssion - 2, iRepMisssion, "Fubar Inc");
                                    else
                                        NSCoinInvestments(true, 0, 1, "Fubar Inc");
                                }
                                else
                                    NSCoinInvestments(true, 27, 28, "Fubar Inc");
                            }


                            WriteXmlSet();
                            GameOver(false, "" + sAltLang[338] + "" + (iRepMisssion * 10) + ", ", false, iCashReward);
                        }
                        else if (iMissionSeq == 45)
                        {
                            iFubard -= iRepMisssion;
                            if (!bTestRun)
                                NSCoinInvestments(false, 5, 7, "Fubar Shares");
                            FreeSeat(VehTrackin_01, 2, true);
                            FreeSeat(VehTrackin_01, 3, true);
                            FreeSeat(VehTrackin_01, 4, true);
                            Fubar_CleanTaxi();
                            GameOver(true, "", false, 0);
                        }
                    }        //Fubar
                    else if (iJobType == 6)
                    {
                        if (iLocationX == 1)
                        {
                            if (BeOnOff[0])
                            {
                                if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, "scr_carsteal4"))
                                {
                                    Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_carsteal4");
                                    Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_carsteal4_wheel_burnout", VehTrackin_01, -4.815f, 1.0f, 0.5f, 0, 0, 0, 0.75f - 0.2, 0, 1, 0);
                                    Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_COLOUR, fList_01[0], fList_01[1], fList_01[2]);
                                }
                                else
                                {
                                    Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_carsteal4");
                                }
                                if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, "scr_carsteal4"))
                                {
                                    Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_carsteal4");
                                    Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_carsteal4_wheel_burnout", VehTrackin_01, 4.815f, 1.0f, 0.5f, 0, 0, 0, 0.75f - 0.2, 0, 1, 0);
                                    Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_COLOUR, fList_01[0], fList_01[1], fList_01[2]);
                                }
                                else
                                {
                                    Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_carsteal4");
                                }
                            }
                            if (iMissionSeq == 0)
                            {
                                if (bNotPause)
                                {
                                    Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                    bNotPause = false;
                                }
                                else if (VehicleList_01.Count > 0)
                                {
                                    iMissionSeq = 1;
                                    iCashBouns = 0;
                                    iMissionVar_01 = VectorList_01.Count;

                                    if (bFastTraveltoStart)
                                        WarptoAnyVeh(VehTrackin_01, Game.Player.Character, 1, false);
                                    else if (!bSubtitles)
                                        QuickSub(sAltLang[108] + sAltLang[101] + "~b~" + sAltLang[137] + "~w~ " + sAltLang[96] + "'~y~" + sAltLang[138] + "~w~'.");
                                }
                            }
                            else if (iMissionSeq == 1)
                            {
                                if (World.GetDistance(vTarget_01, Game.Player.Character.Position) < 55.00f)
                                {
                                    iMissionSeq = 2;
                                    VehTrackin_01.FreezePosition = false;

                                    if (!bSubtitles)
                                        QuickSub(sAltLang[103] + "~b~" + sAltLang[137] + "~w~.");
                                }
                                else
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[108] + sAltLang[101] + "~b~" + sAltLang[137] + "~w~ " + sAltLang[96] + "'~y~" + sAltLang[138] + "~w~'.");
                                }
                            }
                            else if (iMissionSeq == 2)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[103] + "~b~" + sAltLang[137] + "~w~.");

                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    iMissionSeq = 3;
                                    VehTrackin_01.CurrentBlip.Remove();
                                    Pilot01_ChecksNBalance(false);

                                    if (!bSubtitles)
                                        QuickSub(sAltLang[139] + "~y~" + sAltLang[140] + "~w~" + sAltLang[141]);

                                }
                            }
                            else if (iMissionSeq == 3)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[139] + "~y~" + sAltLang[140] + "~w~" + sAltLang[141]);

                                if (VehTrackin_01.IsDead || !Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    iMissionSeq = 45;
                                else if (World.GetDistance(vTarget_02, VehTrackin_01.Position) < 20.0f)
                                {
                                    iMissionSeq = 4;
                                    RemoveTargets();
                                    Pilot01_ChecksNBalance(false);
                                    BeOnOff[0] = true;
                                }
                            }
                            else if (iMissionSeq == 4)
                            {
                                if (VehTrackin_01.IsDead || !Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    iMissionSeq = 45;
                                else if (vTarget_02.DistanceTo(VehTrackin_01.Position) < 15.00f)
                                {
                                    iCashReward += 100;

                                    if (iList_01[1] == 37)
                                    {
                                        if (VehTrackin_01.Rotation.Y > -55.00f && VehTrackin_01.Rotation.Y < 55.00f)
                                        {
                                            iCashReward += 1000;
                                            iCashBouns += 1;
                                            Function.Call(Hash._START_SCREEN_EFFECT, "SuccessNeutral", 1500, false);
                                        }
                                    }
                                    else if (iList_01[1] == 38)
                                    {
                                        if (VehTrackin_01.Rotation.Y > -130.00f && VehTrackin_01.Rotation.Y < -60.00f)
                                        {
                                            iCashReward += 1000;
                                            iCashBouns += 1;
                                            Function.Call(Hash._START_SCREEN_EFFECT, "SuccessNeutral", 1500, false);
                                        }
                                    }
                                    else if (iList_01[1] == 40)
                                    {
                                        if (VehTrackin_01.Rotation.Y > 155.00f || VehTrackin_01.Rotation.Y < -155.00f)
                                        {
                                            iCashReward += 1000;
                                            iCashBouns += 1;
                                            Function.Call(Hash._START_SCREEN_EFFECT, "SuccessNeutral", 1500, false);
                                        }
                                    }

                                    if (iMissionVar_01 > 1)
                                    {
                                        RemoveTargets();
                                        Pilot01_ChecksNBalance(false);
                                    }
                                    else
                                    {
                                        iMissionSeq = 5;
                                        RemoveTargets();
                                        Pilot01_ChecksNBalance(true);
                                    }
                                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "CHECKPOINT_UNDER_THE_BRIDGE", "HUD_MINI_GAME_SOUNDSET", true);
                                }
                                if (iList_01[2] != 0)
                                {
                                    int iRaceT = iList_01[2] - Game.GameTime;
                                    iRaceT *= -1;
                                    FindTheTime(iRaceT, 2, "", true);
                                }
                                if (iTime_01[0] < Game.GameTime)
                                {
                                    iTime_01[0] = Game.GameTime + 10000;
                                    if (iList_01[0] == 1)
                                    {
                                        fList_01[0] = 255.00f;
                                        fList_01[1] = 0.00f;
                                        fList_01[2] = 0.00f;
                                    }
                                    else if (iList_01[0] == 2)
                                    {
                                        fList_01[0] = 255.00f;
                                        fList_01[1] = 255.00f;
                                        fList_01[2] = 255.00f;
                                    }
                                    else
                                    {
                                        fList_01[0] = 0.00f;
                                        fList_01[1] = 0.00f;
                                        fList_01[2] = 220.00f;
                                        iList_01[0] = 0;
                                    }
                                    iList_01[0] += 1;
                                }
                            }
                            else if (iMissionSeq == 5)
                            {
                                if (VehTrackin_01.IsDead || !Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    iMissionSeq = 45;
                                else if (World.GetDistance(vTarget_02, VehTrackin_01.Position) < 15.00f)
                                {
                                    iCashReward += 100;

                                    iMissionSeq = 6;
                                    CleanUpCheckPoints();
                                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "CHECKPOINT_UNDER_THE_BRIDGE", "HUD_MINI_GAME_SOUNDSET", true);
                                }

                                int iRaceT = iList_01[2] - Game.GameTime;
                                FindTheTime(iRaceT *= -1, 2, "", true);

                                if (iTime_01[0] < Game.GameTime)
                                {
                                    iTime_01[0] = Game.GameTime + 10000;
                                    if (iList_01[0] == 1)
                                    {
                                        fList_01[0] = 255.00f;
                                        fList_01[1] = 0.00f;
                                        fList_01[2] = 0.00f;
                                    }
                                    else if (iList_01[0] == 2)
                                    {
                                        fList_01[0] = 255.00f;
                                        fList_01[1] = 255.00f;
                                        fList_01[2] = 255.00f;
                                    }
                                    else
                                    {
                                        fList_01[0] = 0.00f;
                                        fList_01[1] = 0.00f;
                                        fList_01[2] = 220.00f;
                                        iList_01[0] = 0;
                                    }
                                    iList_01[0] += 1;
                                }
                            }
                            else if (iMissionSeq == 6)
                            {
                                iList_01[2] -= Game.GameTime;
                                iList_01[2] *= -1;
                                bSoloRace = true;
                                if (iProcessForPegs != iGotPegsus)
                                    Fruits(4);
                                iGotPegsus = iProcessForPegs;
                                iPegsSafePlaneTest = iPegsSafePlane;
                                NSCoinInvestments(true, 2, 2 + iCashBouns, "Red Nut Energy Drinks Shares");
                                FindTheTime(iList_01[2], 5, sAltLang[339], false);
                            }
                            else if (iMissionSeq == 45)
                            {
                                NSCoinInvestments(false, 4, 7, "Red Nut Energy Drinks Shares");
                                GameOver(true, "", false, 0);
                            }
                        }            // red nut air race
                        else if (iLocationX == 2)
                        {
                            if (iMissionSeq == 0)
                            {
                                iMissionSeq = 1;
                                AddTarget(vTarget_01, true, true, 1.00f, false);
                                TheYellowCorona(vTarget_01, 1.00f);
                                StayInVehicle(Game.Player.Character, true);
                                if (bFastTraveltoStart)
                                    SlowFastTravel(vTarget_01, 0.00f);
                                else if (!bSubtitles)
                                    QuickSub(sAltLang[108] + sAltLang[101] + "~b~" + sAltLang[142] + "~w~ " + sAltLang[95] + "'~y~" + World.GetStreetName(vTarget_01) + "~w~'.");

                            }
                            else if (iMissionSeq == 1)
                            {
                                if (bNotPause)
                                {
                                    Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                    bNotPause = false;
                                }
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[108] + sAltLang[101] + "~b~" + sAltLang[142] + "~w~ " + sAltLang[95] + "'~y~" + World.GetStreetName(vTarget_01) + "~w~'.");

                                if (World.GetDistance(vTarget_01, Game.Player.Character.Position) < 2.0f)
                                {
                                    iMissionSeq = 2;
                                    RemoveTargets();
                                }
                            }
                            else if (iMissionSeq == 2)
                            {
                                if (VehicleList_01.Count > 0)
                                {
                                    VehTrackin_01.FreezePosition = false;
                                    VehBlip(VehTrackin_01, BlipSprite.Helicopter, false, false);
                                    iMissionSeq = 3;

                                    if (!bSubtitles)
                                        QuickSub(sAltLang[103] + "~b~" + sAltLang[142] + "~w~.");
                                }
                            }
                            else if (iMissionSeq == 3)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[103] + "~b~" + sAltLang[142] + "~w~.");

                                if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable)
                                    iMissionSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    iMissionSeq = 4;
                                    VehTrackin_01.CurrentBlip.Remove();
                                    vTarget_02.Z -= 1.0f;
                                    TheYellowCorona(vTarget_02, 10.00f);
                                    AddTarget(vTarget_02, false, true, 1.00f, false);

                                    if (!bSubtitles)
                                        QuickSub(sAltLang[108] + sAltLang[101] + "~r~" + sAltLang[143] + "~w~ " + sAltLang[210] + "~y~" + World.GetStreetName(vTarget_02) + "~w~.");
                                }
                            }
                            else if (iMissionSeq == 4)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[108] + sAltLang[101] + "~r~" + sAltLang[143] + "~w~ " + sAltLang[210] + "~y~" + World.GetStreetName(vTarget_02) + "~w~.");

                                if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable || !Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    iMissionSeq = 45;
                                else if (World.GetDistance(vTarget_02, Game.Player.Character.Position) < 5.00f)
                                {
                                    if (!VehTrackin_01.IsInAir)
                                    {
                                        iMissionSeq = 5;                                      
                                        GenPlayerPed(vTarget_03, 0.00f, 75, 160, 1, 7, 0, null, 2, true, false, 1, false);
                                        RemoveTargets();
                                        StopHere(VehTrackin_01);
                                    }
                                }
                            }
                            else if (iMissionSeq == 5)
                            {
                                if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable || !Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    iMissionSeq = 45;
                                else if (PedList_01.Count > 0)
                                {
                                    int iRanPsyco = RandInt(0, 100);
                                    if (iRanPsyco > 95)
                                    {
                                        iMissionSeq = 40;
                                        ArmNpcMid(Npc_01);
                                        FightingPlayer(Npc_01);
                                        iWait4Sec = Game.GameTime + 25000;

                                        if (!bSubtitles)
                                            QuickSub(sAltLang[144] + "~r~" + sAltLang[143] + "~w~ " + sAltLang[145]);
                                    }
                                    else
                                    {
                                        iMissionSeq = 6;
                                        EnterPlayerVeh(Npc_01, 3, 1.50f);
                                    }
                                    iWait4Sec = Game.GameTime + 12000;
                                }
                            }
                            else if (iMissionSeq == 6)
                            {
                                if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable || !Game.Player.Character.IsInVehicle(VehTrackin_01) || Npc_01.IsDead)
                                    iMissionSeq = 45;
                                else if (Npc_01.IsInHeli)
                                {
                                    iMissionSeq = 7;
                                    vTarget_04.Z -= 1.0f;
                                    TheYellowCorona(vTarget_04, 10.00f);
                                    AddTarget(vTarget_04, false, true, 1.00f, false);
                                    if (!bSubtitles)
                                        QuickSub(sAltLang[102] + "~r~" + sAltLang[143] + "~w~ " + sAltLang[94] + "~y~" + sAltLang[146] + "~w~.");
                                }
                                else
                                {
                                    if (iWait4Sec < Game.GameTime)
                                        VehicleWarp(VehTrackin_01, Npc_01, 3);
                                }
                            }
                            else if (iMissionSeq == 7)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[102] + "~r~" + sAltLang[143] + "~w~ " + sAltLang[94] + "~y~" + sAltLang[146] + "~w~.");

                                if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable || !Game.Player.Character.IsInVehicle(VehTrackin_01) || Npc_01.IsDead)
                                    iMissionSeq = 45;
                                else if (World.GetDistance(vTarget_04, Game.Player.Character.Position) < 5.0f)
                                {
                                    VehTrackin_01.EngineRunning = false;
                                    if (VehTrackin_01.IsInAir == false)
                                    {
                                        StopHere(VehTrackin_01);
                                        RemoveTargets();
                                        iMissionSeq = 8;
                                        Function.Call(Hash.TASK_LEAVE_VEHICLE, Npc_01, Npc_01.CurrentVehicle, 1);
                                        Npc_01.Task.GoTo(vTarget_05);
                                    }
                                }
                            }
                            else if (iMissionSeq == 8)
                            {
                                if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable || Npc_01.IsDead)
                                    iMissionSeq = 45;
                                else if (World.GetDistance(vTarget_04, Game.Player.Character.Position) > 95.0f || World.GetDistance(vTarget_05, Npc_01.Position) < 2.0f)
                                {
                                    iCashReward = 5000;
                                    if (iProcessForPegs != iGotPegsus)
                                        Fruits(4);
                                    iGotPegsus = iProcessForPegs;
                                    iPegsSafeHeliTest = iPegsSafeHeli;
                                    NSCoinInvestments(true, 2, 5, "SecuroServ Shares");
                                    GameOver(false, "", false, iCashReward);
                                }
                            }
                            else if (iMissionSeq == 40)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[144] + "~r~" + sAltLang[143] + "~w~ " + sAltLang[145]);
                                if (VehTrackin_01.IsDead || VehTrackin_01.IsDriveable == false)
                                    iMissionSeq = 45;
                                else if (iWait4Sec < Game.GameTime)
                                {
                                    iCashReward = 5000;
                                    if (iGotPegsus == 0)
                                        Fruits(4);
                                    iGotPegsus = iProcessForPegs;
                                    CleanUpPeds();
                                    CleanUpVehicles();
                                    GameOver(false, "", false, iCashReward);
                                }
                            }
                            else if (iMissionSeq == 45)
                            {
                                NSCoinInvestments(false, 2, 7, "SecuroServ Shares");
                                GameOver(true, "", false, 0);
                            }
                        }       // deliver ceo
                        else if (iLocationX == 3)
                        {
                            if (iMissionSeq == 0)
                            {
                                if (bNotPause)
                                {
                                    Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                    bNotPause = false;
                                }
                                else if (VehicleList_01.Count > 0)
                                {
                                    iMissionSeq = 1;
                                    Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "restrictedareas");
                                    VehBlip(VehTrackin_01, BlipSprite.B11StrikeForce, true, false);

                                    if (bFastTraveltoStart)
                                        WarptoAnyVeh(VehTrackin_01, Game.Player.Character, 1, false);
                                    else if (!bSubtitles)
                                        QuickSub(sAltLang[108] + sAltLang[101] + "~b~" + sAltLang[149] + "~w~ " + sAltLang[99] + "~y~" + sAltLang[147] + "~w~.");
                                }
                            }
                            else if (iMissionSeq == 1)
                            {
                                if (World.GetDistance(VehTrackin_01.Position, Game.Player.Character.Position) < 55.00f)
                                {
                                    iMissionSeq = 2;
                                    VehTrackin_01.FreezePosition = false;
                                    iCashReward = 150000;
                                    float fVicDam = VehTrackin_01.BodyHealth + VehTrackin_01.EngineHealth + VehTrackin_01.PetrolTankHealth;
                                    iCrash4Cash = (int)fVicDam;

                                    if (!bSubtitles)
                                        QuickSub(sAltLang[103] + "~b~" + sAltLang[149] + "~w~.");
                                }
                                else
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[108] + sAltLang[101] + "~b~" + sAltLang[149] + "~w~ " + sAltLang[99] + "~y~" + sAltLang[147] + "~w~.");
                                }
                                Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "re_armybase");
                            }
                            else if (iMissionSeq == 2)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[103] + "~b~" + sAltLang[149] + "~w~.");

                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    iMissionSeq = 3;
                                    VehTrackin_01.CurrentBlip.Remove();
                                    AddTarget(vTarget_03, false, true, 1.00f, false);

                                    if (!bSubtitles)
                                        QuickSub(sAltLang[102] + "~b~" + sAltLang[149] + "~w~ " + sAltLang[104] + "~y~" + sAltLang[150] + "~w~ " + sAltLang[151] + ".");
                                }
                                Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "re_armybase");
                            }
                            else if (iMissionSeq == 3)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[102] + "~b~" + sAltLang[149] + "~w~ " + sAltLang[104] + "~y~" + sAltLang[150] + "~w~ " + sAltLang[151] + ".");

                                if (VehTrackin_01.IsDead || !Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    iMissionSeq = 45;
                                else if (World.GetDistance(vTarget_02, VehTrackin_01.Position) > 2100.00f)
                                {
                                    iMissionSeq = 4;
                                    iTime_01[0] = Game.GameTime + 150000;
                                    RemoveTargets();
                                    Game.Player.WantedLevel = 4;
                                    BeOnOff[0] = false;
                                    ZancudaClosed();
                                    AddDogFighters(5);

                                    if (!bSubtitles)
                                        QuickSub(sAltLang[152] + "~r~" + sAltLang[153] + "~w~ " + sAltLang[154] + "~y~" + sAltLang[151] + "~w~.");
                                }
                                else
                                    Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "re_armybase");
                            }
                            else if (iMissionSeq == 4)
                            {
                                if (VehTrackin_01.IsDead || !Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    iMissionSeq = 45;
                                else if (iTime_01[0] > Game.GameTime)
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[152] + "~r~" + sAltLang[153] + "~w~ " + sAltLang[154] + "~y~" + sAltLang[151] + "~w~.");

                                        if (iWait4Sec < Game.GameTime)
                                            DogFighterTracking();
                                }
                                else
                                {
                                    TheYellowCorona(vTarget_04, 10.00f);
                                    Game.Player.WantedLevel = 2;
                                    RemoveDogFight();
                                    iMissionSeq = 5;

                                    if (!bSubtitles)
                                        QuickSub(sAltLang[110] + "~r~" + sAltLang[125] + "~w~.");
                                }

                                if (iCrash4Cash > 0)
                                    iCashReward = VehDamage(VehTrackin_01, iCrash4Cash, 150000, true, iCashReward, true);

                            }
                            else if (iMissionSeq == 5)
                            {

                                if (bSubtitles)
                                    StickySubTitle(sAltLang[110] + "~r~" + sAltLang[125] + "~w~.");

                                if (VehTrackin_01.IsDead || !Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    iMissionSeq = 45;
                                else if (Game.Player.WantedLevel < 1)
                                {
                                    iMissionSeq = 6;
                                    AddTarget(vTarget_04, false, true, 1.00f, false);

                                    if (!bSubtitles)
                                        QuickSub(sAltLang[102] + "~b~" + sAltLang[149] + "~w~ " + sAltLang[104] + "~y~" + sAltLang[155] + " " + sAltLang[151] + "~w~.");
                                }
                                else if (iCrash4Cash > 0)
                                    iCashReward = VehDamage(VehTrackin_01, iCrash4Cash, 150000, true, iCashReward, true);

                            }
                            else if (iMissionSeq == 6)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[102] + "~b~" + sAltLang[149] + "~w~ " + sAltLang[104] + "~y~" + sAltLang[155] + " " + sAltLang[151] + "~w~.");

                                if (VehTrackin_01.IsDead || !Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    iMissionSeq = 45;
                                if (World.GetDistance(vTarget_04, VehTrackin_01.Position) < 5.0f)
                                {
                                    StopHere(VehTrackin_01);
                                    iMissionSeq = 7;
                                    RemoveTargets();
                                    VehTrackin_01.Position = new Vector3(2134.79f, 4781.249f, 40.41209f);
                                    VehTrackin_01.Heading = 28.53162f;
                                    VehTrackin_01.LockStatus = VehicleLockStatus.Locked;
                                    Vector3 Vx = new Vector3(2159.819f, 4789.745f, 40.73829f);
                                    SlowFastTravel(Vx, 106.2993f);
                                }
                                else if (iCrash4Cash > 0)
                                    iCashReward = VehDamage(VehTrackin_01, iCrash4Cash, 150000, true, iCashReward, true);

                            }
                            else if (iMissionSeq == 7)
                            {
                                if (iProcessForPegs != iGotPegsus)
                                    Fruits(4);
                                iGotPegsus = iProcessForPegs;
                                iPegsWarPlaneTest = iPegsWarPlane;
                                NSCoinInvestments(false, 12, 24, "Warstock Shares");
                                GameOver(false, sAltLang[340] + iMissionVar_01 + ", ", false, iCashReward);
                            }
                            else if (iMissionSeq == 45)
                            {
                                if (BeOnOff[0])
                                {
                                    BeOnOff[0] = false;
                                    ZancudaClosed();
                                }
                                GameOver(true, "", false, 0);
                            }
                        }       // steal brrrrrrt
                        else if (iLocationX == 4)
                        {
                            if (iMissionSeq == 0)
                            {
                                iMissionSeq = 1;
                                TheYellowCorona(vTarget_01, 1.00f);
                                AddTarget(vTarget_01, true, true, 1.00f, false);

                                if (bFastTraveltoStart)
                                    SlowFastTravel(vTarget_01, 0.00f);
                                else if (!bSubtitles)
                                    QuickSub(sAltLang[108] + sAltLang[101] + "~b~" + sAltLang[156] + "~w~ " + sAltLang[93] + "~y~" + sAltLang[157] + "~w~.");

                            }
                            else if (iMissionSeq == 1)
                            {
                                if (bNotPause)
                                {
                                    Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                    bNotPause = false;
                                }
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[108] + sAltLang[101] + "~b~" + sAltLang[156] + "~w~ " + sAltLang[93] + "~y~" + sAltLang[157] + "~w~.");

                                if (World.GetDistance(vTarget_01, Game.Player.Character.Position) < 2.0f)
                                {
                                    iMissionSeq = 2;
                                    RemoveTargets();
                                }
                            }
                            else if (iMissionSeq == 2)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[108] + sAltLang[101] + "~b~" + sAltLang[156] + "~w~ " + sAltLang[93] + "~y~" + sAltLang[157] + "~w~.");

                                iMissionSeq = 3;
                                AddTarget(vTarget_02, true, true, 1.00f, false);
                                TheYellowCorona(vTarget_02, 1.00f);
                            }
                            else if (iMissionSeq == 3)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[108] + sAltLang[101] + "~b~" + sAltLang[156] + "~w~ " + sAltLang[93] + "~y~" + sAltLang[157] + "~w~.");

                                if (World.GetDistance(vTarget_02, Game.Player.Character.Position) < 2.0f && VehicleList_01.Count > 0)
                                {
                                    iMissionSeq = 4;
                                    RemoveTargets();
                                    VehTrackin_01.FreezePosition = false;
                                    VehBlip(VehTrackin_01, BlipSprite.Helicopter, true, false);
                                }
                            }
                            else if (iMissionSeq == 4)
                            {
                                if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable)
                                    iMissionSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    iMissionSeq = 5;
                                    VehTrackin_01.CurrentBlip.Remove();
                                }
                                else if (VehTrackin_01.Position.DistanceTo(Game.Player.Character.Position) < 15.00f)
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[103] + "~b~" + sAltLang[156] + "~w~.");
                                    else if (BeOff[0])
                                    {
                                        QuickSub(sAltLang[103] + "~b~" + sAltLang[156] + "~w~.");
                                        BeOff[0] = false;
                                    }
                                }
                                else
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[108] + sAltLang[101] + "~b~" + sAltLang[156] + "~w~ " + sAltLang[93] + "~y~" + sAltLang[157] + "~w~.");
                                }
                            }
                            else if (iMissionSeq == 5)
                            {
                                iMissionSeq = 6;
                                AddTarget(vTarget_04, false, true, 1.00f, false);

                                if (!bSubtitles)
                                    QuickSub(sAltLang[92] + "~b~" + sAltLang[143] + "~w~ " + sAltLang[162] + sAltLang[159] + "~r~" + sAltLang[158] + "~w~ " + sAltLang[160] + " " + sAltLang[112] + "~y~" + sAltLang[127] + "~w~.");

                            }
                            else if (iMissionSeq == 6)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[92] + "~b~" + sAltLang[143] + "~w~ " + sAltLang[162] + sAltLang[159] + "~r~" + sAltLang[158] + "~w~ " + sAltLang[160] + " " + sAltLang[112] + "~y~" + sAltLang[127] + "~w~.");

                                if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable)
                                    iMissionSeq = 45;
                                else if (World.GetDistance(vTarget_04, Game.Player.Character.Position) < 400.00f)
                                {
                                    iMissionSeq = 7;
                                    RemoveTargets();
                                    VehicleSpawn("Cargobob2", vTarget_04, 90.0f, false, false, true, true, 6, 0, 9, 2, false);
                                }
                            }
                            else if (iMissionSeq == 7)
                            {
                                if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable)
                                    iMissionSeq = 45;
                                else if (PedList_03.Count > 0)
                                {
                                    if (Npc_01.IsInVehicle(VehTrackin_02))
                                    {
                                        iMissionSeq = 8;
                                        BeOnOff[0] = false;
                                        iMissionVar_01 = VectorList_01.Count;
                                        FlyAway(Npc_01, vTarget_04, 200.00f, 0.00f);
                                    }
                                }
                            }
                            else if (iMissionSeq == 8)
                            {
                                if (bSubtitles)
                                {
                                    if (Game.Player.Character.Position.Z < VehTrackin_02.Position.Z)
                                        StickySubTitle(sAltLang[92] + "~b~" + sAltLang[143] + "~w~ " + sAltLang[162] + "~g~" + sAltLang[160] + "~w~.");
                                    else
                                        StickySubTitle(sAltLang[92] + "~b~" + sAltLang[143] + "~w~ " + sAltLang[162] + "~o~" + sAltLang[161] + "~w~.");
                                }

                                if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable)
                                    iMissionSeq = 45;
                                else if (VehTrackin_02.IsDead || VehTrackin_03.IsDead)
                                {
                                    VehTrackin_02.Explode();
                                    VehTrackin_03.Explode();
                                    iCashReward = 500;
                                    iMissionSeq = 99;
                                    if (iProcessForPegs != iGotPegsus)
                                        Fruits(4);
                                    iGotPegsus = iProcessForPegs;
                                    iPegsWarHeliTest = iPegsWarHeli;
                                    GameOver(false, "", false, iCashReward);
                                }
                                else if (!VehTrackin_03.IsAttachedTo(VehTrackin_02))
                                    VehTrackin_03.AttachTo(VehTrackin_02, VehTrackin_03.Handle, new Vector3(0.00f, 0.00f, -3.00f), new Vector3(0.00f, -15.00f, 0.00f));
                                else if (World.GetDistance(vTarget_04, Npc_01.Position) < 30.00f)
                                {
                                    if (iMissionVar_01 < 1)
                                    {
                                        iMissionSeq = 44;
                                        VehTrackin_01.CurrentBlip.Remove();
                                    }
                                    else
                                    {
                                        iMissionVar_01 -= 1;
                                        vTarget_04 = VectorList_01[iMissionVar_01];
                                        FlyAway(Npc_01, vTarget_04, 200.00f, 0.00f);
                                    }
                                }
                                else if (BeOnOff[0])
                                {
                                    if (World.GetDistance(vTarget_05, Npc_01.Position) < 20.00f)
                                    {
                                        FlyAway(Npc_01, vTarget_04, 150.00f, 0.00f);
                                        BeOnOff[0] = false;
                                    }
                                }
                                else if (Npc_01.Position.Z < vTarget_04.Z - 50.0f && iMissionVar_01 > 2)
                                {
                                    BeOnOff[0] = true;
                                    vTarget_05 = Npc_01.Position;
                                    vTarget_05.Z = vTarget_05.Z + 150.00f;
                                    FlyAway(Npc_01, vTarget_05, 150.00f, 0.00f);
                                }
                            }
                            else if (iMissionSeq == 44)
                            {
                                VehTrackin_02.Position = new Vector3(6000.01f, -2500.01f, 1500.01f);
                                VehTrackin_03.Position = new Vector3(6000.01f, -2500.01f, 1500.01f);
                                bPacBouns = true;
                                GameOver(true, "", true, 0);
                            }
                            else if (iMissionSeq == 45)
                            {
                                GameOver(true, "", false, 0);
                            }
                        }       // ceo imp/exp
                        else if (iLocationX == 5)
                        {
                            if (BeOnOff[0])
                            {
                                if (iTime_01[0] > Game.GameTime)
                                {
                                    int iPost = iTime_01[0] - Game.GameTime;
                                    iPost = iPost / 10;
                                    ttTextBar_01.Text = " " + iPost + "Lbs ";
                                }
                                else
                                {
                                    BeOnOff[0] = false;
                                    iMissionSeq = 45;
                                }

                                if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, "scr_carsteal4"))
                                {
                                    Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_carsteal4");
                                    Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_carsteal4_wheel_burnout", VehTrackin_01, -3.94f, -0.8f, -0.55f, 0, 0, 0, 0.30f, 0, 1, 0);
                                    Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_COLOUR, 220.0f, 220.0f, 220.0f);
                                }
                                else
                                    Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_carsteal4");

                                if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, "scr_carsteal4"))
                                {
                                    Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_carsteal4");
                                    Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_carsteal4_wheel_burnout", VehTrackin_01, 3.94f, -0.8f, -0.55f, 0, 0, 0, 0.30f, 0, 1, 0);
                                    Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_COLOUR, 220.0f, 220.0f, 220.0f);
                                }
                                else
                                    Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_carsteal4");
                                if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, "scr_carsteal4"))
                                {
                                    Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_carsteal4");
                                    Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_carsteal4_wheel_burnout", VehTrackin_01, -2.815f, -0.8f, -0.6f, 0, 0, 0, 0.30f, 0, 1, 0);
                                    Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_COLOUR, 220.0f, 220.0f, 220.0f);
                                }
                                else
                                    Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_carsteal4");
                                if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, "scr_carsteal4"))
                                {
                                    Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_carsteal4");
                                    Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_carsteal4_wheel_burnout", VehTrackin_01, 2.815f, -0.8f, -0.6f, 0, 0, 0, 0.30f, 0, 1, 0);
                                    Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_COLOUR, 220.0f, 220.0f, 220.0f);
                                }
                                else
                                    Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_carsteal4");
                                if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, "scr_carsteal4"))
                                {
                                    Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_carsteal4");
                                    Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_carsteal4_wheel_burnout", VehTrackin_01, -1.687f, -0.8f, -0.65f, 0, 0, 0, 0.30f, 0, 1, 0);
                                    Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_COLOUR, 220.0f, 220.0f, 220.0f);
                                }
                                else
                                    Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_carsteal4");
                                if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, "scr_carsteal4"))
                                {
                                    Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_carsteal4");
                                    Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_carsteal4_wheel_burnout", VehTrackin_01, 1.687f, -0.8f, -0.65f, 0, 0, 0, 0.30f, 0, 1, 0);
                                    Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_COLOUR, 220.0f, 220.0f, 220.0f);
                                }
                                else
                                    Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_carsteal4");
                                if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, "scr_carsteal4"))
                                {
                                    Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_carsteal4");
                                    Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_carsteal4_wheel_burnout", VehTrackin_01, -0.562f, -0.8f, -0.7f, 0, 0, 0, 0.30f, 0, 1, 0);
                                    Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_COLOUR, 220.0f, 220.0f, 220.0f);
                                }
                                else
                                    Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_carsteal4");
                                if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, "scr_carsteal4"))
                                {
                                    Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_carsteal4");
                                    Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_carsteal4_wheel_burnout", VehTrackin_01, 0.562f, -0.8f, -0.7f, 0, 0, 0, 0.30f, 0, 1, 0);
                                    Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_COLOUR, 220.0f, 220.0f, 220.0f);
                                }
                                else
                                    Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_carsteal4");
                            }
                            if (iMissionSeq == 0)
                            {
                                if (VehicleList_01.Count > 0)
                                {
                                    iMissionSeq = 1;
                                    AddTarget(vTarget_01, true, true, 1.00f, false);

                                    if (bFastTraveltoStart)
                                        WarptoAnyVeh(VehTrackin_01, Game.Player.Character, 1, false);
                                    else if (!bSubtitles)
                                        QuickSub(sAltLang[108] + sAltLang[101] + "~b~" + sAltLang[148] + "~w~ " + sAltLang[99] + "~y~" + sAltLang[155] + " " + sAltLang[151] + "~w~.");

                                }
                            }
                            else if (iMissionSeq == 1)
                            {
                                if (bNotPause)
                                {
                                    Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                    bNotPause = false;
                                }
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[108] + sAltLang[101] + "~b~" + sAltLang[148] + "~w~ " + sAltLang[99] + "~y~" + sAltLang[155] + " " + sAltLang[151] + "~w~.");

                                if (World.GetDistance(vTarget_01, Game.Player.Character.Position) < 55.0f)
                                {
                                    RemoveTargets();
                                    VehTrackin_01.FreezePosition = false;
                                    VehBlip(VehTrackin_01, BlipSprite.Plane, true, false);
                                    int iPos = iTime_01[0] / 10;
                                    ttTextBar_01.Text = " " + iPos + " Lbs ";
                                    BeOnOff[2] = true;
                                    iMissionSeq = 2;

                                    if (!bSubtitles)
                                        QuickSub(sAltLang[103] + "~b~" + sAltLang[148] + "~w~.");
                                }
                            }
                            else if (iMissionSeq == 2)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[103] + "~b~" + sAltLang[148] + "~w~.");

                                if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable)
                                    iMissionSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    iMissionSeq = 3;
                                    BeOnOff[1] = true;
                                    VehTrackin_01.CurrentBlip.Remove();
                                    AddTarget(vTarget_02, true, true, 1.00f, false);
                                    iMissionVar_01 = VectorList_01.Count;

                                    if (!bSubtitles)
                                        QuickSub(sAltLang[163] + sAltLang[164]);
                                }
                            }
                            else if (iMissionSeq == 3)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[163] + sAltLang[164]);
                                Vector3 VplayFace = new Vector3(0.0f, 0.0f, Game.Player.Character.Heading);
                                World.DrawMarker(MarkerType.VerticleCircle, vTarget_02, Vector3.Zero, VplayFace, new Vector3(20.0f, 20.0f, 20.0f), color: Color.Yellow);
                                if (VehTrackin_01.IsDead || !Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    iMissionSeq = 45;
                                else if (World.GetDistance(vTarget_02, VehTrackin_01.Position) < 15.0f)
                                {
                                    iMissionSeq = 4;
                                    iMissionVar_01 = iMissionVar_01 - 1;
                                    RemoveTargets();
                                    vTarget_02 = VectorList_01[iMissionVar_01];
                                    AddTarget(vTarget_02, false, true, 1.00f, false);
                                    int mark2 = iMissionVar_01 - 1;
                                    vTarget_05 = VectorList_01[mark2];
                                    AddTarget(vTarget_05, false, false, 1.00f, false);

                                    BeOnOff[1] = false;
                                    BeOnOff[0] = false;

                                    if (!bSubtitles)
                                        QuickSub(sAltLang[165] + "~y~" + sAltLang[166] + "~w~ " + sAltLang[101] + "~o~" + sAltLang[167] + "~w~ " + sAltLang[127] + ".");

                                }
                                VTBTimerPool.Draw();
                            }
                            else if (iMissionSeq == 4)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[165] + "~y~" + sAltLang[166] + "~w~ " + sAltLang[101] + "~o~" + sAltLang[167] + "~w~ " + sAltLang[127] + ".");
                                VTBTimerPool.Draw();
                                Vector3 VplayFace = new Vector3(0.0f, 0.0f, Game.Player.Character.Heading);
                                if (BeOnOff[0])
                                    World.DrawMarker(MarkerType.VerticleCircle, vTarget_02, Vector3.Zero, VplayFace, new Vector3(20.0f, 20.0f, 20.0f), color: Color.Orange);
                                else
                                    World.DrawMarker(MarkerType.VerticleCircle, vTarget_02, Vector3.Zero, VplayFace, new Vector3(20.0f, 20.0f, 20.0f), color: Color.Yellow);

                                if (Target_02 != null)
                                    World.DrawMarker(MarkerType.VerticleCircle, vTarget_05, Vector3.Zero, VplayFace, new Vector3(10.0f, 10.0f, 10.0f), color: Color.Orange);
                                if (VehTrackin_01.IsDead || !Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    iMissionSeq = 45;
                                else if (World.GetDistance(vTarget_02, VehTrackin_01.Position) < 15.0f)
                                {
                                    if (iMissionVar_01 < 1)
                                        iMissionSeq = 5;
                                    else
                                    {
                                        iMissionVar_01 = iMissionVar_01 - 1;
                                        RemoveTargets();

                                        Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "CHECKPOINT_UNDER_THE_BRIDGE", "HUD_MINI_GAME_SOUNDSET", true);
                                        vTarget_02 = VectorList_01[iMissionVar_01];
                                        AddTarget(vTarget_02, false, true, 1.00f, false);
                                        if (BeOnOff[1])
                                        {
                                            BeOnOff[1] = false;
                                            BeOnOff[0] = false;
                                            iTime_01[0] -= Game.GameTime;
                                            int mark2 = iMissionVar_01 - 1;
                                            if (iMissionVar_01 > 0)
                                            {
                                                vTarget_05 = VectorList_01[mark2];
                                                AddTarget(vTarget_05, false, false, 1.00f, false);
                                            }

                                            if (BeOnOff[2])
                                            {
                                                FindAndReplaceVeh(VehTrackin_01.Position, 0, 1, 2, 8, 0, false, false, true, 155.00f, 45.00f, "TECHNICAL", false, 1, 0, true);
                                                BeOnOff[2] = false;
                                            }
                                        }
                                        else
                                        {
                                            iTime_01[0] = Game.GameTime + iTime_01[0];
                                            BeOnOff[1] = true;
                                            BeOnOff[0] = true;
                                        }
                                    }
                                }
                            }
                            else if (iMissionSeq == 5)
                            {
                                int iPost = iTime_01[0] - Game.GameTime;
                                iPost = iPost / 10;
                                iCashReward = 10000 + iPost;
                                if (iProcessForPegs != iGotPegsus)
                                    Fruits(4);
                                iGotPegsus = iProcessForPegs;
                                iPegsSafePlaneTest = iPegsSafePlane;
                                NSCoinInvestments(true, 4, 9, "Monsantos Shares");
                                GameOver(false, "" + sAltLang[341] + "" + iPost + " " + sAltLang[342] + ", ", false, iCashReward);
                            }
                            else if (iMissionSeq == 45)
                            {
                                iMissionSeq = 99;
                                NSCoinInvestments(false, 7, 12, "Monsantos Shares");
                                GameOver(true, "", false, 0);
                            }
                        }       // crop duster
                        else
                        {
                            if (iMissionSeq == 0)
                            {
                                if (VehicleList_01.Count > 0)
                                {
                                    iMissionSeq = 1;
                                    AddTarget(vTarget_01, true, true, 1.00f, false);
                                    StayInVehicle(Game.Player.Character, true);

                                    if (bFastTraveltoStart)
                                        WarptoAnyVeh(VehTrackin_01, Game.Player.Character, 1, false);
                                    else if (!bSubtitles)
                                        QuickSub(sAltLang[108] + sAltLang[101] + "~b~" + sAltLang[142] + "~w~ " + sAltLang[99] + sAltLang[112] + "~y~" + sAltLang[171] + "~w~.");

                                }
                            }
                            else if (iMissionSeq == 1)
                            {
                                if (bNotPause)
                                {
                                    Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                    bNotPause = false;
                                }
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[108] + sAltLang[101] + "~b~" + sAltLang[142] + "~w~ " + sAltLang[99] + sAltLang[112] + "~y~" + sAltLang[171] + "~w~.");

                                if (World.GetDistance(vTarget_01, Game.Player.Character.Position) < 95.0f)
                                {
                                    RemoveTargets();
                                    VehTrackin_01.FreezePosition = false;
                                    VehBlip(VehTrackin_01, BlipSprite.Helicopter, true, false);
                                    iMissionSeq = 2;

                                    if (!bSubtitles)
                                        QuickSub(sAltLang[103] + "~b~" + sAltLang[142] + "~w~.");
                                }
                            }
                            else if (iMissionSeq == 2)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[103] + "~b~" + sAltLang[142] + "~w~.");

                                if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable)
                                    iMissionSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    VehTrackin_01.CurrentBlip.Remove();
                                    int iRando = RandInt(13, 14);
                                    NPCSpawn(RandNPC(iRando), vTarget_02, 121.00f, 35, 120, 0, 9, 0, null, 0, true, false, 1, 0);
                                    NPCSpawn(RandNPC(iRando), vTarget_02, 121.00f, 35, 120, 0, 10, 0, null, 0, true, false, 2, 0);
                                    iMissionSeq = 3;
                                }
                            }
                            else if (iMissionSeq == 3)
                            {
                                if (PedList_03.Count > 1)
                                {
                                    iMissionSeq = 4;
                                    iWait4Sec = Game.GameTime + 20000;
                                }
                            }
                            else if (iMissionSeq == 4)
                            {
                                if (VehTrackin_01.IsDead || !Game.Player.Character.IsInVehicle() || Npc_01.IsDead || Npc_02.IsDead)
                                    iMissionSeq = 45;
                                else if (Npc_01.IsInVehicle() && Npc_02.IsInVehicle())
                                {
                                    iMissionSeq = 5;
                                    iMissionVar_01 = VectorList_01.Count - 1;
                                    vTarget_03 = VectorList_01[iMissionVar_01];
                                    vTarget_03.Z = vTarget_03.Z - 1.0f;
                                    iMissionVar_03 = 0;
                                    ttTextBar_01.Text = "0/4";
                                    TheYellowCorona(vTarget_03, 10.00f);
                                    AddTarget(vTarget_03, false, true, 1.00f, false);
                                    Npc_01.CurrentBlip.Remove();
                                    Npc_02.CurrentBlip.Remove();

                                    if (!bSubtitles)
                                        QuickSub(sAltLang[108] + sAltLang[101] + "~y~" + sAltLang[127] + "~w~.");
                                }
                                else
                                {
                                    if (iWait4Sec < Game.GameTime)
                                    {
                                        if (!Npc_01.IsInVehicle() || !Npc_02.IsInVehicle())
                                        {
                                            VehicleWarp(VehTrackin_01, Npc_01, 3);
                                            VehicleWarp(VehTrackin_01, Npc_02, 4);
                                        }
                                    }
                                }
                            }
                            else if (iMissionSeq == 5)
                            {
                                if (!Game.Player.Character.IsInVehicle() || Npc_01.IsDead || Npc_02.IsDead || VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (World.GetDistance(vTarget_03, VehTrackin_01.Position) < 100.00f)
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[168] + "~y~" + sAltLang[127] + "~w~.");

                                    if (World.GetDistance(vTarget_03, VehTrackin_01.Position) < 10.00f)
                                    {
                                        if (!VehTrackin_01.IsInAir)
                                        {
                                            iMissionSeq = 6;
                                            VehTrackin_01.EngineRunning = false;
                                            VehTrackin_01.IsDriveable = false;
                                            Pilot06_TakeAPhoto(Npc_01);
                                            Pilot06_TakeAPhoto(Npc_02);
                                            BeOnOff[0] = true;
                                            iWait4Sec = Game.GameTime + 7000;
                                            RemoveTargets();
                                            if (!bSubtitles)
                                                QuickSub(sAltLang[169] + "~r~" + sAltLang[170] + "~w~.");
                                        }
                                    }
                                }
                                else
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[108] + sAltLang[101] + "~y~" + sAltLang[127] + "~w~.");
                                }
                                VTBTimerPool.Draw();
                            }
                            else if (iMissionSeq == 6)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[169] + "~r~" + sAltLang[170] + "~w~.");

                                if (VehTrackin_01.IsDead || !Game.Player.Character.IsInVehicle() || Npc_01.IsDead || Npc_02.IsDead)
                                    iMissionSeq = 45;
                                else if (iWait4Sec < Game.GameTime)
                                {
                                    if (BeOnOff[0])
                                    {
                                        BeOnOff[0] = false;
                                        Npc_01.Task.ClearAll();
                                        Npc_01.Task.PlayAnimation("cellphone@self", "selfie", 8.00f, 3000, true, 1.00f);
                                        Npc_01.BlockPermanentEvents = true;

                                        Npc_02.Task.ClearAll();
                                        Npc_02.Task.PlayAnimation("cellphone@self", "selfie", 8.00f, 3000, true, 1.00f);
                                        Npc_02.BlockPermanentEvents = true;

                                        iWait4Sec = Game.GameTime + 3000;
                                    }
                                    else
                                    {
                                        if (!Npc_01.IsInVehicle())
                                        {
                                            iWait4Sec = Game.GameTime + 4000;
                                            EnterPlayerVeh(Npc_01, 2, 1.00f);
                                        }
                                        if (!Npc_02.IsInVehicle())
                                        {
                                            iWait4Sec = Game.GameTime + 4000;
                                            EnterPlayerVeh(Npc_02, 3, 1.00f);
                                        }
                                    }
                                }
                                else if (Npc_01.IsInVehicle() && Npc_02.IsInVehicle())
                                {
                                    VehTrackin_01.EngineRunning = true;
                                    VehTrackin_01.IsDriveable = true;
                                    Npc_01.CurrentBlip.Remove();
                                    Npc_02.CurrentBlip.Remove();
                                    if (iMissionVar_01 < 1)
                                    {
                                        RemoveTargets();
                                        ttTextBar_01.Text = "4/4";
                                        iMissionSeq = 7;
                                    }
                                    else
                                    {
                                        iMissionSeq = 5;
                                        iMissionVar_01 = iMissionVar_01 - 1;
                                        vTarget_03 = VectorList_01[iMissionVar_01];
                                        vTarget_03.Z = vTarget_03.Z - 2.0f;
                                        iMissionVar_03 = iMissionVar_03 + 1;
                                        ttTextBar_01.Text = "" + iMissionVar_03 + "/4";
                                        TheYellowCorona(vTarget_03, 10.00f);
                                        AddTarget(vTarget_03, false, true, 1.00f, false);
                                    }
                                }
                                VTBTimerPool.Draw();
                            }
                            else if (iMissionSeq == 7)
                            {
                                iMissionSeq = 8;
                                vTarget_01.Z = vTarget_01.Z - 2.0f;
                                AddTarget(vTarget_01, false, true, 1.00f, false);
                                TheYellowCorona(vTarget_01, 10.00f);
                                VTBTimerPool.Draw();
                                if (!bSubtitles)
                                    QuickSub(sAltLang[172] + "~y~" + sAltLang[171] + "~w~.");

                            }
                            else if (iMissionSeq == 8)
                            {
                                if (VehTrackin_01.IsDead || Npc_01.IsDead || Npc_02.IsDead || !Game.Player.Character.IsInVehicle())
                                    iMissionSeq = 45;
                                else if (World.GetDistance(vTarget_01, VehTrackin_01.Position) < 100.00f)
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[168] + "~y~" + sAltLang[127] + "~w~.");
                                    if (World.GetDistance(vTarget_01, VehTrackin_01.Position) < 5.0f)
                                    {
                                        if (!VehTrackin_01.IsInAir)
                                        {
                                            iMissionSeq = 9;
                                            VehTrackin_01.EngineRunning = false;
                                            VehTrackin_01.IsDriveable = false;
                                            RemoveTargets();
                                            iWait4Sec = iWait4Sec + 2000;
                                            Pilot06_GoBacktoOff(Npc_01);
                                            Pilot06_GoBacktoOff(Npc_02);
                                        }
                                    }
                                }
                                else
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[172] + "~y~" + sAltLang[171] + "~w~.");
                                }
                                VTBTimerPool.Draw();
                            }
                            else if (iMissionSeq == 9)
                            {
                                if (Npc_01.IsDead || Npc_02.IsDead)
                                    iMissionSeq = 45;
                                else if (Game.GameTime > iWait4Sec)
                                {
                                    iMissionSeq = 10;
                                    iWait4Sec = Game.GameTime + 12000;
                                    VehTrackin_01.EngineRunning = true;
                                    VehTrackin_01.IsDriveable = true;
                                }
                            }
                            else if (iMissionSeq == 10)
                            {
                                if (Npc_01.IsDead || Npc_02.IsDead)
                                    iMissionSeq = 45;
                                else if (Npc_01.Position.DistanceTo(vTarget_02) < 6.00f || Game.GameTime > iWait4Sec)
                                {
                                    Npc_01.Position = vTarget_03;
                                    Npc_02.Position = vTarget_03;
                                    iCashReward = RandInt(7000, 9000);
                                    if (iProcessForPegs != iGotPegsus)
                                        Fruits(4);
                                    iGotPegsus = iProcessForPegs;
                                    iPegsSafeHeliTest = iPegsSafeHeli;
                                    NSCoinInvestments(true, 7, 9, "Higgins Shares");
                                    GameOver(false, "", false, iCashReward);
                                }
                            }
                            else if (iMissionSeq == 45)
                            {
                                NSCoinInvestments(false, 5, 11, "Higgins Shares");
                                GameOver(true, "", false, 0);
                            }
                        }                            // heil tours
                    }        //Pilot
                    else if (iJobType == 7)
                    {
                        if (Game.Player.WantedLevel > 0)
                            Game.Player.WantedLevel = 0;

                        if (BeOnOff[0])
                        {
                            if (BeOnOff[1])
                            {
                                if (iTime_01[0] > Game.GameTime)
                                {

                                    int iTotal = iTime_01[0] - Game.GameTime;
                                    FindTheTime(iTotal, 6, "", true);
                                }
                                else
                                {
                                    BeOnOff[1] = false;
                                    VTBTimerPool.Remove(ttTextBar_02);
                                    iMissionSeq = 17;
                                }
                            }
                            if (sList_01.Count > 0)
                            {
                                if (BeOnOff[2])
                                {
                                    if (iTime_01[1] < Game.GameTime)
                                    {
                                        iTime_01[1] = Game.GameTime + RandInt(50, 700);
                                        if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, sList_01[0]))
                                        {
                                            Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, sList_01[0]);
                                            Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, sList_01[1], Npc_01.Handle, 0.0f, 0.15f, 0.75f, 0.0f, 0.0f, 90.0f, 1.0f, false, false, false);
                                        }
                                        else
                                        {
                                            Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, sList_01[0]);
                                        }
                                        if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, sList_01[2]))
                                        {
                                            Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, sList_01[2]);
                                            Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, sList_01[3], Npc_01.Handle, 0.0f, 0.15f, 0.75f, 0.0f, 0.0f, 90.0f, RandFlow(0.01f, 0.5f), false, false, false);
                                        }
                                        else
                                        {
                                            Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, sList_01[2]);
                                        }
                                    }
                                }
                                else
                                {
                                    if (iTime_01[1] < Game.GameTime)
                                    {
                                        iTime_01[1] = Game.GameTime + RandInt(50, 700);
                                        if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, sList_01[4]))
                                        {
                                            Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, sList_01[4]);
                                            Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, sList_01[5], Npc_01.Handle, 0.3f, -0.3f, -0.4f, 180.0f, 270.0f, 90.0f, 1.0f, true, true, true);
                                        }
                                        else
                                        {
                                            Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, sList_01[4]);
                                        }
                                        if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, sList_01[2]))
                                        {
                                            Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, sList_01[2]);
                                            Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, sList_01[3], Npc_01.Handle, 0.0f, 0.15f, 0.75f, 0.0f, 0.0f, 90.0f, RandFlow(0.01f, 0.5f), false, false, false);
                                        }
                                        else
                                        {
                                            Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, sList_01[2]);
                                        }
                                    }
                                }
                            }
                        }

                        if (iMissionSeq == 0)
                        {
                            if (VehicleList_01.Count > 0)
                            {
                                iMissionSeq = 1;
                                StayInVehicle(Game.Player.Character, true);
                                if (!bAmberAntz)
                                {
                                    if (bFastTraveltoStart)
                                        WarptoAnyVeh(VehTrackin_01, Game.Player.Character, 1, false);
                                    else if (!bSubtitles)
                                        QuickSub(sAltLang[108] + sAltLang[101] + "~b~" + sAltLang[173] + "~w~ " + sAltLang[96] + "~y~" + sHospital + "~w~.");

                                }
                            }
                        }
                        else if (iMissionSeq == 1)
                        {
                            if (bNotPause)
                            {
                                Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                bNotPause = false;
                            }
                            if (bSubtitles && !bAmberAntz)
                                StickySubTitle(sAltLang[108] + sAltLang[101] + "~b~" + sAltLang[173] + "~w~ " + sAltLang[96] + "~y~" + sHospital + "~w~.");

                            if (VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                            {
                                iMissionSeq = 2;
                                AddTarget(vTarget_01, true, true, 1.00f, false);
                                BeOnOff[4] = false;
                                if (VehTrackin_01.CurrentBlip.Exists())
                                    VehTrackin_01.CurrentBlip.Remove();
                                if (!bSubtitles)
                                    QuickSub(sAltLang[108] + sAltLang[101] + "~r~" + sAltLang[174] + "~w~ " + sAltLang[175] + "~y~" + World.GetStreetName(vTarget_01) + "~w~.");
                            }
                            else if (Game.Player.Character.Position.DistanceTo(VehTrackin_01.Position) < 35.00f && !bAmberAntz)
                            {
                                if (!VehTrackin_01.IsOnAllWheels)
                                {
                                    VehTrackin_01.Position = vGetaway;
                                    VehTrackin_01.Rotation = new Vector3(0.00f, 0.00f, fGetDir);
                                }
                            }
                        }
                        else if (iMissionSeq == 2)
                        {
                            if (bSubtitles)
                                StickySubTitle(sAltLang[108] + sAltLang[101] + "~r~" + sAltLang[174] + "~w~ " + sAltLang[175] + "~y~" + World.GetStreetName(vTarget_01) + "~w~.");

                            if (VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else if (BeOnOff[4])
                            {
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[4] = false;
                                    VehTrackin_01.CurrentBlip.Remove();
                                }
                            }
                            else if (World.GetDistance(vTarget_01, Game.Player.Character.Position) < 95.0f)
                            {
                                iMissionSeq = 3;
                                NPCSpawn(RandNPC(RandInt(1, 35)), vTarget_01, 0.00f, 45, 160, 0, 29, 0, null, 0, false, false, 1, 0);
                            }
                            else
                            {
                                if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[4] = true;
                                    VehBlip(VehTrackin_01, BlipSprite.ArmoredTruck, false, false);
                                }
                            }
                        }
                        else if (iMissionSeq == 3)
                        {
                            if (bSubtitles)
                                StickySubTitle(sAltLang[108] + sAltLang[101] + "~r~" + sAltLang[174] + "~w~ " + sAltLang[175] + "~y~" + World.GetStreetName(vTarget_01) + "~w~.");

                            if (VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else if (BeOnOff[4])
                            {
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[4] = false;
                                    VehTrackin_01.CurrentBlip.Remove();
                                }
                            }
                            else if (World.GetDistance(vTarget_01, Game.Player.Character.Position) < 50.00f)
                            {
                                iMissionSeq = 4;
                                RemoveTargets();
                                BeOnOff[2] = false;
                                BeOnOff[0] = true;
                                Npc_01.Task.PlayAnimation("combat@damage@writhe", "writhe_loop", 8.0f, -1, true, 1.0f);
                                Npc_01.AlwaysKeepTask = true;
                                Npc_01.BlockPermanentEvents = true;
                                Npc_01.ApplyDamage(50);
                                PedBlimp(Npc_01, BlipColor.BlueLight, 0.75f, false, true);

                                if (!bSubtitles)
                                    QuickSub(sAltLang[178] + "~b~" + sAltLang[173] + "~w~.");
                            }
                            else
                            {
                                if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[4] = true;
                                    VehBlip(VehTrackin_01, BlipSprite.ArmoredTruck, false, false);
                                }
                            }
                        }
                        else if (iMissionSeq == 4)
                        {
                            World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(Npc_01.Position.X, Npc_01.Position.Y, Npc_01.Position.Z + 2.00f), Vector3.Zero, new Vector3(0.00f, 180.00f, Npc_01.Heading), new Vector3(0.50f, 0.50f, 0.50f), Color.AntiqueWhite);
                            if (Npc_01.IsDead || VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else if (BeOnOff[4])
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[108] + sAltLang[101] + "~y~" + sAltLang[174] + "~w~.");

                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[4] = false;
                                    VehTrackin_01.CurrentBlip.Remove();
                                }
                                else if (World.GetDistance(Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 1), Npc_01.Position) < 0.75f)
                                {
                                    iMissionSeq = 25;
                                    Game.Player.CanControlCharacter = false;
                                    Ambulance_Menu();
                                }
                            }
                            else
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[178] + "~b~" + sAltLang[173] + "~w~.");

                                if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[4] = true;
                                    Npc_01.FreezePosition = true;
                                    VehBlip(VehTrackin_01, BlipSprite.ArmoredTruck, false, false);
                                }
                            }
                        }
                        else if (iMissionSeq == 5)
                        {


                            if (Npc_01.IsDead || VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else if (Npc_01.IsInVehicle())
                            {
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    iMissionSeq = 6;
                                    Ambulance_StartLine();

                                    if (!bSubtitles)
                                        QuickSub(sAltLang[108] + sAltLang[101] + "~y~" + sAltLang[176] + "~w~ " + sAltLang[177] + ".");
                                }
                            }
                            else if (BeOnOff[4])
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[103] + "~b~" + sAltLang[173] + "~w~.");

                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[4] = false;
                                    VehTrackin_01.CurrentBlip.Remove();
                                }
                            }
                            else
                            {
                                ControlerUI(sAltLang[361] + "~b~" + sAltLang[174] + "~w~.", 1);

                                if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[4] = true;
                                    VehBlip(VehTrackin_01, BlipSprite.ArmoredTruck, false, false);
                                }
                                else if (Function.Call<bool>(Hash.IS_HORN_ACTIVE, VehTrackin_01))
                                {
                                    WarptoPlayerVeh(Npc_01, 2);
                                }
                            }
                        }
                        else if (iMissionSeq == 6)
                        {
                            if (bSubtitles)
                            {
                                if (BeOnOff[6])
                                    StickySubTitle(sAltLang[108] + sAltLang[101] + "~y~" + sAltLang[176] + "~w~.");
                                else
                                    StickySubTitle(sAltLang[108] + sAltLang[101] + "~y~" + sAltLang[176] + "~w~ " + sAltLang[177] + ".");
                            }

                            if (Npc_01.IsDead || VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else if (BeOnOff[3] && World.GetDistance(vTarget_02, VehTrackin_01.Position) < 75.00f)
                            {
                                MoveThatCar(vTarget_02);
                                BeOnOff[3] = false;
                            }
                            else if (BeOnOff[4])
                            {
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[4] = false;
                                    VehTrackin_01.CurrentBlip.Remove();
                                }
                            }
                            else
                            {
                                if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[4] = true;
                                    VehBlip(VehTrackin_01, BlipSprite.ArmoredTruck, false, false);
                                }
                                else if (World.GetDistance(vTarget_02, VehTrackin_01.Position) < 5.00f)
                                {
                                    if (VehTrackin_01.IsStopped)
                                    {
                                        iMissionSeq = 7;
                                        BeOnOff[1] = false;
                                        VTBTimerPool.Remove(ttTextBar_02);
                                        Function.Call(Hash.TASK_LEAVE_VEHICLE, Npc_01, Npc_01.CurrentVehicle, 0);
                                        Npc_01.Task.GoTo(vTarget_03);
                                        iWait4Sec = Game.GameTime + 3000;
                                    }
                                }
                            }
                        }
                        else if (iMissionSeq == 7)
                        {
                            if (Npc_01.IsDead || VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else if (BeOnOff[4])
                            {
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[4] = false;
                                    VehTrackin_01.CurrentBlip.Remove();
                                }
                            }
                            else
                            {
                                if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[4] = true;
                                    VehBlip(VehTrackin_01, BlipSprite.ArmoredTruck, false, false);
                                }
                            }

                            if (iWait4Sec < Game.GameTime)
                            {
                                if (Npc_01.IsInVehicle())
                                {
                                    iWait4Sec = Game.GameTime + 2500;
                                    Function.Call(Hash.TASK_LEAVE_VEHICLE, Npc_01, Npc_01.CurrentVehicle, 0);
                                    Script.Wait(1000);
                                    Npc_01.Task.GoTo(vTarget_03);
                                }
                                else
                                {
                                    iMissionSeq = 8;
                                    RemoveTargets();
                                    iWait4Sec = Game.GameTime + 11000;
                                }
                            }
                        }
                        else if (iMissionSeq == 8)
                        {
                            if (Npc_01.IsDead || VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else if (BeOnOff[4])
                            {
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[4] = false;
                                    VehTrackin_01.CurrentBlip.Remove();
                                }
                            }
                            else
                            {
                                if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[4] = true;
                                    VehBlip(VehTrackin_01, BlipSprite.ArmoredTruck, false, false);
                                }
                            }

                            if (World.GetDistance(Npc_01.Position, vTarget_03) < 2.0f || iWait4Sec < Game.GameTime)
                            {
                                if (bTestRun)
                                {
                                    iMissionSeq = 0;
                                    BeOnOff[0] = false;
                                    Npc_01.Position = new Vector3(0f, 0f, 150f);
                                    bAmberAntz = true;
                                    RemoveTargets();
                                    CleanUpPeds();
                                    if (iTestKit < MyMissions.AmbuXM.Count())
                                        Ambulance();
                                    else
                                        GameOver(false, "" + iRepMisssion + "" + sAltLang[343] + ", ", false, iCashReward);

                                }
                                else
                                {
                                    iMissionSeq = 99;
                                    BeOnOff[0] = false;
                                    Npc_01.Position = new Vector3(0f, 0f, 150f);
                                    RemoveTargets();
                                    CleanUpPeds();
                                    iPlayerChoise = 3;
                                    bAmberAntz = true;
                                    bControlerSelect = true;
                                }
                            }
                        }
                        else if (iMissionSeq == 9)
                        {
                            bCovidInf = false;
                            if (iMeddicTest == 0)
                                Fruits(6);

                            if (!bTestRun)
                            {
                                if (iRepMisssion < 25)
                                {
                                    if (iRepMisssion > 4)
                                        NSCoinInvestments(true, iRepMisssion - 2, iRepMisssion, "Humane Labs");
                                    else
                                        NSCoinInvestments(true, 0, 1, "Humane Labs");
                                }
                                else
                                    NSCoinInvestments(true, 27, 28, "Humane Labs");
                            }

                            iMeddicTest = iMeddicc;
                            GameOver(false, "" + iRepMisssion + "" + sAltLang[343] + ", ", false, iCashReward);
                        }
                        else if (iMissionSeq == 15)
                        {
                            if (iWait4Sec < Game.GameTime)
                            {
                                iMissionSeq = 5;
                                Game.Player.CanControlCharacter = true;
                                Game.Player.Character.Task.ClearAll();
                                Npc_01.Task.ClearAnimation("combat@damage@writhe", "writhe_loop");
                                Npc_01.FreezePosition = false;
                                EnterAnyVeh(VehTrackin_01, Npc_01, 2, 2.00f);
                                iList_01[0] = 0;
                                Npc_01.CurrentBlip.Remove();

                                if (!bSubtitles)
                                    QuickSub(sAltLang[103] + "~b~" + sAltLang[173] + "~w~.");
                            }
                        }
                        else if (iMissionSeq == 16)
                        {
                            if (iWait4Sec < Game.GameTime)
                            {
                                iMissionSeq = 5;
                                Game.Player.CanControlCharacter = true;
                                Game.Player.Character.Task.ClearAll();
                                Npc_01.Task.ClearAnimation("combat@damage@writhe", "writhe_loop");
                                Npc_01.FreezePosition = false;
                                EnterAnyVeh(VehTrackin_01, Npc_01, 2, 2.00f);
                                iList_01[0] = 0;
                                Npc_01.CurrentBlip.Remove();

                                if (!bSubtitles)
                                    QuickSub(sAltLang[103] + "~b~" + sAltLang[173] + "~w~.");
                            }
                        }
                        else if (iMissionSeq == 17)
                        {
                            Game.Player.CanControlCharacter = true;
                            Game.Player.Character.Task.ClearAll();
                            Npc_01.Health = 0;
                            Npc_01.FreezePosition = false;
                            if (Npc_01.CurrentBlip.Exists())
                                Npc_01.CurrentBlip.Remove();
                            if (iWait4Sec < Game.GameTime)
                            {
                                if (bTestRun)
                                {
                                    iMissionSeq = 0;
                                    BeOnOff[0] = false;
                                    Npc_01.Position = new Vector3(0f, 0f, 150f);
                                    bAmberAntz = true;
                                    RemoveTargets();
                                    CleanUpPeds();
                                    if (iTestKit < MyMissions.AmbuXM.Count())
                                        Ambulance();
                                    else
                                        GameOver(false, "" + iRepMisssion + "" + sAltLang[343] + ", ", false, iCashReward);

                                }
                                else
                                {
                                    iMissionSeq = 99;
                                    BeOnOff[0] = false;
                                    Npc_01.Position = new Vector3(0f, 0f, 150f);
                                    RemoveTargets();
                                    CleanUpPeds();
                                    iPlayerChoise = 3;
                                    bAmberAntz = true;
                                    bControlerSelect = true;
                                }
                            }
                        }
                        else if (iMissionSeq == 18)
                        {
                            Game.Player.CanControlCharacter = true;
                            Game.Player.Character.Task.ClearAll();
                            Npc_01.Task.ClearAnimation("combat@damage@writhe", "writhe_loop");
                            Npc_01.FreezePosition = false;
                            if (bTestRun)
                            {
                                iMissionSeq = 0;
                                BeOnOff[0] = false;
                                Npc_01.Position = new Vector3(0f, 0f, 150f);
                                bAmberAntz = true;
                                RemoveTargets();
                                CleanUpPeds();
                                if (iTestKit < MyMissions.AmbuXM.Count())
                                    Ambulance();
                                else
                                    GameOver(false, "" + iRepMisssion + "" + sAltLang[343] + ", ", false, iCashReward);

                            }
                            else
                            {
                                iMissionSeq = 99;
                                BeOnOff[0] = false;
                                Npc_01.Position = new Vector3(0f, 0f, 150f);
                                RemoveTargets();
                                CleanUpPeds();
                                iPlayerChoise = 3;
                                bAmberAntz = true;
                                bControlerSelect = true;
                            }
                        }
                        else if (iMissionSeq == 25)
                        {
                            World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(Npc_01.Position.X, Npc_01.Position.Y, Npc_01.Position.Z + 2.00f), Vector3.Zero, new Vector3(0.00f, 180.00f, Npc_01.Heading), new Vector3(0.50f, 0.50f, 0.50f), Color.AntiqueWhite);
                            if (Npc_01.IsDead || VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                        }
                        else if (iMissionSeq == 45)
                        {
                            bCovidInf = false;
                            GameOver(true, "" + iRepMisssion + "" + sAltLang[343] + ", ", bAmberAntz, iCashReward);
                        }
                    }        //Amulance
                    else if (iJobType == 8)
                    {
                        if (BeOnOff[3])
                        {
                            if (BeOnOff[4])                  //Test if vehicle has rolled over with 2 sec timmer to give time to get back on wheels.
                            {
                                if (Game.GameTime > iTime_01[0])
                                {
                                    if (!VehTrackin_01.IsOnAllWheels)
                                        VehTrackin_01.Rotation = new Vector3(0.00f, 0.00f, VehTrackin_01.Rotation.Z);
                                    BeOnOff[4] = false;
                                }
                            }
                            else
                            {
                                if (!VehTrackin_01.IsOnAllWheels)
                                {
                                    BeOnOff[4] = false;
                                    iTime_01[0] = Game.GameTime + 2000;
                                }
                            }

                            if (BeOnOff[0])     // The distance bar that pops up for distance to target
                            {
                                float fDist = VehTrackin_01.Position.DistanceTo(vTarget_01);
                                int iFind = (int)fDist;
                                ttTextBar_01.Text = " " + iFind + " ";
                            }

                            if (World.GetDistance(Game.Player.Character.Position, Npc_01.Position) < 125.00f)   // Distance tracking for Spookbar
                            {
                                if (iTime_01[1] != 0)
                                    iTime_01[1] = 0;      //timer for spook fail
                                fMission_02 = World.GetDistance(Game.Player.Character.Position, Npc_01.Position) / 100.00f;// Find the percent for Spookbar float 0.00 to 1.00
                                fMission_02 = 1.00f - fMission_02;
                                if (fMission_02 < 0.01f)
                                    fMission_02 = 0.01f;
                                BtSlideBar.BackgroundColor = Color.Black;
                            }
                            else       // if player is out side min distance
                            {
                                fMission_02 = 0.00f;
                                if (iTime_01[1] == 0) // set timmer for distance fail
                                    iTime_01[1] = Game.GameTime + 15000;
                                else if (iTime_01[1] < Game.GameTime) // fail if timmer runs out
                                    iMissionSeq = 45;
                                if (BeOnOff[5]) // bar flash for distance warning. is a 1/2 sec toggle on off.
                                {
                                    if (iTime_01[2] < Game.GameTime)
                                    {
                                        BeOnOff[5] = false;
                                        iTime_01[2] = Game.GameTime + 500;
                                        BtSlideBar.BackgroundColor = Color.White;
                                    }
                                }
                                else
                                {
                                    if (iTime_01[2] < Game.GameTime)
                                    {
                                        BeOnOff[5] = true;
                                        iTime_01[2] = Game.GameTime + 500;
                                        BtSlideBar.BackgroundColor = Color.Black;
                                    }
                                }
                            }

                            if (fMission_02 > 0.75f)  // test if too close to target
                            {
                                if (!BeOnOff[7])
                                {
                                    if (iTime_01[3] == 0)  // set timmer for too close fail
                                        iTime_01[3] = Game.GameTime + 15000;
                                    else if (iTime_01[3] < Game.GameTime)  // too close fail.
                                        iMissionSeq = 45;

                                    if (BeOnOff[5]) // bar flash for distance warning. is a 1/2 sec toggle on off.
                                    {
                                        if (iTime_01[4] < Game.GameTime)
                                        {
                                            BeOnOff[5] = false;
                                            iTime_01[4] = Game.GameTime + 500;
                                            BtSlideBar.ForegroundColor = Color.White;
                                        }
                                    }
                                    else
                                    {
                                        if (iTime_01[4] < Game.GameTime)
                                        {
                                            BeOnOff[5] = true;
                                            iTime_01[4] = Game.GameTime + 500;
                                            BtSlideBar.ForegroundColor = Color.Red;
                                        }
                                    }
                                }
                                BtSlideBar.Percentage = fMission_02;   // set the native ui Bar to the current distance percent.
                                VTBTimerPool.Draw();        //draw the spookbar to screen.
                            }
                            else    //draw the spookbar to screen where the player is at the correct distance.
                            {
                                if (iTime_01[3] != 0)
                                    iTime_01[3] = 0;
                                BtSlideBar.Percentage = fMission_02;
                                BtSlideBar.ForegroundColor = Color.Yellow;
                                VTBTimerPool.Draw();
                            }
                        }

                        if (iMissionSeq == 0)
                        {
                            if (bNotPause)
                            {
                                Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                bNotPause = false;
                            }
                            if (bSubtitles)
                                StickySubTitle(sAltLang[92] + "~r~" + sAltLang[127] + "~w~ " + sAltLang[180] + "~y~" + World.GetStreetName(vGetaway) + "~w~.");
                            else
                            {
                                if (BeOff[0])
                                {
                                    QuickSub(sAltLang[92] + "~r~" + sAltLang[127] + "~w~ " + sAltLang[180] + "~y~" + World.GetStreetName(vGetaway) + "~w~.");
                                    BeOff[0] = false;
                                }
                            }
                            if (Game.Player.Character.Position.DistanceTo(vGetaway) < 155.00f)
                            {
                                iMissionSeq = 1;
                                Script.Wait(1000);
                                int iMota = RandInt(1, 9);
                                FindAndReplaceVeh(vGetaway, iMota, 1, 1, 3, 8, true, true, true, 250.00f, 35.00f, "", false, 1, 10, true);
                            }
                        }
                        else if (iMissionSeq == 1)
                        {
                            if (VehTrackin_01 != null)
                                iMissionSeq = 2;
                            else
                            {
                                iMissionSeq = 0;
                                RemoveTargets();
                                Follow_ButTherArntAny();
                            }
                        }
                        else if (iMissionSeq == 2)
                        {
                            if (World.GetDistance(Game.Player.Character.Position, VehTrackin_01.Position) < 125.00f)
                            {
                                iMissionSeq = 3;
                                Follow_SpiningAround(VehTrackin_01);
                                NPCSpawn(RandNPC(RandInt(1, 35)), VehTrackin_01.Position, VehTrackin_01.Heading, 55, 180, 2, 0, 1, VehTrackin_01, 2, false, false, 1, 0);
                                VehTrackin_01.CurrentBlip.Color = BlipColor.Blue;
                            }
                        }
                        else if (iMissionSeq == 3)
                        {
                            if (PedList_02.Count > 0)
                            {
                                iMissionSeq = 4;
                                iTime_01[5] = Game.GameTime;
                                BeOnOff[3] = true;
                                vTarget_01 = VectorList_01[iMissionVar_03];
                                float fSpeed = 20.00f;
                                DriveToDest(VehTrackin_01, vTarget_01, Npc_01, fSpeed, iCanDrive);

                                if (!bSubtitles)
                                    QuickSub("~b~" + sAltLang[7] + "~w~ " + sAltLang[112] + "~r~" + sAltLang[127] + "~w~. " + sAltLang[181] + ".");
                            }
                        }
                        else if (iMissionSeq == 4)
                        {
                            World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(VehTrackin_01.Position.X, VehTrackin_01.Position.Y, VehTrackin_01.Position.Z + 2.00f), Vector3.Zero, new Vector3(0.00f, 180.00f, VehTrackin_01.Heading), new Vector3(0.50f, 0.50f, 0.50f), color: Color.CadetBlue);

                            if (bSubtitles)
                                StickySubTitle("~b~" + sAltLang[7] + "~w~ " + sAltLang[112] + "~r~" + sAltLang[127] + "~w~. " + sAltLang[181] + ".");

                            if (Npc_01.IsDead || VehTrackin_01.HasBeenDamagedBy(Game.Player.Character) || !Npc_01.IsInVehicle())
                                iMissionSeq = 45;
                            else if (!VehTrackin_01.IsOnAllWheels)
                                Follow_SpiningAround(VehTrackin_01);
                            else if (World.GetDistance(vTarget_01, VehTrackin_01.Position) < 75.00f)
                            {
                                iMissionSeq = 5;
                                vGetaway = VectorList_02[0];
                                NPCSpawn(RandNPC(RandInt(1, 35)), vGetaway, fMission_01, 55, 180, 2, 0, 0, null, 2, false, false, 2, 0);
                                float fSpeed = 15.00f;
                                iMissionVar_03 = iMissionVar_03 - 1;
                                vTarget_01 = VectorList_01[iMissionVar_03];
                                DriveToDest(VehTrackin_01, vTarget_01, Npc_01, fSpeed, iCanDrive);
                                VehTrackin_01.SoundHorn(1000);
                                MoveThatCar(vTarget_01);

                                if (!bSubtitles)
                                    QuickSub("~b~" + sAltLang[7] + "~w~ " + sAltLang[112] + "~r~" + sAltLang[127] + "~w~. " + sAltLang[181] + ".");
                            }
                            else if (iWait4Sec < Game.GameTime && VehTrackin_01.IsStopped)
                            {
                                iWait4Sec = Game.GameTime + 6000;
                                GateIsNear(VehTrackin_01.Position + (VehTrackin_01.ForwardVector * 3), 10.00f, false);
                            }
                        }
                        else if (iMissionSeq == 5)
                        {
                            World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(VehTrackin_01.Position.X, VehTrackin_01.Position.Y, VehTrackin_01.Position.Z + 2.00f), Vector3.Zero, new Vector3(0.00f, 180.00f, VehTrackin_01.Heading), new Vector3(0.50f, 0.50f, 0.50f), color: Color.CadetBlue);

                            if (bSubtitles)
                                StickySubTitle("~b~" + sAltLang[7] + "~w~ " + sAltLang[112] + "~r~" + sAltLang[127] + "~w~. " + sAltLang[181] + ".");

                            if (Npc_01.IsDead || VehTrackin_01.HasBeenDamagedBy(Game.Player.Character) || !Npc_01.IsInVehicle())
                                iMissionSeq = 45;
                            else if (PedList_02.Count > 1 && World.GetDistance(vTarget_01, VehTrackin_01.Position) < 5.00)
                            {
                                iMissionSeq = 6;
                                iList_01[0] = 0;
                                VehTrackin_01.FreezePosition = true;
                                DoorsNear(Npc_02.Position, 8.00f);
                                iWait4Sec = Game.GameTime + 2000;
                            }
                        }
                        else if (iMissionSeq == 6)
                        {
                            World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(VehTrackin_01.Position.X, VehTrackin_01.Position.Y, VehTrackin_01.Position.Z + 2.00f), Vector3.Zero, new Vector3(0.00f, 180.00f, VehTrackin_01.Heading), new Vector3(0.50f, 0.50f, 0.50f), color: Color.CadetBlue);

                            if (bSubtitles)
                                StickySubTitle("~b~" + sAltLang[7] + "~w~ " + sAltLang[112] + "~r~" + sAltLang[127] + "~w~. " + sAltLang[181] + ".");

                            if (Npc_01.IsDead || Npc_02.IsDead || VehTrackin_01.HasBeenDamagedBy(Game.Player.Character) || !Npc_01.IsInVehicle())
                                iMissionSeq = 45;
                            else if (Npc_02.IsInVehicle())
                            {
                                VehTrackin_01.FreezePosition = false;
                                BeOnOff[6] = true;
                                iWait4Sec = Game.GameTime + 12000;
                                iMissionSeq = 7;
                            }
                            else if (iWait4Sec < Game.GameTime)
                            {
                                iWait4Sec = Game.GameTime + 2000;
                                iList_01[0] += 1;
                                if (!Npc_02.IsInVehicle())
                                {
                                    if (iList_01[0] < 10)
                                    {
                                        if (BeOnOff[1])
                                            DoorsNear(Npc_02.Position, 8.00f);
                                        else
                                            EnterAnyVeh(VehTrackin_01, Npc_02, 1, 1.20f);
                                        BeOnOff[1] = !BeOnOff[1];
                                    }
                                    else
                                        VehicleWarp(VehTrackin_01, Npc_02, 2);
                                }
                            }
                        }
                        else if (iMissionSeq == 40)
                        {
                            iTime_01[5] -= Game.GameTime;
                            iTime_01[5] = iTime_01[5] / 1000;
                            iTime_01[5] *= -1;
                            iCashReward += (iTime_01[5] * 10);
                            Game.Player.WantedLevel = 0;
                            GameOver(false, "", false, iCashReward);
                        }
                        else if (iMissionSeq == 45)
                        {
                            GameOver(true, "", false, 0);
                        }
                        else if (iMissionVar_01 == 1)
                        {
                            if (iMissionSeq == 7)
                            {
                                iMissionSeq = 8;
                                BeOnOff[9] = true;
                                iMissionVar_03 = iMissionVar_03 - 1;
                                vTarget_01 = VectorList_01[iMissionVar_03];
                                iMissionVar_03 = iMissionVar_03 - 1;
                                vTarget_02 = VectorList_01[iMissionVar_03];
                                float fSpeed = 20.00f;
                                DriveToDest(VehTrackin_01, vTarget_01, Npc_01, fSpeed, iCanDrive);
                            }
                            else if (iMissionSeq == 8)
                            {
                                World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(VehTrackin_01.Position.X, VehTrackin_01.Position.Y, VehTrackin_01.Position.Z + 2.00f), Vector3.Zero, new Vector3(0.00f, 180.00f, VehTrackin_01.Heading), new Vector3(0.50f, 0.50f, 0.50f), color: Color.PaleVioletRed);
                                if (bSubtitles)
                                {
                                    if (BeOnOff[6])
                                        StickySubTitle("~b~" + sAltLang[7] + "~w~ " + sAltLang[112] + "~r~" + sAltLang[127] + "~w~. " + sAltLang[181] + ".");
                                    else
                                        StickySubTitle(sAltLang[182] + "~r~" + sAltLang[127] + "s~w~" + sAltLang[183]);
                                }
                                if (Npc_01.IsDead && Npc_02.IsDead)
                                {
                                    Npc_01.Health = 0;
                                    Npc_02.Health = 0;
                                    NSCoinInvestments(false, 5, 11, "Total Bankers Shares");
                                    iMissionSeq = 40;
                                }
                                else if (World.GetDistance(vTarget_01, VehTrackin_01.Position) < 75.00f && BeOnOff[9])
                                {
                                    BeOnOff[9] = false;
                                    float fSpeed = 15.00f;
                                    DriveToDest(VehTrackin_01, vTarget_01, Npc_01, fSpeed, iCanDrive);
                                }
                                else if (World.GetDistance(vTarget_01, VehTrackin_01.Position) < 5.00f)
                                {
                                    iMissionSeq = 9;
                                    Function.Call(Hash.TASK_LEAVE_VEHICLE, Npc_01, Npc_01.CurrentVehicle, 1);
                                    Function.Call(Hash.TASK_LEAVE_VEHICLE, Npc_02, Npc_02.CurrentVehicle, 1);
                                    PedBlimp(Npc_01, BlipColor.Red, 0.75f, false, false);
                                    PedBlimp(Npc_02, BlipColor.Red, 0.75f, false, false);
                                    Npc_01.Task.RunTo(vTarget_02, true, -1);
                                    Npc_02.Task.RunTo(vTarget_02, true, -1);
                                }
                                else if (BeOnOff[6])
                                {
                                    if (iWait4Sec < Game.GameTime)
                                    {
                                        BeOnOff[6] = false;
                                        BeOnOff[7] = true;
                                        BeOnOff[0] = true;
                                        VTBTimerPool.Add(ttTextBar_01);
                                        Game.Player.WantedLevel = 4;
                                        float fSpeed = 45.00f;
                                        DriveToDest(VehTrackin_01, vTarget_01, Npc_01, fSpeed, iCanDrive);
                                        VehTrackin_01.CurrentBlip.Color = BlipColor.Red;
                                        if (!bSubtitles)
                                            QuickSub(sAltLang[182] + "~r~" + sAltLang[127] + "s~w~" + sAltLang[183]);
                                    }
                                }
                                else if (Game.Player.WantedLevel < 4)
                                    Game.Player.WantedLevel = 4;
                            }
                            else if (iMissionSeq == 9)
                            {
                                if (Npc_01.IsDead && Npc_02.IsDead)
                                {
                                    iCashReward = 10000;
                                    Npc_01.Health = 0;
                                    Npc_02.Health = 0;
                                    NSCoinInvestments(false, 5, 15, "Total Bankers Shares");
                                    iMissionSeq = 40;
                                }
                                else if (World.GetDistance(vTarget_02, Npc_01.Position) < 3.0f || World.GetDistance(vTarget_02, Npc_02.Position) < 3.0f)
                                {
                                    iMissionSeq = 45;
                                    Npc_01.Position = new Vector3(0f, 0f, 1500f);
                                    Npc_02.Position = new Vector3(0f, 0f, 1500f);
                                }
                            }
                        }       // Take out the two npc's route to polic station.
                        else if (iMissionVar_01 == 2)
                        {
                            if (iMissionSeq == 7)
                            {
                                iMissionSeq = 8;
                                iMissionVar_03 = iMissionVar_03 - 1;
                                vTarget_01 = VectorList_01[iMissionVar_03];
                                float fSpeed = 20.00f;
                                DriveToDest(VehTrackin_01, vTarget_01, Npc_01, fSpeed, iCanDrive);
                            }
                            else if (iMissionSeq == 8)
                            {
                                World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(VehTrackin_01.Position.X, VehTrackin_01.Position.Y, VehTrackin_01.Position.Z + 2.00f), Vector3.Zero, new Vector3(0.00f, 180.00f, VehTrackin_01.Heading), new Vector3(0.50f, 0.50f, 0.50f), color: Color.LightSteelBlue);
                                if (bSubtitles)
                                    StickySubTitle("~b~" + sAltLang[7] + "~w~ " + sAltLang[112] + "~r~" + sAltLang[127] + "~w~. " + sAltLang[181] + ".");
                                if (Npc_01.IsDead || Npc_02.IsDead || VehTrackin_01.HasBeenDamagedBy(Game.Player.Character) || !Npc_01.IsInVehicle())
                                    iMissionSeq = 45;
                                else if (World.GetDistance(vTarget_01, VehTrackin_01.Position) < 5.00f)
                                {
                                    iMissionSeq = 9;
                                    BeOnOff[3] = false;
                                    World.AddExplosion(VehTrackin_01.Position, ExplosionType.PlaneRocket, 2.00f, 1.00f);
                                    VehTrackin_01.Explode();
                                }
                                else if (BeOnOff[8])
                                {
                                    if (VehTrackin_01.Position.Z > 101.01f)
                                    {
                                        BeOnOff[8] = false;
                                        float fSpeed = 15.0f;
                                        DriveToDest(VehTrackin_01, vTarget_01, Npc_01, fSpeed, iCanDrive);
                                    }
                                }
                                if (BeOnOff[6])
                                {
                                    if (iWait4Sec < Game.GameTime)
                                    {
                                        BeOnOff[6] = false;
                                        BeOnOff[7] = true;
                                        BeOnOff[0] = true;
                                        iTracking = Game.GameTime + 1000;
                                        VTBTimerPool.Add(ttTextBar_01);
                                        FindAndReplaceVeh(Game.Player.Character.Position, 0, 1, 0, 8, 0, false, false, true, 75.00f, 35.00f, "SCHAFTER3", false, 1, 0, true);
                                        FindAndReplaceVeh(Game.Player.Character.Position, 0, 22, 0, 8, 0, false, false, true, 75.00f, 35.00f, "LIMO2", false, 1, 0, true);
                                        Npc_01.RelationshipGroup = GroupBNPCs;
                                        Npc_02.RelationshipGroup = GroupBNPCs;
                                        float fSpeed = 45.00f;
                                        DriveToDest(VehTrackin_01, vTarget_01, Npc_01, fSpeed, iCanDrive);
                                        if (!bSubtitles)
                                            QuickSub("~b~" + sAltLang[7] + "~w~ " + sAltLang[112] + "~r~" + sAltLang[127] + "~w~. " + sAltLang[181] + ".");
                                    }
                                }
                                else
                                {
                                    if (iTracking < Game.GameTime)
                                        TheUltimateTracker(true);
                                }
                            }
                            else if (iMissionSeq == 9)
                            {
                                iMissionSeq = 40;
                                NSCoinInvestments(true, 5, 12, "Penris Shares");
                                BeOnOff[7] = false;
                                iCashReward = 8000;
                            }
                        }       // Follow to end then arial atack the car.
                        else if (iMissionVar_01 == 3)
                        {
                            if (iMissionSeq == 7)
                            {
                                iMissionSeq = 8;
                                BeOnOff[9] = true;
                                iMissionVar_03 = iMissionVar_03 - 1;
                                vTarget_01 = VectorList_01[iMissionVar_03];
                                float fSpeed = 20.00f;
                                DriveToDest(VehTrackin_01, vTarget_01, Npc_01, fSpeed, iCanDrive);
                            }
                            else if (iMissionSeq == 8)
                            {
                                World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(VehTrackin_01.Position.X, VehTrackin_01.Position.Y, VehTrackin_01.Position.Z + 2.00f), Vector3.Zero, new Vector3(0.00f, 180.00f, VehTrackin_01.Heading), new Vector3(0.50f, 0.50f, 0.50f), color: Color.LightCoral);
                                if (bSubtitles)
                                    StickySubTitle("~b~" + sAltLang[7] + "~w~ " + sAltLang[112] + "~r~" + sAltLang[127] + "~w~. " + sAltLang[181] + ".");

                                if (Npc_01.IsDead || Npc_02.IsDead || VehTrackin_01.HasBeenDamagedBy(Game.Player.Character) || !Npc_01.IsInVehicle())
                                    iMissionSeq = 45;
                                else if (World.GetDistance(vTarget_01, VehTrackin_01.Position) < 50.0f)
                                {
                                    iMissionSeq = 9;
                                    BeOnOff[3] = false;
                                    Follow_AmbushPlayer();
                                    float fSpeed = 15.00f;
                                    DriveToDest(VehTrackin_01, vTarget_01, Npc_01, fSpeed, iCanDrive);
                                    iWait4Sec = Game.GameTime + 1500;
                                }
                                else if (BeOnOff[6])
                                {
                                    if (iWait4Sec < Game.GameTime)
                                    {
                                        BeOnOff[6] = false;
                                        float fSpeed = 45.00f;
                                        DriveToDest(VehTrackin_01, vTarget_01, Npc_01, fSpeed, iCanDrive);
                                    }
                                }
                                else if (BeOnOff[8])
                                {
                                    if (VehTrackin_01.Position.Z > 101.01f)
                                    {
                                        BeOnOff[8] = false;
                                        float fSpeed = 15.0f;
                                        DriveToDest(VehTrackin_01, vTarget_01, Npc_01, fSpeed, iCanDrive);
                                    }
                                }
                            }
                            else if (iMissionSeq == 9)
                            {
                                World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(VehTrackin_01.Position.X, VehTrackin_01.Position.Y, VehTrackin_01.Position.Z + 2.00f), Vector3.Zero, new Vector3(0.00f, 180.00f, VehTrackin_01.Heading), new Vector3(0.50f, 0.50f, 0.50f), color: Color.LightCoral);
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[182] + "~r~" + sAltLang[127] + "s~w~.");

                                if (World.GetDistance(vTarget_01, VehTrackin_01.Position) < 5.00f)
                                {
                                    iMissionSeq = 10;
                                    Follow_DefToOff();
                                    VehTrackin_01.CurrentBlip.Color = BlipColor.Red;
                                    if (!bSubtitles)
                                        QuickSub(sAltLang[182] + "~r~" + sAltLang[127] + "s~w~.");
                                }
                            }
                            else if (iMissionSeq == 10)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[182] + "~r~" + sAltLang[127] + "s~w~.");

                                ttTextBar_02.Text = "" + PedList_02.Count + "/" + iAmbushCount + "";
                                ttTextBar_02.Draw(1);
                                if (Game.Player.WantedLevel > 0)
                                    Game.Player.WantedLevel = 0;

                                if (iTracking < Game.GameTime)
                                    TheUltimateTracker(false);
                                else if (PedList_02.Count == 0)
                                {
                                    iCashReward = iAmbushCount * 1520;
                                    NSCoinInvestments(true, 8, 13, "Bobcat Security Shares");
                                    iMissionSeq = 40;
                                }
                            }
                        }       // Abush player at end point
                        else if (iMissionVar_01 == 4)
                        {
                            if (iMissionSeq == 7)
                            {
                                iMissionSeq = 8;
                                RemoveTargets();
                                iMissionVar_03 = iMissionVar_03 - 1;
                                vTarget_03 = VectorList_01[iMissionVar_03];
                                iMissionVar_03 = iMissionVar_03 - 1;
                                vTarget_02 = VectorList_01[iMissionVar_03];
                                float fSpeed = 20.00f;
                                int iDrive = 1073742653;
                                Npc_01.Task.CruiseWithVehicle(VehTrackin_01, fSpeed, iDrive);
                            }
                            else if (iMissionSeq == 8)
                            {
                                World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(VehTrackin_01.Position.X, VehTrackin_01.Position.Y, VehTrackin_01.Position.Z + 2.00f), Vector3.Zero, new Vector3(0.00f, 180.00f, VehTrackin_01.Heading), new Vector3(0.50f, 0.50f, 0.50f), color: Color.MediumTurquoise);
                                if (bSubtitles)
                                {
                                    if (BeOnOff[6])
                                        StickySubTitle("~b~" + sAltLang[7] + "~w~ " + sAltLang[112] + "~r~" + sAltLang[127] + "~w~. " + sAltLang[181] + ".");
                                }
                                if (Npc_01.IsDead || Npc_02.IsDead)
                                    iMissionSeq = 45;
                                else if (BeOnOff[6])
                                {
                                    if (iWait4Sec < Game.GameTime)
                                    {
                                        iMissionSeq = 9;
                                        BeOnOff[6] = false;
                                        BeOnOff[7] = true;

                                        if (VehTrackin_01.ClassType == VehicleClass.Compacts)
                                            iList_01[1] = RandInt(5000, 6000);
                                        else if (VehTrackin_01.ClassType == VehicleClass.Sedans)
                                            iList_01[1] = RandInt(7000, 8000);
                                        else if (VehTrackin_01.ClassType == VehicleClass.Coupes)
                                            iList_01[1] = RandInt(15000, 21000);
                                        else if (VehTrackin_01.ClassType == VehicleClass.Muscle)
                                            iList_01[1] = RandInt(21000, 50000);
                                        else if (VehTrackin_01.ClassType == VehicleClass.OffRoad)
                                            iList_01[1] = RandInt(21000, 45000);
                                        else if (VehTrackin_01.ClassType == VehicleClass.SUVs)
                                            iList_01[1] = RandInt(22000, 48000);
                                        else if (VehTrackin_01.ClassType == VehicleClass.Sports)
                                            iList_01[1] = RandInt(55000, 85000);
                                        else if (VehTrackin_01.ClassType == VehicleClass.SportsClassics)
                                            iList_01[1] = RandInt(120000, 90000);
                                        else if (VehTrackin_01.ClassType == VehicleClass.Super)
                                            iList_01[1] = RandInt(140000, 100000);
                                        else
                                            iList_01[1] = RandInt(8000, 9000);

                                        fVehicleDamage = VehTrackin_01.BodyHealth + VehTrackin_01.EngineHealth + VehTrackin_01.PetrolTankHealth;
                                        iList_01[2] = (int)fVehicleDamage;

                                        if (!bSubtitles)
                                            QuickSub(sAltLang[184] + "~b~" + sAltLang[128] + "~w~.");
                                    }
                                }
                                else if (BeOnOff[8])
                                {
                                    if (VehTrackin_01.Position.Z > 101.01f)
                                    {
                                        BeOnOff[8] = false;
                                        float fSpeed = 15.00f;
                                        DriveToDest(VehTrackin_01, vTarget_01, Npc_01, fSpeed, iCanDrive);
                                    }
                                }
                            }
                            else if (iMissionSeq == 9)
                            {
                                World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(VehTrackin_01.Position.X, VehTrackin_01.Position.Y, VehTrackin_01.Position.Z + 2.00f), Vector3.Zero, new Vector3(0.00f, 180.00f, VehTrackin_01.Heading), new Vector3(0.50f, 0.50f, 0.50f), color: Color.MediumTurquoise);
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[184] + "~b~" + sAltLang[128] + "~w~.");

                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    iMissionSeq = 10;
                                    BeOnOff[3] = false;
                                    BeOnOff[10] = true;
                                    BeOnOff[6] = false;
                                    VTBTimerPool.Add(ttTextBar_01);
                                    VTBTimerPool.Remove(BtSlideBar);
                                    ttTextBar_01.Label = "" + sAltLang[300] + "";
                                    VehTrackin_01.CurrentBlip.Remove();
                                    TheYellowCorona(vTarget_02, 5.00f);
                                    AddTarget(vTarget_02, true, true, 1.00f, false);

                                    if (!bSubtitles)
                                        QuickSub(sAltLang[102] + "~b~" + sAltLang[128] + "~w~ " + sAltLang[101] + "~y~" + sAltLang[127]);

                                }
                            }
                            else if (iMissionSeq == 10)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[102] + "~b~" + sAltLang[128] + "~w~ " + sAltLang[101] + "~y~" + sAltLang[127]);

                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    if (World.GetDistance(vTarget_02, VehTrackin_01.Position) < 5.00f)
                                    {
                                        iCashReward = iList_01[1] - iList_01[3];
                                        iMissionSeq = 11;
                                    }
                                    else if (BeOnOff[6])
                                    {
                                        if (World.GetDistance(vTarget_02, VehTrackin_01.Position) < 45.00f)
                                        {
                                            BeOnOff[6] = false;
                                            MoveThatCar(vTarget_02);
                                        }
                                    }
                                }
                                else
                                {
                                    iMissionSeq = 9;
                                    VehTrackin_01.AddBlip();
                                    VehTrackin_01.CurrentBlip.Sprite = BlipSprite.SportsCar;
                                    RemoveTargets();
                                }

                                if (BeOnOff[10])
                                {
                                    if (iList_01[2] > 0 && iList_01[1] > 0)
                                        iList_01[3] = VehDamage(VehTrackin_01, iList_01[2], iList_01[1], true, iList_01[3], false);
                                }

                            }
                            else if (iMissionSeq == 11)
                            {
                                NSCoinInvestments(false, 3, 9, "Augury Insurance Shares");
                                SlowFastTravel(vTarget_03, fMission_01);
                                Follow_CArSaleSeatChecker();
                                VehTrackin_01.Position = new Vector3(516.63f, -4391.54f, 0.01f);
                                iMissionSeq = 40;
                            }
                        }       // Have player steal and deliver a vehcle at end point
                        else if (iMissionVar_01 == 5)
                        {
                            if (Game.Player.WantedLevel > 0)
                                Game.Player.WantedLevel = 0;

                            if (iMissionSeq == 7)
                            {
                                iMissionSeq = 8;
                                iMissionVar_03 = iMissionVar_03 - 1;
                                vTarget_01 = VectorList_01[iMissionVar_03];
                                iMissionVar_03 = iMissionVar_03 - 1;
                                vTarget_02 = VectorList_01[iMissionVar_03];
                                VehicleSpawn("Frogger2", vTarget_02, 0.00f, true, true, false, false, 5, 1, 0, 2, false);
                                float fSpeed = 20.00f;
                                DriveToDest(VehTrackin_01, vTarget_01, Npc_01, fSpeed, iCanDrive);
                            }
                            else if (iMissionSeq == 8)
                            {
                                World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(VehTrackin_01.Position.X, VehTrackin_01.Position.Y, VehTrackin_01.Position.Z + 2.00f), Vector3.Zero, new Vector3(0.00f, 180.00f, VehTrackin_01.Heading), new Vector3(0.50f, 0.50f, 0.50f), color: Color.AntiqueWhite);
                                if (bSubtitles)
                                {
                                    if (BeOnOff[6])
                                        StickySubTitle("~b~" + sAltLang[7] + "~w~ " + sAltLang[112] + "~r~" + sAltLang[127] + "~w~. " + sAltLang[181] + ".");
                                    else
                                        StickySubTitle(sAltLang[185] + "~b~" + sAltLang[127] + "s~w~.");
                                }
                                if (Npc_01.IsDead || Npc_02.IsDead)
                                {
                                    Npc_01.Health = 0;
                                    Npc_02.Health = 0;
                                    iMissionSeq = 45;
                                }
                                else if (World.GetDistance(vTarget_01, VehTrackin_01.Position) < 55.0f)
                                    iMissionSeq = 9;

                                if (BeOnOff[6])
                                {
                                    if (iWait4Sec < Game.GameTime)
                                    {
                                        BeOnOff[6] = false;
                                        BeOnOff[7] = true;
                                        BeOnOff[0] = true;
                                        iTracking = Game.GameTime + 1000;
                                        VTBTimerPool.Add(ttTextBar_01);
                                        FindAndReplaceVeh(Game.Player.Character.Position, 0, 1, 0, 8, 9, false, false, true, 125.00f, 35.00f, "KURUMA2", false, 2, 0, true);
                                        float fSpeed = 45.00f;
                                        DriveToDest(VehTrackin_01, vTarget_01, Npc_01, fSpeed, iCanDrive);
                                        if (!bSubtitles)
                                            QuickSub(sAltLang[185] + "~b~" + sAltLang[127] + "s~w~.");
                                    }
                                }
                                else
                                {
                                    if (iTracking < Game.GameTime)
                                        TheUltimateTracker(true);
                                }
                            }
                            else if (iMissionSeq == 9)
                            {
                                World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(VehTrackin_01.Position.X, VehTrackin_01.Position.Y, VehTrackin_01.Position.Z + 2.00f), Vector3.Zero, new Vector3(0.00f, 180.00f, VehTrackin_01.Heading), new Vector3(0.50f, 0.50f, 0.50f), color: Color.AntiqueWhite);
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[185] + "~b~" + sAltLang[127] + "s~w~.");

                                if (Npc_01.IsDead || Npc_02.IsDead)
                                    iMissionSeq = 45;
                                else if (World.GetDistance(vTarget_01, VehTrackin_01.Position) < 5.00f)
                                {
                                    iMissionSeq = 10;
                                    iTime_01[6] = Game.GameTime + 20000;
                                    VehTrackin_02.FreezePosition = false;
                                    NPCSpawn(RandNPC(32), VehTrackin_02.Position, VehTrackin_02.Heading, 40, 180, 0, 25, 1, VehTrackin_02, 0, false, false, 0, 0);
                                    Follow_RunToHeli();
                                }
                                else
                                {
                                    if (iTracking < Game.GameTime)
                                        TheUltimateTracker(false);
                                }
                            }
                            else if (iMissionSeq == 10)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[185] + "~b~" + sAltLang[127] + "s~w~.");

                                if (Npc_01.IsDead || Npc_02.IsDead)
                                    iMissionSeq = 45;
                                else if (Npc_01.IsInVehicle(VehTrackin_02) && Npc_02.IsInVehicle(VehTrackin_02))
                                    iMissionSeq = 11;
                                else if (iTime_01[6] < Game.GameTime)
                                {
                                    iMissionSeq = 11;
                                    VehicleWarp(VehTrackin_02, Npc_01, 3);
                                    VehicleWarp(VehTrackin_02, Npc_02, 4);
                                }
                                else
                                {
                                    if (iTracking < Game.GameTime)
                                        TheUltimateTracker(false);
                                }
                            }
                            else if (iMissionSeq == 11)
                            {
                                if (Npc_01.IsDead || Npc_02.IsDead)
                                    iMissionSeq = 45;
                                else if (Npc_01.IsInVehicle(VehTrackin_02) && Npc_02.IsInVehicle(VehTrackin_02))
                                {
                                    iMissionSeq = 40;
                                    BeOnOff[3] = false;
                                    NSCoinInvestments(true, 8, 12, "Eugenics Incorporated Shares");
                                    iCashReward = 20000;
                                }
                            }
                        }       // Have player protect two in car against two attacking cars--heli fly away
                        else if (iMissionVar_01 == 6)
                        {
                            if (iMissionSeq == 7)
                            {
                                iMissionSeq = 8;
                                iWait4Sec = Game.GameTime + 12000;
                                float fSpeed = 20.00f;
                                Npc_01.Task.CruiseWithVehicle(VehTrackin_01, fSpeed, 262972);
                            }
                            else if (iMissionSeq == 8)
                            {
                                World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(VehTrackin_01.Position.X, VehTrackin_01.Position.Y, VehTrackin_01.Position.Z + 2.00f), Vector3.Zero, new Vector3(0.00f, 180.00f, VehTrackin_01.Heading), new Vector3(0.50f, 0.50f, 0.50f), color: Color.LimeGreen);

                                if (bSubtitles)
                                    StickySubTitle("~b~" + sAltLang[7] + "~w~ " + sAltLang[112] + "~r~" + sAltLang[127] + "~w~. " + sAltLang[181] + ".");

                                if (Npc_01.IsDead || Npc_02.IsDead || VehTrackin_01.HasBeenDamagedBy(Game.Player.Character) || !Npc_01.IsInVehicle())
                                    iMissionSeq = 45;
                                else if (iWait4Sec < Game.GameTime)
                                {
                                    iMissionSeq = 9;
                                    BeOnOff[11] = true;
                                    BeOnOff[6] = false;
                                    Vector3 V3Ufo = VehTrackin_01.Position;
                                    V3Ufo.Z += 500.00f;
                                    Prop_01 = BuildProp("p_spinning_anus_s", V3Ufo, Vector3.Zero, true, true);
                                    Prop_02 = BuildProp("ba_prop_battle_lights_fx_righ", V3Ufo, Vector3.Zero, true, true);
                                    if (Prop_01 != null && Prop_02 != null)
                                        Prop_02.AttachTo(Prop_01, Prop_01.GetBoneIndex("bodyshell"), new Vector3(0.00f, 0.00f, 0.00f), new Vector3(0.00f, 60.00f, 30.00f));
                                    iWait4Sec = Game.GameTime + 500;
                                }
                            }
                            else if (iMissionSeq == 9)
                            {
                                World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(VehTrackin_01.Position.X, VehTrackin_01.Position.Y, VehTrackin_01.Position.Z + 2.00f), Vector3.Zero, new Vector3(0.00f, 180.00f, VehTrackin_01.Heading), new Vector3(0.50f, 0.50f, 0.50f), color: Color.LimeGreen);

                                if (Npc_01.IsDead || Npc_02.IsDead || VehTrackin_01.HasBeenDamagedBy(Game.Player.Character) || !Npc_01.IsInVehicle())
                                    iMissionSeq = 45;
                                if (Prop_01.Position.Z > VehTrackin_01.Position.Z + 15.00f && BeOnOff[11])
                                {
                                    if (bSubtitles)
                                        StickySubTitle("~b~" + sAltLang[7] + "~w~ " + sAltLang[112] + "~r~" + sAltLang[127] + "~w~. " + sAltLang[181] + ".");

                                    Prop_01.Position = new Vector3(VehTrackin_01.Position.X, VehTrackin_01.Position.Y, Prop_01.Position.Z - 0.50f);               
                                    Prop_01.Rotation = new Vector3(3.00f, 5.00f, Prop_01.Rotation.Z + 1.5f);
                                }
                                else
                                {
                                    if (BeOnOff[11])
                                    {
                                        BeOnOff[11] = false;
                                        iWait4Sec = Game.GameTime + 6000;
                                    }
                                    else if (iWait4Sec < Game.GameTime)
                                    {
                                        iMissionSeq = 10;
                                        BeOnOff[3] = false;
                                        VehTrackin_01.EngineRunning = false;
                                        VehTrackin_01.FreezePosition = true;
                                        VehTrackin_01.CurrentBlip.Remove();
                                        fMission_01 = VehTrackin_01.Position.Z;
                                        if (!bSubtitles)
                                            QuickSub(sAltLang[186]);
                                    }
                                    else
                                    {
                                        Prop_01.Position = new Vector3(VehTrackin_01.Position.X, VehTrackin_01.Position.Y, VehTrackin_01.Position.Z + 15.00f);
                                        Prop_01.Rotation = new Vector3(3.00f, 5.00f, Prop_01.Rotation.Z + 1.5f);
                                    }

                                }
                            }
                            else if (iMissionSeq == 10)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[186]);

                                if (fMission_01 < 750.00f)
                                {
                                    fMission_01 = fMission_01 + 0.50f;
                                    VehTrackin_01.Position = new Vector3(VehTrackin_01.Position.X, VehTrackin_01.Position.Y, fMission_01);
                                    Prop_01.Position = new Vector3(VehTrackin_01.Position.X, VehTrackin_01.Position.Y, VehTrackin_01.Position.Z + 15.00f);
                                    Prop_01.Rotation = new Vector3(3.00f, 2.00f, Prop_01.Rotation.Z + 1.5f);
                                }
                                else
                                {
                                    NSCoinInvestments(true, 9, 12, "Pißwasser Shares");
                                    iCashReward = 10000;
                                    iMissionSeq = 40;
                                }
                            }
                        }       // Alan abuction...
                    }        //Follow
                    else if (iJobType == 9)
                    {
                        if (Game.Player.WantedLevel > 0)
                            Game.Player.WantedLevel = 0;

                        if (BeOnOff[2])
                            Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "re_armybase");

                        if (iMissionSeq == 0)
                        {
                            if (bReFire)
                                VehBlip(VehTrackin_01, BlipSprite.Wastelander, false, true);
                            else
                            {
                                VehTrackin_01 = World.CreateVehicle(VehicleHash.FireTruck, vGetaway, fGetDir);
                                VehBlip(VehTrackin_01, BlipSprite.Wastelander, false, true);
                                if (bFastTraveltoStart)
                                    WarptoAnyVeh(VehTrackin_01, Game.Player.Character, 1, false);
                                else if (!bSubtitles)
                                    QuickSub(sAltLang[108] + sAltLang[101] + "~b~" + sAltLang[188] + "~w~ " + sAltLang[96] + "~y~" + World.GetStreetName(VehTrackin_01.Position) + "~w~.");

                            }
                            iMissionSeq = 1;
                            BeOnOff[3] = true;
                        }
                        else if (iMissionSeq == 1)
                        {
                            if (bNotPause)
                            {
                                Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                bNotPause = false;
                            }
                            if (VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                            {
                                iMissionSeq = 3;
                                BeOnOff[3] = false;
                                VehTrackin_01.CurrentBlip.Remove();
                                if (iMissionVar_01 == 1 || iMissionVar_01 == 5)
                                    AddTarget(vTarget_01, true, true, 65.00f, false);
                                else
                                    AddTarget(vTarget_01, true, true, 1.00f, false);
                                if (!bSubtitles)
                                {
                                    if (iMissionVar_01 == 1)
                                        QuickSub(sAltLang[119] + "~b~" + sAltLang[128] + "~w~ " + sAltLang[187] + "~y~" + World.GetStreetName(vTarget_01) + "~w~.");
                                    else if (iMissionVar_01 == 2)
                                        QuickSub(sAltLang[119] + "~b~" + sAltLang[193] + "~w~ " + sAltLang[187] + "~y~" + World.GetStreetName(vTarget_01) + "~w~.");
                                    else if (iMissionVar_01 == 3)
                                        QuickSub(sAltLang[119] + "~b~" + sAltLang[194] + "~w~ " + sAltLang[187] + "~y~" + World.GetStreetName(vTarget_01) + "~w~.");
                                    else if (iMissionVar_01 == 4)
                                        QuickSub(sAltLang[119] + "~b~" + sAltLang[195] + "~w~ " + sAltLang[187] + sAltLang[196] + "~y~" + World.GetStreetName(vTarget_01) + "~w~.");
                                    else
                                        QuickSub(sAltLang[119] + "~r~" + sAltLang[198] + "~w~ " + sAltLang[199] + "~y~" + World.GetStreetName(vTarget_01) + "~w~.");
                                }
                            }
                            else if (Game.Player.Character.Position.DistanceTo(VehTrackin_01.Position) < 35.00f && !bReFire)
                            {
                                if (!VehTrackin_01.IsOnAllWheels)
                                {
                                    VehTrackin_01.Position = vGetaway;
                                    VehTrackin_01.Rotation = new Vector3(0.00f, 0.00f, fGetDir);
                                }
                            }
                            else
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[108] + sAltLang[101] + "~b~" + sAltLang[188] + "~w~ " + sAltLang[96] + "~y~" + World.GetStreetName(VehTrackin_01.Position) + "~w~.");

                                if (!Game.Player.Character.IsInVehicle() && !BeOnOff[3])
                                {
                                    BeOnOff[3] = true;
                                    VehBlip(VehTrackin_01, BlipSprite.Wastelander, true, false);
                                    RemoveTargets();
                                }
                            }
                        }
                        else if (iMissionSeq == 25)
                        {
                            bReFire = true;
                            iPlayerChoise = 5;
                            bControlerSelect = true;
                            CleanFakeBlips();
                            iMissionSeq = 99;
                        }
                        else if (iMissionSeq == 40)
                        {
                            if (iRepMisssion < 25)
                            {
                                if (iRepMisssion > 4)
                                    NSCoinInvestments(true, iRepMisssion - 2, iRepMisssion, "Mors Mutual Shares");
                                else
                                    NSCoinInvestments(true, 0, 1, "Mors Mutual Shares");
                            }
                            else
                                NSCoinInvestments(true, 27, 28, "Mors Mutual Shares");
                            if (BeOnOff[3])
                            {
                                BeOnOff[3] = false;
                                VehTrackin_01.CurrentBlip.Remove();
                            }
                            if (BeOnOff[1])
                            {
                                BeOnOff[2] = false;
                                ZancudaClosed();
                            }
                            VehTrackin_01.MarkAsNoLongerNeeded();
                            GameOver(false, "", false, iCashReward);
                        }
                        else if (iMissionSeq == 45)
                        {
                            if (BeOnOff[4])
                            {
                                BeOnOff[4] = false;
                                Npc_01.Detach();
                            }
                            if (BeOnOff[1])
                            {
                                BeOnOff[2] = false;
                                BeOnOff[1] = false;
                                ZancudaClosed();
                            }
                            if (BeOnOff[3])
                            {
                                BeOnOff[3] = false;
                                VehTrackin_01.CurrentBlip.Remove();
                            }
                            VehTrackin_01.MarkAsNoLongerNeeded();
                            GameOver(true, "", false, 0);
                        }
                        else if (iMissionVar_01 == 1)
                        {
                            if (iMissionSeq == 3)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[119] + "~b~" + sAltLang[128] + "~w~ " + sAltLang[187] + "~y~" + World.GetStreetName(vTarget_01) + "~w~.");

                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (World.GetDistance(VehTrackin_01.Position, vTarget_01) < 55.00f)
                                {
                                    iMissionSeq = 4;
                                    RemoveTargets();
                                    int iRanCar = RandInt(1, 16);
                                    FindAndReplaceVeh(vTarget_01, iRanCar, 0, 2, 29, 0, false, false, false, 65.00f, 25.00f, "", false, 1, 0, true);
                                }
                            }
                            else if (iMissionSeq == 4)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[119] + "~b~" + sAltLang[128] + "~w~ " + sAltLang[187] + "~y~" + World.GetStreetName(vTarget_01) + "~w~.");

                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (BeOnOff[0])
                                {
                                    iMissionSeq = 5;
                                    iMissionVar_02 = Game.GameTime + 60000;
                                    YourFired(VehTrackin_02.Position.X, VehTrackin_02.Position.Y, VehTrackin_02.Position.Z + 1.00f);
                                    vTarget_01.Z = vTarget_01.Z + 4.00f;
                                }
                            }
                            else if (iMissionSeq == 5)
                            {
                                if (VehTrackin_01.IsDead || VehTrackin_02.IsDead || Fire_BurnOut())
                                {
                                    iMissionSeq = 45;
                                    VehTrackin_02.Explode();
                                }
                                else if (World.GetDistance(VehTrackin_01.Position, VehTrackin_02.Position) < 30.00f)
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[189] + "~r~" + sAltLang[190] + "~w~ " + sAltLang[191] + "~b~" + sAltLang[188] + "'s~w~ " + sAltLang[192] + ".");
                                    else
                                    {
                                        if (!BeOff[1])
                                        {
                                            QuickSub(sAltLang[189] + "~r~" + sAltLang[190] + "~w~ " + sAltLang[191] + "~b~" + sAltLang[188] + "'s~w~ " + sAltLang[192] + ".");
                                            BeOff[1] = true;
                                        }
                                    }

                                    if (iFireList.Count() > 0)
                                    {
                                        World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(VehTrackin_02.Position.X, VehTrackin_02.Position.Y, VehTrackin_02.Position.Z + 1.00f), Vector3.Zero, new Vector3(0.00f, 180.00f, VehTrackin_02.Heading), new Vector3(0.50f, 0.50f, 0.50f), color: Color.Red);
                                        if (Fire_IntheHall(VehTrackin_02.Position))
                                        {
                                            RemoveTargets();
                                            iMissionSeq = 6;
                                            BeOff[1] = false;
                                        }
                                        ControlerUI(sAltLang[366], 1);
                                    }
                                }
                                else
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[119] + "~b~" + sAltLang[128] + "~w~ " + sAltLang[187] + "~y~" + World.GetStreetName(vTarget_01) + "~w~.");

                                }
                            }
                            else if (iMissionSeq == 6)
                            {
                                iMissionSeq = 25;
                            }
                        }       // Put out vehicle fire
                        else if (iMissionVar_01 == 2)
                        {
                            if (iMissionSeq == 3)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[119] + "~b~" + sAltLang[193] + "~w~ " + sAltLang[187] + "~y~" + World.GetStreetName(vTarget_01) + "~w~.");

                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (World.GetDistance(VehTrackin_01.Position, vTarget_01) < 55.00f)
                                {
                                    iMissionSeq = 4;
                                    iMissionVar_02 = Game.GameTime + 60000;
                                    RemoveTargets();
                                    YourFired(vTarget_01.X, vTarget_01.Y, vTarget_01.Z - 1.00f);
                                }
                            }
                            else if (iMissionSeq == 4)
                            {
                                if (VehTrackin_01.IsDead || Fire_BurnOut())
                                    iMissionSeq = 45;
                                else if (World.GetDistance(VehTrackin_01.Position, vTarget_01) < 30.00)
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[189] + "~r~" + sAltLang[190] + "~w~ " + sAltLang[191] + "~b~" + sAltLang[188] + "'s~w~ " + sAltLang[192] + ".");
                                    else
                                    {
                                        if (BeOff[1])
                                        {
                                            QuickSub(sAltLang[189] + "~r~" + sAltLang[190] + "~w~ " + sAltLang[191] + "~b~" + sAltLang[188] + "'s~w~ " + sAltLang[192] + ".");
                                            BeOff[1] = false;
                                        }
                                    }

                                    if (iFireList.Count > 0)
                                    {
                                        World.DrawMarker(MarkerType.ChevronUpx1, vTarget_01, Vector3.Zero, new Vector3(0.00f, 180.00f, 0.00f), new Vector3(0.50f, 0.50f, 0.50f), color: Color.Red);
                                        if (Fire_IntheHall(vTarget_01))
                                        {
                                            RemoveTargets();
                                            iMissionSeq = 5;
                                        }
                                        ControlerUI(sAltLang[366], 1);
                                    }
                                }
                                else
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[119] + "~b~" + sAltLang[193] + "~w~ " + sAltLang[187] + "~y~" + World.GetStreetName(vTarget_01) + "~w~.");

                                }
                            }
                            else if (iMissionSeq == 5)
                            {
                                iMissionSeq = 25;
                            }
                        }       // Put out house fire
                        else if (iMissionVar_01 == 3)
                        {
                            if (iMissionSeq == 3)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[119] + "~b~" + sAltLang[194] + "~w~ " + sAltLang[187] + "~y~" + World.GetStreetName(vTarget_01) + "~w~.");

                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (World.GetDistance(VehTrackin_01.Position, vTarget_01) < 55.00f)
                                {
                                    iMissionSeq = 4;
                                    vTarget_01.Z -= 1.00f;
                                    RemoveTargets();
                                    YourFired(vTarget_01.X, vTarget_01.Y, vTarget_01.Z + 1.00f);
                                    int iBinit = sList_01.Count - 1;
                                    int iRanBin = RandInt(0, iBinit);
                                    iMissionVar_02 = Game.GameTime + 60000;
                                    BuildProp(sList_01[iRanBin], vTarget_01, Vector3.Zero, true, true);
                                    vTarget_01.Z = vTarget_01.Z + 3.00f;
                                }
                            }
                            else if (iMissionSeq == 4)
                            {
                                if (VehTrackin_01.IsDead || Fire_BurnOut())
                                    iMissionSeq = 45;
                                else if (World.GetDistance(VehTrackin_01.Position, vTarget_01) < 30.00)
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[189] + "~r~" + sAltLang[190] + "~w~ " + sAltLang[191] + "~b~" + sAltLang[188] + "'s~w~ " + sAltLang[192] + ".");
                                    else
                                    {
                                        if (BeOff[1])
                                        {
                                            QuickSub(sAltLang[189] + "~r~" + sAltLang[190] + "~w~ " + sAltLang[191] + "~b~" + sAltLang[188] + "'s~w~ " + sAltLang[192] + ".");
                                            BeOff[1] = false;
                                        }
                                    }

                                    if (iFireList.Count > 0)
                                    {
                                        World.DrawMarker(MarkerType.ChevronUpx1, vTarget_01, Vector3.Zero, new Vector3(0.00f, 180.00f, 0.00f), new Vector3(0.50f, 0.50f, 0.50f), color: Color.Red);

                                        if (Fire_IntheHall(vTarget_01))
                                        {
                                            RemoveTargets();
                                            iMissionSeq = 5;
                                        }
                                        ControlerUI(sAltLang[366], 1);
                                    }
                                }
                                else
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[119] + "~b~" + sAltLang[194] + "~w~ " + sAltLang[187] + "~y~" + World.GetStreetName(vTarget_01) + "~w~.");

                                }
                            }
                            else if (iMissionSeq == 5)
                            {
                                iMissionSeq = 25;
                            }
                        }       // Put out bin fire
                        else if (iMissionVar_01 == 4)
                        {
                            if (iMissionSeq == 3)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[119] + "~b~" + sAltLang[195] + "~w~ " + sAltLang[187] + sAltLang[196] + "~y~" + World.GetStreetName(vTarget_01) + "~w~.");

                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (World.GetDistance(Game.Player.Character.Position, vTarget_01) < 155.00f)
                                {
                                    iMissionSeq = 4;
                                    NPCSpawn("a_c_cat_01", vTarget_01, 0.00f, 10, 180, 0, 12, 0, null, 0, true, false, 1, 0);
                                }
                            }
                            else if (iMissionSeq == 4)
                            {
                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (PedList_03.Count > 0)
                                {
                                    iMissionSeq = 5;
                                    Npc_01.IsInvincible = true;
                                    RemoveTargets();
                                }
                            }
                            else if (iMissionSeq == 5)
                            {
                                if (bSubtitles)
                                {
                                    if (Game.Player.Character.Position.Z < Npc_01.Position.Z)
                                        StickySubTitle(sAltLang[92] + "~r~" + sAltLang[195] + "~w~ " + sAltLang[162] + "~g~" + sAltLang[160] + "~w~.");
                                    else
                                        StickySubTitle(sAltLang[92] + "~r~" + sAltLang[195] + "~w~ " + sAltLang[162] + "~o~" + sAltLang[161] + "~w~.");
                                }
                                World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(Npc_01.Position.X, Npc_01.Position.Y, Npc_01.Position.Z + 1.00f), Vector3.Zero, new Vector3(0.00f, 180.00f, Npc_01.Heading), new Vector3(0.50f, 0.50f, 0.50f), Color.AntiqueWhite);
                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (World.GetDistance(Game.Player.Character.Position, Npc_01.Position) < 1.10f && !Game.Player.Character.IsInVehicle())
                                {
                                    iMissionSeq = 6;
                                    vTarget_02.Z -= 1.00f;
                                    Npc_01.AttachTo(Game.Player.Character, Game.Player.Character.GetBoneIndex("SKEL_ROOT"), new Vector3(0.00f, 0.00f, 1.00f), new Vector3(0.00f, 0.00f, 0.00f));
                                    Npc_01.CurrentBlip.Remove();
                                    NPCSpawn(RandNPC(RandInt(1, 35)), vTarget_03, 0.01f, 40, 190, 0, 13, 0, null, 0, false, false, 2, 0);
                                    BeOnOff[4] = true;
                                    if (!bSubtitles)
                                        QuickSub(sAltLang[172] + "~b~" + sAltLang[188] + "~w~.");
                                }
                                else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    if (BeOnOff[3])
                                    {
                                        BeOnOff[3] = false;
                                        VehTrackin_01.CurrentBlip.Remove();
                                    }
                                }
                                else
                                {
                                    if (!BeOnOff[3])
                                    {
                                        BeOnOff[3] = true;
                                        VehBlip(VehTrackin_01, BlipSprite.Wastelander, false, true);
                                    }
                                }
                            }
                            else if (iMissionSeq == 6)
                            {
                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (World.GetDistance(vTarget_02, VehTrackin_01.Position) < 5.00f)
                                {
                                    if (Game.Player.Character.IsInVehicle())
                                    {
                                        if (bSubtitles)
                                            StickySubTitle(sAltLang[178] + "~b~" + sAltLang[188] + "~w~.");
                                        else
                                        {
                                            if (BeOff[1])
                                            {
                                                QuickSub(sAltLang[178] + "~b~" + sAltLang[188] + "~w~.");
                                                BeOff[1] = false;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        iMissionSeq = 7;
                                        PedBlimp(Npc_02, BlipColor.BlueLight, 0.75f, true, true);
                                        RemoveTargets();
                                        if (!bSubtitles)
                                            QuickSub(sAltLang[102] + "~b~" + sAltLang[195] + "~w~ " + sAltLang[197]);
                                    }
                                }
                                else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[102] + "~b~" + sAltLang[195] + "~w~ " + sAltLang[197]);

                                    if (BeOnOff[3])
                                    {
                                        BeOnOff[3] = false;
                                        TheYellowCorona(vTarget_02, 10.00f);
                                        AddTarget(vTarget_02, true, true, 1.00f, false);
                                        VehTrackin_01.CurrentBlip.Remove();
                                        if (!bSubtitles)
                                            QuickSub(sAltLang[102] + "~b~" + sAltLang[195] + "~w~ " + sAltLang[197]);
                                    }
                                }
                                else
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[172] + "~b~" + sAltLang[188] + "~w~.");

                                    if (!BeOnOff[3])
                                    {
                                        BeOnOff[3] = true;
                                        VehBlip(VehTrackin_01, BlipSprite.Wastelander, false, true);
                                        RemoveTargets();
                                    }
                                }
                            }
                            else if (iMissionSeq == 7)
                            {
                                if (VehTrackin_01.IsDead || Npc_02.IsDead)
                                    iMissionSeq = 45;
                                else if (BeOnOff[4])
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[102] + "~b~" + sAltLang[195] + "~w~ " + sAltLang[197]);

                                    if (vTarget_03.DistanceTo(Game.Player.Character.Position) < 8.50f || Npc_02.Position.DistanceTo(vTarget_03) > 3)
                                    {
                                        BeOnOff[4] = false;
                                        Npc_01.Detach();
                                        Npc_01.Position = (Game.Player.Character.Position) + (Game.Player.Character.ForwardVector * 2.00f);
                                        iWait4Sec = Game.GameTime + 3500;
                                        Npc_01.Task.RunTo(PedList_03[1].Position);
                                    }
                                }
                                else
                                {
                                    if (iWait4Sec < Game.GameTime)
                                        iMissionSeq = 8;
                                }
                            }
                            else if (iMissionSeq == 8)
                            {
                                iMissionSeq = 25;
                                iCashBouns = RandInt(10, 100);
                            }
                        }       // Save cat from high place
                        else if (iMissionVar_01 == 5)
                        {
                            if (iMissionSeq == 3)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[119] + "~r~" + sAltLang[198] + "~w~ " + sAltLang[199] + "~y~" + World.GetStreetName(vTarget_01) + "~w~.");

                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (World.GetDistance(VehTrackin_01.Position, vTarget_01) < 55.00f)
                                {
                                    iMissionSeq = 4;
                                    RemoveTargets();
                                    int iRanCar = RandInt(1, 9);
                                    FindAndReplaceVeh(vTarget_01, iRanCar, 13, 2, 29, 0, false, false, false, 65.00f, 25.00f, "", false, 1, 0, true);
                                }
                            }
                            else if (iMissionSeq == 4)
                            {
                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (BeOnOff[0])
                                {
                                    iMissionSeq = 5;
                                    VehTrackin_02.IsFireProof = false;
                                    NPCSpawn(RandNPC(RandInt(1, 35)), VehTrackin_02.Position, VehTrackin_02.Heading, 65, 130, 2, 29, 1, VehTrackin_02, 6, false, true, 1, 0);
                                }
                            }
                            else if (iMissionSeq == 5)
                            {
                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (PedList_02.Count > 0)
                                {
                                    iMissionSeq = 6;
                                    Npc_01.Task.CruiseWithVehicle(VehTrackin_02, 30.00f, 1074528293);
                                    VehTrackin_02.RollDownWindows();
                                    iTime_01[0] = Game.GameTime + RandInt(15000, 25000);
                                }
                            }
                            else if (iMissionSeq == 6)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[200] + "~r~" + sAltLang[198] + "~w~.");
                                else
                                {
                                    if (BeOff[1])
                                    {
                                        QuickSub(sAltLang[200] + "~r~" + sAltLang[198] + "~w~.");
                                        BeOff[1] = false;
                                    }
                                }

                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (Npc_01.IsDead)
                                {
                                    iMissionSeq = 7;
                                    iCashBouns = 1000;
                                    VehTrackin_02.Explode();
                                }
                                if (iTime_01[0] < Game.GameTime)
                                {
                                    iMissionSeq = 7;
                                    iCashBouns = 50;
                                    VehTrackin_02.Explode();
                                }
                                else if (iWait4Sec < Game.GameTime)
                                    Fire_ShootRanPed();
                            }
                            else if (iMissionSeq == 7)
                            {
                                iMissionSeq = 25;
                            }
                        }       // Chase driver throwing molitovs
                    }        //Fire
                    else if (iJobType == 10)
                    {
                        if (iMissionSeq == 0)
                        {
                            if (VehicleList_01.Count > 0)
                            {
                                iMissionSeq = 1;

                                float fVehCheck = VehTrackin_01.BodyHealth + VehTrackin_01.EngineHealth + VehTrackin_01.PetrolTankHealth;
                                iMissionVar_04 = (int)fVehCheck;

                                if (bFastTraveltoStart)
                                    WarptoAnyVeh(VehTrackin_01, Game.Player.Character, 1, false);
                                else if (!bSubtitles)
                                    QuickSub(sAltLang[92] + "~r~" + sAltLang[201] + "'s " + "~b~" + sAltLang[128] + "~w~ " + sAltLang[162] + sAltLang[175] + "~y~" + World.GetStreetName(vGetaway) + "~w~.");
                            }
                        }
                        else if (iMissionSeq == 1)
                        {
                            if (bNotPause)
                            {
                                Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                bNotPause = false;
                            }
                            if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable)
                                iMissionSeq = 45;
                            else if (VehTrackin_01.Position.DistanceTo(Game.Player.Character.Position) < 50.00f)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[103] + "~b~" + sAltLang[128] + "~w~.");
                                else
                                {
                                    if (BeOff[0])
                                    {
                                        QuickSub(sAltLang[103] + "~b~" + sAltLang[128] + "~w~.");
                                        BeOff[0] = false;
                                    }
                                }

                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    iMissionSeq = 2;
                                    VehTrackin_01.CurrentBlip.Remove();
                                    if (!bSubtitles)
                                        QuickSub(sAltLang[102] + "~b~" + sAltLang[128] + "~w~ " + sAltLang[104] + "~y~" + World.GetStreetName(vTarget_01) + "~w~.");
                                    vTarget_01.Z = vTarget_01.Z - 1.0f;
                                    TheYellowCorona(vTarget_01, 5.00f);
                                    AddTarget(vTarget_01, true, true, 1.00f, false);

                                }
                                else if (!VehTrackin_01.IsOnAllWheels)
                                {
                                    VehTrackin_01.Position = vGetaway;
                                    VehTrackin_01.Rotation = new Vector3(0.00f, 0.00f, fGetDir);
                                }
                            }
                            else
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[92] + "~r~" + sAltLang[201] + "'s " + "~b~" + sAltLang[128] + "~w~ " + sAltLang[162] + sAltLang[175] + "~y~" + World.GetStreetName(vGetaway) + "~w~.");
                            }
                        }
                        else if (iMissionSeq == 2)
                        {
                            if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable)
                                iMissionSeq = 45;
                            else if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[103] + "~b~" + sAltLang[128] + "~w~.");

                                if (!BeOnOff[1])
                                {
                                    BeOnOff[1] = true;
                                    VehBlip(VehTrackin_01, BlipSprite.PersonalVehicleCar, true, false);
                                    if (!bSubtitles)
                                        QuickSub(sAltLang[103] + "~b~" + sAltLang[128] + "~w~.");
                                }
                            }
                            else if (World.GetDistance(vTarget_01, VehTrackin_01.Position) < 90.0f)
                            {
                                iMissionSeq = 3;
                                Johnny_PlayerAntics();
                                if (BeOnOff[0])
                                {
                                    MoveThatCar(vTarget_01);
                                    BeOnOff[0] = false;
                                }
                            }
                            else
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[102] + "~b~" + sAltLang[128] + "~w~ " + sAltLang[104] + "~y~" + World.GetStreetName(vTarget_01) + "~w~.");

                                if (BeOnOff[1])
                                {
                                    VehTrackin_01.CurrentBlip.Remove();
                                    BeOnOff[1] = false;
                                }

                                if (iMissionVar_04 > 0 && iCashBouns > 0)
                                    iCashReward = VehDamage(VehTrackin_01, iMissionVar_04, iCashBouns, true, iCashReward, false);
                            }
                        }
                        else if (iMissionSeq == 3)
                        {
                            if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable)
                                iMissionSeq = 45;
                            else if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[103] + "~b~" + sAltLang[128] + "~w~.");

                                if (!BeOnOff[1])
                                {
                                    BeOnOff[1] = true;
                                    VehBlip(VehTrackin_01, BlipSprite.PersonalVehicleCar, true, false);
                                    if (!bSubtitles)
                                        QuickSub(sAltLang[103] + "~b~" + sAltLang[128] + "~w~.");
                                }
                            }
                            else if (World.GetDistance(vTarget_01, VehTrackin_01.Position) < 3.0f)
                            {
                                iMissionSeq = 4;
                                RemoveTargets();
                                if (!bSubtitles)
                                    QuickSub(sAltLang[178] + "~b~" + sAltLang[128] + "~w~ " + sAltLang[202] + "~o~" + sAltLang[203] + "~w~ " + sAltLang[204]);
                            }
                            else
                            {
                                if (BeOnOff[1])
                                {
                                    VehTrackin_01.CurrentBlip.Remove();
                                    BeOnOff[1] = false;
                                }
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[102] + "~b~" + sAltLang[128] + "~w~ " + sAltLang[101] + "~y~" + sAltLang[127] + "~w~.");

                                if (iMissionVar_04 > 0 && iCashBouns > 0)
                                    iCashReward = VehDamage(VehTrackin_01, iMissionVar_04, iCashBouns, true, iCashReward, false);
                            }
                        }
                        else if (iMissionSeq == 4)
                        {
                            iMissionSeq = 5;
                            iCashReward += 200;
                            VehTrackin_01.Repair();
                            VTBTimerPool.Remove(ttTextBar_01);
                            VTBTimerPool.Add(ttTextBar_02);
                            AddTarget(vTarget_01, false, false, 50.00f, false);
                            iWait4Sec = Game.GameTime + 30000;
                        }
                        else if (iMissionSeq == 5)
                        {
                            if (bSubtitles)
                                StickySubTitle(sAltLang[178] + "~b~" + sAltLang[128] + "~w~ " + sAltLang[202] + "~o~" + sAltLang[203] + "~w~ " + sAltLang[204]);

                            if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable)
                                iMissionSeq = 45;
                            else if (iWait4Sec < Game.GameTime)
                            {
                                if (World.GetDistance(Game.Player.Character.Position, vTarget_01) < 50.00f || World.GetDistance(vTarget_01, VehTrackin_01.Position) > 48.00f)
                                    iMissionSeq = 7;
                                else
                                    iMissionSeq = 6;
                            }
                            else
                            {
                                if (!Game.Player.Character.IsInVehicle(VehTrackin_01) && World.GetDistance(Game.Player.Character.Position, vTarget_01) > 50.00f && World.GetDistance(vTarget_01, VehTrackin_01.Position) < 48.00f)
                                    iMissionSeq = 6;
                            }

                            FindTheTime(iWait4Sec - Game.GameTime, 9, "", true);
                        }
                        else if (iMissionSeq == 6)
                        {
                            if (iCashReward > 20000)
                                NSCoinInvestments(false, 5, 7, "Mors Mutual Shares");

                            GameOver(false, "", false, iCashReward);
                        }
                        else if (iMissionSeq == 7)
                        {
                            bPlayerAtt = true;
                            iMissionSeq = 45;
                        }
                        else if (iMissionSeq == 45)
                        {
                            GameOver(true, "", false, 0);
                        }
                    }       //Johnny
                    else if (iJobType == 11)
                    {
                        if (iMissionSeq == 0)
                        {
                            if (Game.Player.Character.Position.DistanceTo(VectorList_03[0]) < 45.00f)
                            {
                                VehicleSpawn(sList_01[0], VectorList_03[0], fList_01[0], false, BeOnOff[0], false, false, 21, 1, 0, 1, true);
                                iMissionSeq = 1;
                                iMissionVar_01 = 0;
                                FakeBlimbs(vTarget_05, BlipSprite.Race, false);
                            }
                            else if (bFastTraveltoStart)
                            {
                                SlowFastTravel(vFuMiss, 0.00f);
                                VehicleSpawn(sList_01[0], VectorList_03[0], fList_01[0], false, BeOnOff[0], false, false, 21, 1, 0, 1, true);
                                iMissionSeq = 1;
                                iMissionVar_01 = 0;
                                FakeBlimbs(vTarget_05, BlipSprite.Race, false);
                            }
                        }
                        else if (iMissionSeq == 1)
                        {
                            if (bNotPause)
                            {
                                Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                bNotPause = false;
                            }

                            if (!Game.Player.Character.IsInVehicle())
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[205] + "~b~" + sAltLang[128] + "~w~ " + sAltLang[206] + "~b~" + sAltLang[128] + "~w~.");
                                if (!VehTrackin_01.Exists())
                                {
                                    bTrainM = false;
                                    VehicleList_01.Remove(VehTrackin_01);
                                    sList_01 = Racist_Carz(iList_02[11]);
                                    VehicleSpawn(sList_01[0], VectorList_03[0], fList_01[0], false, false, false, false, 21, 1, 0, 1, true);
                                }
                                else if (World.GetDistance(VehTrackin_01.Position, Game.Player.Character.Position) < 5.00f)
                                {
                                    if (!BeOnOff[1])
                                    {
                                        ControlerUI("~INPUT_DETONATE~ " + GetEntName(sList_01[iList_02[6]]) + " ~INPUT_CONTEXT~", 1);
                                        if (!VehTrackin_01.Exists())
                                        {
                                            bTrainM = false;
                                            VehicleList_01.Remove(VehTrackin_01);
                                            sList_01 = Racist_Carz(iList_02[11]);
                                            VehicleSpawn(sList_01[0], VectorList_03[0], fList_01[0], false, false, false, false, 21, 1, 0, 1, true);
                                        }
                                        else if (Game.IsControlJustPressed(2, GTA.Control.Detonate))
                                        {
                                            if (iList_02[6] > 0)
                                                iList_02[6] -= 1;
                                            else
                                                iList_02[6] = sList_01.Count - 1;

                                            VehicleList_01.Remove(VehTrackin_01);
                                            VehTrackin_01.Delete();
                                            VehicleSpawn(sList_01[iList_02[6]], VectorList_03[0], fList_01[0], false, false, false, false, 21, 1, 0, 1, true);
                                            sMissionVar_01 = sList_01[iList_02[6]];
                                        }
                                        else if (Game.IsControlJustPressed(2, GTA.Control.Context))
                                        {
                                            if (iList_02[6] + 1 < sList_01.Count)
                                                iList_02[6] += 1;
                                            else
                                                iList_02[6] = 0;

                                            VehicleList_01.Remove(VehTrackin_01);
                                            VehTrackin_01.Delete();
                                            VehicleSpawn(sList_01[iList_02[6]], VectorList_03[0], fList_01[0], false, false, false, false, 21, 1, 0, 1, true);
                                            sMissionVar_01 = sList_01[iList_02[6]];
                                        }
                                    }
                                }
                            }
                            else if (World.GetDistance(vTarget_05, Game.Player.Character.Position) < 2.50f)
                            {
                                World.DrawMarker(MarkerType.VerticalCylinder, vTarget_05, Vector3.Zero, Vector3.Zero, new Vector3(2.50f, 2.50f, 2.50f), color: Color.Yellow);

                                if (Game.Player.Character.CurrentVehicle.ClassType == VehTrackin_01.ClassType || bSoloRace || bOnCayoLand)
                                {
                                    iMissionSeq = 2;
                                    RemoveTargets();
                                    Game.Player.Character.CurrentVehicle.FreezePosition = true;
                                    Racist_StartLine();
                                    iMissionVar_02 = 5;
                                    MkStart = MarkerType.Number5;
                                    vTarget_01 = VectorList_01[0];
                                }
                            }
                            else
                            {
                                World.DrawMarker(MarkerType.VerticalCylinder, vTarget_05, Vector3.Zero, Vector3.Zero, new Vector3(2.50f, 2.50f, 2.50f), color: Color.Yellow);

                                if (Game.Player.Character.CurrentVehicle.ClassType == VehTrackin_01.ClassType || bSoloRace || bOnCayoLand)
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[108] + sAltLang[101] + "~y~" + sAltLang[207] + "~w~.");
                                    else
                                    {
                                        if (BeOff[0])
                                        {
                                            QuickSub(sAltLang[108] + sAltLang[101] + "~y~" + sAltLang[207] + "~w~.");
                                            BeOff[0] = false;
                                        }
                                    }
                                }
                                else
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[208] + "~b~" + sAltLang[128] + "~w~ " + sAltLang[209] + ".");
                                    else
                                    {
                                        if (BeOff[1])
                                        {
                                            QuickSub(sAltLang[208] + "~b~" + sAltLang[128] + "~w~ " + sAltLang[209] + ".");
                                            BeOff[1] = false;
                                        }
                                    }
                                }
                            }
                        }
                        else if (iMissionSeq == 2)
                        {
                            World.DrawMarker(MkStart, new Vector3(vTarget_01.X, vTarget_01.Y, vTarget_01.Z + 1.00f), Vector3.Zero, new Vector3(0.00f, 0.00f, Game.Player.Character.Heading), new Vector3(fCorSize, fCorSize, fCorSize), color: Color.IndianRed);
                            if (!Game.Player.Character.IsInVehicle())
                                iMissionSeq = 45;
                            else if (iMissionVar_02 > 0)
                            {
                                if (iList_02[4] < Game.GameTime)
                                    Racist_CountDown();
                            }
                            else
                            {
                                iMissionSeq = 3;
                                if (iLocationX == 2 || iLocationX == 6)
                                {
                                    VehTrackin_01.IsDriveable = true;
                                    Function.Call(Hash.SET_BOAT_ANCHOR, VehTrackin_01, false);
                                }
                                else
                                    VehTrackin_01.FreezePosition = false;
                                if (!bSoloRace)
                                {
                                    if (iLocationX == 2 || iLocationX == 6)
                                    {
                                        Function.Call(Hash.SET_BOAT_ANCHOR, VehTrackin_02, false);
                                        Function.Call(Hash.SET_BOAT_ANCHOR, VehTrackin_03, false);
                                        Function.Call(Hash.SET_BOAT_ANCHOR, VehTrackin_04, false);
                                    }
                                    else if (iLocationX == 1)
                                        iList_02[0] = 1;
                                    vTarget_02 = vTarget_01;
                                    vTarget_03 = vTarget_01;
                                    vTarget_04 = vTarget_01;
                                    vTarget_05 = vTarget_01;

                                    VehTrackin_02.FreezePosition = false;
                                    VehTrackin_03.FreezePosition = false;
                                    VehTrackin_04.FreezePosition = false;

                                    Raceisums(Npc_01, vTarget_02, VehTrackin_02, fMaxSpeed);
                                    Raceisums(Npc_02, vTarget_03, VehTrackin_03, fMaxSpeed);
                                    Raceisums(Npc_03, vTarget_04, VehTrackin_04, fMaxSpeed);
                                }
                                iMissionVar_01 = CheckPointPro(false, VectorList_01, VectorList_01.Count - 1);
                            }

                            if (iWait4Sec < Game.GameTime)
                                ClearTheWay();
                        }
                        else if (iMissionSeq == 3)
                        {

                            if (!Game.Player.Character.IsInVehicle())
                                iMissionSeq = 45;
                            else if (Game.Player.Character.Position.DistanceTo(vTarget_01) < fCorSize + 5.00f)
                            {
                                iMissionSeq = 4;
                                BeOff[2] = false;
                                iCurrentLap -= 1;
                                iList_02[8] = Game.GameTime;
                                iList_02[7] = Game.GameTime;
                                int iOnLap = iTotalLap - iCurrentLap;
                                BigMessageThread.MessageInstance.ShowSimpleShard("LAP " + iOnLap + "/" + iTotalLap + "", "", 5000);
                                iMissionVar_01 = CheckPointPro(false, VectorList_01, iMissionVar_01);
                            }
                            Racist_PosTime(false);

                            if (iWait4Sec < Game.GameTime)
                                ClearTheWay();
                        }
                        else if (iMissionSeq == 4)
                        {
                            if (!Game.Player.Character.IsInVehicle())
                                iMissionSeq = 45;
                            else if (Game.Player.Character.Position.DistanceTo(vTarget_01) < fCorSize + 5.00f)
                            {
                                if (iMissionVar_01 == VectorList_01.Count - 1)
                                {
                                    if (iCurrentLap == 0)
                                    {
                                        BeOff[3] = false;
                                        iMissionVar_01 = CheckPointPro(true, VectorList_01, iMissionVar_01);
                                    }
                                    else
                                        iMissionVar_01 = CheckPointPro(false, VectorList_01, iMissionVar_01);
                                }
                                else if (iMissionVar_01 == 0)
                                {
                                    iCurrentLap -= 1;
                                    int iLapX = iList_02[7] - Game.GameTime;
                                    iDeliverList.Add(iLapX);
                                    iList_02[7] = Game.GameTime;

                                    if (iCurrentLap < 0)
                                        iMissionSeq = 5;
                                    else
                                    {
                                        int iOnLap = iTotalLap - iCurrentLap;
                                        BigMessageThread.MessageInstance.ShowSimpleShard("LAP " + iOnLap + "/" + iTotalLap + "", "", 5000);
                                        iMissionVar_01 = CheckPointPro(false, VectorList_01, iMissionVar_01);
                                    }
                                }
                                else
                                    iMissionVar_01 = CheckPointPro(false, VectorList_01, iMissionVar_01);
                                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "CHECKPOINT_UNDER_THE_BRIDGE", "HUD_MINI_GAME_SOUNDSET", true);
                            }
                            Racist_PosTime(true);

                            if (iWait4Sec < Game.GameTime)
                                ClearTheWay();
                        }
                        else if (iMissionSeq == 5)
                        {
                            iMissionSeq = 99;
                            RaceEnd(false);
                        }
                        else if (iMissionSeq == 45)
                        {
                            iMissionSeq = 99;
                            if (bIsVehPers)
                                VehTrackin_01.IsPersistent = false;
                            RaceEnd(true);
                        }
                    }       //Racist
                    else if (iJobType == 12)
                    {//bbomb find the bomb before timer runs out
                        if (iMissionSeq == 0)
                        {
                            iMissionSeq = 1;
                            vTarget_05 = vTarget_01.Around(25.00f);
                            vTarget_01.Z+= 1;
                            AddTarget(vTarget_05, true, true, 60.00f, true);
                            iWait4Sec = Game.GameTime + 1000;
                            if (bFastTraveltoStart)
                                SlowFastTravel(World.GetNextPositionOnStreet(vFuMiss), 0.00f);
                            else if (!bSubtitles)
                                QuickSub(sAltLang[108] + sAltLang[101] + "'~b~" + sAltLang[11] + "~w~' " + sAltLang[210] + "~y~" + World.GetStreetName(vTarget_05) + "~w~.");

                        }
                        else if (iMissionSeq == 1)
                        {
                            if (bNotPause)
                            {
                                Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                bNotPause = false;
                            }
                            if (bSubtitles)
                                StickySubTitle(sAltLang[108] + sAltLang[101] + "'~b~" + sAltLang[11] + "~w~' " + sAltLang[210] + "~y~" + World.GetStreetName(vTarget_05) + "~w~.");

                            if (Game.Player.Character.Position.DistanceTo(vTarget_01) < 155.00f)
                            {
                                iMissionSeq = 2;

                                RemoveTargets();
                                vTarget_01.Z -= 1;
                                Pick_01 = World.CreatePickup(PickupType.PortableCrateUnfixed, vTarget_01, new Vector3(0.00f, 0.00f, fMission_01), Function.Call<int>(Hash.GET_HASH_KEY, "ex_prop_adv_case_sm_flash"), 1);
                            }
                        }
                        else if (iMissionSeq == 2)
                        {
                            if (iWait4Sec < Game.GameTime)
                            {
                                iMissionSeq = 3;
                                AddTarget(vTarget_05, true, false, 60.00f, true);
                                FindAPed(World.GetNextPositionOnSidewalk(vTarget_05), 60.00f, 5, 4, 0, false);
                                iTime_01[0] = Game.GameTime + 120000;
                                if (!bSubtitles)
                                    QuickSub(sAltLang[211] + "'~b~" + sAltLang[11] + "~w~'.");

                            }
                        }
                        else if (iMissionSeq == 3)
                        {
                            if (bSubtitles)
                                StickySubTitle(sAltLang[211] + "'~b~" + sAltLang[11] + "~w~'.");

                            if (iTime_01[0] > Game.GameTime)
                            {
                                if (Pick_01.ObjectExists())
                                {

                                }
                                else
                                {
                                    iMissionSeq = 4;
                                    RemoveTargets();
                                    AddTarget(vTarget_02, true, true, 1.00f, false);

                                    vFuMiss = vTarget_03;

                                    if (!bSubtitles)
                                        QuickSub(sAltLang[102] + "'~b~" + sAltLang[11] + "~w~' " + sAltLang[212] + "'~y~" + sAltLang[213] + "~w~'.");
                                    BbBomb_BombSquad();
                                }
                                FindTheTime(iTime_01[0] - Game.GameTime, 9, "", true);
                            }
                            else
                            {
                                iMissionSeq = 45;
                                World.AddExplosion(vTarget_01, ExplosionType.PetrolPump, 10.00f, 10.00f, true, false);
                                Pick_01.Delete();
                            }
                        }
                        else if (iMissionSeq == 4)
                        {
                            if (bSubtitles)
                                StickySubTitle(sAltLang[102] + "'~b~" + sAltLang[11] + "~w~' " + sAltLang[212] + "'~y~" + sAltLang[213] + "~w~'.");

                            World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(vTarget_02.X, vTarget_02.Y, vTarget_02.Z + 0.5f), Vector3.Zero, new Vector3(0.00f, 180.00f, 0.00f), new Vector3(0.50f, 0.50f, 0.50f), color: Color.Yellow);
                            if (Game.Player.Character.Position.DistanceTo(vTarget_02) < 2.00f)
                            {
                                iMissionSeq = 5;
                                RemoveTargets();
                                iWait4Sec = Game.GameTime + 2000;
                                Game.Player.Character.Task.PlayAnimation("anim@mp_fireworks", "place_firework_3_box", 8.00f, 3000, true, 1.00f);
                            }
                        }
                        else if (iMissionSeq == 5)
                        {
                            if (iWait4Sec < Game.GameTime)
                            {
                                iMissionSeq = 6;
                                vTarget_02.Z = vTarget_02.Z - 1.05f;
                                BuildProp("ex_prop_adv_case_sm_flash", vTarget_02, Vector3.Zero, false, true);
                                ScaredBy(vTarget_02);
                            }
                        }
                        else if (iMissionSeq == 6)
                        {
                            if (bTestRun)
                            {
                                if (iTestKit < MyMissions.BombXM.Count())
                                {
                                    iMissionSeq = 0;
                                    VTBTimerPool.Remove(ttTextBar_02);
                                    RemoveTargets();
                                    CleanUpPeds();
                                    BBBomb();
                                }
                                else
                                {
                                    iMissionSeq = 99;
                                    GameOver(false, "", false, iCashReward);
                                }
                            }
                            else
                            {
                                iCashReward = RandInt(4000, 5000);
                                NSCoinInvestments(true, 7, 9, "Mors Mutual Shares");
                                GameOver(false, "", false, iCashReward);
                            }
                        }
                        else if (iMissionSeq == 45)
                        {
                            if (!bTestRun)
                                NSCoinInvestments(false, 7, 11, "Mors Mutual Shares");
                            GameOver(true, "", false, 0);
                        }
                    }       //bBomb
                    else if (iJobType == 13)
                    {
                        if (iMissionSeq == 0)
                        {
                            iMissionSeq = 1;
                            TheYellowCorona(vTarget_01, 1.00f);
                            AddTarget(vTarget_01, true, true, 1.00f, false);

                            if (bFastTraveltoStart)
                                SlowFastTravel(vTarget_01, 0.00f);
                            else if (!bSubtitles)
                                QuickSub(sAltLang[108] + sAltLang[101] + "~y~" + sAltLang[127] + "~w~.");

                        }
                        else if (iMissionSeq == 1)
                        {
                            if (bNotPause)
                            {
                                Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                bNotPause = false;
                            }
                            if (bSubtitles)
                                StickySubTitle(sAltLang[108] + sAltLang[101] + "~y~" + sAltLang[127] + "~w~.");

                            if (BeOnOff[0])
                            {
                                if (Game.Player.Character.Position.DistanceTo(vTarget_01) < 10.50f)
                                {
                                    BeOnOff[0] = false;
                                    DoorsNear(vTarget_01, 6.00f);
                                }
                            }
                            else if (Game.Player.Character.Position.DistanceTo(vTarget_01) < 2.50f)
                            {
                                if (!Game.Player.Character.IsInVehicle())
                                {
                                    iMissionSeq = 99;
                                    Weapon WEapX = Game.Player.Character.Weapons.Give(WeaponHash.SniperRifle, 9999, false, true);
                                    WEapX.SetComponent(WeaponComponent.AtArSupp02, true);
                                    WEapX.SetComponent(WeaponComponent.AtScopeMax, true);
                                    Game.Player.Character.Weapons.Give(WeaponHash.Dagger, 1, false, true);
                                    RemoveTargets();
                                    HitMan_SecurtyDetail(sMissionVar_01);
                                }
                            }

                        }
                        else if (iMissionSeq == 2)
                        {
                            if (PedList_02.Count > 4)
                            {
                                iMissionSeq = 3;

                                if (fList_01.Count > 0)
                                    PedScenario(Npc_01, "WORLD_HUMAN_AA_SMOKE", Npc_01.Position, fList_01[fList_01.Count - 1], false);
                                else
                                    PedScenario(Npc_01, "WORLD_HUMAN_AA_SMOKE", Npc_01.Position, 0.00f, false);

                                Npc_01.CurrentBlip.Color = BlipColor.Purple;
                                PedList_02[1].Task.Wait(-1);
                                PedList_02[2].Task.Wait(-1);

                                PedList_02[3].Position = VectorList_02[0];
                                iList_01[0] = PedWalkies(PedList_02[3], VectorList_02, 0);
                                PedList_02[4].Position = VectorList_03[0];
                                iList_01[1] = PedWalkies(PedList_02[4], VectorList_03, 0);
                                PedList_02[5].Position = VectorList_04[0];
                                iList_01[2] = PedWalkies(PedList_02[5], VectorList_04, 0);

                                iWait4Sec = Game.GameTime + 1000;
                                BeOnOff[1] = true;

                                if (!bSubtitles)
                                    QuickSub(sAltLang[182] + "'~p~" + sAltLang[214] + "~w~', " + sAltLang[215] + "'~r~" + sAltLang[216] + "~w~' " + sAltLang[217] + ".");
                            }
                        }
                        else if (iMissionSeq == 3)
                        {
                            if (bSubtitles)
                                StickySubTitle(sAltLang[182] + "'~p~" + sAltLang[214] + "~w~', " + sAltLang[215] + "'~r~" + sAltLang[216] + "~w~' " + sAltLang[217] + ".");

                            World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(Npc_01.Position.X, Npc_01.Position.Y, Npc_01.Position.Z + 1.00f), Vector3.Zero, new Vector3(0.00f, 180.00f, Npc_01.Heading), new Vector3(0.50f, 0.50f, 0.50f), Color.Purple);
                            if (iWait4Sec < Game.GameTime && BeOnOff[1])
                            {
                                iWait4Sec = Game.GameTime + 1000;
                                BeOnOff[1] = false;
                                Hitman_ManualAI();
                            }
                            else if (Npc_01.IsDead)
                            {
                                if (Npc_01.WasKilledByStealth)
                                {
                                    iCashReward = RandInt(50000, 55000);
                                    if (bOnCayoLand)
                                        iAssMissionList[6] += 1;
                                    else if (iLocationX == 1)
                                        iAssMissionList[0] += 1;
                                    else if (iLocationX == 2)
                                        iAssMissionList[1] += 1;
                                    else if (iLocationX == 3)
                                        iAssMissionList[2] += 1;
                                    else if (iLocationX == 4)
                                        iAssMissionList[3] += 1;
                                    else if (iLocationX == 5)
                                        iAssMissionList[4] += 1;
                                    else
                                        iAssMissionList[5] += 1;
                                    WriteXmlSet();
                                    NSCoinInvestments(true, 7, 12, "LCN Shares");
                                    GameOver(false, "", false, iCashReward);
                                }
                                else
                                {
                                    iMissionSeq = 45;
                                    Hitman_RemoveVisionCones();
                                }
                            }
                            else if (Game.Player.WantedLevel > 0)
                                Game.Player.WantedLevel = 0;
                            else if (Npc_01.Position.DistanceTo(Game.Player.Character.Position) < 10.00f)
                            {
                                if (Function.Call<bool>(Hash.GET_PED_STEALTH_MOVEMENT, Game.Player.Character))
                                    ControlerUI(sAltLang[359], 1);
                                else
                                    ControlerUI(sAltLang[360], 1);
                            }
                        }
                        else if (iMissionSeq == 40)
                        {
                            iMissionSeq = 41;
                            iWait4Sec = Game.GameTime + 5000;
                            Hitman_RemoveVisionCones();
                        }
                        else if (iMissionSeq == 41)
                        {
                            if (Npc_01.Position.DistanceTo(vTarget_02) < 1.00f || Npc_01.IsDead || iWait4Sec < Game.GameTime)
                            {
                                iMissionSeq = 45;
                                Npc_01.Position = Vector3.Zero;
                            }
                        }
                        else if (iMissionSeq == 45)
                        {
                            GameOver(true, "", false, 0);
                        }
                    }       //Hitman
                    else if (iJobType == 14)
                    {
                        if (iMissionSeq == 0)
                        {
                            if (PedList_01.Count > 0)
                            {
                                iMissionSeq = 1;
                                if (bFastTraveltoStart)
                                    WarptoAnyVeh(VehTrackin_01, Game.Player.Character, 1, false);
                                else if (!bSubtitles)
                                    QuickSub(sAltLang[108] + sAltLang[101] + "~b~" + sAltLang[13] + " " + sAltLang[123] + "~w~ " + sAltLang[96] + "~y~" + World.GetStreetName(VehTrackin_01.Position) + "~w~.");
                            }
                        }
                        else if (iMissionSeq == 1)
                        {
                            if (bNotPause)
                            {
                                Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                bNotPause = false;
                            }

                            if (VehTrackin_01.IsDead || Npc_01.IsDead)
                                iMissionSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                            {
                                iMissionSeq = 2;
                                BeOnOff[4] = false;
                                BeOnOff[5] = true;
                                iMissionVar_03 = 0;
                                VehTrackin_01.CurrentBlip.Remove();
                                Game.Player.Character.CanBeDraggedOutOfVehicle = true;
                                iMissionVar_01 = VectorList_01.Count - 1;
                                vTarget_01 = VectorList_01[iMissionVar_01];
                                vTarget_01.Z -= 1.00f;
                                TheYellowCorona(vTarget_01, 5.00f);
                                AddTarget(vTarget_01, true, true, 1.00f, false);

                                if (!bSubtitles)
                                    QuickSub(sAltLang[119] + "~b~" + sAltLang[218] + "~w~ " + sAltLang[159] + sAltLang[219] + " " + sAltLang[210] + "~y~" + World.GetStreetName(vTarget_01) + "~w~.");
                            }
                            else if (Game.Player.Character.Position.DistanceTo(VehTrackin_01.Position) < 35.00F)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[103] + "~b~" + sAltLang[13] + " " + sAltLang[123] + "~w~.");

                                if (!VehTrackin_01.IsOnAllWheels)
                                {
                                    VehTrackin_01.Position = vGetaway;
                                    VehTrackin_01.Rotation = new Vector3(0.00f, 0.00f, fGetDir);
                                }
                            }
                            else
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[108] + sAltLang[101] + "~b~" + sAltLang[13] + " " + sAltLang[123] + "~w~ " + sAltLang[96] + "~y~" + World.GetStreetName(VehTrackin_01.Position) + "~w~.");
                            }
                        }
                        else if (iMissionSeq == 2)
                        {
                            if (VehTrackin_01.IsDead || Npc_01.IsDead)
                                iMissionSeq = 45;
                            else if (VehTrackin_01.Position.DistanceTo(vTarget_01) < 2.50f)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[178] + "~b~" + sAltLang[123] + "~w~.");
                                else
                                {
                                    if (BeOff[0])
                                    {
                                        QuickSub(sAltLang[178] + "~b~" + sAltLang[123] + "~w~.");
                                        BeOff[0] = false;
                                    }
                                }
                                if (!Game.Player.Character.IsInVehicle())
                                {
                                    iMissionSeq = 3;
                                    iMissionVar_01 -= 1;
                                    vTarget_01 = VectorList_01[iMissionVar_01];
                                    RemoveTargets();
                                }
                            }
                            else if (BeOnOff[4])
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[103] + "~b~" + sAltLang[13] + " " + sAltLang[123] + "~w~.");

                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[4] = false;
                                    VehTrackin_01.CurrentBlip.Remove();
                                    if (!bSubtitles)
                                        QuickSub(sAltLang[172] + "~y~" + sAltLang[13] + " " + sAltLang[221] + "~w~.");
                                }
                            }
                            else
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[119] + "~b~" + sAltLang[218] + "~w~ " + sAltLang[159] + sAltLang[219] + " " + sAltLang[210] + "~y~" + World.GetStreetName(vTarget_01) + "~w~.");
                                if (!Game.Player.Character.IsInVehicle())
                                {
                                    BeOnOff[4] = true;
                                    VehBlip(VehTrackin_01, BlipSprite.ArmoredTruck, true, true);
                                }
                                else if (BeOnOff[5])
                                {
                                    if (VehTrackin_01.Position.DistanceTo(vTarget_01) < 65.00f)
                                    {
                                        MoveThatCar(vTarget_01);
                                        BeOnOff[5] = false;
                                    }
                                }
                                else if (Game.Player.WantedLevel > 0)
                                    Game.Player.WantedLevel = 0;
                            }
                        }
                        else if (iMissionSeq == 3)
                        {
                            iMissionSeq = 4;
                            iMissionVar_01 -= 1;
                            Vector3 Vme = VectorList_01[iMissionVar_01];
                            Vme.Z = Vme.Z - 0.71f;
                            Pick_01 = World.CreatePickup(PickupType.MoneySecurityCase, Vme, Vector3.Zero, Function.Call<int>(Hash.GET_HASH_KEY, "hei_prop_hei_security_case"), 1);
                            BeOnOff[0] = true;
                            AddTarget(Vme, false, true, 1.00f, false);

                            if (!bSubtitles)
                                QuickSub(sAltLang[92] + "~b~" + sAltLang[218] + "~w~ " + sAltLang[220] + "~y~" + sAltLang[219] + "~w~.");
                        }
                        else if (iMissionSeq == 4)
                        {
                            if (bSubtitles)
                                StickySubTitle(sAltLang[92] + "~b~" + sAltLang[218] + "~w~ " + sAltLang[220] + "~y~" + sAltLang[219] + "~w~.");

                            if (VehTrackin_01.IsDead || Npc_01.IsDead)
                                iMissionSeq = 45;
                            else if (Game.Player.Character.Position.DistanceTo(vTarget_01) < 3.00f)
                            {
                                if (iWait4Sec < Game.GameTime)
                                {
                                    iWait4Sec = Game.GameTime + 1000;
                                    DoorsNear(vTarget_01, 8.00f);
                                }
                            }
                            else if (Pick_01.ObjectExists())
                            {

                            }
                            else
                            {
                                iMissionSeq = 5;
                                iGotYourVan = 0;
                                BeOnOff[4] = true;
                                BeOnOff[0] = false;
                                VehBlip(VehTrackin_01, BlipSprite.ArmoredTruck, true, true);
                                float fup = vTarget_01.DistanceTo(vTarget_03);
                                iCashReward = (int)fup;
                                iCashReward = iCashReward * 2;
                                RemoveTargets();

                                if (!bSubtitles)
                                    QuickSub(sAltLang[103] + "~b~" + sAltLang[13] + " " + sAltLang[123] + "~w~.");
                            }
                        }
                        else if (iMissionSeq == 5)
                        {
                            if (Game.Player.WantedLevel > 0)
                                Game.Player.WantedLevel = 0;

                            if (VehTrackin_01.IsDead || Npc_01.IsDead)
                                iMissionSeq = 45;
                            else if (BeOnOff[4])
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[103] + "~b~" + sAltLang[13] + " " + sAltLang[123] + "~w~.");

                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    iMissionSeq = 6;
                                    BeOnOff[4] = false;
                                    VehTrackin_01.CurrentBlip.Remove();
                                    TheYellowCorona(vTarget_03, 5.00f);
                                    AddTarget(vTarget_03, true, true, 1.00f, false);
                                    iMissionVar_02 = Game.GameTime + RandInt(15000, 25000);
                                    if (!bSubtitles)
                                        QuickSub(sAltLang[172] + "~b~" + sAltLang[13] + " " + sAltLang[123] + "~w~ " + sAltLang[101] + "~y~" + sAltLang[221] + "~w~.");
                                }
                            }
                            else
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[172] + "~b~" + sAltLang[13] + " " + sAltLang[123] + "~w~ " + sAltLang[101] + "~y~" + sAltLang[221] + "~w~.");

                                if (!Game.Player.Character.IsInVehicle())
                                {
                                    BeOnOff[4] = true;
                                    VehBlip(VehTrackin_01, BlipSprite.ArmoredTruck, true, true);
                                    RemoveTargets();
                                }
                            }
                        }
                        else if (iMissionSeq == 6)
                        {
                            if (Game.Player.WantedLevel > 0)
                                Game.Player.WantedLevel = 0;

                            if (VehTrackin_01.IsDead || Npc_01.IsDead)
                                iMissionSeq = 45;
                            else if (iMissionVar_02 < Game.GameTime)
                            {
                                iMissionSeq = 7;
                                BeOnOff[5] = true;
                                MoneyMan_Attacks();
                            }
                            else if (BeOnOff[4])
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[103] + "~b~" + sAltLang[13] + " " + sAltLang[123] + "~w~.");

                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[4] = false;
                                    VehTrackin_01.CurrentBlip.Remove();
                                    TheYellowCorona(vTarget_03, 5.00f);
                                    AddTarget(vTarget_03, true, true, 1.00f, false);
                                    if (!bSubtitles)
                                        QuickSub(sAltLang[172] + "~b~" + sAltLang[13] + " " + sAltLang[123] + "~w~ " + sAltLang[101] + "~y~" + sAltLang[221] + "~w~.");
                                }
                            }
                            else
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[172] + "~b~" + sAltLang[13] + " " + sAltLang[123] + "~w~ " + sAltLang[101] + "~y~" + sAltLang[221] + "~w~.");

                                if (!Game.Player.Character.IsInVehicle())
                                {
                                    BeOnOff[4] = true;
                                    VehBlip(VehTrackin_01, BlipSprite.ArmoredTruck, true, true);
                                    RemoveTargets();
                                }
                            }
                        }
                        else if (iMissionSeq == 7)
                        {
                            if (BeOnOff[3])
                                StickySubTitle(sAltLang[108] + sAltLang[104] + sAltLang[112] + "~b~" + sAltLang[123] + "~w~ " + sAltLang[222] + ".");
                            else
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[172] + "~b~" + sAltLang[13] + " " + sAltLang[123] + "~w~ " + sAltLang[101] + "~y~" + sAltLang[221] + "~w~.");
                            }

                            if (Game.Player.WantedLevel > 0)
                                Game.Player.WantedLevel = 0;

                            if (VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else if (VehTrackin_01.Position.DistanceTo(vTarget_03) < 65.00f && BeOnOff[5])
                            {
                                MoveThatCar(vTarget_03);
                                BeOnOff[5] = false;
                            }
                            else if (VehTrackin_01.Position.DistanceTo(vTarget_03) < 2.50f)
                            {
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    StopHere(VehTrackin_01);
                                    iMissionSeq = 8;
                                    SlowFastTravel(vTarget_02, fphdirect);
                                    VehTrackin_01.FreezePosition = true;
                                    VehTrackin_01.Position = new Vector3(0.00f, 0.00f, 110.00f);
                                    FreeSeat(VehTrackin_01, 2, false);
                                    FreeSeat(VehTrackin_01, 3, false);
                                    FreeSeat(VehTrackin_01, 4, false);
                                }

                            }
                            else if (BeOnOff[4])
                            {
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[4] = false;
                                    BeOnOff[5] = true;
                                    BeOnOff[3] = false;
                                    VehTrackin_01.CurrentBlip.Remove();
                                    TheYellowCorona(vTarget_03, 5.00f);
                                    AddTarget(vTarget_03, true, true, 1.00f, false);
                                }
                                else if (BeOnOff[3])
                                {
                                    if (Game.GameTime < iGotYourVan)
                                        FindTheTime(iGotYourVan - Game.GameTime, 7, "", true);
                                    else
                                        VehTrackin_01.Explode();
                                }
                            }
                            else
                            {
                                if (!Game.Player.Character.IsInVehicle())
                                {
                                    BeOnOff[4] = true;
                                    iGotYourVan = 0;
                                    VehBlip(VehTrackin_01, BlipSprite.ArmoredTruck, true, true);
                                    RemoveTargets();
                                }
                            }
                            if (iWait4Sec < Game.GameTime && BeOnOff[1])
                                MoneyMan_GetJack();

                        }
                        else if (iMissionSeq == 8)
                        {
                            NSCoinInvestments(true, 5, 9, "Gruppe Sechs Shares");
                            GameOver(false, "", false, iCashReward);
                        }
                        else if (iMissionSeq == 45)
                        {
                            NSCoinInvestments(false, 6, 10, "Gruppe Sechs Shares");
                            if (BeOnOff[0])
                                Pick_01.Delete();
                            GameOver(true, "", false, 0);
                        }
                    }       //MoneyMan
                    else if (iJobType == 15)
                    {
                        if (iLocationX == 1)
                        {
                            if (iMissionSeq == 0)
                            {
                                if (VehicleList_01.Count > 3)
                                {
                                    iMissionSeq = 1;
                                    Water01_BargeCars(VehTrackin_01, PropList_01[0], 1);
                                    Water01_BargeCars(VehTrackin_02, PropList_01[0], 3);
                                    Water01_BargeCars(VehTrackin_03, PropList_01[0], 2);
                                    AddTarget(vTarget_01, true, true, 1.00f, false);

                                    if (bFastTraveltoStart)
                                        WarptoAnyVeh(VehTrackin_05, Game.Player.Character, 1, false);
                                    else if (!bSubtitles)
                                        QuickSub(sAltLang[108] + sAltLang[101] + "~b~" + sAltLang[223] + "~w~ " + sAltLang[210] + "~y~" + World.GetZoneName(vTarget_01) + "~w~.");

                                }
                            }
                            else if (iMissionSeq == 1)
                            {
                                if (bNotPause)
                                {
                                    Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                    bNotPause = false;
                                }
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[108] + sAltLang[101] + "~b~" + sAltLang[223] + "~w~ " + sAltLang[210] + "~y~" + World.GetZoneName(vTarget_01) + "~w~.");

                                if (World.GetDistance(vTarget_01, Game.Player.Character.Position) < 45.0f)
                                {
                                    iMissionSeq = 2;
                                    VehBlip(VehTrackin_05, BlipSprite.Boat, true, true);
                                    RemoveTargets();

                                    if (!bSubtitles)
                                        QuickSub(sAltLang[103] + "~b~" + sAltLang[223] + "~w~.");
                                }
                            }
                            else if (iMissionSeq == 2)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[103] + "~b~" + sAltLang[223] + "~w~.");

                                if (VehTrackin_05.IsDead)
                                    iMissionSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(VehTrackin_05))
                                {
                                    iMissionSeq = 3;
                                    VehTrackin_05.CurrentBlip.Remove();
                                    Function.Call(Hash._SET_VEHICLE_ENGINE_POWER_MULTIPLIER, VehTrackin_05, 100.00f);
                                    AddTarget(Prop_03.Position, false, true, 1.00f, false);
                                    if (!bSubtitles)
                                        QuickSub(sAltLang[108] + sAltLang[101] + "~y~" + sAltLang[224] + "~w~.");
                                }
                            }
                            else if (iMissionSeq == 3)
                            {
                                World.DrawMarker(MarkerType.UpsideDownCone, new Vector3(Prop_03.Position.X, Prop_03.Position.Y, Prop_03.Position.Z + 2.00f), Vector3.Zero, Vector3.Zero, new Vector3(1.00f, 1.00f, 1.00f), Color.Beige);
                                if (VehTrackin_05.IsDead)
                                    iMissionSeq = 45;
                                else if (World.GetDistance(Prop_02.Position, Prop_03.Position) < 60.00f)
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[225] + "~b~" + sAltLang[223] + "~w~ " + sAltLang[226] + "~b~" + sAltLang[223] + " " + sAltLang[227] + "~w~ " + sAltLang[101] + "~y~" + sAltLang[224]);
                                    else
                                    {
                                        if (BeOff[0])
                                        {
                                            QuickSub(sAltLang[225] + "~b~" + sAltLang[223] + "~w~ " + sAltLang[226] + "~b~" + sAltLang[223] + " " + sAltLang[227] + "~w~ " + sAltLang[101] + "~y~" + sAltLang[224]);
                                            BeOff[0] = false;
                                        }
                                    }
                                    if (World.GetDistance(Prop_02.Position, Prop_03.Position) < 3.00f)
                                    {
                                        iMissionSeq = 4;
                                        RemoveTargets();
                                        Function.Call(Hash.SET_BOAT_ANCHOR, VehicleList_01[1], false);
                                        Water01_BargeTow(VehicleList_01[1], VehTrackin_05);
                                        vTarget_02.Z = vTarget_02.Z - 4.00f;
                                        TheYellowCorona(vTarget_02, 30.00f);
                                        AddTarget(vTarget_02, false, true, 1.00f, false);
                                        if (!bSubtitles)
                                            QuickSub(sAltLang[102] + "~b~" + sAltLang[224] + "~w~ " + sAltLang[101] + "~y~" + sAltLang[127]);
                                    }
                                }
                                else
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[108] + sAltLang[101] + "~y~" + sAltLang[224] + "~w~.");
                                }
                            }
                            else if (iMissionSeq == 4)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[102] + "~b~" + sAltLang[224] + "~w~ " + sAltLang[101] + "~y~" + sAltLang[127]);
                                if (VehTrackin_05.IsDead)
                                    iMissionSeq = 45;
                                else if (World.GetDistance(VehicleList_01[0].Position, vTarget_02) < 25.00f)
                                {
                                    iMissionSeq = 5;
                                    RemoveTargets();
                                    Game.FadeScreenOut(1000);
                                    Script.Wait(1000);
                                    VehicleList_01[1].Detach();
                                    VehTrackin_05.Position = vTarget_03;
                                    VehTrackin_05.Heading = fphdirect;
                                    Game.Player.Character.Task.LeaveVehicle();
                                    Function.Call(Hash.SET_BOAT_ANCHOR, VehTrackin_05, true);
                                    VehTrackin_05.LockStatus = VehicleLockStatus.LockedForPlayer;
                                    Water01_RentoMob();
                                    iWait4Sec = Game.GameTime + RandInt(10000, 15000);
                                    Game.FadeScreenIn(1000);
                                }
                            }
                            else if (iMissionSeq == 5)
                            {
                                    if (Game.GameTime < iWait4Sec)
                                    {
                                        iMissionSeq = 6;
                                        iMissionVar_02 = Game.GameTime + RandInt(10000, 15000);

                                        if (!bSubtitles)
                                            QuickSub(sAltLang[185] + "~b~" + sAltLang[228] + "~w~.");

                                        VehicleSpawn("Cargobob2", vTarget_04, 0.00f, false, true, false, false, 12, 0, 0, 4, false);
                                        BeOnOff[3] = true;
                                    }
                                    else if (iTracking < Game.GameTime)
                                        Water01_JetSkiTrackin();
                            }
                            else if (iMissionSeq == 6)
                            {
                                if (Game.Player.WantedLevel > 0)
                                    Game.Player.WantedLevel = 0;

                                if (VehTrackin_03.IsDead)
                                    iMissionSeq = 45;
                                else if (BeOnOff[1])
                                {
                                    if (VehTrackin_04.IsDead)
                                        iMissionSeq = 8;
                                    else if (VehTrackin_03.Position.DistanceTo(VehTrackin_04.Position) < 10.00f)
                                    {
                                        iMissionSeq = 7;
                                        VehTrackin_03.Detach();
                                        Function.Call(Hash._0x7BEB0C7A235F6F3B, VehTrackin_04, 0);
                                        Script.Wait(1200);
                                        Vector3 V3Me = Function.Call<Vector3>(Hash._0xCBDB9B923CACC92D, VehTrackin_04);
                                        VehTrackin_03.AttachTo(VehTrackin_04, VehTrackin_03.Handle, new Vector3(0.0f, 0.0f, -3.0f), new Vector3(0.0f, -15.0f, 0.0f));
                                        FlyAway(Npc_01, vTarget_04, 120.00f, 5.00f);
                                    }
                                    else
                                    {
                                        if (bSubtitles)
                                        {
                                            if (VehTrackin_03.Position.DistanceTo(VehTrackin_04.Position) < 45.00f)
                                                StickySubTitle(sAltLang[200] + "~r~" + sAltLang[158] + "~w~.");
                                            else
                                                StickySubTitle(sAltLang[185] + "~b~" + sAltLang[228] + "~w~.");
                                        }
                                        else
                                        {
                                            if (BeOff[1] && VehTrackin_03.Position.DistanceTo(VehTrackin_04.Position) < 45.00f)
                                            {
                                                QuickSub(sAltLang[200] + "~r~" + sAltLang[158] + "~w~.");
                                                BeOff[1] = false;
                                            }
                                        }
                                        if (iTracking < Game.GameTime)
                                            Water01_JetSkiTrackin();
                                    }
                                    Water01_BargeFloat();
                                }
                            }
                            else if (iMissionSeq == 7)
                            {
                                if (Game.Player.WantedLevel > 0)
                                    Game.Player.WantedLevel = 0;
                                if (VehTrackin_03.IsDead || VehicleList_01[0].Position.DistanceTo(VehTrackin_04.Position) > 200.00f || VehTrackin_04.IsDead)
                                    iMissionSeq = 40;
                                else if (VehTrackin_04.Position.Z < 200.00f && !BeOnOff[2])
                                {
                                    BeOnOff[2] = true;
                                    Vector3 V3Fly = VehTrackin_04.Position;
                                    V3Fly.Z = V3Fly.Z + 200.00f;
                                    FlyAway(Npc_01, V3Fly, 75.00f, 5.00f);
                                }
                                else if (VehTrackin_04.Position.Z > 200.00f && BeOnOff[2])
                                {
                                    BeOnOff[2] = false;
                                    FlyAway(Npc_01, vTarget_04, 75.00f, 5.00f);
                                }
                                Water01_BargeFloat();
                            }
                            else if (iMissionSeq == 8)
                            {
                                Game.FadeScreenOut(1000);
                                Script.Wait(1000);
                                CleanUpPeds();
                                Water01_HaveACar();
                            }
                            else if (iMissionSeq == 10)
                            {
                                iCashReward = RandInt(10000, 12000);
                                if (iProcessForPegs != iGotPegsus)
                                    Fruits(4);
                                iGotPegsus = iProcessForPegs;
                                iPegsboatsTest = iPegsboats;
                                NSCoinInvestments(true, 5, 9, "Legendary Motorsport Shares");
                                GameOver(false, "", false, iCashReward);
                            }
                            else if (iMissionSeq == 40)
                            {
                                Water01_BlowShitUp();
                            }
                            else if (iMissionSeq == 45)
                            {
                                NSCoinInvestments(false, 7, 9, "Legendary Motorsport Shares");
                                GameOver(true, "", false, 0);
                            }
                        }       //Tug Barge
                        else if (iLocationX == 2)
                        {
                            if (iMissionSeq == 0)
                            {
                                iMissionSeq = 1;
                                FakeBlimbs(vTarget_02, BlipSprite.SeaSparrow, false);
                                FakeBlimbs(vTarget_03, BlipSprite.Speedboat, false);
                                FakeBlimbs(vTarget_04, BlipSprite.TechnicalAqua, false);

                                if (!bSubtitles)
                                    QuickSub(sAltLang[229] + "~b~" + sAltLang[128] + "s~w~ " + sAltLang[230] + "~y~" + sAltLang[231] + "~w~.");
                            }
                            else if (iMissionSeq == 1)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[229] + "~b~" + sAltLang[128] + "s~w~ " + sAltLang[230] + "~y~" + sAltLang[231] + "~w~.");

                                if (vTarget_02.DistanceTo(Game.Player.Character.Position) < 75.00)
                                {
                                    iMissionSeq = 2;
                                    iMissionVar_01 = 1;
                                    VehicleSpawn("SeaSparrow", vTarget_02, fList_01[0], false, false, false, true, 2, 9, 17, 1, true);
                                }
                                else if (vTarget_03.DistanceTo(Game.Player.Character.Position) < 75.00)
                                {
                                    iMissionSeq = 2;
                                    iMissionVar_01 = 2;
                                    VehicleSpawn("Jetmax", vTarget_03, fList_01[1], false, false, false, true, 0, 0, 14, 1, true);
                                }
                                else if (vTarget_04.DistanceTo(Game.Player.Character.Position) < 75.00)
                                {
                                    iMissionSeq = 2;
                                    iMissionVar_01 = 3;
                                    VehicleSpawn("Technical2", vTarget_04, fList_01[2], false, false, false, true, 0, 0, 18, 1, true);
                                }
                            }
                            else if (iMissionSeq == 2)
                            {
                                if (VehicleList_01.Count > 0)
                                {
                                    iMissionSeq = 3;
                                    CleanFakeBlips();

                                    if (!bSubtitles)
                                    {
                                        if (iMissionVar_01 == 1)        //SeaSparrow
                                            QuickSub(sAltLang[103] + "~b~" + sAltLang[232] + "~w~.");
                                        else if (iMissionVar_01 == 2)   //Jetmax
                                            QuickSub(sAltLang[103] + "~b~" + sAltLang[233] + "~w~.");
                                        else                            //Technical2
                                            QuickSub(sAltLang[103] + "~b~" + sAltLang[234] + "~w~.");
                                    }
                                }
                            }
                            else if (iMissionSeq == 3)
                            {
                                if (bSubtitles)
                                {
                                    if (iMissionVar_01 == 1)
                                        StickySubTitle(sAltLang[103] + "~b~" + sAltLang[232] + "~w~.");
                                    else if (iMissionVar_01 == 2)
                                        StickySubTitle(sAltLang[103] + "~b~" + sAltLang[233] + "~w~.");
                                    else
                                        StickySubTitle(sAltLang[103] + "~b~" + sAltLang[234] + "~w~.");
                                }
                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    iMissionSeq = 4;
                                    VehTrackin_01.CurrentBlip.Remove();
                                    FakeBlimbs(vTarget_01, BlipSprite.Yacht, false);

                                    if (!bSubtitles)
                                        QuickSub(sAltLang[108] + sAltLang[101] + "~y~" + sAltLang[231] + "~w~.");
                                }
                            }
                            else if (iMissionSeq == 4)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[108] + sAltLang[101] + "~y~" + sAltLang[231] + "~w~.");

                                if (Game.Player.Character.Position.DistanceTo(vTarget_01) < 99.00f)
                                {
                                    iMissionSeq = 5;
                                    CleanFakeBlips();
                                    Water02_YachtAttack();
                                    iWait4Sec = Game.GameTime + 1000;

                                    if (!bSubtitles)
                                        QuickSub(sAltLang[182] + "~r~" + sAltLang[127] + "s~w~.");
                                }

                            }
                            else if (iMissionSeq == 5)
                            {
                                if (bSubtitles)
                                {
                                    if (PedList_02.Count > 1)
                                        StickySubTitle(sAltLang[182] + "~r~" + sAltLang[127] + "s~w~.");
                                    else
                                        StickySubTitle(sAltLang[182] + "~r~" + sAltLang[127] + "~w~.");
                                }

                                if (Game.Player.WantedLevel > 0)
                                    Game.Player.WantedLevel = 0;
                                ttTextBar_01.Text = "" + PedList_02.Count + "/20";
                                VTBTimerPool.Draw();
                                if (PedList_02.Count > 0)
                                {
                                    if (iTracking < Game.GameTime)
                                        TheUltimateTracker(false);
                                }
                                else
                                    iMissionSeq = 6;
                            }
                            else if (iMissionSeq == 6)
                            {
                                if (bYachtOwner)
                                {
                                    iCashReward = 20000;
                                    bYachtBypas = false;
                                    iMissionSeq = 7;
                                }
                                else
                                {
                                    iMissionSeq = 99;
                                    bYachtOwner = false;
                                    bControlerSelect = true;
                                    iPlayerChoise = 7;
                                }
                            }
                            else if (iMissionSeq == 7)
                            {
                                GameOver(false, "", false, iCashReward);
                            }
                            else if (iMissionSeq == 45)
                            {
                                bYachtBypas = false;
                                CleanFakeBlips();
                                if (bOldYacht)
                                    Water02_RemoveYacht();

                                if (bYachtOwner)
                                    bYachtBypas = false;

                                GameOver(true, "", false, 0);
                            }
                        }  //Defend yacht
                        else if (iLocationX == 3)
                        {
                            if (iMissionSeq == 0)
                            {
                                if (PedList_01.Count > 0)
                                {
                                    iMissionSeq = 1;

                                    if (bFastTraveltoStart)
                                        WarptoAnyVeh(VehTrackin_01, Game.Player.Character, 1, false);
                                    else if (!bSubtitles)
                                        QuickSub(sAltLang[108] + sAltLang[101] + "~y~" + sAltLang[235] + "~w~.");

                                }
                            }
                            else if (iMissionSeq == 1)
                            {
                                if (VehTrackin_01.IsDead || Npc_01.IsDead)
                                    iMissionSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    iMissionSeq = 2;
                                    Function.Call(Hash.SET_BOAT_ANCHOR, VehTrackin_01, false);
                                    iMissionVar_01 = iDeliverList.Count - 1;
                                    vTarget_01 = VectorList_01[iDeliverList[iMissionVar_01]];
                                    NPCSpawn(RandNPC(23), VectorList_02[iDeliverList[iMissionVar_01]], fList_01[iDeliverList[iMissionVar_01]], 65, 130, 0, 21, 0, null, 1, false, false, 0, 0);
                                    VehTrackin_01.CurrentBlip.Remove();
                                    BtSlideBar.BackgroundColor = Color.Black;
                                    BtSlideBar.ForegroundColor = Color.Purple;
                                    BtSlideBar.Percentage = 0.01f;
                                    AddTarget(vTarget_01, false, false, 45.00f, true);
                                }
                                else if (Game.Player.Character.Position.DistanceTo(VehTrackin_01.Position) < 25.00f)
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[103] + "~b~" + sAltLang[236] + "~w~.");
                                    else if (BeOff[0])
                                    {
                                        BeOff[0] = false;
                                        QuickSub(sAltLang[103] + "~b~" + sAltLang[236] + "~w~.");
                                    }
                                }
                                else
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[108] + sAltLang[101] + "~y~" + sAltLang[235] + "~w~.");
                                }
                            }
                            else if (iMissionSeq == 2)
                            {
                                if (BeOnOff[1])
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[239] + "~b~" + sAltLang[237] + " " + sAltLang[240] + "~w~ " + sAltLang[241]);
                                    else
                                    {
                                        if (BeOff[1])
                                        {
                                            QuickSub(sAltLang[239] + "~b~" + sAltLang[237] + " " + sAltLang[240] + "~w~ " + sAltLang[241]);
                                            BeOff[1] = false;
                                        }
                                    }
                                }
                                else
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[211] + sAltLang[88] + " ~y~" + sAltLang[237] + " ~w~" + sAltLang[238] + ".");
                                    else
                                    {
                                        if (BeOff[2])
                                        {
                                            QuickSub(sAltLang[211] + sAltLang[88] + " ~y~" + sAltLang[237] + " ~w~" + sAltLang[238] + ".");
                                            BeOff[2] = false;
                                        }
                                    }
                                }

                                if (BeOnOff[0])
                                {
                                    if (VehTrackin_01.IsInWater)
                                        BeOnOff[0] = false;
                                    else
                                    {
                                        if (iWait4Sec < Game.GameTime)
                                        {
                                            iWait4Sec = Game.GameTime + 15000;
                                            iMissionSeq = 15;
                                        }
                                    }
                                }
                                else
                                {
                                    if (!VehTrackin_01.IsInWater)
                                    {
                                        iWait4Sec = Game.GameTime + 5000;
                                        BeOnOff[0] = true;
                                    }
                                }
                                if (VehTrackin_01.IsDead || Npc_01.IsDead)
                                    iMissionSeq = 45;
                                else if (VehTrackin_01.Position.DistanceTo(vTarget_01) < 45.00f)
                                {
                                    float fdist = World.GetDistance(VehTrackin_01.Position, vTarget_01) / 45.00f;
                                    fdist = 1.00f - fdist;
                                    if (fdist < 0.01f)
                                        fdist = 0.01f;
                                    BtSlideBar.Percentage = fdist;
                                    if (fdist > 0.90f)
                                    {
                                        if (BeOnOff[1])
                                        {
                                            int iTotal = iWait4Sec - Game.GameTime;
                                            FindTheTime(iTotal, 9, "", false);
                                            if (iWait4Sec < Game.GameTime)
                                            {
                                                if (iMissionVar_01 > 0)
                                                {
                                                    RemoveTargets();
                                                    iMissionVar_01 = iMissionVar_01 - 1;
                                                    vTarget_01 = VectorList_01[iDeliverList[iMissionVar_01]];
                                                    NPCSpawn(RandNPC(23), VectorList_02[iDeliverList[iMissionVar_01]], fList_01[iDeliverList[iMissionVar_01]], 65, 130, 0, 21, 0, null, 0, false, false, 0, 0);
                                                    BtSlideBar.Percentage = 0.01f;
                                                    VTBTimerPool.Remove(ttTextBar_02);
                                                    AddTarget(vTarget_01, false, false, 45.00f, true);
                                                    BtSlideBar.ForegroundColor = Color.Purple;
                                                    BeOnOff[1] = false;
                                                }
                                                else
                                                {
                                                    RemoveTargets();
                                                    iMissionSeq = 3;
                                                    BeOnOff[1] = false;
                                                    AddTarget(vTarget_02, false, true, 1.00f, false);
                                                    TheYellowCorona(vTarget_02, 5.00f);

                                                    if (!bSubtitles)
                                                        QuickSub(sAltLang[102] + "~b~" + sAltLang[236] + "~w~ " + sAltLang[101] + "~y~" + sAltLang[127]);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            iWait4Sec = Game.GameTime + 5000;
                                            BtSlideBar.ForegroundColor = Color.Green;
                                            VTBTimerPool.Add(ttTextBar_02);
                                            BeOnOff[1] = true;
                                        }
                                    }
                                    else
                                    {
                                        BtSlideBar.ForegroundColor = Color.Purple;
                                        VTBTimerPool.Remove(ttTextBar_02);
                                        BeOnOff[1] = false;
                                    }
                                }
                                else
                                {
                                    if (VehTrackin_01.Position.Z + 5 < vTarget_01.Z)
                                        iMissionSeq = 45;
                                }
                                VTBTimerPool.Draw();
                            }
                            else if (iMissionSeq == 3)
                            {
                                if (BeOnOff[0])
                                {
                                    if (VehTrackin_01.IsInWater)
                                        BeOnOff[0] = false;
                                    else
                                    {
                                        if (iWait4Sec < Game.GameTime)
                                        {
                                            iWait4Sec = Game.GameTime + 15000;
                                            iMissionSeq = 16;
                                        }
                                    }
                                }
                                else
                                {
                                    if (!VehTrackin_01.IsInWater)
                                    {
                                        iWait4Sec = Game.GameTime + 5000;
                                        BeOnOff[0] = true;
                                    }
                                }

                                if (bSubtitles)
                                    StickySubTitle(sAltLang[102] + "~b~" + sAltLang[236] + "~w~ " + sAltLang[101] + "~y~" + sAltLang[127]);

                                if (VehTrackin_01.IsDead || Npc_01.IsDead)
                                    iMissionSeq = 45;
                                else if (VehTrackin_01.Position.DistanceTo(vTarget_02) < 3.50f)
                                {
                                    iMissionSeq = 4;
                                    RemoveTargets();
                                }
                            }
                            else if (iMissionSeq == 4)
                            {
                                iMissionSeq = 10;
                                StopHere(VehTrackin_01);
                                Vector3 Vpos = new Vector3(-2081.897f, 2609.123f, 3.083975f);
                                SlowFastTravel(Vpos, 89.72623f);
                                FreeSeat(VehTrackin_01, 2, false);
                                FreeSeat(VehTrackin_01, 3, false);
                                FreeSeat(VehTrackin_01, 4, false);
                                NSCoinInvestments(true, 7, 12, "White Water Activity Center Shares");
                                VehTrackin_01.Position = VectorList_01[0];
                                Vector3 Ding01 = new Vector3(-2091.959f, 2613.7197f, 0.2088f);
                                Vector3 Ding02 = new Vector3(-2096.607f, 2612.9768f, 0.2088f);
                                Vector3 Ding03 = new Vector3(-2102.579f, 2612.5708f, 0.2088f);
                                Vector3 Ding04 = new Vector3(-2107.394f, 2611.4148f, 0.2088f);
                                VehicleSpawn("DINGHY", Ding01, 15.13f, false, false, false, false, 9, 10, 0, 0, false);
                                VehicleSpawn("DINGHY2", Ding02, 15.13f, false, false, false, false, 9, 11, 0, 0, false);
                                VehicleSpawn("DINGHY3", Ding03, 15.13f, false, false, false, false, 9, 12, 0, 0, false);
                                VehicleSpawn("DINGHY4", Ding04, 15.13f, false, false, false, false, 9, 13, 0, 0, false);
                            }
                            else if (iMissionSeq == 10)
                            {
                                if (iProcessForPegs != iGotPegsus)
                                    Fruits(4);
                                iGotPegsus = iProcessForPegs;
                                iPegsboatsTest = iPegsboats;
                                GameOver(false, "", false, iCashReward);
                            }
                            else if (iMissionSeq == 15)
                            {
                                if (VehTrackin_01.IsDead || Npc_01.IsDead || iWait4Sec < Game.GameTime)
                                    iMissionSeq = 45;
                                else if (VehTrackin_01.IsInWater)
                                    iMissionSeq = 2;
                            }
                            else if (iMissionSeq == 16)
                            {
                                if (VehTrackin_01.IsDead || Npc_01.IsDead || iWait4Sec < Game.GameTime)
                                    iMissionSeq = 45;
                                else if (VehTrackin_01.IsInWater)
                                    iMissionSeq = 3;
                            }
                            else if (iMissionSeq == 45)
                            {
                                NSCoinInvestments(false, 9, 14, "White Water Activity Center Shares");
                                GameOver(true, "", false, 0);
                            }
                        }  //Phishing
                        else if (iLocationX == 4)
                        {
                            if (iMissionSeq == 0)
                            {
                                if (VehicleList_01.Count > 0)
                                {
                                    iMissionSeq = 1;

                                    if (bFastTraveltoStart)
                                        WarptoAnyVeh(VehTrackin_01, Game.Player.Character, 1, false);
                                    else if (!bSubtitles)
                                        QuickSub(sAltLang[113] + "~b~" + sAltLang[242] + "~w~ " + sAltLang[210] + "~y~" + World.GetStreetName(VehTrackin_01.Position) + "~w~.");
                                    
                                }
                            }
                            else if (iMissionSeq == 1)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[113] + "~b~" + sAltLang[242] + "~w~ " + sAltLang[210] + "~y~" + World.GetStreetName(VehTrackin_01.Position) + "~w~.");

                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    iMissionSeq = 99;
                                    VehTrackin_01.CurrentBlip.Remove();
                                    iList_01[1] = -1;
                                    Water04_AddTheRubbish();

                                    if (!bSubtitles)
                                        QuickSub(sAltLang[243] + "~g~" + sAltLang[244] + "~w~.");

                                }
                            }
                            else if (iMissionSeq == 2)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[243] + "~g~" + sAltLang[244] + "~w~.");

                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (iList_01[0] > Game.GameTime && iMissionVar_01 > 0)
                                {
                                    FindTheTime(iList_01[0] - Game.GameTime, 9, "", true);
                                    if (iList_01[1] > 0)
                                    {
                                        iList_01[1] -= 1;
                                        if (PropList_01[iList_01[1]].Exists())
                                        {
                                            if (!PropList_01[iList_01[1]].IsPersistent)
                                            {
                                                iMissionVar_01 = iMissionVar_01 - 1;
                                                PropList_01[iList_01[1]].Delete();
                                                PropList_01.Remove(PropList_01[iList_01[1]]);
                                            }

                                        }
                                        else
                                        {
                                            iMissionVar_01 = iMissionVar_01 - 1;
                                            PropList_01[iList_01[1]].Delete();
                                            PropList_01.Remove(PropList_01[iList_01[1]]);
                                            ttTextBar_01.Text = "" + iMissionVar_01 + "/50";
                                        }
                                    }
                                    else
                                        iList_01[1] = PropList_01.Count;
                                }
                                else
                                {
                                    iMissionSeq = 3;
                                    Water04_RemoveRubbish();
                                }
                            }
                            else if (iMissionSeq == 3)
                            {
                                if (BeOnOff[0])
                                {
                                    if (iMissionVar_01 == 0)
                                    {
                                        iMissionSeq = 99;
                                        iCashReward = RandInt(5000, 9000);
                                        if (iProcessForPegs != iGotPegsus)
                                            Fruits(4);
                                        iGotPegsus = iProcessForPegs;
                                        iPegsimortasTest = iPegsimortas;
                                        NSCoinInvestments(true, 9, 21, "DockTease Shares");
                                        GameOver(false, "", false, iCashReward);
                                    }
                                    else
                                        iMissionSeq = 45;
                                }
                            }
                            else if (iMissionSeq == 45)
                            {
                                GameOver(true, "", false, 0);
                            }
                        }  //Rubish collection
                        else if (iLocationX == 5)
                        {
                            if (iMissionSeq == 0)
                            {
                                iMissionSeq = 1;
                                List<string> SCarz = RandVeh(26);
                                string sXCArs = SCarz[RandInt(0, SCarz.Count - 1)];

                                Vector3 vBt_01 = new Vector3(1306.057f, 4219.996f, 29.88048f);
                                float fBT_01 = 171.1544f;
                                VehicleSpawn(sXCArs, vBt_01, fBT_01, false, false, false, false, 9, 0, 0, 0, false);
                                Vector3 vBt_02 = new Vector3(1297.212f, 4211.022f, 30.71615f);
                                float fBT_02 = 261.1423f;
                                sXCArs = SCarz[RandInt(0, SCarz.Count - 1)];
                                VehicleSpawn(sXCArs, vBt_02, fBT_02, false, false, false, false, 9, 0, 0, 0, false);
                                Vector3 vBt_03 = new Vector3(1302.542f, 4266.792f, 30.43473f);
                                float fBT_03 = 167.3074f;
                                sXCArs = SCarz[RandInt(0, SCarz.Count - 1)];
                                VehicleSpawn(sXCArs, vBt_03, fBT_03, false, false, false, false, 9, 0, 0, 0, false);
                                Vector3 vBt_04 = new Vector3(1295.325f, 4239.063f, 30.45684f);
                                float fBT_04 = 167.0434f;
                                sXCArs = SCarz[RandInt(0, SCarz.Count - 1)];
                                VehicleSpawn(sXCArs, vBt_04, fBT_04, false, false, false, false, 9, 0, 0, 0, false);
                                Vector3 vBt_05 = new Vector3(1344.052f, 4224.578f, 30.24381f);
                                float fBT_05 = 167.3387f;
                                sXCArs = SCarz[RandInt(0, SCarz.Count - 1)];
                                VehicleSpawn(sXCArs, vBt_05, fBT_05, false, false, false, false, 9, 0, 0, 0, false);
                                Vector3 vBt_06 = new Vector3(1318.892f, 4235.62f, 29.95362f);
                                float fBT_06 = 256.2925f;
                                sXCArs = SCarz[RandInt(0, SCarz.Count - 1)];
                                VehicleSpawn(sXCArs, vBt_06, fBT_06, false, false, false, false, 9, 0, 0, 0, false);

                                AddTarget(vTarget_01, true, true, 1.00f, false);

                                if (bFastTraveltoStart)
                                    SlowFastTravel(vTarget_01, 0.00f);
                                else if (!bSubtitles)
                                    QuickSub(sAltLang[108] + sAltLang[101] + "'~y~" + sAltLang[245] + "~w~'.");

                            }
                            else if (iMissionSeq == 1)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[108] + sAltLang[101] + "'~y~" + sAltLang[245] + "~w~'.");

                                if (Game.Player.Character.Position.DistanceTo(vTarget_01) < 55.00f)
                                {
                                    iMissionSeq = 2;
                                    BeOnOff[0] = false;
                                    iWait4Sec = 0;
                                    RemoveTargets();
                                    Water05_BlipTheBoats();
                                    VehTrackin_01.FreezePosition = false;

                                    if (!bSubtitles)
                                        QuickSub(sAltLang[246] + "~b~" + sAltLang[236] + "~w~ " + sAltLang[247] + ".");
                                }
                            }
                            else if (iMissionSeq == 2)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[246] + "~b~" + sAltLang[236] + "~w~ " + sAltLang[247] + ".");
                                if (iWait4Sec < Game.GameTime)
                                {
                                    iWait4Sec = Game.GameTime + 1000;
                                    Water05_InYourBoat();
                                }
                            }
                            else if (iMissionSeq == 3)
                            {

                                if (bSubtitles)
                                    StickySubTitle(sAltLang[102] + "~b~" + sAltLang[236] + "~w~ " + sAltLang[101] + "~y~" + sAltLang[127] + "~w~.");
                                else
                                {
                                    if (BeOff[0])
                                    {
                                        QuickSub(sAltLang[102] + "~b~" + sAltLang[236] + "~w~ " + sAltLang[101] + "~y~" + sAltLang[127] + "~w~.");
                                        BeOff[0] = false;
                                    }
                                }
                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (!Game.Player.Character.IsInVehicle())
                                {
                                    if (!BeOnOff[0])
                                    {
                                        VehBlip(VehTrackin_01, BlipSprite.Speedboat, true, false);
                                        BeOnOff[0] = true;
                                    }
                                }
                                else if (Game.Player.Character.CurrentVehicle.Model == VehicleHash.Cargobob || Game.Player.Character.CurrentVehicle.Model == VehicleHash.Cargobob2 || Game.Player.Character.CurrentVehicle.Model == VehicleHash.Cargobob3 || Game.Player.Character.CurrentVehicle.Model == VehicleHash.Cargobob4 && !Function.Call<bool>(Hash.IS_VEHICLE_ATTACHED_TO_CARGOBOB, Game.Player.Character.CurrentVehicle, VehTrackin_01))
                                {
                                    if (!BeOnOff[0])
                                    {
                                        VehBlip(VehTrackin_01, BlipSprite.Speedboat, true, false);
                                        BeOnOff[0] = true;
                                    }
                                }
                                else if (VehTrackin_01.Position.DistanceTo(vTarget_01) < 5.00f)
                                {
                                    iMissionSeq = 4;
                                    if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                        Function.Call(Hash.DETACH_VEHICLE_FROM_ANY_CARGOBOB, VehTrackin_01);
                                    else
                                    {
                                        StopHere(VehTrackin_01);
                                        SlowFastTravel(vTarget_02, 89.72623f);
                                        FreeSeat(VehTrackin_01, 2, false);
                                        FreeSeat(VehTrackin_01, 3, false);
                                        FreeSeat(VehTrackin_01, 4, false);
                                    }
                                    Function.Call(Hash.SET_BOAT_ANCHOR, VehTrackin_01, true);
                                }
                                else
                                {
                                    if (BeOnOff[0] && Game.Player.Character.IsInVehicle(VehTrackin_01) || Function.Call<bool>(Hash.IS_VEHICLE_ATTACHED_TO_CARGOBOB, Game.Player.Character.CurrentVehicle, VehTrackin_01))
                                    {
                                        VehTrackin_01.CurrentBlip.Remove();
                                        BeOnOff[0] = false;
                                    }
                                }
                            }
                            else if (iMissionSeq == 4)
                            {
                                iCashReward = (iList_01[0] - Game.GameTime) / 10 * -1;
                                if (iProcessForPegs != iGotPegsus)
                                    Fruits(4);
                                iGotPegsus = iProcessForPegs;
                                iPegsboatsTest = iPegsboats;
                                NSCoinInvestments(true, 9, 14, "DockTease Shares");
                                GameOver(false, "", false, iCashReward);
                            }
                            else if (iMissionSeq == 45)
                            {
                                NSCoinInvestments(false, 1, 4, "DockTease Shares");
                                GameOver(true, "", false, 0);
                            }
                        }  //Boat delivery
                        else
                        {
                            if (Game.Player.WantedLevel > 0)
                                Game.Player.WantedLevel = 0;
                            if (iMissionSeq == 0)
                            {
                                if (VehicleList_01.Count > 0)
                                {
                                    if (bFastTraveltoStart)
                                        WarptoAnyVeh(VehTrackin_01, Game.Player.Character, 1, false);
                                    else if (!bSubtitles)
                                        QuickSub(sAltLang[108] + sAltLang[101] + "~b~" + sAltLang[248] + "~w~.");

                                    World.TransitionToWeather(Weather.Clear, 1.00f);
                                    Function.Call(Hash._0xC54A08C85AE4D410, 1.50f);

                                    iMissionSeq = 1;
                                }
                            }
                            else if (iMissionSeq == 1)
                            {
                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    VehTrackin_01.CurrentBlip.Remove();
                                    AddTarget(vTarget_01, true, true, 1.00f, false);

                                    if (!bSubtitles)
                                        QuickSub(sAltLang[108] + sAltLang[104] + "~b~" + sAltLang[249] + "~w~.");

                                    iMissionSeq = 2;
                                }
                                else if (Game.Player.Character.Position.DistanceTo(VehTrackin_01.Position) < 35.00f)
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[103] + "~b~" + sAltLang[248] + "~w~.");
                                }
                                else
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[108] + sAltLang[101] + "~b~" + sAltLang[248] + "~w~.");
                                }
                            }
                            else if (iMissionSeq == 2)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[108] + sAltLang[104] + "~b~" + sAltLang[249] + "~w~.");

                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (Game.Player.Character.Position.DistanceTo(vTarget_01) < 15.00f || VehTrackin_01.IsInWater)
                                {
                                    if (!bSubtitles)
                                        QuickSub(sAltLang[108] + sAltLang[101] + "~y~" + sAltLang[250] + "~w~.");

                                    ControlerUI(sAltLang[251], 1);
                                    RemoveTargets();
                                    AddTarget(vTarget_05, false, true, 1.00f, false);
                                    iMissionSeq = 3;
                                }
                            }
                            else if (iMissionSeq == 3)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[108] + sAltLang[101] + "~y~" + sAltLang[250] + "~w~.");

                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (Game.Player.Character.Position.DistanceTo(vTarget_05) < 85.00f)
                                {
                                    Water06_SubCam();
                                    RemoveTargets();

                                    if (!bSubtitles)
                                        QuickSub(sAltLang[253] + sAltLang[252] + ".");
                                    iMissionSeq = 4;
                                }
                            }
                            else if (iMissionSeq == 4)
                            {
                                if (PedList_02.Count > 0)
                                {
                                    if (Game.Player.Character.Position.DistanceTo(Npc_02.Position) < 25.00f && Game.Player.Character.Position.Z < Npc_02.Position.Z + 1.00f)
                                    {
                                        if (Npc_02.IsDead)
                                        {
                                            iMissionSeq = 45;
                                            SlowFastTravel(vTarget_04, 0.00f);
                                        }
                                        else if (Game.Player.IsTargetting(Npc_02))
                                        {
                                            if (iMissionVar_01 < Game.GameTime)
                                            {
                                                if (!bSubtitles)
                                                    QuickSub(sAltLang[108] + sAltLang[101] + "~y~" + sAltLang[256] + "~w~.");
                                                NPCSpawn(RandNPC(33), VectorList_01[3], fList_01[3], 65, 180, 2, 37, 0, null, 8, true, true, 0, 0);//offence
                                                AddTarget(vTarget_02, false, true, 1.00f, false);
                                                Npc_02.CurrentBlip.Remove();
                                                iMissionSeq = 5;
                                            }

                                        }
                                        else
                                            iMissionVar_01 = Game.GameTime + 4000;
                                        if (bSubtitles)
                                            StickySubTitle(sAltLang[254] + sAltLang[112] + "~b~" + sAltLang[252] + "~w~.");

                                        if (BeOff[0])
                                        {
                                            ControlerUI(sAltLang[255], 1);

                                            if (!bSubtitles)
                                                QuickSub(sAltLang[254] + sAltLang[112] + "~b~" + sAltLang[252] + "~w~.");
                                            BeOff[0] = false;
                                        }
                                    }
                                    else
                                    {
                                        if (bSubtitles)
                                            StickySubTitle(sAltLang[253] + sAltLang[252] + ".");
                                    }

                                    if (iTracking < Game.GameTime)
                                        TheUltimateTracker(false);
                                }
                            }
                            else if (iMissionSeq == 5)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[108] + sAltLang[101] + "~y~" + sAltLang[256] + "~w~.");

                                if (Game.Player.Character.Position.DistanceTo(vTarget_02) < 5.00f && Game.Player.Character.Position.Z > vTarget_02.Z)
                                {
                                    if (!bSubtitles)
                                        QuickSub(sAltLang[257] + "~g~" + sAltLang[258] + "~w~.");
                                    TheYellowCorona(vTarget_02, 1.00f);
                                    iMissionSeq = 6;
                                }
                                else if (PedList_02.Count > 0)
                                {
                                    if (iTracking < Game.GameTime)
                                        TheUltimateTracker(false);
                                }
                            }
                            else if (iMissionSeq == 6)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[257] + "~g~" + sAltLang[258] + "~w~.");
                                if (Game.Player.Character.Position.DistanceTo(vTarget_02) < 1.50f)
                                {
                                    if (iMissionVar_01 < Game.GameTime)
                                    {
                                        RemoveTargets();
                                        CleanPedBlips(2);
                                        ForceAnim(Game.Player.Character, "anim@gangops@submarine@controlroom@commandconsole@", "intro", vTarget_02, new Vector3(0.00f, 0.00f, 271.2907f));
                                        Script.Wait(2500);
                                        Game.Player.Character.Task.ClearAllImmediately();
                                        if (!bSubtitles)
                                            QuickSub(sAltLang[260] + "~r~" + sAltLang[91] + "~w~ " + sAltLang[259]);

                                        Vector3 Posy = new Vector3(513.6042f, 4836.958f, -62.6013f);
                                        Vector3 Rota = new Vector3(0.00f, 90.00f, 180.00f);

                                        BuildProp("hei_prop_hst_usb_drive", Posy, Rota, true, false);

                                        NPCSpawn("csb_bogdan", VectorList_01[4], fList_01[4], 65, 180, 2, 37, 0, null, 8, true, true, 1, 0);//offence
                                        iMissionSeq = 7;
                                    }
                                }
                                else
                                    iMissionVar_01 = Game.GameTime + 2000;

                                if (PedList_02.Count > 0)
                                {
                                    if (iTracking < Game.GameTime)
                                        TheUltimateTracker(false);
                                }
                            }
                            else if (iMissionSeq == 7)
                            {
                                if (Npc_01.IsDead)
                                {
                                    AddTarget(vTarget_03, false, true, 1.00f, false);
                                    TheYellowCorona(vTarget_03, 1.00f);
                                    if (!bSubtitles)
                                        QuickSub(sAltLang[178] + "~b~" + sAltLang[250] + "~w~.");
                                    iMissionSeq = 8;
                                }
                                else
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[260] + "~r~" + sAltLang[91] + "~w~ " + sAltLang[259]);
                                }
                                if (PedList_02.Count > 0)
                                {
                                    if (iTracking < Game.GameTime)
                                        TheUltimateTracker(false);
                                }
                            }
                            else if (iMissionSeq == 8)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[178] + "~b~" + sAltLang[250] + "~w~.");

                                if (Game.Player.Character.Position.DistanceTo(vTarget_03) < 1.50f)
                                {
                                    SlowFastTravel(vTarget_04, 308.3964f);
                                    iMissionSeq = 10;
                                }
                            }
                            else if (iMissionSeq == 10)
                            {
                                iCashReward = 500000;
                                Function.Call(Hash._0xC54A08C85AE4D410, 0.00f);
                                if (iProcessForPegs != iGotPegsus)
                                    Fruits(4);
                                iGotPegsus = iProcessForPegs;
                                iPegsboatsTest = iPegsboats;
                                NSCoinInvestments(false, 15, 21, "Merryweather Security");
                                GameOver(false, "", false, iCashReward);
                            }
                            else if (iMissionSeq == 45)
                            {
                                iMissionSeq = 99;
                                Function.Call(Hash._0xC54A08C85AE4D410, 0.00f);
                                GameOver(true, "", false, 0);
                            }
                        }                       //Sub fun...
                    }       //Watermess
                    else if (iJobType == 16)
                    {
                        if (iMissionSeq == 0)
                        {
                            iWait4Sec = Game.GameTime + RandInt(20000, 40000);
                            fMission_01 = RandFlow(500.00f, 1000.00f);
                            iCashBouns = 0;
                            iFindingStuff = 0;
                            vTarget_01 = Game.Player.Character.Position;
                            VTBTimerPool.Add(BtSlideBar);
                            if (iList_01[0] != 0)
                                Game.FadeScreenIn(1000);
                            if (!bSubtitles && iList_01[0] != 3)
                                QuickSub(sAltLang[261] + "~r~" + sAltLang[262] + "~w~ " + sAltLang[263] + "~b~" + sAltLang[128] + "~w~ " + sAltLang[264]);
                            iMissionSeq = 1;
                        }
                        else if (iMissionSeq == 1)
                        {
                            if (bSubtitles)
                                StickySubTitle(sAltLang[261] + "~r~" + sAltLang[262] + "~w~ " + sAltLang[263] + "~b~" + sAltLang[128] + "~w~ " + sAltLang[264]);
                            if (iList_01[0] < 3)
                            {
                                if (iWait4Sec < Game.GameTime && Game.Player.Character.Position.DistanceTo(vTarget_01) > fMission_01 && World.GetNextPositionOnStreet(Game.Player.Character.Position).DistanceTo(Game.Player.Character.Position) < 95.00f)
                                {
                                    iMissionSeq = 2;
                                    VTBTimerPool.Remove(BtSlideBar);
                                    int iGroup = 0;
                                    if (sCustomCarz.Count > 0)
                                        iGroup = FindRandom(59, 1, 10);
                                    else
                                        iGroup = FindRandom(60, 1, 9);
                                    string sMyCar = ImportsExpo_CarList(iGroup);
                                    iList_02.Add(iGroup);
                                    sList_01.Add(sMyCar);

                                    FindAndReplaceVeh(Game.Player.Character.Position, 0, 1, 1, 2, 5, true, true, false, 155.00f, 35.00f, sMyCar, false, 1, 0, true);

                                    iCrash4Cash = 10000;

                                    if (!bSubtitles)
                                        QuickSub(sAltLang[184] + "~b~" + sAltLang[128] + "~w~.");
                                }
                                else
                                {
                                    float fdist = World.GetDistance(Game.Player.Character.Position, vTarget_01) / fMission_01;
                                    if (fdist > 1.00f)
                                        fdist = 1.00f;
                                    BtSlideBar.Percentage = fdist;
                                    VTBTimerPool.Draw();
                                }
                            }
                            else
                                iMissionSeq = 10;
                        }
                        else if (iMissionSeq == 2)
                        {

                        }
                        else if (iMissionSeq == 3)
                        {
                            World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(VehTrackin_01.Position.X, VehTrackin_01.Position.Y, VehTrackin_01.Position.Z + 2.00f), Vector3.Zero, new Vector3(0.00f, 180.00f, VehTrackin_01.Heading), new Vector3(0.50f, 0.50f, 0.50f), color: Color.CadetBlue);

                            if (VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                            {
                                VehTrackin_01.CurrentBlip.Remove();
                                ImportsExpo_Targit();
                                BeOnOff[0] = false;
                                fVehicleDamage = VehTrackin_01.BodyHealth + VehTrackin_01.EngineHealth + VehTrackin_01.PetrolTankHealth;
                                iList_01[2] = (int)fVehicleDamage;
                                VTBTimerPool.Add(ttTextBar_01);
                                if (!bSubtitles)
                                    QuickSub(sAltLang[102] + "~b~" + sAltLang[128] + "~w~ " + sAltLang[101] + "~y~" + sAltLang[224] + "~w~.");
                                iTracking = Game.GameTime + RandInt(7000, 14000);
                                iMissionSeq = 4;
                            }
                            else
                            {
                                if (Game.Player.Character.IsInVehicle())
                                {
                                    Vehicle PlayVeh = Game.Player.Character.CurrentVehicle;
                                    if (PlayVeh.Model == VehicleHash.Cargobob || PlayVeh.Model == VehicleHash.Cargobob2 || PlayVeh.Model == VehicleHash.Cargobob3 || PlayVeh.Model == VehicleHash.Cargobob4)
                                    {
                                        if (Function.Call<bool>(Hash.IS_VEHICLE_ATTACHED_TO_CARGOBOB, PlayVeh, VehTrackin_01))
                                        {
                                            VehTrackin_01.CurrentBlip.Remove();
                                            ImportsExpo_Targit();
                                            BeOnOff[0] = false;
                                            fVehicleDamage = VehTrackin_01.BodyHealth + VehTrackin_01.EngineHealth + VehTrackin_01.PetrolTankHealth;
                                            iList_01[2] = (int)fVehicleDamage;
                                            VTBTimerPool.Add(ttTextBar_01);
                                            if (!bSubtitles)
                                                QuickSub(sAltLang[364] + "~b~" + sAltLang[128] + "~w~ " + sAltLang[365] + "~y~" + sAltLang[127] + "~w~.");
                                            iTracking = Game.GameTime + RandInt(7000, 14000);
                                            iMissionSeq = 5;
                                        }
                                    }
                                }
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[184] + "~b~" + sAltLang[128] + "~w~.");
                            }
                        }
                        else if (iMissionSeq == 4)
                        {
                            if (VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else if (VehTrackin_01.Position.DistanceTo(VectorList_01[0]) < 90.00f)
                            {
                                ImportsExpo_MoveYourBoat();
                                iMissionSeq = 6;
                            }
                            else if (!BeOnOff[0])
                            {
                                if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    RemoveTargets();
                                    VehBlip(VehTrackin_01, BlipSprite.PersonalVehicleCar, true, false);
                                    BeOnOff[0] = true;
                                }
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[102] + "~b~" + sAltLang[128] + "~w~ " + sAltLang[101] + "~y~" + sAltLang[224] + "~w~.");

                                if (iList_01[2] > 0 && iCrash4Cash > 0)
                                    iCashBouns = VehDamage(VehTrackin_01, iList_01[2], iCrash4Cash, true, iCashBouns, false);
                            }
                            else
                            {
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    VehTrackin_01.CurrentBlip.Remove();
                                    AddTarget(VectorList_01[0], true, true, 1.00f, false);
                                    BeOnOff[0] = false;
                                }
                                else if (Game.Player.Character.IsInVehicle())
                                {
                                    Vehicle PlayVeh = Game.Player.Character.CurrentVehicle;
                                    if (PlayVeh.Model == VehicleHash.Cargobob || PlayVeh.Model == VehicleHash.Cargobob2 || PlayVeh.Model == VehicleHash.Cargobob3 || PlayVeh.Model == VehicleHash.Cargobob4)
                                    {
                                        if (Function.Call<bool>(Hash.IS_VEHICLE_ATTACHED_TO_CARGOBOB, PlayVeh, VehTrackin_01))
                                        {
                                            RemoveTargets();
                                            VehTrackin_01.CurrentBlip.Remove();
                                            ImportsExpo_Targit();
                                            BeOnOff[0] = false;
                                            if (!bSubtitles)
                                                QuickSub(sAltLang[364] + "~b~" + sAltLang[128] + "~w~ " + sAltLang[365] + "~y~" + sAltLang[127] + "~w~.");

                                            iMissionSeq = 5;
                                        }
                                    }
                                }
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[103] + "~b~" + sAltLang[128] + "~w~.");
                            }

                            if (iTracking < Game.GameTime)
                                ImportsExpo_Gangz();
                        }
                        else if (iMissionSeq == 5)
                        {
                            if (VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else if (VehTrackin_01.Position.DistanceTo(VectorList_01[0]) < 90.00f)
                            {
                                ImportsExpo_MoveYourBoat();
                                iMissionSeq = 6;
                            }
                            else if (!BeOnOff[0])
                            {
                                if (Game.Player.Character.IsInVehicle())
                                {
                                    Vehicle PlayVeh = Game.Player.Character.CurrentVehicle;
                                    if (PlayVeh.Model == VehicleHash.Cargobob || PlayVeh.Model == VehicleHash.Cargobob2 || PlayVeh.Model == VehicleHash.Cargobob3 || PlayVeh.Model == VehicleHash.Cargobob4)
                                    {
                                        if (!Function.Call<bool>(Hash.IS_VEHICLE_ATTACHED_TO_CARGOBOB, PlayVeh, VehTrackin_01))
                                        {
                                            RemoveTargets();
                                            VehBlip(VehTrackin_01, BlipSprite.PersonalVehicleCar, true, false);
                                            BeOnOff[0] = true;
                                        }
                                    }
                                }
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[102] + "~b~" + sAltLang[128] + "~w~ " + sAltLang[101] + "~y~" + sAltLang[224] + "~w~.");

                                if (iList_01[2] > 0 && iCrash4Cash > 0)
                                    iCashBouns = VehDamage(VehTrackin_01, iList_01[2], iCrash4Cash, true, iCashBouns, false);
                            }
                            else
                            {
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    VehTrackin_01.CurrentBlip.Remove();
                                    ImportsExpo_Targit();
                                    BeOnOff[0] = false;
                                    iMissionSeq = 4;
                                }
                                else if (Game.Player.Character.IsInVehicle())
                                {
                                    Vehicle PlayVeh = Game.Player.Character.CurrentVehicle;
                                    if (PlayVeh.Model == VehicleHash.Cargobob || PlayVeh.Model == VehicleHash.Cargobob2 || PlayVeh.Model == VehicleHash.Cargobob3 || PlayVeh.Model == VehicleHash.Cargobob4)
                                    {
                                        if (Function.Call<bool>(Hash.IS_VEHICLE_ATTACHED_TO_CARGOBOB, PlayVeh, VehTrackin_01))
                                        {
                                            VehTrackin_01.CurrentBlip.Remove();
                                            ImportsExpo_Targit();
                                            BeOnOff[0] = false;
                                        }
                                    }
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[103] + "~b~" + sAltLang[128] + "~w~.");
                                }
                            }
                            if (iTracking < Game.GameTime)
                                ImportsExpo_Gangz();
                        }
                        else if (iMissionSeq == 6)
                        {
                            if (VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else if (VehTrackin_01.Position.DistanceTo(VectorList_01[0]) < 10.00f && VehTrackin_01.IsStopped)
                            {
                                Game.FadeScreenOut(1000);
                                RemoveTargets();
                                VTBTimerPool.Remove(ttTextBar_01);
                                iCashReward += iCrash4Cash - iCashBouns;
                                iList_01[0] += 1;
                                VehTrackin_01.FreezePosition = true;
                                Water01_BargeCars(VehTrackin_01, PropList_01[0], iList_01[0]);
                                if (BeOnOff[0])
                                {
                                    VehTrackin_01.CurrentBlip.Remove();
                                    BeOnOff[0] = false;
                                }
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    Game.Player.Character.Task.LeaveVehicle();
                                    Script.Wait(1000);
                                    SlowFastTravel(VectorList_02[0], fList_01[0]);
                                    Vehicle Vtick = World.CreateVehicle(VehicleHash.TowTruck2, VectorList_02[1], fList_01[1]);
                                    Vtick.MarkAsNoLongerNeeded();
                                    iMissionSeq = 0;
                                }
                                else
                                {
                                    Script.Wait(1000);
                                    iMissionSeq = 0;
                                }
                            }
                            else if (!BeOnOff[0])
                            {
                                if (Game.Player.Character.IsInVehicle())
                                {
                                    Vehicle PlayVeh = Game.Player.Character.CurrentVehicle;
                                    if (PlayVeh.Model == VehicleHash.Cargobob || PlayVeh.Model == VehicleHash.Cargobob2 || PlayVeh.Model == VehicleHash.Cargobob3 || PlayVeh.Model == VehicleHash.Cargobob4)
                                    {
                                        if (!Function.Call<bool>(Hash.IS_VEHICLE_ATTACHED_TO_CARGOBOB, PlayVeh, VehTrackin_01))
                                        {
                                            RemoveTargets();
                                            VehBlip(VehTrackin_01, BlipSprite.PersonalVehicleCar, true, false);
                                            BeOnOff[0] = true;
                                        }
                                    }
                                    else if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    {
                                        RemoveTargets();
                                        VehBlip(VehTrackin_01, BlipSprite.PersonalVehicleCar, true, false);
                                        BeOnOff[0] = true;
                                    }
                                }
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[102] + "~b~" + sAltLang[128] + "~w~ " + sAltLang[101] + "~y~" + sAltLang[224] + "~w~.");

                                if (iList_01[2] > 0 && iCrash4Cash > 0)
                                    iCashBouns = VehDamage(VehTrackin_01, iList_01[2], iCrash4Cash, true, iCashBouns, false);
                            }
                            else
                            {
                                if (Game.Player.Character.IsInVehicle())
                                {
                                    Vehicle PlayVeh = Game.Player.Character.CurrentVehicle;
                                    if (PlayVeh.Model == VehicleHash.Cargobob || PlayVeh.Model == VehicleHash.Cargobob2 || PlayVeh.Model == VehicleHash.Cargobob3 || PlayVeh.Model == VehicleHash.Cargobob4)
                                    {
                                        if (Function.Call<bool>(Hash.IS_VEHICLE_ATTACHED_TO_CARGOBOB, PlayVeh, VehTrackin_01))
                                        {
                                            VehTrackin_01.CurrentBlip.Remove();
                                            ImportsExpo_Targit();
                                            BeOnOff[0] = false;
                                        }
                                    }
                                    else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    {
                                        VehTrackin_01.CurrentBlip.Remove();
                                        ImportsExpo_Targit();
                                        BeOnOff[0] = false;
                                    }
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[103] + "~b~" + sAltLang[128] + "~w~.");
                                }
                            }

                            if (iTracking < Game.GameTime)
                                ImportsExpo_Gangz();
                        }
                        else if (iMissionSeq == 10)
                        {
                            for (int i = 0; i < sList_01.Count; i++)
                            {
                                if (!sImpExpVeh.Contains(sList_01[i]))
                                {
                                    iImpExpList.Add(iList_02[i]);
                                    sImpExpVeh.Add(sList_01[i]);
                                }
                            }
                            NSCoinInvestments(false, 2, 5, "Augury Insurance Shares");
                            if (sImpExpVeh.Count == 3)
                                Fruits(2);
                            GameOver(false, "", false, iCashReward);
                        }
                        else if (iMissionSeq == 45)
                        {
                            GameOver(true, "", false, 0);
                        }
                    }       //ImpExp
                    else if (iJobType == 17)
                    {
                        if (iMissionSeq == 0)
                        {
                            Vector3 VT = VectorList_01[0];
                            VT.Z -= 1.00f;
                            AddTarget(VT, true, true, 1.00f, false);
                            TheYellowCorona(VT, 1.00f);
                            if (bFastTraveltoStart)
                                SlowFastTravel(VectorList_01[0], 0.00f);
                            else if (!bSubtitles)
                                QuickSub(sAltLang[108] + sAltLang[101] + "~y~" + sAltLang[280] + "~w~.");
                            iMissionSeq = 1;
                        }
                        else if (iMissionSeq == 1)
                        {
                            if (Game.Player.Character.Position.DistanceTo(VectorList_01[0]) < 1.00f && !Game.Player.Character.IsInVehicle())
                            {
                                fMission_01 = Game.Player.Character.Heading + 180.00f;
                                RemoveTargets();
                                DebtCollect_LoadHood();
                                Vector3 Vme = VectorList_01[1];
                                Vme.Z -= 0.71f;
                                Pick_01 = World.CreatePickup(PickupType.MoneySecurityCase, Vme, Vector3.Zero, Function.Call<int>(Hash.GET_HASH_KEY, "hei_prop_hei_security_case"), 1);
                                BeOnOff[0] = true;
                                AddTarget(Vme, false, true, 1.00f, false);
                                if (!bSubtitles)
                                    QuickSub(sAltLang[243] + "~y~" + sAltLang[218] + "~w~.");

                                SlowFastTravel(VectorList_01[VectorList_01.Count - 1], fGetDir);
                                DoorsNear(VectorList_01[VectorList_01.Count - 1], 30.00f);
                                iMissionSeq = 2;
                            }
                            else
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[108] + sAltLang[101] + "~y~" + sAltLang[280] + "~w~.");
                            }
                        }
                        else if (iMissionSeq == 2)
                        {
                            if (BeOnOff[0])
                            {
                                if (Pick_01.ObjectExists())
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[243] + "~y~" + sAltLang[218] + "~w~.");
                                    if (Game.Player.Character.IsFalling)
                                    {
                                        if (Game.Player.Character.Position.Z + 4 < Pick_01.Position.Z)
                                        {
                                            Vector3 FallThrough = new Vector3(VectorList_01[VectorList_01.Count - 1].X, VectorList_01[VectorList_01.Count - 1].Y, VectorList_01[VectorList_01.Count - 1].Z + 0.5f);
                                            Game.Player.Character.Position = FallThrough;
                                        }
                                    }
                                }
                                else
                                {
                                    BeOnOff[0] = false;
                                    Vector3 VT = VectorList_01[VectorList_01.Count - 1];
                                    VT.Z -= 1.00f;
                                    RemoveTargets();
                                    AddTarget(VT, false, true, 1.00f, false);
                                    TheYellowCorona(VT, 1.00f);
                                    if (!bSubtitles)
                                        QuickSub(sAltLang[102] + "~b~" + sAltLang[218] + "~w~ " + sAltLang[101] + "~y~" + sAltLang[124] + "~w~.");
                                    iMissionSeq = 3;
                                }
                            }
                            if (PedList_02.Count > 0)
                            {
                                if (iTracking < Game.GameTime)
                                    TheUltimateTracker(false);
                            }
                        }
                        else if (iMissionSeq == 3)
                        {
                            if (Game.Player.Character.Position.DistanceTo(VectorList_01[VectorList_01.Count - 1]) < 1.00f)
                            {
                                RemoveTargets();
                                Vector3 VUp = VectorList_01[0];
                                fMission_01 = Game.Player.Character.Heading;
                                SlowFastTravel(VUp, fMission_01);
                                vTarget_01.Z -= 1.05f;
                                vFuMiss = vTarget_03;
                                AddTarget(vTarget_01, true, true, 1.00f, false);
                                TheYellowCorona(vTarget_01, 1.00f);
                                CleanPedBlips(2);
                                iMissionSeq = 4;
                            }
                            else
                            {
                                if (PedList_02.Count > 0)
                                {
                                    if (iTracking < Game.GameTime)
                                        TheUltimateTracker(false);
                                }

                                if (bSubtitles)
                                    StickySubTitle(sAltLang[102] + "~b~" + sAltLang[218] + "~w~ " + sAltLang[101] + "~y~" + sAltLang[124] + "~w~.");
                            }
                        }
                        else if (iMissionSeq == 4)
                        {
                            if (bSubtitles)
                                StickySubTitle(sAltLang[102] + "~b~" + sAltLang[218] + "~w~ " + sAltLang[101] + "~y~" + sAltLang[124] + "~w~.");

                            if (World.GetDistance(vTarget_01, Game.Player.Character.Position) < 2.00f && Game.Player.Character.IsOnFoot && Game.Player.Character.Position.Z > vTarget_01.Z - 0.50f)
                            {
                                iMissionSeq = 5;
                                iWait4Sec = Game.GameTime + 2000;
                                Game.Player.Character.Task.PlayAnimation("anim@mp_fireworks", "place_firework_3_box", 8.00f, 3000, true, 1.00f);
                                CleanUpCheckPoints();
                                RemoveTargets();
                            }
                            else if (World.GetDistance(vTarget_01, Game.Player.Character.Position) < 55.00f)
                            {
                                if (iWait4Sec < Game.GameTime)
                                {
                                    iWait4Sec = Game.GameTime + 1000;
                                    DoorsNear(Game.Player.Character.Position, 10.00f);
                                }
                            }
                        }
                        else if (iMissionSeq == 5)
                        {
                            if (iWait4Sec < Game.GameTime)
                            {
                                BuildProp("hei_prop_hei_security_case", vTarget_01, Vector3.Zero, true, false);
                                iMissionSeq = 10;
                            }
                        }
                        else if (iMissionSeq == 10)
                        {
                            if (BeOnOff[1])
                            {
                                BeOnOff[1] = false;
                                LoadInMissionIPLs(10, false);
                            }
                            NSCoinInvestments(true, 12, 16, "Maze Bank Shares");
                            GameOver(false, "", false, iCashReward);
                        }
                        else if (iMissionSeq == 45)
                        {
                            if (BeOnOff[0])
                                Pick_01.Delete();

                            NSCoinInvestments(false, 12, 16, "Maze Bank Shares");
                            if (BeOnOff[1])
                            {
                                BeOnOff[1] = false;
                                LoadInMissionIPLs(10, false);
                            }

                            GameOver(true, "", false, 0);
                        }
                    }       //DebtCollect
                    else if (iJobType == 18)
                    {
                        if (iMissionSeq == 10)
                        {
                            BikerRaids_UnloadInt(iMissionVar_02);
                            if (!BeOnOff[4])
                                NSCoinInvestments(false, 7, 9, "Windsor Real Estate Shares");
                            GameOver(false, "", false, iCashReward);
                        }
                        else if (iMissionSeq == 44)
                        {
                            if (iWait4Sec < Game.GameTime)
                            {
                                SlowFastTravel(VectorList_01[0], 0.00f);
                                iMissionSeq = 45;
                            }
                        }
                        else if (iMissionSeq == 45)
                        {
                            BikerRaids_UnloadInt(iMissionVar_02);
                            if (BeOnOff[0])
                                Pick_01.Delete();
                            GameOver(true, "", false, 0);
                        }
                        else if (iMissionVar_01 == 1)
                        {
                            if (iMissionSeq == 0)
                            {
                                iMissionVar_03 = 4;
                                Vector3 Vehs = VectorList_02[0];
                                Vehs.Z-= 0.70f;
                                VehicleSpawn("PBUS2", Vehs, fGetDir, false, false, false, false, 3, 2, 0, 1, false);
                                if (bFastTraveltoStart)
                                    SlowFastTravel(VectorList_01[0], 0.00f);
                                else if (!bSubtitles)
                                    QuickSub(sAltLang[108] + sAltLang[101] + sAltLang[270] + "~y~" + sAltLang[17]);

                                iMissionSeq = 1;
                            }
                            else if (iMissionSeq == 1)
                            {
                                if (VehicleList_01.Count > 0)
                                {
                                    if (VehTrackin_01.IsDead)
                                        iMissionSeq = 45;
                                    else if (Game.Player.Character.Position.DistanceTo(VectorList_01[0]) < 1.50f && !Game.Player.Character.IsInVehicle())
                                    {
                                        fList_01.Add(Game.Player.Character.Heading + 180.00f);
                                        RemoveTargets();
                                        Vector3 VT = VectorList_03[VectorList_03.Count - 1];
                                        VT.Z -= 1.00f;
                                        TheYellowCorona(VT, 1.00f);
                                        SlowFastTravel(VectorList_03[VectorList_03.Count - 1], fMission_01);
                                        BikerRaids_LoadHood();
                                        iMissionSeq = 2;
                                        if (!bSubtitles)
                                            QuickSub(sAltLang[271] + "~r~" + sAltLang[217] + "~w~ " + sAltLang[272] + "~y~" + sAltLang[273] + "~w~.");
                                    }
                                    else
                                    {
                                        if (bSubtitles)
                                            StickySubTitle(sAltLang[108] + sAltLang[101] + sAltLang[270] + "~y~" + sAltLang[17]);
                                    }
                                }
                            }
                            else if (iMissionSeq == 2)
                            {
                                if (PedList_02.Count > 0)
                                {
                                    if (iWait4Sec < Game.GameTime)
                                        BikerRaids_KeepWalkin();

                                    ControlerUI(sAltLang[362], 1);
                                }
                                else
                                {
                                    if (!bSubtitles)
                                        QuickSub(sAltLang[178] + "~y~" + sAltLang[17] + "~w~.");

                                    VehTrackin_01.LockStatus = VehicleLockStatus.Unlocked;
                                    iMissionSeq = 3;
                                }

                                if (bSubtitles)
                                    StickySubTitle(sAltLang[271] + "~r~" + sAltLang[217] + "~w~ " + sAltLang[272] + "~y~" + sAltLang[273] + "~w~.");
                            }
                            else if (iMissionSeq == 3)
                            {
                                if (Game.Player.Character.Position.DistanceTo(VectorList_03[VectorList_03.Count - 1]) < 1.50f)
                                {
                                    SlowFastTravel(VectorList_01[0], fList_01[0]);
                                    VehBlip(VehTrackin_01, BlipSprite.Bus, true, false);
                                    VehTrackin_01.FreezePosition = false;
                                    float fDist = VehTrackin_01.Position.DistanceTo(vTarget_01);
                                    int iFind = (int)fDist;
                                    iCashReward += iFind;
                                    BeOnOff[1] = true;
                                    BeOnOff[2] = true;
                                    if (!bSubtitles)
                                        QuickSub(sAltLang[103] + "~b~" + sAltLang[131] + "~w~.");

                                    iMissionSeq = 4;
                                }
                                else
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[178] + "~y~" + sAltLang[17] + "~w~.");
                                }
                            }
                            else if (iMissionSeq == 4)
                            {
                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (BeOnOff[1])
                                {
                                    if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    {
                                        BeOnOff[1] = false;
                                        VehTrackin_01.CurrentBlip.Remove();
                                        Vector3 Vme = vTarget_01;
                                        Vme.Z -= 1.00f;
                                        AddTarget(vTarget_01, true, true, 1.00f, false);
                                        TheYellowCorona(Vme, 5.00f);
                                        if (!bSubtitles)
                                            QuickSub(sAltLang[102] + "~r~" + sAltLang[274] + "~w~ " + sAltLang[101] + "~y~" + sAltLang[275] + "~w~.");
                                    }
                                    else
                                    {
                                        if (bSubtitles)
                                            StickySubTitle(sAltLang[103] + "~b~" + sAltLang[131] + "~w~.");
                                    }
                                }
                                else
                                {
                                    if (BeOnOff[2] && World.GetDistance(vTarget_01, Game.Player.Character.Position) < 60.00f)
                                    {
                                        MoveThatCar(vTarget_01);
                                        BeOnOff[2] = false;
                                    }
                                    else if (VehTrackin_01.Position.DistanceTo(vTarget_01) < 5.00f)
                                    {
                                        iWait4Sec = Game.GameTime + 1000;
                                        iMissionSeq = 5;
                                    }
                                    else if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    {
                                        BeOnOff[1] = true;
                                        RemoveTargets();
                                        VehBlip(VehTrackin_01, BlipSprite.Bus, true, false);
                                    }
                                    else
                                    {
                                        if (bSubtitles)
                                            StickySubTitle(sAltLang[102] + "~r~" + sAltLang[274] + "~w~ " + sAltLang[101] + "~y~" + sAltLang[275] + "~w~.");
                                    }

                                    if (iTracking < Game.GameTime)
                                        BikerRaids_LostMCAtt(true);
                                }
                            }
                            else if (iMissionSeq == 5)
                            {
                                if (iWait4Sec < Game.GameTime)
                                {
                                    VehTrackin_01.FreezePosition = true;
                                    Game.Player.Character.Task.LeaveVehicle();
                                    iCashReward += 5000;
                                    VehTrackin_01.LockStatus = VehicleLockStatus.Locked;
                                    if (iCashReward < 25000)
                                        BeOnOff[4] = true;
                                    iMissionSeq = 10;
                                }
                            }
                        }       //kidnap workers
                        else if (iMissionVar_01 == 2)
                        {
                            if (iMissionSeq == 0)
                            {
                                if (bFastTraveltoStart)
                                    SlowFastTravel(VectorList_01[0], 0.00f);
                                else if (!bSubtitles)
                                    QuickSub(sAltLang[108] + sAltLang[101] + sAltLang[270] + "~y~" + sAltLang[17]);
                                iMissionSeq = 1;
                            }
                            else if (iMissionSeq == 1)
                            {
                                if (Game.Player.Character.Position.DistanceTo(VectorList_01[0]) < 1.50f && !Game.Player.Character.IsInVehicle())
                                {
                                    fList_01.Add(Game.Player.Character.Heading + 180.00f);
                                    RemoveTargets();
                                    Vector3 VT = VectorList_03[VectorList_03.Count - 1];
                                    VT.Z -= 1.00f;
                                    TheYellowCorona(VT, 1.00f);
                                    SlowFastTravel(VectorList_03[VectorList_03.Count - 1], fMission_01);
                                    BikerRaids_LoadHood();
                                    iMissionSeq = 2;

                                    if (!bSubtitles)
                                        QuickSub(sAltLang[182] + "~r~" + sAltLang[281]);
                                }
                                else
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[108] + sAltLang[101] + sAltLang[270] + "~y~" + sAltLang[17]);
                                }
                            }
                            else if (iMissionSeq == 2)
                            {
                                if (PedList_02.Count > 0)
                                {
                                    if (iTracking < Game.GameTime)
                                        TheUltimateTracker(false);
                                }
                                else
                                {
                                    if (!bSubtitles)
                                        QuickSub(sAltLang[178] + "~y~" + sAltLang[17] + "~w~.");

                                    iMissionSeq = 3;
                                }

                                if (bSubtitles)
                                    StickySubTitle(sAltLang[182] + "~r~" + sAltLang[281]);
                            }
                            else if (iMissionSeq == 3)
                            {
                                if (Game.Player.Character.Position.DistanceTo(VectorList_03[VectorList_03.Count - 1]) < 1.50f)
                                {
                                    SlowFastTravel(VectorList_01[0], fList_01[0]);
                                    iTime_01[1] = Game.GameTime + 90000;

                                    if (!bSubtitles)
                                        QuickSub(sAltLang[182] + "~r~" + sAltLang[281]);
                                    iMissionSeq = 4;
                                }
                                else
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[178] + "~y~" + sAltLang[17] + "~w~.");
                                }
                            }
                            else if (iMissionSeq == 4)
                            {
                                if (iTime_01[1] > Game.GameTime)
                                {
                                    if (iTracking < Game.GameTime)
                                        BikerRaids_LostMCAtt(true);

                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[182] + "~r~" + sAltLang[281]);
                                }
                                else
                                {
                                    iMissionSeq = 10;
                                    if (iCashReward < 25000)
                                        BeOnOff[4] = true;
                                }
                            }
                        }        //Raid
                        else if (iMissionVar_01 == 3)
                        {
                            if (iMissionSeq == 0)
                            {
                                Vector3 Vehs = VectorList_02[0];
                                Vehs.Z -= 0.70f;
                                VehicleSpawn("SLAMVAN2", Vehs, fGetDir, false, false, false, false, 3, 2, 0, 1, true);
                                if (bFastTraveltoStart)
                                    SlowFastTravel(VectorList_01[0], 0.00f);
                                else if (!bSubtitles)
                                    QuickSub(sAltLang[108] + sAltLang[101] + sAltLang[270] + "~y~" + sAltLang[17]);
                                iMissionSeq = 1;
                            }
                            else if (iMissionSeq == 1)
                            {
                                if (VehicleList_01.Count > 0)
                                {
                                    if (VehTrackin_01.IsDead)
                                        iMissionSeq = 45;
                                    else if (Game.Player.Character.Position.DistanceTo(VectorList_01[0]) < 1.50f && !Game.Player.Character.IsInVehicle())
                                    {
                                        fList_01.Add(Game.Player.Character.Heading + 180.00f);
                                        RemoveTargets();
                                        Vector3 VT = VectorList_03[VectorList_03.Count - 1];
                                        VT.Z -= 1.00f;
                                        BeOnOff[3] = false;
                                        SlowFastTravel(VT, fMission_01);
                                        BikerRaids_LoadHood();
                                        iMissionSeq = 2;

                                        if (!bSubtitles)
                                            QuickSub(sAltLang[253] + "~r~" + sAltLang[276] + "~w~ " + sAltLang[101] + "~b~" + sAltLang[277]);
                                    }
                                    else
                                    {
                                        if (bSubtitles)
                                            StickySubTitle(sAltLang[108] + sAltLang[101] + sAltLang[270] + "~y~" + sAltLang[17]);
                                    }
                                }
                            }
                            else if (iMissionSeq == 2)
                            {
                                if (PedList_03.Count > 0)
                                {
                                    if (PedList_03[0].IsDead)
                                    {
                                        PedList_03[0].CurrentBlip.Remove();
                                        Pick_01 = World.CreatePickup(PickupType.MoneySecurityCase, PedList_03[0].Position, Vector3.Zero, Function.Call<int>(Hash.GET_HASH_KEY, "p_car_keys_01"), 1);
                                        AddTarget(PedList_03[0].Position, false, true, 1.00f, false);
                                        BeOnOff[0] = true;
                                        iMissionSeq = 3;

                                        if (!bSubtitles)
                                            QuickSub(sAltLang[243] + "~r~" + sAltLang[276] + "~w~.");
                                    }

                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[253] + "~r~" + sAltLang[276] + "~w~ " + sAltLang[101] + "~b~" + sAltLang[277]);
                                }
                                if (PedList_02.Count > 0)
                                {
                                    if (!BeOnOff[3])
                                    {
                                        int iCount = PedList_02.Count;
                                        while (iCount > 0)
                                        {
                                            iCount = iCount - 1;
                                            PedList_02[iCount].Task.Cower(-1);
                                        }
                                        BeOnOff[3] = true;
                                    }
                                    else if (iTracking < Game.GameTime)
                                        TheUltimateTracker(false);
                                }
                            }
                            else if (iMissionSeq == 3)
                            {
                                if (BeOnOff[0])
                                {
                                    if (Pick_01.ObjectExists())
                                    {
                                        if (bSubtitles)
                                            StickySubTitle(sAltLang[243] + "~r~" + sAltLang[276] + "~w~.");
                                    }
                                    else
                                    {
                                        BeOnOff[0] = false;
                                        RemoveTargets();
                                        VehTrackin_01.LockStatus = VehicleLockStatus.Unlocked;
                                        VehTrackin_01.IsBulletProof = true;
                                        if (!bSubtitles)
                                            QuickSub(sAltLang[108] + sAltLang[101] + "~y~" + sAltLang[277]);
                                        Vector3 VT = VectorList_03[VectorList_03.Count - 1];
                                        VT.Z -= 1.00f;
                                        TheYellowCorona(VT, 1.00f);
                                        iMissionSeq = 4;
                                    }
                                }
                            }
                            else if (iMissionSeq == 4)
                            {
                                if (Game.Player.Character.Position.DistanceTo(VectorList_03[VectorList_03.Count - 1]) < 1.50f)
                                {
                                    VehBlip(VehTrackin_01, BlipSprite.GetawayCar, true, false);
                                    VehTrackin_01.FreezePosition = false;
                                    BeOnOff[1] = true;
                                    BeOnOff[2] = true;
                                    BeOnOff[3] = false;
                                    float fDist = VehTrackin_01.Position.DistanceTo(vTarget_01);
                                    int iFind = (int)fDist;
                                    iCashReward += iFind;
                                    SlowFastTravel(VectorList_01[0], fList_01[0]);
                                    iMissionSeq = 5;
                                }
                                else
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[108] + sAltLang[101] + "~y~" + sAltLang[277]);
                                }
                            }
                            else if (iMissionSeq == 5)
                            {
                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (BeOnOff[1])
                                {
                                    if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    {
                                        BeOnOff[1] = false;
                                        if (!BeOnOff[3])
                                            iWait4Sec = Game.GameTime + 7000;
                                        VehTrackin_01.CurrentBlip.Remove();
                                        vTarget_01.Z -= 1.00f;
                                        AddTarget(vTarget_01, true, true, 1.00f, false);
                                        TheYellowCorona(vTarget_01, 5.00f);
                                        BeOnOff[3] = true;
                                        if (!bSubtitles)
                                            QuickSub(sAltLang[102] + "~b~" + sAltLang[277] + "~w~ " + sAltLang[101] + "~y~" + sAltLang[275] + "~w~.");
                                    }
                                    else
                                    {
                                        if (bSubtitles)
                                            StickySubTitle(sAltLang[108] + sAltLang[101] + "~y~" + sAltLang[277]);
                                    }
                                }
                                else
                                {
                                    if (BeOnOff[2] && World.GetDistance(vTarget_01, Game.Player.Character.Position) < 60.00f)
                                    {
                                        MoveThatCar(vTarget_01);
                                        BeOnOff[2] = false;
                                    }
                                    else if (VehTrackin_01.Position.DistanceTo(vTarget_01) < 5.00f)
                                    {
                                        iWait4Sec = Game.GameTime + 1000;
                                        iMissionSeq = 6;
                                    }
                                    else if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    {
                                        BeOnOff[1] = true;
                                        RemoveTargets();
                                        VehBlip(VehTrackin_01, BlipSprite.GetawayCar, true, false);
                                    }
                                    else
                                    {
                                        if (bSubtitles)
                                            StickySubTitle(sAltLang[102] + "~b~" + sAltLang[277] + "~w~ " + sAltLang[101] + "~y~" + sAltLang[275] + "~w~.");
                                    }

                                    if (iTracking < Game.GameTime)
                                        BikerRaids_LostMCAtt(true);
                                }
                            }
                            else if (iMissionSeq == 6)
                            {
                                if (iWait4Sec < Game.GameTime)
                                {
                                    VehTrackin_01.FreezePosition = true;
                                    Game.Player.Character.Task.LeaveVehicle();
                                    VehTrackin_01.LockStatus = VehicleLockStatus.Locked;
                                    iCashReward += 5000;
                                    if (iCashReward < 25000)
                                        BeOnOff[4] = true;
                                    iMissionSeq = 10;
                                }
                            }
                        }      //steal goods--

                    }       //BikerRaids
                    else if (iJobType == 19)
                    {
                        if (iMissionSeq == 0)
                        {
                            if (bFastTraveltoStart)
                                SlowFastTravel(vTarget_01, 0.00f);
                            else if (!bSubtitles)
                                QuickSub(sAltLang[108] + sAltLang[101] + "~y~" + sMissionVar_01 + "~w~.");
                            iMissionSeq = 1;
                        }
                        else if (iMissionSeq == 1)
                        {
                            if (Game.Player.Character.Position.DistanceTo(vTarget_01) < 1.50f && !Game.Player.Character.IsInVehicle())
                            {
                                Game.FadeScreenOut(100);
                                if (iMissionVar_01 == 6)
                                {
                                    vTarget_06 = new Vector3(998.753f, -3110.82f, -39.534f);
                                    fCoronaHight = -9.22f;
                                    VehicleSpawn("Forklift", vTarget_06, fCoronaHight, true, false, false, false, 0, 0, 20, 1, false);

                                    VehicleSpawn("SANDKING2", VectorList_04[iMissionVar_03], fList_02[iMissionVar_03], false, false, false, false, 26, 0, 0, 2, true);

                                    iCashReward += 1000;
                                }
                                else if (iMissionVar_01 == 7)
                                {
                                    vTarget_06 = new Vector3(1051.23f, -3098.5f, -38.99994f);//new Vector3(1070.3669f, -3106.485f, -39.5371f);
                                    fCoronaHight = -0.39f;
                                    VehicleSpawn("Forklift", vTarget_06, fCoronaHight, true, false, false, false, 0, 0, 20, 1, false);

                                    VehicleSpawn("SANDKING2", VectorList_04[iMissionVar_03], fList_02[iMissionVar_03], false, false, false, false, 26, 0, 0, 2, true);

                                    iCashReward += 750;
                                }
                                else if (iMissionVar_01 == 8)
                                {
                                    vTarget_06 = new Vector3(1090.853f, -3099.615f, -38.99996f);//new Vector3(1091.359f, -3102.17f, -39.534f);
                                    fCoronaHight = 88.638f;
                                    VehicleSpawn("Forklift", vTarget_06, fCoronaHight, true, false, false, false, 0, 0, 20, 1, false);

                                    VehicleSpawn("SANDKING2", VectorList_04[iMissionVar_03], fList_02[iMissionVar_03], false, false, false, false, 26, 0, 0, 2, true);
                                    iCashReward += 500;
                                }
                                else
                                {
                                    vTarget_06 = new Vector3(872.73f, -3247.447f, -98.837f);
                                    fCoronaHight = 5.446f;
                                    VehicleSpawn("Forklift", vTarget_06, fCoronaHight, true, false, false, false, 0, 0, 20, 1, false);

                                    Vector3 VePoz = new Vector3(837.8329f, -3237.161f, -98.91f);
                                    float fit = 76.10f;
                                    VehicleSpawn("SANDKING2", VePoz, fit, false, false, false, false, 26, 0, 0, 2, true);

                                    VePoz = new Vector3(867.67688f, -3247.6582f, -98.906f);
                                    fit = 0.337f;
                                    VehicleSpawn("Caddy3", VePoz, fit, false, false, false, false, 0, 0, 0, 0, false);

                                    VePoz = new Vector3(869.85f, -3247.40f, -98.8944f);
                                    fit = -0.528f;
                                    VehicleSpawn("Caddy2", VePoz, fit, false, false, false, false, 0, 0, 0, 0, false);

                                    iCashReward += 5000;
                                }
                                BeOnOff[1] = true;
                                BeOnOff[0] = false;
                                RemoveTargets();
                                SlowFastTravel(VectorList_02[VectorList_02.Count - 1], fMission_01);
                                CargoCollect_LoadHood();
                                iMissionSeq = 2;
                                if (!bSubtitles)
                                    QuickSub(sAltLang[103] + "~b~" + sAltLang[278] + "~w~.");
                            }
                            else
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[108] + sAltLang[101] + "~y~" + sMissionVar_01 + "~w~.");
                            }
                        }
                        else if (iMissionSeq == 2)
                        {
                            if (VehicleList_01.Count > 1)
                            {
                                if (VehTrackin_01.IsDead || VehTrackin_02.IsDead)
                                    iMissionSeq = 45;
                                else if (iTracking < Game.GameTime)
                                    TheUltimateTracker(false);

                                if (Game.Player.WantedLevel > 0)
                                    Game.Player.WantedLevel = 0;

                                if (BeOnOff[1])
                                {
                                    if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    {
                                        BeOnOff[1] = false;
                                        VehTrackin_01.CurrentBlip.Remove();
                                        if (!bSubtitles)
                                            QuickSub(sAltLang[282] + "~r~" + sAltLang[278] + "~w~ " + sAltLang[283] + "~b~" + sMissionVar_02 + "~w~.");
                                    }
                                    else
                                    {
                                        if (bSubtitles)
                                            StickySubTitle(sAltLang[103] + "~b~" + sAltLang[278] + "~w~.");
                                    }
                                }
                                else
                                {
                                    World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(Prop_01.Position.X, Prop_01.Position.Y, Prop_01.Position.Z + 1.25f), Vector3.Zero, new Vector3(0.00f, 180.00f, Prop_01.Heading), new Vector3(0.50f, 0.50f, 0.50f), color: Color.CadetBlue);
                                    Vector3 Forks = VehTrackin_01.Position + (VehTrackin_01.ForwardVector * 2);
                                    if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    {
                                        BeOnOff[1] = true;
                                        VehBlip(VehTrackin_01, BlipSprite.TowTruck2, false, false);
                                    }
                                    else if (Forks.DistanceTo(Prop_01.Position) < 1.30f)
                                    {
                                        Prop_01.FreezePosition = false;
                                        Prop_01.AttachTo(VehTrackin_01, Function.Call<int>(Hash.GET_ENTITY_BONE_INDEX_BY_NAME, VehTrackin_01.Handle, "forks_attach"), new Vector3(0.00f, 0.00f, 0.10f), new Vector3(0.00f, 0.00f, 90.00f));
                                        if (iMissionVar_01 != 9)
                                        {
                                            vTarget_02.Z -= 1.00f;
                                            TheYellowCorona(vTarget_02, 5.00f);
                                            iMissionSeq = 3;
                                        }
                                        else
                                        {
                                            VehBlip(VehTrackin_02, BlipSprite.PersonalVehicleCar, true, false);
                                            BeOnOff[2] = true;
                                            iMissionSeq = 4;
                                        }
                                        if (!bSubtitles)
                                            QuickSub(sAltLang[102] + "~b~" + sMissionVar_02 + "~w~ " + sAltLang[101] + "~y~" + sAltLang[284] + "~w~.");
                                    }
                                    else
                                    {
                                        if (bSubtitles)
                                            StickySubTitle(sAltLang[282] + "~r~" + sAltLang[278] + "~w~ " + sAltLang[283] + "~b~" + sMissionVar_02 + "~w~.");
                                    }
                                    ControlerUI(sAltLang[387], 1);
                                    if (Game.IsControlPressed(2, GTA.Control.Context))
                                    {
                                        if (iWait4Sec < Game.GameTime && !BeOnOff[0])
                                        {
                                            BeOnOff[0] = true;
                                            CargoCollect_ResetTruck(vTarget_06, fCoronaHight);
                                        }
                                    }
                                    else
                                        iWait4Sec = Game.GameTime + 1500;
                                }
                            }
                        }
                        else if (iMissionSeq == 3)
                        {
                            if (VehTrackin_01.IsDead || VehTrackin_02.IsDead)
                                iMissionSeq = 45;
                            else if (iTracking < Game.GameTime)
                                TheUltimateTracker(false);

                            if (Game.Player.WantedLevel > 0)
                                Game.Player.WantedLevel = 0;

                            if (BeOnOff[1])
                            {
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[1] = false;
                                    VehTrackin_01.CurrentBlip.Remove();
                                }
                                else
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[103] + "~b~" + sAltLang[278] + "~w~.");
                                }
                            }
                            else
                            {
                                if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[1] = true;
                                    VehBlip(VehTrackin_01, BlipSprite.TowTruck2, false, false);
                                }
                                else
                                {
                                    if (Prop_01.Position.DistanceTo(vTarget_02) < 2.00f)
                                    {
                                        Game.FadeScreenOut(1000);
                                        Script.Wait(1000);
                                        vTarget_06 = VectorList_03[iMissionVar_03];
                                        fCoronaHight = fList_01[iMissionVar_03];
                                        VehTrackin_01.Position = vTarget_06;
                                        VehTrackin_01.Heading = fCoronaHight;
                                        CleanPedBlips(2);
                                        VehBlip(VehTrackin_02, BlipSprite.PersonalVehicleCar, true, false);
                                        BeOnOff[2] = true;
                                        Game.FadeScreenIn(1000);
                                        iMissionSeq = 4;
                                    }
                                    else
                                    {
                                        ControlerUI(sAltLang[387], 1);
                                        if (Game.IsControlPressed(2, GTA.Control.Context))
                                        {
                                            if (iWait4Sec < Game.GameTime && !BeOnOff[0])
                                            {
                                                BeOnOff[0] = true;
                                                CargoCollect_ResetTruck(vTarget_06, fCoronaHight);
                                            }
                                        }
                                        else
                                            iWait4Sec = Game.GameTime + 1500;
                                        if (bSubtitles)
                                            StickySubTitle(sAltLang[102] + "~b~" + sMissionVar_02 + "~w~ " + sAltLang[101] + "~y~" + sAltLang[284] + "~w~.");
                                    }
                                }
                            }
                        }
                        else if (iMissionSeq == 4)
                        {
                            if (VehTrackin_01.IsDead || VehTrackin_02.IsDead)
                                iMissionSeq = 45;
                            else if (iTracking < Game.GameTime)
                                TheUltimateTracker(false);

                            if (BeOnOff[1])
                            {
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[1] = false;
                                    VehTrackin_01.CurrentBlip.Remove();
                                }
                                else
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[103] + "~b~" + sAltLang[278] + "~w~.");
                                }
                            }
                            else
                            {
                                Vector3 Bed = VehTrackin_02.Position - (VehTrackin_01.ForwardVector * 2.24f);
                                Bed.Z += 0.80f;
                                if (Prop_01.Position.DistanceTo(Bed) < 0.80f)
                                {
                                    Prop_01.Detach();
                                    Prop_01.AttachTo(VehTrackin_02, Function.Call<int>(Hash.GET_ENTITY_BONE_INDEX_BY_NAME, VehTrackin_01.Handle, "chassis"), new Vector3(0.00f, -2.25f, 0.85f), new Vector3(0.00f, 0.00f, 90.00f));

                                    if (!bSubtitles)
                                        QuickSub(sAltLang[103] + "~b~" + sAltLang[279] + "~w~.");
                                    if (iMissionVar_01 == 9)
                                        iMissionSeq = 5;
                                    else
                                    {
                                        iWait4Sec = Game.GameTime + RandInt(20000, 60000);
                                        BeOnOff[3] = true;
                                        BeOnOff[4] = true;
                                        BeOnOff[5] = false;
                                        iMissionSeq = 6;
                                    }
                                }
                                else if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[1] = true;
                                    VehBlip(VehTrackin_01, BlipSprite.TowTruck2, false, false);
                                }
                                else
                                {
                                    ControlerUI(sAltLang[387], 1);
                                    if (Game.IsControlPressed(2, GTA.Control.Context))
                                    {
                                        if (iWait4Sec < Game.GameTime && !BeOnOff[0])
                                        {
                                            BeOnOff[0] = true;
                                            CargoCollect_ResetTruck(vTarget_06, fCoronaHight);
                                        }
                                    }
                                    else
                                        iWait4Sec = Game.GameTime + 1500;
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[102] + "~b~" + sMissionVar_02 + "~w~ " + sAltLang[101] + "~y~" + sAltLang[284] + "~w~.");
                                }
                            }
                        }
                        else if (iMissionSeq == 5)
                        {
                            if (VehTrackin_02.IsDead)
                                iMissionSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(VehTrackin_02))
                            {
                                Game.FadeScreenOut(1000);
                                Script.Wait(1000);
                                VehTrackin_02.Position = VectorList_03[iMissionVar_03];
                                VehTrackin_02.Heading = fList_01[iMissionVar_03];
                                CleanPedBlips(2);
                                iWait4Sec = Game.GameTime + RandInt(20000, 60000);
                                BeOnOff[3] = true;
                                BeOnOff[5] = false;
                                BeOnOff[4] = true;
                                iMissionSeq = 6;
                                Game.FadeScreenIn(1000);
                                if (!bSubtitles)
                                    QuickSub(sAltLang[102] + "~b~" + sMissionVar_02 + "~w~ " + sAltLang[101] + "~y~" + sAltLang[127] + "~w~.");
                            }
                            else
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[103] + "~b~" + sAltLang[279] + "~w~.");
                            }
                        }
                        else if (iMissionSeq == 6)
                        {
                            if (BeOnOff[3])
                            {
                                if (iWait4Sec < Game.GameTime)
                                {
                                    BeOnOff[3] = false;
                                    CargoCollect_Suprise();
                                    iTracking = Game.GameTime + 1000;
                                }
                            }
                            else
                            {
                                if (iMissionVar_03 < 5 && PedList_02.Count > 0)
                                {
                                    if (iTracking < Game.GameTime)
                                    {
                                        if (Game.Player.WantedLevel > 0)
                                            Game.Player.WantedLevel = 0;

                                        if (iMissionVar_03 == 4)
                                            TheUltimateTracker(false);
                                        else
                                            TheUltimateTracker(true);
                                    }
                                }
                            }

                            if (VehTrackin_02.IsDead)
                                iMissionSeq = 45;
                            else if (BeOnOff[2])
                            {
                                if (Game.Player.Character.IsInVehicle(VehTrackin_02))
                                {
                                    BeOnOff[2] = false;
                                    VehTrackin_02.CloseDoor(VehicleDoor.Trunk, true);
                                    VehTrackin_02.CurrentBlip.Remove();
                                    TheYellowCorona(vTarget_03, 10.00f);
                                    AddTarget(vTarget_03, true, true, 1.00f, false);
                                }
                                else
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[103] + "~b~" + sAltLang[279] + "~w~.");
                                }
                            }
                            else
                            {
                                if (!Game.Player.Character.IsInVehicle(VehTrackin_02))
                                {
                                    BeOnOff[2] = true;
                                    VehBlip(VehTrackin_02, BlipSprite.PersonalVehicleCar, true, false);
                                    RemoveTargets();
                                }
                                else
                                {
                                    if (BeOnOff[4] && World.GetDistance(vTarget_03, Game.Player.Character.Position) < 60.00f)
                                    {
                                        MoveThatCar(vTarget_03);
                                        BeOnOff[4] = false;
                                    }
                                    else if (VehTrackin_02.Position.DistanceTo(vTarget_03) < 5.00f)
                                    {
                                        RemoveTargets();
                                        Game.Player.Character.Task.LeaveVehicle();
                                        iMissionSeq = 10;
                                    }
                                    else
                                    {
                                        if (bSubtitles)
                                            StickySubTitle(sAltLang[102] + "~b~" + sMissionVar_02 + "~w~ " + sAltLang[101] + "~y~" + sAltLang[127] + "~w~.");
                                    }
                                }
                            }
                        }
                        else if (iMissionSeq == 10)
                        {
                            NSCoinInvestments(true, 7, 11, "SecuroServ Shares");
                            GameOver(false, "", false, iCashReward);
                        }
                        else if (iMissionSeq == 45)
                        {
                            NSCoinInvestments(false, 8, 13, "SecuroServ Shares");
                            CargoCollect_UnloadInt(iMissionVar_01);
                            GameOver(true, "", false, 0);
                        }
                    }       //BayLift
                    else if (iJobType == 20)
                    {
                        if (iMissionSeq == 0)
                        {
                            if (bFastTraveltoStart)
                                WarptoAnyVeh(VehTrackin_01, Game.Player.Character, 1, false);
                            else if (!bSubtitles)
                                QuickSub(sAltLang[108] + sAltLang[101] + "~y~" + sAltLang[287] + "~w~.");
                            iMissionSeq = 1;

                        }
                        else if (iMissionSeq == 1)
                        {
                            if (VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                            {
                                AddTarget(vTarget_01, true, true, 75.00f, false);
                                VehTrackin_01.CurrentBlip.Remove();
                                BeOnOff[0] = false;
                                iMissionSeq = 2;
                                if (!bSubtitles)
                                    QuickSub(sAltLang[108] + sAltLang[101] + "~y~" + sAltLang[127] + "~w~.");
                            }
                            else if (Game.Player.Character.Position.DistanceTo(VehTrackin_01.Position) < 35.00f)
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[103] + "~y~" + sAltLang[287] + "~w~.");
                            }
                            else
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[108] + sAltLang[101] + "~y~" + sAltLang[287] + "~w~.");
                            }
                        }
                        else if (iMissionSeq == 2)
                        {
                            if (VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else if (BeOnOff[0])
                            {
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    AddTarget(vTarget_01, true, true, 75.00f, false);
                                    VehTrackin_01.CurrentBlip.Remove();
                                    BeOnOff[0] = false;
                                }
                                else
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[103] + "~y~" + sAltLang[287] + "~w~.");
                                }
                            }
                            else
                            {
                                if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[0] = true;
                                    RemoveTargets();
                                    VehBlip(VehTrackin_01, BlipSprite.Sub, true, false);

                                }
                                else if (VehTrackin_01.Position.DistanceTo(vTarget_01) < 85.00f)
                                {
                                    DeepDown_Addfish();
                                    BeOnOff[1] = false;
                                    iMissionSeq = 3;
                                }
                                else
                                {
                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[108] + sAltLang[101] + "~y~" + sAltLang[127] + "~w~.");
                                }
                            }
                        }
                        else if (iMissionSeq == 3)
                        {
                            if (VehTrackin_01.IsDead || !Game.Player.Character.IsInVehicle(VehTrackin_01))
                                iMissionSeq = 45;
                            else if (PedList_02.Count > 0)
                            {
                                if (iWait4Sec < Game.GameTime)
                                {
                                    iWait4Sec = Game.GameTime + 1000;
                                    DeepDown_SwimtoBarrel();
                                }
                            }
                            else
                                iMissionSeq = 10;

                            if (!BeOnOff[1])
                            {
                                if (PropList_01.Count > 0)
                                {
                                    ControlerUI(sAltLang[286], 1);

                                    if (Game.IsControlPressed(2, GTA.Control.Context))
                                    {
                                        if (iMissionVar_01 < Game.GameTime)
                                        {
                                            Vector3 vMe = PropList_01[0].Position;
                                            PropList_01[0].Delete();
                                            PropList_01.RemoveAt(0);
                                            World.AddExplosion(vMe, ExplosionType.StickyBomb, 10.00f, 5.00f, true, false);
                                            Script.Wait(RandInt(75, 300));
                                            World.AddExplosion(vMe, ExplosionType.StickyBomb, 10.00f, 5.00f, true, false);
                                            Script.Wait(RandInt(75, 300));
                                            World.AddExplosion(vMe, ExplosionType.StickyBomb, 10.00f, 5.00f, true, false);
                                        }
                                    }
                                    else
                                        iMissionVar_01 = Game.GameTime + 500;

                                    if (bSubtitles)
                                        StickySubTitle(sAltLang[289] + "~r~" + sAltLang[19] + "~w~ " + sAltLang[344] + ".");
                                    else if (BeOff[0])
                                    {
                                        if (!bSubtitles)
                                            QuickSub(sAltLang[289] + "~r~" + sAltLang[19] + "~w~ " + sAltLang[344] + ".");
                                        BeOff[0] = false;
                                    }
                                }
                                else
                                {
                                    if (VehTrackin_01.Position.DistanceTo(vTarget_01) < 85.00f)
                                    {
                                        ControlerUI(sAltLang[285], 1);

                                        if (Game.IsControlJustPressed(2, GTA.Control.Context))
                                        {
                                            BeOnOff[1] = true;
                                            DeepDown_DropBomb();
                                        }

                                        if (bSubtitles)
                                            StickySubTitle(sAltLang[288] + "~r~" + sAltLang[19] + "~w~.");
                                        else if (BeOff[1])
                                        {
                                            if (!bSubtitles)
                                                QuickSub(sAltLang[288] + "~r~" + sAltLang[19] + "~w~.");
                                            BeOff[1] = false;
                                        }
                                    }
                                }
                            }
                        }
                        else if (iMissionSeq == 10)
                        {
                            NSCoinInvestments(true, 8, 13, "Vespucci Surfing Shares");
                            GameOver(false, "", false, iCashReward);
                        }
                        else if (iMissionSeq == 45)
                        {
                            if (!bTestRun)
                                NSCoinInvestments(false, 9, 15, "Vespucci Surfing Shares");
                            GameOver(true, "", false, 0);
                        }
                    }       //UnderwaterAdventure
                    else if (iJobType == 21)
                    {
                        iJobType = 3;
                    }       //CayoPackages--Directed to iJobType == 3
                    else if (iJobType == 22)
                    {
                        if (BeOnOff[0])
                        {
                            if (World.GetDistance(Game.Player.Character.Position, Npc_01.Position) < 60.00f)   // Distance tracking for Spookbar
                            {
                                if (iTime_01[1] != 0)
                                    iTime_01[1] = 0;      //timer for spook fail
                                fMission_02 = World.GetDistance(Game.Player.Character.Position, Npc_01.Position) / 100.00f;// Find the percent for Spookbar float 0.00 to 1.00
                                fMission_02 = 1.00f - fMission_02;
                                if (fMission_02 < 0.01f)
                                    fMission_02 = 0.01f;
                                BtSlideBar.BackgroundColor = Color.Black;
                            }
                            else       // if player is out side min distance
                            {
                                fMission_02 = 0.00f;
                                if (iTime_01[1] == 0) // set timmer for distance fail
                                    iTime_01[1] = Game.GameTime + 6000;
                                else if (iTime_01[1] < Game.GameTime) // fail if timmer runs out
                                    iMissionSeq = 45;
                                if (BeOnOff[1]) // bar flash for distance warning. is a 1/2 sec toggle on off.
                                {
                                    if (iTime_01[2] < Game.GameTime)
                                    {
                                        BeOnOff[1] = false;
                                        iTime_01[2] = Game.GameTime + 500;
                                        BtSlideBar.BackgroundColor = Color.White;
                                    }
                                }
                                else
                                {
                                    if (iTime_01[2] < Game.GameTime)
                                    {
                                        BeOnOff[1] = true;
                                        iTime_01[2] = Game.GameTime + 500;
                                        BtSlideBar.BackgroundColor = Color.Black;
                                    }
                                }
                            }

                            if (fMission_02 > 0.95f)  // test if too close to target
                            {
                                if (!BeOnOff[2])
                                {
                                    if (iTime_01[3] == 0)  // set timmer for too close fail
                                        iTime_01[3] = Game.GameTime + 6000;
                                    else if (iTime_01[3] < Game.GameTime)  // too close fail.
                                        iMissionSeq = 45;

                                    if (BeOnOff[1]) // bar flash for distance warning. is a 1/2 sec toggle on off.
                                    {
                                        if (iTime_01[4] < Game.GameTime)
                                        {
                                            BeOnOff[1] = false;
                                            iTime_01[4] = Game.GameTime + 500;
                                            BtSlideBar.ForegroundColor = Color.White;
                                        }
                                    }
                                    else
                                    {
                                        if (iTime_01[4] < Game.GameTime)
                                        {
                                            BeOnOff[1] = true;
                                            iTime_01[4] = Game.GameTime + 500;
                                            BtSlideBar.ForegroundColor = Color.Red;
                                        }
                                    }
                                }
                                BtSlideBar.Percentage = fMission_02;   // set the native ui Bar to the current distance percent.
                                VTBTimerPool.Draw();        //draw the spookbar to screen.
                            }
                            else    //draw the spookbar to screen where the player is at the correct distance.
                            {
                                if (iTime_01[3] != 0)
                                    iTime_01[3] = 0;
                                BtSlideBar.Percentage = fMission_02;
                                BtSlideBar.ForegroundColor = Color.Yellow;
                                VTBTimerPool.Draw();
                            }
                        }

                        if (iMissionSeq == 0)
                        {
                            iMissionSeq = 1;
                            BeOnOff[3] = true;
                            iMissionVar_01 = 0;
                            vTarget_01 = VectorList_01[iMissionVar_01];
                            AddTarget(vTarget_01, true, true, 75.00f, false);
                            GenPlayerPed(vTarget_01, 0.00f, 24, 150, 2, 47, 0, null, 0, false, false, 1, false);

                            if (bNotPause)
                            {
                                Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                bNotPause = false;
                            }

                            if (bFastTraveltoStart)
                                SlowFastTravel(vTarget_02, 0.00f);
                            else if (!bSubtitles)
                                QuickSub(sAltLang[253] + "'~y~" + sAltLang[388] + "~w~' " + sAltLang[389]);
                        }
                        else if (iMissionSeq == 1)
                        {
                            if (Npc_01.IsDead)
                                iMissionSeq = 45;
                            else if (Npc_01.Position.DistanceTo(vTarget_01) < 2.50f)
                            {
                                iMissionVar_01 += 1;
                                if (PedRunToFoward(Npc_01, VectorList_01, iMissionVar_01))
                                    vTarget_01 = VectorList_01[iMissionVar_01];
                                else
                                {
                                    if (!BeOnOff[0])
                                        iMissionSeq = 45;
                                    else
                                    {
                                        iMissionSeq = 2;
                                        iMissionVar_01 = 0;
                                        PedRunToFoward(Npc_01, VectorList_02, iMissionVar_01);
                                        vTarget_01 = VectorList_02[iMissionVar_01];
                                    }
                                }
                            }
                            else if (!BeOnOff[0])
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[253] + "'~y~" + sAltLang[388] + "~w~' " + sAltLang[389]);

                                if (Game.Player.Character.Position.DistanceTo(Npc_01.Position) < 55.00f)
                                {
                                    BeOnOff[0] = true;
                                    if (BeOnOff[3])
                                        RemoveTargets();
                                    Hitman_AddVisionCones(Npc_01);


                                    if (!bSubtitles)
                                        QuickSub("~b~" + sAltLang[7] + "~w~ " + sAltLang[112] + "~r~" + sAltLang[388] + "~w~. " + sAltLang[398] + ".");
                                }
                                else if (BeOnOff[3])
                                {
                                    if (Npc_01.Position.DistanceTo(VectorList_01[0]) > 75.00f)
                                    {
                                        BeOnOff[3] = false;
                                        RemoveTargets();
                                    }
                                }
                            }
                            else if (BeenSpotted(Npc_01, Game.Player.Character, true))
                                iMissionSeq = 45;
                            else
                            {
                                if (bSubtitles)
                                    StickySubTitle("~b~" + sAltLang[7] + "~w~ " + sAltLang[112] + "~r~" + sAltLang[388] + "~w~. " + sAltLang[398] + ".");

                            }
                            if (iWait4Sec < Game.GameTime)
                                KeepMoving(Npc_01, vTarget_01, 2500);
                        }
                        else if (iMissionSeq == 2)
                        {
                            if (bSubtitles)
                                StickySubTitle("~b~" + sAltLang[7] + "~w~ " + sAltLang[112] + "~r~" + sAltLang[388] + "~w~. " + sAltLang[398] + ".");

                            if (Npc_01.IsDead)
                                iMissionSeq = 45;
                            else if (Npc_01.Position.DistanceTo(vTarget_01) < 2.50f)
                            {
                                iMissionVar_01 += 1;
                                if (PedRunToFoward(Npc_01, VectorList_02, iMissionVar_01))
                                    vTarget_01 = VectorList_02[iMissionVar_01];
                                else
                                {
                                    BeOnOff[0] = false;
                                    PedScenario(Npc_01, "WORLD_HUMAN_MOBILE_FILM_SHOCKING", Npc_01.Position, fMission_01, false);
                                    iWait4Sec = Game.GameTime + 15000;
                                    iMissionSeq = 3;
                                }
                            }
                            else if (BeenSpotted(Npc_01, Game.Player.Character, true))
                                iMissionSeq = 45;
                            else if (iWait4Sec < Game.GameTime)
                                KeepMoving(Npc_01, vTarget_01, 2500);
                        }
                        else if (iMissionSeq == 3)
                        {
                            if (Npc_01.IsDead)
                            {
                                if (Npc_01.WasKilledByStealth)
                                    iMissionSeq = 4;
                                else
                                    iMissionSeq = 45;
                            }
                            else if (iWait4Sec < Game.GameTime)
                            {
                                Npc_01.Task.FleeFrom(Game.Player.Character);
                                iMissionSeq = 45;
                            }
                            if (Function.Call<bool>(Hash.GET_PED_STEALTH_MOVEMENT, Game.Player.Character))
                                ControlerUI(sAltLang[359], 1);
                            else
                                ControlerUI(sAltLang[360], 1);
                        }
                        else if (iMissionSeq == 4)
                        {
                            Npc_01.CanRagdoll = false;
                            Hitman_RemoveVisionCones();
                            SlowFastTravel(VectorList_03[0], fList_01[0]);
                            Npc_01.CanRagdoll = true;
                            Npc_01.Position = vTarget_05;
                            GameOver(false, "", false, iCashReward);
                        }
                        else if (iMissionSeq == 45)
                        {
                            Hitman_RemoveVisionCones();
                            GameOver(true, "", false, 0);
                        }
                    }       //CayoFollow
                    else if (iJobType == 23)
                    {
                        iJobType = 11;
                    }       //CayoRace--Directed to iJobType == 11
                    else if (iJobType == 24)
                    {
                        iJobType = 13;
                    }       //Assassination--Directed to iJobType == 13
                    else if (iJobType == 25)
                    {
                        if (iMissionSeq == 0)
                        {
                            iMissionSeq = 1;

                            if (bNotPause)
                            {
                                Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                bNotPause = false;
                            }

                            if (bFastTraveltoStart)
                                SlowFastTravel(VehTrackin_01.Position + (VehTrackin_01.RightVector * 3.00f), 0.00f);
                            else if (!bSubtitles)
                                QuickSub(sAltLang[108] + sAltLang[101] + "~y~" + sAltLang[142] + "~w~.");
                        }
                        else if (iMissionSeq == 1)
                        {
                            if (Npc_01.IsDead)
                                iMissionSeq = 45;
                            else if (!Game.Player.Character.IsInVehicle())
                            {
                                if (bSubtitles)
                                    StickySubTitle(sAltLang[108] + sAltLang[101] + "~y~" + sAltLang[142] + "~w~.");

                                if (Game.Player.Character.Position.DistanceTo(VehTrackin_01.Position) < 10.00f)
                                {
                                    WarptoAnyVeh(VehTrackin_01, Game.Player.Character, 3, false);
                                    if (iMissionVar_02 == 1)
                                        VehicleSpawn("DINGHY", new Vector3(4957.126f, -5163.97f, 0.5030198f), 69.74284f, true, false, false, false, 9, 0, 0, 2, false);
                                    else if (iMissionVar_02 == 2)
                                        VehicleSpawn("DINGHY", new Vector3(5090.056f, -4638.275f, 0.1183856f), 248.4615f, true, false, false, false, 9, 0, 0, 2, false);
                                    else
                                        VehicleSpawn("VELUM", new Vector3(4479.589f, -4496.729f, 5.124825f), 110.8173f, true, true, false, false, 0, 0, 0, 2, false);
                                    iMissionVar_02 = 0;
                                }
                            }
                            else
                            {
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    iMissionSeq = 2;
                                    VehTrackin_01.FreezePosition = false;
                                    iMissionVar_01 = 0;
                                    iMissionVar_02 = 0;
                                    AddTarget(VehTrackin_02.Position, false, false, 75.00f, false);
                                    FlyToRightHere(Npc_01, VehTrackin_01, vTarget_01, 45.00f, fphdirect);
                                }
                            }
                        }
                        else if (iMissionSeq == 2)
                        {
                            if (Npc_01.IsDead || !Game.Player.Character.IsInVehicle())
                                iMissionSeq = 45;
                            else if (VehTrackin_01.Position.DistanceTo(vTarget_01) < 5.00f)
                            {
                                iMissionSeq = 3;
                                FlyToRightHere(Npc_01, VehTrackin_01, VectorList_01[iMissionVar_01], 85.00f, fList_01[iMissionVar_01]);
                                GenPlayerPed(VectorList_02[iMissionVar_02], 0.00f, 65, 500, 2, 47, 0, null, 8, false, false, 2, false);
                                iMissionVar_02 += 1;
                                if (Npc_02 != null)
                                {
                                    PedRunToFoward(Npc_02, VectorList_02, iMissionVar_02);
                                    vTarget_03 = VectorList_02[iMissionVar_02];
                                }
                                else
                                    iMissionSeq = 45;

                                if (!bSubtitles)
                                    QuickSub(sAltLang[92] + "~b~" + sAltLang[393] + "~w~" + sAltLang[180] + sMissionVar_01);
                            }
                        }
                        else if (iMissionSeq == 3)
                        {
                            if (bSubtitles)
                                StickySubTitle(sAltLang[92] + "~b~" + sAltLang[393] + "~w~" + sAltLang[180] + sMissionVar_01);

                            World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(Npc_02.Position.X, Npc_02.Position.Y, Npc_02.Position.Z + 2.00f), Vector3.Zero, new Vector3(0.00f, Npc_02.Heading, 0.00f), new Vector3(0.50f, 0.50f, 0.50f), color: Color.Red);

                            if (Npc_01.IsDead || !Game.Player.Character.IsInVehicle())
                                iMissionSeq = 45;
                            else if (Npc_02.IsDead)
                                iMissionSeq = 10;
                            else if (Npc_02.Position.DistanceTo(vTarget_03) < 3.00f)
                            {
                                iMissionVar_02 += 1;
                                if (PedRunToFoward(Npc_02, VectorList_02, iMissionVar_02))
                                    vTarget_03 = VectorList_02[iMissionVar_02];
                                else
                                {
                                    iMissionSeq = 4;
                                    Npc_02.Task.ClearAll();
                                    VehTrackin_02.FreezePosition = false;
                                    VehTrackin_02.IsInvincible = false;
                                    WarptoAnyVeh(VehTrackin_02, Npc_02, 1, false);
                                    Script.Wait(500);
                                }
                            }
                            else if (iWait4Sec < Game.GameTime)
                                KeepMoving(Npc_02, vTarget_03, 2500);

                            if (iMissionVar_01 + 1 < VectorList_01.Count)
                            {
                                if (VehTrackin_01.Position.DistanceTo(VectorList_01[iMissionVar_01]) < 10.00f)
                                {
                                    iMissionVar_01 += 1;
                                    FlyToRightHere(Npc_01, VehTrackin_01, VectorList_01[iMissionVar_01], 65.00f, fList_01[iMissionVar_01]);
                                }
                            }
                            else
                            {
                                if (iTime_01[0] < Game.GameTime)
                                {
                                    iTime_01[0] = Game.GameTime + 1000;

                                    Vector3 VHereIsh = Npc_02.Position - (Npc_02.ForwardVector * 25.00f) + (Npc_02.RightVector * 25.00f);
                                    VHereIsh.Z += 35.00f;
                                    FlyToRightHere(Npc_01, VehTrackin_01, VHereIsh, 45.00f, Npc_02.Heading);
                                }
                            }
                        }
                        else if (iMissionSeq == 4)
                        {
                            if (Npc_01.IsDead || !Game.Player.Character.IsInVehicle())
                                iMissionSeq = 45;
                            else if (Npc_02.IsDead)
                                iMissionSeq = 10;
                            else if (Npc_02.IsInVehicle(VehTrackin_02))
                            {
                                if (bPedCanFly)
                                {
                                    iMissionSeq = 6;
                                    ImOnAPlane(Npc_02, VehTrackin_02, vTarget_02);
                                    iWait4Sec = Game.GameTime + 4000;
                                }
                                else
                                {
                                    iMissionVar_02 = 0;
                                    iMissionVar_03 = 0;
                                    iMissionSeq = 5;
                                    iWait4Sec = Game.GameTime + 1000;
                                    Vector3 VHereIsh = VehTrackin_02.Position - (VehTrackin_02.ForwardVector * 45) + (VehTrackin_02.RightVector * 45);
                                    VHereIsh.Z += 35.00f;
                                    FlyToRightHere(Npc_01, VehTrackin_01, VHereIsh, 10.00f, VehTrackin_02.Heading - 90.00f);
                                    Function.Call(Hash.SET_BOAT_ANCHOR, VehTrackin_02, false);
                                    ShowBoating(Npc_02, VectorList_03[iMissionVar_02], VehTrackin_02, 35.00f, 786469);
                                }
                                VehTrackin_02.IsInvincible = false;
                            }
                        }
                        else if (iMissionSeq == 5)
                        {
                            World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(VehTrackin_02.Position.X, VehTrackin_02.Position.Y, VehTrackin_02.Position.Z + 2.00f), Vector3.Zero, new Vector3(0.00f, VehTrackin_02.Heading, 0.00f), new Vector3(0.50f, 0.50f, 0.50f), color: Color.Red);

                            if (Npc_01.IsDead || !Game.Player.Character.IsInVehicle())
                                iMissionSeq = 45;
                            else if (Npc_02.IsDead)
                                iMissionSeq = 10;
                            else if (VehTrackin_02.Position.DistanceTo(VectorList_03[iMissionVar_02]) < 3.00f)
                            {
                                iMissionVar_02 += 1;
                                if (iMissionVar_02 + 1 < VectorList_03.Count)
                                    ShowBoating(Npc_02, VectorList_03[iMissionVar_02], VehTrackin_02, 40.00f, 786469);
                                else
                                    iMissionSeq = 45;
                            }
                            else if (iWait4Sec < Game.GameTime)
                            {
                                iWait4Sec = Game.GameTime + 1000;

                                Vector3 VHereIsh = VehTrackin_02.Position - (VehTrackin_02.ForwardVector * 25.00f) + (VehTrackin_02.RightVector * 25.00f);
                                VHereIsh.Z += 25.00f;
                                FlyToRightHere(Npc_01, VehTrackin_01, VHereIsh, 10.00f, VehTrackin_02.Heading);

                                if (iMissionVar_03 > 10)
                                {
                                    iMissionVar_03 = 0;
                                    VehTrackin_02.Position = VectorList_03[iMissionVar_02];
                                    VehTrackin_02.Heading = fList_02[iMissionVar_02];
                                }
                                else
                                {
                                    if (VehTrackin_02.Position.DistanceTo(vGetaway) < 2.00f)
                                    {
                                        iMissionVar_03 += 1;
                                        VehTrackin_02.Position = VehTrackin_02.Position + (VehTrackin_02.ForwardVector * 2.50f);
                                        VehTrackin_02.Heading = fList_02[iMissionVar_02];
                                        ShowBoating(Npc_02, VectorList_03[iMissionVar_02], VehTrackin_02, 40.00f, 786469);
                                    }
                                }

                                vGetaway = VehTrackin_02.Position;
                            }
                        }
                        else if (iMissionSeq == 6)
                        {
                            World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(VehTrackin_02.Position.X, VehTrackin_02.Position.Y, VehTrackin_02.Position.Z + 2.00f), Vector3.Zero, new Vector3(0.00f, VehTrackin_02.Heading, 0.00f), new Vector3(0.50f, 0.50f, 0.50f), color: Color.Red);

                            if (Npc_01.IsDead || !Game.Player.Character.IsInVehicle())
                                iMissionSeq = 45;
                            else if (Npc_02.IsDead)
                                iMissionSeq = 10;
                            else if (VehTrackin_02.Position.DistanceTo(VectorList_02[0]) > 700.00f)
                                iMissionSeq = 45;
                            else if (iWait4Sec < Game.GameTime)
                            {
                                iWait4Sec = Game.GameTime + 10000;
                                Vector3 VHereIsh = VehTrackin_02.Position - (VehTrackin_02.ForwardVector * 45) + (VehTrackin_02.RightVector * 45);
                                VHereIsh.Z += 10.00f;
                                FlyToRightHere(Npc_01, VehTrackin_01, VHereIsh, 40.00f, VehTrackin_02.Heading - 90.00f);
                            }
                        }
                        else if (iMissionSeq == 10)
                        {
                            VehTrackin_01.IsInvincible = false;
                            SlowFastTravel(new Vector3(4905.202f, -4939.065f, 3.352461f), 201.3084f);
                            NSCoinInvestments(false, 4, 9, "Vangelico");
                            iCashReward = RandInt(50000, 100000);
                            GameOver(false, "", false, iCashReward);
                        }
                        else if (iMissionSeq == 45)
                        {
                            SlowFastTravel(new Vector3(4594.872f, -4880.987f, 18.10277f), 6.152281f);
                            VehTrackin_01.IsInvincible = false;
                            NSCoinInvestments(true, 1, 3, "Vangelico");
                            GameOver(true, "", false, 0);
                        }
                    }       //ThifeAntiHeist
                }
            }
            else if (bYachIsOn)
            {
                if (iLookForPB == 2)
                {
                    if (bRingRing)
                    {
                        bRingRing = false;
                        StopThatSound();
                    }
                    ThisPhone.IsPersistent = false;
                    if (PhoneBlip != null)
                    {
                        BlipCleaning(PhoneBlip);
                        PhoneBlip = null;
                    }
                    iLookForPB = 0;
                }
                else if (!bYachtLoaded)
                    Water02_AddHeistYacht();
                else if (Game.Player.Character.Position.DistanceTo(vYachtBlip) > 275.00f && !bASleap)
                {
                    YachtStuff_YachtRmovals();
                    bYachIsOn = false;
                }
                else
                {
                    if (iYachtTimer < Game.GameTime && !bYachPass)
                    {
                        bYachPass = true;
                        YachtStuff_OntheYacht();
                    }
                }
            }
            else
            {
                if (bYachtStart)
                {
                    if (!Game.IsLoading)
                    {
                        Game.FadeScreenOut(1);
                        Game.Player.Character.Position = vYachtBlip;
                        YachtStuff_YachtOwnerShip();
                        bYachIsOn = true;
                        YachtStuff_StartOnYacht();
                        bYachtStart = false;
                    }
                }
                else if (bPlayerAtt)
                {
                    if (PedList_02.Count > 0)
                    {
                        if (Npc_01.IsDead || Npc_01.Position.DistanceTo(Game.Player.Character.Position) > 250.00f)
                        {
                            bPlayerAtt = false;
                            CleanUpPeds();
                        }
                    }
                }
                else if (bPlayingOldMissions)
                {
                    if (iLookForPB != 0)
                    {
                        if (iLookForPB == 2)
                        {
                            if (bRingRing)
                            {
                                bRingRing = false;
                                StopThatSound();
                            }
                            ThisPhone.IsPersistent = false;
                            if (PhoneBlip != null)
                            {
                                BlipCleaning(PhoneBlip);
                                PhoneBlip = null;
                            }
                        }
                        iLookForPB = 0;
                    }
                    else if (iRollXMLCHeck < Game.GameTime)
                    {
                        iRollXMLCHeck = Game.GameTime + 10000;
                        CompatXML();
                    }
                }
                else if (Game.Player.Character.Position.DistanceTo(vYachtBlip) < 225.00f && bYachtOwner && !bYachtBypas)
                {
                        YachtStuff_YachtOwnerShip();
                        bYachIsOn = true;
                }
                else
                {
                    if (iRollXMLCHeck < Game.GameTime)
                    {
                        iRollXMLCHeck = Game.GameTime + 10000;
                        CompatXML();
                    }
                    else if (bLookingForPB)
                    {
                        if (bDlCVehStartTest)
                        {
                            if (!Game.IsLoading)
                            {
                                if (DLCTestVeh == null)
                                {
                                    Script.Wait(1000);
                                    DLCTestVeh = VehicleSpawn("OPENWHEEL1", Game.Player.Character.Position + (Game.Player.Character.UpVector * 25), 0.00f, false, false, false, false, 0, 0, 0, 0, false);
                                    if (DLCTestVeh.Exists())
                                    {
                                        DLCTestVeh.HasCollision = false;
                                        DLCTestVeh.IsVisible = false;
                                    }
                                    VehicleList_01.Clear();
                                    iPhoneDelay = Game.GameTime + 20000;
                                }
                                else if (DLCTestVeh.Exists())
                                {
                                    DLCTestVeh.Position = Game.Player.Character.Position + (Game.Player.Character.UpVector * 25);

                                    if (iPhoneDelay < Game.GameTime)
                                    {
                                        bDlCVehStartTest = false;
                                        DLCTestVeh.IsPersistent = false;
                                        DLCTestVeh.Delete();
                                        bTrainM = true;

                                        if (bOnlineStuffLoaded)
                                        {
                                            AppeyNess(new Vector3(346.5659f, -1012.851f, -99.19622f));
                                            AppeyNess(new Vector3(260.5322f, -999.1339f, -99.0087f));//"Low End Apartment"),
                                            AppeyNess(new Vector3(343.8500f, -999.0800f, -99.1977f));//"Mid Range Apartment"),
                                            AppeyNess(new Vector3(-262.46f, -951.89f, 75.83f));//"3 Alta Street Apt 10"),
                                            AppeyNess(new Vector3(-280.74f, -961.50f, 91.11f));//"3 Alta Street Apt 57"),
                                            AppeyNess(new Vector3(-895.85f, -433.90f, 94.06f));//"Weazel Plaza Apt 26"),
                                            AppeyNess(new Vector3(-909.054f, -441.466f, 120.205f));//"Weazel Plaza Apt 70"),
                                            AppeyNess(new Vector3(-884.301f, -454.515f, 125.132f));//"Weazel Plaza Apt 101"),
                                            AppeyNess(new Vector3(-897.197f, -369.246f, 84.0779f));//"Richard Majestic Apt 4"),
                                            AppeyNess(new Vector3(-932.29f, -385.88f, 108.03f));//"Richard Majestic Apt 51"),
                                            AppeyNess(new Vector3(-575.305f, 42.3233f, 92.2236f));//"Tinsel Towers Apt 29"),
                                            AppeyNess(new Vector3(-617.609f, 63.024f, 106.624f));//"Tinsel Towers Apt 45"),
                                            AppeyNess(new Vector3(-795.04f, 342.37f, 206.22f));//"Eclipse Towers Apt 5"),
                                            AppeyNess(new Vector3(-759.79f, 315.71f, 175.40f));//"Eclipse Towers Apt 9"),
                                            AppeyNess(new Vector3(-797.095f, 335.069f, 158.599f));//"Eclipse Towers Apt 31"),
                                            AppeyNess(new Vector3(-752.605f, 320.821f, 221.855f));//"Eclipse Towers Apt 40"),
                                            AppeyNess(new Vector3(-37.41f, -582.82f, 88.71f));//"4 Integrity Way Apt 30"),
                                            AppeyNess(new Vector3(-10.58f, -581.26f, 98.83f));//"4 Integrity Way Apt 35"),
                                            AppeyNess(new Vector3(-1477.14f, -538.75f, 55.5264f));//"Del Perro Heights Apt 7"),
                                            AppeyNess(new Vector3(-1474.17f, -528.124f, 68.1541f));//"Del Perro Heights Apt 20"),
                                            AppeyNess(new Vector3(-14.7964f, -581.709f, 79.4307f));//"4 Integrity Way Apt 28"),
                                            AppeyNess(new Vector3(-1468.14f, -541.815f, 73.4442f));//"Del Perro Heights Apt 4"),
                                            AppeyNess(new Vector3(-915.811f, -379.432f, 113.675f));//"Richard Majestic Apt 2"),
                                            AppeyNess(new Vector3(-614.86f, 40.6783f, 97.6001f));//"Tinsel Towers Apt 42"),
                                            AppeyNess(new Vector3(-773.407f, 341.766f, 211.397f));//"Eclipse Towers Apt 3"),
                                            AppeyNess(new Vector3(-172.983f, 494.033f, 137.654f));//"3655 Wild Oats Drive"),
                                            AppeyNess(new Vector3(340.941f, 437.18f, 149.39f));//"2044 North Conker Avenue"),
                                            AppeyNess(new Vector3(373.023f, 416.105f, 145.701f));//"2045 North Conker Avenue"),
                                            AppeyNess(new Vector3(-676.127f, 588.612f, 145.17f));//"2862 Hillcrest Avenue"),
                                            AppeyNess(new Vector3(-763.107f, 615.906f, 144.14f));//"2868 Hillcrest Avenue"),
                                            AppeyNess(new Vector3(-857.798f, 682.563f, 152.653f));//"2874 Hillcrest Avenue"),
                                            AppeyNess(new Vector3(120.5f, 549.952f, 184.097f));//"3677 Whispymound Drive"),
                                            AppeyNess(new Vector3(-1288.0f, 440.748f, 97.6946f));//"2113 Mad Wayne Thunder"),
                                        }
                                        AddMissWeaps(Mk2WeapsMain, bWeapSwap);
                                    }
                                }
                                else
                                {
                                    bDlCVehStartTest = false;

                                    if (bOnlineStuffLoaded)
                                    {
                                        AppeyNess(new Vector3(346.5659f, -1012.851f, -99.19622f));
                                        AppeyNess(new Vector3(260.5322f, -999.1339f, -99.0087f));//"Low End Apartment"),
                                        AppeyNess(new Vector3(343.8500f, -999.0800f, -99.1977f));//"Mid Range Apartment"),
                                        AppeyNess(new Vector3(-262.46f, -951.89f, 75.83f));//"3 Alta Street Apt 10"),
                                        AppeyNess(new Vector3(-280.74f, -961.50f, 91.11f));//"3 Alta Street Apt 57"),
                                        AppeyNess(new Vector3(-895.85f, -433.90f, 94.06f));//"Weazel Plaza Apt 26"),
                                        AppeyNess(new Vector3(-909.054f, -441.466f, 120.205f));//"Weazel Plaza Apt 70"),
                                        AppeyNess(new Vector3(-884.301f, -454.515f, 125.132f));//"Weazel Plaza Apt 101"),
                                        AppeyNess(new Vector3(-897.197f, -369.246f, 84.0779f));//"Richard Majestic Apt 4"),
                                        AppeyNess(new Vector3(-932.29f, -385.88f, 108.03f));//"Richard Majestic Apt 51"),
                                        AppeyNess(new Vector3(-575.305f, 42.3233f, 92.2236f));//"Tinsel Towers Apt 29"),
                                        AppeyNess(new Vector3(-617.609f, 63.024f, 106.624f));//"Tinsel Towers Apt 45"),
                                        AppeyNess(new Vector3(-795.04f, 342.37f, 206.22f));//"Eclipse Towers Apt 5"),
                                        AppeyNess(new Vector3(-759.79f, 315.71f, 175.40f));//"Eclipse Towers Apt 9"),
                                        AppeyNess(new Vector3(-797.095f, 335.069f, 158.599f));//"Eclipse Towers Apt 31"),
                                        AppeyNess(new Vector3(-752.605f, 320.821f, 221.855f));//"Eclipse Towers Apt 40"),
                                        AppeyNess(new Vector3(-37.41f, -582.82f, 88.71f));//"4 Integrity Way Apt 30"),
                                        AppeyNess(new Vector3(-10.58f, -581.26f, 98.83f));//"4 Integrity Way Apt 35"),
                                        AppeyNess(new Vector3(-1477.14f, -538.75f, 55.5264f));//"Del Perro Heights Apt 7"),
                                        AppeyNess(new Vector3(-1474.17f, -528.124f, 68.1541f));//"Del Perro Heights Apt 20"),
                                        AppeyNess(new Vector3(-14.7964f, -581.709f, 79.4307f));//"4 Integrity Way Apt 28"),
                                        AppeyNess(new Vector3(-1468.14f, -541.815f, 73.4442f));//"Del Perro Heights Apt 4"),
                                        AppeyNess(new Vector3(-915.811f, -379.432f, 113.675f));//"Richard Majestic Apt 2"),
                                        AppeyNess(new Vector3(-614.86f, 40.6783f, 97.6001f));//"Tinsel Towers Apt 42"),
                                        AppeyNess(new Vector3(-773.407f, 341.766f, 211.397f));//"Eclipse Towers Apt 3"),
                                        AppeyNess(new Vector3(-172.983f, 494.033f, 137.654f));//"3655 Wild Oats Drive"),
                                        AppeyNess(new Vector3(340.941f, 437.18f, 149.39f));//"2044 North Conker Avenue"),
                                        AppeyNess(new Vector3(373.023f, 416.105f, 145.701f));//"2045 North Conker Avenue"),
                                        AppeyNess(new Vector3(-676.127f, 588.612f, 145.17f));//"2862 Hillcrest Avenue"),
                                        AppeyNess(new Vector3(-763.107f, 615.906f, 144.14f));//"2868 Hillcrest Avenue"),
                                        AppeyNess(new Vector3(-857.798f, 682.563f, 152.653f));//"2874 Hillcrest Avenue"),
                                        AppeyNess(new Vector3(120.5f, 549.952f, 184.097f));//"3677 Whispymound Drive"),
                                        AppeyNess(new Vector3(-1288.0f, 440.748f, 97.6946f));//"2113 Mad Wayne Thunder"),
                                    }
                                    AddMissWeaps(Mk2WeapsMain, bWeapSwap);
                                }
                            }
                        }
                        else if (iLookForPB == 0)
                        {
                            iPhoneDelay = Game.GameTime + iSPDelayTime;
                            iLookForPB = 1;
                        }
                        else if (iLookForPB == 1)
                        {
                            if (iPhoneDelay < Game.GameTime)
                            {
                                if (bOnCayoLand)
                                {
                                    if (Game.Player.Character.Position.Y > -3370.00f)
                                        TheCayoConnection(false);
                                }
                                else
                                {
                                    if (Game.Player.Character.Position.Y < -3370.00f)
                                        TheCayoConnection(true);
                                }
                                iLookForPB = 99;
                                BoxingClever();
                            }
                        }
                        else if (iLookForPB == 2)
                        {
                            if (World.GetDistance(Game.Player.Character.Position, vPhoneCorona) < 200.00f && !ThisPhone.HasBeenDamagedBy(Game.Player.Character))
                            {
                                if (World.GetDistance(Game.Player.Character.Position, vPhoneCorona) < 40.00f)
                                {
                                    if (!bRingRing && bPhoneAudio)
                                    {
                                        iWait4Sec = Game.GameTime + 1000;
                                        bRingRing = true;
                                        PlaySoundFrom("SCRIPT/ASSASSINATION_MULTI", "ASS_PAYPHONE_RING_master", "", ThisPhone.Position, true);
                                    }
                                    if (bPhoneCone)
                                        World.DrawMarker(MarkerType.VerticalCylinder, vPhoneCorona, Vector3.Zero, Vector3.Zero, new Vector3(1.00f, 1.00f, 1.00f), color: Color.Green);

                                    if (World.GetDistance(Game.Player.Character.Position, vPhoneCorona) < 2.00f && Game.Player.Character.IsOnFoot)
                                    {
                                        if (iWait4Sec < Game.GameTime)
                                        {
                                            fphdirect = ThisPhone.Heading + 90.00f;
                                            if (bPhoneAnim)
                                                PickUpThePhone();
                                            if (bRingRing)
                                            {
                                                bRingRing = false;
                                                StopThatSound();
                                                Chatter.Play();
                                            }
                                            if (PhoneBlip != null)
                                            {
                                                BlipCleaning(PhoneBlip);
                                                PhoneBlip = null;
                                            }
                                            if (!bOnCayoLand)
                                                ThisPhone.IsPersistent = false;
                                            ThisPhone = null;
                                            iLookForPB = 0;
                                            bLookingForPB = false;
                                            AreULocal();
                                        }
                                    }
                                }
                                else
                                {
                                    if (bRingRing)
                                    {
                                        bRingRing = false;
                                        StopThatSound();
                                    }
                                }
                            }
                            else
                            {
                                if (bRingRing)
                                {
                                    bRingRing = false;
                                    StopThatSound();
                                }
                                if (!bOnCayoLand)
                                    ThisPhone.IsPersistent = false;
                                ThisPhone = null;
                                if (PhoneBlip != null)
                                {
                                    BlipCleaning(PhoneBlip);
                                    PhoneBlip = null;
                                }
                                iLookForPB = 0;
                            }
                        }
                    }
                }
            }

            if (iFindingStuff > 0)
            {
                if (iFindingTime < Game.GameTime)
                    FindingStuff();
            }
            else if (!bOnCayoLand && !bBuildMode)
            {
                iFruit.Update();
                if (bIFrutiyAdd)
                {
                    if (iLookForPB == 2)
                    {
                        if (bRingRing)
                        {
                            bRingRing = false;
                            StopThatSound();
                        }
                        if (PhoneBlip != null)
                        {
                            BlipCleaning(PhoneBlip);
                            PhoneBlip = null;
                        }
                        iLookForPB = 0;
                    }
                    else if (Function.Call<bool>(Hash.IS_PLAYER_DEAD) || Function.Call<bool>(Hash.IS_PLAYER_BEING_ARRESTED))
                    {
                        if (bFubarRide || bWeaponMan || bMeeddicc)
                        {
                            bFubarRide = false;
                            Fubar_Clean();
                        }
                        else if (bImports)
                        {
                            Peggs.CurrentBlip.Remove();
                            Peggs.MarkAsNoLongerNeeded();
                            bIFrutiyAdd = false;
                            bImports = false;
                        }
                        else if (bBankTransfer)
                        {
                            bBankTransfer = false;
                            bIFrutiyAdd = false;
                            iCoinBats = 0;
                        }
                    }
                    else if (bFubarRide)
                    {
                        if (iFubCarzz == 0)
                        {
                            if (Game.Player.Character.IsInVehicle())
                            {
                                bFubarRide = false;
                                Fubar_Clean();
                            }
                            else if (Game.Player.Character.Position.DistanceTo(FubarCarX.Position) > 95.00f)
                            {
                                bFubarRide = false;
                                Fubar_Clean();
                            }
                            else
                            {
                                if (Game.Player.Character.Position.DistanceTo(vFuDest) > 25.00f)
                                {
                                    FUbarDrv.Task.ClearAll();
                                    vFuDest = Game.Player.Character.Position;
                                    if (FUbarDrv.IsInVehicle())
                                        FUbarDrv.Task.DriveTo(FubarCarX, vFuDest, 3.00f, 35.00f, 536871355);
                                    else if (FUbarDrv.IsDead)
                                    {
                                        bFubarRide = false;
                                        Fubar_Clean();
                                    }
                                    else
                                        FUbarDrv.Task.EnterVehicle(FubarCarX, VehicleSeat.Driver, -1, 8.00f);
                                }
                                else if (Game.Player.Character.Position.DistanceTo(FubarCarX.Position) < 5.00f)
                                {
                                    ControlerUI(sAltLang[527], 5000);
                                    iFubCarzz = 1;
                                }
                            }
                        }
                        else if (iFubCarzz == 1)
                        {
                            if (!Game.Player.Character.IsInVehicle(FubarCarX))
                            {
                                if (ButtonDown(23))
                                    Game.Player.Character.Task.EnterVehicle(FubarCarX, VehicleSeat.Passenger, -1, 8.00f);
                                else if (Game.Player.Character.Position.DistanceTo(FubarCarX.Position) > 150.00f || Game.Player.Character.IsInVehicle() || FUbarDrv.IsDead)
                                {
                                    bFubarRide = false;
                                    Fubar_Clean();
                                }
                            }
                            else
                            {
                                if (vFuMiss != Vector3.Zero)
                                    bFuToMishTarg = true;
                                else
                                {
                                    VTBTimerPool.Add(FuBar);
                                    FuBar.Label = "Fubar Fair : ";
                                }
                                vFuFees = FubarCarX.Position;
                                iFuFees = 5;
                                bFooWayPot = false;
                                iFubCarzz = 2;
                            }
                        }
                        else if (iFubCarzz == 2)
                        {
                            if (Game.Player.Character.IsInVehicle(FubarCarX))
                            {
                                if (bFooWayPot)
                                {
                                    if (bFuToMishTarg)
                                    {
                                        ControlerUI(sAltLang[425], 1);
                                        if (Game.IsControlJustPressed(2, GTA.Control.Detonate))
                                        {
                                            bFubarRide = false;
                                            Fubar_Carzz(true);
                                        }
                                    }
                                    else
                                    {
                                        if (!Function.Call<bool>(Hash.IS_WAYPOINT_ACTIVE))
                                            bFooWayPot = false;
                                        else
                                        {
                                            ControlerUI(sAltLang[424], 1);
                                            if (Game.IsControlJustPressed(2, GTA.Control.VehicleDuck))
                                            {
                                                bFubarRide = false;
                                                Fubar_Carzz(false);
                                            }
                                            else if (iFuClock < Game.GameTime)
                                                Fubar_Math(true, false);
                                            else if (iNSPMBank < iFuFees)
                                            {
                                                FUbarDrv.Task.ClearAll();
                                                FUbarDrv.Task.ParkVehicle(FubarCarX, FubarCarX.Position, FubarCarX.Heading);
                                                Fubar_Math(false, false);
                                                iFuFees *= -1;
                                                YourCoinPopUp(iFuFees, 1, "Fubar Cars");
                                                iFuFees = 0;
                                                bFubarRide = false;
                                                Fubar_Clean();
                                            }

                                            if (!bOnTheJob)
                                                VTBTimerPool.Draw();
                                        }
                                    }
                                }
                                else
                                {
                                    if (bFuToMishTarg)
                                    {
                                        if (FUbarDrv.IsInVehicle())
                                            FUbarDrv.Task.DriveTo(FubarCarX, vFuMiss, 3.00f, 35.00f, 536871355);
                                        bFooWayPot = true;
                                    }
                                    else if (!Function.Call<bool>(Hash.IS_WAYPOINT_ACTIVE))
                                        ControlerUI(sAltLang[426], 1);
                                    else
                                    {
                                        vFuDest = World.GetWaypointPosition();
                                        if (FUbarDrv.IsInVehicle())
                                            FUbarDrv.Task.DriveTo(FubarCarX, vFuDest, 3.00f, 35.00f, 536871355);
                                        bFooWayPot = true;
                                    }

                                }
                            }
                            else
                            {
                                Fubar_Math(false, false);
                                iFuFees *= -1;
                                YourCoinPopUp(iFuFees, 1, "Fubar Cars");
                                iFuFees = 0;
                                bFubarRide = false;
                                Fubar_Clean();
                            }
                        }
                    }
                    else if (bImports)
                    {
                        if (!Peggs.Exists())
                        {
                            bTrainM = false;
                            bIFrutiyAdd = false;
                            bImports = false;
                            UI.Notify("DLC Spawn Error please update trainer mod");
                        }
                        else if (Game.Player.Character.IsInVehicle())
                        {
                            Peggs.CurrentBlip.Remove();
                            Peggs.MarkAsNoLongerNeeded();
                            bIFrutiyAdd = false;
                            bImports = false;
                        }
                    }
                    else if (bWeaponMan)
                    {
                        if (iFubCarzz == 0)
                        {
                            if (Game.Player.Character.IsInVehicle())
                            {
                                bFubarRide = false;
                                Fubar_Clean();
                            }
                            else if (Game.Player.Character.Position.DistanceTo(FubarCarX.Position) > 155.00f)
                            {
                                bFubarRide = false;
                                Fubar_Clean();
                            }
                            else
                            {
                                if (World.GetNextPositionOnStreet(Game.Player.Character.Position).DistanceTo(vFuDest) > 25.00f)
                                {
                                    FUbarDrv.Task.ClearAll();
                                    vFuDest = World.GetNextPositionOnStreet(Game.Player.Character.Position);
                                    if (FUbarDrv.IsInVehicle())
                                        FUbarDrv.Task.DriveTo(FubarCarX, vFuDest, 3.00f, 20.00f, 536871355);
                                    else if (FUbarDrv.IsDead)
                                    {
                                        bFubarRide = false;
                                        Fubar_Clean();
                                    }
                                }
                                else if (Game.Player.Character.Position.DistanceTo(FubarCarX.Position) < 15.00f)
                                {
                                    FUbarDrv.Task.ClearAll();
                                    FUbarDrv.Task.LeaveVehicle();
                                    iFubCarzz = 1;
                                    iWait4Sec = Game.GameTime + 1000;
                                }
                            }
                        }
                        else if (iFubCarzz == 1)
                        {
                            if (FUbarDrv.IsDead || FubarCarX.IsDead)
                            {
                                bFubarRide = false;
                                Fubar_Clean();
                            }
                            else if (FUbarDrv.IsInVehicle())
                            {
                                if (iWait4Sec < Game.GameTime)
                                {
                                    FUbarDrv.Task.ClearAll();
                                    FUbarDrv.Task.LeaveVehicle();
                                    iWait4Sec = Game.GameTime + 1000;
                                }
                            }
                            else
                            {
                                Vector3 Vpos = FubarCarX.Position - (FubarCarX.ForwardVector * 4.75f);
                                FUbarDrv.Task.ClearAll();
                                FUbarDrv.Task.GoTo(Vpos, true);
                                iFubCarzz = 2;
                            }
                        }
                        else if (iFubCarzz == 2)
                        {
                            Vector3 Vpos = FubarCarX.Position - (FubarCarX.ForwardVector * 4.75f);
                            if (FUbarDrv.IsDead || FubarCarX.IsDead || Game.Player.Character.Position.DistanceTo(Vpos) > 150.00f)
                            {
                                bFubarRide = false;
                                Fubar_Clean();
                            }
                            else if (FUbarDrv.Position.DistanceTo(Vpos) < 2.50f && !FubarCarX.IsDoorOpen(VehicleDoor.BackLeftDoor))
                            {
                                FUbarDrv.Task.ClearAll();
                                FUbarDrv.Task.StandStill(-1);
                                FubarCarX.OpenDoor(VehicleDoor.BackLeftDoor, false, false);
                                FubarCarX.OpenDoor(VehicleDoor.BackRightDoor, false, false);
                            }
                            else if (Game.Player.Character.Position.DistanceTo(Vpos) < 1.50f && FubarCarX.IsDoorOpen(VehicleDoor.BackLeftDoor))
                            {
                                ControlerUI(sAltLang[427], 1);

                                if (Game.IsControlJustPressed(2, GTA.Control.Detonate))
                                {
                                    FUbarDrv.Task.StandStill(-1);
                                    Script.Wait(1000);
                                    WeaponsMenu();
                                }
                            }
                        }
                    }
                    else if (bBankTransfer)
                    {
                        if (iCoinBats == 1)
                            ControlerUI("NSCoins = " + ShowComs(iNSPMBank, true, true) + sAltLang[428], 1);
                        else if (iCoinBats == 2)
                            ControlerUI(sAltLang[400] + " = " + ShowComs(iNSPMCLowRisk, true, true) + sAltLang[428], 1);
                        else if (iCoinBats == 3)
                            ControlerUI(sAltLang[401] + " = " + ShowComs(iNSPMCHighRisk, true, true) + sAltLang[428], 1);
                        else if (iCoinBats == 4)
                        {
                            if (Function.Call<bool>(Hash._HAS_NAMED_SCALEFORM_MOVIE_LOADED, "ATM"))
                                ControlerUI("NSCoins = " + ShowComs(iNSPMBank, true, true) + sAltLang[428], 1);
                            else
                            {
                                bIFrutiyAdd = false;
                                iCoinBats = 0;
                            }
                        }
                        else
                            ControlerUI("Yacht Price = " + ShowComs(iYachtPrice, true, true) + sAltLang[428], 1);

                        if (Game.IsControlPressed(2, GTA.Control.Detonate))
                        {
                            if (iCoinBats == 4)
                                NSCoinCount(false, 1);
                            else
                                NSCoinCount(false, iCoinBats);
                        }
                        else if (Game.IsControlPressed(2, GTA.Control.Context))
                        {
                            if (iCoinBats == 4)
                                NSCoinCount(true, 1);
                            else
                                NSCoinCount(true, iCoinBats);
                        }
                        else if (Game.IsControlPressed(2, GTA.Control.Jump))
                        {
                            bIFrutiyAdd = false;
                            iCoinBats = 0;
                        }
                        else
                        {
                            iFaster_01 = Game.GameTime + 4000;
                            iFaster_02 = Game.GameTime + 15000;
                            iFaster_03 = Game.GameTime + 25000;
                        }
                    }
                    else if (bMeeddicc)
                    {
                        if (iFubCarzz == 0)
                        {
                            if (Game.Player.Character.IsInVehicle())
                            {
                                bFubarRide = false;
                                Fubar_Clean();
                            }
                            else if (Game.Player.Character.Position.DistanceTo(FubarCarX.Position) > 95.00f)
                            {
                                bFubarRide = false;
                                Fubar_Clean();
                            }
                            else
                            {
                                if (World.GetNextPositionOnStreet(Game.Player.Character.Position).DistanceTo(vFuDest) > 25.00f)
                                {
                                    FUbarDrv.Task.ClearAll();
                                    vFuDest = World.GetNextPositionOnStreet(Game.Player.Character.Position);
                                    if (FUbarDrv.IsInVehicle())
                                        FUbarDrv.Task.DriveTo(FubarCarX, vFuDest, 3.00f, 20.00f, 536871355);
                                    else if (FUbarDrv.IsDead)
                                    {
                                        bFubarRide = false;
                                        Fubar_Clean();
                                    }
                                }
                                else if (Game.Player.Character.Position.DistanceTo(FubarCarX.Position) < 15.00f)
                                {
                                    FUbarDrv.Task.ClearAll();
                                    FUbarDrv.Task.LeaveVehicle();
                                    iFubCarzz = 1;
                                    iWait4Sec = Game.GameTime + 1000;
                                }
                            }
                        }
                        else if (iFubCarzz == 1)
                        {
                            if (FUbarDrv.IsDead)
                            {
                                bFubarRide = false;
                                Fubar_Clean();
                            }
                            else if (FUbarDrv.IsInVehicle())
                            {
                                if (iWait4Sec < Game.GameTime)
                                {
                                    FUbarDrv.Task.ClearAll();
                                    FUbarDrv.Task.LeaveVehicle();
                                    iWait4Sec = Game.GameTime + 1000;
                                }
                            }
                            else
                            {
                                Vector3 Vpos = FubarCarX.Position - (FubarCarX.ForwardVector * 3.75f);
                                FUbarDrv.Task.ClearAll();
                                FUbarDrv.Task.GoTo(Game.Player.Character);
                                iFubCarzz = 2;
                            }
                        }
                        else if (iFubCarzz == 2)
                        {
                            Vector3 Vpos = FubarCarX.Position - (FubarCarX.ForwardVector * 3.75f);
                            if (FUbarDrv.IsDead || Game.Player.Character.Position.DistanceTo(Vpos) > 150.00f)
                            {
                                bFubarRide = false;
                                Fubar_Clean();
                            }
                            else if (Game.Player.Character.Position.DistanceTo(Game.Player.Character.Position) < 1.50f)
                            {
                                FUbarDrv.Task.PlayAnimation("amb@medic@standing@timeofdeath@idle_a", "idle_a", 8.00f, 4000, false, 1.00f);
                                Game.Player.Character.Health = Game.Player.Character.MaxHealth;
                                bFubarRide = false;
                                Fubar_Clean();
                            }
                        }
                    }
                }
                else if (bBankTransfer)
                {
                    bBankTransfer = false;
                    WriteXmlSet();
                }
                else if (Function.Call<bool>(Hash._HAS_NAMED_SCALEFORM_MOVIE_LOADED, "ATM"))
                {
                    bIFrutiyAdd = true;
                    bBankTransfer = true;
                    iCoinBats = 4;
                }
            }
        }
        //private void OnKeyDown(object sender, KeyEventArgs e)
        //{
            //if (e.KeyCode == Keys.K)
        //}
    }
}