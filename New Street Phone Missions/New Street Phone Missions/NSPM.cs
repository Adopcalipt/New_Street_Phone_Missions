using GTA;
using GTA.Math;
using GTA.Native;
using NativeUI;
using New_Street_Phone_Missions.Classes;
using System;
using System.IO;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
//using System.Windows.Forms;

namespace New_Street_Phone_Missions
{
    public class NSPM : Script
    {
        private bool bRingRing = false;

        private int iATMSlow = 0;
        private int iPhoneDelay = 0;
        public static int iWait4Sec = 0;

        private Prop Trinket = null;
        private Prop PhoneHome = null;

        private List<Prop> CayoPhones = new List<Prop>();
        private readonly List<Vector4> CayoPhoneV4 = new List<Vector4>
        {
            new Vector4(4969.19336f, -5600.90381f, 23.20f, -31.9523754f),
            new Vector4(5099.08643f, -5719.28613f, 16.00f, -124.599854f),
            new Vector4(5368.04688f, -5434.42529f, 48.70f, 145.241089f),
            new Vector4(4892.95898f, -5453.17578f, 30.40f, -2.67467785f),
            new Vector4(4914.79004f, -5294.33057f, 7.90f, -88.7225647f),
            new Vector4(5117.92285f, -5189.38135f, 2.10f, -90.0995636f),
            new Vector4(5152.40479f, -5058.93018f, 3.80f, 87.5917511f),
            new Vector4(5142.36719f, -4952.96729f, 14.00f, 49.3263206f),
            new Vector4(5028.74512f, -4635.70703f, 4.70f, -101.267654f),
            new Vector4(4872.50977f, -4482.87988f, 9.80f, 88.2257385f),
            new Vector4(4492.33105f, -4522.10205f, 4.10f, 109.983139f),
            new Vector4(4365.35645f, -4579.11377f, 4.00f, -69.9810333f),
            new Vector4(5177.31738f, -4651.67627f, 2.20f, 167.547989f),
            new Vector4(5264.31201f, -5420.22607f, 65.50f, 55.1944542f),
            new Vector4(5132.79688f, -5527.75342f, 53.70f, 119.800873f),
            new Vector4(5032.13135f, -5759.62793f, 15.30f, 138.167618f),
            new Vector4(5038.44678f, -5120.1416f, 5.50f, -178.255859f)
        };

        private static Trucking TruckMissions = null;
        private static GetDriver BankRobMissions = null;
        private static Packaging PackManMissions = null;
        private static ConFetch ConvictMissions = null;
        private static FubarCars FubarMissions = null;
        private static DeliverBert BertMissions = null;
        private static CeoImpExp CeoExMissions = null;
        private static CropDusting CropMissions = null;
        private static HiggsTours HiggsMissions = null;
        private static LsHealthTrust AmbMissions = null;
        private static FireStarter FireMissions = null;
        private static FollowOn FollMissions = null;
        private static JohnDeer JohnnyMissions = null;
        private static RaceMeet RacingMissions = null;
        private static DaBomb BombingMissions = null;
        private static SmashHits HitMissions = null;
        private static TakinSnip SnipMissions = null;
        private static Securicore MoneyMissions = null;
        private static ArgyBargy BargeMissions = null;
        private static YachtParty YachtMissions = null;
        private static PhishingTrip PhishMissions = null;
        private static ShipShape BoatDelMissions = null;
        private static SubWay BogSubMission = null;
        private static ImpExpMi ImpExpMissions = null;
        private static Wonga DebtMissions = null;
        private static LostMc BikerMissions = null;
        private static CargoLift CargoMissions = null;
        private static SharkTank SharkMissions = null;
        private static MiniMart HappySMissions = null;
        private static MoreThan MoresMissions = null;
        private static CarBall Temp01Missions = null;
        private static Cales Temp02Missions = null;
        private static Dupes Temp03Missions = null;
        private static Dimond Temp04Missions = null;
        private static Silo Temp06Missions = null;
        private static ParaNoid FreeFallMissions = null;
        private static FubarEats DellWhoMissions = null;
        private static CayoFollow CayFolMissions = null;
        private static CayoHeist CayHeiMissions = null;

        private int iGetBackIn = 0;
        private int iAngerTax = 3;
        private int FallFor = 0;

        public static int JobType = 0;
        public static int JobSeq = 0;
        public static int LocationX = 0;

        public static List<PedMultiTask> MultiPed = new List<PedMultiTask>();

        private float fKeepMoving = 0.00f;

        private List<string> InternalIPLS = new List<string>();
        private int InternalLoad = -1;

        public NSPM()
        {
            DataStore.DataStoreLoad();
            Tick += OnTick;
            //KeyDown += Main_KeyDown;
            Interval = 1;
        }

        private void JobLot()
        {
            LoggerLight.LogThis("JobLot");

            LocationX = ReturnStuff.WhereAreYou();

            int iCant = RandomX.FindRandomList("MishSelect", LessRandomMain(LocationX));
            
            if (iCant == -1)
            {
                JobType = 0;
                ControlSelect(4);
            }
            else
            {
                JobType = iCant;
                TakeNote();
                ControlSelect(1);
            }
        }
        public static List<int> LessRandomMain(int iArea)
        {
            LoggerLight.LogThis("LessRandomMain");
            List<int> NewList = new List<int>();

            if (DataStore.MySettings.Truckin)
            {
                if (iArea < 7)
                    NewList.Add(1);
                else if (iArea == 7 && MissionData.TruckStop07.Count > 0)
                    NewList.Add(1);
                else if (iArea == 8 && MissionData.TruckStop08.Count > 0)
                    NewList.Add(1);
                else if (iArea == 9 && MissionData.TruckStop09.Count > 0)
                    NewList.Add(1);
            }
            if (DataStore.MySettings.Getaway)
            {
                if (iArea < 7)
                    NewList.Add(2);
            }
            if (DataStore.MySettings.Packages)
            {
                if (iArea < 7)
                    NewList.Add(3);
                else if (iArea == 7)
                    NewList.Add(101);
                else if (GotPacks(iArea))
                    NewList.Add(3);
            }
            if (DataStore.MySettings.Convicts)
            {
                if (iArea < 7)
                    NewList.Add(4);
            }
            if (DataStore.MySettings.FUber)
            {
                if (iArea < 7)
                    NewList.Add(5);
                else if (GotFubs(iArea))
                    NewList.Add(5);
            }
            if (DataStore.MySettings.Pilot)
            {
                if (iArea < 7)
                    NewList.Add(6);
            }
            if (DataStore.MySettings.Amulance)
            {
                if (iArea < 7)
                    NewList.Add(7);
                else if (GotFubs(iArea))
                    NewList.Add(7);
            }
            if (DataStore.MySettings.Follow)
            {
                if (iArea < 7)
                    NewList.Add(8);
                else if(iArea == 7)
                    NewList.Add(102);
            }
            if (DataStore.MySettings.LSFD)
            {
                if (iArea < 7)
                    NewList.Add(9);
            }
            if (DataStore.MySettings.Johnny)
            {
                if (iArea < 7)
                    NewList.Add(10);
                else if (GotFubs(iArea))
                    NewList.Add(10);
            }
            if (DataStore.MySettings.Raceist)
            {
                if (iArea < 7)
                    NewList.Add(11);
                else if (GotRacisits(iArea))
                    NewList.Add(11);
            }
            if (DataStore.MySettings.BBBomb)
            {
                if (iArea < 8)
                    NewList.Add(12);
                else if (iArea == 8 && MissionData.BsArea08.Count > 0)
                    NewList.Add(12);
                else if (iArea == 9 && MissionData.BsArea09.Count > 0)
                    NewList.Add(12);
            }
            if (DataStore.MySettings.Assassination)
            {
                if (iArea < 8)
                    NewList.Add(13);
                else if (iArea == 8 && MissionData.HitList08.Count > 0)
                    NewList.Add(13);
                else if (iArea == 9 && MissionData.HitList09.Count > 0)
                    NewList.Add(13);
            }
            if (DataStore.MySettings.Sniper)
            {
                if (iArea < 8)
                    NewList.Add(14);
                else if (iArea == 8 && MissionData.Sniping08.Count > 0)
                    NewList.Add(14);
                else if (iArea == 9 && MissionData.Sniping09.Count > 0)
                    NewList.Add(14);
            }
            if (DataStore.MySettings.Gruppe6)
            {
                if (iArea < 7)
                    NewList.Add(15);
            }
            if (DataStore.MySettings.Sailor)
            {
                if (iArea < 7)
                    NewList.Add(16);
            }
            if (DataStore.MySettings.ImportantEx)
            {
                if (iArea < 7)
                    NewList.Add(17);
            }
            if (DataStore.MySettings.DebtCollect)
            {
                if (iArea < 7)
                    NewList.Add(18);
                else if (GotFubs(iArea))
                    NewList.Add(18);
            }
            if (DataStore.MySettings.MCBusiness)
            {
                if (iArea < 7)
                    NewList.Add(19);
            }
            if (DataStore.MySettings.BayLift)
            {
                if (iArea < 7)
                    NewList.Add(20);
            }
            if (DataStore.MySettings.Sharks)
            {
                if (iArea < 8)
                    NewList.Add(21);
                else if (iArea == 8 && MissionData.Sharky08.Count > 0)
                    NewList.Add(21);
                else if (iArea == 9 && MissionData.Sharky09.Count > 0)
                    NewList.Add(21);
            }
            if (DataStore.MySettings.HappyShopper)
            {
                if (iArea < 7)
                    NewList.Add(22);
            }
            if (DataStore.MySettings.MoresMute)
            {
                if (iArea < 7)
                    NewList.Add(23);
            }
            if (DataStore.MySettings.TempJob)
            {
                if (iArea < 7)
                    NewList.Add(24);
            }
            if (DataStore.MySettings.ParaDisplay)
            {
                if (iArea < 8)
                    NewList.Add(25);
            }
            if (DataStore.MySettings.Deliverwho)
            {
                if (iArea < 7)
                    NewList.Add(26);
                else if (GotFubs(iArea))
                    NewList.Add(5);
            }
            if (DataStore.MySettings.Thief)
            {
                if (iArea == 7)
                    NewList.Add(105);
            }

            if (NewList.Count == 0)
                NewList.Add(-1);

            return NewList;
        }
        public static bool GotPacks(int iArea)
        {
            bool GotIt = false;
            for (int i = 0; i < MissionData.PackageDeliverys.Count; i++)
            {
                if (MissionData.PackageDeliverys[i].Zone == iArea)
                    GotIt = true;
            }
            return GotIt;
        }
        public static bool GotFubs(int iArea)
        {
            bool GotIt = false;

            if (iArea == 7)
                GotIt = false;
            else if (iArea == 8 && MissionData.Area_08_Resurant.Count > 0 && MissionData.Area_08_Lesure.Count > 0 && MissionData.Area_08_Houses.Count > 0)
                GotIt = true;
            else if (iArea == 9 && MissionData.Area_09_Resurant.Count > 0 && MissionData.Area_09_Lesure.Count > 0 && MissionData.Area_09_Houses.Count > 0)
                GotIt = true;

            return GotIt;
        }
        public static bool GotRacisits(int iArea)
        {
            bool GotIt = false;
            for (int i = 0; i < MissionData.MyRacists.Count; i++)
            {
                if (MissionData.MyRacists[i].Zone == iArea)
                    GotIt = true;
            }
            return GotIt;
        }
        public static void TakeNote()
        {
            if (JobType == 1)
                UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[49];
            else if (JobType == 2)
                UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[50];
            else if (JobType == 3)
                UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[51];
            else if (JobType == 4)
                UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[52];
            else if (JobType == 5)
                UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[53];
            else if (JobType == 6)
            {
                if (LocationX == 1)
                    UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[54];
                else if (LocationX == 2)
                    UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[55];
                else if (LocationX == 3)
                    UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[56];
                else if (LocationX == 4)
                    UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[57];
                else if (LocationX == 5)
                    UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[58];
                else
                    UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[59];
            }
            else if (JobType == 7)
                UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[60];
            else if (JobType == 8)
                UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[61];
            else if (JobType == 9)
                UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[62];
            else if (JobType == 10)
                UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[63];
            else if (JobType == 11)
                UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[64];
            else if (JobType == 12)
                UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[65];
            else if (JobType == 13)
                UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[66];
            else if (JobType == 14)
                UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[92];
            else if (JobType == 15)
                UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[67];
            else if (JobType == 16)
            {
                if (LocationX == 1)
                    UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[68];
                else if (LocationX == 2)
                {
                    if (DataStore.MyAssets.OwnaYacht)
                        UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[69];
                    else
                        UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[70];
                }
                else if (LocationX == 3)
                    UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[71];
                else if (LocationX == 4)
                    UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[72];
                else if (LocationX == 5)
                    UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[73];
                else
                    UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[74];
            }
            else if (JobType == 17)
                UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[75];
            else if (JobType == 18)
                UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[76];
            else if (JobType == 19)
                UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[77];
            else if (JobType == 20)
                UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[78];
            else if (JobType == 21)
                UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[79];
            else if (JobType == 22)
                UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[80];
            else if (JobType == 23)
                UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[81];
            else if (JobType == 24)
            {
                if (LocationX == 1)
                    UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[82];
                else if (LocationX == 2)
                    UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[83];
                else if (LocationX == 3)
                    UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[84];
                else if (LocationX == 4)
                    UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[85];
                else if (LocationX == 5)
                    UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[86];
                else
                    UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[87];
            }
            else if (JobType == 25)
                UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[88];
            else if (JobType == 26)
                UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[89];
            else if (JobType == 101)
                UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[44];
            else if (JobType == 102)
                UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[45];
            else if (JobType == 105)
                UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[48];
            else
                UiDisplay.sSubDisplay = DataStore.MyLang.Jobtext[90];

            UiDisplay.bSubDisplay = true;
        }
        private void TheCayoConnection(bool bLoadCayo)
        {
            LoggerLight.LogThis("TheCayoConnection");

            if (bLoadCayo)
            {
                for (int i = 0; i < CayoPhoneV4.Count; i++)
                {
                    Vector3 vPos = new Vector3(CayoPhoneV4[i].X, CayoPhoneV4[i].Y, CayoPhoneV4[i].Z);
                    Vector3 vRot = new Vector3(0.00f, 0.00f, CayoPhoneV4[i].R);

                    Prop Bpox = EntityBuild.BuildProp("p_phonebox_02_s", vPos, vRot, true, true);
                    if (Bpox != null)
                        CayoPhones.Add(new Prop(Bpox.Handle));
                }
                MissionData.PropList_01.Clear();
                DataStore.OnCayoLand = true;
            }
            else
            {
                for (int i = 0; i < CayoPhones.Count; i++)
                    CayoPhones[i].Delete();
                CayoPhones.Clear();

                DataStore.OnCayoLand = false;
            }
        }
        public void PlayerPlays()
        {
            LoggerLight.LogThis("PlayerPlays");

            UI.ShowSubtitle("", 1);

            if (DataStore.MySettings.EnemyStrength)
                Function.Call(Hash.SET_AI_WEAPON_DAMAGE_MODIFIER, 0.10f);

            if (JobType == 1)
                Truckin();
            else if (JobType == 2)
                GetAwayDriver();
            else if (JobType == 3)
                Packages(null);
            else if (JobType == 4)
                Convicts();
            else if (JobType == 5)
                FUber();
            else if (JobType == 6)
                Pilot();
            else if (JobType == 7)
                Ambulance(null);
            else if (JobType == 8)
                Follow();
            else if (JobType == 9)
                FireDept(null);
            else if (JobType == 10)
                HeresJohnny();
            else if (JobType == 12)
                BBBomb();
            else if (JobType == 13)
                HitMan();
            else if (JobType == 14)
                TheSnipper();
            else if (JobType == 15)
                MrMOneyMAn(null);
            else if (JobType == 16)
                SeaBattles();
            else if (JobType == 17)
                ImportsExpo();
            else if (JobType == 18)
                DebtCollect();
            else if (JobType == 19)
                BikerRaids();
            else if (JobType == 20)
                CargoCollect();
            else if (JobType == 21)
                DeepDown();
            else if (JobType == 22)
                HappyShopper();
            else if (JobType == 23)
                MoresMuted();
            else if (JobType == 24)
                TempAgency();
            else if (JobType == 25)
                ParaDisplay();
            else if (JobType == 26)
                Deliverwho();
            else if (JobType == 101)
                CayoPacks();
            else if (JobType == 102)
                CayoFollow();
            else if (JobType == 105)
                CayoThief();

            LoggerLight.LogThis("JobType == " + JobType + ", LocationX == " + LocationX);
        }
        private void Truckin()
        {
            LoggerLight.LogThis("Truckin");

            TruckMissions = new Trucking(LocationX);

            Trucking_AttachStuff(TruckMissions.Start.Type, TruckMissions.Trail, TruckMissions.Trail2);

            BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[0], "", 5000);

            DataStore.OnTheJob = true;
        }
        private static void GetAwayDriver()
        {
            LoggerLight.LogThis("GetAwayDriver");

            BankRobMissions = new GetDriver(MissionData.FindBank(LocationX), MissionData.FindBankEnd());

            EntityBuild.NPCSpawn(new PedFeat(ReturnStuff.RandNPC(13), false, 150, 1), BankRobMissions.MyBank.Ped01, 77.30f);
            EntityBuild.NPCSpawn(new PedFeat(ReturnStuff.RandNPC(13), false, 150, 1), BankRobMissions.MyBank.Ped02, 77.30f);
            EntityBuild.NPCSpawn(new PedFeat("cs_bankman", false, 150, 1), BankRobMissions.MyBank.Ped03, 77.30f);

            BankRobMissions.Robber01 = EntityBuild.NPCSpawn(new PedFeat("", true, 190, 0, 9, 4), BankRobMissions.MyBank.Robbers, 77.30f); ;
            BankRobMissions.Robber02 = EntityBuild.NPCSpawn(new PedFeat("", true, 190, 0, 9, 4), BankRobMissions.MyBank.Robbers, 77.30f);
            BankRobMissions.Robber03 = EntityBuild.NPCSpawn(new PedFeat("", true, 190, 0, 9, 4), BankRobMissions.MyBank.Robbers, 77.30f);

            Function.Call(Hash.SET_PED_RELATIONSHIP_GROUP_HASH, BankRobMissions.Robber01.Handle, Function.Call<int>(Hash.GET_HASH_KEY, "COUGAR"));
            Function.Call(Hash.SET_PED_RELATIONSHIP_GROUP_HASH, BankRobMissions.Robber02.Handle, Function.Call<int>(Hash.GET_HASH_KEY, "COUGAR"));
            Function.Call(Hash.SET_PED_RELATIONSHIP_GROUP_HASH, BankRobMissions.Robber03.Handle, Function.Call<int>(Hash.GET_HASH_KEY, "COUGAR"));

            EntityBuild.AddGroupie(BankRobMissions.Robber01);
            EntityBuild.AddGroupie(BankRobMissions.Robber02);
            EntityBuild.AddGroupie(BankRobMissions.Robber03);

            if (LocationX == 99)
            {

                BankRobMissions.MyEnd = new GetawaysEnd(new Vector3(-1615.899f, 4380.983f, 2.284f), "dinghy3", new Vector4(-1582.375f, 4395.262f, 0.095f, 7.008f), false);
                JobSeq = 0;
                JobType = 2;
                BankRobMissions.AlowAir = true;
                DataStore.LookingForPB = false;
                BigMessageThread.MessageInstance.ShowSimpleShard("Pacific Standard", "", 5000);
                BankRobMissions.CashTotal = 4500000;
            }
            else
            {
                BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[1], "", 5000);
                BankRobMissions.CashTotal = RandomX.RandInt(1100000, 1400000);
            }

            JobSeq = 0;
            EntityBuild.Groupies(true, Game.Player.Character);
            DataStore.OnTheJob = true;
        }
        private void Packages(Vehicle Vdel)
        {
            LoggerLight.LogThis("Packages");

            PackManMissions = new Packaging(LocationX);

            MissionData.vFuMiss = PackManMissions.MyPacks.FuStop;

            UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[3], "" + PackManMissions.PackDeliv + "/" + PackManMissions.PackCount + "", 0f, false));
            UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[1], "", 0f, false));

            BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[2], "", 5000);

            if (Vdel != null)
            {
                if (Vdel.Exists())
                {
                    Vector4 Here = new Vector4(Vdel.Position.X, Vdel.Position.Y, Vdel.Position.Z, Vdel.Heading);
                    Vdel.Delete();
                    EntityBuild.WarptoAnyVeh(PackManMissions.DeliverVeh, Game.Player.Character, 1);
                    PackManMissions.DeliverVeh.Position = Here.V3;
                    PackManMissions.DeliverVeh.Heading = Here.R;
                    EntityBuild.DriveToDest(PackManMissions.DeliverVeh, PackManMissions.Packlist[PackManMissions.PackDeliv], Game.Player.Character, 35f, 1074528293);
                    JobSeq = 1;
                }
            }

            DataStore.OnTheJob = true;
        }
        private void Convicts()
        {
            LoggerLight.LogThis("Convicts");

            ConvictMissions = new ConFetch(MissionData.FindCons(LocationX));

            MissionData.vFuMiss = ConvictMissions.Parade.FuPark;
            ConvictMissions.Bus = EntityBuild.VehicleSpawn(new VehMods("PBus", 0, 66, true, DataStore.MyLang.Maptext[4]), ConvictMissions.Parade.BusPark);
            ConvictMissions.Patrol = RandomX.RandInt(0, ConvictMissions.Parade.ConMarch.Count - 1);

            BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[3], "", 5000);
            DataStore.OnTheJob = true;
        }
        private void FUber()
        {
            LoggerLight.LogThis("FUber");

            BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[4], "", 5000);
            SearchFor.MakeCarz.Add(new FindVeh(5f, 120f, new VehMods("Dilettante", 3, 66, false, DataStore.MyLang.Maptext[16], false, true, 111, 111, -10, "Fubar"), true, true));

            Fubar_GetLocals(0, 1, null);

            DataStore.OnTheJob = true;
        }
        private void Pilot()
        {
            LoggerLight.LogThis("Pilot");

            if (LocationX == 1)
            {
                ReturnStuff.CustomList.Add("HOWARD");
                ReturnStuff.CustomList.Add("STUNT");
                ReturnStuff.CustomList.Add("mammatus");
                ReturnStuff.CustomList.Add("molotok");
                ReturnStuff.CustomList.Add("nokota");
                ReturnStuff.CustomList.Add("rogue");

                MuliRace MyRace = MissionData.MyRacists[0];
                RacingMenu MyMen = new RacingMenu(0);
                MyMen.VehClass = 31;
                MyMen.Solo = true;
                MyMen.Weather = "EXTRASUNNY";
                MyMen.Time = 12;
                MyMen.Race = 0;
                RacingMissions = new RaceMeet(MyMen);

                for (int i = 0; i < RacingMissions.YourRace.PopLists.Count; i++)
                    EntityBuild.BuildProp(RacingMissions.YourRace.PopLists[i].Prop, RacingMissions.YourRace.PopLists[i].Pos, RacingMissions.YourRace.PopLists[i].Rot, true, true);

                MissionData.MishVeh = EntityBuild.VehicleSpawn(new VehMods(ReturnStuff.SelectAVeh(22, 0), 0, 66, true, DataStore.MyLang.Maptext[6], true, true, ReturnStuff.FunPlates()), RacingMissions.YourRace.PickVeh);
                BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[5], DataStore.MyLang.Jobtext[25], 5000);
                MissionData.vFuMiss = MyRace.Fubars;
                RacingMissions.StartLine = true;
                JobType = 11;

                UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[15], "00:00:00", 0f, false));
                UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[14], ReturnStuff.ShowComs(RacingMissions.BestRL.Time, false, true), 0f, false));
            }
            else if (LocationX == 2)
            {
                MissionData.vFuMiss = new Vector3(-752.767f, -243.5818f, 36.58149f);

                FubarMissions = new FubarCars(0,0,null);

                FubarMissions.Start = MissionData.AppartmentBlocks(RandomX.FindRandom("Pilot02a", 1, 2), 2, -1, -1, true);
                FubarMissions.End = MissionData.AppartmentBlocks(2, 15, -1, -1, true);

                FubarMissions.SpTarg = new Vector3(-760.15f, -226.8486f, 36.28f);
                FubarMissions.FubVeh = EntityBuild.VehicleSpawn(new VehMods("Volatus", 0, true), new Vector3(-738.2433f, -222.94f, 47.47f), 252.7368f);

                BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[5], DataStore.MyLang.Jobtext[26], 5000);
            }
            else if (LocationX == 3)
            {
                MissionData.vFuMiss = new Vector3(-2471.704f, 3226.925f, 32.31913f);

                BertMissions = new DeliverBert();
                BertMissions.Bert = EntityBuild.VehicleSpawn(new VehMods("Strikeforce", 0, 66, true, DataStore.MyLang.Maptext[6], true), BertMissions.BertPark);
                Function.Call(Hash.SET_VEHICLE_CAN_BE_TARGETTED, BertMissions.Bert.Handle, true);
                List<Vehicle> MyVics = new List<Vehicle> { new Vehicle(BertMissions.Bert.Handle) };
                List<Ped> MyPeds = new List<Ped>();
                float fVicDam = BertMissions.Bert.BodyHealth + BertMissions.Bert.EngineHealth + BertMissions.Bert.PetrolTankHealth;

                ReturnStuff.DamageControl = new Crash4Cash((int)fVicDam, BertMissions.CashPay, MyVics, MyPeds);

                Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "restrictedareas");
        
                BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[5], DataStore.MyLang.Jobtext[27], 5000);
            }
            else if (LocationX == 4)
            {
                MissionData.vFuMiss = new Vector3(2558.651f, -344.7433f, 92.48465f);

                CeoExMissions = new CeoImpExp();
                
                CeoExMissions.DistanceReq = CeoExMissions.Targ01.DistanceTo(CeoExMissions.Targ02);

                BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[5], DataStore.MyLang.Jobtext[28], 5000);

                EntityBuild.AddTarget(new BlipForm(CeoExMissions.Stairs[CeoExMissions.Patrol], true, 5, -1, DataStore.MyLang.Maptext[52], 1f));
            }
            else if (LocationX == 5)
            {
                MissionData.vFuMiss = new Vector3(2167.74f, 4771.713f, 40.70564f);

                CropMissions = new CropDusting();

                BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[5], DataStore.MyLang.Jobtext[29], 5000);
            }
            else
            {
                MissionData.vFuMiss = new Vector3(-279.6988f, 6106.246f, 30.70985f);

                HiggsMissions = new HiggsTours();

                List<Vector3> Higgs = new List<Vector3>();

                int iRandFirst = RandomX.RandInt(1, 5);
                if (iRandFirst == 1)
                    Higgs.Add(new Vector3(3099.649f, 6041.718f, 123.2769f));
                else if (iRandFirst == 2)
                    Higgs.Add(new Vector3(2827.337f, 5966.326f, 351.5675f));
                else if (iRandFirst == 3)
                    Higgs.Add(new Vector3(3321.136f, 5147.967f, 18.30022f));
                else if (iRandFirst == 4)
                    Higgs.Add(new Vector3(499.3408f, 5591.032f, 795.0212f));
                else
                    Higgs.Add(new Vector3(1511.96f, 6626.829f, 2.50751f));
                iRandFirst = RandomX.RandInt(1, 5);
                if (iRandFirst == 1)
                    Higgs.Add(new Vector3(34.92531f, 6942f, 16.43684f));
                else if (iRandFirst == 2)
                    Higgs.Add(new Vector3(-207.7613f, 6546.077f, 11.09517f));
                else if (iRandFirst == 3)
                    Higgs.Add(new Vector3(-987.3856f, 6248.711f, 2.825436f));
                else if (iRandFirst == 4)
                    Higgs.Add(new Vector3(-1577.118f, 5158.229f, 19.9019f));
                else
                    Higgs.Add(new Vector3(-2197.535f, 5179.065f, 15.65481f));
                iRandFirst = RandomX.RandInt(1, 5);
                if (iRandFirst == 1)
                    Higgs.Add(new Vector3(-925.0684f, 4837.404f, 308.8438f));
                else if (iRandFirst == 2)
                    Higgs.Add(new Vector3(-2411.968f, 4233.252f, 10.08531f));
                else if (iRandFirst == 3)
                    Higgs.Add(new Vector3(-3112.612f, 3409.361f, 2.275631f));
                else if (iRandFirst == 4)
                    Higgs.Add(new Vector3(1312.213f, 4327.11f, 38.16022f));
                else
                    Higgs.Add(new Vector3(-768.5018f, 5543.954f, 33.48962f));
                iRandFirst = RandomX.RandInt(1, 5);
                if (iRandFirst == 1)
                    Higgs.Add(new Vector3(246.9969f, 7431.734f, 17.13332f));
                else if (iRandFirst == 2)
                    Higgs.Add(new Vector3(1856.761f, 6401.458f, 46.38666f));
                else if (iRandFirst == 3)
                    Higgs.Add(new Vector3(3676.37f, 4977.885f, 15.71186f));
                else if (iRandFirst == 4)
                    Higgs.Add(new Vector3(3633.82f, 5670.996f, 8.751589f));
                else
                    Higgs.Add(new Vector3(-1178.777f, 3843.314f, 487.167f));

                HiggsMissions.FlightPath = ReturnStuff.FarToNear(Higgs, HiggsMissions.HeliPark);

                HiggsMissions.HiggsHeli = EntityBuild.VehicleSpawn(new VehMods("Swift", 0, 5, true, DataStore.MyLang.Maptext[5], true, true, 73, 111, 0, ""), HiggsMissions.HeliPark);

                BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[5], DataStore.MyLang.Jobtext[30], 5000);
            }

            DataStore.OnTheJob = true;
        }
        private void Ambulance(Vehicle VAmbu)
        {
            LoggerLight.LogThis("Ambulance");

            if (!DataStore.OnlineStuffLoaded)
                DataStore.LoadOnlineIps(true);

            AmbMissions = new LsHealthTrust(LocationX, false, null, 0, 0, 0, 0, false, new ClothBank(Game.Player.Character));

            MissionData.vFuMiss = AmbMissions.FuStop;

            if (VAmbu == null)
                AmbMissions.Ambuantz = EntityBuild.VehicleSpawn(new VehMods("Ambulance", 0, 5, true, DataStore.MyLang.Maptext[7]), AmbMissions.AmbPark01);
            else
            {
                JobType = 7;
                AmbMissions.Ambuantz = VAmbu;
                JobSeq = 1;
                EntityBuild.DriveToDest(AmbMissions.Ambuantz, AmbMissions.FubStuff.PedHere.V3, Game.Player.Character, 35f, 1074528293);
                MissionData.VehicleList_01.Add(VAmbu);
            }
            BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[6], "", 5000);

            DataStore.OnTheJob = true;
        }
        private void Follow()
        {
            LoggerLight.LogThis("Follow");

            UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[17], "", 0f, true));

            int iEnding;

            if (LocationX > 4 && Function.Call<int>(Hash.GET_CLOCK_HOURS) > 21 || Function.Call<int>(Hash.GET_CLOCK_HOURS) < 5)
            {
                if (RandomX.FindRandom("Follow01X", 1, 40) < 30)
                    iEnding = RandomX.FindRandom("Follow01", 1, 5);
                else
                    iEnding = 6;
            }
            else
                iEnding = RandomX.FindRandom("Follow01", 1, 5);

            FollMissions = new FollowOn(LocationX, iEnding);

            if (iEnding == 3)
                UiDisplay.SideBars[0].Data = "" + DataStore.MyLang.Othertext[7] + "";

            Follow_AddStartPoint();

            BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[7], "", 5000);

            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[59];
            DataStore.OnTheJob = true;
        }
        private void FireDept(Vehicle VEngin)
        {
            LoggerLight.LogThis("FireDept");

            if (!DataStore.OnlineStuffLoaded)
                DataStore.LoadOnlineIps(true);

            FireMissions = new FireStarter(LocationX, null, 0, 0, 0, false, new ClothBank(Game.Player.Character));

            if (FireMissions.InFort)
                Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "restrictedareas");

            if (VEngin == null || !VEngin.Exists())
                FireMissions.FireTruck = EntityBuild.VehicleSpawn(new VehMods("FIRETRUK", 0), FireMissions.TruckPark);
            else
            {
                JobType = 9;
                JobSeq = 1;
                FireMissions.FireTruck = VEngin;
                EntityBuild.DriveToDest(FireMissions.FireTruck, FireMissions.FireLocal.V3, Game.Player.Character, 35f, 1074528293);
                MissionData.VehicleList_01.Add(VEngin);
            }
            EntityBuild.VehBlip(FireMissions.TkBlip, FireMissions.FireTruck);
            MissionData.vFuMiss = FireMissions.FuStops;

            SideBar MySide = new SideBar(DataStore.MyLang.Othertext[9], "", 0f, true);
            MySide.Backing = new RGBA(1);
            MySide.SlideBar = new RGBA(5);
            UiDisplay.SideBars.Add(MySide);
            UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[0], "", 0f, false));

            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[67] + "~y~" + FireMissions.FDname + "~w~.";
            BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[8], "", 5000);

            DataStore.OnTheJob = true;
        }
        private void HeresJohnny()
        {
            LoggerLight.LogThis("HeresJohnny");
            JohnnyMissions = new JohnDeer(LocationX);

            MissionData.vFuMiss = World.GetNextPositionOnStreet(JohnnyMissions.Start.PedHere.V3);
            BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[9], "", 5000);
            UiDisplay.SideBars.Add(new SideBar("" + DataStore.MyLang.Othertext[10] + "", "", 0f, false));
            EntityBuild.AddTarget(new BlipForm(JohnnyMissions.Start.PedHere.V3, true, 3, 50, "", 1f, -1f));
            DataStore.OnTheJob = true;
        }
        public static void Raceist(RacingMenu rMenu)
        {
            LoggerLight.LogThis("Raceist");

            RacingMissions = new RaceMeet(rMenu);

            for (int i = 0; i < RacingMissions.YourRace.PopLists.Count; i++)
                EntityBuild.BuildProp(RacingMissions.YourRace.PopLists[i].Prop, RacingMissions.YourRace.PopLists[i].Pos, RacingMissions.YourRace.PopLists[i].Rot, true, true);

            Function.Call(Hash._0xC54A08C85AE4D410, 1.50f);
            Function.Call((Hash)0x9BAE5AD2508DF078, true);

            UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[12], "", 0f, false));
            UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[14], "", 0f, false));

            if (RacingMissions.YourRace.Loop)
                UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[15], "", 0f, false));

            UiDisplay.SideBars[0].Counter = ReturnStuff.RaceCounter(0);
            UiDisplay.SideBars[1].Counter = ReturnStuff.RaceCounter(RacingMissions.BestRL.Time);

            if (RacingMissions.YourRace.Loop)
                UiDisplay.SideBars[2].Counter = ReturnStuff.RaceCounter(0);

            if (!RacingMissions.RaceSet.Solo)
                UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[11], "", 0f, false));

            MissionData.vFuMiss = RacingMissions.YourRace.Fubars;
            MissionData.MishVeh = EntityBuild.VehicleSpawn(new VehMods(ReturnStuff.SelectAVeh(RacingMissions.RaceSet.VehClass, 0), 0, 66, true, DataStore.MyLang.Maptext[6], true, true, ReturnStuff.FunPlates()), RacingMissions.YourRace.PickVeh);
            BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[10], "", 5000);
            DataStore.OnTheJob = true;
        }
        private void BBBomb()
        {
            LoggerLight.LogThis("BBBomb");

            UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[16], "", 0f, false));

            BombingMissions = new DaBomb(LocationX);
            MissionData.vFuMiss = BombingMissions.FubStop;

            BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[11], "", 5000);
            DataStore.OnTheJob = true;
        }
        private void HitMan()
        {
            LoggerLight.LogThis("HitMan");

            HitMissions = new SmashHits(LocationX);

            MissionData.vFuMiss = HitMissions.MyHits.FubarStop;

            BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[12], "", 5000);

            EntityBuild.AddTarget(new BlipForm(HitMissions.MyHits.StartPoint, true, 5, 458, DataStore.MyLang.Maptext[42], 1f));
            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[90];
            DataStore.OnTheJob = true;
        }
        private void TheSnipper()
        {
            LoggerLight.LogThis("TheSnipper");

            int iRand = RandomX.FindRandom("Sniper01", 1, 5);

            SnipMissions = new TakinSnip(LocationX);

            MissionData.vFuMiss = World.GetNextPositionOnStreet(SnipMissions.MySnips.GoHere[SnipMissions.GoTo]);
            BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[91], "", 5000);
            DataStore.OnTheJob = true;
        }
        private void MrMOneyMAn(Vehicle van)
        {
            LoggerLight.LogThis("MrMOneyMAn");

            MoneyMissions = new Securicore(LocationX);

            if (van == null)
            {
                MoneyMissions.Truck = EntityBuild.VehicleSpawn(new VehMods("Stockade", 0, 66, true, DataStore.MyLang.Maptext[1]), MoneyMissions.TruckStart);
                MoneyMissions.Buddy = EntityBuild.NPCSpawn(new PedFeat("s_m_m_security_01", true, 180, 9, 2, MoneyMissions.Truck, 2, false, 0, ""), MoneyMissions.Truck.Position, MoneyMissions.Truck.Heading);
            }
            else
            {
                JobType = 15;
                MoneyMissions.Truck = van;
                JobSeq = 1;
                EntityBuild.DriveToDest(MoneyMissions.Truck, MoneyMissions.Shops.ParkHere.V3, Game.Player.Character, 35f, 1074528293);
                MissionData.VehicleList_01.Add(van);
                if (MoneyMissions.Truck.IsSeatFree(VehicleSeat.Passenger))
                    MoneyMissions.Buddy = EntityBuild.NPCSpawn(new PedFeat("s_m_m_security_01", true, 180, 9, 2, MoneyMissions.Truck, 2, false, 0, ""), MoneyMissions.Truck.Position, MoneyMissions.Truck.Heading);
                else
                    MoneyMissions.Buddy = MoneyMissions.Truck.GetPedOnSeat(VehicleSeat.Passenger);

            }

            MissionData.vFuMiss = MoneyMissions.FuStops;

            BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[13], "", 5000);
            DataStore.OnTheJob = true;
        }
        private void SeaBattles()
        {
            LoggerLight.LogThis("SeaBattles");

            if (LocationX == 1)
            {

                BargeMissions = new ArgyBargy();

                MissionData.vFuMiss = new Vector3(-267.8495f, -2553.718f, 5.492561f);

                Water01_BargeCars(BargeMissions.Car01, BargeMissions.BargeMv, 1);
                Water01_BargeCars(BargeMissions.Car02, BargeMissions.BargeMv, 3);
                Water01_BargeCars(BargeMissions.Car03, BargeMissions.BargeMv, 2);

                BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[14], DataStore.MyLang.Jobtext[31], 5000);
            }
            else if (LocationX == 2)
            {
                if (!DataStore.OnlineStuffLoaded)
                    DataStore.LoadOnlineIps(true);

                NSBanking.LoadDat();

                YachtMissions = new YachtParty();

                int iRandFub = RandomX.FindRandom("SeaBattles02a", 0, 2);
                MissionData.vFuMiss = YachtMissions.Fubs[iRandFub];

                UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[7], "", 0f, false));
                DataStore.AddHeistYacht(true);
                BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[14], DataStore.MyLang.Jobtext[32], 5000);

                EntityBuild.AddBlips(new BlipForm(YachtMissions.VehLoc01.V3, false, 5, 612, DataStore.MyLang.Maptext[118]));
                EntityBuild.AddBlips(new BlipForm(YachtMissions.VehLoc02.V3, false, 5, 427, DataStore.MyLang.Maptext[119]));
                EntityBuild.AddBlips(new BlipForm(YachtMissions.VehLoc03.V3, false, 5, 534, DataStore.MyLang.Maptext[120]));
                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[105];
            }
            else if (LocationX == 3)
            {
                PhishMissions = new PhishingTrip();

                SideBar MySide = new SideBar(DataStore.MyLang.Othertext[18], "", 0f, true);
                MySide.Backing = new RGBA(85);
                MySide.SlideBar = new RGBA(7);
                UiDisplay.SideBars.Add(MySide);
                UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[1], "0:05", 0f, false));

                MissionData.vFuMiss = new Vector3(-1504.369f, 1483.937f, 116.4095f);
                BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[14], DataStore.MyLang.Jobtext[33], 5000);
            }
            else if (LocationX == 4)
            {
                Vector3 VechPos = new Vector3(658.0602f, -1499.01f, 9.931272f);
                MissionData.MishVeh = EntityBuild.VehicleSpawn(new VehMods("Blazer5", 1, 66, true, DataStore.MyLang.Maptext[18], false), VechPos, 18.00f);

                UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[19], "", 0f, false)); 
                UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[1], "", 0f, false));

                MissionData.vFuMiss = new Vector3(682.1233f, -1501.779f, 9.200512f);
                BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[14], DataStore.MyLang.Jobtext[34], 5000);
            }
            else if (LocationX == 5)
            {
                EntityBuild.VehicleSpawn(new VehMods("CARGOBOB2", 1, -1, false, "", true), new Vector3(1291.9556f, 4332.9907f, 37.6536f), -120.36f);

                BoatDelMissions = new ShipShape();

                Vector3 vBt_01 = new Vector3(1306.057f, 4219.996f, 29.88048f);
                float fBT_01 = 171.1544f;
                EntityBuild.VehicleSpawn(new VehMods(ReturnStuff.AddRandomVeh(26), 15), vBt_01, fBT_01);
                Vector3 vBt_02 = new Vector3(1297.212f, 4211.022f, 30.71615f);
                float fBT_02 = 261.1423f;
                EntityBuild.VehicleSpawn(new VehMods(ReturnStuff.AddRandomVeh(26), 15), vBt_02, fBT_02);
                Vector3 vBt_03 = new Vector3(1302.542f, 4266.792f, 30.43473f);
                float fBT_03 = 167.3074f;
                EntityBuild.VehicleSpawn(new VehMods(ReturnStuff.AddRandomVeh(26), 15), vBt_03, fBT_03);
                Vector3 vBt_04 = new Vector3(1295.325f, 4239.063f, 30.45684f);
                float fBT_04 = 167.0434f;
                EntityBuild.VehicleSpawn(new VehMods(ReturnStuff.AddRandomVeh(26), 15), vBt_04, fBT_04);
                Vector3 vBt_05 = new Vector3(1344.052f, 4224.578f, 30.24381f);
                float fBT_05 = 167.3387f;
                EntityBuild.VehicleSpawn(new VehMods(ReturnStuff.AddRandomVeh(26), 15), vBt_05, fBT_05);
                Vector3 vBt_06 = new Vector3(1318.892f, 4235.62f, 29.95362f);
                float fBT_06 = 256.2925f;
                EntityBuild.VehicleSpawn(new VehMods(ReturnStuff.AddRandomVeh(26), 15), vBt_06, fBT_06);

                EntityBuild.AddTarget(new BlipForm(BoatDelMissions.VStart, true, 5, 371, DataStore.MyLang.Maptext[61]));

                MissionData.vFuMiss = new Vector3(1349.204f, 4370.698f, 43.82962f);

                BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[14], DataStore.MyLang.Jobtext[35], 5000);
            }
            else
            {
                if (!DataStore.OnlineStuffLoaded)
                    DataStore.LoadOnlineIps(true);

                BogSubMission = new SubWay();

                Vector3 Posy = new Vector3(-1457.39f, 5976.5293f, -36.6497f);
                Vector3 Rota = new Vector3(0.00f, 0.00f, 38.4993f);
                EntityBuild.BuildProp("xm_prop_x17_sub", Posy, Rota, false, true);

                MissionData.vFuMiss = new Vector3(-307.1304f, 6081.307f, 30.701f);
                BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[14], DataStore.MyLang.Jobtext[36], 5000);
            }

            DataStore.OnTheJob = true;
        }
        private void ImportsExpo()
        {
            LoggerLight.LogThis("ImportsExpo");
            ImpExpMissions = new ImpExpMi(LocationX);

            ImportsExpo_CollisionBug(LocationX);

            int iGroup = RandomX.FindRandom("ImpExp01", 1, 10);
            for (int i = 0; i < 3; i++)
            {
                string sMyCar = ReturnStuff.AddRandomVeh(iGroup);
                ImpExpMissions.VehList.Add(new ImportExVeh(iGroup, sMyCar));
                ImpExpMissions.PayOut.Add(ImportsExpo_CostBasedAnalsisy(iGroup));
            }

            UiDisplay.SideBars.Add(new SideBar("", "", 0f, false));

            BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[15], "", 5000);
            DataStore.OnTheJob = true;
        }
        private void DebtCollect()
        {
            LoggerLight.LogThis("DebtCollect");

            if (!DataStore.OnlineStuffLoaded)
                DataStore.LoadOnlineIps(true);

            DebtMissions = new Wonga(LocationX);

            MissionData.vFuMiss = DebtMissions.MyFlat.ParkHere.V3;

            EntityBuild.AddTarget(new BlipForm(DebtMissions.MyFlat.PedHere.V3, true, 5, 408, DataStore.MyLang.Maptext[62], 1f, -1f));

            BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[16], "", 5000);
            DataStore.OnTheJob = true;
        }
        private void BikerRaids()
        {
            LoggerLight.LogThis("BikerRaids");

            if (!DataStore.OnlineStuffLoaded)
                DataStore.LoadOnlineIps(true);
            //Clubhouse = 246273 
            //Second Clubhouse = 246529

            BikerMissions = new LostMc(LocationX);

            EntityBuild.AddTarget(new BlipForm(BikerMissions.Buissness.PedHere.V3, true, 5, BikerMissions.Icon, DataStore.MyLang.Maptext[28], 1f, -1f));
            MissionData.vFuMiss = BikerMissions.Buissness.ParkHere.V3;
            BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[17], "", 5000);
            DataStore.OnTheJob = true;
        }
        private void CargoCollect()
        {
            LoggerLight.LogThis("CargoCollect");

            if (!DataStore.OnlineStuffLoaded)
                DataStore.LoadOnlineIps(true);

            CargoMissions = new CargoLift(LocationX);

            MissionData.vFuMiss = CargoMissions.Buissness.ParkHere.V3;
            int iBeCon = 474; int iNames = 34;
            if (CargoMissions.Buissness.PedNum == 4)
            { iBeCon = 557; iNames = 33; }
            EntityBuild.AddBlips(new BlipForm(CargoMissions.Buissness.PedHere.V3, true, 5, iBeCon, DataStore.MyLang.Maptext[iNames], 1f, -1f));
            string s = DataStore.MyLang.Mistext[150] + "~y~" + CargoMissions.Buissness.Name + "~w~.";

            BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[18], "", 5000);
            DataStore.OnTheJob = true;
        }
        private void DeepDown()
        {
            LoggerLight.LogThis("DeepDown");

            SharkMissions = new SharkTank(LocationX);

            MissionData.vFuMiss = SharkMissions.Sharky.FuPark;
            MissionData.MishVeh = EntityBuild.VehicleSpawn(new VehMods(ReturnStuff.SubList[0], 15, 5, true, DataStore.MyLang.Maptext[13]), SharkMissions.Sharky.SubPark);
            BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[19], "", 5000);
            DataStore.OnTheJob = true;
        }
        private void HappyShopper()
        {
            LoggerLight.LogThis("HappyShopper");
            HappySMissions = new MiniMart(LocationX);

            MissionData.vFuMiss = HappySMissions.Buissness.ParkHere.V3;
            EntityBuild.AddTarget(new BlipForm(HappySMissions.Buissness.PedHere.V3, true, 5, 52, DataStore.MyLang.Maptext[58]));
            BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[20], "", 5000);
            UiDisplay.SideBars.Add(HappySMissions.ShopBar);
            DataStore.OnTheJob = true;
        }
        private void MoresMuted()
        {
            LoggerLight.LogThis("MoresMuted");

            SideBar MySide = new SideBar(DataStore.MyLang.Othertext[149], "", 0f, true);
            MySide.Backing = new RGBA(42);
            MySide.SlideBar = new RGBA(1);
            UiDisplay.SideBars.Add(MySide);

            MoresMissions = new MoreThan(LocationX);

            MissionData.vFuMiss = MoresMissions.FubStop;

            BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[21], "", 5000);
            DataStore.OnTheJob = true;
        }
        private void TempAgency()
        {
            LoggerLight.LogThis("TempAgency");

            if (!DataStore.OnlineStuffLoaded)
                DataStore.LoadOnlineIps(true);

            if (LocationX == 1)
            {
                UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[150], "", 0f, false));
                UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[151], "", 0f, false));

                Temp01Missions = new CarBall();

                MissionData.vFuMiss = Temp01Missions.FuStop;

                EntityBuild.AddBlips(new BlipForm(Temp01Missions.ExEntrance, true, 5, 546, DataStore.MyLang.Maptext[88], 1f));
                BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[22], DataStore.MyLang.Jobtext[37], 5000);
            }       // --carball
            else if (LocationX == 2)
            {
                SideBar MySide = new SideBar(DataStore.MyLang.Othertext[153], "", 0f, true);
                MySide.Backing = new RGBA(3);
                MySide.SlideBar = new RGBA(1);
                UiDisplay.SideBars.Add(MySide);
                UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[152], "", 0f, false));

                Temp02Missions = new Cales();

                MissionData.vFuMiss = Temp02Missions.ClubX.ParkHere.V3;
                MissionData.iUltPed01 = 0;

                EntityBuild.AddBlips(new BlipForm(Temp02Missions.ClubX.PedHere.V3, true, 5, 614, DataStore.MyLang.Maptext[73], 1f, -1f));
                BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[22], DataStore.MyLang.Jobtext[38], 5000);
            }       // --club
            else if (LocationX == 3)
            {
                Temp03Missions = new Dupes();

                MissionData.vFuMiss = Temp03Missions.Fubar;
                List<PropLists> sPoper = new List<PropLists>
                {
                    new PropLists("xm_prop_lab_door02_r", new Vector3(-1300.87854f, -2989.34937f, -34.0867786f), new Vector3(0.00f, 0.00f, 2.0027160f)),
                    new PropLists("xm_prop_lab_doorframe02", new Vector3(-2012.91052f, 3218.39478f, 52.4544754f), new Vector3(0.00f, 0.00f, -119.907417f)),
                    new PropLists("xm_prop_lab_door02_r", new Vector3(-2012.57422f, 3218.9502f, 52.455545f), new Vector3(0.00f, 0.00f, -119.902489f))
                };

                for (int i = 0; i < sPoper.Count; i++)
                    EntityBuild.BuildProp(sPoper[i], true, true);

                EntityBuild.AddBlips(new BlipForm(Temp03Missions.Target01, true, 5, 569, DataStore.MyLang.Maptext[79], 1f));
                BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[22], DataStore.MyLang.Jobtext[39], 5000);
            }       // --hanger
            else if (LocationX == 4)
            {
                UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[152], "", 0f, false));

                Temp04Missions = new Dimond();

                MissionData.vFuMiss = Temp04Missions.Fubs;
                EntityBuild.AddBlips(new BlipForm(Temp04Missions.ExtDoor, true, 5, 679, DataStore.MyLang.Maptext[80], 1f));
                BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[22], DataStore.MyLang.Jobtext[40], 5000);
            }      // --casino get data...
            else if (LocationX == 5)
            {
                UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[12], "00:00:00", 0f, false));
                UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[154], "$", 0f, false));
                UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[11], "", 0f, false));

                RacingMenu MyRace = new RacingMenu(1);
                MyRace.Laps = 1;
                MyRace.PasiveMode = false;
                MyRace.Solo = false;
                MyRace.VehClass = 21;
                MyRace.Trafic = true;
                MyRace.Weather = "Clear";
                RacingMissions = new RaceMeet(MyRace);


                for (int i = 0; i < RacingMissions.YourRace.PopLists.Count; i++)
                    EntityBuild.BuildProp(RacingMissions.YourRace.PopLists[i].Prop, RacingMissions.YourRace.PopLists[i].Pos, RacingMissions.YourRace.PopLists[i].Rot, true, true);

                FubarMissions = new FubarCars(0,0, null);

                FubarMissions.Start = MissionData.AppartmentBlocks(5, 20, -1, -1, true);

                MissionData.vFuMiss = FubarMissions.Start.ParkHere.V3;
                RacingMissions.YourRace.Fubars = MissionData.vFuMiss;
                RacingMissions.StuntRace = true;

                Function.Call(Hash._0xC54A08C85AE4D410, 1.50f);
                Function.Call((Hash)0x9BAE5AD2508DF078, true);

                RacingMissions.YourRace.Fubars = MissionData.vFuMiss;
                MissionData.MishVeh = EntityBuild.VehicleSpawn(new VehMods("BMX", 0), RacingMissions.YourRace.Start01);
                EntityBuild.AddTarget(new BlipForm(FubarMissions.Start.PedHere.V3, true, 5, 590, DataStore.MyLang.Maptext[86], 1f, -1.1f));
                BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[22], DataStore.MyLang.Jobtext[41], 5000);
            }       // --Facility
            else
            {
                MissionData.iUltPed01 = 0;
                Temp06Missions = new Silo();
                MissionData.vFuMiss = Temp06Missions.Fubs;
                EntityBuild.AddBlips(new BlipForm(Temp06Missions.ExDoor, true, 5, 788, DataStore.MyLang.Maptext[87], 1f));
                BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[22], DataStore.MyLang.Jobtext[42], 5000);
            }       // --Lab
            DataStore.OnTheJob = true;
        }
        private void ParaDisplay()
        {
            LoggerLight.LogThis("ParaDisplay");

            UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[155], "", 0f, false));
            UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[156], "", 0f, false));
            MissionData.iUltPed01 = 0;

            FreeFallMissions = new ParaNoid(LocationX);

            BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[23], "", 5000);
            DataStore.OnTheJob = true;
        }
        private void Deliverwho()
        {
            LoggerLight.LogThis("Deliverwho");

            DellWhoMissions = new FubarEats(LocationX, 0, 0, false, false, false);

            EntityBuild.AddTarget(new BlipForm(DellWhoMissions.Start.PedHere.V3, true, 5, 408, DataStore.MyLang.Maptext[121], 1f, -1f));
            MissionData.vFuMiss = DellWhoMissions.Start.ParkHere.V3;
            BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[24], "", 5000);
            DataStore.OnTheJob = true;
        }
        private void CayoPacks()
        {
            LoggerLight.LogThis("CayoPacks : 1");

            List<Vector3> Hook01 = new List<Vector3>();
            List<string> Hook02 = new List<string>();

            List<Vector3> Cloth01 = new List<Vector3>();
            List<string> Cloth02 = new List<string>();

            List<Vector3> Bolt01 = new List<Vector3>();
            List<string> Bolt02 = new List<string>();

            List<Vector3> Powder01 = new List<Vector3>();
            List<string> Powder02 = new List<string>();

            List<Vector3> CayoPoints = new List<Vector3>
            {
                new Vector3(5265.841f, -5428.137f, 141.044f),//85
                new Vector3(5471.841f, -5819.709f, 19.859f),//385
                new Vector3(4947.611f, -5411.321f, 25.424f),//340f
                new Vector3(5265.841f, -5428.137f, 141.044f),//Rest
            };
            List<float> CayoPointF = new List<float>
            {
                85f,
                385f,
                340f,
                9999f
            };

            for (int i = 0; i < MissionData.CayoPackIt.Count; i++)//42
            {
                if (MissionData.CayoPackIt[i] == "h4_prop_h4_bag_hook_01a")
                {
                    Hook01.Add(MissionData.CayoPackPl[i]);
                    Hook02.Add("h4_prop_h4_bag_hook_01a");
                }
                else if (MissionData.CayoPackIt[i] == "h4_prop_h4_crate_cloth_01a")
                {
                    Cloth01.Add(MissionData.CayoPackPl[i]);
                    Cloth02.Add("h4_prop_h4_crate_cloth_01a");
                }
                else if (MissionData.CayoPackIt[i] == "h4_prop_h4_bolt_cutter_01a")
                {
                    Bolt01.Add(MissionData.CayoPackPl[i]);
                    Bolt02.Add("h4_prop_h4_bolt_cutter_01a");
                }
                else if (MissionData.CayoPackIt[i] == "h4_prop_h4_powdercleaner_01a")
                {
                    Powder01.Add(MissionData.CayoPackPl[i]);
                    Powder02.Add("h4_prop_h4_powdercleaner_01a");
                }
            }

            List<Vector3> PackThis01 = new List<Vector3>();
            List<string> PackThis02 = new List<string>();

            while (Hook01.Count > 4)
            {
                int iRand = RandomX.RandInt(0, Hook01.Count - 1);
                Hook01.RemoveAt(iRand);
                Hook02.RemoveAt(iRand);
            }
            for (int i = 0; i < Hook01.Count; i++)
            {
                PackThis01.Add(Hook01[i]);
                PackThis02.Add(Hook02[i]);
            }

            while (Cloth01.Count > 4)
            {
                int iRand = RandomX.RandInt(0, Cloth01.Count - 1);
                Cloth01.RemoveAt(iRand);
                Cloth02.RemoveAt(iRand);
            }
            for (int i = 0; i < Cloth01.Count; i++)
            {
                PackThis01.Add(Cloth01[i]);
                PackThis02.Add(Cloth02[i]);
            }

            while (Bolt01.Count > 4)
            {
                int iRand = RandomX.RandInt(0, Bolt01.Count - 1);
                Bolt01.RemoveAt(iRand);
                Bolt02.RemoveAt(iRand);
            }
            for (int i = 0; i < Bolt01.Count; i++)
            {
                PackThis01.Add(Bolt01[i]);
                PackThis02.Add(Bolt02[i]);
            }

            int iCut = RandomX.RandInt(0, Powder01.Count - 1);
            PackThis01.Add(Powder01[iCut]);
            PackThis02.Add(Powder02[iCut]);

            List<Vector3> Pack01 = new List<Vector3>();
            List<string> Pack02 = new List<string>();
            float fDist = 9999f;
            int NextVic = -1;
            int NearTo = 0;

            while (PackThis01.Count != 0 || PackThis02.Count != 0)
            {
                for (int i = 0; i < PackThis01.Count; i++)
                {
                    float f = PackThis01[i].DistanceTo(CayoPoints[NearTo]);
                    if (f < fDist && f < CayoPointF[NearTo])
                    {
                        NextVic = i;
                        fDist = f;
                    }
                }

                if (NextVic == -1)
                {
                    NearTo++;
                }
                else
                { 
                    Pack01.Add(PackThis01[NextVic]);
                    Pack02.Add(PackThis02[NextVic]);
                    PackThis01.RemoveAt(NextVic);
                    PackThis02.RemoveAt(NextVic);
                    fDist = 9999f;
                    NextVic = -1;
                }

                Script.Wait(1);
            }

            MissionData.vFuMiss = new Vector3(4491.126f, -4511.222f, 4.357188f);

            PackManMissions = new Packaging(true, Pack01, Pack02);

            UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[3], "" + PackManMissions.PackDeliv + "/" + PackManMissions.PackCount + "", 0f, false));
            UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[1], "", 0f, false));

            BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[2], "", 5000);

            DataStore.OnTheJob = true;
        }
        private void CayoFollow()
        {
            CayFolMissions = new CayoFollow(RandomX.FindRandom("CayFol01", 1, 3), RandomX.FindRandom("CayFol02", 1, 5));

            BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[7], "", 5000);

            UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[17], "", 0f, true));

            DataStore.OnTheJob = true;
        }
        private void CayoThief()
        {
            LoggerLight.LogThis("TheCayoMissions");

            CayHeiMissions = new CayoHeist(RandomX.FindRandom("CayTheif01", 1, 3));

            BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[43], "", 5000);

            DataStore.OnTheJob = true;
        }
        private void DimondValay()
        {
            UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[152], "", 0f, false));
            Temp04Missions = new Dimond();

            BigMessageThread.MessageInstance.ShowSimpleShard(DataStore.MyLang.Jobtext[22], DataStore.MyLang.Jobtext[40], 5000);

            JobType = 24;
            LocationX = 4;
            JobSeq = 4;

            if (Temp04Missions.Uniform != null)
                EntityBuild.PedDresser(Game.Player.Character, Temp04Missions.Uniform);

            LoadInteriorSpace(252, Temp04Missions.IntDoor, 1, true);
            TempAgency_04_CasWeaponSkit();
            Temp04Missions.IWalks = Temp04Missions.WalkTo.Count - 1;
            DataStore.LiftDoor.Play();
            EntityBuild.AddTarget(new BlipForm(Temp04Missions.Podium.V3, false, 5, 604, DataStore.MyLang.Maptext[84], 1f));
            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[212];
            EntityBuild.NPCSpawn(new PedFeat("s_m_y_valet_01", false, 0, 0), Temp04Missions.Podium);
            UiDisplay.SideBars[0].Data = "$";
            SetTheTime(16, 0, 0);

            Game.FadeScreenIn(1000);
            DataStore.OnTheJob = true;
        }
        public static AchList CayoThief_Awards(int cashtotal, bool bCash)
        {
            AchList MyAss = new AchList(43);

            MyAss.Medal = 3;
            int iPer = 0;

            if (DataStore.MyAchivments.CayoThief_ImAPasafisit > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[387], DataStore.MyLang.Othertext[388], "", 1));
                iPer += 50;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[387], DataStore.MyLang.Othertext[388], "", 0));
            }

            if (DataStore.MyAchivments.CayoThief_YourGonaHaveToWalk > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[389], DataStore.MyLang.Othertext[390], "", 1));
                iPer += 50;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[389], DataStore.MyLang.Othertext[390], "", 0));
            }

            if (bCash)
            {
                MyAss.Cash = cashtotal;
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[53], "", "$" + ReturnStuff.ShowComs(MyAss.Cash, true, false), 3));
            }

            if (iPer > 99)
                MyAss.Medal = 1;
            else if (iPer > 50)
                MyAss.Medal = 2;
            MyAss.Percent = iPer;
            return MyAss;
        }
        private void Trucking_LostTrail()
        {
            LoggerLight.LogThis("TruckBuild_LostTrail");

            iWait4Sec = Game.GameTime + 10000;
            float fDir = TruckMissions.Trail.Heading;
            float fHi = TruckMissions.Trail.Position.Z + 1.00f;

            TruckMissions.Trail.Rotation = new Vector3(0.0f, 0.0f, fDir);
            TruckMissions.Trail.Position = new Vector3(TruckMissions.Trail.Position.X, TruckMissions.Trail.Position.Y, fHi);
        }
        private void Trucking_AttachStuff(int iType, Vehicle flatBed, Vehicle flatBed2)
        {
            LoggerLight.LogThis("Trucking_AttachStuff, iType == " + iType);
            //"trailersmall",     //0 - Gen Trail
            //"trailersmall2",    //1 - army gun Trail
            //"boattrailer",      //2 - car boat traill
            //"baletrailer",      //3 - farm trailer
            //"graintrailer",     //4 - farm trailer
            //"trailerlarge",     //5 - MOC
            //"armytanker",       //6 -   
            //"armytrailer",      //7 - flatBed Army --pos tank only thing
            //"docktrailer",      //8 - 
            //"tanker",           //9 - ron oills
            //"tr2",              //10 - empty car transporter
            //"tr4",              //11 - full car transporter
            //"trailerlogs",      //12 - log tansporter
            //"trailers",         //13 - shipping trailerA
            //"trailers2",        //14 - livary trailerA
            //"trailers2",        //15 - livary trailerB
            //"trailers2",        //16 - livary trailerC
            //"trailers2",        //17 - livary trailerD
            //"trailers3",        //18 - tall livary trailer
            //"tvtrailer",        //19 - fame or shame trailer
            //"trflat",           //20 - flat bed for attach

            if (iType == 0)
            {
                if (RandomX.FindRandom("Trucking_AttachStuff01", 1, 10) < 5)
                {
                    List<int> iEx = new List<int> { 1 };
                    EntityBuild.ModExtras(flatBed, iEx);
                    EntityBuild.ModExtras(flatBed2, iEx);
                }
                else
                {
                    List<int> iEx = new List<int> { 2 };
                    EntityBuild.ModExtras(flatBed, iEx);
                    EntityBuild.ModExtras(flatBed2, iEx);
                }
            }
            else if (iType == 1)
            {
                TruckMissions.Army = true;
            }
            else if (iType == 2)
            {
                Vehicle Buzz = EntityBuild.VehicleSpawn(new VehMods("Tropic2"), flatBed.Position, flatBed.Heading);
                Buzz.AttachTo(flatBed, flatBed.GetBoneIndex("bodyshell"), new Vector3(0.00f, 0.70f, 1.01f), new Vector3(-92.09f, 0.00f, 0.00f));

                TruckMissions.Proper = EntityBuild.VehicleSpawn(new VehMods("Tropic2"), flatBed2.Position, flatBed2.Heading);
                TruckMissions.Proper.AttachTo(flatBed2, flatBed2.GetBoneIndex("bodyshell"), new Vector3(0.00f, 0.70f, 1.01f), new Vector3(-92.09f, 0.00f, 0.00f));
                TruckMissions.Proper.Alpha = 120;
            }
            else if (iType == 6)
            {
                TruckMissions.Army = true;
            }
            else if (iType == 7)
            {
                if (RandomX.FindRandom("Trucking_AttachStuff02", 1, 10) < 5)
                {
                    List<int> MyExtras = new List<int>();
                    MyExtras.Add(16);
                    Vehicle Buzz = EntityBuild.VehicleSpawn(new VehMods("Buzzard", 0, -1, false, "", true, ReturnStuff.RandVehMod(), MyExtras, ""), flatBed.Position, flatBed.Heading);
                    Buzz.AttachTo(flatBed, flatBed.GetBoneIndex("bodyshell"), new Vector3(0.00f, 0.00f, -0.30f), new Vector3(0.00f, 0.00f, 0.00f));

                    TruckMissions.Proper = EntityBuild.VehicleSpawn(new VehMods("Buzzard", 0, -1, false, "", true, ReturnStuff.RandVehMod(), MyExtras, ""), flatBed2.Position, flatBed2.Heading);
                    TruckMissions.Proper.AttachTo(flatBed2, flatBed2.GetBoneIndex("bodyshell"), new Vector3(0.00f, 0.00f, -0.30f), new Vector3(0.00f, 0.00f, 0.00f));
                    TruckMissions.Proper.Alpha = 120;
                }
                else
                {
                    Vehicle Buzz = EntityBuild.VehicleSpawn(new VehMods("RHINO"), flatBed.Position, flatBed.Heading);
                    Buzz.AttachTo(flatBed, flatBed.GetBoneIndex("bodyshell"), new Vector3(0.00f, 0.00f, -0.30f), new Vector3(0.00f, 0.00f, 0.00f));

                    TruckMissions.Proper = EntityBuild.VehicleSpawn(new VehMods("RHINO"), flatBed2.Position, flatBed2.Heading);
                    TruckMissions.Proper.AttachTo(flatBed2, flatBed2.GetBoneIndex("bodyshell"), new Vector3(0.00f, 0.00f, -0.30f), new Vector3(0.00f, 0.00f, 0.00f));
                    TruckMissions.Proper.Alpha = 120;
                }
                TruckMissions.Army = true;
            }
            else if (iType == 13)
            {
                List<int> iEx = new List<int> { 2 };
                EntityBuild.ModExtras(flatBed, iEx);
                EntityBuild.ModExtras(flatBed2, iEx);
            }
            else if (iType == 14)
            {
                List<int> iEx = ReturnStuff.VehPaint(-10, -10, 0);
                EntityBuild.MakeModsNotWar(flatBed, iEx);
                EntityBuild.MakeModsNotWar(flatBed2, iEx);
            }
            else if (iType == 15)
            {
                List<int> iEx = ReturnStuff.VehPaint(-10, -10, 1);
                EntityBuild.MakeModsNotWar(flatBed, iEx);
                EntityBuild.MakeModsNotWar(flatBed2, iEx);
            }
            else if (iType == 16)
            {
                List<int> iEx = ReturnStuff.VehPaint(-10, -10, 2);
                EntityBuild.MakeModsNotWar(flatBed, iEx);
                EntityBuild.MakeModsNotWar(flatBed2, iEx);
            }
            else if (iType == 17)
            {
                List<int> iEx = ReturnStuff.VehPaint(-10, -10, 3);
                EntityBuild.MakeModsNotWar(flatBed, iEx);
                EntityBuild.MakeModsNotWar(flatBed2, iEx);
            }
            else if (iType == 20)
            {
                int iBox = RandomX.FindRandom("Trucking_AttachStuff03", 1, 6);
                if (iBox == 1)
                {
                    Prop pop = EntityBuild.BuildProp("prop_boxpile_07a", flatBed.Position, flatBed.Rotation, true, false);
                    pop.AttachTo(flatBed, flatBed.GetBoneIndex("bodyshell"), new Vector3(0f, 3.000f, 0.400f), new Vector3(0f, 0f, 90.000f));
                    pop = EntityBuild.BuildProp("prop_boxpile_07a", flatBed.Position, flatBed.Rotation, true, false);
                    pop.AttachTo(flatBed, flatBed.GetBoneIndex("bodyshell"), new Vector3(0f, -2.600f, 0.400f), new Vector3(0f, 0f, 90.000f));

                    Prop pop2 = EntityBuild.BuildProp("prop_boxpile_07a", flatBed2.Position, flatBed2.Rotation, true, false);
                    pop2.AttachTo(flatBed2, flatBed2.GetBoneIndex("bodyshell"), new Vector3(0f, 3.000f, 0.400f), new Vector3(0f, 0f, 90.000f));
                    pop2.Alpha = 120;
                    TruckMissions.MullProps.Add(new Prop(pop2.Handle));
                    pop2 = EntityBuild.BuildProp("prop_boxpile_07a", flatBed.Position, flatBed.Rotation, true, false);
                    pop2.AttachTo(flatBed2, flatBed2.GetBoneIndex("bodyshell"), new Vector3(0f, -2.600f, 0.400f), new Vector3(0f, 0f, 90.000f));
                    pop2.Alpha = 120;
                    TruckMissions.MullProps.Add(new Prop(pop2.Handle));
                }
                else if (iBox == 2)
                {
                    Prop pop = EntityBuild.BuildProp("sr_prop_sr_boxpile_01", flatBed.Position, flatBed.Rotation, true, false);
                    pop.AttachTo(flatBed, flatBed.GetBoneIndex("bodyshell"), new Vector3(0f, 0f, 0.400f), new Vector3(0f, 0f, 90.000f));

                    Prop pop2 = EntityBuild.BuildProp("sr_prop_sr_boxpile_01", flatBed2.Position, flatBed2.Rotation, true, false);
                    pop2.AttachTo(flatBed2, flatBed2.GetBoneIndex("bodyshell"), new Vector3(0f, 0f, 0.400f), new Vector3(0f, 0f, 90.000f));
                    pop2.Alpha = 120;
                    TruckMissions.MullProps.Add(new Prop(pop2.Handle));
                }
                else if (iBox == 3)
                {
                    Prop pop = EntityBuild.BuildProp("prop_boxpile_08a", flatBed.Position, flatBed.Rotation, true, false);
                    pop.AttachTo(flatBed, flatBed.GetBoneIndex("bodyshell"), new Vector3(0f, 3.000f, 0.400f), new Vector3(0f, 0f, 90.000f));
                    pop = EntityBuild.BuildProp("prop_boxpile_07d", flatBed.Position, flatBed.Rotation, true, false);
                    pop.AttachTo(flatBed, flatBed.GetBoneIndex("bodyshell"), new Vector3(0f, 0f, 0.400f), new Vector3(0f, 0f, 90.000f));
                    pop = EntityBuild.BuildProp("prop_boxpile_04a", flatBed.Position, flatBed.Rotation, true, false);
                    pop.AttachTo(flatBed, flatBed.GetBoneIndex("bodyshell"), new Vector3(0f, -2.500f, 1.200f), new Vector3(0f, 0f, 0f));
                    pop = EntityBuild.BuildProp("prop_boxpile_04a", flatBed.Position, flatBed.Rotation, true, false);
                    pop.AttachTo(flatBed, flatBed.GetBoneIndex("bodyshell"), new Vector3(0f, -4.300f, 1.200f), new Vector3(0f, 0f, 0f));

                    Prop pop2 = EntityBuild.BuildProp("prop_boxpile_08a", flatBed2.Position, flatBed2.Rotation, true, false);
                    pop2.AttachTo(flatBed2, flatBed2.GetBoneIndex("bodyshell"), new Vector3(0f, 3.000f, 0.400f), new Vector3(0f, 0f, 90.000f));
                    pop2.Alpha = 120;
                    TruckMissions.MullProps.Add(new Prop(pop2.Handle));
                    pop2 = EntityBuild.BuildProp("prop_boxpile_07d", flatBed2.Position, flatBed2.Rotation, true, false);
                    pop2.AttachTo(flatBed2, flatBed2.GetBoneIndex("bodyshell"), new Vector3(0f, 0f, 0.400f), new Vector3(0f, 0f, 90.000f));
                    pop2.Alpha = 120;
                    TruckMissions.MullProps.Add(new Prop(pop2.Handle));
                    pop2 = EntityBuild.BuildProp("prop_boxpile_04a", flatBed2.Position, flatBed2.Rotation, true, false);
                    pop2.AttachTo(flatBed2, flatBed2.GetBoneIndex("bodyshell"), new Vector3(0f, -2.500f, 1.200f), new Vector3(0f, 0f, 0f));
                    pop2.Alpha = 120;
                    TruckMissions.MullProps.Add(new Prop(pop2.Handle));
                    pop2 = EntityBuild.BuildProp("prop_boxpile_04a", flatBed2.Position, flatBed2.Rotation, true, false);
                    pop2.AttachTo(flatBed2, flatBed2.GetBoneIndex("bodyshell"), new Vector3(0f, -4.300f, 1.200f), new Vector3(0f, 0f, 0f));
                    pop2.Alpha = 120;
                    TruckMissions.MullProps.Add(new Prop(pop2.Handle));
                }
                else if (iBox == 4)
                {
                    Prop pop = EntityBuild.BuildProp("prop_box_wood08a", flatBed.Position, flatBed.Rotation, true, false);
                    pop.AttachTo(flatBed, flatBed.GetBoneIndex("bodyshell"), new Vector3(0f, 4.000f, 0.400f), new Vector3(0f, 0f, 90.000f));
                    pop = EntityBuild.BuildProp("prop_box_wood07a", flatBed.Position, flatBed.Rotation, true, false);
                    pop.AttachTo(flatBed, flatBed.GetBoneIndex("bodyshell"), new Vector3(0f, 1.200f, 0.500f), new Vector3(0f, 0f, 0f));
                    pop = EntityBuild.BuildProp("prop_box_wood03a", flatBed.Position, flatBed.Rotation, true, false);
                    pop.AttachTo(flatBed, flatBed.GetBoneIndex("bodyshell"), new Vector3(0.600f, -2.500f, 0.400f), new Vector3(0f, 0f, 0f));
                    pop = EntityBuild.BuildProp("prop_box_wood07a", flatBed.Position, flatBed.Rotation, true, false);
                    pop.AttachTo(flatBed, flatBed.GetBoneIndex("bodyshell"), new Vector3(0f, -0.600f, 0.500f), new Vector3(0f, 0f, 0f));
                    pop = EntityBuild.BuildProp("prop_box_wood03a", flatBed.Position, flatBed.Rotation, true, false);
                    pop.AttachTo(flatBed, flatBed.GetBoneIndex("bodyshell"), new Vector3(-0.600f, -2.500f, 0.400f), new Vector3(0f, 0f, 0f));
                    pop = EntityBuild.BuildProp("prop_box_wood03a", flatBed.Position, flatBed.Rotation, true, false);
                    pop.AttachTo(flatBed, flatBed.GetBoneIndex("bodyshell"), new Vector3(-0.600f, -3.800f, 0.400f), new Vector3(0f, 0f, 0f));
                    pop = EntityBuild.BuildProp("prop_box_wood03a", flatBed.Position, flatBed.Rotation, true, false);
                    pop.AttachTo(flatBed, flatBed.GetBoneIndex("bodyshell"), new Vector3(0.600f, -3.800f, 0.400f), new Vector3(0f, 0f, 0f));

                    Prop pop2 = EntityBuild.BuildProp("prop_box_wood08a", flatBed2.Position, flatBed2.Rotation, true, false);
                    pop2.AttachTo(flatBed2, flatBed2.GetBoneIndex("bodyshell"), new Vector3(0f, 4.000f, 0.400f), new Vector3(0f, 0f, 90.000f));
                    pop2.Alpha = 120;
                    TruckMissions.MullProps.Add(new Prop(pop2.Handle));
                    pop2 = EntityBuild.BuildProp("prop_box_wood07a", flatBed2.Position, flatBed2.Rotation, true, false);
                    pop2.AttachTo(flatBed2, flatBed2.GetBoneIndex("bodyshell"), new Vector3(0f, 1.200f, 0.500f), new Vector3(0f, 0f, 0f));
                    pop2.Alpha = 120;
                    TruckMissions.MullProps.Add(new Prop(pop2.Handle));
                    pop2 = EntityBuild.BuildProp("prop_box_wood03a", flatBed2.Position, flatBed2.Rotation, true, false);
                    pop2.AttachTo(flatBed2, flatBed2.GetBoneIndex("bodyshell"), new Vector3(0.600f, -2.500f, 0.400f), new Vector3(0f, 0f, 0f));
                    pop2.Alpha = 120;
                    TruckMissions.MullProps.Add(new Prop(pop2.Handle));
                    pop2 = EntityBuild.BuildProp("prop_box_wood07a", flatBed2.Position, flatBed2.Rotation, true, false);
                    pop2.AttachTo(flatBed2, flatBed2.GetBoneIndex("bodyshell"), new Vector3(0f, -0.600f, 0.500f), new Vector3(0f, 0f, 0f));
                    pop2.Alpha = 120;
                    TruckMissions.MullProps.Add(new Prop(pop2.Handle));
                    pop2 = EntityBuild.BuildProp("prop_box_wood03a", flatBed2.Position, flatBed2.Rotation, true, false);
                    pop2.AttachTo(flatBed2, flatBed2.GetBoneIndex("bodyshell"), new Vector3(-0.600f, -2.500f, 0.400f), new Vector3(0f, 0f, 0f));
                    pop2.Alpha = 120;
                    TruckMissions.MullProps.Add(new Prop(pop2.Handle));
                    pop2 = EntityBuild.BuildProp("prop_box_wood03a", flatBed2.Position, flatBed2.Rotation, true, false);
                    pop2.AttachTo(flatBed2, flatBed2.GetBoneIndex("bodyshell"), new Vector3(-0.600f, -3.800f, 0.400f), new Vector3(0f, 0f, 0f));
                    pop2.Alpha = 120;
                    TruckMissions.MullProps.Add(new Prop(pop2.Handle));
                    pop2 = EntityBuild.BuildProp("prop_box_wood03a", flatBed2.Position, flatBed2.Rotation, true, false);
                    pop2.AttachTo(flatBed2, flatBed2.GetBoneIndex("bodyshell"), new Vector3(0.600f, -3.800f, 0.400f), new Vector3(0f, 0f, 0f));
                    pop2.Alpha = 120;
                    TruckMissions.MullProps.Add(new Prop(pop2.Handle));
                }
                else if (iBox == 5)
                {
                    Prop pop = EntityBuild.BuildProp("prop_pipes_01b", flatBed.Position, flatBed.Rotation, true, false);
                    pop.AttachTo(flatBed, flatBed.GetBoneIndex("bodyshell"), new Vector3(0f, 0f, 0.220f), new Vector3(0f, 0f, 0f));

                    Prop pop2 = EntityBuild.BuildProp("prop_pipes_01b", flatBed2.Position, flatBed2.Rotation, true, false);
                    pop2.AttachTo(flatBed2, flatBed2.GetBoneIndex("bodyshell"), new Vector3(0f, 0f, 0.220f), new Vector3(0f, 0f, 0f));
                    pop2.Alpha = 120;
                    TruckMissions.MullProps.Add(new Prop(pop2.Handle));
                }
                else
                {
                    Prop pop = EntityBuild.BuildProp("prop_conc_blocks01a", flatBed.Position, flatBed.Rotation, true, false);
                    pop.AttachTo(flatBed, flatBed.GetBoneIndex("bodyshell"), new Vector3(0f, 1.900f, 0.400f), new Vector3(0f, 0f, 0f));
                    pop = EntityBuild.BuildProp("prop_conc_blocks01c", flatBed.Position, flatBed.Rotation, true, false);
                    pop.AttachTo(flatBed, flatBed.GetBoneIndex("bodyshell"), new Vector3(0f, 3.800f, 0.400f), new Vector3(0f, 0f, 0f));
                    pop = EntityBuild.BuildProp("prop_conc_blocks01a", flatBed.Position, flatBed.Rotation, true, false);
                    pop.AttachTo(flatBed, flatBed.GetBoneIndex("bodyshell"), new Vector3(0f, 0.000f, 0.400f), new Vector3(0f, 0f, 180.000f));
                    pop = EntityBuild.BuildProp("prop_conc_blocks01c", flatBed.Position, flatBed.Rotation, true, false);
                    pop.AttachTo(flatBed, flatBed.GetBoneIndex("bodyshell"), new Vector3(0f, -2.200f, 0.400f), new Vector3(0f, 0f, -180.000f));

                    Prop pop2 = EntityBuild.BuildProp("prop_conc_blocks01a", flatBed2.Position, flatBed2.Rotation, true, false);
                    pop2.AttachTo(flatBed2, flatBed2.GetBoneIndex("bodyshell"), new Vector3(0f, 1.900f, 0.400f), new Vector3(0f, 0f, 0f));
                    pop2.Alpha = 120;
                    TruckMissions.MullProps.Add(new Prop(pop2.Handle));
                    pop2 = EntityBuild.BuildProp("prop_conc_blocks01c", flatBed2.Position, flatBed2.Rotation, true, false);
                    pop2.AttachTo(flatBed2, flatBed2.GetBoneIndex("bodyshell"), new Vector3(0f, 3.800f, 0.400f), new Vector3(0f, 0f, 0f));
                    pop2.Alpha = 120;
                    TruckMissions.MullProps.Add(new Prop(pop2.Handle));
                    pop2 = EntityBuild.BuildProp("prop_conc_blocks01a", flatBed2.Position, flatBed2.Rotation, true, false);
                    pop2.AttachTo(flatBed2, flatBed2.GetBoneIndex("bodyshell"), new Vector3(0f, 0.000f, 0.400f), new Vector3(0f, 0f, 180.000f));
                    pop2.Alpha = 120;
                    TruckMissions.MullProps.Add(new Prop(pop2.Handle));
                    pop2 = EntityBuild.BuildProp("prop_conc_blocks01c", flatBed2.Position, flatBed2.Rotation, true, false);
                    pop2.AttachTo(flatBed2, flatBed2.GetBoneIndex("bodyshell"), new Vector3(0f, -2.200f, 0.400f), new Vector3(0f, 0f, -180.000f));
                    pop2.Alpha = 120;
                    TruckMissions.MullProps.Add(new Prop(pop2.Handle));
                }
            }
        }
        private void Trucking_PropDel()
        {
            for (int i = 0; i < TruckMissions.MullProps.Count; i++)
            {
                TruckMissions.MullProps[i].Delete();
                MissionData.PropList_01.Remove(TruckMissions.MullProps[i]);
            }
        }
        private void Trucking_CashNCrash(Vehicle myVic, Vehicle myVic2, Vehicle myVic3, int iType)
        {
            int HealthTotal = 0;
            List<Vehicle> VicList = new List<Vehicle>();
            List<Ped> PedList = new List<Ped>();

            float fVehCheck = myVic.BodyHealth + myVic.EngineHealth + myVic.PetrolTankHealth;
            HealthTotal += (int)fVehCheck;
            VicList.Add(new Vehicle(myVic.Handle));
            fVehCheck = myVic2.BodyHealth + myVic2.EngineHealth + myVic2.PetrolTankHealth;
            HealthTotal += (int)fVehCheck;
            VicList.Add(new Vehicle(myVic2.Handle));

            TruckMissions.Distace = ReturnStuff.RoadDistance(myVic2.Position, myVic3.Position);
            if (TruckMissions.Distace > 16090)
                TruckMissions.Distace = 15900;

            int icash = (int)TruckMissions.Distace;
            icash = icash / 10;
            TruckMissions.CashPaid = icash * 50;
            if (iType < 4)
                TruckMissions.CashPaid = TruckMissions.CashPaid / 2;

            ReturnStuff.DamageControl = new Crash4Cash(HealthTotal, TruckMissions.CashPaid, VicList, PedList);
            LoggerLight.LogThis("TruckBuild_CashNCrash == " + TruckMissions.CashPaid + "HealthTotal ==" + HealthTotal);
            TruckMissions.CashTotal = TruckMissions.CashPaid;
        }
        private void Trucking_AddingRewards(int ParkBoun)
        {
            LoggerLight.LogThis("Trucking_AddingRewards");

            DataStore.MyAchivments.Trucking_MilesDriven += (int)TruckMissions.Distace;

            if (TruckMissions.DeTatchAm == 0)
                DataStore.MyAchivments.Trucking_KeptYourLoad++;

            if (TruckMissions.Tractor)
                DataStore.MyAchivments.Trucking_FarmYardHand++;

            if (ParkBoun > 990)
                DataStore.MyAchivments.Trucking_PerfectParking++;
        }
        public static AchList Trucking_Awards(int cashPaid, int parking, int distance, bool bCash)
        {
            AchList MyAss = new AchList(0);

            MyAss.Medal = 3;
            int iPer = 0;
            float fMiles = DataStore.MyAchivments.Trucking_MilesDriven / 1609;

            if (fMiles > 99)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[167], DataStore.MyLang.Othertext[168], Math.Round(fMiles, 1) + " Miles", 1));
                iPer += 25;
            }
            else
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[167], DataStore.MyLang.Othertext[168], Math.Round(fMiles, 1) + " Miles", 0));


            if (DataStore.MyAchivments.Trucking_KeptYourLoad > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[169], DataStore.MyLang.Othertext[170], "", 1));
                iPer += 25;
            }
            else
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[169], DataStore.MyLang.Othertext[170], "", 0));

            if (DataStore.MyAchivments.Trucking_FarmYardHand > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[173], DataStore.MyLang.Othertext[174],"", 1));
                iPer += 25;
            }
            else
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[173], DataStore.MyLang.Othertext[174],"", 0));


            if (DataStore.MyAchivments.Trucking_PerfectParking > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[175], DataStore.MyLang.Othertext[176], "", 1));
                iPer += 25;
            }
            else
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[175], DataStore.MyLang.Othertext[176], "", 0));

            if (bCash)
            {
                MyAss.Cash = cashPaid + parking;
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[53], "", "$" + ReturnStuff.ShowComs(MyAss.Cash, true, false), 3));


                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[386], "", "$" + ReturnStuff.ShowComs(parking, true, false), 3));
                float fCovered = distance / 1609;
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[385], "", Math.Round(fCovered, 1) + " Miles", 3));
            }

            if (iPer > 99)
                MyAss.Medal = 1;
            else if (iPer > 50)
                MyAss.Medal = 2;
            MyAss.Percent = iPer;
            return MyAss;
        }
        private void Getaway_AddPlayerMask()
        {
            ClothBank Cb = BankRobMissions.Oufit;

            if (Cb.FreeMode)
            {
                int iMaskPos = 0;
                int iMask = 0;
                int iMasktext = 0;

                if (Cb.Male)
                {
                    iMaskPos = RandomX.FindRandom("OLPSet4af", 0, DataStore.FMMasks.Count - 1);
                    iMask = DataStore.FMMasks[iMaskPos].Cloth;
                    iMasktext = DataStore.FMMasks[iMaskPos].Textures[RandomX.RandInt(0, DataStore.FMMasks[iMaskPos].Textures.Count - 1)];
                }
                else
                {
                    iMaskPos = RandomX.FindRandom("OLPSet4am", 0, DataStore.FFMasks.Count - 1);
                    iMask = DataStore.FFMasks[iMaskPos].Cloth;
                    iMasktext = DataStore.FFMasks[iMaskPos].Textures[RandomX.RandInt(0, DataStore.FFMasks[iMaskPos].Textures.Count - 1)];
                }
                Cb.Cothing[Cb.CothInt].Title = "BankRobber";
                Cb.Cothing[Cb.CothInt].ClothA = new List<int> { 0, iMask, -1, -1, 135, 45, 12, -1, -1, -1, -1, 364 };
                Cb.Cothing[Cb.CothInt].ClothB = new List<int> { 0, iMasktext, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1 };

                EntityBuild.PedDresser(Game.Player.Character, Cb.Cothing[Cb.CothInt], new List<int> { 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 });
            }
            else
            {
                if (Cb.Name == "Franklin")
                {
                    int iMask = RandomX.RandInt(8, 14);
                    Cb.Cothing[Cb.CothInt].Title = "BankRobber";
                    Cb.Cothing[Cb.CothInt].ClothA = new List<int>();
                    Cb.Cothing[Cb.CothInt].ClothB = new List<int>();
                    Cb.Cothing[Cb.CothInt].ExtraA = new List<int> { iMask };
                    Cb.Cothing[Cb.CothInt].ExtraB = new List<int> { 0 };
                    EntityBuild.PedDresser(Game.Player.Character, Cb.Cothing[Cb.CothInt]);
                }
                else if (Cb.Name == "Michael")
                {
                    int iMask = RandomX.RandInt(14, 20);
                    Cb.Cothing[Cb.CothInt].Title = "BankRobber";
                    Cb.Cothing[Cb.CothInt].ClothA = new List<int>();
                    Cb.Cothing[Cb.CothInt].ClothB = new List<int>();
                    Cb.Cothing[Cb.CothInt].ExtraA = new List<int> { iMask };
                    Cb.Cothing[Cb.CothInt].ExtraB = new List<int> { 0 };
                    EntityBuild.PedDresser(Game.Player.Character, Cb.Cothing[Cb.CothInt]);
                }
                else if (Cb.Name == "Trevor")
                {
                    int iMask = RandomX.RandInt(14, 20);
                    Cb.Cothing[Cb.CothInt].Title = "BankRobber";
                    Cb.Cothing[Cb.CothInt].ClothA = new List<int>();
                    Cb.Cothing[Cb.CothInt].ClothB = new List<int>();
                    Cb.Cothing[Cb.CothInt].ExtraA = new List<int> { iMask };
                    Cb.Cothing[Cb.CothInt].ExtraB = new List<int> { 0 };
                    EntityBuild.PedDresser(Game.Player.Character, Cb.Cothing[Cb.CothInt]);
                }
            }
        }
        private void Getaway_SplashCash()
        {
            if (BankRobMissions.Time01 < Game.GameTime)
            {
                if (BankRobMissions.Pennys.Count > 0)
                {
                    Function.Call(Hash.STOP_PARTICLE_FX_LOOPED, BankRobMissions.Pennys[BankRobMissions.Pennys.Count - 1], true);
                    BankRobMissions.Pennys.RemoveAt(BankRobMissions.Pennys.Count - 1);
                }
                else
                    BankRobMissions.LostDollas = false;
            }
            else
            {
                if (BankRobMissions.Pennys.Count == 0)
                {
                    if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, "scr_xs_celebration"))
                    {
                        Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_xs_celebration");
                        BankRobMissions.Pennys.Add(Function.Call<int>(Hash.START_PARTICLE_FX_LOOPED_ON_ENTITY, "scr_xs_money_rain", BankRobMissions.Robber01.Handle, 0.40f, 0.40f, 0.50f, 0.00f, 0.00f, 0.00f, 1.00f, false, true, false));
                        Function.Call(Hash.SET_PARTICLE_FX_LOOPED_ALPHA, BankRobMissions.Pennys[0], 1.00f);
                        Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_xs_celebration");
                        BankRobMissions.Pennys.Add(Function.Call<int>(Hash.START_PARTICLE_FX_LOOPED_ON_ENTITY, "scr_xs_money_rain", BankRobMissions.Robber02.Handle, -0.40f, -0.40f, 0.50f, 0.00f, 0.00f, 0.00f, 1.00f, false, true, false));
                        Function.Call(Hash.SET_PARTICLE_FX_LOOPED_ALPHA, BankRobMissions.Pennys[1], 1.00f);
                        Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_xs_celebration");
                        BankRobMissions.Pennys.Add(Function.Call<int>(Hash.START_PARTICLE_FX_LOOPED_ON_ENTITY, "scr_xs_money_rain", BankRobMissions.Robber03.Handle, 0.40f, -0.40f, 0.50f, 0.00f, 0.00f, 0.00f, 1.00f, false, true, false));
                        Function.Call(Hash.SET_PARTICLE_FX_LOOPED_ALPHA, BankRobMissions.Pennys[2], 1.00f);
                    }
                    else
                    {
                        Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_xs_celebration");
                    }
                }
            }
        }
        private void Getaway_RobDaBank()
        {
            LoggerLight.LogThis("Getaway_RobDaBank");
            Game.Player.WantedLevel = 4;

            UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[2], "", 0f, false));
            Function.Call(Hash.SET_POLICE_IGNORE_PLAYER, Game.Player.Character.Handle, false);
            BankRobMissions.GetAwayVeh.IsDriveable = true;
            BankRobMissions.GetAwayVeh.HandbrakeOn = false;
            int HealthTotal = 0;
            List<Vehicle> VicList = new List<Vehicle>();
            List<Ped> PedList = new List<Ped>();

            float fVehCheck = BankRobMissions.GetAwayVeh.BodyHealth + BankRobMissions.GetAwayVeh.EngineHealth + BankRobMissions.GetAwayVeh.PetrolTankHealth;
            HealthTotal += (int)fVehCheck;
            VicList.Add(new Vehicle(BankRobMissions.GetAwayVeh.Handle));

            PedList.Add(new Ped(BankRobMissions.Robber01.Handle));
            HealthTotal += BankRobMissions.Robber01.Health;
            PedList.Add(new Ped(BankRobMissions.Robber02.Handle));
            HealthTotal += BankRobMissions.Robber02.Health;
            PedList.Add(new Ped(BankRobMissions.Robber03.Handle));
            HealthTotal += BankRobMissions.Robber03.Health;
            PedList.Add(new Ped(Game.Player.Character.Handle));
            HealthTotal += Game.Player.Character.Health;

            ReturnStuff.DamageControl = new Crash4Cash(HealthTotal, BankRobMissions.CashTotal, VicList, PedList);

            BankRobMissions.EndVeh = EntityBuild.VehicleSpawn(new VehMods(BankRobMissions.MyEnd.EndVeh, 0, true), BankRobMissions.MyEnd.EndVehPos);
            if (BankRobMissions.EndVeh.ClassType == VehicleClass.Boats)
                Function.Call(Hash.SET_BOAT_ANCHOR, BankRobMissions.EndVeh, true);

            Function.Call(Hash.TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS, BankRobMissions.Robber01.Handle, false);
            Function.Call(Hash.TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS, BankRobMissions.Robber02.Handle, false);
            Function.Call(Hash.TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS, BankRobMissions.Robber03.Handle, false);

            EntityBuild.ArmsRegulator(BankRobMissions.Robber01, 3);
            EntityBuild.ArmsRegulator(BankRobMissions.Robber02, 3);
            EntityBuild.ArmsRegulator(BankRobMissions.Robber03, 3);

            if (!BankRobMissions.AlowAir)
                NSBanking.NSCoinInvestments(false, 25, 50, "Fleeca Shares");

            LoggerLight.LogThis("Getaway_RobDaBank,  ");
        }
        private void Getaway_ReSpray(Vector3 Start, Vector3 End)
        {
            Vector3 Campo = BankRobMissions.GetAwayVeh.Position + (BankRobMissions.GetAwayVeh.UpVector * 10f);
            Vector3 Camro = new Vector3(-90.00f, 0.00f, 0.00f);
            MissionData.cCams = World.CreateCamera(Campo, Camro, 50.00f);
            EntityLog.BackUpAss("CamX-" + MissionData.cCams.Handle);
            Function.Call(Hash.RENDER_SCRIPT_CAMS, 1, 1, MissionData.cCams.Handle, 0, 0);
            EntityBuild.DriveToDest(BankRobMissions.GetAwayVeh, End, Game.Player.Character, 3f, 0);
            int iCantWait = Game.GameTime + 4000;
            while (ReturnStuff.AreUNear(BankRobMissions.GetAwayVeh.Position, End, 5f))
            {
                Script.Wait(10);
                if (iCantWait < Game.GameTime)
                    BankRobMissions.GetAwayVeh.Position = End;
            }

            VehMods MyMods = new VehMods("", 0, false, true, "Getaway");
            EntityBuild.MakeModsNotWar(BankRobMissions.GetAwayVeh, MyMods.MyVehMods);
            Script.Wait(1000);
            DataStore.Drilar.Play();
            BankRobMissions.GetAwayVeh.Repair();
            BankRobMissions.GetAwayVeh.Heading -= 180;
            Game.Player.WantedLevel = 0;
            EntityBuild.DriveToDest(BankRobMissions.GetAwayVeh, Start, Game.Player.Character, 3f, 0);
            iCantWait = Game.GameTime + 4000;
            while (ReturnStuff.AreUNear(BankRobMissions.GetAwayVeh.Position, Start, 5f))
            {
                Script.Wait(10);
                if (iCantWait < Game.GameTime)
                    BankRobMissions.GetAwayVeh.Position = Start;
            }

            EntityClear.CleanCams();
        }
        private void Getaway_StopLoss()
        {
            LoggerLight.LogThis("Getaway_StopLoss");

            for (int i = 0; i < BankRobMissions.Pennys.Count; i++)
                Function.Call(Hash.STOP_PARTICLE_FX_LOOPED, BankRobMissions.Pennys[i], true);
        }
        private void Getaway_CarSwap(Vehicle Vhick)
        {
            LoggerLight.LogThis("Getaway_CarSwap");

            Vehicle Vreplace = EntityBuild.VehicleSpawn(new VehMods(Vhick, 0), new Vector4(Vhick.Position.X, Vhick.Position.Y, Vhick.Position.Z + 150f, Vhick.Heading));

            Vector3 VeVecP = Vhick.Position;
            Vector3 VeVecO = Vhick.Rotation;
            Vhick.Delete();
            EntityBuild.VehicleWarp(Vreplace, Game.Player.Character, 1);
            Vreplace.Position = VeVecP;
            Vreplace.Rotation = VeVecO;
            BankRobMissions.GetAwayVeh = Vreplace;
        }
        private void Getaway_ExitBank()
        {
            LoggerLight.LogThis("Getaway_ExitBank");

            Getaway_AddPlayerMask();
            EntityClear.RemoveTargets();
            World.AddExplosion(BankRobMissions.MyBank.Target02, ExplosionType.Flare, 1.0f, 0.0f);
            iWait4Sec = Game.GameTime + 15000;
            BankRobMissions.GetAwayVeh.EngineRunning = false;
            BankRobMissions.GetAwayVeh.IsExplosionProof = false;
            BankRobMissions.GetAwayVeh.IsOnlyDamagedByPlayer = false;
            BankRobMissions.GetAwayVeh.IsFireProof = false;

            SearchFor.BackSeat.Add(new FindSeat(2, BankRobMissions.GetAwayVeh, BankRobMissions.Robber01, 2f));
            SearchFor.BackSeat.Add(new FindSeat(3, BankRobMissions.GetAwayVeh, BankRobMissions.Robber02, 2f));
            SearchFor.BackSeat.Add(new FindSeat(4, BankRobMissions.GetAwayVeh, BankRobMissions.Robber03, 2f));
        }
        private void Getaway_AddingRewards()
        {
            LoggerLight.LogThis("Getaway_AddingRewards");

            if (BankRobMissions.PickyDriver)
                DataStore.MyAchivments.Getaway_PickyDriver++;

            if (BankRobMissions.CashLoss < BankRobMissions.CashTotal / 2)
                DataStore.MyAchivments.Getaway_PennyLess = BankRobMissions.CashLoss;

            if (BankRobMissions.AlowAir && BankRobMissions.GetAwayVeh.ClassType == VehicleClass.Helicopters)
                DataStore.MyAchivments.Getaway_FlighttoSaftey++;

            if (BankRobMissions.LoseCops < 0)
                BankRobMissions.LoseCops *= -1;

            if (DataStore.MyAchivments.Getaway_GoneInSixtySeconds == 0)
                DataStore.MyAchivments.Getaway_GoneInSixtySeconds = BankRobMissions.LoseCops;
            else if (BankRobMissions.LoseCops < DataStore.MyAchivments.Getaway_GoneInSixtySeconds)
                DataStore.MyAchivments.Getaway_GoneInSixtySeconds = BankRobMissions.LoseCops;

        }
        public static AchList Getaway_Awards(int cashLost, int cashtotal, bool bCash)
        {
            AchList MyAss = new AchList(1);

            MyAss.Medal = 3;
            int iPer = 0;

            if (DataStore.MyAchivments.Getaway_PickyDriver > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[177], DataStore.MyLang.Othertext[178], "", 1));
                iPer += 25;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[177], DataStore.MyLang.Othertext[178], "", 0));
            }

            int iLoss = cashtotal / 2;
            if (DataStore.MyAchivments.Getaway_PennyLess > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[179], DataStore.MyLang.Othertext[180], "$" + DataStore.MyAchivments.Getaway_PennyLess, 1));
                iPer += 25;
            }
            else
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[179], DataStore.MyLang.Othertext[180], "$" + cashLost + "/ $" + iLoss, 0));

            if (DataStore.MyAchivments.Getaway_FlighttoSaftey > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[181], DataStore.MyLang.Othertext[182], "", 1));
                iPer += 25;
            }
            else
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[181], DataStore.MyLang.Othertext[182], "", 0));

            if (DataStore.MyAchivments.Getaway_GoneInSixtySeconds < 61000 && DataStore.MyAchivments.Getaway_GoneInSixtySeconds != 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[183], DataStore.MyLang.Othertext[184], ReturnStuff.ShowComs(DataStore.MyAchivments.Getaway_GoneInSixtySeconds, false, false), 1));
                iPer += 25;
            }
            else
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[183], DataStore.MyLang.Othertext[184], ReturnStuff.ShowComs(DataStore.MyAchivments.Getaway_GoneInSixtySeconds, false, false), 0));

            if (bCash)
            {
                MyAss.Cash = BankRobMissions.CashEarning;
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[53], "", "$" + ReturnStuff.ShowComs(MyAss.Cash, true, false), 3));
            }

            if (iPer > 99)
                MyAss.Medal = 1;
            else if (iPer > 50)
                MyAss.Medal = 2;
            MyAss.Percent = iPer;
            return MyAss;
        }
        private void Packages_LiveExport(Vehicle vHick)
        {
            LoggerLight.LogThis("Packages_LiveExport");

            Ped PHen = EntityBuild.NPCSpawn(new PedFeat("a_c_hen", false, 150, 0), vHick.Position, 0.00f);
            PHen.AttachTo(vHick, vHick.GetBoneIndex("bodyshell"), new Vector3(-0.70f, -0.20f, 0.48f), new Vector3(0.00f, 0.00f, ReturnStuff.RandFlow(0.01f, 359.99f)));

            PHen = EntityBuild.NPCSpawn(new PedFeat("a_c_hen", false, 150, 0), vHick.Position, 0.00f);
            PHen.AttachTo(vHick, vHick.GetBoneIndex("bodyshell"), new Vector3(-0.40f, -1.00f, 0.48f), new Vector3(0.00f, 0.00f, ReturnStuff.RandFlow(0.01f, 359.99f)));

            PHen = EntityBuild.NPCSpawn(new PedFeat("a_c_hen", false, 150, 0), vHick.Position, 0.00f);
            PHen.AttachTo(vHick, vHick.GetBoneIndex("bodyshell"), new Vector3(0.40f, -1.20f, 0.48f), new Vector3(0.00f, 0.00f, ReturnStuff.RandFlow(0.01f, 359.99f)));

            PHen = EntityBuild.NPCSpawn(new PedFeat("a_c_hen", false, 150, 0), vHick.Position, 0.00f);
            PHen.AttachTo(vHick, vHick.GetBoneIndex("bodyshell"), new Vector3(0.80f, -0.20f, 0.48f), new Vector3(0.00f, 0.00f, ReturnStuff.RandFlow(0.01f, 359.99f)));

            PHen = EntityBuild.NPCSpawn(new PedFeat("a_c_hen", false, 150, 0), vHick.Position, 0.00f);
            PHen.AttachTo(vHick, vHick.GetBoneIndex("bodyshell"), new Vector3(0.50f, -2.40f, 0.48f), new Vector3(0.00f, 0.00f, ReturnStuff.RandFlow(0.01f, 359.99f)));

            PHen = EntityBuild.NPCSpawn(new PedFeat("a_c_hen", false, 150, 0), vHick.Position, 0.00f);
            PHen.AttachTo(vHick, vHick.GetBoneIndex("bodyshell"), new Vector3(-0.80f, -2.80f, 0.48f), new Vector3(0.00f, 0.00f, ReturnStuff.RandFlow(0.01f, 359.99f)));
        }
        private void Packages_AddingAwards(bool bMinSpair)
        {
            LoggerLight.LogThis("Packages_AddingAwards");

            int iHigh = 2;
            int iLow = 1;
            if (bMinSpair)
            {
                iHigh = 5;
                iLow = 3;
            }

            if (LocationX == 1)
            {
                if (bMinSpair)
                {
                    PackManMissions.TotalEarnings = 4 * PackManMissions.PackDeliv;
                    DataStore.MyAchivments.Packages_CanYouSignHere++;
                }
                NSBanking.NSCoinInvestments(true, iLow, iHigh, "Post OP Shares");
            }
            else if (LocationX == 2)
            {
                if (bMinSpair)
                {
                    PackManMissions.TotalEarnings = 3 * PackManMissions.PackDeliv;
                    DataStore.MyAchivments.Packages_WeAimNottoLoseit++;
                }
                NSBanking.NSCoinInvestments(true, iLow, iHigh, "GoPostal Shares");
            }
            else if (LocationX == 3)
            {
                if (bMinSpair)
                {
                    PackManMissions.TotalEarnings = 5 * PackManMissions.PackDeliv;
                    DataStore.MyAchivments.Packages_BigParma++;
                }
                NSBanking.NSCoinInvestments(true, iLow, iHigh, "Pop's Pills Shares");
            }
            else if (LocationX == 4)
            {
                if (bMinSpair)
                {
                    PackManMissions.TotalEarnings = 50 * PackManMissions.PackDeliv;
                    DataStore.MyAchivments.Packages_LostinTheBin++;
                }
                NSBanking.NSCoinInvestments(!bMinSpair, iLow, iHigh, "Dollar Pills Shares");
            }
            else if (LocationX == 5)
            {
                if (bMinSpair)
                {
                    PackManMissions.TotalEarnings = 10 * PackManMissions.PackDeliv;
                    DataStore.MyAchivments.Packages_ChickenRun++;
                }
                NSBanking.NSCoinInvestments(true, iLow, iHigh, "Sunset Bleach Shares");
            }
            else if (LocationX == 6)
            {
                if (bMinSpair)
                {
                    PackManMissions.TotalEarnings = 2 * PackManMissions.PackDeliv;
                    DataStore.MyAchivments.Packages_PaperBoy++;
                }
                NSBanking.NSCoinInvestments(true, iLow, iHigh, "Weazel Shares");
            }
            else if (LocationX == 7)
            {
                if (bMinSpair)
                {
                    PackManMissions.TotalEarnings = 7 * PackManMissions.PackDeliv;
                    DataStore.MyAchivments.Packages_PavelsPlacements++;
                }
                NSBanking.NSCoinInvestments(true, iLow, iHigh, "Madrass Inc");
            }
        }
        public static AchList Packages_Awards(int Delivered, int TotalPack, int TimeLeft, bool bCash)
        {
            AchList MyAss = new AchList(2);

            MyAss.Medal = 3;
            int iPer = 0;

            if (DataStore.MyAchivments.Packages_CanYouSignHere > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[185], DataStore.MyLang.Othertext[186], "", 1));
                iPer += 14;
            }
            else
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[185], DataStore.MyLang.Othertext[186], "", 0));

            if (DataStore.MyAchivments.Packages_WeAimNottoLoseit > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[187], DataStore.MyLang.Othertext[188], "", 1));
                iPer += 15;
            }
            else
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[187], DataStore.MyLang.Othertext[188], "", 0));

            if (DataStore.MyAchivments.Packages_BigParma > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[189], DataStore.MyLang.Othertext[190], "", 1));
                iPer += 14;
            }
            else
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[189], DataStore.MyLang.Othertext[190], "", 0));

            if (DataStore.MyAchivments.Packages_LostinTheBin > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[191], DataStore.MyLang.Othertext[192], "", 1));
                iPer += 15;
            }
            else
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[191], DataStore.MyLang.Othertext[192], "", 0));

            if (DataStore.MyAchivments.Packages_ChickenRun > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[193], DataStore.MyLang.Othertext[194], "", 1));
                iPer += 14;
            }
            else
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[193], DataStore.MyLang.Othertext[194], "", 0));

            if (DataStore.MyAchivments.Packages_PaperBoy > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[195], DataStore.MyLang.Othertext[196], "", 1));
                iPer += 14;
            }
            else
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[195], DataStore.MyLang.Othertext[196], "", 0));

            if (DataStore.MyAchivments.Packages_PavelsPlacements > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[197], DataStore.MyLang.Othertext[198], "", 1));
                iPer += 14;
            }
            else
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[197], DataStore.MyLang.Othertext[198], "", 0));

            if (bCash)
            {
                PackManMissions.TotalEarnings = Delivered * PackManMissions.ParcelCost;

                if (Delivered == TotalPack)
                    PackManMissions.TotalEarnings += 100;

                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[199], DataStore.MyLang.Othertext[200], Delivered + "/" + TotalPack, 3));

                if (TimeLeft > 59000)
                    PackManMissions.TotalEarnings += 100;

                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[201], DataStore.MyLang.Othertext[202], ReturnStuff.ShowComs(TimeLeft, false, false) + "/1:00", 3));

                MyAss.Cash = PackManMissions.TotalEarnings;
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[53], "", "$" + ReturnStuff.ShowComs(MyAss.Cash, true, false), 3));
            }
            else
                iPer += 30;

            if (iPer > 99)
                MyAss.Medal = 1;
            else if (iPer > 50)
                MyAss.Medal = 2;
            MyAss.Percent = iPer;
            return MyAss;
        }
        public static void Convicts_KrishaLine(Ped Harry, bool Leader)
        {
            LoggerLight.LogThis("Convicts_KrishaLine, Leader == " + Leader);

            if (Leader)
                Function.Call(Hash.SET_PED_AS_GROUP_LEADER, Harry.Handle, DataStore.GP_ANPCs);

            PedMultiTask ThisMult = new PedMultiTask(Harry, null, ReturnStuff.PedWalkies(Harry, ConvictMissions.Parade.ConMarch, ConvictMissions.Patrol));
            MultiPed.Add(ThisMult);
        }
        private void Convicts_DumpCons(Vector3 vDump)
        {
            LoggerLight.LogThis("Convicts_DumpCons");
            bool bFirst = true;
            for (int i = 0; i < 7; i++)
            {
                if (bFirst)
                {
                    ConvictMissions.HeadHarry = EntityBuild.NPCSpawn(new PedFeat("s_m_y_prisoner_01", false, 105, 3, 0, null, 0, true, 18, DataStore.MyLang.Maptext[108]), vDump, 0.00f);
                    bFirst = false;
                }
                else
                    EntityBuild.NPCSpawn(new PedFeat("s_m_y_prisoner_01", false, 105, 4, 0, null, 0, true, 18, DataStore.MyLang.Maptext[108]), vDump, 0.00f);

                Script.Wait(500);
            }
        }
        private void Convicts_KrishaToBus()
        {
            LoggerLight.LogThis("Convicts_KrishaToBus");

            Game.FadeScreenOut(1000);
            Script.Wait(1000);

            int iSitEre = ConvictMissions.Bus.PassengerSeats;

            for (int i = 0; i < MissionData.PedList_01.Count; i++)
            {
                EntityBuild.FreeSeat(ConvictMissions.Bus, iSitEre, false);
                MissionData.PedList_01[i].CurrentBlip.Remove();
                EntityBuild.WarptoAnyVeh(ConvictMissions.Bus, MissionData.PedList_01[i], iSitEre);
                iSitEre -= 1;
            }

            JobSeq++;
            Game.FadeScreenIn(1000);
        }
        private void Convicts_HarrySing()
        {
            if (ConvictMissions.HarryChant)
            {
                ConvictMissions.HarryChant = false;
                ConvictMissions.ChantsListen -= Game.GameTime;
                DataStore.Hare.Stop();
            }
            else
            {
                ConvictMissions.HarryChant = true;
                ConvictMissions.ChantsListen += Game.GameTime;
                DataStore.Hare.PlayLooping();
            }
        }
        private void Convicts_WalkLoop()
        {
            int iBeenHit = 0;
            for (int i = 0; i < MultiPed.Count; i++)
            {
                if (MultiPed[i].MyPed.HasBeenDamagedBy(Game.Player.Character))
                    iBeenHit += 1;
                else if (MultiPed[i].MyPed.IsFleeing)
                    iBeenHit += 1;
                else if (ReturnStuff.AreUNear(MultiPed[i].MyPed.Position, ConvictMissions.Parade.ConMarch[MultiPed[i].MyTask_01], 1.5f))
                    MultiPed[i].MyTask_01 = ReturnStuff.PedWalkies(MultiPed[i].MyPed, ConvictMissions.Parade.ConMarch, MultiPed[i].MyTask_01);
            }

            if (iBeenHit > 0)
            {
                iBeenHit = 0;
                if (ConvictMissions.HarryChant)
                {
                    ConvictMissions.HarryChant = false;
                    DataStore.Hare.Stop();
                }

                Script.Wait(2000);
                for (int i = 0; i < MultiPed.Count; i++)
                {
                    if (MultiPed[i].MyPed.HasBeenDamagedBy(Game.Player.Character))
                        iBeenHit += 1;
                    else if (MultiPed[i].MyPed.IsDead)
                        iBeenHit += 1;

                    MultiPed[i].MyPed.Task.FleeFrom(Game.Player.Character);
                }
                if (iBeenHit == MultiPed.Count)
                    JobSeq = 25;
                else
                    JobSeq = 45;
            }
        }
        private void Convicts_AddingAwards(bool bGOURANGA)
        {
            LoggerLight.LogThis("Convicts_AddingAwards");

            ConvictMissions.CashPayment = (ConvictMissions.TotalTime - Game.GameTime) / 100 * -1;
            if (ConvictMissions.CashPayment > 10000)
                ConvictMissions.CashPayment = RandomX.RandInt(9950, 9999);

            if (bGOURANGA)
            {
                DataStore.MyAchivments.Convicts_Goranga++;
            }
            else
            {
                if (ConvictMissions.ChantsListen > DataStore.MyAchivments.Convicts_DigThatChantingThing)
                    DataStore.MyAchivments.Convicts_DigThatChantingThing = ConvictMissions.ChantsListen;

                if (DataStore.MyAchivments.Convicts_DontStopForCoffiee == 0)
                    DataStore.MyAchivments.Convicts_DontStopForCoffiee = ConvictMissions.NoCoffee;
                else if (ConvictMissions.NoCoffee < DataStore.MyAchivments.Convicts_DontStopForCoffiee)
                    DataStore.MyAchivments.Convicts_DontStopForCoffiee = ConvictMissions.NoCoffee;
            }
        }
        public static AchList Convicts_Awards(int cashtotal, bool bCash, bool Goranga)
        {
            AchList MyAss = new AchList(3);

            MyAss.Medal = 3;
            int iPer = 0;
            MyAss.Goranga = Goranga;

            if (DataStore.MyAchivments.Convicts_Goranga > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[203], DataStore.MyLang.Othertext[204], "", 1));
                iPer += 33;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[203], DataStore.MyLang.Othertext[204], "", 0));
            }

            if (DataStore.MyAchivments.Convicts_DigThatChantingThing > 179000)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[205], DataStore.MyLang.Othertext[206], ReturnStuff.ShowComs(DataStore.MyAchivments.Convicts_DigThatChantingThing, false, false) + "/3:00", 1));
                iPer += 33;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[205], DataStore.MyLang.Othertext[206], ReturnStuff.ShowComs(DataStore.MyAchivments.Convicts_DigThatChantingThing, false, false) + "/3:00", 0));
            }

            if (DataStore.MyAchivments.Convicts_DontStopForCoffiee < 2000 && DataStore.MyAchivments.Convicts_DontStopForCoffiee != 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[207], DataStore.MyLang.Othertext[208], ReturnStuff.ShowComs(DataStore.MyAchivments.Convicts_DontStopForCoffiee, false, false) + "/0:01", 1));
                iPer += 34;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[207], DataStore.MyLang.Othertext[208], ReturnStuff.ShowComs(DataStore.MyAchivments.Convicts_DontStopForCoffiee, false, false) + "/0:01", 0));
            }

            if (bCash)
            {
                MyAss.Cash = cashtotal;
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[53], "", "$" + ReturnStuff.ShowComs(MyAss.Cash, true, false), 3));
            }

            if (iPer > 99)
                MyAss.Medal = 1;
            else if (iPer > 50)
                MyAss.Medal = 2;
            MyAss.Percent = iPer;
            return MyAss;
        }
        public static void Fubar_SpawnInCar(Vehicle Vhick)
        {
            FubarMissions.FubVeh = Vhick;
            FubarMissions.FubVeh.SmashWindow(VehicleWindow.FrontLeftWindow);
            FubarMissions.StartDriver = EntityBuild.NPCSpawn(new PedFeat(ReturnStuff.RandNPC(18), false, 150, 0, 1, FubarMissions.FubVeh, 2, false, 0, ""), FubarMissions.FubVeh.Position, 0.00f);
            FubarMissions.PlayerPos = Game.Player.Character.Position;
            EntityBuild.DriveToDest(FubarMissions.FubVeh, FubarMissions.PlayerPos, FubarMissions.StartDriver, 35f, 1074528293);
        }
        public static void Fubar_FollowCar(Vehicle MyCar)
        {
            Ped Denis = EntityBuild.NPCSpawn(new PedFeat(ReturnStuff.RandNPC(18), false, 150, 0, 1, MyCar, 2, false, 0, ""), MyCar.Position, 0.00f);
            EntityBuild.VehBlip(new BlipForm(3, DataStore.MyLang.Maptext[14]), MyCar);
            EntityBuild.DriveToDest(MyCar, FubarMissions.End.ParkHere, Denis, 25f, 1073742652);
            FubarMissions.ThatCar = MyCar;
            FubarMissions.ThatDriver = Denis;
        }
        private static void Fubar_GetLocals(int iTotalPay, int iRepMish, Vehicle fubar)
        {
            LoggerLight.LogThis("Fubar_GetLocals");

            LocationX = ReturnStuff.WhereAreYou();
            MultiPed.Clear();
            UiDisplay.SideBars.Clear();

            FubarMissions = new FubarCars(iTotalPay, iRepMish, fubar);

            int iPlace;
            int iReturn;

            if (ReturnStuff.BeRightOnTime(7, 12))
            {
                iPlace = RandomX.FindRandomList("FubDest01", new List<int> { 2, 3, 6, 7, 8, 9 });

                if (iPlace == 2 || iPlace == 3)
                    iReturn = RandomX.FindRandom("FubDest02", 6, 9);
                else
                    iReturn = RandomX.FindRandomList("FubDest01", new List<int> { 2, 3, 6, 7, 8, 9 });
            }
            else if (ReturnStuff.BeRightOnTime(12, 18))
            {
                iPlace = RandomX.FindRandom("FubDest03", 1, 9);
                iReturn = RandomX.FindRandom("FubDest03", 1, 9);
            }
            else if (ReturnStuff.BeRightOnTime(18, 23))
            {
                iPlace = RandomX.FindRandomList("FubDest04", new List<int> { 1, 4, 5, 6, 7, 8, 9 });

                if (iPlace == 1 || iPlace == 4 || iPlace == 5)
                    iReturn = RandomX.FindRandom("FubDest05", 6, 9);
                else
                    iReturn = RandomX.FindRandomList("FubDest04", new List<int> { 1, 4, 5, 6, 7, 8, 9 });
            }
            else
            {
                iPlace = RandomX.FindRandom("FubDest06", 5, 9);
                iReturn = RandomX.FindRandom("FubDest06", 5, 9);
            }

            int AltEndings = RandomX.FindRandom("FubDest07", 1, 100);

            if (AltEndings < 5)
            {
                iReturn = 7;
                FubarMissions.FollowThatCar = true;
                FubarMissions.End = MissionData.AppartmentBlocks(LocationX, iReturn, -1, -1, true);
            }
            else if (AltEndings < 10)
            {
                iPlace = RandomX.FindRandom("FubDest09", 6, 9);
                FubarMissions.End = new FubarVectors(1, new Vector4(-1034.028f, -2730.211f, 19.56105f, 237.9382f), new Vector4(-1043.051f, -2746.745f, 21.3594f, 333.9205f), "LSIA", 0);
                FubarMissions.AirprtRun = true;
            }
            else if (AltEndings < 40)
                FubarMissions.End = MissionData.AppartmentBlocks(RandomX.FindRandom("FubDest08", 1, 6), iReturn, -1, -1, true);
            else
                FubarMissions.End = MissionData.AppartmentBlocks(LocationX, iReturn, -1, -1, true);

            int iPass = RandomX.FindRandom("FubDest09", 1, 15);
            if (iPass < 10)
                iPass = 2;
            else if (iPass < 13)
                iPass = 1;
            else
                iPass = 3;

            FubarMissions.Passengers = iPass;
            FubarMissions.Start = MissionData.PickUpApartmentBlocks(LocationX, iPlace, true);

            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[18];
            UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[4], "$ " + ReturnStuff.ShowComs(FubarMissions.FuFare, true, false), 0f, false));
            UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Jobtext[95], "$ " + ReturnStuff.ShowComs(FubarMissions.TotalPay, true, false), 0f, false));
        }
        private void Fubar_CarShare(int iPed)
        {
            LoggerLight.LogThis("Fubar_CarShare");

            iPed = RandomX.RandInt(1, 35);

            EntityBuild.FreeSeat(FubarMissions.FubVeh, 2, true);
            EntityBuild.FreeSeat(FubarMissions.FubVeh, 3, true);
            EntityBuild.FreeSeat(FubarMissions.FubVeh, 4, true);

            if (FubarMissions.Passengers == 1)
            {
                int iRandNumb = RandomX.FindRandom("Fubar_CarShare01", 0, 30);
                if (iRandNumb < 10)
                    FubarMissions.Passenger01 = EntityBuild.NPCSpawn(Fubar_PedLoader(iPed, 5), FubarMissions.Start.PedHere);
                else if (iRandNumb < 20)
                    FubarMissions.Passenger01 = EntityBuild.NPCSpawn(Fubar_PedLoader(iPed, 6), FubarMissions.Start.PedHere);
                else
                    FubarMissions.Passenger01 = EntityBuild.NPCSpawn(Fubar_PedLoader(iPed, 7), FubarMissions.Start.PedHere);
            }
            else if (FubarMissions.Passengers == 2)
            {
                int iRandNumb = RandomX.FindRandom("Fubar_CarShare01", 0, 30);
                if (iRandNumb < 10)
                {
                    FubarMissions.Passenger01 = EntityBuild.NPCSpawn(Fubar_PedLoader(iPed, 5), FubarMissions.Start.PedHere);
                    FubarMissions.Passenger02 = EntityBuild.NPCSpawn(Fubar_PedLoader(iPed, 7), FubarMissions.Start.PedHere);
                }
                else if (iRandNumb < 20)
                {
                    FubarMissions.Passenger01 = EntityBuild.NPCSpawn(Fubar_PedLoader(iPed, 5), FubarMissions.Start.PedHere);
                    FubarMissions.Passenger02 = EntityBuild.NPCSpawn(Fubar_PedLoader(iPed, 6), FubarMissions.Start.PedHere);
                }
                else
                {
                    FubarMissions.Passenger01 = EntityBuild.NPCSpawn(Fubar_PedLoader(iPed, 6), FubarMissions.Start.PedHere);
                    FubarMissions.Passenger02 = EntityBuild.NPCSpawn(Fubar_PedLoader(iPed, 7), FubarMissions.Start.PedHere);
                }
            }
            else
            {
                FubarMissions.Passenger01 = EntityBuild.NPCSpawn(Fubar_PedLoader(iPed, 5), FubarMissions.Start.PedHere);
                FubarMissions.Passenger02 = EntityBuild.NPCSpawn(Fubar_PedLoader(iPed, 6), FubarMissions.Start.PedHere);
                FubarMissions.Passenger03 = EntityBuild.NPCSpawn(Fubar_PedLoader(iPed, 7), FubarMissions.Start.PedHere);
            }
        }
        private PedFeat Fubar_PedLoader(int iPed, int iSit)
        {
            PedFeat MyFeet = null;

            if (iPed > 0 && iPed < 6)
            {
                MyFeet = new PedFeat("", false, 180, iSit, 0, null, 0, true, 18, DataStore.MyLang.Maptext[45]);
            }
            else if (iPed > 51 && iPed < 72)
            {
                MyFeet = new PedFeat("", false, 180, iSit, 0, null, 0, true, 18, DataStore.MyLang.Maptext[45]);
            }
            else if (iPed == 100)
            {
                int iFind = RandomX.FindRandom("Fubar_PedLoader_100", 1, 4);
                if (iFind == 1)
                    MyFeet = new PedFeat("mp_f_forgery_01", false, 180, iSit, 0, null, 0, true, 18, DataStore.MyLang.Maptext[45], new ClothBank("Biker", false, false, false, BikerRaidsPeds(false, false, 3)));
                else if (iFind == 2)
                    MyFeet = new PedFeat("mp_m_forgery_01", false, 180, iSit, 0, null, 0, true, 18, DataStore.MyLang.Maptext[45], new ClothBank("Biker", false, false, false, BikerRaidsPeds(false, true, 3)));
                else if (iFind == 3)
                    MyFeet = new PedFeat("mp_m_forgery_01", false, 180, iSit, 0, null, 0, true, 18, DataStore.MyLang.Maptext[45], new ClothBank("Biker", false, false, false, BikerRaidsPeds(true, true, 3)));
                else
                    MyFeet = new PedFeat("", false, 180, iSit, 0, null, 0, true, 18, DataStore.MyLang.Maptext[45]);
            }
            else if (iPed == 101)
            {
                int iFind = RandomX.FindRandom("Fubar_PedLoader_100", 1, 4);
                if (iFind == 1)
                    MyFeet = new PedFeat("mp_f_cocaine_01", false, 180, iSit, 0, null, 0, true, 18, DataStore.MyLang.Maptext[45], new ClothBank("Biker", false, false, false, BikerRaidsPeds(false, false, 1)));
                else if (iFind == 2)
                    MyFeet = new PedFeat("mp_m_cocaine_01", false, 180, iSit, 0, null, 0, true, 18, DataStore.MyLang.Maptext[45], new ClothBank("Biker", false, false, false, BikerRaidsPeds(false, true, 1)));
                else if (iFind == 3)
                    MyFeet = new PedFeat("mp_m_cocaine_01", false, 180, iSit, 0, null, 0, true, 18, DataStore.MyLang.Maptext[45], new ClothBank("Biker", false, false, false, BikerRaidsPeds(true, true, 1)));
                else
                    MyFeet = new PedFeat("", false, 180, iSit, 0, null, 0, true, 18, DataStore.MyLang.Maptext[45]);
            }
            else if (iPed == 102)
            {
                int iFind = RandomX.FindRandom("Fubar_PedLoader_100", 1, 4);
                if (iFind == 1)
                    MyFeet = new PedFeat("mp_f_weed_01", false, 180, iSit, 0, null, 0, true, 18, DataStore.MyLang.Maptext[45], new ClothBank("Biker", false, false, false, BikerRaidsPeds(false, false, 5)));
                else if (iFind == 2)
                    MyFeet = new PedFeat("mp_m_weed_01", false, 180, iSit, 0, null, 0, true, 18, DataStore.MyLang.Maptext[45], new ClothBank("Biker", false, false, false, BikerRaidsPeds(false, true, 5)));
                else if (iFind == 3)
                    MyFeet = new PedFeat("mp_m_cocaine_01", false, 180, iSit, 0, null, 0, true, 18, DataStore.MyLang.Maptext[45], new ClothBank("Biker", false, false, false, BikerRaidsPeds(true, true, 5)));
                else
                    MyFeet = new PedFeat("", false, 180, iSit, 0, null, 0, true, 18, DataStore.MyLang.Maptext[45]);
            }
            else if (iPed == 103)
            {
                int iFind = RandomX.FindRandom("Fubar_PedLoader_100", 1, 4);
                if (iFind == 1)
                    MyFeet = new PedFeat("mp_f_counterfeit_01", false, 180, iSit, 0, null, 0, true, 18, DataStore.MyLang.Maptext[45], new ClothBank("Biker", false, false, false, BikerRaidsPeds(false, false, 2)));
                else if (iFind == 2)
                    MyFeet = new PedFeat("mp_m_counterfeit_01", false, 180, iSit, 0, null, 0, true, 18, DataStore.MyLang.Maptext[45], new ClothBank("Biker", false, false, false, BikerRaidsPeds(false, true, 2)));
                else if (iFind == 3)
                    MyFeet = new PedFeat("mp_m_counterfeit_01", false, 180, iSit, 0, null, 0, true, 18, DataStore.MyLang.Maptext[45], new ClothBank("Biker", false, false, false, BikerRaidsPeds(true, true, 2)));
                else
                    MyFeet = new PedFeat("", false, 180, iSit, 0, null, 0, true, 18, DataStore.MyLang.Maptext[45]);
            }
            else if (iPed == 104)
            {
                int iFind = RandomX.FindRandom("Fubar_PedLoader_100", 1, 4);
                if (iFind == 1)
                    MyFeet = new PedFeat("mp_f_meth_01", false, 180, iSit, 0, null, 0, true, 18, DataStore.MyLang.Maptext[45], new ClothBank("Biker", false, false, false, BikerRaidsPeds(false, false, 4)));
                else if (iFind == 2)
                    MyFeet = new PedFeat("mp_m_meth_01", false, 180, iSit, 0, null, 0, true, 18, DataStore.MyLang.Maptext[45], new ClothBank("Biker", false, false, false, BikerRaidsPeds(false, true, 4)));
                else if (iFind == 3)
                    MyFeet = new PedFeat("mp_m_meth_01", false, 180, iSit, 0, null, 0, true, 18, DataStore.MyLang.Maptext[45], new ClothBank("Biker", false, false, false, BikerRaidsPeds(true, true, 4)));
                else
                    MyFeet = new PedFeat("", false, 180, iSit, 0, null, 0, true, 18, DataStore.MyLang.Maptext[45]);
            }
            else if (iPed == 252 || iPed > 298)
            {
                MyFeet = new PedFeat(ReturnStuff.RandNPC(37), false, 180, iSit, 0, null, 0, true, 18, DataStore.MyLang.Maptext[45]);
            }
            else
            {
                int iFind = RandomX.FindRandom("Fubar_PedLoader_01", 13, 36);
                MyFeet = new PedFeat(ReturnStuff.RandNPC(iFind), false, 180, iSit, 0, null, 0, true, 18, DataStore.MyLang.Maptext[45]);
            }

            return MyFeet;
        }
        private void Fubar_AngreyTaxi()
        {
            LoggerLight.LogThis("Fubar_AngreyTaxi");

            int iTax = RandomX.FindRandom("Fubar_AngreyTaxi", 0, 50);
            if (iTax < 20 && Game.Player.Character.IsInVehicle())
            {
                if (iAngerTax < 1)
                {
                    int iNoAttacks = (LocationX - 7) * -1;
                    iAngerTax = 10;
                    for (int i = 0; i < iNoAttacks; i++)
                        SearchFor.MakeCarz.Add(new FindVeh(35.00f, 150.00f, new VehMods("TAXI", 12, 1, false, DataStore.MyLang.Maptext[24]), true));
                    FubarMissions.Attacks = true;
                }
            }

            iAngerTax--;
        }
        private void Fubar_Math(bool bTextBar)
        {
            FubarMissions.FuMeter = Game.GameTime + 5000;
            float fFIndFee = FubarMissions.Start.ParkHere.V3.DistanceTo(FubarMissions.FubVeh.Position) / 50;
            int iCost = (int)fFIndFee + 5;
            if (iCost > FubarMissions.FuFare)
                FubarMissions.FuFare = iCost;

            if (bTextBar)
                UiDisplay.SideBars[0].Data = "$ " + ReturnStuff.ShowComs(FubarMissions.FuFare, true, false);
        }
        private void Fubar_AddingAwards()
        {
            LoggerLight.LogThis("Fubar_Awards");

            if (FubarMissions.FollowThatCar)
                DataStore.MyAchivments.Fubar_FollowThatCar++;

            if (FubarMissions.Attacks)
                DataStore.MyAchivments.Fubar_BigYellowTaxi++;

            if (FubarMissions.AirprtRun)
                DataStore.MyAchivments.Fubar_AirportRun++;

            if (FubarMissions.FubVeh.DirtLevel < 1f)
                DataStore.MyAchivments.Fubar_TapTheMats++;
        }
        public static AchList Fubar_Awards(int cashtotal, bool bCash)
        {
            AchList MyAss = new AchList(4);

            MyAss.Medal = 3;
            int iPer = 0;

            if (DataStore.MyAchivments.Fubar_FollowThatCar > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[209], DataStore.MyLang.Othertext[210], "", 1));
                iPer += 25;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[209], DataStore.MyLang.Othertext[210], "", 0));
            }

            if (DataStore.MyAchivments.Fubar_AirportRun > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[211], DataStore.MyLang.Othertext[212], "", 1));
                iPer += 25;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[211], DataStore.MyLang.Othertext[212], "", 0));
            }

            if (DataStore.MyAchivments.Fubar_BigYellowTaxi > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[213], DataStore.MyLang.Othertext[214], "", 1));
                iPer += 25;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[213], DataStore.MyLang.Othertext[214], "", 0));
            }

            if (DataStore.MyAchivments.Fubar_TapTheMats > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[215], DataStore.MyLang.Othertext[216], "", 1));
                iPer += 25;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[215], DataStore.MyLang.Othertext[216], "", 0));
            }


            if (bCash)
            {
                MyAss.Cash = cashtotal;
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[53], "", "$" + ReturnStuff.ShowComs(MyAss.Cash, true, false), 3));
            }

            if (iPer > 99)
                MyAss.Medal = 1;
            else if (iPer > 50)
                MyAss.Medal = 2;
            MyAss.Percent = iPer;
            return MyAss;
        }
        public static AchList Pilot_Awards(int cashtotal, bool bCash)
        {
            AchList MyAss = new AchList(5);

            MyAss.Medal = 3;
            int iPer = 0;

            if (DataStore.MyAchivments.Planes01_AllTheAngles > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[217], DataStore.MyLang.Othertext[218], "", 1));
                iPer += 25;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[217], DataStore.MyLang.Othertext[218], "", 0));
            }

            if (DataStore.MyAchivments.Planes02_ItsThePlayerBase > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[219], DataStore.MyLang.Othertext[220], "", 1));
                iPer += 15;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[219], DataStore.MyLang.Othertext[220], "", 0));
            }

            if (DataStore.MyAchivments.Planes03_KeptItTogether > 9)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[221], DataStore.MyLang.Othertext[222], DataStore.MyAchivments.Planes03_KeptItTogether + "/10", 1));
                iPer += 15;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[221], DataStore.MyLang.Othertext[222], DataStore.MyAchivments.Planes03_KeptItTogether + "/10", 0));
            }

            if (DataStore.MyAchivments.Planes04_AllYouNeedIsHommingMissiles > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[223], DataStore.MyLang.Othertext[224], "", 1));
                iPer += 15;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[223], DataStore.MyLang.Othertext[224], "", 0));
            }

            if (DataStore.MyAchivments.Planes05_HeyFarmerFarmer > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[225], DataStore.MyLang.Othertext[226], "", 1));
                iPer += 15;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[225], DataStore.MyLang.Othertext[226], "", 0));
            }

            if (DataStore.MyAchivments.Planes06_LikeAndSubscribe > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[227], DataStore.MyLang.Othertext[228], "", 1));
                iPer += 15;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[227], DataStore.MyLang.Othertext[228], "", 0));
            }

            if (bCash)
            {
                MyAss.Cash = cashtotal;
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[53], "", "$" + ReturnStuff.ShowComs(MyAss.Cash, true, false), 3));
            }

            if (iPer > 99)
                MyAss.Medal = 1;
            else if (iPer > 50)
                MyAss.Medal = 2;
            MyAss.Percent = iPer;
            return MyAss;
        }
        private void Pilot05_Target(Vector3 pos1, Vector3 rot1, Vector3 pos2, Vector3 rot2, bool RingA, bool RingB)
        {
            LoggerLight.LogThis("AddTarget");
            float fCorona = 25f;
            if (RingA)
            {
                BlipForm BPit = new BlipForm(pos1);
                BPit.Colour = 5;
                EntityBuild.AddBlips(BPit);
                EntityBuild.CheckerPoint(new CorronaForm(pos1, rot1, fCorona, 5, 3, 37), true);
                fCorona = 10f;
            }

            if (RingB)
            {
                BlipForm BPit = new BlipForm(pos2);
                BPit.Colour = 17;
                BPit.Radius = 0.5f;
                EntityBuild.AddBlips(BPit);
                EntityBuild.CheckerPoint(new CorronaForm(pos2, rot2, fCorona, 17, 3, 16), true);
            }
        }
        private void Pilot06_TakeAPhoto(Ped Pedx)
        {
            LoggerLight.LogThis("Pilot06_TakeAPhoto");

            EntityBuild.GetOutofVeh(Pedx, 1);
            EntityBuild.PedBlimp(new BlipForm(3, "sightseers"), Pedx);
            Script.Wait(1000);
            Pedx.Task.WanderAround();
        }
        private void Pilot06_GoBacktoOff(Ped Pedx)
        {
            LoggerLight.LogThis("Pilot06_GoBacktoOff");

            EntityBuild.GetOutofVeh(Pedx, 0);
            Script.Wait(1000);

            EntityBuild.WalkThisWay(Pedx, HiggsMissions.HeliDoor.V3, 1.40f);
        }
        private void Ambulance_StartLine()
        {
            LoggerLight.LogThis("Ambulance_StartLine");

            float fdist = AmbMissions.AnE.DistanceTo(AmbMissions.FubStuff.PedHere.V3);
            int idist = (int)fdist;
            int iPack = idist * 165;
            if (iPack < 30000)
                iPack = 30000;

            if (AmbMissions.HalfTime)
            {
                int iHalf = iPack / 3;
                AmbMissions.Timer = Game.GameTime + iHalf;
            }
            else
                AmbMissions.Timer = Game.GameTime + iPack;
            UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[8], "$ " + AmbMissions.HospPay + "", 0f, false));
            UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[1], "", 0f, false));
            UiDisplay.bUiDisplay = true;
        }
        private void Ambulance_Patents()
        {
            if (AmbMissions.TimerOn)
            {
                if (AmbMissions.Timer > Game.GameTime)
                {
                    int iTotal = AmbMissions.Timer - Game.GameTime;
                    AmbMissions.HospPay = iTotal / 250;
                    UiDisplay.SideBars[0].Data = "$" + AmbMissions.HospPay + "";
                    UiDisplay.SideBars[1].Data = ReturnStuff.ShowComs(iTotal, false, false);
                }
                else
                {
                    AmbMissions.HospPay = 0;
                    AmbMissions.PatentOn = false;
                    UiDisplay.bUiDisplay = false;
                    JobSeq = 25;
                }
            }

            if (AmbMissions.PatentVFx.Count > 0)
            {
                if (AmbMissions.TimeVFx < Game.GameTime)
                {
                    AmbMissions.TimeVFx = Game.GameTime + RandomX.RandInt(50, 700);
                    if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, AmbMissions.PatentVFx[0]))
                    {
                        Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, AmbMissions.PatentVFx[0]);
                        Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, AmbMissions.PatentVFx[1], AmbMissions.VicTim.Handle, 0.0f, 0.15f, 0.75f, 0.0f, 0.0f, 90.0f, 1.0f, false, false, false);
                    }
                    else
                    {
                        Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, AmbMissions.PatentVFx[0]);
                    }
                    if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, AmbMissions.PatentVFx[2]))
                    {
                        Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, AmbMissions.PatentVFx[2]);
                        Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, AmbMissions.PatentVFx[3], AmbMissions.VicTim.Handle, 0.0f, 0.15f, 0.75f, 0.0f, 0.0f, 90.0f, ReturnStuff.RandFlow(0.01f, 0.5f), false, false, false);
                    }
                    else
                    {
                        Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, AmbMissions.PatentVFx[2]);
                    }
                    if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, AmbMissions.PatentVFx[4]))
                    {
                        Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, AmbMissions.PatentVFx[4]);
                        Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, AmbMissions.PatentVFx[5], AmbMissions.VicTim.Handle, 0.0f, 0.15f, 0.75f, 0.0f, 0.0f, 90.0f, ReturnStuff.RandFlow(0.01f, 0.5f), false, false, false);
                    }
                    else
                    {
                        Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, AmbMissions.PatentVFx[4]);
                    }
                }
            }
        }
        private void Ambulance_IndoorPeds()
        {
            LoadInteriorSpace(AmbMissions.FubStuff.PedNum, AmbMissions.IntDoors[0], 1, true);
            PedFeat MyPed = new PedFeat(ReturnStuff.RandNPC(RandomX.RandInt(1, 5)), false, 160, 8, 0, null, 0, true, 3, DataStore.MyLang.Maptext[37]);
            if (AmbMissions.FubStuff.PedNum == 97 || AmbMissions.FubStuff.PedNum == 98)
            {
                MyPed = new PedFeat(ReturnStuff.RandNPC(4), false, 160, 8, 0, null, 0, true, 3, DataStore.MyLang.Maptext[37]);
                AmbMissions.VicTim = EntityBuild.NPCSpawn(MyPed, AmbMissions.IntDoors[RandomX.RandInt(2, AmbMissions.IntDoors.Count - 2)]);
            }
            else if (AmbMissions.FubStuff.PedNum > 0 && AmbMissions.FubStuff.PedNum < 6)
            {
                MyPed = new PedFeat("", false, 160, 8, 0, null, 0, true, 3, DataStore.MyLang.Maptext[37]);
                AmbMissions.VicTim = EntityBuild.NPCSpawn(MyPed, AmbMissions.IntDoors[RandomX.RandInt(1, AmbMissions.IntDoors.Count - 1)]);
            }
            else if (AmbMissions.FubStuff.PedNum > 54 && AmbMissions.FubStuff.PedNum < 72)
            {
                MyPed = new PedFeat("", false, 160, 8, 0, null, 0, true, 3, DataStore.MyLang.Maptext[37]);
                AmbMissions.VicTim = EntityBuild.NPCSpawn(MyPed, AmbMissions.IntDoors[RandomX.RandInt(1, AmbMissions.IntDoors.Count - 1)]);

            }
            else if (AmbMissions.FubStuff.PedNum > 99 && AmbMissions.FubStuff.PedNum < 105)
            {
                MyPed = ReturnStuff.BikerPeds(AmbMissions.FubStuff.PedNum, false, 5, 37, 8);
                AmbMissions.VicTim = EntityBuild.NPCSpawn(MyPed, AmbMissions.IntDoors[RandomX.RandInt(1, AmbMissions.IntDoors.Count - 1)]);

            }
            else if (AmbMissions.FubStuff.PedNum > 299 && AmbMissions.FubStuff.PedNum < 310)
            {
                TempAgency_02_FillClub(false);
                AmbMissions.VicTim = MissionData.PedList_01[RandomX.RandInt(3, MissionData.PedList_01.Count - 1)];
                EntityBuild.NpcTasks(AmbMissions.VicTim, 8);
                EntityBuild.PedBlimp(new BlipForm(3, DataStore.MyLang.Maptext[37]),AmbMissions.VicTim);
            }
            else
                AmbMissions.VicTim = EntityBuild.NPCSpawn(MyPed, AmbMissions.IntDoors[RandomX.RandInt(1, AmbMissions.IntDoors.Count - 1)]);
            SearchFor.SlowFastTravel(AmbMissions.IntDoors[0]);
            UiDisplay.MMDisplay01 = new MarkyMark(AmbMissions.VicTim, 0.50f, Color.AntiqueWhite);
            UiDisplay.FolPed = AmbMissions.VicTim;
            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[55];
            UiDisplay.bMMDisplay01 = true;
        }
        public static bool Ambulance_CovidOut()
        {
            LoggerLight.LogThis("Ambulance_CovidOut");
            return AmbMissions.Covid;
        }
        public static void Ambulance_CovidSet()
        {
            LoggerLight.LogThis("Ambulance_CovidSet");

            AmbMissions.Covid = true;
        }
        private void Ambulance_AddingAwards()
        {
            LoggerLight.LogThis("AmbMissions_Awards");

            if (AmbMissions.Covid)
                DataStore.MyAchivments.Ambulance_LsInLockdown++;

            if (DataStore.MyAchivments.Ambulance_WinSomeLoseSome < 5)
                DataStore.MyAchivments.Ambulance_WinSomeLoseSome = AmbMissions.Fatalitys;

            DataStore.MyAchivments.Ambulance_ReadTheBook += AmbMissions.CorectDiagnosis;
        }
        public static AchList Ambulance_Awards(int cashtotal, bool bCash)
        {
            AchList MyAss = new AchList(6);

            MyAss.Medal = 3;
            int iPer = 0;

            if (DataStore.MyAchivments.Ambulance_WinSomeLoseSome > 4)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[229], DataStore.MyLang.Othertext[230], DataStore.MyAchivments.Ambulance_WinSomeLoseSome + "/5", 1));
                iPer += 20;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[229], DataStore.MyLang.Othertext[230], DataStore.MyAchivments.Ambulance_WinSomeLoseSome + "/5", 0));
            }

            if (DataStore.MyAchivments.Ambulance_OpenTheWindows > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[231], DataStore.MyLang.Othertext[232], "", 1));
                iPer += 20;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[231], DataStore.MyLang.Othertext[232], "", 0));
            }

            if (DataStore.MyAchivments.Ambulance_LsInLockdown > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[233], DataStore.MyLang.Othertext[234], "", 1));
                iPer += 20;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[233], DataStore.MyLang.Othertext[234], "", 0));
            }

            if (DataStore.MyAchivments.Ambulance_HomeVisits > 24)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[235], DataStore.MyLang.Othertext[236], DataStore.MyAchivments.Ambulance_HomeVisits + "/25", 1));
                iPer += 20;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[235], DataStore.MyLang.Othertext[236], DataStore.MyAchivments.Ambulance_HomeVisits + "/25", 0));
            }

            if (DataStore.MyAchivments.Ambulance_ReadTheBook > 24)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[237], DataStore.MyLang.Othertext[238], DataStore.MyAchivments.Ambulance_ReadTheBook + "/25", 1));
                iPer += 20;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[237], DataStore.MyLang.Othertext[238], DataStore.MyAchivments.Ambulance_ReadTheBook + "/25", 0));
            }

            if (bCash)
            {
                MyAss.Cash = cashtotal;
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[53], "", "$" + ReturnStuff.ShowComs(MyAss.Cash, true, false),3));
            }

            if (iPer > 99)
                MyAss.Medal = 1;
            else if (iPer > 50)
                MyAss.Medal = 2;
            MyAss.Percent = iPer;
            return MyAss;
        }
        private void Follow_AddToMuilti(Ped Bob, string sBobsName, Blip BobsBlip, Vehicle VMick)
        {
            PedMultiTask MyBob = new PedMultiTask(Bob, VMick, 1);
            MyBob.MyName = sBobsName;
            MyBob.MyBlip = BobsBlip;
            MultiPed.Add(MyBob);
        }
        private void Follow_AddStartPoint()
        {
            SearchFor.MakeCarz.Clear();
            EntityClear.RemoveTargets();
            FollMissions.Starting = World.GetNextPositionOnStreet(new Vector3(FollMissions.ShopsNTings.ParkHere.X, FollMissions.ShopsNTings.ParkHere.Y, FollMissions.ShopsNTings.ParkHere.Z).Around(550.00f));
            while (ReturnStuff.AreUNear(FollMissions.ShopsNTings.ParkHere.V3, FollMissions.Starting, 150f) || World.GetZoneNameLabel(FollMissions.Starting) == "AIRP" || World.GetZoneNameLabel(FollMissions.Starting) == "ARMYB" || World.GetZoneNameLabel(FollMissions.Starting) == "JAIL")
            {
                FollMissions.Starting = World.GetNextPositionOnStreet(new Vector3(FollMissions.ShopsNTings.ParkHere.X, FollMissions.ShopsNTings.ParkHere.Y, FollMissions.ShopsNTings.ParkHere.Z).Around(550.00f));
                Script.Wait(1);
            }
            FollMissions.Starting = ReturnStuff.SetZHight(FollMissions.Starting, World.GetGroundHeight(FollMissions.Starting));
            EntityBuild.AddTarget(new BlipForm(FollMissions.Starting, false, 5, 120f, new BlipForm(FollMissions.Starting, true, 5, 66, DataStore.MyLang.Maptext[26])));
        }
        private void Follow_AmbushPlayer()
        {
            LoggerLight.LogThis("Follow_AmbushPlayer");

            FollMissions.Attackers = RandomX.RandInt(6, 12);
            int AddThem = 0;
            while (AddThem < FollMissions.Attackers)
            {
                AddThem++;
                int iLocal = RandomX.RandInt(1, FollMissions.Endings.Count - 1);
                Ped Bob = EntityBuild.NPCSpawn(new PedFeat(ReturnStuff.RandNPC(RandomX.RandInt(1, 10)), false, 180, 9, 0, null, 5, false, 0, ""), FollMissions.Endings[iLocal], 0.00f);
                Follow_AddToMuilti(Bob, DataStore.MyLang.Maptext[105], EntityBuild.PedBlimp(new BlipForm(1, DataStore.MyLang.Maptext[105]), Bob), null);
            }
            FollMissions.Attackers += 2;
            FollMissions.YourReward += FollMissions.Attackers * 10;
        }
        private void Follow_DefToOff()
        {
            LoggerLight.LogThis("Follow_DefToOff");

            EntityBuild.GetOutofVeh(FollMissions.Driver, 1);
            EntityBuild.GetOutofVeh(FollMissions.Passenger, 1);
            EntityBuild.AttackThePlayer(FollMissions.Driver, false, true, true);
            EntityBuild.AttackThePlayer(FollMissions.Passenger, false, true, true);

            Follow_AddToMuilti(FollMissions.Driver, DataStore.MyLang.Maptext[105], FollMissions.TargetCar.CurrentBlip, FollMissions.TargetCar);
            Follow_AddToMuilti(FollMissions.Passenger, DataStore.MyLang.Maptext[105], FollMissions.TargetCar.CurrentBlip, FollMissions.TargetCar);
        }
        private void Follow_CArSaleSeatChecker()
        {
            LoggerLight.LogThis("Follow_CArSaleSeatChecker");

            int iSittinON = FollMissions.TargetCar.PassengerSeats;
            while (iSittinON > 1)
            {
                EntityBuild.FreeSeat(FollMissions.TargetCar, iSittinON, false);
                iSittinON -= 1;
            }
        }
        public static void Follow_AttackBGroup(Ped Attacker, bool bDriver)
        {
            Attacker.RelationshipGroup = DataStore.GP_BNPCs;
            EntityBuild.DriveByPed(Attacker, FollMissions.Driver, bDriver);
        }
        private void Follow_AddAwards()
        {
            LoggerLight.LogThis("Follow_Awards");
            if (FollMissions.Ending == 1)
                DataStore.MyAchivments.Follow_WisperingGrass++;
            else if (FollMissions.Ending == 2)
                DataStore.MyAchivments.Follow_AndKaboom++;
            else if (FollMissions.Ending == 3)
                DataStore.MyAchivments.Follow_InABlaseOfGlory++;
            else if (FollMissions.Ending == 4)
                DataStore.MyAchivments.Follow_OnePreviousOwner++;
            else if (FollMissions.Ending == 5)
                DataStore.MyAchivments.Follow_KightInShiningAuto++;
            else if (FollMissions.Ending == 6)
                DataStore.MyAchivments.Follow_OutOfThisWorld++;
        }
        public static AchList Follow_Awards(int cashtotal, bool bCash)
        {
            AchList MyAss = new AchList(7);

            MyAss.Medal = 3;
            int iPer = 0;

            if (DataStore.MyAchivments.Follow_WisperingGrass > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[239], DataStore.MyLang.Othertext[240], "", 1));
                iPer += 20;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[239], DataStore.MyLang.Othertext[240], "", 0));
            }

            if (DataStore.MyAchivments.Follow_AndKaboom > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[241], DataStore.MyLang.Othertext[242], "", 1));
                iPer += 10;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[241], DataStore.MyLang.Othertext[242], "", 0));
            }

            if (DataStore.MyAchivments.Follow_InABlaseOfGlory > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[243], DataStore.MyLang.Othertext[244], "", 1));
                iPer += 20;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[243], DataStore.MyLang.Othertext[244], "", 0));
            }

            if (DataStore.MyAchivments.Follow_OnePreviousOwner > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[245], DataStore.MyLang.Othertext[246], "", 1));
                iPer += 20;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[245], DataStore.MyLang.Othertext[246], "", 0));
            }

            if (DataStore.MyAchivments.Follow_KightInShiningAuto > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[247], DataStore.MyLang.Othertext[248], "", 1));
                iPer += 20;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[247], DataStore.MyLang.Othertext[248], "", 0));
            }

            if (DataStore.MyAchivments.Follow_OutOfThisWorld > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[249], DataStore.MyLang.Othertext[250], "", 1));
                iPer += 10;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[249], DataStore.MyLang.Othertext[250], "", 0));
            }

            if (bCash)
            {
                MyAss.Cash = cashtotal;
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[53], "", "$" + ReturnStuff.ShowComs(MyAss.Cash, true, false), 3));
            }

            if (iPer > 99)
                MyAss.Medal = 1;
            else if (iPer > 50)
                MyAss.Medal = 2;
            MyAss.Percent = iPer;
            return MyAss;
        }
        public static void Fire_FlaminPed(Vehicle Vpick)
        {
            FireMissions.TestVehk = Vpick;
            FireMissions.TestVehk.IsFireProof = false;
            FireMissions.FirePed = EntityBuild.NPCSpawn(new PedFeat(ReturnStuff.RandNPC(RandomX.RandInt(1, 35)), false, 130, 2, 1, Vpick, 6, false, 0, ""), Vpick.Position, Vpick.Heading);
            Vpick.RollDownWindows();
            FireMissions.FireTime = Game.GameTime + RandomX.RandInt(15000, 25000);
        }
        private Ped Fire_ShootRanPed(float fRange)
        {
            LoggerLight.LogThis("Fire_ShootRanPed");

            iWait4Sec = Game.GameTime + RandomX.RandInt(1000, 3000);

            List<Ped> MyPeds = SearchFor.GetLocalPeds(FireMissions.TestVehk.Position, fRange);

            Ped MyPed = null;

            for (int i = 0; i < MyPeds.Count; i++)
            {
                try
                {
                    if (!MyPeds[i].IsInVehicle())
                    {
                        MyPed = MyPeds[i];
                        break;
                    }
                }
                catch
                {
                    LoggerLight.LogThis("Fire_ShootRanPed -- Dataloss");
                    break;
                }
            }
            return MyPed;
        }
        private bool Fire_IntheHall(Vector3 VFire)
        {
            bool Bfiredup = false;
            int iFirey = Function.Call<int>(Hash.GET_NUMBER_OF_FIRES_IN_RANGE, VFire.X, VFire.Y, VFire.Z, 5.00f);
            if (iFirey < 1)
                Bfiredup = true;

            return Bfiredup;
        }
        private bool Fire_BurnOut()
        {
            bool bOver = false;

            if (FireMissions.FireTime < Game.GameTime)
            {
                bOver = true;
                FireMissions.BurninMoney = 0;
            }
            else
            {
                int iTimeLeft = FireMissions.FireTime - Game.GameTime;
                FireMissions.BurninMoney = iTimeLeft / 250;
                iTimeLeft /= 1000;
                float fTimeLeft = (float)iTimeLeft;
                fTimeLeft /= 100;

                UiDisplay.SideBars[0].Percent = fTimeLeft;
                UiDisplay.SideBars[1].Data = "$ " + FireMissions.BurninMoney + "";

                if (!UiDisplay.bUiDisplay)
                    UiDisplay.bUiDisplay = true;
            }
            return bOver;
        }
        private static AchList Fire_Awards(int cashtotal, bool bCash)
        {
            LoggerLight.LogThis("Fire_Awards");
            AchList MyAss = new AchList(8);

            MyAss.Medal = 3;
            int iPer = 0;

            if (DataStore.MyAchivments.Fire_FirePlace > 4)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[251], DataStore.MyLang.Othertext[252], DataStore.MyAchivments.Fire_FirePlace + "/5", 1));
                iPer += 20;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[251], DataStore.MyLang.Othertext[252], DataStore.MyAchivments.Fire_FirePlace + "/5", 0));
            }

            if (DataStore.MyAchivments.Fire_BurningRubber > 4)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[253], DataStore.MyLang.Othertext[254], DataStore.MyAchivments.Fire_BurningRubber + "/5", 1));
                iPer += 20;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[253], DataStore.MyLang.Othertext[254], DataStore.MyAchivments.Fire_BurningRubber + "/5", 0));
            }

            if (DataStore.MyAchivments.Fire_SaveThePussy > 4)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[255], DataStore.MyLang.Othertext[256], DataStore.MyAchivments.Fire_SaveThePussy + "/5", 1));
                iPer += 20;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[255], DataStore.MyLang.Othertext[256], DataStore.MyAchivments.Fire_SaveThePussy + "/5", 0));
            }

            if (DataStore.MyAchivments.Fire_TheFireStarter > 4)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[257], DataStore.MyLang.Othertext[258], DataStore.MyAchivments.Fire_TheFireStarter + "/5", 1));
                iPer += 20;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[257], DataStore.MyLang.Othertext[258], DataStore.MyAchivments.Fire_TheFireStarter + "/5", 0));
            }

            if (DataStore.MyAchivments.Fire_BinAndGone > 4)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[259], DataStore.MyLang.Othertext[260], DataStore.MyAchivments.Fire_BinAndGone + "/5", 1));
                iPer += 20;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[259], DataStore.MyLang.Othertext[260], DataStore.MyAchivments.Fire_BinAndGone + "/5", 0));
            }

            if (bCash)
            {
                MyAss.Cash = cashtotal;
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[53], "", "$" + ReturnStuff.ShowComs(MyAss.Cash, true, false),3));
            }

            if (iPer > 99)
                MyAss.Medal = 1;
            else if (iPer > 50)
                MyAss.Medal = 2;
            MyAss.Percent = iPer;
            return MyAss;
        }
        private void Johnny_PlayerAttack()
        {
            while (Game.Player.Character.IsInVehicle())
                Script.Wait(1000);
            SearchFor.MakeFrenz.Add(new FindPed(1.00f, 75.00f, new PedFeat("", true, 250, 33, 5)));
        }
        public static void Johnny_AddPlayer(Ped MyPed)
        {
            JohnnyMissions.YoPlayer = MyPed;
            EntityBuild.AttackThePlayer(MyPed, false, true, false);
        }
        private void Johnny_PlaceVeh()
        {
            int iType = RandomX.RandInt(1, 10);
            int iPos = 1;
            if (JohnnyMissions.Start.PedNum == 97 || JohnnyMissions.Start.PedNum == 98)
            {
                iType = 10;
                iPos = RandomX.RandInt(2, 11);
            }
            else if (JohnnyMissions.Start.PedNum == 52)
                iPos = 2;
            else if (JohnnyMissions.Start.PedNum == 53)
                iPos = RandomX.RandInt(2, 7);
            else
                iPos = RandomX.RandInt(2, 11);

            iPos = JohnnyMissions.VehSpot.Count - iPos;

            JohnnyMissions.PlayVeh = EntityBuild.VehicleSpawn(new VehMods(ReturnStuff.AddRandomVeh(iType), 0, 5, true, DataStore.MyLang.Maptext[9], false, true, ReturnStuff.FunPlates()), JohnnyMissions.VehSpot[iPos]);
            CashNCrash(JohnnyMissions.PlayVeh, 100000);
        }
        private void Johnny_PlayerAntics(Vector4 XMarks)
        {
            LoggerLight.LogThis("Johnny_PlayerAntics");
            Vector3 Vspot = new Vector3(XMarks.X, XMarks.Y, XMarks.Z);

            int RandSettin = RandomX.RandInt(0, 40);
            if (RandSettin < 10)
            {
                int iNpNum = RandomX.RandInt(1, 5);
                while (iNpNum > 0)
                {
                    iNpNum -= 1;
                    Vector3 Vrond = Vspot.Around(5.00f);
                    EntityBuild.NPCSpawn(new PedFeat(ReturnStuff.RandNPC(RandomX.RandInt(1, 35)), false, 0, 0), Vrond, XMarks.R);
                }
            }
            else if (RandSettin < 20)
            {
                int iNpNum = RandomX.RandInt(1, 5);
                while (iNpNum > 0)
                {
                    iNpNum -= 1;
                    Vector3 Vrond = Vspot.Around(25.00f);
                    EntityBuild.VehicleSpawn(new VehMods(ReturnStuff.AddRandomVeh(17), 10), Vrond, XMarks.R);
                }
            }
        }
        private void Johnny_AddAwards()
        {
            LoggerLight.LogThis("Johnny_AddAwards");
            if (JohnnyMissions.Earnings > DataStore.MyAchivments.Johnny_ItWasLikeThatWhenIGotIt)
                DataStore.MyAchivments.Johnny_ItWasLikeThatWhenIGotIt = JohnnyMissions.Earnings;

            JohnnyMissions.ReturnTime -= Game.GameTime;
            JohnnyMissions.ReturnTime *= -1;
            if (JohnnyMissions.ReturnTime > DataStore.MyAchivments.Johnny_AFewErrendsToRunirst)
                DataStore.MyAchivments.Johnny_AFewErrendsToRunirst = JohnnyMissions.ReturnTime;
        }
        private static AchList Johnny_Awards(int cashtotal, bool bCash)
        {
            AchList MyAss = new AchList(9);

            MyAss.Medal = 3;
            int iPer = 0;

            if (DataStore.MyAchivments.Johnny_ItWasLikeThatWhenIGotIt > 29999)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[261], DataStore.MyLang.Othertext[262], "$" + ReturnStuff.ShowComs(DataStore.MyAchivments.Johnny_ItWasLikeThatWhenIGotIt,true, false) + "/$30,000", 1));
                iPer += 25;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[261], DataStore.MyLang.Othertext[262], "$" + ReturnStuff.ShowComs(DataStore.MyAchivments.Johnny_ItWasLikeThatWhenIGotIt, true, false) + "/$30,000", 0));
            }

            if (DataStore.MyAchivments.Johnny_ThisOnesAkeeper > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[263], DataStore.MyLang.Othertext[264], "", 1));
                iPer += 25;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[263], DataStore.MyLang.Othertext[264], "", 0));
            }

            if (DataStore.MyAchivments.Johnny_AFewErrendsToRunirst > 299999)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[265], DataStore.MyLang.Othertext[266], ReturnStuff.ShowComs(DataStore.MyAchivments.Johnny_AFewErrendsToRunirst, false, false) +"/5:00", 1));
                iPer += 25;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[265], DataStore.MyLang.Othertext[266], ReturnStuff.ShowComs(DataStore.MyAchivments.Johnny_AFewErrendsToRunirst, false, false) + "/5:00", 0));
            }

            if (DataStore.MyAchivments.Johnny_ITawITawThePlayerCreapinUp > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[267], DataStore.MyLang.Othertext[268], "", 1));
                iPer += 25;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[267], DataStore.MyLang.Othertext[268], "", 0));
            }

            if (bCash)
            {
                MyAss.Cash = cashtotal;
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[53], "", "$" + ReturnStuff.ShowComs(MyAss.Cash, true, false), 3));
            }

            if (iPer > 99)
                MyAss.Medal = 1;
            else if (iPer > 50)
                MyAss.Medal = 2;
            MyAss.Percent = iPer;
            return MyAss;
        }
        private void Racist_StartLine()
        {
            LoggerLight.LogThis("Racist_StartLine");

            Game.FadeScreenOut(1000);

            RacingMissions.RaceVeh.FreezePosition = true;
            EntityBuild.ResetVehPos(RacingMissions.RaceVeh, RacingMissions.YourRace.Start01);

            Function.Call(Hash.SET_VEHICLE_POPULATION_BUDGET, 0);
            Function.Call(Hash.SET_PED_POPULATION_BUDGET, 0);
            Function.Call(Hash.SET_FAR_DRAW_VEHICLES, false);

            EntityClear.ClearTheWay(true, false);

            Script.Wait(1000);

            SetTheTime(RacingMissions.RaceSet.Time, 0, 0);

            string Weth = RacingMissions.RaceSet.Weather;

            if (Weth == "Snow")
            {
                if (RacingMissions.RaceSet.Time == 21)
                    Weth = "Blizzard";
                else if (RacingMissions.RaceSet.Time == 6)
                    Weth = "Xmas";
                else
                    Weth = "Snowlight";

                Racist_SnowJoke(true);
                MemoryAccess.SetSnowRendered(true);
                RacingMissions.SnowIsOn = true;
            }
            
            EntityBuild.ClearWeather();
            EntityBuild.SetWeather(Weth);

            int PedType = 13;

            if (RacingMissions.YourRace.Type == 1)
                PedType = 20;
            else if (RacingMissions.BoatRace)
                PedType = 21;
            else if (RacingMissions.HelicopterRace)
                PedType = 22;
            else if (RacingMissions.PlaneRace)
                PedType = 23;

            bool FreezeMe = false;
            if (PedType > 21)
                FreezeMe = true;

            if (!RacingMissions.RaceSet.Solo)
            {
                EntityBuild.VehicleSpawn(new VehMods(ReturnStuff.AddRandomVeh(RacingMissions.RaceSet.VehClass), PedType, FreezeMe, true, ReturnStuff.FunPlates()), RacingMissions.YourRace.Start02);
                EntityBuild.VehicleSpawn(new VehMods(ReturnStuff.AddRandomVeh(RacingMissions.RaceSet.VehClass), PedType, FreezeMe, true, ReturnStuff.FunPlates()), RacingMissions.YourRace.Start03);
                EntityBuild.VehicleSpawn(new VehMods(ReturnStuff.AddRandomVeh(RacingMissions.RaceSet.VehClass), PedType, FreezeMe, true, ReturnStuff.FunPlates()), RacingMissions.YourRace.Start04);
            }
            else
                RacingMissions.RaceSet.PasiveMode = false;

            if (RacingMissions.BoatRace)
            {
                RacingMissions.RaceVeh.FreezePosition = false;
                RacingMissions.RaceVeh.IsDriveable = false;
                Function.Call(Hash.SET_BOAT_ANCHOR, RacingMissions.RaceVeh.Handle, true);
            }
            else if (RacingMissions.HelicopterRace)
            {
                RacingMissions.RaceVeh.EngineRunning = true;
            }
            else if (RacingMissions.PlaneRace)
            {
                Function.Call(Hash._SET_VEHICLE_LANDING_GEAR, RacingMissions.RaceVeh.Handle, 3);
                Vector3 VTarg = RacingMissions.RaceVeh.Position + (RacingMissions.RaceVeh.ForwardVector * 500);
                RacingMissions.RaceVeh.Position = RacingMissions.RaceVeh.Position - (RacingMissions.RaceVeh.ForwardVector * 350);
                RacingMissions.RaceVeh.IsDriveable = true;
                RacingMissions.RaceVeh.EngineRunning = true;
                EntityBuild.FlyPlane(Game.Player.Character, RacingMissions.RaceVeh, VTarg, null);
                RacingMissions.RaceVeh.FreezePosition = false;
                RacingMissions.RaceVeh.Speed = 35f;
            }

            Game.FadeScreenIn(1000);

            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "NET_RACE_START_EVENT_MASTER", 0, true);

            Function.Call(Hash.DISPLAY_RADAR, false);

            Vector3 Campo = RacingMissions.RaceVeh.Position + (RacingMissions.RaceVeh.ForwardVector * 4.00f) + (RacingMissions.RaceVeh.UpVector * 1.50f);

            if (RacingMissions.BoatRace)
                Campo = RacingMissions.RaceVeh.Position + (RacingMissions.RaceVeh.ForwardVector * 14.00f) + (RacingMissions.RaceVeh.UpVector * 3.00f);

            Vector3 Camro = new Vector3(0.00f, 0.00f, RacingMissions.RaceVeh.Heading - 180.00f);
            MissionData.cCams = World.CreateCamera(Campo, Camro, 50.00f);
            EntityLog.BackUpAss("CamX-" + MissionData.cCams.Handle);
            Function.Call(Hash.RENDER_SCRIPT_CAMS, 1, 1, MissionData.cCams.Handle, 0, 0);
            Script.Wait(1000);
            MissionData.cCams.Position = RacingMissions.RaceVeh.Position + (RacingMissions.RaceVeh.ForwardVector * 1.00f) + (RacingMissions.RaceVeh.RightVector * 2.50f);
            Script.Wait(1000);
            UiDisplay.RaceStart(RacingMissions.YourRace.Name, RacingMissions.RaceVeh);

            EntityClear.CleanCams();
            EntityClear.RemoveTargets();
            UiDisplay.CountDownDisplay(RacingMissions.ClearTrafic);

            RacingMissions.RaceVeh.IsDriveable = true;
            RacingMissions.RaceVeh.EngineRunning = true;

            if (RacingMissions.BoatRace)
                Function.Call(Hash.SET_BOAT_ANCHOR, RacingMissions.RaceVeh, false);
            if (!RacingMissions.RaceSet.Solo)
            {
                for (int i = 0; i < RacingMissions.Raciers.Count; i++)
                {
                    RacingMissions.Raciers[i].MyVehicle.FreezePosition = false;
                    if (RacingMissions.RaceSet.PasiveMode)
                    {
                        RacingMissions.Raciers[i].MyVehicle.Alpha = 120;
                        EntityClear.PassiveVeh.Add(new Vehicle(RacingMissions.Raciers[i].MyVehicle.Handle));
                    }
                    
                    if (RacingMissions.BoatRace)
                        Function.Call(Hash.SET_BOAT_ANCHOR, RacingMissions.Raciers[i].MyVehicle.Handle, false);
                    Racist_FLyDriveSwimCycle(RacingMissions.Raciers[i].MyVehicle, RacingMissions.Raciers[i].MyPed, RacingMissions.BestRL.RaceLine[0].Pos, RacingMissions.BestRL.RaceLine[0].Speed);
                }
            }
            EntityClear.PassiveVeh.Add(new Vehicle(RacingMissions.RaceVeh.Handle));
            RacingMissions.BestRL.RaceLine.Clear();
            RacingMissions.LapTime = Game.GameTime;
            RacingMissions.Target = Racist_CheckPoint(true);
            RacingMissions.RaceVeh.FreezePosition = false;
            Game.Player.Character.Task.ClearAll();
        }
        private void Racist_SnowJoke(bool Enable)
        {
            if (Enable)
            {
                Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "core_snow");
                Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "core_snow");
            }
            else
                Function.Call(Hash._REMOVE_NAMED_PTFX_ASSET, "core_snow");

            Function.Call(Hash._SET_FORCE_PED_FOOTSTEPS_TRACKS, Enable);
            Function.Call(Hash._SET_FORCE_VEHICLE_TRAILS, Enable);
        }
        private void Racist_PosTime()
        {
            int iLapTotal = RacingMissions.TotalLapTime - Game.GameTime;
                iLapTotal *= -1;

            int iLap = RacingMissions.LapTime - Game.GameTime;
            iLap *= -1;
            
            UiDisplay.SideBars[0].Counter = ReturnStuff.RaceCounter(iLap);

            if (RacingMissions.YourRace.Loop)
                UiDisplay.SideBars[2].Counter = ReturnStuff.RaceCounter(iLapTotal);

            if (!RacingMissions.RaceSet.Solo)
                Racist_DrivingAi();
        }
        private void Racist_BackOnTrack(Ped Peddy, Vehicle Vhick, Vector4 Vpos, bool bPlayer)
        {
            if (bPlayer)
                Script.Wait(2000);
            if (!Peddy.IsInVehicle())
                EntityBuild.WarptoAnyVeh(Vhick, Peddy, 1);
            Vhick.Repair();
            Vhick.Position = Vpos.V3;
            Vhick.Heading = Vpos.R;
        }
        public static void Racist_MultiPed(Ped Peddy, Vehicle VKick, int iAm)
        {
            LoggerLight.LogThis("Racist_MultiPed RacingMissions.YourRace.CheckPoints ==" + RacingMissions.YourRace.CheckPoints.Count);
            if (RacingMissions.BestRL.RaceLine.Count == 0)
                Racist_MakeStandardTrack();
            RacerTasks MyRacer = new RacerTasks(Peddy, VKick, RacingMissions.BestRL, RacingMissions.YourRace.CheckPoints[0].Pos);
            RacingMissions.Raciers.Add(MyRacer);
        }
        private static void Racist_MakeStandardTrack()
        {
            LoggerLight.LogThis("Racist_MakeStandardTrack");

            for (int i = 0; i < RacingMissions.YourRace.CheckPoints.Count; i++)
            {
                RacingMissions.BestRL.RaceLine.Add(new RaceRec(35f, RacingMissions.YourRace.CheckPoints[i].Pos));
            }
        }
        private void Racist_FLyDriveSwimCycle(Vehicle myVeh, Ped myPed, Vector3 vTarget, float fSpeed)
        {
            if (RacingMissions.BoatRace)//Boats
            {
                myPed.Task.ClearAll();
                Function.Call(Hash.TASK_BOAT_MISSION, myPed.Handle, myVeh.Handle, 0, 0, vTarget.X, vTarget.Y, vTarget.Z, 4, fSpeed, RacingMissions.DrivinStyle, 2.50f, 7);//find a good boat driving set
                Function.Call(Hash.SET_BLOCKING_OF_NON_TEMPORARY_EVENTS, myPed.Handle, true);
            }
            else if (RacingMissions.HelicopterRace)
            {
                myPed.Task.ClearAll();
                EntityBuild.FlyHeli(myPed, vTarget, fSpeed, 0.00f);
            }//heli
            else if (RacingMissions.PlaneRace)
                EntityBuild.FlyPlane(myPed, myVeh, vTarget, null);//Plane
            else
                EntityBuild.DriveToDest(myVeh, vTarget, myPed, fSpeed, RacingMissions.DrivinStyle);//Cars--cycles
        }
        private void Racist_AddRaceTarget(RacePaths Prime, RacePaths Second, bool bEnd, float corrRad)
        {
            LoggerLight.LogThis("AddTarget");
            if (!bEnd)
            {
                EntityBuild.AddBlips(new BlipForm(Prime.Pos, false, 5, -1, "CheckPoint", new CorronaForm(Prime.Pos, Second.Pos, corrRad, 5, 57, Prime.Corrona, 3f)));
                BlipForm thisBlip = new BlipForm(Second.Pos, false, 5, -1, "CheckPoint", new CorronaForm(Second.Pos, Second.Rot, corrRad / 2, 5, 57, Second.Corrona, 3f));
                thisBlip.Radius = 0.5f;
                EntityBuild.AddBlips(thisBlip);
            }
            else
            {
                if (RacingMissions.YourRace.Type > 2)
                    EntityBuild.AddBlips(new BlipForm(Prime.Pos, false, 5, -1, "CheckPoint", new CorronaForm(Prime.Pos, Prime.Rot, corrRad, 5, 57, 16, 3f)));
                else
                    EntityBuild.AddBlips(new BlipForm(Prime.Pos, false, 5, -1, "CheckPoint", new CorronaForm(Prime.Pos, Prime.Rot, corrRad, 5, 57, 10, 3f)));
            }
        }
        private Vector3 Racist_CheckPoint(bool bStart)
        {
            EntityClear.RemoveTargets();

            Vector3 vTarg = new Vector3();

            if (bStart)
            {
                vTarg = RacingMissions.YourRace.CheckPoints[RacingMissions.CurrentCheck].Pos;
                RacingMissions.LapTime = Game.GameTime;
                RacingMissions.BestRL.RaceLine.Clear();
                Racist_AddRaceTarget(RacingMissions.YourRace.CheckPoints[RacingMissions.CurrentCheck], RacingMissions.YourRace.CheckPoints[RacingMissions.CurrentCheck + 1], false, RacingMissions.YourRace.CorSize);
            }
            else
            {
                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "CHECKPOINT_UNDER_THE_BRIDGE", "HUD_MINI_GAME_SOUNDSET", true);
                if (RacingMissions.MatchPitch)
                {
                    if (ReturnStuff.NearEnough(RacingMissions.YourRace.CheckPoints[RacingMissions.CurrentCheck].Rot.Y, RacingMissions.RaceVeh.Rotation.Y, 35f))
                    {
                        RacingMissions.RacePays += 1000;
                        Function.Call(Hash._START_SCREEN_EFFECT, "SuccessNeutral", 1500, false);
                    }
                    else
                        RacingMissions.AllTheMatches = false;
                    RacingMissions.MatchPitch = false;
                }

                RacingMissions.CurrentCheck++;
                if (RacingMissions.CurrentCheck < RacingMissions.YourRace.CheckPoints.Count - 1)
                {
                    vTarg = RacingMissions.YourRace.CheckPoints[RacingMissions.CurrentCheck].Pos;
                    if (RacingMissions.YourRace.CheckPoints[RacingMissions.CurrentCheck].Corrona == 37 || RacingMissions.YourRace.CheckPoints[RacingMissions.CurrentCheck].Corrona == 38 || RacingMissions.YourRace.CheckPoints[RacingMissions.CurrentCheck].Corrona == 39 || RacingMissions.YourRace.CheckPoints[RacingMissions.CurrentCheck].Corrona == 40)
                        RacingMissions.MatchPitch = true;

                    Racist_AddRaceTarget(RacingMissions.YourRace.CheckPoints[RacingMissions.CurrentCheck], RacingMissions.YourRace.CheckPoints[RacingMissions.CurrentCheck + 1], false, RacingMissions.YourRace.CorSize);
                }
                else if (RacingMissions.CurrentCheck < RacingMissions.YourRace.CheckPoints.Count)
                {
                    if (RacingMissions.YourRace.Loop && RacingMissions.CurrentLap + 1 < RacingMissions.RaceSet.Laps)
                    {
                        vTarg = RacingMissions.YourRace.CheckPoints[RacingMissions.CurrentCheck].Pos;
                        if (RacingMissions.YourRace.CheckPoints[RacingMissions.CurrentCheck].Corrona == 37 || RacingMissions.YourRace.CheckPoints[RacingMissions.CurrentCheck].Corrona == 38 || RacingMissions.YourRace.CheckPoints[RacingMissions.CurrentCheck].Corrona == 39 || RacingMissions.YourRace.CheckPoints[RacingMissions.CurrentCheck].Corrona == 40)
                            RacingMissions.MatchPitch = true;

                        Racist_AddRaceTarget(RacingMissions.YourRace.CheckPoints[RacingMissions.CurrentCheck], RacingMissions.YourRace.CheckPoints[0], false, RacingMissions.YourRace.CorSize);
                    }
                    else
                    {
                        RacingMissions.RaceEnd = true;

                        vTarg = RacingMissions.YourRace.CheckPoints[RacingMissions.CurrentCheck].Pos;
                        if (RacingMissions.YourRace.CheckPoints[RacingMissions.CurrentCheck].Corrona == 37 || RacingMissions.YourRace.CheckPoints[RacingMissions.CurrentCheck].Corrona == 38 || RacingMissions.YourRace.CheckPoints[RacingMissions.CurrentCheck].Corrona == 39 || RacingMissions.YourRace.CheckPoints[RacingMissions.CurrentCheck].Corrona == 40)
                            RacingMissions.MatchPitch = true;

                        Racist_AddRaceTarget(RacingMissions.YourRace.CheckPoints[RacingMissions.CurrentCheck], RacingMissions.YourRace.CheckPoints[0], true, RacingMissions.YourRace.CorSize);
                    }
                }
                else
                {
                    RacingMissions.CurrentLap++;
                    RacingMissions.CurrentCheck = 0;
                    RacingMissions.LapTime -= Game.GameTime;
                    RacingMissions.LapTime *= -1;
                    RacingMissions.LapTimes.Add(RacingMissions.LapTime);

                    if (!RacingMissions.DisableCapture)
                    {
                        RacingMissions.BestRL.Time = RacingMissions.LapTime;
                        Racist_SaveRacelines(DataStore.sRaceFolder + "/" + ReturnStuff.UnderScoring(RacingMissions.YourRace.Name) + "_" + RacingMissions.RaceSet.VehClass + ".xml", RacingMissions.BestRL, true);
                    }

                    if (RacingMissions.RaceEnd)
                    {
                        JobSeq++;
                    }
                    else
                    {
                        RacingMissions.DisableCapture = false;
                        UiDisplay.SideBars[1].Data = ReturnStuff.ShowComs(RacingMissions.BestRL.Time, false, true);
                        RacingMissions.LapTime = Game.GameTime;
                        RacingMissions.BestRL.RaceLine.Clear();
                        int Laps = RacingMissions.CurrentLap + 1;
                        BigMessageThread.MessageInstance.ShowSimpleShard("LAP " + Laps + "/" + RacingMissions.RaceSet.Laps + "", "", 5000);

                        vTarg = RacingMissions.YourRace.CheckPoints[RacingMissions.CurrentCheck].Pos;
                        if (RacingMissions.YourRace.CheckPoints[RacingMissions.CurrentCheck].Corrona == 37 || RacingMissions.YourRace.CheckPoints[RacingMissions.CurrentCheck].Corrona == 38 || RacingMissions.YourRace.CheckPoints[RacingMissions.CurrentCheck].Corrona == 39 || RacingMissions.YourRace.CheckPoints[RacingMissions.CurrentCheck].Corrona == 40)
                            RacingMissions.MatchPitch = true;

                        Racist_AddRaceTarget(RacingMissions.YourRace.CheckPoints[RacingMissions.CurrentCheck], RacingMissions.YourRace.CheckPoints[RacingMissions.CurrentCheck + 1], false, RacingMissions.YourRace.CorSize);
                    }
                }
            }
            
            return vTarg;
        }
        private void Racist_SaveRacelines(string id, RacingLines NewLines, bool bPlayer)
        {
            LoggerLight.LogThis("Racist_SaveRacelines == " + id + "Time == " + NewLines.Time + "Player == " + bPlayer);
            if (NewLines.RaceLine.Count > 10)
            {
                if (NewLines.Time < 0)
                    NewLines.Time *= -1;

                for (int i = 0; i < 5; i++)
                {
                    if (NewLines.RaceLine[i].Pos.DistanceTo(RacingMissions.YourRace.Start01.V3) < 25f)
                        NewLines.RaceLine.RemoveAt(i);
                    else if (NewLines.RaceLine[i].Pos.DistanceTo(RacingMissions.YourRace.Start02.V3) < 25f)
                        NewLines.RaceLine.RemoveAt(i);
                    else if (NewLines.RaceLine[i].Pos.DistanceTo(RacingMissions.YourRace.Start03.V3) < 25f)
                        NewLines.RaceLine.RemoveAt(i);
                    else if (NewLines.RaceLine[i].Pos.DistanceTo(RacingMissions.YourRace.Start04.V3) < 25f)
                        NewLines.RaceLine.RemoveAt(i);
                }
                
                bool AddLap = false;
                if (File.Exists(id))
                {
                    RacingLines OldTrack = ReadWriteXML.LoadRaceLines(id);
                    if (NewLines.Time < OldTrack.Time)
                        AddLap = true;
                }
                else
                    AddLap = true;

                if (AddLap)
                {
                    if (bPlayer)
                        RacingMissions.NewFastest = true;
                    ReadWriteXML.SaveRaceLines(NewLines, id);
                }
            }
        }
        private Vector3 Racist_SnapShot(Vehicle VMe, Vector3 lastVector)
        {
            if (VMe.Speed > 1 && VMe.Position.DistanceTo(lastVector) > RacingMissions.RacePointDist)
            {
                lastVector = VMe.Position;
                RacingMissions.BestRL.RaceLine.Add(new RaceRec(VMe.Speed, lastVector));
            }
            return lastVector;
        }
        private void Racist_BuildRR(int iPlace)
        {
            RacingMissions.Raciers[iPlace].TheRacingLine.Time -= Game.GameTime;
            Racist_SaveRacelines(DataStore.sRaceFolder + "/" + ReturnStuff.UnderScoring(RacingMissions.YourRace.Name) + "_" + RacingMissions.RaceSet.VehClass + ".xml", RacingMissions.Raciers[iPlace].TheRacingLine, false);
            RacingMissions.Raciers[iPlace].MyVehicle.Repair();
            RacingMissions.Raciers[iPlace].TheRacingLine.Time = Game.GameTime;
            RacingMissions.Raciers[iPlace].Racist_MakeNewPath(RacingMissions.Raciers[iPlace].TheRacingLine, RacingMissions.Raciers[iPlace].TopSpeed, RacingMissions.Raciers[iPlace].Start);
        }
        private void Racist_DrivingAi()
        {
            RacingMissions.RacePosition = RacingMissions.Raciers.Count + 1;

            for (int i = 0; i < RacingMissions.Raciers.Count; i++)
            {
                if (RacingMissions.Raciers[i].MyPed.IsDead)
                {
                    RacingMissions.Raciers[i].MyPed.CurrentBlip.Remove();
                    RacingMissions.Raciers.RemoveAt(i);
                }
                else
                {
                    float fDist = RacingMissions.Raciers[i].MyPed.Position.DistanceTo(RacingMissions.Raciers[i].CheckPoint);
                    float fRaceLine = RacingMissions.Raciers[i].MyVehicle.Position.DistanceTo(RacingMissions.Raciers[i].RaceRecTag);
                    float fSpeedy = RacingMissions.Raciers[i].TheRacingLine.RaceLine[RacingMissions.Raciers[i].AiCheckPoint].Speed;
                    float fVeSpeed = ReturnStuff.VehCurrentSpeed(RacingMissions.Raciers[i].MyVehicle);

                    if (RacingMissions.Raciers[i].MyLap < RacingMissions.CurrentLap)
                        RacingMissions.RacePosition--;
                    else if (RacingMissions.Raciers[i].MyCheckPoint < RacingMissions.CurrentCheck)
                        RacingMissions.RacePosition--;
                    else if (RacingMissions.Raciers[i].MyCheckPoint == RacingMissions.CurrentCheck)
                    {
                        if (Game.Player.Character.Position.DistanceTo(RacingMissions.Target) < fDist)
                            RacingMissions.RacePosition--;
                    }

                    if (RacingMissions.Raciers[i].Collide)
                    {
                        if (RacingMissions.Raciers[i].CollideTime < Game.GameTime)
                        {
                            if (RacingMissions.RaceSet.PasiveMode)
                                RacingMissions.Raciers[i].MyVehicle.Alpha = 120;
                            else
                                RacingMissions.Raciers[i].MyVehicle.Alpha = 255;
                            RacingMissions.Raciers[i].Collide = false;
                        }
                        else
                        {
                            Function.Call(Hash.SET_ENTITY_NO_COLLISION_ENTITY, RacingMissions.Raciers[i].MyVehicle.Handle, RacingMissions.RaceVeh.Handle, true);
                            Function.Call(Hash.SET_ENTITY_NO_COLLISION_ENTITY, RacingMissions.RaceVeh.Handle, RacingMissions.Raciers[i].MyVehicle.Handle, true);

                            for (int x = 0; x < RacingMissions.Raciers.Count; x++)
                            {
                                if (RacingMissions.Raciers[x].MyVehicle.Handle != RacingMissions.Raciers[i].MyVehicle.Handle)
                                {
                                    Function.Call(Hash.SET_ENTITY_NO_COLLISION_ENTITY, RacingMissions.Raciers[i].MyVehicle.Handle, RacingMissions.Raciers[x].MyVehicle.Handle, true);
                                    Function.Call(Hash.SET_ENTITY_NO_COLLISION_ENTITY, RacingMissions.Raciers[x].MyVehicle.Handle, RacingMissions.Raciers[i].MyVehicle.Handle, true);
                                }
                            }
                        }
                    }

                    if (fDist < RacingMissions.YourRace.CorSize + 2.5f)
                    {
                        RacingMissions.Raciers[i].ReturnNo = RacingMissions.Raciers[i].AiCheckPoint;
                        RacingMissions.Raciers[i].ReturnTo = new Vector4(RacingMissions.Raciers[i].TheRacingLine.RaceLine[RacingMissions.Raciers[i].AiCheckPoint].Pos, RacingMissions.YourRace.CheckPoints[RacingMissions.Raciers[i].MyCheckPoint].Rot.Z);
                        RacingMissions.Raciers[i].MyCheckPoint++;
                        if (RacingMissions.Raciers[i].MyCheckPoint < RacingMissions.YourRace.CheckPoints.Count)
                            RacingMissions.Raciers[i].CheckPoint = RacingMissions.YourRace.CheckPoints[RacingMissions.Raciers[i].MyCheckPoint].Pos;
                        else
                        {
                            RacingMissions.Raciers[i].MyLap++;
                            RacingMissions.Raciers[i].MyCheckPoint = 0;
                            RacingMissions.Raciers[i].CheckPoint = RacingMissions.YourRace.CheckPoints[0].Pos;
                        }
                    }
                    
                    if (RacingMissions.Raciers[i].BrakesOn)
                    {
                        if (fVeSpeed > fSpeedy + 1f)
                            Racist_ApplyBrakes(RacingMissions.Raciers[i].MyPed, RacingMissions.Raciers[i].MyVehicle, 1);
                        else
                        {
                            Racist_FLyDriveSwimCycle(RacingMissions.Raciers[i].MyVehicle, RacingMissions.Raciers[i].MyPed, RacingMissions.Raciers[i].RaceRecTag, RacingMissions.Raciers[i].TheRacingLine.RaceLine[RacingMissions.Raciers[i].AiCheckPoint].Speed);
                            RacingMissions.Raciers[i].BrakesOn = false;
                        }
                    }
                    else if (fRaceLine < RacingMissions.YourRace.CorSize + 2.5f)
                    {
                        RacingMissions.Raciers[i].AiCheckPoint++;
                        if (RacingMissions.Raciers[i].AiCheckPoint < RacingMissions.Raciers[i].TheRacingLine.RaceLine.Count)
                        {
                            RacingMissions.Raciers[i].RaceRecTag = RacingMissions.Raciers[i].TheRacingLine.RaceLine[RacingMissions.Raciers[i].AiCheckPoint].Pos;
                        }
                        else
                        {
                            //if (RacingMissions.Raciers[i].MyCheckPoint == 0)
                            //    Racist_BuildRR(i);
                            RacingMissions.Raciers[i].AiCheckPoint = 0;
                            RacingMissions.Raciers[i].RaceRecTag = RacingMissions.Raciers[i].TheRacingLine.RaceLine[RacingMissions.Raciers[i].AiCheckPoint].Pos;
                        }
                        Racist_FLyDriveSwimCycle(RacingMissions.Raciers[i].MyVehicle, RacingMissions.Raciers[i].MyPed, RacingMissions.Raciers[i].RaceRecTag, fSpeedy);
                    }
                    else
                    {
                        if (RacingMissions.Raciers[i].OnRoof)
                        {
                            if (RacingMissions.Raciers[i].OnRoofTime < Game.GameTime)
                            {
                                if (RacingMissions.Raciers[i].MyVehicle.Health < 750 || fVeSpeed < 0.001f)
                                {

                                    RacingMissions.Raciers[i].Collide = true;
                                    RacingMissions.Raciers[i].CollideTime = Game.GameTime + 4000;
                                    RacingMissions.Raciers[i].MyVehicle.Alpha = 120;
                                    RacingMissions.Raciers[i].OnRoof = false;
                                    RacingMissions.Raciers[i].TheRacingLine.Time += 60000;
                                    float Speed = RacingMissions.Raciers[i].TheRacingLine.RaceLine[RacingMissions.Raciers[i].AiCheckPoint].Speed;
                                    RacingMissions.Raciers[i].AiCheckPoint = RacingMissions.Raciers[i].ReturnNo;
                                    RacingMissions.Raciers[i].RaceRecTag = RacingMissions.Raciers[i].TheRacingLine.RaceLine[RacingMissions.Raciers[i].AiCheckPoint].Pos;
                                    Racist_BackOnTrack(RacingMissions.Raciers[i].MyPed, RacingMissions.Raciers[i].MyVehicle, RacingMissions.Raciers[i].ReturnTo, false);
                                    Racist_FLyDriveSwimCycle(RacingMissions.Raciers[i].MyVehicle, RacingMissions.Raciers[i].MyPed, RacingMissions.Raciers[i].RaceRecTag, Speed);
                                }
                            }
                        }
                        else
                        {
                            if (RacingMissions.Raciers[i].MyVehicle.Health < 750 || fVeSpeed < 0.001f)
                            {
                                RacingMissions.Raciers[i].OnRoof = true;
                                RacingMissions.Raciers[i].OnRoofTime = Game.GameTime + 3000;
                            }
                        }
                    
                        if (RacingMissions.YourRace.Type < 3)
                        {
                            if (fVeSpeed > fSpeedy + 1f)
                                RacingMissions.Raciers[i].BrakesOn = true;

                        }
                    }
                }
            }

            if (RacingMissions.YourRace.Loop)
                UiDisplay.SideBars[3].Data = "" + RacingMissions.RacePosition + "/4";
            else
                UiDisplay.SideBars[2].Data = "" + RacingMissions.RacePosition + "/4";
        }
        private void Racist_ApplyBrakes(Ped Peddy, Vehicle Vhick, int Duration)
        {
            Function.Call(Hash.TASK_VEHICLE_TEMP_ACTION, Peddy.Handle, Vhick.Handle, 24, Duration);
        }
        private void Racist_AddingAwards()
        {
            LoggerLight.LogThis("Racist_AddingAwards");

            if (RacingMissions.RaceSet.Weather == "Snow" && !RacingMissions.RaceSet.Solo && RacingMissions.RacePosition == 1)
                DataStore.MyAchivments.Racist_RidingThroughTheSnow++;

            if (RacingMissions.YourRace.Type == 2 && RacingMissions.RaceSet.Weather == "Rain" && !RacingMissions.RaceSet.Solo && RacingMissions.RacePosition == 1)
                DataStore.MyAchivments.Racist_WaterSports++;

            if (RacingMissions.YourRace.Type < 2 && RacingMissions.RaceSet.Trafic && !RacingMissions.RaceSet.Solo && !RacingMissions.RaceSet.PasiveMode && RacingMissions.RacePosition == 1)
                DataStore.MyAchivments.Racist_FullContact++;

            if (RacingMissions.YourRace.Type == 4 && !RacingMissions.RaceSet.Solo && RacingMissions.RacePosition == 1)
                DataStore.MyAchivments.Racist_ComeFlyWithMe++;

            if (!RacingMissions.RaceSet.Solo)
            {
                if (RacingMissions.Raciers.Count == 0)
                    DataStore.MyAchivments.Racist_CyclePath++;
            }
        }
        private static AchList Racist_Awards(int cashtotal, int bestLap, bool bCash)
        {
            AchList MyAss = new AchList(10);

            MyAss.Medal = 3;
            int iPer = 0;

            if (DataStore.MyAchivments.Racist_RidingThroughTheSnow > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[269], DataStore.MyLang.Othertext[270], "", 1));
                iPer += 20;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[269], DataStore.MyLang.Othertext[270], "", 0));
            }

            if (DataStore.MyAchivments.Racist_WaterSports > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[271], DataStore.MyLang.Othertext[272], "", 1));
                iPer += 20;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[271], DataStore.MyLang.Othertext[272], "", 0));
            }

            if (DataStore.MyAchivments.Racist_FullContact > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[273], DataStore.MyLang.Othertext[274],"", 1));
                iPer += 20;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[273], DataStore.MyLang.Othertext[274], "", 0));
            }

            if (DataStore.MyAchivments.Racist_ComeFlyWithMe > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[275], DataStore.MyLang.Othertext[276], "", 1));
                iPer += 20;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[275], DataStore.MyLang.Othertext[276], "", 0));
            }

            if (DataStore.MyAchivments.Racist_CyclePath > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[277], DataStore.MyLang.Othertext[278], "", 1));
                iPer += 20;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[277], DataStore.MyLang.Othertext[278], "", 0));
            }

            if (bCash)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[52], "", ReturnStuff.ShowComs(bestLap, false, true), 3));

                MyAss.Cash = cashtotal;
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[53], "", "$" + ReturnStuff.ShowComs(MyAss.Cash, true, false), 3));
            }

            if (iPer > 99)
                MyAss.Medal = 1;
            else if (iPer > 50)
                MyAss.Medal = 2;
            MyAss.Percent = iPer;
            return MyAss;
        }
        public static void Racist_RunAnimatior(AnimList MyList, Ped Peddy, bool WithCam)
        {
            if (WithCam)
            {
                Peddy.FreezePosition = true;
                Vector3 Campo = Peddy.Position + (Peddy.ForwardVector * 4.00f) + (Peddy.UpVector * 1.50f);
                Vector3 Camro = new Vector3(0.00f, 0.00f, Peddy.Heading - 180.00f);
                MissionData.cCams = World.CreateCamera(Campo, Camro, 50.00f);
                EntityLog.BackUpAss("CamX-" + MissionData.cCams.Handle);
                Function.Call(Hash.RENDER_SCRIPT_CAMS, 1, 1, MissionData.cCams.Handle, 0, 0);
                Script.Wait(3000);
            }

            EntityBuild.ForceAnimOnce(Peddy, MyList.Libary, MyList.Intro);
            Script.Wait(50);
            while (Function.Call<bool>(Hash.GET_IS_TASK_ACTIVE, Peddy.Handle, 134))
                Script.Wait(50);
            EntityBuild.ForceAnimOnce(Peddy, MyList.Libary, MyList.Main);
            Script.Wait(50);
            while (Function.Call<bool>(Hash.GET_IS_TASK_ACTIVE, Peddy.Handle, 134))
                Script.Wait(50);
            EntityBuild.ForceAnimOnce(Peddy, MyList.Libary, MyList.Exit);
            Script.Wait(50);
            while (Function.Call<bool>(Hash.GET_IS_TASK_ACTIVE, Peddy.Handle, 134))
                Script.Wait(50);

            if (WithCam)
            {
                Script.Wait(3000);
                EntityClear.CleanCams();
                EntityClear.RemoveTargets();
                Peddy.FreezePosition = false;
            }

            Peddy.Task.ClearAnimation(MyList.Libary, MyList.Exit);
        }
        private void Racist_RaceEnd(bool bFail)
        {
            LoggerLight.LogThis("RaceEnd, bFail == " + bFail);

            Function.Call((Hash)0x9BAE5AD2508DF078, false);
            Function.Call(Hash._0xC54A08C85AE4D410, 0.00f);
            SearchFor.SlowFastTravel(RacingMissions.YourRace.Fubars, Game.Player.Character.Heading);

            if (RacingMissions.RaceVeh != null)
            {
                if (RacingMissions.PlaneRace)
                    Function.Call(Hash._SET_VEHICLE_LANDING_GEAR, RacingMissions.RaceVeh.Handle, 0);

                EntityBuild.ResetVehPos(RacingMissions.RaceVeh, RacingMissions.YourRace.PickVeh);
                RacingMissions.RaceVeh.Repair();
            }

            int iBest = RacingMissions.LapTime;
            for (int i = 0; i < RacingMissions.LapTimes.Count; i++)
            {
                if (RacingMissions.LapTimes[i] < iBest)
                    iBest = RacingMissions.LapTimes[i];
            }

            if (RacingMissions.SnowIsOn)
            {
                Racist_SnowJoke(false);
                MemoryAccess.SetSnowRendered(false);
            }
            
            EntityBuild.ClearWeather();

            if (bFail)
                GameOverFail(false);
            else
            {
                if (RacingMissions.BaseLap)
                {
                    if (RacingMissions.BestRL.RaceLine.Count > 0 && !RacingMissions.DisableCapture)
                    {
                        MissionData.MyRacists[RacingMissions.RaceSet.Race].BaseLap = RacingMissions.BestRL;
                        ReadWriteXML.SaveRaces(MissionData.MyRacists[RacingMissions.RaceSet.Race],DataStore.sExMissionsRace + ReturnStuff.UnderScoring(MissionData.MyRacists[RacingMissions.RaceSet.Race].Name) + ".Xml");
                    }
                    Racist_AddingAwards();
                    MissionEnd(Racist_Awards(RacingMissions.RacePays, iBest, true));
                }
                else
                {
                    if (RacingMissions.YourRace.MatchAngles)
                    {
                        if (RacingMissions.AllTheMatches)
                            DataStore.MyAchivments.Planes01_AllTheAngles++;
                        MissionEnd(Pilot_Awards(RacingMissions.RacePays, true));
                    }
                    else if (RacingMissions.StuntRace)
                    {
                        int Cash = 0;
                        if (RacingMissions.RacePosition == 4)
                            Cash += 50;
                        else if (RacingMissions.RacePosition == 3)
                            Cash += 100;
                        else if (RacingMissions.RacePosition == 2)
                            Cash += 500;
                        else
                            Cash += 10000;

                        if (RacingMissions.RacePays > DataStore.MyAchivments.Temp05_GettingAir)
                            DataStore.MyAchivments.Temp05_GettingAir = RacingMissions.RacePays;
                        RacingMissions.RacePays += Cash;
                        MissionEnd(TempAgency_Awards(RacingMissions.RacePays, true));
                    }
                    else
                    {
                        if (!RacingMissions.RaceSet.Solo)
                        {
                            if (RacingMissions.RacePosition == 4)
                                RacingMissions.RacePays += 50;
                            else if (RacingMissions.RacePosition == 3)
                                RacingMissions.RacePays += 100;
                            else if (RacingMissions.RacePosition == 2)
                                RacingMissions.RacePays += 500;
                            else
                                RacingMissions.RacePays += 10000;
                        }

                        Racist_AddingAwards();
                        Racist_RunAnimatior(MissionData.MyRaceAnims[RacingMissions.RaceSet.Anim], Game.Player.Character, true);
                        MissionEnd(Racist_Awards(RacingMissions.RacePays, iBest, true));
                    }
                }
            }
        }
        public static void BbBomb_BombAtractor(Ped Peddy)
        {
            LoggerLight.LogThis("BbBomb_BombAtractor");

            Peddy.Task.ClearAll();
            Vector3 Vhere = new Vector3(BombingMissions.BombThis.X, BombingMissions.BombThis.Y, BombingMissions.BombThis.Z);
            Peddy.Task.WanderAround(Vhere, 4.75f);
        }
        private void BbBomb_BombSquad(List<Vector3> areaList)
        {
            LoggerLight.LogThis("BbBomb_BombSquad");

            for (int i = 2; i < areaList.Count; i++)
                EntityBuild.NPCSpawn(new PedFeat(ReturnStuff.RandNPC(41), true, 190, 13, 0, null, 2, false, 0, ""), areaList[i], RandomX.RandInt(0, 360));
        }
        private static AchList BbBomb_Awards(int cashtotal, bool bCash)
        {
            AchList MyAss = new AchList(11);

            MyAss.Medal = 3;
            int iPer = 0;

            if (DataStore.MyAchivments.Bbomb_SoThereItIs < 11000 && DataStore.MyAchivments.Bbomb_SoThereItIs != 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[279], DataStore.MyLang.Othertext[280], ReturnStuff.ShowComs(DataStore.MyAchivments.Bbomb_SoThereItIs, false, false) + "/0:10", 1));
                iPer += 50;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[279], DataStore.MyLang.Othertext[280], ReturnStuff.ShowComs(DataStore.MyAchivments.Bbomb_SoThereItIs, false, false) + "/0:10", 0));
            }

            if (DataStore.MyAchivments.Bbomb_OnlyTheDoors > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[281], DataStore.MyLang.Othertext[282], "", 1));
                iPer += 50;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[281], DataStore.MyLang.Othertext[282], "", 0));
            }


            if (bCash)
            {
                MyAss.Cash = cashtotal;
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[53], "", "$" + ReturnStuff.ShowComs(MyAss.Cash, true, false), 3));
            }

            if (iPer > 99)
                MyAss.Medal = 1;
            else if (iPer > 50)
                MyAss.Medal = 2;
            MyAss.Percent = iPer;
            return MyAss;
        }
        private void HitMan_SecurtyDetail()
        {
            LoggerLight.LogThis("HitMan_SecurtyDetail");

            HitMissions.Boss = EntityBuild.NPCSpawn(new PedFeat("", false, 180, 14, 0, null, 3, false, 0, DataStore.MyLang.Maptext[105]), HitMissions.MyHits.Boss);
            EntityBuild.PedScenario(HitMissions.Boss, "WORLD_HUMAN_AA_SMOKE", HitMissions.Boss.Position, HitMissions.Boss.Heading, false);
            HitMan_MultiPed(HitMissions.Boss, false, null);
            Ped GoonA = EntityBuild.NPCSpawn(new PedFeat(ReturnStuff.RandNPC(HitMissions.MyHits.MobStars), true, 220, 14, 9), HitMissions.MyHits.Goon1);
            EntityBuild.PedScenario(GoonA, "WORLD_HUMAN_GUARD_STAND", GoonA.Position, GoonA.Heading, false);
            HitMan_MultiPed(GoonA, false, null);
            Ped GoonB = EntityBuild.NPCSpawn(new PedFeat(ReturnStuff.RandNPC(HitMissions.MyHits.MobStars), true, 220, 14, 9), HitMissions.MyHits.Goon2);
            EntityBuild.PedScenario(GoonB, "WORLD_HUMAN_GUARD_STAND", GoonB.Position, GoonB.Heading, false);
            HitMan_MultiPed(GoonB, false, null);
            Ped GoonC = EntityBuild.NPCSpawn(new PedFeat(ReturnStuff.RandNPC(HitMissions.MyHits.MobStars), true, 220, 14, 9), HitMissions.MyHits.GoonPath1[0], 0.00f);
            HitMan_MultiPed(GoonC, true, HitMissions.MyHits.GoonPath1);
            Ped GoonD = EntityBuild.NPCSpawn(new PedFeat(ReturnStuff.RandNPC(HitMissions.MyHits.MobStars), true, 220, 14, 9), HitMissions.MyHits.GoonPath2[0], 0.00f);
            HitMan_MultiPed(GoonD, true, HitMissions.MyHits.GoonPath2);
            Ped GoonE = EntityBuild.NPCSpawn(new PedFeat(ReturnStuff.RandNPC(HitMissions.MyHits.MobStars), true, 220, 14, 9), HitMissions.MyHits.GoonPath3[0], 0.00f);
            HitMan_MultiPed(GoonE, true, HitMissions.MyHits.GoonPath3);

            UiDisplay.MMDisplay01 = new MarkyMark(HitMissions.Boss, 0.50f, Color.Purple);
            UiDisplay.FolPed = HitMissions.Boss;
            UiDisplay.bMMDisplay01 = true;

            iWait4Sec = Game.GameTime + 1000;

            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[91];
        }
        private void HitMan_MultiPed(Ped Peddy, bool Walkies, List<Vector3> walker)
        {
            PedMultiTask MyMbMan = new PedMultiTask(Peddy, null, -1);

            MyMbMan.MyName = "";
            MyMbMan.MyPed = Peddy;
            MyMbMan.MyBlip = Peddy.CurrentBlip;
            MyMbMan.MySwitch_01 = Walkies;
            if (Walkies)
            {
                MyMbMan.MyTask_01 = ReturnStuff.PedWalkies(Peddy, walker, 0);
                MyMbMan.MyTarget_01 = walker[1];
                MyMbMan.MyVectorList = walker;
            }
            MultiPed.Add(MyMbMan);
        }
        private void Hitman_RemoveVisionCones()
        {
            LoggerLight.LogThis("Hitman_RemoveVisionCones");

            for (int i = 0; i < MissionData.PedList_01.Count; i++)
            {
                Function.Call((Hash)0xD30C50DF888D58B5, MissionData.PedList_01[i].Handle, false);
                Function.Call((Hash)0x0C4BBF625CA98C4E, MissionData.PedList_01[i].Handle, false);
            }
        }
        private void Hitman_ManualAI()
        {
            MissionData.iTracking = Game.GameTime + 500;
            bool bToArms = false;
            for (int i = 0; i < MultiPed.Count; i++)
            {
                if (MultiPed[i].MySwitch_02)
                {
                    for (int i2 = 0; i2 < MultiPed.Count; i2++)
                    {
                        if (i2 != i && !MultiPed[i2].MySwitch_02)
                            bToArms = ReturnStuff.BeenSpotted(MultiPed[i2].MyPed, MultiPed[i].MyPed, false);
                    }
                }
                else
                {
                    if (MultiPed[i].MyPed.IsDead)
                    {
                        MultiPed[i].MySwitch_02 = true;
                        if (MultiPed[i].MyPed.CurrentBlip.Exists())
                            MultiPed[i].MyPed.CurrentBlip.Color = BlipColor.BlueLight;
                        else
                            EntityBuild.PedBlimp(new BlipForm(53, ""), MultiPed[i].MyPed);
                    }
                    else
                    {
                        if (MultiPed[i].MySwitch_01)
                        {
                            if (ReturnStuff.AreUNear(MultiPed[i].MyPed.Position, MultiPed[i].MyTarget_01, 1.5f))
                            {
                                MultiPed[i].MyTask_01 = ReturnStuff.PedWalkies(MultiPed[i].MyPed, MultiPed[i].MyVectorList, MultiPed[i].MyTask_01);
                                MultiPed[i].MyTarget_01 = MultiPed[i].MyVectorList[MultiPed[i].MyTask_01];
                                MultiPed[i].MyTask_02 = 0;
                            }
                        }
                    }
                    
                    if (!bToArms && MultiPed[i].MySpots == null)
                    {
                        Vector3 Vdir = (Game.Player.Character.Position - MultiPed[i].MyPed.Position).Normalized;
                        float fDirValue = Vector3.Dot(Vdir, MultiPed[i].MyPed.ForwardVector);
                        if (Function.Call<bool>(Hash.HAS_ENTITY_CLEAR_LOS_TO_ENTITY, MultiPed[i].MyPed.Handle, Game.Player.Character.Handle, 17) || Function.Call<bool>(Hash.CAN_PED_HEAR_PLAYER, Game.Player.Character.Handle, MultiPed[i].MyPed.Handle))
                        {
                            if (MultiPed[i].MyPed.Position.DistanceTo(Game.Player.Character.Position) < 35.00f)
                            {
                                if (fDirValue > 0.25f)
                                {
                                    MultiPed[i].MySwitch_03 = true;
                                    MultiPed[i].MySpots = new ISeeYou(i, MultiPed[i].MyPed, new SideBar(DataStore.MyLang.Othertext[17], "", 0f, true));
                                    UiDisplay.SpotedList.Add(MultiPed[i].MySpots); 
                                    MultiPed[i].MyPed.CurrentBlip.IsFlashing = true;
                                }
                            }
                        }
                    }
                    else
                        break;
                }
            }
            
            if (bToArms)
            {
                JobSeq = 40;
                HitMissions.Boss.Task.FleeFrom(Game.Player.Character);
                for (int i = 0; i < MissionData.PedList_01.Count; i++)
                {
                    if (MissionData.PedList_01[i].IsAlive)
                    {
                        MissionData.PedList_01[i].Task.FightAgainst(Game.Player.Character);
                        MissionData.PedList_01[i].AlwaysKeepTask = true;
                    }
                }
                Function.Call((Hash)0xD30C50DF888D58B5, HitMissions.Boss.Handle, false);
                Function.Call((Hash)0x0C4BBF625CA98C4E, HitMissions.Boss.Handle, false);
            }
        }
        private void Hitman_SpookBars()
        {
            bool bSeeingYou = false;
            int iSawU = 0;
            for (int i = 0; i < UiDisplay.SpotedList.Count; i++)
            {
                if (UiDisplay.SpotedList[i].ISee.IsDead)
                {
                    MultiPed[UiDisplay.SpotedList[i].IdNum].MySpots = null;
                    UiDisplay.SpotedList[i].ISee.CurrentBlip.IsFlashing = false;
                    UiDisplay.SpotedList.RemoveAt(i);
                }
                else
                {
                    if (UiDisplay.SpotedList[i].YouSee.Percent < 0.95f)
                    {
                        Vector3 Vdir = (Game.Player.Character.Position - UiDisplay.SpotedList[i].ISee.Position).Normalized;
                        float fDirValue = Vector3.Dot(Vdir, UiDisplay.SpotedList[i].ISee.ForwardVector);
                        if (Function.Call<bool>(Hash.HAS_ENTITY_CLEAR_LOS_TO_ENTITY, UiDisplay.SpotedList[i].ISee.Handle, Game.Player.Character.Handle, 17) || Function.Call<bool>(Hash.CAN_PED_HEAR_PLAYER, Game.Player.Character.Handle, UiDisplay.SpotedList[i].ISee.Handle))
                        {
                            float distance = UiDisplay.SpotedList[i].ISee.Position.DistanceTo(Game.Player.Character.Position);
                            if (distance < 5.00f)
                                distance = 0.005f;
                            else if (distance < 35.00f)
                                distance = 0.001f;
                            else
                            {
                                distance = 0f;
                                UiDisplay.SpotedList[i].LosCount--;
                            }

                            if (fDirValue > 0.25f)
                                UiDisplay.SpotedList[i].YouSee.Percent += distance;
                        }
                        else if (UiDisplay.SpotedList[i].ISee.IsInCombatAgainst(Game.Player.Character))
                            UiDisplay.SpotedList[i].YouSee.Percent += 0.005f;
                        else
                            UiDisplay.SpotedList[i].LosCount--;
                    }
                    else
                    {
                        iSawU = i;
                        bSeeingYou = true;
                    }

                    if (UiDisplay.SpotedList[i].LosCount < 0)
                    {
                        MultiPed[UiDisplay.SpotedList[i].IdNum].MySpots = null;
                        UiDisplay.SpotedList[i].ISee.CurrentBlip.IsFlashing = false;
                        UiDisplay.SpotedList.RemoveAt(i);
                    }
                }
            }

            if (bSeeingYou)
            {
                UiDisplay.SpotedList[iSawU].ISee.CurrentBlip.Color = BlipColor.Orange;
                UiDisplay.SpotedList.Clear();
                JobSeq = 40;
                for (int i = 0; i < MissionData.PedList_01.Count; i++)
                {
                    if (MissionData.PedList_01[i].IsAlive)
                    {
                        MissionData.PedList_01[i].Task.FightAgainst(Game.Player.Character);

                        MissionData.PedList_01[i].BlockPermanentEvents = false;
                        MissionData.PedList_01[i].AlwaysKeepTask = true;
                    }
                }
                HitMissions.Boss.Task.FleeFrom(Game.Player.Character);
                Function.Call((Hash)0xD30C50DF888D58B5, HitMissions.Boss.Handle, false);
                Function.Call((Hash)0x0C4BBF625CA98C4E, HitMissions.Boss.Handle, false);
                HitMissions.Boss.Task.FleeFrom(Game.Player.Character);
            }
        }
        public static void Hitman_AddVisionCones(Ped Peddy)
        {
            LoggerLight.LogThis("Hitman_AddVisionCones");

            Peddy.IsPersistent = true;
            Function.Call(Hash.SET_PED_TARGET_LOSS_RESPONSE, Peddy.Handle, 2);
            Script.Wait(50);
            Function.Call((Hash)0xD30C50DF888D58B5, Peddy.Handle, true);
            Script.Wait(50);
            Function.Call((Hash)0x0C4BBF625CA98C4E, Peddy.Handle, true);
            Script.Wait(50);
            Function.Call((Hash)0x97C65887D4B37FA9, Peddy.Handle, 45.00f);
            Script.Wait(50);
            Function.Call(Hash.HIDE_SPECIAL_ABILITY_LOCKON_OPERATION, Peddy.Handle, true);
        }
        private void Hitman_AddingAwards()
        {
            LoggerLight.LogThis("Hitman_AddingAwards");
            int iDead = 0;
            int iSealth = 0;
            for (int i = 0; i < MultiPed.Count; i++)
            {
                if (MultiPed[i].MyPed.IsDead)
                {
                    iDead++;
                    if (MultiPed[i].MyPed.WasKilledByStealth)
                        iSealth++;
                }
            }
            if (iDead == MultiPed.Count)
                DataStore.MyAchivments.Hitman_BringEveryBody++;
            else if (iDead == 1)
                DataStore.MyAchivments.Hitman_SurgicalPresion++;

            if (iDead > 1 && iDead == iSealth)
                DataStore.MyAchivments.Hitman_Hunter++;
        }
        private static AchList Hitman_Awards(int cashtotal, bool bCash)
        {
            AchList MyAss = new AchList(12);

            MyAss.Medal = 3;
            int iPer = 0;

            if (DataStore.MyAchivments.Hitman_SurgicalPresion > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[283], DataStore.MyLang.Othertext[284], "", 1));
                iPer += 25;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[283], DataStore.MyLang.Othertext[284], "", 0));
            }

            if (DataStore.MyAchivments.Hitman_BringEveryBody > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[285], DataStore.MyLang.Othertext[286], "", 1));
                iPer += 25;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[285], DataStore.MyLang.Othertext[286], "", 0));
            }

            if (DataStore.MyAchivments.Hitman_HoldMyBeer < 61000 && DataStore.MyAchivments.Hitman_HoldMyBeer != 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[287], DataStore.MyLang.Othertext[288], ReturnStuff.ShowComs(DataStore.MyAchivments.Hitman_HoldMyBeer, false, false) + "/1:00", 1));
                iPer += 25;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[287], DataStore.MyLang.Othertext[288], ReturnStuff.ShowComs(DataStore.MyAchivments.Hitman_HoldMyBeer, false, false) + "/1:00", 0));
            }

            if (DataStore.MyAchivments.Hitman_Hunter > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[289], DataStore.MyLang.Othertext[290], "", 1));
                iPer += 25;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[289], DataStore.MyLang.Othertext[290], "", 0));
            }

            if (bCash)
            {
                MyAss.Cash = cashtotal;
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[53], "", "$" + ReturnStuff.ShowComs(MyAss.Cash, true, false), 3));
            }

            if (iPer > 99)
                MyAss.Medal = 1;
            else if (iPer > 50)
                MyAss.Medal = 2;
            MyAss.Percent = iPer;
            return MyAss;
        }
        private void Sniper_AddGoons()
        {
            LoggerLight.LogThis("Sniper_AddGoons");
            EntityBuild.BuildProp("p_gcase_s", SnipMissions.MySnips.GunCase, true, false);
            SnipMissions.TargetPed = EntityBuild.NPCSpawn(new PedFeat(SnipMissions.MySnips.Players[0], false, 180, 15, 0, null, 3, false, 0, DataStore.MyLang.Maptext[105]), SnipMissions.MySnips.TargPath[0], 0.00f);
            EntityBuild.Groupies(true, SnipMissions.TargetPed);
            SnipMissions.Follow1 = EntityBuild.NPCSpawn(new PedFeat(SnipMissions.MySnips.Players[1], false, 180, 16, 0, null, 3, false, 0, DataStore.MyLang.Maptext[105]), SnipMissions.MySnips.TargPath[0], 0.00f);
            SnipMissions.Follow2 = EntityBuild.NPCSpawn(new PedFeat(SnipMissions.MySnips.Players[2], false, 180, 16, 0, null, 3, false, 0, DataStore.MyLang.Maptext[105]), SnipMissions.MySnips.TargPath[0], 0.00f);
            SnipMissions.ExitVic = EntityBuild.VehicleSpawn(new VehMods(SnipMissions.MySnips.ThisVeh, 29), SnipMissions.MySnips.VehiclePark);
            SnipMissions.Driver = EntityBuild.NPCSpawn(new PedFeat(SnipMissions.MySnips.Players[2], false, 180, 0, 1, SnipMissions.ExitVic, 3, false, 0, DataStore.MyLang.Maptext[105]), SnipMissions.MySnips.VehiclePark);
            Function.Call(Hash.TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS, SnipMissions.Driver.Handle, true);
            if (SnipMissions.MySnips.Booater)
                Function.Call(Hash.SET_BOAT_ANCHOR, SnipMissions.ExitVic.Handle, true);
            else if (SnipMissions.MySnips.Convertables)
                Function.Call(Hash.LOWER_CONVERTIBLE_ROOF, SnipMissions.ExitVic.Handle, true);

            if (SnipMissions.MySnips.OnBike)
            {
                SnipMissions.Vic = EntityBuild.VehicleSpawn(new VehMods(SnipMissions.MySnips.SpairVeh, 2), SnipMissions.MySnips.TargPath[0], 0.00f);
                EntityBuild.EnterAnyVeh(SnipMissions.Vic, SnipMissions.TargetPed, 0, 1.1f);
            }
        }
        public static void Sniper_FollowBoss(Ped Follower)
        {
            EntityBuild.AddGroupie(Follower);
            EntityBuild.OhDoKeepUp(Follower, SnipMissions.TargetPed, 0.5f, SnipMissions.MySnips.FollowClose);
        }
        private void Sniper_GoProne()
        {
            LoggerLight.LogThis("Sniper_GoProne");

            if (SnipMissions.GoProne)
                Game.Player.Character.Task.ClearAllImmediately();
            else
            {
                EntityBuild.ForceAnimOnce(Game.Player.Character, "move_weapon@rifle@generic", "idle_crouch", Game.Player.Character.Position, Game.Player.Character.Rotation);
                while (Function.Call<bool>(Hash.GET_IS_TASK_ACTIVE, Game.Player.Character.Handle, 134))
                    Script.Wait(100);
                EntityBuild.ForceAnimOnce(Game.Player.Character, "missfbi3_sniping", "prone_michael", Game.Player.Character.Position, Game.Player.Character.Rotation);
            }
            SnipMissions.GoProne = !SnipMissions.GoProne;
            Script.Wait(1000);
        }
        private void Sniper_WeapSwaps()
        {
            LoggerLight.LogThis("Sniper_WeapSwaps");
            GetWeaps(true);
            EntityBuild.PedBlimp(new BlipForm(50, DataStore.MyLang.Maptext[105]), SnipMissions.TargetPed);
        }
        private void Sniper_RunForest()
        {
            if (ReturnStuff.AreUNear(SnipMissions.TargetPed.Position, SnipMissions.MySnips.TargPath[SnipMissions.BossGoTo], 2.5f))
            {
                SnipMissions.BossGoTo++;
                if (SnipMissions.BossGoTo < SnipMissions.MySnips.TargPath.Count)
                {
                    if (SnipMissions.MySnips.OnBike)
                        EntityBuild.DriveToDest(SnipMissions.Vic, SnipMissions.MySnips.TargPath[SnipMissions.BossGoTo], SnipMissions.TargetPed, SnipMissions.MySnips.VehSpeed, 262972);
                    else
                        EntityBuild.WalkThisWay(SnipMissions.TargetPed, SnipMissions.MySnips.TargPath[SnipMissions.BossGoTo], SnipMissions.MySnips.VehSpeed);
                }
                else
                {
                    if (SnipMissions.MySnips.TheUfo)
                    {
                        SnipMissions.Ufo1 = EntityBuild.BuildProp("p_spinning_anus_s", SnipMissions.MySnips.DriveToo, Vector3.Zero, true, true);
                        SnipMissions.Ufo2 = EntityBuild.BuildProp("ba_prop_battle_lights_fx_righ", SnipMissions.MySnips.DriveToo, Vector3.Zero, true, true);
                        if (SnipMissions.Ufo1 != null && SnipMissions.Ufo2 != null)
                            SnipMissions.Ufo2.AttachTo(SnipMissions.Ufo1, SnipMissions.Ufo1.GetBoneIndex("bodyshell"), new Vector3(0.00f, 0.00f, 0.00f), new Vector3(0.00f, 60.00f, 30.00f));
                    }
                    else
                    {
                        while (SnipMissions.TargetPed.IsInVehicle())
                        {
                            EntityBuild.GetOutofVeh(SnipMissions.TargetPed, 1);
                            Script.Wait(1000);
                        }
                        SearchFor.BackSeat.Add(new FindSeat(2, SnipMissions.ExitVic, SnipMissions.Follow1, 1.2f));
                        SearchFor.BackSeat.Add(new FindSeat(4, SnipMissions.ExitVic, SnipMissions.TargetPed, 1.2f));
                        SearchFor.BackSeat.Add(new FindSeat(3, SnipMissions.ExitVic, SnipMissions.Follow2, 1.2f));
                    }
                    JobSeq++;
                }
            }
        }
        private void Sniper_BulletTime()
        {
            Function.Call(Hash.DISPLAY_RADAR, false);
            Function.Call(Hash.SET_TIME_SCALE, 0.25f);

            Vector3 Campo = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 2);
            Vector3 Camro = new Vector3(0.00f, 0.00f, Game.Player.Character.Heading);
            Camera cCams = World.CreateCamera(Campo, Camro, 50.00f);
            Function.Call(Hash.RENDER_SCRIPT_CAMS, 1, 1, cCams.Handle, 0, 0);

            Vector3 Bullet = Game.Player.Character.GetLastWeaponImpactCoords();
            if (Bullet == Vector3.Zero)
                Bullet = SnipMissions.TargetPed.Position;
            Vector3 Stepto = Sniper_Move_Direct(cCams.Position, Bullet);

            while (ReturnStuff.AreUFar(cCams.Position, Bullet, 10.00f))
            {
                cCams.Position = new Vector3(cCams.Position.X - Stepto.X, cCams.Position.Y - Stepto.Y, cCams.Position.Z - Stepto.Z);
                Script.Wait(1);
            }

            List<Ped> YouDead = SearchFor.GetLocalPeds(Bullet, 10f);

            for (int i = 0; i < YouDead.Count; i++)
            {
                if (YouDead[i].IsDead)
                    SnipMissions.HitSome = true;
            }

            Function.Call(Hash.RENDER_SCRIPT_CAMS, 0, 1, 0, 0, 0);
            cCams.Destroy();
            Function.Call(Hash.DISPLAY_RADAR, true);
            Function.Call(Hash.SET_TIME_SCALE, 1.0f);
        }
        private Vector3 Sniper_Move_Direct(Vector3 A, Vector3 B)
        {
            float X = A.X - B.X;// Get Distance Between..
            float Y = A.Y - B.Y;
            float Z = A.Z - B.Z;

            return new Vector3(X / 100, Y / 100, Z / 100);
        }
        private void Sniper_AddingAwards()
        {
            LoggerLight.LogThis("Sniper_AddingAwards");
            if (SnipMissions.GoProne)
                DataStore.MyAchivments.Sniper_LieFlat++;            //use prone postion to get the shot
            if (SnipMissions.TargetPed.IsInVehicle())
                DataStore.MyAchivments.Sniper_DrivinMissDasy++;      //shoot the target n a car.
        }
        private static AchList Sniper_Awards(int cashtotal, bool bCash)
        {
            AchList MyAss = new AchList(91);

            MyAss.Medal = 3;
            int iPer = 0;

            if (DataStore.MyAchivments.Sniper_LieFlat > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[291], DataStore.MyLang.Othertext[292], "", 1));
                iPer += 40;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[291], DataStore.MyLang.Othertext[292], "", 0));
            }

            if (DataStore.MyAchivments.Sniper_DrivinMissDasy > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[293], DataStore.MyLang.Othertext[294], "", 1));
                iPer += 30;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[293], DataStore.MyLang.Othertext[294], "", 0));
            }

            if (DataStore.MyAchivments.Sniper_FireAtWill > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[295], DataStore.MyLang.Othertext[296], "", 1));
                iPer += 30;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[295], DataStore.MyLang.Othertext[296], "", 0));
            }

            if (bCash)
            {
                MyAss.Cash = cashtotal;
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[53], "", "$" + ReturnStuff.ShowComs(MyAss.Cash, true, false), 3));
            }

            if (iPer > 99)
                MyAss.Medal = 1;
            else if (iPer > 50)
                MyAss.Medal = 2;
            MyAss.Percent = iPer;
            return MyAss;
        }
        private void MoneyMan_HeyBud()
        {
            LoggerLight.LogThis("MoneyMan_HeyBud");

            Game.Player.Character.CanBeDraggedOutOfVehicle = true;
            Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, MoneyMissions.Buddy.Handle, 0, false);
            Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, MoneyMissions.Buddy.Handle, 2, true);
            MoneyMissions.Buddy.BlockPermanentEvents = true;
            MoneyMissions.Buddy.RelationshipGroup = DataStore.GP_Attack;
            MoneyMissions.Buddy.CanBeDraggedOutOfVehicle = true;
            MoneyMissions.Buddy.Task.ShuffleToNextVehicleSeat(MoneyMissions.Truck);
            Script.Wait(2000);
            if (MoneyMissions.Buddy.SeatIndex != VehicleSeat.Driver)
            {
                EntityBuild.GetOutofVeh(Game.Player.Character, 2);
                MoneyMissions.Buddy.Task.ShuffleToNextVehicleSeat(MoneyMissions.Truck);
            }
            MoneyMissions.Buddy.Task.ClearAll();
            MoneyMissions.Buddy.Task.CruiseWithVehicle(MoneyMissions.Truck, 75.00f, 828);
        }
        private void MoneyMan_GetJack()
        {
            MissionData.iTracking = Game.GameTime + 500;

            if (!Game.Player.Character.IsInVehicle(MoneyMissions.Truck))
            {
                int iRan = -99;
                float fFirst = 25.00f;
                for (int i = 0; i < MultiPed.Count; i++)
                {
                    Ped Peddy = MultiPed[i].MyPed;
                    float fDis = Peddy.Position.DistanceTo(MoneyMissions.Truck.Position);
                    if (Peddy.IsInVehicle(MoneyMissions.Truck))
                    {

                    }
                    else
                    {
                        if (fDis < fFirst)
                        {
                            fFirst = fDis;
                            iRan = i;
                        }
                    }
                }

                if (iRan != -99)
                {
                    Ped Peddy = MultiPed[iRan].MyPed;

                    Peddy.Task.ClearAll();
                    Peddy.AlwaysKeepTask = true;
                    Peddy.BlockPermanentEvents = true;
                    Function.Call(Hash.TASK_ENTER_VEHICLE, Peddy.Handle, MoneyMissions.Truck.Handle, -1, -1, 2.00f, 1, 0);
                    while (!Peddy.IsInVehicle() && !Peddy.IsDead && ReturnStuff.AreUNear(Peddy.Position, MoneyMissions.Truck.Position, 15f))
                        Script.Wait(100);
                    if (Peddy.IsInVehicle(MoneyMissions.Truck))
                    {
                        Peddy.Task.CruiseWithVehicle(MoneyMissions.Truck, 55.00f, 0);
                        MoneyMissions.GotYourVan = true;
                    }
                }
            }
            else
            {
                for (int i = 0; i < MultiPed.Count; i++)
                {
                    Ped Peddy = MultiPed[i].MyPed;
                    if (Peddy.IsDead)
                    {
                        if (Peddy.CurrentBlip.Exists())
                            Peddy.CurrentBlip.Remove();
                    }
                    else
                    {
                        if (ReturnStuff.AreUNear(Peddy.Position, MoneyMissions.Truck.Position, 25f) && !Peddy.Weapons.HasWeapon(WeaponHash.Bat))
                        {
                            if (MoneyMissions.Truck.IsStopped)
                            {
                                EntityBuild.GetOutofVeh(Peddy, 1);
                                EntityBuild.ArmNpcWeapon("WEAPON_bat", Peddy);
                                EntityBuild.ArmsRegulator(Peddy, 3);
                            }
                        }
                        else if (!MoneyMissions.Truck.IsStopped && Peddy.Weapons.HasWeapon(WeaponHash.Bat) && ReturnStuff.AreUFar(Peddy.Position, MoneyMissions.Truck.Position, 35.00f))
                        {
                            Peddy.Weapons.RemoveAll();
                            EntityBuild.ArmsRegulator(Peddy, 4);
                            Peddy.Task.VehicleChase(Game.Player.Character);
                        }
                    }
                }
            }

            EntityClear.MultiPedTracker();
        }
        private void MoneyMan_Attacks()
        {
            LoggerLight.LogThis("MoneyMan_Attacks");

            Game.Player.Character.CanBeDraggedOutOfVehicle = true;

            MoneyMissions.YourFate = RandomX.FindRandom("MoneyAtt01", 1, 6);

            if (MoneyMissions.YourFate == 1)
            {
                MoneyMissions.AttackTrack = true;
                SearchFor.MakeCarz.Add(new FindVeh(35.00f, 145.00f, new VehMods(ReturnStuff.AddRandomVeh(16), 8, 3, false, "", false, true, ReturnStuff.FunPlates()), true));
                MoneyMissions.CashPay *= 20;

            }            // vehicle chase
            else if (MoneyMissions.YourFate == 2)
            {
                MoneyMissions.AttackTrack = true;
                Vector3 VFor = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 30);
                SearchFor.StreetFrenz.Add(new FindPed(5f, 75f, 25, false, VFor, new PedFeat("", 17)));
                MoneyMissions.CashPay *= 10;
            }       // mob attack 
            else if (MoneyMissions.YourFate == 3)
            {
                MoneyMissions.AttackAir = true;
                EntityBuild.AddDogFighters(1);
                MoneyMissions.CashPay *= 40;
            }       // plane attack
            else if (MoneyMissions.YourFate == 4)
            {

            }       // Blank...No Attack
            else if (MoneyMissions.YourFate == 5)
            {
                MoneyMissions.AttackTrack = true;
                SearchFor.MakeCarz.Add(new FindVeh(35.00f, 145.00f, new VehMods(ReturnStuff.AddRandomVeh(17), 8, 3, false, "", false, true, ReturnStuff.FunPlates()), true));
                MoneyMissions.CashPay *= 40;
            }       // tank attack
            else
            {
                MoneyMissions.AttackTrack = true;
                MoneyMan_HeyBud();
                MoneyMissions.CashPay *= 50;
            }                            // passenger attacks
        }
        private void MoneyMan_AddingAwards()
        {
            LoggerLight.LogThis("MoneyMan_AddingAwards");

            if (MoneyMissions.YourFate == 6)
                DataStore.MyAchivments.MoneyMAn_DoubbleCross++;     //Get van back from partner.
            else if (MoneyMissions.YourFate == 2)
                DataStore.MyAchivments.MoneyMAn_AngreyMob++;       //Excape the angery mob
            else if (MoneyMissions.YourFate == 5)
                DataStore.MyAchivments.MoneyMAn_Tanks++;           //Excape the tank.

            if (MoneyMissions.LostYourVan)
                DataStore.MyAchivments.MoneyMAn_ThatsMine++;         //Recover the security van before it blows up.
        }
        private static AchList MoneyMan_Awards(int cashtotal, bool bCash)
        {
            AchList MyAss = new AchList(13);

            MyAss.Medal = 3;
            int iPer = 0;

            if (DataStore.MyAchivments.MoneyMAn_DoubbleCross > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[297], DataStore.MyLang.Othertext[298], "", 1));
                iPer += 20;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[297], DataStore.MyLang.Othertext[298], "", 0));
            }

            if (DataStore.MyAchivments.MoneyMAn_AngreyMob > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[299], DataStore.MyLang.Othertext[300], "", 1));
                iPer += 20;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[299], DataStore.MyLang.Othertext[300], "", 0));
            }

            if (DataStore.MyAchivments.MoneyMAn_Tanks > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[301], DataStore.MyLang.Othertext[302], "", 1));
                iPer += 20;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[301], DataStore.MyLang.Othertext[302], "", 0));
            }

            if (DataStore.MyAchivments.MoneyMAn_ThatsMine > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[303], DataStore.MyLang.Othertext[304], "", 1));
                iPer += 20;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[303], DataStore.MyLang.Othertext[304], "", 0));
            }

            if (DataStore.MyAchivments.MoneyMAn_WhileImHere > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[305], DataStore.MyLang.Othertext[306], "", 1));
                iPer += 20;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[305], DataStore.MyLang.Othertext[306], "", 0));
            }

            if (bCash)
            {
                MyAss.Cash = cashtotal;
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[53], "", "$" + ReturnStuff.ShowComs(MyAss.Cash, true, false), 3));
            }

            if (iPer > 99)
                MyAss.Medal = 1;
            else if (iPer > 50)
                MyAss.Medal = 2;
            MyAss.Percent = iPer;
            return MyAss;
        }
        private void Water01_BargeCars(Vehicle Veh, Prop Barge, int iPosition)
        {
            LoggerLight.LogThis("Water01_BargeCars, iPosition == " + iPosition);

            if (iPosition == 1)
                Veh.AttachTo(Barge, 0, new Vector3(2.00f, 8.00f, 2.57f), new Vector3(0.00f, 0.00f, 90.00f));
            else if (iPosition == 2)
                Veh.AttachTo(Barge, 0, new Vector3(2.00f, 1.00f, 2.57f), new Vector3(0.00f, 0.00f, 90.00f));
            else
                Veh.AttachTo(Barge, 0, new Vector3(1.60f, -6.80f, 2.57f), new Vector3(0.00f, 0.00f, 50.00f));
        }
        private void Water01_BargeTow(Vehicle Barge, Vehicle Boat)
        {
            LoggerLight.LogThis("Water01_BargeTow");

            float fxPos1 = 0.00f;
            float fyPos1 = -18.00f;
            float fzPos1 = 2.00f;

            float fxPos2 = 0.00f;
            float fyPos2 = 17.00f;
            float fzPos2 = 2.00f;

            float fxRot = 0.00f;
            float fyRot = 0.00f;
            float fzRot = 0.00f;

            float breakForce = 999999.00f;

            bool fixedRot = false;
            bool p15 = true;
            bool collision = true;
            bool teleport = false;
            int p18 = 2;

            Function.Call(Hash.ATTACH_ENTITY_TO_ENTITY_PHYSICALLY, Barge.Handle, Boat.Handle, 0, Boat.GetBoneIndex("bodyshell"), fxPos1, fyPos1, fzPos1, fxPos2, fyPos2, fzPos2, fxRot, fyRot, fzRot, breakForce, fixedRot, p15, collision, teleport, p18);
        }
        private void Water01_RentoMob(Vehicle V1, Vehicle V2, Vehicle V3)
        {
            LoggerLight.LogThis("Water01_RentoMob");

            Water01_BargeCars(V1, BargeMissions.Barge02, 1);
            Water01_BargeCars(V2, BargeMissions.Barge02, 3);
            Water01_BargeCars(V3, BargeMissions.Barge02, 2);

            for (int i = 0; i < BargeMissions.Friends.Count; i++)
                EntityBuild.NPCSpawn(new PedFeat(ReturnStuff.RandNPC(1), false, 180, 18, 0, null, 2, true, 18, DataStore.MyLang.Maptext[110]), BargeMissions.Friends[i], 0.00f);
        }
        private void Water01_BargeFloat()
        {
            Vector3 Vrot = new Vector3(BargeMissions.Tuger.Rotation.X, BargeMissions.Tuger.Rotation.Y, BargeMissions.Barge01.Rotation.Z);

            if (Vrot.X < 8.00f && Vrot.X > -8.00f && Vrot.Y < 8.00f && Vrot.Y > -8.00f)
                BargeMissions.Barge01.Rotation = Vrot;

            Vector3 Vrot2 = new Vector3(BargeMissions.Tuger.Rotation.X, BargeMissions.Tuger.Rotation.Y, BargeMissions.Barge02.Rotation.Z);

            if (Vrot2.X < 8.00f && Vrot2.X > -8.00f && Vrot2.Y < 8.00f && Vrot2.Y > -8.00f)
                BargeMissions.Barge02.Rotation = Vrot2;
        }
        private void Water01_JetSkiTrackin()
        {
            EntityClear.MultiPedTracker();

            if (MultiPed.Count < 8)
            {
                BargeMissions.KillCount++;
                int iLocals = RandomX.RandInt(0, BargeMissions.Foes.Count - 1);
                Vector3 Vat = BargeMissions.Foes[iLocals];
                float fedd = (float)RandomX.RandInt(0, 360);
                EntityBuild.VehicleSpawn(new VehMods("Seashark3", 14, 1, false, DataStore.MyLang.Maptext[20]), Vat, fedd);
            }
        }
        private void Water01_HaveACar(Vehicle V1, Vehicle V2, Vehicle V3)
        {
            LoggerLight.LogThis("Water01_HaveACar");

            V1.Detach();
            V1.FreezePosition = false;
            V1.Position = new Vector3(-448.75f, -2427.25f, 4.33f);
            V1.Heading = 139.65f;

            V2.Detach();
            V2.FreezePosition = false;
            V2.Position = new Vector3(-444.54f, -2430.93f, 4.33f);
            V2.Heading = 139.65f;

            V3.Detach();
            V3.FreezePosition = false;
            V3.Position = new Vector3(-440.53f, -2434.34f, 4.33f);
            V3.Heading = 139.65f;

            Vector3 Vhere = new Vector3(-446.42f, -2439.57f, 5.00f);
            SearchFor.SlowFastTravel(Vhere, 2.70f);
            JobSeq = 10;
        }
        private void Water02_YachtAttack()
        {
            LoggerLight.LogThis("Water02_YachtAttack");

            int iType = RandomX.FindRandomList("Water02_YachtAttack", new List<int> { 1, 2, 4, 5, 6, 7, 8, 9, 10, 11 });
            for (int i = 0; i < MissionData.YachMobs.Count; i++)
                EntityBuild.NPCSpawn(new PedFeat(ReturnStuff.RandNPC(iType), true, 220, 19, 0, null, 0, true, 1, DataStore.MyLang.Maptext[111]), MissionData.YachMobs[i], 0.00f);
        }
        private void Water03_ToeOutofWater()
        {
            GetBackInVeh(PhishMissions.Boat);

            if (PhishMissions.OutofWater)
            {
                if (PhishMissions.Boat.IsInWater)
                    PhishMissions.OutofWater = false;
                else
                {
                    if (PhishMissions.Watertime < Game.GameTime)
                        JobSeq = 45;
                }
            }
            else
            {
                if (!PhishMissions.Boat.IsInWater)
                {
                    PhishMissions.Watertime = Game.GameTime + 15000;
                    PhishMissions.OutofWater = true;
                }
            }
        }
        private void Water04_AddTheRubbish()
        {

            LoggerLight.LogThis("Water04_AddTheRubbish");

            for (int i = 0; i < MissionData.DropRubbish.Count; i++)
            {
                string stype = "prop_rad_waste_barrel_01";

                int iobject = RandomX.RandInt(0, 4);
                if (iobject == 1)
                    stype = "prop_rub_tyre_01";
                else if (iobject == 2)
                    stype = "prop_rub_tyre_02";
                else if (iobject == 3)
                    stype = "prop_rub_tyre_03";
                else if (iobject == 4)
                    stype = "prop_rub_washer_01";
                int iType = Function.Call<int>(Hash.GET_HASH_KEY, stype);
                Prop Picker = World.CreateAmbientPickup(PickupType.VehicleCustomScript, MissionData.DropRubbish[i], iType, 100);
                Picker.IsPersistent = true;
                Picker.AddBlip();
                Picker.CurrentBlip.IsShortRange = false;
                Picker.CurrentBlip.Sprite = BlipSprite.Package2;
                Picker.CurrentBlip.Color = BlipColor.Green;
                MissionData.PropList_01.Add(new Prop(Picker.Handle));
            }
        }
        private void Water04_RemoveRubbish()
        {

            LoggerLight.LogThis("Water04_RemoveRubbish");

            for (int i = 0; i < MissionData.PropList_01.Count; i++)
            {
                MissionData.PropList_01[i].CurrentBlip.Remove();
                MissionData.PropList_01[i].Delete();
            }

            MissionData.PropList_01.Clear();
        }
        private void Water04_TakeOutTrash()
        {
            int iLess = 50;
            for (int i = 0; i < MissionData.PropList_01.Count; i++)
            {
                if (!MissionData.PropList_01[i].Exists())
                {

                    MissionData.PropList_01.RemoveAt(i);
                }
            }
            iLess -= MissionData.PropList_01.Count;
            UiDisplay.SideBars[0].Data = "" + iLess + "/50";
        }
        private void Water05_InYourBoat()
        {
            LoggerLight.LogThis("Water05_InYourBoat");

            for (int i = 1; i < MissionData.VehicleList_01.Count; i++)
            {
                if (MissionData.VehicleList_01[i].IsDead)
                {
                    JobSeq = 45;
                    break;
                }
                else if (Game.Player.Character.IsInVehicle(MissionData.VehicleList_01[i]) || ReturnStuff.Water05_CargoBobed(MissionData.VehicleList_01[i]))
                {
                    BoatDelMissions.YourBoat = MissionData.VehicleList_01[i];
                    Water05_BoatMarkerRem();
                    EntityBuild.AddTarget(new BlipForm(BoatDelMissions.Dock.ParkHere.V3, true, 5, 356, DataStore.MyLang.Maptext[0], 5f));
                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[121];
                    BoatDelMissions.iTimes = Game.GameTime;
                    JobSeq++;
                    break;
                }
            }
        }
        private void Water05_BlipTheBoats()
        {
            LoggerLight.LogThis("Water05_BlipTheBoats");

            for (int i = 0; i < MissionData.VehicleList_01.Count; i++)
            {
                if (MissionData.VehicleList_01[i].Model != VehicleHash.Cargobob2)
                    EntityBuild.VehBlip(new BlipForm(3, DataStore.MyLang.Maptext[0]), MissionData.VehicleList_01[i]);
            }
        }
        private void Water05_BoatMarkerRem()
        {
            LoggerLight.LogThis("Water05_BoatMarkerRem");

            for (int i = 0; i < MissionData.VehicleList_01.Count; i++)
            {
                if (MissionData.VehicleList_01[i].CurrentBlip.Exists())
                    MissionData.VehicleList_01[i].CurrentBlip.Remove();
            }
        }
        private void Water06_SubCam()
        {
            LoggerLight.LogThis("Water06_SubCam");

            Game.FadeScreenOut(1000);
            Script.Wait(1000);
            Ped Peddy = Game.Player.Character;

            Peddy.Task.ClearAllImmediately();

            Function.Call(Hash.DISPLAY_RADAR, false);
            Vector4 Campo = BogSubMission.SubSection[0];
            MissionData.cCams = World.CreateCamera(new Vector3(Campo.X, Campo.Y, Campo.Z), new Vector3(0f, 0f, Campo.R), 50.00f);
            EntityLog.BackUpAss("CamX-" + MissionData.cCams.Handle);
            Function.Call(Hash.RENDER_SCRIPT_CAMS, 1, 1, MissionData.cCams.Handle, 0, 0);
            Vector4 VehPos = BogSubMission.SubSection[1];
            BogSubMission.SubVeh.Position = new Vector3(VehPos.X, VehPos.Y, VehPos.Z);
            BogSubMission.SubVeh.Rotation = new Vector3(-0.00f, 0.00f, VehPos.R);
            Vector4 VehDest = BogSubMission.SubSection[2];
            EntityBuild.WarptoAnyVeh(BogSubMission.SubVeh, Peddy, 1);
            Peddy.Task.DriveTo(BogSubMission.SubVeh, new Vector3(VehDest.X, VehDest.Y, VehDest.Z), 3.00f, 15.00f, 16777216);

            Game.FadeScreenIn(1000);
            Script.Wait(11000);
            Game.FadeScreenOut(1000);
            Script.Wait(1000);
            Peddy.Task.ClearAllImmediately();
            EntityClear.CleanCams();

            EntityBuild.GetOutofVeh(Game.Player.Character, 1);
            Game.Player.Character.Position = new Vector3(514.3094f, 4887.639f, -62.59013f);
            Script.Wait(500);

            Water06_FillTheSub();
            Game.FadeScreenIn(1000);

            InternalMissionIPLs(-1, new Vector3(514.3094f, 4887.639f, -62.59013f), 1);
        }
        private void Water06_FillTheSub()
        {
            LoggerLight.LogThis("Water06_FillTheSub");

            for (int i = 0; i < MissionData.SubStandard.Count; i++)
            {
                if (i == 1)
                    BogSubMission.Target = EntityBuild.NPCSpawn(new PedFeat("mp_m_bogdangoon", false, 180, 1, 0, null, 0, true, 18, DataStore.MyLang.Maptext[105]), MissionData.SubStandard[i]);//cowering
                else if (i == 7 || i == 4)
                    EntityBuild.NPCSpawn(new PedFeat("mp_m_bogdangoon", true, 220, 23, 0, null, 8, true, 1, ""), MissionData.SubStandard[i]);//offence
                else if (i == 10 || i == 9 || i == 6 || i == 5)
                    EntityBuild.NPCSpawn(new PedFeat("mp_m_bogdangoon", true, 220, 22, 0, null, 8, true, 1, ""), MissionData.SubStandard[i]);//defence
                else
                    EntityBuild.NPCSpawn(new PedFeat("mp_m_bogdangoon", true, 220, 21, 0, null, 8, true, 1, ""), MissionData.SubStandard[i]);//static
            }
        }
        public static AchList Water_Awards(int cashtotal, bool bCash)
        {
            AchList MyAss = new AchList(14);

            MyAss.Medal = 3;
            int iPer = 0;

            if (DataStore.MyAchivments.Water01_AndThePointWas > 4)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[307], DataStore.MyLang.Othertext[308], DataStore.MyAchivments.Water01_AndThePointWas + "/5", 1));
                iPer += 20;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[307], DataStore.MyLang.Othertext[308], DataStore.MyAchivments.Water01_AndThePointWas + "/5", 0));
            }

            if (DataStore.MyAchivments.Water02_PricyPiracy > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[309], DataStore.MyLang.Othertext[310], "", 1));
                iPer += 20;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[309], DataStore.MyLang.Othertext[310], "", 0));
            }

            if (DataStore.MyAchivments.Water03_PhishinTrip > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[311], DataStore.MyLang.Othertext[312], "", 1));
                iPer += 20;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[311], DataStore.MyLang.Othertext[312], "", 0));
            }

            if (DataStore.MyAchivments.Water04_SingleUsePlastics == 50)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[313], DataStore.MyLang.Othertext[314], DataStore.MyAchivments.Water04_SingleUsePlastics + "/50", 1));
                iPer += 20;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[313], DataStore.MyLang.Othertext[314], DataStore.MyAchivments.Water04_SingleUsePlastics + "/50", 0));
            }

            if (DataStore.MyAchivments.Water05_DryDocking > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[315], DataStore.MyLang.Othertext[316], "", 1));
                iPer += 10;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[315], DataStore.MyLang.Othertext[316], "", 0));
            }

            if (DataStore.MyAchivments.Water06_SubCub < 901000 && DataStore.MyAchivments.Water06_SubCub != 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[317], DataStore.MyLang.Othertext[318], ReturnStuff.ShowComs(DataStore.MyAchivments.Water06_SubCub, false, false) + "/15:00", 1));
                iPer += 10;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[317], DataStore.MyLang.Othertext[318], ReturnStuff.ShowComs(DataStore.MyAchivments.Water06_SubCub, false, false) + "/15:00", 0));
            }

            if (bCash)
            {
                MyAss.Cash = cashtotal;
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[53], "", "$" + ReturnStuff.ShowComs(MyAss.Cash, true, false), 3));
            }

            if (iPer > 99)
                MyAss.Medal = 1;
            else if (iPer > 50)
                MyAss.Medal = 2;
            MyAss.Percent = iPer;
            return MyAss;
        }
        private void ImportsExpo_CollisionBug(int iZone)
        {
            if (iZone == 2)
            {

                Vector3 ReBug_01 = new Vector3(-2138.074f, -506.461f, 0.7643f);
                Vector3 ReBugRot_01 = new Vector3(0.00f, 0.00f, -132.534f);

                Vector3 ReBug_02 = new Vector3(-2141.46f, -510.81f, 2.20f);
                Vector3 ReBugRot_02 = new Vector3(0.00f, 0.00f, -133.70f);

                EntityBuild.BuildProp("prop_byard_rampold", ReBug_01, ReBugRot_01, true, true);
                EntityBuild.BuildProp("prop_byard_rampold", ReBug_02, ReBugRot_02, true, true);
            }
            else if (iZone == 3)
            {
                Vector3 ReBug_01 = new Vector3(-3268.10f, 1268.10f, 0.013f);
                Vector3 ReBugRot_01 = new Vector3(0.00f, 0.00f, 166.098f);

                Vector3 ReBug_02 = new Vector3(-3273.055f, 1269.149f, 1.398f);
                Vector3 ReBugRot_02 = new Vector3(0.00f, 0.00f, 166.793f);

                EntityBuild.BuildProp("prop_byard_rampold", ReBug_01, ReBugRot_01, true, true);
                EntityBuild.BuildProp("prop_byard_rampold", ReBug_02, ReBugRot_02, true, true);
            }
            else if (iZone == 4)
            {
                Vector3 ReBug_01 = new Vector3(2851.892f, -636.868f, 2.032f);
                Vector3 ReBugRot_01 = new Vector3(0.00f, 0.00f, 18.182f);

                Vector3 ReBug_02 = new Vector3(2847.08f, -638.29f, 0.862f);
                Vector3 ReBugRot_02 = new Vector3(0.00f, 0.00f, 15.956f);

                Vector3 ReBug_03 = new Vector3(2842.25f, -640.03f, -0.872f);
                Vector3 ReBugRot_03 = new Vector3(0.00f, 0.00f, 17.137f);

                EntityBuild.BuildProp("prop_byard_rampold", ReBug_01, ReBugRot_01, true, true);
                EntityBuild.BuildProp("prop_byard_rampold", ReBug_02, ReBugRot_02, true, true);
                EntityBuild.BuildProp("prop_byard_rampold", ReBug_03, ReBugRot_03, true, true);
            }
            else if (iZone == 5)
            {
                Vector3 ReBug_01 = new Vector3(3874.278f, 4463.562f, 2.253f);
                Vector3 ReBugRot_01 = new Vector3(6.67f, 12.099f, 0.233f);

                Vector3 ReBug_02 = new Vector3(3869.579f, 4463.611f, 1.776f);
                Vector3 ReBugRot_02 = new Vector3(2.668f, 11.799f, -1.541f);

                Vector3 ReBug_03 = new Vector3(3865.168f, 4463.689f, 1.338f);
                Vector3 ReBugRot_03 = new Vector3(-1.067f, 12.799f, -2.16f);

                EntityBuild.BuildProp("prop_byard_rampold", ReBug_01, ReBugRot_01, true, true);
                EntityBuild.BuildProp("prop_byard_rampold", ReBug_02, ReBugRot_02, true, true);
                EntityBuild.BuildProp("prop_byard_rampold", ReBug_03, ReBugRot_03, true, true);
            }
            else if (iZone == 6)
            {
                Vector3 ReBug_01 = new Vector3(-1827.69f, 4847.84f, 2.75f);
                Vector3 ReBugRot_01 = new Vector3(2.134f, 2.999f, 112.71f);

                Vector3 ReBug_02 = new Vector3(-1825.889f, 4843.404f, 1.618f);
                Vector3 ReBugRot_02 = new Vector3(-7.47f, 4.09f, 110.105f);

                Vector3 ReBug_03 = new Vector3(-1823.82f, 4838.69f, 0.171f);
                Vector3 ReBugRot_03 = new Vector3(5.33f, 2.299f, 110.10f);

                EntityBuild.BuildProp("prop_byard_rampold", ReBug_01, ReBugRot_01, true, true);
                EntityBuild.BuildProp("prop_byard_rampold", ReBug_02, ReBugRot_02, true, true);
                EntityBuild.BuildProp("prop_byard_rampold", ReBug_03, ReBugRot_03, true, true);
            }
        }
        private void ImportsExpo_MoveYourBoat()
        {
            LoggerLight.LogThis("ImportsExpo_MoveYourBoat");

            List<Vehicle> VTarg = SearchFor.GetLocalVeh(ImpExpMissions.Destination, 55.00f);

            for (int i = 0; i < VTarg.Count; i++)
            {
                if (VTarg[i].Exists())
                {
                    if (VTarg[i].ClassType == VehicleClass.Boats)
                        VTarg[i].Delete();
                }
            }
        }
        private int ImportsExpo_CostBasedAnalsisy(int uSay)
        {
            int iPay = 0;
            if (uSay == 1)
                iPay = RandomX.RandInt(115000, 250000);
            else if (uSay == 2)
                iPay = RandomX.RandInt(50000, 95000);
            else if (uSay == 3)
                iPay = RandomX.RandInt(15000, 40000);
            else if (uSay == 4)
                iPay = RandomX.RandInt(50000, 115000);
            else if (uSay == 5)
                iPay = RandomX.RandInt(50000, 250000);
            else if (uSay == 6)
                iPay = RandomX.RandInt(10000, 35000);
            else if (uSay == 7)
                iPay = RandomX.RandInt(25000, 60000);
            else if (uSay == 8)
                iPay = RandomX.RandInt(5000, 25000);
            else if (uSay == 9)
                iPay = RandomX.RandInt(40000, 125000);
            else if (uSay == 10)
                iPay = RandomX.RandInt(250000, 300000);
            else if (uSay == 11)
                iPay = RandomX.RandInt(5000, 25000);
            else
                iPay = RandomX.RandInt(5000, 25000);
            LoggerLight.LogThis("ImportsExpo_CostBasedAnalsisy == " + iPay);
            return iPay;
        }
        private void ImportsExpo_AddVeh()
        {
            LoggerLight.LogThis("ImportsExpo_AddVeh");

            if (RandomX.FindRandom("ExpoAddVeh", 1, 10) < 5)
                SearchFor.MakeCarz.Add(new FindVeh(35.00f, 125.00f, new VehMods(ImpExpMissions.VehList[ImpExpMissions.NoCars].VehicleS, 1, 3, true, DataStore.MyLang.Maptext[14], false, true, ReturnStuff.FunPlates()), false));
            else
                SearchFor.MakeCarz.Add(new FindVeh(35.00f, 125.00f, new VehMods(ImpExpMissions.VehList[ImpExpMissions.NoCars].VehicleS, 25, 3, true, DataStore.MyLang.Maptext[14], false, true, ReturnStuff.FunPlates()), true));
        }
        private void ImportsExpo_GotCArs()
        {
            LoggerLight.LogThis("ImportsExpo_GotCArs");

            for (int i = 0; i < ImpExpMissions.VehList.Count; i++)
            {
                bool bAdd = true;
                string ThisVic = ImpExpMissions.VehList[i].VehicleS;

                for (int ii = 0; ii < DataStore.MyContacts.ImpXCars.Count; ii++)
                {
                    if (DataStore.MyContacts.ImpXCars[ii].VehicleS == ThisVic)
                    {
                        bAdd = false;
                        break;
                    }
                }
                if (bAdd)
                    DataStore.MyContacts.ImpXCars.Add(ImpExpMissions.VehList[i]);
            }
            ReadWriteXML.SaveXmlContacts(DataStore.MyContacts, DataStore.sNSPMCont);
        }
        private void ImportsExpo_Gangz()
        {
            MissionData.iTracking = Game.GameTime + 2000;

            for (int i = 0; i < MultiPed.Count; i++)
            {
                if (ReturnStuff.AmIFar(MultiPed[i].MyPed.Position, 200.00f) || ReturnStuff.AmINear(ImpExpMissions.Destination, 150f))
                {
                    if (MultiPed[i].MyBlip != null)
                        MultiPed[i].MyBlip.Remove();
                    if (MultiPed[i].MyVehicle != null)
                    {
                        MissionData.VehicleList_01.Remove(MultiPed[i].MyVehicle);
                        MultiPed[i].MyVehicle.MarkAsNoLongerNeeded();
                    }
                    MultiPed[i].MyPed.Task.FleeFrom(Game.Player.Character);
                    MultiPed[i].MyPed.MarkAsNoLongerNeeded();
                    MissionData.PedList_01.Remove(MultiPed[i].MyPed);
                    MultiPed.RemoveAt(i);
                }
            }

            if (ReturnStuff.AmINear(ImpExpMissions.Destination, 250f))
            {
                if (SearchFor.MakeCarz.Count > 0)
                    SearchFor.MakeCarz.Clear();
            }
            else
            {
                if (ImpExpMissions.GangDel < Game.GameTime)
                {
                    if (MultiPed.Count + SearchFor.MakeCarz.Count < 6)
                        SearchFor.MakeCarz.Add(new FindVeh(35.00f, 90.00f, new VehMods("KURUMA", 8, 1, false, DataStore.MyLang.Maptext[20], false, true, ReturnStuff.FunPlates()), true, false));
                    else
                        ImpExpMissions.GangDel = Game.GameTime + RandomX.RandInt(30000, 45000);
                }
            }
            EntityClear.MultiPedTracker();
        }
        public static void ImportsExpo_Driver(Ped Driver)
        {
            ImpExpMissions.Driver = Driver;
        }
        private void ImportsExpo_AddingAwards()
        {
            LoggerLight.LogThis("MoneyMan_AddingAwards");

            int iTotals = ReturnStuff.SuperList.Count + ReturnStuff.SportList.Count + ReturnStuff.CoupeList.Count + ReturnStuff.MuscleList.Count + ReturnStuff.SportClassList.Count + ReturnStuff.SedanList.Count + ReturnStuff.SUVList.Count + ReturnStuff.CompactList.Count + ReturnStuff.OffRoadList.Count + ReturnStuff.MotorBikeList.Count;
            if (ImpExpMissions.VehList.Count == iTotals)
                DataStore.MyAchivments.ImportExport_GotToGetThemAll++;    
            
            if (!ImpExpMissions.Murder)
                DataStore.MyAchivments.ImportExport_IJustWantYourCar++;      

            if (ImpExpMissions.CleanRun)
                DataStore.MyAchivments.ImportExport_GetAGoodPrice++;         

            DataStore.MyAchivments.MoneyMAn_ThatsMine++;         
        }
        private static AchList ImportsExpo_Awards(int cashtotal, bool bCash)
        {
            AchList MyAss = new AchList(15);

            MyAss.Medal = 3;
            int iPer = 0;
            int iTotals = ReturnStuff.SuperList.Count + ReturnStuff.SportList.Count + ReturnStuff.CoupeList.Count + ReturnStuff.MuscleList.Count + ReturnStuff.SportClassList.Count + ReturnStuff.SedanList.Count + ReturnStuff.SUVList.Count + ReturnStuff.CompactList.Count + ReturnStuff.OffRoadList.Count + ReturnStuff.MotorBikeList.Count;

            if (DataStore.MyAchivments.ImportExport_GotToGetThemAll > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[319], DataStore.MyLang.Othertext[320], DataStore.MyContacts.ImpXCars.Count + "/" + iTotals, 1));
                iPer += 25;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[319], DataStore.MyLang.Othertext[320], DataStore.MyContacts.ImpXCars.Count + "/" + iTotals, 0));
            }

            if (DataStore.MyAchivments.ImportExport_IJustWantYourCar > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[321], DataStore.MyLang.Othertext[322], "", 1));
                iPer += 25;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[321], DataStore.MyLang.Othertext[322], "", 0));
            }

            if (DataStore.MyAchivments.ImportExport_GetAGoodPrice > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[323], DataStore.MyLang.Othertext[324], "", 1));
                iPer += 25;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[323], DataStore.MyLang.Othertext[324], "", 0));
            }

            if (DataStore.MyAchivments.ImportExport_AboveAndBeond > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[325], DataStore.MyLang.Othertext[326], "", 1));
                iPer += 25;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[325], DataStore.MyLang.Othertext[326], "", 0));
            }

            if (bCash)
            {
                MyAss.Cash = cashtotal;
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[53], "", "$" + ReturnStuff.ShowComs(MyAss.Cash, true, false), 3));
            }

            if (iPer > 99)
                MyAss.Medal = 1;
            else if (iPer > 50)
                MyAss.Medal = 2;
            MyAss.Percent = iPer;
            return MyAss;
        }
        private void DebtCollect_LoadHood(int PedNum)
        {
            LoggerLight.LogThis("DebtCollect_LoadHood");

            for (int i = 1; i < DebtMissions.Foes.Count - 1; i++)
            {
                if (PedNum == 52)
                {
                    if (i == 1)
                    {
                        DebtMissions.YourFee += 200;
                        EntityBuild.NPCSpawn(new PedFeat("", true, 220, 19, 0, null, 0, true, 1, DataStore.MyLang.Maptext[113]), DebtMissions.Foes[i]);
                    }
                    else
                        EntityBuild.VehicleSpawn(new VehMods(ReturnStuff.AddRandomVeh(RandomX.RandInt(1, 5)), 26, false, true, ReturnStuff.FunPlates()), DebtMissions.Foes[i]);
                }
                else if (PedNum == 53)
                {
                    if (i == 1)
                    {
                        DebtMissions.YourFee += 200;
                        EntityBuild.NPCSpawn(new PedFeat("", true, 220, 19, 0, null, 0, true, 1, DataStore.MyLang.Maptext[113]), DebtMissions.Foes[i]);
                    }
                    else
                        EntityBuild.VehicleSpawn(new VehMods(ReturnStuff.AddRandomVeh(RandomX.RandInt(1, 5)), 26, false, true, ReturnStuff.FunPlates()), DebtMissions.Foes[i]);
                }
                else if (PedNum == 54)
                {
                    if (i < 3)
                    {
                        DebtMissions.YourFee += 200;
                        EntityBuild.NPCSpawn(new PedFeat("", true, 220, 19, 0, null, 0, true, 1, DataStore.MyLang.Maptext[113]), DebtMissions.Foes[i]);
                    }
                    else
                        EntityBuild.VehicleSpawn(new VehMods(ReturnStuff.AddRandomVeh(RandomX.RandInt(1, 5)), 26, false, true, ReturnStuff.FunPlates()), DebtMissions.Foes[i]);
                }
                else if (PedNum == 97)
                {
                    if (i < 9)
                    {
                        DebtMissions.YourFee += 200;
                        EntityBuild.NPCSpawn(new PedFeat(ReturnStuff.RandNPC(4), true, 220, 19, 0, null, 0, true, 1, DataStore.MyLang.Maptext[113]), DebtMissions.Foes[i]);
                    }
                    else
                        EntityBuild.VehicleSpawn(new VehMods(ReturnStuff.AddRandomVeh(10), 26, false, true, ReturnStuff.FunPlates()), DebtMissions.Foes[i]);
                }
                else if (PedNum == 98)
                {
                    if (i < 9)
                    {
                        DebtMissions.YourFee += 200;
                        EntityBuild.NPCSpawn(new PedFeat(ReturnStuff.RandNPC(4), true, 220, 19, 0, null, 0, true, 1, DataStore.MyLang.Maptext[113]), DebtMissions.Foes[i]);
                    }
                    else
                        EntityBuild.VehicleSpawn(new VehMods(ReturnStuff.AddRandomVeh(10), 26, false, true, ReturnStuff.FunPlates()), DebtMissions.Foes[i]);
                }
                else
                {
                    DebtMissions.YourFee += 200;
                    EntityBuild.NPCSpawn(new PedFeat("", true, 220, 19, 0, null, 0, true, 1, DataStore.MyLang.Maptext[113]), DebtMissions.Foes[i]);
                }
            }
        }
        private void DebtCollect_AddAwards()
        {
            LoggerLight.LogThis("DebtCollect_Awards");

            if (MissionData.iUltPed01 == 0)
                DataStore.MyAchivments.DebtCollect_IjustWantTheCase++;//no deaths
            else if (MissionData.iUltPed01 == MissionData.iUltMelle)
                DataStore.MyAchivments.DebtCollect_TheEnforcer++;    //all melle kills
        }
        private static AchList DebtCollect_Awards(int cashtotal, bool bCash)
        {
            AchList MyAss = new AchList(16);

            MyAss.Medal = 3;
            int iPer = 0;

            if (DataStore.MyAchivments.DebtCollect_IjustWantTheCase > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[327], DataStore.MyLang.Othertext[328], "", 1));
                iPer += 50;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[327], DataStore.MyLang.Othertext[328], "", 0));
            }

            if (DataStore.MyAchivments.DebtCollect_TheEnforcer > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[329], DataStore.MyLang.Othertext[330], "", 1));
                iPer += 50;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[329], DataStore.MyLang.Othertext[330], "", 0));
            }

            if (bCash)
            {
                MyAss.Cash = cashtotal;
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[53], "", "$" + ReturnStuff.ShowComs(MyAss.Cash, true, false), 3));
            }

            if (iPer > 99)
                MyAss.Medal = 1;
            else if (iPer > 50)
                MyAss.Medal = 2;
            MyAss.Percent = iPer;
            return MyAss;
        }
        public static ClothX BikerRaidsPeds(bool bSecurity, bool male, int iVariant)
        {
            LoggerLight.LogThis("BikerRaids_BizzPedsSec, iVariant == " + iVariant);

            ClothX BikerGrove = null;

            if (bSecurity)
            {
                if (iVariant == 1)
                    BikerGrove = new ClothX("cocaine_", new List<int> { 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0 }, new List<int> { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, new List<int> { }, new List<int> { });
                else if (iVariant == 2)
                    BikerGrove = new ClothX("counterfeit_", new List<int> { 3, 0, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0 }, new List<int> { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, new List<int> { }, new List<int> { });
                else if (iVariant == 3)
                    BikerGrove = new ClothX("forgery_", new List<int> { 3, 0, 0, 3, 3, 0, 0, 0, 1, 0, 0, 0 }, new List<int> { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, new List<int> { }, new List<int> { });
                else if (iVariant == 4)
                    BikerGrove = new ClothX("meth_", new List<int> { 2, 0, 2, 2, 1, 0, 0, 0, 2, 0, 0, 0 }, new List<int> { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, new List<int> { }, new List<int> { });
                else
                    BikerGrove = new ClothX("weed_", new List<int> { 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0 }, new List<int> { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, new List<int> { }, new List<int> { });
            }
            else
            {
                int iRace = RandomX.FindRandom("BikerRaidsPeds01", 0, 1);
                int iRace2 = RandomX.FindRandom("BikerRaidsPeds02", 0, 2);
                int iRace3 = RandomX.FindRandom("BikerRaidsPeds03", 0, 3);
                int iRace4 = RandomX.FindRandom("BikerRaidsPeds03", 0, 4);
                int iRace5 = RandomX.FindRandom("BikerRaidsPeds04", 0, 5);

                if (male)
                {
                    if (iVariant == 1)
                        BikerGrove = new ClothX("cocaine_", new List<int> { iRace, 0, 2, 2, 1, 0, 0, 0, 2, 0, 0, 0 }, new List<int> { 0, 0, 0, iRace, iRace, 0, iRace, 0, 0, 0, 0, 0 }, new List<int> { }, new List<int> { });
                    else if (iVariant == 2)
                        BikerGrove = new ClothX("counterfeit_", new List<int> { iRace, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 }, new List<int> { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, new List<int> { }, new List<int> { });
                    else if (iVariant == 3)
                        BikerGrove = new ClothX("forgery_", new List<int> { iRace2, 0, 0, 0, iRace, 0, 0, 0, 0, 0, 0, 0 }, new List<int> { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, new List<int> { }, new List<int> { });
                    else if (iVariant == 4)
                        BikerGrove = new ClothX("meth_", new List<int> { iRace, 0, 0, iRace, 0, 0, 0, 0, 0, 0, 0, 0 }, new List<int> { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, new List<int> { }, new List<int> { });
                    else
                        BikerGrove = new ClothX("weed_", new List<int> { iRace, 0, 0, iRace, iRace3, 0, 0, 0, 0, 0, 0, 0 }, new List<int> { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, new List<int> { }, new List<int> { });
                }
                else
                {
                    if (iVariant == 1)
                        BikerGrove = new ClothX("counterfeit_", new List<int> { iRace, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, new List<int> { 0, 0, 2, iRace, iRace, 0, iRace, 0, 0, 0, 0, 0 }, new List<int> { }, new List<int> { });
                    else if (iVariant == 2)
                        BikerGrove = new ClothX("counterfeit_", new List<int> { iRace2, 0, iRace2, iRace, iRace, 0, 0, 0, 0, 0, 0, 1 }, new List<int> { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, new List<int> { }, new List<int> { });
                    else if (iVariant == 3)
                        BikerGrove = new ClothX("forgery_", new List<int> { iRace3, 0, iRace5, iRace4, iRace5, 0, 0, 0, 0, 0, 0, 1 }, new List<int> { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, new List<int> { }, new List<int> { });
                    else if (iVariant == 4)
                        BikerGrove = new ClothX("meth_", new List<int> { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 }, new List<int> { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, new List<int> { }, new List<int> { });
                    else
                        BikerGrove = new ClothX("weed_", new List<int> { iRace, 0, iRace, iRace, 0, 0, 0, 0, 0, 0, 0, 1 }, new List<int> { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, new List<int> { }, new List<int> { });
                }
            }

            return BikerGrove;
        }
        private void BikerRaids_KeepWalkin(Vector3 walkHere)
        {
            iWait4Sec = Game.GameTime + 2000;
            for (int i = 0; i < BikerMissions.Walkers.Count; i++)
            {
                Ped Pedx = BikerMissions.Walkers[i];
                if (Pedx.IsDead)
                {
                    iWait4Sec = Game.GameTime + 4000;
                    JobSeq = 44;
                }
                else if (!Pedx.IsInVehicle(BikerMissions.ExVeh))
                {
                    if (ReturnStuff.AreUNear(walkHere, Pedx.Position, 2.5f))
                    {
                        if (Pedx.CurrentBlip.Exists())
                            Pedx.CurrentBlip.Remove();
                        EntityBuild.WarptoAnyVeh(BikerMissions.ExVeh, Pedx, BikerMissions.Seat);
                        BikerMissions.Walkers.Remove(Pedx);
                        BikerMissions.Seat++;
                    }
                    else if (Game.Player.IsTargetting(Pedx))
                    {
                        Pedx.Task.ClearAll();
                        EntityBuild.WalkThisWay(Pedx, walkHere, 1.00f);
                    }
                    else
                    {
                        Pedx.Task.ClearAll();
                        Pedx.Task.Cower(-1);
                    }
                }
            }
        }
        private void BikerRaids_LostMCAtt()
        {
            MissionData.iTracking = Game.GameTime + 1000;

            EntityClear.MultiPedTracker();

            for (int i = 0; i < MultiPed.Count; i++)
            {
                if (MultiPed[i].MyPed.Exists())
                {
                    if (ReturnStuff.AmIFar(MultiPed[i].MyPed.Position, 450f) || ReturnStuff.AmINear(BikerMissions.ClubHouse.ParkHere.V3, 250f))
                    {
                        MultiPed[i].MyPed.Task.FleeFrom(Game.Player.Character);
                        if (MultiPed[i].MyBlip != null)
                            MultiPed[i].MyBlip.Remove();
                        MissionData.PedList_01.Remove(MultiPed[i].MyPed);
                        MultiPed[i].MyPed.MarkAsNoLongerNeeded();
                        MultiPed.RemoveAt(i);
                    }
                }
                else
                    MultiPed.RemoveAt(i);
            }

            if (BikerMissions.McTimmer < Game.GameTime)
            {
                if (BikerMissions.Task == 2)
                {
                    if (MultiPed.Count + SearchFor.MakeCarz.Count < 6)
                        SearchFor.MakeCarz.Add(new FindVeh(35.00f, 150.00f, new VehMods(ReturnStuff.AddRandomVeh(10), 16, 1, false, DataStore.MyLang.Maptext[20], false, true, ReturnStuff.FunPlates()), true));
                }
                else
                {
                    if (MultiPed.Count + SearchFor.MakeCarz.Count < 6 && ReturnStuff.AmIFar(BikerMissions.ClubHouse.ParkHere.V3, 250f))
                        SearchFor.MakeCarz.Add(new FindVeh(35.00f, 150.00f, new VehMods(ReturnStuff.AddRandomVeh(10), 16, 1, false, DataStore.MyLang.Maptext[20], false, true, ReturnStuff.FunPlates()), true));
                    else
                        BikerMissions.McTimmer = Game.GameTime + RandomX.RandInt(30000, 45000);
                }
            }
        }
        private void BikerRaids_LoadHood(int iVers)
        {
            LoggerLight.LogThis("BikerRaids_LoadHood");

            if (iVers == 1)
            {
                for (int i = 1; i < BikerMissions.InBis.Count - 1; i++)
                {
                    Ped Bob = EntityBuild.NPCSpawn(ReturnStuff.BikerPeds(BikerMissions.Buissness.PedNum, false, 3, 113, 24), BikerMissions.InBis[i]);
                    BikerMissions.Walkers.Add(new Ped(Bob.Handle));
                }
                BikerMissions.Guard = EntityBuild.NPCSpawn(ReturnStuff.BikerPeds(BikerMissions.Buissness.PedNum, true, 1, 113, 23), BikerMissions.InBis[BikerMissions.InBis.Count - 1]);
            }
            else
            {
                for (int i = 1; i < BikerMissions.InBis.Count; i++)
                    EntityBuild.NPCSpawn(new PedFeat(ReturnStuff.RandNPC(4), true, 220, 23, 0, null, 3, true, 1, DataStore.MyLang.Maptext[113]), BikerMissions.InBis[i]);
            }
        }
        private void BikerRaids_AddAwards()
        {
            LoggerLight.LogThis("BikerRaids_AddAwards");

            if (BikerMissions.Task == 1)
                DataStore.MyAchivments.BikerRaids_TheWheelsOnTheBus++;//Deliver the bus to the clubhouse

            else if (BikerMissions.Task == 3)
                DataStore.MyAchivments.BikerRaids_ButItsNotABike++; //Deliver the slamvan to the clubhouse

            if (MissionData.iUltPed01 > DataStore.MyAchivments.BikerRaids_DukeItOut)
                DataStore.MyAchivments.BikerRaids_DukeItOut = MissionData.iUltPed01;    //Kill 20+ Bikers
        }
        private static AchList BikerRaids_Awards(int cashtotal, bool bCash)
        {
            AchList MyAss = new AchList(17);

            MyAss.Medal = 3;
            int iPer = 0;
            int iTotals = ReturnStuff.SuperList.Count + ReturnStuff.SportList.Count + ReturnStuff.CoupeList.Count + ReturnStuff.MuscleList.Count + ReturnStuff.SportClassList.Count + ReturnStuff.SedanList.Count + ReturnStuff.SUVList.Count + ReturnStuff.CompactList.Count + ReturnStuff.OffRoadList.Count + ReturnStuff.MotorBikeList.Count;


            if (DataStore.MyAchivments.BikerRaids_TheWheelsOnTheBus > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[331], DataStore.MyLang.Othertext[332], "", 1));
                iPer += 30;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[331], DataStore.MyLang.Othertext[332], "", 0));
            }

            if (DataStore.MyAchivments.BikerRaids_ButItsNotABike > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[333], DataStore.MyLang.Othertext[334], "", 1));
                iPer += 30;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[333], DataStore.MyLang.Othertext[334], "", 0));
            }

            if (DataStore.MyAchivments.BikerRaids_DukeItOut > 19)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[335], DataStore.MyLang.Othertext[336], DataStore.MyAchivments.BikerRaids_DukeItOut + "/20", 1));
                iPer += 40;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[335], DataStore.MyLang.Othertext[336], DataStore.MyAchivments.BikerRaids_DukeItOut + "/20", 0));
            }

            if (bCash)
            {
                MyAss.Cash = cashtotal;
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[53], "", "$" + ReturnStuff.ShowComs(MyAss.Cash, true, false), 3));
            }

            if (iPer > 99)
                MyAss.Medal = 1;
            else if (iPer > 50)
                MyAss.Medal = 2;
            MyAss.Percent = iPer;
            return MyAss;
        }
        private void CargoCollect_LoadHood()
        {
            LoggerLight.LogThis("CargoCollect_LoadHood");

            int iAm = RandomX.RandInt(1, 50);
            for (int i = 1; i < CargoMissions.Enemys.Count; i++)
                EntityBuild.NPCSpawn(new PedFeat("", false, 220, 19, 0, null, 0, true, 1, DataStore.MyLang.Maptext[113]), CargoMissions.Enemys[i]);
        }
        private void CargoCollect_Suprise()
        {
            LoggerLight.LogThis("CargoCollect_Suprise");

            for (int i = 0; i < MissionData.PedList_01.Count; i++)
                EntityLog.CleanUp(MissionData.PedList_01[i], false);
            MissionData.PedList_01.Clear();

            if (CargoMissions.iSuprise == 1)
            {
                SearchFor.MakeCarz.Add(new FindVeh(35.00f, 150.00f, new VehMods(ReturnStuff.AddRandomVeh(18), 8, 1, false, DataStore.MyLang.Maptext[20], false, true, ReturnStuff.FunPlates()), true));
                SearchFor.MakeCarz.Add(new FindVeh(35.00f, 150.00f, new VehMods(ReturnStuff.AddRandomVeh(18), 8, 1, false, DataStore.MyLang.Maptext[20], false, true, ReturnStuff.FunPlates()), true));
                CargoMissions.CashPay += 4000;
            }            // Arena vehicle chase
            else if (CargoMissions.iSuprise == 2)
            {
                EntityBuild.AddDogFighters(3);
                CargoMissions.CashPay += 15000;
            }       // Hydra attack
            else if (CargoMissions.iSuprise == 3)
            {
                Vector3 NewV = (Game.Player.Character.Position) - (Game.Player.Character.ForwardVector * 500);
                NewV.Z = NewV.Z + 500.00f;
                Vehicle Vehic = EntityBuild.VehicleSpawn(new VehMods(ReturnStuff.AddRandomVeh(25), 17, 1, false, DataStore.MyLang.Maptext[20]), NewV, Game.Player.Character.Heading);
                CargoMissions.CashPay += 12000;
            }       // helli attack -- Make it work
            else if (CargoMissions.iSuprise == 4)
            {
                int iCountEm = RandomX.RandInt(5, 10);
                for (int i = 0; i < iCountEm; i++)
                {
                    SearchFor.MakeFrenz.Add(new FindPed(1.00f, 75.00f, new PedFeat("", false, 220, 34, 0, null, 10, true, 1, "", 2)));
                }
                CargoMissions.CashPay += 10000;
            }       // Green Suit Mele Attack 
            else
            {
                CargoMissions.CashPay += 1000;
            }                                // No attacks
        }
        private void CargoCollect_AddWares(int iUnit)
        {
            List<Vector4> PutHere = new List<Vector4>
            {
                new Vector4(945.961f, -3237.447f, -99.170f,-88.798f),
                new Vector4(939.546f, -3226.140f, -99.163f, -178.076f),
                new Vector4(939.523f, -3203.5f, -99.040f, -161.560f),
                new Vector4(918.091f, -3200.326f, -99.135f, 179.626f),
                new Vector4(934.788f, -3204.136f, -99.140f, 7.684f),
                new Vector4(928.272f, -3224.411f, -99.156f, 141.378f)
            };
            CargoMissions.ForkLift = EntityBuild.VehicleSpawn(new VehMods("Forklift", 0, 3, false, DataStore.MyLang.Maptext[12]), CargoMissions.ForkIt);
            CargoMissions.ForkLift.IsInvincible = true;
            if (iUnit == 3)
            {
                CargoMissions.Truck = EntityBuild.VehicleSpawn(new VehMods("SANDKING2", 0, false, true, ReturnStuff.FunPlates()), CargoMissions.Buissness.ParkHere);
                int iBe = CargoMissions.Pallets[RandomX.RandInt(0, CargoMissions.Pallets.Count - 1)];
                Prop Replace = MissionData.PropList_01[iBe];
                Vector4 Here = new Vector4(Replace.Position.X, Replace.Position.Y, Replace.Position.Z, Replace.Heading + 90f);
                Replace.Delete(); MissionData.PropList_01.Remove(Replace);
                CargoMissions.BluePallet = EntityBuild.BuildProp(CargoMissions.sItem, Here, true, false);
                CargoMissions.CashPay += 1000;
            }
            else if (iUnit == 2)
            {
                CargoMissions.Truck = EntityBuild.VehicleSpawn(new VehMods("SANDKING2", 0, false, true, ReturnStuff.FunPlates()), CargoMissions.Buissness.ParkHere);
                Prop Replace = MissionData.PropList_01[RandomX.FindRandomList("LargePall_02", CargoMissions.Pallets)];
                Vector4 Here = new Vector4(Replace.Position.X, Replace.Position.Y, Replace.Position.Z, Replace.Heading + 90f);
                Replace.Delete(); MissionData.PropList_01.Remove(Replace);
                CargoMissions.BluePallet = EntityBuild.BuildProp(CargoMissions.sItem, Here, true, false);
                CargoMissions.CashPay += 750;
            }
            else if (iUnit == 1)
            {
                CargoMissions.Truck = EntityBuild.VehicleSpawn(new VehMods("SANDKING2", 0, false, true, ReturnStuff.FunPlates()), CargoMissions.Buissness.ParkHere);
                Prop Replace = MissionData.PropList_01[RandomX.FindRandomList("LargePall_03", CargoMissions.Pallets)];
                Vector4 Here = new Vector4(Replace.Position.X, Replace.Position.Y, Replace.Position.Z, Replace.Heading + 90f);
                Replace.Delete(); MissionData.PropList_01.Remove(Replace);
                CargoMissions.BluePallet = EntityBuild.BuildProp(CargoMissions.sItem, Here, true, false);
                CargoMissions.CashPay += 500;
            }
            else
            {
                CargoMissions.Truck = EntityBuild.VehicleSpawn(new VehMods("SANDKING2", 0, -1, false, "", false, true, ReturnStuff.FunPlates()), new Vector4(837.8329f, -3237.161f, -98.91f, 76.10f));
                EntityBuild.VehicleSpawn(new VehMods("Caddy3"), new Vector4(867.67688f, -3247.6582f, -98.906f, 0.337f));
                EntityBuild.VehicleSpawn(new VehMods("Caddy2"), new Vector4(869.85f, -3247.40f, -98.8944f, -0.528f));
                Vector4 Here = PutHere[RandomX.FindRandom("CargoaAdW01", 0, PutHere.Count - 1)];
                CargoMissions.BluePallet = EntityBuild.BuildProp(CargoMissions.sItem, Here, true, false);
                CargoMissions.CashPay += 5000;
            }
            CargoMissions.Truck.OpenDoor(VehicleDoor.Trunk, false, true);
        }
        private void CargoCollect_AddAwards()
        {
            LoggerLight.LogThis("CargoCollect_AddAwards");
            if (CargoMissions.Buissness.PedNum == 1)
                DataStore.MyAchivments.CargoTrackingWhSm++;
            else if (CargoMissions.Buissness.PedNum == 2)
                DataStore.MyAchivments.CargoTrackingWhMd++;
            else if (CargoMissions.Buissness.PedNum == 3)
                DataStore.MyAchivments.CargoTrackingWhLg++;
            else if (CargoMissions.Buissness.PedNum == 4)
                DataStore.MyAchivments.CargoTrackingWhBu++;

            if (CargoMissions.iTem == 0)
                DataStore.MyAchivments.CargoTrackingPl01++;
            else if (CargoMissions.iTem == 1)
                DataStore.MyAchivments.CargoTrackingPl02++;
            else if (CargoMissions.iTem == 2)
                DataStore.MyAchivments.CargoTrackingPl03++;
            else if (CargoMissions.iTem == 3)
                DataStore.MyAchivments.CargoTrackingPl04++;
            else if (CargoMissions.iTem == 4)
                DataStore.MyAchivments.CargoTrackingPl05++;
            else
                DataStore.MyAchivments.CargoTrackingPl06++;

            if (DataStore.MyAchivments.CargoTrackingWhSm > 0 && DataStore.MyAchivments.CargoTrackingWhMd > 0 && DataStore.MyAchivments.CargoTrackingWhLg > 0 && DataStore.MyAchivments.CargoTrackingWhBu > 0)
                DataStore.MyAchivments.CargoCollect_BigAndSmalll++;  //Collect from all sizes of warehouse and bunker.
            if (CargoMissions.Enemys.Count < MissionData.iUltPed01)
                DataStore.MyAchivments.CargoCollect_NoYouCantHaveItBack++;//Dispatch your persuers
            if (DataStore.MyAchivments.CargoTrackingPl01 > 0 && DataStore.MyAchivments.CargoTrackingPl02 > 0 && DataStore.MyAchivments.CargoTrackingPl03 > 0 && DataStore.MyAchivments.CargoTrackingPl04 > 0 && DataStore.MyAchivments.CargoTrackingPl05 > 0 && DataStore.MyAchivments.CargoTrackingPl06 > 0)
                DataStore.MyAchivments.CargoCollect_CollectAlTheGoods++;//Get 1+ each pallet.
        }
        private static AchList CargoCollect_Awards(int cashtotal, bool bCash)
        {
            AchList MyAss = new AchList(18);

            MyAss.Medal = 3;
            int iPer = 0;

            if (DataStore.MyAchivments.CargoCollect_BigAndSmalll > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[351], DataStore.MyLang.Othertext[352], "", 1));
                iPer += 25;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[351], DataStore.MyLang.Othertext[352], "", 0));
            }

            if (DataStore.MyAchivments.CargoCollect_NoYouCantHaveItBack > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[353], DataStore.MyLang.Othertext[354], "", 1));
                iPer += 25;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[353], DataStore.MyLang.Othertext[354], "", 0));
            }

            if (DataStore.MyAchivments.CargoCollect_CollectAlTheGoods > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[355], DataStore.MyLang.Othertext[356], "", 1));
                iPer += 25;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[355], DataStore.MyLang.Othertext[356], "", 0));
            }

            if (bCash)
            {
                MyAss.Cash = cashtotal;
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[53], "", "$" + ReturnStuff.ShowComs(MyAss.Cash, true, false), 3));
            }

            if (iPer > 99)
                MyAss.Medal = 1;
            else if (iPer > 50)
                MyAss.Medal = 2;
            MyAss.Percent = iPer;
            return MyAss;
        }
        private void DeepDown_Addfish()
        {
            LoggerLight.LogThis("DeepDown_Addfish");

            Vector3 FishStack = SharkMissions.Sharky.Target;
            int iFish = RandomX.RandInt(8, 15);
            SharkMissions.CashPay = iFish * 500;
            for (int i = 0; i < iFish; i++)
            {
                FishStack.Z = FishStack.Z + 0.50f;
                if (RandomX.FindRandom("SharkFish01", 1, 4) > 2)
                    FishStack.Y = FishStack.Y + 0.50f;
                else
                    FishStack.X = FishStack.X + 0.50f;

                EntityBuild.NPCSpawn(new PedFeat("a_c_sharktiger", false, 400, 28, 0, null, 2, true, 1, DataStore.MyLang.Maptext[114]), FishStack, 0.00f);
            }
        }
        private void DeepDown_SwimtoBarrel()
        {
            for (int i = 0; i < MissionData.PedList_01.Count; i++)
            {
                if (MissionData.PedList_01[i].IsDead)
                {
                    MissionData.PedList_01[i].CurrentBlip.Remove();
                    MissionData.PedList_01[i].MarkAsNoLongerNeeded();
                    MissionData.PedList_01.RemoveAt(i);
                }
                else if (MissionData.PropList_01.Count > 0)
                {
                    MissionData.PedList_01[i].Task.ClearAll();
                    MissionData.PedList_01[i].Task.GoTo(MissionData.PropList_01[0].Position, true);
                }
                else if (ReturnStuff.AreUFar(MissionData.PedList_01[i].Position, SharkMissions.Sharky.Target, 85f))
                {
                    MissionData.PedList_01[i].Task.ClearAll();
                    MissionData.PedList_01[i].Task.GoTo(SharkMissions.Sharky.Target, true);
                }
                else
                {
                    MissionData.PedList_01[i].Task.ClearAll();
                    MissionData.PedList_01[i].Task.FleeFrom(Game.Player.Character);
                }
            }
        }
        private void DeepDown_DropBomb()
        {
            LoggerLight.LogThis("DeepDown_DropBomb");

            while (Game.IsControlPressed(2, GTA.Control.Context))
                Script.Wait(1);
            EntityBuild.BuildProp("prop_barrel_02b", new Vector3(SharkMissions.Sub.Position.X, SharkMissions.Sub.Position.Y, SharkMissions.Sub.Position.Z - 2.75f), Vector3.Zero, false, true);
            SharkMissions.BombsAway = true;
        }
        private void DeepDown_AddAwards()
        {
            LoggerLight.LogThis("DeepDown_AddAwards");

            SharkMissions.TotalTime -= Game.GameTime;
            SharkMissions.TotalTime *= -1;

            if (DataStore.MyAchivments.DeepDown_SharkCards == 0)
                DataStore.MyAchivments.DeepDown_SharkCards = SharkMissions.TotalTime;
            else if (SharkMissions.TotalTime < DataStore.MyAchivments.DeepDown_SharkCards)
                DataStore.MyAchivments.DeepDown_SharkCards = SharkMissions.TotalTime;
        }
        private static AchList DeepDown_Awards(int cashtotal, bool bCash)
        {
            AchList MyAss = new AchList(19);

            MyAss.Medal = 3;
            int iPer = 0;

            if (DataStore.MyAchivments.DeepDown_SharkCards < 301000 && DataStore.MyAchivments.DeepDown_SharkCards != 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[337], DataStore.MyLang.Othertext[338], ReturnStuff.ShowComs(DataStore.MyAchivments.DeepDown_SharkCards, false, false) + "/5:00", 1));
                iPer += 50;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[337], DataStore.MyLang.Othertext[338], ReturnStuff.ShowComs(DataStore.MyAchivments.DeepDown_SharkCards, false, false) + "/5:00", 0));
            }

            if (DataStore.MyAchivments.DeepDown_DasBoot > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[339], DataStore.MyLang.Othertext[340], "", 1));
                iPer += 50;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[339], DataStore.MyLang.Othertext[340], "", 0));
            }

            if (bCash)
            {
                MyAss.Cash = cashtotal;
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[53], "", "$" + ReturnStuff.ShowComs(MyAss.Cash, true, false),3));
            }

            if (iPer > 99)
                MyAss.Medal = 1;
            else if (iPer > 50)
                MyAss.Medal = 2;
            MyAss.Percent = iPer;
            return MyAss;
        }
        public float HappyShopper_DAmmagedGoods()
        {
            float fDam = 0.00f;
            List<string> Empty = new List<string>();

            List<Entity> shopBop = SearchFor.GetLocalEntity(HappySMissions.Buissness.PedHere.V3, 7.00f);

            for (int i = 0; i < shopBop.Count(); i++)
            {
                if (Function.Call<bool>(Hash.IS_ENTITY_A_PED, shopBop[i].Handle))
                {
                    if (shopBop[i].IsDead)
                        JobSeq = 45;
                }
                else if (Function.Call<bool>(Hash.HAS_ENTITY_BEEN_DAMAGED_BY_ANY_PED, shopBop[i].Handle) && !HappySMissions.iSBroke.Contains(shopBop[i].Handle))
                {
                    HappySMissions.iSBroke.Add(shopBop[i].Handle);
                    HappySMissions.iDamage++;
                    if (ReturnStuff.HittingTheBottle(shopBop[i].Model.Hash))
                        DataStore.MyAchivments.HappyShopper_IsABadHabit++;
                }
            }

            if (HappySMissions.iDamage > 13)
                fDam = 1.00f;
            else
                fDam = (float)HappySMissions.iDamage / 13.00f;
            //put back to 15 if this dont make it easyer.
            return fDam;
        }
        private void HappyShopper_AddAwards()
        {
            LoggerLight.LogThis("HappyShopper_AddAwards");

            HappySMissions.iTimes -= Game.GameTime;
            HappySMissions.iTimes *= -1;

            if (DataStore.MyAchivments.HappyShopper_SuperMarketSweep == 0)
                DataStore.MyAchivments.HappyShopper_SuperMarketSweep = HappySMissions.iTimes;
            else if (HappySMissions.iTimes < DataStore.MyAchivments.HappyShopper_SuperMarketSweep)
                DataStore.MyAchivments.HappyShopper_SuperMarketSweep = HappySMissions.iTimes;
        }
        private static AchList HappyShopper_Awards(int cashtotal, bool bCash)
        {
            AchList MyAss = new AchList(20);

            MyAss.Medal = 3;
            int iPer = 0;

            if (DataStore.MyAchivments.HappyShopper_SuperMarketSweep < 61000 && DataStore.MyAchivments.HappyShopper_SuperMarketSweep != 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[341], DataStore.MyLang.Othertext[342], ReturnStuff.ShowComs(DataStore.MyAchivments.HappyShopper_SuperMarketSweep, false, false)  + "/1:00", 1));
                iPer += 50;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[341], DataStore.MyLang.Othertext[342], ReturnStuff.ShowComs(DataStore.MyAchivments.HappyShopper_SuperMarketSweep, false, false) + "/1:00", 0));
            }

            if (DataStore.MyAchivments.HappyShopper_IsABadHabit > 99)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[345], DataStore.MyLang.Othertext[346], DataStore.MyAchivments.HappyShopper_IsABadHabit + "/100", 1));
                iPer += 50;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[345], DataStore.MyLang.Othertext[346], DataStore.MyAchivments.HappyShopper_IsABadHabit + "/100", 0));
            }

            if (bCash)
            {
                MyAss.Cash = cashtotal;
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[53], "", "$" + ReturnStuff.ShowComs(MyAss.Cash, true, false), 3));
            }

            if (iPer > 99)
                MyAss.Medal = 1;
            else if (iPer > 50)
                MyAss.Medal = 2;
            MyAss.Percent = iPer;
            return MyAss;
        }
        public float MoresMuted_DAmmagedGoods(Vehicle MyBMW)
        {
            LoggerLight.LogThis("MoresMuted_DAmmagedGoods");

            int iDamU = 1000 - MyBMW.Health;
            float fDam = 0.00f;

            if (iDamU > 100)
                fDam = 1.00f;
            else
            {
                fDam = (float)iDamU / 100;
            }
            return fDam;
        }
        private void MoresMuted_AddAwards()
        {
            LoggerLight.LogThis("MoresMuted_AddAwards");

            if (MoresMissions.ParkingFine < 5f)
                DataStore.MyAchivments.MoresMuted_PerfectParking++;     //max parking set

            if (UiDisplay.SideBars[0].Percent > .9f)
                DataStore.MyAchivments.MoresMuted_NotAScratch++;       //no damage
        }
        private static AchList MoresMuted_Awards(int cashtotal, bool bCash)
        {
            AchList MyAss = new AchList(21);

            MyAss.Medal = 3;
            int iPer = 0;

            if (DataStore.MyAchivments.MoresMuted_PerfectParking > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[347], DataStore.MyLang.Othertext[348], "", 1));
                iPer += 50;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[347], DataStore.MyLang.Othertext[348], "", 0));
            }

            if (DataStore.MyAchivments.MoresMuted_NotAScratch > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[349], DataStore.MyLang.Othertext[350], "", 1));
                iPer += 50;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[349], DataStore.MyLang.Othertext[350], "", 0));
            }

            if (bCash)
            {
                MyAss.Cash = cashtotal;
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[53], "", "$" + ReturnStuff.ShowComs(MyAss.Cash, true, false),3));
            }

            if (iPer > 99)
                MyAss.Medal = 1;
            else if (iPer > 50)
                MyAss.Medal = 2;
            MyAss.Percent = iPer;
            return MyAss;
        }
        private void TempAgency_01_ChaseTheBall(Ped peddy, Vehicle Vhick)
        {
            if (peddy.IsDead)
                JobSeq = 45;
            else
                Function.Call(Hash._TASK_VEHICLE_FOLLOW, peddy.Handle, Vhick.Handle, Temp01Missions.Football.Handle, 40.00f, 0, 1);
        }
        private void TempAgency_01_FormationNGate()
        {
            LoggerLight.LogThis("TempAgency_01_FormationNGate");

            Vector3 Vbe = new Vector3(-2151.073f, 1105.916f, 28.08027f);

            for (int i = 0; i < MissionData.VehicleList_01.Count(); i++)
            {
                if (Temp01Missions.Prize == MissionData.VehicleList_01[i])
                {

                }
                else if (Game.Player.Character.CurrentVehicle != MissionData.VehicleList_01[i])
                {
                    EntityBuild.WarptoAnyVeh(MissionData.VehicleList_01[i], MissionData.PedList_01[i], 1);
                    MissionData.PedList_01[i].CanBeDraggedOutOfVehicle = false;
                    MissionData.PedList_01[i].BlockPermanentEvents = true;
                }
                else
                {
                    if (i < 5)
                        Temp01Missions.bReds = true;
                }
            }
            TempAgency_01_Formation();
        }
        private void TempAgency_01_Formation()
        {
            LoggerLight.LogThis("TempAgency_01_Formation");
            Game.FadeScreenOut(1000);
            Script.Wait(900);
            for (int i = 0; i < MissionData.VehicleList_01.Count() - 1; i++)
            {
                EntityBuild.ResetVehPos(MissionData.VehicleList_01[i], Temp01Missions.Formation[i]);
                MissionData.VehicleList_01[i].FreezePosition = true;
            }

            Game.FadeScreenIn(1000);

            if (Temp01Missions.Goal)
            {
                Temp01Missions.Goal = false;
                UiDisplay.CountDownDisplay(false);
            }
            Temp01Missions.Football.Position = Temp01Missions.KickOff;

            for (int i = 0; i < MissionData.VehicleList_01.Count(); i++)
            {
                MissionData.VehicleList_01[i].FreezePosition = false;

                if (Temp01Missions.Prize == MissionData.VehicleList_01[i])
                {

                }
                else if (Game.Player.Character.CurrentVehicle != MissionData.VehicleList_01[i])
                {
                    if (!MissionData.PedList_01[i].IsInVehicle())
                        EntityBuild.WarptoAnyVeh(MissionData.VehicleList_01[i], MissionData.PedList_01[i], 1);

                    TempAgency_01_ChaseTheBall(MissionData.PedList_01[i], MissionData.VehicleList_01[i]);
                }
            }

            if (Temp01Missions.bReds)
                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[187];
            else
                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[188];

            UiDisplay.SideBars[0].Data = "" + Temp01Missions.iReds + "/" + Temp01Missions.iBlues + "";
        }
        private void TempAgency_01_LoadInShit()
        {
            LoggerLight.LogThis("TempAgency_01_LoadInShit");

            int iFive = 10;
            for (int i = 0; i < 10; i++)
            {
                if (iFive > 5)
                {
                    int iPos = RandomX.RandInt(0, Temp01Missions.CarPool.Count - 1);
                    Vector4 Vpos = Temp01Missions.CarPool[iPos];
                    Temp01Missions.CarPool.RemoveAt(iPos);
                    EntityBuild.VehicleSpawn(new VehMods("BRIOSO", 0, -1, false, "", false, true, 30, 131, -10, "Reds"), Vpos);
                }
                else
                {
                    int iPos = RandomX.RandInt(0, Temp01Missions.CarPool.Count - 1);
                    Vector4 Vpos = Temp01Missions.CarPool[iPos];
                    Temp01Missions.CarPool.RemoveAt(iPos);
                    EntityBuild.VehicleSpawn(new VehMods("PANTO", 0, -1, false, "", false, true, 62, 42, -10, "Blues"), Vpos);
                }
                iFive--;
            }
            Temp01Missions.Prize = EntityBuild.VehicleSpawn(new VehMods("ellie", 1), new Vector3(-2160.837f, 1136.845f, 28.65855f), 39.86842f);
            Temp01Missions.Prize.LockStatus = VehicleLockStatus.Locked;

            List<Vector3> CS1 = new List<Vector3>
            {
                new Vector3(-2206.477f, 1086.386f, 29.7719f),
                new Vector3(-2193.382f, 1087.739f, 29.77167f),
                new Vector3(-2188.012f, 1111.267f, 29.77104f),
                new Vector3(-2199.195f, 1125.646f, 29.77118f),
                new Vector3(-2192.204f, 1137.694f, 29.77069f),
                new Vector3(-2172.278f, 1143.476f, 28.6576f),
                new Vector3(-2164.511f, 1137.581f, 28.65852f),
                new Vector3(-2163.507f, 1135.108f, 28.65858f),
                new Vector3(-2161.861f, 1133.732f, 28.6586f),
                new Vector3(-2158.448f, 1134.506f, 28.6586f),
                new Vector3(-2145.184f, 1129.888f, 28.65871f),
                new Vector3(-2142.997f, 1153.408f, 28.65845f),
                new Vector3(-2142.765f, 1157.401f, 28.65796f),
                new Vector3(-2154.892f, 1118.25f, 28.65905f),
                new Vector3(-2154.965f, 1098.543f, 28.66558f),
                new Vector3(-2150.392f, 1088.793f, 28.66665f),
                new Vector3(-2153.834f, 1086.511f, 28.66689f),
                new Vector3(-2176.19f, 1098.916f, 28.66524f),
                new Vector3(-2168.064f, 1124.208f, 28.65883f),
                new Vector3(-2168.392f, 1117.993f, 28.65904f)
            };

            for (int i = 0; i < CS1.Count; i++)
                EntityBuild.NPCSpawn(new PedFeat(ReturnStuff.RandNPC(50), 26), CS1[i], 0.00f);


            for (int i = 0; i < MissionData.CarBallProps.Count; i++)
                EntityBuild.BuildProp(MissionData.CarBallProps[i], true, true);
        }
        private void TempAgency_01_AddGoal()
        {
            LoggerLight.LogThis("LsUnderground_AddGoal");
            EntityBuild.AddBlips(new BlipForm(new Vector3(-1861.727f, 1098.592f, 25.65174f), false, 38, -1, ""));
            EntityBuild.AddBlips(new BlipForm(new Vector3(-2109.57f, 1098.406f, 25.66548f), false, 1, -1, ""));
        }
        private void TempAgency_01_ExitWithCar(bool bFail)
        {
            LoggerLight.LogThis("TempAgency_01_ExitWithCar, bFail == " + bFail);
            Temp01Missions.Prize.LockStatus = VehicleLockStatus.Unlocked;
            if (Temp01Missions.iReds > Temp01Missions.iBlues)
                Temp01Missions.Prize.PrimaryColor = VehicleColor.MetallicBlazeRed;
            else
                Temp01Missions.Prize.PrimaryColor = VehicleColor.MetaillicVDarkBlue;
            if (!bFail)
                EntityBuild.WarptoAnyVeh(Temp01Missions.Prize, Game.Player.Character, 1);
            EntityBuild.ResetVehPos(Game.Player.Character.CurrentVehicle, Temp01Missions.Exit);

            int iPay = 0;
            if (!bFail)
                iPay = 10000;
            else
                iPay = 50;

            if (bFail)
                GameOverFail(false);
            else
            {
                DataStore.MyAchivments.Temp01_OwnGoal++;                //win at carball
                MissionEnd(TempAgency_Awards(iPay,true));
            }
        }
        public bool TempAgency_01_BallTracking(Prop Ball)
        {
            bool bBall = false;

            if (Ball.Position.X > -1865.00f)
            {
                if (Ball.Position.Y > 1088.00f && Ball.Position.Y < 1110.00f)
                {
                    Temp01Missions.iReds++;
                    Temp01Missions.Goal = true;
                }
                bBall = true;
            }
            else if (Ball.Position.X < -2106.00f)
            {
                if (Ball.Position.Y > 1088.00f && Ball.Position.Y < 1110.00f)
                {
                    Temp01Missions.iBlues++;
                    Temp01Missions.Goal = true;
                }
                bBall = true;
            }
            else if (Ball.Position.Y < 1035.00f)
                bBall = true;
            else if (Ball.Position.Y > 1161.00f)
                bBall = true;

            return bBall;
        }
        public static void TempAgency_02_BuildCluber(Ped Peddy)
        {
            PedMultiTask MyCluber = new PedMultiTask(Peddy, null, -1);
            MultiPed.Add(MyCluber);
        }
        private void TempAgency_02_BarStools()
        {
            List<string> Junk = new List<string> { "prop_bin_11a", "ba_prop_int_stool_low", "ba_prop_int_edgy_stool", "ba_prop_int_glam_stool" };
            List<Prop> barJunk = SearchFor.GetLocalProps(new Vector3(-1583.90735f, -3009.52295f, -77.0045547f), 35f, Junk);
            for (int i = 0; i < barJunk.Count; i++)
            {
                Prop prop = barJunk[i];
                if (prop.Position.DistanceTo(new Vector3(-1583.90735f, -3009.52295f, -77.0045547f)) < 2f)
                    prop.Delete();
                else
                {
                    for (int ii = 0; ii < Temp02Missions.BarstandPed.Count; ii++)
                    {
                        if (prop.Position.DistanceTo(Temp02Missions.BarstandPed[ii].V3) < 2f)
                            prop.Delete();
                    }
                }
            }
        }
        private void TempAgency_02_FillClub(bool tempLoad)
        {
            LoggerLight.LogThis("LsUnderground_ClubInt");


            List<Vector3> Pos_01 = new List<Vector3>
            {
                new Vector3(-1589.448f, -3007.774f, -76.00503f),
                new Vector3(-1589.441f, -3012.488f, -76.00503f),
                new Vector3(-1589.421f, -3017.055f, -76.00503f),
                new Vector3(-1595.595f, -3005.779f, -76.00503f),
                new Vector3(-1595.984f, -3001.398f, -75.80518f),
                new Vector3(-1599.507f, -3001.861f, -75.80518f),
                new Vector3(-1600.377f, -3005.892f, -76.00495f),
                new Vector3(-1578.162f, -3013.235f, -79.00596f),
                new Vector3(-1589.306f, -3016.852f, -79.00603f),
                new Vector3(-1589.601f, -3012.639f, -79.00603f)
            };
            List<Vector4> Pos_02 = new List<Vector4>
            {
                new Vector4(-1603.001f, -3012.568f, -77.81246f, 274.2069f),
                new Vector4(-1605.922f, -3011.58f, -77.813f, 217.6719f),
                new Vector4(-1606.194f, -3014.047f, -77.81195f, 316.5241f),
                new Vector4(-1612.174f, -3006.897f, -75.21956f, 302.9684f),
                new Vector4(-1609.34f, -3006.435f, -75.20525f, 81.30991f),
                new Vector4(-1622.524f, -3012.216f, -75.20502f, 63.60439f),
                new Vector4(-1609.007f, -3011.89f, -75.20503f, 266.7303f),
                new Vector4(-1608.683f, -3018.384f, -75.20503f, 351.4129f),
                new Vector4(-1612.251f, -3018.103f, -75.20503f, 297.631f),
                new Vector4(-1638.073f, -3005.74f, -78.14367f, 321.8897f),
                new Vector4(-1632.429f, -3003.553f, -78.14367f, 96.29626f),
                new Vector4(-1633.056f, -2997.56f, -78.14368f, 51.76125f),
                new Vector4(-1610.975f, -2999.991f, -78.00607f, 335.8739f),
                new Vector4(-1611.793f, -2997.942f, -78.00607f, 200.2712f),
                new Vector4(-1609.336f, -3016.917f, -79.00594f, 270.7515f),
                new Vector4(-1611.817f, -3010.424f, -79.00594f, 252.4654f)
            };

            Vector3 Myspot = new Vector3(-1572.162f, -3012.955f, -74.40617f); float Mdir = 271.7298f;
            EntityBuild.NPCSpawn(new PedFeat("s_f_y_clubbar_02", 26), Myspot, Mdir);

            Myspot = new Vector3(-1577.193f, -3017.406f, -79.00587f); Mdir = 14.77673f;
            EntityBuild.NPCSpawn(new PedFeat("s_f_y_clubbar_02", 26), Myspot, Mdir);

            for (int i = 0; i < Pos_01.Count; i++)
            {
                int iRand = RandomX.RandInt(2, 3);
                if (World.CurrentDate.DayOfWeek == DayOfWeek.Friday || World.CurrentDate.DayOfWeek == DayOfWeek.Saturday)
                    iRand = iRand * 2;

                while (iRand > 0)
                {
                    Vector3 VPedPos = Pos_01[i].Around(2.00f);
                    VPedPos.Z = Pos_01[i].Z;
                    if (RandomX.FindRandom("Temp02Load", 1, 10) < 9)
                        EntityBuild.NPCSpawn(new PedFeat(ReturnStuff.RandNPC(37), 28), VPedPos, RandomX.RandInt(0, 360));
                    else
                        EntityBuild.NPCSpawn(new PedFeat("", false, 150, 28, 0), VPedPos, RandomX.RandInt(0, 360));

                    iRand--;
                }
            }

            int iRand2 = RandomX.RandInt(13, 18);
            if (World.CurrentDate.DayOfWeek == DayOfWeek.Friday || World.CurrentDate.DayOfWeek == DayOfWeek.Saturday)
                iRand2 = iRand2 * 2;
            Vector3 DancFloored = new Vector3(-1596.159f, -3013.074f, -79.00603f);
            while (iRand2 > 0)
            {
                Vector3 VPedPos = DancFloored.Around(4.50f);
                EntityBuild.NPCSpawn(new PedFeat(ReturnStuff.RandNPC(37), 28), VPedPos, RandomX.RandInt(0, 360));
                iRand2--;
            }

            List<Vector4> Bouncers = new List<Vector4>
            {
                new Vector4(-1610.426f, -2998.037f, -79.00599f,135.2245f),
                new Vector4(-1609.814f, -2999.876f, -79.00599f,81.68466f),
                new Vector4(-1612.359f, -2997.706f, -79.00599f,215.9869f),
                new Vector4(-1603.596f, -3006.15f, -77.00497f,271.7049f),
                new Vector4(-1604.874f, -3017.468f, -79.40477f,270.0359f),
                new Vector4(-1590.409f, -3018.858f, -80.00601f,10.92452f),
                new Vector4(-1575.277f, -3007.495f, -80.00595f,100.0471f),
                new Vector4(-1591.086f, -3012.034f, -80.00499f,87.81898f)
            };
            for (int i = 1; i < Bouncers.Count; i++)
            {
                Ped PMe = EntityBuild.NPCSpawn(new PedFeat("s_m_m_bouncer_01", 27), Bouncers[i]);
                if (tempLoad)
                    Temp02Missions.Brusers.Add(new Ped(PMe.Handle));
            }
        }
        private void TempAgency_02_CleanOutClub()
        {
            for (int i = 0; i < MultiPed.Count; i++)
            {
                if (MultiPed[i].MyTask_02 != -1)
                    Function.Call(Hash.DELETE_CHECKPOINT, MultiPed[i].MyTask_02);
            }
        }
        private void TempAgency_02_ClubberAi()
        {
            iWait4Sec = Game.GameTime + 1000;
            DanceMoves DancinFool;
            int iGetDrink = -1;

            if (RandomX.RandInt(0, 20) < 15 && Temp02Missions.AtTheBar)
                iGetDrink = RandomX.RandInt(0, MultiPed.Count - 1);

            if (Temp02Missions.BarHate > 0.95f)
            {
                TempAgency_02_CleanOutClub();
                float fMoreAnger = 0.00f;
                DataStore.MyAchivments.Temp02_Upsetter++;               //dont serve a customer
                Ped PAngry = null;
                for (int i = 0; i < MultiPed.Count; i++)
                {
                    if (MultiPed[i].MyFloat_01 > fMoreAnger)
                    {
                        fMoreAnger = MultiPed[i].MyFloat_01;
                        PAngry = MultiPed[i].MyPed;
                    }
                }
                MultiPed.Clear();
                EntityBuild.ArmsRegulator(PAngry, 4);
                EntityBuild.AttackThePlayer(PAngry, false, false, true);

                for (int i = 0; i < Temp02Missions.Brusers.Count; i++)
                    EntityBuild.FightingXPed(Temp02Missions.Brusers[i], PAngry);

                JobSeq = 40;
            }
            else
            {
                for (int i = 0; i < MultiPed.Count; i++)
                {
                    bool bMale = false;
                    int iRan = RandomX.RandInt(1, 3);

                    if (MultiPed[i].MySwitch_01)
                    {
                        if (MultiPed[i].MySwitch_02)
                        {
                            if (ReturnStuff.AreUNear(MultiPed[i].MyPed.Position, MultiPed[i].MyTarget_01, 3f))
                            {
                                MultiPed[i].MySwitch_01 = false;
                                MultiPed[i].MySwitch_02 = false;
                                MultiPed[i].MySwitch_03 = false;
                            }
                            else
                            {
                                if (MultiPed[i].MyTask_03 > 8)
                                {
                                    if (Function.Call<int>(Hash.GET_NAVMESH_ROUTE_RESULT, MultiPed[i].MyPed.Handle) != 3)
                                    {
                                        MultiPed[i].MySwitch_01 = false;
                                        MultiPed[i].MySwitch_02 = false;
                                        MultiPed[i].MySwitch_03 = false;
                                    }
                                }
                                else
                                {
                                    EntityBuild.WalkThisWay(MultiPed[i].MyPed, MultiPed[i].MyTarget_01, 1.00f);
                                    MultiPed[i].MyTask_03++;
                                }
                            }
                        }
                        else
                        {
                            if (ReturnStuff.AreUNear(Temp02Missions.BarstandPed[MultiPed[i].MyTask_01].V3, MultiPed[i].MyPed.Position, 1.5f))
                            {
                                if (ReturnStuff.AmINear(Temp02Missions.BarstandPlay[MultiPed[i].MyTask_01], 1.25f) && Temp02Missions.GetDrink)
                                {
                                    JobSeq++;
                                    Temp02Missions.GetDrink = false;
                                    Temp02Missions.BarHate -= MultiPed[i].MyFloat_01;
                                    MultiPed[i].MyFloat_01 = 0.00f;
                                    Function.Call(Hash.DELETE_CHECKPOINT, MultiPed[i].MyTask_02);
                                    MultiPed[i].MyTask_02 = -1;
                                    MultiPed[i].MyTask_03 = -1;
                                    MultiPed[i].MyPed.Task.AchieveHeading(Temp02Missions.BarstandPed[MultiPed[i].MyTask_01].R, -1);
                                    TempAgency_02_HaveADrink(Game.Player.Character, MultiPed[i].MyPed, Temp02Missions.BarstandPlay[MultiPed[i].MyTask_01], Temp02Missions.BarstandPed[MultiPed[i].MyTask_01]);
                                    EntityBuild.AddTarget(new BlipForm(Temp02Missions.Till, true, 5, 93, DataStore.MyLang.Maptext[74], 1f));
                                    Temp02Missions.BarFaults.Add(MultiPed[i].MyTask_01);
                                    MultiPed[i].MySwitch_02 = true;
                                    MultiPed[i].MyPed.Task.ClearAllImmediately();
                                    EntityBuild.WalkThisWay(MultiPed[i].MyPed, MultiPed[i].MyTarget_01, 1.00f);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[201];
                                }
                                else
                                {
                                    if (!MultiPed[i].MySwitch_03)
                                    {
                                        MultiPed[i].MySwitch_03 = true;
                                        MultiPed[i].MyTask_02 = EntityBuild.MyCorona(new CorronaForm(Temp02Missions.BarstandPlay[MultiPed[i].MyTask_01], true, 0.75f), false);
                                        Function.Call(Hash.TASK_TURN_PED_TO_FACE_ENTITY, MultiPed[i].MyPed.Handle, Game.Player.Character.Handle, -1);
                                    }
                                    Temp02Missions.BarHate += 0.01f;
                                    MultiPed[i].MyFloat_01 += 0.01f;
                                }
                            }
                            else
                            {
                                if (Function.Call<int>(Hash.GET_NAVMESH_ROUTE_RESULT, MultiPed[i].MyPed.Handle) != 3)
                                {
                                    if (MultiPed[i].MyTask_03 > 8)
                                    {
                                        MultiPed[i].MyPed.Task.ClearAll();
                                        Temp02Missions.BarFaults.Add(MultiPed[i].MyTask_01);
                                        Temp02Missions.BarHate -= MultiPed[i].MyFloat_01;
                                        MultiPed[i].MyFloat_01 = 0.00f;
                                        if (MultiPed[i].MyTask_02 != -1)
                                            Function.Call(Hash.DELETE_CHECKPOINT, MultiPed[i].MyTask_02);
                                        MultiPed[i].MyTask_02 = -1;
                                        MultiPed[i].MyPed.Task.ClearAllImmediately();
                                        EntityBuild.WalkThisWay(MultiPed[i].MyPed, MultiPed[i].MyTarget_01, 1.00f);
                                        MultiPed[i].MySwitch_02 = true;

                                    }
                                    else
                                    {
                                        EntityBuild.WalkThisWay(MultiPed[i].MyPed, Temp02Missions.BarstandPed[MultiPed[i].MyTask_01].V3, 1.00f);
                                        MultiPed[i].MyTask_03 += 1;
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        if (i == iGetDrink && Temp02Missions.BarFaults.Count > 0)
                        {
                            MultiPed[i].MyPed.Task.ClearAllImmediately();
                            MultiPed[i].MyTarget_01 = MultiPed[i].MyPed.Position;
                            int iQue = RandomX.RandInt(0, Temp02Missions.BarFaults.Count - 1);
                            MultiPed[i].MyTask_01 = Temp02Missions.BarFaults[iQue];
                            EntityBuild.WalkThisWay(MultiPed[i].MyPed, Temp02Missions.BarstandPed[MultiPed[i].MyTask_01].V3, 1.00f);
                            Temp02Missions.BarFaults.RemoveAt(iQue);
                            MultiPed[i].MySwitch_01 = true;
                            MultiPed[i].MyTask_03 = -1;
                        }
                        else if (MultiPed[i].MyPed.IsFleeing)
                            EntityBuild.WalkThisWay(MultiPed[i].MyPed, Temp02Missions.EnterClub.V3, 2.00f);
                        else if (ReturnStuff.AreUNear(Temp02Missions.EnterClub.V3, MultiPed[i].MyPed.Position, 2.5f))
                        {
                            MultiPed[i].MyPed.Position = Temp02Missions.ClubQ[0].V3;
                            MultiPed.RemoveAt(i);
                        }
                        else if (!Function.Call<bool>(Hash.GET_IS_TASK_ACTIVE, MultiPed[i].MyPed.Handle, 134))
                        {
                            MultiPed[i].MyPed.Task.ClearAll();

                            if (MultiPed[i].MyPed.Gender == Gender.Male)
                                bMale = true;

                            DancinFool = ReturnStuff.DanceList(bMale, iRan);

                            EntityBuild.ForceAnim(MultiPed[i].MyPed, DancinFool.DanceType, DancinFool.Dance, MultiPed[i].MyPed.Position, MultiPed[i].MyPed.Rotation);
                        }
                    }
                }
            }
        }
        private void TempAgency_02_HaveADrink(Ped BarStaff, Ped Drinker, Vector3 Bar, Vector4 Cust)
        {
            LoggerLight.LogThis("TempAgency_02_HaveADrink");
            Script.Wait(1000);

            byte iLoop = 10;
            BarStaff.Task.ClearAllImmediately();
            Drinker.Task.ClearAllImmediately();

            while (ReturnStuff.AreUFar(Cust.V3, Drinker.Position, 1f) && iLoop > 0)
            {
                EntityBuild.WalkThisWay(Drinker, Cust.V3, 1.00f);
                Script.Wait(500);
                iLoop--;
            }
            iLoop = 10;

            while (ReturnStuff.AreUFar(BarStaff.Position, Bar, 1.5f) && iLoop > 0)
            {
                EntityBuild.WalkThisWay(BarStaff, Bar, 1.00f);
                Script.Wait(500);
                iLoop--;
            }
            BarStaff.Task.ClearAllImmediately();
            Drinker.Task.ClearAllImmediately();

            Function.Call(Hash.TASK_TURN_PED_TO_FACE_ENTITY, Drinker.Handle, BarStaff.Handle, -1);
            Function.Call(Hash.TASK_TURN_PED_TO_FACE_ENTITY, BarStaff.Handle, Drinker.Handle, -1);

            Script.Wait(3000);

            EntityBuild.ForceAnimOnce(Drinker, "anim@amb@nightclub@mini@drinking@bar@drink@one", "one_player", Drinker.Position, Drinker.Rotation);
            EntityBuild.ForceAnimOnce(BarStaff, "anim@amb@nightclub@mini@drinking@bar@drink@one", "one_bartender", BarStaff.Position, BarStaff.Rotation);

            Script.Wait(1000);

            while (Function.Call<bool>(Hash.GET_IS_TASK_ACTIVE, BarStaff.Handle, 134))
                Script.Wait(100);

            BarStaff.Task.ClearAllImmediately();
        }
        private void TempAgency_02_AddRubish()
        {
            int iRan = RandomX.RandInt(1, 3);

            for (int i = 0; i < iRan; i++)
                EntityBuild.BuildProp(MissionData.BarLitter[RandomX.FindRandom("TempAgency_02_AddRubish", 0, MissionData.BarLitter.Count - 1)], false, false);

            for (int i = 0; i < MultiPed.Count; i++)
                MultiPed[i].MySwitch_03 = false;
        }
        private void TempAgency_03_TrackDump()
        {
            List<Vehicle> Vamos = new List<Vehicle>();
            bool bLastOne = false;

            for (int i = 0; i < MissionData.VehicleList_01.Count; i++)
            {
                if (ReturnStuff.AreUNear(MissionData.VehicleList_01[i].Position, new Vector3(-1267.219f, -2981.585f, -44.04432f), 3.5f))
                {
                    if (MissionData.VehicleList_01[i] != Temp03Missions.Dozer && MissionData.VehicleList_01[i] != Temp03Missions.CurrentDump)
                        Vamos.Add(new Vehicle(MissionData.VehicleList_01[i].Handle));
                }
            }
            if (Vamos.Count > 3)
            {
                if (Temp03Missions.FilledDump == 3)
                    bLastOne = true;

                int iPass = 0;
                while (iPass < 4)
                {
                    Script.Wait(1000);
                    for (int i = 0; i < Vamos.Count; i++)
                    {
                        Vamos[i].Alpha = 120;

                        if (Game.Player.Character.IsInVehicle(Vamos[i]))
                            EntityBuild.GetOutofVeh(Game.Player.Character, 2);
                    }
                    Temp03Missions.CurrentDump.Alpha = 120;
                    Script.Wait(500);
                    for (int i = 0; i < Vamos.Count; i++)
                        Vamos[i].Alpha = 255;
                    Temp03Missions.CurrentDump.Alpha = 255;
                    iPass += 1;
                }
                if (bLastOne)
                {
                    for (int i = 0; i < Vamos.Count; i++)
                    {
                        Vector3 MyOffSett = Function.Call<Vector3>(Hash.GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS, Temp03Missions.CurrentDump.Handle, Vamos[i].Position.X, Vamos[i].Position.Y, Vamos[i].Position.Z);
                        Function.Call(Hash.ATTACH_ENTITY_TO_ENTITY, Vamos[i].Handle, Temp03Missions.CurrentDump.Handle, 42, MyOffSett.X, MyOffSett.Y, MyOffSett.Z, Vamos[i].Rotation.X, Vamos[i].Rotation.Y, Vamos[i].Rotation.Z, false, false, true, false, 2, true);
                    }
                    EntityBuild.WarptoAnyVeh(Temp03Missions.CurrentDump, Game.Player.Character, 1);

                    if (Temp03Missions.CurrentDump.CurrentBlip.Exists())
                        Temp03Missions.CurrentDump.CurrentBlip.Remove();

                    if (Temp03Missions.Dozer.CurrentBlip.Exists())
                        Temp03Missions.Dozer.CurrentBlip.Remove();
                }
                else
                {
                    for (int i = 0; i < Vamos.Count; i++)
                    {
                        Vector3 MyOffSett = Function.Call<Vector3>(Hash.GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS, Temp03Missions.CurrentDump.Handle, Vamos[i].Position.X, Vamos[i].Position.Y, Vamos[i].Position.Z);
                        Function.Call(Hash.ATTACH_ENTITY_TO_ENTITY, Vamos[i].Handle, Temp03Missions.CurrentDump.Handle, 42, MyOffSett.X, MyOffSett.Y, MyOffSett.Z, Vamos[i].Rotation.X, Vamos[i].Rotation.Y, Vamos[i].Rotation.Z, false, false, true, false, 2, true);
                        Vamos[i].Alpha = 255;
                    }
                }
                Temp03Missions.CurrentDump.Alpha = 255;
                EntityBuild.ResetVehPos(Temp03Missions.CurrentDump, Temp03Missions.Vlist01[Temp03Missions.FilledDump], 224.6757f);
                Temp03Missions.FilledDump++;

                if (bLastOne)
                {
                    for (int i = 0; i < MissionData.VehicleList_01.Count; i++)
                    {
                        if (MissionData.VehicleList_01[i].Model == VehicleHash.Dump)
                        {
                            if (MissionData.VehicleList_01[i].IsSeatFree(VehicleSeat.Driver))
                                EntityBuild.NPCSpawn(new PedFeat("s_m_y_armymech_01", true, 220, 0, 1, MissionData.VehicleList_01[i], 0, false, 0, ""), MissionData.VehicleList_01[i].Position, 0.00f);
                        }
                        else
                            MissionData.VehicleList_01[i].Detach();
                    }
                    JobSeq++;
                }
                else
                {
                    Temp03Missions.CurrentDump = EntityBuild.VehicleSpawn(new VehMods("Dump", 0, 5, false, DataStore.MyLang.Maptext[76], false, false, -1, -1, -1, true, "Dupe"), new Vector4(-1267.00818f, -2979.18091f, -48.1399612f, -0.00f));
                    Temp03Missions.Dumps.Add(new Vehicle(Temp03Missions.CurrentDump.Handle));
                }
            }
        }
        private void TempAgency_03_HangerDupes()
        {
            LoggerLight.LogThis("TempAgency_03_HangerDupes");
            List<Vector3> DupePos = new List<Vector3>
            {
                new Vector3(-1273.75f, -3033.00f, -49.1642036f),
                new Vector3(-1269.50f, -3033.00f, -49.1656837f),
                new Vector3(-1264.50f, -3033.00f, -49.1654396f),
                new Vector3(-1260.00f, -3033.00f, -49.1641922f),
                new Vector3(-1260.00f, -3025.50f, -49.1629486f),
                new Vector3(-1264.50f, -3025.50f, -49.1650314f),
                new Vector3(-1269.50f, -3025.50f, -49.1646805f),
                new Vector3(-1273.75f, -3025.50f, -49.1651878f),
                new Vector3(-1273.75f, -3018.25f, -49.165226f),
                new Vector3(-1269.50f, -3018.25f, -49.1641884f),
                new Vector3(-1264.50f, -3018.25f, -49.165062f),
                new Vector3(-1260.00f, -3018.25f, -49.1651382f),
                new Vector3(-1260.00f, -3010.75f, -49.1641541f),
                new Vector3(-1264.50f, -3010.75f, -49.164875f),
                new Vector3(-1269.50f, -3010.75f, -49.1651001f),
                new Vector3(-1273.75f, -3010.75f, -49.1651039f)
            };

            for (int i = 0; i < DupePos.Count; i++)
                EntityBuild.VehicleSpawn(new VehMods("elegy", 42, false, true, "Dupe"), DupePos[i], 0.00f);

            Temp03Missions.Dozer = EntityBuild.VehicleSpawn(new VehMods("BULLDOZER", 0), Temp03Missions.Target03);
            Temp03Missions.CurrentDump = EntityBuild.VehicleSpawn(new VehMods("Dump", 0, 5, false, DataStore.MyLang.Maptext[76], false, false, -1, -1, -1, true, "Dupe"), new Vector4(-1267.00818f, -2979.18091f, -48.1399612f, -0.00f));
            Temp03Missions.Dumps.Add(new Vehicle(Temp03Missions.CurrentDump.Handle));
            TempAgency_03_HangerProps();
        }
        private void TempAgency_03_HangerProps()
        {
            LoggerLight.LogThis("TempAgency_03_HangerProps");

            for (int i = 0; i < MissionData.HangerCrates.Count; i++)
                EntityBuild.BuildProp(MissionData.HangerCrates[i], true, false);
        }
        private void TempAgency_03_TruckOff()
        {
            for (int i = 0; i < MissionData.PedList_01.Count; i++)
                EntityBuild.DriveToDest(MissionData.PedList_01[i].CurrentVehicle, Temp03Missions.Vlist02[i], MissionData.PedList_01[i], 10.00f, 0);
        }
        private void TempAgency_03_DupeCount()
        {
            int iCount = 0;
            int iCollect = 0;
            for (int i = 0; i < MissionData.VehicleList_01.Count; i++)
            {
                if (MissionData.VehicleList_01[i].Model == Function.Call<int>(Hash.GET_HASH_KEY, "elegy"))
                {
                    iCount++;
                    if (ReturnStuff.AreUNear(MissionData.VehicleList_01[i].Position, Temp03Missions.CurrentDump.Position, 65.00f))
                    {
                        iCollect++;
                        Temp03Missions.CashPay += 10000;
                    }
                }
            }
            if (iCollect > DataStore.MyAchivments.Temp03_NotADupe)
                DataStore.MyAchivments.Temp03_NotADupe = iCollect;               //max car sales
        }
        private void TempAgency_04_CasWeaponSkit()
        {
            LoggerLight.LogThis("TempAgency_04_CasWeaponSkit");


            for (int i = 0; i < MissionData.GunsGunsGuns.Count; i++)
                EntityBuild.BuildProp(MissionData.GunsGunsGuns[i], true, false);

            GetWeaps(true);

            TempAgency_04_AddGoons();

            TempAgency_04_CasDoors();
        }
        private void TempAgency_04_CasDoors()
        {
            Script.Wait(1000);
            LoggerLight.LogThis("TempAgency_04_CasDoors");

            List<Vector3> MyPosList = new List<Vector3>
            {
                new Vector3(2506.7207f, -276.139709f, -58.5731506f),
                new Vector3(2506.7207f, -274.139771f, -58.5731506f),
                new Vector3(2511.61206f, -282.389862f, -58.5731506f),
                new Vector3(2523.92749f, -274.689728f, -58.5731506f),
                new Vector3(2526.82837f, -253.566864f, -60.1737862f),
                new Vector3(2509.74316f, -266.550842f, -58.5731506f),
                new Vector3(2528.2832f, -266.550842f, -58.5731506f),
                new Vector3(2524.82861f, -253.566864f, -60.1737862f),
                new Vector3(2506.7207f, -270.510681f, -58.5731506f),
                new Vector3(2506.7207f, -268.510742f, -58.5731506f),
                new Vector3(2500.83472f, -271.223907f, -58.5731659f),
                new Vector3(2500.93457f, -278.372498f, -58.5731659f)
            };

            for (int i = 0; i < MyPosList.Count(); i++)
                SearchFor.ShutDoors(MyPosList[i], 1.95f);
        }
        private void TempAgency_04_AddGoons()
        {
            LoggerLight.LogThis("TempAgency_04_AddGoons");

            List<Vector3> Cleaners = new List<Vector3>();
            List<Vector3> Patrolls = new List<Vector3>();
            List<Vector3> Chairs = new List<Vector3>();
            List<string> Objects = new List<string> { "v_corp_offchair" };

            Cleaners.Add(new Vector3(2495.053f, -282.5657f, -58.70786f));
            Cleaners.Add(new Vector3(2480.569f, -268.4429f, -58.27794f));
            Cleaners.Add(new Vector3(2496.782f, -260.0472f, -59.10851f));


            Chairs.Add(new Vector3(2544.8667f, -275.690979f, -59.7231636f));
            Chairs.Add(new Vector3(2538.56274f, -275.501831f, -59.7092514f));
            Chairs.Add(new Vector3(2538.6123f, -279.403137f, -59.7092476f));
            Chairs.Add(new Vector3(2533.35693f, -271.920441f, -59.7231636f));
            Chairs.Add(new Vector3(2534.81738f, -279.216278f, -59.7231636f));

            for (int i = 0; i < Chairs.Count(); i++)
            {
                List<Prop> Pops = SearchFor.GetLocalProps(Chairs[i], 1.00f, Objects);

                for (int ii = 0; ii < Pops.Count; ii++)
                {
                    if (Pops[ii].Exists())
                    {
                        Ped Psit = null;

                        Psit = EntityBuild.NPCSpawn(new PedFeat("s_m_y_westsec_02"), Pops[ii].Position, Pops[ii].Heading - 180f);
                        EntityBuild.PedSitHere(Psit, Pops[ii], 9);
                    }
                }
            }
            EntityBuild.NPCSpawn(new PedFeat("s_m_y_valet_01", false, 0, 0), Temp04Missions.Podium);
        }
        private void TempAgency_06_AddGoons()
        {
            LoggerLight.LogThis("TempAgency_06_AddGoons");
            List<Vector4> Goon = new List<Vector4>();

            bool bSwitch = false;
            string MyGoon = "";
            //CostructionGoons
            Goon.Add(new Vector4(1306.938f, 5210.371f, -80.3287f, 302.9738f));
            Goon.Add(new Vector4(1309.132f, 5211.627f, -79.46619f, 123.8437f));
            Goon.Add(new Vector4(1266.205f, 5234.099f, -80.32871f, 335.7401f));
            Goon.Add(new Vector4(1268.342f, 5233.802f, -80.32871f, 96.11914f));
            Goon.Add(new Vector4(1137.212f, 5510.563f, -101.2616f, 33.87546f));
            Goon.Add(new Vector4(1099.046f, 5527.323f, -101.3287f, 24.43044f));
            Goon.Add(new Vector4(1098.062f, 5529.535f, -101.3287f, 206.5871f));
            Goon.Add(new Vector4(705.9219f, 5879.918f, -152.3287f, 4.627841f));
            Goon.Add(new Vector4(705.8505f, 5882.157f, -152.3287f, 184.1738f));
            Goon.Add(new Vector4(707.8175f, 5881.49f, -151.9428f, 115.1614f));
            Goon.Add(new Vector4(681.3373f, 5910.441f, -152.3287f, 141.3932f));

            for (int i = 0; i < Goon.Count; i++)
            {
                if (bSwitch)
                    MyGoon = "s_m_y_construct_01";
                else
                    MyGoon = "s_m_y_construct_02";

                EntityBuild.NPCSpawn(new PedFeat(MyGoon, false, 160, 31, 3), Goon[i]);
                bSwitch = !bSwitch;
            }
            Temp06Missions.Gaffer = EntityBuild.NPCSpawn(new PedFeat("s_m_m_gaffer_01", false, 160, 30, 3), new Vector3(615.8879f, 5982.195f, -154.7342f), 122.4173f);

            //OtherGoons
            Goon.Clear();
            Goon.Add(new Vector4(239.1968f, 6020.915f, -159.4276f, 219.339f));
            Goon.Add(new Vector4(242.4085f, 6016.096f, -159.4022f, 21.97007f));
            Goon.Add(new Vector4(247.625f, 5943.063f, -159.5079f, 299.6284f));
            Goon.Add(new Vector4(352.4507f, 5916.985f, -158.1273f, 185.4913f));
            Goon.Add(new Vector4(390.2784f, 5919.489f, -158.1243f, 295.0339f));
            Goon.Add(new Vector4(425.6691f, 5898.668f, -158.1411f, 138.6002f));
            Goon.Add(new Vector4(450.4256f, 5929.894f, -158.2726f, 73.68127f));
            Goon.Add(new Vector4(427.4883f, 5941.192f, -158.272f, 270.0465f));
            Goon.Add(new Vector4(327.4231f, 5944.21f, -158.2719f, 325.9371f));
            Goon.Add(new Vector4(329.6937f, 5947.548f, -158.2719f, 148.1353f));
            Goon.Add(new Vector4(337.3715f, 5955.014f, -158.2719f, 277.3425f));
            Goon.Add(new Vector4(527.5824f, 5901.642f, -158.0846f, 82.06773f));
            Goon.Add(new Vector4(525.0826f, 5917.692f, -158.0733f, 331.5707f));
            Goon.Add(new Vector4(548.1776f, 5920.333f, -157.8977f, 302.0384f));
            Goon.Add(new Vector4(536.5679f, 5935.516f, -158.0723f, 226.2031f));

            for (int i = 0; i < Goon.Count; i++)
            {
                Ped Peddy = EntityBuild.NPCSpawn(new PedFeat("mp_m_avongoon", true, 250, 27, 3), Goon[i]);
                Peddy.RelationshipGroup = DataStore.GP_ANPCs;
            }

            Temp06Missions.Tech = EntityBuild.NPCSpawn(new PedFeat("s_m_y_waretech_01", false, 160, 30, 3), new Vector3(376.8057f, 5950.705f, -158.272f), 7.530061f);

            //JugoGoons
            Goon.Clear();
            Goon.Add(new Vector4(575.5989f, 5964.111f, -158.0814f, 183.9461f));
            Goon.Add(new Vector4(557.1788f, 5954.422f, -157.9881f, 259.6692f));
            Goon.Add(new Vector4(490.8803f, 5937.244f, -158.2958f, 246.5502f));
            Goon.Add(new Vector4(238.5329f, 6047.979f, -159.4268f, 182.4382f));

            for (int i = 0; i < Goon.Count; i++)
                EntityBuild.NPCSpawn(new PedFeat("u_m_y_juggernaut_01", true, 300, 32, 3), Goon[i]);
            //ScienceGoons
            Goon.Clear();
            Goon.Add(new Vector4(259.2646f, 6153.511f, -161.0222f, 171.4812f));
            Goon.Add(new Vector4(258.9621f, 6151.775f, -161.0222f, 10.68928f));
            Goon.Add(new Vector4(280.3683f, 6139.214f, -154.4204f, 164.0029f));
            Goon.Add(new Vector4(268.8067f, 6135.878f, -154.4204f, 352.0036f));
            Goon.Add(new Vector4(210.776f, 6139.121f, -154.4204f, 184.2138f));
            Goon.Add(new Vector4(244.3628f, 6144.983f, -146.4226f, 0.677888f));
            Goon.Add(new Vector4(263.2607f, 6166.365f, -146.4225f, 215.5028f));
            Goon.Add(new Vector4(264.4127f, 6163.958f, -146.4225f, 32.97869f));
            Goon.Add(new Vector4(229.8948f, 6209.986f, -159.4223f, 159.6417f));
            Goon.Add(new Vector4(261.0514f, 6215.176f, -159.4223f, 221.9193f));
            Goon.Add(new Vector4(304.7452f, 6293.706f, -160.1471f, 358.4538f));
            Goon.Add(new Vector4(304.0082f, 6302.98f, -160.1471f, 50.90543f));

            int iDidScience = RandomX.RandInt(0, Goon.Count - 1);
            for (int i = 0; i < Goon.Count; i++)
            {
                if (i == iDidScience)
                    Temp06Missions.Sci = EntityBuild.NPCSpawn(new PedFeat("s_m_m_scientist_01", false, 160, 30, 3), Goon[0]);
                else
                    EntityBuild.NPCSpawn(new PedFeat("s_m_m_scientist_01", false, 160, 30, 3), Goon[i]);
            }
        }
        private void TempAgency_06_AddVehs()
        {
            LoggerLight.LogThis("TempAgency_06_AddVehs");
            List<string> s_List = new List<string>();
            List<Vector3> Pos_List = new List<Vector3>();
            List<Vector3> Roll_List = new List<Vector3>();

            Pos_List.Add(new Vector3(1264.63208f, 4813.87305f, -40.3282547f));
            Roll_List.Add(new Vector3(-0.717493057f, 3.79593587f, 72.4672241f));
            Pos_List.Add(new Vector3(1263.71338f, 4811.52246f, -40.1563721f));
            Roll_List.Add(new Vector3(-0.714827001f, 3.95013928f, 68.7811356f));
            Pos_List.Add(new Vector3(1262.89551f, 4809.03076f, -39.9866333f));
            Roll_List.Add(new Vector3(-0.149541602f, 4.11466217f, 71.9740219f));
            Pos_List.Add(new Vector3(534.000977f, 5906.86719f, -158.68869f));
            Roll_List.Add(new Vector3(-0.175746664f, 0.0824013501f, 141.091232f));
            Pos_List.Add(new Vector3(434.419922f, 5899.34521f, -158.765549f));
            Roll_List.Add(new Vector3(1.16542387f, 0.0566543825f, 141.4142f));
            Pos_List.Add(new Vector3(430.902649f, 5939.88916f, -158.87764f));
            Roll_List.Add(new Vector3(-0.258082926f, -0.00976648275f, 91.0728989f));
            Pos_List.Add(new Vector3(316.566101f, 5955.2334f, -158.869904f));
            Roll_List.Add(new Vector3(-0.0575229041f, 0.0868797526f, 169.462784f));
            Pos_List.Add(new Vector3(249.599838f, 6097.8999f, -160.026779f));
            Roll_List.Add(new Vector3(0f, 0f, 0f));

            for (int i = 0; i < Pos_List.Count - 1; i++)
                EntityBuild.VehicleSpawn(new VehMods("caddy3"), Pos_List[i], Roll_List[i].Z);
            EntityBuild.VehicleSpawn(new VehMods("BMX"), Pos_List[Pos_List.Count - 1], Roll_List[Pos_List.Count - 1].Z);
            //FormanStuff;
            Pos_List.Clear();
            Roll_List.Clear();

            s_List.Add("Bison");
            Pos_List.Add(new Vector3(713.638611f, 5884.9043f, -151.185654f));
            Roll_List.Add(new Vector3(6.46616411f, 1.80396986f, -86.1794281f));
            s_List.Add("Bison");
            Pos_List.Add(new Vector3(713.529785f, 5879.63477f, -151.239029f));
            Roll_List.Add(new Vector3(6.15290117f, 0.782989323f, -86.6256561f));
            s_List.Add("Bison");
            Pos_List.Add(new Vector3(713.271667f, 5875.20654f, -151.462128f));
            Roll_List.Add(new Vector3(9.10577202f, 1.28959644f, -86.3206253f));
            s_List.Add("bulldozer");
            Pos_List.Add(new Vector3(1303.30286f, 5229.73779f, -79.1020584f));
            Roll_List.Add(new Vector3(-8.36956501f, 0.533993244f, 131.134354f));
            s_List.Add("tiptruck");
            Pos_List.Add(new Vector3(1308.25195f, 5217.28467f, -79.3301392f));
            Roll_List.Add(new Vector3(-2.71315217f, -12.5126963f, 28.4812565f));
            s_List.Add("tiptruck2");
            Pos_List.Add(new Vector3(1261.35168f, 5238.57129f, -80.4373932f));
            Roll_List.Add(new Vector3(-0.744077206f, 0.0108090946f, -120.740524f));
            s_List.Add("mixer");
            Pos_List.Add(new Vector3(1149.10107f, 5502.99219f, -100.042847f));
            Roll_List.Add(new Vector3(-10.5581675f, 1.29395032f, 132.802414f));
            s_List.Add("rubble");
            Pos_List.Add(new Vector3(1106.43115f, 5520.51758f, -101.23893f));
            Roll_List.Add(new Vector3(-0.466586739f, 0.00501979515f, 50.219101f));
            s_List.Add("trailersmall");
            Pos_List.Add(new Vector3(713.779114f, 5868.40723f, -150.834854f));
            Roll_List.Add(new Vector3(7.67457676f, -10.8014879f, 5.02762794f));
            s_List.Add("trailersmall");
            Pos_List.Add(new Vector3(682.994141f, 5905.54883f, -152.441635f));
            Roll_List.Add(new Vector3(5.45184088f, 0.877506852f, 213.8103447f));
            s_List.Add("trailersmall");
            Pos_List.Add(new Vector3(678.406372f, 5911.36865f, -152.435654f));
            Roll_List.Add(new Vector3(5.03401041f, 0.88615948f, -140.980453f));

            for (int i = 0; i < Pos_List.Count; i++)
                EntityBuild.VehicleSpawn(new VehMods(s_List[i]), Pos_List[i], Roll_List[i].Z);

            TempAgency_06_AddGoons();
        }
        private void TempAgency_06_AddStuff(bool bScience)
        {
            LoggerLight.LogThis("TempAgency_06_AddStuff");
            if (bScience)
            {
                List<string> s_List = new List<string>();
                List<Vector3> Pos_List = new List<Vector3>();
                List<Vector3> Roll_List = new List<Vector3>();

                s_List.Add("sm_prop_smug_crate_s_hazard");
                Pos_List.Add(new Vector3(250.969467f, 5963.44971f, -159.162094f));
                Roll_List.Add(new Vector3(0f, -0f, -149.612534f));
                s_List.Add("xs_prop_arena_barrel_01a_sf");
                Pos_List.Add(new Vector3(266.730957f, 6239.65039f, -161.022339f));
                Roll_List.Add(new Vector3(0f, -0f, -91.257309f));
                s_List.Add("prop_barrel_02b");
                Pos_List.Add(new Vector3(271.817383f, 6255.17725f, -161.219061f));
                Roll_List.Add(new Vector3(0f, -0f, 91.2169876f));
                s_List.Add("ba_prop_battle_control_console");
                Pos_List.Add(new Vector3(343.218842f, 6310.66699f, -159.848618f));
                Roll_List.Add(new Vector3(0f, -0f, -174.975052f));
                s_List.Add("v_med_testtubes");
                Pos_List.Add(new Vector3(369.440552f, 6316.16309f, -159.633102f));
                Roll_List.Add(new Vector3(0f, -0f, 102.423317f));

                int iBe = RandomX.FindRandom("Temp06Load", 0, Pos_List.Count - 1);

                Temp06Missions.Pop02 = EntityBuild.BuildProp(s_List[iBe], Pos_List[iBe], Roll_List[iBe], false, false);

                Temp06Missions.iCount = ReturnStuff.TempAgency_06_WhatsMyName(s_List[iBe]);
            }
            else
            {
                List<string> s_List = new List<string>();
                List<Vector3> Pos_List = new List<Vector3>();
                List<Vector3> Roll_List = new List<Vector3>();

                //technition stuff
                s_List.Add("ch_prop_toolbox_01a");
                Pos_List.Add(new Vector3(616.860107f, 5981.99951f, -155.731036f));
                Roll_List.Add(new Vector3(0f, 0f, -58.2386436f));
                s_List.Add("prop_tool_wrench");
                Pos_List.Add(new Vector3(577.000854f, 5973.20166f, -153.498096f));
                Roll_List.Add(new Vector3(-90f, -48.3684196f, 0f));
                s_List.Add("ch_prop_ch_bag_02a");
                Pos_List.Add(new Vector3(555.4953f, 5954.84229f, -158.023895f));
                Roll_List.Add(new Vector3(0f, 0f, 49.7450523f));
                s_List.Add("hei_prop_heist_box");
                Pos_List.Add(new Vector3(529.729858f, 5935.30566f, -159.19f));
                Roll_List.Add(new Vector3(0f, 0f, 71.9741974f));
                s_List.Add("ba_prop_battle_rsply_crate_02a");
                Pos_List.Add(new Vector3(529.471619f, 5901.979f, -159.085876f));
                Roll_List.Add(new Vector3(0f, -0f, -129.207016f));
                s_List.Add("gr_prop_gr_rsply_crate01a");
                Pos_List.Add(new Vector3(449.719086f, 5949.62549f, -159.25882f));
                Roll_List.Add(new Vector3(0f, 0f, 75.6604843f));
                s_List.Add("gr_prop_gr_rsply_crate03a");
                Pos_List.Add(new Vector3(384.817444f, 5920.98193f, -159.103455f));
                Roll_List.Add(new Vector3(0f, 0f, -13.0368681f));
                s_List.Add("prop_suitcase_03");
                Pos_List.Add(new Vector3(260.236847f, 6121.8125f, -159.955405f));
                Roll_List.Add(new Vector3(-90f, 3.30204272f, 0f));

                int iBe = RandomX.FindRandom("Temp06Load2", 0, Pos_List.Count - 1);

                Temp06Missions.Pop01 = EntityBuild.BuildProp(s_List[iBe], Pos_List[iBe], Roll_List[iBe], false, false);

                Temp06Missions.iCount = ReturnStuff.TempAgency_06_WhatsMyName(s_List[iBe]);
            }
        }
        private void TempAgency_06_GoFetch(int iAm)
        {
            LoggerLight.LogThis("TempAgency_06_GoFetch");
            if (iAm == 1)
            {
                int iRand = RandomX.FindRandom("Temp06Fetch", 14, MissionData.VehicleList_01.Count - 1);
                Temp06Missions.Truck = MissionData.VehicleList_01[iRand];
                Temp06Missions.ItemName = ReturnStuff.GetEntNameHash(Temp06Missions.Truck.Model.Hash);
                EntityBuild.VehBlip(new BlipForm(5, Temp06Missions.ItemName), Temp06Missions.Truck);

                DataStore.MyLang.Mistext[224] = Temp06Missions.DisplayName + "~y~" + Temp06Missions.ItemName + "~w~.";
            }
            else if (iAm == 2)
            {
                TempAgency_06_AddStuff(false);
                Temp06Missions.ItemName = DataStore.MyLang.Maptext[Temp06Missions.iCount];
                EntityBuild.AddTarget(new BlipForm(Temp06Missions.Pop01.Position, false, 5, 478, Temp06Missions.ItemName));

                DataStore.MyLang.Mistext[224] = Temp06Missions.DisplayName + "~y~" + Temp06Missions.ItemName + "~w~.";
            }
            else if (iAm == 3)
            {
                TempAgency_06_AddStuff(true);
                Temp06Missions.ItemName = DataStore.MyLang.Maptext[Temp06Missions.iCount];
                EntityBuild.AddTarget(new BlipForm(Temp06Missions.Pop02.Position, false, 5, 478, Temp06Missions.ItemName));

                DataStore.MyLang.Mistext[224] = Temp06Missions.DisplayName + "~y~" + Temp06Missions.ItemName + "~w~.";
            }
        }
        private void TempAgency_06_PlayerAttacks()
        {
            for (int i = 14; i < MissionData.VehicleList_01.Count; i++)
                MissionData.VehicleList_01[i].Explode();

            //Kanjally ???
            for (int i = 0; i < MissionData.PedList_01.Count; i++)
            {
                if (MissionData.PedList_01[i].Model == PedHash.Scientist01SMM || MissionData.PedList_01[i].Model == PedHash.Construct01SMY || MissionData.PedList_01[i].Model == PedHash.Construct02SMY)
                {
                    MissionData.PedList_01[i].Task.ReactAndFlee(Game.Player.Character);
                    MissionData.PedList_01.Remove(MissionData.PedList_01[i]);
                    MissionData.PedList_01[i].MarkAsNoLongerNeeded();
                }
            }
            MissionData.PedList_01.Remove(Temp06Missions.Gaffer);
            MissionData.PedList_01.Remove(Temp06Missions.Tech);
            Temp06Missions.Gaffer.MarkAsNoLongerNeeded();
            Temp06Missions.Tech.MarkAsNoLongerNeeded();

            for (int i = 0; i < 4; i++)
            {
                Ped pMe = EntityBuild.NPCSpawn(new PedFeat("", true, 350, 0, 0, null, 3, true, 1, DataStore.MyLang.Maptext[113]), Temp06Missions.Vlist01[0], 0.00f);
                PedMultiTask ThisPed = new PedMultiTask(pMe, null, 1);
                ThisPed.MyBlip = ThisPed.MyPed.CurrentBlip;
                MultiPed.Add(ThisPed);
                Function.Call(Hash.SET_ENTITY_ONLY_DAMAGED_BY_PLAYER, pMe.Handle, true);
                pMe.RelationshipGroup = DataStore.GP_BNPCs;
            }

            Temp06Missions.AchTime = Game.GameTime;

            EntityBuild.VehicleSpawn(new VehMods("Khanjali", 31), new Vector3(591.25f, 5949.15f, -157.00f), 122.84f);
        }
        private void TempAgency_06_PlayerBrains()
        {
            for (int i = 0; i < MultiPed.Count; i++)
            {
                if (MultiPed[i].MyPed.IsDead)
                {
                    if (MultiPed[i].MyBlip != null)
                    {
                        MultiPed[i].MyBlip.Remove();
                        MultiPed[i].MyBlip = null;
                    }
                    MultiPed.RemoveAt(i);
                }
                else if (MultiPed[i].MySwitch_03)
                {
                    if (i < 2)
                    {
                        if (MultiPed[i].MySwitch_01)
                        {
                            if (MultiPed[i].MyTimer_01 < Game.GameTime)
                            {
                                MultiPed[i].MyTask_01 += 1;
                                if (MultiPed[i].MyTask_01 < Temp06Missions.Vlist02.Count)
                                    MultiPed[i].MySwitch_01 = false;
                                else
                                    JobSeq = 45;
                            }
                        }
                        else
                        {
                            if (!MultiPed[i].MySwitch_02)
                            {
                                MultiPed[i].MySwitch_02 = true;
                                MultiPed[i].MyPed.Task.ClearAll();
                                Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, MultiPed[i].MyPed.Handle, 0, true);
                                Function.Call(Hash.SET_PED_COMBAT_MOVEMENT, MultiPed[i].MyPed.Handle, 2);
                                MultiPed[i].MyPed.BlockPermanentEvents = true;
                                Temp06Missions.FailedTarget = true;
                                EntityBuild.WalkThisWay(MultiPed[i].MyPed, Temp06Missions.Vlist02[MultiPed[i].MyTask_01], 2.00f);
                            }
                            else if (ReturnStuff.AreUNear(MultiPed[i].MyPed.Position, Temp06Missions.Vlist02[MultiPed[i].MyTask_01], 7f))
                            {
                                MultiPed[i].MySwitch_02 = false;
                                MultiPed[i].MySwitch_01 = true;
                                MultiPed[i].MyTimer_01 = Game.GameTime + 6000;
                                MultiPed[i].MyPed.Task.ClearAll();
                                MultiPed[i].MyPed.BlockPermanentEvents = false;
                                Function.Call(Hash.SET_PED_COMBAT_MOVEMENT, MultiPed[i].MyPed.Handle, 1);
                            }
                        }
                    }
                    else
                    {
                        if (MultiPed[i].MySwitch_01)
                        {
                            if (MultiPed[i].MyTimer_01 < Game.GameTime)
                            {
                                MultiPed[i].MyTask_01 += 1;
                                if (MultiPed[i].MyTask_01 < Temp06Missions.Vlist03.Count)
                                    MultiPed[i].MySwitch_01 = false;
                                else
                                    JobSeq = 45;
                            }
                        }
                        else
                        {
                            if (!MultiPed[i].MySwitch_02)
                            {
                                MultiPed[i].MySwitch_02 = true;
                                MultiPed[i].MyPed.Task.ClearAll();
                                Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, MultiPed[i].MyPed.Handle, 0, true);
                                Function.Call(Hash.SET_PED_COMBAT_MOVEMENT, MultiPed[i].MyPed.Handle, 2);
                                MultiPed[i].MyPed.BlockPermanentEvents = true;
                                Temp06Missions.FailedTarget = true;
                                EntityBuild.WalkThisWay(MultiPed[i].MyPed, Temp06Missions.Vlist03[MultiPed[i].MyTask_01], 2.00f);
                            }
                            else if (ReturnStuff.AreUNear(MultiPed[i].MyPed.Position, Temp06Missions.Vlist03[MultiPed[i].MyTask_01], 7f))
                            {
                                MultiPed[i].MySwitch_02 = false;
                                MultiPed[i].MySwitch_01 = true;
                                MultiPed[i].MyTimer_01 = Game.GameTime + 6000;
                                MultiPed[i].MyPed.Task.ClearAll();
                                MultiPed[i].MyPed.BlockPermanentEvents = false;
                                Function.Call(Hash.SET_PED_COMBAT_MOVEMENT, MultiPed[i].MyPed.Handle, 1);
                            }
                        }
                    }
                }
                else
                {
                    if (MultiPed[i].MySwitch_01)
                    {
                        if (MultiPed[i].MyTimer_01 < Game.GameTime)
                        {
                            MultiPed[i].MyTask_01 += 1;
                            if (MultiPed[i].MyTask_01 < Temp06Missions.Vlist01.Count)
                                MultiPed[i].MySwitch_01 = false;
                            else
                            {
                                MultiPed[i].MySwitch_03 = true;
                                MultiPed[i].MyTask_01 = 0;
                            }
                        }
                    }
                    else
                    {
                        if (!MultiPed[i].MySwitch_02)
                        {
                            MultiPed[i].MySwitch_02 = true;
                            MultiPed[i].MyPed.Task.ClearAll();
                            Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, MultiPed[i].MyPed.Handle, 0, true);
                            Function.Call(Hash.SET_PED_COMBAT_MOVEMENT, MultiPed[i].MyPed.Handle, 2);
                            MultiPed[i].MyPed.BlockPermanentEvents = true;
                            EntityBuild.WalkThisWay(MultiPed[i].MyPed, Temp06Missions.Vlist01[MultiPed[i].MyTask_01], 2.00f);
                        }
                        else if (ReturnStuff.AreUNear(MultiPed[i].MyPed.Position, Temp06Missions.Vlist01[MultiPed[i].MyTask_01], 5f))
                        {
                            MultiPed[i].MySwitch_02 = false;
                            MultiPed[i].MySwitch_01 = true;
                            MultiPed[i].MyTimer_01 = Game.GameTime + 6000;
                            MultiPed[i].MyPed.Task.ClearAll();
                            MultiPed[i].MyPed.BlockPermanentEvents = false;
                            Function.Call(Hash.SET_PED_COMBAT_MOVEMENT, MultiPed[i].MyPed.Handle, 1);
                        }
                    }
                }
            }
        }
        private static AchList TempAgency_Awards(int cashtotal, bool bCash)
        {
            AchList MyAss = new AchList(22);

            MyAss.Medal = 3;
            int iPer = 0;

            if (DataStore.MyAchivments.Temp01_OwnGoal > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[357], DataStore.MyLang.Othertext[358], "", 1));
                iPer += 20;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[357], DataStore.MyLang.Othertext[358], "", 0));
            }

            if (DataStore.MyAchivments.Temp02_Upsetter > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[359], DataStore.MyLang.Othertext[360], "", 1));
                iPer += 20;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[359], DataStore.MyLang.Othertext[360], "", 0));
            }

            if (DataStore.MyAchivments.Temp03_NotADupe > 7)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[361], DataStore.MyLang.Othertext[362], DataStore.MyAchivments.Temp03_NotADupe + "/8", 1));
                iPer += 20;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[361], DataStore.MyLang.Othertext[362], DataStore.MyAchivments.Temp03_NotADupe + "/8", 0));
            }

            if (DataStore.MyAchivments.Temp04_MilesOnTheClock > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[363], DataStore.MyLang.Othertext[364], "", 1));
                iPer += 20;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[363], DataStore.MyLang.Othertext[364], "", 0));
            }

            if (DataStore.MyAchivments.Temp05_GettingAir > 4999)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[365], DataStore.MyLang.Othertext[366], "$" + DataStore.MyAchivments.Temp05_GettingAir + "/$5000", 1));
                iPer += 10;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[365], DataStore.MyLang.Othertext[366],"$" + DataStore.MyAchivments.Temp05_GettingAir + "/$5000", 0));
            }
            if (DataStore.MyAchivments.Temp06_StopTheClock > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[367], DataStore.MyLang.Othertext[368], "", 1));
                iPer += 10;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[367], DataStore.MyLang.Othertext[368], "", 0));
            }




            if (bCash)
            {
                MyAss.Cash = cashtotal;
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[53], "", "$" + ReturnStuff.ShowComs(MyAss.Cash, true, false), 3));
            }

            if (iPer > 99)
                MyAss.Medal = 1;
            else if (iPer > 50)
                MyAss.Medal = 2;
            MyAss.Percent = iPer;
            return MyAss;
        }
        private void Parra_Load()
        {
            LoggerLight.LogThis("Parra_Load");
            MultiPed.Clear();
            Game.Player.Character.FreezePosition = true;
            GetWeaps(true);
            List<Vector3> Seat01 = new List<Vector3> { new Vector3(1.14f, -0.07f, 0.34f), new Vector3(0.22f, -0.07f, 0.34f), new Vector3(-0.79f, -0.07f, 0.34f) };
            List<Vector3> Seat02 = new List<Vector3> { new Vector3(-0.04f, 0.15f, -180.00f), new Vector3(0.04f, 0.15f, -180.00f), new Vector3(0.00f, 0.15f, -180.00f) };

            int iAddPlayer = RandomX.RandInt(0, 11);
            int iPlussOne = 0;
            List<int> iSpot = new List<int>();

            for (int i = 0; i < FreeFallMissions.AWVeh.Count; i++)
                iSpot.Add(i);

            for (int i = 0; i < MissionData.PropList_01.Count; i++)
            {
                for (int ii = 0; ii < Seat01.Count; ii++)
                {
                    if (iAddPlayer == iPlussOne)
                    {
                        Function.Call(Hash.SET_PED_GADGET, Game.Player.Character.Handle, Function.Call<int>(Hash.GET_HASH_KEY, "GADGET_PARACHUTE"), true);
                        EntityBuild.ForceAnim(Game.Player.Character, "amb@code_human_in_bus_passenger_idles@male@sit@base", "base", Game.Player.Character.Position, Game.Player.Character.Rotation);
                        Game.Player.Character.AttachTo(MissionData.PropList_01[i], 0, Seat01[ii], Seat02[ii]);
                    }
                    else
                    {
                        Ped PedShoot = EntityBuild.NPCSpawn(new PedFeat("", false, 250, 29, 0, 3), MissionData.PropList_01[i].Position, 0.00f);
                        EntityBuild.ForceAnim(PedShoot, "amb@code_human_in_bus_passenger_idles@male@sit@base", "base", PedShoot.Position, PedShoot.Rotation);
                        PedShoot.AttachTo(MissionData.PropList_01[i], 0, Seat01[ii], Seat02[ii]);
                        Function.Call(Hash.SET_PED_GADGET, PedShoot.Handle, Function.Call<int>(Hash.GET_HASH_KEY, "GADGET_PARACHUTE"), true);
                        int iFinda = RandomX.RandInt(0, iSpot.Count - 1);
                        int iLand = iSpot[iFinda];
                        iSpot.RemoveAt(iFinda);
                        PedMultiTask Para = new PedMultiTask(PedShoot, null, 0);
                        Para.MyTask_02 = iLand + 1;
                        Para.MySwitch_01 = false;
                        Para.MySwitch_02 = true;
                        Para.MyTimer_01 = 0;
                        Para.MyTimer_02 = 0;
                        Para.MyTarget_01 = FreeFallMissions.AWVeh[iLand].V3;
                        MultiPed.Add(Para);
                    }
                    iPlussOne++;
                }
            }
            Parra_AddStuff();
        }
        private void Parra_Prognosis(Ped ThisPed)
        {
            Entity Murder = Function.Call<Entity>((Hash)0x93C8B64DEB84728C, ThisPed.Handle);
            if (Murder != null)
            {
                if (Game.Player.Character.Handle == Murder.Handle)
                {
                    int iWeaponHash = Function.Call<int>(Hash.GET_PED_CAUSE_OF_DEATH, ThisPed.Handle);
                    if (iWeaponHash == Function.Call<int>(Hash.GET_HASH_KEY, "WEAPON_STONE_HATCHET") || iWeaponHash == Function.Call<int>(Hash.GET_HASH_KEY, "WEAPON_HATCHET"))
                        FreeFallMissions.Hatchet = true;
                    else if (iWeaponHash == Function.Call<int>(Hash.GET_HASH_KEY, "WEAPON_golfclub"))
                        FreeFallMissions.Golf = true;
                    else if (iWeaponHash == Function.Call<int>(Hash.GET_HASH_KEY, "WEAPON_bat"))
                        FreeFallMissions.BBall = true;
                    else if (iWeaponHash == Function.Call<int>(Hash.GET_HASH_KEY, "WEAPON_switchblade"))
                        FreeFallMissions.Knife = true;
                }
            }
        }
        private void Parra_Jump(bool bOneOut)
        {
            iWait4Sec = Game.GameTime + RandomX.RandInt(300, 1500);

            for (int i = 0; i < MultiPed.Count; i++)
            {
                if (JobSeq > 4)
                {
                    if (MultiPed[i].MySwitch_01)
                    {
                        if (ReturnStuff.AreUFar(MultiPed[i].MyPed.Position, FreeFallMissions.DropPoint, FreeFallMissions.BlipArea))
                        {
                            if (MultiPed[i].MyTimer_01 < Game.GameTime)
                                MultiPed[i].MyPed.Kill();
                        }
                        else
                            MultiPed[i].MySwitch_01 = false;
                    }
                    else
                    {
                        if (ReturnStuff.AreUFar(MultiPed[i].MyPed.Position, FreeFallMissions.DropPoint, FreeFallMissions.BlipArea))
                        {
                            MultiPed[i].MySwitch_01 = true;
                            if (!MultiPed[i].MyPed.IsInVehicle())
                            {
                                MultiPed[i].MyPed.Task.ClearAll();
                                EntityBuild.WalkThisWay(MultiPed[i].MyPed, FreeFallMissions.DropPoint, 1.00f);
                            }
                            MultiPed[i].MyTimer_01 = Game.GameTime + 10000;
                        }
                    }
                }

                if (MultiPed[i].MyPed.IsDead)
                {
                    Parra_Prognosis(MultiPed[i].MyPed);
                    MultiPed.RemoveAt(i);
                }
                else if (MultiPed[i].MyTask_01 == 0)
                {
                    if (MultiPed[i].MyPed.IsAttached())
                    {
                        if (bOneOut)
                        {
                            if (RandomX.RandInt(0, 40) > 20)
                            {
                                MultiPed[i].MyPed.Detach();
                                break;
                            }
                        }
                        else
                            MultiPed[i].MyPed.Detach();
                    }
                    else
                        MultiPed[i].MyTask_01 = 1;
                }
                else if (MultiPed[i].MyTask_01 == 1)
                {
                    Function.Call(Hash.TASK_SKY_DIVE, MultiPed[i].MyPed.Handle);
                    MultiPed[i].MyTask_01 = 2;
                }
                else if (MultiPed[i].MyTask_01 == 2)
                {
                    if (MultiPed[i].MyPed.Position.Z < 550.00f)
                    {
                        Function.Call(Hash.TASK_PARACHUTE, MultiPed[i].MyPed.Handle);
                        Function.Call(Hash.FORCE_PED_TO_OPEN_PARACHUTE, MultiPed[i].MyPed.Handle);
                        Function.Call(Hash.TASK_PARACHUTE_TO_TARGET, MultiPed[i].MyPed.Handle, MultiPed[i].MyTarget_01.X, MultiPed[i].MyTarget_01.Y, MultiPed[i].MyTarget_01.Z);
                        MultiPed[i].MySwitch_01 = false;
                        MultiPed[i].MyTask_01 = 3;
                    }
                }
                else if (MultiPed[i].MyTask_01 == 3)
                {
                    if (ReturnStuff.AreUNear(MultiPed[i].MyPed.Position, MultiPed[i].MyTarget_01, 15.00f))
                    {
                        Vehicle MrVic = MissionData.VehicleList_01[MultiPed[i].MyTask_02];

                        MultiPed[i].MyPed.Task.ClearAll();
                        if (ReturnStuff.AmINear(MrVic.Position, 35f))
                        {
                            Parra_MeliFight(MultiPed[i].MyPed);
                            EntityBuild.ArmsRegulator(MultiPed[i].MyPed, 5);
                            FreeFallMissions.NearPlayer = true;
                            MultiPed[i].MySwitch_02 = false;
                        }
                        else
                        {
                            EntityBuild.WarptoAnyVeh(MrVic, MultiPed[i].MyPed, 1);
                            EntityBuild.DriveToDest(MrVic, FreeFallMissions.DropPoint, MultiPed[i].MyPed, 35.00f, 0);
                            MrVic.CurrentBlip.Remove();
                            MultiPed[i].MySwitch_02 = true;
                        }
                        MultiPed[i].MyPed.IsInvincible = false;
                        MultiPed[i].MyTask_01 = 4;
                    }
                    else
                    {
                        if (JobSeq == 5)
                        {
                            if (!MultiPed[i].MyPed.IsInVehicle())
                            {
                                if (ReturnStuff.AmINear(MultiPed[i].MyPed.Position, 20f))
                                {
                                    MultiPed[i].MyPed.Task.ClearAll();
                                    MultiPed[i].MyPed.RelationshipGroup = DataStore.GP_Mental;
                                    EntityBuild.AttackThePlayer(MultiPed[i].MyPed, false, false, true);
                                    EntityBuild.ArmsRegulator(MultiPed[i].MyPed, 5);
                                    MultiPed[i].MySwitch_02 = false;
                                    MultiPed[i].MyPed.IsInvincible = false;
                                    MultiPed[i].MyTask_01 = 4;
                                }
                            }
                        }

                    }
                }
                else if (MultiPed[i].MyTask_01 == 4)
                {
                    if (MultiPed[i].MySwitch_02)
                    {
                        if (ReturnStuff.AreUNear(MultiPed[i].MyPed.Position, FreeFallMissions.DropPoint, 35f))
                        {
                            EntityBuild.GetOutofVeh(MultiPed[i].MyPed, 2);
                            MultiPed[i].MyPed.Task.ClearAll();
                            MultiPed[i].MyPed.RelationshipGroup = DataStore.GP_Mental;
                            EntityBuild.ArmsRegulator(MultiPed[i].MyPed, 5);
                            EntityBuild.FightAbility(MultiPed[i].MyPed);
                            Function.Call(Hash.TASK_COMBAT_HATED_TARGETS_IN_AREA, MultiPed[i].MyPed.Handle, FreeFallMissions.DropPoint.X, FreeFallMissions.DropPoint.Y, FreeFallMissions.DropPoint.Z, 30.00f, 0);
                            MultiPed[i].MySwitch_02 = false;
                        }
                    }
                    else
                    {
                        if (!MultiPed[i].MyPed.IsInCombat)
                            Function.Call(Hash.TASK_COMBAT_HATED_TARGETS_IN_AREA, MultiPed[i].MyPed.Handle, FreeFallMissions.DropPoint.X, FreeFallMissions.DropPoint.Y, FreeFallMissions.DropPoint.Z, 30.00f, 0);
                    }
                }
            }

            if (Function.Call<bool>(Hash.IS_PED_ARMED, Game.Player.Character.Handle, 6))
                JobSeq = 45;

            if (JobSeq == 3)
            {
                int iLast = 0;
                for (int i = 0; i < MultiPed.Count; i++)
                {
                    if (MultiPed[i].MyTask_01 > 0)
                        iLast += 1;
                }
                if (iLast == MultiPed.Count)
                {
                    FreeFallMissions.Plane.HasCollision = false;
                    Game.Player.Character.Task.ClearAnimation("amb@code_human_in_bus_passenger_idles@male@sit@base", "base");
                    Game.Player.Character.Detach();
                    Game.Player.Character.FreezePosition = false;
                    FreeFallMissions.PlaneTime = Game.GameTime + 5000;
                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[235];
                    JobSeq++;
                }

                if (JobSeq == 45)
                {
                    for (int i = 0; i < MultiPed.Count; i++)
                        MultiPed[i].MyPed.Detach();
                    Game.Player.Character.Detach();
                }
            }
            else
            {
                UiDisplay.SideBars[1].Data = "" + MultiPed.Count + "/11";

                if (MultiPed.Count == 0)
                    JobSeq = 6;
            }
        }
        private void Parra_MeliFight(Ped Pedd)
        {
            LoggerLight.LogThis("Parra_MeliFight");

            Pedd.RelationshipGroup = DataStore.GP_Mental;
            Pedd.IsEnemy = true;
            Pedd.CanBeTargette﻿d﻿ = true;
            EntityBuild.FightAbility(Pedd);
            Function.Call(Hash.TASK_PUT_PED_DIRECTLY_INTO_MELEE, Pedd.Handle, Game.Player.Character.Handle, 8f, -1f, 10f, 67108864);
            Function.Call(Hash.SET_PED_PATH_CAN_USE_CLIMBOVERS, Pedd.Handle, true);
            Function.Call(Hash.SET_PED_PATH_CAN_USE_LADDERS, Pedd.Handle, true);
            Function.Call(Hash.SET_PED_PATH_CAN_DROP_FROM_HEIGHT, Pedd.Handle, true);
        }
        private void Parra_CarLocks()
        {
            EntityBuild.GetOutofVeh(Game.Player.Character, 2);
            for (int i = 0; i < MissionData.VehicleList_01.Count; i++)
                MissionData.VehicleList_01[i].LockStatus = VehicleLockStatus.LockedForPlayer;
        }
        private void Parra_RemoveShit()
        {
            LoggerLight.LogThis("Parra_RemoveShit");
            ReturnWeaps();
            for (int i = 0; i < MissionData.PickList_01.Count; i++)
            {
                if (MissionData.PickList_01[i].Exists())
                    MissionData.PickList_01[i].Delete();
            }
            MissionData.PickList_01.Clear();
        }
        private void Parra_AddStuff()
        {
            LoggerLight.LogThis("Parra_AddStuff");

            List<string> s_List = new List<string>
            {
                "DOMINATOR4",
                "IMPALER2",
                "IMPERATOR",
                "SLAMVAN4",
                "DOMINATOR5",
                "IMPALER3",
                "IMPERATOR2",
                "SLAMVAN5",
                "DOMINATOR6",
                "IMPALER4",
                "IMPERATOR3",
                "SLAMVAN6",
                "BRUISER",
                "BRUTUS",
                "MONSTER3",
                "BRUISER2",
                "BRUTUS2",
                "MONSTER4",
                "BRUISER3",
                "BRUTUS3",
                "MONSTER5",
                "ZR3803",
                "ZR3802",
                "ZR380",
                "ISSI4",
                "ISSI5",
                "ISSI6"
            };

            for (int i = 0; i < FreeFallMissions.AWVeh.Count; i++)
            {
                int iCAr = RandomX.RandInt(0, s_List.Count - 1);
                EntityBuild.VehicleSpawn(new VehMods(s_List[iCAr], 27), FreeFallMissions.AWVeh[i]);
            }

            List<string> s_Weap = new List<string>
            {
                "PICKUP_WEAPON_BAT",
                "PICKUP_WEAPON_BATTLEAXE",
                "PICKUP_WEAPON_BOTTLE",
                "PICKUP_WEAPON_CROWBAR",
                "PICKUP_WEAPON_DAGGER",
                "PICKUP_WEAPON_HAMMER",
                "PICKUP_WEAPON_HATCHET",
                "PICKUP_WEAPON_KNIFE",
                "PICKUP_WEAPON_KNUCKLE",
                "PICKUP_WEAPON_MACHETE",
                "PICKUP_WEAPON_NIGHTSTICK",
                "PICKUP_WEAPON_POOLCUE",
                "PICKUP_WEAPON_STONE_HATCHET",
                "PICKUP_WEAPON_SWITCHBLADE",
                "PICKUP_WEAPON_WRENCH"
            };

            List<string> s_WeapMod = new List<string>
            {
                "WEAPON_BAT",
                "WEAPON_BATTLEAXE",
                "WEAPON_BOTTLE",
                "WEAPON_CROWBAR",
                "WEAPON_DAGGER",
                "WEAPON_HAMMER",
                "WEAPON_HATCHET",
                "WEAPON_KNIFE",
                "WEAPON_KNUCKLE",
                "WEAPON_MACHETE",
                "WEAPON_NIGHTSTICK",
                "WEAPON_POOLCUE",
                "WEAPON_STONE_HATCHET",
                "WEAPON_SWITCHBLADE",
                "WEAPON_WRENCH"
            };

            for (int i = 0; i < FreeFallMissions.WeapsPick.Count; i++)
            {
                int iRW = RandomX.RandInt(0, s_Weap.Count - 1);
                int Picked = Function.Call<int>(Hash.CREATE_PICKUP, Function.Call<int>(Hash.GET_HASH_KEY, s_Weap[iRW]), FreeFallMissions.WeapsPick[i].X, FreeFallMissions.WeapsPick[i].Y, FreeFallMissions.WeapsPick[i].Z, 1, true, Function.Call<int>(Hash.GET_HASH_KEY, s_WeapMod[iRW]));
                MissionData.PickList_01.Add(new Pickup(Picked));
            }
        }
        private void Parra_AddAwards()
        {
            LoggerLight.LogThis("Parra_Awards");

            if (FreeFallMissions.NearPlayer)
            {
                FreeFallMissions.CashPay += 500;
                DataStore.MyAchivments.ParaDisplay_HeyBuddy++;     //Land parashoot next a player
            }
            if (FreeFallMissions.Hatchet)
            {
                FreeFallMissions.CashPay += 100;
                DataStore.MyAchivments.ParaDisplay_BuryTheHatchet++; //Use the hachet
            }
            if (FreeFallMissions.Golf)
            {
                FreeFallMissions.CashPay += 100;
                DataStore.MyAchivments.ParaDisplay_AnyOneForGolf++;  //Use the golf club
            }
            if (FreeFallMissions.BBall)
            {
                FreeFallMissions.CashPay += 100;
                DataStore.MyAchivments.ParaDisplay_HomeRun++;       //Use the baseball bat
            }
            if (FreeFallMissions.Knife)
            {
                FreeFallMissions.CashPay += 100;
                DataStore.MyAchivments.ParaDisplay_KnifySpoony++;   //Use the flick knife
            }
        }
        private static AchList Parra_Awards(int cashtotal, bool bCash)
        {
            AchList MyAss = new AchList(23);

            MyAss.Medal = 3;
            int iPer = 0;

            if (DataStore.MyAchivments.ParaDisplay_HeyBuddy > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[369], DataStore.MyLang.Othertext[370], "", 1));
                iPer += 25;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[369], DataStore.MyLang.Othertext[370], "", 0));
            }

            if (DataStore.MyAchivments.ParaDisplay_BuryTheHatchet > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[371], DataStore.MyLang.Othertext[372], "", 1));
                iPer += 25;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[371], DataStore.MyLang.Othertext[372], "", 0));
            }

            if (DataStore.MyAchivments.ParaDisplay_AnyOneForGolf > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[373], DataStore.MyLang.Othertext[374], "", 1));
                iPer += 25;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[373], DataStore.MyLang.Othertext[374], "", 0));
            }

            if (DataStore.MyAchivments.ParaDisplay_HomeRun > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[375], DataStore.MyLang.Othertext[376], "", 1));
                iPer += 25;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[375], DataStore.MyLang.Othertext[376], "", 0));
            }

            if (DataStore.MyAchivments.ParaDisplay_KnifySpoony > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[377], DataStore.MyLang.Othertext[378], "", 1));
                iPer += 25;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[377], DataStore.MyLang.Othertext[378], "", 0));
            }

            if (bCash)
            {
                MyAss.Cash = cashtotal;
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[53], "", "$" + ReturnStuff.ShowComs(MyAss.Cash, true, false), 3));
            }

            if (iPer > 99)
                MyAss.Medal = 1;
            else if (iPer > 50)
                MyAss.Medal = 2;
            MyAss.Percent = iPer;
            return MyAss;
        }
        public void Deliverwho_Backpack()
        {
            LoggerLight.LogThis("Deliverwho_Backpack");
            DellWhoMissions.Uniform = true;

            Ped Peddy = Game.Player.Character;

            if (Peddy.Model == PedHash.Franklin)
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 8, 10, 0, 2);     //8 AccTop
            }      //Franklin
            else if (Peddy.Model == PedHash.Michael)
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 8, 15, 0, 2);     //8 AccTop
            }      //Michael
            else if (Peddy.Model == PedHash.Trevor)
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 8, 15, 0, 2);     //8 AccTop
            }       //Trevor
            else if (Peddy.Model == PedHash.FreemodeFemale01)
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 5, 68, 0, 2);     //5 Hands
            }      //MpFemale
            else if (Peddy.Model == PedHash.FreemodeMale01)
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 5, 68, 0, 2);     //5 Hands
            }      //MpMale
            else
            {

            }

            Prop CoolBag = EntityBuild.BuildProp("prop_coolbox_01", Peddy.Position, Vector3.Zero, false, false);
            CoolBag.HasCollision = false;
            Function.Call(Hash.ATTACH_ENTITY_TO_ENTITY, CoolBag.Handle, Peddy.Handle, Function.Call<int>(Hash.GET_PED_BONE_INDEX, Peddy.Handle, 24818), -0.20f, -0.30f, 0.00f, 90.00f, 90.00f, 0.00f, false, false, false, false, 2, true);
        }
        private void Deliverwho_AddAwards()
        {
            LoggerLight.LogThis("Deliverwho_Awards");
            DellWhoMissions.TimeTaken -= Game.GameTime;
            DellWhoMissions.TimeTaken *= -1;
            if (DataStore.MyAchivments.DeliverWho_The24HourSession < DellWhoMissions.TimeTaken)
                DataStore.MyAchivments.DeliverWho_The24HourSession = DellWhoMissions.TimeTaken;//deliver for 24 in game hours

            if (DellWhoMissions.Bike)
                DataStore.MyAchivments.DeliverWho_OnYourBike++;      //deliver on a bike

            if (DellWhoMissions.Fuoobd)
                DataStore.MyAchivments.DeliverWho_RideShare++;        //deliver in a fubar taxi
        }
        private static AchList Deliverwho_Awards(int cashtotal, bool bCash)
        {
            AchList MyAss = new AchList(24);

            MyAss.Medal = 3;
            int iPer = 0;

            if (DataStore.MyAchivments.DeliverWho_The24HourSession > 2879000)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[379], DataStore.MyLang.Othertext[380], ReturnStuff.ShowComs(DataStore.MyAchivments.DeliverWho_The24HourSession, false, false) + "/24:00:00", 1));
                iPer += 40;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[379], DataStore.MyLang.Othertext[380], ReturnStuff.ShowComs(DataStore.MyAchivments.DeliverWho_The24HourSession, false, false) + "/24:00:00", 0));
            }

            if (DataStore.MyAchivments.DeliverWho_OnYourBike > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[381], DataStore.MyLang.Othertext[382], "", 1));
                iPer += 30;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[381], DataStore.MyLang.Othertext[382], "", 0));
            }

            if (DataStore.MyAchivments.DeliverWho_RideShare > 0)
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[383], DataStore.MyLang.Othertext[384], "", 1));
                iPer += 30;
            }
            else
            {
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[383], DataStore.MyLang.Othertext[384], "", 0));
            }

            if (bCash)
            {
                MyAss.Cash = cashtotal;
                MyAss.MyAch.Add(new AchItem(DataStore.MyLang.Othertext[53], "", "$" + ReturnStuff.ShowComs(MyAss.Cash, true, false), 3));
            }

            if (iPer > 99)
                MyAss.Medal = 1;
            else if (iPer > 50)
                MyAss.Medal = 2;
            MyAss.Percent = iPer;
            return MyAss;
        }
        public void GetWeaps(bool bRemoveAll)
        {
            LoggerLight.LogThis("GetWeaps");

            DataStore.PlayerWeapXList.Clear();

            Ped Peddy = Game.Player.Character;

            for (int i = 0; i < ReturnStuff.WeapsList.Count; i++)
            {
                if (Function.Call<bool>(Hash.HAS_PED_GOT_WEAPON, Peddy.Handle, Function.Call<int>(Hash.GET_HASH_KEY, ReturnStuff.WeapsList[i]), false))
                {
                    PlayerWeaps IGotDis = new PlayerWeaps();

                    int iAmmos = 0;
                    IGotDis.MyWeap = ReturnStuff.WeapsList[i];

                    iAmmos = Function.Call<int>(Hash.GET_AMMO_IN_PED_WEAPON, Peddy.Handle, Function.Call<int>(Hash.GET_HASH_KEY, ReturnStuff.WeapsList[i]));
                    if (iAmmos < 1)
                        iAmmos = 1;
                    IGotDis.MyAmmo = iAmmos;

                    for (int ii = 0; ii < ReturnStuff.WeapAddonsList.Count; ii++)
                    {
                        if (Function.Call<bool>(Hash.HAS_PED_GOT_WEAPON_COMPONENT, Peddy.Handle, Function.Call<int>(Hash.GET_HASH_KEY, ReturnStuff.WeapsList[i]), Function.Call<int>(Hash.GET_HASH_KEY, ReturnStuff.WeapAddonsList[ii])))
                            IGotDis.MyAttachList.Add(ReturnStuff.WeapAddonsList[ii]);
                    }
                    DataStore.PlayerWeapXList.Add(IGotDis);
                    ///if (i == 19 || i == 24 || i == 74 || i == 72 || i == 68 || i == 63 || i == 61 || i == 58 || i == 56 || i == 46 || i == 39 || i == 29)--Mk2Weapps
                }
            }
            if (bRemoveAll)
                Peddy.Weapons.RemoveAll();
        }
        private bool GetBackInVeh(Vehicle thisVic)
        {
            bool OutOfIt = false;
            if (Game.Player.Character.IsInVehicle(thisVic))
            {
                UiDisplay.GetBackInVeh = null;
                iGetBackIn = 0;
            }
            else
            {
                OutOfIt = true;
                if (iGetBackIn == 0)
                {
                    iGetBackIn = Game.GameTime + 30000;

                    UiDisplay.GetBackInVeh = new SideBar(DataStore.MyLang.Jobtext[94], "", 0f, false);
                    UiDisplay.bUiDisplay = true;
                }
                else
                {
                    if (iGetBackIn < Game.GameTime)
                    {
                        thisVic.Explode();
                        JobSeq = 45;
                    }
                    else
                    {
                        int iTimeLeft = iGetBackIn - Game.GameTime;
                        UiDisplay.GetBackInVeh.Data = ReturnStuff.ShowComs(iTimeLeft, false, false);
                    }
                }
            }
            return OutOfIt;
        }
        public void ReturnWeaps()
        {
            LoggerLight.LogThis("ReturnWeaps");

            Ped Peddy = Game.Player.Character;

            for (int i = 0; i < DataStore.PlayerWeapXList.Count; i++)
            {
                int iAmmo = DataStore.PlayerWeapXList[i].MyAmmo;

                Function.Call(Hash.GIVE_WEAPON_TO_PED, Peddy.Handle, Function.Call<int>(Hash.GET_HASH_KEY, DataStore.PlayerWeapXList[i].MyWeap), iAmmo, false, true);

                for (int ii = 0; ii < DataStore.PlayerWeapXList[i].MyAttachList.Count; ii++)
                {
                    if (Function.Call<bool>(Hash.DOES_WEAPON_TAKE_WEAPON_COMPONENT, Function.Call<int>(Hash.GET_HASH_KEY, DataStore.PlayerWeapXList[i].MyWeap), Function.Call<int>(Hash.GET_HASH_KEY, DataStore.PlayerWeapXList[i].MyAttachList[ii])))
                        Function.Call(Hash.GIVE_WEAPON_COMPONENT_TO_PED, Peddy.Handle, Function.Call<int>(Hash.GET_HASH_KEY, DataStore.PlayerWeapXList[i].MyWeap), Function.Call<int>(Hash.GET_HASH_KEY, DataStore.PlayerWeapXList[i].MyAttachList[ii]));

                }
            }
            Function.Call(Hash.SET_PED_CURRENT_WEAPON_VISIBLE, Game.Player.Character.Handle, false, true, true, true);
        }
        private void CashNCrash(Vehicle myVic, int iCashMax)
        {
            List<Vehicle> VicList = new List<Vehicle>();
            List<Ped> PedList = new List<Ped>();

            float fVehCheck = myVic.BodyHealth + myVic.EngineHealth + myVic.PetrolTankHealth;
            int HealthTotal = (int)fVehCheck;
            VicList.Add(new Vehicle(myVic.Handle));

            ReturnStuff.DamageControl = new Crash4Cash(HealthTotal, iCashMax, VicList, PedList);
            LoggerLight.LogThis("Follow_CashNCrash == " + iCashMax + "HealthTotal ==" + HealthTotal);
        }
        public void KeepMoving(Ped Peddy, Vector3 Vtarg, int iWait4)
        {
            iWait4Sec = Game.GameTime + iWait4;
            if (ReturnStuff.BeInRange(0.75f, fKeepMoving, Peddy.Position.DistanceTo(Vtarg)))
            {
                Peddy.Task.ClearAll();
                Peddy.Position += Peddy.ForwardVector * 2.50f;
                EntityBuild.WalkThisWay(Peddy, Vtarg, 2.00f);
            }
            else
                fKeepMoving = Peddy.Position.DistanceTo(Vtarg);
        }
        public void InteriorRadar(int interior, Vector3 Vos)
        {
            Function.Call(Hash.SET_RADAR_AS_INTERIOR_THIS_FRAME, interior, Vos.X, Vos.Y, 0, 0);
        }
        private void LoadInteriorSpace(int iNterior, Vector3 Vloc, int iVerson, bool fade)
        {
            LoadInteriorSpace(iNterior, new Vector4(Vloc.X, Vloc.Y, Vloc.Z, 0f), iVerson, fade);
        }
        private void LoadInteriorSpace(int iNterior, Vector4 Vloc, int iVerson, bool fade)
        {
            if (fade)
                Game.FadeScreenOut(1000);
            InternalMissionIPLs(iNterior, Vloc.V3, iVerson);
            LoadClutterInteror(iNterior, Vloc);
        }
        private void LoadClutterInteror(int iBuilding, Vector4 Vloc)
        {
            LoggerLight.LogThis("CargoCollect_LoadClutter");
            List<string> sPropL = new List<string>();
            List<Vector3> vPosL = new List<Vector3>();
            List<Vector3> vRotL = new List<Vector3>();

            if (iBuilding == 1)
            {
                sPropL.Add("ex_prop_crate_ammo_bc");
                sPropL.Add("ex_prop_crate_ammo_sc");
                sPropL.Add("ex_prop_crate_art_02_bc");
                sPropL.Add("ex_prop_crate_art_02_sc");
                sPropL.Add("ex_prop_crate_art_bc");
                sPropL.Add("ex_prop_crate_art_sc");
                sPropL.Add("ex_prop_crate_biohazard_bc");
                sPropL.Add("ex_prop_crate_biohazard_sc");
                sPropL.Add("ex_prop_crate_bull_bc_02");
                sPropL.Add("ex_prop_crate_bull_sc_02");
                sPropL.Add("ex_prop_crate_closed_bc");
                sPropL.Add("ex_prop_crate_clothing_bc");
                sPropL.Add("ex_prop_crate_clothing_sc");
                sPropL.Add("ex_prop_crate_elec_bc");
                sPropL.Add("ex_prop_crate_elec_sc");
                sPropL.Add("ex_prop_crate_expl_bc");
                sPropL.Add("ex_prop_crate_expl_sc");
                sPropL.Add("ex_prop_crate_furjacket_bc");
                sPropL.Add("ex_prop_crate_furjacket_sc");
                sPropL.Add("ex_prop_crate_gems_bc");
                sPropL.Add("ex_prop_crate_gems_sc");
                sPropL.Add("ex_prop_crate_highend_pharma_bc");
                sPropL.Add("ex_prop_crate_highend_pharma_sc");
                sPropL.Add("ex_prop_crate_jewels_bc");
                sPropL.Add("ex_prop_crate_jewels_racks_bc");
                sPropL.Add("ex_prop_crate_jewels_racks_sc");
                sPropL.Add("ex_prop_crate_jewels_sc");
                sPropL.Add("ex_prop_crate_med_bc");
                sPropL.Add("ex_prop_crate_med_sc");
                sPropL.Add("ex_prop_crate_money_bc");
                sPropL.Add("ex_prop_crate_money_sc");
                sPropL.Add("ex_prop_crate_narc_bc");
                sPropL.Add("ex_prop_crate_narc_sc");
                sPropL.Add("ex_prop_crate_pharma_bc");
                sPropL.Add("ex_prop_crate_pharma_sc");
                sPropL.Add("ex_prop_crate_tob_bc");
                sPropL.Add("ex_prop_crate_tob_sc");
                sPropL.Add("ex_prop_crate_wlife_bc");
                sPropL.Add("ex_prop_crate_wlife_sc");

                vPosL.Add(new Vector3(1088.74683f, -3096.75146f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.134708673f));

                vPosL.Add(new Vector3(1091.28345f, -3096.57813f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.429592818f));

                vPosL.Add(new Vector3(1095.08557f, -3096.76392f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.0687025115f));

                vPosL.Add(new Vector3(1097.58936f, -3096.76416f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.0687025115f));

                vPosL.Add(new Vector3(1101.25781f, -3096.7605f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.0687025115f));

                vPosL.Add(new Vector3(1103.82813f, -3096.75854f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.0687025115f));

                vPosL.Add(new Vector3(1103.76807f, -3096.77856f, -37.6984978f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.0687025115f));

                vPosL.Add(new Vector3(1101.26819f, -3096.77856f, -37.6984978f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.0687025115f));

                vPosL.Add(new Vector3(1097.56909f, -3096.77856f, -37.6984978f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.0687025115f));

                vPosL.Add(new Vector3(1094.96973f, -3096.77856f, -37.6984978f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.0687025115f));

                vPosL.Add(new Vector3(1091.27063f, -3096.77856f, -37.6984978f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.0687025115f));

                vPosL.Add(new Vector3(1088.77124f, -3096.77856f, -37.6984978f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.0687025115f));

                for (int i = 0; i < vPosL.Count; i++)
                {
                    string sRanOb = sPropL[RandomX.RandInt(0, sPropL.Count - 1)];
                    Prop Proper = EntityBuild.BuildProp(sRanOb, vPosL[i], vRotL[i], true, true);
                    Proper.Position = new Vector3(Proper.Position.X, Proper.Position.Y, Proper.Position.Z - 0.10f);
                }

                EntityBuild.BuildProp("prop_rub_cabinet03", new Vector3(1089.829f, -3098.905f, -39.998f), new Vector3(0f, 0f, 89.670f), true, true);
                EntityBuild.BuildProp("prop_rub_cabinet03", new Vector3(1089.846f, -3100.443f, -39.998f), new Vector3(0f, 0f, 93.502f), true, true);
            }     //small
            else if (iBuilding == 2)
            {
                sPropL.Add("ex_prop_crate_ammo_bc");
                sPropL.Add("ex_prop_crate_ammo_sc");
                sPropL.Add("ex_prop_crate_art_02_bc");
                sPropL.Add("ex_prop_crate_art_02_sc");
                sPropL.Add("ex_prop_crate_art_bc");
                sPropL.Add("ex_prop_crate_art_sc");
                sPropL.Add("ex_prop_crate_biohazard_bc");
                sPropL.Add("ex_prop_crate_biohazard_sc");
                sPropL.Add("ex_prop_crate_bull_bc_02");
                sPropL.Add("ex_prop_crate_bull_sc_02");
                sPropL.Add("ex_prop_crate_closed_bc");
                sPropL.Add("ex_prop_crate_clothing_bc");
                sPropL.Add("ex_prop_crate_clothing_sc");
                sPropL.Add("ex_prop_crate_elec_bc");
                sPropL.Add("ex_prop_crate_elec_sc");
                sPropL.Add("ex_prop_crate_expl_bc");
                sPropL.Add("ex_prop_crate_expl_sc");
                sPropL.Add("ex_prop_crate_furjacket_bc");
                sPropL.Add("ex_prop_crate_furjacket_sc");
                sPropL.Add("ex_prop_crate_gems_bc");
                sPropL.Add("ex_prop_crate_gems_sc");
                sPropL.Add("ex_prop_crate_highend_pharma_bc");
                sPropL.Add("ex_prop_crate_highend_pharma_sc");
                sPropL.Add("ex_prop_crate_jewels_bc");
                sPropL.Add("ex_prop_crate_jewels_racks_bc");
                sPropL.Add("ex_prop_crate_jewels_racks_sc");
                sPropL.Add("ex_prop_crate_jewels_sc");
                sPropL.Add("ex_prop_crate_med_bc");
                sPropL.Add("ex_prop_crate_med_sc");
                sPropL.Add("ex_prop_crate_money_bc");
                sPropL.Add("ex_prop_crate_money_sc");
                sPropL.Add("ex_prop_crate_narc_bc");
                sPropL.Add("ex_prop_crate_narc_sc");
                sPropL.Add("ex_prop_crate_pharma_bc");
                sPropL.Add("ex_prop_crate_pharma_sc");
                sPropL.Add("ex_prop_crate_tob_bc");
                sPropL.Add("ex_prop_crate_tob_sc");
                sPropL.Add("ex_prop_crate_wlife_bc");
                sPropL.Add("ex_prop_crate_wlife_sc");

                vPosL.Add(new Vector3(1053.06958f, -3109.60938f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.971985f));

                vPosL.Add(new Vector3(1055.46899f, -3109.60938f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.971985f));

                vPosL.Add(new Vector3(1057.86841f, -3109.60938f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.971985f));

                vPosL.Add(new Vector3(1060.34558f, -3109.56226f, -39.8684998f));
                vRotL.Add(new Vector3(7.951f, 1.38546f, 179.230362f));

                vPosL.Add(new Vector3(1062.70618f, -3109.60889f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.56752f));

                vPosL.Add(new Vector3(1065.09741f, -3109.57202f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.158249f));

                vPosL.Add(new Vector3(1067.56262f, -3109.49097f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.2957f));

                vPosL.Add(new Vector3(1053.13843f, -3102.97461f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.120f));

                vPosL.Add(new Vector3(1055.59583f, -3102.91553f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.07f));

                vPosL.Add(new Vector3(1057.96082f, -3102.89697f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.9502151f));

                vPosL.Add(new Vector3(1060.41003f, -3103.0166f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.6247f));

                vPosL.Add(new Vector3(1062.84766f, -3103.02368f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.2546643f));

                vPosL.Add(new Vector3(1065.19763f, -3103.08398f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.939663887f));

                vPosL.Add(new Vector3(1067.58691f, -3103.0481f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.510466456f));

                vPosL.Add(new Vector3(1067.66296f, -3095.70117f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.324f));

                vPosL.Add(new Vector3(1065.21204f, -3095.84302f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.543f));

                vPosL.Add(new Vector3(1062.76624f, -3095.82129f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.543f));

                vPosL.Add(new Vector3(1060.35181f, -3095.79565f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.23f));

                vPosL.Add(new Vector3(1058.01526f, -3095.75488f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.764f));

                vPosL.Add(new Vector3(1055.63367f, -3095.78125f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.235f));

                vPosL.Add(new Vector3(1053.11145f, -3095.83276f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.23f));

                vPosL.Add(new Vector3(1053.05652f, -3095.56958f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.23f));

                vPosL.Add(new Vector3(1053.06958f, -3109.60938f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.971985f));

                vPosL.Add(new Vector3(1055.46899f, -3109.60938f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.971985f));

                vPosL.Add(new Vector3(1057.86841f, -3109.60938f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.971985f));

                vPosL.Add(new Vector3(1060.34558f, -3109.56226f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.230362f));

                vPosL.Add(new Vector3(1062.70618f, -3109.60889f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.56752f));

                vPosL.Add(new Vector3(1065.09741f, -3109.57202f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.158249f));

                vPosL.Add(new Vector3(1067.56262f, -3109.49097f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.2957f));

                vPosL.Add(new Vector3(1053.13843f, -3102.97461f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.120f));

                vPosL.Add(new Vector3(1055.59583f, -3102.91553f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.07f));

                vPosL.Add(new Vector3(1057.96082f, -3102.89697f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.9502151f));

                vPosL.Add(new Vector3(1060.41003f, -3103.0166f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.6247f));

                vPosL.Add(new Vector3(1062.84766f, -3103.02368f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.2546643f));

                vPosL.Add(new Vector3(1065.19763f, -3103.08398f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.939663887f));

                vPosL.Add(new Vector3(1067.58691f, -3103.0481f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.510466456f));

                vPosL.Add(new Vector3(1067.66296f, -3095.70117f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.324f));

                vPosL.Add(new Vector3(1065.21204f, -3095.84302f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.543f));

                vPosL.Add(new Vector3(1062.76624f, -3095.82129f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.543f));

                vPosL.Add(new Vector3(1060.35181f, -3095.79565f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.23f));

                vPosL.Add(new Vector3(1058.01526f, -3095.75488f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.764f));

                vPosL.Add(new Vector3(1055.63367f, -3095.78125f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.235f));

                for (int i = 0; i < vPosL.Count; i++)
                {
                    string sRanOb = sPropL[RandomX.RandInt(0, sPropL.Count - 1)];
                    Prop Proper = EntityBuild.BuildProp(sRanOb, vPosL[i], vRotL[i], true, true);
                    Proper.Position = new Vector3(Proper.Position.X, Proper.Position.Y, Proper.Position.Z - 0.10f);
                }

                EntityBuild.BuildProp("prop_rub_cabinet03", new Vector3(1052.365f, -3097.438f, -39.998f), new Vector3(0f, 0f, 46.448f), true, true);
                EntityBuild.BuildProp("prop_rub_cabinet03", new Vector3(1051.171f, -3098.440f, -39.998f), new Vector3(0f, 0f, 24.138f), true, true);
            }//mid
            else if (iBuilding == 3)
            {
                sPropL.Add("ex_prop_crate_ammo_bc");
                sPropL.Add("ex_prop_crate_ammo_sc");
                sPropL.Add("ex_prop_crate_art_02_bc");
                sPropL.Add("ex_prop_crate_art_02_sc");
                sPropL.Add("ex_prop_crate_art_bc");
                sPropL.Add("ex_prop_crate_art_sc");
                sPropL.Add("ex_prop_crate_biohazard_bc");
                sPropL.Add("ex_prop_crate_biohazard_sc");
                sPropL.Add("ex_prop_crate_bull_bc_02");
                sPropL.Add("ex_prop_crate_bull_sc_02");
                sPropL.Add("ex_prop_crate_closed_bc");
                sPropL.Add("ex_prop_crate_clothing_bc");
                sPropL.Add("ex_prop_crate_clothing_sc");
                sPropL.Add("ex_prop_crate_elec_bc");
                sPropL.Add("ex_prop_crate_elec_sc");
                sPropL.Add("ex_prop_crate_expl_bc");
                sPropL.Add("ex_prop_crate_expl_sc");
                sPropL.Add("ex_prop_crate_furjacket_bc");
                sPropL.Add("ex_prop_crate_furjacket_sc");
                sPropL.Add("ex_prop_crate_gems_bc");
                sPropL.Add("ex_prop_crate_gems_sc");
                sPropL.Add("ex_prop_crate_highend_pharma_bc");
                sPropL.Add("ex_prop_crate_highend_pharma_sc");
                sPropL.Add("ex_prop_crate_jewels_bc");
                sPropL.Add("ex_prop_crate_jewels_racks_bc");
                sPropL.Add("ex_prop_crate_jewels_racks_sc");
                sPropL.Add("ex_prop_crate_jewels_sc");
                sPropL.Add("ex_prop_crate_med_bc");
                sPropL.Add("ex_prop_crate_med_sc");
                sPropL.Add("ex_prop_crate_money_bc");
                sPropL.Add("ex_prop_crate_money_sc");
                sPropL.Add("ex_prop_crate_narc_bc");
                sPropL.Add("ex_prop_crate_narc_sc");
                sPropL.Add("ex_prop_crate_pharma_bc");
                sPropL.Add("ex_prop_crate_pharma_sc");
                sPropL.Add("ex_prop_crate_tob_bc");
                sPropL.Add("ex_prop_crate_tob_sc");
                sPropL.Add("ex_prop_crate_wlife_bc");
                sPropL.Add("ex_prop_crate_wlife_sc");

                vPosL.Add(new Vector3(993.540283f, -3106.50317f, -39.868454f));             //0
                vRotL.Add(new Vector3(0.00f, 0.00f, 90.3173218f));

                vPosL.Add(new Vector3(993.613464f, -3108.85791f, -39.868454f));             //1
                vRotL.Add(new Vector3(0.00f, 0.00f, 90.3172836f));

                vPosL.Add(new Vector3(993.627563f, -3111.30713f, -39.868454f));             //2
                vRotL.Add(new Vector3(0.00f, 0.00f, 90.0285568f));

                vPosL.Add(new Vector3(1026.45764f, -3111.39185f, -39.868454f));             //3
                vRotL.Add(new Vector3(0.00f, 0.00f, -90.5088501f));

                vPosL.Add(new Vector3(1026.49158f, -3108.96094f, -39.868454f));             //4
                vRotL.Add(new Vector3(0.00f, 0.00f, -91.5257492f));

                vPosL.Add(new Vector3(1026.58093f, -3106.57007f, -39.868454f));             //5
                vRotL.Add(new Vector3(0.00f, 0.00f, -92.247345f));

                vPosL.Add(new Vector3(1026.59241f, -3096.39868f, -39.868454f));             //6
                vRotL.Add(new Vector3(0.00f, 0.00f, -89.2680435f));

                vPosL.Add(new Vector3(1026.57178f, -3094.00928f, -39.868454f));             //7
                vRotL.Add(new Vector3(0.00f, 0.00f, -90.1735153f));

                vPosL.Add(new Vector3(1026.52124f, -3091.52783f, -39.868454f));             //8
                vRotL.Add(new Vector3(0.00f, 0.00f, -89.9307022f));

                vPosL.Add(new Vector3(1018.1983f, -3091.97266f, -39.868454f));             //9
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.476310164f));

                vPosL.Add(new Vector3(1015.69733f, -3091.93994f, -39.868454f));             //10
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.435770541f));

                vPosL.Add(new Vector3(1013.37708f, -3091.9231f, -39.868454f));             //11
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.435770541f));

                vPosL.Add(new Vector3(1010.94269f, -3091.99048f, -39.868454f));             //12
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.435770541f));

                vPosL.Add(new Vector3(1008.54211f, -3091.96582f, -39.868454f));             //13
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.292574644f));

                vPosL.Add(new Vector3(1006.10889f, -3091.94946f, -39.868454f));             //14
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.192989498f));

                vPosL.Add(new Vector3(1003.64362f, -3092.01563f, -39.868454f));             //15
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.161341712f));

                vPosL.Add(new Vector3(1003.62604f, -3096.77515f, -39.868454f));             //16
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.314484f));

                vPosL.Add(new Vector3(1005.94946f, -3096.72095f, -39.868454f));             //17
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.550766f));

                vPosL.Add(new Vector3(1008.41229f, -3096.65039f, -39.868454f));             //18
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.137253f));

                vPosL.Add(new Vector3(1010.92987f, -3096.72266f, -39.868454f));             //19
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.72348f));

                vPosL.Add(new Vector3(1013.27228f, -3096.73364f, -39.868454f));             //20
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.72348f));

                vPosL.Add(new Vector3(1015.65753f, -3096.71753f, -39.868454f));             //21
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.097229f));

                vPosL.Add(new Vector3(1018.1651f, -3096.76782f, -39.868454f));             //22
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.611603f));

                vPosL.Add(new Vector3(1018.17334f, -3103.12134f, -39.868454f));             //23
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.277661294f));

                vPosL.Add(new Vector3(1015.73279f, -3103.15796f, -39.868454f));             //24
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.22517097f));

                vPosL.Add(new Vector3(1013.30994f, -3103.18921f, -39.868454f));             //25
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.0808141753f));

                vPosL.Add(new Vector3(1010.93365f, -3103.14746f, -39.868454f));             //26
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.04123235f));

                vPosL.Add(new Vector3(1008.41376f, -3103.2002f, -39.868454f));             //27
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.575374007f));

                vPosL.Add(new Vector3(1006.08307f, -3103.1687f, -39.868454f));             //28
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.0832482651f));

                vPosL.Add(new Vector3(1003.74823f, -3103.12988f, -39.868454f));             //29
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.51762819f));

                vPosL.Add(new Vector3(1003.52454f, -3108.12573f, -39.868454f));             //30
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.400208f));

                vPosL.Add(new Vector3(1006.0119f, -3108.06372f, -39.868454f));             //31
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.049744f));

                vPosL.Add(new Vector3(1008.41968f, -3108.17651f, -39.868454f));             //32
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.741226f));

                vPosL.Add(new Vector3(1010.80005f, -3108.24634f, -39.868454f));             //33
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.161118f));

                vPosL.Add(new Vector3(1013.21289f, -3108.11743f, -39.868454f));             //34
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.082748f));

                vPosL.Add(new Vector3(1015.71112f, -3108.11377f, -39.868454f));             //35
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.426285f));

                vPosL.Add(new Vector3(1018.01129f, -3108.07251f, -39.868454f));             //36
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.548035f));

                vPosL.Add(new Vector3(1018.01129f, -3108.07251f, -37.7088165f));             //37
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.548035f));

                vPosL.Add(new Vector3(993.540283f, -3106.50317f, -37.7088165f));             //38
                vRotL.Add(new Vector3(0.00f, 0.00f, 90.3173218f));

                vPosL.Add(new Vector3(993.613464f, -3108.85791f, -37.7088165f));             //39
                vRotL.Add(new Vector3(0.00f, 0.00f, 90.3172836f));

                vPosL.Add(new Vector3(993.627563f, -3111.30713f, -37.7088165f));             //40
                vRotL.Add(new Vector3(0.00f, 0.00f, 90.0285568f));

                vPosL.Add(new Vector3(1026.45764f, -3111.39185f, -37.7088165f));             //41
                vRotL.Add(new Vector3(0.00f, 0.00f, -90.5088501f));

                vPosL.Add(new Vector3(1026.49158f, -3108.96094f, -37.7088165f));             //42
                vRotL.Add(new Vector3(0.00f, 0.00f, -91.5257492f));

                vPosL.Add(new Vector3(1026.58093f, -3106.57007f, -37.7088165f));             //43
                vRotL.Add(new Vector3(0.00f, 0.00f, -92.247345f));

                vPosL.Add(new Vector3(1026.59241f, -3096.39868f, -37.7088165f));             //44
                vRotL.Add(new Vector3(0.00f, 0.00f, -89.2680435f));

                vPosL.Add(new Vector3(1026.57178f, -3094.00928f, -37.7088165f));             //45
                vRotL.Add(new Vector3(0.00f, 0.00f, -90.1735153f));

                vPosL.Add(new Vector3(1026.52124f, -3091.52783f, -37.7088165f));             //46
                vRotL.Add(new Vector3(0.00f, 0.00f, -89.9307022f));

                vPosL.Add(new Vector3(1018.1983f, -3091.97266f, -37.7088165f));             //47
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.476310164f));

                vPosL.Add(new Vector3(1015.69733f, -3091.93994f, -37.7088165f));             //48
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.435770541f));

                vPosL.Add(new Vector3(1013.37708f, -3091.9231f, -37.7088165f));             //49
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.435770541f));

                vPosL.Add(new Vector3(1010.94269f, -3091.99048f, -37.7088165f));             //50
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.435770541f));

                vPosL.Add(new Vector3(1008.54211f, -3091.96582f, -37.7088165f));             //51
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.292574644f));

                vPosL.Add(new Vector3(1006.10889f, -3091.94946f, -37.7088165f));             //52
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.192989498f));

                vPosL.Add(new Vector3(1003.64362f, -3092.01563f, -37.7088165f));             //53
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.161341712f));

                vPosL.Add(new Vector3(1003.62604f, -3096.77515f, -37.7088165f));             //54
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.314484f));

                vPosL.Add(new Vector3(1005.94946f, -3096.72095f, -37.7088165f));             //55
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.550766f));

                vPosL.Add(new Vector3(1008.41229f, -3096.65039f, -37.7088165f));             //56
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.137253f));

                vPosL.Add(new Vector3(1010.92987f, -3096.72266f, -37.7088165f));             //57
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.72348f));

                vPosL.Add(new Vector3(1013.27228f, -3096.73364f, -37.7088165f));             //58
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.72348f));

                vPosL.Add(new Vector3(1015.65753f, -3096.71753f, -37.7088165f));             //59
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.097229f));

                vPosL.Add(new Vector3(1018.1651f, -3096.76782f, -37.7088165f));             //60
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.611603f));

                vPosL.Add(new Vector3(1018.17334f, -3103.12134f, -37.7088165f));             //61
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.277661294f));

                vPosL.Add(new Vector3(1015.73279f, -3103.15796f, -37.7088165f));             //62
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.22517097f));

                vPosL.Add(new Vector3(1013.30994f, -3103.18921f, -37.7088165f));             //63
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.0808141753f));

                vPosL.Add(new Vector3(1010.93365f, -3103.14746f, -37.7088165f));             //64
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.04123235f));

                vPosL.Add(new Vector3(1008.41376f, -3103.2002f, -37.7088165f));             //65
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.575374007f));

                vPosL.Add(new Vector3(1006.08307f, -3103.1687f, -37.7088165f));             //66
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.0832482651f));

                vPosL.Add(new Vector3(1003.74823f, -3103.12988f, -37.7088165f));             //67
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.51762819f));

                vPosL.Add(new Vector3(1003.52454f, -3108.12573f, -37.7088165f));             //68
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.400208f));

                vPosL.Add(new Vector3(1006.0119f, -3108.06372f, -37.7088165f));             //69
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.049744f));

                vPosL.Add(new Vector3(1008.41968f, -3108.17651f, -37.7088165f));             //70
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.741226f));

                vPosL.Add(new Vector3(1010.80005f, -3108.24634f, -37.7088165f));             //71
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.161118f));

                vPosL.Add(new Vector3(1013.21289f, -3108.11743f, -37.7088165f));             //72
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.082748f));

                vPosL.Add(new Vector3(1015.71112f, -3108.11377f, -37.7088165f));             //73
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.426285f));

                vPosL.Add(new Vector3(1018.01129f, -3108.07251f, -35.6691589f));             //74
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.548035f));

                vPosL.Add(new Vector3(993.540283f, -3106.50317f, -35.6691589f));             //75
                vRotL.Add(new Vector3(0.00f, 0.00f, 90.3173218f));

                vPosL.Add(new Vector3(993.613464f, -3108.85791f, -35.6691589f));             //76
                vRotL.Add(new Vector3(0.00f, 0.00f, 90.3172836f));

                vPosL.Add(new Vector3(993.627563f, -3111.30713f, -35.6691589f));             //77
                vRotL.Add(new Vector3(0.00f, 0.00f, 90.0285568f));

                vPosL.Add(new Vector3(1026.45764f, -3111.39185f, -35.6691589f));             //78
                vRotL.Add(new Vector3(0.00f, 0.00f, -90.5088501f));

                vPosL.Add(new Vector3(1026.49158f, -3108.96094f, -35.6691589f));             //79
                vRotL.Add(new Vector3(0.00f, 0.00f, -91.5257492f));

                vPosL.Add(new Vector3(1026.58093f, -3106.57007f, -35.6691589f));             //80
                vRotL.Add(new Vector3(0.00f, 0.00f, -92.247345f));

                vPosL.Add(new Vector3(1026.59241f, -3096.39868f, -35.6691589f));             //81
                vRotL.Add(new Vector3(0.00f, 0.00f, -89.2680435f));

                vPosL.Add(new Vector3(1026.57178f, -3094.00928f, -35.6691589f));             //82
                vRotL.Add(new Vector3(0.00f, 0.00f, -90.1735153f));

                vPosL.Add(new Vector3(1026.52124f, -3091.52783f, -35.6691589f));             //83
                vRotL.Add(new Vector3(0.00f, 0.00f, -89.9307022f));

                vPosL.Add(new Vector3(1018.1983f, -3091.97266f, -35.6691589f));             //84
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.476310164f));

                vPosL.Add(new Vector3(1015.69733f, -3091.93994f, -35.6691589f));             //85
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.435770541f));

                vPosL.Add(new Vector3(1013.37708f, -3091.9231f, -35.6691589f));             //86
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.435770541f));

                vPosL.Add(new Vector3(1010.94269f, -3091.99048f, -35.6691589f));             //87
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.435770541f));

                vPosL.Add(new Vector3(1008.54211f, -3091.96582f, -35.6691589f));             //88
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.292574644f));

                vPosL.Add(new Vector3(1006.10889f, -3091.94946f, -35.6691589f));             //89
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.192989498f));

                vPosL.Add(new Vector3(1003.64362f, -3092.01563f, -35.6691589f));             //90
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.161341712f));

                vPosL.Add(new Vector3(1003.62604f, -3096.77515f, -35.6691589f));             //91
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.314484f));

                vPosL.Add(new Vector3(1005.94946f, -3096.72095f, -35.6691589f));             //92
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.550766f));

                vPosL.Add(new Vector3(1008.41229f, -3096.65039f, -35.6691589f));             //93
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.137253f));

                vPosL.Add(new Vector3(1010.92987f, -3096.72266f, -35.6691589f));             //94
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.72348f));

                vPosL.Add(new Vector3(1013.27228f, -3096.73364f, -35.6691589f));             //95
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.72348f));

                vPosL.Add(new Vector3(1015.65753f, -3096.71753f, -35.6691589f));             //96
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.097229f));

                vPosL.Add(new Vector3(1018.1651f, -3096.76782f, -35.6691589f));             //97
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.611603f));

                vPosL.Add(new Vector3(1018.17334f, -3103.12134f, -35.6691589f));             //98
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.277661294f));

                vPosL.Add(new Vector3(1015.73279f, -3103.15796f, -35.6691589f));             //99
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.22517097f));

                vPosL.Add(new Vector3(1013.30994f, -3103.18921f, -35.6691589f));             //100
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.0808141753f));

                vPosL.Add(new Vector3(1010.93365f, -3103.14746f, -35.6691589f));             //101
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.04123235f));

                vPosL.Add(new Vector3(1008.41376f, -3103.2002f, -35.6691589f));             //102
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.575374007f));

                vPosL.Add(new Vector3(1006.08307f, -3103.1687f, -35.6691589f));             //103
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.0832482651f));

                vPosL.Add(new Vector3(1003.74823f, -3103.12988f, -35.6691589f));             //104
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.51762819f));

                vPosL.Add(new Vector3(1003.52454f, -3108.12573f, -35.6691589f));             //105
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.400208f));

                vPosL.Add(new Vector3(1006.0119f, -3108.06372f, -35.6691589f));             //106
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.049744f));

                vPosL.Add(new Vector3(1008.41968f, -3108.17651f, -35.6691589f));             //107
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.741226f));

                vPosL.Add(new Vector3(1010.80005f, -3108.24634f, -35.6691589f));             //108
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.161118f));

                vPosL.Add(new Vector3(1013.21289f, -3108.11743f, -35.6691589f));             //109
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.082748f));

                vPosL.Add(new Vector3(1015.71112f, -3108.11377f, -35.6691589f));             //110
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.426285f));

                for (int i = 0; i < vPosL.Count; i++)
                {
                    string sRanOb = sPropL[RandomX.RandInt(0, sPropL.Count - 1)];
                    Prop Proper = EntityBuild.BuildProp(sRanOb, vPosL[i], vRotL[i], true, true);
                    Proper.Position = new Vector3(Proper.Position.X, Proper.Position.Y, Proper.Position.Z - 0.10f);
                }

                EntityBuild.BuildProp("prop_rub_cabinet03", new Vector3(998.073f, -3102.785f, -39.998f), new Vector3(0f, 0f, 91.209f), true, true);
                EntityBuild.BuildProp("prop_rub_cabinet03", new Vector3(996.984f, -3103.706f, -39.998f), new Vector3(0f, 0f, -1.709f), true, true);
            }//large
            else if (iBuilding == 4)
            {
                sPropL.Add("ba_prop_battle_crates_rifles_01a");
                vPosL.Add(new Vector3(923.458435f, -3232.69727f, -99.2854843f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -75.7848206f));

                sPropL.Add("ba_prop_battle_crates_rifles_02a");
                vPosL.Add(new Vector3(929.155457f, -3239.77051f, -99.2970276f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -178.224823f));

                sPropL.Add("ba_prop_battle_crates_rifles_03a");
                vPosL.Add(new Vector3(933.701721f, -3239.65088f, -99.296608f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -179.418991f));

                sPropL.Add("ba_prop_battle_crates_rifles_04a");
                vPosL.Add(new Vector3(937.145569f, -3239.61816f, -99.298645f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -179.418991f));

                sPropL.Add("ba_prop_battle_crates_sam_01a");
                vPosL.Add(new Vector3(945.674133f, -3239.41626f, -99.2993698f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -179.41893f));

                sPropL.Add("ba_prop_battle_crates_wpn_mix_01a");
                vPosL.Add(new Vector3(939.155457f, -3229.90967f, -99.2904587f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 4.85300207f));

                sPropL.Add("ex_prop_crate_ammo_bc");
                vPosL.Add(new Vector3(941.691467f, -3229.87817f, -99.1617279f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 92.9039536f));

                sPropL.Add("ex_prop_crate_ammo_sc");
                vPosL.Add(new Vector3(943.951721f, -3229.87671f, -99.1602554f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 92.9039307f));

                sPropL.Add("ex_prop_crate_closed_bc");
                vPosL.Add(new Vector3(945.808105f, -3229.85303f, -99.1671066f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 90.6525574f));

                sPropL.Add("ex_prop_crate_closed_ms");
                vPosL.Add(new Vector3(947.573181f, -3232.29004f, -99.1695251f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.809956074f));

                sPropL.Add("ex_prop_crate_closed_mw");
                vPosL.Add(new Vector3(950.064697f, -3235.10962f, -99.1710815f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.915191054f));

                sPropL.Add("ex_prop_crate_closed_sc");
                vPosL.Add(new Vector3(950.096985f, -3237.1189f, -99.1710205f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.902066052f));

                sPropL.Add("ex_prop_crate_closed_sc");
                vPosL.Add(new Vector3(947.812012f, -3235.34473f, -99.169487f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 3.0477345f));

                sPropL.Add("ex_prop_crate_closed_sc");
                vPosL.Add(new Vector3(947.911804f, -3237.26904f, -99.1703415f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 3.26426029f));

                sPropL.Add("xm_prop_crates_rifles_04a");
                vPosL.Add(new Vector3(943.516174f, -3237.59033f, -99.2979736f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -90.5018463f));

                sPropL.Add("xm_prop_rsply_crate04b");
                vPosL.Add(new Vector3(923.959961f, -3230.34619f, -99.2831802f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -177.508408f));

                sPropL.Add("xm_prop_rsply_crate04a");
                vPosL.Add(new Vector3(925.840698f, -3230.23999f, -99.2840424f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -176.445313f));

                sPropL.Add("xm_prop_crates_weapon_mix_01a");
                vPosL.Add(new Vector3(928.262634f, -3230.0459f, -99.2842865f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -178.892624f));

                sPropL.Add("xm_prop_crates_sam_01a");
                vPosL.Add(new Vector3(930.593567f, -3229.87354f, -99.286705f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -178.892624f));

                sPropL.Add("xm_prop_crates_rifles_04a");
                vPosL.Add(new Vector3(936.661133f, -3218.73535f, -99.2795868f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 94.1384048f));

                sPropL.Add("xm_prop_crates_rifles_03a");
                vPosL.Add(new Vector3(936.722473f, -3220.57959f, -99.2803268f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -86.8848953f));

                sPropL.Add("xm_prop_crates_rifles_02a");
                vPosL.Add(new Vector3(936.852478f, -3222.87402f, -99.2840652f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -86.8848953f));

                sPropL.Add("xm_prop_crates_rifles_01a");
                vPosL.Add(new Vector3(936.953247f, -3224.63818f, -99.2855988f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -86.8848953f));

                sPropL.Add("xm_prop_crates_pistols_01a");
                vPosL.Add(new Vector3(937.182495f, -3225.9292f, -99.2879486f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -85.8282471f));

                sPropL.Add("sm_prop_smug_rsply_crate01a");
                vPosL.Add(new Vector3(936.993591f, -3227.11353f, -99.2895279f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -87.3434677f));

                sPropL.Add("prop_lev_crate_01");
                vPosL.Add(new Vector3(921.080078f, -3220.96851f, -99.2501251f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.62611103f));

                sPropL.Add("prop_lev_crate_01");
                vPosL.Add(new Vector3(917.042358f, -3220.79346f, -99.2455246f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.62611103f));

                sPropL.Add("ba_prop_battle_crate_closed_bc");
                vPosL.Add(new Vector3(918.066956f, -3233.68555f, -99.1663589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 90.7133865f));

                sPropL.Add("ba_prop_battle_crate_closed_bc");
                vPosL.Add(new Vector3(918.043945f, -3231.16064f, -99.1604691f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 90.7133865f));

                sPropL.Add("ba_prop_battle_crates_pistols_01a");
                vPosL.Add(new Vector3(921.838196f, -3224.7959f, -99.2755661f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -90.946228f));

                sPropL.Add("ba_prop_battle_crates_rifles_01a");
                vPosL.Add(new Vector3(921.862f, -3223.17773f, -99.2730484f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -90.946228f));

                sPropL.Add("ba_prop_battle_crates_rifles_02a");
                vPosL.Add(new Vector3(939.838318f, -3223.61987f, -99.2871323f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 4.70347738f));

                sPropL.Add("ba_prop_battle_crates_rifles_03a");
                vPosL.Add(new Vector3(942.150024f, -3223.42725f, -99.2867813f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 4.70347738f));

                sPropL.Add("ba_prop_battle_crates_rifles_04a");
                vPosL.Add(new Vector3(944.407288f, -3223.2522f, -99.2895889f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 4.12604809f));

                sPropL.Add("ex_prop_crate_closed_mw");
                vPosL.Add(new Vector3(950.311523f, -3225.73633f, -99.1656265f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 176.068619f));

                sPropL.Add("ex_prop_crate_closed_mw");
                vPosL.Add(new Vector3(950.544617f, -3223.15308f, -99.1642532f));
                vRotL.Add(new Vector3(-2.07133613e-13f, -4.42925028e-07f, -0.492275923f));

                sPropL.Add("ex_prop_crate_closed_mw");
                vPosL.Add(new Vector3(950.307861f, -3220.7998f, -99.1628189f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -178.038986f));

                sPropL.Add("ex_prop_crate_closed_mw");
                vPosL.Add(new Vector3(950.035156f, -3217.32056f, -99.160141f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 2.68975663f));

                sPropL.Add("ex_prop_crate_expl_bc");
                vPosL.Add(new Vector3(949.020935f, -3200.24316f, -99.1220703f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 5.27651787f));

                sPropL.Add("ex_prop_crate_expl_sc");
                vPosL.Add(new Vector3(949.278137f, -3203.00098f, -99.1454468f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 10.0468082f));

                sPropL.Add("gr_prop_gr_cratespile_01a");
                vPosL.Add(new Vector3(929.098389f, -3222.29175f, -99.2777481f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.417297f));

                sPropL.Add("gr_prop_gr_cratespile_01a");
                vPosL.Add(new Vector3(929.611938f, -3219.28589f, -99.2745285f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.03194451f));

                sPropL.Add("prop_drop_crate_01_set");
                vPosL.Add(new Vector3(929.013245f, -3210.37598f, -99.2264404f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 101.008926f));

                sPropL.Add("prop_drop_crate_01_set2");
                vPosL.Add(new Vector3(931.444763f, -3209.92188f, -99.2284088f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -80.2574539f));

                sPropL.Add("vw_prop_vw_crate_01a");
                vPosL.Add(new Vector3(933.557861f, -3209.54028f, -99.2673721f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -79.994873f));

                sPropL.Add("xm_prop_crates_rifles_02a");
                vPosL.Add(new Vector3(934.024841f, -3211.7522f, -99.2699127f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 8.31225395f));

                sPropL.Add("xm_prop_crates_rifles_02a");
                vPosL.Add(new Vector3(936.893616f, -3211.4563f, -99.2716751f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -173.019577f));

                sPropL.Add("xm_prop_moderncrate_xplv_01");
                vPosL.Add(new Vector3(945.536255f, -3212.79736f, -99.2793274f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -3.96463776f));

                sPropL.Add("xm_prop_moderncrate_xplv_01");
                vPosL.Add(new Vector3(947.168213f, -3211.93115f, -99.2796097f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -22.0485935f));

                sPropL.Add("xm_prop_moderncrate_xplv_01");
                vPosL.Add(new Vector3(946.567566f, -3207.75977f, -99.2750854f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -160.683304f));

                sPropL.Add("xm_prop_moderncrate_xplv_01");
                vPosL.Add(new Vector3(945.042114f, -3209.36426f, -99.2753983f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -173.392944f));

                sPropL.Add("ba_prop_battle_crates_pistols_01a");
                vPosL.Add(new Vector3(942.401062f, -3205.79224f, -99.2703323f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -165.774109f));

                sPropL.Add("ba_prop_battle_crates_rifles_01a");
                vPosL.Add(new Vector3(938.989929f, -3206.86011f, -99.2680817f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -160.951111f));

                sPropL.Add("ba_prop_battle_crates_rifles_02a");
                vPosL.Add(new Vector3(940.641968f, -3206.20337f, -99.2700729f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -164.002213f));

                sPropL.Add("ba_prop_battle_crates_rifles_04a");
                vPosL.Add(new Vector3(937.973145f, -3205.21729f, -99.266922f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 108.560875f));

                sPropL.Add("ba_prop_battle_crates_sam_01a");
                vPosL.Add(new Vector3(937.26886f, -3203.03003f, -99.2639694f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 107.373161f));

                sPropL.Add("ba_prop_battle_crates_wpn_mix_01a");
                vPosL.Add(new Vector3(943.891479f, -3192.37769f, -99.2632904f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -85.060463f));

                sPropL.Add("ba_prop_battle_crates_rifles_04a");
                vPosL.Add(new Vector3(934.506409f, -3193.46558f, -99.2636108f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 6.42923689f));

                sPropL.Add("ba_prop_battle_crates_rifles_03a");
                vPosL.Add(new Vector3(937.003723f, -3193.18628f, -99.2624283f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 6.32424831f));

                sPropL.Add("ba_prop_battle_crate_beer_03");
                vPosL.Add(new Vector3(927.762695f, -3206.66333f, -99.2577667f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 100.031738f));

                sPropL.Add("ba_prop_battle_crate_beer_04");
                vPosL.Add(new Vector3(925.228271f, -3205.81738f, -99.254364f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -172.730911f));

                sPropL.Add("ba_prop_battle_crate_beer_02");
                vPosL.Add(new Vector3(927.243408f, -3204.80859f, -99.2604523f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -173.045685f));

                for (int i = 0; i < vPosL.Count; i++)
                {
                    string sRanOb = sPropL[RandomX.RandInt(0, sPropL.Count - 1)];
                    Prop Proper = EntityBuild.BuildProp(sRanOb, vPosL[i], vRotL[i], true, true);
                    Proper.Position = new Vector3(Proper.Position.X, Proper.Position.Y, Proper.Position.Z - 0.10f);
                }

                EntityBuild.BuildProp("prop_rub_cabinet03",new Vector3(891.850f, -3248.301f, -99.283f),new Vector3(0f, 0f, -83.968f), true, true);
                EntityBuild.BuildProp("prop_rub_cabinet03",new Vector3(891.653f, -3246.798f, -99.272f),new Vector3(0.000f, 0.000f, -85.371f), true, true);
                EntityBuild.BuildProp("prop_rub_cabinet03",new Vector3(895.089f, -3241.101f, -99.275f),new Vector3(0f, 0f, -178.705f), true, true);
                EntityBuild.BuildProp("prop_rub_cabinet03",new Vector3(893.585f, -3241.478f, -99.267f),new Vector3(0f, 0f, -166.657f), true, true);
                EntityBuild.BuildProp("prop_rub_cabinet03",new Vector3(891.617f, -3245.264f, -99.264f),new Vector3(0f, 0f, -91.442f), true, true);
            }//bunker
            else if (iBuilding == 5)
            {
                List<Vector4> CarPos = new List<Vector4>
                {
                    new Vector4(954.955f, -3018.388f, -37.569f, -90.632f),
                    new Vector4(954.943f, -3023.602f, -37.569f, -90.634f),
                    new Vector4(954.886f, -3028.734f, -37.569f, -90.634f),
                    new Vector4(959.457f, -3035.815f, -37.569f, -0.168f),
                    new Vector4(963.581f, -3035.826f, -37.569f, -0.167f),
                    new Vector4(967.850f, -3035.839f, -37.569f, -0.167f),
                    new Vector4(971.922f, -3035.851f, -37.569f, -0.167f),
                    new Vector4(976.205f, -3035.865f, -37.569f, -0.167f),
                    new Vector4(980.129f, -3035.877f, -37.569f, -0.167f),
                    new Vector4(959.555f, -2990.787f, -40.327f, -0.739f),
                    new Vector4(977.944f, -2994.367f, -40.329f, 179.805f),
                    new Vector4(993.179f, -3026.992f, -37.569f, -0.047f),
                    new Vector4(998.498f, -3026.998f, -37.569f, -0.049f),
                    new Vector4(1004.130f, -3027.004f, -37.569f, -0.049f),
                    new Vector4(1009.266f, -3027.008f, -37.569f, -0.049f),
                    new Vector4(1001.576f, -2992.317f, -48.133f, 179.533f),
                    new Vector4(993.806f, -2992.360f, -48.131f, 179.533f),
                    new Vector4(986.030f, -2992.296f, -48.129f, 179.533f),
                    new Vector4(978.154f, -2992.232f, -48.131f, 179.533f),
                    new Vector4(962.571f, -2992.039f, -48.129f, -179.862f),
                    new Vector4(954.736f, -2992.160f, -48.131f, -179.862f),
                    new Vector4(946.958f, -2992.366f, -48.131f, 179.771f),
                    new Vector4(939.089f, -2992.334f, -48.130f, 179.771f),
                    new Vector4(954.826f, -3007.132f, -48.226f, -0.322f),
                    new Vector4(962.563f, -3007.173f, -48.229f, -0.788f),
                    new Vector4(970.383f, -3007.065f, -48.226f, -0.644f),
                    new Vector4(978.132f, -3007.153f, -48.226f, 0.898f)
                };

                for (int i = 0; i < CarPos.Count; i++)
                    EntityBuild.VehicleSpawn(new VehMods(ReturnStuff.AddRandomVeh(1), 7, false, true, ReturnStuff.FunPlates()), CarPos[i]);

            }//Carware
            else if (iBuilding == 15)
            {
                sPropL.Add("ch_prop_arcade_fortune_door_01a"); vPosL.Add(new Vector3(2727.873f, -371.969f, -48.388f)); vRotL.Add(new Vector3(0f, 0f, 0.094f));
                sPropL.Add("ch_prop_arcade_degenatron_01a"); vPosL.Add(new Vector3(2734.351f, -381.519f, -49.984f)); vRotL.Add(new Vector3(0f, 0f, -90.119f));
                sPropL.Add("ch_chint02_arcade_sheet2_002"); vPosL.Add(new Vector3(2733.842f, -377.755f, -49.981f)); vRotL.Add(new Vector3(0f, 0f, -90.116f));
                sPropL.Add("ch_prop_arcade_claw_01a"); vPosL.Add(new Vector3(2733.504f, -376.265f, -49.988f)); vRotL.Add(new Vector3(0f, 0f, -90.173f));
                sPropL.Add("ch_prop_arcade_claw_plush_01a"); vPosL.Add(new Vector3(2733.895f, -376.536f, -48.960f)); vRotL.Add(new Vector3(0f, 0f, -88.839f));
                sPropL.Add("ch_prop_arcade_claw_plush_02a"); vPosL.Add(new Vector3(2733.916f, -376.022f, -48.960f)); vRotL.Add(new Vector3(0f, 0f, -85.991f));
                sPropL.Add("ch_prop_arcade_claw_plush_03a"); vPosL.Add(new Vector3(2733.903f, -376.259f, -48.960f)); vRotL.Add(new Vector3(0f, 0f, -100.072f));
                sPropL.Add("ch_prop_arcade_claw_plush_04a"); vPosL.Add(new Vector3(2733.648f, -376.552f, -48.960f)); vRotL.Add(new Vector3(0f, 0f, -123.516f));
                sPropL.Add("ch_prop_arcade_claw_plush_05a"); vPosL.Add(new Vector3(2733.555f, -376.282f, -48.960f)); vRotL.Add(new Vector3(0f, 0f, -107.663f));
                sPropL.Add("ch_prop_arcade_claw_plush_06a"); vPosL.Add(new Vector3(2733.794f, -376.407f, -48.960f)); vRotL.Add(new Vector3(0f, 0f, -91.507f));
                sPropL.Add("ch_prop_arcade_claw_01a_c_d"); vPosL.Add(new Vector3(2733.813f, -376.006f, -48.251f)); vRotL.Add(new Vector3(0f, 0f, -89.118f));
                sPropL.Add("ch_prop_arcade_fortune_01a"); vPosL.Add(new Vector3(2733.848f, -375.053f, -49.988f)); vRotL.Add(new Vector3(0.000f, 0.000f, -89.554f));
                sPropL.Add("ch_prop_arcade_gun_01a"); vPosL.Add(new Vector3(2730.535f, -376.039f, -49.985f)); vRotL.Add(new Vector3(0f, 0f, 90.602f));
                sPropL.Add("ch_prop_arcade_invade_01a"); vPosL.Add(new Vector3(2734.343f, -382.450f, -49.984f)); vRotL.Add(new Vector3(0f, 0f, -89.450f));
                sPropL.Add("ch_prop_arcade_love_01a"); vPosL.Add(new Vector3(2733.111f, -386.772f, -49.988f)); vRotL.Add(new Vector3(0f, 0f, -136.149f));
                sPropL.Add("ch_prop_arcade_monkey_01a"); vPosL.Add(new Vector3(2734.347f, -383.349f, -49.984f)); vRotL.Add(new Vector3(0f, 0f, -89.193f));
                sPropL.Add("ch_prop_arcade_penetrator_01a"); vPosL.Add(new Vector3(2734.361f, -384.231f, -49.984f)); vRotL.Add(new Vector3(0f, 0f, -89.600f));
                sPropL.Add("ch_prop_arcade_race_01a"); vPosL.Add(new Vector3(2735.491f, -388.917f, -49.385f)); vRotL.Add(new Vector3(0f, 0f, -134.854f));
                sPropL.Add("ch_prop_arcade_race_car_01a"); vPosL.Add(new Vector3(2735.816f, -388.289f, -49.126f)); vRotL.Add(new Vector3(0f, 0f, -135.323f));
                sPropL.Add("ch_prop_arcade_race_car_01b"); vPosL.Add(new Vector3(2734.881f, -389.240f, -49.153f)); vRotL.Add(new Vector3(0f, 0f, -135.323f));
                sPropL.Add("ch_prop_arcade_space_01a"); vPosL.Add(new Vector3(2734.353f, -385.122f, -49.984f)); vRotL.Add(new Vector3(0f, 0f, -89.370f));
                sPropL.Add("prop_arcade_01"); vPosL.Add(new Vector3(2733.748f, -371.508f, -49.048f)); vRotL.Add(new Vector3(0f, 0f, -0.623f));
                sPropL.Add("ch_prop_arcade_wizard_01a"); vPosL.Add(new Vector3(2732.668f, -371.502f, -49.984f)); vRotL.Add(new Vector3(0f, 0f, -0.623f));
                sPropL.Add("ch_prop_arcade_space_01a"); vPosL.Add(new Vector3(2731.554f, -371.508f, -49.984f)); vRotL.Add(new Vector3(0f, 0f, 0.335f));

                for (int i = 0; i < vPosL.Count; i++)
                {
                    Prop Proper = EntityBuild.BuildProp(sPropL[i], vPosL[i], vRotL[i], true, true);
                }
            }//Arcade
            else if (iBuilding == 49)
            {
                EntityBuild.BuildProp("prop_magenta_door", new Vector3(91.987f, 3744.104f, 39.774f), new Vector3(0f, 0f, 70f), true, false);
                EntityBuild.BuildProp("prop_magenta_door", new Vector3(94.044f, 3749.808f, 39.774f), new Vector3(0f, 0f, 70f), true, false);
            }//Trailer
            else if (iBuilding == 50)
            {
                EntityBuild.BuildProp("v_ilev_mm_door", new Vector3(265.777f, -1001.561f, -99.955f), new Vector3(0f, 0f, 180.000f), true, true);
            }//lowendApp
            else if (iBuilding == 51)
            {
                EntityBuild.BuildProp("v_ilev_mm_door", new Vector3(347.162f, -1003.129f, -100.028f), new Vector3(0f, 0f, 180.000f), true, true);
            }//MidendApp
        }
        public void InternalMissionIPLs(int lod, Vector3 Vloc, int iVersion)
        {
            LoggerLight.LogThis("LoadInMissionIPLs, lod == " + lod);

            if (InternalLoad != -1)
            {
                if (Function.Call<bool>(Hash.IS_VALID_INTERIOR, InternalLoad))
                    Function.Call(Hash.UNPIN_INTERIOR, InternalLoad);

                for (int i = 0; i < InternalIPLS.Count; i++)
                {
                    if (Function.Call<bool>(Hash._IS_INTERIOR_PROP_ENABLED, InternalLoad, InternalIPLS[i]))
                        Function.Call(Hash._DISABLE_INTERIOR_PROP, InternalLoad, InternalIPLS[i]);
                }
                InternalIPLS.Clear();
                InternalLoad = -1;
                Script.Wait(1000);
            }
            bool bAltLoad = false;
            List<int> iColour = new List<int>();

            if (lod == 1)
            {
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "");
                InternalIPLS.Add("ex_exec_warehouse_placement_interior_1_int_warehouse_s_dlc_milo");//"Small Warehouse";
            }//small ware
            else if (lod == 2)
            {
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "");
                InternalIPLS.Add("ex_exec_warehouse_placement_interior_0_int_warehouse_m_dlc_milo");//"Medium Warehouse";
            }//mid ware
            else if (lod == 3)
            {
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "");
                InternalIPLS.Add("ex_exec_warehouse_placement_interior_2_int_warehouse_l_dlc_milo");//"Large Warehouse";
            }//lg ware
            else if (lod == 4)
            {
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "");
                InternalIPLS.Add("gr_grdlc_interior_placement_interior_1_grdlc_int_02_milo_");//"Bunker";
                InternalIPLS.Add("upgrade_bunker_set");
                InternalIPLS.Add("bunker_style_c");
                InternalIPLS.Add("office_upgrade_set");
                InternalIPLS.Add("gun_locker_upgrade");
                InternalIPLS.Add("security_upgrade");
                InternalIPLS.Add("standard_security_set");
                InternalIPLS.Add("Upgrade_Bunker_Set_More");
                InternalIPLS.Add("Gun_schematic_set");
                InternalIPLS.Add("gun_range_lights");
            }//bunker
            else if (lod == 5)
            {
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "");
                InternalIPLS.Add("imp_impexp_interior_placement_interior_1_impexp_intwaremed_milo_");//CarWare
                int iRan = RandomX.FindRandom("CarWareRand01", 1, 3);
                if (iRan == 1)
                    InternalIPLS.Add("basic_style_set");
                else if (iRan == 2)
                    InternalIPLS.Add("branded_style_set");
                else
                    InternalIPLS.Add("urban_style_set");
                //InternalIPLS.Add("car_floor_hatch");//CarWare
                //InternalIPLS.Add("door_blocker");//CarWare
                InternalIPLS.Add("imp_impexp_interior_placement_interior_3_impexp_int_02_milo_");//CarWare

            }//carware--new Vector3(994.5925, -3002.594, -39.64699)
            else if (lod == 6)
            {
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "");
            }//motel
            else if (lod == 15)
            {
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "ch_DLC_Arcade");
                int iRando = RandomX.RandInt(1, 9);
                if (iRando == 1)
                    InternalIPLS.Add("Entity_Set_Plushie_01");
                else if (iRando == 2)
                    InternalIPLS.Add("Entity_Set_Plushie_02");
                else if (iRando == 3)
                    InternalIPLS.Add("Entity_Set_Plushie_03");
                else if (iRando == 4)
                    InternalIPLS.Add("Entity_Set_Plushie_04");
                else if (iRando == 5)
                    InternalIPLS.Add("Entity_Set_Plushie_05");
                else if (iRando == 6)
                    InternalIPLS.Add("Entity_Set_Plushie_06");
                else if (iRando == 7)
                    InternalIPLS.Add("Entity_Set_Plushie_07");
                else if (iRando == 8)
                    InternalIPLS.Add("Entity_Set_Plushie_08");
                else
                    InternalIPLS.Add("Entity_Set_Plushie_09");

                InternalIPLS.Add("Set_Plan_Cockroaches");
                InternalIPLS.Add("Set_Plan_Drone_Parts");
                InternalIPLS.Add("Set_Plan_Electric_Drill");
                InternalIPLS.Add("Set_Plan_Fireman_Helmet");
                InternalIPLS.Add("Set_Plan_Gruppe_Sechs_Outfits");
                InternalIPLS.Add("Set_Plan_Hacking_Device");
                InternalIPLS.Add("Set_Plan_Plastic_Explosives");
                InternalIPLS.Add("Set_Plan_Stealth_Outfits");
                InternalIPLS.Add("Set_Plan_Swipe_Card_01a");
                InternalIPLS.Add("Set_Plan_Swipe_Card_01b");

                iRando = RandomX.RandInt(1, 2);
                if (iRando == 1)
                    InternalIPLS.Add("Set_Plan_Vault_Drill");
                else
                    InternalIPLS.Add("Set_Plan_Vault_Drill_Alt");

                InternalIPLS.Add("Set_Plan_Vault_KeyCard_01a");

                iRando = RandomX.RandInt(1, 2);
                if (iRando == 1)
                    InternalIPLS.Add("Set_Plan_Vault_Laser");
                else
                    InternalIPLS.Add("Set_Plan_Vault_Laser_Alt");

                iRando = RandomX.RandInt(1, 3);
                if (iRando == 1)
                    InternalIPLS.Add("Entity_set_arcade_set_ceiling_beams");
                else if (iRando == 2)
                    InternalIPLS.Add("Entity_set_arcade_set_ceiling_flat");
                else
                    InternalIPLS.Add("Entity_set_arcade_set_ceiling_mirror");

                //InternalIPLS.Add("Entity_set_arcade_set_derelict");
                //InternalIPLS.Add("Entity_set_arcade_set_derelict_carpet");
                //InternalIPLS.Add("Entity_set_arcade_set_derelict_clean_up");

                InternalIPLS.Add("Entity_set_arcade_set_streetx4");
                InternalIPLS.Add("Entity_set_arcade_set_trophy_brawler");
                InternalIPLS.Add("Entity_set_arcade_set_trophy_cabs");
                InternalIPLS.Add("Entity_set_arcade_set_trophy_claw");
                InternalIPLS.Add("Entity_set_arcade_set_trophy_gunner");
                InternalIPLS.Add("Entity_set_arcade_set_trophy_king");
                InternalIPLS.Add("Entity_set_arcade_set_trophy_love");
                InternalIPLS.Add("Entity_set_arcade_set_trophy_monkey");
                InternalIPLS.Add("Entity_set_arcade_set_trophy_patriot");
                InternalIPLS.Add("Entity_set_arcade_set_trophy_racer");
                InternalIPLS.Add("Entity_set_arcade_set_trophy_retro");
                InternalIPLS.Add("Entity_set_arcade_set_trophy_strife");
                InternalIPLS.Add("Entity_set_arcade_set_trophy_teller");
                InternalIPLS.Add("Entity_set_big_screen");
                InternalIPLS.Add("Entity_set_constant_geometry");

                iRando = RandomX.RandInt(1, 8);
                if (iRando == 1)
                    InternalIPLS.Add("Entity_set_floor_option_01");
                else if (iRando == 2)
                    InternalIPLS.Add("Entity_set_floor_option_02");
                else if (iRando == 3)
                    InternalIPLS.Add("Entity_set_floor_option_03");
                else if (iRando == 4)
                    InternalIPLS.Add("Entity_set_floor_option_04");
                else if (iRando == 5)
                    InternalIPLS.Add("Entity_set_floor_option_05");
                else if (iRando == 6)
                    InternalIPLS.Add("Entity_set_floor_option_06");
                else if (iRando == 7)
                    InternalIPLS.Add("Entity_set_floor_option_07");
                else
                    InternalIPLS.Add("Entity_set_floor_option_08");

                InternalIPLS.Add("Entity_set_hip_light_no_neon");

                iRando = RandomX.RandInt(1, 8);
                if (iRando == 1)
                    InternalIPLS.Add("Entity_set_mural_neon_option_01");
                else if (iRando == 2)
                    InternalIPLS.Add("Entity_set_mural_neon_option_02");
                else if (iRando == 3)
                    InternalIPLS.Add("Entity_set_mural_neon_option_03");
                else if (iRando == 4)
                    InternalIPLS.Add("Entity_set_mural_neon_option_04");
                else if (iRando == 5)
                    InternalIPLS.Add("Entity_set_mural_neon_option_05");
                else if (iRando == 6)
                    InternalIPLS.Add("Entity_set_mural_neon_option_06");
                else if (iRando == 7)
                    InternalIPLS.Add("Entity_set_mural_neon_option_07");
                else
                    InternalIPLS.Add("Entity_set_mural_neon_option_08");

                iRando = RandomX.RandInt(1, 8);
                if (iRando == 1)
                    InternalIPLS.Add("Entity_set_mural_option_01");
                else if (iRando == 2)
                    InternalIPLS.Add("Entity_set_mural_option_02");
                else if (iRando == 3)
                    InternalIPLS.Add("Entity_set_mural_option_03");
                else if (iRando == 4)
                    InternalIPLS.Add("Entity_set_mural_option_04");
                else if (iRando == 5)
                    InternalIPLS.Add("Entity_set_mural_option_05");
                else if (iRando == 6)
                    InternalIPLS.Add("Entity_set_mural_option_06");
                else if (iRando == 7)
                    InternalIPLS.Add("Entity_set_mural_option_07");
                else
                    InternalIPLS.Add("Entity_set_mural_option_08");

                InternalIPLS.Add("Entity_set_ret_light_no_neon");
                InternalIPLS.Add("Entity_set_screens");
                InternalIPLS.Add("Set_Plan_arcade_x4");
                InternalIPLS.Add("Set_Plan_bed");
                //InternalIPLS.Add("Set_Plan_no_bed");
                InternalIPLS.Add("Set_Plan_casino");
                InternalIPLS.Add("Set_Plan_computer");
                InternalIPLS.Add("Set_Plan_garage");
                InternalIPLS.Add("Set_Plan_hacker");
                InternalIPLS.Add("Set_Plan_keypad");
                InternalIPLS.Add("Set_Plan_mechanic");
                InternalIPLS.Add("Set_Plan_plans");
                InternalIPLS.Add("Set_Plan_pre_setup");
                InternalIPLS.Add("Set_Plan_scribbles");
                InternalIPLS.Add("Set_Plan_setup");
                InternalIPLS.Add("Set_Plan_vault");
                InternalIPLS.Add("Set_Plan_wall");
                InternalIPLS.Add("Set_Plan_weapons");
            }//Arcade
            else if (lod == 49)
            {

            }//Trailer
            else if (lod == 50)
            {
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "");
            }//lowendApp
            else if (lod == 51)
            {
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "");
            }//MidEndApp
            else if (lod == 52)
            {
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "");
            }//2CarGar
            else if (lod == 53)
            {
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "");
            }//6CarGar
            else if (lod == 54)
            {
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "");
            }//10CarGar
            else if (lod == 55)
            {
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "");
                int iR = RandomX.RandInt(1, 8);
                if (iR == 1)
                    InternalIPLS.Add("apa_v_mp_h_01_b");
                else if (iR == 2)
                    InternalIPLS.Add("apa_v_mp_h_02_b");
                else if (iR == 3)
                    InternalIPLS.Add("apa_v_mp_h_03_b");
                else if (iR == 4)
                    InternalIPLS.Add("apa_v_mp_h_04_b");
                else if (iR == 5)
                    InternalIPLS.Add("apa_v_mp_h_05_b");
                else if (iR == 6)
                    InternalIPLS.Add("apa_v_mp_h_06_b");
                else if (iR == 7)
                    InternalIPLS.Add("apa_v_mp_h_07_b");
                else
                    InternalIPLS.Add("apa_v_mp_h_08_b");

            }//App--EclipseCustom
            else if (lod == 56)
            {
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "");
            }//App-- 4 Integrity Way, Apt 28 	Vector3 Xmark = Vector3(-18.07856, -583.6725, 79.46569);//4 Integrity Way, Apt 30 	Vector3 Xmark = Vector3(-35.31277, -580.4199, 88.71221);
            else if (lod == 57)
            {
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "");
            }//App--Dell Perro Heights, Apt 4 	Vector3 Xmark = Vector3(-1468.14, -541.815, 73.4442);//Dell Perro Heights, Apt 7 	Vector3 Xmark = Vector3(-1477.14, -538.7499, 55.5264);
            else if (lod == 58)
            {
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "");
            }//Richard Majestic, Apt 2 	Vector3 Xmark = Vector3(-915.811, -379.432, 113.6748);
            else if (lod == 59)
            {
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "");
            }//Tinsel Towers, Apt 42 	Vector3 Xmark = Vector3(-614.86, 40.6783, 97.60007);
            else if (lod == 60)
            {
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "");
            }//3655 Wild Oats Drive 	Vector3 Xmark = Vector3(-169.286, 486.4938, 137.4436);
            else if (lod == 61)
            {
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "");
            }//2044 North Conker Avenue 	Vector3 Xmark = Vector3(340.9412, 437.1798, 149.3925);
            else if (lod == 62)
            {
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "");
            }//2045 North Conker Avenue 	Vector3 Xmark = Vector3(373.023, 416.105, 145.7006);
            else if (lod == 63)
            {
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "");
            }//2874 Hillcrest Avenue 	Vector3 Xmark = Vector3(-852.9005,694.7808,148.0741);
            else if (lod == 64)
            {
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "");
            }//2868 Hillcrest Avenue	Vector3 Xmark = Vector3(-753.4206, 620.2255, 141.8517);
            else if (lod == 65)
            {
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "");
            }//2866 Hillcrest Avenue	Vector3 Xmark = Vector3(-733.4767, 593.2111, 141.5178);
            else if (lod == 66)
            {
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "");
            }//2677 Whispymound Drive 	Vector3 Xmark = Vector3(120.5, 549.952, 184.097);
            else if (lod == 67)
            {
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "");
            }//2133 Mad Wayne Thunder 	Vector3 Xmark = Vector3(-1288, 440.748, 97.69459); 
            else if (lod == 68)
            {
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "");
            }//2117 Milton Road    Vector3 Xmark = Vector3(-559.6165,663.6034,144.5187);
            else if (lod == 69)
            {
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "");
            }//2862 Hillcrest Avenue  Vector3 Xmark = Vector3 - 685.5753, 595.7667, 143.0528);
            else if (lod == 70)
            {
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "");
            }//Weazel Plaza
            else if (lod == 71)
            {
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "");
            }//Alta
            else if (lod == 97)
            {
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "");
                InternalIPLS.Add("bkr_biker_interior_placement_interior_0_biker_dlc_int_01_milo");
                iColour.Add(-1);

                int iRanColur = RandomX.RandInt(0, 9);

                if (RandomX.RandInt(1, 10) < 5)
                    InternalIPLS.Add("walls_01");
                else
                    InternalIPLS.Add("walls_02");
                iColour.Add(iRanColur);

                if (RandomX.RandInt(1, 10) < 5)
                    InternalIPLS.Add("furnishings_01");

                else
                    InternalIPLS.Add("furnishings_02");
                iColour.Add(iRanColur);

                if (RandomX.RandInt(1, 10) < 5)
                    InternalIPLS.Add("decorative_01");
                else
                    InternalIPLS.Add("decorative_02");
                iColour.Add(-1);

                int RanNum = RandomX.RandInt(1, 9);

                if (RanNum == 1)
                    InternalIPLS.Add("mural_01");
                else if (RanNum == 2)
                    InternalIPLS.Add("mural_02");
                else if (RanNum == 3)
                    InternalIPLS.Add("mural_03");
                else if (RanNum == 4)
                    InternalIPLS.Add("mural_04");
                else if (RanNum == 5)
                    InternalIPLS.Add("mural_05");
                else if (RanNum == 6)
                    InternalIPLS.Add("mural_06");
                else if (RanNum == 7)
                    InternalIPLS.Add("mural_07");
                else if (RanNum == 8)
                    InternalIPLS.Add("mural_08");
                else if (RanNum == 9)
                    InternalIPLS.Add("mural_09");
                iColour.Add(-1);

                InternalIPLS.Add("gun_locker");
                iColour.Add(-1);

                InternalIPLS.Add("mod_booth");
                iColour.Add(-1);

                InternalIPLS.Add("meth_stash1");
                iColour.Add(-1);

                InternalIPLS.Add("cash_stash1");
                iColour.Add(-1);

                InternalIPLS.Add("weed_stash1");
                iColour.Add(-1);

                InternalIPLS.Add("coke_stash1");
                iColour.Add(-1);

                InternalIPLS.Add("counterfeit_stash1");
                iColour.Add(-1);

                InternalIPLS.Add("id_stash1");
                iColour.Add(-1);

            }//Cluhouse1
            else if (lod == 98)
            {
                int iRanColur = RandomX.RandInt(1, 9);
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "");
                InternalIPLS.Add("bkr_biker_interior_placement_interior_1_biker_dlc_int_02_milo");
                iColour.Add(iRanColur);

                if (RandomX.RandInt(1, 10) < 5)
                    InternalIPLS.Add("walls_01");
                else
                    InternalIPLS.Add("walls_02");
                iColour.Add(iRanColur);

                if (RandomX.RandInt(1, 10) < 5)
                    InternalIPLS.Add("furnishings_01");

                else
                    InternalIPLS.Add("furnishings_02");
                iColour.Add(iRanColur);

                if (RandomX.RandInt(1, 10) < 5)
                    InternalIPLS.Add("decorative_01");
                else
                    InternalIPLS.Add("decorative_02");
                iColour.Add(-1);

                int RanNum = RandomX.RandInt(1, 9);

                if (RanNum == 1)
                    InternalIPLS.Add("mural_01");
                else if (RanNum == 2)
                    InternalIPLS.Add("mural_02");
                else if (RanNum == 3)
                    InternalIPLS.Add("mural_03");
                else if (RanNum == 4)
                    InternalIPLS.Add("mural_04");
                else if (RanNum == 5)
                    InternalIPLS.Add("mural_05");
                else if (RanNum == 6)
                    InternalIPLS.Add("mural_06");
                else if (RanNum == 7)
                    InternalIPLS.Add("mural_07");
                else if (RanNum == 8)
                    InternalIPLS.Add("mural_08");
                else if (RanNum == 9)
                    InternalIPLS.Add("mural_09");
                iColour.Add(-1);

                InternalIPLS.Add("gun_locker");
                iColour.Add(-1);

                InternalIPLS.Add("mod_booth");
                iColour.Add(-1);

                InternalIPLS.Add("meth_stash1");
                iColour.Add(-1);

                InternalIPLS.Add("cash_stash1");
                iColour.Add(-1);

                InternalIPLS.Add("weed_stash1");
                iColour.Add(-1);

                InternalIPLS.Add("coke_stash1");
                iColour.Add(-1);

                InternalIPLS.Add("counterfeit_stash1");
                iColour.Add(-1);

                InternalIPLS.Add("id_stash1");
                iColour.Add(-1);
            }//Cluhouse2
            else if (lod == 100)
            {
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "");
                InternalIPLS.Add("bkr_biker_interior_placement_interior_6_biker_dlc_int_ware05_milo_");//"Documents";
                InternalIPLS.Add("production");
                InternalIPLS.Add("clutter");

                InternalIPLS.Add("equipment_upgrade");
                InternalIPLS.Add("security_high");
                InternalIPLS.Add("interior_upgrade");
                InternalIPLS.Add("Chair01");
                InternalIPLS.Add("Chair02");
                InternalIPLS.Add("Chair03");
                InternalIPLS.Add("Chair04");
                InternalIPLS.Add("Chair05");
                InternalIPLS.Add("Chair06");
                InternalIPLS.Add("Chair07");
            }//Forg
            else if (lod == 101)
            {
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "");
                InternalIPLS.Add("bkr_biker_interior_placement_interior_4_biker_dlc_int_ware03_milo_");//"Coke";
                if (iVersion == 1)
                {
                    InternalIPLS.Add("coke_cut_01");
                    InternalIPLS.Add("coke_cut_02");
                    InternalIPLS.Add("coke_cut_03");
                    InternalIPLS.Add("security_high");
                    InternalIPLS.Add("production_upgrade");
                    InternalIPLS.Add("equipment_upgrade");
                    InternalIPLS.Add("coke_cut_04");
                    InternalIPLS.Add("coke_cut_05");
                    InternalIPLS.Add("set_up");
                    InternalIPLS.Add("table_equipment_upgrade");
                    InternalIPLS.Add("coke_press_upgrade");
                }
            }//Coke
            else if (lod == 102)
            {
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "");
                InternalIPLS.Add("bkr_biker_interior_placement_interior_3_biker_dlc_int_ware02_milo_");//"Weed";
                if (iVersion == 1)
                {
                    InternalIPLS.Add("weed_growtha_stage3");
                    InternalIPLS.Add("weed_upgrade_equip");
                    InternalIPLS.Add("weed_drying");
                    InternalIPLS.Add("weed_growthb_stage2");
                    InternalIPLS.Add("weed_growthc_stage1");
                    InternalIPLS.Add("weed_growthd_stage3");
                    InternalIPLS.Add("weed_growthe_stage3");
                    InternalIPLS.Add("weed_growthf_stage2");
                    InternalIPLS.Add("weed_growthg_stage1");
                    InternalIPLS.Add("weed_growthh_stage2");
                    InternalIPLS.Add("weed_growthi_stage3");
                    InternalIPLS.Add("weed_security_upgrade");
                    InternalIPLS.Add("weed_production");
                    InternalIPLS.Add("weed_hosea");
                    InternalIPLS.Add("weed_hoseb");
                    InternalIPLS.Add("weed_hosec");
                    InternalIPLS.Add("weed_hosed");
                    InternalIPLS.Add("weed_hosee");
                    InternalIPLS.Add("weed_hosef");
                    InternalIPLS.Add("weed_hoseg");
                    InternalIPLS.Add("weed_hoseh");
                    InternalIPLS.Add("weed_hosei");
                    InternalIPLS.Add("light_growtha_stage23_upgrade");
                    InternalIPLS.Add("light_growthb_stage23_upgrade");
                    InternalIPLS.Add("light_growthc_stage23_upgrade");
                    InternalIPLS.Add("light_growthd_stage23_upgrade");
                    InternalIPLS.Add("light_growthe_stage23_upgrade");
                    InternalIPLS.Add("light_growthf_stage23_upgrade");
                    InternalIPLS.Add("light_growthg_stage23_upgrade");
                    InternalIPLS.Add("light_growthh_stage23_upgrade");
                    InternalIPLS.Add("light_growthi_stage23_upgrade");
                    InternalIPLS.Add("weed_chairs");
                }
            }//Weed
            else if (lod == 103)
            {
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "");
                InternalIPLS.Add("bkr_biker_interior_placement_interior_5_biker_dlc_int_ware04_milo_");//"Cash";
                if (iVersion == 1)
                {
                    InternalIPLS.Add("counterfeit_security");
                    InternalIPLS.Add("counterfeit_cashpile20a");
                    InternalIPLS.Add("counterfeit_cashpile100b");
                    InternalIPLS.Add("counterfeit_cashpile100c");
                    InternalIPLS.Add("counterfeit_cashpile100d");
                    InternalIPLS.Add("counterfeit_setup");
                    InternalIPLS.Add("counterfeit_upgrade_equip");
                    InternalIPLS.Add("dryera_on");
                    InternalIPLS.Add("dryerb_open");
                    InternalIPLS.Add("dryerc_on");
                    InternalIPLS.Add("dryerd_off");
                    InternalIPLS.Add("money_cutter");
                    InternalIPLS.Add("special_chairs");
                }
            }//Cash
            else if (lod == 104)
            {
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "");
                InternalIPLS.Add("bkr_biker_interior_placement_interior_2_biker_dlc_int_ware01_milo_");//"Meth";
                if (iVersion == 1)
                {
                    InternalIPLS.Add("meth_lab_upgrade");
                    InternalIPLS.Add("meth_lab_production");
                    InternalIPLS.Add("meth_lab_security_high");
                    InternalIPLS.Add("meth_lab_setup");
                }
            }//Meth
            else if (lod == 250)
            {
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "");
                InternalIPLS.Add("entity_set_meet_lights");
            }//Carball-CarMeatInt
            else if (lod == 251)
            {
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "sm_smugdlc_int_01");

                InternalIPLS.Add("sm_smugdlc_interior_placement");
                iColour.Add(-1);
                InternalIPLS.Add("sm_smugdlc_interior_placement_interior_0_smugdlc_int_01_milo_");
                iColour.Add(-1);

                int iRanColur = RandomX.RandInt(1, 5);

                int iRandG = RandomX.RandInt(1, 3);
                if (iRandG == 1)
                    InternalIPLS.Add("set_lighting_hangar_a");
                else if (iRandG == 2)
                    InternalIPLS.Add("set_lighting_hangar_b");
                else
                    InternalIPLS.Add("set_lighting_hangar_c");
                iColour.Add(-1);
                InternalIPLS.Add("set_tint_shell");
                iColour.Add(iRanColur);
                InternalIPLS.Add("set_crane_tint﻿");
                iColour.Add(iRanColur);
                InternalIPLS.Add("set_modarea");
                iColour.Add(iRanColur);
                InternalIPLS.Add("set_lighting_tint_props");
                iColour.Add(iRanColur);

                iRandG = RandomX.RandInt(1, 2);
                if (iRandG == 1)
                {
                    InternalIPLS.Add("set_floor_1");
                    iColour.Add(-1);
                }
                else
                {
                    InternalIPLS.Add("set_floor_2");
                    iColour.Add(iRanColur);
                }

                iRandG = RandomX.RandInt(1, 9);
                if (iRandG == 1)
                    InternalIPLS.Add("set_floor_decal_1");
                else if (iRandG == 2)
                    InternalIPLS.Add("set_floor_decal_2");
                else if (iRandG == 3)
                    InternalIPLS.Add("set_floor_decal_3");
                else if (iRandG == 4)
                    InternalIPLS.Add("set_floor_decal_4");
                else if (iRandG == 5)
                    InternalIPLS.Add("set_floor_decal_5");
                else if (iRandG == 6)
                    InternalIPLS.Add("set_floor_decal_6");
                else if (iRandG == 7)
                    InternalIPLS.Add("set_floor_decal_7");
                else if (iRandG == 8)
                    InternalIPLS.Add("set_floor_decal_8");
                else
                    InternalIPLS.Add("set_floor_decal_9");
                iColour.Add(iRanColur);

                iRandG = RandomX.RandInt(1, 3);
                if (iRandG == 1)
                    InternalIPLS.Add("set_office_basic");
                else if (iRandG == 2)
                    InternalIPLS.Add("set_office_traditional");
                else
                    InternalIPLS.Add("set_office_modern");
                iColour.Add(-1);

                iRandG = RandomX.RandInt(1, 10);
                if (iRandG == 1)
                    InternalIPLS.Add("set_lighting_wall_tint01");
                else if (iRandG == 2)
                    InternalIPLS.Add("set_lighting_wall_tint02");
                else if (iRandG == 3)
                    InternalIPLS.Add("set_lighting_wall_tint03");
                else if (iRandG == 4)
                    InternalIPLS.Add("set_lighting_wall_tint04");
                else if (iRandG == 5)
                    InternalIPLS.Add("set_lighting_wall_tint05");
                else if (iRandG == 6)
                    InternalIPLS.Add("set_lighting_wall_tint06");
                else if (iRandG == 7)
                    InternalIPLS.Add("set_lighting_wall_tint07");
                else if (iRandG == 8)
                    InternalIPLS.Add("set_lighting_wall_tint08");
                else if (iRandG == 9)
                    InternalIPLS.Add("set_lighting_wall_tint09");
                else
                    InternalIPLS.Add("set_lighting_wall_neutral");
                iColour.Add(-1);
            }//Hanger
            else if (lod == 252)
            {
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "");
                InternalIPLS.Add("ch_int_placement_ch_interior_7_dlc_casino_utility_milo_");
                InternalIPLS.Add("ch_int_placement_ch_interior_0_dlc_casino_heist_milo_");
                InternalIPLS.Add("ch_int_placement_ch_interior_3_dlc_casino_back_milo_");
                InternalIPLS.Add("ch_int_placement_ch_interior_4_dlc_casino_hotel_milo_");
                InternalIPLS.Add("ch_int_placement_ch_interior_6_dlc_casino_vault_milo_");
                InternalIPLS.Add("vw_casino_main﻿");
                InternalIPLS.Add("vw_casino_carpark");
                InternalIPLS.Add("vw_casino_penthouse");
                bAltLoad = true;
            }//Casino
            else if (lod == 253)
            {
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "");
                InternalIPLS.Add("xm_x17dlc_int_placement");
                iColour.Add(-1);
                InternalIPLS.Add("xm_x17dlc_int_placement_interior_0_x17dlc_int_base_ent_milo_");
                iColour.Add(-1);
                InternalIPLS.Add("xm_x17dlc_int_placement_interior_10_x17dlc_int_tun_straight_milo_");
                iColour.Add(-1);
                InternalIPLS.Add("xm_x17dlc_int_placement_interior_11_x17dlc_int_tun_slope_flat_milo_");
                iColour.Add(-1);
                InternalIPLS.Add("xm_x17dlc_int_placement_interior_12_x17dlc_int_tun_flat_slope_milo_");
                iColour.Add(-1);
                InternalIPLS.Add("xm_x17dlc_int_placement_interior_13_x17dlc_int_tun_30d_r_milo_");
                iColour.Add(-1);
                InternalIPLS.Add("xm_x17dlc_int_placement_interior_14_x17dlc_int_tun_30d_l_milo_");
                iColour.Add(-1);
                InternalIPLS.Add("xm_x17dlc_int_placement_interior_15_x17dlc_int_tun_straight_milo_");
                iColour.Add(-1);
                InternalIPLS.Add("xm_x17dlc_int_placement_interior_16_x17dlc_int_tun_straight_milo_");
                iColour.Add(-1);
                InternalIPLS.Add("xm_x17dlc_int_placement_interior_17_x17dlc_int_tun_slope_flat_milo_");
                iColour.Add(-1);
                InternalIPLS.Add("xm_x17dlc_int_placement_interior_18_x17dlc_int_tun_slope_flat_milo_");
                iColour.Add(-1);
                InternalIPLS.Add("xm_x17dlc_int_placement_interior_19_x17dlc_int_tun_flat_slope_milo_");
                iColour.Add(-1);
                InternalIPLS.Add("xm_x17dlc_int_placement_interior_1_x17dlc_int_base_loop_milo_");
                iColour.Add(-1);
                InternalIPLS.Add("xm_x17dlc_int_placement_interior_20_x17dlc_int_tun_flat_slope_milo_");
                iColour.Add(-1);
                InternalIPLS.Add("xm_x17dlc_int_placement_interior_21_x17dlc_int_tun_30d_r_milo_");
                iColour.Add(-1);
                InternalIPLS.Add("xm_x17dlc_int_placement_interior_22_x17dlc_int_tun_30d_r_milo_");
                iColour.Add(-1);
                InternalIPLS.Add("xm_x17dlc_int_placement_interior_23_x17dlc_int_tun_30d_r_milo_");
                iColour.Add(-1);
                InternalIPLS.Add("xm_x17dlc_int_placement_interior_24_x17dlc_int_tun_30d_r_milo_");
                iColour.Add(-1);
                InternalIPLS.Add("xm_x17dlc_int_placement_interior_25_x17dlc_int_tun_30d_l_milo_");
                iColour.Add(-1);
                InternalIPLS.Add("xm_x17dlc_int_placement_interior_26_x17dlc_int_tun_30d_l_milo_");
                iColour.Add(-1);
                InternalIPLS.Add("xm_x17dlc_int_placement_interior_27_x17dlc_int_tun_30d_l_milo_");
                iColour.Add(-1);
                InternalIPLS.Add("xm_x17dlc_int_placement_interior_28_x17dlc_int_tun_30d_l_milo_");
                iColour.Add(-1);
                InternalIPLS.Add("xm_x17dlc_int_placement_interior_29_x17dlc_int_tun_30d_l_milo_");
                iColour.Add(-1);
                InternalIPLS.Add("xm_x17dlc_int_placement_interior_2_x17dlc_int_bse_tun_milo_");
                iColour.Add(-1);
                InternalIPLS.Add("xm_x17dlc_int_placement_interior_30_v_apart_midspaz_milo_");
                iColour.Add(-1);
                InternalIPLS.Add("xm_x17dlc_int_placement_interior_31_v_studio_lo_milo_");
                iColour.Add(-1);
                InternalIPLS.Add("xm_x17dlc_int_placement_interior_32_v_garagem_milo_");
                iColour.Add(-1);
                InternalIPLS.Add("xm_x17dlc_int_placement_interior_33_x17dlc_int_02_milo_");
                iColour.Add(-1);
                InternalIPLS.Add("xm_x17dlc_int_placement_interior_34_x17dlc_int_lab_milo_");
                iColour.Add(-1);
                InternalIPLS.Add("xm_x17dlc_int_placement_interior_35_x17dlc_int_tun_entry_milo_");
                iColour.Add(-1);
                InternalIPLS.Add("xm_x17dlc_int_placement_interior_3_x17dlc_int_base_milo_");
                iColour.Add(-1);
                InternalIPLS.Add("xm_x17dlc_int_placement_interior_4_x17dlc_int_facility_milo_");
                iColour.Add(-1);
                InternalIPLS.Add("xm_x17dlc_int_placement_interior_5_x17dlc_int_facility2_milo_");
                iColour.Add(-1);
                InternalIPLS.Add("xm_x17dlc_int_placement_interior_6_x17dlc_int_silo_01_milo_");
                iColour.Add(-1);
                InternalIPLS.Add("xm_x17dlc_int_placement_interior_7_x17dlc_int_silo_02_milo_");
                iColour.Add(-1);
                InternalIPLS.Add("xm_x17dlc_int_placement_interior_8_x17dlc_int_sub_milo_");
                iColour.Add(-1);
                InternalIPLS.Add("xm_x17dlc_int_placement_interior_9_x17dlc_int_01_milo_");
                iColour.Add(-1);
                InternalIPLS.Add("xm_x17dlc_int_placement_strm_0");
                iColour.Add(-1);

                int iRanColur = RandomX.RandInt(1, 10);
                InternalIPLS.Add("set_int_02_shell");
                iColour.Add(iRanColur);

                int iRandG = RandomX.RandInt(1, 9);
                if (iRandG == 1)
                    InternalIPLS.Add("set_int_02_decal_01");
                else if (iRandG == 2)
                    InternalIPLS.Add("set_int_02_decal_02");
                else if (iRandG == 3)
                    InternalIPLS.Add("set_int_02_decal_03");
                else if (iRandG == 4)
                    InternalIPLS.Add("set_int_02_decal_04");
                else if (iRandG == 5)
                    InternalIPLS.Add("set_int_02_decal_05");
                else if (iRandG == 6)
                    InternalIPLS.Add("set_int_02_decal_06");
                else if (iRandG == 7)
                    InternalIPLS.Add("set_int_02_decal_07");
                else if (iRandG == 8)
                    InternalIPLS.Add("set_int_02_decal_08");
                else
                    InternalIPLS.Add("set_int_02_decal_09");
                iColour.Add(-1);

                iRandG = RandomX.RandInt(1, 3);
                if (iRandG == 1)
                    InternalIPLS.Add("set_int_02_trophy1");
                else if (iRandG == 2)
                    InternalIPLS.Add("set_int_02_trophy_iaa");
                else
                    InternalIPLS.Add("set_int_02_trophy_sub");
                iColour.Add(iRanColur);

                InternalIPLS.Add("set_int_02_cannon﻿");
                iColour.Add(-1);

                InternalIPLS.Add("set_int_02_no_security﻿");
                iColour.Add(-1);

                iRandG = RandomX.RandInt(1, 3);
                if (iRandG == 1)
                    InternalIPLS.Add("set_int_02_lounge1");
                else if (iRandG == 2)
                    InternalIPLS.Add("set_int_02_lounge2");
                else
                    InternalIPLS.Add("set_int_02_lounge3");
                iColour.Add(-1);

                iRandG = RandomX.RandInt(1, 3);
                if (iRandG == 1)
                    InternalIPLS.Add("set_int_02_sleep");
                else if (iRandG == 2)
                    InternalIPLS.Add("set_int_02_sleep2");
                else
                    InternalIPLS.Add("set_int_02_sleep3");
                iColour.Add(-1);

                iRandG = RandomX.RandInt(1, 5);
                if (iRandG == 1)
                    InternalIPLS.Add("set_int_02_clutter1");
                else if (iRandG == 2)
                    InternalIPLS.Add("set_int_02_clutter2");
                else if (iRandG == 3)
                    InternalIPLS.Add("set_int_02_clutter3");
                else if (iRandG == 4)
                    InternalIPLS.Add("set_int_02_clutter4");
                else
                    InternalIPLS.Add("set_int_02_clutter5");
                iColour.Add(-1);

            }//Facility
            else if (lod < 310 && lod > 299)
            {
                Vloc = new Vector3(-1604.664f, -3012.583f, -79.9999f);
                InternalLoad = ReturnStuff.AppeyNess(Vloc, "ba_dlc_int_01_ba");

                InternalIPLS.Add("ba_int_placement_ba_interior_0_dlc_int_01_ba_milo_");
                InternalIPLS.Add("Int01_ba_security_upgrade");
                InternalIPLS.Add("Int01_ba_equipment_setup");
                int iRandG = RandomX.FindRandom("LoadInt01", 1, 3);
                if (iRandG == 1)
                    InternalIPLS.Add("Int01_ba_Style01");
                else if (iRandG == 2)
                    InternalIPLS.Add("Int01_ba_Style02");
                else
                    InternalIPLS.Add("Int01_ba_Style03");

                InternalIPLS.Add("int01_ba_lights_screen");
                InternalIPLS.Add("Int01_ba_Screen");
                InternalIPLS.Add("Int01_ba_bar_content");

                iRandG = RandomX.RandInt(1, 3);
                if (iRandG == 1)
                    InternalIPLS.Add("Int01_ba_booze_01");
                else if (iRandG == 2)
                    InternalIPLS.Add("Int01_ba_booze_02");
                else
                    InternalIPLS.Add("Int01_ba_booze_03");

                iRandG = RandomX.RandInt(1, 4);
                if (iRandG == 1)
                    InternalIPLS.Add("Int01_ba_dj01");
                else if (iRandG == 2)
                    InternalIPLS.Add("Int01_ba_dj02");
                else if (iRandG == 3)
                    InternalIPLS.Add("Int01_ba_dj03");
                else
                    InternalIPLS.Add("Int01_ba_dj04");

                iRandG = RandomX.RandInt(1, 16);
                if (iRandG == 1)
                    InternalIPLS.Add("DJ_01_Lights_01");
                else if (iRandG == 2)
                    InternalIPLS.Add("DJ_02_Lights_01");
                else if (iRandG == 3)
                    InternalIPLS.Add("DJ_03_Lights_01");
                else if (iRandG == 4)
                    InternalIPLS.Add("DJ_04_Lights_01");
                else if (iRandG == 5)
                    InternalIPLS.Add("DJ_01_Lights_02");
                else if (iRandG == 6)
                    InternalIPLS.Add("DJ_02_Lights_02");
                else if (iRandG == 7)
                    InternalIPLS.Add("DJ_03_Lights_02");
                else if (iRandG == 8)
                    InternalIPLS.Add("DJ_04_Lights_02");
                else if (iRandG == 9)
                    InternalIPLS.Add("DJ_01_Lights_03");
                else if (iRandG == 10)
                    InternalIPLS.Add("DJ_02_Lights_03");
                else if (iRandG == 11)
                    InternalIPLS.Add("DJ_03_Lights_03");
                else if (iRandG == 12)
                    InternalIPLS.Add("DJ_04_Lights_03");
                else if (iRandG == 13)
                    InternalIPLS.Add("DJ_01_Lights_04");
                else if (iRandG == 14)
                    InternalIPLS.Add("DJ_02_Lights_04");
                else if (iRandG == 15)
                    InternalIPLS.Add("DJ_03_Lights_04");
                else
                    InternalIPLS.Add("DJ_04_Lights_04");

                InternalIPLS.Add("light_rigs_off");
                InternalIPLS.Add("Int01_ba_lightgrid_01");
                InternalIPLS.Add("Int01_ba_equipment_upgrade");

                iRandG = RandomX.RandInt(1, 9);
                if (iRandG == 1)
                    InternalIPLS.Add("Int01_ba_clubname_01");
                else if (iRandG == 2)
                    InternalIPLS.Add("Int01_ba_clubname_02");
                else if (iRandG == 3)
                    InternalIPLS.Add("Int01_ba_clubname_03");
                else if (iRandG == 4)
                    InternalIPLS.Add("Int01_ba_clubname_04");
                else if (iRandG == 5)
                    InternalIPLS.Add("Int01_ba_clubname_05");
                else if (iRandG == 6)
                    InternalIPLS.Add("Int01_ba_clubname_06");
                else if (iRandG == 7)
                    InternalIPLS.Add("Int01_ba_clubname_07");
                else if (iRandG == 8)
                    InternalIPLS.Add("Int01_ba_clubname_08");
                else
                    InternalIPLS.Add("Int01_ba_clubname_09");

                InternalIPLS.Add("Int01_ba_dry_ice");
                InternalIPLS.Add("Int01_ba_deliverytruck");

                iRandG = RandomX.RandInt(1, 10);
                if (iRandG == 1)
                    InternalIPLS.Add("Int01_ba_trophy01");
                else if (iRandG == 2)
                    InternalIPLS.Add("Int01_ba_trophy02");
                else if (iRandG == 3)
                    InternalIPLS.Add("Int01_ba_trophy03");
                else if (iRandG == 4)
                    InternalIPLS.Add("Int01_ba_trophy04");
                else if (iRandG == 5)
                    InternalIPLS.Add("Int01_ba_trophy05");
                else if (iRandG == 6)
                    InternalIPLS.Add("Int01_ba_trophy07");
                else if (iRandG == 7)
                    InternalIPLS.Add("Int01_ba_trophy08");
                else if (iRandG == 8)
                    InternalIPLS.Add("Int01_ba_trophy09");
                else if (iRandG == 9)
                    InternalIPLS.Add("Int01_ba_trophy10");
                else
                    InternalIPLS.Add("Int01_ba_trophy11");

                InternalIPLS.Add("Int01_ba_trad_lights");

            }//NightClub

            for (int i = 0; i < InternalIPLS.Count; i++)
            {
                if (bAltLoad)
                {
                    if (!Function.Call<bool>(Hash.IS_IPL_ACTIVE, InternalIPLS[i]))
                        Function.Call(Hash.REQUEST_IPL, InternalIPLS[i]);
                }
                else
                {
                    if (!Function.Call<bool>(Hash._IS_INTERIOR_PROP_ENABLED, InternalLoad, InternalIPLS[i]))
                        Function.Call(Hash._ENABLE_INTERIOR_PROP, InternalLoad, InternalIPLS[i]);

                    if (iColour.Count > 0)
                    {
                        if (iColour[i] != -1)
                            Function.Call((Hash)0xC1F1920BAF281317, InternalLoad, InternalIPLS[i], iColour[i]);
                    }
                }
            }

            Function.Call(Hash.REFRESH_INTERIOR, InternalLoad);
        }
        public void WalkOn()
        {
            Vector3 VGoTo = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 10);
            EntityBuild.WalkThisWay(Game.Player.Character, VGoTo, 1.3f);
        }
        private void RSLoadIn()
        {
            int iMission = -1;
            for (int i = 0; i < DataStore.NSPMAuto.Count; i++)
            {
                if (File.Exists(DataStore.NSPMAuto[i]))
                {
                    iMission = i;
                    break;
                }
            }

            if (iMission != -1)
            {
                int VehHandle = -1;

                if (DataStore.iLookForPB == 2)
                    PhoneClear();

                LocationX = ReturnStuff.WhereAreYou();
                Vehicle VBob = null;
                string[] readNote = File.ReadAllLines(DataStore.NSPMAuto[iMission]);
                if (iMission == 2)
                    DimondValay();
                else if (iMission == 5)
                {
                    LocationX = ReturnStuff.WhereAreYou();
                    JobType = 21;
                    DeepDown();
                }
                else if (readNote.Count() > 0)
                {
                    VehHandle = EntityLog.ReadMyInt(readNote[0]);
                    VBob = new Vehicle(VehHandle);

                    if (VBob.Exists())
                    {
                        if (iMission == 0)
                            Ambulance(VBob);
                        else if (iMission == 1)
                            FireDept(VBob);
                        else if (iMission == 2)
                            Packages(VBob);
                        else if (iMission == 3)
                            Packages(VBob);
                        else if (iMission == 4)
                            MrMOneyMAn(VBob);
                    }
                }
                File.Delete(DataStore.NSPMAuto[iMission]);
            }
        }
        private void PhoneClear()
        {
            if (bRingRing)
            {
                bRingRing = false;
                EntityLog.CleanUp(-1, DataStore.iSoundId, -1);
            }
            if (!DataStore.OnCayoLand)
                PhoneHome.IsPersistent = false;
            PhoneHome = null;

            EntityClear.RemoveTargets();
            DataStore.iLookForPB = 0;
        }
        private void GameOver()
        {
            LoggerLight.LogThis("GameOverWin");

            TruckMissions = null;
            BankRobMissions = null;
            PackManMissions = null;
            ConvictMissions = null;
            FubarMissions = null;
            BertMissions = null;
            CeoExMissions = null;
            CropMissions = null;
            HiggsMissions = null;
            AmbMissions = null;
            FireMissions = null;
            FollMissions = null;
            JohnnyMissions = null;
            RacingMissions = null;
            BombingMissions = null;
            HitMissions = null;
            SnipMissions = null;
            MoneyMissions = null;
            BargeMissions = null;
            YachtMissions = null;
            PhishMissions = null;
            BoatDelMissions = null;
            BogSubMission = null;
            ImpExpMissions = null;
            DebtMissions = null;
            BikerMissions = null;
            CargoMissions = null;
            SharkMissions = null;
            HappySMissions = null;
            MoresMissions = null;
            Temp01Missions = null;
            Temp02Missions = null;
            Temp03Missions = null;
            Temp04Missions = null;
            Temp06Missions = null;
            FreeFallMissions = null;
            DellWhoMissions = null;
            CayFolMissions = null;
            CayHeiMissions = null;

            iGetBackIn = 0;
            JobSeq = 0;
            JobType = 0;
            ReturnStuff.VehName = "";
            UiDisplay.SpotedList.Clear();
            EntityBuild.MyNumber = 0;
            MissionData.iUltPed01 = 0;
            MissionData.iUltMelle = 0;
            UiDisplay.bUiDisplay = false;
            UiDisplay.GetBackInVeh = null;
            UiDisplay.SideBars.Clear();

            if (InternalLoad != -1)
            {
                if (Function.Call<bool>(Hash.IS_VALID_INTERIOR, InternalLoad))
                    Function.Call(Hash.UNPIN_INTERIOR, InternalLoad);

                for (int i = 0; i < InternalIPLS.Count; i++)
                {
                    if (Function.Call<bool>(Hash._IS_INTERIOR_PROP_ENABLED, InternalLoad, InternalIPLS[i]))
                        Function.Call(Hash._DISABLE_INTERIOR_PROP, InternalLoad, InternalIPLS[i]);
                }
                InternalIPLS.Clear();
                InternalLoad = -1;
            }

            EntityClear.PostMess();
            EntityBuild.ClearWeather();
            ReturnStuff.CustomList.Clear();
            NSBanking.SaveAchive();
            NSBanking.SaveBounsData();

            Game.FadeScreenIn(100);

            if (DataStore.OnlineStuffLoaded && !DataStore.MySettings.PreLoadOnline)
                DataStore.LoadOnlineIps(false);

            Game.Player.Character.Task.ClearAll();

        }
        private void MissionEnd(AchList MyMission)
        {
            LoggerLight.LogThis("MissionEnd");
            GameOver();

            UiDisplay.MissionPassed(MyMission);

            if (DataStore.OnlineStuffLoaded && !DataStore.MySettings.PreLoadOnline)
                DataStore.LoadOnlineIps(false);
        }
        private void GameOverFail(bool bPacBouns)
        {
            LoggerLight.LogThis("GameOverFail, bPacBouns == " + bPacBouns);
            GameOver();

            UiDisplay.BigMessFail(DataStore.MyLang.Othertext[55]);


            if (DataStore.OnlineStuffLoaded && !DataStore.MySettings.PreLoadOnline)
                DataStore.LoadOnlineIps(false);

            if (bPacBouns)
            {
                ControlSelect(5);
                NSPM.iWait4Sec = Game.GameTime + 7000;
            }
        }
        private void ZancudaClosed()
        {
            LoggerLight.LogThis("ZancudaClosed");

            Function.Call(Has﻿h.REQUEST_SCRIPT, "restrictedareas");
            while (!Function.Ca﻿ll<bool>(Hash.HAS_SCRIPT_LOADED, "restrictedareas"))
                Script.Wait(1);
            Function.Call﻿(Hash.START_NEW_SCRIPT﻿, "restrictedareas", 1424);
            Fun﻿ction.Call(Hash.SET_SCRIPT_AS_NO_LONGER_NEEDED, "restrictedareas");
        }
        private static void SetTheTime(int Hours, int Minites, int Seconds)
        {
            Function.Call(Hash.SET_CLOCK_TIME, Hours, Minites, Seconds);
        }
        private void YourFired(float fX, float fY, float fZ)
        {
            LoggerLight.LogThis("YourFired");

            //EntityBuild.AddBlips(new BlipForm(new Vector3(fX, fY, fZ), false, 1, 436, DataStore.MyLang.Maptext[116]));
            int UFire = Function.Call<int>(Hash.START_SCRIPT_FIRE, fX, fY, fZ, 15, false);
            MissionData.iFireList.Add(UFire);
        }
        public void ControlSelect(int iChoices)
        {
            LoggerLight.LogThis("UiDisplay.ControlSelect, iChoices == " + iChoices);
            bool bSelecta = true;
            int iQuickPause = Game.GameTime + 1000;
            string sDisplay = "";

            while (bSelecta)
            {
                if (sDisplay != "")
                    UiDisplay.ControlerUI(sDisplay, 1);

                if (iQuickPause < Game.GameTime)
                {
                    if (iChoices == 1)
                    {
                        if (sDisplay == "")
                            sDisplay = DataStore.MyLang.Context[1];

                        if (ReturnStuff.WhileButtonDown(21))
                        {
                            if (JobType == 11)
                            {
                                iChoices = 0;
                                TheMenus.Racist_Menu();
                            }
                            else
                            {
                                iChoices = 0;
                                PlayerPlays();
                            }
                        }
                        else if (ReturnStuff.ButtonDown(22))
                        {
                            iChoices = 0;
                            DataStore.LookingForPB = true;
                        }
                        else if (ReturnStuff.ButtonDown(47))
                        {
                            iChoices = 0;
                            TheMenus.SettingsMenu();
                        }
                        else if (Game.Player.Character.Position.DistanceTo(DataStore.vPhoneCorona) > 2.50f)
                        {
                            iChoices = 0;
                            DataStore.LookingForPB = true;
                        }
                    }            //PhoneAnswer
                    else if (iChoices == 2)
                    {

                    }       //Empty
                    else if (iChoices == 3)
                    {

                    }       //Empty
                    else if (iChoices == 4)
                    {
                        sDisplay = DataStore.MyLang.Context[9];

                        TakeNote();
                        if (ReturnStuff.ButtonDown(47))
                        {
                            iChoices = 0;
                            TheMenus.SettingsMenu();
                        }
                        else if (Game.Player.Character.Position.DistanceTo(DataStore.vPhoneCorona) > 2.50f)
                        {
                            iChoices = 0;
                            DataStore.LookingForPB = true;
                        }
                    }       //PhoneBox No Jobs Selected
                    else if (iChoices == 5)
                    {
                        if (iWait4Sec < Game.GameTime)
                        {
                            sDisplay = DataStore.MyLang.Context[2];

                            if (!UiDisplay.bSubDisplay)
                            {
                                UiDisplay.bSubDisplay = true;
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[190];
                            }

                            if (ReturnStuff.ButtonDown(21))
                            {
                                iChoices = 0;
                                LocationX = 99;
                                GetAwayDriver();
                            }
                            else if (ReturnStuff.ButtonDown(22))
                            {
                                iChoices = 0;
                            }
                        }
                    }       //Pacstandard
                    else if (iChoices == 6)
                    {
                        sDisplay = DataStore.MyLang.Context[2];

                        if (ReturnStuff.ButtonDown(21))
                        {
                            iChoices = 0;
                            JobSeq = 0;
                            FubarMissions.RepMish++;
                            FubarMissions.TotalPay += FubarMissions.FuFare;
                            Fubar_AddingAwards();
                            Fubar_GetLocals(FubarMissions.TotalPay, FubarMissions.RepMish, FubarMissions.FubVeh);
                        }
                        else if (ReturnStuff.ButtonDown(22))
                        {
                            iChoices = 0;
                            FubarMissions.RepMish++;
                            Fubar_AddingAwards();
                            JobSeq++;
                        }
                    }       //fubar
                    else if (iChoices == 7)
                    {
                        sDisplay = DataStore.MyLang.Context[2];

                        if (ReturnStuff.ButtonDown(21))
                        {
                            iChoices = 0;
                            AmbMissions = new LsHealthTrust(LocationX, AmbMissions.Covid, AmbMissions.Ambuantz, AmbMissions.PatientsSeen + 1, AmbMissions.Fatalitys, AmbMissions.TotalPay, AmbMissions.CorectDiagnosis, AmbMissions.UniformOn, AmbMissions.Oufit);
                            JobSeq = 2;
                        }
                        else if (ReturnStuff.ButtonDown(22))
                        {
                            AmbMissions.PatientsSeen += 1;
                            JobSeq = 35;
                            iChoices = 0;
                        }
                    }       //Ambullance
                    else if (iChoices == 8)
                    {
                        sDisplay = DataStore.MyLang.Context[2];

                        if (ReturnStuff.ButtonDown(21))
                        {
                            FireMissions.RepMish++;
                            FireMissions = new FireStarter(LocationX, FireMissions.FireTruck, FireMissions.RepMish, FireMissions.BurninMoney, FireMissions.FireFailed, FireMissions.UniformOn, FireMissions.Oufit);
                            EntityBuild.VehBlip(FireMissions.TkBlip, FireMissions.FireTruck);
                            JobSeq = 1;
                            iChoices = 0;
                        }
                        else if (ReturnStuff.ButtonDown(22))
                        {
                            FireMissions.RepMish++;
                            FireMissions.TotalPay += FireMissions.BurninMoney;
                            MissionData.iFireList.Clear();
                            JobSeq = 65;
                            iChoices = 0;
                        }
                    }       //Fire
                    else if (iChoices == 9)
                    {
                        sDisplay = DataStore.MyLang.Context[8];

                        if (ReturnStuff.ButtonDown(21))
                        {
                            iChoices = 0;
                            DataStore.MySettings.StartOnYAcht = true;
                            ReadWriteXML.SaveXmlSets(DataStore.MySettings, DataStore.sNSPMSet);
                        }
                        else if (ReturnStuff.ButtonDown(22))
                        {
                            iChoices = 0;
                            DataStore.MySettings.StartOnYAcht = false;
                            ReadWriteXML.SaveXmlSets(DataStore.MySettings, DataStore.sNSPMSet);
                        }
                    }       //Yacht2
                    else if (iChoices == 10)
                    {
                        sDisplay = ReturnStuff.ShowComs(DataStore.MySettings.YachtPrice, true, false) + DataStore.MyLang.Context[4];

                        if (DataStore.MySettings.YachtPrice < 0)
                            DataStore.MySettings.YachtPrice = 0;
                        else if (ReturnStuff.ButtonDown(21))
                        {
                            if (DataStore.MyDatSet.iNSPMBank > DataStore.MySettings.YachtPrice)
                            {
                                iChoices = 9;
                                iQuickPause = Game.GameTime + 1000;
                                DataStore.MyAchivments.Water02_PricyPiracy++;
                                DataStore.MySettings.YachtPrice *= -1;
                                NSBanking.YourCoinPopUp(DataStore.MySettings.YachtPrice, 1, "Yacht Purchased");
                                DataStore.MyDatSet.iOwnaYacht = DataStore.iProcessForYacht;
                                DataStore.MyAssets.OwnaYacht = true;
                                DataStore.MySettings.YachtPrice = 0;
                            }
                            else
                            {
                                UI.Notify("Funds not avalable");
                                iChoices = 0;
                                DataStore.MyAssets.OwnaYacht = false;
                                DataStore.MyDatSet.iOwnaYacht = 0;
                                if (!YachtMissions.YtTrans.IsDead)
                                    EntityBuild.WarptoAnyVeh(YachtMissions.YtTrans, Game.Player.Character, 1);
                                else
                                {
                                    Vector3 Vpos = new Vector3(-1848.826f, -1200.298f, 19.14339f);
                                    SearchFor.SlowFastTravel(Vpos, 165.84f);
                                }
                                ReadWriteXML.SaveXmlSets(DataStore.MySettings, DataStore.sNSPMSet);
                            }
                        }
                        else if (ReturnStuff.ButtonDown(22))
                        {
                            iChoices = 0;
                            DataStore.MyAssets.OwnaYacht = false;
                            DataStore.MyDatSet.iOwnaYacht = 0;
                            if (!YachtMissions.YtTrans.IsDead)
                                EntityBuild.WarptoAnyVeh(YachtMissions.YtTrans, Game.Player.Character, 1);
                            else
                            {
                                Vector3 Vpos = new Vector3(-1848.826f, -1200.298f, 19.14339f);
                                SearchFor.SlowFastTravel(Vpos, 165.84f);
                            }
                            ReadWriteXML.SaveXmlSets(DataStore.MySettings, DataStore.sNSPMSet);
                        }
                    }      //Yacht
                    else if (iChoices == 11)
                    {
                        sDisplay = DataStore.MyLang.Context[2];

                        if (ReturnStuff.ButtonDown(21))
                        {
                            JobSeq = 0;
                            iChoices = 0;
                            DellWhoMissions.Earnings += RandomX.RandInt(3, 14);
                            DellWhoMissions = new FubarEats(LocationX, DellWhoMissions.Earnings, DellWhoMissions.TimeTaken, true, DellWhoMissions.Bike, DellWhoMissions.Fuoobd);
                            EntityBuild.AddTarget(new BlipForm(DellWhoMissions.Start.PedHere.V3, true, 5, 408, DataStore.MyLang.Maptext[121], 1f, -1f));
                            MissionData.vFuMiss = DellWhoMissions.Start.ParkHere.V3;
                        }
                        else if (ReturnStuff.ButtonDown(22))
                        {
                            iChoices = 0;
                            DellWhoMissions.Earnings += RandomX.RandInt(3, 14);
                            EntityBuild.PedDresser(Game.Player.Character, DellWhoMissions.Wear);
                            NSBanking.NSCoinInvestments(true, 5, 7, "Deliverwho");
                            Deliverwho_AddAwards();
                            MissionEnd(Deliverwho_Awards(DellWhoMissions.Earnings, true));
                        }
                    }      //Delliverwho
                    else
                    {
                        UiDisplay.sSubDisplay = "";

                        if (MissionData.bPickUpHangUp)
                        {
                            EntityBuild.ForceAnimOnceEnding(Game.Player.Character, "oddjobs@assassinate@multi@call", "ass_multi_target_call_p1", Game.Player.Character.Position, Game.Player.Character.Rotation, 0.88f);
                            Script.Wait(4000);
                            Game.Player.Character.Task.ClearAnimation("oddjobs@assassinate@multi@call", "ass_multi_target_call_p1");
                            MissionData.bPickUpHangUp = false;
                        }

                        UiDisplay.bSubDisplay = false;
                        bSelecta = false;
                    }
                }
                Script.Wait(1);
            }
        }
        private void PickUpThePhone(float fThisWay)
        {
            fThisWay -= 88.00f;
            int iTFuckedUp = Game.GameTime + 5000;
            Game.Player.Character.FreezePosition = true;
            Script.Wait(500);
            Game.Player.Character.FreezePosition = false;
            EntityBuild.WalkThisWay(Game.Player.Character, DataStore.vPhoneCorona, 1.00f);
            Script.Wait(2500);
            Game.Player.Character.Task.AchieveHeading(fThisWay, -1);
            while (!ReturnStuff.BeInAngle(2.50f, fThisWay, Game.Player.Character.Heading) && Game.GameTime < iTFuckedUp)
            {
                Game.Player.Character.Task.AchieveHeading(fThisWay, -1);
                Script.Wait(1000);
            }
            EntityBuild.ForceAnimOnce(Game.Player.Character, "oddjobs@assassinate@multi@call", "ass_multi_target_call_p1", Game.Player.Character.Position, Game.Player.Character.Rotation);
            Script.Wait(4000);
            MissionData.bPickUpHangUp = true;
        }
        private void AnswerYourPhone(Prop ThisPhone)
        {
            LoggerLight.LogThis("AnswerYourPhone");

            DataStore.vPhoneCorona = ThisPhone.Position - (ThisPhone.ForwardVector * 1);
            if (ThisPhone.Model == Function.Call<int>(Hash.GET_HASH_KEY, "prop_phonebox_02") || ThisPhone.Model == Function.Call<int>(Hash.GET_HASH_KEY, "p_phonebox_02_s"))
                DataStore.vPhoneCorona = ReturnStuff.AlterZHight(DataStore.vPhoneCorona, -1.00f);

            if (DataStore.MySettings.PhoneCone)
            {
                BlipForm PhoneBlip = new BlipForm(DataStore.vPhoneCorona, false, 2, 817, "Street Phone", new CorronaForm(DataStore.vPhoneCorona, true, 1f, 2));
                PhoneBlip.Radius = 0.75f;
                EntityBuild.AddTarget(PhoneBlip);
            }
        }
        private void TrinketFound()
        {
            DataStore.MyDatSet.iTrinket = 99;
            Trinket.Delete();
            Trinket = null;
            NSBanking.YourCoinPopUp(10000000, 1, "Trinket");
            NSBanking.YourCoinPopUp(100000000, 2, "Trinket");
            NSBanking.YourCoinPopUp(100000000, 3, "Trinket");
            NSBanking.SaveBounsData();
        } 
        private void OnTick(object sender, EventArgs e)
        {
            if (DataStore.bHasLoaded)
            {
                if (DataStore.MenuOpen)
                {
                    if (TheMenus.YtmenuPool.IsAnyMenuOpen())
                    {
                        TheMenus.YtmenuPool.ProcessMenus();
                        if (DataStore.iDisplayAch > 0 && DataStore.MySettings.AchiveMents)
                        {
                            if (DataStore.iDisplayAch == 1)
                                UiDisplay.MissionStatus(Trucking_Awards(0, 0, 0, false));
                            else if (DataStore.iDisplayAch == 2)
                                UiDisplay.MissionStatus(Getaway_Awards(0, 0, false));
                            else if (DataStore.iDisplayAch == 3)
                                UiDisplay.MissionStatus(Packages_Awards(0, 0, 0, false));
                            else if (DataStore.iDisplayAch == 4)
                                UiDisplay.MissionStatus(Convicts_Awards(0, false, false));
                            else if (DataStore.iDisplayAch == 5)
                                UiDisplay.MissionStatus(Fubar_Awards(0, false));
                            else if (DataStore.iDisplayAch == 6)
                                UiDisplay.MissionStatus(Pilot_Awards(0, false));
                            else if (DataStore.iDisplayAch == 7)
                                UiDisplay.MissionStatus(Ambulance_Awards(0, false));
                            else if (DataStore.iDisplayAch == 8)
                                UiDisplay.MissionStatus(Follow_Awards(0, false));
                            else if (DataStore.iDisplayAch == 9)
                                UiDisplay.MissionStatus(Fire_Awards(0, false));
                            else if (DataStore.iDisplayAch == 10)
                                UiDisplay.MissionStatus(Johnny_Awards(0, false));
                            else if (DataStore.iDisplayAch == 11)
                                UiDisplay.MissionStatus(Racist_Awards(0, 0, false));
                            else if (DataStore.iDisplayAch == 12)
                                UiDisplay.MissionStatus(BbBomb_Awards(0, false));
                            else if (DataStore.iDisplayAch == 13)
                                UiDisplay.MissionStatus(Hitman_Awards(0, false));
                            else if (DataStore.iDisplayAch == 14)
                                UiDisplay.MissionStatus(Sniper_Awards(0, false));
                            else if (DataStore.iDisplayAch == 15)
                                UiDisplay.MissionStatus(MoneyMan_Awards(0, false));
                            else if (DataStore.iDisplayAch == 16)
                                UiDisplay.MissionStatus(Water_Awards(0, false));
                            else if (DataStore.iDisplayAch == 17)
                                UiDisplay.MissionStatus(ImportsExpo_Awards(0, false));
                            else if (DataStore.iDisplayAch == 18)
                                UiDisplay.MissionStatus(DebtCollect_Awards(0, false));
                            else if (DataStore.iDisplayAch == 19)
                                UiDisplay.MissionStatus(BikerRaids_Awards(0, false));
                            else if (DataStore.iDisplayAch == 20)
                                UiDisplay.MissionStatus(CargoCollect_Awards(0, false));
                            else if (DataStore.iDisplayAch == 21)
                                UiDisplay.MissionStatus(DeepDown_Awards(0, false));
                            else if (DataStore.iDisplayAch == 22)
                                UiDisplay.MissionStatus(HappyShopper_Awards(0, false));
                            else if (DataStore.iDisplayAch == 23)
                                UiDisplay.MissionStatus(MoresMuted_Awards(0, false));
                            else if (DataStore.iDisplayAch == 24)
                                UiDisplay.MissionStatus(TempAgency_Awards(0, false));
                            else if (DataStore.iDisplayAch == 25)
                                UiDisplay.MissionStatus(Parra_Awards(0, false));
                            else if (DataStore.iDisplayAch == 26)
                                UiDisplay.MissionStatus(Deliverwho_Awards(0, false));
                            else if (DataStore.iDisplayAch == 27)
                                UiDisplay.MissionStatus(CayoThief_Awards(0, false));
                            else
                            {

                            }
                        }
                        else if (DataStore.iRaceSym > -1)
                            UiDisplay.RaceTypeIcon(DataStore.iRaceSym);
                    }
                    else
                    {
                        Game.Player.Character.FreezePosition = false;
                        Game.Player.CanControlCharacter = true;
                        DataStore.iDisplayAch = 0;
                        Function.Call(Hash.DISPLAY_RADAR, true);
                        DataStore.MenuOpen = false;
                        DataStore.LookingForPB = true;
                        if (DataStore.OptionsMen)
                        {
                            DataStore.OptionsMen = false;
                            DataStore.LookingForPB = true;
                        }

                        if (DataStore.OnlineStuffLoaded && !DataStore.MySettings.PreLoadOnline)
                            DataStore.LoadOnlineIps(false);
                        else if (DataStore.MySettings.PreLoadOnline && !DataStore.OnlineStuffLoaded)
                            DataStore.LoadOnlineIps(true);
                        NSBanking.SaveBounsData();
                    }
                }
                else if (DataStore.OnTheJob)
                {
                    if (Function.Call<bool>(Hash.IS_PLAYER_DEAD) || Function.Call<bool>(Hash.IS_PLAYER_BEING_ARRESTED) || Function.Call<bool>(Hash.IS_PLAYER_SWITCH_IN_PROGRESS))
                        JobSeq = 45;

                    if (JobType == 1)
                    {
                        if (TruckMissions.Army)
                            Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "re_armybase");

                        if (JobSeq == 0)
                        {
                            JobSeq++;
                            if (TruckMissions.Army)
                                Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "restrictedareas");

                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[0];

                            if (DataStore.MySettings.FastTraveltoStart)
                                SearchFor.SlowFastTravel(MissionData.vFuMiss, 0.00f);
                        }
                        else if (JobSeq == 1)
                        {
                            if (TruckMissions.Trail.IsDead || MissionData.MishVeh.IsDead)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(MissionData.MishVeh))
                            {
                                JobSeq++;
                                TruckMissions.Truck = MissionData.MishVeh;
                                TruckMissions.WheelCheck = true;
                                TruckMissions.Truck.CurrentBlip.Remove();
                                EntityBuild.VehBlip(new BlipForm(3, DataStore.MyLang.Maptext[2]), TruckMissions.Trail);
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[2];
                            }
                            else if (ReturnStuff.AmINear(TruckMissions.Start.TruckStop.V3, 35f))
                            {
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[1];

                                if (TruckMissions.WheelCheck)
                                {
                                    EntityBuild.ResetVehPos(MissionData.MishVeh, TruckMissions.Start.TruckStop);
                                    EntityBuild.ResetVehPos(TruckMissions.Trail, TruckMissions.Start.TrailStop);
                                    TruckMissions.WheelCheck = false;
                                }
                                else if (ReturnStuff.AmINear(TruckMissions.Start.TruckStop.V3, 5f))
                                {
                                    if (TruckMissions.Car)
                                        TruckMissions.YourTruck = ReturnStuff.PickThatVeh(TruckMissions.YourTruck, MissionData.MishVeh, TruckMissions.Start.TruckStop, 28, true);
                                    else if (TruckMissions.Tractor) { }
                                    else
                                        TruckMissions.YourTruck = ReturnStuff.PickThatVeh(TruckMissions.YourTruck, MissionData.MishVeh, TruckMissions.Start.TruckStop, 14, false);
                                }
                            }
                            else
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[0];
                        }
                        else if (JobSeq == 2)
                        {
                            if (TruckMissions.Truck.IsDead || TruckMissions.Trail.IsDead)
                                JobSeq = 45;
                            else
                            {
                                GetBackInVeh(TruckMissions.Truck);

                                if (ReturnStuff.AreUNear(TruckMissions.Trail2.Position, TruckMissions.Trail.Position, 30f) && !TruckMissions.WheelCheck)
                                {
                                    if (ReturnStuff.AreUNear(TruckMissions.Trail2.Position, TruckMissions.Trail.Position, 10f))
                                    {
                                        if (Game.Player.Character.IsInVehicle() && TruckMissions.Trail.IsAttached())
                                            UiDisplay.ControlerUI(DataStore.MyLang.Context[14], 1);
                                        else
                                        {
                                            JobSeq++;
                                            float fParking = TruckMissions.Trail.Position.DistanceTo(TruckMissions.Trail2.Position) * 5;
                                            fParking = fParking + TruckMissions.Trail.Rotation.DistanceTo(TruckMissions.Trail2.Rotation) * 10;
                                            int iPkBouns = (int)fParking;
                                            TruckMissions.ParkinBonus = 1000 - iPkBouns;
                                            if (TruckMissions.ParkinBonus < 0)
                                                TruckMissions.ParkinBonus = 0;
                                            TruckMissions.Truck.EngineRunning = false;
                                            EntityClear.RemoveTargets();
                                            UiDisplay.sSubDisplay = "";
                                        }
                                    }
                                }
                                else if (Game.Player.Character.IsInVehicle(TruckMissions.Truck))
                                {
                                    if (TruckMissions.Attached)
                                        TruckMissions.CashPaid = ReturnStuff.MultiDamage(true, false, 0);

                                    if (TruckMissions.Trail.IsAttached())
                                    {
                                        if (MissionData.Target_01 == null)
                                        {
                                            if (TruckMissions.AttachedLablel)
                                            {
                                                UiDisplay.SideBars.RemoveAt(1);
                                                TruckMissions.AttachedLablel = false;
                                            }
                                            TruckMissions.Truck.CurrentBlip.Remove();
                                            TruckMissions.Trail.CurrentBlip.Remove();
                                            UiDisplay.bUiDisplay = true;
                                            EntityBuild.AddTarget(new BlipForm(TruckMissions.Trail2.Position, true, 5, 479, DataStore.MyLang.Maptext[39]));
                                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[3] + World.GetStreetName(TruckMissions.Finish.FuStop);
                                            if (!TruckMissions.Attached)
                                            {
                                                Trucking_CashNCrash(TruckMissions.Truck, TruckMissions.Trail, TruckMissions.Trail2, TruckMissions.Start.Type);
                                                UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[0], "", 0f, false));
                                                TruckMissions.Attached = true;
                                            }
                                        }
                                        else if (TruckMissions.WheelCheck)
                                        {
                                            if (ReturnStuff.AreUNear(TruckMissions.Trail2.Position, TruckMissions.Trail.Position, 60f))
                                            {
                                                EntityBuild.MoveThatCar(TruckMissions.Finish.TrailStop);
                                                EntityBuild.ResetVehPos(TruckMissions.Trail2, TruckMissions.Finish.TrailStop);
                                                EntityBuild.GhostVehicle(TruckMissions.Trail2, TruckMissions.Finish.TrailStop);
                                                TruckMissions.WheelCheck = false;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (TruckMissions.Attached)
                                        {
                                            if (MissionData.Target_01 != null)
                                            {
                                                EntityClear.RemoveTargets();
                                                EntityBuild.VehBlip(new BlipForm(5, DataStore.MyLang.Maptext[2]), TruckMissions.Truck);
                                                UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[1], "", 0f, false));
                                                TruckMissions.DeTatchTime = Game.GameTime + 45000;
                                                TruckMissions.DeTatchAm++;
                                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[2];
                                                TruckMissions.AttachedLablel = true;
                                            }
                                            else
                                            {
                                                if (!TruckMissions.Trail.IsOnAllWheels && iWait4Sec < Game.GameTime)
                                                    Trucking_LostTrail();
                                                else if (TruckMissions.DeTatchTime > Game.GameTime)
                                                {
                                                    int iTimeLeft = TruckMissions.DeTatchTime - Game.GameTime;
                                                    UiDisplay.SideBars[1].Data = ReturnStuff.ShowComs(iTimeLeft, false, false);
                                                }
                                                else
                                                    JobSeq = 45;
                                            }
                                        }
                                        else if (ReturnStuff.AreUNear(TruckMissions.Truck.Position, TruckMissions.Trail.Position, 20f))
                                        {
                                            if (iWait4Sec < Game.GameTime)
                                            {
                                                UiDisplay.ControlerUI(DataStore.MyLang.Mistext[245], 1);

                                                if (Game.IsControlPressed(2, GTA.Control.Detonate))
                                                {
                                                    TruckMissions.Trail.Rotation = new Vector3(TruckMissions.Trail.Rotation.X + 3f, TruckMissions.Trail.Rotation.Y, TruckMissions.Trail.Rotation.Z);
                                                    iWait4Sec = Game.GameTime + 2000;
                                                }
                                            }

                                        }
                                    }
                                }
                                else
                                {
                                    if (MissionData.Target_01 != null)
                                    {
                                        EntityClear.RemoveTargets();
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[1];
                                        EntityBuild.VehBlip(new BlipForm(5, DataStore.MyLang.Maptext[1]), TruckMissions.Truck);
                                    }
                                }
                            }
                        }
                        else if (JobSeq == 3)
                        {
                            Game.FadeScreenOut(100);
                            Script.Wait(100);
                            Trucking_AddingRewards(TruckMissions.ParkinBonus);
                            if (TruckMissions.Army)
                                ZancudaClosed();
                            UiDisplay.sSubDisplay = "";
                            if (TruckMissions.Proper != null)
                            {
                                TruckMissions.Proper.Delete();
                                MissionData.VehicleList_01.Remove(TruckMissions.Proper);
                            }
                            else if (TruckMissions.MullProps.Count > 0)
                                Trucking_PropDel();
                            Function.Call(Hash.DETACH_VEHICLE_FROM_TRAILER, TruckMissions.Truck.Handle);
                            TruckMissions.Trail2.Delete();
                            MissionData.VehicleList_01.Remove(TruckMissions.Trail2);
                            TruckMissions.Truck.LockStatus = VehicleLockStatus.LockedForPlayer;
                            EntityBuild.ResetVehPos(TruckMissions.Truck, TruckMissions.Finish.TruckStop);
                            SearchFor.SlowFastTravel(TruckMissions.Finish.ExitDoor);
                            WalkOn();
                            Script.Wait(1000);
                            TruckMissions.CashTotal = TruckMissions.ParkinBonus + TruckMissions.CashPaid;

                            NSBanking.NSCoinInvestments(true, 4, 6, "Big G Goods Shares");
                            MissionEnd(Trucking_Awards(TruckMissions.CashPaid, TruckMissions.ParkinBonus, (int)TruckMissions.Distace, true));
                        }
                        else if (JobSeq == 45)
                        {
                            if (TruckMissions.Army)
                                ZancudaClosed();

                            NSBanking.NSCoinInvestments(false, 5, 7, "Big G Goods Shares");
                            GameOverFail(false);
                        }
                    }             //Truckin
                    else if (JobType == 2)
                    {
                        if (JobSeq == 0)
                        {
                            JobSeq++;
                            Function.Call((Hash)0xDC0F817884CDD856, 2, false);
                            Function.Call((Hash)0xDC0F817884CDD856, 4, true);
                            Function.Call((Hash)0xDC0F817884CDD856, 8, true);
                            Function.Call((Hash)0xDC0F817884CDD856, 12, false);

                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[4];
                            if (Game.Player.Character.Model == PedHash.Franklin || Game.Player.Character.Model == PedHash.Michael || Game.Player.Character.Model == PedHash.Trevor)
                                BankRobMissions.ModShops = false;
                        }
                        else if (JobSeq == 1)
                        {
                            if (Game.Player.Character.IsInVehicle())
                            {
                                if (BankRobMissions.SeaterIs4)
                                {
                                    if (ReturnStuff.AmINear(BankRobMissions.MyBank.Target01, 55f))
                                    {
                                        if (BankRobMissions.MoveYourV)
                                        {
                                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[5];
                                            EntityBuild.MoveThatCar(BankRobMissions.MyBank.Target01);
                                            BankRobMissions.MoveYourV = false;
                                        }
                                        else if (ReturnStuff.AmINear(BankRobMissions.MyBank.Target01, 3f))
                                        {
                                            if (BankRobMissions.GetAwayVeh.IsStopped)
                                            {
                                                JobSeq++;
                                                EntityBuild.PlaySoundFrom("Alarms", "Burglar_Bell", "Generic_Alarms", BankRobMissions.MyBank.Target02, false);
                                                BankRobMissions.BankAlarm = true;
                                                SearchFor.OpenDoors(BankRobMissions.MyBank.Target02, 5.00f);
                                                UiDisplay.bMMDisplay01 = false;
                                                UiDisplay.sSubDisplay = "";
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    if (BankRobMissions.AlowAir || Game.Player.Character.CurrentVehicle.ClassType != VehicleClass.Helicopters)
                                    {
                                        if (Game.Player.Character.CurrentVehicle.IsSeatFree(VehicleSeat.LeftRear))
                                        {
                                            BankRobMissions.GetAwayVeh = Game.Player.Character.CurrentVehicle;

                                            BankRobMissions.SeaterIs4 = true;
                                            BankRobMissions.GetAwayVeh.IsPersistent = true;
                                            MissionData.VehicleList_01.Add(new Vehicle(BankRobMissions.GetAwayVeh.Handle));
                                            EntityBuild.AddTarget(new BlipForm(BankRobMissions.MyBank.Target01, true, 5, 207, DataStore.MyLang.Maptext[40], 5f));
                                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[6];
                                        }
                                    }
                                }
                            }
                            else
                            {
                                if (BankRobMissions.SeaterIs4)
                                {
                                    EntityClear.RemoveTargets();
                                    BankRobMissions.SeaterIs4 = false;
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[4];
                                }
                            }
                        }
                        else if (JobSeq == 2)
                        {
                            JobSeq++;
                            if (BankRobMissions.GetAwayVeh.IsInvincible)
                                Getaway_CarSwap(BankRobMissions.GetAwayVeh);

                            Getaway_ExitBank();
                        }
                        else if (JobSeq == 3)
                        {
                            if (BankRobMissions.Robber01.IsDead || BankRobMissions.Robber02.IsDead || BankRobMissions.Robber03.IsDead)
                                JobSeq = 45;
                            else if (BankRobMissions.Robber01.IsInVehicle(BankRobMissions.GetAwayVeh) && BankRobMissions.Robber02.IsInVehicle(BankRobMissions.GetAwayVeh) && BankRobMissions.Robber03.IsInVehicle(BankRobMissions.GetAwayVeh))
                            {
                                JobSeq++;
                                SearchFor.StreetFrenz.Add(new FindPed(0.1f, 75f, 99, true, BankRobMissions.MyBank.Target02, new PedFeat("", 2)));
                                Getaway_RobDaBank();
                                BankRobMissions.LoseCops = Game.GameTime;
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[7];
                                UiDisplay.bUiDisplay = true;
                            }
                        }
                        else if (JobSeq == 4)
                        {
                            BankRobMissions.CashLoss = ReturnStuff.MultiDamage(true, false, 0);

                            if (BankRobMissions.LostDollas)
                                Getaway_SplashCash();
                            else
                            {
                                if (BankRobMissions.CashLoss != BankRobMissions.DropShip)
                                {
                                    BankRobMissions.DropShip = BankRobMissions.CashLoss;
                                    if (BankRobMissions.CashLoss < 0)
                                        JobSeq = 45;
                                    else
                                    {
                                        BankRobMissions.Time01 = Game.GameTime + 500;
                                        BankRobMissions.LostDollas = true;
                                    }
                                }
                            }

                            if (BankRobMissions.Robber01.IsDead || BankRobMissions.Robber02.IsDead || BankRobMissions.Robber03.IsDead)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle())
                            {
                                if (BankRobMissions.SeaterIs4)
                                {
                                    BankRobMissions.ModShopInt++;
                                    if (BankRobMissions.ModShopInt == BankRobMissions.ModShopsEnt.Count)
                                        BankRobMissions.ModShopInt = 0;

                                    if (BankRobMissions.GetAwayVeh == null)
                                    {
                                        BankRobMissions.GetAwayVeh = Game.Player.Character.CurrentVehicle;
                                        if (Game.Player.Character.CurrentVehicle.Handle != ReturnStuff.DamageControl.VehX[0].Handle)
                                        {
                                            ReturnStuff.DamageControl.VehX[0].IsPersistent = false;
                                            ReturnStuff.DamageControl.VehX[0] = BankRobMissions.GetAwayVeh;
                                            MissionData.VehicleList_01.Add(new Vehicle(BankRobMissions.GetAwayVeh.Handle));
                                            BankRobMissions.PickyDriver = true;
                                        }
                                        SearchFor.BackSeat.Add(new FindSeat(2, BankRobMissions.GetAwayVeh, BankRobMissions.Robber01, 2f));
                                        SearchFor.BackSeat.Add(new FindSeat(3, BankRobMissions.GetAwayVeh, BankRobMissions.Robber02, 2f));
                                        SearchFor.BackSeat.Add(new FindSeat(4, BankRobMissions.GetAwayVeh, BankRobMissions.Robber03, 2f));
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[7];
                                    }
                                    else if (BankRobMissions.ModShops && Game.Player.WantedLevel > 0 && BankRobMissions.GetAwayVeh.Position.DistanceTo(BankRobMissions.ModShopsEnt[BankRobMissions.ModShopInt]) < 2f)
                                    {
                                        if (!ReturnStuff.CopsAreNear(BankRobMissions.ModShopsEnt[BankRobMissions.ModShopInt]))
                                        {
                                            SearchFor.OpenDoors(BankRobMissions.ModShopsEnt[BankRobMissions.ModShopInt], 30f);
                                            Getaway_ReSpray(BankRobMissions.ModShopsEnt[BankRobMissions.ModShopInt], BankRobMissions.ModShopsEx[BankRobMissions.ModShopInt]);
                                            BankRobMissions.ModShops = false;
                                        }
                                    }
                                    else if (Game.Player.WantedLevel == 0 && MissionData.Target_01 == null)
                                    {
                                        BankRobMissions.LoseCops -= Game.GameTime;
                                        EntityBuild.AddTarget(new BlipForm(BankRobMissions.MyEnd.Target01, true, 5, 440, DataStore.MyLang.Maptext[41], 5f));
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[8];
                                    }
                                    else if (Game.Player.WantedLevel > 0 && MissionData.Target_01 != null)
                                    {
                                        BankRobMissions.LoseCops += Game.GameTime;
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[7];
                                        EntityClear.RemoveTargets();
                                    }
                                    else
                                    {
                                        if (ReturnStuff.AmINear(BankRobMissions.MyEnd.Target01, 3f) && BankRobMissions.Robber01.IsInVehicle(BankRobMissions.GetAwayVeh) && BankRobMissions.Robber02.IsInVehicle(BankRobMissions.GetAwayVeh) && BankRobMissions.Robber03.IsInVehicle(BankRobMissions.GetAwayVeh))
                                            JobSeq++;
                                    }
                                }
                                else
                                {
                                    if (BankRobMissions.AlowAir || Game.Player.Character.CurrentVehicle.ClassType != VehicleClass.Helicopters)
                                    {
                                        if (Game.Player.Character.CurrentVehicle.IsSeatFree(VehicleSeat.LeftRear))
                                        {
                                            UiDisplay.bMMDisplay01 = true;
                                            BankRobMissions.SeaterIs4 = true;
                                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[7];
                                        }
                                    }
                                }
                            }
                            else
                            {
                                if (BankRobMissions.GetAwayVeh != null)
                                {
                                    EntityClear.RemoveTargets();
                                    BankRobMissions.SeaterIs4 = false;
                                    EntityBuild.GetOutofVeh(BankRobMissions.Robber01, 1);
                                    EntityBuild.GetOutofVeh(BankRobMissions.Robber02, 1);
                                    EntityBuild.GetOutofVeh(BankRobMissions.Robber03, 1);
                                    BankRobMissions.GetAwayVeh = null;
                                    MissionData.VehicleList_01.Remove(BankRobMissions.GetAwayVeh);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[4];
                                }
                            }
                        }
                        else if (JobSeq == 5)
                        {
                            JobSeq++;
                            EntityClear.RemoveTargets();
                            EntityBuild.StopHere(BankRobMissions.GetAwayVeh);
                            EntityBuild.GetOutofVeh(Game.Player.Character, 1);
                            EntityBuild.GetOutofVeh(BankRobMissions.Robber01, 1);
                            EntityBuild.GetOutofVeh(BankRobMissions.Robber02, 1);
                            EntityBuild.GetOutofVeh(BankRobMissions.Robber03, 1);
                            SearchFor.BackSeat.Add(new FindSeat(1, BankRobMissions.EndVeh, BankRobMissions.Robber01, 2f));
                            SearchFor.BackSeat.Add(new FindSeat(2, BankRobMissions.EndVeh, BankRobMissions.Robber02, 2f));
                            SearchFor.BackSeat.Add(new FindSeat(3, BankRobMissions.EndVeh, BankRobMissions.Robber03, 2f));
                            EntityLog.CleanUp(-1, DataStore.iSoundId, -1);
                            BankRobMissions.GetAwayVeh.IsDriveable = false;
                            EntityBuild.ArmsRegulator(Game.Player.Character, 6);
                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[9];
                            UiDisplay.bUiDisplay = false;
                            BankRobMissions.GetAwayVeh.FreezePosition = false;
                            BankRobMissions.GetAwayVeh.IsInvincible = false;
                            BankRobMissions.EndVeh.FreezePosition = false;
                            EntityBuild.VehBlip(new BlipForm(1, DataStore.MyLang.Maptext[14]), BankRobMissions.GetAwayVeh);
                            EntityBuild.Groupies(false, Game.Player.Character);
                            if (BankRobMissions.EndVeh.ClassType == VehicleClass.Boats)
                                BankRobMissions.EndVeh.FreezePosition = false;
                            else
                                EntityBuild.ResetVehPos(BankRobMissions.EndVeh, BankRobMissions.MyEnd.EndVehPos);

                            iWait4Sec = Game.GameTime + 10000;
                        }
                        else if (JobSeq == 6)
                        {
                            if (BankRobMissions.Robber01.IsDead || BankRobMissions.Robber02.IsDead || BankRobMissions.Robber03.IsDead)
                                JobSeq = 45;
                            else if (BankRobMissions.Robber01.IsInVehicle() && BankRobMissions.Robber02.IsInVehicle() && BankRobMissions.Robber03.IsInVehicle())
                                JobSeq++;
                            else if (iWait4Sec < Game.GameTime)
                            {
                                JobSeq++;
                                EntityBuild.WarptoAnyVeh(BankRobMissions.EndVeh, BankRobMissions.Robber01, 1);
                                EntityBuild.WarptoAnyVeh(BankRobMissions.EndVeh, BankRobMissions.Robber02, 2);
                                EntityBuild.WarptoAnyVeh(BankRobMissions.EndVeh, BankRobMissions.Robber03, 3);
                            }
                        }
                        else if (JobSeq == 7)
                        {
                            if (BankRobMissions.Robber01.IsDead || BankRobMissions.Robber02.IsDead || BankRobMissions.Robber03.IsDead)
                                JobSeq = 45;
                            else if (BankRobMissions.PedCanFly)
                            {
                                Vector3 Vtarg = BankRobMissions.EndVeh.Position + (BankRobMissions.EndVeh.ForwardVector * 1500);
                                Vtarg = ReturnStuff.AlterZHight(Vtarg, 450f);
                                EntityBuild.FlyPlane(BankRobMissions.Robber01, BankRobMissions.EndVeh, Vtarg, null);
                                BankRobMissions.PedCanFly = false;
                            }
                            else if (BankRobMissions.GetAwayVeh.IsOnFire || BankRobMissions.GetAwayVeh.IsDead)
                            {
                                if (BankRobMissions.Oufit != null)
                                    EntityBuild.PedDresser(Game.Player.Character, BankRobMissions.Oufit);

                                BankRobMissions.CashEarning = BankRobMissions.CashLoss / 4;
                                BankRobMissions.GetAwayVeh.Explode();
                                Function.Call((Hash)0xDC0F817884CDD856, 2, true);
                                Function.Call((Hash)0xDC0F817884CDD856, 12, true);
                                Getaway_AddingRewards();
                                MissionEnd(Getaway_Awards(BankRobMissions.CashLoss, BankRobMissions.CashTotal, true));
                            }
                        }
                        else if (JobSeq == 45)
                        {
                            if (BankRobMissions.Oufit != null)
                                EntityBuild.PedDresser(Game.Player.Character, BankRobMissions.Oufit);
                            EntityBuild.Groupies(false, Game.Player.Character);
                            Function.Call((Hash)0xDC0F817884CDD856, 2, true);
                            Function.Call((Hash)0xDC0F817884CDD856, 12, true);
                            Getaway_StopLoss();
                            if (BankRobMissions.BankAlarm)
                                EntityLog.CleanUp(-1, DataStore.iSoundId, -1);
                            if (MissionData.cCams != null)
                                EntityClear.CleanCams();
                            GameOverFail(false);
                        }
                    }        //GetAwayDriver
                    else if (JobType == 3)
                    {
                        if (JobSeq == 0)
                        {
                            JobSeq++;
                            if (DataStore.MySettings.FastTraveltoStart)
                                EntityBuild.WarptoAnyVeh(PackManMissions.DeliverVeh, Game.Player.Character, 1);
                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[10];

                            if (PackManMissions.LiveExport)
                                Packages_LiveExport(PackManMissions.DeliverVeh);

                        }
                        else if (JobSeq == 1)
                        {
                            if (PackManMissions.DeliverVeh.IsDead)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(PackManMissions.DeliverVeh))
                            {
                                JobSeq++;
                                PackManMissions.CurrentPack = PackManMissions.Packlist[PackManMissions.PackDeliv];
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[13];
                                EntityBuild.AddTarget(new BlipForm(ReturnStuff.AlterZHight(PackManMissions.CurrentPack, -1.00f), true, 5, 478, DataStore.MyLang.Maptext[42], 1f));
                                UiDisplay.bUiDisplay = true;
                            }
                            else if (!PackManMissions.DeliverVeh.CurrentBlip.Exists())
                            {
                                EntityBuild.VehBlip(new BlipForm(5, DataStore.MyLang.Maptext[3]), PackManMissions.DeliverVeh);
                            }
                            else if (ReturnStuff.AmINear(PackManMissions.DeliverVeh.Position, 35f))
                            {
                                if (PackManMissions.DeliverVeh.ClassType == GTA.VehicleClass.Cycles)
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[11];
                                else
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[12];
                            }
                            else
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[10];

                            if (!PackManMissions.FirstPack)
                            {
                                if (PackManMissions.Timer02 > Game.GameTime)
                                {
                                    UiDisplay.SideBars[0].Data = "" + PackManMissions.PackDeliv + "/" + PackManMissions.PackCount + "";

                                    int iTotal = PackManMissions.Timer02 - Game.GameTime;
                                    UiDisplay.SideBars[1].Data = ReturnStuff.ShowComs(iTotal, false, false);
                                }
                                else
                                {
                                    JobSeq = 4;
                                    EntityClear.RemoveTargets();
                                }
                            }
                        }
                        else if (JobSeq == 2)
                        {
                            if (PackManMissions.DeliverVeh.IsDead)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle())
                            {
                                if (PackManMissions.DeliverVeh.CurrentBlip.Exists())
                                    PackManMissions.DeliverVeh.CurrentBlip.Remove();
                            }
                            else if (!PackManMissions.DeliverVeh.CurrentBlip.Exists())
                            {
                                EntityBuild.VehBlip(new BlipForm(5, DataStore.MyLang.Maptext[3]), PackManMissions.DeliverVeh);
                            }
                            else if (ReturnStuff.AmINear(PackManMissions.CurrentPack, 2f) && Game.Player.Character.IsOnFoot && ReturnStuff.BeInRange(Game.Player.Character.Position.Z, PackManMissions.CurrentPack.Z, 0.50f))
                            {
                                JobSeq++;
                                EntityClear.RemoveTargets();
                                if (PackManMissions.FirstPack)
                                {
                                    PackManMissions.FirstPack = false;
                                    PackManMissions.Timer02 = Game.GameTime + PackManMissions.Timer01;
                                }
                                iWait4Sec = Game.GameTime + 2000;
                                PackManMissions.PackDeliv++;
                                Game.Player.Character.Task.PlayAnimation("anim@mp_fireworks", "place_firework_3_box", 8.00f, 3000, true, 1.00f);
                            }

                            if (!PackManMissions.FirstPack)
                            {
                                if (PackManMissions.Timer02 > Game.GameTime)
                                {
                                    UiDisplay.SideBars[0].Data = "" + PackManMissions.PackDeliv + "/" + PackManMissions.PackCount + "";

                                    int iTotal = PackManMissions.Timer02 - Game.GameTime;
                                    UiDisplay.SideBars[1].Data = ReturnStuff.ShowComs(iTotal, false, false);
                                }
                                else
                                {
                                    JobSeq = 4;
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[14];
                                    EntityClear.RemoveTargets();
                                }
                            }
                        }
                        else if (JobSeq == 3)
                        {
                            if (iWait4Sec < Game.GameTime)
                            {
                                if (PackManMissions.LiveExport)
                                {
                                    EntityBuild.NPCSpawn(new PedFeat("a_c_hen"), ReturnStuff.AlterZHight(PackManMissions.CurrentPack, -1.00f), 0.00f);

                                    MissionData.PedList_01[0].Delete();
                                    MissionData.PedList_01.RemoveAt(0);
                                }
                                else
                                    EntityBuild.BuildProp(PackManMissions.Pacel, ReturnStuff.AlterZHight(PackManMissions.CurrentPack, -1.00f), Vector3.Zero, false, false);

                                if (PackManMissions.PackDeliv == PackManMissions.PackCount)
                                {
                                    PackManMissions.Timer02 += 45000;
                                    JobSeq = 4;
                                }
                                else
                                {
                                    PackManMissions.Timer02 += 25000;
                                    JobSeq = 1;
                                }

                                if (PackManMissions.DeliverVeh.ClassType == VehicleClass.Cycles)
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[11];
                                else
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[12];
                            }
                        }
                        else if (JobSeq == 4)
                        {
                            if (PackManMissions.DeliverVeh.IsDead)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(PackManMissions.DeliverVeh))
                            {
                                if (MissionData.Target_01 == null)
                                {
                                    PackManMissions.DeliverVeh.CurrentBlip.Remove();
                                    EntityBuild.AddTarget(new BlipForm(PackManMissions.MyPacks.PackVeh.V3, true, 5, 478, DataStore.MyLang.Maptext[42], PackManMissions.CoronaSize));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[14];
                                }
                                else if (PackManMissions.MoveYourV)
                                {
                                    if (ReturnStuff.AmINear(PackManMissions.MyPacks.PackVeh.V3, 60f))
                                    {
                                        EntityBuild.MoveThatCar(PackManMissions.MyPacks.PackVeh.V3);
                                        PackManMissions.MoveYourV = false;
                                    }
                                }
                                else if (ReturnStuff.AreUNear(PackManMissions.MyPacks.PackVeh.V3, PackManMissions.DeliverVeh.Position, PackManMissions.CoronaSize))
                                {
                                    EntityClear.RemoveTargets();
                                    EntityBuild.GetOutofVeh(Game.Player.Character, 2);
                                    PackManMissions.DeliverVeh.LockStatus = VehicleLockStatus.Locked;
                                    UiDisplay.sSubDisplay = "";
                                    JobSeq = 5;
                                }
                            }
                            else
                            {
                                if (MissionData.Target_01 != null)
                                {
                                    EntityClear.RemoveTargets();
                                    if (PackManMissions.DeliverVeh.ClassType == VehicleClass.Cycles)
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[11];
                                    else
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[12];
                                    EntityBuild.VehBlip(new BlipForm(66, DataStore.MyLang.Maptext[3]), PackManMissions.DeliverVeh);
                                }
                            }

                            if (PackManMissions.Timer02 > Game.GameTime)
                            {
                                UiDisplay.SideBars[0].Data = "" + PackManMissions.PackDeliv + "/" + PackManMissions.PackCount + "";

                                int iTotal = PackManMissions.Timer02 - Game.GameTime;
                                UiDisplay.SideBars[1].Data = ReturnStuff.ShowComs(iTotal, false, false);
                            }
                        }
                        else if (JobSeq == 5)
                        {
                            bool bDone = false;
                            PackManMissions.Timer02 -= Game.GameTime;
                            if (PackManMissions.PackDeliv == PackManMissions.PackCount)
                                bDone = true;
                            Packages_AddingAwards(bDone);
                            MissionEnd(Packages_Awards(PackManMissions.PackDeliv, PackManMissions.PackCount, PackManMissions.Timer02, true));
                        }
                        else if (JobSeq == 45)
                        {
                            if (LocationX == 1)
                                NSBanking.NSCoinInvestments(false, 4, 6, "Post OP Shares");
                            else if (LocationX == 2)
                                NSBanking.NSCoinInvestments(false, 5, 7, "GoPostal Shares");
                            else if (LocationX == 3)
                                NSBanking.NSCoinInvestments(false, 3, 8, "Pop's Pills Shares");
                            else if (LocationX == 4)
                                NSBanking.NSCoinInvestments(true, 7, 12, "Dollar Pills Shares");
                            else if (LocationX == 5)
                                NSBanking.NSCoinInvestments(false, 5, 7, "Sunset Bleach Shares");
                            else
                                NSBanking.NSCoinInvestments(false, 3, 5, "Weazel Shares");

                            GameOverFail(false);
                        }
                    }        //Packages
                    else if (JobType == 4)
                    {
                        if (ConvictMissions.PrisonAlarm)
                        {
                            Game.Player.WantedLevel = 0;
                            Function.Call(Hash.SET_DISPATCH_COPS_FOR_PLAYER, Game.Player.Character, false);
                            Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "re_prison");
                            Function.Call(Hash.STOP_ALARM, "PRISON_ALARMS", 0);
                            Function.Call(Hash.CLEAR_AMBIENT_ZONE_STATE, "AZ_COUNTRYSIDE_PRISON_01_ANNOUNCER_GENERAL", 0);
                            Function.Call(Hash.CLEAR_AMBIENT_ZONE_STATE, "AZ_COUNTRYSIDE_PRISON_01_ANNOUNCER_WARNING", 0);
                        }

                        if (JobSeq == 0)
                        {
                            JobSeq++;
                            if (DataStore.MySettings.FastTraveltoStart)
                                EntityBuild.WarptoAnyVeh(ConvictMissions.Bus, Game.Player.Character, 1);

                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[51];
                        }
                        else if (JobSeq == 1)
                        {
                            if (ConvictMissions.Bus.IsDead || Game.Player.WantedLevel > 0)
                                JobSeq = 45;
                            else if (ConvictMissions.WheelCheck && ReturnStuff.AmINear(ConvictMissions.Bus.Position, 55f))
                            {
                                if (!ConvictMissions.Bus.IsOnAllWheels)
                                {
                                    ConvictMissions.Bus.Position = new Vector3(ConvictMissions.Parade.BusPark.X, ConvictMissions.Parade.BusPark.Y, ConvictMissions.Parade.BusPark.Z);
                                    ConvictMissions.Bus.Rotation = new Vector3(0.00f, 0.00f, ConvictMissions.Parade.BusPark.R);
                                }
                                ConvictMissions.WheelCheck = false;
                            }
                            else if (Game.Player.Character.IsInVehicle(ConvictMissions.Bus))
                            {
                                if (!ConvictMissions.AddOutfit)
                                {
                                    ConvictMissions.AddOutfit = true;
                                    if (ConvictMissions.Uniform != null)
                                        EntityBuild.PedDresser(Game.Player.Character, ConvictMissions.Uniform);
                                }
                                else if (MissionData.Target_01 == null)
                                {
                                    ConvictMissions.Bus.CurrentBlip.Remove();
                                    EntityBuild.AddTarget(new BlipForm(ConvictMissions.Parade.ConMarch[ConvictMissions.Patrol], true, 5, 188, DataStore.MyLang.Maptext[44]));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[16] + ReturnStuff.StreetSpirit(ConvictMissions.Parade.ConMarch[ConvictMissions.Patrol]);
                                }
                                else if (ReturnStuff.AmINear(ConvictMissions.Parade.ConMarch[ConvictMissions.Patrol], 90f))
                                {
                                    JobSeq++;
                                    Convicts_DumpCons(ConvictMissions.Parade.ConMarch[ConvictMissions.Patrol]);
                                    EntityClear.RemoveTargets();
                                }
                            }
                            else
                            {
                                if (MissionData.Target_01 != null)
                                {
                                    EntityClear.RemoveTargets();
                                    EntityBuild.VehBlip(new BlipForm(5, DataStore.MyLang.Maptext[4]), ConvictMissions.Bus);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[15];
                                }
                            }
                        }
                        else if (JobSeq == 2)
                        {
                            JobSeq++;
                            EntityBuild.VehBlip(new BlipForm(5, DataStore.MyLang.Maptext[4]), ConvictMissions.Bus);
                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[16];
                            ConvictMissions.NoCoffee = Game.GameTime;
                        }
                        else if (JobSeq == 3)
                        {
                            if (ConvictMissions.Bus.IsDead || Game.Player.WantedLevel > 0)
                                JobSeq = 45;
                            else
                            {
                                if (ConvictMissions.HarryChant)
                                {
                                    if (ReturnStuff.AmIFar(ConvictMissions.HeadHarry.Position, 35f))
                                        Convicts_HarrySing();
                                }
                                else
                                {
                                    if (ReturnStuff.AmINear(ConvictMissions.HeadHarry.Position, 30f))
                                        Convicts_HarrySing();
                                }

                                if (Game.Player.Character.IsInVehicle(ConvictMissions.Bus))
                                {
                                    if (ConvictMissions.Bus.CurrentBlip.Exists())
                                    {
                                        ConvictMissions.Bus.CurrentBlip.Remove();
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[16];
                                    }
                                    else if (Game.IsControlJustPressed(2, GTA.Control.VehicleHorn))
                                    {
                                        JobSeq++;
                                        ConvictMissions.NoCoffee -= Game.GameTime;
                                        ConvictMissions.NoCoffee *= -1;
                                        ConvictMissions.TotalTime = Game.GameTime;
                                        if (ConvictMissions.HarryChant)
                                            Convicts_HarrySing();
                                        Convicts_KrishaToBus();
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[17];
                                    }
                                    else
                                    {
                                        UiDisplay.ControlerUI(DataStore.MyLang.Context[15], 1);
                                    }
                                }
                                else
                                {
                                    if (!ConvictMissions.Bus.CurrentBlip.Exists())
                                    {
                                        EntityClear.RemoveTargets();
                                        EntityBuild.VehBlip(new BlipForm(5, DataStore.MyLang.Maptext[4]), ConvictMissions.Bus);
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[15];
                                    }
                                }
                            }

                            Convicts_WalkLoop();
                        }
                        else if (JobSeq == 4)
                        {
                            if (ConvictMissions.Bus.IsDead || Game.Player.WantedLevel > 0)
                            {
                                Game.FadeScreenIn(100);
                                JobSeq = 45;
                            }
                        }
                        else if (JobSeq == 5)
                        {
                            if (ConvictMissions.HarryChant)
                            {
                                if (Game.IsControlJustPressed(0, GTA.Control.VehicleHorn))
                                {
                                    iWait4Sec = Game.GameTime + RandomX.RandInt(3000, 30000);
                                    Convicts_HarrySing();
                                }
                            }
                            else
                            {
                                if (iWait4Sec < Game.GameTime)
                                {
                                    Convicts_HarrySing();
                                    ConvictMissions.TotalChants++;
                                }
                            }

                            GetBackInVeh(ConvictMissions.Bus);

                            if (ConvictMissions.Bus.IsDead || Game.Player.WantedLevel > 0)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle())
                            {
                                if (MissionData.Target_01 == null)
                                {
                                    ConvictMissions.Bus.CurrentBlip.Remove();
                                    EntityBuild.AddTarget(new BlipForm(ConvictMissions.PrisonStop01, true, 5, 526, DataStore.MyLang.Maptext[35], 5f));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[17];
                                }
                                else if (ReturnStuff.AreUNear(ConvictMissions.PrisonStop01, ConvictMissions.Bus.Position, 3f))
                                {
                                    JobSeq++;
                                    Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "restrictedareas");
                                    ConvictMissions.PrisonAlarm = true;
                                    EntityClear.RemoveTargets();
                                    if (ConvictMissions.HarryChant)
                                        Convicts_HarrySing();
                                    EntityBuild.StopHere(ConvictMissions.Bus);
                                }
                            }
                            else
                            {
                                if (MissionData.Target_01 != null)
                                {
                                    EntityClear.RemoveTargets();
                                    EntityBuild.VehBlip(new BlipForm(5, DataStore.MyLang.Maptext[4]), ConvictMissions.Bus);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[15];
                                }
                            }
                        }
                        else if (JobSeq == 6)
                        {
                            GetBackInVeh(ConvictMissions.Bus);

                            if (ConvictMissions.Bus.IsDead || Game.Player.WantedLevel > 0)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle())
                            {
                                if (MissionData.Target_01 == null)
                                {
                                    ConvictMissions.Bus.CurrentBlip.Remove();
                                    EntityBuild.AddTarget(new BlipForm(ConvictMissions.PrisonStop02, true, 5, 526, DataStore.MyLang.Maptext[35], 5f));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[17];
                                }
                                else if (ReturnStuff.AreUNear(ConvictMissions.PrisonStop02, ConvictMissions.Bus.Position, 3f))
                                {
                                    JobSeq++;
                                    EntityClear.RemoveTargets();
                                    EntityBuild.StopHere(ConvictMissions.Bus);
                                    ConvictMissions.PrisGate = SearchFor.OpenThatGate(ConvictMissions.PrisonGate01, 5.0f);
                                }
                            }
                            else
                            {
                                if (MissionData.Target_01 != null)
                                {
                                    EntityClear.RemoveTargets();
                                    EntityBuild.VehBlip(new BlipForm(5, DataStore.MyLang.Maptext[4]), ConvictMissions.Bus);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[15];
                                }
                            }

                            EntityClear.ClearTheWay(false, true);
                        }
                        else if (JobSeq == 7)
                        {
                            GetBackInVeh(ConvictMissions.Bus);

                            if (ConvictMissions.Bus.IsDead)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle())
                            {
                                if (ConvictMissions.PrisGate != null)
                                {
                                    if (Function.Call<bool>(Hash.IS_DOOR_CLOSED, ConvictMissions.PrisGate.GetHashCode()))
                                        Function.Call(Hash._DOOR_CONTROL, Function.Call<int>(Hash.GET_HASH_KEY, "prop_gate_prison_01"), ConvictMissions.PrisGate.Position.X, ConvictMissions.PrisGate.Position.Y, ConvictMissions.PrisGate.Position.Z, false, 0.0f, 50.0f, 0.0f);

                                    if (MissionData.Target_01 == null)
                                    {
                                        ConvictMissions.Bus.CurrentBlip.Remove();
                                        EntityBuild.AddTarget(new BlipForm(ConvictMissions.PrisonStop03, true, 5, 526, DataStore.MyLang.Maptext[35], 5f));
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[17];
                                    }
                                    else if (ReturnStuff.AreUNear(ConvictMissions.PrisonStop03, ConvictMissions.Bus.Position, 3f))
                                    {
                                        JobSeq++;
                                        EntityClear.RemoveTargets();
                                        EntityBuild.StopHere(ConvictMissions.Bus);
                                        ConvictMissions.PrisGate = SearchFor.OpenThatGate(ConvictMissions.PrisonGate02, 5f);
                                    }
                                }
                                else
                                    ConvictMissions.PrisGate = SearchFor.OpenThatGate(ConvictMissions.PrisonGate01, 20.0f);
                            }
                            else
                            {
                                if (MissionData.Target_01 != null)
                                {
                                    EntityClear.RemoveTargets();
                                    EntityBuild.VehBlip(new BlipForm(5, DataStore.MyLang.Maptext[4]), ConvictMissions.Bus);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[15];
                                }
                            }
                            EntityClear.ClearTheWay(false, true);
                        }
                        else if (JobSeq == 8)
                        {
                            GetBackInVeh(ConvictMissions.Bus);

                            if (ConvictMissions.Bus.IsDead)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle())
                            {
                                if (ConvictMissions.PrisGate != null)
                                {
                                    if (Function.Call<bool>(Hash.IS_DOOR_CLOSED, ConvictMissions.PrisGate.GetHashCode()))
                                        Function.Call(Hash._DOOR_CONTROL, Function.Call<int>(Hash.GET_HASH_KEY, "prop_gate_prison_01"), ConvictMissions.PrisGate.Position.X, ConvictMissions.PrisGate.Position.Y, ConvictMissions.PrisGate.Position.Z, false, 0.0f, 50.0f, 0.0f);
                                    if (MissionData.Target_01 == null)
                                    {
                                        ConvictMissions.Bus.CurrentBlip.Remove();
                                        EntityBuild.AddTarget(new BlipForm(ConvictMissions.PrisonStop04, true, 5, 526, DataStore.MyLang.Maptext[35], 5f));
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[17];
                                    }
                                    else if (ReturnStuff.AreUNear(ConvictMissions.PrisonStop04, ConvictMissions.Bus.Position, 3f))
                                    {
                                        JobSeq++;
                                        EntityClear.RemoveTargets();
                                        EntityBuild.StopHere(ConvictMissions.Bus);
                                    }
                                }
                                else
                                    ConvictMissions.PrisGate = SearchFor.OpenThatGate(ConvictMissions.PrisonGate01, 20.0f);
                            }
                            else
                            {
                                if (MissionData.Target_01 != null)
                                {
                                    EntityClear.RemoveTargets();
                                    EntityBuild.VehBlip(new BlipForm(5, DataStore.MyLang.Maptext[4]), ConvictMissions.Bus);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[15];
                                }
                            }
                            EntityClear.ClearTheWay(false, true);
                        }
                        else if (JobSeq == 9)
                        {
                            if (ConvictMissions.Uniform != null)
                                EntityBuild.PedDresser(Game.Player.Character, ConvictMissions.Oufit);

                            SearchFor.SlowFastTravel(ConvictMissions.PrisonEnd);
                            ConvictMissions.ChantsListen *= -1;
                            Convicts_AddingAwards(false);
                            DataStore.MyDatSet.iWantedBribe += 1;

                            Game.Player.WantedLevel = 0;
                            Game.Player.IgnoredByPolice = false;
                            Function.Call(Hash.SET_DISPATCH_COPS_FOR_PLAYER, Game.Player.Character, true);
                            Function.Call(Has﻿h.REQUEST_SCRIPT, "restrictedareas");
                            Script.Wait(100);
                            if (Function.Ca﻿ll<bool>(Hash.HAS_SCRIPT_LOADED, "restrictedareas"))
                            {
                                Function.Call﻿(Hash.START_NEW_SCRIPT﻿, "restrictedareas", 1424);
                                Fun﻿ction.Call(Hash.SET_SCRIPT_AS_NO_LONGER_NEEDED, "restrictedareas");
                            }
                            MissionEnd(Convicts_Awards(ConvictMissions.CashPayment, true, false));
                        }
                        else if (JobSeq == 25)
                        {
                            if (ConvictMissions.Uniform != null)
                                EntityBuild.PedDresser(Game.Player.Character, ConvictMissions.Oufit);

                            Convicts_AddingAwards(true);
                            MissionEnd(Convicts_Awards(ConvictMissions.CashPayment, true, true));
                        }
                        else if (JobSeq == 45)
                        {
                            if (ConvictMissions.HarryChant)
                                DataStore.Hare.Stop();

                            if (ConvictMissions.Uniform != null)
                                EntityBuild.PedDresser(Game.Player.Character, ConvictMissions.Oufit);

                            if (ConvictMissions.PrisonAlarm)
                            {
                                Function.Call(Hash.SET_DISPATCH_COPS_FOR_PLAYER, Game.Player.Character, true);
                                ZancudaClosed();
                            }

                            GameOverFail(false);
                        }
                    }        //Convicts
                    else if (JobType == 5)
                    {
                        if (JobSeq == 0)
                        {
                            if (FubarMissions.StartDriver != null)
                            {
                                if (FubarMissions.FubVeh.Position.DistanceTo(FubarMissions.PlayerPos) < 30f)
                                {
                                    EntityBuild.GetOutofVeh(FubarMissions.StartDriver, 2);
                                    FubarMissions.StartDriver.Health = 0;
                                    FubarMissions.StartDriver = null;
                                }
                                else if (FubarMissions.PlayerPos.DistanceTo(Game.Player.Character.Position) > 30f)
                                {
                                    FubarMissions.PlayerPos = Game.Player.Character.Position;
                                    EntityBuild.DriveToDest(FubarMissions.FubVeh, FubarMissions.PlayerPos, FubarMissions.StartDriver, 35f, 1074528293);
                                }
                            }
                            else if (FubarMissions.FubVeh != null)
                            {
                                JobSeq++;
                                Fubar_AngreyTaxi();
                            }
                        }
                        else if (JobSeq == 1)
                        {
                            if (MissionData.iTracking < Game.GameTime)
                                EntityClear.MultiPedTracker();

                            if (FubarMissions.FubVeh.IsDead || !FubarMissions.FubVeh.IsDriveable)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(FubarMissions.FubVeh))
                            {
                                if (MissionData.Target_01 == null)
                                {
                                    FubarMissions.FubVeh.CurrentBlip.Remove();
                                    EntityBuild.AddTarget(new BlipForm(FubarMissions.Start.ParkHere.V3, true, 5, 480, DataStore.MyLang.Maptext[45], 5f));
                                    if (FubarMissions.Start.Name == "")
                                    {
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[19] + "~y~" + ReturnStuff.StreetSpirit(FubarMissions.Start.ParkHere.V3) + "~w~.";
                                    }
                                    else
                                    {
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[19] + "~y~" + FubarMissions.Start.Name + "~w~.";
                                    }
                                }
                                else if (FubarMissions.MoveIt)
                                {
                                    if (ReturnStuff.AreUNear(FubarMissions.Start.ParkHere.V3, FubarMissions.FubVeh.Position, 50f))
                                    {
                                        EntityBuild.MoveThatCar(FubarMissions.Start.ParkHere);
                                        FubarMissions.MoveIt = false;
                                    }
                                }
                                else if (ReturnStuff.AreUNear(FubarMissions.Start.ParkHere.V3, FubarMissions.FubVeh.Position, 4f))
                                {
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[20];

                                    if (Game.Player.IsPressingHorn)
                                    {
                                        JobSeq++;
                                        UiDisplay.sSubDisplay = "";
                                        EntityClear.RemoveTargets();
                                        Game.Player.WantedLevel = 0;
                                        EntityClear.CleanMultiPed(false, false);
                                        FubarMissions.MoveIt = false;
                                        iWait4Sec = Game.GameTime + RandomX.RandInt(1000, 4000);
                                    }
                                    else
                                    {
                                        UiDisplay.ControlerUI(DataStore.MyLang.Context[16], 1);
                                    }
                                }
                            }
                            else
                            {
                                if (MissionData.Target_01 != null)
                                {
                                    EntityClear.RemoveTargets();
                                    EntityBuild.VehBlip(new BlipForm(5, DataStore.MyLang.Maptext[16]), FubarMissions.FubVeh);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[18];
                                }
                            }
                        }
                        else if (JobSeq == 2)
                        {
                            if (iWait4Sec < Game.GameTime)
                            {
                                JobSeq++;
                                int iPed = 0;
                                if (FubarMissions.Start.PedNum > FubarMissions.End.PedNum)
                                    iPed = FubarMissions.Start.PedNum;
                                else
                                    iPed = FubarMissions.End.PedNum;

                                Fubar_CarShare(iPed);
                                UiDisplay.bUiDisplay = true;
                            }
                        }
                        else if (JobSeq == 3)
                        {
                            if (FubarMissions.Passengers == 1)
                            {
                                if (FubarMissions.Passenger01 != null)
                                    JobSeq++;
                            }
                            else if (FubarMissions.Passengers == 2)
                            {
                                if (FubarMissions.Passenger02 != null)
                                    JobSeq++;
                            }
                            else
                            {
                                if (FubarMissions.Passenger03 != null)
                                    JobSeq++;
                            }
                        }
                        else if (JobSeq == 4)
                        {
                            if (FubarMissions.FubVeh.IsDead || !FubarMissions.FubVeh.IsDriveable || Game.Player.IsAiming || Game.Player.WantedLevel > 0)
                                JobSeq = 45;
                            else if (FubarMissions.Passengers == 1)
                            {
                                if (FubarMissions.Passenger01.IsDead)
                                    JobSeq = 45;
                                else if (FubarMissions.Passenger01.IsInVehicle())
                                {
                                    JobSeq++;
                                    FubarMissions.Passenger01.CurrentBlip.Remove();
                                }
                                else
                                {
                                    if (Game.Player.IsPressingHorn)
                                        EntityBuild.EnterPlayerVeh(FubarMissions.Passenger01, 2, 2f);
                                }
                            }
                            else if (FubarMissions.Passengers == 2)
                            {
                                if (FubarMissions.Passenger01.IsDead || FubarMissions.Passenger02.IsDead)
                                    JobSeq = 45;
                                else if (FubarMissions.Passenger01.IsInVehicle() && FubarMissions.Passenger02.IsInVehicle())
                                {
                                    JobSeq++;
                                    FubarMissions.Passenger01.CurrentBlip.Remove();
                                    FubarMissions.Passenger02.CurrentBlip.Remove();
                                }
                                else
                                {
                                    if (Game.Player.IsPressingHorn)
                                    {
                                        EntityBuild.EnterPlayerVeh(FubarMissions.Passenger01, 2, 2f);
                                        EntityBuild.EnterPlayerVeh(FubarMissions.Passenger02, 3, 2f);
                                    }
                                }
                            }
                            else
                            {
                                if (FubarMissions.Passenger01.IsDead || FubarMissions.Passenger02.IsDead || FubarMissions.Passenger03.IsDead)
                                    JobSeq = 45;
                                else if (FubarMissions.Passenger01.IsInVehicle() && FubarMissions.Passenger02.IsInVehicle() && FubarMissions.Passenger03.IsInVehicle())
                                {
                                    JobSeq++;
                                    FubarMissions.Passenger01.CurrentBlip.Remove();
                                    FubarMissions.Passenger02.CurrentBlip.Remove();
                                    FubarMissions.Passenger03.CurrentBlip.Remove();
                                }
                                else
                                {
                                    if (Game.Player.IsPressingHorn)
                                    {
                                        EntityBuild.EnterPlayerVeh(FubarMissions.Passenger01, 2, 2f);
                                        EntityBuild.EnterPlayerVeh(FubarMissions.Passenger02, 3, 2f);
                                    }
                                }
                            }

                            if (FubarMissions.FuMeter < Game.GameTime)
                                Fubar_Math(true);
                        }
                        else if (JobSeq == 5)
                        {
                            if (FubarMissions.FollowThatCar)
                            {
                                SearchFor.MakeCarz.Add(new FindVeh(35f, 120f, new VehMods(ReturnStuff.AddRandomVeh(RandomX.RandInt(1, 9)), 24, false, true, ReturnStuff.FunPlates())));
                                JobSeq = 10;
                            }
                            else
                            {
                                JobSeq++;
                                EntityBuild.AddTarget(new BlipForm(FubarMissions.End.ParkHere.V3, true, 5, 164, DataStore.MyLang.Maptext[46], 5f));

                                if (FubarMissions.End.Name == "")
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[22] + "~y~" + ReturnStuff.StreetSpirit(FubarMissions.End.ParkHere.V3) + "~w~.";
                                else
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[22] + "~y~" + FubarMissions.End.Name + "~w~.";
                                
                                iWait4Sec = Game.GameTime + RandomX.RandInt(8000, 25000);
                            }
                        }
                        else if (JobSeq == 6)
                        {
                            GetBackInVeh(FubarMissions.FubVeh);

                            if (FubarMissions.FubVeh.IsDead || !FubarMissions.FubVeh.IsDriveable || Game.Player.IsAiming && Game.Player.Character.Weapons.Current.Hash != WeaponHash.Unarmed || Game.Player.WantedLevel > 0)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(FubarMissions.FubVeh))
                            {
                                if (MissionData.Target_01 == null)
                                {
                                    FubarMissions.FubVeh.CurrentBlip.Remove();
                                    EntityBuild.AddTarget(new BlipForm(FubarMissions.End.ParkHere.V3, true, 5, 480, DataStore.MyLang.Maptext[45], 5f));
                                    if (FubarMissions.End.Name == "")
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[22] + "~y~" + ReturnStuff.StreetSpirit(FubarMissions.End.ParkHere.V3) + "~w~.";
                                    else
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[22] + "~y~" + FubarMissions.End.Name + "~w~.";
                                }
                                else if (ReturnStuff.AreUNear(FubarMissions.End.ParkHere.V3, FubarMissions.FubVeh.Position, 90f))
                                {
                                    if (FubarMissions.MoveIt)
                                    {
                                        EntityBuild.MoveThatCar(FubarMissions.End.ParkHere);
                                        FubarMissions.MoveIt = true;
                                    }
                                    else if (ReturnStuff.AreUNear(FubarMissions.End.ParkHere.V3, FubarMissions.FubVeh.Position, 4f))
                                    {
                                        if (FubarMissions.FubVeh.IsStopped)
                                        {
                                            JobSeq++;
                                            iWait4Sec = Game.GameTime + 1000;
                                            UiDisplay.sSubDisplay = "";
                                            EntityClear.RemoveTargets();
                                        }
                                    }
                                }
                                else
                                {
                                    if (FubarMissions.Radio)
                                    {
                                        if (!FubarMissions.FubVeh.IsSeatFree(VehicleSeat.RightFront))
                                        {
                                            if (iWait4Sec < Game.GameTime)
                                            {
                                                iWait4Sec = Game.GameTime + RandomX.RandInt(8000, 25000);
                                                int iStation = RandomX.RandInt(0, 20);
                                                if (iStation == 17)
                                                    iStation = 255;
                                                Function.Call(Hash.SET_RADIO_TO_STATION_INDEX, iStation);
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                if (MissionData.Target_01 != null)
                                {
                                    EntityClear.RemoveTargets();
                                    EntityBuild.VehBlip(new BlipForm(5, DataStore.MyLang.Maptext[16]), FubarMissions.FubVeh);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[18];
                                }
                            }

                            if (FubarMissions.FuMeter < Game.GameTime)
                                Fubar_Math(true);
                        }
                        else if (JobSeq == 7)
                        {
                            if (FubarMissions.FubVeh.IsDead || !FubarMissions.FubVeh.IsDriveable)
                                JobSeq = 45;
                            else if (FubarMissions.Passenger01.IsInVehicle())
                            {
                                if (FubarMissions.Passenger01.IsDead)
                                    JobSeq = 45;
                                else if (iWait4Sec < Game.GameTime)
                                {
                                    iWait4Sec = Game.GameTime + 8000;
                                    Vector3 WalkHere = new Vector3(FubarMissions.End.PedHere.X, FubarMissions.End.PedHere.Y, FubarMissions.End.PedHere.Z);
                                    EntityBuild.GetOutofVeh(FubarMissions.Passenger01, 0);
                                    FubarMissions.Passenger01.Task.GoTo(WalkHere);
                                    if (FubarMissions.Passengers == 2)
                                    {
                                        if (FubarMissions.Passenger02.IsDead)
                                            JobSeq = 45;
                                        else
                                        {
                                            EntityBuild.GetOutofVeh(FubarMissions.Passenger02, 0);
                                            FubarMissions.Passenger02.Task.GoTo(WalkHere);
                                        }
                                    }
                                    else if (FubarMissions.Passengers == 3)
                                    {
                                        if (FubarMissions.Passenger02.IsDead || FubarMissions.Passenger03.IsDead)
                                            JobSeq = 45;
                                        else
                                        {
                                            EntityBuild.GetOutofVeh(FubarMissions.Passenger02, 0);
                                            FubarMissions.Passenger02.Task.GoTo(WalkHere);
                                            EntityBuild.GetOutofVeh(FubarMissions.Passenger03, 0);
                                            FubarMissions.Passenger03.Task.GoTo(WalkHere);
                                        }
                                    }
                                }
                            }
                            else
                            {
                                EntityClear.RemoveTargets();
                                for (int i = 0; i < MissionData.PedList_01.Count; i++)
                                    EntityLog.CleanUp(MissionData.PedList_01[i], false);

                                MissionData.PedList_01.Clear();
                                UiDisplay.bUiDisplay = false;
                                ControlSelect(6);
                            }
                        }
                        else if (JobSeq == 8)
                        {
                            DataStore.MyDatSet.iFubard += FubarMissions.RepMish;
                            FubarMissions.TotalPay += (FubarMissions.RepMish * 10);
                            if (FubarMissions.RepMish < 25)
                            {
                                if (FubarMissions.RepMish > 4)
                                    NSBanking.NSCoinInvestments(true, FubarMissions.RepMish - 2, FubarMissions.RepMish, "Fubar Inc");
                                else
                                    NSBanking.NSCoinInvestments(true, 0, 1, "Fubar Inc");
                            }
                            else
                                NSBanking.NSCoinInvestments(true, 27, 28, "Fubar Inc");

                            MissionEnd(Fubar_Awards(FubarMissions.TotalPay, true));
                        }
                        else if (JobSeq == 10)
                        {
                            if (FubarMissions.ThatDriver != null)
                            {
                                JobSeq++;
                                UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[17], "", 1f, true));
                                FubarMissions.SlideBarPos = UiDisplay.SideBars.Count - 1;
                                UiDisplay.bUiDisplay = true;
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[242];
                            }
                        }
                        else if (JobSeq == 11)
                        {
                            UiDisplay.SpookBarz(FubarMissions.ThatCar, FubarMissions.SlideBarPos, false);

                            if (FubarMissions.FubVeh.IsDead || !FubarMissions.FubVeh.IsDriveable || Game.Player.IsAiming && Game.Player.Character.Weapons.Current.Hash != WeaponHash.Unarmed || Game.Player.WantedLevel > 0)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(FubarMissions.FubVeh))
                            {
                                if (ReturnStuff.AreUNear(FubarMissions.End.ParkHere.V3, FubarMissions.ThatCar.Position, 90f))
                                {
                                    if (FubarMissions.MoveIt)
                                    {
                                        EntityBuild.MoveThatCar(FubarMissions.End.ParkHere);
                                        EntityBuild.DriveToDest(FubarMissions.ThatCar, FubarMissions.End.ParkHere, FubarMissions.ThatDriver, 3f, 786603);
                                        FubarMissions.MoveIt = true;
                                    }
                                    else if (ReturnStuff.AreUNear(FubarMissions.End.ParkHere.V3, FubarMissions.ThatCar.Position, 20f))
                                    {
                                        JobSeq++;
                                        FubarMissions.ThatCar.CurrentBlip.Remove();
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[243];
                                    }
                                }
                                else
                                {
                                    if (FubarMissions.Radio)
                                    {
                                        if (!FubarMissions.FubVeh.IsSeatFree(VehicleSeat.RightFront))
                                        {
                                            if (iWait4Sec < Game.GameTime)
                                            {
                                                iWait4Sec = Game.GameTime + RandomX.RandInt(8000, 25000);
                                                int iStation = RandomX.RandInt(0, 20);
                                                if (iStation == 17)
                                                    iStation = 255;
                                                Function.Call(Hash.SET_RADIO_TO_STATION_INDEX, iStation);
                                            }
                                        }
                                    }
                                }
                            }
                            else
                                JobSeq = 45;

                            if (FubarMissions.FuMeter < Game.GameTime)
                                Fubar_Math(true);
                        }
                        else if (JobSeq == 12)
                        {
                            UiDisplay.SpookBarz(FubarMissions.ThatCar, FubarMissions.SlideBarPos, false);

                            if (FubarMissions.FubVeh.IsStopped)
                            {
                                iWait4Sec = Game.GameTime + 1000;
                                UiDisplay.sSubDisplay = "";
                                UiDisplay.SideBars.RemoveAt(FubarMissions.SlideBarPos);
                                EntityClear.RemoveTargets();
                                JobSeq = 7;
                            }
                        }
                        else if (JobSeq == 101)
                        {
                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[243];

                            if (FubarMissions.FubVeh.IsStopped)
                            {
                                iWait4Sec = Game.GameTime + 1000;
                                UiDisplay.sSubDisplay = "";
                                UiDisplay.SideBars.RemoveAt(FubarMissions.SlideBarPos);
                                EntityClear.RemoveTargets();
                                JobSeq = 7;
                            }
                        }
                        else if (JobSeq == 45)
                        {
                            NSBanking.NSCoinInvestments(false, 5, 7, "Fubar Shares");
                            EntityBuild.FreeSeat(FubarMissions.FubVeh, 2, true);
                            EntityBuild.FreeSeat(FubarMissions.FubVeh, 3, true);
                            EntityBuild.FreeSeat(FubarMissions.FubVeh, 4, true);
                            GameOverFail(false);
                        }
                    }        //Fubar
                    else if (JobType == 6)
                    {
                        if (LocationX == 1)
                        {

                        }            // red nut air race--moved to racist
                        else if (LocationX == 2)
                        {
                            if (JobSeq == 0)
                            {
                                JobSeq++;
                                EntityBuild.AddTarget(new BlipForm(FubarMissions.SpTarg, true, 5, -1, DataStore.MyLang.Maptext[47], 1f));

                                if (DataStore.MySettings.FastTraveltoStart)
                                    SearchFor.SlowFastTravel(MissionData.vFuMiss, 0.00f);
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[26];
                            }
                            else if (JobSeq == 1)
                            {
                                if (ReturnStuff.AmINear(FubarMissions.SpTarg, 2f))
                                {
                                    JobSeq++;
                                    EntityClear.RemoveTargets();
                                    FubarMissions.FubVeh.FreezePosition = false;
                                    EntityBuild.VehBlip(new BlipForm(5, DataStore.MyLang.Maptext[5]), FubarMissions.FubVeh);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[27];
                                }
                            }
                            else if (JobSeq == 2)
                            {
                                if (FubarMissions.FubVeh.IsDead || !FubarMissions.FubVeh.IsDriveable)
                                    JobSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(FubarMissions.FubVeh))
                                {
                                    JobSeq++;
                                    FubarMissions.FubVeh.CurrentBlip.Remove();
                                    EntityBuild.AddTarget(new BlipForm(FubarMissions.Start.ParkHere.V3, true, 5, 280, DataStore.MyLang.Maptext[48], 10f));
                                    if (FubarMissions.Start.Name == "")
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[28] + "~y~" + World.GetStreetName(FubarMissions.Start.ParkHere.V3);
                                    else
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[28] + "~y~" + FubarMissions.Start.Name;
                                }
                            }
                            else if (JobSeq == 3)
                            {
                                GetBackInVeh(FubarMissions.FubVeh);

                                if (FubarMissions.FubVeh.IsDead || !FubarMissions.FubVeh.IsDriveable)
                                    JobSeq = 45;
                                else if (!Game.Player.Character.IsInVehicle())
                                {
                                    if (MissionData.Target_01 != null)
                                    {
                                        EntityClear.RemoveTargets();
                                        EntityBuild.VehBlip(new BlipForm(5, DataStore.MyLang.Maptext[5]), FubarMissions.FubVeh);
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[27];
                                    }
                                }
                                else if (ReturnStuff.AmINear(FubarMissions.Start.ParkHere.V3, 5f))
                                {
                                    if (!FubarMissions.FubVeh.IsInAir)
                                    {
                                        JobSeq++;
                                        EntityClear.RemoveTargets();
                                        EntityBuild.StopHere(FubarMissions.FubVeh);
                                        UiDisplay.sSubDisplay = "";
                                        FubarMissions.Passenger01 = EntityBuild.NPCSpawn(new PedFeat("", false, 160, 0, 0, null, 2, true, 18, DataStore.MyLang.Maptext[48]), FubarMissions.Start.PedHere);
                                    }
                                }
                                else
                                {
                                    if (MissionData.Target_01 == null)
                                    {
                                        FubarMissions.FubVeh.CurrentBlip.Remove();
                                        EntityBuild.AddTarget(new BlipForm(FubarMissions.Start.ParkHere.V3, true, 5, 280, DataStore.MyLang.Maptext[48], 10f));
                                        if (FubarMissions.Start.Name == "")
                                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[28] + "~y~" + World.GetStreetName(FubarMissions.Start.ParkHere.V3);
                                        else
                                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[28] + "~y~" + FubarMissions.Start.Name;
                                    }
                                }

                            }
                            else if (JobSeq == 4)
                            {
                                GetBackInVeh(FubarMissions.FubVeh);

                                if (FubarMissions.FubVeh.IsDead || !FubarMissions.FubVeh.IsDriveable)
                                    JobSeq = 45;
                                else if (FubarMissions.Passenger01 != null)
                                {
                                    int iRanPsyco = RandomX.FindRandom("Pilot02b", 0, 50);
                                    if (iRanPsyco < 5)
                                    {
                                        JobSeq = 40;
                                        EntityBuild.ArmsRegulator(FubarMissions.Passenger01, 3);
                                        EntityBuild.AttackThePlayer(FubarMissions.Passenger01, false, true, true);
                                        iWait4Sec = Game.GameTime + 25000;

                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[30];
                                    }
                                    else
                                    {
                                        JobSeq++;
                                        SearchFor.BackSeat.Add(new FindSeat(3, FubarMissions.FubVeh, FubarMissions.Passenger01, 1.7f));
                                    }
                                    iWait4Sec = Game.GameTime + 12000;
                                }
                            }
                            else if (JobSeq == 5)
                            {
                                GetBackInVeh(FubarMissions.FubVeh);

                                if (FubarMissions.FubVeh.IsDead || !FubarMissions.FubVeh.IsDriveable || FubarMissions.Passenger01.IsDead)
                                    JobSeq = 45;
                                else if (FubarMissions.Passenger01.IsInHeli)
                                {
                                    JobSeq++;
                                    EntityBuild.AddTarget(new BlipForm(FubarMissions.End.ParkHere.V3, true, 5, 475, DataStore.MyLang.Maptext[48], 10f));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[29];
                                }
                            }
                            else if (JobSeq == 6)
                            {
                                GetBackInVeh(FubarMissions.FubVeh);

                                if (FubarMissions.FubVeh.IsDead || !FubarMissions.FubVeh.IsDriveable || FubarMissions.Passenger01.IsDead)
                                    JobSeq = 45;
                                else if (ReturnStuff.AmINear(FubarMissions.End.ParkHere.V3, 5f))
                                {
                                    FubarMissions.FubVeh.EngineRunning = false;
                                    if (FubarMissions.FubVeh.IsInAir == false)
                                    {
                                        JobSeq++;
                                        UiDisplay.sSubDisplay = "";
                                        EntityBuild.StopHere(FubarMissions.FubVeh);
                                        EntityClear.RemoveTargets();
                                        EntityBuild.GetOutofVeh(FubarMissions.Passenger01, 0);
                                        EntityBuild.WalkThisWay(FubarMissions.Passenger01, FubarMissions.End.PedHere.V3, 1.50f);
                                    }
                                }
                            }
                            else if (JobSeq == 7)
                            {
                                if (FubarMissions.FubVeh.IsDead || !FubarMissions.FubVeh.IsDriveable || FubarMissions.Passenger01.IsDead)
                                    JobSeq = 45;
                                else if (ReturnStuff.AmINear(FubarMissions.End.PedHere.V3, 95f) || ReturnStuff.AreUNear(FubarMissions.End.PedHere.V3, FubarMissions.Passenger01.Position, 2f))
                                {
                                    FubarMissions.TotalPay = 5000;
                                    UiDisplay.sSubDisplay = "";
                                    DataStore.MyDatSet.iPegsSafeHeliTest = DataStore.iPegsSafeHeli;
                                    DataStore.MyDatSet.iGotPegsus = DataStore.iProcessForPegs;
                                    NSBanking.NSCoinInvestments(true, 2, 5, "SecuroServ Shares");

                                    MissionEnd(Pilot_Awards(FubarMissions.TotalPay, true));
                                }
                            }
                            else if (JobSeq == 40)
                            {
                                if (iWait4Sec < Game.GameTime)
                                {
                                    FubarMissions.TotalPay = 5000;
                                    UiDisplay.sSubDisplay = "";
                                    DataStore.MyDatSet.iPegsSafeHeliTest = DataStore.iPegsSafeHeli;
                                    DataStore.MyDatSet.iGotPegsus = DataStore.iProcessForPegs;
                                    NSBanking.NSCoinInvestments(true, 2, 5, "SecuroServ Shares");
                                    DataStore.MyAchivments.Planes02_ItsThePlayerBase++;
                                    MissionEnd(Pilot_Awards(FubarMissions.TotalPay, true));
                                }
                            }
                            else if (JobSeq == 45)
                            {
                                NSBanking.NSCoinInvestments(false, 2, 7, "SecuroServ Shares");
                                GameOverFail(false);
                            }
                        }       // deliver ceo
                        else if (LocationX == 3)
                        {
                            if (JobSeq == 0)
                            {
                                JobSeq++;
                                if (DataStore.MySettings.FastTraveltoStart)
                                    EntityBuild.WarptoAnyVeh(BertMissions.Bert, Game.Player.Character, 1);

                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[31];
                            }
                            else if (JobSeq == 1)
                            {
                                if (ReturnStuff.AmINear(BertMissions.Bert.Position, 55f))
                                {
                                    JobSeq++;
                                    BertMissions.Bert.FreezePosition = false;
                                    EntityBuild.ResetVehPos(BertMissions.Bert, BertMissions.BertPark);

                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[32];
                                }
                                Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "re_armybase");
                            }
                            else if (JobSeq == 2)
                            {
                                if (BertMissions.Bert.IsDead)
                                    JobSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(BertMissions.Bert))
                                {
                                    JobSeq++;
                                    BertMissions.Bert.CurrentBlip.Remove();
                                    EntityBuild.AddTarget(new BlipForm(BertMissions.Target02, true, 5, -1, DataStore.MyLang.Maptext[50]));

                                    UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[0], "$" + ReturnStuff.ShowComs(BertMissions.CashPay, true, false), 0f, false));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[33];
                                    UiDisplay.bUiDisplay = true;
                                }
                                else if (ReturnStuff.AmINear(BertMissions.Bert.Position, 55f))
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[32];
                                else
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[31];
                                Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "re_armybase");
                            }
                            else if (JobSeq == 3)
                            {
                                if (BertMissions.Bert.IsDead || !Game.Player.Character.IsInVehicle(BertMissions.Bert))
                                    JobSeq = 45;
                                else if (ReturnStuff.AmIFar(BertMissions.BertPark.V3, 2100f))
                                {
                                    JobSeq++;
                                    EntityClear.RemoveTargets();
                                    BertMissions.TimeLeft = Game.GameTime + 150000;
                                    UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[1], "", 0f, false));
                                    Game.Player.WantedLevel = 4;
                                    BertMissions.InFort = false;
                                    ZancudaClosed();
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[34];
                                }
                                else
                                    Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "re_armybase");
                            }
                            else if (JobSeq == 4)
                            {
                                if (BertMissions.Bert.IsDead || !Game.Player.Character.IsInVehicle(BertMissions.Bert))
                                    JobSeq = 45;
                                else if (BertMissions.TimeLeft > Game.GameTime)
                                {
                                    if (MissionData.iTracking < Game.GameTime)
                                        BertMissions.BullsEyes += EntityBuild.DogFighterTracking();
                                    else
                                    {
                                        int iT = BertMissions.TimeLeft - Game.GameTime;
                                        UiDisplay.SideBars[1].Data = ReturnStuff.ShowComs(iT, false, false);
                                    }
                                }
                                else
                                {
                                    JobSeq++;
                                    Game.Player.WantedLevel = 2;
                                    EntityClear.CleanMultiPed(false, false);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[7];
                                }

                                if (BertMissions.CashPay > 0)
                                    BertMissions.CashPay = ReturnStuff.MultiDamage(true, false, 0);
                                else
                                    JobSeq = 45;
                            }
                            else if (JobSeq == 5)
                            {
                                if (BertMissions.Bert.IsDead || !Game.Player.Character.IsInVehicle(BertMissions.Bert))
                                    JobSeq = 45;
                                else if (Game.Player.WantedLevel < 1)
                                {
                                    JobSeq++;
                                    EntityBuild.AddTarget(new BlipForm(BertMissions.Target03, true, 5, 569, DataStore.MyLang.Maptext[51], 25f));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[35];
                                }

                                if (BertMissions.CashPay > 0)
                                    BertMissions.CashPay = ReturnStuff.MultiDamage(true, false, 0);
                                else
                                    JobSeq = 45;
                            }
                            else if (JobSeq == 6)
                            {
                                if (BertMissions.Bert.IsDead || !Game.Player.Character.IsInVehicle(BertMissions.Bert))
                                    JobSeq = 45;
                                if (ReturnStuff.AreUNear(BertMissions.Target03, BertMissions.Bert.Position, 5f))
                                {
                                    JobSeq++;
                                    EntityClear.RemoveTargets();
                                    EntityBuild.StopHere(BertMissions.Bert);
                                    UiDisplay.sSubDisplay = "";
                                    BertMissions.Bert.Position = new Vector3(2134.79f, 4781.249f, 40.41209f);
                                    BertMissions.Bert.Heading = 28.53162f;
                                    BertMissions.Bert.LockStatus = VehicleLockStatus.Locked;

                                    SearchFor.SlowFastTravel(BertMissions.EndPoint01);
                                }
                                else if (BertMissions.CashPay > 0)
                                    BertMissions.CashPay = ReturnStuff.MultiDamage(true, false, 0);
                                else
                                    JobSeq = 45;
                            }
                            else if (JobSeq == 7)
                            {
                                if (BertMissions.BullsEyes > DataStore.MyAchivments.Planes03_KeptItTogether)
                                    DataStore.MyAchivments.Planes03_KeptItTogether = BertMissions.BullsEyes;
                                DataStore.MyDatSet.iPegsWarPlaneTest = DataStore.iPegsWarPlane;
                                DataStore.MyDatSet.iGotPegsus = DataStore.iProcessForPegs;
                                NSBanking.NSCoinInvestments(false, 12, 24, "Warstock Shares");
                                MissionEnd(Pilot_Awards(BertMissions.CashPay, true));
                            }
                            else if (JobSeq == 45)
                            {
                                if (BertMissions.InFort)
                                {
                                    BertMissions.InFort = false;
                                    ZancudaClosed();
                                }

                                GameOverFail(false);
                            }
                        }       // steal brrrrrrt
                        else if (LocationX == 4)
                        {
                            if (JobSeq == 0)
                            {
                                JobSeq++;
                                if (DataStore.MySettings.FastTraveltoStart)
                                    SearchFor.SlowFastTravel(MissionData.vFuMiss, 0.00f);

                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[36];
                            }
                            else if (JobSeq == 1)
                            {
                                if (ReturnStuff.AmINear(CeoExMissions.Stairs[CeoExMissions.Patrol], 2f))
                                {
                                    EntityClear.RemoveTargets();
                                    CeoExMissions.Patrol++;
                                    if (CeoExMissions.Patrol < CeoExMissions.Stairs.Count)
                                        EntityBuild.AddTarget(new BlipForm(CeoExMissions.Stairs[CeoExMissions.Patrol], true, 5, -1, DataStore.MyLang.Maptext[52], 1f));
                                    else
                                    {
                                        JobSeq++;
                                        CeoExMissions.Patrol = 0;
                                        CeoExMissions.Heli = EntityBuild.VehicleSpawn(new VehMods("Buzzard", 0, 5, false, DataStore.MyLang.Maptext[5]), CeoExMissions.HeliPos);
                                    }
                                }
                            }
                            else if (JobSeq == 2)
                            {
                                if (CeoExMissions.Heli.IsDead || !CeoExMissions.Heli.IsDriveable)
                                    JobSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(CeoExMissions.Heli))
                                {
                                    JobSeq++;
                                    CeoExMissions.Heli.CurrentBlip.Remove();
                                    EntityBuild.AddTarget(new BlipForm(CeoExMissions.Targ01, true, 5, 481, DataStore.MyLang.Maptext[38]));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[38];
                                }
                                else if (ReturnStuff.AmINear(CeoExMissions.Heli.Position, 15f))
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[37];
                                else
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[36];
                            }
                            else if (JobSeq == 3)
                            {
                                if (CeoExMissions.Heli.IsDead || !CeoExMissions.Heli.IsDriveable)
                                    JobSeq = 45;
                                else if (ReturnStuff.AmINear(CeoExMissions.Targ01, 400f))
                                {
                                    JobSeq++;
                                    EntityClear.RemoveTargets();
                                    CeoExMissions.Patrol = CeoExMissions.FlyBy.Count - 1;

                                    CeoExMissions.Pilot = EntityBuild.NPCSpawn(new PedFeat(ReturnStuff.RandNPC(43), 0), new Vector3(0.00f, 0.00f, 0.00f), 0.00f);
                                    CeoExMissions.Carg = EntityBuild.VehicleSpawn(new VehMods("Cargobob2", 6, 3, false, DataStore.MyLang.Maptext[20]), CeoExMissions.Targ01, 0.00f);
                                    EntityBuild.WarptoAnyVeh(CeoExMissions.Carg, CeoExMissions.Pilot, 1);
                                    EntityBuild.FlyHeli(CeoExMissions.Pilot, CeoExMissions.FlyBy[CeoExMissions.Patrol], 200.00f, 0.00f);
                                    CeoExMissions.Car = EntityBuild.VehicleSpawn(new VehMods(ReturnStuff.AddRandomVeh(1), 7), ReturnStuff.AlterZHight(CeoExMissions.Carg.Position, -10f), CeoExMissions.Carg.Heading);
                                    CeoExMissions.Car.AttachTo(CeoExMissions.Carg, CeoExMissions.Carg.Handle, new Vector3(0.0f, 0.0f, -3.0f), new Vector3(0.0f, -15.0f, 0.0f));
                                }
                            }
                            else if (JobSeq == 4)
                            {
                                if (Game.Player.Character.Position.Z < CeoExMissions.Carg.Position.Z)
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[39];
                                else
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[40];

                                if (CeoExMissions.Carg.IsDead || CeoExMissions.Car.IsDead)
                                {
                                    CeoExMissions.Carg.Explode();
                                    CeoExMissions.Car.Explode();
                                    CeoExMissions.DistanceB4 = CeoExMissions.Carg.Position.DistanceTo(CeoExMissions.Targ01);
                                    UiDisplay.sSubDisplay = "";
                                    DataStore.MyDatSet.iPegsWarHeliTest = DataStore.iPegsWarHeli;
                                    DataStore.MyDatSet.iGotPegsus = DataStore.iProcessForPegs;
                                    MissionEnd(Pilot_Awards(500, true));
                                }
                                else if (!CeoExMissions.Car.IsAttachedTo(CeoExMissions.Carg))
                                    CeoExMissions.Car.AttachTo(CeoExMissions.Carg, CeoExMissions.Car.Handle, new Vector3(0.00f, 0.00f, -3.00f), new Vector3(0.00f, -15.00f, 0.00f));
                                else if (ReturnStuff.AreUNear(CeoExMissions.FlyBy[CeoExMissions.Patrol], CeoExMissions.Car.Position, 30f))
                                {
                                    CeoExMissions.Patrol--;
                                    if (CeoExMissions.Patrol < 0)
                                        JobSeq = 10;
                                    else
                                        EntityBuild.FlyHeli(CeoExMissions.Pilot, CeoExMissions.FlyBy[CeoExMissions.Patrol], 200.00f, 0.00f);
                                }
                                else if (CeoExMissions.GoHigh)
                                {
                                    if (ReturnStuff.AreUNear(CeoExMissions.Higher, CeoExMissions.Pilot.Position, 20f))
                                    {
                                        EntityBuild.FlyHeli(CeoExMissions.Pilot, CeoExMissions.FlyBy[CeoExMissions.Patrol], 150.00f, 0.00f);
                                        CeoExMissions.GoHigh = false;
                                    }
                                }
                                else if (CeoExMissions.Carg.Position.Z < CeoExMissions.FlyBy[CeoExMissions.Patrol].Z - 50.0f && CeoExMissions.Patrol > 2)
                                {
                                    CeoExMissions.GoHigh = true;
                                    CeoExMissions.Higher = ReturnStuff.AlterZHight(CeoExMissions.Carg.Position, 150.00f);
                                    EntityBuild.FlyHeli(CeoExMissions.Pilot, CeoExMissions.Higher, 150.00f, 0.00f);
                                }
                            }
                            else if (JobSeq == 10)
                            {
                                UiDisplay.sSubDisplay = "";
                                CeoExMissions.Carg.Position = new Vector3(6000.01f, -2500.01f, 1500.01f);
                                CeoExMissions.Car.Position = new Vector3(6000.01f, -2500.01f, 1500.01f);
                                DataStore.MyAchivments.Planes04_AllYouNeedIsHommingMissiles++;
                                GameOverFail(true);
                            }
                            else if (JobSeq == 45)
                            {
                                GameOverFail(false);
                            }
                        }       // ceo imp/exp
                        else if (LocationX == 5)
                        {
                            if (CropMissions.Spray)
                            {
                                if (CropMissions.MuckLeft > Game.GameTime)
                                {
                                    int iPost = CropMissions.MuckLeft - Game.GameTime;
                                    iPost = iPost / 10;
                                    UiDisplay.SideBars[0].Data = " " + iPost + "Lbs ";
                                }
                                else
                                {
                                    CropMissions.Spray = false;
                                    JobSeq = 45;
                                }

                                if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, "scr_carsteal4"))
                                {
                                    Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_carsteal4");
                                    Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_carsteal4_wheel_burnout", CropMissions.Plane.Handle, -3.94f, -0.8f, -0.55f, 0, 0, 0, 0.30f, 0, 1, 0);
                                    Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_COLOUR, 220.0f, 220.0f, 220.0f);
                                }
                                else
                                    Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_carsteal4");

                                if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, "scr_carsteal4"))
                                {
                                    Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_carsteal4");
                                    Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_carsteal4_wheel_burnout", CropMissions.Plane.Handle, 3.94f, -0.8f, -0.55f, 0, 0, 0, 0.30f, 0, 1, 0);
                                    Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_COLOUR, 220.0f, 220.0f, 220.0f);
                                }
                                else
                                    Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_carsteal4");
                                if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, "scr_carsteal4"))
                                {
                                    Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_carsteal4");
                                    Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_carsteal4_wheel_burnout", CropMissions.Plane.Handle, -2.815f, -0.8f, -0.6f, 0, 0, 0, 0.30f, 0, 1, 0);
                                    Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_COLOUR, 220.0f, 220.0f, 220.0f);
                                }
                                else
                                    Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_carsteal4");
                                if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, "scr_carsteal4"))
                                {
                                    Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_carsteal4");
                                    Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_carsteal4_wheel_burnout", CropMissions.Plane.Handle, 2.815f, -0.8f, -0.6f, 0, 0, 0, 0.30f, 0, 1, 0);
                                    Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_COLOUR, 220.0f, 220.0f, 220.0f);
                                }
                                else
                                    Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_carsteal4");
                                if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, "scr_carsteal4"))
                                {
                                    Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_carsteal4");
                                    Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_carsteal4_wheel_burnout", CropMissions.Plane.Handle, -1.687f, -0.8f, -0.65f, 0, 0, 0, 0.30f, 0, 1, 0);
                                    Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_COLOUR, 220.0f, 220.0f, 220.0f);
                                }
                                else
                                    Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_carsteal4");
                                if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, "scr_carsteal4"))
                                {
                                    Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_carsteal4");
                                    Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_carsteal4_wheel_burnout", CropMissions.Plane.Handle, 1.687f, -0.8f, -0.65f, 0, 0, 0, 0.30f, 0, 1, 0);
                                    Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_COLOUR, 220.0f, 220.0f, 220.0f);
                                }
                                else
                                    Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_carsteal4");
                                if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, "scr_carsteal4"))
                                {
                                    Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_carsteal4");
                                    Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_carsteal4_wheel_burnout", CropMissions.Plane.Handle, -0.562f, -0.8f, -0.7f, 0, 0, 0, 0.30f, 0, 1, 0);
                                    Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_COLOUR, 220.0f, 220.0f, 220.0f);
                                }
                                else
                                    Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_carsteal4");
                                if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, "scr_carsteal4"))
                                {
                                    Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_carsteal4");
                                    Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_carsteal4_wheel_burnout", CropMissions.Plane.Handle, 0.562f, -0.8f, -0.7f, 0, 0, 0, 0.30f, 0, 1, 0);
                                    Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_COLOUR, 220.0f, 220.0f, 220.0f);
                                }
                                else
                                    Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_carsteal4");
                            }

                            if (JobSeq == 0)
                            {
                                JobSeq++;
                                if (DataStore.MySettings.FastTraveltoStart)
                                    EntityBuild.WarptoAnyVeh(CropMissions.Plane, Game.Player.Character, 1);
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[41];
                            }
                            else if (JobSeq == 1)
                            {
                                if (ReturnStuff.AmINear(CropMissions.Plane.Position, 55f))
                                {
                                    JobSeq++;
                                    CropMissions.Plane.FreezePosition = false;
                                    EntityBuild.ResetVehPos(CropMissions.Plane, CropMissions.PlaneStart);
                                    int iPos = CropMissions.MuckLeft / 10;
                                    UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[5], " " + iPos + " Lbs ", 0f, false));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[42];
                                }
                            }
                            else if (JobSeq == 2)
                            {
                                if (CropMissions.Plane.IsDead || !CropMissions.Plane.IsDriveable)
                                    JobSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(CropMissions.Plane))
                                {
                                    JobSeq++;
                                    CropMissions.Plane.CurrentBlip.Remove();
                                    Pilot05_Target(CropMissions.FlyUp, CropMissions.FlyUpRot, Vector3.Zero, Vector3.Zero, true, false);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[43];
                                    UiDisplay.bUiDisplay = true;
                                }
                                else if (ReturnStuff.AmINear(CropMissions.Plane.Position, 55f))
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[42];
                                else
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[41];
                            }
                            else if (JobSeq == 3)
                            {
                                if (CropMissions.Plane.IsDead || !Game.Player.Character.IsInVehicle(CropMissions.Plane))
                                    JobSeq = 45;
                                else if (ReturnStuff.AreUNear(CropMissions.FlyUp, CropMissions.Plane.Position, 15f))
                                {
                                    JobSeq++;
                                    EntityClear.RemoveTargets();
                                    Pilot05_Target(CropMissions.StartPos[CropMissions.CurrentTarg], CropMissions.StartRot[CropMissions.CurrentTarg], CropMissions.EndPos[CropMissions.CurrentTarg], CropMissions.EndRot[CropMissions.CurrentTarg], true, true);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[44];
                                }
                            }
                            else if (JobSeq == 4)
                            {
                                if (CropMissions.Plane.IsDead || !Game.Player.Character.IsInVehicle(CropMissions.Plane))
                                    JobSeq = 45;
                                else if (ReturnStuff.AreUNear(CropMissions.StartPos[CropMissions.CurrentTarg], CropMissions.Plane.Position, 15f))
                                {
                                    JobSeq++;
                                    EntityClear.RemoveTargets();
                                    CropMissions.Spray = true;
                                    Pilot05_Target(CropMissions.StartPos[CropMissions.CurrentTarg], CropMissions.StartRot[CropMissions.CurrentTarg], CropMissions.EndPos[CropMissions.CurrentTarg], CropMissions.EndRot[CropMissions.CurrentTarg], false, true);
                                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "CHECKPOINT_UNDER_THE_BRIDGE", "HUD_MINI_GAME_SOUNDSET", true);
                                    CropMissions.MuckLeft = CropMissions.MuckLeft + Game.GameTime;

                                    if (CropMissions.EcoWar)
                                    {
                                        SearchFor.MakeCarz.Add(new FindVeh(35.00f, 150.00f, new VehMods("TECHNICAL", 8, 1, false, DataStore.MyLang.Maptext[20]), true));
                                        CropMissions.EcoWar = false;
                                    }
                                }

                            }
                            else if (JobSeq == 5)
                            {
                                if (CropMissions.Plane.IsDead || !Game.Player.Character.IsInVehicle(CropMissions.Plane))
                                    JobSeq = 45;
                                else if (ReturnStuff.AreUNear(CropMissions.EndPos[CropMissions.CurrentTarg], CropMissions.Plane.Position, 15f))
                                {
                                    EntityClear.RemoveTargets();
                                    CropMissions.Spray = false;
                                    CropMissions.MuckLeft = CropMissions.MuckLeft - Game.GameTime;
                                    CropMissions.CurrentTarg++;
                                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "CHECKPOINT_UNDER_THE_BRIDGE", "HUD_MINI_GAME_SOUNDSET", true);
                                    if (CropMissions.CurrentTarg < CropMissions.StartPos.Count)
                                    {
                                        Pilot05_Target(CropMissions.StartPos[CropMissions.CurrentTarg], CropMissions.StartRot[CropMissions.CurrentTarg], CropMissions.EndPos[CropMissions.CurrentTarg], CropMissions.EndRot[CropMissions.CurrentTarg], true, true);
                                        JobSeq--;
                                    }
                                    else
                                    {
                                        JobSeq++;
                                        CropMissions.MuckLeft /= 10;
                                        UiDisplay.SideBars[0].Data = " " + CropMissions.MuckLeft + "Lbs ";
                                    }
                                }
                            }
                            else if (JobSeq == 6)
                            {
                                UiDisplay.sSubDisplay = "";
                                DataStore.MyDatSet.iPegsSafePlaneTest = DataStore.iPegsSafePlane;
                                DataStore.MyDatSet.iGotPegsus = DataStore.iProcessForPegs;
                                NSBanking.NSCoinInvestments(true, 4, 9, "Monsantos Shares");
                                if (CropMissions.MuckLeft > 100)
                                    DataStore.MyAchivments.Planes05_HeyFarmerFarmer++;
                                MissionEnd(Pilot_Awards(CropMissions.MuckLeft + 1000, true));
                            }
                            else if (JobSeq == 45)
                            {
                                NSBanking.NSCoinInvestments(false, 7, 12, "Monsantos Shares");
                                GameOverFail(false);
                            }
                        }       // crop duster
                        else
                        {
                            if (JobSeq == 0)
                            {
                                JobSeq++;
                                if (DataStore.MySettings.FastTraveltoStart)
                                    EntityBuild.WarptoAnyVeh(HiggsMissions.HiggsHeli, Game.Player.Character, 1);
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[45];
                            }
                            else if (JobSeq == 1)
                            {
                                if (ReturnStuff.AmINear(HiggsMissions.HiggsHeli.Position, 65f))
                                {
                                    JobSeq++;
                                    HiggsMissions.HiggsHeli.FreezePosition = false;
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[46];
                                }
                            }
                            else if (JobSeq == 2)
                            {
                                if (HiggsMissions.HiggsHeli.IsDead || !HiggsMissions.HiggsHeli.IsDriveable)
                                    JobSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(HiggsMissions.HiggsHeli))
                                {
                                    JobSeq++;
                                    HiggsMissions.HiggsHeli.CurrentBlip.Remove();
                                    UiDisplay.sSubDisplay = "";
                                    int iRando = RandomX.RandInt(17, 21);
                                    HiggsMissions.Pass01 = EntityBuild.NPCSpawn(new PedFeat(ReturnStuff.RandNPC(iRando), false, 120, 6, 0, null, 0, true, 3, DataStore.MyLang.Maptext[104]), HiggsMissions.HeliDoor);
                                    HiggsMissions.Pass02 = EntityBuild.NPCSpawn(new PedFeat(ReturnStuff.RandNPC(iRando), false, 120, 7, 0, null, 0, true, 3, DataStore.MyLang.Maptext[104]), HiggsMissions.HeliDoor);
                                    iWait4Sec = Game.GameTime + 25000;
                                }
                                else if (ReturnStuff.AmINear(HiggsMissions.HiggsHeli.Position, 65f))
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[46];
                                else
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[45];
                            }
                            else if (JobSeq == 3)
                            {
                                if (HiggsMissions.HiggsHeli.IsDead || !HiggsMissions.HiggsHeli.IsDriveable || HiggsMissions.Pass01.IsDead || HiggsMissions.Pass02.IsDead)
                                    JobSeq = 45;
                                else if (HiggsMissions.Pass01.IsInVehicle() && HiggsMissions.Pass01.IsInVehicle())
                                {
                                    JobSeq++;
                                    HiggsMissions.Pass01.CurrentBlip.Remove();
                                    HiggsMissions.Pass02.CurrentBlip.Remove();
                                    EntityBuild.AddTarget(new BlipForm(ReturnStuff.AlterZHight(HiggsMissions.FlightPath[HiggsMissions.FlyToo], -1.00f), true, 5, 184, DataStore.MyLang.Maptext[53], 10f));
                                    UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[6], "0/4", 0f, false));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[47];
                                }
                                else
                                {
                                    if (iWait4Sec < Game.GameTime)
                                    {
                                        if (!HiggsMissions.Pass01.IsInVehicle() || !HiggsMissions.Pass02.IsInVehicle())
                                        {
                                            EntityBuild.VehicleWarp(HiggsMissions.HiggsHeli, HiggsMissions.Pass01, 3);
                                            EntityBuild.VehicleWarp(HiggsMissions.HiggsHeli, HiggsMissions.Pass02, 4);
                                        }
                                    }
                                }
                            }
                            else if (JobSeq == 4)
                            {
                                if (HiggsMissions.HiggsHeli.IsDead || !HiggsMissions.HiggsHeli.IsDriveable || HiggsMissions.Pass01.IsDead || HiggsMissions.Pass02.IsDead)
                                    JobSeq = 45;
                                else if (ReturnStuff.AreUNear(HiggsMissions.FlightPath[HiggsMissions.FlyToo], HiggsMissions.HiggsHeli.Position, 100f))
                                {
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[48];

                                    if (ReturnStuff.AreUNear(HiggsMissions.FlightPath[HiggsMissions.FlyToo], HiggsMissions.HiggsHeli.Position, 10f))
                                    {
                                        if (!HiggsMissions.HiggsHeli.IsInAir)
                                        {
                                            JobSeq++;
                                            EntityClear.RemoveTargets();
                                            HiggsMissions.HiggsHeli.EngineRunning = false;
                                            Pilot06_TakeAPhoto(HiggsMissions.Pass01);
                                            Pilot06_TakeAPhoto(HiggsMissions.Pass02);
                                            HiggsMissions.TakePhotos = true;
                                            iWait4Sec = Game.GameTime + 7000;
                                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[49];
                                        }
                                    }
                                }
                                else
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[47];

                                if (!UiDisplay.bUiDisplay)
                                    UiDisplay.bUiDisplay = true;
                            }
                            else if (JobSeq == 5)
                            {
                                if (HiggsMissions.HiggsHeli.IsDead || !HiggsMissions.HiggsHeli.IsDriveable || HiggsMissions.Pass01.IsDead || HiggsMissions.Pass02.IsDead)
                                    JobSeq = 45;
                                else if (HiggsMissions.GetinHeli)
                                {
                                    if (HiggsMissions.Pass01.IsInVehicle() && HiggsMissions.Pass02.IsInVehicle())
                                    {
                                        EntityClear.RemoveTargets();
                                        HiggsMissions.HiggsHeli.EngineRunning = true;
                                        HiggsMissions.GetinHeli = false;
                                        HiggsMissions.Pass01.CurrentBlip.Remove();
                                        HiggsMissions.Pass02.CurrentBlip.Remove();
                                        HiggsMissions.FlyToo++;
                                        UiDisplay.SideBars[0].Data = "" + HiggsMissions.FlyToo + "/4";
                                        if (HiggsMissions.FlyToo < HiggsMissions.FlightPath.Count)
                                        {
                                            JobSeq = 4;
                                            EntityBuild.AddTarget(new BlipForm(ReturnStuff.AlterZHight(HiggsMissions.FlightPath[HiggsMissions.FlyToo], -1.00f), true, 5, 184, DataStore.MyLang.Maptext[53], 10f));
                                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[47];
                                        }
                                        else
                                        {
                                            JobSeq++;
                                            EntityBuild.AddTarget(new BlipForm(HiggsMissions.HeliPark.V3, true, 5, 64, DataStore.MyLang.Maptext[53], 10f));
                                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[50];
                                        }
                                    }
                                }
                                else if (iWait4Sec < Game.GameTime)
                                {
                                    if (HiggsMissions.TakePhotos)
                                    {
                                        HiggsMissions.TakePhotos = false;
                                        HiggsMissions.Pass01.Task.ClearAll();
                                        HiggsMissions.Pass01.Task.PlayAnimation("cellphone@self", "selfie", 8.00f, 3000, true, 1.00f);
                                        HiggsMissions.Pass01.BlockPermanentEvents = true;

                                        HiggsMissions.Pass02.Task.ClearAll();
                                        HiggsMissions.Pass02.Task.PlayAnimation("cellphone@self", "selfie", 8.00f, 3000, true, 1.00f);
                                        HiggsMissions.Pass02.BlockPermanentEvents = true;

                                        iWait4Sec = Game.GameTime + 3000;
                                    }
                                    else
                                    {
                                        HiggsMissions.GetinHeli = true;
                                        SearchFor.BackSeat.Add(new FindSeat(3, HiggsMissions.HiggsHeli, HiggsMissions.Pass01, 1.4f));
                                        SearchFor.BackSeat.Add(new FindSeat(4, HiggsMissions.HiggsHeli, HiggsMissions.Pass02, 1.2f));
                                    }
                                }

                                if (!UiDisplay.bUiDisplay)
                                    UiDisplay.bUiDisplay = true;
                            }
                            else if (JobSeq == 6)
                            {
                                if (HiggsMissions.HiggsHeli.IsDead || !HiggsMissions.HiggsHeli.IsDriveable || HiggsMissions.Pass01.IsDead || HiggsMissions.Pass02.IsDead)
                                    JobSeq = 45;
                                else if (ReturnStuff.AreUNear(HiggsMissions.HeliPark.V3, HiggsMissions.HiggsHeli.Position, 100f))
                                {
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[48];

                                    if (ReturnStuff.AreUNear(HiggsMissions.HeliPark.V3, HiggsMissions.HiggsHeli.Position, 10f))
                                    {
                                        if (!HiggsMissions.HiggsHeli.IsInAir)
                                        {
                                            JobSeq++;
                                            EntityClear.RemoveTargets();
                                            UiDisplay.sSubDisplay = "";
                                            HiggsMissions.HiggsHeli.EngineRunning = false;
                                            iWait4Sec = iWait4Sec + 5000;
                                            Pilot06_GoBacktoOff(HiggsMissions.Pass01);
                                            Pilot06_GoBacktoOff(HiggsMissions.Pass02);
                                        }
                                    }
                                }
                                else
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[50];

                                if (!UiDisplay.bUiDisplay)
                                    UiDisplay.bUiDisplay = true;
                            }
                            else if (JobSeq == 7)
                            {
                                if (HiggsMissions.Pass01.IsDead || HiggsMissions.Pass02.IsDead)
                                    JobSeq = 45;
                                else if (Game.GameTime > iWait4Sec)
                                {
                                    DataStore.MyDatSet.iPegsSafeHeliTest = DataStore.iPegsSafeHeli;
                                    DataStore.MyDatSet.iGotPegsus = DataStore.iProcessForPegs;
                                    NSBanking.NSCoinInvestments(true, 7, 9, "Higgins Shares");
                                    if (HiggsMissions.HiggsHeli.Health > 990)
                                        DataStore.MyAchivments.Planes06_LikeAndSubscribe++;
                                    MissionEnd(Pilot_Awards(5000, true));
                                }
                            }
                            else if (JobSeq == 45)
                            {
                                NSBanking.NSCoinInvestments(false, 5, 11, "Higgins Shares");
                                GameOverFail(false);
                            }
                        }                            // heil tours
                    }        //Pilot
                    else if (JobType == 7)
                    {
                        if (Game.Player.WantedLevel > 0)
                            Game.Player.WantedLevel = 0;//too much pay fix the text in awards

                        if (AmbMissions.Covid)
                            EntityClear.ClearTheWay(true, false);

                        if (JobSeq == 0)
                        {
                            JobSeq++;
                            if (DataStore.MySettings.FastTraveltoStart)
                                EntityBuild.WarptoAnyVeh(AmbMissions.Ambuantz, Game.Player.Character, 1);

                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[52] + "~y~" + AmbMissions.Hospital01 + "~w~.";

                        }
                        else if (JobSeq == 1)
                        {
                            if (AmbMissions.Ambuantz.IsDead)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(AmbMissions.Ambuantz))
                            {
                                if (!AmbMissions.UniformOn)
                                {
                                    AmbMissions.UniformOn = true;
                                    if (AmbMissions.Uniform != null)
                                        EntityBuild.PedDresser(Game.Player.Character, AmbMissions.Uniform);
                                }
                                JobSeq++;
                            }
                            else if (ReturnStuff.AmINear(AmbMissions.Ambuantz.Position, 30f))
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[57];
                            else
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[52] + "~y~" + AmbMissions.Hospital01 + "~w~.";
                        }
                        else if (JobSeq == 2)
                        {
                            if (AmbMissions.Ambuantz.IsDead)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(AmbMissions.Ambuantz))
                            {
                                if (AmbMissions.FubStuff.Name == "")
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[53] + "~y~" + ReturnStuff.StreetSpirit(AmbMissions.FubStuff.PedHere.V3) + "~w~.";
                                else
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[53] + "~y~" + AmbMissions.FubStuff.Name + "~w~.";

                                if (AmbMissions.IntDoors.Count > 0)
                                {
                                    JobSeq = 20;
                                    DataStore.MyAchivments.Ambulance_HomeVisits++;
                                    EntityBuild.AddTarget(new BlipForm(AmbMissions.FubStuff.PedHere.V3, true, 5, 153, DataStore.MyLang.Maptext[37], 1f, -1f));
                                }
                                else
                                {
                                    JobSeq = 10;
                                    EntityBuild.AddTarget(new BlipForm(AmbMissions.FubStuff.PedHere.V3, true, 5, 153, DataStore.MyLang.Maptext[37]));
                                }

                                if (AmbMissions.Ambuantz.CurrentBlip.Exists())
                                    AmbMissions.Ambuantz.CurrentBlip.Remove();
                            }
                            else
                            {
                                if (!AmbMissions.Ambuantz.CurrentBlip.Exists())
                                {
                                    EntityBuild.VehBlip(new BlipForm(5, DataStore.MyLang.Maptext[7]), AmbMissions.Ambuantz);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[57];
                                }
                            }
                        }
                        else if (JobSeq == 3)
                        {
                            JobSeq++;
                            Game.Player.CanControlCharacter = true;
                            AmbMissions.VicTim.FreezePosition = false;
                            Game.Player.Character.Task.ClearAll();
                            AmbMissions.VicTim.Task.ClearAnimation("combat@damage@writhe", "writhe_loop");
                            SearchFor.BackSeat.Add(new FindSeat(3, AmbMissions.Ambuantz, AmbMissions.VicTim, 0.7f));
                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[57];
                            if (AmbMissions.IntDoors.Count > 0)
                            {
                                EntityBuild.WarptoAnyVeh(AmbMissions.Ambuantz, Game.Player.Character, 1);
                                EntityBuild.WarptoAnyVeh(AmbMissions.Ambuantz, AmbMissions.VicTim, 3);
                            }
                            Ambulance_StartLine();
                        }
                        else if (JobSeq == 4)
                        {
                            if (AmbMissions.PatentOn)
                                Ambulance_Patents();

                            if (AmbMissions.VicTim.IsDead || AmbMissions.Ambuantz.IsDead)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(AmbMissions.Ambuantz))
                            {
                                if (AmbMissions.Ambuantz.CurrentBlip.Exists())
                                {
                                    AmbMissions.Ambuantz.CurrentBlip.Remove();
                                    UiDisplay.sSubDisplay = "";
                                }
                                else if (AmbMissions.VicTim.IsInVehicle(AmbMissions.Ambuantz))
                                {
                                    JobSeq++;
                                    EntityBuild.AddTarget(new BlipForm(AmbMissions.AnE, true, 5, 153, DataStore.MyLang.Maptext[37], 10f));
                                    AmbMissions.VicTim.CurrentBlip.Remove();
                                    AmbMissions.TimerOn = true;
                                    if (AmbMissions.Fakeill)
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[58];
                                    else
                                    {
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[56];
                                    }
                                }
                                else
                                {
                                    UiDisplay.ControlerUI(DataStore.MyLang.Context[17], 1);

                                    if (Function.Call<bool>(Hash.IS_HORN_ACTIVE, AmbMissions.Ambuantz))
                                    {
                                        EntityBuild.WarptoPlayerVeh(AmbMissions.VicTim, 2);
                                        if (AmbMissions.Condition == 4)
                                            DataStore.MyAchivments.Ambulance_OpenTheWindows++;
                                    }
                                }
                            }
                            else
                            {
                                if (!AmbMissions.Ambuantz.CurrentBlip.Exists())
                                {
                                    EntityBuild.VehBlip(new BlipForm(5, DataStore.MyLang.Maptext[7]), AmbMissions.Ambuantz);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[57];
                                }
                            }
                        }
                        else if (JobSeq == 5)
                        {
                            if (AmbMissions.PatentOn)
                                Ambulance_Patents();

                            if (AmbMissions.VicTim.IsDead || AmbMissions.Ambuantz.IsDead)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(AmbMissions.Ambuantz))
                            {
                                if (MissionData.Target_01 == null)
                                {
                                    AmbMissions.Ambuantz.CurrentBlip.Remove();
                                    EntityBuild.AddTarget(new BlipForm(AmbMissions.AnE, true, 5, 153, DataStore.MyLang.Maptext[37], 10f));
                                    if (AmbMissions.Fakeill)
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[58];
                                    else
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[56];
                                }
                                else if (ReturnStuff.AreUNear(AmbMissions.AnE, AmbMissions.Ambuantz.Position, 75f))
                                {
                                    if (AmbMissions.ClearWay)
                                    {
                                        EntityBuild.MoveThatCar(AmbMissions.AnE);
                                        AmbMissions.ClearWay = false;
                                    }
                                    else if (ReturnStuff.AreUNear(AmbMissions.AnE, AmbMissions.VicTim.Position, 5.50f))
                                    {
                                        if (AmbMissions.Ambuantz.IsStopped)
                                        {
                                            JobSeq++;
                                            EntityClear.RemoveTargets();
                                            AmbMissions.TimerOn = false;
                                            AmbMissions.Timer -= Game.GameTime;
                                            UiDisplay.sSubDisplay = "";
                                            UiDisplay.bUiDisplay = false;
                                            UiDisplay.SideBars.Clear();
                                            EntityBuild.GetOutofVeh(AmbMissions.VicTim, 0);
                                            EntityBuild.WalkThisWay(AmbMissions.VicTim, AmbMissions.AnEWalk, 0.70f);
                                            iWait4Sec = Game.GameTime + 20000;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                if (MissionData.Target_01 != null)
                                {
                                    EntityClear.RemoveTargets();
                                    EntityBuild.VehBlip(new BlipForm(5, DataStore.MyLang.Maptext[7]), AmbMissions.Ambuantz);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[57];
                                }
                            }
                        }
                        else if (JobSeq == 6)
                        {
                            if (AmbMissions.PatentOn)
                                Ambulance_Patents();
                            if (AmbMissions.VicTim.IsDead || AmbMissions.Ambuantz.IsDead)
                                JobSeq = 45;
                            else if (iWait4Sec < Game.GameTime || ReturnStuff.AreUNear(AmbMissions.AnEWalk, AmbMissions.VicTim.Position, 1.50f))
                            {
                                JobSeq = 99;
                                EntityClear.RemoveTargets();
                                AmbMissions.TotalPay += AmbMissions.HospPay;
                                AmbMissions.VicTim.Position = new Vector3(0f, 0f, 150f);
                                for (int i = 0; i < MissionData.PedList_01.Count; i++)
                                    EntityLog.CleanUp(MissionData.PedList_01[i], false);
                                for (int i = 0; i < MissionData.PropList_01.Count; i++)
                                    EntityLog.CleanUp(MissionData.PropList_01[i], true);

                                MissionData.PedList_01.Clear();
                                MissionData.PropList_01.Clear();
                                ControlSelect(7);
                            }
                        }
                        else if (JobSeq == 7)
                        {
                            if (AmbMissions.PatentOn)
                                Ambulance_Patents();

                            if (iWait4Sec < Game.GameTime)
                            {
                                EntityClear.RemoveTargets();
                                for (int i = 0; i < MissionData.PedList_01.Count; i++)
                                    EntityLog.CleanUp(MissionData.PedList_01[i], false);
                                MissionData.PedList_01.Clear();
                                if (AmbMissions.IntDoors.Count > 0)
                                    EntityBuild.WarptoAnyVeh(AmbMissions.Ambuantz, Game.Player.Character, 1);

                                ControlSelect(7);
                            }
                        }
                        else if (JobSeq == 10)
                        {
                            if (AmbMissions.Ambuantz.IsDead)
                                JobSeq = 45;
                            else if (ReturnStuff.AmINear(AmbMissions.FubStuff.PedHere.V3, 95f))
                            {
                                JobSeq++;
                                AmbMissions.VicTim = EntityBuild.NPCSpawn(new PedFeat(ReturnStuff.RandNPC(RandomX.RandInt(1, 50)), false, 160, 8, 0, null, 0, true, 3, DataStore.MyLang.Maptext[37]), AmbMissions.FubStuff.PedHere);
                                UiDisplay.MMDisplay01 = new MarkyMark(AmbMissions.VicTim, 0.50f, Color.AntiqueWhite);
                                UiDisplay.FolPed = AmbMissions.VicTim;
                                UiDisplay.bMMDisplay01 = true;
                            }
                            else if (Game.Player.Character.IsInVehicle())
                            {
                                if (AmbMissions.Ambuantz.CurrentBlip.Exists())
                                    AmbMissions.Ambuantz.CurrentBlip.Remove();
                            }
                            else
                            {
                                if (!AmbMissions.Ambuantz.CurrentBlip.Exists())
                                    EntityBuild.VehBlip(new BlipForm(5, DataStore.MyLang.Maptext[7]), AmbMissions.Ambuantz);
                            }
                        }
                        else if (JobSeq == 11)
                        {
                            if (AmbMissions.Ambuantz.IsDead)
                                JobSeq = 45;
                            else if (ReturnStuff.AmINear(AmbMissions.VicTim.Position, 30f))
                            {
                                if (Game.Player.Character.IsInVehicle())
                                {
                                    if (AmbMissions.Ambuantz.CurrentBlip.Exists())
                                        AmbMissions.Ambuantz.CurrentBlip.Remove();
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[54];
                                }
                                else
                                {
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[55];
                                    if (ReturnStuff.AreUNear(Game.Player.Character.Position, AmbMissions.VicTim.Position, 1f))
                                    {
                                        if (!DataStore.MenuOpen)
                                        {
                                            UiDisplay.sSubDisplay = "";
                                            EntityClear.RemoveTargets();
                                            Game.Player.CanControlCharacter = false;
                                            UiDisplay.FolPed = null;
                                            UiDisplay.bMMDisplay01 = false;
                                            TheMenus.Ambulance_Menu(AmbMissions.Condition, AmbMissions.Covid, AmbMissions.VicTim);
                                        }
                                    }
                                }
                            }
                            else
                            {
                                if (!AmbMissions.Ambuantz.CurrentBlip.Exists())
                                    EntityBuild.VehBlip(new BlipForm(5, DataStore.MyLang.Maptext[7]), AmbMissions.Ambuantz);
                            }
                        }
                        else if (JobSeq == 14)
                        {
                            if (iWait4Sec < Game.GameTime)
                            {
                                JobSeq = 3;
                                AmbMissions.HalfTime = true;
                            }
                            else if (!AmbMissions.PatentOn)
                                AmbMissions.PatentOn = true;
                        }
                        else if (JobSeq == 15)
                        {
                            if (iWait4Sec < Game.GameTime)
                                JobSeq = 3;
                            else if (!AmbMissions.PatentOn)
                                AmbMissions.PatentOn = true;

                            if (DataStore.CorectDiagnose)
                            {
                                DataStore.CorectDiagnose = false;
                                AmbMissions.CorectDiagnosis++;
                            }
                        }
                        else if (JobSeq == 16)
                        {
                            if (iWait4Sec < Game.GameTime)
                            {
                                JobSeq = 3;
                                AmbMissions.Timer = 0;
                                AmbMissions.Fakeill = true;
                            }

                            if (DataStore.CorectDiagnose)
                            {
                                DataStore.CorectDiagnose = false;
                                AmbMissions.CorectDiagnosis++;
                            }
                        }
                        else if (JobSeq == 17)
                        {
                            Game.Player.CanControlCharacter = true;
                            Game.Player.Character.Task.ClearAll();
                            AmbMissions.Fatalitys++;
                            AmbMissions.VicTim.Health = 0;
                            AmbMissions.Timer = 0;
                            AmbMissions.VicTim.FreezePosition = false;
                            if (AmbMissions.VicTim.CurrentBlip.Exists())
                                AmbMissions.VicTim.CurrentBlip.Remove();
                            if (AmbMissions.Fatalitys < 5)
                                JobSeq = 7;
                            else
                                JobSeq = 45;

                            SearchFor.SlowFastTravel(AmbMissions.FubStuff.PedHere);
                        }
                        else if (JobSeq == 18)
                        {
                            JobSeq = 7;
                            if (DataStore.CorectDiagnose)
                            {
                                DataStore.CorectDiagnose = false;
                                AmbMissions.CorectDiagnosis++;
                            }
                            Game.Player.CanControlCharacter = true;
                            Game.Player.Character.Task.ClearAll();
                            AmbMissions.VicTim.Task.ClearAnimation("combat@damage@writhe", "writhe_loop");
                            AmbMissions.VicTim.FreezePosition = false;
                            AmbMissions.Timer = 0;
                        }
                        else if (JobSeq == 20)
                        {
                            if (AmbMissions.Ambuantz.IsDead)
                                JobSeq = 45;
                            else if (ReturnStuff.AmINear(AmbMissions.FubStuff.PedHere.V3, 1.5f) && !Game.Player.Character.IsInVehicle())
                            {
                                JobSeq++;
                                Ambulance_IndoorPeds();
                                EntityBuild.ResetVehPos(AmbMissions.Ambuantz, AmbMissions.FubStuff.ParkHere);
                            }
                            else if (Game.Player.Character.IsInVehicle())
                            {
                                if (AmbMissions.Ambuantz.CurrentBlip.Exists())
                                    AmbMissions.Ambuantz.CurrentBlip.Remove();
                            }
                            else
                            {
                                if (!AmbMissions.Ambuantz.CurrentBlip.Exists())
                                    EntityBuild.VehBlip(new BlipForm(5, DataStore.MyLang.Maptext[7]), AmbMissions.Ambuantz);
                            }
                        }
                        else if (JobSeq == 21)
                        {
                            if (AmbMissions.Ambuantz.IsDead || AmbMissions.VicTim.IsDead)
                                JobSeq = 45;
                            else if (Game.Player.Character.Position.DistanceTo(AmbMissions.IntDoors[0].V3) > 150f)
                            {
                                FallFor++;
                                if (FallFor == 10)
                                    JobSeq = 18;
                                else
                                    SearchFor.SlowFastTravel(AmbMissions.IntDoors[0]);
                            }
                            else if (ReturnStuff.AreUNear(Game.Player.Character.Position, AmbMissions.VicTim.Position, 1f))
                            {
                                if (!DataStore.MenuOpen)
                                {
                                    UiDisplay.sSubDisplay = "";
                                    EntityClear.RemoveTargets();
                                    Game.Player.CanControlCharacter = false;
                                    UiDisplay.FolPed = null;
                                    UiDisplay.bMMDisplay01 = false;
                                    TheMenus.Ambulance_Menu(AmbMissions.Condition, AmbMissions.Covid, AmbMissions.VicTim);
                                }
                            }
                            else
                            {
                                if (!AmbMissions.Ambuantz.CurrentBlip.Exists())
                                    EntityBuild.VehBlip(new BlipForm(5, DataStore.MyLang.Maptext[7]), AmbMissions.Ambuantz);
                            }

                            if (AmbMissions.InTheClub)
                                Function.Call(Hash.DRAW_LIGHT_WITH_RANGE, AmbMissions.VicTim.Position.X, AmbMissions.VicTim.Position.Y, AmbMissions.VicTim.Position.Z + 5f, 210, 210, 210, 10f, 6f);
                        }
                        else if (JobSeq == 25)
                        {
                            if (AmbMissions.Condition == 2)
                                AmbMissions.Covid = true;
                            EntityBuild.GetOutofVeh(AmbMissions.VicTim, 2);
                            AmbMissions.Fatalitys++;
                            AmbMissions.VicTim.Kill();
                            AmbMissions.PatentOn = false;
                            if (AmbMissions.Fatalitys < 5)
                                JobSeq = 7;
                            else
                                JobSeq = 45;
                        }
                        else if (JobSeq == 35)
                        {
                            if (AmbMissions.Uniform != null)
                                EntityBuild.PedDresser(Game.Player.Character, AmbMissions.Oufit);

                            NSBanking.NSCoinInvestments(true, 2, 4, "Humane Labs");
                            DataStore.MyDatSet.iMeddicTest = DataStore.iMeddicc;
                            Ambulance_AddingAwards();
                            MissionEnd(Ambulance_Awards(AmbMissions.TotalPay, true));
                        }
                        else if (JobSeq == 45)
                        {
                            if (AmbMissions.Uniform != null)
                                EntityBuild.PedDresser(Game.Player.Character, AmbMissions.Oufit);

                            if (DataStore.MyAchivments.Ambulance_WinSomeLoseSome < 5)
                                DataStore.MyAchivments.Ambulance_WinSomeLoseSome = AmbMissions.Fatalitys;
                            GameOverFail(false);
                        }
                    }        //Amulance
                    else if (JobType == 8)
                    {
                        if (FollMissions.DistanceBar)
                        {
                            if (FollMissions.Rollover)                  //Test if vehicle has rolled over with 2 sec timmer to give time to get back on wheels.
                            {
                                if (FollMissions.RollTime < Game.GameTime)
                                {
                                    if (!FollMissions.TargetCar.IsOnAllWheels)
                                        FollMissions.TargetCar.Rotation = new Vector3(0.00f, 0.00f, FollMissions.TargetCar.Rotation.Z);
                                    FollMissions.Rollover = false;
                                }
                            }
                            else
                            {
                                if (!FollMissions.TargetCar.IsOnAllWheels)
                                {
                                    FollMissions.Rollover = true;
                                    FollMissions.RollTime = Game.GameTime + 2000;
                                }
                            }

                            if (FollMissions.CountDown)     // The distance bar that pops up for distance to target
                            {
                                float fDist = FollMissions.TargetCar.Position.DistanceTo(FollMissions.Endings[0]);
                                int iFind = (int)fDist;
                                UiDisplay.SideBars[1].Data = " " + iFind + " ";
                            }

                            UiDisplay.SpookBarz(FollMissions.TargetCar, 0, FollMissions.NearTrig);
                        }

                        if (JobSeq == 0)
                        {
                            if (ReturnStuff.AmINear(FollMissions.Starting, 150f))
                            {
                                if (ReturnStuff.AreUFar(World.GetNextPositionOnStreet(FollMissions.Starting), FollMissions.Starting, 150f))
                                    Follow_AddStartPoint();
                                else
                                {
                                    JobSeq++;
                                    int iVehTing = RandomX.RandInt(1, 10);
                                    iWait4Sec = Game.GameTime + 10000;
                                    SearchFor.MakeCarz.Add(new FindVeh(35.00f, 250.00f, new VehMods(ReturnStuff.AddRandomVeh(iVehTing), 1, 3, false, DataStore.MyLang.Maptext[14], false, true, ReturnStuff.FunPlates()), true));
                                }
                            }
                        }
                        else if (JobSeq == 1)
                        {
                            if (MissionData.MishVeh != null)
                            {
                                if (!MissionData.MishVeh.IsSeatFree(VehicleSeat.Passenger))
                                {
                                    JobSeq--;
                                    MissionData.MishVeh.Delete();
                                    MissionData.VehicleList_01.Remove(MissionData.MishVeh);
                                }
                                else
                                {
                                    JobSeq++;
                                    EntityClear.RemoveTargets();
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[60];
                                    FollMissions.TargetCar = MissionData.MishVeh;
                                    FollMissions.Driver = EntityBuild.NPCSpawn(new PedFeat(ReturnStuff.RandNPC(RandomX.RandInt(1, 35)), false, 180, 0, 1, FollMissions.TargetCar, 2, false, 0, ""), FollMissions.TargetCar.Position, FollMissions.TargetCar.Heading);
                                }
                            }
                            else if (iWait4Sec < Game.GameTime)
                            {
                                JobSeq = 0;
                                Follow_AddStartPoint();
                            }
                        }
                        else if (JobSeq == 2)
                        {
                            if (ReturnStuff.AmINear(FollMissions.TargetCar.Position, 125f))
                            {
                                JobSeq++;
                                EntityBuild.DriveToDest(FollMissions.TargetCar, FollMissions.ShopsNTings.ParkHere, FollMissions.Driver, 20.00f, FollMissions.DriveStyle);
                                UiDisplay.MMDisplay01 = new MarkyMark(FollMissions.TargetCar, 0.50f, Color.CadetBlue);
                                UiDisplay.FolPed = FollMissions.Driver;
                                UiDisplay.bMMDisplay01 = true;
                                FollMissions.DistanceBar = true;
                                UiDisplay.bUiDisplay = true;
                            }
                        }
                        else if (JobSeq == 3)
                        {
                            if (FollMissions.Driver.IsDead || FollMissions.TargetCar.HasBeenDamagedBy(Game.Player.Character) || !FollMissions.Driver.IsInVehicle())
                                JobSeq = 45;
                            else if (ReturnStuff.AreUNear(FollMissions.ShopsNTings.ParkHere.V3, FollMissions.TargetCar.Position, 75f))
                            {
                                JobSeq++;
                                FollMissions.Passenger = EntityBuild.NPCSpawn(new PedFeat(ReturnStuff.RandNPC(RandomX.RandInt(1, 35)), false, 180, 0, 0, null, 2, false, 0, ""), FollMissions.ShopsNTings.PedHere);
                                EntityBuild.DriveToDest(FollMissions.TargetCar, FollMissions.ShopsNTings.ParkHere, FollMissions.Driver, 15.00f, FollMissions.DriveStyle);
                                FollMissions.TargetCar.SoundHorn(1000);
                                EntityBuild.MoveThatCar(FollMissions.Starting);
                            }
                            else if (iWait4Sec < Game.GameTime && FollMissions.TargetCar.IsStopped)
                            {
                                iWait4Sec = Game.GameTime + 6000;
                                Prop Poff = SearchFor.OpenThatGate(FollMissions.TargetCar.Position + (FollMissions.TargetCar.ForwardVector * 3), 10.00f);
                                if (Poff != null)
                                    Poff.Delete();
                            }
                        }
                        else if (JobSeq == 4)
                        {
                            if (FollMissions.Driver.IsDead || FollMissions.TargetCar.HasBeenDamagedBy(Game.Player.Character) || !FollMissions.Driver.IsInVehicle())
                                JobSeq = 45;
                            else if (ReturnStuff.AreUNear(FollMissions.ShopsNTings.ParkHere.V3, FollMissions.TargetCar.Position, 5f))
                            {
                                JobSeq++;
                                FollMissions.TargetCar.FreezePosition = true;
                                if (FollMissions.ShopFits.Count > 0)
                                    SearchFor.OpenDoors(FollMissions.ShopFits[0], 3f);

                                SearchFor.BackSeat.Add(new FindSeat(2, FollMissions.TargetCar, FollMissions.Passenger, 1.5f));
                            }
                        }
                        else if (JobSeq == 5)
                        {
                            if (FollMissions.Driver.IsDead || FollMissions.Passenger.IsDead || FollMissions.TargetCar.HasBeenDamagedBy(Game.Player.Character) || !FollMissions.Driver.IsInVehicle())
                                JobSeq = 45;
                            else if (FollMissions.Passenger.IsInVehicle())
                            {
                                JobSeq++;
                                EntityClear.RemoveTargets();
                                FollMissions.TargetCar.FreezePosition = false;
                                iWait4Sec = Game.GameTime + 5000;
                            }
                            else if (FollMissions.ShopFits.Count > 0)
                            {
                                if (iWait4Sec < Game.GameTime)
                                {
                                    iWait4Sec = Game.GameTime + 1000;
                                    SearchFor.OpenDoors(FollMissions.ShopFits[0], 3f);
                                }
                            }
                        }
                        else if (JobSeq == 40)
                        {
                            Game.Player.WantedLevel = 0;
                            Follow_AddAwards();
                            MissionEnd(Follow_Awards(FollMissions.YourReward, true));
                        }
                        else if (JobSeq == 45)
                        {
                            GameOverFail(false);
                        }
                        else if (JobSeq == 101)
                        {
                            JobSeq = 45;
                        }
                        else if (FollMissions.Ending == 1)
                        {
                            if (JobSeq == 6)
                            {
                                JobSeq++;
                                Follow_AddToMuilti(FollMissions.Driver, DataStore.MyLang.Maptext[14], FollMissions.TargetCar.CurrentBlip, FollMissions.TargetCar);
                                Follow_AddToMuilti(FollMissions.Passenger, "", null, null);
                                UiDisplay.MMDisplay01.MarkCol = Color.PaleVioletRed;
                                EntityBuild.DriveToDest(FollMissions.TargetCar, FollMissions.Endings[0], FollMissions.Driver, 20f, FollMissions.DriveStyle);
                                FollMissions.Driver.BlockPermanentEvents = true;
                                FollMissions.NearTrig = false;
                            }
                            else if (JobSeq == 7)
                            {
                                if (FollMissions.Driver.IsDead && FollMissions.Passenger.IsDead)
                                {
                                    NSBanking.NSCoinInvestments(false, 5, 11, "Total Bankers Shares");
                                    JobSeq = 40;
                                }
                                else if (iWait4Sec < Game.GameTime)
                                {
                                    JobSeq++;
                                    UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[13], "", 0f, false));
                                    FollMissions.CountDown = true;
                                    Game.Player.WantedLevel = 4;
                                    MultiPed[0].MyTask_01 = 1;
                                    EntityBuild.DriveToDest(FollMissions.TargetCar, FollMissions.Endings[0], FollMissions.Driver, 45f, FollMissions.DriveStyle);
                                    EntityBuild.VehBlip(new BlipForm(1, DataStore.MyLang.Maptext[20]), FollMissions.TargetCar);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[61];
                                }
                            }
                            else if (JobSeq == 8)
                            {
                                if (Game.Player.WantedLevel < 4)
                                    Game.Player.WantedLevel = 4;

                                if (FollMissions.Driver.IsDead && FollMissions.Passenger.IsDead)
                                {
                                    JobSeq = 40;
                                    NSBanking.NSCoinInvestments(false, 5, 11, "Total Bankers Shares");
                                }
                                else if (FollMissions.ExitVeh)
                                {
                                    if (ReturnStuff.AreUNear(FollMissions.Endings[0], FollMissions.TargetCar.Position, 75f))
                                    {
                                        FollMissions.ExitVeh = false;
                                        EntityBuild.DriveToDest(FollMissions.TargetCar, FollMissions.Endings[0], FollMissions.Driver, 15f, FollMissions.DriveStyle);
                                    }
                                }
                                else
                                {
                                    if (ReturnStuff.AreUNear(FollMissions.Endings[0], FollMissions.TargetCar.Position, 5f))
                                    {
                                        JobSeq++;
                                        EntityBuild.GetOutofVeh(FollMissions.Driver, 1);
                                        EntityBuild.GetOutofVeh(FollMissions.Passenger, 1);
                                        EntityBuild.PedBlimp(new BlipForm(1, ""), FollMissions.Driver);
                                        EntityBuild.PedBlimp(new BlipForm(1, ""), FollMissions.Passenger);
                                        EntityBuild.WalkThisWay(FollMissions.Driver, FollMissions.Endings[1], 2.00f);
                                        EntityBuild.WalkThisWay(FollMissions.Passenger, FollMissions.Endings[1], 2.00f);
                                    }
                                }
                            }
                            else if (JobSeq == 9)
                            {
                                if (FollMissions.Driver.IsDead && FollMissions.Passenger.IsDead)
                                {
                                    JobSeq = 40;
                                    NSBanking.NSCoinInvestments(false, 5, 11, "Total Bankers Shares");
                                }
                                else if (ReturnStuff.AreUNear(FollMissions.Endings[1], FollMissions.Driver.Position, 3f) || ReturnStuff.AreUNear(FollMissions.Endings[1], FollMissions.Passenger.Position, 3f))
                                {
                                    JobSeq = 45;
                                    FollMissions.Driver.Position = new Vector3(0f, 0f, -1500f);
                                    FollMissions.Passenger.Position = new Vector3(0f, 0f, -1500f);
                                }
                                else
                                {
                                    if (MissionData.iTracking < Game.GameTime)
                                        EntityClear.MultiPedTracker();
                                }
                            }
                        }       // Take out the two npc's route to polic station.
                        else if (FollMissions.Ending == 2)
                        {
                            if (JobSeq == 6)
                            {
                                JobSeq++;
                                EntityBuild.DriveToDest(FollMissions.TargetCar, FollMissions.Endings[0], FollMissions.Driver, 20f, FollMissions.DriveStyle);
                                UiDisplay.MMDisplay01.MarkCol = Color.LightSteelBlue;
                                FollMissions.Driver.BlockPermanentEvents = true;
                            }
                            else if (JobSeq == 7)
                            {
                                if (FollMissions.Driver.IsDead || FollMissions.Passenger.IsDead || FollMissions.TargetCar.HasBeenDamagedBy(Game.Player.Character) || !FollMissions.Driver.IsInVehicle())
                                    JobSeq = 45;
                                else if (iWait4Sec < Game.GameTime)
                                {
                                    JobSeq++;
                                    UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[13], "", 0f, false));
                                    FollMissions.CountDown = true;
                                    MissionData.iTracking = Game.GameTime + 1000;
                                    SearchFor.MakeCarz.Add(new FindVeh(35.00f, 125.00f, new VehMods("SCHAFTER3", 8, 1, false, DataStore.MyLang.Maptext[20], false, true, ReturnStuff.FunPlates()), true));
                                    SearchFor.MakeCarz.Add(new FindVeh(35.00f, 125.00f, new VehMods("LIMO2", 8, 1, false, DataStore.MyLang.Maptext[20], false, true, ReturnStuff.FunPlates()), true));
                                    FollMissions.Driver.RelationshipGroup = DataStore.GP_BNPCs;
                                    FollMissions.Passenger.RelationshipGroup = DataStore.GP_BNPCs;
                                    EntityBuild.DriveToDest(FollMissions.TargetCar, FollMissions.Endings[0], FollMissions.Driver, 30f, FollMissions.DriveStyle);
                                }
                            }
                            else if (JobSeq == 8)
                            {
                                if (FollMissions.Driver.IsDead || FollMissions.Passenger.IsDead || FollMissions.TargetCar.HasBeenDamagedBy(Game.Player.Character) || !FollMissions.Driver.IsInVehicle())
                                    JobSeq = 45;
                                else if (ReturnStuff.AreUNear(FollMissions.Endings[0], FollMissions.TargetCar.Position, 5f))
                                {
                                    JobSeq++;
                                    UiDisplay.bMMDisplay01 = false;
                                    World.AddExplosion(FollMissions.TargetCar.Position, ExplosionType.PlaneRocket, 2.00f, 1.00f);
                                    FollMissions.TargetCar.Explode();
                                }
                                else
                                {
                                    if (MissionData.iTracking < Game.GameTime)
                                        EntityClear.MultiPedTracker();
                                }
                            }
                            else if (JobSeq == 9)
                            {
                                JobSeq = 40;
                                NSBanking.NSCoinInvestments(true, 5, 12, "Penris Shares");
                            }
                        }       // Follow to end then arial atack the car.
                        else if (FollMissions.Ending == 3)
                        {
                            if (JobSeq == 6)
                            {
                                JobSeq++;
                                UiDisplay.MMDisplay01.MarkCol = Color.LightCoral;
                                EntityBuild.DriveToDest(FollMissions.TargetCar, FollMissions.Endings[0], FollMissions.Driver, 20f, FollMissions.DriveStyle);
                                FollMissions.Driver.BlockPermanentEvents = true;
                            }
                            else if (JobSeq == 7)
                            {
                                if (FollMissions.Driver.IsDead || FollMissions.Passenger.IsDead || FollMissions.TargetCar.HasBeenDamagedBy(Game.Player.Character) || !FollMissions.Driver.IsInVehicle())
                                    JobSeq = 45;
                                else if (iWait4Sec < Game.GameTime)
                                {
                                    JobSeq++;
                                    EntityBuild.DriveToDest(FollMissions.TargetCar, FollMissions.Endings[0], FollMissions.Driver, 45f, FollMissions.DriveStyle);
                                }
                            }
                            else if (JobSeq == 8)
                            {
                                if (FollMissions.Driver.IsDead || FollMissions.Passenger.IsDead || FollMissions.TargetCar.HasBeenDamagedBy(Game.Player.Character) || !FollMissions.Driver.IsInVehicle())
                                    JobSeq = 45;
                                else if (ReturnStuff.AreUNear(FollMissions.Endings[0], FollMissions.TargetCar.Position, 50f))
                                {
                                    JobSeq++;
                                    FollMissions.Driver.BlockPermanentEvents = false;
                                    Follow_AmbushPlayer();
                                    FollMissions.DistanceBar = false;
                                    UiDisplay.SideBars.Clear();
                                    UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[7], "" + MultiPed.Count + "/" + FollMissions.Attackers + "", 0f, false));
                                    EntityBuild.DriveToDest(FollMissions.TargetCar, FollMissions.Endings[0], FollMissions.Driver, 15f, FollMissions.DriveStyle);
                                    iWait4Sec = Game.GameTime + 1500;
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[62];
                                    Follow_DefToOff();
                                }
                            }
                            else if (JobSeq == 9)
                            {
                                if (Game.Player.WantedLevel > 0)
                                    Game.Player.WantedLevel = 0;
                                else if (MissionData.iTracking < Game.GameTime)
                                {
                                    EntityClear.MultiPedTracker();
                                    UiDisplay.SideBars[0].Data = "" + MultiPed.Count + "/" + FollMissions.Attackers + "";
                                }
                                else if (MultiPed.Count == 0)
                                {
                                    NSBanking.NSCoinInvestments(true, 8, 13, "Bobcat Security Shares");
                                    JobSeq = 40;
                                }
                            }
                        }       // Abush player at end point
                        else if (FollMissions.Ending == 4)
                        {
                            if (JobSeq == 6)
                            {
                                JobSeq++;
                                UiDisplay.MMDisplay01.MarkCol = Color.MediumTurquoise;
                                iWait4Sec = Game.GameTime + RandomX.RandInt(2000, 4000);
                                FollMissions.Driver.Task.CruiseWithVehicle(FollMissions.TargetCar, 20f, FollMissions.DriveStyle);
                            }
                            else if (JobSeq == 7)
                            {
                                if (FollMissions.Driver.IsDead || FollMissions.Passenger.IsDead)
                                    JobSeq = 45;
                                else if (iWait4Sec < Game.GameTime)
                                {
                                    JobSeq++;
                                    if (FollMissions.TargetCar.ClassType == VehicleClass.Compacts)
                                        FollMissions.YourReward = RandomX.RandInt(5000, 6000);
                                    else if (FollMissions.TargetCar.ClassType == VehicleClass.Sedans)
                                        FollMissions.YourReward = RandomX.RandInt(7000, 8000);
                                    else if (FollMissions.TargetCar.ClassType == VehicleClass.Coupes)
                                        FollMissions.YourReward = RandomX.RandInt(15000, 21000);
                                    else if (FollMissions.TargetCar.ClassType == VehicleClass.Muscle)
                                        FollMissions.YourReward = RandomX.RandInt(21000, 50000);
                                    else if (FollMissions.TargetCar.ClassType == VehicleClass.OffRoad)
                                        FollMissions.YourReward = RandomX.RandInt(21000, 45000);
                                    else if (FollMissions.TargetCar.ClassType == VehicleClass.SUVs)
                                        FollMissions.YourReward = RandomX.RandInt(22000, 48000);
                                    else if (FollMissions.TargetCar.ClassType == VehicleClass.Sports)
                                        FollMissions.YourReward = RandomX.RandInt(55000, 85000);
                                    else if (FollMissions.TargetCar.ClassType == VehicleClass.SportsClassics)
                                        FollMissions.YourReward = RandomX.RandInt(120000, 90000);
                                    else if (FollMissions.TargetCar.ClassType == VehicleClass.Super)
                                        FollMissions.YourReward = RandomX.RandInt(140000, 100000);
                                    else
                                        FollMissions.YourReward = RandomX.RandInt(8000, 9000);

                                    FollMissions.NearTrig = false;
                                    CashNCrash(FollMissions.TargetCar, FollMissions.YourReward);
                                    EntityBuild.VehBlip(new BlipForm(11, DataStore.MyLang.Maptext[14]), FollMissions.TargetCar);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[63];
                                }
                            }
                            else if (JobSeq == 8)
                            {
                                if (FollMissions.TargetCar.IsDead)
                                    JobSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(FollMissions.TargetCar))
                                {
                                    JobSeq++;
                                    FollMissions.DistanceBar = false;
                                    UiDisplay.bMMDisplay01 = false;
                                    UiDisplay.SideBars.Clear();
                                    UiDisplay.SideBars.Add(new SideBar("" + DataStore.MyLang.Othertext[0] + "", "", 0f, false));
                                    FollMissions.TargetCar.CurrentBlip.Remove();
                                    EntityBuild.AddTarget(new BlipForm(FollMissions.Endings[0], true, 5, 524, DataStore.MyLang.Maptext[42], 10f, -1f));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[64];
                                }
                            }
                            else if (JobSeq == 9)
                            {
                                FollMissions.YourReward = ReturnStuff.MultiDamage(true, false, 0);

                                if (FollMissions.TargetCar.IsDead)
                                    JobSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(FollMissions.TargetCar))
                                {
                                    if (MissionData.Target_01 == null)
                                    {
                                        FollMissions.TargetCar.CurrentBlip.Remove();
                                        EntityBuild.AddTarget(new BlipForm(FollMissions.Endings[0], true, 5, 524, DataStore.MyLang.Maptext[42], 10f, 1f));
                                    }
                                    else if (ReturnStuff.AreUNear(FollMissions.Endings[0], FollMissions.TargetCar.Position, 45f))
                                    {
                                        if (FollMissions.ExitVeh)
                                        {
                                            FollMissions.ExitVeh = false;
                                            EntityBuild.MoveThatCar(FollMissions.Endings[0]);
                                        }
                                        else if (ReturnStuff.AreUNear(FollMissions.Endings[0], FollMissions.TargetCar.Position, 5f))
                                        {
                                            JobSeq = 40;
                                            NSBanking.NSCoinInvestments(false, 3, 9, "Augury Insurance Shares");
                                            SearchFor.SlowFastTravel(FollMissions.Endings[1], 0f);
                                            Follow_CArSaleSeatChecker();
                                            FollMissions.TargetCar.Position = new Vector3(516.63f, -4391.54f, 0.01f);
                                        }
                                    }
                                }
                                else
                                {
                                    if (MissionData.Target_01 != null)
                                    {
                                        EntityClear.RemoveTargets();
                                        EntityBuild.VehBlip(new BlipForm(3, DataStore.MyLang.Maptext[14]), MissionData.MishVeh);
                                    }
                                }
                            }
                        }       // Have player steal and deliver a vehcle at end point
                        else if (FollMissions.Ending == 5)
                        {
                            if (Game.Player.WantedLevel > 0)
                                Game.Player.WantedLevel = 0;

                            if (JobSeq == 6)
                            {
                                JobSeq++;
                                FollMissions.Driver.BlockPermanentEvents = true;
                                FollMissions.Heli = EntityBuild.VehicleSpawn(new VehMods("Frogger2", 29, true), FollMissions.Endings[1], 0.00f);
                                UiDisplay.MMDisplay01.MarkCol = Color.AntiqueWhite;
                                FollMissions.Driver.RelationshipGroup = DataStore.GP_ANPCs;
                                FollMissions.Passenger.RelationshipGroup = DataStore.GP_ANPCs;
                                EntityBuild.DriveToDest(FollMissions.TargetCar, FollMissions.Endings[0], FollMissions.Driver, 20f, FollMissions.DriveStyle);
                            }
                            else if (JobSeq == 7)
                            {
                                if (FollMissions.Driver.IsDead || FollMissions.Passenger.IsDead)
                                    JobSeq = 45;
                                else if (iWait4Sec < Game.GameTime)
                                {
                                    JobSeq++;
                                    MissionData.iTracking = Game.GameTime + 1000;
                                    FollMissions.NearTrig = false;
                                    FollMissions.CountDown = true;
                                    UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Othertext[13], "", 0f, false));
                                    SearchFor.MakeCarz.Add(new FindVeh(35.00f, 125.00f, new VehMods("KURUMA2", 9, 1, false, DataStore.MyLang.Maptext[20], false, true, ReturnStuff.FunPlates()), true));
                                    SearchFor.MakeCarz.Add(new FindVeh(35.00f, 125.00f, new VehMods("KURUMA2", 9, 1, false, DataStore.MyLang.Maptext[20], false, true, ReturnStuff.FunPlates()), true));
                                    EntityBuild.DriveToDest(FollMissions.TargetCar, FollMissions.Endings[0], FollMissions.Driver, 45f, FollMissions.DriveStyle);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[65];
                                }
                            }
                            else if (JobSeq == 8)
                            {
                                if (FollMissions.Driver.IsDead || FollMissions.Passenger.IsDead)
                                    JobSeq = 45;
                                else if (ReturnStuff.AreUNear(FollMissions.Endings[0], FollMissions.TargetCar.Position, 5f))
                                {
                                    JobSeq++;
                                    UiDisplay.bMMDisplay01 = false;
                                    FollMissions.Heli.FreezePosition = false;
                                    FollMissions.Pilot = EntityBuild.NPCSpawn(new PedFeat(ReturnStuff.RandNPC(32), false, 180, 8, 1, FollMissions.Heli, 0, false, 0, ""), FollMissions.Heli.Position, FollMissions.Heli.Heading);
                                    EntityBuild.GetOutofVeh(FollMissions.Driver, 1);
                                    EntityBuild.GetOutofVeh(FollMissions.Passenger, 1);
                                    SearchFor.BackSeat.Add(new FindSeat(2, FollMissions.Heli, FollMissions.Driver, 2f));
                                    SearchFor.BackSeat.Add(new FindSeat(3, FollMissions.Heli, FollMissions.Passenger, 2f));
                                }
                                else
                                {
                                    if (MissionData.iTracking < Game.GameTime)
                                        EntityClear.MultiPedTracker();
                                }
                            }
                            else if (JobSeq == 9)
                            {
                                if (FollMissions.Driver.IsDead || FollMissions.Passenger.IsDead)
                                    JobSeq = 45;
                                else if (FollMissions.Driver.IsInVehicle(FollMissions.Heli) && FollMissions.Passenger.IsInVehicle(FollMissions.Heli))
                                {
                                    JobSeq = 40;
                                    NSBanking.NSCoinInvestments(true, 8, 12, "Eugenics Incorporated Shares");
                                }
                                else
                                {
                                    if (MissionData.iTracking < Game.GameTime)
                                        EntityClear.MultiPedTracker();
                                }
                            }
                        }       // Have player protect two in car against two attacking cars--heli fly away
                        else if (FollMissions.Ending == 6)
                        {
                            if (JobSeq == 6)
                            {
                                JobSeq++;
                                FollMissions.Driver.BlockPermanentEvents = true;
                                iWait4Sec = Game.GameTime + 12000;
                                UiDisplay.MMDisplay01.MarkCol = Color.LimeGreen;
                                FollMissions.Driver.Task.CruiseWithVehicle(FollMissions.TargetCar, 20f, FollMissions.DriveStyle);
                            }
                            else if (JobSeq == 7)
                            {
                                if (FollMissions.Driver.IsDead || FollMissions.Passenger.IsDead || FollMissions.TargetCar.HasBeenDamagedBy(Game.Player.Character) || !FollMissions.Driver.IsInVehicle())
                                    JobSeq = 45;
                                else if (iWait4Sec < Game.GameTime)
                                {
                                    JobSeq++;
                                    Vector3 V3Ufo = FollMissions.TargetCar.Position;
                                    V3Ufo.Z += 500.00f;
                                    FollMissions.Ufo01 = EntityBuild.BuildProp("p_spinning_anus_s", V3Ufo, Vector3.Zero, true, true);
                                    FollMissions.Ufo02 = EntityBuild.BuildProp("ba_prop_battle_lights_fx_righ", V3Ufo, Vector3.Zero, true, true);
                                    FollMissions.Ufo02.AttachTo(FollMissions.Ufo01, FollMissions.Ufo01.GetBoneIndex("bodyshell"), new Vector3(0.00f, 0.00f, 0.00f), new Vector3(0.00f, 60.00f, 30.00f));
                                }
                            }
                            else if (JobSeq == 8)
                            {
                                if (FollMissions.Driver.IsDead || FollMissions.Passenger.IsDead || FollMissions.TargetCar.HasBeenDamagedBy(Game.Player.Character) || !FollMissions.Driver.IsInVehicle())
                                    JobSeq = 45;
                                if (FollMissions.Ufo01.Position.Z > FollMissions.TargetCar.Position.Z + 20.00f)
                                {
                                    FollMissions.Ufo01.Position = new Vector3(FollMissions.TargetCar.Position.X, FollMissions.TargetCar.Position.Y, FollMissions.Ufo01.Position.Z - 0.50f);
                                    FollMissions.Ufo01.Rotation = new Vector3(3.00f, 5.00f, FollMissions.Ufo01.Rotation.Z + 1.5f);
                                }
                                else
                                {
                                    JobSeq++;
                                    iWait4Sec = Game.GameTime + 2000;
                                }
                            }
                            else if (JobSeq == 9)
                            {
                                if (FollMissions.Driver.IsDead || FollMissions.Passenger.IsDead || FollMissions.TargetCar.HasBeenDamagedBy(Game.Player.Character) || !FollMissions.Driver.IsInVehicle())
                                    JobSeq = 45;
                                else if (iWait4Sec < Game.GameTime)
                                {
                                    JobSeq++;
                                    FollMissions.TargetCar.FreezePosition = true;
                                    FollMissions.TargetCar.CurrentBlip.Remove();
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[66];
                                    FollMissions.DistanceBar = false;
                                    UiDisplay.bUiDisplay = false;
                                    UiDisplay.bMMDisplay01 = false;
                                    FollMissions.TargetCar.Position = Vector3.Zero;
                                }
                                else
                                {
                                    FollMissions.Ufo01.Position = new Vector3(FollMissions.TargetCar.Position.X, FollMissions.TargetCar.Position.Y, FollMissions.TargetCar.Position.Z + 15.00f);
                                    FollMissions.Ufo01.Rotation = new Vector3(3.00f, 5.00f, FollMissions.Ufo01.Rotation.Z + 1.5f);
                                }

                            }
                            else if (JobSeq == 10)
                            {
                                if (FollMissions.Ufo01.Position.Z < 500.00f)
                                {
                                    FollMissions.Ufo01.Position = new Vector3(FollMissions.Ufo01.Position.X, FollMissions.Ufo01.Position.Y, FollMissions.Ufo01.Position.Z + 1.3f);
                                    FollMissions.Ufo01.Rotation = new Vector3(3.00f, 2.00f, FollMissions.Ufo01.Rotation.Z + 1.5f);
                                }
                                else
                                {
                                    JobSeq = 40;
                                    NSBanking.NSCoinInvestments(true, 9, 12, "Pißwasser Shares");
                                }
                            }
                        }       // Alan abuction...
                    }        //Follow
                    else if (JobType == 9)
                    {
                        if (Game.Player.WantedLevel > 0)
                            Game.Player.WantedLevel = 0;

                        if (FireMissions.InFort)
                            Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "re_armybase");

                        if (JobSeq == 0)
                        {
                            if (DataStore.MySettings.FastTraveltoStart)
                            {
                                JobSeq++;
                                EntityBuild.WarptoAnyVeh(FireMissions.FireTruck, Game.Player.Character, 1);
                            }
                            else if (ReturnStuff.AmINear(FireMissions.FireTruck.Position, 55f))
                            {
                                JobSeq++;
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[189];
                                EntityBuild.ResetVehPos(FireMissions.FireTruck, FireMissions.TruckPark);
                            }
                        }
                        else if (JobSeq == 1)
                        {
                            if (FireMissions.FireTruck.IsDead)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(FireMissions.FireTruck))
                            {
                                FireMissions.FireTruck.CurrentBlip.Remove();

                                if (!FireMissions.UniformOn)
                                {
                                    FireMissions.UniformOn = true;
                                    if (FireMissions.Uniform != null)
                                        EntityBuild.PedDresser(Game.Player.Character, FireMissions.Uniform);
                                }

                                if (FireMissions.FireType == 1)
                                {
                                    JobSeq = 10;
                                    int iRanCar = RandomX.RandInt(1, 16);
                                    int iVe = RandomX.RandInt(1, 15);
                                    FireMissions.TestVehk = EntityBuild.VehicleSpawn(new VehMods(ReturnStuff.AddRandomVeh(iVe), 0, false, true, ReturnStuff.FunPlates()), FireMissions.FireLocal);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[68] + ReturnStuff.StreetSpirit(FireMissions.FireLocal.V3);
                                    EntityBuild.AddTarget(new BlipForm(FireMissions.FireLocal.V3, true, 1, 436, DataStore.MyLang.Maptext[42]));
                                }
                                else if (FireMissions.FireType == 2)
                                {
                                    JobSeq = 20;
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[69] + ReturnStuff.StreetSpirit(FireMissions.FireLocal.V3);
                                    FireMissions.FireLocal = FireMissions.FireLocal.DropZ(-1f);
                                    EntityBuild.AddTarget(new BlipForm(FireMissions.FireLocal.V3, true, 5, 436, DataStore.MyLang.Maptext[42], 10f));
                                }
                                else if (FireMissions.FireType == 3)
                                {
                                    JobSeq = 30;
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[70] + ReturnStuff.StreetSpirit(FireMissions.FireLocal.V3);
                                    EntityBuild.AddTarget(new BlipForm(FireMissions.FireLocal.V3, true, 1, 436, DataStore.MyLang.Maptext[42]));
                                }
                                else if (FireMissions.FireType == 4)
                                {
                                    JobSeq = 40;
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[71] + ReturnStuff.StreetSpirit(FireMissions.FireLocal.V3);
                                    EntityBuild.AddTarget(new BlipForm(FireMissions.FireLocal.V3, true, 5, 442, DataStore.MyLang.Maptext[42], 1f));
                                }
                                else
                                {
                                    JobSeq = 50;
                                    EntityBuild.AddTarget(new BlipForm(FireMissions.FireLocal.V3, false, 5, 50f, new BlipForm(FireMissions.FireLocal.V3, true, 1, 436, DataStore.MyLang.Maptext[42])));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[72] + ReturnStuff.StreetSpirit(FireMissions.FireLocal.V3);
                                }
                            }
                            else
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[189];
                        }
                        else if (JobSeq == 10)
                        {
                            if (FireMissions.FireTruck.IsDead)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(FireMissions.FireTruck))
                            {
                                if (MissionData.Target_01 == null)
                                {
                                    FireMissions.FireTruck.CurrentBlip.Remove();
                                    EntityBuild.AddTarget(new BlipForm(FireMissions.FireLocal.V3, true, 1, 436, DataStore.MyLang.Maptext[42]));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[68];
                                }
                                else if (ReturnStuff.AreUNear(FireMissions.FireLocal.V3, FireMissions.FireTruck.Position, 50f))
                                {
                                    JobSeq++;
                                    FireMissions.FireTime = Game.GameTime + 45000;
                                    YourFired(FireMissions.TestVehk.Position.X, FireMissions.TestVehk.Position.Y, FireMissions.TestVehk.Position.Z + 1.00f);
                                    UiDisplay.MMDisplay01 = new MarkyMark(FireMissions.TestVehk, 0.50f, Color.Red);
                                    UiDisplay.bMMDisplay01 = true;
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[73];
                                }
                            }
                            else
                            {
                                if (MissionData.Target_01 != null)
                                {
                                    EntityClear.RemoveTargets();
                                    EntityBuild.VehBlip(FireMissions.TkBlip, FireMissions.FireTruck);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[189];
                                }
                            }
                        }
                        else if (JobSeq == 11)
                        {
                            if (FireMissions.FireTruck.IsDead)
                            {
                                JobSeq = 45;
                                UiDisplay.bMMDisplay01 = false;
                                UiDisplay.bUiDisplay = false;
                            }
                            else if (Fire_BurnOut())
                            {
                                JobSeq = 60;
                                EntityClear.RemoveTargets();
                                FireMissions.FireFailed++;
                                UiDisplay.bMMDisplay01 = false;
                                UiDisplay.bUiDisplay = false;
                            }
                            else if (Game.Player.Character.IsInVehicle(FireMissions.FireTruck))
                            {
                                if (MissionData.Target_01 == null)
                                {
                                    FireMissions.FireTruck.CurrentBlip.Remove();
                                    EntityBuild.AddTarget(new BlipForm(FireMissions.FireLocal.V3, true, 1, 436, DataStore.MyLang.Maptext[42]));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[68];
                                }
                                else if (ReturnStuff.AreUNear(FireMissions.FireTruck.Position, FireMissions.TestVehk.Position, 30f))
                                {
                                    if (MissionData.iFireList.Count() > 0)
                                    {
                                        if (Fire_IntheHall(FireMissions.TestVehk.Position))
                                        {
                                            JobSeq = 60;
                                            EntityClear.RemoveTargets();
                                            if (FireMissions.BurninMoney > 1)
                                                DataStore.MyAchivments.Fire_BurningRubber++;
                                            UiDisplay.bMMDisplay01 = false;
                                            UiDisplay.bUiDisplay = false;
                                        }
                                        UiDisplay.ControlerUI(DataStore.MyLang.Context[18], 1);
                                    }
                                }
                            }
                            else
                            {
                                if (!Game.Player.Character.IsInVehicle(FireMissions.FireTruck))
                                {
                                    EntityClear.RemoveTargets();
                                    EntityBuild.VehBlip(FireMissions.TkBlip, FireMissions.FireTruck);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[189];
                                }
                            }
                        }       // Put out vehicle fire
                        else if (JobSeq == 20)
                        {
                            if (FireMissions.FireTruck.IsDead)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(FireMissions.FireTruck))
                            {
                                if (MissionData.Target_01 == null)
                                {
                                    FireMissions.FireTruck.CurrentBlip.Remove();
                                    EntityBuild.AddTarget(new BlipForm(FireMissions.FireLocal.V3, true, 1, 436, DataStore.MyLang.Maptext[42]));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[68];
                                }
                                else if (ReturnStuff.AreUNear(FireMissions.FireLocal.V3, FireMissions.FireTruck.Position, 5f))
                                {
                                    JobSeq++;
                                    EntityClear.RemoveTargets();
                                    FireMissions.Firery[1] = FireMissions.Firery[1].DropZ(-1f);
                                    EntityBuild.AddTarget(new BlipForm(FireMissions.Firery[1].V3, true, 1, 436, DataStore.MyLang.Maptext[42], 1f));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[78];
                                }
                            }
                            else
                            {
                                if (MissionData.Target_01 != null)
                                {
                                    EntityClear.RemoveTargets();
                                    EntityBuild.VehBlip(FireMissions.TkBlip, FireMissions.FireTruck);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[189];
                                }
                            }
                        }
                        else if (JobSeq == 21)
                        {
                            if (FireMissions.FireTruck.IsDead)
                                JobSeq = 45;
                            else if (ReturnStuff.AmINear(FireMissions.Firery[1].V3, 1.5f))
                            {
                                JobSeq++;
                                EntityClear.RemoveTargets();
                                int MyApp = (int)FireMissions.Firery[2].X;
                                FireMissions.Firery = ReturnStuff.IndoorPed(MyApp);
                                FireMissions.FireLocal = FireMissions.Firery[RandomX.RandInt(1, FireMissions.Firery.Count - 1)];
                                YourFired(FireMissions.FireLocal.X, FireMissions.FireLocal.Y, FireMissions.FireLocal.Z - 1.00f);
                                UiDisplay.MMDisplay01 = new MarkyMark(MarkerType.ChevronUpx1, FireMissions.FireLocal, Vector3.Zero, 0.50f, Color.Red);
                                UiDisplay.bMMDisplay01 = true;
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[241];
                                EntityBuild.AddTarget(new BlipForm(FireMissions.FireLocal.V3, true, 1, 436, DataStore.MyLang.Maptext[42]));
                                EntityBuild.ArmsRegulator(Game.Player.Character, 7);
                                FireMissions.FireTime = Game.GameTime + 45000;
                                LoadInteriorSpace(MyApp, FireMissions.Firery[0], 1, true);
                                SearchFor.SlowFastTravel(FireMissions.Firery[0]);
                            }
                            else
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[137];
                        }
                        else if (JobSeq == 22)
                        {
                            if (FireMissions.FireTruck.IsDead)
                                JobSeq = 45;
                            else if (Fire_BurnOut())
                            {
                                JobSeq = 60;
                                EntityClear.RemoveTargets();
                                FireMissions.FireFailed++;
                                UiDisplay.bMMDisplay01 = false;
                                UiDisplay.bUiDisplay = false;
                                EntityBuild.WarptoAnyVeh(FireMissions.FireTruck, Game.Player.Character, 1);
                            }
                            else if (MissionData.iFireList.Count > 0)
                            {
                                if (Fire_IntheHall(FireMissions.FireLocal.V3))
                                {
                                    JobSeq = 60;
                                    EntityClear.RemoveTargets();
                                    if (FireMissions.BurninMoney > 1)
                                        DataStore.MyAchivments.Fire_FirePlace++;
                                    UiDisplay.bMMDisplay01 = false;
                                    UiDisplay.bUiDisplay = false;
                                    EntityBuild.WarptoAnyVeh(FireMissions.FireTruck, Game.Player.Character, 1);
                                }
                            }
                        }       // Put out house fire
                        else if (JobSeq == 30)
                        {
                            if (FireMissions.FireTruck.IsDead)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(FireMissions.FireTruck))
                            {
                                if (MissionData.Target_01 == null)
                                {
                                    FireMissions.FireTruck.CurrentBlip.Remove();
                                    EntityBuild.AddTarget(new BlipForm(FireMissions.FireLocal.V3, true, 1, 436, DataStore.MyLang.Maptext[42]));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[68];
                                }
                                else if (ReturnStuff.AreUNear(FireMissions.FireLocal.V3, FireMissions.FireTruck.Position, 30f))
                                {
                                    JobSeq++;
                                    YourFired(FireMissions.FireLocal.X, FireMissions.FireLocal.Y, FireMissions.FireLocal.Z + 1.00f);
                                    FireMissions.FireTime = Game.GameTime + 45000;
                                    EntityBuild.BuildProp("prop_bin_14a", FireMissions.FireLocal, true, true);
                                    UiDisplay.MMDisplay01 = new MarkyMark(MarkerType.ChevronUpx1, FireMissions.FireLocal, Vector3.Zero, 0.50f, Color.Red);
                                    UiDisplay.bMMDisplay01 = true;
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[73];
                                }
                            }
                            else
                            {
                                if (MissionData.Target_01 != null)
                                {
                                    EntityClear.RemoveTargets();
                                    EntityBuild.VehBlip(FireMissions.TkBlip, FireMissions.FireTruck);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[189];
                                }
                            }
                        }
                        else if (JobSeq == 31)
                        {
                            if (FireMissions.FireTruck.IsDead)
                                JobSeq = 45;
                            else if (Fire_BurnOut())
                            {
                                JobSeq = 60;
                                EntityClear.RemoveTargets();
                                UiDisplay.bMMDisplay01 = false;
                                UiDisplay.bUiDisplay = false;
                                FireMissions.FireFailed++;
                            }
                            else if (MissionData.iFireList.Count > 0)
                            {
                                if (Fire_IntheHall(FireMissions.FireLocal.V3))
                                {
                                    JobSeq = 60;
                                    EntityClear.RemoveTargets();
                                    if (FireMissions.BurninMoney > 1)
                                        DataStore.MyAchivments.Fire_BinAndGone++;
                                    UiDisplay.bMMDisplay01 = false;
                                    UiDisplay.bUiDisplay = false;
                                }
                                UiDisplay.ControlerUI(DataStore.MyLang.Context[18], 1);
                            }
                        }       // Put out bin fire
                        else if (JobSeq == 40)
                        {
                            if (FireMissions.FireTruck.IsDead)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(FireMissions.FireTruck))
                            {

                            }
                            else if (ReturnStuff.AmINear(FireMissions.Firery[FireMissions.FireTime].V3, 1.5f))
                            {
                                EntityClear.RemoveTargets();
                                if (FireMissions.FireTime == 0)
                                {
                                    FireMissions.FirePed = EntityBuild.NPCSpawn(new PedFeat("a_c_cat_01", false, 180, 10), FireMissions.Firery[FireMissions.Firery.Count - 1]);
                                    FireMissions.FirePed.IsInvincible = true;
                                    UiDisplay.MMDisplay01 = new MarkyMark(FireMissions.FirePed, 0.50f, Color.AntiqueWhite);
                                    UiDisplay.bMMDisplay01 = true;
                                }
                                FireMissions.FireTime++;
                                if (FireMissions.FireTime < FireMissions.Firery.Count)
                                {
                                    EntityBuild.AddTarget(new BlipForm(FireMissions.Firery[FireMissions.FireTime].V3, true, 5, 442, DataStore.MyLang.Maptext[42], 1f));
                                }
                                else
                                {
                                    JobSeq++;
                                    EntityClear.RemoveTargets();
                                    FireMissions.FirePed.HasCollision = false;
                                    Function.Call(Hash.ATTACH_ENTITY_TO_ENTITY, FireMissions.FirePed.Handle, Game.Player.Character.Handle, Function.Call<int>(Hash.GET_PED_BONE_INDEX, Game.Player.Character.Handle, 31086), 0.27f, -0.00f, 0.17f, 0.00f, 0.00f, 0.00f, false, false, false, false, 2, true);
                                    FubarVectors ThisSpot = MissionData.AppartmentBlocks(FireMissions.FireArea, 7, -1, -1, true);
                                    FireMissions.FirePed2 = EntityBuild.NPCSpawn(new PedFeat(ReturnStuff.RandNPC(RandomX.RandInt(1, 35)), false, 190, 11), ThisSpot.PedHere);
                                    FireMissions.FireLocal = ThisSpot.ParkHere;
                                    UiDisplay.bMMDisplay01 = false;
                                    FireMissions.CatHat = true;
                                    EntityBuild.VehBlip(FireMissions.TkBlip, FireMissions.FireTruck);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[76];
                                }
                            }
                        }
                        else if (JobSeq == 41)
                        {
                            if (FireMissions.FireTruck.IsDead)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(FireMissions.FireTruck))
                            {
                                if (MissionData.Target_01 == null)
                                {
                                    FireMissions.FireTruck.CurrentBlip.Remove();
                                    EntityBuild.AddTarget(new BlipForm(FireMissions.FireLocal.V3, true, 5, 280, DataStore.MyLang.Maptext[42], 5f));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[77];
                                }
                                else if (ReturnStuff.AreUNear(FireMissions.FireLocal.V3, FireMissions.FireTruck.Position, 5f))
                                {
                                    JobSeq++;
                                    EntityClear.RemoveTargets();
                                    EntityBuild.PedBlimp(new BlipForm(3, DataStore.MyLang.Maptext[55]), FireMissions.FirePed2);
                                }
                            }
                            else
                            {
                                if (MissionData.Target_01 != null)
                                {
                                    EntityClear.RemoveTargets();
                                    EntityBuild.VehBlip(FireMissions.TkBlip, FireMissions.FireTruck);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[189];
                                }
                            }
                        }
                        else if (JobSeq == 42)
                        {
                            if (FireMissions.FireTruck.IsDead || FireMissions.FirePed.IsDead || FireMissions.FirePed2.IsDead)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(FireMissions.FireTruck))
                            {
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[77];
                            }
                            else if (ReturnStuff.AmINear(FireMissions.FirePed2.Position, 5f))
                            {
                                JobSeq++;
                                FireMissions.CatHat = false;
                                FireMissions.FirePed.Detach();
                                FireMissions.FirePed.Position = (Game.Player.Character.Position) + (Game.Player.Character.ForwardVector * 2.00f);
                                iWait4Sec = Game.GameTime + 3500;
                                EntityBuild.WalkThisWay(FireMissions.FirePed, FireMissions.FirePed2.Position, 2.00f);
                                UiDisplay.sSubDisplay = "";
                            }
                        }
                        else if (JobSeq == 43)
                        {
                            if (FireMissions.FireTruck.IsDead || FireMissions.FirePed.IsDead || FireMissions.FirePed2.IsDead)
                                JobSeq = 45;
                            else if (iWait4Sec < Game.GameTime)
                            {
                                FireMissions.BurninMoney = RandomX.RandInt(100, 250);
                                DataStore.MyAchivments.Fire_SaveThePussy++;
                                JobSeq = 60;
                            }
                        }       // Save cat from high place--
                        else if (JobSeq == 50)
                        {
                            if (FireMissions.FireTruck.IsDead)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(FireMissions.FireTruck))
                            {
                                if (MissionData.Target_01 == null)
                                {
                                    FireMissions.FireTruck.CurrentBlip.Remove();
                                    EntityBuild.AddTarget(new BlipForm(FireMissions.FireLocal.V3, false, 5, 50f, new BlipForm(FireMissions.FireLocal.V3, true, 1, 436, DataStore.MyLang.Maptext[42])));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[72] + ReturnStuff.StreetSpirit(FireMissions.FireLocal.V3);
                                }
                                else if (ReturnStuff.AreUNear(FireMissions.FireLocal.V3, FireMissions.FireTruck.Position, 30f))
                                {
                                    JobSeq++;
                                    EntityClear.RemoveTargets();
                                    int iVe = RandomX.RandInt(1, 11);
                                    SearchFor.MakeCarz.Add(new FindVeh(35.00f, 125.00f, new VehMods(ReturnStuff.AddRandomVeh(iVe), 11, 1, true, DataStore.MyLang.Maptext[20], false, true, ReturnStuff.FunPlates()), true));
                                }
                            }
                            else
                            {
                                if (MissionData.Target_01 != null)
                                {
                                    EntityClear.RemoveTargets();
                                    EntityBuild.VehBlip(FireMissions.TkBlip, FireMissions.FireTruck);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[189];
                                }
                            }
                        }
                        else if (JobSeq == 51)
                        {
                            if (FireMissions.FireTruck.IsDead)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(FireMissions.FireTruck))
                            {
                                if (FireMissions.FireTruck.CurrentBlip.Exists())
                                    FireMissions.FireTruck.CurrentBlip.Remove();
                                else if (FireMissions.FirePed != null)
                                {
                                    JobSeq++;
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[79];
                                    FireMissions.FireTime = Game.GameTime + 25000;
                                }
                            }
                            else
                            {
                                if (!FireMissions.FireTruck.CurrentBlip.Exists())
                                {
                                    EntityBuild.VehBlip(FireMissions.TkBlip, FireMissions.FireTruck);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[189];
                                }
                            }
                        }
                        else if (JobSeq == 52)
                        {
                            if (FireMissions.FireTruck.IsDead)
                                JobSeq = 45;
                            else if (FireMissions.FirePed.IsDead)
                            {
                                JobSeq = 60;
                                DataStore.MyAchivments.Fire_TheFireStarter++;
                                FireMissions.BurninMoney += 5000;
                            }
                            else if (FireMissions.FireTime < Game.GameTime)
                            {
                                JobSeq = 60;
                                DataStore.MyAchivments.Fire_TheFireStarter++;
                                FireMissions.TestVehk.Explode();
                            }
                            else if (iWait4Sec < Game.GameTime)
                            {
                                Ped THisPed = Fire_ShootRanPed(30f);
                                if (THisPed != null)
                                    FireMissions.FirePed.Task.VehicleShootAtPed(THisPed);
                            }
                        }       // Chase driver throwing molitovs     
                        else if (JobSeq == 60)
                        {
                            EntityClear.RemoveTargets();
                            if (FireMissions.FireFailed < 5)
                            {
                                MissionData.VehicleList_01.Remove(FireMissions.FireTruck);
                                EntityClear.ClearOutAllStuff();
                                for (int i = 0; i < MissionData.iFireList.Count; i++)
                                    EntityLog.CleanUp(-1, -1, MissionData.iFireList[i]);
                                MissionData.iFireList.Clear();
                                UiDisplay.sSubDisplay = "";
                                ControlSelect(8);
                            }
                            else
                            {
                                JobSeq = 65;
                                MissionData.iFireList.Clear();
                            }
                        }
                        else if (JobSeq == 65)
                        {
                            if (FireMissions.RepMish < 25)
                            {
                                if (FireMissions.RepMish > 4)
                                    NSBanking.NSCoinInvestments(true, FireMissions.RepMish - 2, FireMissions.RepMish, "Mors Mutual Shares");
                                else
                                    NSBanking.NSCoinInvestments(true, 0, 1, "Mors Mutual Shares");
                            }
                            else
                                NSBanking.NSCoinInvestments(true, 27, 28, "Mors Mutual Shares");

                            if (FireMissions.Uniform != null)
                                EntityBuild.PedDresser(Game.Player.Character, FireMissions.Oufit);

                            if (FireMissions.InFort)
                                ZancudaClosed();

                            FireMissions.FireTruck.MarkAsNoLongerNeeded();

                            MissionEnd(Fire_Awards(FireMissions.TotalPay, true));
                        }
                        else if (JobSeq == 45)
                        {
                            if (FireMissions.InFort)
                                ZancudaClosed();

                            if (FireMissions.Uniform != null)
                                EntityBuild.PedDresser(Game.Player.Character, FireMissions.Oufit);

                            if (FireMissions.CatHat)
                                FireMissions.FirePed.Detach();

                            GameOverFail(false);
                        }
                    }        //Fire
                    else if (JobType == 10)
                    {
                        if (JobSeq == 0)
                        {
                            JobSeq++;
                            if (DataStore.MySettings.FastTraveltoStart)
                                SearchFor.SlowFastTravel(MissionData.vFuMiss, 0.00f);
                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[80] + ReturnStuff.StreetSpirit(JohnnyMissions.Start.PedHere.V3);
                        }
                        else if (JobSeq == 1)
                        {
                            if (ReturnStuff.AmINear(JohnnyMissions.Start.PedHere.V3, 1.5f))
                            {
                                JobSeq++;
                                EntityClear.RemoveTargets();
                                LoadInteriorSpace(JohnnyMissions.Start.PedNum, JohnnyMissions.VehSpot[0], 1, true);
                                Johnny_PlaceVeh();
                                SearchFor.SlowFastTravel(JohnnyMissions.VehSpot[0]);
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[81];
                            }
                        }
                        else if (JobSeq == 2)
                        {
                            if (Game.Player.Character.IsInVehicle(JohnnyMissions.PlayVeh))
                            {
                                JobSeq++;
                                UiDisplay.bUiDisplay = true;
                                EntityBuild.ResetVehPos(JohnnyMissions.PlayVeh, JohnnyMissions.Start.ParkHere);
                                JohnnyMissions.ReturnTime = Game.GameTime;
                                JohnnyMissions.PlayVeh.CurrentBlip.Remove();
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[82] + ReturnStuff.StreetSpirit(JohnnyMissions.End.ParkHere.V3);
                                EntityBuild.AddTarget(new BlipForm(JohnnyMissions.End.ParkHere.V3, false, 17, 50f, new BlipForm(JohnnyMissions.End.ParkHere.V3, true, 5, 488, DataStore.MyLang.Maptext[42], 5f)));
                            }
                        }
                        else if (JobSeq == 3)
                        {
                            GetBackInVeh(JohnnyMissions.PlayVeh);

                            if (JohnnyMissions.Earnings > 35000)
                            {
                                JohnnyMissions.PlayVeh.Explode();
                                JobSeq = 45;
                            }
                            else
                                JohnnyMissions.Earnings = ReturnStuff.MultiDamage(true, true, 0);

                            if (JohnnyMissions.PlayVeh.IsDead || !JohnnyMissions.PlayVeh.IsDriveable)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(JohnnyMissions.PlayVeh))
                            {
                                if (MissionData.Target_01 == null)
                                {
                                    JohnnyMissions.PlayVeh.CurrentBlip.Remove();
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[82] + ReturnStuff.StreetSpirit(JohnnyMissions.End.ParkHere.V3);
                                    EntityBuild.AddTarget(new BlipForm(JohnnyMissions.End.ParkHere.V3, false, 17, 50f, new BlipForm(JohnnyMissions.End.ParkHere.V3, true, 5, 488, DataStore.MyLang.Maptext[42], 5f)));
                                }
                                else if (ReturnStuff.AreUNear(JohnnyMissions.End.ParkHere.V3, JohnnyMissions.PlayVeh.Position, 90f))
                                {
                                    JobSeq++;
                                    EntityBuild.MoveThatCar(JohnnyMissions.End.ParkHere);
                                    Johnny_PlayerAntics(JohnnyMissions.End.ParkHere);
                                }
                            }
                            else
                            {
                                if (MissionData.Target_01 != null)
                                {
                                    EntityClear.RemoveTargets();
                                    EntityBuild.VehBlip(new BlipForm(5, DataStore.MyLang.Maptext[9]), JohnnyMissions.PlayVeh);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[81];
                                }
                            }
                        }
                        else if (JobSeq == 4)
                        {
                            if (JohnnyMissions.Earnings > 35000)
                            {
                                JohnnyMissions.PlayVeh.Explode();
                                JobSeq = 45;
                            }
                            else
                                JohnnyMissions.Earnings = ReturnStuff.MultiDamage(true, true, 0);

                            if (JohnnyMissions.PlayVeh.IsDead || !JohnnyMissions.PlayVeh.IsDriveable)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(JohnnyMissions.PlayVeh))
                            {
                                if (MissionData.Target_01 == null)
                                {
                                    JohnnyMissions.PlayVeh.CurrentBlip.Remove();
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[82] + ReturnStuff.StreetSpirit(JohnnyMissions.End.ParkHere.V3);
                                    EntityBuild.AddTarget(new BlipForm(JohnnyMissions.End.ParkHere.V3, false, 17, 50f, new BlipForm(JohnnyMissions.End.ParkHere.V3, true, 5, 488, DataStore.MyLang.Maptext[42], 5f)));
                                }
                                else if (ReturnStuff.AreUNear(JohnnyMissions.End.ParkHere.V3, JohnnyMissions.PlayVeh.Position, 10f))
                                {
                                    JobSeq++;
                                    EntityClear.RemoveTargets();
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[83];
                                    JohnnyMissions.PlayVeh.Repair();
                                    UiDisplay.SideBars[0].Name = "" + DataStore.MyLang.Othertext[1] + "";
                                    EntityBuild.AddTarget(new BlipForm(JohnnyMissions.End.ParkHere.V3, false, 17, 50f));
                                    JohnnyMissions.EndTimes = Game.GameTime + 30000;
                                }
                            }
                            else
                            {
                                if (MissionData.Target_01 != null)
                                {
                                    EntityClear.RemoveTargets();
                                    EntityBuild.VehBlip(new BlipForm(5, DataStore.MyLang.Maptext[9]), JohnnyMissions.PlayVeh);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[81];
                                }
                            }
                        }
                        else if (JobSeq == 5)
                        {
                            if (JohnnyMissions.PlayVeh.IsDead || !JohnnyMissions.PlayVeh.IsDriveable)
                                JobSeq = 45;
                            else if (JohnnyMissions.EndTimes < Game.GameTime)
                            {
                                if (Game.Player.Character.IsInVehicle(JohnnyMissions.PlayVeh))
                                    DataStore.MyAchivments.Johnny_ThisOnesAkeeper++;

                                if (ReturnStuff.AmINear(JohnnyMissions.PlayVeh.Position, 50f) || ReturnStuff.AreUFar(JohnnyMissions.End.ParkHere.V3, JohnnyMissions.PlayVeh.Position, 50f))
                                    JobSeq = 7;
                                else
                                    JobSeq = 6;

                                UiDisplay.sSubDisplay = "";
                            }
                            else if (!ReturnStuff.AmINear(JohnnyMissions.PlayVeh.Position, 50f))
                            {
                                UiDisplay.bUiDisplay = false;
                                if (ReturnStuff.AreUFar(JohnnyMissions.End.ParkHere.V3, JohnnyMissions.PlayVeh.Position, 50f))
                                    JobSeq = 7;
                                else
                                    JobSeq = 6;
                            }
                            UiDisplay.SideBars[0].Data = ReturnStuff.ShowComs(JohnnyMissions.EndTimes - Game.GameTime, false, false);
                        }
                        else if (JobSeq == 6)
                        {
                            if (JohnnyMissions.Earnings > 20000)
                                NSBanking.NSCoinInvestments(false, 5, 7, "Mors Mutual Shares");
                            else if (JohnnyMissions.Earnings < 99)
                                JohnnyMissions.Earnings = 100;
                            Johnny_AddAwards();
                            MissionEnd(Johnny_Awards(JohnnyMissions.Earnings, true));
                        }
                        else if (JobSeq == 7)
                        {
                            JobSeq++;
                            UiDisplay.bUiDisplay = false;
                            Johnny_PlayerAttack();
                        }
                        else if (JobSeq == 8)
                        {
                            if (JohnnyMissions.YoPlayer != null)
                            {
                                if (JohnnyMissions.YoPlayer.IsDead)
                                {
                                    JobSeq = 45;
                                    DataStore.MyAchivments.Johnny_ITawITawThePlayerCreapinUp++;
                                }
                                else if (JohnnyMissions.YoPlayer.Position.DistanceTo(Game.Player.Character.Position) > 150f)
                                    JobSeq = 45;
                            }
                        }
                        else if (JobSeq == 45)
                        {
                            GameOverFail(false);
                        }
                    }       //Johnny
                    else if (JobType == 11)
                    {
                        if (RacingMissions.SmokeOn)
                        {
                            if (RacingMissions.ColorTime < Game.GameTime)
                            {
                                RacingMissions.ColorTime = Game.GameTime + 3000;
                                if (RacingMissions.ColorCatch < 20)
                                    RacingMissions.ColorCatch++;
                                else
                                    RacingMissions.ColorCatch = 1;
                                RacingMissions.Smokey = new RGBA(RacingMissions.ColorCatch);
                            }

                            if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, "scr_carsteal4"))
                            {
                                Vector3 Paint = new Vector3(RacingMissions.Smokey.R, RacingMissions.Smokey.G, RacingMissions.Smokey.B);
                                Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_carsteal4");
                                Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_carsteal4_wheel_burnout", RacingMissions.RaceVeh, -4.815f, 1.0f, 0.5f, 0, 0, 0, 0.75f - 0.2, 0, 1, 0);
                                Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_COLOUR, Paint.X, Paint.Y, Paint.Z);
                            }
                            else
                            {
                                Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_carsteal4");
                            }
                            if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, "scr_carsteal4"))
                            {
                                Vector3 Paint = new Vector3(RacingMissions.Smokey.R, RacingMissions.Smokey.G, RacingMissions.Smokey.B);
                                Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_carsteal4");
                                Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_carsteal4_wheel_burnout", RacingMissions.RaceVeh, 4.815f, 1.0f, 0.5f, 0, 0, 0, 0.75f - 0.2, 0, 1, 0);
                                Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_COLOUR, Paint.X, Paint.Y, Paint.Z);
                            }
                            else
                            {
                                Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_carsteal4");
                            }
                        }

                        if (JobSeq == 0)
                        {
                            JobSeq++;
                            if (DataStore.MySettings.FastTraveltoStart)
                                SearchFor.SlowFastTravel(MissionData.vFuMiss, 0.00f);

                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[84];
                        }
                        else if (JobSeq == 1)
                        {
                            if (!Game.Player.Character.IsInVehicle())
                            {
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[84];
                                if (ReturnStuff.AmINear(RacingMissions.YourRace.PickVeh.V3, RacingMissions.SpawnDistance))
                                    RacingMissions.PickVeh = ReturnStuff.PickThatVeh(RacingMissions.PickVeh, MissionData.MishVeh, RacingMissions.YourRace.PickVeh, RacingMissions.RaceSet.VehClass, true);
                            }
                            else if (Game.Player.Character.SeatIndex == VehicleSeat.Driver)
                            {
                                UiDisplay.sSubDisplay = "";

                                if (Game.Player.Character.CurrentVehicle == MissionData.MishVeh)
                                {
                                    JobSeq++;
                                    if (MissionData.MishVeh.CurrentBlip.Exists())
                                        MissionData.MishVeh.CurrentBlip.Remove();
                                }
                            }
                        }
                        else if (JobSeq == 2)
                        {
                            JobSeq++;
                            EntityClear.RemoveTargets();
                            RacingMissions.RaceVeh = MissionData.MishVeh;
                            RacingMissions.RaceVeh.IsPersistent = true;
                            RacingMissions.RaceRecVec = RacingMissions.RaceVeh.Position;


                            if (RacingMissions.YourRace.SkipCountDown)
                                RacingMissions.Target = Racist_CheckPoint(true);
                            else
                                Racist_StartLine();

                            if (RacingMissions.RaceSet.Trafic)
                            {
                                Function.Call(Hash.SET_VEHICLE_POPULATION_BUDGET, 3);
                                Function.Call(Hash.SET_PED_POPULATION_BUDGET, 3);
                                Function.Call(Hash.SET_FAR_DRAW_VEHICLES, true);
                            }

                            UiDisplay.ControlerUI(DataStore.MyLang.Context[31], 5000);
                            UiDisplay.bUiDisplay = true;
                            RacingMissions.TotalLapTime = Game.GameTime;
                        }
                        else if (JobSeq == 3)
                        {
                            if (RacingMissions.RaceVeh.IsDead)
                                JobSeq = 45;
                            else if (!Game.Player.Character.IsInVehicle() || ReturnStuff.ButtonDown(75))
                            {
                                if (RacingMissions.ResetBar == 0)
                                {
                                    UiDisplay.SideBars.Add(new SideBar(DataStore.MyLang.Mistext[244], "", 0f, true));
                                    RacingMissions.ResetBar = UiDisplay.SideBars.Count - 1;
                                }
                                else
                                {
                                    if (UiDisplay.SideBars[RacingMissions.ResetBar].Percent > 1f)
                                    {
                                        Vector4 LastPos;
                                        if (RacingMissions.CurrentCheck > 0)
                                            LastPos = new Vector4(RacingMissions.YourRace.CheckPoints[RacingMissions.CurrentCheck - 1].Pos, RacingMissions.YourRace.CheckPoints[RacingMissions.CurrentCheck - 1].Rot.Z);
                                        else
                                            LastPos = new Vector4(RacingMissions.YourRace.CheckPoints[RacingMissions.YourRace.CheckPoints.Count - 1].Pos, RacingMissions.YourRace.CheckPoints[RacingMissions.YourRace.CheckPoints.Count - 1].Rot.Z);

                                        Racist_BackOnTrack(Game.Player.Character, RacingMissions.RaceVeh, LastPos, true);
                                        RacingMissions.DisableCapture = true;
                                        RacingMissions.BestRL.RaceLine.Clear();
                                    }
                                    else
                                    {
                                        UiDisplay.SideBars[RacingMissions.ResetBar].Percent += 0.01f;
                                    }
                                }

                            }
                            else if (ReturnStuff.AmINear(RacingMissions.Target, RacingMissions.YourRace.CorSize + 2.5f))
                            {
                                if (RacingMissions.StartLine)
                                {
                                    RacingMissions.LapTime = Game.GameTime;
                                    RacingMissions.StartLine = false;
                                    RacingMissions.SmokeOn = true;
                                }
                                else if (RacingMissions.StuntRace)
                                    SearchFor.RemoveDoors(RacingMissions.Target, 20f);

                                RacingMissions.Target = Racist_CheckPoint(false);
                            }
                            else
                            {
                                if (RacingMissions.ResetBar != 0)
                                {
                                    UiDisplay.SideBars.RemoveAt(RacingMissions.ResetBar);
                                    RacingMissions.ResetBar = 0;
                                }
                            }

                            if (!RacingMissions.StartLine)
                                Racist_PosTime();

                            if (!RacingMissions.DisableCapture)
                                RacingMissions.RaceRecVec = Racist_SnapShot(RacingMissions.RaceVeh, RacingMissions.RaceRecVec);


                            if (RacingMissions.StuntRace)
                            {
                                if (RacingMissions.RaceVeh.IsInAir)
                                {
                                    RacingMissions.RacePays++;
                                    UiDisplay.SideBars[1].Data = "$ " + RacingMissions.RacePays;
                                }
                            }
                            else
                            {
                                if (RacingMissions.RaceSet.PasiveMode)
                                    EntityClear.Racist_PasiveMode();

                                if (!RacingMissions.RaceSet.Trafic)
                                    EntityClear.ClearTheWay(true, false);
                            }
                        }
                        else if (JobSeq == 4)
                        {
                            JobSeq++;
                            Racist_RaceEnd(false);
                        }
                        else if (JobSeq == 45)
                        {
                            Racist_RaceEnd(true);
                        }
                    }       //Racist
                    else if (JobType == 12)
                    {
                        if (JobSeq == 0)
                        {
                            JobSeq++;
                            if (DataStore.MySettings.FastTraveltoStart)
                                SearchFor.SlowFastTravel(World.GetNextPositionOnStreet(MissionData.vFuMiss), 0.00f);
                            EntityBuild.AddTarget(new BlipForm(BombingMissions.BlipCenter, false, 5, 150f, new BlipForm(BombingMissions.BlipCenter, true, 5, 486, DataStore.MyLang.Maptext[26])));
                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[87] + ReturnStuff.StreetSpirit(BombingMissions.BombThis.V3);
                        }
                        else if (JobSeq == 1)
                        {
                            if (ReturnStuff.AmINear(BombingMissions.BombThis.V3, 155.00f))
                            {
                                JobSeq++;
                                EntityClear.RemoveTargets();
                                if (BombingMissions.Uniform != null)
                                    EntityBuild.PedDresser(Game.Player.Character, BombingMissions.Uniform);
                                BombingMissions.MyBomb = EntityBuild.BuildProp("ex_prop_adv_case_sm_flash", BombingMissions.BombThis, false, false);
                                EntityBuild.AddTarget(new BlipForm(BombingMissions.BlipCenter, false, 5, 60f, new BlipForm(BombingMissions.BlipCenter, true, 5, 486, DataStore.MyLang.Maptext[26])));
                                int iNoPed = RandomX.RandInt(1, 4);
                                SearchFor.StreetFrenz.Add(new FindPed(5f, 95f, new PedFeat("", 12)));
                                BombingMissions.BlowTime = Game.GameTime + 120000;
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[88];
                                UiDisplay.bUiDisplay = true;
                            }
                        }
                        else if (JobSeq == 2)
                        {
                            if (BombingMissions.BlowTime > Game.GameTime)
                            {
                                if (ReturnStuff.PickupBling(BombingMissions.MyBomb))
                                {
                                    JobSeq++;
                                    EntityClear.RemoveTargets();
                                    UiDisplay.bUiDisplay = false;
                                    BombingMissions.BlowTime -= Game.GameTime;

                                    if (DataStore.MyAchivments.Bbomb_SoThereItIs == 0)
                                        DataStore.MyAchivments.Bbomb_SoThereItIs = BombingMissions.BlowTime;
                                    else if (BombingMissions.BlowTime < DataStore.MyAchivments.Bbomb_SoThereItIs)
                                        DataStore.MyAchivments.Bbomb_SoThereItIs = BombingMissions.BlowTime;
                                    if (BombingMissions.BlowTime < 2000)
                                        DataStore.MyAchivments.Bbomb_OnlyTheDoors++;

                                    EntityBuild.AddTarget(new BlipForm(BombingMissions.PoilceDrop[0], true, 5, 305, DataStore.MyLang.Maptext[57], 1f));
                                    MissionData.vFuMiss = BombingMissions.PoilceDrop[1];
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[89];
                                    BbBomb_BombSquad(BombingMissions.PoilceDrop);
                                }
                                UiDisplay.SideBars[0].Data = ReturnStuff.ShowComs(BombingMissions.BlowTime - Game.GameTime, false, false);
                            }
                            else
                            {
                                JobSeq = 45;
                                World.AddExplosion(BombingMissions.MyBomb.Position, ExplosionType.PetrolPump, 10.00f, 10.00f, true, false);
                                BombingMissions.MyBomb.Position = Vector3.Zero;
                            }
                        }
                        else if (JobSeq == 3)
                        {
                            if (ReturnStuff.AmINear(BombingMissions.PoilceDrop[0], 2f))
                            {
                                JobSeq++;
                                EntityClear.RemoveTargets();
                                UiDisplay.sSubDisplay = "";
                                UiDisplay.bMMDisplay01 = false;
                                iWait4Sec = Game.GameTime + 2000;
                                Game.Player.Character.Task.PlayAnimation("anim@mp_fireworks", "place_firework_3_box", 8.00f, 3000, true, 1.00f);
                            }
                        }
                        else if (JobSeq == 4)
                        {
                            if (iWait4Sec < Game.GameTime)
                            {
                                JobSeq++;
                                if (BombingMissions.Uniform != null)
                                    EntityBuild.PedDresser(Game.Player.Character, BombingMissions.Oufit);
                                EntityBuild.BuildProp("ex_prop_adv_case_sm_flash", BombingMissions.PoilceDrop[0], Vector3.Zero, false, true);
                                SearchFor.StreetFrenz.Add(new FindPed(0.1f, 45f, 99, true, BombingMissions.PoilceDrop[0], new PedFeat("", 2)));
                                BombingMissions.Payment = RandomX.RandInt(4000, 5000);
                                NSBanking.NSCoinInvestments(true, 7, 9, "Mors Mutual Shares");
                                MissionEnd(BbBomb_Awards(BombingMissions.Payment, true));
                            }
                        }
                        else if (JobSeq == 45)
                        {
                            if (BombingMissions.Uniform != null)
                                EntityBuild.PedDresser(Game.Player.Character, BombingMissions.Oufit);
                            NSBanking.NSCoinInvestments(false, 7, 11, "Mors Mutual Shares");
                            GameOverFail(false);
                        }
                    }       //bbBomb
                    else if (JobType == 13)
                    {
                        if (JobSeq == 0)
                        {
                            JobSeq++;
                            if (DataStore.MySettings.FastTraveltoStart)
                                SearchFor.SlowFastTravel(HitMissions.MyHits.StartPoint, 0.00f);
                        }
                        else if (JobSeq == 1)
                        {
                            if (HitMissions.CayoDoors)
                            {
                                if (ReturnStuff.AmINear(HitMissions.MyHits.StartPoint, 10.5f))
                                {
                                    HitMissions.CayoDoors = false;
                                    SearchFor.OpenDoors(HitMissions.MyHits.StartPoint, 6.00f);
                                }
                            }
                            else if (ReturnStuff.AmINear(HitMissions.MyHits.StartPoint, 2.5f))
                            {
                                if (!Game.Player.Character.IsInVehicle())
                                {
                                    JobSeq++;
                                    EntityClear.RemoveTargets();
                                    EntityBuild.GunningIt(Game.Player.Character, 11);
                                    HitMan_SecurtyDetail();
                                    HitMissions.TimeTaken = Game.GameTime;
                                }
                            }
                        }
                        else if (JobSeq == 2)
                        {
                            if (HitMissions.Boss.IsDead)
                            {
                                if (HitMissions.Boss.WasKilledByStealth)
                                {

                                    if (LocationX == 1)
                                        DataStore.MyDatSet.DAssZone01 += 1;
                                    else if (LocationX == 2)
                                        DataStore.MyDatSet.DAssZone02 += 1;
                                    else if (LocationX == 3)
                                        DataStore.MyDatSet.DAssZone03 += 1;
                                    else if (LocationX == 4)
                                        DataStore.MyDatSet.DAssZone04 += 1;
                                    else if (LocationX == 5)
                                        DataStore.MyDatSet.DAssZone05 += 1;
                                    else if (LocationX == 6)
                                        DataStore.MyDatSet.DAssZone06 += 1;
                                    else
                                        DataStore.MyDatSet.DAssZone07 += 1;

                                    NSBanking.NSCoinInvestments(true, 7, 12, "LCN Shares");
                                    Hitman_AddingAwards();
                                    HitMissions.TimeTaken -= Game.GameTime;
                                    HitMissions.TimeTaken *= -1;
                                    if (DataStore.MyAchivments.Hitman_HoldMyBeer == 0)
                                        DataStore.MyAchivments.Hitman_HoldMyBeer = HitMissions.TimeTaken;
                                    else if (HitMissions.TimeTaken < DataStore.MyAchivments.Hitman_HoldMyBeer)
                                        DataStore.MyAchivments.Hitman_HoldMyBeer = HitMissions.TimeTaken;
                                    MissionEnd(Hitman_Awards(HitMissions.Payment, true));
                                }
                                else
                                {
                                    JobSeq = 45;
                                }
                                UiDisplay.bMMDisplay01 = false;
                            }
                            else if (Game.Player.WantedLevel > 0)
                                Game.Player.WantedLevel = 0;
                            else if (ReturnStuff.AmINear(HitMissions.Boss.Position, 10f))
                            {
                                if (Function.Call<bool>(Hash.GET_PED_STEALTH_MOVEMENT, Game.Player.Character.Handle))
                                    UiDisplay.ControlerUI(DataStore.MyLang.Context[19], 1);
                                else
                                    UiDisplay.ControlerUI(DataStore.MyLang.Context[20], 1);
                            }

                            if (MissionData.iTracking < Game.GameTime)
                                Hitman_ManualAI();

                            if (UiDisplay.SpotedList.Count > 0)
                                Hitman_SpookBars();
                        }
                        else if (JobSeq == 40)
                        {
                            JobSeq = 41;
                            UiDisplay.sSubDisplay = "";
                            UiDisplay.bMMDisplay01 = false;
                            iWait4Sec = Game.GameTime + 15000;
                        }
                        else if (JobSeq == 41)
                        {
                            if (iWait4Sec < Game.GameTime)
                                JobSeq = 45;
                        }
                        else if (JobSeq == 45)
                        {
                            Hitman_RemoveVisionCones();
                            GameOverFail(false);
                        }
                    }       //Hitman
                    else if (JobType == 14)
                    {
                        if (JobSeq == 0)
                        {
                            JobSeq++;
                            EntityBuild.AddTarget(new BlipForm(SnipMissions.MySnips.GoHere[SnipMissions.GoTo], true, 5, 458, DataStore.MyLang.Maptext[42], 1f));

                            if (DataStore.MySettings.FastTraveltoStart)
                                SearchFor.SlowFastTravel(SnipMissions.MySnips.GoHere[SnipMissions.GoTo], 0.00f);

                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[238];
                        }
                        else if (JobSeq == 1)
                        {
                            if (ReturnStuff.AmINear(SnipMissions.MySnips.GoHere[SnipMissions.GoTo], 1.5f))
                            {
                                EntityClear.RemoveTargets();
                                SnipMissions.GoTo++;
                                if (SnipMissions.GoTo < SnipMissions.MySnips.GoHere.Count)
                                {
                                    EntityBuild.AddTarget(new BlipForm(SnipMissions.MySnips.GoHere[SnipMissions.GoTo], true, 5, 458, DataStore.MyLang.Maptext[42], 1f));
                                    if (SnipMissions.GoTo == 1)
                                        Sniper_AddGoons();
                                }
                                else
                                {
                                    JobSeq++;
                                    EntityBuild.AddTarget(new BlipForm(SnipMissions.MySnips.GunCase.V3, true, 5, 458, DataStore.MyLang.Maptext[42]));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[239];
                                    UiDisplay.MMDisplay01 = new MarkyMark(MarkerType.ChevronUpx1, new Vector3(SnipMissions.MySnips.GunCase.X, SnipMissions.MySnips.GunCase.Y, SnipMissions.MySnips.GunCase.Z + 1.00f), Vector3.Zero, SnipMissions.MySnips.GunCase.R, 0.50f, Color.Red);
                                    UiDisplay.bMMDisplay01 = true;
                                }
                            }
                        }
                        else if (JobSeq == 2)
                        {
                            if (ReturnStuff.AmINear(SnipMissions.MySnips.GunCase.V3, 1.5f))
                            {
                                JobSeq++;
                                EntityClear.RemoveTargets();
                                Sniper_WeapSwaps();
                                Sniper_RunForest();
                                UiDisplay.MMDisplay01 = new MarkyMark(SnipMissions.TargetPed, 0.50f, Color.Purple);
                                UiDisplay.FolPed = new Ped(SnipMissions.TargetPed.Handle);
                                UiDisplay.bMMDisplay01 = true;
                                EntityBuild.AddTarget(new BlipForm(SnipMissions.MySnips.VantagePoint, true, 5, 458, DataStore.MyLang.Maptext[42], 1f));
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[238];
                            }
                        }
                        else if (JobSeq == 3)
                        {
                            if (ReturnStuff.AmINear(SnipMissions.MySnips.VantagePoint, 1.5f))
                            {
                                JobSeq++;
                                EntityClear.RemoveTargets();
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[240];
                                Game.Player.Character.Weapons.Give(WeaponHash.SniperRifle, 1, true, true);
                                Script.Wait(1000);
                            }
                        }
                        else if (JobSeq == 4)
                        {
                            if (SnipMissions.MySnips.Convertables)
                                UiDisplay.ControlerUI(DataStore.MyLang.Context[34], 1);
                            else
                                UiDisplay.ControlerUI(DataStore.MyLang.Context[32], 1);

                            if (ReturnStuff.AmIFar(SnipMissions.MySnips.VantagePoint, 30f))
                                JobSeq = 45;
                            else if (Game.Player.Character.Weapons.Current.Hash == WeaponHash.SniperRifle)
                            {
                                if (Game.Player.Character.Weapons.Current.AmmoInClip != 1)
                                {
                                    Sniper_BulletTime();
                                    Script.Wait(2000);
                                    if (SnipMissions.TargetPed.IsDead)
                                        JobSeq = 10;
                                    else if (SnipMissions.HitSome)
                                    {
                                        JobSeq = 45;
                                        DataStore.MyAchivments.Sniper_FireAtWill++;         //shoot the wrong guy
                                    }
                                    else
                                        JobSeq = 45;
                                    UiDisplay.sSubDisplay = "";
                                }
                            }
                            Sniper_RunForest();

                            if (ReturnStuff.WhileButtonDown(51))
                                Sniper_GoProne();
                            else if (SnipMissions.GoProne)
                                Function.Call(Hash.DISPLAY_SNIPER_SCOPE_THIS_FRAME);
                        }
                        else if (JobSeq == 5)
                        {
                            if (SnipMissions.MySnips.Convertables)
                                UiDisplay.ControlerUI(DataStore.MyLang.Context[34], 1);
                            else
                                UiDisplay.ControlerUI(DataStore.MyLang.Context[32], 1);

                            if (ReturnStuff.AmIFar(SnipMissions.MySnips.VantagePoint, 30f))
                                JobSeq = 45;
                            else if (SnipMissions.TargetPed.IsInVehicle(SnipMissions.ExitVic) && SnipMissions.Follow1.IsInVehicle(SnipMissions.ExitVic) && SnipMissions.Follow2.IsInVehicle(SnipMissions.ExitVic))
                            {
                                Script.Wait(1000);
                                SnipMissions.MySnips.VehSpeed = 10.00f;
                                iWait4Sec = Game.GameTime + 35000;
                                if (SnipMissions.MySnips.FlyChopper)
                                    EntityBuild.FlyHeli(SnipMissions.Driver, SnipMissions.MySnips.DriveToo, SnipMissions.MySnips.VehSpeed, 0.00f);
                                else
                                {
                                    if (SnipMissions.MySnips.Booater)
                                    {
                                        Function.Call(Hash.SET_BOAT_ANCHOR, SnipMissions.ExitVic.Handle, false);
                                        EntityBuild.DriveToDest(SnipMissions.ExitVic, SnipMissions.MySnips.DriveToo, SnipMissions.Driver, SnipMissions.MySnips.VehSpeed, 0);
                                    }
                                    else
                                        EntityBuild.DriveToDest(SnipMissions.ExitVic, SnipMissions.MySnips.DriveToo, SnipMissions.Driver, SnipMissions.MySnips.VehSpeed, 786603);
                                }

                                if (SnipMissions.MySnips.TheUfo)
                                    JobSeq = 7;
                                else
                                    JobSeq++;
                            }
                            else
                            {
                                if (Game.Player.Character.Weapons.Current.Hash == WeaponHash.SniperRifle)
                                {
                                    if (Game.Player.Character.Weapons.Current.AmmoInClip != 1)
                                    {
                                        UiDisplay.sSubDisplay = "";
                                        Sniper_BulletTime();
                                        Script.Wait(2000);

                                        if (SnipMissions.TargetPed.IsDead)
                                            JobSeq = 10;
                                        else if (SnipMissions.HitSome)
                                        {
                                            JobSeq = 45;
                                            DataStore.MyAchivments.Sniper_FireAtWill++;         //shoot the wrong guy
                                        }
                                        else
                                            JobSeq = 45;
                                    }
                                }
                            }

                            if (ReturnStuff.WhileButtonDown(51))
                                Sniper_GoProne();
                            else if (SnipMissions.GoProne)
                                Function.Call(Hash.DISPLAY_SNIPER_SCOPE_THIS_FRAME);
                        }
                        else if (JobSeq == 6)
                        {
                            if (SnipMissions.MySnips.Convertables)
                                UiDisplay.ControlerUI(DataStore.MyLang.Context[34], 1);
                            else
                                UiDisplay.ControlerUI(DataStore.MyLang.Context[32], 1);

                            if (ReturnStuff.AmIFar(SnipMissions.MySnips.VantagePoint, 30f) || iWait4Sec < Game.GameTime)
                                JobSeq = 45;
                            else if (Game.Player.Character.Weapons.Current.Hash == WeaponHash.SniperRifle)
                            {
                                if (Game.Player.Character.Weapons.Current.AmmoInClip != 1)
                                {
                                    UiDisplay.sSubDisplay = "";
                                    Sniper_BulletTime();
                                    Script.Wait(2000);

                                    if (SnipMissions.TargetPed.IsDead)
                                        JobSeq = 10;
                                    else if (SnipMissions.HitSome)
                                    {
                                        JobSeq = 45;
                                        DataStore.MyAchivments.Sniper_FireAtWill++;         //shoot the wrong guy
                                    }
                                    else
                                        JobSeq = 45;
                                }
                            }

                            if (ReturnStuff.WhileButtonDown(51))
                                Sniper_GoProne();
                            else if (SnipMissions.GoProne)
                                Function.Call(Hash.DISPLAY_SNIPER_SCOPE_THIS_FRAME);
                        }
                        else if (JobSeq == 7)
                        {
                            if (SnipMissions.Ufo1.Position.Z > SnipMissions.TargetPed.Position.Z + 20.00f)
                            {
                                SnipMissions.Ufo1.Position = new Vector3(SnipMissions.MySnips.DriveToo.X, SnipMissions.MySnips.DriveToo.Y, SnipMissions.Ufo1.Position.Z - 4.50f);
                                SnipMissions.Ufo1.Rotation = new Vector3(3.00f, 5.00f, SnipMissions.Ufo1.Rotation.Z + 1.5f);
                            }
                            else
                            {
                                JobSeq++;
                                Game.Player.Character.Weapons.Remove(WeaponHash.SniperRifle);
                                iWait4Sec = Game.GameTime + 6000;
                                SnipMissions.Follow2.Position = Vector3.Zero;
                                Script.Wait(750);
                                SnipMissions.Follow1.Position = Vector3.Zero;
                                Script.Wait(750);
                                SnipMissions.TargetPed.Position = Vector3.Zero;
                            }
                        }
                        else if (JobSeq == 8)
                        {
                            if (iWait4Sec < Game.GameTime)
                            {
                                JobSeq++;
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[66];
                            }
                            else
                            {
                                SnipMissions.Ufo1.Position = new Vector3(SnipMissions.MySnips.DriveToo.X, SnipMissions.MySnips.DriveToo.Y, SnipMissions.Ufo1.Position.Z);
                                SnipMissions.Ufo1.Rotation = new Vector3(3.00f, 5.00f, SnipMissions.Ufo1.Rotation.Z + 1.5f);
                            }
                        }
                        else if (JobSeq == 9)
                        {
                            if (SnipMissions.Ufo1.Position.Z < SnipMissions.MySnips.DriveToo.Z)
                            {
                                SnipMissions.Ufo1.Position = new Vector3(SnipMissions.MySnips.DriveToo.X, SnipMissions.MySnips.DriveToo.Y, SnipMissions.Ufo1.Position.Z + 4.5f);
                                SnipMissions.Ufo1.Rotation = new Vector3(3.00f, 5.00f, SnipMissions.Ufo1.Rotation.Z + 1.5f);
                            }
                            else
                                JobSeq = 45;
                        }
                        else if (JobSeq == 10)
                        {
                            ReturnWeaps();
                            if (SnipMissions.GoProne)
                                Game.Player.Character.Task.ClearAllImmediately();
                            EntityBuild.Groupies(false, SnipMissions.TargetPed);
                            Sniper_AddingAwards();
                            MissionEnd(Sniper_Awards(SnipMissions.GetPaid, true));
                        }
                        else if (JobSeq == 45)
                        {
                            ReturnWeaps();
                            if (SnipMissions.GoProne)
                                Game.Player.Character.Task.ClearAllImmediately();
                            EntityBuild.Groupies(false, SnipMissions.TargetPed);
                            GameOverFail(false);
                        }
                    }       //Snipers
                    else if (JobType == 15)
                    {
                        if (JobSeq == 0)
                        {
                            JobSeq++;
                            if (DataStore.MySettings.FastTraveltoStart)
                                EntityBuild.WarptoAnyVeh(MoneyMissions.Truck, Game.Player.Character, 1);

                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[92];
                        }
                        else if (JobSeq == 1)
                        {
                            if (MoneyMissions.Truck.IsDead || MoneyMissions.Buddy.IsDead)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(MoneyMissions.Truck))
                            {
                                JobSeq++;
                                MoneyMissions.Truck.CurrentBlip.Remove();
                                Game.Player.Character.CanBeDraggedOutOfVehicle = true;
                                if (MoneyMissions.Uniform != null)
                                    EntityBuild.PedDresser(Game.Player.Character, MoneyMissions.Uniform); 
                                EntityBuild.AddTarget(new BlipForm(MoneyMissions.Shops.ParkHere.V3, true, 5, 408, DataStore.MyLang.Maptext[58], 5f));
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[93];
                            }
                            else if (ReturnStuff.AmINear(MoneyMissions.Truck.Position, 35F))
                            {
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[94];
                                if (MoneyMissions.WheelCheck)
                                {
                                    EntityBuild.ResetVehPos(MoneyMissions.Truck, MoneyMissions.TruckStart);
                                    MoneyMissions.WheelCheck = false;
                                }
                            }
                            else
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[92];
                        }
                        else if (JobSeq == 2)
                        {
                            if (MoneyMissions.Truck.IsDead || MoneyMissions.Buddy.IsDead)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(MoneyMissions.Truck))
                            {
                                if (MissionData.Target_01 == null)
                                {
                                    MoneyMissions.Truck.CurrentBlip.Remove();
                                    EntityBuild.AddTarget(new BlipForm(MoneyMissions.Shops.ParkHere.V3, true, 5, 408, DataStore.MyLang.Maptext[58], 5f));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[93];
                                }
                                else if (ReturnStuff.AreUNear(MoneyMissions.Shops.ParkHere.V3, MoneyMissions.Truck.Position, 2.50f))
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[95];
                            }
                            else if (ReturnStuff.AreUNear(MoneyMissions.Shops.ParkHere.V3, MoneyMissions.Truck.Position, 2.50f))
                            {
                                JobSeq++;
                                EntityClear.RemoveTargets();
                                EntityBuild.AddTarget(new BlipForm(MoneyMissions.IntheShops[1].V3, true, 5, 408, DataStore.MyLang.Maptext[58]));
                                MoneyMissions.SuitCase = EntityBuild.BuildProp("hei_prop_hei_security_case", MoneyMissions.IntheShops[1].DropZ(-1f), true, false); 
                                MoneyMissions.SpendMyMoney = ReturnStuff.NSPMCoin(0);
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[96];
                            }
                            else
                            {
                                if (MissionData.Target_01 != null)
                                {
                                    EntityClear.RemoveTargets();
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[94];
                                    EntityBuild.VehBlip(new BlipForm(5, DataStore.MyLang.Maptext[1]), MoneyMissions.Truck);
                                }
                                else if (Game.Player.WantedLevel > 0)
                                    Game.Player.WantedLevel = 0;
                            }
                        }
                        else if (JobSeq == 3)
                        {
                            if (MoneyMissions.Truck.IsDead || MoneyMissions.Buddy.IsDead)
                                JobSeq = 45;
                            else if (ReturnStuff.PickupBling(MoneyMissions.SuitCase))
                            {
                                JobSeq++;
                                EntityClear.RemoveTargets();
                                EntityBuild.VehBlip(new BlipForm(3, DataStore.MyLang.Maptext[1]), MoneyMissions.Truck);
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[94];
                            }
                            else if (ReturnStuff.AmINear(MoneyMissions.IntheShops[0].V3, 3f))
                            {
                                if (iWait4Sec < Game.GameTime)
                                {
                                    iWait4Sec = Game.GameTime + 1000;
                                    SearchFor.OpenDoors(MoneyMissions.Shops.PedHere, 14.00f);
                                }
                            }
                        }
                        else if (JobSeq == 4)
                        {
                            if (Game.Player.WantedLevel > 0)
                                Game.Player.WantedLevel = 0;

                            if (MoneyMissions.Truck.IsDead || MoneyMissions.Buddy.IsDead)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(MoneyMissions.Truck))
                            {
                                JobSeq++;
                                if (MoneyMissions.SpendMyMoney > ReturnStuff.NSPMCoin(0))
                                    DataStore.MyAchivments.MoneyMAn_WhileImHere++;      //Buy SomeThing from the shop.
                                MoneyMissions.Truck.CurrentBlip.Remove();
                                EntityBuild.AddTarget(new BlipForm(MoneyMissions.TruckStart.V3, true, 5, 768, DataStore.MyLang.Maptext[59], 5f));
                                MoneyMissions.iSuprise = Game.GameTime + RandomX.RandInt(5000, 10000);
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[97];
                            }
                        }
                        else if (JobSeq == 5)
                        {
                            if (Game.Player.WantedLevel > 0)
                                Game.Player.WantedLevel = 0;

                            if (GetBackInVeh(MoneyMissions.Truck))
                            {
                                if (MoneyMissions.GotYourVan)
                                    MoneyMissions.LostYourVan = true;
                            }

                            if (MoneyMissions.Truck.IsDead || MoneyMissions.Buddy.IsDead)
                                JobSeq = 45;
                            else if (MoneyMissions.iSuprise < Game.GameTime || ReturnStuff.AreUNear(MoneyMissions.TruckStart.V3, MoneyMissions.Truck.Position, 85f))
                            {
                                JobSeq++;
                                MoneyMan_Attacks();
                            }
                            else if (Game.Player.Character.IsInVehicle(MoneyMissions.Truck))
                            {
                                if (MissionData.Target_01 == null)
                                {
                                    MoneyMissions.Truck.CurrentBlip.Remove();
                                    EntityBuild.AddTarget(new BlipForm(MoneyMissions.TruckStart.V3, true, 5, 768, DataStore.MyLang.Maptext[59], 5f));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[97];
                                }
                                else if (ReturnStuff.AreUNear(MoneyMissions.TruckStart.V3, MoneyMissions.Truck.Position, 65f))
                                {
                                    JobSeq++;
                                    EntityBuild.MoveThatCar(MoneyMissions.TruckStart);
                                }
                            }
                            else
                            {
                                if (MissionData.Target_01 != null)
                                {
                                    EntityClear.RemoveTargets();
                                    EntityBuild.VehBlip(new BlipForm(5, DataStore.MyLang.Maptext[1]), MoneyMissions.Truck);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[94];
                                }
                            }
                        }
                        else if (JobSeq == 6)
                        {
                            if (Game.Player.WantedLevel > 0)
                                Game.Player.WantedLevel = 0;

                            if (GetBackInVeh(MoneyMissions.Truck))
                            {
                                if (MoneyMissions.GotYourVan)
                                    MoneyMissions.LostYourVan = true;
                            }

                            if (MoneyMissions.Truck.IsDead)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(MoneyMissions.Truck))
                            {
                                if (MissionData.Target_01 == null)
                                {
                                    MoneyMissions.Truck.CurrentBlip.Remove();
                                    EntityBuild.AddTarget(new BlipForm(MoneyMissions.TruckStart.V3, true, 5, 768, DataStore.MyLang.Maptext[59], 5f));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[97];
                                }
                                else if (ReturnStuff.AreUNear(MoneyMissions.TruckStart.V3, MoneyMissions.Truck.Position, 65f))
                                {
                                    JobSeq++;
                                    EntityBuild.MoveThatCar(MoneyMissions.TruckStart);
                                }
                            }
                            else
                            {
                                if (MissionData.Target_01 != null)
                                {
                                    EntityClear.RemoveTargets();
                                    EntityBuild.VehBlip(new BlipForm(5, DataStore.MyLang.Maptext[1]), MoneyMissions.Truck);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[94];
                                }
                            }

                            if (MoneyMissions.AttackTrack)
                            {
                                if (MissionData.iTracking < Game.GameTime)
                                    MoneyMan_GetJack();
                            }
                            else if (MoneyMissions.AttackAir)
                            {
                                if (MissionData.iTracking < Game.GameTime)
                                    EntityClear.SimpleTracker();
                            }
                        }
                        else if (JobSeq == 7)
                        {
                            if (Game.Player.WantedLevel > 0)
                                Game.Player.WantedLevel = 0;

                            if (GetBackInVeh(MoneyMissions.Truck))
                            {
                                if (MoneyMissions.GotYourVan)
                                    MoneyMissions.LostYourVan = true;
                            }

                            if (MoneyMissions.Truck.IsDead)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(MoneyMissions.Truck))
                            {
                                if (MissionData.Target_01 == null)
                                {
                                    MoneyMissions.Truck.CurrentBlip.Remove();
                                    EntityBuild.AddTarget(new BlipForm(MoneyMissions.TruckStart.V3, true, 5, 768, DataStore.MyLang.Maptext[59], 5f));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[97];
                                }
                                else if (ReturnStuff.AreUNear(MoneyMissions.TruckStart.V3, MoneyMissions.Truck.Position, 2.5f))
                                {
                                    if (Game.Player.Character.IsInVehicle(MoneyMissions.Truck))
                                    {
                                        JobSeq++;
                                        if (MoneyMissions.Uniform != null)
                                            EntityBuild.PedDresser(Game.Player.Character, MoneyMissions.Oufit);
                                        UiDisplay.sSubDisplay = "";
                                        EntityBuild.StopHere(MoneyMissions.Truck);
                                        SearchFor.SlowFastTravel(MoneyMissions.StandHere);
                                        MoneyMissions.Truck.FreezePosition = true;
                                        MoneyMissions.Truck.Position = new Vector3(0.00f, 0.00f, 110.00f);
                                        EntityBuild.FreeSeat(MoneyMissions.Truck, 2, false);
                                        EntityBuild.FreeSeat(MoneyMissions.Truck, 3, false);
                                        EntityBuild.FreeSeat(MoneyMissions.Truck, 4, false);
                                    }
                                }
                            }
                            else
                            {
                                if (MissionData.Target_01 != null)
                                {
                                    EntityClear.RemoveTargets();
                                    EntityBuild.VehBlip(new BlipForm(5, DataStore.MyLang.Maptext[1]), MoneyMissions.Truck);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[94];
                                }
                            }

                            if (MoneyMissions.AttackTrack)
                            {
                                if (MissionData.iTracking < Game.GameTime)
                                    MoneyMan_GetJack();
                            }
                            else if (MoneyMissions.AttackAir)
                            {
                                if (MissionData.iTracking < Game.GameTime)
                                    EntityClear.SimpleTracker();
                            }
                        }
                        else if (JobSeq == 8)
                        {
                            NSBanking.NSCoinInvestments(true, 5, 9, "Gruppe Sechs Shares");
                            MoneyMan_AddingAwards();
                            MissionEnd(MoneyMan_Awards(MoneyMissions.CashPay, true));
                        }
                        else if (JobSeq == 45)
                        {
                            if (MoneyMissions.Uniform != null)
                                EntityBuild.PedDresser(Game.Player.Character, MoneyMissions.Oufit);
                            NSBanking.NSCoinInvestments(false, 6, 10, "Gruppe Sechs Shares");
                            GameOverFail(false);
                        }
                    }       //MoneyMan
                    else if (JobType == 16)
                    {
                        if (LocationX == 1)
                        {
                            if (JobSeq == 0)
                            {
                                JobSeq++;
                                if (DataStore.MySettings.FastTraveltoStart)
                                    EntityBuild.WarptoAnyVeh(BargeMissions.Tuger, Game.Player.Character, 1);

                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[98];
                            }
                            else if (JobSeq == 1)
                            {
                                if (ReturnStuff.AmINear(BargeMissions.Tuger.Position, 45f))
                                {
                                    JobSeq++;
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[99];
                                }
                            }
                            else if (JobSeq == 2)
                            {
                                if (BargeMissions.Tuger.IsDead)
                                    JobSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(BargeMissions.Tuger))
                                {
                                    JobSeq++;
                                    BargeMissions.Tuger.CurrentBlip.Remove();
                                    Function.Call(Hash._SET_VEHICLE_ENGINE_POWER_MULTIPLIER, BargeMissions.Tuger, 100.00f);
                                    EntityBuild.AddTarget(new BlipForm(BargeMissions.BargeMv.Position, false, 5, 68, DataStore.MyLang.Maptext[38]));
                                    UiDisplay.MMDisplay01 = new MarkyMark(MarkerType.UpsideDownCone, new Vector3(BargeMissions.Mark02.Position.X, BargeMissions.Mark02.Position.Y, BargeMissions.Mark02.Position.Z + 2.00f), Vector3.Zero, 0.00f, 1.00f, Color.Beige);
                                    UiDisplay.bMMDisplay01 = true;

                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[100];
                                }
                            }
                            else if (JobSeq == 3)
                            {
                                if (BargeMissions.Tuger.IsDead)
                                    JobSeq = 45;
                                else if (ReturnStuff.AreUNear(BargeMissions.Mark01.Position, BargeMissions.Mark02.Position, 60f))
                                {
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[101];
                                    if (ReturnStuff.AreUNear(BargeMissions.Mark01.Position, BargeMissions.Mark02.Position, 3f))
                                    {
                                        JobSeq++;
                                        EntityClear.RemoveTargets();
                                        UiDisplay.bMMDisplay01 = false;
                                        Function.Call(Hash.SET_BOAT_ANCHOR, BargeMissions.FloatBoat, false);
                                        Water01_BargeTow(BargeMissions.FloatBoat, BargeMissions.Tuger);
                                        EntityBuild.AddTarget(new BlipForm(BargeMissions.PortExit, false, 5, -1, DataStore.MyLang.Maptext[42], 20f));
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[102];
                                    }
                                }
                                else
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[100];
                            }
                            else if (JobSeq == 4)
                            {
                                if (BargeMissions.Tuger.IsDead)
                                    JobSeq = 45;
                                else if (ReturnStuff.AreUNear(BargeMissions.PortExit, BargeMissions.FloatBoat.Position, 25f))
                                {
                                    JobSeq++;
                                    EntityClear.RemoveTargets();
                                    Game.FadeScreenOut(1000);
                                    Script.Wait(1000);
                                    BargeMissions.FloatBoat.Detach();
                                    BargeMissions.Tuger.Position = BargeMissions.EndPos;
                                    BargeMissions.Tuger.Heading = BargeMissions.EndDir;
                                    EntityBuild.GetOutofVeh(Game.Player.Character, 1);
                                    Function.Call(Hash.SET_BOAT_ANCHOR, BargeMissions.Tuger, true);
                                    BargeMissions.Tuger.LockStatus = VehicleLockStatus.LockedForPlayer;
                                    Water01_RentoMob(BargeMissions.Car01, BargeMissions.Car02, BargeMissions.Car03);
                                    iWait4Sec = Game.GameTime + RandomX.RandInt(10000, 15000);
                                    Game.FadeScreenIn(1000);
                                    UiDisplay.sSubDisplay = "";
                                }
                            }
                            else if (JobSeq == 5)
                            {
                                if (Game.GameTime < iWait4Sec)
                                {
                                    JobSeq++;
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[103];
                                    BargeMissions.CargoB = EntityBuild.VehicleSpawn(new VehMods("Cargobob2", 0, true), BargeMissions.BobStart);
                                    BargeMissions.Pilot = EntityBuild.NPCSpawn(new PedFeat("", false, 140, 0, 1, BargeMissions.CargoB, 0, false, 0, ""), ReturnStuff.AlterZHight(BargeMissions.CargoB.Position, -5f), 0f);
                                    Vector3 vpos = ReturnStuff.AlterZHight(BargeMissions.Car02.Position, 5f);
                                    EntityBuild.FlyHeli(BargeMissions.Pilot, vpos, 55.00f, 5.00f);
                                }
                                else if (MissionData.iTracking < Game.GameTime)
                                    Water01_JetSkiTrackin();
                            }
                            else if (JobSeq == 6)
                            {
                                if (Game.Player.WantedLevel > 0)
                                    Game.Player.WantedLevel = 0;

                                if (BargeMissions.Car01.IsDead || BargeMissions.Car02.IsDead || BargeMissions.Car03.IsDead)
                                    JobSeq = 45;
                                else if (BargeMissions.CargoB.IsDead)
                                {
                                    JobSeq = 10;
                                    Game.FadeScreenOut(1000);
                                    Script.Wait(1000);
                                    Water01_HaveACar(BargeMissions.Car01, BargeMissions.Car02, BargeMissions.Car03);
                                }
                                else if (ReturnStuff.AreUNear(BargeMissions.CargoB.Position, BargeMissions.Car02.Position, 45f))
                                {
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[104];
                                    if (ReturnStuff.AreUNear(BargeMissions.CargoB.Position, BargeMissions.Car02.Position, 10f))
                                    {
                                        JobSeq++;
                                        BargeMissions.Car02.Detach();
                                        Function.Call(Hash._0x7BEB0C7A235F6F3B, BargeMissions.CargoB, 0);
                                        Script.Wait(1200);
                                        Vector3 V3Me = Function.Call<Vector3>(Hash._0xCBDB9B923CACC92D, BargeMissions.CargoB);
                                        BargeMissions.Car02.AttachTo(BargeMissions.CargoB, BargeMissions.Car02.Handle, new Vector3(0.0f, 0.0f, -3.0f), new Vector3(0.0f, -15.0f, 0.0f));
                                        EntityBuild.FlyHeli(BargeMissions.Pilot, BargeMissions.FlyMeTo, 120.00f, 5.00f);
                                        iWait4Sec = Game.GameTime + 7000;
                                    }
                                }

                                if (MissionData.iTracking < Game.GameTime)
                                    Water01_JetSkiTrackin();

                                Water01_BargeFloat();
                            }
                            else if (JobSeq == 7)
                            {
                                if (Game.Player.WantedLevel > 0)
                                    Game.Player.WantedLevel = 0;
                                if (iWait4Sec < Game.GameTime)
                                    JobSeq = 45;
                                Water01_BargeFloat();
                            }
                            else if (JobSeq == 10)
                            {
                                int iPay = RandomX.RandInt(10000, 12000);
                                if (BargeMissions.KillCount > DataStore.MyAchivments.Water01_AndThePointWas)
                                    DataStore.MyAchivments.Water01_AndThePointWas = BargeMissions.KillCount;
                                DataStore.MyDatSet.iPegsboatsTest = DataStore.iPegsboats;
                                DataStore.MyDatSet.iGotPegsus = DataStore.iProcessForPegs;
                                NSBanking.NSCoinInvestments(true, 5, 9, "Legendary Motorsport Shares");
                                MissionEnd(Water_Awards(iPay, true));
                            }
                            else if (JobSeq == 45)
                            {
                                NSBanking.NSCoinInvestments(false, 7, 9, "Legendary Motorsport Shares");
                                GameOverFail(false);
                            }
                        }       //Tug Barge
                        else if (LocationX == 2)
                        {
                            if (JobSeq == 0)
                            {
                                JobSeq++;
                                if (DataStore.MySettings.FastTraveltoStart)
                                    SearchFor.SlowFastTravel(World.GetNextPositionOnStreet(MissionData.vFuMiss), 0.00f);
                            }
                            else if (JobSeq == 1)
                            {
                                if (ReturnStuff.AmINear(YachtMissions.VehLoc01.V3, 55f))
                                {
                                    JobSeq++;
                                    EntityClear.RemoveTargets();
                                    YachtMissions.iThisVeh = 5;
                                    YachtMissions.iThisVeh2 = 106;
                                    YachtMissions.YtTrans = EntityBuild.VehicleSpawn(new VehMods("SeaSparrow", 0, 5, false, DataStore.MyLang.Maptext[YachtMissions.iThisVeh], false, ReturnStuff.VehMod(-10, -10, -10, -10, -10, -10, -10, -10, -10, -10, 1, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10), new List<int>(), ReturnStuff.FunPlates()), YachtMissions.VehLoc01);
                                    Function.Call(Hash.SET_VEHICLE_MOD, YachtMissions.YtTrans.Handle, 10, 1, true);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[YachtMissions.iThisVeh2];
                                }
                                else if (ReturnStuff.AmINear(YachtMissions.VehLoc02.V3, 55f))
                                {
                                    JobSeq++;
                                    EntityClear.RemoveTargets();
                                    YachtMissions.iThisVeh = 17;
                                    YachtMissions.iThisVeh2 = 107;
                                    YachtMissions.YtTrans = EntityBuild.VehicleSpawn(new VehMods("Jetmax", 0, 5, false, DataStore.MyLang.Maptext[YachtMissions.iThisVeh]), YachtMissions.VehLoc02);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[YachtMissions.iThisVeh2];
                                }
                                else if (ReturnStuff.AmINear(YachtMissions.VehLoc03.V3, 55f))
                                {
                                    JobSeq++;
                                    EntityClear.RemoveTargets();
                                    YachtMissions.iThisVeh = 23;
                                    YachtMissions.iThisVeh2 = 108;
                                    YachtMissions.YtTrans = EntityBuild.VehicleSpawn(new VehMods("Technical2", 0, 5, false, DataStore.MyLang.Maptext[YachtMissions.iThisVeh], false, true, ReturnStuff.FunPlates()), YachtMissions.VehLoc03);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[YachtMissions.iThisVeh2];
                                }
                            }
                            else if (JobSeq == 2)
                            {
                                if (YachtMissions.YtTrans.IsDead)
                                    JobSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(YachtMissions.YtTrans))
                                {
                                    if (MissionData.Target_01 == null)
                                    {
                                        YachtMissions.YtTrans.CurrentBlip.Remove();
                                        EntityBuild.AddTarget(new BlipForm(YachtMissions.YachtBlip, false, 1, 310, DataStore.MyLang.Maptext[78]));
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[109];
                                    }
                                    else if (ReturnStuff.AmINear(YachtMissions.YachtBlip, 99f))
                                    {
                                        JobSeq++;
                                        EntityClear.RemoveTargets();
                                        Water02_YachtAttack();
                                        iWait4Sec = Game.GameTime + 1000;
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[110];
                                    }
                                }
                                else
                                {
                                    if (MissionData.Target_01 != null)
                                    {
                                        EntityClear.RemoveTargets();
                                        EntityBuild.VehBlip(new BlipForm(5, DataStore.MyLang.Maptext[YachtMissions.iThisVeh]), YachtMissions.YtTrans);
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[YachtMissions.iThisVeh2];
                                    }
                                }
                            }
                            else if (JobSeq == 3)
                            {
                                if (Game.Player.WantedLevel > 0)
                                    Game.Player.WantedLevel = 0;

                                UiDisplay.SideBars[0].Data = "" + MissionData.PedList_01.Count + "/20";

                                if (!UiDisplay.bUiDisplay)
                                    UiDisplay.bUiDisplay = true;

                                if (MissionData.PedList_01.Count > 0)
                                {
                                    if (MissionData.iTracking < Game.GameTime)
                                        EntityClear.SimpleTracker();
                                }
                                else
                                    JobSeq++;
                            }
                            else if (JobSeq == 4)
                            {
                                if (DataStore.MyAssets.OwnaYacht)
                                {
                                    JobSeq++;
                                }
                                else
                                {
                                    Vector3 Vpos = new Vector3(-1848.826f, -1200.298f, 19.14339f);
                                    if (DataStore.OldYacht || !DataStore.MySettings.PreLoadOnline || !File.Exists(DataStore.sNSPMYacht))
                                    {
                                        JobSeq++;
                                        SearchFor.SlowFastTravel(Vpos, 165.84f);
                                        DataStore.AddHeistYacht(false);
                                    }
                                    else
                                    {
                                        JobSeq++;
                                        ControlSelect(10);
                                    }
                                }
                            }
                            else if (JobSeq == 5)
                            {
                                int iPay = 20000;
                                MissionEnd(Water_Awards(iPay, true));
                            }
                            else if (JobSeq == 45)
                            {
                                if (DataStore.OldYacht || !DataStore.MySettings.PreLoadOnline)
                                    DataStore.AddHeistYacht(false);

                                GameOverFail(false);
                            }
                        }  //Defend yacht
                        else if (LocationX == 3)
                        {
                            if (JobSeq == 0)
                            {

                                if (DataStore.MySettings.FastTraveltoStart)
                                    EntityBuild.WarptoAnyVeh(PhishMissions.Boat, Game.Player.Character, 1);
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[111];
                                JobSeq++;
                            }
                            else if (JobSeq == 1)
                            {
                                if (PhishMissions.Boat.IsDead || PhishMissions.BoatHand.IsDead)
                                    JobSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(PhishMissions.Boat))
                                {
                                    JobSeq++;
                                    PhishMissions.Boat.CurrentBlip.Remove();
                                    Function.Call(Hash.SET_BOAT_ANCHOR, PhishMissions.Boat, false);
                                    EntityBuild.NPCSpawn(new PedFeat(ReturnStuff.RandNPC(23), false, 130, 20, 0, null, 1, false, 0, ""), PhishMissions.Fishers[PhishMissions.OnPoint].Phish);
                                    EntityBuild.AddTarget(new BlipForm(PhishMissions.Fishers[PhishMissions.OnPoint].Spot, false, 5, 45f, new BlipForm(PhishMissions.Fishers[PhishMissions.OnPoint].Spot, false, 5, 456, DataStore.MyLang.Maptext[26])));
                                    UiDisplay.SideBars[0].Percent = 0.01f;
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[114];
                                }
                                else if (ReturnStuff.AmINear(PhishMissions.Boat.Position, 25f))
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[112];
                                else
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[111];
                            }
                            else if (JobSeq == 2)
                            {
                                Water03_ToeOutofWater();

                                if (PhishMissions.Boat.IsDead || PhishMissions.BoatHand.IsDead)
                                    JobSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(PhishMissions.Boat))
                                {
                                    if (MissionData.Target_01 == null)
                                    {
                                        PhishMissions.Boat.CurrentBlip.Remove();
                                        EntityBuild.AddTarget(new BlipForm(PhishMissions.Fishers[PhishMissions.OnPoint].Spot, false, 5, 45f, new BlipForm(PhishMissions.Fishers[PhishMissions.OnPoint].Spot, false, 5, 456, DataStore.MyLang.Maptext[26])));
                                    }
                                    else if (ReturnStuff.AreUNear(PhishMissions.Boat.Position, PhishMissions.Fishers[PhishMissions.OnPoint].Spot, 45f))
                                    {
                                        if (!UiDisplay.bUiDisplay)
                                            UiDisplay.bUiDisplay = true;

                                        float fdist = World.GetDistance(PhishMissions.Boat.Position, PhishMissions.Fishers[PhishMissions.OnPoint].Spot) / 45.00f;
                                        fdist = 1.00f - fdist;
                                        if (fdist < 0.01f)
                                            fdist = 0.01f;
                                        UiDisplay.SideBars[0].Percent = fdist;

                                        if (fdist > 0.90f)
                                        {
                                            if (PhishMissions.OnTarget)
                                            {
                                                int iTotal = PhishMissions.OnTime - Game.GameTime;
                                                UiDisplay.SideBars[1].Data = ReturnStuff.ShowComs(iTotal, false, false);
                                                if (PhishMissions.OnTime < Game.GameTime)
                                                {
                                                    PhishMissions.OnPoint++;
                                                    if (PhishMissions.OnPoint < PhishMissions.Fishers.Count)
                                                    {
                                                        EntityClear.RemoveTargets();
                                                        EntityBuild.NPCSpawn(new PedFeat(ReturnStuff.RandNPC(23), false, 130, 20, 0, null, 1, false, 0, ""), PhishMissions.Fishers[PhishMissions.OnPoint].Phish);
                                                        EntityBuild.AddTarget(new BlipForm(PhishMissions.Fishers[PhishMissions.OnPoint].Spot, false, 5, 45f, new BlipForm(PhishMissions.Fishers[PhishMissions.OnPoint].Spot, false, 5, 456, DataStore.MyLang.Maptext[26])));
                                                        UiDisplay.SideBars[0].Percent = 0.01f;
                                                        UiDisplay.SideBars[1].Data = ReturnStuff.ShowComs(5000, false, false);
                                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[114];
                                                        PhishMissions.OnTarget = false;
                                                        UiDisplay.bUiDisplay = false;
                                                    }
                                                    else
                                                    {
                                                        JobSeq++;
                                                        EntityClear.RemoveTargets();
                                                        PhishMissions.OnTarget = false;
                                                        EntityBuild.AddTarget(new BlipForm(PhishMissions.VEnd, false, 5, 371, DataStore.MyLang.Maptext[60], 5f));
                                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[115];
                                                        UiDisplay.bUiDisplay = false;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                PhishMissions.OnTime = Game.GameTime + 5000;
                                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[113];
                                                PhishMissions.OnTarget = true;
                                            }
                                        }
                                        else
                                        {
                                            if (PhishMissions.OnTarget)
                                            {
                                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[114];
                                                PhishMissions.OnTarget = false;
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    if (MissionData.Target_01 != null)
                                    {
                                        EntityClear.RemoveTargets();
                                        EntityBuild.VehBlip(new BlipForm(5, DataStore.MyLang.Maptext[17]), PhishMissions.Boat);
                                    }
                                } 
                            }
                            else if (JobSeq == 3)
                            {
                                Water03_ToeOutofWater();

                                if (PhishMissions.Boat.IsDead || PhishMissions.BoatHand.IsDead)
                                    JobSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(PhishMissions.Boat))
                                {
                                    if (MissionData.Target_01 == null)
                                    {
                                        PhishMissions.Boat.CurrentBlip.Remove();
                                        EntityBuild.AddTarget(new BlipForm(PhishMissions.VEnd, false, 5, 371, DataStore.MyLang.Maptext[60], 5f));
                                    }
                                    else if (ReturnStuff.AreUNear(PhishMissions.VEnd, PhishMissions.Boat.Position, 3.5f))
                                    {
                                        JobSeq = 10;
                                        EntityClear.RemoveTargets();
                                        EntityBuild.StopHere(PhishMissions.Boat);
                                        Vector3 Vpos = new Vector3(-2081.897f, 2609.123f, 3.083975f);
                                        SearchFor.SlowFastTravel(Vpos, 89.72623f);
                                        EntityBuild.FreeSeat(PhishMissions.Boat, 2, false);
                                        EntityBuild.FreeSeat(PhishMissions.Boat, 3, false);
                                        EntityBuild.FreeSeat(PhishMissions.Boat, 4, false);
                                        NSBanking.NSCoinInvestments(true, 7, 12, "White Water Activity Center Shares");
                                        PhishMissions.Boat.Position = Vector3.Zero;
                                        Vector3 Ding01 = new Vector3(-2091.959f, 2613.7197f, 0.2088f);
                                        Vector3 Ding02 = new Vector3(-2096.607f, 2612.9768f, 0.2088f);
                                        Vector3 Ding03 = new Vector3(-2102.579f, 2612.5708f, 0.2088f);
                                        Vector3 Ding04 = new Vector3(-2107.394f, 2611.4148f, 0.2088f);
                                        EntityBuild.VehicleSpawn(new VehMods("DINGHY", 15, -1, false, "", false, false, 135, 12, -10, ""), Ding01, 15.13f);
                                        EntityBuild.VehicleSpawn(new VehMods("DINGHY2", 15, -1, false, "", false, false, 89, 12, -10, ""), Ding02, 15.13f);
                                        EntityBuild.VehicleSpawn(new VehMods("DINGHY3", 15, -1, false, "", false, false, 70, 12, -10, ""), Ding03, 15.13f);
                                        EntityBuild.VehicleSpawn(new VehMods("DINGHY4", 15, -1, false, "", false, false, 55, 12, -10, ""), Ding04, 15.13f);
                                    }
                                }
                                else
                                {
                                    if (MissionData.Target_01 != null)
                                    {
                                        EntityClear.RemoveTargets();
                                        EntityBuild.VehBlip(new BlipForm(5, DataStore.MyLang.Maptext[17]), PhishMissions.Boat);
                                    }
                                }
                            }
                            else if (JobSeq == 10)
                            {
                                for (int i = 0; i < MissionData.PedList_01.Count; i++)
                                {
                                    if (MissionData.PedList_01[i].IsInWater)
                                        DataStore.MyAchivments.Water03_PhishinTrip++;
                                }
                                int iPay = RandomX.RandInt(5000, 9000);
                                DataStore.MyDatSet.iPegsboatsTest = DataStore.iPegsboats;
                                DataStore.MyDatSet.iGotPegsus = DataStore.iProcessForPegs;
                                MissionEnd(Water_Awards(iPay,true));
                            }
                            else if (JobSeq == 45)
                            {
                                NSBanking.NSCoinInvestments(false, 9, 14, "White Water Activity Center Shares");
                                GameOverFail(false);
                            }
                        }  //Phishing
                        else if (LocationX == 4)
                        {
                            if (JobSeq == 0)
                            {
                                JobSeq++;
                                if (DataStore.MySettings.FastTraveltoStart)
                                    EntityBuild.WarptoAnyVeh(MissionData.MishVeh, Game.Player.Character, 1);
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[116];
                            }
                            else if (JobSeq == 1)
                            {
                                if (MissionData.MishVeh.IsDead)
                                    JobSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(MissionData.MishVeh))
                                {
                                    JobSeq++;
                                    MissionData.MishVeh.CurrentBlip.Remove();
                                    Water04_AddTheRubbish();
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[118];
                                    UiDisplay.bUiDisplay = true;
                                    iWait4Sec = Game.GameTime + 140000;
                                }
                                else if (ReturnStuff.AmINear(MissionData.MishVeh.Position, 55f))
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[117];
                                else
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[116];
                            }
                            else if (JobSeq == 2)
                            {
                                if (MissionData.MishVeh.IsDead)
                                    JobSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(MissionData.MishVeh))
                                {
                                    if (MissionData.MishVeh.CurrentBlip.Exists())
                                        MissionData.MishVeh.CurrentBlip.Remove();
                                    else if (MissionData.PropList_01.Count > 0)
                                    {
                                        if (iWait4Sec > Game.GameTime)
                                        {
                                            UiDisplay.SideBars[1].Data = ReturnStuff.ShowComs(iWait4Sec - Game.GameTime, false, false);
                                            Water04_TakeOutTrash();
                                        }
                                        else
                                        {
                                            JobSeq++;
                                        }
                                    }
                                    else
                                    {
                                        JobSeq++;
                                    }
                                }
                                else
                                {
                                    if (!MissionData.MishVeh.CurrentBlip.Exists())
                                        EntityBuild.VehBlip(new BlipForm(5, DataStore.MyLang.Maptext[18]), MissionData.MishVeh);
                                }
                            }
                            else if (JobSeq == 3)
                            {
                                int iPay = RandomX.RandInt(5000, 9000);
                                int trash = 50 - MissionData.PropList_01.Count;
                                if (trash == 50)
                                    iPay *= 2;
                                if (DataStore.MyAchivments.Water04_SingleUsePlastics < trash)
                                    DataStore.MyAchivments.Water04_SingleUsePlastics = trash;
                                DataStore.MyDatSet.iPegsimortasTest = DataStore.iPegsimortas;
                                DataStore.MyDatSet.iGotPegsus = DataStore.iProcessForPegs;
                                NSBanking.NSCoinInvestments(true, 9, 21, "DockTease Shares");
                                Water04_RemoveRubbish();
                                MissionEnd(Water_Awards(iPay, true));
                            }
                            else if (JobSeq == 45)
                            {
                                GameOverFail(false);
                            }
                        }  //Rubish collection
                        else if (LocationX == 5)
                        {
                            if (JobSeq == 0)
                            {
                                JobSeq++;
                                if (DataStore.MySettings.FastTraveltoStart)
                                    SearchFor.SlowFastTravel(MissionData.vFuMiss, 0.00f);
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[119];
                            }
                            else if (JobSeq == 1)
                            {
                                if (ReturnStuff.AmINear(BoatDelMissions.VStart, 55f))
                                {
                                    JobSeq++;
                                    EntityClear.RemoveTargets();
                                    Water05_BlipTheBoats();
                                    MissionData.MishVeh.FreezePosition = false;
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[120];
                                }
                            }
                            else if (JobSeq == 2)
                            {
                                if (iWait4Sec < Game.GameTime)
                                {
                                    iWait4Sec = Game.GameTime + 1000;
                                    Water05_InYourBoat();
                                }
                            }
                            else if (JobSeq == 3)
                            {
                                if (BoatDelMissions.YourBoat.IsDead)
                                    JobSeq = 45;
                                else if (ReturnStuff.AreUNear(BoatDelMissions.Dock.ParkHere.V3, BoatDelMissions.YourBoat.Position, 5f))
                                {
                                    JobSeq++;
                                    if (!Game.Player.Character.IsInVehicle(BoatDelMissions.YourBoat))
                                    {
                                        DataStore.MyAchivments.Water05_DryDocking++;
                                        Function.Call(Hash.DETACH_VEHICLE_FROM_ANY_CARGOBOB, BoatDelMissions.YourBoat.Handle);
                                    }
                                    else
                                    {
                                        EntityBuild.StopHere(BoatDelMissions.YourBoat);
                                        SearchFor.SlowFastTravel(BoatDelMissions.Dock.PedHere);
                                        EntityBuild.FreeSeat(BoatDelMissions.YourBoat, 2, false);
                                        EntityBuild.FreeSeat(BoatDelMissions.YourBoat, 3, false);
                                        EntityBuild.FreeSeat(BoatDelMissions.YourBoat, 4, false);
                                    }
                                    Function.Call(Hash.SET_BOAT_ANCHOR, BoatDelMissions.YourBoat, true);
                                }
                                else
                                {
                                    if (Game.Player.Character.IsInVehicle(BoatDelMissions.YourBoat) || ReturnStuff.Water05_CargoBobed(BoatDelMissions.YourBoat))
                                    {
                                        if (MissionData.Target_01 == null)
                                        {
                                            BoatDelMissions.YourBoat.CurrentBlip.Remove();
                                            EntityBuild.AddTarget(new BlipForm(BoatDelMissions.Dock.ParkHere.V3, true, 5, 356, DataStore.MyLang.Maptext[0], 5f));
                                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[121];
                                        }
                                    }
                                    else
                                    {
                                        if (MissionData.Target_01 != null)
                                        {
                                            EntityClear.RemoveTargets();
                                            EntityBuild.VehBlip(new BlipForm(3, DataStore.MyLang.Maptext[0]), BoatDelMissions.YourBoat);
                                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[112];
                                        }
                                    }
                                }
                            }
                            else if (JobSeq == 4)
                            {
                                int iChaching = (BoatDelMissions.iTimes - Game.GameTime) / 10 * -1;
                                DataStore.MyDatSet.iPegsboatsTest = DataStore.iPegsboats;
                                DataStore.MyDatSet.iGotPegsus = DataStore.iProcessForPegs;
                                NSBanking.NSCoinInvestments(true, 9, 14, "DockTease Shares");
                                MissionEnd(Water_Awards(iChaching,true));
                            }
                            else if (JobSeq == 45)
                            {
                                NSBanking.NSCoinInvestments(false, 1, 4, "DockTease Shares");
                                GameOverFail(false);
                            }
                        }  //Boat delivery
                        else
                        {
                            if (Game.Player.WantedLevel > 0)
                                Game.Player.WantedLevel = 0;
                            if (JobSeq == 0)
                            {
                                JobSeq++;
                                if (DataStore.MySettings.FastTraveltoStart)
                                    EntityBuild.WarptoAnyVeh(BogSubMission.SubVeh, Game.Player.Character, 1);
                                BogSubMission.TimeTaken = Game.GameTime;
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[122];
                                World.TransitionToWeather(Weather.Clear, 1.00f);
                                Function.Call(Hash._0xC54A08C85AE4D410, 1.50f);
                            }
                            else if (JobSeq == 1)
                            {
                                if (BogSubMission.SubVeh.IsDead)
                                    JobSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(BogSubMission.SubVeh))
                                {
                                    JobSeq++;
                                    BogSubMission.SubVeh.CurrentBlip.Remove();
                                    EntityBuild.AddTarget(new BlipForm(BogSubMission.SubPlace[0], true, 5, 308, DataStore.MyLang.Maptext[42]));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[123];
                                }
                                else if (ReturnStuff.AmINear(BogSubMission.SubVeh.Position, 35f))
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[124];
                                else
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[122];
                            }
                            else if (JobSeq == 2)
                            {
                                if (BogSubMission.SubVeh.IsDead)
                                    JobSeq = 45;
                                else if (ReturnStuff.AmINear(BogSubMission.SubPlace[0], 15f) || BogSubMission.SubVeh.IsInWater)
                                {
                                    JobSeq++;
                                    EntityClear.RemoveTargets();
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[125];
                                    UiDisplay.ControlerUI(DataStore.MyLang.Context[21], 1);
                                    EntityBuild.AddTarget(new BlipForm(BogSubMission.SubPlace[4], true, 5, 760, DataStore.MyLang.Maptext[13]));
                                }
                            }
                            else if (JobSeq == 3)
                            {
                                if (BogSubMission.SubVeh.IsDead)
                                    JobSeq = 45;
                                else if (ReturnStuff.AmINear(BogSubMission.SubPlace[4], 95.00f))
                                {
                                    JobSeq++;
                                    Water06_SubCam();
                                    EntityClear.RemoveTargets();
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[126];
                                }
                            }
                            else if (JobSeq == 4)
                            {
                                UiDisplay.ControlerUI(DataStore.MyLang.Context[22], 1);
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[127];
                                if (ReturnStuff.AmINear(BogSubMission.Target.Position, 25f) && Game.Player.Character.Position.Z < BogSubMission.Target.Position.Z + 1.00f)
                                {
                                    if (BogSubMission.Target.IsDead)
                                    {
                                        SearchFor.SlowFastTravel(BogSubMission.SubPlace[3], 0.00f);
                                        JobSeq = 45;
                                    }
                                    else if (Game.Player.IsTargetting(BogSubMission.Target))
                                    {
                                        if (BogSubMission.iTarget < Game.GameTime)
                                        {
                                            JobSeq++;
                                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[126];
                                            EntityBuild.NPCSpawn(new PedFeat("mp_m_bogdangoon", false, 180, 23, 0, null, 8, true, 1, ""), MissionData.SubStandard[3]);//offence
                                            EntityBuild.AddTarget(new BlipForm(BogSubMission.SubPlace[1], false, 5, 606, DataStore.MyLang.Maptext[42], 1f));
                                            BogSubMission.Target.CurrentBlip.Remove();
                                        }
                                    }
                                    else
                                        BogSubMission.iTarget = Game.GameTime + 4000;
                                }
                                else
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[126];

                                if (MissionData.iTracking < Game.GameTime)
                                    EntityClear.SimpleTracker();
                            }
                            else if (JobSeq == 5)
                            {
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[126];
                                if (ReturnStuff.AmINear(BogSubMission.SubPlace[1], 1.5f) && Game.Player.Character.Position.Z > BogSubMission.SubPlace[1].Z)
                                {
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[129];
                                    if (BogSubMission.AddCliff)
                                    {
                                        if (iWait4Sec < Game.GameTime)
                                        {
                                            JobSeq++;
                                            EntityClear.RemoveTargets();
                                            EntityBuild.ForceAnim(Game.Player.Character, "anim@gangops@submarine@controlroom@commandconsole@", "intro", BogSubMission.SubPlace[1], new Vector3(0.00f, 0.00f, 271.2907f));
                                            Script.Wait(2500);
                                            Game.Player.Character.Task.ClearAllImmediately();
                                            Vector3 Posy = new Vector3(513.6042f, 4836.958f, -62.6013f);
                                            Vector3 Rota = new Vector3(0.00f, 90.00f, 180.00f);
                                            EntityBuild.BuildProp("hei_prop_hst_usb_drive", Posy, Rota, true, false);
                                            BogSubMission.BogDan = EntityBuild.NPCSpawn(new PedFeat("csb_bogdan", false, 180, 23, 0, null, 8, true, 1, DataStore.MyLang.Maptext[115]), MissionData.SubStandard[4]);//offence
                                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[130];
                                        }
                                    }
                                    else
                                    {
                                        iWait4Sec = Game.GameTime + 2000;
                                        BogSubMission.AddCliff = true;
                                    }
                                }

                                if (MissionData.PedList_01.Count > 0)
                                {
                                    if (MissionData.iTracking < Game.GameTime)
                                        EntityClear.SimpleTracker();
                                }
                            }
                            else if (JobSeq == 6)
                            {
                                if (BogSubMission.BogDan.IsDead)
                                {
                                    JobSeq++;
                                    EntityClear.RemoveTargets();
                                    EntityBuild.AddTarget(new BlipForm(BogSubMission.SubPlace[2], false, 5, 515, DataStore.MyLang.Maptext[42], 1f));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[131];
                                }
                                else if (MissionData.PedList_01.Count > 0)
                                {
                                    if (MissionData.iTracking < Game.GameTime)
                                        EntityClear.SimpleTracker();
                                }
                            }
                            else if (JobSeq == 7)
                            {
                                if (ReturnStuff.AmINear(BogSubMission.SubPlace[2], 1.5f))
                                {
                                    SearchFor.SlowFastTravel(BogSubMission.SubPlace[3], 308.3964f);
                                    BogSubMission.TimeTaken -= Game.GameTime;
                                    BogSubMission.TimeTaken *= -1;
                                    int iChaching = 500000;
                                    if (DataStore.MyAchivments.Water06_SubCub == 0)
                                        DataStore.MyAchivments.Water06_SubCub = BogSubMission.TimeTaken;
                                    else if (BogSubMission.TimeTaken < DataStore.MyAchivments.Water06_SubCub)
                                        DataStore.MyAchivments.Water06_SubCub = BogSubMission.TimeTaken;

                                    if (BogSubMission.TimeTaken < 900000)
                                        iChaching += 50000;
                                    Function.Call(Hash._0xC54A08C85AE4D410, 0.00f);
                                    DataStore.MyDatSet.iPegsboatsTest = DataStore.iPegsboats;
                                    DataStore.MyDatSet.iGotPegsus = DataStore.iProcessForPegs;
                                    NSBanking.NSCoinInvestments(false, 15, 21, "Merryweather Security");
                                    MissionEnd(Water_Awards(iChaching, true));
                                }
                            }
                            else if (JobSeq == 45)
                            {
                                Function.Call(Hash._0xC54A08C85AE4D410, 0.00f);
                                GameOverFail(false);
                            }
                        }                       //Sub fun.
                    }       //Watermess
                    else if (JobType == 17)
                    {
                        if (JobSeq == 0)
                        {
                            if (ImpExpMissions.FadeIn)
                                Game.FadeScreenIn(1000);

                            EntityClear.CleanMultiPed(false, true);

                            if (ImpExpMissions.NoCars < 3)
                            {
                                JobSeq++;
                                iWait4Sec = Game.GameTime + RandomX.RandInt(15000, 20000);
                                ImpExpMissions.Distance = (float)RandomX.RandInt(500, 1000);
                                ImpExpMissions.FromHere = Game.Player.Character.Position;
                                UiDisplay.SideBars[0].Scale = true;
                                UiDisplay.SideBars[0].Name = DataStore.MyLang.Othertext[18];
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[132];
                                UiDisplay.bUiDisplay = true;
                            }
                            else
                                JobSeq = 10;
                        }
                        else if (JobSeq == 1)
                        {
                            if (iWait4Sec < Game.GameTime)
                            {
                                if (ReturnStuff.AmIFar(ImpExpMissions.FromHere, ImpExpMissions.Distance) && ReturnStuff.AmINear(World.GetNextPositionOnStreet(Game.Player.Character.Position), 95f))
                                {
                                    JobSeq++;
                                    UiDisplay.bUiDisplay = false;
                                    UiDisplay.sSubDisplay = "";
                                    ImportsExpo_AddVeh();
                                }
                            }
                            float fdist = World.GetDistance(Game.Player.Character.Position, ImpExpMissions.FromHere) / ImpExpMissions.Distance;
                            if (fdist > 1.00f)
                                fdist = 1.00f;
                            UiDisplay.SideBars[0].Percent = fdist;
                        }
                        else if (JobSeq == 2)
                        {
                            if (MissionData.MishVeh != null)
                            {
                                JobSeq++;
                                ImpExpMissions.VehX = MissionData.MishVeh;
                                MissionData.MishVeh = null;
                                ImpExpMissions.MoveSub = true;
                                ImpExpMissions.VehCash = ImpExpMissions.PayOut[ImpExpMissions.NoCars];
                                UiDisplay.SideBars[0].Scale = false;
                                UiDisplay.SideBars[0].Name = DataStore.MyLang.Othertext[0];
                                CashNCrash(ImpExpMissions.VehX, ImpExpMissions.VehCash);
                            }
                        }
                        else if (JobSeq == 3)
                        {
                            if (ImpExpMissions.VehCash > 0)
                                ImpExpMissions.VehCash = ReturnStuff.MultiDamage(true, false, 0);

                            if (ImpExpMissions.VehX.IsDead)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle())
                            {
                                if (Game.Player.Character.IsInVehicle(ImpExpMissions.VehX) || Function.Call<bool>(Hash.IS_VEHICLE_ATTACHED_TO_CARGOBOB, Game.Player.Character.CurrentVehicle.Handle, ImpExpMissions.VehX.Handle))
                                {
                                    if (MissionData.Target_01 == null)
                                    {
                                        ImpExpMissions.VehX.CurrentBlip.Remove();
                                        EntityBuild.AddTarget(new BlipForm(ImpExpMissions.Destination, true, 5, 794, DataStore.MyLang.Maptext[38], 10f, -1f));
                                        UiDisplay.bMMDisplay01 = false;
                                        UiDisplay.bUiDisplay = true;
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[134];
                                        MissionData.iTracking = Game.GameTime + RandomX.RandInt(7000, 14000);
                                    }
                                    else if (ReturnStuff.AreUNear(ImpExpMissions.VehX.Position, ImpExpMissions.Destination, 90f))
                                    {
                                        if (ImpExpMissions.MoveSub)
                                        {
                                            ImportsExpo_MoveYourBoat();
                                            ImpExpMissions.MoveSub = false;
                                        }
                                        else if (ReturnStuff.AreUNear(ImpExpMissions.VehX.Position, ImpExpMissions.Destination, 10f))
                                        {
                                            if (ImpExpMissions.VehX.IsStopped)
                                            {
                                                JobSeq = 0;
                                                EntityClear.RemoveTargets();
                                                UiDisplay.sSubDisplay = "";
                                                UiDisplay.bUiDisplay = false;
                                                if (ImpExpMissions.Driver != null) 
                                                {
                                                    if (ImpExpMissions.Driver.IsDead)
                                                        ImpExpMissions.Murder = true;
                                                }
                                                if (ImpExpMissions.VehCash == ImpExpMissions.PayOut[ImpExpMissions.NoCars])
                                                    ImpExpMissions.CleanRun = true;
                                                ImpExpMissions.Payments += ImpExpMissions.VehCash;
                                                ImpExpMissions.NoCars++;
                                                ImpExpMissions.VehX.FreezePosition = true;
                                                Water01_BargeCars(ImpExpMissions.VehX, ImpExpMissions.Bargie, ImpExpMissions.NoCars);
                                                if (Game.Player.Character.IsInVehicle(ImpExpMissions.VehX))
                                                {
                                                    Game.FadeScreenOut(1000);
                                                    EntityBuild.GetOutofVeh(Game.Player.Character, 0);
                                                    Script.Wait(1000);
                                                    SearchFor.SlowFastTravel(ImpExpMissions.CarBarge02[0]);
                                                    Vehicle Vtick = EntityBuild.VehicleSpawn(new VehMods("KURUMA2", 48, false, true, ReturnStuff.FunPlates()), ImpExpMissions.CarBarge02[1]);
                                                    MissionData.VehicleList_01.Remove(Vtick);
                                                    ImpExpMissions.FadeIn = true;
                                                    Vtick.MarkAsNoLongerNeeded();
                                                }
                                                else
                                                {
                                                    DataStore.MyAchivments.ImportExport_AboveAndBeond++;
                                                    Script.Wait(1000);
                                                }
                                            }
                                        }
                                    }
                                    else if (MissionData.iTracking < Game.GameTime)
                                        ImportsExpo_Gangz();
                                }
                                else
                                {
                                    if (!UiDisplay.bMMDisplay01)
                                    {
                                        UiDisplay.MMDisplay01 = new MarkyMark(ImpExpMissions.VehX, 1.95f, Color.CadetBlue);
                                        UiDisplay.bMMDisplay01 = true;
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[133];
                                    }
                                    else
                                    {
                                        UiDisplay.MMDisplay01.MarkPos = new Vector3(ImpExpMissions.VehX.Position.X, ImpExpMissions.VehX.Position.Y, ImpExpMissions.VehX.Position.Z + 2.00f);
                                        UiDisplay.MMDisplay01.MarkRot = new Vector3(0.00f, 180.00f, ImpExpMissions.VehX.Heading);
                                    }

                                    if (MissionData.Target_01 != null)
                                    {
                                        EntityClear.RemoveTargets();
                                        EntityBuild.VehBlip(new BlipForm(5, DataStore.MyLang.Maptext[3], false), ImpExpMissions.VehX);
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[134];
                                        UiDisplay.bMMDisplay01 = true;
                                    }
                                }
                            }
                            else
                            {
                                if (!UiDisplay.bMMDisplay01)
                                {
                                    UiDisplay.MMDisplay01 = new MarkyMark(ImpExpMissions.VehX, 1.95f, Color.CadetBlue);
                                    UiDisplay.bMMDisplay01 = true;
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[133];
                                }
                                else
                                {
                                    UiDisplay.MMDisplay01.MarkPos = new Vector3(ImpExpMissions.VehX.Position.X, ImpExpMissions.VehX.Position.Y, ImpExpMissions.VehX.Position.Z + 2.00f);
                                    UiDisplay.MMDisplay01.MarkRot = new Vector3(0.00f, 180.00f, ImpExpMissions.VehX.Heading);
                                }

                                if (MissionData.Target_01 != null)
                                {
                                    EntityClear.RemoveTargets();
                                    EntityBuild.VehBlip(new BlipForm(5, DataStore.MyLang.Maptext[3], false), ImpExpMissions.VehX);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[134];
                                    UiDisplay.bMMDisplay01 = true;
                                }
                            }
                        }
                        else if (JobSeq == 10)
                        {
                            ImportsExpo_GotCArs();
                            NSBanking.NSCoinInvestments(false, 2, 5, "Augury Insurance Shares");
                            ImportsExpo_AddingAwards();
                            MissionEnd(ImportsExpo_Awards(ImpExpMissions.Payments, true));
                        }
                        else if (JobSeq == 45)
                        {
                            GameOverFail(false);
                        }
                    }       //ImpExp
                    else if (JobType == 18)
                    {
                        if (JobSeq == 0)
                        {
                            JobSeq++;
                            if (DataStore.MySettings.FastTraveltoStart)
                                SearchFor.SlowFastTravel(DebtMissions.MyFlat.PedHere);
                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[137];
                        }
                        else if (JobSeq == 1)
                        {
                            if (ReturnStuff.AmINear(DebtMissions.MyFlat.PedHere.V3, 1.50f) && !Game.Player.Character.IsInVehicle())
                            {
                                JobSeq++;
                                EntityClear.RemoveTargets();
                                DebtMissions.TheCase = EntityBuild.BuildProp("hei_prop_hei_security_case", DebtMissions.Foes[DebtMissions.Foes.Count - 1].DropZ(-1f), true, false);
                                EntityBuild.AddTarget(new BlipForm(DebtMissions.Foes[DebtMissions.Foes.Count - 1].V3, false, 5, 408, DataStore.MyLang.Maptext[63]));
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[138];
                                LoadInteriorSpace(DebtMissions.MyFlat.PedNum, DebtMissions.Foes[0], 1, true);
                                Script.Wait(1000);
                                DebtCollect_LoadHood(DebtMissions.MyFlat.PedNum);
                                SearchFor.SlowFastTravel(DebtMissions.Foes[0]);
                            }
                        }
                        else if (JobSeq == 2)
                        {
                            if (ReturnStuff.PickupBling(DebtMissions.TheCase))
                            {
                                JobSeq++;
                                EntityClear.RemoveTargets();
                                EntityBuild.AddTarget(new BlipForm(DebtMissions.Foes[0].V3, false, 5, 515, DataStore.MyLang.Maptext[64], 1f, -1f));
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[139];
                            }

                            if (MissionData.PedList_01.Count > 0)
                            {
                                if (MissionData.iTracking < Game.GameTime)
                                    EntityClear.SimpleTracker();
                            }
                        }
                        else if (JobSeq == 3)
                        {
                            if (ReturnStuff.AmINear(DebtMissions.Foes[0].V3, 1.5f))
                            {
                                JobSeq++;
                                EntityClear.RemoveTargets();
                                SearchFor.SlowFastTravel(DebtMissions.MyFlat.PedHere);
                                MissionData.vFuMiss = DebtMissions.MyBank.ParkHere.V3;
                                EntityBuild.AddTarget(new BlipForm(DebtMissions.Banks[0].V3, true, 5, 108, DataStore.MyLang.Maptext[40], 1f, -1f));
                                EntityClear.CleanPedBlips();
                            }
                            else
                            {
                                if (MissionData.PedList_01.Count > 0)
                                {
                                    if (MissionData.iTracking < Game.GameTime)
                                        EntityClear.SimpleTracker();
                                }
                            }
                        }
                        else if (JobSeq == 4)
                        {
                            if (DebtMissions.OpenDoors)
                            {
                                if (ReturnStuff.AmINear(DebtMissions.Banks[0].V3, 3f) && Game.Player.Character.IsOnFoot)
                                {
                                    EntityClear.RemoveTargets();
                                    DebtMissions.OpenDoors = false;
                                    Script.Wait(1000);
                                    SearchFor.OpenDoors(Game.Player.Character.Position, 14.00f);
                                    EntityBuild.AddTarget(new BlipForm(DebtMissions.Banks[1].V3, true, 5, 108, DataStore.MyLang.Maptext[40], 1f, -1f));
                                }
                            }
                            else if (ReturnStuff.AmINear(DebtMissions.Banks[1].V3, 1.4f) && Game.Player.Character.IsOnFoot && Game.Player.Character.Position.Z > DebtMissions.Banks[0].Z - 0.50f)
                            {
                                JobSeq++;
                                EntityClear.RemoveTargets();
                                UiDisplay.sSubDisplay = "";
                                iWait4Sec = Game.GameTime + 2000;
                                Game.Player.Character.Task.PlayAnimation("anim@mp_fireworks", "place_firework_3_box", 8.00f, 3000, true, 1.00f);

                                for (int i = 0; i < MissionData.iCoronaList.Count; i++)
                                    EntityLog.CleanUp(MissionData.iCoronaList[i], -1, -1);
                                MissionData.iCoronaList.Clear();
                            }
                        }
                        else if (JobSeq == 5)
                        {
                            if (iWait4Sec < Game.GameTime)
                            {
                                JobSeq = 10;
                                EntityBuild.BuildProp("hei_prop_hei_security_case", new Vector4(DebtMissions.Banks[1].X, DebtMissions.Banks[1].Y, DebtMissions.Banks[1].Z - 1f, DebtMissions.Banks[1].R), true, false);
                            }
                        }
                        else if (JobSeq == 10)
                        {
                            NSBanking.NSCoinInvestments(true, 12, 16, "Maze Bank Shares");
                            DebtCollect_AddAwards();
                            MissionEnd(DebtCollect_Awards(DebtMissions.YourFee, true));
                        }
                        else if (JobSeq == 45)
                        {
                            NSBanking.NSCoinInvestments(false, 12, 16, "Maze Bank Shares");
                            GameOverFail(false);
                        }
                    }       //DebtCollect    
                    else if (JobType == 19)
                    {
                        if (JobSeq == 0)
                        {
                            if (DataStore.MySettings.FastTraveltoStart)
                                SearchFor.SlowFastTravel(BikerMissions.Buissness.PedHere);

                            if (BikerMissions.Task == 1)
                                JobSeq = 10;
                            else if (BikerMissions.Task == 2)
                                JobSeq = 20;
                            else
                                JobSeq = 30;
                        }
                        else if (JobSeq == 10)
                        {
                            JobSeq++;
                            BikerMissions.ExVeh = EntityBuild.VehicleSpawn(new VehMods("PBUS2", 0), BikerMissions.Buissness.ParkHere);
                            BikerMissions.ExVeh.LockStatus = VehicleLockStatus.Locked;
                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[140];
                        }
                        else if (JobSeq == 11)
                        {
                            if (BikerMissions.ExVeh.IsDead)
                                JobSeq = 45;
                            else if (ReturnStuff.AmINear(BikerMissions.Buissness.PedHere.V3, 1.5f) && !Game.Player.Character.IsInVehicle())
                            {
                                JobSeq++;
                                EntityClear.RemoveTargets();
                                LoadInteriorSpace(BikerMissions.Buissness.PedNum, BikerMissions.InBis[0], 1, true);
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[141];
                                BikerRaids_LoadHood(1);
                                SearchFor.SlowFastTravel(BikerMissions.InBis[0]);
                            }
                        }
                        else if (JobSeq == 12)
                        {
                            if (BikerMissions.Walkers.Count > 0)
                            {
                                if (iWait4Sec < Game.GameTime)
                                    BikerRaids_KeepWalkin(BikerMissions.InBis[0].V3);

                                UiDisplay.ControlerUI(DataStore.MyLang.Context[23], 1);
                            }
                            else
                            {
                                JobSeq++;
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[142];
                                BikerMissions.ExVeh.LockStatus = VehicleLockStatus.Unlocked;
                                EntityBuild.AddTarget(new BlipForm(BikerMissions.InBis[0].V3, false, 5, 0, "", 1f, -1f));
                            }
                            EntityClear.SimpleTracker();
                        }
                        else if (JobSeq == 13)
                        {
                            if (ReturnStuff.AmINear(BikerMissions.InBis[0].V3, 1.9f))
                            {
                                JobSeq++;
                                EntityClear.RemoveTargets();
                                EntityClear.CleanPedBlips();
                                SearchFor.SlowFastTravel(BikerMissions.Buissness.PedHere);
                                EntityBuild.VehBlip(new BlipForm(3, DataStore.MyLang.Maptext[4]), BikerMissions.ExVeh);
                                Function.Call(Hash._SET_VEHICLE_ENGINE_POWER_MULTIPLIER, BikerMissions.ExVeh, 100.00f);
                                float fDist = BikerMissions.ExVeh.Position.DistanceTo(BikerMissions.ClubHouse.ParkHere.V3) ;
                                int iFind = (int)fDist;
                                BikerMissions.CashPay += iFind;
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[143];
                            }
                        }
                        else if (JobSeq == 14)
                        {
                            if (BikerMissions.ExVeh.IsDead)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(BikerMissions.ExVeh))
                            {
                                if (MissionData.Target_01 == null)
                                {
                                    BikerMissions.ExVeh.CurrentBlip.Remove();
                                    EntityBuild.AddTarget(new BlipForm(BikerMissions.ClubHouse.ParkHere.V3, true, 5, 492, DataStore.MyLang.Maptext[65], 5f, -1f));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[144] + BikerMissions.ClubHouse.Name;
                                }
                                else if (BikerMissions.MoveVeh)
                                {
                                    if (ReturnStuff.AreUNear(BikerMissions.ExVeh.Position, BikerMissions.ClubHouse.ParkHere.V3, 60f))
                                    {
                                        EntityBuild.MoveThatCar(BikerMissions.ClubHouse.ParkHere.V3);
                                        BikerMissions.MoveVeh = false;
                                    }
                                }
                                else if (ReturnStuff.AreUNear(BikerMissions.ExVeh.Position, BikerMissions.ClubHouse.ParkHere.V3, 5f))
                                {
                                    JobSeq++;
                                    iWait4Sec = Game.GameTime + 1000;
                                    UiDisplay.sSubDisplay = "";
                                }

                                if (MissionData.iTracking < Game.GameTime)
                                    BikerRaids_LostMCAtt();
                            }
                            else
                            {
                                if (MissionData.Target_01 != null)
                                {
                                    EntityClear.RemoveTargets();
                                    EntityBuild.VehBlip(new BlipForm(3, DataStore.MyLang.Maptext[4]), BikerMissions.ExVeh);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[143];
                                }
                            }
                        }
                        else if (JobSeq == 15)
                        {
                            if (iWait4Sec < Game.GameTime)
                            {
                                JobSeq = 40;
                                BikerMissions.ExVeh.FreezePosition = true;
                                EntityBuild.GetOutofVeh(Game.Player.Character, 0);
                                BikerMissions.CashPay += MissionData.iUltPed01 * 250;
                                BikerMissions.CashPay += 5000;
                                BikerMissions.ExVeh.LockStatus = VehicleLockStatus.Locked;
                            }
                        }
                        else if (JobSeq == 20)
                        {
                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[140];
                            JobSeq++;
                        }
                        else if (JobSeq == 21)
                        {
                            if (ReturnStuff.AmINear(BikerMissions.Buissness.PedHere.V3, 1.5f) && !Game.Player.Character.IsInVehicle())
                            {
                                JobSeq++;
                                EntityClear.RemoveTargets();
                                LoadInteriorSpace(BikerMissions.Buissness.PedNum, BikerMissions.InBis[0], 0, true);
                                BikerRaids_LoadHood(0);
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[145];
                                SearchFor.SlowFastTravel(BikerMissions.InBis[0]);
                            }
                        }
                        else if (JobSeq == 22)
                        {
                            if (MissionData.PedList_01.Count > 0)
                            {
                                if (MissionData.iTracking < Game.GameTime)
                                    EntityClear.SimpleTracker();
                            }
                            else
                            {
                                JobSeq++;
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[142];
                                EntityBuild.AddTarget(new BlipForm(BikerMissions.InBis[0].V3, false, 5, 0, "", 1f, -1f));
                            }
                        }
                        else if (JobSeq == 23)
                        {
                            if (ReturnStuff.AmINear(BikerMissions.InBis[0].V3, 1.9f))
                            {
                                JobSeq++;
                                EntityClear.RemoveTargets();
                                EntityClear.CleanPedBlips();
                                SearchFor.SlowFastTravel(BikerMissions.Buissness.PedHere);
                                BikerMissions.McAttacks = Game.GameTime + 90000;
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[145];
                            }
                        }
                        else if (JobSeq == 24)
                        {
                            if (BikerMissions.McAttacks > Game.GameTime)
                            {
                                if (MissionData.iTracking < Game.GameTime)
                                    BikerRaids_LostMCAtt();
                            }
                            else
                            {
                                JobSeq = 40;
                                UiDisplay.sSubDisplay = "";
                                BikerMissions.CashPay += MissionData.iUltPed01 * 250;
                            }
                        }
                        else if (JobSeq == 30)
                        {
                            JobSeq++;
                            BikerMissions.ExVeh = EntityBuild.VehicleSpawn(new VehMods("SLAMVAN2", 0), BikerMissions.Buissness.ParkHere);
                            BikerMissions.ExVeh.LockStatus = VehicleLockStatus.Locked;
                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[140];
                        }
                        else if (JobSeq == 31)
                        {
                            if (BikerMissions.ExVeh.IsDead)
                                JobSeq = 45;
                            else if (ReturnStuff.AmINear(BikerMissions.Buissness.PedHere.V3, 1.5f) && !Game.Player.Character.IsInVehicle())
                            {
                                JobSeq++;
                                EntityClear.RemoveTargets();
                                LoadInteriorSpace(BikerMissions.Buissness.PedNum, BikerMissions.InBis[0], 1, true);
                                BikerRaids_LoadHood(1);
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[146];
                                SearchFor.SlowFastTravel(BikerMissions.InBis[0]);
                            }
                        }
                        else if (JobSeq == 32)
                        {
                            if (BikerMissions.Guard.IsDead)
                            {
                                JobSeq++;
                                BikerMissions.Guard.CurrentBlip.Remove();
                                BikerMissions.MyKeys = EntityBuild.BuildProp("p_car_keys_01", BikerMissions.Guard.Position, Vector3.Zero, false, false);
                                EntityBuild.AddTarget(new BlipForm(BikerMissions.MyKeys.Position, false, 5, 811, DataStore.MyLang.Maptext[66]));
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[147];
                            }
                        }
                        else if (JobSeq == 33)
                        {
                            if (ReturnStuff.PickupBling(BikerMissions.MyKeys))
                            {
                                JobSeq++;
                                EntityClear.RemoveTargets();
                                BikerMissions.ExVeh.LockStatus = VehicleLockStatus.Unlocked;
                                BikerMissions.ExVeh.IsBulletProof = true;
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[142];
                                EntityBuild.AddTarget(new BlipForm(BikerMissions.InBis[0].V3, false, 5, 497, DataStore.MyLang.Maptext[66], 1f, -1f));
                            }
                        }
                        else if (JobSeq == 34)
                        {
                            if (ReturnStuff.AmINear(BikerMissions.InBis[0].V3, 1.9f))
                            {
                                JobSeq++;
                                EntityClear.RemoveTargets();
                                EntityClear.CleanPedBlips();
                                EntityBuild.VehBlip(new BlipForm(3, DataStore.MyLang.Maptext[11]), BikerMissions.ExVeh);
                                float fDist = BikerMissions.ExVeh.Position.DistanceTo(BikerMissions.ClubHouse.ParkHere.V3);
                                int iFind = (int)fDist;
                                BikerMissions.CashPay += iFind;
                                SearchFor.SlowFastTravel(BikerMissions.Buissness.PedHere);
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[148];
                            }
                        }
                        else if (JobSeq == 35)
                        {
                            if (BikerMissions.ExVeh.IsDead)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(BikerMissions.ExVeh))
                            {
                                if (MissionData.Target_01 == null)
                                {
                                    BikerMissions.ExVeh.CurrentBlip.Remove();
                                    EntityBuild.AddTarget(new BlipForm(BikerMissions.ClubHouse.ParkHere.V3, true, 5, 492, DataStore.MyLang.Maptext[65], 5f, -1f));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[149] + BikerMissions.ClubHouse.Name;
                                }
                                else if (BikerMissions.MoveVeh)
                                {
                                    if (ReturnStuff.AreUNear(BikerMissions.ExVeh.Position, BikerMissions.ClubHouse.ParkHere.V3, 60f))
                                    {
                                        EntityBuild.MoveThatCar(BikerMissions.ClubHouse.ParkHere.V3);
                                        BikerMissions.MoveVeh = false;
                                    }
                                }
                                else if (ReturnStuff.AreUNear(BikerMissions.ExVeh.Position, BikerMissions.ClubHouse.ParkHere.V3, 5f))
                                {
                                    JobSeq++;
                                    iWait4Sec = Game.GameTime + 1000;
                                    UiDisplay.sSubDisplay = "";
                                }

                                if (MissionData.iTracking < Game.GameTime)
                                    BikerRaids_LostMCAtt();
                            }
                            else
                            {
                                if (MissionData.Target_01 != null)
                                {
                                    EntityClear.RemoveTargets();
                                    EntityBuild.VehBlip(new BlipForm(3, DataStore.MyLang.Maptext[4]), BikerMissions.ExVeh);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[148];
                                }
                            }
                        }
                        else if (JobSeq == 36)
                        {
                            if (iWait4Sec < Game.GameTime)
                            {
                                JobSeq = 40; 
                                BikerMissions.ExVeh.FreezePosition = true;
                                EntityBuild.GetOutofVeh(Game.Player.Character, 0);
                                BikerMissions.ExVeh.LockStatus = VehicleLockStatus.Locked;
                                BikerMissions.CashPay += MissionData.iUltPed01 * 250;
                                BikerMissions.CashPay += 5000;
                            }
                        }
                        else if (JobSeq == 40)
                        {
                            BikerRaids_AddAwards();
                            MissionEnd(BikerRaids_Awards(BikerMissions.CashPay, true));
                        }
                        else if (JobSeq == 44)
                        {
                            if (iWait4Sec < Game.GameTime)
                            {
                                SearchFor.SlowFastTravel(BikerMissions.Buissness.PedHere);
                                JobSeq = 45;
                            }
                        }
                        else if (JobSeq == 45)
                        {
                            GameOverFail(false);
                        }
                    }       //BikerRaids
                    else if (JobType == 20)
                    {
                        if (JobSeq == 0)
                        {
                            JobSeq++;
                            if (DataStore.MySettings.FastTraveltoStart)
                                SearchFor.SlowFastTravel(CargoMissions.Buissness.ParkHere);
                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[150] + " ~y~" + CargoMissions.Buissness.Name + "~w~.";
                        }
                        else if (JobSeq == 1)
                        {
                            if (ReturnStuff.AmINear(CargoMissions.Buissness.PedHere.V3, 1.5f) && !Game.Player.Character.IsInVehicle())
                            {
                                JobSeq++;
                                Game.FadeScreenOut(100);
                                EntityClear.RemoveTargets();
                                LoadInteriorSpace(CargoMissions.Buissness.PedNum, CargoMissions.Enemys[0], 1, true);
                                CargoCollect_AddWares(CargoMissions.Buissness.PedNum);
                                CargoCollect_LoadHood();
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[151];
                                SearchFor.SlowFastTravel(CargoMissions.Enemys[0]);
                            }
                        }
                        else if (JobSeq == 2)
                        {
                            if (Game.Player.WantedLevel > 0)
                                Game.Player.WantedLevel = 0;

                            if (CargoMissions.ForkLift.IsDead || CargoMissions.Truck.IsDead)
                                JobSeq = 45;
                            else if (MissionData.iTracking < Game.GameTime)
                                EntityClear.SimpleTracker();
                            else if (Game.Player.Character.IsInVehicle(CargoMissions.ForkLift))
                            {
                                Vector3 Forks = CargoMissions.ForkLift.Position + (CargoMissions.ForkLift.ForwardVector * 2);
                                if (CargoMissions.ForkLift.CurrentBlip.Exists())
                                {
                                    CargoMissions.ForkLift.CurrentBlip.Remove();
                                    UiDisplay.MMDisplay01 = new MarkyMark(MarkerType.ChevronUpx1, new Vector3(CargoMissions.BluePallet.Position.X, CargoMissions.BluePallet.Position.Y, CargoMissions.BluePallet.Position.Z + 1.25f), Vector3.Zero, CargoMissions.BluePallet.Heading, 0.50f, Color.CadetBlue);
                                    UiDisplay.bMMDisplay01 = true;
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[CargoMissions.Instruct01];
                                }
                                else if (ReturnStuff.AreUNear(Forks, CargoMissions.BluePallet.Position, 1.3f))
                                {
                                    UiDisplay.bMMDisplay01 = false;
                                    CargoMissions.BluePallet.FreezePosition = false;
                                    CargoMissions.BluePallet.AttachTo(CargoMissions.ForkLift, Function.Call<int>(Hash.GET_ENTITY_BONE_INDEX_BY_NAME, CargoMissions.ForkLift.Handle, "forks_attach"), new Vector3(0.00f, 0.00f, 0.10f), new Vector3(0.00f, 0.00f, 90.00f));
                                    if (CargoMissions.Buissness.PedNum == 4)
                                    {
                                        JobSeq = 4;
                                        EntityBuild.VehBlip(new BlipForm(3, DataStore.MyLang.Maptext[1]), CargoMissions.Truck);
                                    }
                                    else
                                    {
                                        JobSeq++;
                                        EntityBuild.AddTarget(new BlipForm(CargoMissions.Enemys[CargoMissions.Enemys.Count - 1].V3, false, 5, -1, "", 5f, -1f));
                                    }
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[CargoMissions.Instruct02];
                                }

                                UiDisplay.ControlerUI(DataStore.MyLang.Context[24], 1);
                                if (Game.IsControlPressed(2, GTA.Control.Context))
                                {
                                    if (iWait4Sec < Game.GameTime)
                                        EntityBuild.ResetVehPos(CargoMissions.ForkLift, CargoMissions.ForkIt);
                                }
                                else
                                    iWait4Sec = Game.GameTime + 1500;
                            }
                            else
                            {
                                if (!CargoMissions.ForkLift.CurrentBlip.Exists())
                                {
                                    EntityBuild.VehBlip(new BlipForm(3, DataStore.MyLang.Maptext[12]), CargoMissions.ForkLift);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[151];
                                }
                            }
                        }
                        else if (JobSeq == 3)
                        {
                            if (Game.Player.WantedLevel > 0)
                                Game.Player.WantedLevel = 0;

                            if (CargoMissions.ForkLift.IsDead || CargoMissions.Truck.IsDead)
                                JobSeq = 45;
                            else if (MissionData.iTracking < Game.GameTime)
                                EntityClear.SimpleTracker();
                            else if (Game.Player.Character.IsInVehicle(CargoMissions.ForkLift))
                            {
                                if (MissionData.Target_01 == null)
                                {
                                    CargoMissions.ForkLift.CurrentBlip.Remove();
                                    EntityBuild.AddTarget(new BlipForm(CargoMissions.Enemys[CargoMissions.Enemys.Count - 1].V3, false, 5, -1, "", 5f, -1f));
                                }
                                else if (ReturnStuff.AmINear(CargoMissions.Enemys[CargoMissions.Enemys.Count - 1].V3, 4f))
                                {
                                    JobSeq++;
                                    EntityClear.RemoveTargets();
                                    Game.FadeScreenOut(1000);
                                    CargoMissions.ForkIt = CargoMissions.Buissness.PedHere;
                                    EntityBuild.ResetVehPos(CargoMissions.ForkLift, CargoMissions.ForkIt);
                                    EntityBuild.VehBlip(new BlipForm(3, DataStore.MyLang.Maptext[1]), CargoMissions.Truck);
                                    Game.FadeScreenIn(1000);
                                }

                                UiDisplay.ControlerUI(DataStore.MyLang.Context[24], 1);
                                if (Game.IsControlPressed(2, GTA.Control.Context))
                                {
                                    if (iWait4Sec < Game.GameTime)
                                        EntityBuild.ResetVehPos(CargoMissions.ForkLift, CargoMissions.ForkIt);
                                }
                                else
                                    iWait4Sec = Game.GameTime + 1500;
                            }
                            else
                            {
                                if (MissionData.Target_01 != null)
                                {
                                    EntityBuild.VehBlip(new BlipForm(3, DataStore.MyLang.Maptext[12]), CargoMissions.ForkLift);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[151];
                                }
                            }
                        }
                        else if (JobSeq == 4)
                        {
                            if (CargoMissions.ForkLift.IsDead || CargoMissions.Truck.IsDead)
                                JobSeq = 45;
                            else if (MissionData.iTracking < Game.GameTime)
                                EntityClear.SimpleTracker();

                            if (CargoMissions.ForkLift.IsDead || CargoMissions.Truck.IsDead)
                                JobSeq = 45;
                            else if (MissionData.iTracking < Game.GameTime)
                                EntityClear.SimpleTracker();
                            else if (Game.Player.Character.IsInVehicle(CargoMissions.ForkLift))
                            {
                                Vector3 Bed = CargoMissions.Truck.Position - (CargoMissions.Truck.ForwardVector * 2.24f);
                                Bed.Z += 0.80f;
                                if (CargoMissions.ForkLift.CurrentBlip.Exists())
                                {
                                    CargoMissions.ForkLift.CurrentBlip.Remove();
                                    UiDisplay.MMDisplay01 = new MarkyMark(MarkerType.ChevronUpx1, new Vector3(CargoMissions.BluePallet.Position.X, CargoMissions.BluePallet.Position.Y, CargoMissions.BluePallet.Position.Z + 1.25f), Vector3.Zero, CargoMissions.BluePallet.Heading, 0.50f, Color.CadetBlue);
                                    UiDisplay.bMMDisplay01 = true;
                                    UiDisplay.sSubDisplay = CargoMissions.sItemName;
                                }
                                else if (ReturnStuff.AreUNear(CargoMissions.BluePallet.Position, Bed, 0.80f))
                                {
                                    JobSeq++;
                                    CargoMissions.BluePallet.Detach();
                                    CargoMissions.BluePallet.AttachTo(CargoMissions.Truck, Function.Call<int>(Hash.GET_ENTITY_BONE_INDEX_BY_NAME, CargoMissions.Truck.Handle, "chassis"), new Vector3(0.00f, -2.25f, 0.85f), new Vector3(0.00f, 0.00f, 90.00f));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[164]; ;
                                }

                                UiDisplay.ControlerUI(DataStore.MyLang.Context[24], 1);
                                if (Game.IsControlPressed(2, GTA.Control.Context))
                                {
                                    if (iWait4Sec < Game.GameTime)
                                    {
                                        EntityBuild.ResetVehPos(CargoMissions.ForkLift, CargoMissions.ForkIt);
                                    }
                                }
                                else
                                    iWait4Sec = Game.GameTime + 1500;
                            }
                            else
                            {
                                if (!CargoMissions.ForkLift.CurrentBlip.Exists())
                                {
                                    EntityBuild.VehBlip(new BlipForm(3, DataStore.MyLang.Maptext[12]), CargoMissions.ForkLift);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[151];
                                }
                            }
                        }
                        else if (JobSeq == 5)
                        {
                            if (CargoMissions.Truck.IsDead)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(CargoMissions.Truck))
                            {
                                JobSeq++;
                                if (CargoMissions.Buissness.PedNum == 4)
                                {
                                    CargoMissions.Truck.CloseDoor(VehicleDoor.Trunk, true);
                                    CargoMissions.Truck.CurrentBlip.Remove();
                                    Game.FadeScreenOut(1000);
                                    Script.Wait(1000);
                                    EntityBuild.ResetVehPos(CargoMissions.Truck, CargoMissions.Buissness.PedHere);
                                    Game.FadeScreenIn(1000);
                                }
                                iWait4Sec = Game.GameTime + RandomX.RandInt(20000, 60000);
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[CargoMissions.Instruct03];
                            }
                        }
                        else if (JobSeq == 6)
                        {
                            if (CargoMissions.Truck.IsDead)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(CargoMissions.Truck))
                            {
                                if (MissionData.Target_01 == null)
                                {
                                    CargoMissions.Truck.CurrentBlip.Remove();
                                    EntityBuild.AddTarget(new BlipForm(CargoMissions.DropOff.ParkHere.V3, true, 5, 478, DataStore.MyLang.Maptext[39], 5f));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[CargoMissions.Instruct03];
                                }
                                else if (iWait4Sec < Game.GameTime)
                                {
                                    JobSeq++;
                                    CargoCollect_Suprise();
                                }
                            }
                            else
                            {
                                if (MissionData.Target_01 != null)
                                {
                                    EntityClear.RemoveTargets();
                                    EntityBuild.VehBlip(new BlipForm(3, DataStore.MyLang.Maptext[1]), CargoMissions.Truck);

                                }
                            }
                        }
                        else if (JobSeq == 7)
                        {
                            if (MultiPed.Count > 0)
                            {
                                if (MissionData.iTracking < Game.GameTime)
                                {
                                    if (Game.Player.WantedLevel > 0)
                                        Game.Player.WantedLevel = 0;

                                    EntityClear.MultiPedTracker();
                                }
                            }

                            if (CargoMissions.Truck.IsDead)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(CargoMissions.Truck))
                            {
                                if (MissionData.Target_01 == null)
                                {
                                    CargoMissions.Truck.CurrentBlip.Remove();
                                    EntityBuild.AddTarget(new BlipForm(CargoMissions.DropOff.ParkHere.V3, true, 5, 478, DataStore.MyLang.Maptext[39], 5f));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[CargoMissions.Instruct03];
                                }
                                else if (ReturnStuff.AreUNear(CargoMissions.DropOff.ParkHere.V3, CargoMissions.Truck.Position, 45f))
                                {
                                    if (CargoMissions.MoveVeh)
                                    {
                                        EntityBuild.MoveThatCar(CargoMissions.DropOff.ParkHere);
                                        CargoMissions.MoveVeh = false;
                                    }
                                    else if (ReturnStuff.AreUNear(CargoMissions.DropOff.ParkHere.V3, CargoMissions.Truck.Position, 5f))
                                    {
                                        JobSeq = 10;
                                        EntityClear.RemoveTargets();
                                        SearchFor.SlowFastTravel(CargoMissions.DropOff.PedHere);
                                        CargoMissions.Truck.Position = Vector3.Zero;
                                    }
                                }
                            }
                            else
                            {
                                if (MissionData.Target_01 != null)
                                {
                                    EntityClear.RemoveTargets();
                                    EntityBuild.VehBlip(new BlipForm(3, DataStore.MyLang.Maptext[1]), CargoMissions.Truck);
                                }
                            }
                        }
                        else if (JobSeq == 10)
                        {
                            WalkOn();
                            NSBanking.NSCoinInvestments(true, 7, 11, "SecuroServ Shares");
                            CargoCollect_AddAwards();
                            MissionEnd(CargoCollect_Awards(CargoMissions.CashPay, true));
                        }
                        else if (JobSeq == 45)
                        {
                            NSBanking.NSCoinInvestments(false, 8, 13, "SecuroServ Shares");
                            GameOverFail(false);
                        }
                    }       //BayLift
                    else if (JobType == 21)
                    {
                        if (JobSeq == 0)
                        {
                            JobSeq++;
                            if (DataStore.MySettings.FastTraveltoStart)
                                SearchFor.SlowFastTravel(MissionData.vFuMiss, 0.00f);
                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[125];
                            SharkMissions.TotalTime = Game.GameTime;
                        }
                        else if (JobSeq == 1)
                        {
                            if (MissionData.MishVeh.IsDead)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(MissionData.MishVeh))
                            {
                                JobSeq++;
                                EntityBuild.AddTarget(new BlipForm(SharkMissions.Sharky.Target, false, 3, 75f, new BlipForm(SharkMissions.Sharky.Target, false, 3, 1f)));
                                SharkMissions.Sub = MissionData.MishVeh;
                                SharkMissions.Sub.CurrentBlip.Remove();
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[90];
                            }
                            else if (ReturnStuff.AmINear(MissionData.MishVeh.Position, 10f))
                            {
                                SharkMissions.SubSelect = ReturnStuff.PickThatVeh(SharkMissions.SubSelect, MissionData.MishVeh, SharkMissions.Sharky.SubPark, 29, true);
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[171];
                            }
                            else
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[125];
                        }
                        else if (JobSeq == 2)
                        {
                            if (SharkMissions.Sub.IsDead)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(SharkMissions.Sub))
                            {
                                if (MissionData.Target_01 == null)
                                {
                                    SharkMissions.Sub.CurrentBlip.Remove();
                                    EntityBuild.AddTarget(new BlipForm(SharkMissions.Sharky.Target, false, 3, 75f, new BlipForm(SharkMissions.Sharky.Target, false, 3, 1f)));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[90];
                                }
                                else if (ReturnStuff.AreUNear(SharkMissions.Sub.Position, SharkMissions.Sharky.Target, 95f))
                                {
                                    JobSeq++;
                                    EntityClear.RemoveTargets();
                                    EntityBuild.AddTarget(new BlipForm(SharkMissions.Sharky.Target, false, 3, 75f));
                                    DeepDown_Addfish();
                                }
                            }
                            else
                            {
                                if (MissionData.Target_01 != null)
                                {
                                    EntityClear.RemoveTargets();
                                    EntityBuild.VehBlip(new BlipForm(66, DataStore.MyLang.Maptext[13]), SharkMissions.Sub);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[171];
                                }
                            }
                        }
                        else if (JobSeq == 3)
                        {
                            if (!Game.Player.Character.IsInVehicle() || SharkMissions.Sub.IsDead)
                              JobSeq = 45;
                            else if (MissionData.PedList_01.Count > 0)
                            {
                                if (iWait4Sec < Game.GameTime)
                                {
                                    iWait4Sec = Game.GameTime + 1000;
                                    DeepDown_SwimtoBarrel();
                                }
                            }
                            else
                                JobSeq = 10;

                            if (MissionData.PropList_01.Count > 0)
                            {
                                UiDisplay.ControlerUI(DataStore.MyLang.Context[25], 1);
                                if (Game.IsControlPressed(2, GTA.Control.Context))
                                {
                                    if (SharkMissions.DropTime < Game.GameTime)
                                    {
                                        Vector3 vMe = MissionData.PropList_01[0].Position;
                                        MissionData.PropList_01[0].Delete();
                                        MissionData.PropList_01.RemoveAt(0);
                                        World.AddExplosion(vMe, ExplosionType.StickyBomb, 10.00f, 5.00f, true, false);
                                        Script.Wait(RandomX.RandInt(75, 300));
                                        World.AddExplosion(vMe, ExplosionType.StickyBomb, 10.00f, 5.00f, true, false);
                                        Script.Wait(RandomX.RandInt(75, 300));
                                        World.AddExplosion(vMe, ExplosionType.StickyBomb, 10.00f, 5.00f, true, false);
                                        Script.Wait(1000);
                                        if (SharkMissions.Sub.IsDead)
                                            DataStore.MyAchivments.DeepDown_DasBoot++;          //Blow your self up.
                                    }
                                }
                                else
                                    SharkMissions.DropTime = Game.GameTime + 500;
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[172];
                            }
                            else
                            {
                                if (ReturnStuff.AreUNear(SharkMissions.Sub.Position, SharkMissions.Sharky.Target, 85f))
                                {
                                    UiDisplay.ControlerUI(DataStore.MyLang.Context[26], 1);
                                    if (Game.IsControlJustPressed(2, GTA.Control.Context))
                                    {
                                        SharkMissions.BombsAway = false;
                                        DeepDown_DropBomb();
                                    }
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[173];
                                }
                            }
                        }
                        else if (JobSeq == 10)
                        {
                            NSBanking.NSCoinInvestments(true, 8, 13, "Vespucci Surfing Shares");
                            DeepDown_AddAwards();
                            MissionEnd(DeepDown_Awards(SharkMissions.CashPay, true));
                        }
                        else if (JobSeq == 45)
                        {
                            NSBanking.NSCoinInvestments(false, 9, 15, "Vespucci Surfing Shares");
                            GameOverFail(false);
                        }
                    }       //Sharks
                    else if (JobType == 22)
                    {
                        if (JobSeq == 0)
                        {
                            JobSeq++;
                            if (DataStore.MySettings.FastTraveltoStart)
                                SearchFor.SlowFastTravel(MissionData.vFuMiss, 0.00f);
                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[179];
                        }
                        else if (JobSeq == 1)
                        {
                            if (ReturnStuff.AmINear(HappySMissions.Indoors[0].V3, 3.5f))
                            {
                                JobSeq++;
                                EntityBuild.ArmNpcWeapon("WEAPON_bat", Game.Player.Character);
                                EntityClear.RemoveTargets();
                                UiDisplay.bUiDisplay = true;
                                HappySMissions.iTimes = Game.GameTime;
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[180];
                            }
                        }
                        else if (JobSeq == 2)
                        {
                            if (!Function.Call<bool>(Hash.IS_PED_ARMED, Game.Player.Character, 6) || ReturnStuff.AmINear(HappySMissions.Buissness.PedHere.V3, 20f))
                            {
                                if (Game.Player.WantedLevel > 0)
                                    Game.Player.WantedLevel = 0;

                                float fPer = HappyShopper_DAmmagedGoods();

                                UiDisplay.SideBars[0].Percent = fPer;

                                if (fPer > 0.99f)
                                    JobSeq++;
                            }
                            else
                                JobSeq = 45;
                        }
                        else if (JobSeq == 3)
                        {                          
                            HappyShopper_AddAwards();
                            MissionEnd(HappyShopper_Awards(RandomX.RandInt(500, 700), true));
                        }
                        else if (JobSeq == 45)
                        {
                            Game.Player.WantedLevel = 4;
                            GameOverFail(false);
                        }
                    }       //HappyShopper
                    else if (JobType == 23)
                    {
                        if (JobSeq == 0)
                        {
                            JobSeq++;
                            if (DataStore.MySettings.FastTraveltoStart)
                                EntityBuild.WarptoAnyVeh(MoresMissions.MyWhip, Game.Player.Character, 1);
                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[181];
                        }
                        else if (JobSeq == 1)
                        {
                            if (MoresMissions.MyWhip.IsDead || !MoresMissions.MyWhip.IsDriveable)
                                JobSeq = 45;
                            else if (ReturnStuff.AmINear(MoresMissions.MyWhip.Position, 50f))
                            {
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[81];
                                if (Game.Player.Character.IsInVehicle(MoresMissions.MyWhip))
                                {
                                    JobSeq++;
                                    MoresMissions.MyWhip.CurrentBlip.Remove();
                                    EntityBuild.AddTarget(new BlipForm(MoresMissions.ChopNPop.V3, true, 5, 380, DataStore.MyLang.Maptext[67], 5f));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[182];
                                }
                            }
                            else
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[181];
                        }
                        else if (JobSeq == 2)
                        {
                            if (MoresMissions.MyWhip.IsDead || !MoresMissions.MyWhip.IsDriveable)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(MoresMissions.MyWhip))
                            {
                                if (MissionData.Target_01 == null)
                                {
                                    MoresMissions.MyWhip.CurrentBlip.Remove();
                                    EntityBuild.AddTarget(new BlipForm(MoresMissions.ChopNPop.V3, true, 5, 380, DataStore.MyLang.Maptext[67], 5f));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[182];
                                }
                                else if (ReturnStuff.AreUNear(MoresMissions.ChopNPop.V3, MoresMissions.MyWhip.Position, 2.5f))
                                {
                                    JobSeq++;
                                    EntityClear.RemoveTargets();
                                    Game.FadeScreenOut(1000);
                                    Script.Wait(1000);
                                    DataStore.Drilar.Play();
                                    Script.Wait(1000);
                                    MoresMissions.MyWhip.Heading = MoresMissions.ChopNPop.R;
                                    MoresMissions.MyWhip.Repair();
                                    MoresMissions.VehHurt = (float)MoresMissions.MyWhip.BodyHealth;
                                    EntityBuild.AddTarget(new BlipForm(MoresMissions.ParkNRide.ParkHere.V3, true, 5, 225, DataStore.MyLang.Maptext[68], 5f));
                                    Game.FadeScreenIn(1000);
                                    UiDisplay.bUiDisplay = true;
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[183];
                                }
                            }
                            else
                            {
                                if (MissionData.Target_01 != null)
                                {
                                    EntityClear.RemoveTargets();
                                    EntityBuild.VehBlip(new BlipForm(3, DataStore.MyLang.Maptext[14]), MoresMissions.MyWhip);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[81];
                                }
                            }
                        }
                        else if (JobSeq == 3)
                        {
                            UiDisplay.SideBars[0].Percent = MoresMuted_DAmmagedGoods(MoresMissions.MyWhip);
                            if (UiDisplay.SideBars[0].Percent > 0.90f)
                            {
                                if (UiDisplay.SideBars[0].Percent > 0.95f)
                                {
                                    EntityClear.RemoveTargets();
                                    MoresMissions.MyWhip.Explode();
                                }
                                else if (MoresMissions.BarFlashWait < Game.GameTime)
                                {
                                    if (MoresMissions.BarFlash)
                                        UiDisplay.SideBars[0].SlideBar = new RGBA(1);
                                    else
                                        UiDisplay.SideBars[0].SlideBar = new RGBA(46);
                                    MoresMissions.BarFlashWait = Game.GameTime + 500;
                                    MoresMissions.BarFlash = !MoresMissions.BarFlash;
                                }
                            }

                            if (MoresMissions.MyWhip.IsDead || !MoresMissions.MyWhip.IsDriveable)
                                JobSeq = 45;
                            else if(Game.Player.Character.IsInVehicle(MoresMissions.MyWhip))
                            {
                                if (MissionData.Target_01 == null)
                                {
                                    MoresMissions.MyWhip.CurrentBlip.Remove();
                                    EntityBuild.AddTarget(new BlipForm(MoresMissions.ParkNRide.ParkHere.V3, true, 5, 225, DataStore.MyLang.Maptext[68], 5f));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[183];
                                }
                                else if (ReturnStuff.AreUNear(MoresMissions.ParkNRide.ParkHere.V3, MoresMissions.MyWhip.Position, 95.5f))
                                {
                                    if (MoresMissions.AddGhost)
                                    {
                                        MoresMissions.GhostWhip = EntityBuild.VehicleSpawn(new VehMods(MoresMissions.MyWhip, 18), MoresMissions.ParkNRide.ParkHere);
                                        MoresMissions.AddGhost = false;
                                    }
                                    else if (ReturnStuff.AreUNear(MoresMissions.ParkNRide.ParkHere.V3, MoresMissions.MyWhip.Position, 1.5f))
                                    {
                                        JobSeq++;
                                        EntityClear.RemoveTargets();
                                    }
                                }
                            }
                            else
                            {
                                if (MissionData.Target_01 != null)
                                {
                                    EntityClear.RemoveTargets();
                                    EntityBuild.VehBlip(new BlipForm(3, DataStore.MyLang.Maptext[14]), MoresMissions.MyWhip);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[81];
                                }
                            }
                        }
                        else if (JobSeq == 4)
                        {
                            UiDisplay.SideBars[0].Percent = MoresMuted_DAmmagedGoods(MoresMissions.MyWhip);
                            if (UiDisplay.SideBars[0].Percent > 0.90f)
                            {
                                if (UiDisplay.SideBars[0].Percent > 0.95f)
                                {
                                    EntityClear.RemoveTargets();
                                    MoresMissions.MyWhip.Explode();
                                }
                                else if (MoresMissions.BarFlashWait < Game.GameTime)
                                {
                                    if (MoresMissions.BarFlash)
                                        UiDisplay.SideBars[0].SlideBar = new RGBA(1);
                                    else
                                        UiDisplay.SideBars[0].SlideBar = new RGBA(46);
                                    MoresMissions.BarFlashWait = Game.GameTime + 500;
                                    MoresMissions.BarFlash = !MoresMissions.BarFlash;
                                }
                            }

                            if (MoresMissions.MyWhip.IsDead || !MoresMissions.MyWhip.IsDriveable)
                                JobSeq = 45;
                            else if (!Game.Player.Character.IsInVehicle(MoresMissions.MyWhip))
                            {
                                if (ReturnStuff.AreUNear(MoresMissions.MyWhip.Position, MoresMissions.GhostWhip.Position, 0.5f) && ReturnStuff.BeInAngle(5.00f, MoresMissions.MyWhip.Heading, MoresMissions.GhostWhip.Heading))
                                {
                                    JobSeq++;
                                    MoresMissions.ParkingFine = MoresMissions.MyWhip.Position.DistanceTo(MoresMissions.GhostWhip.Position) + MoresMissions.MyWhip.Rotation.DistanceTo(MoresMissions.GhostWhip.Rotation);
                                    iWait4Sec = Game.GameTime + 10000;
                                    UiDisplay.bUiDisplay = false;
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[184];
                                    MoresMissions.GhostWhip.Position = Vector3.Zero;
                                }
                                else
                                {
                                    MoresMissions.Stiff = EntityBuild.NPCSpawn(new PedFeat(ReturnStuff.RandNPC(12), false, 250, 17, 0, null, 0, true, 0, DataStore.MyLang.Maptext[105]), MoresMissions.ParkNRide.PedHere);
                                    JobSeq = 45;
                                }
                            }
                        }
                        else if (JobSeq == 5)
                        {
                            if (iWait4Sec < Game.GameTime)
                            {
                                JobSeq++;
                                MoresMissions.Stiff = EntityBuild.NPCSpawn(new PedFeat(ReturnStuff.RandNPC(12), false, 250, 25, 0, null, 0, true, 0, DataStore.MyLang.Maptext[105]), MoresMissions.ParkNRide.PedHere);
                                SearchFor.BackSeat.Add(new FindSeat(1, MoresMissions.MyWhip, MoresMissions.Stiff, 1.1f));
                            }
                        }
                        else if (JobSeq == 6)
                        {
                            if (MoresMissions.Stiff.IsDead)
                                JobSeq = 45;
                            else if (ReturnStuff.BeenSpotted(MoresMissions.Stiff, Game.Player.Character, true))
                            {
                                JobSeq = 45;
                                EntityBuild.AttackThePlayer(MoresMissions.Stiff, false, true, true);
                            }
                            if (MoresMissions.Stiff.IsInVehicle(MoresMissions.MyWhip))
                            {
                                JobSeq = 10;
                                Hitman_RemoveVisionCones();
                                MoresMissions.MyWhip.Explode();
                            }
                        }
                        else if (JobSeq == 10)
                        {
                            Hitman_RemoveVisionCones();
                            NSBanking.NSCoinInvestments(false, 5, 7, "Mors Mutual Shares");
                            MoresMuted_AddAwards();
                            MissionEnd(MoresMuted_Awards(RandomX.RandInt(10000, 20000), true));
                        }
                        else if (JobSeq == 45)
                        {
                            NSBanking.NSCoinInvestments(true, 5, 7, "Mors Mutual Shares");
                            GameOverFail(false);
                        }
                    }       //MoresMute
                    else if (JobType == 24)
                    {
                        if (LocationX == 1)
                        {
                            if (JobSeq == 0)
                            {
                                JobSeq++;
                                if (DataStore.MySettings.FastTraveltoStart)
                                    SearchFor.SlowFastTravel(MissionData.vFuMiss, 0.00f);
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[185];
                            }
                            else if (JobSeq == 1)
                            {
                                if (ReturnStuff.AmINear(Temp01Missions.ExEntrance, 1.5f) && !Game.Player.Character.IsInVehicle())
                                {
                                    JobSeq++;
                                    EntityClear.RemoveTargets();
                                    Game.FadeScreenOut(1000);
                                    LoadInteriorSpace(250, Temp01Missions.InEntrance, 1, true);
                                    TempAgency_01_LoadInShit();
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[186];
                                    SearchFor.SlowFastTravel(Temp01Missions.InEntrance, 0f);
                                }
                            }
                            else if (JobSeq == 2)
                            {
                                if (Game.Player.Character.IsInVehicle())
                                {
                                    if (!Game.Player.Character.IsInVehicle(Temp01Missions.Prize))
                                    {
                                        JobSeq++;
                                        Temp01Missions.Football = EntityBuild.BuildProp("stt_prop_stunt_soccer_ball", Temp01Missions.KickOff, new Vector3(0.00f, 0.00f, 0.00f), false, false);
                                        UiDisplay.sSubDisplay = "";
                                        TempAgency_01_AddGoal();
                                        TempAgency_01_FormationNGate();
                                        Temp01Missions.iClock = Game.GameTime + 280000; 
                                        UiDisplay.bMMDisplay01 = true;
                                        UiDisplay.bUiDisplay = true;
                                    }
                                }
                            }
                            else if (JobSeq == 3)
                            {
                                if (!Game.Player.Character.IsInVehicle())
                                    JobSeq = 45;
                                else
                                {
                                    if (TempAgency_01_BallTracking(Temp01Missions.Football))
                                        TempAgency_01_Formation();
                                    else
                                    {
                                        if (Temp01Missions.iClock < Game.GameTime)
                                            JobSeq++;
                                        UiDisplay.SideBars[1].Counter = ReturnStuff.RaceCounter(Temp01Missions.iClock - Game.GameTime);
                                    }
                                }
                            }
                            else if (JobSeq == 4)
                            {
                                if (Temp01Missions.bReds)
                                {
                                    if (Temp01Missions.iReds > Temp01Missions.iBlues)
                                        TempAgency_01_ExitWithCar(false);
                                    else
                                        TempAgency_01_ExitWithCar(true);
                                }
                                else
                                {
                                    if (Temp01Missions.iReds < Temp01Missions.iBlues)
                                        TempAgency_01_ExitWithCar(false);
                                    else
                                        TempAgency_01_ExitWithCar(true);
                                }
                                JobSeq++;
                            }
                            else if (JobSeq == 45)
                            {
                                SearchFor.SlowFastTravel(Temp01Missions.ExEntrance, 0.00f);
                                GameOverFail(false);
                            }
                        }       //CarBall
                        else if (LocationX == 2)
                        {
                            if (JobSeq == 0)
                            {
                                JobSeq++;
                                if (DataStore.MySettings.FastTraveltoStart)
                                    SearchFor.SlowFastTravel(Temp02Missions.ClubX.PedHere);
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[198];
                            }
                            else if (JobSeq == 1)
                            {
                                if (ReturnStuff.AmINear(Temp02Missions.ClubX.PedHere.V3, 75.5f))
                                {
                                    SearchFor.ClubQUe(Temp02Missions.ClubX.PedNum);
                                    JobSeq++;
                                }
                            }
                            else if (JobSeq == 2)
                            {
                                if (MissionData.iUltPed01 == 0)
                                    EntityClear.SimpleTracker();
                                else
                                    JobSeq = 45;

                                if (ReturnStuff.AmINear(Temp02Missions.ClubX.PedHere.V3, 1.5f) && !Game.Player.Character.IsInVehicle())
                                {
                                    JobSeq++;
                                    EntityClear.RemoveTargets();
                                    Game.FadeScreenOut(1000);
                                    LoadInteriorSpace(Temp02Missions.ClubX.PedNum, Temp02Missions.EnterClub, 1, true);
                                    TempAgency_02_FillClub(true);
                                    SetTheTime(20, 0, 0);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[199];
                                    EntityBuild.AddBlips(new BlipForm(Temp02Missions.WalkTo[Temp02Missions.Walkin], false, 5, 93, DataStore.MyLang.Maptext[70], 1f));
                                    SearchFor.SlowFastTravel(Temp02Missions.EnterClub);
                                }
                            }
                            else if (JobSeq == 3)
                            {
                                if (iWait4Sec < Game.GameTime)
                                    TempAgency_02_ClubberAi();

                                if (MissionData.iUltPed01 == 0)
                                    EntityClear.SimpleTracker();
                                else
                                    JobSeq = 45;

                                if (ReturnStuff.AmINear(Temp02Missions.WalkTo[Temp02Missions.Walkin], 1.75f))
                                {
                                    EntityClear.RemoveTargets();
                                    Temp02Missions.Walkin++;
                                    if (Temp02Missions.Walkin < Temp02Missions.WalkTo.Count)
                                        EntityBuild.AddBlips(new BlipForm(Temp02Missions.WalkTo[Temp02Missions.Walkin], true, 5, 93, DataStore.MyLang.Maptext[70], 1f));
                                    else
                                    {
                                        JobSeq++;
                                        UiDisplay.SideBars[0].Data = "$" + Temp02Missions.CashPay;
                                        Temp02Missions.GetDrink = true;
                                        Temp02Missions.AtTheBar = true;
                                        UiDisplay.bUiDisplay = true;
                                        TempAgency_02_BarStools();
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[200];
                                    }
                                }
                            }
                            else if (JobSeq == 4)
                            {
                                if (iWait4Sec < Game.GameTime)
                                    TempAgency_02_ClubberAi();

                                if (MissionData.iUltPed01 == 0)
                                    EntityClear.SimpleTracker();
                                else
                                    JobSeq = 45;

                                UiDisplay.SideBars[0].Percent = Temp02Missions.BarHate;
                            }
                            else if (JobSeq == 5)
                            {
                                if (iWait4Sec < Game.GameTime)
                                    TempAgency_02_ClubberAi();

                                if (MissionData.iUltPed01 == 0)
                                    EntityClear.SimpleTracker();
                                else
                                    JobSeq = 45;

                                if (ReturnStuff.AmINear(Temp02Missions.Till, 1.5f))
                                {
                                    EntityClear.RemoveTargets();
                                    Temp02Missions.GetDrink = true;
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[200];
                                    DataStore.CashTil.Play();
                                    TempAgency_02_AddRubish();
                                    Temp02Missions.CashPay += RandomX.RandInt(1, 10);
                                    UiDisplay.SideBars[1].Data = "$" + Temp02Missions.CashPay;

                                    if (ReturnStuff.BeRightOnTime(1, 2))
                                        JobSeq = 6;
                                    else
                                        JobSeq --;
                                }

                                UiDisplay.SideBars[0].Percent = Temp02Missions.BarHate;
                            }
                            else if (JobSeq == 6)
                            {
                                TempAgency_02_CleanOutClub();
                                SearchFor.SlowFastTravel(Temp02Missions.ClubX.PedHere);
                                Temp02Missions.CashPay += 150;
                                MissionEnd(TempAgency_Awards(Temp02Missions.CashPay, true));
                            }
                            else if (JobSeq == 40)
                            {
                                if (MissionData.iUltPed01 == 0)
                                    EntityClear.SimpleTracker();
                                else
                                    JobSeq = 45;
                            }
                            else if (JobSeq == 45)
                            {
                                TempAgency_02_CleanOutClub();
                                SearchFor.SlowFastTravel(Temp02Missions.ClubX.PedHere);
                                GameOverFail(false);
                            }
                        }       //Knight Club
                        else if (LocationX == 3)
                        {
                            if (JobSeq == 0)
                            {
                                JobSeq++;
                                Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "restrictedareas");
                                if (DataStore.MySettings.FastTraveltoStart)
                                    SearchFor.SlowFastTravel(Temp03Missions.Target01, 0.00f);
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[202];
                            }
                            else if (JobSeq == 1)
                            {
                                Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "re_armybase");

                                if (ReturnStuff.AmINear(Temp03Missions.Target01, 150.5f))
                                {
                                    if (ReturnStuff.AmINear(Temp03Missions.Target01, 1.5f) && !Game.Player.Character.IsInVehicle())
                                    {
                                        JobSeq++;
                                        Game.FadeScreenOut(1000);
                                        EntityClear.RemoveTargets();
                                        LoadInteriorSpace(251, Temp03Missions.Target02, 1, true);
                                        TempAgency_03_HangerDupes();
                                        Temp03Missions.InBuild = true;
                                        SearchFor.SlowFastTravel(Temp03Missions.Target02);
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[204];
                                    }
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[203];
                                }
                                else
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[202];
                            }
                            else if (JobSeq == 2)
                            {
                                TempAgency_03_TrackDump();
                                if (Temp03Missions.Dozer.IsDead || Temp03Missions.CurrentDump.IsDead)
                                    JobSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(Temp03Missions.Dozer))
                                {
                                    UiDisplay.ControlerUI(DataStore.MyLang.Context[28], 1);

                                    if (Temp03Missions.Dozer.CurrentBlip.Exists())
                                    {
                                        Temp03Missions.Dozer.CurrentBlip.Remove();
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[205];
                                    }
                                    else if (Game.IsControlPressed(2, GTA.Control.Context))
                                    {
                                        if (iWait4Sec < Game.GameTime)
                                            EntityBuild.ResetVehPos(Temp03Missions.Dozer, Temp03Missions.Target03);
                                    }
                                    else
                                        iWait4Sec = Game.GameTime + 1000;
                                }
                                else
                                {
                                    if (!Temp03Missions.Dozer.CurrentBlip.Exists())
                                    {
                                        EntityBuild.VehBlip(new BlipForm(3, DataStore.MyLang.Maptext[77]), Temp03Missions.Dozer);
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[204];
                                    }
                                }
                            }
                            else if (JobSeq == 3)
                            {
                                JobSeq++;
                                Temp03Missions.InBuild = false;
                                TempAgency_03_TruckOff();
                                Game.Player.WantedLevel = 0;
                            }
                            else if (JobSeq == 4)
                            {
                                if (Game.Player.WantedLevel > 0)
                                    Game.Player.WantedLevel = 0;

                                if (Temp03Missions.CurrentDump.IsDead)
                                    JobSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(Temp03Missions.CurrentDump))
                                {
                                    if (MissionData.Target_01 == null)
                                    {
                                        EntityBuild.AddTarget(new BlipForm(Temp03Missions.Vlist02[3], true, 5, 774, DataStore.MyLang.Maptext[42], 10f));
                                        Temp03Missions.CurrentDump.CurrentBlip.Remove();
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[207];
                                    }
                                    else if (ReturnStuff.AreUNear(Temp03Missions.CurrentDump.Position, Temp03Missions.Vlist02[3], 5f))
                                    {
                                        JobSeq++;
                                        EntityBuild.GetOutofVeh(Game.Player.Character, 1);
                                        TempAgency_03_DupeCount();
                                    }
                                }
                                else
                                {
                                    if (MissionData.Target_01 != null)
                                    {
                                        EntityClear.RemoveTargets();
                                        EntityBuild.VehBlip(new BlipForm(3, DataStore.MyLang.Maptext[76]), Temp03Missions.CurrentDump);
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[206];
                                    }
                                }
                            }
                            else if (JobSeq == 5)
                            {
                                ZancudaClosed();
                                MissionEnd(TempAgency_Awards(Temp03Missions.CashPay, true));
                            }
                            else if (JobSeq == 45)
                            {
                                if (Temp03Missions.InBuild)
                                    SearchFor.SlowFastTravel(Temp03Missions.Target01, 0f);
                                ZancudaClosed();
                                GameOverFail(false);
                            }
                        }       //Shovell Dupes
                        else if (LocationX == 4)
                        {
                            if (JobSeq == 0)
                            {
                                JobSeq++;
                                if (DataStore.MySettings.FastTraveltoStart)
                                    SearchFor.SlowFastTravel(Temp04Missions.ExtDoor, 0.00f);
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[208];
                            }
                            else if (JobSeq == 1)
                            {
                                if (ReturnStuff.AmINear(Temp04Missions.ExtDoor, 1.5f) && !Game.Player.Character.IsInVehicle())
                                {
                                    JobSeq++;
                                    EntityClear.RemoveTargets();
                                    LoadInteriorSpace(252, Temp04Missions.IntDoor, 1, true);
                                    EntityBuild.AddTarget(new BlipForm(Temp04Missions.WalkTo[Temp04Missions.IWalks], false, 5, 110, DataStore.MyLang.Maptext[82], 1f));
                                    SearchFor.SlowFastTravel(Temp04Missions.IntDoor);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[209];
                                }
                            }
                            else if (JobSeq == 2)
                            {
                                if (MissionData.iUltPed01 > 1)
                                {
                                    JobSeq = 45;
                                    SearchFor.SlowFastTravel(Temp04Missions.ExtDoor, 180.8543f);
                                }
                                else if (ReturnStuff.AmINear(Temp04Missions.WalkTo[Temp04Missions.IWalks], 1.5f))
                                {
                                    EntityClear.RemoveTargets();
                                    Temp04Missions.IWalks++;
                                    if (Temp04Missions.IWalks == 1)
                                    {
                                        TempAgency_04_CasWeaponSkit();
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[210];
                                        EntityBuild.AddTarget(new BlipForm(Temp04Missions.WalkTo[Temp04Missions.IWalks], false, 5, 73, DataStore.MyLang.Maptext[81], 1f));
                                    }
                                    else if (Temp04Missions.IWalks == 2)
                                    {
                                        if (Temp04Missions.Uniform != null)
                                            EntityBuild.PedDresser(Game.Player.Character, Temp04Missions.Uniform);
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[211];
                                        EntityBuild.AddTarget(new BlipForm(Temp04Missions.WalkTo[Temp04Missions.IWalks], false, 5, 485, DataStore.MyLang.Maptext[83], 1f));
                                    }
                                    else if (Temp04Missions.IWalks == 3)
                                    {
                                        JobSeq++;
                                        DataStore.LiftDoor.Play();
                                        EntityClear.RemoveTargets();
                                        SearchFor.SlowFastTravel(Temp04Missions.WalkTo[Temp04Missions.IWalks], 180.8543f);
                                        Temp04Missions.IWalks = Temp04Missions.WalkTo.Count - 2;
                                        EntityBuild.AddTarget(new BlipForm(Temp04Missions.WalkTo[Temp04Missions.IWalks], false, 5, 485, DataStore.MyLang.Maptext[83]));
                                        UiDisplay.SideBars[0].Data = "$";
                                        SetTheTime(16, 0, 0);
                                    }
                                }

                                if (Temp04Missions.IWalks > 0)
                                    EntityClear.SimpleTracker();
                            }
                            else if (JobSeq == 3)
                            {
                                if (ReturnStuff.AmINear(Temp04Missions.WalkTo[Temp04Missions.IWalks], 1.5f))
                                {
                                    JobSeq++;
                                    EntityClear.RemoveTargets();
                                    Temp04Missions.IWalks++;
                                    DataStore.LiftDoor.Play();
                                    SearchFor.SlowFastTravel(Temp04Missions.WalkTo[Temp04Missions.IWalks], 180.8543f);
                                    EntityBuild.AddTarget(new BlipForm(Temp04Missions.Podium.V3, false, 5, 604, DataStore.MyLang.Maptext[84], 1f));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[212];
                                    if (Temp04Missions.MoveCorpse)
                                        EntityBuild.NPCSpawn(new PedFeat("s_m_y_valet_01", false, 0, 0), Temp04Missions.Podium);
                                }
                            }
                            else if (JobSeq == 4)
                            {
                                if (ReturnStuff.AmINear(Temp04Missions.Podium.V3, 1.50f))
                                {
                                    if (Temp04Missions.ShiftStart)
                                    {
                                        if (!ReturnStuff.BeRightOnTime(14, 21))
                                            Temp04Missions.ShiftStart = false;
                                        else
                                        {
                                            JobSeq++;
                                            if (Temp04Missions.MoveCorpse)
                                            {
                                                Temp04Missions.MoveCorpse = false;
                                                EntityClear.SimpleTracker();
                                            }
                                            iWait4Sec = Game.GameTime + RandomX.RandInt(800, 4500);
                                        }
                                    }
                                    else
                                    {
                                        if (Temp04Missions.Drivers.Count > 0)
                                        {
                                            JobSeq = 10;
                                            UiDisplay.bUiDisplay = true;
                                            EntityClear.RemoveTargets();
                                            int iVehPed = RandomX.RandInt(0, Temp04Missions.Drivers.Count - 1);
                                            Temp04Missions.Driver = Temp04Missions.Drivers[iVehPed];
                                            Temp04Missions.Car = MissionData.VehicleList_01[iVehPed];
                                            Temp04Missions.Driver.Position = Temp04Missions.WalkTo[Temp04Missions.WalkTo.Count - 1];
                                            EntityBuild.WalkThisWay(Temp04Missions.Driver, Temp04Missions.DriverWalkto, 1.00f);
                                        }
                                        else
                                        {
                                            JobSeq = 20;
                                            EntityClear.RemoveTargets();
                                            Temp04Missions.WalkTo.Reverse();
                                            Temp04Missions.IWalks = 0;
                                            EntityBuild.AddTarget(new BlipForm(Temp04Missions.WalkTo[Temp04Missions.IWalks], false, 5, 485, DataStore.MyLang.Maptext[83], 1f));
                                            Temp04Missions.Driver = EntityBuild.NPCSpawn(new PedFeat("s_m_y_valet_01"), Temp04Missions.WalkTo[Temp04Missions.IWalks], 0.00f);
                                            EntityBuild.WalkThisWay(Temp04Missions.Driver, Temp04Missions.DriverWalkto, 1.00f);
                                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[231];
                                        }
                                    }
                                }
                            }
                            else if (JobSeq == 5)
                            {
                                if (iWait4Sec < Game.GameTime)
                                {
                                    JobSeq++;
                                    int iVe = RandomX.RandInt(1, 5);
                                    Temp04Missions.Car = EntityBuild.VehicleSpawn(new VehMods(ReturnStuff.AddRandomVeh(iVe), 0), new Vector3(849.81f, -81.44f, 80.49f), 54.77f);
                                    if (RandomX.RandInt(0, 10) < 3)
                                        Temp04Missions.Driver = EntityBuild.NPCSpawn(new PedFeat("", false, 180, 12, 1, Temp04Missions.Car, 2, false, 0, ""), new Vector3(849.81f, -81.44f, 80.49f), 54.77f);
                                    else
                                        Temp04Missions.Driver = EntityBuild.NPCSpawn(new PedFeat(ReturnStuff.RandNPC(37), false, 180, 12, 1, Temp04Missions.Car, 2, false, 0, ""), new Vector3(849.81f, -81.44f, 80.49f), 54.77f);

                                    Temp04Missions.Driver.Task.DriveTo(Temp04Missions.Car, Temp04Missions.ParkHere, 3.00f, 15.00f, 536871355);
                                    Temp04Missions.Drivers.Add(new Ped(Temp04Missions.Driver.Handle));
                                }
                            }
                            else if (JobSeq == 6)
                            {
                                if (Temp04Missions.Driver.IsDead)
                                    JobSeq = 45;
                                else if (ReturnStuff.AreUNear(Temp04Missions.Car.Position, Temp04Missions.ParkHere, 1.75f))
                                {
                                    JobSeq++;
                                    EntityClear.RemoveTargets();
                                    Temp04Missions.Driver.Task.ClearAll();
                                    EntityBuild.GetOutofVeh(Temp04Missions.Driver, 1);
                                    EntityBuild.VehBlip(new BlipForm(3, DataStore.MyLang.Maptext[15]), Temp04Missions.Car);
                                    EntityBuild.WalkThisWay(Temp04Missions.Driver, Temp04Missions.WalkTo[Temp04Missions.WalkTo.Count - 1], 1.00f);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[213];
                                }
                                else if (Temp04Missions.Car.IsDamaged)
                                {
                                    JobSeq--;
                                    MissionData.PedList_01.Remove(Temp04Missions.Driver);
                                    Temp04Missions.Drivers.Remove(Temp04Missions.Driver);
                                    Temp04Missions.Driver.MarkAsNoLongerNeeded();
                                    MissionData.VehicleList_01.Remove(Temp04Missions.Car);
                                    Temp04Missions.Car.MarkAsNoLongerNeeded();
                                }
                            }
                            else if (JobSeq == 7)
                            {
                                if (Temp04Missions.Driver.IsDead)
                                    JobSeq = 45;
                                else if (ReturnStuff.AreUNear(Temp04Missions.Driver.Position, Temp04Missions.WalkTo[Temp04Missions.WalkTo.Count - 1], 1.5f))
                                {
                                    Temp04Missions.Driver.Task.ClearAll();
                                    Temp04Missions.Driver.Position = Temp04Missions.IntDoor.V3;
                                }
                                else if (Game.Player.Character.IsInVehicle(Temp04Missions.Car))
                                {
                                    JobSeq++;
                                    Temp04Missions.Car.CurrentBlip.Remove();
                                    EntityBuild.AddTarget(new BlipForm(Temp04Missions.ExGarage.V3, false, 5, 524, DataStore.MyLang.Maptext[85], 5f));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[214];
                                }
                            }
                            else if (JobSeq == 8)
                            {
                                if (ReturnStuff.AreUNear(Temp04Missions.ExGarage.V3, Temp04Missions.Car.Position, 2.50f))
                                {
                                    JobSeq++;
                                    EntityClear.RemoveTargets();
                                    EntityBuild.ResetVehPos(Temp04Missions.Car, Temp04Missions.InGarage);
                                    Temp04Missions.Driver.Task.ClearAll();
                                    Temp04Missions.Driver.Position = Temp04Missions.IntDoor.V3;
                                }
                                else if (!Game.Player.Character.IsInVehicle(Temp04Missions.Car))
                                {
                                    if (MissionData.Target_01 != null)
                                    {
                                        EntityClear.RemoveTargets();
                                        EntityBuild.VehBlip(new BlipForm(3, DataStore.MyLang.Maptext[15]), Temp04Missions.Car);
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[81];
                                    }
                                }
                                else
                                {
                                    if (MissionData.Target_01 == null)
                                    {
                                        Temp04Missions.Car.CurrentBlip.Remove();
                                        EntityBuild.AddTarget(new BlipForm(Temp04Missions.ExGarage.V3, false, 5, 524, DataStore.MyLang.Maptext[85], 5f));
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[214];
                                    }
                                    else
                                    {
                                        if (DataStore.MyAchivments.Temp04_MilesOnTheClock == 0)
                                        {
                                            if (ReturnStuff.RoadDistance(Temp04Missions.ExGarage.V3, Temp04Missions.ParkHere) + 500f < ReturnStuff.RoadDistance(Temp04Missions.ExGarage.V3, Temp04Missions.Car.Position))
                                                DataStore.MyAchivments.Temp04_MilesOnTheClock++;
                                        }
                                    }
                                }
                            }
                            else if (JobSeq == 9)
                            {
                                if (!Game.Player.Character.IsInVehicle(Temp04Missions.Car))
                                {
                                    JobSeq = 3;
                                    Temp04Missions.IWalks = Temp04Missions.WalkTo.Count - 2;
                                    EntityBuild.AddTarget(new BlipForm(Temp04Missions.WalkTo[Temp04Missions.IWalks], false, 5, 485, DataStore.MyLang.Maptext[83], 1f));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[215];
                                }
                            }
                            else if (JobSeq == 10)
                            {
                                if (Temp04Missions.Driver.IsDead)
                                    JobSeq = 45;
                                else if (ReturnStuff.AreUNear(Temp04Missions.Driver.Position, Temp04Missions.DriverWalkto, 2f))
                                {
                                    JobSeq++;
                                    EntityClear.RemoveTargets();
                                    EntityBuild.WalkThisWay(Temp04Missions.Driver, Temp04Missions.DriverWalkto2, 1.00f);
                                    Temp04Missions.IWalks = Temp04Missions.WalkTo.Count - 1;
                                    EntityBuild.AddTarget(new BlipForm(Temp04Missions.WalkTo[Temp04Missions.IWalks], false, 5, 485, DataStore.MyLang.Maptext[83], 1f));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[216];
                                }
                            }
                            else if (JobSeq == 11)
                            {
                                if (Temp04Missions.Driver.IsDead)
                                    JobSeq = 45;
                                else if (ReturnStuff.AmINear(Temp04Missions.WalkTo[Temp04Missions.IWalks], 1.5f))
                                {
                                    JobSeq++;
                                    DataStore.LiftDoor.Play();
                                    EntityClear.RemoveTargets();
                                    Temp04Missions.IWalks--;
                                    SearchFor.SlowFastTravel(Temp04Missions.WalkTo[Temp04Missions.IWalks], 180.8543f);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[213];
                                    Temp04Missions.Car.LightsOn = true;
                                    iWait4Sec = Game.GameTime + 4000;
                                }
                            }
                            else if (JobSeq == 12)
                            {
                                if (Temp04Missions.Car.IsDead)
                                    JobSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(Temp04Missions.Car))
                                {
                                    JobSeq++;
                                    EntityBuild.AddTarget(new BlipForm(Temp04Missions.OffRamp, false, 5, -1, DataStore.MyLang.Maptext[64], 5f));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[217];
                                }
                                else if (!Temp04Missions.Car.EngineRunning)
                                {
                                    if (iWait4Sec < Game.GameTime)
                                        Temp04Missions.Car.EngineRunning = true;
                                }
                            }
                            else if (JobSeq == 13)
                            {
                                if (ReturnStuff.AreUNear(Temp04Missions.OffRamp, Temp04Missions.Car.Position, 2.5f))
                                {
                                    JobSeq++;
                                    EntityClear.RemoveTargets();
                                    EntityBuild.ResetVehPos(Temp04Missions.Car, Temp04Missions.ExGarage);
                                    EntityBuild.AddTarget(new BlipForm(Temp04Missions.ParkHere, false, 5, -1, DataStore.MyLang.Maptext[75], 5f));
                                }
                                else if (!Game.Player.Character.IsInVehicle(Temp04Missions.Car))
                                {
                                    if (MissionData.Target_01 != null)
                                    {
                                        EntityClear.RemoveTargets();
                                        EntityBuild.VehBlip(new BlipForm(3, DataStore.MyLang.Maptext[15]), Temp04Missions.Car);
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[81];
                                    }
                                }
                                else
                                {
                                    if (MissionData.Target_01 == null)
                                    {
                                        Temp04Missions.Car.CurrentBlip.Remove();
                                        EntityBuild.AddTarget(new BlipForm(Temp04Missions.OffRamp, false, 5, -1, DataStore.MyLang.Maptext[64], 5f, -0.4f));
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[217];
                                    }
                                }
                            }
                            else if (JobSeq == 14)
                            {
                                if (Temp04Missions.Driver.IsDead)
                                    JobSeq = 45;
                                else if (ReturnStuff.AreUNear(Temp04Missions.Car.Position, Temp04Missions.ParkHere, 2.5f) && Temp04Missions.Car.IsStopped)
                                {
                                    JobSeq++;
                                    EntityClear.RemoveTargets();
                                    EntityBuild.AddTarget(new BlipForm(Temp04Missions.Podium.V3, false, 5, 604, DataStore.MyLang.Maptext[84], 1f));
                                    Game.Player.Character.Task.LeaveVehicle();
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[212];
                                    if (Temp04Missions.Car.Health < 850)
                                        EntityBuild.AttackThePlayer(Temp04Missions.Driver, false, false, true);
                                    else
                                        Temp04Missions.CashPay += RandomX.RandInt(10, 100);
                                    UiDisplay.SideBars[0].Data = "$" + ReturnStuff.ShowComs(Temp04Missions.CashPay, true, false);
                                    Script.Wait(2000);
                                    Temp04Missions.Driver.Task.ClearAll();
                                    EntityBuild.EnterAnyVeh(Temp04Missions.Car, Temp04Missions.Driver, 1, 1.00f);
                                }
                                else if (!Game.Player.Character.IsInVehicle(Temp04Missions.Car))
                                {
                                    if (MissionData.Target_01 != null)
                                    {
                                        EntityClear.RemoveTargets();
                                        EntityBuild.VehBlip(new BlipForm(3, DataStore.MyLang.Maptext[15]), Temp04Missions.Car);
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[81];
                                    }
                                }
                                else
                                {
                                    if (MissionData.Target_01 == null)
                                    {
                                        Temp04Missions.Car.CurrentBlip.Remove();
                                        EntityBuild.AddTarget(new BlipForm(Temp04Missions.ParkHere, false, 5, 280, DataStore.MyLang.Maptext[75], 5f));
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[212];
                                    }
                                }
                            }
                            else if (JobSeq == 15)
                            {
                                if (Temp04Missions.Driver.IsDead)
                                    JobSeq = 45;
                                else if (Temp04Missions.Driver.IsInVehicle(Temp04Missions.Car))
                                {
                                    JobSeq = 4;
                                    Temp04Missions.Drivers.Remove(Temp04Missions.Driver);
                                    MissionData.PedList_01.Remove(Temp04Missions.Driver);
                                    MissionData.VehicleList_01.Remove(Temp04Missions.Car);
                                    Temp04Missions.Car.MarkAsNoLongerNeeded();
                                    Temp04Missions.Driver.MarkAsNoLongerNeeded();
                                }
                            }
                            else if (JobSeq == 20)
                            {
                                if (ReturnStuff.AmINear(Temp04Missions.WalkTo[Temp04Missions.IWalks], 1.5f))
                                {
                                    EntityClear.RemoveTargets();
                                    Temp04Missions.IWalks++;
                                    if (Temp04Missions.IWalks == 1)
                                    {
                                        DataStore.LiftDoor.Play();
                                        SearchFor.SlowFastTravel(Temp04Missions.WalkTo[Temp04Missions.IWalks], 180.8543f);
                                        Temp04Missions.IWalks++;
                                        EntityBuild.AddTarget(new BlipForm(Temp04Missions.WalkTo[Temp04Missions.IWalks], false, 5, 485, DataStore.MyLang.Maptext[83], 1f));
                                    }
                                    else if (Temp04Missions.IWalks == 3)
                                    {
                                        DataStore.LiftDoor.Play();
                                        SearchFor.SlowFastTravel(Temp04Missions.WalkTo[Temp04Missions.IWalks], 180.8543f);
                                        Temp04Missions.IWalks++;
                                        EntityBuild.AddTarget(new BlipForm(Temp04Missions.WalkTo[Temp04Missions.IWalks], false, 5, 73, DataStore.MyLang.Maptext[81], 1f));
                                        TempAgency_04_CasDoors();
                                    }
                                    else if (Temp04Missions.IWalks == 5)
                                    {
                                        if (Temp04Missions.Uniform != null)
                                            EntityBuild.PedDresser(Game.Player.Character, Temp04Missions.Outfit);
                                        EntityBuild.AddTarget(new BlipForm(Temp04Missions.WalkTo[Temp04Missions.IWalks], false, 5, 110, DataStore.MyLang.Maptext[82], 1f));
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[232];
                                    }
                                    else
                                    {
                                        JobSeq++;
                                        ReturnWeaps();
                                        for (int i = 0; i < MissionData.PropList_01.Count; i++)
                                            EntityLog.CleanUp(MissionData.PropList_01[i], true);
                                        MissionData.PropList_01.Clear();
                                        EntityBuild.AddTarget(new BlipForm(Temp04Missions.IntDoor.V3, false, 5, 485, DataStore.MyLang.Maptext[83], 1f, -1f));
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[233];
                                    }
                                }
                            }
                            else if (JobSeq == 21)
                            {
                                if (ReturnStuff.AmINear(Temp04Missions.IntDoor.V3, 1.5f))
                                {
                                    SearchFor.SlowFastTravel(Temp04Missions.ExtDoor, 180.8543f);
                                    NSBanking.NSCoinInvestments(true, 6, 10, "Diamond Resort");
                                    MissionEnd(TempAgency_Awards(Temp04Missions.CashPay, true));
                                }

                            }
                            else if (JobSeq == 45)
                            {
                                if (Temp04Missions.Uniform != null)
                                    EntityBuild.PedDresser(Game.Player.Character, Temp04Missions.Outfit);
                                NSBanking.NSCoinInvestments(false, 9, 15, "Diamond Resort");
                                GameOverFail(false);
                                ReturnWeaps();
                            }
                        }       //Cas Valey
                        else if (LocationX == 5)
                        {
                            if (JobSeq == 0)
                            {
                                JobSeq++;
                                if (DataStore.MySettings.FastTraveltoStart)
                                    SearchFor.SlowFastTravel(MissionData.vFuMiss, 0.00f);
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[237];
                            }
                            else if (JobSeq == 1)
                            {
                                if (ReturnStuff.AmINear(FubarMissions.Start.PedHere.V3, 1.5f) && !Game.Player.Character.IsInVehicle())
                                {
                                    JobSeq++;
                                    EntityClear.RemoveTargets();
                                    Game.FadeScreenOut(1000);
                                    LoadInteriorSpace(253, new Vector4(470.9575f, 4800.104f, -58.39392f, 281.5342f), 1, true);
                                    SearchFor.SlowFastTravel(new Vector4(470.9575f, 4800.104f, -58.39392f, 281.5342f));
                                    EntityBuild.WarptoAnyVeh(MissionData.MishVeh, Game.Player.Character, 1);
                                    UiDisplay.sSubDisplay = "";
                                    JobType = 11;
                                }
                            }
                            else if (JobSeq == 45)
                            {
                                GameOverFail(false);
                            }
                        }       //Bmx Facility
                        else
                        {
                            if (JobSeq == 0)
                            {
                                JobSeq++;
                                MissionData.iUltPed01 = 0;
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[219];
                                if (DataStore.MySettings.FastTraveltoStart)
                                    SearchFor.SlowFastTravel(Temp06Missions.ExDoor, 0.00f);
                            }
                            else if (JobSeq == 1)
                            {
                                if (ReturnStuff.AmINear(Temp06Missions.ExDoor, 1.95f) && !Game.Player.Character.IsInVehicle())
                                {
                                    JobSeq++;
                                    EntityClear.RemoveTargets();
                                    SearchFor.SlowFastTravel(Temp06Missions.InDoor);
                                    TempAgency_06_AddVehs();
                                    EntityBuild.PedBlimp(new BlipForm(3, DataStore.MyLang.Maptext[95]), Temp06Missions.Gaffer);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[220];
                                }
                            }
                            else if (JobSeq == 2)
                            {
                                if (ReturnStuff.AmINear(Temp06Missions.Gaffer.Position, 1.5f) && !Game.Player.Character.IsInVehicle())
                                {
                                    JobSeq++;
                                    Temp06Missions.Gaffer.CurrentBlip.Remove();
                                    TempAgency_06_GoFetch(1);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[224];
                                }
                                else if (MissionData.iUltPed01 == 0)
                                    EntityClear.SimpleTracker();
                                else
                                    JobSeq = 45;
                            }
                            else if (JobSeq == 3)
                            {
                                if (ReturnStuff.AreUNear(Temp06Missions.Truck.Position, Temp06Missions.TruckEnd, 5f))
                                {
                                    JobSeq++;
                                    EntityClear.RemoveTargets();
                                    EntityBuild.GetOutofVeh(Game.Player.Character, 1);
                                    EntityBuild.PedBlimp(new BlipForm(3, DataStore.MyLang.Maptext[97]), Temp06Missions.Tech);
                                    if (Temp06Missions.Truck.CurrentBlip.Exists())
                                        Temp06Missions.Truck.CurrentBlip.Remove();
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[221];
                                }
                                else
                                {
                                    if (Game.Player.Character.IsInVehicle(Temp06Missions.Truck) || Temp06Missions.Truck.IsAttached())
                                    {
                                        if (MissionData.Target_01 == null)
                                        {
                                            Temp06Missions.Truck.CurrentBlip.Remove();
                                            EntityBuild.AddTarget(new BlipForm(Temp06Missions.TruckEnd, true, 5, -1, DataStore.MyLang.Maptext[95], 5f));
                                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[225];
                                        }
                                    }
                                    else
                                    {
                                        if (MissionData.Target_01 != null)
                                        {
                                            EntityClear.RemoveTargets();
                                            EntityBuild.VehBlip(new BlipForm(3, Temp06Missions.ItemName), Temp06Missions.Truck);
                                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[224];
                                        }
                                    }

                                    if (MissionData.iUltPed01 == 0)
                                        EntityClear.SimpleTracker();
                                    else
                                        JobSeq = 45;
                                }
                            }
                            else if (JobSeq == 4)
                            {
                                if (ReturnStuff.AmINear(Temp06Missions.Tech.Position, 1.5f) && !Game.Player.Character.IsInVehicle())
                                {
                                    JobSeq++;
                                    Temp06Missions.Tech.CurrentBlip.Remove();
                                    TempAgency_06_GoFetch(2);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[224];
                                }
                                else if (MissionData.iUltPed01 == 0)
                                    EntityClear.SimpleTracker();
                                else
                                    JobSeq = 45;
                            }
                            else if (JobSeq == 5)
                            {
                                if (ReturnStuff.PickupBling(Temp06Missions.Pop01))
                                {
                                    JobSeq++;
                                    EntityClear.RemoveTargets();
                                    Temp06Missions.Pop01 = null;
                                    EntityBuild.PedBlimp(new BlipForm(3, DataStore.MyLang.Maptext[96]), Temp06Missions.Tech);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[226];
                                }
                                else if (MissionData.iUltPed01 == 0)
                                    EntityClear.SimpleTracker();
                                else
                                    JobSeq = 45;
                            }
                            else if (JobSeq == 6)
                            {
                                if (ReturnStuff.AmINear(Temp06Missions.Tech.Position, 1.5f) && !Game.Player.Character.IsInVehicle())
                                {
                                    JobSeq++;
                                    Temp06Missions.Tech.CurrentBlip.Remove();
                                    EntityBuild.PedBlimp(new BlipForm(3, DataStore.MyLang.Maptext[97]), Temp06Missions.Sci);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[222];
                                }
                                else if (MissionData.iUltPed01 == 0)
                                    EntityClear.SimpleTracker();
                                else
                                    JobSeq = 45;
                            }
                            else if (JobSeq == 7)
                            {
                                if (ReturnStuff.AmINear(Temp06Missions.Sci.Position, 1.5f) && !Game.Player.Character.IsInVehicle())
                                {
                                    Temp06Missions.Sci.CurrentBlip.Remove();
                                    TempAgency_06_GoFetch(3);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[224];
                                    JobSeq++;
                                }
                                else if (MissionData.iUltPed01 == 0)
                                    EntityClear.SimpleTracker();
                                else
                                    JobSeq = 45;
                            }
                            else if (JobSeq == 8)
                            {
                                if (ReturnStuff.PickupBling(Temp06Missions.Pop02))
                                {
                                    JobSeq++;
                                    EntityClear.RemoveTargets();
                                    Temp06Missions.Pop02 = null;
                                    EntityBuild.PedBlimp(new BlipForm(66, DataStore.MyLang.Maptext[97]), Temp06Missions.Sci);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[227];
                                }
                                else if (MissionData.iUltPed01 == 0)
                                    EntityClear.SimpleTracker();
                                else
                                    JobSeq = 45;
                            }
                            else if (JobSeq == 9)
                            {
                                if (ReturnStuff.AmINear(Temp06Missions.Sci.Position, 1.5f) && !Game.Player.Character.IsInVehicle())
                                {
                                    JobSeq++;
                                    Temp06Missions.Sci.CurrentBlip.Remove();
                                    TempAgency_06_PlayerAttacks();
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[228];
                                }
                                else if (MissionData.iUltPed01 == 0)
                                    EntityClear.SimpleTracker();
                                else
                                    JobSeq = 45;
                            }
                            else if (JobSeq == 10)
                            {
                                TempAgency_06_PlayerBrains();
                                if (MultiPed.Count == 0)
                                    JobSeq += 1;
                            }
                            else if (JobSeq == 11)
                            {
                                if (!Temp06Missions.FailedTarget)
                                    DataStore.MyAchivments.Temp06_StopTheClock++;
                                int iCash = 50000;
                                DataStore.MyLang.Mistext[224] = Temp06Missions.DisplayName;
                                Vehicle Truster = EntityBuild.VehicleSpawn(new VehMods("thruster"), Temp06Missions.BAckDoor);
                                Truster.EngineRunning = true;
                                EntityBuild.WarptoAnyVeh(Truster, Game.Player.Character, 1);
                                MissionEnd(TempAgency_Awards(iCash, true));
                            }
                            else if (JobSeq == 45)
                            {
                                if (JobSeq > 1)
                                    SearchFor.SlowFastTravel(Temp06Missions.ExDoor, 0.00f);
                                DataStore.MyLang.Mistext[224] = Temp06Missions.DisplayName;
                                GameOverFail(false);
                            }
                        }       //PPaleto Labs
                    }       //TempAgency
                    else if (JobType == 25)
                    {
                        if (JobSeq == 0)
                        {
                            JobSeq++;
                            Game.FadeScreenOut(1000);
                            Script.Wait(1001);
                            Parra_Load();
                            FreeFallMissions.Plane.FreezePosition = false;
                            Game.FadeScreenIn(1000);
                            Function.Call(Hash.SET_VEHICLE_POPULATION_BUDGET, 0);
                            Function.Call(Hash.SET_PED_POPULATION_BUDGET, 0);
                            Function.Call(Hash.SET_FAR_DRAW_VEHICLES, false);
                            FreeFallMissions.PlaneTime = Game.GameTime + 5000;//timer0
                        }
                        else if (JobSeq == 1)
                        {
                            if (FreeFallMissions.Plane.IsDead)
                                JobSeq = 45;
                            else if (FreeFallMissions.PlaneTime < Game.GameTime)
                            {
                                JobSeq++;
                                Function.Call(Hash.SET_VEHICLE_DOOR_OPEN, FreeFallMissions.Plane.Handle, 5, false, false);
                                EntityBuild.AddTarget(new BlipForm(FreeFallMissions.DropPoint, false, 5, FreeFallMissions.BlipArea, new BlipForm(FreeFallMissions.DropPoint, false, 5, 550, DataStore.MyLang.Maptext[122])));
                                FreeFallMissions.PlaneTime = Game.GameTime + 500;
                            }
                        }
                        else if (JobSeq == 2)
                        {
                            if (FreeFallMissions.Plane.IsDead)
                                JobSeq = 45;
                            else if (ReturnStuff.AreUNear(FreeFallMissions.Plane.Position, FreeFallMissions.DropPoint, 1750f))
                            {
                                JobSeq++;
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[234];
                            }
                        }
                        else if (JobSeq == 3)
                        {
                            UiDisplay.ControlerUI(DataStore.MyLang.Context[29], 1);

                            if (FreeFallMissions.Plane.IsDead)
                                JobSeq = 45;
                            else if (Game.IsControlPressed(2, GTA.Control.Context))
                            {
                                JobSeq++;
                                FreeFallMissions.Plane.HasCollision = false;
                                Game.Player.Character.Task.ClearAnimation("amb@code_human_in_bus_passenger_idles@male@sit@base", "base");
                                Game.Player.Character.Detach();
                                Game.Player.Character.FreezePosition = false;
                                FreeFallMissions.PlaneTime = Game.GameTime + 5000;
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[235];
                            }
                            else
                                FreeFallMissions.PlaneTime = Game.GameTime + 500;

                            if (iWait4Sec < Game.GameTime)
                                Parra_Jump(true);
                        }
                        else if (JobSeq == 4)
                        {
                            if (FreeFallMissions.PlaneTime < Game.GameTime)
                            {
                                if (Function.Call<int>(Hash.GET_PED_PARACHUTE_STATE, Game.Player.Character.Handle) == -1)
                                {
                                    JobSeq++;
                                    UiDisplay.bUiDisplay = true;
                                    FreeFallMissions.MissionTime = Game.GameTime + FreeFallMissions.Set01;
                                }
                            }

                            EntityClear.ClearTheWay(true, false);

                            Parra_Jump(false);
                        }
                        else if (JobSeq == 5)
                        {
                            if (FreeFallMissions.BlipArea > 51)
                            {
                                if (FreeFallMissions.MissionTime < Game.GameTime)
                                {
                                    if (FreeFallMissions.Set01 > 5001)
                                        FreeFallMissions.Set01 -= 5000;

                                    if (FreeFallMissions.BlipArea < 1000)
                                    {
                                        EntityClear.RemoveTargets();
                                        FreeFallMissions.MissionTime = Game.GameTime + FreeFallMissions.Set01;

                                        if (FreeFallMissions.Set01 < 4999)
                                            FreeFallMissions.Set01 = 5000;

                                        FreeFallMissions.BlipArea -= 50;
                                        if (FreeFallMissions.BlipArea < 50)
                                            FreeFallMissions.BlipArea = 50;
                                        EntityBuild.AddTarget(new BlipForm(FreeFallMissions.DropPoint, false, 5, FreeFallMissions.BlipArea, new BlipForm(FreeFallMissions.DropPoint, false, 5, 550, DataStore.MyLang.Maptext[122])));
                                    }
                                    else
                                    {
                                        EntityClear.RemoveTargets();
                                        FreeFallMissions.MissionTime = Game.GameTime + FreeFallMissions.Set01;
                                        if (FreeFallMissions.Set01 > 9999)
                                            FreeFallMissions.Set01 -= 7500;
                                        FreeFallMissions.BlipArea -= 500;
                                        EntityBuild.AddTarget(new BlipForm(FreeFallMissions.DropPoint, false, 5, FreeFallMissions.BlipArea, new BlipForm(FreeFallMissions.DropPoint, false, 5, 550, DataStore.MyLang.Maptext[122])));
                                    }
                                }
                                UiDisplay.SideBars[0].Data = ReturnStuff.ShowComs(FreeFallMissions.MissionTime - Game.GameTime, false, false);
                            }
                            else
                                UiDisplay.SideBars[0].Data = "--:--";

                            if (FreeFallMissions.OutCorrona)
                            {
                                if (ReturnStuff.AmINear(FreeFallMissions.DropPoint, FreeFallMissions.BlipArea))
                                {
                                    FreeFallMissions.OutCorrona = false;
                                    EntityClear.RemoveTargets();
                                    EntityBuild.AddTarget(new BlipForm(FreeFallMissions.DropPoint, false, 5, FreeFallMissions.BlipArea, new BlipForm(FreeFallMissions.DropPoint, false, 5, 550, DataStore.MyLang.Maptext[122])));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[235];
                                }
                                else if (FreeFallMissions.PlaneTime < Game.GameTime)
                                    JobSeq = 45;
                            }
                            else
                            {
                                if (!FreeFallMissions.OutCorrona)
                                {
                                    if (ReturnStuff.AmIFar(FreeFallMissions.DropPoint, FreeFallMissions.BlipArea))
                                    {
                                        FreeFallMissions.OutCorrona = true;
                                        EntityClear.RemoveTargets();
                                        EntityBuild.AddTarget(new BlipForm(FreeFallMissions.DropPoint, false, 5, FreeFallMissions.BlipArea, new BlipForm(FreeFallMissions.DropPoint, false, 5, 550, DataStore.MyLang.Maptext[122])));
                                        FreeFallMissions.PlaneTime = Game.GameTime + 10000;
                                        UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[236];
                                    }
                                }
                            }

                            if (FreeFallMissions.CarWeap)
                            {
                                if (Game.Player.Character.IsInVehicle())
                                {
                                    Game.Player.Character.CurrentVehicle.CurrentBlip.Remove();
                                    FreeFallMissions.CarWeap = false;
                                    FreeFallMissions.OutCar = true;
                                    EntityBuild.ArmsRegulator(Game.Player.Character, 5);
                                }
                            }
                            else if (FreeFallMissions.OutCar)
                            {
                                if (ReturnStuff.AmINear(FreeFallMissions.DropPoint, 35f))
                                {
                                    FreeFallMissions.OutCar = false;
                                    Parra_CarLocks();
                                }
                            }

                            EntityClear.ClearTheWay(true, false);

                            Parra_Jump(false);

                            if (Game.Player.WantedLevel > 0)
                                Game.Player.WantedLevel = 0;
                        }
                        else if (JobSeq == 6)
                        {
                            Parra_RemoveShit();
                            NSBanking.NSCoinInvestments(true, 12, 22, "Epic Shares");
                            Parra_AddAwards();
                            MissionEnd(Parra_Awards(FreeFallMissions.CashPay, true));
                        }
                        else if (JobSeq == 45)
                        {
                            Parra_RemoveShit();
                            Game.Player.Character.FreezePosition = false;
                            GameOverFail(false);
                        }
                    }       //ParaDisplay
                    else if (JobType == 26)
                    {
                        if (JobSeq == 0)
                        {
                            JobSeq++;
                            if (DataStore.MySettings.FastTraveltoStart)
                                SearchFor.SlowFastTravel(MissionData.vFuMiss, 0.00f);

                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[229];
                        }
                        else if (JobSeq == 1)
                        {
                            if (ReturnStuff.AmINear(DellWhoMissions.Start.PedHere.V3, 1.5f))
                            {
                                JobSeq++;
                                EntityClear.RemoveTargets();
                                Game.FadeScreenOut(1000);
                                Script.Wait(1000);

                                if (!DellWhoMissions.Uniform)
                                {
                                    Deliverwho_Backpack();
                                }

                                MissionData.vFuMiss = (DellWhoMissions.End.ParkHere.V3);
                                Game.Player.Character.Heading += 180.00f;
                                Game.FadeScreenIn(1000);
                                EntityBuild.AddTarget(new BlipForm(DellWhoMissions.End.PedHere.V3, true, 5, 480, DataStore.MyLang.Maptext[75]));
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[230];
                            }
                        }
                        else if (JobSeq == 2)
                        {
                            if (ReturnStuff.AmINear(DellWhoMissions.End.PedHere.V3, 75.5f))
                            {
                                JobSeq++;
                                DellWhoMissions.MyDel = EntityBuild.NPCSpawn(new PedFeat(ReturnStuff.RandNPC(RandomX.RandInt(1, 54)), false, 150, 11, 0, null, 0, false, 0, ""), DellWhoMissions.End.PedHere);

                                if (Game.Player.Character.IsInVehicle())
                                {
                                    if (Game.Player.Character.CurrentVehicle.ClassType == VehicleClass.Cycles)
                                        DellWhoMissions.Bike = true;
                                    else if (Game.Player.Character.SeatIndex == VehicleSeat.Passenger)
                                        DellWhoMissions.Fuoobd = true;
                                }
                            }
                        }
                        else if (JobSeq == 3)
                        {
                            if (DellWhoMissions.MyDel.IsDead || DellWhoMissions.MyDel.IsFleeing)
                                JobSeq = 45;
                            else if (ReturnStuff.AmINear(DellWhoMissions.MyDel.Position, 1.5f))
                            {

                                for (int i = 0; i < MissionData.PedList_01.Count; i++)
                                    EntityLog.CleanUp(MissionData.PedList_01[i], false);
                                MissionData.PedList_01.Clear();
                                EntityClear.RemoveTargets();
                                UiDisplay.sSubDisplay = "";
                                ControlSelect(11);
                            }
                        }
                        else if (JobSeq == 45)
                        {
                            EntityBuild.PedDresser(Game.Player.Character, DellWhoMissions.Wear);
                            GameOverFail(false);
                        }
                    }       //dELIVERWHO
                    else if (JobType == 101)
                    {
                        if (JobSeq == 0)
                        {
                            JobSeq++;
                            if (DataStore.MySettings.FastTraveltoStart)
                                EntityBuild.WarptoAnyVeh(PackManMissions.DeliverVeh, Game.Player.Character, 1);

                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[10];
                        }
                        else if (JobSeq == 1)
                        {
                            if (PackManMissions.DeliverVeh.IsDead)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(PackManMissions.DeliverVeh))
                            {
                                JobSeq++;
                                PackManMissions.CurrentPack = PackManMissions.Packlist[PackManMissions.PackDeliv];
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[13];
                                EntityBuild.AddTarget(new BlipForm(PackManMissions.CurrentPack, true, 5, 478, DataStore.MyLang.Maptext[42], 1f, -1f));
                                UiDisplay.bUiDisplay = true;
                            }
                            else if (!PackManMissions.DeliverVeh.CurrentBlip.Exists())
                            {
                                EntityBuild.VehBlip(new BlipForm(5, DataStore.MyLang.Maptext[3]), PackManMissions.DeliverVeh);
                            }
                            else if (ReturnStuff.AmINear(PackManMissions.DeliverVeh.Position, 35f))
                            {
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[12];
                            }
                            else
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[10];

                            if (!PackManMissions.FirstPack)
                            {
                                if (PackManMissions.Timer02 > Game.GameTime)
                                {
                                    int iTotal = PackManMissions.Timer02 - Game.GameTime;
                                    UiDisplay.SideBars[1].Data = ReturnStuff.ShowComs(iTotal, false, false);
                                }
                                else
                                {
                                    JobSeq = 4;
                                    EntityClear.RemoveTargets();
                                }
                            }
                        }
                        else if (JobSeq == 2)
                        {
                            if (PackManMissions.DeliverVeh.IsDead)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle())
                            {
                                if (PackManMissions.DeliverVeh.CurrentBlip.Exists())
                                    PackManMissions.DeliverVeh.CurrentBlip.Remove();
                            }
                            else if (!PackManMissions.DeliverVeh.CurrentBlip.Exists())
                            {
                                EntityBuild.VehBlip(new BlipForm(5, DataStore.MyLang.Maptext[3]), PackManMissions.DeliverVeh);
                            }
                            else if (ReturnStuff.AmINear(PackManMissions.CurrentPack, 2f) && Game.Player.Character.IsOnFoot && ReturnStuff.BeInRange(Game.Player.Character.Position.Z, PackManMissions.CurrentPack.Z, 0.50f))
                            {
                                JobSeq++;
                                EntityClear.RemoveTargets();
                                if (PackManMissions.FirstPack)
                                {
                                    PackManMissions.FirstPack = false;
                                    PackManMissions.Timer02 = Game.GameTime + PackManMissions.Timer01;
                                }
                                iWait4Sec = Game.GameTime + 2000;
                                PackManMissions.PackDeliv++;
                                Game.Player.Character.Task.PlayAnimation("anim@mp_fireworks", "place_firework_3_box", 8.00f, 3000, true, 1.00f);
                            }

                            if (!PackManMissions.FirstPack)
                            {
                                if (PackManMissions.Timer02 > Game.GameTime)
                                {

                                    UiDisplay.SideBars[0].Data = "" + PackManMissions.PackDeliv + "/" + PackManMissions.PackCount + "";

                                    int iTotal = PackManMissions.Timer02 - Game.GameTime;
                                    UiDisplay.SideBars[1].Data = ReturnStuff.ShowComs(iTotal, false, false);
                                }
                                else
                                {
                                    JobSeq = 4;
                                    EntityClear.RemoveTargets();
                                }
                            }
                        }
                        else if (JobSeq == 3)
                        {
                            if (iWait4Sec < Game.GameTime)
                            {
                                EntityBuild.BuildProp(PackManMissions.Typelist[PackManMissions.PackDeliv - 1], ReturnStuff.AlterZHight(PackManMissions.CurrentPack, -1.00f), Vector3.Zero, false, false);

                                if (PackManMissions.PackDeliv == PackManMissions.PackCount)
                                {
                                    JobSeq = 4;
                                    PackManMissions.Timer02 += 45000;
                                }
                                else
                                {
                                    JobSeq = 1;
                                    PackManMissions.Timer02 += 25000;
                                }

                                UiDisplay.SideBars[0].Data = "" + PackManMissions.PackDeliv + "/" + PackManMissions.PackCount + "";
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[12];
                            }
                        }
                        else if (JobSeq == 4)
                        {
                            if (PackManMissions.DeliverVeh.IsDead)
                                JobSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(PackManMissions.DeliverVeh))
                            {
                                if (MissionData.Target_01 == null)
                                {
                                    PackManMissions.DeliverVeh.CurrentBlip.Remove();
                                    EntityBuild.AddTarget(new BlipForm(PackManMissions.MyPacks.PackVeh.V3, true, 5, 478, DataStore.MyLang.Maptext[42], PackManMissions.CoronaSize, -1f));
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[14];
                                }
                                else if (PackManMissions.MoveYourV)
                                {
                                    if (ReturnStuff.AmINear(PackManMissions.MyPacks.PackVeh.V3, 60f))
                                    {
                                        EntityBuild.MoveThatCar(PackManMissions.MyPacks.PackVeh.V3);
                                        PackManMissions.MoveYourV = false;
                                    }
                                }
                                else if (ReturnStuff.AreUNear(PackManMissions.MyPacks.PackVeh.V3, PackManMissions.DeliverVeh.Position, PackManMissions.CoronaSize))
                                {
                                    JobSeq = 5;
                                    EntityClear.RemoveTargets();
                                    EntityBuild.GetOutofVeh(Game.Player.Character, 2);
                                    PackManMissions.DeliverVeh.LockStatus = VehicleLockStatus.Locked;
                                    UiDisplay.sSubDisplay = "";
                                }
                            }
                            else
                            {
                                if (MissionData.Target_01 != null)
                                {
                                    EntityClear.RemoveTargets();
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[12];
                                    EntityBuild.VehBlip(new BlipForm(66, DataStore.MyLang.Maptext[3]), PackManMissions.DeliverVeh);
                                }
                            }

                            if (PackManMissions.Timer02 > Game.GameTime)
                            {
                                int iTotal = PackManMissions.Timer02 - Game.GameTime;
                                UiDisplay.SideBars[1].Data = ReturnStuff.ShowComs(iTotal, false, false);
                            }
                        }
                        else if (JobSeq == 5)
                        {
                            bool bDone = false;
                            PackManMissions.Timer02 -= Game.GameTime;
                            if (PackManMissions.PackDeliv == PackManMissions.PackCount)
                                bDone = true;
                            Packages_AddingAwards(bDone);
                            MissionEnd(Packages_Awards(PackManMissions.PackDeliv, PackManMissions.PackCount, PackManMissions.Timer02, true));
                        }
                        else if (JobSeq == 45)
                        {
                            GameOverFail(false);
                        }
                    }      //Cayo Packages
                    else if (JobType == 102)
                    {
                        if (JobSeq == 0)
                        {
                            JobSeq++;
                            EntityBuild.AddTarget(new BlipForm(CayFolMissions.RunHere, false, 5, 75.00f, new BlipForm(CayFolMissions.RunHere, true, 5, 66, DataStore.MyLang.Maptext[26])));
                            CayFolMissions.TargetPed = EntityBuild.NPCSpawn(new PedFeat(false, 0, ""), CayFolMissions.RunHere, 0.00f);

                            if (DataStore.MySettings.FastTraveltoStart)
                                SearchFor.SlowFastTravel(CayFolMissions.MyStart[0], 0.00f);

                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[174];
                        }
                        else if (JobSeq == 1)
                        {
                            if (CayFolMissions.TargetPed.IsDead || UiDisplay.SideBars[0].Percent > 0.95f)
                                JobSeq = 45;
                            else if (ReturnStuff.AreUNear(CayFolMissions.TargetPed.Position, CayFolMissions.RunHere, 2.5f))
                            {
                                CayFolMissions.iPlace++;
                                if (ReturnStuff.PedRunToFoward(CayFolMissions.TargetPed, CayFolMissions.MyStart, CayFolMissions.iPlace, 2.00f))
                                    CayFolMissions.RunHere = CayFolMissions.MyStart[CayFolMissions.iPlace];
                                else
                                {
                                    if (!CayFolMissions.Sneaky)
                                        JobSeq = 45;
                                    else
                                    {
                                        JobSeq++;
                                        CayFolMissions.iPlace = 0;
                                        ReturnStuff.PedRunToFoward(CayFolMissions.TargetPed, CayFolMissions.MyEnd, CayFolMissions.iPlace, 2.00f);
                                        CayFolMissions.RunHere = CayFolMissions.MyEnd[CayFolMissions.iPlace];
                                    }
                                }
                            }
                            else if (!CayFolMissions.Sneaky)
                            {
                                if (ReturnStuff.AmINear(CayFolMissions.TargetPed.Position, 55f))
                                {
                                    CayFolMissions.Sneaky = true;
                                    if (CayFolMissions.DoOnce)
                                        EntityClear.RemoveTargets();
                                    Hitman_AddVisionCones(CayFolMissions.TargetPed);
                                    UiDisplay.bUiDisplay = true;
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[175];
                                }
                                else if (CayFolMissions.DoOnce)
                                {
                                    if (ReturnStuff.AreUFar(CayFolMissions.TargetPed.Position, CayFolMissions.MyStart[1], 75.00f))
                                    {
                                        CayFolMissions.DoOnce = false;
                                        EntityClear.RemoveTargets();
                                    }
                                }
                            }
                            else if (ReturnStuff.BeenSpotted(CayFolMissions.TargetPed, Game.Player.Character, true))
                                UiDisplay.SideBars[0].Percent += 0.01f;
                            else
                                UiDisplay.SideBars[0].Percent = UiDisplay.SpookBarzPed(CayFolMissions.TargetPed);

                            if (iWait4Sec < Game.GameTime)
                                KeepMoving(CayFolMissions.TargetPed, CayFolMissions.RunHere, 2500);
                        }
                        else if (JobSeq == 2)
                        {
                            if (CayFolMissions.TargetPed.IsDead || UiDisplay.SideBars[0].Percent > 0.95)
                                JobSeq = 45;
                            else if (ReturnStuff.AreUNear(CayFolMissions.TargetPed.Position, CayFolMissions.RunHere, 2.5f))
                            {
                                CayFolMissions.iPlace += 1;
                                if (ReturnStuff.PedRunToFoward(CayFolMissions.TargetPed, CayFolMissions.MyEnd, CayFolMissions.iPlace, 2.00f))
                                    CayFolMissions.RunHere = CayFolMissions.MyEnd[CayFolMissions.iPlace];
                                else
                                {
                                    JobSeq++;
                                    CayFolMissions.Sneaky = false;
                                    UiDisplay.bUiDisplay = false;
                                    EntityBuild.PedScenario(CayFolMissions.TargetPed, "WORLD_HUMAN_MOBILE_FILM_SHOCKING", CayFolMissions.TargetPed.Position, CayFolMissions.EndHead, false);
                                    iWait4Sec = Game.GameTime + 15000;
                                }
                            }
                            else if (ReturnStuff.BeenSpotted(CayFolMissions.TargetPed, Game.Player.Character, true))
                                UiDisplay.SideBars[0].Percent += 0.01f;
                            else
                                UiDisplay.SideBars[0].Percent = UiDisplay.SpookBarzPed(CayFolMissions.TargetPed);
                            
                            if (iWait4Sec < Game.GameTime)
                                KeepMoving(CayFolMissions.TargetPed, CayFolMissions.RunHere, 2500);
                        }
                        else if (JobSeq == 3)
                        {
                            if (CayFolMissions.TargetPed.IsDead)
                            {
                                if (CayFolMissions.TargetPed.WasKilledByStealth)
                                    JobSeq++;
                                else
                                    JobSeq = 45;
                            }
                            else if (iWait4Sec < Game.GameTime)
                            {
                                CayFolMissions.TargetPed.Task.FleeFrom(Game.Player.Character);
                                JobSeq = 45;
                            }
                            if (Function.Call<bool>(Hash.GET_PED_STEALTH_MOVEMENT, Game.Player.Character.Handle))
                                UiDisplay.ControlerUI(DataStore.MyLang.Context[19], 1);
                            else
                                UiDisplay.ControlerUI(DataStore.MyLang.Context[20], 1);
                        }
                        else if (JobSeq == 4)
                        {
                            CayFolMissions.TargetPed.CanRagdoll = false;
                            Hitman_RemoveVisionCones();
                            SearchFor.SlowFastTravel(CayFolMissions.HangingTree02);
                            CayFolMissions.TargetPed.CanRagdoll = true;
                            CayFolMissions.TargetPed.Position = CayFolMissions.HangingTree01;
                            MissionEnd(Follow_Awards(0, true));
                        }
                        else if (JobSeq == 45)
                        {
                            Hitman_RemoveVisionCones();
                            GameOverFail(false);
                        }
                    }      //Cayo Follow
                    else if (JobType == 103)
                    {
                        JobType = 11;
                    }      //CayoRace--Directed to JobType == 11
                    else if (JobType == 104)
                    {
                        JobType = 13;
                    }      //Assassination--Directed to JobType == 13
                    else if (JobType == 105)
                    {
                        if (CayHeiMissions.DontShoot)
                        {
                            if (Game.Player.Character.IsShooting)
                                CayHeiMissions.DontShoot = false;
                        }

                        if (JobSeq == 0)
                        {
                            JobSeq++;
                            if (DataStore.MySettings.FastTraveltoStart)
                                SearchFor.SlowFastTravel(CayHeiMissions.Chopper.Position + (CayHeiMissions.Chopper.RightVector * 3.00f), 0.00f);
                            UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[26];
                        }
                        else if (JobSeq == 1)
                        {
                            if (CayHeiMissions.Pilot.IsDead || CayHeiMissions.Juan.IsDead || CayHeiMissions.Chopper.IsDead)
                                JobSeq = 45;
                            else if (!Game.Player.Character.IsInVehicle())
                            {
                                if (ReturnStuff.AmINear(CayHeiMissions.Chopper.Position, 60f))
                                {
                                    UiDisplay.ControlerUI(DataStore.MyLang.Context[27], 1);
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[27];
                                    if (ReturnStuff.AmINear(CayHeiMissions.Chopper.Position, 10f) && Game.IsControlPressed(2, GTA.Control.VehicleExit))
                                    {
                                        EntityBuild.WarptoAnyVeh(CayHeiMissions.Chopper, Game.Player.Character, 3);
                                        if (CayHeiMissions.MyStart == 1)
                                            CayHeiMissions.ExcapeVeh = EntityBuild.VehicleSpawn(new VehMods("DINGHY", 15, false), CayHeiMissions.ThiefBoat.Start, 69.74284f);
                                        else if (CayHeiMissions.MyStart == 2)
                                            CayHeiMissions.ExcapeVeh = EntityBuild.VehicleSpawn(new VehMods("DINGHY", 15, false), CayHeiMissions.ThiefBoat.Start, 248.4615f);
                                        else
                                            CayHeiMissions.ExcapeVeh = EntityBuild.VehicleSpawn(new VehMods("VELUM", 0, false), new Vector3(4479.589f, -4496.729f, 5.124825f), 110.8173f);
                                        CayHeiMissions.ExcapeVeh.IsInvincible = false;
                                    }
                                }
                                else
                                    UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[26];
                            }
                            else
                            {
                                if (Game.Player.Character.IsInVehicle(CayHeiMissions.Chopper))
                                {
                                    JobSeq++;
                                    CayHeiMissions.Chopper.FreezePosition = false;
                                    EntityBuild.AddTarget(new BlipForm(CayHeiMissions.ExcapeVeh.Position, false, 5, 75.00f, new BlipForm(CayHeiMissions.ExcapeVeh.Position, true, 5, 66, DataStore.MyLang.Maptext[26])));
                                    EntityBuild.FlyToRightHere(CayHeiMissions.Pilot, CayHeiMissions.Chopper, CayHeiMissions.TakeOff, 45.00f);
                                    UiDisplay.sSubDisplay = "";
                                }
                            }
                        }
                        else if (JobSeq == 2)
                        {
                            if (!Game.Player.Character.IsInVehicle())
                                JobSeq = 45;
                            else if (ReturnStuff.AreUNear(CayHeiMissions.TakeOff.V3, CayHeiMissions.Chopper.Position, 5f))
                            {
                                JobSeq++;
                                EntityBuild.FlyToRightHere(CayHeiMissions.Pilot, CayHeiMissions.Chopper, CayHeiMissions.HeliPath[CayHeiMissions.iHeliPath], 85.00f);
                                CayHeiMissions.Thief = EntityBuild.NPCSpawn(new PedFeat("", false, 500, 2, 0, null, 4, false, 0, ""), CayHeiMissions.ThiefPath[CayHeiMissions.iThiefPath], 0.00f);
                                CayHeiMissions.iThiefPath++;
                                CayHeiMissions.Thief.RelationshipGroup = DataStore.GP_BNPCs;
                                ReturnStuff.PedRunToFoward(CayHeiMissions.Thief, CayHeiMissions.ThiefPath, CayHeiMissions.iThiefPath, 2.00f);

                                UiDisplay.MMDisplay01 = new MarkyMark(MarkerType.ChevronUpx1, Vector3.Zero, Vector3.Zero, 0.00f, 0.50f, Color.Red);
                                UiDisplay.FolPed = CayHeiMissions.Thief;
                                UiDisplay.bMMDisplay01 = true;

                                CayHeiMissions.TargX = CayHeiMissions.ThiefPath[CayHeiMissions.iThiefPath];
                                UiDisplay.sSubDisplay = DataStore.MyLang.Mistext[CayHeiMissions.iGone];
                            }
                        }
                        else if (JobSeq == 3)
                        {
                            if (!Game.Player.Character.IsInVehicle())
                                JobSeq = 45;
                            else if (CayHeiMissions.Thief.IsDead)
                                JobSeq = 10;
                            else if (CayHeiMissions.ExcapeVeh.IsDead)
                            {
                                DataStore.MyAchivments.CayoThief_YourGonaHaveToWalk++;
                                JobSeq = 10;
                            }
                            else if (ReturnStuff.AreUNear(CayHeiMissions.Thief.Position, CayHeiMissions.TargX, 3f))
                            {
                                CayHeiMissions.iThiefPath++;
                                if (ReturnStuff.PedRunToFoward(CayHeiMissions.Thief, CayHeiMissions.ThiefPath, CayHeiMissions.iThiefPath, 2.00f))
                                    CayHeiMissions.TargX = CayHeiMissions.ThiefPath[CayHeiMissions.iThiefPath];
                                else
                                {
                                    JobSeq++;
                                    CayHeiMissions.Thief.Task.ClearAll();
                                    CayHeiMissions.ExcapeVeh.FreezePosition = false;
                                    EntityBuild.WarptoAnyVeh(CayHeiMissions.ExcapeVeh, CayHeiMissions.Thief, 1);
                                    Script.Wait(500);
                                }
                            }
                            else if (iWait4Sec < Game.GameTime)
                                KeepMoving(CayHeiMissions.Thief, CayHeiMissions.TargX, 2500);

                            if (CayHeiMissions.iHeliPath + 1 < CayHeiMissions.HeliPath.Count)
                            {
                                if (ReturnStuff.AreUNear(CayHeiMissions.HeliPath[CayHeiMissions.iHeliPath].V3, CayHeiMissions.Chopper.Position, 10f))
                                {
                                    CayHeiMissions.iHeliPath += 1;
                                    EntityBuild.FlyToRightHere(CayHeiMissions.Pilot, CayHeiMissions.Chopper, CayHeiMissions.HeliPath[CayHeiMissions.iHeliPath], 65.00f);
                                }
                            }
                            else
                            {
                                if (CayHeiMissions.TimerX < Game.GameTime)
                                {
                                    CayHeiMissions.TimerX = Game.GameTime + 1000;

                                    Vector3 VHereIsh = CayHeiMissions.Thief.Position - (CayHeiMissions.Thief.ForwardVector * 25.00f) + (CayHeiMissions.Thief.RightVector * 45.00f) + (CayHeiMissions.Thief.UpVector * 45.00f);
                                    EntityBuild.FlyToRightHere(CayHeiMissions.Pilot, CayHeiMissions.Chopper, VHereIsh, 45.00f, CayHeiMissions.Thief.Heading);
                                }
                            }
                        }
                        else if (JobSeq == 4)
                        {
                            if (!Game.Player.Character.IsInVehicle())
                                JobSeq = 45;
                            else if (CayHeiMissions.Thief.IsDead)
                                JobSeq = 10;
                            else if (CayHeiMissions.Thief.IsInVehicle(CayHeiMissions.ExcapeVeh))
                            {
                                CayHeiMissions.iThiefPath = 0;
                                if (CayHeiMissions.FlyingPed)
                                {
                                    JobSeq = 6;
                                    EntityBuild.FlyPlane(CayHeiMissions.Thief, CayHeiMissions.ExcapeVeh, CayHeiMissions.FlyingDes, null);
                                    iWait4Sec = Game.GameTime + 4000;
                                }
                                else
                                {
                                    JobSeq++;
                                    CayHeiMissions.iThiefPath++;
                                    Function.Call(Hash.SET_BOAT_ANCHOR, CayHeiMissions.ExcapeVeh.Handle, false);
                                    iWait4Sec = Game.GameTime + 1000;
                                    Vector3 VHereIsh = CayHeiMissions.ExcapeVeh.Position - (CayHeiMissions.ExcapeVeh.ForwardVector * 25.00f) + (CayHeiMissions.ExcapeVeh.RightVector * 45.00f) + (CayHeiMissions.ExcapeVeh.UpVector * 35.00f);
                                    EntityBuild.FlyToRightHere(CayHeiMissions.Pilot, CayHeiMissions.Chopper, VHereIsh, 10.00f, CayHeiMissions.ExcapeVeh.Heading - 90.00f);
                                    EntityBuild.ShowBoating(CayHeiMissions.Thief, CayHeiMissions.ThiefBoat.RaceLine[CayHeiMissions.iThiefPath].Pos, CayHeiMissions.ExcapeVeh, CayHeiMissions.ThiefBoat.RaceLine[CayHeiMissions.iThiefPath].Speed + 4f, 786469);
                                }
                            }
                        }
                        else if (JobSeq == 5)
                        {
                            if (!Game.Player.Character.IsInVehicle())
                                JobSeq = 45;
                            else if (CayHeiMissions.Thief.IsDead)
                                JobSeq = 10;
                            else if (ReturnStuff.AreUNear(CayHeiMissions.ThiefBoat.RaceLine[CayHeiMissions.iThiefPath].Pos, CayHeiMissions.ExcapeVeh.Position, 5f))
                            {
                                CayHeiMissions.iThiefPath++;
                                if (CayHeiMissions.iThiefPath + 1 < CayHeiMissions.ThiefBoat.RaceLine.Count)
                                    EntityBuild.ShowBoating(CayHeiMissions.Thief, CayHeiMissions.ThiefBoat.RaceLine[CayHeiMissions.iThiefPath].Pos, CayHeiMissions.ExcapeVeh, CayHeiMissions.ThiefBoat.RaceLine[CayHeiMissions.iThiefPath].Speed + 4f, 786469);
                                else
                                    JobSeq = 45;
                            }
                            else if (iWait4Sec < Game.GameTime)
                            {
                                if (CayHeiMissions.ExcapeVeh.Speed < 4f)
                                    EntityBuild.ShowBoating(CayHeiMissions.Thief, CayHeiMissions.ThiefBoat.RaceLine[CayHeiMissions.iThiefPath].Pos, CayHeiMissions.ExcapeVeh, CayHeiMissions.ThiefBoat.RaceLine[CayHeiMissions.iThiefPath].Speed + 8f, 786469);

                                iWait4Sec = Game.GameTime + 1500;

                                Vector3 VHereIsh = CayHeiMissions.ExcapeVeh.Position - (CayHeiMissions.ExcapeVeh.ForwardVector * 25.00f) + (CayHeiMissions.ExcapeVeh.RightVector * 45.00f) + (CayHeiMissions.ExcapeVeh.UpVector * 35.00f);

                                EntityBuild.FlyToRightHere(CayHeiMissions.Pilot, CayHeiMissions.Chopper, VHereIsh, 10.00f, CayHeiMissions.Chopper.Heading);
                            }
                        }
                        else if (JobSeq == 6)
                        {
                            if (!Game.Player.Character.IsInVehicle())
                                JobSeq = 45;
                            else if (CayHeiMissions.Thief.IsDead)
                                JobSeq = 10;
                            else if (ReturnStuff.AreUNear(CayHeiMissions.Thief.Position, CayHeiMissions.FlyingDes, 400f))
                                JobSeq = 45;
                            else if (iWait4Sec < Game.GameTime)
                            {
                                iWait4Sec = Game.GameTime + 4000;
                                Vector3 VHereIsh = CayHeiMissions.ExcapeVeh.Position - (CayHeiMissions.ExcapeVeh.ForwardVector * 25.00f) + (CayHeiMissions.ExcapeVeh.RightVector * 25.00f) + (CayHeiMissions.ExcapeVeh.UpVector * 35.00f);
                                EntityBuild.FlyToRightHere(CayHeiMissions.Pilot, CayHeiMissions.Chopper, VHereIsh, 40.00f, CayHeiMissions.ExcapeVeh.Heading - 90.00f);
                            }
                        }
                        else if (JobSeq == 10)
                        {
                            if (CayHeiMissions.DontShoot)
                                DataStore.MyAchivments.CayoThief_ImAPasafisit++;
                            CayHeiMissions.Chopper.IsInvincible = false;
                            SearchFor.SlowFastTravel(new Vector3(4905.202f, -4939.065f, 3.352461f), 201.3084f);
                            NSBanking.NSCoinInvestments(false, 4, 9, "Vangelico");
                            int iCash = RandomX.RandInt(50000, 100000);
                            MissionEnd(CayoThief_Awards(iCash, true));
                        }
                        else if (JobSeq == 45)
                        {
                            if (CayHeiMissions.DontShoot)
                                DataStore.MyAchivments.CayoThief_ImAPasafisit++;
                            SearchFor.SlowFastTravel(new Vector3(4594.872f, -4880.987f, 18.10277f), 6.152281f);
                            CayHeiMissions.Chopper.IsInvincible = false;
                            NSBanking.NSCoinInvestments(true, 1, 3, "Vangelico");
                            GameOverFail(false);
                        }
                    }      //ThifeAntiHeist
                    else if (JobType == 106)
                    {
                        JobType = 25;
                    }      //pero ppparra to JobType == 29

                    if (UiDisplay.sSubDisplay == "")
                    {
                        if (UiDisplay.bSubDisplay)
                            UiDisplay.bSubDisplay = false;
                    }
                    else
                    {
                        if (!UiDisplay.bSubDisplay)
                            UiDisplay.bSubDisplay = true;
                    }
                }
                else
                {
                    if (DataStore.BankTransfer)
                    {
                        NSBanking.BankingApp();
                    }
                    else if (iATMSlow < Game.GameTime)
                    {
                        RSLoadIn();

                        if (Function.Call<bool>(Hash._HAS_NAMED_SCALEFORM_MOVIE_LOADED, "ATM"))
                        {
                            if (DataStore.iLookForPB != 0)
                            {
                                if (DataStore.iLookForPB == 2)
                                {
                                    if (bRingRing)
                                    {
                                        bRingRing = false;
                                        EntityLog.CleanUp(-1, DataStore.iSoundId, -1);
                                    }
                                    if (!DataStore.OnCayoLand)
                                        PhoneHome.IsPersistent = false;
                                    PhoneHome = null;
                                    EntityClear.RemoveTargets();
                                }
                                DataStore.iLookForPB = 0;
                            }
                            else
                            {
                                NSBanking.LoadDat();
                                DataStore.iCoinBats = 4;
                                DataStore.BankTransfer = true;
                            }
                        }
                        else
                            iATMSlow = Game.GameTime + 2500;
                    }
                    else
                    {
                        if (DataStore.LookingForPB)
                        {
                            if (DataStore.iLookForPB == 0)
                            {
                                iPhoneDelay = Game.GameTime + DataStore.MySettings.SPDelayTime;
                                DataStore.iLookForPB++;
                            }
                            else if (DataStore.iLookForPB == 1)
                            {
                                if (iPhoneDelay < Game.GameTime)
                                {
                                    if (DataStore.OnCayoLand)
                                    {
                                        if (Game.Player.Character.Position.Y > -3370.00f)
                                            TheCayoConnection(false);
                                    }
                                    else
                                    {
                                        if (Game.Player.Character.Position.Y < -3370.00f)
                                            TheCayoConnection(true);
                                    }

                                    PhoneHome = SearchFor.BoxingClever();

                                    if (PhoneHome != null)
                                    {
                                        AnswerYourPhone(PhoneHome);
                                        DataStore.iLookForPB++;
                                    }
                                    else
                                        iPhoneDelay = Game.GameTime + DataStore.MySettings.SPDelayTime;
                                }
                            }
                            else if (DataStore.iLookForPB == 2)
                            {
                                if (ReturnStuff.AmINear(DataStore.vPhoneCorona, 200f) && PhoneHome.Health > 999)
                                {
                                    if (ReturnStuff.AmINear(DataStore.vPhoneCorona, 40f))
                                    {
                                        if (!bRingRing && DataStore.MySettings.PhoneAudio)
                                        {
                                            iWait4Sec = Game.GameTime + 1000;
                                            bRingRing = true;
                                            EntityBuild.PlaySoundFrom("SCRIPT/ASSASSINATION_MULTI", "ASS_PAYPHONE_RING_master", "", PhoneHome.Position, true);
                                        }

                                        if (ReturnStuff.AmINear(PhoneHome.Position, 2f) && Game.Player.Character.IsOnFoot)
                                        {
                                            UiDisplay.ControlerUI(DataStore.MyLang.Context[35], 1);
                                            if (ReturnStuff.WhileButtonDown(21))
                                            {
                                                float fphdirect = PhoneHome.Heading + 90.00f;
                                                if (DataStore.MySettings.PhoneAnim)
                                                    PickUpThePhone(fphdirect);

                                                if (bRingRing)
                                                {
                                                    bRingRing = false;
                                                    EntityLog.CleanUp(-1, DataStore.iSoundId, -1);
                                                    DataStore.Chatter.Play();
                                                }

                                                EntityClear.RemoveTargets();

                                                if (!DataStore.OnCayoLand)
                                                    PhoneHome.IsPersistent = false;

                                                PhoneHome = null;
                                                DataStore.iLookForPB = 0;
                                                DataStore.LookingForPB = false;
                                                JobLot();
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (bRingRing)
                                        {
                                            bRingRing = false;
                                            EntityLog.CleanUp(-1, DataStore.iSoundId, -1);
                                        }
                                    }
                                }
                                else
                                    PhoneClear(); 
                            }
                        }
                    }
                }

                if (DataStore.MyDatSet.iTrinket == 0)
                {
                    if (Trinket == null)
                    {
                        Trinket = EntityBuild.BuildProp("ch_prop_ch_bag_02a", new Vector3(557.37f, 5561.55f, 752.27f), new Vector3(-10.99f, 19.99f, -13.95f), true, false);
                        MissionData.PropList_01.Remove(Trinket);
                    }
                    else
                    {
                        if (ReturnStuff.AmINear(Trinket.Position, 1.3f))
                            TrinketFound();
                    }
                }
            }
        }
        //private void Main_KeyDown(object sender, KeyEventArgs e)
        //{
            //if (e.KeyCode == Keys.B)
            //{

            //}
        //}
    }
}