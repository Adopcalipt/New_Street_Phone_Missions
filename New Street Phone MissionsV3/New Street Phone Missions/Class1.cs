using System;
using System.Collections.Generic;
using System.Linq;
using System.Drawing;
using System.IO;
using System.Xml;
using System.Windows.Forms;
using System.Xml.Serialization;
using NativeUI;
using GTA;
using GTA.Native;
using GTA.Math;

namespace New_Street_Phone_Missions
{
    public class Main : Script
    {
        private bool bfirstTime = true;

        private bool bPlayingOldMissions = false;
        private bool bPlayingNewMissions = false;
        private bool bYachtOwner = false;
        private bool bLogFiles = true;
        private bool bMayooAppFix = false;

        private bool bTrainM = false;
        private bool bReFire = false;
        private bool bTestRun = false;
        private bool bFloater = false;
        private bool bMenuOpen = false;
        private bool bRingRing = false;
        private bool bOnTheJob = false;
        private bool bPacBouns = false;
        private bool bGOURANGA = false;
        private bool bNotPause = false;
        private bool bSoloRace = false;
        private bool bOldYacht = false;
        private bool bDontPull = false;
        private bool bCovidInf = false;
        private bool bBuildMode = false;
        private bool bCutingCul = false;
        private bool bIsVehPers = false;
        private bool bAmberAntz = false;
        private bool bPedCanFly = false;
        private bool bJobLoaded = false;
        private bool bMoreFubar = false;
        private bool bPlayerAtt = false;
        private bool bMissingPed = false;
        private bool bOnCayoLand = false;
        private bool bOptionsMen = false;
        private bool bYachtLoaded = false;
        private bool bYouGotAClub = false;
        private bool bDisplayUiBar = false;
        private bool bBankTransfer = false;
        private bool bLookingForPB = false;
        private bool bPickUpHangUp = false;
        private bool bSubscribeNag = false;
        private bool bDeliverWowRep = false;
        private bool bDlCVehStartTest = true;
        private bool bOnlineStuffLoaded = false;

        private int iScale = 0;
        private int iAmHash = 0;
        private int iFubard = 0;
        private int iJobType = 0;
        private int iFuClock = 0;
        private int iTestKit = 0;
        private int iATMSlow = 0;
        private int iMadeMish = 0;
        private int iLowerAim = 10;
        private int iUpperAim = 75;
        private int iUltPed01 = 0;
        private int iTracking = 0;
        private int iMobStarz = 0;
        private int iWait4Sec = 0;
        private int iTotalLap = 0;
        private int iPhonedID = 0;
        private int iCanDrive = 0;
        private int iAngerTax = 0;
        private int iClearing = 0;
        private int iMishText = -1;
        private int iMishAltT = -1;
        private int iAppScaner = 0;
        private int iFaster_01 = 0;
        private int iFaster_02 = 0;
        private int iFaster_03 = 0;
        private int iKeepDance = 0;
        private int iOwnaYacht = 0;
        private int iCashBouns = 0;
        private int iLookForPB = 0;
        private int iLocationX = 0;
        private int iGotPegsus = 0;
        private int iBuildMode = 0;
        private int iBuildingUp = 0;
        private int iGotYourVan = 0;
        private int iParcelCost = 0;
        private int iCurrentLap = 1;
        private int iPhoneDelay = 0;
        private int iCashReward = 0;
        private int iCrash4Cash = 0;
        private int iMissionSeq = 0;
        private int iWantedBribe = 0;
        private int iAmbushCount = 0;
        private int iRepMisssion = 0;
        private int iRacingStyle = 0;
        private int iFindingTime = 0;
        private int iRollXMLCHeck = 0;
        private int iMissionVar_01 = 0;
        private int iMissionVar_02 = 0;
        private int iMissionVar_03 = 0;
        private int iMissionVar_04 = 0;

        private int iNSPMBank = 1000;
        private int iNSPMCLowRisk = 100;
        private int iNSPMCHighRisk = 100;
        private readonly int iProcessForYacht = System.Environment.ProcessorCount * 15;
        private readonly int iProcessForPegs = System.Environment.ProcessorCount * 17;
        private readonly int iPegsSafeHeli = System.Environment.ProcessorCount * 7;
        private readonly int iPegsWarHeli = System.Environment.ProcessorCount * 4;
        private readonly int iPegsSafePlane = System.Environment.ProcessorCount * 13;
        private readonly int iPegsWarPlane = System.Environment.ProcessorCount * 9;
        private readonly int iPegsboats = System.Environment.ProcessorCount * 3;
        private readonly int iPegsimortas = System.Environment.ProcessorCount * 11;
        private readonly int iMeddicc = System.Environment.ProcessorCount * 18;
        private int iStartOnYAcht = 0;
        private int iMeddicTest = 0;
        private int iPegsSafeHeliTest = 0;
        private int iPegsWarHeliTest = 0;
        private int iPegsSafePlaneTest = 0;
        private int iPegsWarPlaneTest = 0;
        private int iPegsboatsTest = 0;
        private int iPegsimortasTest = 0;
        private int iCoinBats = 0;

        private int iPlayerGroup = 0;
        private int GP_Player = Game.Player.Character.RelationshipGroup;
        private readonly int GP_ANPCs = World.AddRelationshipGroup("GroupA");
        private readonly int GP_BNPCs = World.AddRelationshipGroup("GroupB");
        private readonly int GP_Attack = World.AddRelationshipGroup("AttackNPCs");
        private readonly int GP_Mental = World.AddRelationshipGroup("MentalNPCs");

        private float fMission_01 = 0.00f;
        private float fMission_02 = 0.00f;
        private float fMission_03 = 0.00f;
        private float fGetDir = 0.00f;
        private float fphdirect = 0.00f;
        private float fKeepMoving = 0.00f;
        private float fMaxSpeed = 35.00f;
        private float fCorSize = 5.00f;
        private float fCoronaHight = 0.00f;
        private float fCoronaDirHt = 0.00f;
        private float fVehicleDamage = 0.00f;
        private float fAiCoronaListSize = 10.00f;

        private string sMissionVar_01 = "empty";
        private string sMissionVar_02 = "empty";
        private string sCargFix = "";
        private string sHospFix = "";
        private string sFireFix = "";
        private string sVehType = "Adder";
        private readonly string sVersion = "3.31";
        private readonly string sBeeLogs = "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/BeeLog.txt";
        private readonly string sBoatLaunch = "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/BooatLaunch.txt";
        private readonly string sBoatOff = "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/BooatOff.txt";
        private readonly string sNEW_SPM_XML = "" + Directory.GetCurrentDirectory() + "/Scripts/NEW_SPM_XML.Xml";
        private readonly string sOLD_SPM_XML = "" + Directory.GetCurrentDirectory() + "/Scripts/OLD_SPM_XML.Xml";
        private readonly string sNSPMLanguage = "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Language";
        private readonly string sNSPMAddonCarz = "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/NSPMAddonCarz.Xml";
        private readonly string sNSPMBlips = "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Blips.Xml";
        private readonly string sNSPMSet = "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Settings.Xml";
        private readonly string sNSPMRandNum = "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/NSPMrCount.Xml";
        private readonly string sNSPMDatafile = "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/NSPMData.NSPM";
        private readonly string sNSPMCont = "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/NSPMContact.Xml";
        private readonly string sNSPMYacht = "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM_Yacht.dll";

        private System.Media.SoundPlayer Hare = new System.Media.SoundPlayer("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Hare_Krishna_Chant.wav");
        private System.Media.SoundPlayer Chatter = new System.Media.SoundPlayer("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/PhoneTalk.wav");
        private System.Media.SoundPlayer Drilar = new System.Media.SoundPlayer("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/edrill.wav");
        private System.Media.SoundPlayer CashTil = new System.Media.SoundPlayer("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Till.wav");

        private Vector3 vFuFees = Vector3.Zero;
        private Vector3 vFuDest = Vector3.Zero;
        private Vector3 vFuMiss = Vector3.Zero;
        private Vector3 vLanLoc = Vector3.Zero;
        private Vector3 vGetaway = Vector3.Zero;
        private Vector3 vTarget_01 = Vector3.Zero;
        private Vector3 vTarget_02 = Vector3.Zero;
        private Vector3 vTarget_03 = Vector3.Zero;
        private Vector3 vTarget_04 = Vector3.Zero;
        private Vector3 vTarget_05 = Vector3.Zero;
        private Vector3 vTarget_06 = Vector3.Zero;
        private Vector3 vTarget_07 = Vector3.Zero;
        private Vector3 vTarget_08 = Vector3.Zero;
        private Vector3 vTarget_09 = Vector3.Zero;
        private Vector3 vTarget_10 = Vector3.Zero;
        private Vector3 vPhoneCorona = Vector3.Zero;

        private Lingoo MyLang = new Lingoo();
        private XmlSetings MySettings = null;

        private Ped Npc_01 = null;
        private Ped Npc_02 = null;
        private Ped Npc_03 = null;

        private Blip BackUpT = null;
        private Blip PhoneBlip = null;
        private Blip Target_01 = null;
        private Blip Target_02 = null;

        private Prop PhoneHome = null;
        private Prop Prop_01 = null;
        private Prop Prop_02 = null;
        private Prop Prop_03 = null;

        private Pickup Pick_01 = null;

        private Camera cCams = null;

        private Vehicle DLCTestVeh = null;
        private Vehicle VehTrackin_01 = null;
        private Vehicle VehTrackin_02 = null;
        private Vehicle VehTrackin_03 = null;
        private Vehicle VehTrackin_04 = null;
        private Vehicle VehTrackin_05 = null;
        
        private PositionDirect FindMe = null;

        private List<int> iList_01 = new List<int>();
        private List<int> iList_02 = new List<int>();
        private List<int> iTime_01 = new List<int>();
        private List<int> iFireList = new List<int>();
        private List<int> iImpExpList = new List<int>();
        private List<int> iCoronaList = new List<int>();
        private List<int> iDeliverList = new List<int>();
        private List<int> iMissionList = new List<int>();
        private List<int> iAssMissionList = new List<int>();

        private List<bool> BeOff = new List<bool>();
        private List<bool> BeOnOff = new List<bool>();
        private List<bool> LessRandBool = new List<bool>();

        private List<float> fList_01 = new List<float>();
        private List<float> fList_02 = new List<float>();
        private List<float> fList_03 = new List<float>();

        private List<string> sList_01 = new List<string>();
        private List<string> sList_02 = new List<string>();
        private List<string> sIPLSAves = new List<string>();
        private List<string> sDoorList = new List<string>();
        private List<string> sGateList = new List<string>();
        private List<string> sWardrobe = new List<string>();
        private List<string> sPhoneType = new List<string>();
        private List<string> sImpExpVeh = new List<string>();
        private List<string> sCustomCarz = new List<string>();
        private List<string> sCustomPlanez = new List<string>();
        private List<string> sCustomBoatsz = new List<string>();
        private List<string> sCustomChopperz = new List<string>();

        private List<Vector3> vPhoneBoxList = new List<Vector3>();
        private List<Vector3> vOldPhoneBoxList = new List<Vector3>();
        private List<Vector3> VectorList_01 = new List<Vector3>();
        private List<Vector3> VectorList_02 = new List<Vector3>();
        private List<Vector3> VectorList_03 = new List<Vector3>();
        private List<Vector3> VectorList_04 = new List<Vector3>();
        private List<Vector3> VectorList_05 = new List<Vector3>();
        private List<Vector3> AppMadness = new List<Vector3>();

        private List<Ped> PedList_01 = new List<Ped>();
        private List<Ped> MishPed = new List<Ped>();

        private List<PedMultiTask> MultiPed = new List<PedMultiTask>();

        private List<Prop> PropList_01 = new List<Prop>();
        private List<Prop> CayoPhones = new List<Prop>();

        private List<Blip> BlipList_01 = new List<Blip>();

        private List<Pickup> PickList_01 = new List<Pickup>();

        private List<Vehicle> VehicleList_01 = new List<Vehicle>();
        private List<Vehicle> MishVic = new List<Vehicle>();

        private List<MyMk2Weaps> Mk2WeapsMain = new List<MyMk2Weaps>();

        private List<PlayerWeaps> PlayerWeapXList = new List<PlayerWeaps>();

        private List<FindVeh> MakeCarz = new List<FindVeh>();
        private List<FindPed> MakeFrenz = new List<FindPed>();

        private MissionBuilder MyMissions = new MissionBuilder();

        private TimerBarPool VTBTimerPool = new TimerBarPool();

        private TextTimerBar ttTextBar_01 = new TextTimerBar("", "");
        private TextTimerBar ttTextBar_02 = new TextTimerBar("", "");
        private TextTimerBar ttTextBar_03 = new TextTimerBar("", "");
        private TextTimerBar ttTextBar_04 = new TextTimerBar("", "");

        private BarTimerBar BtSlideBar = new BarTimerBar("");

        private MenuPool YtmenuPool = new MenuPool();

        public Main()
        {
            if (bfirstTime)
            {
                if (File.Exists(sBeeLogs))
                    File.Delete(sBeeLogs);
                Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, false);
                bfirstTime = false;
                OnLoadup();
            }

            Tick += OnTick;
            //KeyDown += OnKeyDown;
            Interval = 1;
        }
        private void WriteNSMDat(int iChanges, int iChange)
        {
            List<int> iData = new List<int>();

            if (File.Exists(sNSPMDatafile))
            {
                using (FileStream fs = File.Open(sNSPMDatafile, FileMode.Open))
                {
                    using (BinaryReader r = new BinaryReader(fs))
                    {
                        iData.Add(r.ReadInt32());       //0
                        iData.Add(r.ReadInt32());       //1
                        iData.Add(r.ReadInt32());       //2
                        iData.Add(r.ReadInt32());       //3
                        iData.Add(r.ReadInt32());       //4
                        iData.Add(r.ReadInt32());       //5
                        iData.Add(r.ReadInt32());       //6
                        iData.Add(r.ReadInt32());       //7
                        iData.Add(r.ReadInt32());       //8
                        iData.Add(r.ReadInt32());       //9
                        iData.Add(r.ReadInt32());       //10
                        iData.Add(r.ReadInt32());       //11
                        iData.Add(r.ReadInt32());       //12
                        iData.Add(r.ReadInt32());       //13
                        iData.Add(r.ReadInt32());       //14
                        iData.Add(r.ReadInt32());       //15
                    }
                }

                if (iChanges != -1)
                    iData[iChanges] = iChange;
                using (FileStream fs = File.Open(sNSPMDatafile, FileMode.Create))
                {
                    using (BinaryWriter w = new BinaryWriter(fs))
                    {
                        for (int i = 0; i < iData.Count; i++)
                            w.Write(iData[i]);
                    }
                }
            }
            else
            {
                using (FileStream fs = File.Open(sNSPMDatafile, FileMode.Create))
                {
                    using (BinaryWriter w = new BinaryWriter(fs))
                    {
                        w.Write(iOwnaYacht);            //0
                        w.Write(iGotPegsus);            //1
                        w.Write(iPegsSafeHeliTest);     //2
                        w.Write(iPegsWarHeliTest);      //3
                        w.Write(iPegsSafePlaneTest);    //4
                        w.Write(iPegsWarPlaneTest);     //5
                        w.Write(iPegsboatsTest);        //6
                        w.Write(iPegsimortasTest);      //7
                        w.Write(iMeddicTest);           //8
                        w.Write(iNSPMBank);             //9
                        w.Write(iNSPMCLowRisk);         //10
                        w.Write(iNSPMCHighRisk);        //11
                        w.Write(iWantedBribe);          //12
                        w.Write(iFubard);               //13
                        w.Write(MySettings.LangSupport);//14
                        w.Write(iStartOnYAcht);         //15
                    }
                }
            }
        }
        private void ReadNSMPDat()
        {
            if (File.Exists(sNSPMDatafile))
            {
                using (FileStream fs = File.Open(sNSPMDatafile, FileMode.Open))
                {
                    using (BinaryReader r = new BinaryReader(fs))
                    {
                        iOwnaYacht = r.ReadInt32();            //0
                        iGotPegsus = r.ReadInt32();            //1
                        iPegsSafeHeliTest = r.ReadInt32();     //2
                        iPegsWarHeliTest = r.ReadInt32();      //3
                        iPegsSafePlaneTest = r.ReadInt32();    //4
                        iPegsWarPlaneTest = r.ReadInt32();     //5
                        iPegsboatsTest = r.ReadInt32();        //6
                        iPegsimortasTest = r.ReadInt32();      //7
                        iMeddicTest = r.ReadInt32();           //8
                        iNSPMBank = r.ReadInt32();             //9
                        iNSPMCLowRisk = r.ReadInt32();         //10
                        iNSPMCHighRisk = r.ReadInt32();        //11
                        iWantedBribe = r.ReadInt32();          //12
                        iFubard = r.ReadInt32();               //13
                        MySettings.LangSupport = r.ReadInt32();//14
                        iStartOnYAcht = r.ReadInt32();          //15
                    }
                }
            }
            else
                WriteNSMDat(-1, 0);

            if (!bYachtOwner)
            {
                if (iOwnaYacht == iProcessForYacht || iOwnaYacht == -1)
                    bYachtOwner = true;
            }
        }
        private void LogThis(string sLog)
        {
            if (bLogFiles)
            {
                using (StreamWriter tEx = File.AppendText(sBeeLogs))
                    BeeLog(sLog, tEx);
            }
        }
        private void BeeLog(string sLogs, TextWriter tEx)
        {
            tEx.WriteLine($"{DateTime.Now.ToLongTimeString()} {DateTime.Now.ToLongDateString()} {"--" + sLogs}");
        }
        private void PlayerPlays()
        {
            LogThis("PlayerPlays");

            Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, false);
            bNotPause = true;
            UI.ShowSubtitle("", 1);

            if (iJobType == 1)
            {
                bJobLoaded = true;
                Truckin();
            }
            else if (iJobType == 2)
            {
                bJobLoaded = true;
                GetAwayDriver();
            }
            else if (iJobType == 3)
            {
                bJobLoaded = true;
                Packages();
            }
            else if (iJobType == 4)
            {
                bJobLoaded = true;
                Convicts();
            }
            else if (iJobType == 5)
            {
                bJobLoaded = true;
                FUber();
            }
            else if (iJobType == 6)
            {
                bJobLoaded = true;
                Pilot();
            }
            else if (iJobType == 7)
            {
                bJobLoaded = true;
                bAmberAntz = false;
                Ambulance();
            }
            else if (iJobType == 8)
            {
                bJobLoaded = true;
                Follow();
            }
            else if (iJobType == 9)
            {
                bJobLoaded = true;
                bReFire = false;
                FireDept();
            }
            else if (iJobType == 10)
            {
                bJobLoaded = true;
                HeresJohnny();
            }
            else if (iJobType == 11)
            {
                bJobLoaded = true;
                Raceist();
            }
            else if (iJobType == 12)
            {
                bJobLoaded = true;
                BBBomb();
            }
            else if (iJobType == 13)
            {
                bJobLoaded = true;
                HitMan();
            }
            else if (iJobType == 14)
            {
                bJobLoaded = true;
                MrMOneyMAn();
            }
            else if (iJobType == 15)
            {
                bJobLoaded = true;
                SeaBattles();
            }
            else if (iJobType == 16)
            {
                bJobLoaded = true;
                ImportsExpo();
            }
            else if (iJobType == 17)
            {
                bJobLoaded = true;
                DebtCollect();
            }
            else if (iJobType == 18)
            {
                bJobLoaded = true;
                BikerRaids();
            }
            else if (iJobType == 19)
            {
                bJobLoaded = true;
                CargoCollect();
            }
            else if (iJobType == 20)
            {
                bJobLoaded = true;
                DeepDown();
            }
            else if (iJobType == 26)
            {
                bJobLoaded = true;
                HappyShopper();
            }
            else if (iJobType == 27)
            {
                bJobLoaded = true;
                MoresMuted();
            }
            else if (iJobType == 28)
            {
                bJobLoaded = true;
                TempAgency();
            }
            else if (iJobType == 29)
            {
                bJobLoaded = true;
                ParaDisplay();
            }
            else if (iJobType == 30)
            {
                bJobLoaded = true;
                Deliverwho();
            }
            else
            {
                bJobLoaded = true;
                TheCayoMissions();
            }

            if (MySettings.EnemyStrength)
                Function.Call(Hash.SET_AI_WEAPON_DAMAGE_MODIFIER, 0.10f);

            LogThis("iJobType == " + iJobType + ", iLocationX == " + iLocationX);
        }
        private void XMLSettings()
        {
            LogThis("XMLSettings");
            bool bLoadUpOnYacht = false;
            XmlWriterSettings NSPMsettings = new XmlWriterSettings
            {
                Indent = true,
                IndentChars = "\t",
                NewLineOnAttributes = true
            };
            XmlWriter SaveFile = XmlWriter.Create(sNEW_SPM_XML, NSPMsettings);

            SaveFile.WriteStartElement("Settings");

            SaveFile.WriteStartAttribute("bPlayingNewMissions");
            SaveFile.WriteValue(bPlayingNewMissions);
            SaveFile.WriteEndAttribute();

            if (iStartOnYAcht > 0)
            {
                bLoadUpOnYacht = true;
                WriteNSMDat(15, iStartOnYAcht);
            }

            SaveFile.WriteStartAttribute("bLoadUpOnYacht");
            SaveFile.WriteValue(bLoadUpOnYacht);
            SaveFile.WriteEndAttribute();

            SaveFile.WriteEndElement();
            SaveFile.Close();
        }
        private void GoFetchSettings()
        {
            LogThis("GoFetchSettings");

            string spants = "";
            if (File.Exists(sNEW_SPM_XML))
            {
                XmlTextReader SaveFile = new XmlTextReader(sNEW_SPM_XML);
                while (SaveFile.Read())
                {
                    spants = SaveFile.GetAttribute("bLoadUpOnYacht");
                    if (spants == "true")
                        iStartOnYAcht = 10;
                    else
                        iStartOnYAcht = 0;
                    WriteNSMDat(15, iStartOnYAcht);
                }
                SaveFile.Close();
            }
            else
                XMLSettings();
        }
        private void CompatXML()
        {
            LogThis("CompatXML");

            if (File.Exists(sOLD_SPM_XML))
            {
                XmlTextReader SaveFile = new XmlTextReader(sOLD_SPM_XML);
                while (SaveFile.Read())
                {
                    string spants = SaveFile.GetAttribute("bPlayingOldMissions");
                    if (spants == "true")
                    {
                        bPlayingOldMissions = true;
                    }
                    else
                    {
                        bPlayingOldMissions = false;
                    }
                }
                SaveFile.Close();
            }
        }
        private void LangRewite()
        {
            List<string> sContext = new List<string>();
            List<string> sJobtext = new List<string>();
            List<string> sMaptext = new List<string>();
            List<string> sMistext = new List<string>();
            List<string> sOthertext = new List<string>();
            List<string> sYachtLang = new List<string>();
            List<string> sContactLang = new List<string>();

            LogThis("LangRewite");

            sMaptext.Clear();
            sMaptext.Add("Boat Delivery");                          //0
            sMaptext.Add("Delivery Truck");                         //1
            sMaptext.Add("Delivery Trailer");                       //2
            sMaptext.Add("Delivery Vehicle");                       //3
            sMaptext.Add("Prison Bus");                             //4
            sMaptext.Add("Helicopter");                             //5
            sMaptext.Add("Plane");                                  //6
            sMaptext.Add("Ambulance");                              //7
            sMaptext.Add("Fire Truck");                             //8
            sMaptext.Add("Player Vehicle");                         //9
            sMaptext.Add("Tug");                                    //10
            sMaptext.Add("Slam Van");                               //11
            sMaptext.Add("Fork Lift");                              //12
            sMaptext.Add("Submarine");                               //13
            sMaptext.Add("Target Vehicle");                         //14
            sMaptext.Add("Customers Vehicle");                      //15
            sMaptext.Add("Fubar");                                  //16
            sMaptext.Add("Boat");                                   //17
            sMaptext.Add("Blazer Aqua");                            //18
            sMaptext.Add("Stromberg");                              //19
            sMaptext.Add("Enemy");                                  //20
            sMaptext.Add("Vehicle Drop");                           //21
            sMaptext.Add("Builder Vehicle");                        //22
            sMaptext.Add("Pickup");                                 //23
            sMaptext.Add("Angry Taxi");                             //24
            sMaptext.Add("Party Bus");                              //25
            sMaptext.Add("Search Area");                            //26
            sMaptext.Add("Race Meet");                            	//27
            sMaptext.Add("Cocaine Lockup");                         //28
            sMaptext.Add("Counterfeit Cash Factory");            	//29
            sMaptext.Add("Document Forgery Office");             	//30
            sMaptext.Add("Weed Farm");            	                //31
            sMaptext.Add("Meth Lab");                            	//32
            sMaptext.Add("Bunker");                            		//33
            sMaptext.Add("Warehouse");                            	//34
            sMaptext.Add("Bolingbroke Penitentiary");              	//35
            sMaptext.Add("Checkpoint");                            	//36
            sMaptext.Add("Patient");                            	//37
            sMaptext.Add("Export Barge");                           //38
            sMaptext.Add("Delivery Target");                     	//39
            sMaptext.Add("Bank");                            		//40
            sMaptext.Add("Escape Point");                        	//41
            sMaptext.Add("Destination");                           	//42
            sMaptext.Add("Depot");                            		//43
            sMaptext.Add("Convict Parade");                     	//44
            sMaptext.Add("Fubar Customer");                        	//45
            sMaptext.Add("Fubar Destination");                   	//46
            sMaptext.Add("Roof Ladder");                            //47
            sMaptext.Add("CEO");                            		//48
            sMaptext.Add("Office");                            		//49
            sMaptext.Add("Sandy Shores Airfield");                 	//50
            sMaptext.Add("Grapeseed Airfield");                   	//51
            sMaptext.Add("Noose HQ");         		             	//52
            sMaptext.Add("Beauty Spot");                            //53
            sMaptext.Add("Jetsam Office");                          //54
            sMaptext.Add("Cat Owner");                            	//55
            sMaptext.Add("Escape Area");                            //56
            sMaptext.Add("Police Station");                      	//57
            sMaptext.Add("Business");                            	//58
            sMaptext.Add("Security  Depot");                        //59
            sMaptext.Add("Dock");                            		//60
            sMaptext.Add("Boat Yard");                            	//61
            sMaptext.Add("Apartment");                            	//62
            sMaptext.Add("Payment Case");                       	//63
            sMaptext.Add("Exit");                            		//64
            sMaptext.Add("Club House");                             //65
            sMaptext.Add("Van Keys");                            	//66
            sMaptext.Add("Bomb Shop");                            	//67
            sMaptext.Add("Targets Parking Spot");               	//68
            sMaptext.Add("Shops Takings");                          //69
            sMaptext.Add("Bar");                                    //70
            sMaptext.Add("Service Area");                           //71
            sMaptext.Add("Dance Floor");                            //72
            sMaptext.Add("Night Club");                             //73
            sMaptext.Add("Till");                                   //74
            sMaptext.Add("Customer");                               //75
            sMaptext.Add("Dump");                               	//76
            sMaptext.Add("Dozer");                               	//77
            sMaptext.Add("Pirates");                               	//78
            sMaptext.Add("Hangar");                               	//79
            sMaptext.Add("Casino");                               	//80
            sMaptext.Add("Uniform");                               	//81
            sMaptext.Add("Weapons");                               	//82
            sMaptext.Add("Lift");                               	//83
            sMaptext.Add("Valet Stand");                          	//84
            sMaptext.Add("Parking Garage");                       	//85
            sMaptext.Add("Facility");                               //86
            sMaptext.Add("Secret Underground Layer");             	//87
            sMaptext.Add("LS Car Meet");                          	//88
            sMaptext.Add("Toolbox");                               	//89
            sMaptext.Add("Wrench");                               	//90
            sMaptext.Add("Bag");                               		//91
            sMaptext.Add("Crate");                               	//92
            sMaptext.Add("Suitcase");                               //93
            sMaptext.Add("Toxic Soup");                           	//94
            sMaptext.Add("Foreman");                               	//95
            sMaptext.Add("Technician");                            	//96
            sMaptext.Add("Scientist");                           	//97
            sMaptext.Add("Empty Barrel");                         	//98
            sMaptext.Add("Glowing Sludge");                       	//99
            sMaptext.Add("Bio Haz Barrel");                       	//100
            sMaptext.Add("Remote Controller");                 		//101
            sMaptext.Add("Test tubes");                          	//102
            sMaptext.Add("Smoke Machine");                        	//103
            sMaptext.Add("Tourist");                               	//104
            sMaptext.Add("Target");                               	//105
            sMaptext.Add("Bikers");                               	//106
            sMaptext.Add("Cat");                             		//107
            sMaptext.Add("Convict");                               	//108
            sMaptext.Add("Raceist");                               	//109
            sMaptext.Add("Exporter");                               //110
            sMaptext.Add("Pirate");                               	//111
            sMaptext.Add("Worker");                               	//112
            sMaptext.Add("Player");                               	//113
            sMaptext.Add("Shark");                               	//114
            sMaptext.Add("Bogdan");                               	//115
            sMaptext.Add("Fire");                               	//116
            sMaptext.Add("Race");                               	//117
            sMaptext.Add("Sea Sparrow");                           	//118
            sMaptext.Add("Jetmax");                               	//119
            sMaptext.Add("Technical Aqua");                      	//120
            sMaptext.Add("Deliverwho");                           	//121
            sMaptext.Add("Drop Zone");                           	//122
            sMaptext.Add("");                               //123
            sMaptext.Add("");                               //124
            sMaptext.Add("");                               //125
            sMaptext.Add("");                               //126
            sMaptext.Add("");                               //127
            sMaptext.Add("");                               //128
            sMaptext.Add("");                               //129
            sMaptext.Add("");                               //130

            sMistext.Clear();
            sMistext.Add("Goto the ~y~Truck~w~.");                                                                      //0
            sMistext.Add("Enter the ~b~Truck~w~.");                                                                     //1
            sMistext.Add("Attach the ~y~Trailer~w~ to the ~b~Truck~w~.");                                               //2
            sMistext.Add("Deliver the ~b~Trailer~w~ to ");                												//3
            sMistext.Add("Find a ~b~Car~w~ or ~b~Van~w~ with four or more seats.");                                     //4
            sMistext.Add("Wait outside of the ~y~Bank~w~.");                                                            //5
            sMistext.Add("Goto the ~y~Bank~w~.");                                                                       //6
            sMistext.Add("Lose the ~r~Cops~w~.");                                                                       //7
            sMistext.Add("Deliver the ~b~Bank Robbers~w~ to their ~y~Escape Point~w~.");                                //8
            sMistext.Add("~r~Burn ~w~the~b~ Getaway Vehicle~w~.");                                                      //9
            sMistext.Add("Goto the ~y~Delivery Vehicle~w~.");                                                           //10
            sMistext.Add("Get on the ~b~Delivery Vehicle~w~.");                                                         //11
            sMistext.Add("Enter the ~b~Delivery Vehicle~w~.");                                                          //12
            sMistext.Add("Deliver the ~b~Package~w~ to the ~y~Target~w~.");                                             //13
            sMistext.Add("Return the ~b~Delivery Vehicle~w~ to the ~y~Depot~w~.");                                   	//14
            sMistext.Add("Get on the ~b~Prison Bus~w~.");                                                            	//15
            sMistext.Add("You can find the ~r~Convicts~w~ parading near ");												//16
            sMistext.Add("Deliver the ~r~Convicts~w~ to ~y~Bolingbroke Penitentiary~w~.");                              //17
            sMistext.Add("Enter the '~b~Fubar Dilettante~w~'.");                                                        //18
            sMistext.Add("There is a ~b~Customer~w~ at ");                												//19
            sMistext.Add("Press your ~b~Horn~w~. To attract their attention.");                                         //20
            sMistext.Add("Can you take me to ");                          												//21
            sMistext.Add("Can you take us to ");                          												//22
            sMistext.Add("Goto the ~y~Stunt Plane~w~'.");                                                               //23
            sMistext.Add("Enter the ~b~Stunt Plane~w~.");                                                               //24
            sMistext.Add("Fly through the ~y~Coronas~w~, bonuses for flying inverted and full bank.");                  //25
            sMistext.Add("Goto the ~b~Helicopter~w~.");                                                                 //26
            sMistext.Add("Enter the ~b~Helicopter~w~.");                                                                //27
            sMistext.Add("Goto the ~b~CEO~w~ near ");                     												//28
            sMistext.Add("Deliver the ~b~CEO~w~ to their ~y~Office~w~.");                                               //29
            sMistext.Add("Looks like this ~r~CEO~w~ is a psycho, better get out of there...");							//30
            sMistext.Add("Goto the ~b~B-11 Strikeforce~w~ at ~y~Fort Zancudo~w~.");                                     //31
            sMistext.Add("Enter the ~b~B-11 Strikeforce~w~.");                                                          //32
            sMistext.Add("Deliver the ~b~B-11 Strikeforce~w~ to '~y~Sandy Shores~w~' airfield.");                       //33
            sMistext.Add("Change of plan, avoid being ~r~Shot down~w~ while we find an alternative ~y~airfield~w~.");   //34
            sMistext.Add("Deliver the ~b~B-11 Strikeforce~w~ to '~y~Grapeseed~w~' airfield.");                          //35
            sMistext.Add("Goto the ~b~Buzzard~w~ parked on the ~y~Noose HQ~w~.");                                       //36
            sMistext.Add("Enter the ~b~Buzzard~w~.");                                                                   //37
            sMistext.Add("The ~b~CEO~w~ is in a ~r~Cargobob~w~ above the ~y~Target~w~.");                               //38
            sMistext.Add("The ~b~CEO~w~ is ~g~Above~w~ you.");                                                          //39
            sMistext.Add("The ~b~CEO~w~ is ~o~Below~w~ you.");                                                          //40
            sMistext.Add("Goto the ~b~Duster~w~ parked at ~y~Grapeseed~w~ airfield.");                                  //41
            sMistext.Add("Enter the ~b~Duster~w~.");                                                                    //42
            sMistext.Add("You are loaded up with ~r~Monsanto's~w~ finest, watch out for the ~g~environmentalists~w~."); //43
            sMistext.Add("Fly from the ~y~Yellow~w~ to the ~o~Orange~w~ target.");                                      //44
            sMistext.Add("Goto the ~b~Helicopter~w~ at the ~y~Jetsam Office~w~.");                                      //45
            sMistext.Add("Enter the ~b~Helicopter~w~.");                                                                //46
            sMistext.Add("Fly to the ~y~Beauty Spot~w~.");                                                            	//47
            sMistext.Add("Gently land in the ~y~Corona~w~.");                                                           //48
            sMistext.Add("Wait while your passengers take ~r~Selfies~w~.");                                             //49
            sMistext.Add("Return to the ~y~Jetsam Office~w~.");                                                         //50
            sMistext.Add("Goto the ~y~Prison Bus~w~.");                       											//51
            sMistext.Add("Goto the ~b~Ambulance~w~ by ");                       										//52
            sMistext.Add("Goto the ~r~Patient~w~ on ");					                                                //53
            sMistext.Add("Exit the ~b~Ambulance~w~.");                       											//54
            sMistext.Add("Goto the ~y~Patient~w~.");                       												//55
            sMistext.Add("Goto the ~y~Hospital~w~ before the time runs out.");                       					//56
            sMistext.Add("Enter the ~b~Ambulance~w~.");                       											//57
            sMistext.Add("Goto the ~y~Hospital~w~.");                       											//58
            sMistext.Add("The ~b~target~w~ was last spotted around ");       											//59
            sMistext.Add("Follow that ~b~Target Vehicle~w~. Don't get too close or too far.");							//60
            sMistext.Add("Eliminate the ~r~Targets~w~, before they can get to the police station.");					//61
            sMistext.Add("Eliminate the ~r~Targets~w~.");																//62
            sMistext.Add("Take the ~b~Targets Vehicle~w~.");															//63
            sMistext.Add("Deliver the ~b~Vehicle~w~ to the ~y~Destination~w~.");										//64
            sMistext.Add("Protect the ~b~Targets~w~.");																	//65
            sMistext.Add("Oh.. That wasn't supposed to happen...");														//66
            sMistext.Add("Goto the ~b~ Fire Engine ~w~ by ");															//67
            sMistext.Add("There is a ~b~Vehicle~w~ on fire at ");														//68
            sMistext.Add("There is a ~b~Building~w~ on fire at ");														//69
            sMistext.Add("There is a ~b~Waste Bin~w~ on fire at ");													    //70
            sMistext.Add("There is a ~b~Cat~w~ on fire at... No Sorry just a rescue cat at ");							//71
            sMistext.Add("There is a ~r~MadLad~w~ starting fires near ");												//72
            sMistext.Add("Spray the ~r~Fire~w~ with the ~b~Fire Engines~w~ hose.");										//73
            sMistext.Add("The ~r~Cat~w~ is ~g~Above~w~ you.");															//74
            sMistext.Add("The ~r~Cat~w~ is ~o~Below~w~ you.");															//75
            sMistext.Add("Return to the ~b~Fire Engine~w~.");															//76
            sMistext.Add("Deliver the ~b~Cat~w~ to its owner.");														//77
            sMistext.Add("Exit the ~b~Fire Engine~w~.");																//78
            sMistext.Add("Stop that ~r~MadLad~w~.");																	//79
            sMistext.Add("The ~r~Player's Vehicle~w~ is parked on ");													//80
            sMistext.Add("Enter the ~b~Vehicle~w~.");																	//81
            sMistext.Add("Deliver the ~b~Vehicle~w~ to ");																//82
            sMistext.Add("Exit the ~b~Vehicle~w~ and leave the ~o~Area~w~ before the ~r~Player~w~ arrives.");			//83
            sMistext.Add("Enter the provided ~b~Vehicle~w~. Or use your own ~b~Vehicle~w~.");							//84
            sMistext.Add("Goto the ~y~Start Line~w~.");																	//85
            sMistext.Add("Your ~b~Vehicle~w~ is in the wrong class for this race type.");								//86
            sMistext.Add("Find the '~b~Explosive Device~w~' near ");													//87
            sMistext.Add("Look for the '~b~Explosive Device~w~'.");														//88
            sMistext.Add("Deliver the '~b~Explosive Device~w~' to the nearby '~y~Police Station~w~'.");					//89
            sMistext.Add("Goto the ~y~Target Destination~w~.");															//90
            sMistext.Add("Eliminate the '~p~Marked Target~w~', silently with a '~r~Melee~w~' weapon.");					//91
            sMistext.Add("Goto the ~y~Security Depot~w~.");																//92
            sMistext.Add("Goto the ~y~Business~w~.");																	//93
            sMistext.Add("Enter the ~b~Security Truck~w~.");																//94
            sMistext.Add("Exit the ~b~Security Truck~w~.");																//95
            sMistext.Add("The ~b~Shops Takings~w~ are at the back of the store~w~.");									//96
            sMistext.Add("Return the ~b~Shops Takings~w~ to the ~y~Security Depot~w~.");									//97
            sMistext.Add("Goto the ~y~East Docks~w~.");																	//98
            sMistext.Add("Enter the ~b~Tug Boat~w~.");																	//99
            sMistext.Add("Goto the ~y~Export Barge~w~.");																//100
            sMistext.Add("Maneuverer the ~b~Tug Boat~w~ to attach the ~r~Tug Hook~w~ to the ~y~Barge~w~.");				//101
            sMistext.Add("Deliver the ~b~Barge~w~ to the ~y~Target Destination~w~.");									//102
            sMistext.Add("Protect the ~b~Car Collection~w~.");															//103
            sMistext.Add("STOP THAT ~r~CARGOBOB~w~, from stealing the cars.");											//104
            sMistext.Add("Select one of the three ~b~Vehicles~w~ to get to the ~y~Yacht~w~.");							//105
            sMistext.Add("Enter the ~b~Sea Sparrow~w~.");																//106
            sMistext.Add("Enter the ~b~Jetmax~w~.");																	//107
            sMistext.Add("Enter the ~b~Technical Aqua~w~.");															//108
            sMistext.Add("Goto the ~y~Yacht~w~.");																		//109
            sMistext.Add("Eliminate the ~r~Pirates~w~.");																//110
            sMistext.Add("Goto the ~y~White Water Activity Center~w~.");												//111
            sMistext.Add("Enter the ~b~Boat~w~.");																		//112
            sMistext.Add("Hold the boat in position while the ~b~Signal Scanner~w~ reads the signal");					//113
            sMistext.Add("Goto the ~y~Phishing Signal~w~ location.");													//114
            sMistext.Add("Deliver the ~b~Boat~w~ to the ~y~Dock~w~.");													//115
            sMistext.Add("Goto the ~b~Blazer Aqua~w~ parked in the ~y~Storm Drains~w~.");								//116
            sMistext.Add("Get on the ~b~Blazer Aqua~w~.");																//117
            sMistext.Add("Collect the ~g~Rubbish~w~.");																	//118
            sMistext.Add("Goto the '~y~Galilee Boatyard~w~'.");															//119
            sMistext.Add("Pick a ~b~Boat~w~ to deliver.");																//120
            sMistext.Add("Deliver the ~b~Boat~w~ to the ~y~Target Destination~w~.");									//121
            sMistext.Add("Goto the ~y~Stromberg~w~.");																	//122
            sMistext.Add("Goto ~y~Paleto Cove~w~.");																	//123
            sMistext.Add("Enter the ~b~Stromberg~w~.");																	//124
            sMistext.Add("Goto the ~y~Submarine~w~.");																	//125
            sMistext.Add("Goto the ~y~control room~w~.");																//126
            sMistext.Add("Interrogate the ~b~contact~w~.");																//127
            sMistext.Add("Find the contact.");																			//128
            sMistext.Add("Plug Cliffie into the ~g~console~w~.");														//129
            sMistext.Add("Kill ~r~Bogdam~w~ before he starts talking rubbish for half an hour.");						//130
            sMistext.Add("Escape from the ~b~Submarine~w~.");															//131
            sMistext.Add("Drive around till your ~r~Radar~w~ detects the ~b~Vehicle~w~ we require.");					//132
            sMistext.Add("Take that ~b~Vehicle~w~.");																	//133
            sMistext.Add("Deliver the ~b~Vehicle~w~ to the ~y~Export Barge~w~.");										//134
            sMistext.Add("Release the ~b~Vehicle~w~ over the ~y~Export Barge~w~.");										//135
            sMistext.Add("Enter the ~b~Vehicle~w~.");																	//136
            sMistext.Add("Goto the ~y~Apartment~w~.");																	//137
            sMistext.Add("Collect the ~b~Payment Case~w~.");															//138
            sMistext.Add("Deliver the ~b~Payment Case~w~ to the ~y~Bank~w~.");											//139
            sMistext.Add("Goto this rival ~y~MC Business");																//140
            sMistext.Add("Aim your ~r~Weapon~w~ at the workers to make them walk to the ~y~Exit~w~.");					//141
            sMistext.Add("Exit the ~y~MC Business~w~.");																//142
            sMistext.Add("Enter the ~b~Party Bus~w~.");																	//143
            sMistext.Add("Deliver the ~r~Workers~w~ to the ~y~Club House~w~.");											//144
            sMistext.Add("Eliminate the ~r~Bikers~w~.");																//145
            sMistext.Add("Find the ~r~Keys~w~ to the ~b~Slamvan~w~.");													//146
            sMistext.Add("Collect the ~y~Keys~w~.");																	//147
            sMistext.Add("Enter the ~b~Slamvan~w~.");																	//148
            sMistext.Add("Deliver the ~r~Slamvan~w~ to the ~y~Club House~w~.");											//149
            sMistext.Add("Goto the ");																					//150
            sMistext.Add("Enter the ~b~forklift~w~.");																	//151
            sMistext.Add("Use the ~r~forklift~w~ to collect the ~b~Golden Egg~w~.");									//152
            sMistext.Add("Use the ~r~forklift~w~ to collect the ~b~Yetti Hide~w~.");									//153
            sMistext.Add("Use the ~r~forklift~w~ to collect the ~b~Golden Minigun~w~.");								//154
            sMistext.Add("Use the ~r~forklift~w~ to collect the ~b~Film Real~w~.");										//155
            sMistext.Add("Use the ~r~forklift~w~ to collect the ~b~Watch~w~.");											//156
            sMistext.Add("Use the ~r~forklift~w~ to collect the ~b~Large Diamond~w~.");									//157
            sMistext.Add("Deliver the ~b~Golden Egg~w~ to the ~y~pickup truck~w~.");									//158
            sMistext.Add("Deliver the ~b~Yetti Hide~w~ to the ~y~pickup truck~w~.");									//159
            sMistext.Add("Deliver the ~b~Golden Minigun~w~ to the ~y~pickup truck~w~.");								//160
            sMistext.Add("Deliver the ~b~Film Real~w~ to the ~y~pickup truck~w~.");										//161
            sMistext.Add("Deliver the ~b~Watch~w~ to the ~y~pickup truck~w~.");											//162
            sMistext.Add("Deliver the ~b~Large Diamond~w~ to the ~y~pickup truck~w~.");									//163
            sMistext.Add("Enter the ~b~Sandking~w~.");																	//164
            sMistext.Add("Deliver the ~b~Golden Egg~w~ to the ~y~Buyer~w~.");											//165
            sMistext.Add("Deliver the ~b~Yetti Hide~w~ to the ~y~Buyer~w~.");											//166
            sMistext.Add("Deliver the ~b~Golden Minigun~w~ to the ~y~Buyer~w~.");										//167
            sMistext.Add("Deliver the ~b~Film Real~w~ to the ~y~Buyer~w~.");											//168
            sMistext.Add("Deliver the ~b~Watch~w~ to the ~y~Buyer~w~.");												//169
            sMistext.Add("Deliver the ~b~Large Diamond~w~ to the ~y~Buyer~w~.");											//170
            sMistext.Add("Enter the ~b~Submarine~w~.");																	//171
            sMistext.Add("Detonate the bait when the ~r~Sharks~w~ are feeding.");										//172
            sMistext.Add("Drop the bait bomb to attract the ~r~Sharks~w~.");											//173
            sMistext.Add("Find the missing '~y~Partier~w~'. Don't let them spot you following.");						//174
            sMistext.Add("Follow that ~b~Partier~w~ and keep out of their vision cone.");								//175
            sMistext.Add("The ~b~Thief~w~ was spotted by ~y~Main Docks~w~.");											//176
            sMistext.Add("The ~b~Thief~w~ was spotted by ~y~North Docks~w~.");											//177
            sMistext.Add("The ~b~Thief~w~ was spotted by ~y~Airstrip~w~.");											//178
            sMistext.Add("Goto this ~y~Business~w~.");																	//179
            sMistext.Add("Use this ~r~Bat~w~ to damage goods in his shop");												//180
            sMistext.Add("Goto the ~y~Targets Vehicle~w~");																//181
            sMistext.Add("Drive the ~b~Targets Vehicle~w~ to the ~y~Bomb Garage~w~");									//182
            sMistext.Add("Return the ~b~Vehicle~w~ to the ~y~Target~w~. Careful not to set off the bomb");				//183
            sMistext.Add("Hide somewhere so that the ~r~Target~w~ does not spot you.");									//184
            sMistext.Add("Goto the ~y~LS Car Meet~w~.");																//185
            sMistext.Add("Pick any ~b~Compact Vehicle~w~ to enter.");													//186
            sMistext.Add("Get the ~y~Ball~w~ into the ~b~Blue~w~ goal.");												//187
            sMistext.Add("Get The ~y~Ball~w~ into the ~r~Red~w~ goal.");												//188
            sMistext.Add("Enter the ~b~Fire Engine~w~.");						                                        //189
            sMistext.Add("Hey thanks for not destroying my cargo.. Here i got a 'Pac Standard' if your interested?");	//190
            sMistext.Add("Total Packages delivered : ");	                                                            //191
            sMistext.Add("Fubar multi ride bonus = $");			                                                        //192
            sMistext.Add("Your Time : ");						                                                        //193
            sMistext.Add("Interceptors shot down, ");			                                                        //194
            sMistext.Add("Glyphosate Remaining ");			                                                            //195
            sMistext.Add("Lbs");					                                                                    //196
            sMistext.Add(", Patients recovered");			                                                            //197
            sMistext.Add("Goto the ~y~Nightclub~w~.");																	//198
            sMistext.Add("Goto the ~y~Balcony Bar~w~.");																//199
            sMistext.Add("Serve the ~y~Customers~w~.");															        //200
            sMistext.Add("Put the money in the ~y~till~w~.");														    //201
            sMistext.Add("Get to ~y~Fort Zancudo~w~.");	                                    							//202
            sMistext.Add("Goto the ~y~Hangar~w~ roof.");																//203
            sMistext.Add("Enter the ~b~Dozer~w~.");																		//204
            sMistext.Add("Use the ~b~Dozer~w~ to load the ~r~Dupes~w~ into the ~y~Dump~w~.");							//205
            sMistext.Add("Enter the ~b~Dump~w~.");																		//206
            sMistext.Add("Drive the ~b~Dump~w~ to the ~y~Destination~w~.");												//207
            sMistext.Add("Goto the ~y~Casino~w~.");																		//208
            sMistext.Add("Remove your ~b~Weapons~w~ before entering the ~y~Security Gate~w~.");							//209
            sMistext.Add("Go and collect your ~b~Uniform~w~.");															//210
            sMistext.Add("Goto the casino ~y~Main Entrance~w~.");														//211
            sMistext.Add("Stand at the ~b~Lectern~w~ and wait for a customer to arrive.");								//212
            sMistext.Add("Enter the customers ~b~Vehicle~w~.");															//213
            sMistext.Add("Deliver the ~b~Vehicle~w~ to the ~y~Parking Garage~w~.");										//214
            sMistext.Add("Return to the ~y~Lectern~w~.");																//215
            sMistext.Add("Collect the customers ~b~Vehicle~w~ from the ~y~Parking Garage~w~.");						//216
            sMistext.Add("Deliver the ~b~Vehicle~w~ to the casino ~y~Main Entrance~w~.");								//217
            sMistext.Add("Exit the customers ~b~Vehicle~w~.");															//218
            sMistext.Add("Goto the ~y~Secret Underground Layer~w~.");													//219
            sMistext.Add("The ~b~Foreman~w~ needs help.");																//220
            sMistext.Add("The ~b~Technician~w~ needs help.");															//221
            sMistext.Add("The ~b~Scientist~w~ needs help.");															//222
            sMistext.Add("~r~Players~w~ are attacking the ~b~Secret Underground Layer~w~. Stop them.");					//223
            sMistext.Add("Collect the ");																				//224
            sMistext.Add("Return to the ~b~Foreman~w~.");																//225
            sMistext.Add("Return to the ~b~Technician~w~.");															//226
            sMistext.Add("Return to the ~b~Scientist~w~.");															//227
            sMistext.Add("The ~y~Secret Underground Layer~w~ is under attack.");										//228
            sMistext.Add("Goto the ~y~Deliverwho~w~ restaurant.");														//229
            sMistext.Add("Take the ~b~Deliverwho order~w~ to the ~y~Customer~w~.");										//230
            sMistext.Add("Return your ~y~Uniform~w~.");																	//231
            sMistext.Add("Collect your ~y~Weapons~w~.");																//232
            sMistext.Add("Exit the ~y~Building~w~.");																	//233
            sMistext.Add("Exit the ~b~Plane~w~ somewhere over the ~y~Drop Zone~w~.");									//234
            sMistext.Add("Make your way to the center of the ~y~Drop Zone~w~.");										//235
            sMistext.Add("You are outside of the ~y~Drop Zone~w~.");													//236
            sMistext.Add("Goto the ~y~Facility~w~.");										                            //237
            sMistext.Add("");										//238
            sMistext.Add("");										//239
            sMistext.Add("");										//240

            sContext.Clear();
            sContext.Add("Use the ~INPUT_DETONATE~ for Down and ~INPUT_CONTEXT~ for Up, Builder Mission = ");								//0
            sContext.Add(" ~INPUT_SPRINT~ Play Mission ~INPUT_JUMP~ Reject Mission ~n~ ~INPUT_DETONATE~ Options");							//1
            sContext.Add(" ~INPUT_SPRINT~ Continue Mission ~INPUT_JUMP~ End Mission");														//2
            sContext.Add("How many laps? Use the ~INPUT_DETONATE~ for less and ~INPUT_CONTEXT~ for more. Laps = ");							//3
            sContext.Add(", is the asking price. Did you want to Purchase this yacht? ~INPUT_SPRINT~ for Yes, ~INPUT_JUMP~ for No");		//4
            sContext.Add("Race type?, ~INPUT_DETONATE~ to change, ~INPUT_SPRINT~ to continue. Race type = ");								//5
            sContext.Add("Time trial");																										//6
            sContext.Add("Race");																											//7
            sContext.Add("Would you like to start the game on the yacht? ~INPUT_SPRINT~ for yes, ~INPUT_JUMP~ for No");						//8
            sContext.Add(" ~INPUT_DETONATE~ Options");																						//9
            sContext.Add("Open your map and place a waypoint for fast travel");																//10
            sContext.Add("Open your map and place a waypoint for fast travel, press ~INPUT_JUMP~ to go back");								//11
            sContext.Add("Enter the Vehicle");																								//12
            sContext.Add("Exit the vehicle");																								//13
            sContext.Add("Hold ~INPUT_CONTEXT~ to detach the trailer or ~n~Press ~INPUT_VEH_EXIT~ to exit the truck");						//14
            sContext.Add("Press ~INPUT_VEH_HORN~ to alert the convicts");																	//15
            sContext.Add("Press ~INPUT_VEH_HORN~ to alert the customer");																	//16
            sContext.Add("Press ~INPUT_VEH_HORN~ to alert the patient");																	//17
            sContext.Add("Hold ~INPUT_AIM~ to spray the fire");																				//18
            sContext.Add("Hold ~INPUT_AIM~ and press ~INPUT_Attack~ to perform a stealth kill");											//19
            sContext.Add("Tap ~INPUT_Duck~ to enter stealth mode");																			//20
            sContext.Add("Hold ~INPUT_CONTEXT~ to switch into submersible mode");															//21
            sContext.Add("Aim at the contact to obtain the information from them");															//22
            sContext.Add("Hold ~INPUT_AIM~ to aim your weapon at the workers");																//23
            sContext.Add("Hold ~INPUT_CONTEXT~, if the forklift gets stuck.");																//24
            sContext.Add("Hold ~INPUT_CONTEXT~ to explode the shark bait.");																//25
            sContext.Add("Press ~INPUT_CONTEXT~ to drop the shark bait.");																	//26
            sContext.Add("Press ~INPUT_ENTER~ to enter the helicopter");																	//27
            sContext.Add("Hold ~INPUT_CONTEXT~, if the dozer gets stuck.");																	//28
            sContext.Add("Hold ~INPUT_CONTEXT~ to jump from the plane.");																	//29
            sContext.Add("~n~ ~INPUT_JUMP~ to exit. ~INPUT_DETONATE~/~INPUT_CONTEXT~, to Deduct/Add.");										//30
            sContext.Add("Press ~INPUT_VEH_EXIT~ to reset to last checkpoint.");                                                            //31
            sContext.Add("");           //32
            sContext.Add("");           //33
            sContext.Add("");           //34
            sContext.Add("");           //35

            sJobtext.Clear();
            sJobtext.Add("Trucking");                                                          	                    		//0
            sJobtext.Add("Getaway Driver");                                                                         		//1
            sJobtext.Add("Packages");                                                                               		//2
            sJobtext.Add("Convicts");                                                                               		//3
            sJobtext.Add("Fubar");                                                                                  		//4
            sJobtext.Add("Pilot");                                                                                  		//5
            sJobtext.Add("Ambulance");                                                                              		//6
            sJobtext.Add("Follow");                                                                                 		//7
            sJobtext.Add("LSFD");                                                                                   		//8
            sJobtext.Add("Johnny");                                                                                 		//9
            sJobtext.Add("Racist");                                                                                 		//10
            sJobtext.Add("Explosive Device");                                                                       		//11
            sJobtext.Add("Assassination");                                                                          		//12
            sJobtext.Add("Gruppe 6");                                                                              		 	//13
            sJobtext.Add("Sailor");                                                                                			//14
            sJobtext.Add("Important Exports");                                                                      		//15
            sJobtext.Add("Debt Collect");                                                                           		//16
            sJobtext.Add("MC Business");                                                                            		//17
            sJobtext.Add("Bay Lift");                                                                               		//18
            sJobtext.Add("Sharks");                                                                                 		//19
            sJobtext.Add("Happy Shopper");                                                                          		//20
            sJobtext.Add("Mores Mute");                                                                             		//21
            sJobtext.Add("Agency");                                                                            				//22
            sJobtext.Add("Free Fall");                                                                              		//23
            sJobtext.Add("Deliverwho");                                                                             		//24
            sJobtext.Add("Red Nut Air Race");                                                                     			//25
            sJobtext.Add("Pegasus");                                                                          				//26
            sJobtext.Add("Brrrrrrrrt");                                                                       				//27
            sJobtext.Add("Import Export");                                                                         			//28
            sJobtext.Add("Crop Dusting");                                                                          			//29
            sJobtext.Add("Heil Tours");                                                                            			//30
            sJobtext.Add("Argey Bargey");                                                                         			//31
            sJobtext.Add("Piracy");                                                                                 		//32
            sJobtext.Add("Phishing");                                                                              			//33
            sJobtext.Add("Litter Bugs");                                                                          			//34
            sJobtext.Add("Boat Yard");                                                                            			//35
            sJobtext.Add("Bogdam");                                                                                 		//36
            sJobtext.Add("Carball");                                                                               			//37
            sJobtext.Add("Clubbing");                                                                              			//38
            sJobtext.Add("Dupe Detection");                                                                        			//39
            sJobtext.Add("Valet");   		                                                                    			//40
            sJobtext.Add("Facility Bikes");                                                                    				//41
            sJobtext.Add("Underground Layer");                                                                     			//42
            sJobtext.Add("Thief");                                                                                 			//43
            sJobtext.Add("Mr Pavel has requested that these ~b~Packages~w~ be left around the island..");					//44
            sJobtext.Add("One of the partiers has been seen snooping around i need you to ~b~Follow~w~ them.");				//45
            sJobtext.Add("Join the Monty Cayo Perro Rally you old '~b~Racist~w~'.");                                		//46
            sJobtext.Add("Some of my Dj's have been caught playing 'Rick Astley' you must ~b~Assassinate~w~ them.");		//47
            sJobtext.Add("There is a ~b~thief~w~ on the island, help us stop them.");  		                 				//48
            sJobtext.Add("Hello, Do you have the 'LS ~b~Trucking~w~ permit'?.. that's ok none of our drivers have..");		//49
            sJobtext.Add("Hi, our ~b~Getaway Driver~w~ has got away... Can you find a four seater car? Quickly...");		//50
            sJobtext.Add("Shopping was so last century. Now everyone wants their ~b~Packages~w~ delivered..");				//51
            sJobtext.Add("Hey, there are a group of day release ~b~Convicts~w~ nearby, can you take them back to prison?");	//52
            sJobtext.Add("Unlicensed with a barely legal vehicle... Welcome to '~b~Fubar~w~'. It's 'NOT' a taxi service..");//53
            sJobtext.Add("The 'Red Nut Air Race' is about to start and we are missing a ~b~Stunt Pilot~w~.");              	//54
            sJobtext.Add("Our regular ~b~Helicopter Pilot~w~ has been put into quarantine, can you fly our helicopter?"); 	//55
            sJobtext.Add("I've got a free pass to 'Fort Zancudo' for any ~b~Pilot~w~ willing to collect our Brrrt.");     	//56
            sJobtext.Add("Some CEO wannabe is collecting cars with a cargobob. Destroy that ~b~Pilot~w~ and his cargo."); 	//57
            sJobtext.Add("Howdy, ~b~Pilot~w~ got enough glyphosate to give every citizen of Los Santos Non-Hodgkin lymphoma.");//58
            sJobtext.Add("'Higgins Heli Tours' needs ~b~Pilots~w~. Uniform not required...");     							//59
            sJobtext.Add("'Los Santos' is a dangerous place. Can you help? Join the '~b~Los Santos Ambulance Service~w~'.");//60
            sJobtext.Add("Hello, can you ~b~Follow~w~ someone for us?");    												//61
            sJobtext.Add("'~b~LSFD~w~'. Wants you to fulfill that burning desire.. Join today");           					//62
            sJobtext.Add("It's '~b~Johnny on the Spot~w~' . Can you deliver a players vehicle for me?");     	       		//63
            sJobtext.Add("Hello, we are looking for a '~b~Racist~w~'. Are you a '~b~Racist~w~'?");  						//64
            sJobtext.Add("There is an '~b~Explosive Device~w~' hidden in a secret area... Did you want to know more?");  	//65
            sJobtext.Add("Greetings, They're certain targets that need '~b~Assassination~w~'. Could you help?");  			//66
            sJobtext.Add("Congratulations your application to '~b~Gruppe 6 security~w~' has been approved.");  	          	//67
            sJobtext.Add("Ahoy ~b~Sailor~w~. We have a barge full of cars to deliver, if you are interested?");        		//68
            sJobtext.Add("Ahoy ~b~Sailor~w~. Your yacht is over run with pirates..Can you put an end to them salty sea dogs?");//69
            sJobtext.Add("Ahoy ~b~Sailor~w~. My yacht is over run with pirates.. Can you put an end to them salty sea dogs?");//70
            sJobtext.Add("Ahoy ~b~Sailor~w~. There is something fishy going on in 'Lago Zancudo'...");   	     			//71
            sJobtext.Add("Ahoy ~b~Sailor~w~. The 'Los Santos' storm drain is over run with rubbish... Can you clean it up?");//72
            sJobtext.Add("Ahoy ~b~Sailor~w~. We got some boats that need delivery, come to the 'Galilee boat yard'.");    	//73
            sJobtext.Add("Ahoy ~b~Sailor~w~. There are rumors of a Russian sub in the bay, can you check it out?");   	  	//74
            sJobtext.Add("There are some ~b~Important Exports~w~. That need to be found.. Are you interested?");         	//75
            sJobtext.Add("Good day. I need someone to '~b~Debt Collect~w~' for us. You'll get 10%.");            	      	//76
            sJobtext.Add("There is a rival '~b~MC Business~w~' operating on our turf. Can you put a stop to them?");       	//77
            sJobtext.Add("Hello there is a CEO with a large debt to us. Can you '~b~Bay Lift~w~' a certain special item.");	//78
            sJobtext.Add("A shiver of '~b~Sharks~w~' are terrorizing the swimmers of 'Los Santos'. Can you help?");      	//79
            sJobtext.Add("We need some protection money collected, can you be a ~b~Happy Shopper~w~ and go collect?");		//80
            sJobtext.Add("A representative of ~b~Mores mutual~w~, is investigating a claim i have.. Borrow his car.");		//81
            sJobtext.Add("It's a game of two halves on a level playing ~b~Agency~w~ said your a team player, interested?");	//82
            sJobtext.Add("I've just opened a new club. and need help you were recommended by the ~b~Agency~w~...");         	//83
            sJobtext.Add("Hi it's 'Take 2'. We have some ~b~Agency~w~ work, removing a dupe collection from an exploiter.");//84
            sJobtext.Add("Hello it's the Diamond Resort, The ~b~Agency~w~ said you maybe interested in some work?");			//85
            sJobtext.Add("Hey we've smuggled some BMX's into a facility, ~b~Agency~w~ recommended you as a racist.");		//86
            sJobtext.Add("Hi we have just opened a secret underground lab if you are interested in some ~b~Agency~w~ work.");//87
            sJobtext.Add("This state has gone in to ~b~Free Fall~w~ are you ready to take a jump.");                     	//88
            sJobtext.Add("No one wants to eat out anymore.. So we must ~b~Deliverwho~w~ the restaurant to them.");			//89
            sJobtext.Add("You have no mission types selected.");                                                          	//90
            sJobtext.Add("");                                                                                               //91
            sJobtext.Add("");                                                                                               //92
            sJobtext.Add("");                                                                                               //93
            sJobtext.Add("");                                                                                               //94
            sJobtext.Add("");                                                                                               //95
            sJobtext.Add("");                                                                                               //96
            sJobtext.Add("");                                                                                               //97
            sJobtext.Add("");                                                                                               //98
            sJobtext.Add("");                                                                                               //99
            sJobtext.Add("");                                                                                               //100


            sOthertext.Clear();
            sOthertext.Add("GOODS VALUE");         		                            //0
            sOthertext.Add("TIME REMAINING");         		                        //1
            sOthertext.Add("TAKE");         			                            //2
            sOthertext.Add("PACKAGES");         		                            //3
            sOthertext.Add("FUBAR EARNINGS");         		                        //4
            sOthertext.Add("GLYPHOSATE REMAINING");         	                    //5
            sOthertext.Add("LOCATIONS");         		                            //6
            sOthertext.Add("GOONS REMAINING");         		                        //7
            sOthertext.Add("MALPRACTICE SUIT");         	                        //8
            sOthertext.Add("FIRE DAMAGE");         		                            //9
            sOthertext.Add("REPAIR COST");         		                            //10
            sOthertext.Add("POSITION");         		                            //11
            sOthertext.Add("CURRENT LAP");         		                            //12
            sOthertext.Add("DISTANCE");         		                            //13
            sOthertext.Add("WORLD RECORD");         		                        //14
            sOthertext.Add("TIME");         			                            //15
            sOthertext.Add("THE BOMB WILL EXPLODE IN :"); 	                        //16
            sOthertext.Add("SPOOK METER");         		                            //17
            sOthertext.Add("TRACKING SIGNAL");         		                        //18
            sOthertext.Add("RUBBISH REMAINING");         	                        //19
            sOthertext.Add("The Main Docks");         		                        //20
            sOthertext.Add("The North Docks");         		                        //21
            sOthertext.Add("The Airstrip");         					            //22
            sOthertext.Add("I've got a saw throat and an odd taste in my mouth.");	//23
            sOthertext.Add("Cough..");         						                //24
            sOthertext.Add("Brains... Hmmm Brains...");         			        //25
            sOthertext.Add("Help I've been attacked by a lunatic.");         		//26
            sOthertext.Add("It's nothing really just a scratch.");         		    //27
            sOthertext.Add("Oww Ouch Ooo Eee");         				            //28
            sOthertext.Add("I think I've broken my coccyx.");         			    //29
            sOthertext.Add("Not much just severe lacerations and some internal bleeding.");//30
            sOthertext.Add("I'm melting.");         					            //31
            sOthertext.Add("It burns aggg.");         					            //32
            sOthertext.Add("Is it me or is it rather hot?");         			    //33
            sOthertext.Add("I've sustained second degree burns to my ...");       	//34
            sOthertext.Add("Ooo Hot Hot oo Oww.");         				            //35
            sOthertext.Add("*-Blur-* Burp...");         				            //36
            sOthertext.Add("OOo my stomach.");         				            //37
            sOthertext.Add("I don't feel too well.");         				        //38
            sOthertext.Add("I've filled my pants.");         				        //39
            sOthertext.Add("I think I've got Norovirus.");         			        //40
            sOthertext.Add("Can you look at my rash?");         			        //41
            sOthertext.Add("Hello can i get your autograph?");         			    //42
            sOthertext.Add("Where's that other medic the one they usually send?"); 	//43
            sOthertext.Add("Your so tall and handsome.");         			        //44
            sOthertext.Add("Oh what happened to your uniform? I want a real medic.");//45
            sOthertext.Add("Diagnosis");         					                //46
            sOthertext.Add("Triage your patient");         				            //47
            sOthertext.Add("Inject your patient with hydroxychloroquine");       	//48
            sOthertext.Add("Apply dressing to the burns");         			        //49
            sOthertext.Add("Give the patient an alcaselza suppository");         	//50
            sOthertext.Add("Dismiss your patient");         				        //51
            sOthertext.Add("Your best lap : ");         					        //52
            sOthertext.Add("Money Earned $");         						        //53
            sOthertext.Add("Mission Passed");         						        //54
            sOthertext.Add("Mission Failed");         						        //55
            sOthertext.Add("Select an option");         					        //56
            sOthertext.Add("Custom Vehicle");         						        //57
            sOthertext.Add("Custom Car");         						            //58
            sOthertext.Add("Custom Plane");         						        //59
            sOthertext.Add("Custom Boat");         						            //60
            sOthertext.Add("Custom Helicopter");         					        //61
            sOthertext.Add("Add Custom Car");         						        //62
            sOthertext.Add("Add Custom Plane");         					        //63
            sOthertext.Add("Add Custom Boat");         						        //64
            sOthertext.Add("Add Custom Helicopter");         				        //65
            sOthertext.Add("Select Available Missions");        			        //66
            sOthertext.Add("Select Settings");         						        //67
            sOthertext.Add("Show Route");           						        //68
            sOthertext.Add("Toggle GPS to target.");           				        //69
            sOthertext.Add("Subtitles");           						            //70
            sOthertext.Add("Toggle Subtitle/Notify Ui.");           			    //71
            sOthertext.Add("Phone Cone");           						        //72
            sOthertext.Add("Toggle the blip and cone for street phones.");          //73
            sOthertext.Add("Enemy Strength");           					        //74
            sOthertext.Add("Reduce the damage enemies inflict.");           		//75
            sOthertext.Add("Fast Travel");           						        //76
            sOthertext.Add("Be moved to the start location/vehicle for mission.");  //77
            sOthertext.Add("Toggle Phone Audio");         					        //78
            sOthertext.Add("Toggles the street phone audio ring.");         		//79
            sOthertext.Add("Block This Phone");         					        //80
            sOthertext.Add("Add this phone to a list of blocked phones.");         	//81
            sOthertext.Add("Builder Missions Select");         					    //82
            sOthertext.Add("Select Builder missions on job launch.");         		//83
            sOthertext.Add("Phone Animation");         						        //84
            sOthertext.Add("Phone pickup animation.");         					    //85
            sOthertext.Add("Load On Yacht");         						        //86
            sOthertext.Add("Start your game on the yacht.");         			    //87
            sOthertext.Add("Yacht Price :");         						        //88
            sOthertext.Add("Set the purchase price of the yacht.");         		//89
            sOthertext.Add("Online Maps");         						            //90
            sOthertext.Add("Disable PreLoad of 'Online Maps'");         		    //91
            sOthertext.Add("Build Menu");         						            //92
            sOthertext.Add("Select an option.");         					        //93
            sOthertext.Add("Save Mission");         						        //94
            sOthertext.Add("Discard Mission");         						        //95
            sOthertext.Add("Re-Test Mission");         						        //96
            sOthertext.Add("Previous trailer");         					        //97
            sOthertext.Add("Next trailer");         						        //98
            sOthertext.Add("Previous livery");         						        //99
            sOthertext.Add("Next livery");         						            //100
            sOthertext.Add("Select Trailer");         						        //101
            sOthertext.Add("Back");         								        //102
            sOthertext.Add("Heading '-'");         							        //103
            sOthertext.Add("Heading '+'");         							        //104
            sOthertext.Add("Left");         								        //105
            sOthertext.Add("Right");         								        //106
            sOthertext.Add("Forward");         								        //107
            sOthertext.Add("Backward");         							        //108
            sOthertext.Add("Select Position");         							    //109
            sOthertext.Add("Place vehicle here");         						    //110
            sOthertext.Add("Test Mission");         							    //111
            sOthertext.Add("Add another end location");         			        //112
            sOthertext.Add("Previous");         							        //113
            sOthertext.Add("Next");         								        //114
            sOthertext.Add("Select Vehicle");         							    //115
            sOthertext.Add("Add Delivery Point");         						    //116
            sOthertext.Add("Finish and Test");         							    //117
            sOthertext.Add("Add March Point");         							    //118
            sOthertext.Add("Set Fubar Park Position");         				        //119
            sOthertext.Add("Set Fubar Ped Spawn Position");         			    //120
            sOthertext.Add("Make another fubar drop");         						//121
            sOthertext.Add("Add ped position");         						    //122
            sOthertext.Add("Set shark spawn position");         			        //123
            sOthertext.Add("Make start point and test");         			        //124
            sOthertext.Add("Previous Class");         							    //125
            sOthertext.Add("Next Class");         							        //126
            sOthertext.Add("Add Vehicle to race list");         			        //127
            sOthertext.Add("Continue");         							        //128
            sOthertext.Add("Set players race vehicle drop point");         		    //129
            sOthertext.Add("Set start line furthest left position");         		//130
            sOthertext.Add("Race start Position ");         				        //131
            sOthertext.Add("Add race target");         							    //132
            sOthertext.Add("Remove last bomb");                                     //133
            sOthertext.Add("Add bomb location");         						    //134
            sOthertext.Add("Add Boss location and heading");         			    //135
            sOthertext.Add("Add Goon location and heading");         			    //136
            sOthertext.Add("Add goon walk path");         						    //137
            sOthertext.Add("Make next path");         							    //138
            sOthertext.Add("Make start point and test");         			        //139
            sOthertext.Add("Your NSCoins acc has gone up ");         			    //140
            sOthertext.Add("Your low risk acc has gone up ");         			    //141
            sOthertext.Add("Your high risk acc has gone up ");         			    //142
            sOthertext.Add("Your NSCoins acc has gone down ");         			    //143
            sOthertext.Add("Your low risk acc has gone down ");         		    //144
            sOthertext.Add("Your high risk acc has gone down ");         		    //145
            sOthertext.Add("balance; ");         							        //146
            sOthertext.Add("Too close to start");                                   //147
            sOthertext.Add("INTIMIDATION");         		                        //148
            sOthertext.Add("VEHICLE DAMAGE");         		                        //149
            sOthertext.Add("RED'S/BLUE'S");         		                        //150
            sOthertext.Add("TIME");         		                                //151
            sOthertext.Add("TIPS : ");         		                            	//152
            sOthertext.Add("BAR AGGRESSION");         		    					//153
            sOthertext.Add("STUNT BONUS");         		    						//154
            sOthertext.Add("ZONE RESIZE IN:");         		                        //155
            sOthertext.Add("PLAYERS REMAINING");         		                    //156
            sOthertext.Add("Have considered checking out and subscribing to the mod authors Youtube channel ~r~www.youtube.com/channel/UC66Rwd48-5wlObM9pDo15tg~w~.");         		    //157
            sOthertext.Add("");         		    //158
            sOthertext.Add("");         		    //159
            sOthertext.Add("");                     //160

            sContactLang.Clear();
            sContactLang.Add("All our Fubar drivers are busy please try again later...");               //0
            sContactLang.Add("Your vehicle can't be delivered at this time...");                        //1
            sContactLang.Add("There are no weapons dealers in your area.");                             //2
            sContactLang.Add("A Medic can not be dispatched at this time...");                          //3
            sContactLang.Add("Import Export Refund");                                                   //4
            sContactLang.Add("Medical Refund");                                                         //5
            sContactLang.Add("Pegasus Refund");                                                         //6
            sContactLang.Add("Your NSCoins acc has gone Up");                                           //7
            sContactLang.Add("Your low risk acc has gone Up");                                          //8
            sContactLang.Add("Your high risk acc has gone Up");                                         //9
            sContactLang.Add("Your NSCoins acc has gone down");                                         //10
            sContactLang.Add("Your low risk acc has gone down");                                        //11
            sContactLang.Add("Your high risk acc has gone down");                                       //12
            sContactLang.Add("balance; ");                                                              //13
            sContactLang.Add("Fubar Carz");                                                             //14
            sContactLang.Add("NSCoin ");                                                                //15
            sContactLang.Add("NSPM Bank");                                                              //16
            sContactLang.Add("New contact added :");                                                    //17
            sContactLang.Add("Fubar Cars");                                                             //18
            sContactLang.Add("Import/Export Cars");                                                     //19
            sContactLang.Add("Mk2 Weapons Man");                                                        //20
            sContactLang.Add("Pegasus Travel");                                                         //21
            sContactLang.Add("Police Bribes");                                                          //22
            sContactLang.Add("Medicare");                                                               //23
            sContactLang.Add("Account");                                                                //24
            sContactLang.Add("Current ");                                                               //25
            sContactLang.Add("Get an account statement");                                               //26
            sContactLang.Add("Bank Transfer");                                                          //27
            sContactLang.Add("Logout");                                                                 //28
            sContactLang.Add("Current Acc: ");                                                          //29
            sContactLang.Add("Import List");                                                            //30
            sContactLang.Add("Super");                                                                  //31
            sContactLang.Add("Sports");                                                                 //32
            sContactLang.Add("Sports Classics");                                                        //33
            sContactLang.Add("Mussel");                                                                 //34
            sContactLang.Add("Offroad");                                                                //35
            sContactLang.Add("Coupe");                                                                  //36
            sContactLang.Add("SUV");                                                                    //37
            sContactLang.Add("Compacts");                                                               //38
            sContactLang.Add("Sedans");                                                                 //39
            sContactLang.Add("Custom Car");                                                             //40
            sContactLang.Add("Insufficient Funds");                                                     //41
            sContactLang.Add("Medical");                                                                //42
            sContactLang.Add("Mk2 Weapons");                                                            //43
            sContactLang.Add("Weapon List");                                                            //44
            sContactLang.Add("Request Weapons Man");                                                    //45
            sContactLang.Add("Return Missing Weapons");                                                 //46
            sContactLang.Add("Refill Ammo");                                                            //47
            sContactLang.Add("Pegasus");                                                                //48
            sContactLang.Add("Pegasus Lifestyle");                                                      //49
            sContactLang.Add("Civilian Helicopters");                                                   //50
            sContactLang.Add("Military Helicopters");                                                   //51
            sContactLang.Add("Civilian Planes");                                                        //52
            sContactLang.Add("Military Planes");                                                        //53
            sContactLang.Add("Boats");                                                                  //54
            sContactLang.Add("Special Vehicles");                                                       //55
            sContactLang.Add("Custom Boat");                                                            //56
            sContactLang.Add("Custom Plane");                                                           //57
            sContactLang.Add("Custom Heli");                                                            //58
            sContactLang.Add("you need to be in the water.");                                           //59
            sContactLang.Add("Your next bribe can be taken in : ");                                     //60
            sContactLang.Add("Your wanted level is above 3 stars");                                     //61
            sContactLang.Add("Police Bribes");                                                          //62
            sContactLang.Add("DLC Spawn Error please update trainer mod");                              //63
            sContactLang.Add("Press ~INPUT_ENTER~ to enter the fubar ride");                            //64
            sContactLang.Add("Fubar Fair : ");                                                          //65
            sContactLang.Add("Go to mission target. ~INPUT_DETONATE~");                                 //66
            sContactLang.Add("Set your map waypoint to your destination");                              //67
            sContactLang.Add("press ~INPUT_DETONATE~ to purchase Mk2 Weapons");                         //68
            sContactLang.Add("~n~ ~INPUT_JUMP~ to exit. ~INPUT_DETONATE~/~INPUT_CONTEXT~, to Deduct/Add.");//69
            sContactLang.Add("Low Risk");                                                               //70
            sContactLang.Add("High Risk");                                                              //71
            sContactLang.Add("Ammo Type");                                                              //72
            sContactLang.Add("Attachments");                                                            //73
            sContactLang.Add("Livery");                                                                 //74
            sContactLang.Add("Go to waypoint target. ~INPUT_DETONATE~");                                //75
            sContactLang.Add("");                                                        //76
            sContactLang.Add("");                                                        //77
            sContactLang.Add("");                                                        //78
            sContactLang.Add("");                                                        //79
            sContactLang.Add("");                                                        //80

            sYachtLang.Clear();
            sYachtLang.Add("Invalid Model. Only available for Franklin, Michael, Trevor, FreemodeMale01 and FreemodeFemale01.");    //0
            sYachtLang.Add("Outfit");                                                                                               //1
            sYachtLang.Add("Save Current Outfit");                                                                                  //2
            sYachtLang.Add("Add Current Outfit");                                                                                   //3
            sYachtLang.Add("No Outfits to transfer");                                                                               //4
            sYachtLang.Add("Press ~INPUT_DETONATE~ to exit.");                             //5
            sYachtLang.Add("Press ~INPUT_DETONATE~ to remove scuba gear.");                             //6
            sYachtLang.Add("Press ~INPUT_DETONATE~ for scuba gear.");                             //7
            sYachtLang.Add("Press ~INPUT_DETONATE~ to sleep.");                             //8
            sYachtLang.Add("Press ~INPUT_DETONATE~ to stand up.");                             //9
            sYachtLang.Add("Press ~INPUT_DETONATE~ to stand here.");                             //10
            sYachtLang.Add("Press ~INPUT_DETONATE~ to Sit.");                             //11
            sYachtLang.Add("Press ~INPUT_DETONATE~ for wardrobe.");                             //12
            sYachtLang.Add("Press ~INPUT_DETONATE~ to play the piano.");                             //13
            sYachtLang.Add("Press ~INPUT_DETONATE~ to drink.");                             //14
            sYachtLang.Add("Fast Travel?, ~INPUT_DETONATE~, ~INPUT_CONTEXT~ to change, ~INPUT_SPRINT~ to continue.");                             //15
            sYachtLang.Add("Current destination is ");                             //16
            sYachtLang.Add("");                             //17
            sYachtLang.Add("");                             //18
            sYachtLang.Add("");                             //19


            MyLang.Maptext = sMaptext;
            MyLang.Mistext = sMistext;
            MyLang.Context = sContext;
            MyLang.Jobtext = sJobtext;
            MyLang.Othertext = sOthertext;
            MyLang.ContactLang = sContactLang;
            MyLang.YachtLang = sYachtLang;

            //BulidLang(MyLang, "" + Directory.GetCurrentDirectory() + "/Scripts/NSPMLanguage.Xml");
        }
        public int SelectBuilderMish(int iMishcon)
        {
            int iGot = -2;
            int iBuild = 0;
            int iChoose = 0;
            if (iMishcon == 1)
                iBuild = MyMissions.TruckersXM.Count() - 1;
            else if (iMishcon == 2)
                iBuild = MyMissions.PackersXM.Count() - 1;
            else if (iMishcon == 3)
                iBuild = MyMissions.ConsXM.Count() - 1;
            else if (iMishcon == 4)
                iBuild = MyMissions.JohnsXM.Count() - 1;
            else if (iMishcon == 5)
                iBuild = MyMissions.RaceXM.Count() - 1;
            else if (iMishcon == 6)
                iBuild = MyMissions.BombXM.Count() - 1;
            else if (iMishcon == 7)
                iBuild = MyMissions.HitXM.Count() - 1;
            else if (iMishcon == 8)
                iBuild = MyMissions.SharksXM.Count() - 1;

            while (iGot == -2)
            {
                string sTypo = MyLang.Context[0] + iChoose;
                ControlerUI(sTypo, 1);
                Script.Wait(1);
                if (Game.IsControlJustPressed(2, GTA.Control.Sprint))
                    iGot = iChoose;
                else if (Game.IsControlJustPressed(2, GTA.Control.Detonate))
                {
                    if (iChoose > 0)
                        iChoose -= 1;
                }
                else if (Game.IsControlJustPressed(2, GTA.Control.Context))
                {
                    if (iChoose < iBuild)
                        iChoose += 1;
                }
            }
            return iGot;
        }
        private void Truckin()
        {
            LogThis("Truckin");

            VTBTimerPool.Add(ttTextBar_01);
            ttTextBar_01.Label = "" + MyLang.Othertext[0] + "";
            ttTextBar_02.Label = "" + MyLang.Othertext[1] + "";
            BeOnOff.Clear();
            iTime_01.Clear();
            iList_01.Clear();
            iList_02.Clear();
            sList_01.Clear();
            fMission_01 = 0.00f;
            fMission_02 = 0.00f;
            fMission_03 = 0.00f;

            iMissionVar_01 = 0;

            BeOnOff.Add(false);//TruckBlip-- 0
            BeOnOff.Add(false);//btrailDamage-- 1
            BeOnOff.Add(false);//bTrailAtach-- 2
            BeOnOff.Add(true);//bMoveYourV-- 3
            BeOnOff.Add(true);//bTruckChoiseV-- 4
            BeOnOff.Add(false);//bCarTrailV-- 5
            
            int iRandomDrops = FindRandom(1, 1, 7);

            int iBuild = 0;

            string sTruck = "HAULER";

            if (bTestRun)
            {
                bJobLoaded = true;
                iJobType = 1;
            }
            else
            {
                TruckBuild LocalMish = new TruckBuild();

                if (iLocationX == 1)
                {
                    if (iRandomDrops == 1)
                    {
                        LocalMish.FubarStop = new Vector3(520.3214f, -1499.268f, 28.70853f);

                        LocalMish.TruckinStart02 = new Vector3(505.2303f, -1516.279f, 28.82515f);
                        LocalMish.TruckinDir02 = 140.3961f;
                        LocalMish.VehVar = 0;

                        LocalMish.TruckinStart01 = new Vector3(506.5337f, -1496.276f, 28.82477f);
                        LocalMish.TruckinDir01 = 175.5629f;
                        LocalMish.VehLivery = 1; LocalMish.LiveryExtra = 2;
                        LocalMish.TruckinTrail = "TrailerSmall";
                    }
                    else if (iRandomDrops == 2)
                    {
                        LocalMish.FubarStop = new Vector3(285.0543f, -2838.655f, 5.492721f);

                        LocalMish.TruckinStart02 = new Vector3(300.8229f, -2852.343f, 5.779589f);
                        LocalMish.TruckinDir02 = 88.66551f;
                        LocalMish.VehVar = 4;

                        LocalMish.TruckinStart01 = new Vector3(308.4671f, -2832.534f, 5.75268f);
                        LocalMish.TruckinDir01 = 90.10733f;
                        LocalMish.VehLivery = 0; LocalMish.LiveryExtra = 0;
                        LocalMish.TruckinTrail = "Tanker";
                    }
                    else if (iRandomDrops == 3)
                    {
                        LocalMish.FubarStop = new Vector3(-21.35467f, -1694.351f, 28.71711f);

                        LocalMish.TruckinStart02 = new Vector3(-29.01621f, -1679.756f, 29.20712f);
                        LocalMish.TruckinDir02 = 119.7145f;
                        LocalMish.VehVar = 4;

                        LocalMish.TruckinStart01 = new Vector3(-45.54f, -1677.733f, 28.96147f);
                        LocalMish.TruckinDir01 = -133.15f;
                        LocalMish.VehLivery = 0; LocalMish.LiveryExtra = 0;
                        LocalMish.TruckinTrail = "TR4";
                    }
                    else if (iRandomDrops == 4)
                    {
                        LocalMish.FubarStop = new Vector3(1663.76685f, -2513.34033f, 75.5648727f);

                        LocalMish.TruckinStart02 = new Vector3(1649.02136f, -2536.05054f, 75.1921921f);
                        LocalMish.TruckinDir02 = -46.8483658f;
                        LocalMish.VehVar = 4;

                        LocalMish.TruckinStart01 = new Vector3(1660.32104f, -2521.19312f, 75.6206131f);
                        LocalMish.TruckinDir01 = -26.1104279f;
                        LocalMish.VehLivery = 0; LocalMish.LiveryExtra = 0;
                        LocalMish.TruckinTrail = "TrailerLogs";
                    }
                    else if (iRandomDrops == 5)
                    {
                        LocalMish.FubarStop = new Vector3(818.675964f, -1943.36572f, 28.1977692f);

                        LocalMish.TruckinStart02 = new Vector3(824.584656f, -1939.47485f, 28.286911f);
                        LocalMish.TruckinDir02 = -5.28269482f;
                        LocalMish.VehVar = 4;

                        LocalMish.TruckinStart01 = new Vector3(838.060486f, -1935.59424f, 30.9043026f);
                        LocalMish.TruckinDir01 = 175.247894f;
                        LocalMish.VehLivery = 5; LocalMish.LiveryExtra = 0;
                        LocalMish.TruckinTrail = "Trailers2";
                    }
                    else if (iRandomDrops == 6)
                    {
                        LocalMish.FubarStop = new Vector3(1051.77f, -3195.64f, 4.89f);

                        LocalMish.TruckinStart02 = new Vector3(1087.17627f, -3179.91406f, 5.98643112f);
                        LocalMish.TruckinDir02 = 0.203412428f;
                        LocalMish.VehVar = 4;

                        LocalMish.TruckinStart01 = new Vector3(1054.10132f, -3185.5769f, 7.89159679f);
                        LocalMish.TruckinDir01 = 0.366428256f;
                        LocalMish.VehLivery = 0; LocalMish.LiveryExtra = 0;
                        LocalMish.TruckinTrail = "Trailers4";
                    }
                    else
                    {
                        LocalMish.FubarStop = new Vector3(853.5507f, -1582.938f, 30.48856f);

                        LocalMish.TruckinStart02 = new Vector3(912.7222f, -1576.179f, 30.47699f);
                        LocalMish.TruckinDir02 = 2.110507f;
                        LocalMish.VehVar = 4;

                        LocalMish.TruckinStart01 = new Vector3(893.8492f, -1532.468f, 30.03843f);
                        LocalMish.TruckinDir01 = 129.1272f;
                        LocalMish.VehLivery = 0; LocalMish.LiveryExtra = 0;
                        LocalMish.TruckinTrail = "TRFlat";

                        iMissionVar_01 = 3;
                    }
                }
                else if (iLocationX == 2)
                {
                    if (iRandomDrops == 1)
                    {
                        LocalMish.FubarStop = new Vector3(-61.79567f, -66.99591f, 58.64146f);

                        LocalMish.TruckinStart02 = new Vector3(-39.57209f, -67.10627f, 58.72478f);
                        LocalMish.TruckinDir02 = 73.18611f;
                        LocalMish.VehVar = 4;

                        LocalMish.TruckinStart01 = new Vector3(-31.79175f, -92.66103f, 56.7915f);
                        LocalMish.TruckinDir01 = 159.4731f;
                        LocalMish.VehLivery = 5; LocalMish.LiveryExtra = RandInt(0, 3);
                        LocalMish.TruckinTrail = "TrailerLarge";
                    }
                    else if (iRandomDrops == 2)
                    {
                        LocalMish.FubarStop = new Vector3(-293.31897f, -1175.02466f, 22.1332169f);

                        LocalMish.TruckinStart02 = new Vector3(-304.080688f, -1164.74365f, 21.7064762f);
                        LocalMish.TruckinDir02 = -86.5931473f;
                        LocalMish.VehVar = 0;

                        LocalMish.TruckinStart01 = new Vector3(-310.284271f, -1170.40271f, 21.176096f);
                        LocalMish.TruckinDir01 = -88.949173f;
                        LocalMish.VehLivery = 1; LocalMish.LiveryExtra = 1;
                        LocalMish.TruckinTrail = "TrailerSmall";
                    }
                    else if (iRandomDrops == 3)
                    {
                        LocalMish.FubarStop = new Vector3(-1462.704f, 59.15478f, 52.25636f);

                        LocalMish.TruckinStart02 = new Vector3(-1526.361f, 83.06799f, 56.35771f);
                        LocalMish.TruckinDir02 = 273.6321f;
                        LocalMish.VehVar = 4;

                        LocalMish.TruckinStart01 = new Vector3(-1525.629f, 97.0549f, 56.01995f);
                        LocalMish.TruckinDir01 = 229.3026f;
                        LocalMish.VehLivery = 0; LocalMish.LiveryExtra = 0;
                        LocalMish.TruckinTrail = "TR4";
                    }
                    else if (iRandomDrops == 4)
                    {
                        LocalMish.FubarStop = new Vector3(418.409698f, 1193.33594f, 246.122208f);

                        LocalMish.TruckinStart02 = new Vector3(425.566925f, 1188.39233f, 246.534561f);
                        LocalMish.TruckinDir02 = 90.2731705f;
                        LocalMish.VehVar = 4;

                        LocalMish.TruckinStart01 = new Vector3(420.343811f, 1203.22766f, 250.992661f);
                        LocalMish.TruckinDir01 = -174.639053f;
                        LocalMish.VehLivery = 0; LocalMish.LiveryExtra = 0;
                        LocalMish.TruckinTrail = "TrailerLogs";
                    }
                    else if (iRandomDrops == 5)
                    {
                        LocalMish.FubarStop = new Vector3(-1345.939f, -815.7911f, 19.30737f);

                        LocalMish.TruckinStart02 = new Vector3(-1320.699f, -784.6389f, 19.4839f);
                        LocalMish.TruckinDir02 = 304.3678f;
                        LocalMish.VehVar = 4;

                        LocalMish.TruckinStart01 = new Vector3(-1324.245f, -782.1998f, 19.62404f);
                        LocalMish.TruckinDir01 = 305.5011f;
                        LocalMish.VehLivery = 5; LocalMish.LiveryExtra = 1;
                        LocalMish.TruckinTrail = "Trailers2";
                    }
                    else if (iRandomDrops == 6)
                    {
                        LocalMish.FubarStop = new Vector3(62.1818275f, 84.3500519f, 77.23983f);

                        LocalMish.TruckinStart02 = new Vector3(67.418541f, 75.9080887f, 77.2004929f);
                        LocalMish.TruckinDir02 = 69.6358337f;
                        LocalMish.VehVar = 4;

                        LocalMish.TruckinStart01 = new Vector3(80.162323f, 96.900589f, 80.9277344f);
                        LocalMish.TruckinDir01 = 69.3761826f;
                        LocalMish.VehLivery = 0; LocalMish.LiveryExtra = 0;
                        LocalMish.TruckinTrail = "Trailers3";
                    }
                    else
                    {
                        LocalMish.FubarStop = new Vector3(-1150.782f, -1753.358f, 3.445312f);

                        LocalMish.TruckinStart02 = new Vector3(-1176.02f, -1745.94f, 3.769235f);
                        LocalMish.TruckinDir02 = 32.27144f;
                        LocalMish.VehVar = 4;

                        LocalMish.TruckinStart01 = new Vector3(-1156.029f, -1768.435f, 3.749536f);
                        LocalMish.TruckinDir01 = 304.4875f;
                        LocalMish.VehLivery = 0; LocalMish.LiveryExtra = 0;
                        LocalMish.TruckinTrail = "TRFlat";
                        iMissionVar_01 = 4;
                    }
                }
                else if (iLocationX == 3)
                {
                    if (iRandomDrops == 1)
                    {
                        LocalMish.FubarStop = new Vector3(-3016.491f, 112.4102f, 11.63074f);

                        LocalMish.TruckinStart02 = new Vector3(-3044.382f, 112.861f, 11.11644f);
                        LocalMish.TruckinDir02 = 320.2346f;
                        LocalMish.VehVar = 1;

                        LocalMish.TruckinStart01 = new Vector3(-3050.341f, 117.9787f, 11.13216f);
                        LocalMish.TruckinDir01 = 296.1413f;
                        LocalMish.VehLivery = 5; LocalMish.LiveryExtra = 4;
                        LocalMish.TruckinTrail = "BoatTrailer";
                    }
                    else if (iRandomDrops == 2)
                    {
                        LocalMish.FubarStop = new Vector3(-2050.414f, 3435.068f, 30.70889f);

                        LocalMish.TruckinStart02 = new Vector3(-2006f, 3432.691f, 31.10116f);
                        LocalMish.TruckinDir02 = 169.6632f;
                        LocalMish.VehVar = 4;

                        LocalMish.TruckinStart01 = new Vector3(-2014.785f, 3403.857f, 30.89259f);
                        LocalMish.VehLivery = 0; LocalMish.LiveryExtra = 0;
                        LocalMish.TruckinTrail = "Tanker";
                    }
                    else if (iRandomDrops == 3)
                    {
                        LocalMish.FubarStop = new Vector3(-137.2966f, 956.023f, 235.2326f);

                        LocalMish.TruckinStart02 = new Vector3(-121.1676f, 980.1492f, 235.5942f);
                        LocalMish.TruckinDir02 = 21.69683f;
                        LocalMish.VehVar = 4;

                        LocalMish.TruckinStart01 = new Vector3(-122.6281f, 999.8234f, 235.5098f);
                        LocalMish.TruckinDir01 = 118.5581f;
                        LocalMish.VehLivery = 0; LocalMish.LiveryExtra = 3;
                        LocalMish.TruckinTrail = "TR4";
                    }
                    else if (iRandomDrops == 4)
                    {
                        LocalMish.FubarStop = new Vector3(-1945.494f, 1764.059f, 174.6315f);

                        LocalMish.TruckinStart02 = new Vector3(-1939.415f, 1774.918f, 173.8567f);
                        LocalMish.TruckinDir02 = 202.0231f;
                        LocalMish.VehVar = 4;

                        LocalMish.TruckinStart01 = new Vector3(-1943.552f, 1753.167f, 174.7893f);
                        LocalMish.TruckinDir01 = 98.43806f;
                        LocalMish.VehLivery = 0; LocalMish.LiveryExtra = 0;
                        LocalMish.TruckinTrail = "TrailerLogs";
                    }
                    else if (iRandomDrops == 5)
                    {
                        LocalMish.FubarStop = new Vector3(-3120.74f, 1140.872f, 19.91989f);

                        LocalMish.TruckinStart02 = new Vector3(-3169.865f, 1103.403f, 20.49249f);
                        LocalMish.TruckinDir02 = 335.688f;
                        LocalMish.VehVar = 4;

                        LocalMish.TruckinStart01 = new Vector3(-3153.93f, 1136.16f, 20.63562f);
                        LocalMish.TruckinDir01 = 332.7231f;
                        LocalMish.VehLivery = 5; LocalMish.LiveryExtra = 1;
                        LocalMish.TruckinTrail = "Trailers3";

                    }
                    else if (iRandomDrops == 6)
                    {
                        LocalMish.FubarStop = new Vector3(-2503.669f, 2321.646f, 32.48883f);

                        LocalMish.TruckinStart02 = new Vector3(-2521.919f, 2340.696f, 32.83128f);
                        LocalMish.TruckinDir01 = 33.80985f;
                        LocalMish.VehVar = 4;

                        LocalMish.TruckinStart01 = new Vector3(-2531.293f, 2337.344f, 32.83128f);
                        LocalMish.TruckinDir02 = 213.8355f;
                        LocalMish.VehLivery = 0; LocalMish.LiveryExtra = 0;
                        LocalMish.TruckinTrail = "Trailers2";
                    }
                    else
                    {
                        LocalMish.FubarStop = new Vector3(-2348.202f, 3424.02f, 27.9888f);

                        LocalMish.TruckinStart02 = new Vector3(-2322.54517f, 3418.34668f, 30.728764f);
                        LocalMish.TruckinDir02 = 125.572144f;
                        LocalMish.VehVar = 4;

                        LocalMish.TruckinStart01 = new Vector3(-2316.95166f, 3407.44556f, 31.0615314f);
                        LocalMish.TruckinDir01 = 55.7717514f;
                        LocalMish.VehLivery = 0; LocalMish.LiveryExtra = 0;
                        LocalMish.TruckinTrail = "TRFlat";

                        iMissionVar_01 = 5;
                    }
                }
                else if (iLocationX == 4)
                {
                    if (iRandomDrops == 1)
                    {
                        LocalMish.FubarStop = new Vector3(1328.782f, -725.6939f, 65.49901f);

                        LocalMish.TruckinStart02 = new Vector3(1361.874f, -743.7559f, 66.59701f);
                        LocalMish.TruckinDir02 = 54.01971f;
                        LocalMish.VehVar = 0;

                        LocalMish.TruckinStart01 = new Vector3(1346.27f, -749.6741f, 66.81572f);
                        LocalMish.TruckinDir01 = 335.8355f;
                        LocalMish.VehLivery = 1; LocalMish.LiveryExtra = 1;
                        LocalMish.TruckinTrail = "TrailerSmall";
                    }
                    else if (iRandomDrops == 2)
                    {
                        LocalMish.FubarStop = new Vector3(1726.71f, -1688.844f, 112.0552f);

                        LocalMish.TruckinStart02 = new Vector3(1706.042f, -1627.395f, 112.2603f);
                        LocalMish.TruckinDir02 = 199.5738f;
                        LocalMish.VehVar = 4;

                        LocalMish.TruckinStart01 = new Vector3(1724.371f, -1629.598f, 112.2381f);
                        LocalMish.TruckinDir01 = 100.7514f;
                        LocalMish.VehLivery = 0; LocalMish.LiveryExtra = 0;
                        LocalMish.TruckinTrail = "Tanker";
                    }
                    else if (iRandomDrops == 3)
                    {
                        LocalMish.FubarStop = new Vector3(1071.812f, 251.8387f, 80.34699f);

                        LocalMish.TruckinStart02 = new Vector3(1130.737f, 256.5732f, 80.62725f);
                        LocalMish.TruckinDir02 = 62.14423f;
                        LocalMish.VehVar = 4;

                        LocalMish.TruckinStart01 = new Vector3(1184.038f, 308.7288f, 81.76277f);
                        LocalMish.TruckinDir01 = 148.0724f;
                        LocalMish.VehLivery = 0; LocalMish.LiveryExtra = 0;
                        LocalMish.TruckinTrail = "TR4";
                    }
                    else if (iRandomDrops == 4)
                    {
                        LocalMish.FubarStop = new Vector3(2633.327f, -666.3212f, 45.05252f);

                        LocalMish.TruckinStart02 = new Vector3(2669.122f, -670.3106f, 41.32516f);
                        LocalMish.TruckinDir02 = 51.11717f;
                        LocalMish.VehVar = 4;

                        LocalMish.TruckinStart01 = new Vector3(2664.854f, -718.6713f, 38.804f);
                        LocalMish.TruckinDir01 = 353.1165f;
                        LocalMish.VehLivery = 0; LocalMish.LiveryExtra = 0;
                        LocalMish.TruckinTrail = "TrailerLogs";
                    }
                    else if (iRandomDrops == 5)
                    {
                        LocalMish.FubarStop = new Vector3(1098.428f, -964.3766f, 45.72594f);

                        LocalMish.TruckinStart02 = new Vector3(1117.077f, -971.0321f, 46.35445f);
                        LocalMish.TruckinDir02 = 15.01618f;
                        LocalMish.VehVar = 4;

                        LocalMish.TruckinStart01 = new Vector3(1109.738f, -977.0201f, 45.58455f);
                        LocalMish.TruckinDir01 = 358.6365f;
                        LocalMish.VehLivery = 5; LocalMish.LiveryExtra = 1;
                        LocalMish.TruckinTrail = "Trailers2";
                    }
                    else if (iRandomDrops == 6)
                    {
                        LocalMish.FubarStop = new Vector3(2007.269f, 2330.177f, 91.67516f);

                        LocalMish.TruckinStart02 = new Vector3(2053.598f, 2343.118f, 95.95683f);
                        LocalMish.TruckinDir02 = 72.90163f;
                        LocalMish.VehVar = 4;

                        LocalMish.TruckinStart01 = new Vector3(2072.751f, 2326.649f, 94.15781f);
                        LocalMish.TruckinDir01 = 2.400884f;
                        LocalMish.VehLivery = 0; LocalMish.LiveryExtra = 0;
                        LocalMish.TruckinTrail = "Trailers4";
                    }
                    else
                    {
                        LocalMish.FubarStop = new Vector3(2487.399f, -311.2546f, 92.48515f);

                        LocalMish.TruckinStart02 = new Vector3(2452.478f, -382.8772f, 92.76414f);
                        LocalMish.TruckinDir02 = 0.7681398f;
                        LocalMish.VehVar = 4;

                        LocalMish.TruckinStart01 = new Vector3(2441.679f, -403.0796f, 92.7643f);
                        LocalMish.TruckinDir01 = 7.175557f;
                        LocalMish.VehLivery = 0; LocalMish.LiveryExtra = 0;
                        LocalMish.TruckinTrail = "TRFlat";

                        iMissionVar_01 = 6;
                    }
                }
                else if (iLocationX == 5)
                {
                    if (iRandomDrops == 1)
                    {
                        LocalMish.FubarStop = new Vector3(2035.326f, 4975.73f, 40.52308f);

                        LocalMish.TruckinStart02 = new Vector3(2019.71f, 4975.145f, 40.78775f);
                        LocalMish.TruckinDir02 = 224.3041f;
                        LocalMish.VehVar = 3;

                        LocalMish.TruckinStart01 = new Vector3(1973.837f, 4929.82f, 42.86214f);
                        LocalMish.TruckinDir01 = 221.9362f;
                        LocalMish.VehLivery = 0; LocalMish.LiveryExtra = 0;
                        LocalMish.TruckinTrail = "BaleTrailer";
                    }
                    else if (iRandomDrops == 2)
                    {
                        LocalMish.FubarStop = new Vector3(349.9426f, 3450.312f, 35.24071f);

                        LocalMish.TruckinStart02 = new Vector3(330.8282f, 3426.112f, 36.15924f);
                        LocalMish.TruckinDir02 = 302.2827f;
                        LocalMish.VehVar = 4;

                        LocalMish.TruckinStart01 = new Vector3(360.6637f, 3420.844f, 35.92651f);
                        LocalMish.TruckinDir01 = 44.69192f;
                        LocalMish.VehLivery = 0; LocalMish.LiveryExtra = 0;
                        LocalMish.TruckinTrail = "Tanker";
                    }
                    else if (iRandomDrops == 3)
                    {
                        LocalMish.FubarStop = new Vector3(1269.771f, 2686.284f, 37.07439f);

                        LocalMish.TruckinStart02 = new Vector3(1261.841f, 2714.181f, 37.97709f);
                        LocalMish.TruckinDir02 = 175.1569f;
                        LocalMish.VehVar = 4;

                        LocalMish.TruckinStart01 = new Vector3(1255.957f, 2727.672f, 38.26131f);
                        LocalMish.TruckinDir01 = 257.0442f;
                        LocalMish.VehLivery = 0; LocalMish.LiveryExtra = 0;
                        LocalMish.TruckinTrail = "TR4";
                    }
                    else if (iRandomDrops == 4)
                    {
                        LocalMish.FubarStop = new Vector3(372.0221f, 4441.502f, 62.35544f);

                        LocalMish.TruckinStart02 = new Vector3(355.9398f, 4435.545f, 62.97076f);
                        LocalMish.TruckinDir02 = 286.9983f;
                        LocalMish.VehVar = 4;

                        LocalMish.TruckinStart01 = new Vector3(353.5205f, 4451.039f, 62.58485f);
                        LocalMish.TruckinDir01 = 9.616344f;
                        LocalMish.VehLivery = 0; LocalMish.LiveryExtra = 0;
                        LocalMish.TruckinTrail = "TrailerLogs";
                    }
                    else if (iRandomDrops == 5)
                    {
                        LocalMish.FubarStop = new Vector3(2705.346f, 3437.811f, 55.30576f);

                        LocalMish.TruckinStart02 = new Vector3(2673.697f, 3459.063f, 55.48596f);
                        LocalMish.TruckinDir02 = 159.7133f;
                        LocalMish.VehVar = 4;

                        LocalMish.TruckinStart01 = new Vector3(2688.073f, 3455.131f, 55.54828f);
                        LocalMish.TruckinDir01 = 246.7866f;
                        LocalMish.VehLivery = 5; LocalMish.LiveryExtra = 1;
                        LocalMish.TruckinTrail = "Trailers2";
                    }
                    else if (iRandomDrops == 6)
                    {
                        LocalMish.FubarStop = new Vector3(2927.18f, 4381.792f, 49.92478f);

                        LocalMish.TruckinStart02 = new Vector3(2908.09f, 4396.396f, 50.00734f);
                        LocalMish.TruckinDir02 = 203.1556f;
                        LocalMish.VehVar = 4;

                        LocalMish.TruckinStart01 = new Vector3(2913.583f, 4381.726f, 50.06978f);
                        LocalMish.TruckinDir01 = 300.387f;
                        LocalMish.VehLivery = 0; LocalMish.LiveryExtra = 0;
                        LocalMish.TruckinTrail = "Trailers4";
                    }
                    else
                    {
                        LocalMish.FubarStop = new Vector3(2392.1f, 3106.98f, 47.16814f);

                        LocalMish.TruckinStart02 = new Vector3(2368.4104f, 3072.97778f, 47.3949661f);
                        LocalMish.TruckinDir02 = -85.3864975f;
                        LocalMish.VehVar = 4;

                        LocalMish.TruckinStart01 = new Vector3(2380.41235f, 3055.48877f, 47.5238419f);
                        LocalMish.TruckinDir01 = -4.92874575f;
                        LocalMish.VehLivery = 0; LocalMish.LiveryExtra = 0;
                        LocalMish.TruckinTrail = "TRFlat";
                        iMissionVar_01 = 7;
                    }
                }
                else if (iLocationX == 6)
                {
                    if (iRandomDrops == 1)
                    {
                        LocalMish.FubarStop = new Vector3(1421.157f, 6512.979f, 18.82927f);

                        LocalMish.TruckinStart02 = new Vector3(1441.045f, 6549.028f, 14.71096f);
                        LocalMish.TruckinDir02 = 151.6632f;
                        LocalMish.VehVar = -2;

                        LocalMish.TruckinStart01 = new Vector3(1445.419f, 6567.67f, 13.804f);
                        LocalMish.TruckinDir01 = 189.62f;
                        LocalMish.VehLivery = 5; LocalMish.LiveryExtra = 2;
                        LocalMish.TruckinTrail = "TR3";
                    }
                    else if (iRandomDrops == 2)
                    {
                        LocalMish.FubarStop = new Vector3(-271.979553f, 6054.87109f, 30.5201645f);

                        LocalMish.TruckinStart02 = new Vector3(-264.875366f, 6064.52686f, 31.6996689f);
                        LocalMish.TruckinDir02 = 124.022133f;
                        LocalMish.VehVar = 4;

                        LocalMish.TruckinStart01 = new Vector3(-266.915894f, 6043.49365f, 33.6108665f);
                        LocalMish.TruckinDir01 = 48.0526314f;
                        LocalMish.VehLivery = 0; LocalMish.LiveryExtra = 0;
                        LocalMish.TruckinTrail = "Tanker";
                    }
                    else if (iRandomDrops == 3)
                    {
                        LocalMish.FubarStop = new Vector3(-180.0294f, 6207.577f, 30.71581f);

                        LocalMish.TruckinStart02 = new Vector3(-191.8061f, 6235.027f, 31.26501f);
                        LocalMish.TruckinDir02 = 143.6489f;
                        LocalMish.VehVar = 4;

                        LocalMish.TruckinStart01 = new Vector3(-188.498f, 6216.789f, 31.26373f);
                        LocalMish.TruckinDir01 = 137.8783f;
                        LocalMish.VehLivery = 0; LocalMish.LiveryExtra = 0;
                        LocalMish.TruckinTrail = "TR4";
                    }
                    else if (iRandomDrops == 4)
                    {
                        LocalMish.FubarStop = new Vector3(-713.5744f, 5437.847f, 43.84855f);

                        LocalMish.TruckinStart02 = new Vector3(-678.776f, 5446.003f, 47.7954f);
                        LocalMish.TruckinDir02 = 96.20191f;
                        LocalMish.VehVar = 4;

                        LocalMish.TruckinStart01 = new Vector3(-693.7496f, 5450.548f, 45.94859f);
                        LocalMish.TruckinDir01 = 161.9147f;
                        LocalMish.VehLivery = 0; LocalMish.LiveryExtra = 0;
                        LocalMish.TruckinTrail = "TrailerLogs";
                    }
                    else if (iRandomDrops == 5)
                    {
                        LocalMish.FubarStop = new Vector3(59.17513f, 6351.615f, 30.72162f);

                        LocalMish.TruckinStart02 = new Vector3(80.85661f, 6338.149f, 30.99732f);
                        LocalMish.TruckinDir02 = 29.95448f;
                        LocalMish.VehVar = 4;

                        LocalMish.TruckinStart01 = new Vector3(66.80647f, 6328.484f, 30.99738f);
                        LocalMish.TruckinDir01 = 29.63831f;
                        LocalMish.VehLivery = 5; LocalMish.LiveryExtra = 2;
                        LocalMish.TruckinTrail = "Trailers2";
                    }       //clucling bell
                    else if (iRandomDrops == 6)
                    {
                        LocalMish.FubarStop = new Vector3(1475.028f, 6363.07f, 23.11986f);

                        LocalMish.TruckinStart02 = new Vector3(1518.817f, 6335.46f, 23.89224f);
                        LocalMish.TruckinDir02 = 63.61759f;
                        LocalMish.VehVar = 4;

                        LocalMish.TruckinStart01 = new Vector3(1520.656f, 6342.605f, 23.82088f);
                        LocalMish.TruckinDir01 = 79.14994f;
                        LocalMish.VehLivery = 0; LocalMish.LiveryExtra = 0;
                        LocalMish.TruckinTrail = "Trailers3";
                    }
                    else
                    {
                        LocalMish.FubarStop = new Vector3(-192.29f, 6224.45f, 30.73361f);

                        LocalMish.TruckinStart02 = new Vector3(-189.22319f, 6227.36475f, 30.724144f);
                        LocalMish.TruckinDir02 = -133.408386f;
                        LocalMish.VehVar = 4;

                        LocalMish.TruckinStart01 = new Vector3(-180.428238f, 6254.9502f, 30.8538399f);
                        LocalMish.TruckinDir01 = 136.375473f;
                        LocalMish.VehLivery = 0; LocalMish.LiveryExtra = 0;
                        LocalMish.TruckinTrail = "TRFlat";
                        iMissionVar_01 = 8;
                    }
                }

                if (LocalMish.TruckinTrail == "TrailerSmall")
                {
                    if (LocalMish.LiveryExtra == 1)
                    {
                        LocalMish.TruckinEnd.Add(new Vector3(-1110.96301f, -969.025635f, 2.12206745f));
                        LocalMish.TruckinDir03.Add(25.5751801f);

                        LocalMish.TruckinEnd.Add(new Vector3(1377.99341f, -783.588928f, 67.2080688f));
                        LocalMish.TruckinDir03.Add(105.335281f);

                        LocalMish.TruckinEnd.Add(new Vector3(-641.539795f, 414.723083f, 101.099205f));
                        LocalMish.TruckinDir03.Add(-90.2160568f);

                        LocalMish.TruckinEnd.Add(new Vector3(-758.682007f, 689.416016f, 144.064377f));
                        LocalMish.TruckinDir03.Add(90.4148941f);

                        LocalMish.TruckinEnd.Add(new Vector3(-1449.4552f, 417.275146f, 109.657585f));
                        LocalMish.TruckinDir03.Add(-22.8696251f);

                        LocalMish.TruckinEnd.Add(new Vector3(2523.14404f, 2609.68311f, 37.8381119f));
                        LocalMish.TruckinDir03.Add(-91.0439987f);

                        LocalMish.TruckinEnd.Add(new Vector3(1821.28589f, 3762.71533f, 33.3168983f));
                        LocalMish.TruckinDir03.Add(-62.9100876f);

                        LocalMish.TruckinEnd.Add(new Vector3(-2355.23389f, 3983.6604f, 25.8079605f));
                        LocalMish.TruckinDir03.Add(157.899887f);

                        LocalMish.TruckinEnd.Add(new Vector3(-382.671906f, 6268.66553f, 30.5778828f));
                        LocalMish.TruckinDir03.Add(45.7088776f);

                        LocalMish.TruckinEnd.Add(new Vector3(-314.736938f, 6312.88965f, 32.2202721f));
                        LocalMish.TruckinDir03.Add(42.7720032f);
                    }
                    else
                    {
                        LocalMish.TruckinEnd.Add(new Vector3(-509.351288f, -1046.11047f, 23.3272915f));
                        LocalMish.TruckinDir03.Add(-0.0795852169f);

                        LocalMish.TruckinEnd.Add(new Vector3(-137.43605f, -1110.94556f, 21.5815506f));
                        LocalMish.TruckinDir03.Add(-20.6047344f);

                        LocalMish.TruckinEnd.Add(new Vector3(25.8547287f, -608.913635f, 31.4598351f));
                        LocalMish.TruckinDir03.Add(-20.196516f);

                        LocalMish.TruckinEnd.Add(new Vector3(85.2726364f, -394.824005f, 40.8818054f));
                        LocalMish.TruckinDir03.Add(66.8641357f);

                        LocalMish.TruckinEnd.Add(new Vector3(748.328857f, 1296.30579f, 360.186096f));
                        LocalMish.TruckinDir03.Add(88.3792419f);

                        LocalMish.TruckinEnd.Add(new Vector3(2480.62573f, 1571.38245f, 32.4823608f));
                        LocalMish.TruckinDir03.Add(-1.74579334f);

                        LocalMish.TruckinEnd.Add(new Vector3(853.397278f, 2382.42627f, 54.0125084f));
                        LocalMish.TruckinDir03.Add(178.097137f);

                        LocalMish.TruckinEnd.Add(new Vector3(217.765945f, 2804.43262f, 45.5458946f));
                        LocalMish.TruckinDir03.Add(99.8036652f);

                        LocalMish.TruckinEnd.Add(new Vector3(38.5795593f, 6551.83594f, 31.3189888f));
                        LocalMish.TruckinDir03.Add(-138.19249f);

                        LocalMish.TruckinEnd.Add(new Vector3(2974.93994f, 3485.31616f, 71.276123f));
                        LocalMish.TruckinDir03.Add(-69.7504807f);
                    }
                }                                      //cartow building
                else if (LocalMish.TruckinTrail == "BoatTrailer")
                {
                    LocalMish.TruckinEnd.Add(new Vector3(3827.93726f, 4458.40381f, 3.10548544f));
                    LocalMish.TruckinDir03.Add(85.8570023f);

                    LocalMish.TruckinEnd.Add(new Vector3(919.963562f, 6625.1543f, 2.90874457f));
                    LocalMish.TruckinDir03.Add(173.669235f);

                    LocalMish.TruckinEnd.Add(new Vector3(-1828.9895f, 4827.70752f, 2.87617302f));
                    LocalMish.TruckinDir03.Add(-177.994217f);

                    LocalMish.TruckinEnd.Add(new Vector3(1307.84753f, 4308.85645f, 37.7292519f));
                    LocalMish.TruckinDir03.Add(-28.4870186f);

                    LocalMish.TruckinEnd.Add(new Vector3(2834.63232f, -626.620483f, 1.9626832f));
                    LocalMish.TruckinDir03.Add(127.369308f);

                    LocalMish.TruckinEnd.Add(new Vector3(-776.093018f, -1494.7395f, 2.36467934f));
                    LocalMish.TruckinDir03.Add(-70.9605255f);

                    LocalMish.TruckinEnd.Add(new Vector3(-2127.01147f, -507.200745f, 2.38656282f));
                    LocalMish.TruckinDir03.Add(-38.2807922f);

                    LocalMish.TruckinEnd.Add(new Vector3(-2841.69141f, -50.286541f, 2.65081716f));
                    LocalMish.TruckinDir03.Add(-10.0867329f);

                    LocalMish.TruckinEnd.Add(new Vector3(1900.96936f, 271.449402f, 162.069397f));
                    LocalMish.TruckinDir03.Add(66.7673035f);

                    LocalMish.TruckinEnd.Add(new Vector3(-2113.08521f, 2616.7063f, 1.16549754f));
                    LocalMish.TruckinDir03.Add(-2.8661015f);

                }                                  //cartow boats
                else if (LocalMish.TruckinTrail == "TrailerLogs")
                {
                    LocalMish.TruckinEnd.Add(new Vector3(-600.907166f, 5314.76758f, 72.1718292f));
                    LocalMish.TruckinDir03.Add(178.960266f);

                    LocalMish.TruckinEnd.Add(new Vector3(-600.907166f, 5314.76758f, 72.1718292f));
                    LocalMish.TruckinDir03.Add(178.960266f);
                }                                  //logs
                else if (LocalMish.TruckinTrail == "Tanker")
                {
                    LocalMish.TruckinEnd.Add(new Vector3(201.706512f, 6609.80664f, 33.5040016f));
                    LocalMish.TruckinDir03.Add(-174.628067f);

                    LocalMish.TruckinEnd.Add(new Vector3(1718.03357f, 6421.43799f, 35.1461182f));
                    LocalMish.TruckinDir03.Add(155.184662f);

                    LocalMish.TruckinEnd.Add(new Vector3(1710.64404f, 4942.03467f, 43.9811249f));
                    LocalMish.TruckinDir03.Add(55.0813866f);

                    LocalMish.TruckinEnd.Add(new Vector3(2689.84521f, 3270.24731f, 57.0715866f));
                    LocalMish.TruckinDir03.Add(151.022812f);

                    LocalMish.TruckinEnd.Add(new Vector3(1767.00977f, 3342.54663f, 42.9462929f));
                    LocalMish.TruckinDir03.Add(-56.6397514f);

                    LocalMish.TruckinEnd.Add(new Vector3(238.970428f, 2581.32959f, 47.2509918f));
                    LocalMish.TruckinDir03.Add(12.3229818f);

                    LocalMish.TruckinEnd.Add(new Vector3(1205.6554f, 2640.80176f, 39.6584435f));
                    LocalMish.TruckinDir03.Add(-49.3368835f);

                    LocalMish.TruckinEnd.Add(new Vector3(-2527.49634f, 2342.89697f, 34.8895149f));
                    LocalMish.TruckinDir03.Add(-146.733856f);

                    LocalMish.TruckinEnd.Add(new Vector3(-2066.74878f, -307.759369f, 14.9781094f));
                    LocalMish.TruckinDir03.Add(83.7123413f);

                    LocalMish.TruckinEnd.Add(new Vector3(-1788.55676f, 812.106873f, 140.32756f));
                    LocalMish.TruckinDir03.Add(-136.713791f);

                    LocalMish.TruckinEnd.Add(new Vector3(-707.440369f, -933.286255f, 20.8482552f));
                    LocalMish.TruckinDir03.Add(-179.535675f);

                    LocalMish.TruckinEnd.Add(new Vector3(-513.268127f, -1215.98083f, 20.3033447f));
                    LocalMish.TruckinDir03.Add(-25.5111389f);

                    LocalMish.TruckinEnd.Add(new Vector3(-37.5024796f, -1745.79309f, 31.0049324f));
                    LocalMish.TruckinDir03.Add(49.9814415f);

                    LocalMish.TruckinEnd.Add(new Vector3(-351.678589f, -1495.59314f, 32.1655235f));
                    LocalMish.TruckinDir03.Add(-89.408371f);

                    LocalMish.TruckinEnd.Add(new Vector3(293.942474f, -1247.40784f, 31.1290493f));
                    LocalMish.TruckinDir03.Add(89.8089905f);

                    LocalMish.TruckinEnd.Add(new Vector3(1198.44507f, -1387.46313f, 37.0564842f));
                    LocalMish.TruckinDir03.Add(179.531647f);

                    LocalMish.TruckinEnd.Add(new Vector3(1174.90955f, -316.092377f, 71.0136032f));
                    LocalMish.TruckinDir03.Add(-80.0130463f);

                    LocalMish.TruckinEnd.Add(new Vector3(607.418823f, 278.556122f, 104.941833f));
                    LocalMish.TruckinDir03.Add(-36.8987694f);

                    LocalMish.TruckinEnd.Add(new Vector3(2550.10205f, 342.768372f, 110.295273f));
                    LocalMish.TruckinDir03.Add(-92.6763077f);
                }                                       //oil
                else if (LocalMish.TruckinTrail == "BaleTrailer")
                {
                    LocalMish.TruckinEnd.Add(new Vector3(2158.03052f, 5004.8125f, 42.1355591f));
                    LocalMish.TruckinDir03.Add(-44.8184586f);

                    LocalMish.TruckinEnd.Add(new Vector3(2254.65015f, 4883.06543f, 41.6035385f));
                    LocalMish.TruckinDir03.Add(-136.409607f);

                    LocalMish.TruckinEnd.Add(new Vector3(2523.52222f, 4750.68555f, 35.1064644f));
                    LocalMish.TruckinDir03.Add(-62.4214897f);

                    LocalMish.TruckinEnd.Add(new Vector3(422.064178f, 6475.21484f, 29.5487003f));
                    LocalMish.TruckinDir03.Add(44.4835701f);
                }                                  //FarmBails
                else if (LocalMish.TruckinTrail == "TR4")
                {
                    LocalMish.TruckinEnd.Add(new Vector3(99.0087585f, 6631.01367f, 31.6002846f));
                    LocalMish.TruckinDir03.Add(135.440948f);

                    LocalMish.TruckinEnd.Add(new Vector3(1187.34521f, 2656.61743f, 38.0703392f));
                    LocalMish.TruckinDir03.Add(-43.5819778f);

                    LocalMish.TruckinEnd.Add(new Vector3(-357.62558f, -118.449944f, 38.9477882f));
                    LocalMish.TruckinDir03.Add(160.653152f);

                    LocalMish.TruckinEnd.Add(new Vector3(-215.448395f, -1304.18994f, 31.5689278f));
                    LocalMish.TruckinDir03.Add(90.2919846f);

                    LocalMish.TruckinEnd.Add(new Vector3(-1111.0177f, -2015.53943f, 13.4474592f));
                    LocalMish.TruckinDir03.Add(-54.0391006f);

                    LocalMish.TruckinEnd.Add(new Vector3(716.472473f, -1073.01697f, 22.5152283f));
                    LocalMish.TruckinDir03.Add(0.378921598f);
                }                                          //Car transport
                else if (LocalMish.TruckinTrail == "TRFlat")
                {
                    if (iLocationX == 1)
                    {
                        LocalMish.TruckinEnd.Add(new Vector3(1243.297f, -2433.65308f, 45.3330574f));
                        LocalMish.TruckinDir03.Add(-38.9057388f);

                        LocalMish.TruckinEnd.Add(new Vector3(-114.813278f, -963.726685f, 27.6428108f));
                        LocalMish.TruckinDir03.Add(-18.8352337f);

                        LocalMish.TruckinEnd.Add(new Vector3(-473.597321f, -989.356995f, 23.9153442f));
                        LocalMish.TruckinDir03.Add(-0.120605901f);

                        LocalMish.TruckinEnd.Add(new Vector3(2061.81519f, 1994.63745f, 87.1274414f));
                        LocalMish.TruckinDir03.Add(-79.1791687f);

                        LocalMish.TruckinEnd.Add(new Vector3(1034.73145f, 2517.10449f, 47.0310822f));
                        LocalMish.TruckinDir03.Add(-177.771225f);

                        LocalMish.TruckinEnd.Add(new Vector3(2950.72607f, 2747.46899f, 43.837101f));
                        LocalMish.TruckinDir03.Add(-76.0417709f);

                        LocalMish.TruckinEnd.Add(new Vector3(302.862793f, 2825.10474f, 43.8036537f));
                        LocalMish.TruckinDir03.Add(-62.97966f);

                        LocalMish.TruckinEnd.Add(new Vector3(2472.52344f, 4995.29004f, 46.6257629f));
                        LocalMish.TruckinDir03.Add(13.9295664f);

                        LocalMish.TruckinEnd.Add(new Vector3(49.1725807f, 6543.50293f, 31.6342773f));
                        LocalMish.TruckinDir03.Add(132.536423f);
                    }            //excivator
                    else if (iLocationX == 2)
                    {
                        LocalMish.TruckinEnd.Add(new Vector3(-193.830093f, 6535.92236f, 11.4619503f));
                        LocalMish.TruckinDir03.Add(45.2233429f);

                        LocalMish.TruckinEnd.Add(new Vector3(1360.80115f, 6571.1792f, 12.4974566f));
                        LocalMish.TruckinDir03.Add(-93.9727173f);

                        LocalMish.TruckinEnd.Add(new Vector3(2775.99414f, -712.487549f, 6.44669056f));
                        LocalMish.TruckinDir03.Add(102.446518f);

                        LocalMish.TruckinEnd.Add(new Vector3(-1470.12756f, -1010.40344f, 6.73606825f));
                        LocalMish.TruckinDir03.Add(-39.6965294f);

                        LocalMish.TruckinEnd.Add(new Vector3(-2972.06152f, 75.4476242f, 11.8682137f));
                        LocalMish.TruckinDir03.Add(67.9630661f);

                        LocalMish.TruckinEnd.Add(new Vector3(-3236.25439f, 971.136353f, 13.2940416f));
                        LocalMish.TruckinDir03.Add(-172.761902f);

                        LocalMish.TruckinEnd.Add(new Vector3(-2416.30103f, 4216.13086f, 10.1810179f));
                        LocalMish.TruckinDir03.Add(159.587128f);
                    }       //lifeguard
                    else if (iLocationX == 3)
                    {
                        LocalMish.TruckinEnd.Add(new Vector3(289.530365f, 6789.52051f, 16.0601311f));
                        LocalMish.TruckinDir03.Add(176.694809f);

                        LocalMish.TruckinEnd.Add(new Vector3(2346.24023f, 3105.67017f, 48.5939026f));
                        LocalMish.TruckinDir03.Add(80.3602295f);

                        LocalMish.TruckinEnd.Add(new Vector3(2522.72705f, -383.111084f, 93.3571625f));
                        LocalMish.TruckinDir03.Add(-176.703537f);

                        LocalMish.TruckinEnd.Add(new Vector3(463.029999f, -3052.0293f, 6.46859169f));
                        LocalMish.TruckinDir03.Add(-0.776377499f);
                    }       //tank
                    else if (iLocationX == 4)
                    {
                        LocalMish.TruckinEnd.Add(new Vector3(592.515381f, -2234.84546f, 6.328722f));
                        LocalMish.TruckinDir03.Add(173.125397f);

                        LocalMish.TruckinEnd.Add(new Vector3(-1790.24243f, -1196.4978f, 13.3846426f));
                        LocalMish.TruckinDir03.Add(46.0287552f);

                        LocalMish.TruckinEnd.Add(new Vector3(-3295.36353f, 949.93573f, 2.40607309f));
                        LocalMish.TruckinDir03.Add(-133.360397f);

                        LocalMish.TruckinEnd.Add(new Vector3(2776.98096f, -711.937012f, 6.24071741f));
                        LocalMish.TruckinDir03.Add(96.7795029f);

                        LocalMish.TruckinEnd.Add(new Vector3(3817.65088f, 4462.21826f, 4.17419147f));
                        LocalMish.TruckinDir03.Add(80.8513794f);

                        LocalMish.TruckinEnd.Add(new Vector3(-1581.25134f, 5166.8877f, 19.9296551f));
                        LocalMish.TruckinDir03.Add(-169.814514f);

                    }       //sub
                    else if (iLocationX == 5)
                    {
                        LocalMish.TruckinEnd.Add(new Vector3(-469.229614f, 6012.50049f, 31.7028084f));
                        LocalMish.TruckinDir03.Add(-44.8321609f);

                        LocalMish.TruckinEnd.Add(new Vector3(2109.62451f, 4769.58838f, 41.5741615f));
                        LocalMish.TruckinDir03.Add(103.006218f);

                        LocalMish.TruckinEnd.Add(new Vector3(1765.31189f, 3308.73828f, 41.5343399f));
                        LocalMish.TruckinDir03.Add(-124.641823f);

                        LocalMish.TruckinEnd.Add(new Vector3(-887.014038f, -2740.71387f, 14.197897f));
                        LocalMish.TruckinDir03.Add(-29.2633762f);

                        LocalMish.TruckinEnd.Add(new Vector3(614.030701f, -3199.12158f, 6.43414211f));
                        LocalMish.TruckinDir03.Add(0.421159804f);
                    }       //bussard
                    else
                    {
                        LocalMish.TruckinEnd.Add(new Vector3(438.083588f, 6534.14014f, 28.3629112f));
                        LocalMish.TruckinDir03.Add(87.4674454f);

                        LocalMish.TruckinEnd.Add(new Vector3(2863.79663f, 4476.31104f, 48.8668289f));
                        LocalMish.TruckinDir03.Add(71.199707f);

                        LocalMish.TruckinEnd.Add(new Vector3(2552.03003f, 4678.40674f, 34.2864456f));
                        LocalMish.TruckinDir03.Add(14.720993f);

                        LocalMish.TruckinEnd.Add(new Vector3(2351.0332f, 4848.26465f, 41.3890457f));
                        LocalMish.TruckinDir03.Add(133.8638f);

                        LocalMish.TruckinEnd.Add(new Vector3(2144.23633f, 5103.41895f, 46.4994583f));
                        LocalMish.TruckinDir03.Add(176.383179f);

                        LocalMish.TruckinEnd.Add(new Vector3(1921.5614f, 4954.52637f, 47.875164f));
                        LocalMish.TruckinDir03.Add(146.935654f);
                    }       //tracktor
                }                                       //Flat bed special
                else if (LocalMish.TruckinTrail == "TrailerLarge")
                {
                    BeOnOff[4] = false;

                    LocalMish.TruckinEnd.Add(new Vector3(-323.085632f, 6097.1333f, 33.3882637f));
                    LocalMish.TruckinDir03.Add(-134.808548f);

                    LocalMish.TruckinEnd.Add(new Vector3(1706.32568f, 3765.24023f, 36.2598228f));
                    LocalMish.TruckinDir03.Add(-129.21257f);

                    LocalMish.TruckinEnd.Add(new Vector3(-1156.69629f, 2665.04224f, 20.0024719f));
                    LocalMish.TruckinDir03.Add(-139.270493f);

                    LocalMish.TruckinEnd.Add(new Vector3(-3140.04956f, 1080.09705f, 22.5441208f));
                    LocalMish.TruckinDir03.Add(172.270477f);

                    LocalMish.TruckinEnd.Add(new Vector3(2583.35986f, 294.780945f, 110.375427f));
                    LocalMish.TruckinDir03.Add(-0.216235146f);

                    LocalMish.TruckinEnd.Add(new Vector3(220.758362f, -36.8360443f, 71.6077576f));
                    LocalMish.TruckinDir03.Add(-110.192146f);

                    LocalMish.TruckinEnd.Add(new Vector3(-1341.56445f, -395.338104f, 38.5462875f));
                    LocalMish.TruckinDir03.Add(-61.0989265f);

                    LocalMish.TruckinEnd.Add(new Vector3(-667.071167f, -952.963806f, 23.1632137f));
                    LocalMish.TruckinDir03.Add(90.2988434f);

                    LocalMish.TruckinEnd.Add(new Vector3(-9.44796371f, -1115.28906f, 30.0155125f));
                    LocalMish.TruckinDir03.Add(159.378174f);

                    LocalMish.TruckinEnd.Add(new Vector3(869.133545f, -1010.2074f, 32.5693741f));
                    LocalMish.TruckinDir03.Add(-87.9180527f);

                    LocalMish.TruckinEnd.Add(new Vector3(822.234558f, -2139.48877f, 31.0022354f));
                    LocalMish.TruckinDir03.Add(-0.858717561f);

                }                                 //Moc
                else if (LocalMish.TruckinTrail == "Trailers4")
                {
                    if (iLocationX == 1)
                    {
                        LocalMish.TruckinEnd.Add(new Vector3(-267.513489f, -2506.23193f, 7.98866272f));
                        LocalMish.TruckinDir03.Add(-129.586594f);

                        LocalMish.TruckinEnd.Add(new Vector3(-755.989319f, -2590.99756f, 15.8290958f));
                        LocalMish.TruckinDir03.Add(-119.83416f);

                        LocalMish.TruckinEnd.Add(new Vector3(1736.01526f, -1537.75952f, 114.689445f));
                        LocalMish.TruckinDir03.Add(-109.618004f);

                        LocalMish.TruckinEnd.Add(new Vector3(-2350.87524f, 268.786224f, 167.507065f));
                        LocalMish.TruckinDir03.Add(24.0140762f);

                        LocalMish.TruckinEnd.Add(new Vector3(173.027603f, 2740.09717f, 45.4140015f));
                        LocalMish.TruckinDir03.Add(-80.1745987f);

                        LocalMish.TruckinEnd.Add(new Vector3(-262.224243f, 6041.43555f, 33.8759575f));
                        LocalMish.TruckinDir03.Add(47.4274979f);
                    }
                    else
                    {
                        LocalMish.TruckinEnd.Add(new Vector3(1054.10132f, -3185.5769f, 7.89159679f));
                        LocalMish.TruckinDir03.Add(0.366428256f);

                        LocalMish.TruckinEnd.Add(new Vector3(1062.34521f, -3185.0542f, 7.88837099f));
                        LocalMish.TruckinDir03.Add(0.0400855467f);

                        LocalMish.TruckinEnd.Add(new Vector3(1029.83923f, -3184.98706f, 7.89341259f));
                        LocalMish.TruckinDir03.Add(-0.18349506f);

                        LocalMish.TruckinEnd.Add(new Vector3(1001.64807f, -3185.27588f, 7.88654709f));
                        LocalMish.TruckinDir03.Add(-0.658392727f);

                        LocalMish.TruckinEnd.Add(new Vector3(945.273804f, -3185.6582f, 7.88733292f));
                        LocalMish.TruckinDir03.Add(-0.579209387f);

                        LocalMish.TruckinEnd.Add(new Vector3(904.430847f, -3185.24756f, 7.88988447f));
                        LocalMish.TruckinDir03.Add(0.197140321f);

                        LocalMish.TruckinEnd.Add(new Vector3(912.779846f, -3154.38989f, 7.8868866f));
                        LocalMish.TruckinDir03.Add(179.355408f);

                        LocalMish.TruckinEnd.Add(new Vector3(937.215454f, -3154.64844f, 7.89202595f));
                        LocalMish.TruckinDir03.Add(179.897858f);

                        LocalMish.TruckinEnd.Add(new Vector3(925.196472f, -3130.49438f, 7.89248562f));
                        LocalMish.TruckinDir03.Add(-0.551380992f);

                        LocalMish.TruckinEnd.Add(new Vector3(896.569397f, -3131.42773f, 7.88800287f));
                        LocalMish.TruckinDir03.Add(-0.320617199f);

                        LocalMish.TruckinEnd.Add(new Vector3(937.152161f, -3208.96851f, 7.88690424f));
                        LocalMish.TruckinDir03.Add(179.848038f);

                        LocalMish.TruckinEnd.Add(new Vector3(912.741577f, -3209.35864f, 7.8869276f));
                        LocalMish.TruckinDir03.Add(179.083237f);

                        LocalMish.TruckinEnd.Add(new Vector3(961.359619f, -3208.98486f, 7.8936162f));
                        LocalMish.TruckinDir03.Add(179.297287f);

                        LocalMish.TruckinEnd.Add(new Vector3(1025.8175f, -3208.93823f, 7.8591032f));
                        LocalMish.TruckinDir03.Add(179.854385f);
                    }
                }                                    //Docks
                else if (LocalMish.TruckinTrail == "TR3")
                {
                    LocalMish.TruckinEnd.Add(new Vector3(-6.853896f, -2671.194f, 6.061446f));
                    LocalMish.TruckinDir03.Add(359.2327f);

                    LocalMish.TruckinEnd.Add(new Vector3(1314.15588f, 4319.32959f, 38.2047119f));
                    LocalMish.TruckinDir03.Add(-11.3011627f);

                    LocalMish.TruckinEnd.Add(new Vector3(-743.048462f, -1411.8623f, 5.07558441f));
                    LocalMish.TruckinDir03.Add(-129.855209f);
                }                                          //TheYacht
                else
                {
                    if (LocalMish.TruckinTrail == "Trailers2")
                    {
                        if (LocalMish.LiveryExtra == 0)
                        {
                            LocalMish.TruckinEnd.Add(new Vector3(-175.230972f, 6315.18066f, 33.1843491f));
                            LocalMish.TruckinDir03.Add(44.4998398f);

                            LocalMish.TruckinEnd.Add(new Vector3(1711.97986f, 4803.80762f, 43.7056236f));
                            LocalMish.TruckinDir03.Add(88.2249527f);

                            LocalMish.TruckinEnd.Add(new Vector3(-2168.47314f, 4278.23975f, 50.8839073f));
                            LocalMish.TruckinDir03.Add(150.181625f);

                            LocalMish.TruckinEnd.Add(new Vector3(1415.77502f, 3614.80176f, 36.8567238f));
                            LocalMish.TruckinDir03.Add(-161.646698f);

                            LocalMish.TruckinEnd.Add(new Vector3(1968.50085f, 3836.62549f, 33.9244957f));
                            LocalMish.TruckinDir03.Add(-61.3197556f);

                            LocalMish.TruckinEnd.Add(new Vector3(1988.87683f, 3033.85107f, 48.9826088f));
                            LocalMish.TruckinDir03.Add(56.925148f);

                            LocalMish.TruckinEnd.Add(new Vector3(1231.93787f, -435.719025f, 69.6632843f));
                            LocalMish.TruckinDir03.Add(75.7629013f);

                            LocalMish.TruckinEnd.Add(new Vector3(-77.1392593f, 210.29512f, 98.4323807f));
                            LocalMish.TruckinDir03.Add(88.9063721f);

                            LocalMish.TruckinEnd.Add(new Vector3(-1584.78882f, -484.340454f, 37.502285f));
                            LocalMish.TruckinDir03.Add(51.7328453f);

                            LocalMish.TruckinEnd.Add(new Vector3(83.4808273f, -1305.65686f, 31.1522522f));
                            LocalMish.TruckinDir03.Add(31.1827564f);

                            LocalMish.TruckinEnd.Add(new Vector3(-14.9991703f, -1819.10571f, 27.7579517f));
                            LocalMish.TruckinDir03.Add(139.035431f);

                            LocalMish.TruckinEnd.Add(new Vector3(473.852783f, -1853.79211f, 29.4370251f));
                            LocalMish.TruckinDir03.Add(31.2378998f);
                        }       //pisviser
                        else if (LocalMish.LiveryExtra == 2)
                        {
                            LocalMish.TruckinEnd.Add(new Vector3(-131.284637f, -260.33429f, 45.0527039f));
                            LocalMish.TruckinDir03.Add(160.799149f);

                            LocalMish.TruckinEnd.Add(new Vector3(-180.695251f, -1438.3551f, 33.2319298f));
                            LocalMish.TruckinDir03.Add(-41.8488159f);

                            LocalMish.TruckinEnd.Add(new Vector3(-1679.80225f, -1065.97827f, 15.0860128f));
                            LocalMish.TruckinDir03.Add(49.651844f);
                        }       //Cluckin' Bell,
                        else
                        {
                            LocalMish.TruckinEnd.Add(new Vector3(-79.5839767f, 6491.02686f, 33.4201279f));
                            LocalMish.TruckinDir03.Add(-135.151855f);

                            LocalMish.TruckinEnd.Add(new Vector3(2671.229f, 3515.27271f, 54.6488991f));
                            LocalMish.TruckinDir03.Add(67.6688766f);

                            LocalMish.TruckinEnd.Add(new Vector3(583.459167f, 2792.896f, 44.0722694f));
                            LocalMish.TruckinDir03.Add(3.83367729f);

                            LocalMish.TruckinEnd.Add(new Vector3(-3167.20728f, 1132.35229f, 22.9611683f));
                            LocalMish.TruckinDir03.Add(-23.7842388f);

                            LocalMish.TruckinEnd.Add(new Vector3(-246.748489f, -232.697006f, 38.4498291f));
                            LocalMish.TruckinDir03.Add(86.5699539f);

                            LocalMish.TruckinEnd.Add(new Vector3(1110.49707f, -785.055908f, 60.1917152f));
                            LocalMish.TruckinDir03.Add(0.401507914f);

                            LocalMish.TruckinEnd.Add(new Vector3(101.056709f, -1606.48511f, 31.4083958f));
                            LocalMish.TruckinDir03.Add(-128.579117f);
                        }
                    }
                    else
                    {
                        LocalMish.TruckinEnd.Add(new Vector3(-79.5839767f, 6491.02686f, 33.4201279f));
                        LocalMish.TruckinDir03.Add(-135.151855f);

                        LocalMish.TruckinEnd.Add(new Vector3(2671.229f, 3515.27271f, 54.6488991f));
                        LocalMish.TruckinDir03.Add(67.6688766f);

                        LocalMish.TruckinEnd.Add(new Vector3(583.459167f, 2792.896f, 44.0722694f));
                        LocalMish.TruckinDir03.Add(3.83367729f);

                        LocalMish.TruckinEnd.Add(new Vector3(-246.748489f, -232.697006f, 38.4498291f));
                        LocalMish.TruckinDir03.Add(86.5699539f);

                        LocalMish.TruckinEnd.Add(new Vector3(-1342.24048f, -750.770569f, 24.3265934f));
                        LocalMish.TruckinDir03.Add(37.3924332f);

                        LocalMish.TruckinEnd.Add(new Vector3(1110.49707f, -785.055908f, 60.1917152f));
                        LocalMish.TruckinDir03.Add(0.401507914f);

                        LocalMish.TruckinEnd.Add(new Vector3(101.056709f, -1606.48511f, 31.4083958f));
                        LocalMish.TruckinDir03.Add(-128.579117f);
                    }

                    //0-pisvisor
                    //1-blank
                    //2-cluckbell
                    //3-burgershot-non wov upandatom
                    //5-water-wov
                    //6-luqur-wov
                    //7-sprunk-wov
                    //8.dollar pills-wov
                    //if (LocalMish.TruckinTrail == "Trailers2" || LocalMish.TruckinTrail == "Trailers3")
                }                                                                               //Cluckin' Bell, Pisswasser, Up-n-Atom Burger.

                if (FindBuiltMissions(1))
                {
                    if (MySettings.BulderOnly)
                        iBuild = SelectBuilderMish(1);
                    else
                    {
                        MyMissions.TruckersXM.Add(LocalMish);
                        iBuild = FindRandom(66, 0, MyMissions.TruckersXM.Count - 1);

                        if (iBuild != MyMissions.TruckersXM.Count - 1)
                            iMissionVar_01 = 0;
                    }
                }
                else
                {
                    iBuild = 0;
                    MyMissions.TruckersXM.Add(LocalMish);
                }
            }

            if (MyMissions.TruckersXM[iBuild].VehVar == 0)
            {
                BeOnOff[5] = true;
                sTruck = "SADLER";
            }
            else if (MyMissions.TruckersXM[iBuild].VehVar == 1)
            {
                BeOnOff[5] = true;
                iMissionVar_01 = 2;
                sTruck = "SADLER";
            }
            else if (MyMissions.TruckersXM[iBuild].VehVar == 2 || MyMissions.TruckersXM[iBuild].VehVar == 3)
            {
                BeOnOff[4] = false;
                sTruck = "Tractor2";
                sList_01.Add(sTruck);
            }
            else if (MyMissions.TruckersXM[iBuild].VehVar == -2)
            {
                iMissionVar_01 = 1;
                BeOnOff[4] = false;
                sTruck = "PHANTOM3";
            }

            vFuMiss = MyMissions.TruckersXM[iBuild].FubarStop;
            vTarget_02 = MyMissions.TruckersXM[iBuild].TruckinStart02;

            int iRanDes = RandInt(0, MyMissions.TruckersXM[iBuild].TruckinEnd.Count - 1);
            vTarget_01 = MyMissions.TruckersXM[iBuild].TruckinEnd[iRanDes];
            vTarget_01.Z -= 1.00f;
            vTarget_01.Z = vTarget_01.Z - 1.1f;
            vGetaway = vTarget_02;

            VehicleSpawn(sTruck, vTarget_02, MyMissions.TruckersXM[iBuild].TruckinDir02, false, false, true, false, 4, 1, 66, MyLang.Maptext[1], 1, true);
            VehicleSpawn(MyMissions.TruckersXM[iBuild].TruckinTrail, MyMissions.TruckersXM[iBuild].TruckinStart01, MyMissions.TruckersXM[iBuild].TruckinDir01, false, false, false, false, MyMissions.TruckersXM[iBuild].VehLivery, MyMissions.TruckersXM[iBuild].LiveryExtra, 3, MyLang.Maptext[1], 2, false);
            VehicleSpawn(MyMissions.TruckersXM[iBuild].TruckinTrail, vTarget_01, MyMissions.TruckersXM[iBuild].TruckinDir03[iRanDes], false, false, false, false, MyMissions.TruckersXM[iBuild].VehLivery, MyMissions.TruckersXM[iBuild].LiveryExtra, -1, "", 3, false);

            fMission_01 = MyMissions.TruckersXM[iBuild].TruckinDir01;
            fMission_02 = MyMissions.TruckersXM[iBuild].TruckinDir02;
            fMission_03 = MyMissions.TruckersXM[iBuild].TruckinDir03[iRanDes];

            if (BeOnOff[5])
                iMissionVar_03 = 1;
            else
                iMissionVar_03 = 2;

            iTime_01.Add(0);
            iTime_01.Add(0);

            if (BeOnOff[5])
                sList_01 = BuildMishLists(1);
            else
                sList_01 = BuildMishLists(2);

            iMissionVar_04 = 0;

            if (!bTestRun)
                BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[0], "", 5000);

            bOnTheJob = true;
        }
        public class TruckBuild
        {
            public int Local { get; set; }

            public Vector3 FubarStop { get; set; }
            public Vector3 TruckinStart01 { get; set; }
            public float TruckinDir01 { get; set; }
            public Vector3 TruckinStart02 { get; set; }
            public float TruckinDir02 { get; set; }
            public List<Vector3> TruckinEnd { get; set; }
            public List<float> TruckinDir03 { get; set; }
            public string TruckinTrail { get; set; }
            public int VehVar { get; set; }
            public int LiveryExtra { get; set; }
            public int VehLivery { get; set; }

            public TruckBuild()
            {
                TruckinEnd = new List<Vector3>();
                TruckinDir03 = new List<float>();
            }
        }
        private void GetAwayDriver()
        {
            LogThis("GetAwayDriver");

            VTBTimerPool.Add(ttTextBar_01);
            ttTextBar_01.Label = "" + MyLang.Othertext[2] + "";

            iList_01.Clear();
            iList_02.Clear();
            iFireList.Clear();
            iTime_01.Clear();
            BeOnOff.Clear();
            MishVic.Clear();
            MishPed.Clear();

            BeOnOff.Add(false);//            bAlowAir       0
            BeOnOff.Add(false);//            bNoDamages     1
            BeOnOff.Add(true);//             bIgnoreFirst   2
            BeOnOff.Add(true);//             bMoveYourV     3
            BeOnOff.Add(false);//            bNotWanted     4
            BeOnOff.Add(false);//            bBankAlarm     5
            BeOnOff.Add(false);//            b4Seater       6
            BeOnOff.Add(false);//            bLostDollas    7
            BeOnOff.Add(false);//            bCashFlow      8
            BeOnOff.Add(false);//            bCashOver      9
            BeOnOff.Add(false);//            bPedCanFly     10

            Vector3 Pos = Vector3.Zero;
            Vector3 Pos2 = Vector3.Zero;
            Vector3 TellaPos = Vector3.Zero;
            Vector3 Rob1p = Vector3.Zero;

            if (iLocationX == 1)
            {
                Pos = new Vector3(153.14f, -1040.56f, 29.36f);
                Pos2 = new Vector3(146.36f, -1037.06f, 29.36f);
                TellaPos = new Vector3(149.51f, -1042.43f, 29.37f);
                Rob1p = new Vector3(143.89f, -1042.30f, 29.36f);
                vGetaway = new Vector3(1889.65f, 334.11f, 161.75f);
                fMission_01 = 230.15f;
                sVehType = "Buzzard";

                vTarget_01 = new Vector3(153.49f, -1028.8f, 28.27f);
                vTarget_02 = new Vector3(1876.16f, 305.61f, 162.7f);
                vTarget_03 = new Vector3(150.75f, -1038.1f, 28.37f);
            }
            else if (iLocationX == 2)
            {
                if (FindRandom(79, 1, 4) > 2)
                {
                    Pos = new Vector3(-1210.38f, -328.4f, 37.78f);
                    Pos2 = new Vector3(-1218.69f, -331.80f, 37.78f);
                    TellaPos = new Vector3(-1213.4f, -332.9f, 37.78f);
                    Rob1p = new Vector3(-1215.89f, -335.14f, 37.78f);

                    sVehType = "Akula";
                    vGetaway = new Vector3(-453.58f, 1146.85f, 325.03f);
                    fMission_01 = 325.52f;

                    vTarget_01 = new Vector3(-1215.89f, -316.1f, 36.6f);
                    vTarget_02 = new Vector3(-414.55f, 1180.28f, 324.64f);
                    vTarget_03 = new Vector3(-1213.96f, -328.49f, 36.79f);
                }
                else
                {
                    Pos = new Vector3(-355.93f, -46.87f, 49.87f);
                    Pos2 = new Vector3(-348.05f, -50.75f, 49.87f);
                    TellaPos = new Vector3(-351.39f, -51.48f, 49.03f);
                    Rob1p = new Vector3(-356.51f, -50.15f, 49.87f);

                    vGetaway = new Vector3(-1623.89f, -2281.51f, 0.27f);
                    fMission_01 = 47.60f;
                    sVehType = "Speeder";

                    vTarget_01 = new Vector3(-333.14f, -34.69f, 46.68f);
                    vTarget_02 = new Vector3(-1574.94f, -2303.91f, 4.91f);
                    vTarget_03 = new Vector3(-350.13f, -47.35f, 48.04f);
                }
            }
            else if (iLocationX == 3)
            {
                Pos = new Vector3(-2963.27f, 485.51f, 15.7f);
                Pos2 = new Vector3(-2965.05f, 478.89f, 15.7f);
                TellaPos = new Vector3(-2961.03f, 482.98f, 15.7f);
                Rob1p = new Vector3(-2960.44f, 477.55f, 15.7f);
                sVehType = "Speeder";
                vGetaway = new Vector3(-2955.16f, 3581.19f, -1.07f);
                fMission_01 = 24.29f;

                vTarget_01 = new Vector3(-2973.78f, 481.35f, 14.25f);
                vTarget_02 = new Vector3(-2935.22f, 3531.49f, 7.06f);
                vTarget_03 = new Vector3(-2965.327f, 482.8784f, 14.7068f);
            }
            else if (iLocationX == 4)
            {
                BeOnOff[10] = true;

                Pos = new Vector3(317.33f, -278.82f, 54.16f);
                Pos2 = new Vector3(309.55f, -275.55f, 54.16f);
                TellaPos = new Vector3(313.73f, -280.54f, 54.16f);
                Rob1p = new Vector3(308.59f, -279.34f, 54.16f);
                sVehType = "Luxor2";
                vGetaway = new Vector3(1702.16f, 3256.69f, 40.01f);
                fMission_01 = 106.06f;

                vTarget_01 = new Vector3(318.37f, -268.25f, 52.75f);
                vTarget_02 = new Vector3(1727.79f, 3251.74f, 40.23f);
                vTarget_03 = new Vector3(314.91f, -276.55f, 53.17f);
            }
            else if (iLocationX == 5)
            {
                Pos = new Vector3(1172.02f, 2704.79f, 38.08f);
                Pos2 = new Vector3(1180.37f, 2704.63f, 38.08f);
                TellaPos = new Vector3(1174.78f, 2708.3f, 38.08f);
                Rob1p = new Vector3(1180.47f, 2709.34f, 38.08f);
                sVehType = "Marquis";
                vGetaway = new Vector3(3852.91f, 4472.09f, -2.48f);
                fMission_01 = 276.27f;

                vTarget_01 = new Vector3(1175.87f, 2696.26f, 36.96f);
                vTarget_02 = new Vector3(3821.78f, 4461.86f, 2.5f);
                vTarget_03 = new Vector3(1175.08f, 2704.38f, 37.09f);
            }
            else if (iLocationX == 99)
            {
                iMissionSeq = 0;
                iJobType = 2;

                Pos = new Vector3(240.84f, 220.54f, 106.28f);
                Pos2 = new Vector3(256.06f, 212.28f, 106.28f);
                TellaPos = new Vector3(252.73f, 226.67f, 106.28f);
                Rob1p = new Vector3(235.14f, 217.75f, 106.28f);
                vGetaway = new Vector3(-1580.96f, 4388.05f, -0.8f);
                fMission_01 = 42.0f;
                sVehType = "Dinghy4";

                vTarget_01 = new Vector3(226.55f, 211.96f, 104.54f);
                vTarget_02 = new Vector3(-1608.15f, 4371.05f, 1.44f);
                vTarget_03 = new Vector3(237.3f, 217.47f, 106.2f);

                BeOnOff[0] = true;

                bPlayingNewMissions = true;
                bLookingForPB = false;
                bJobLoaded = true;
            }
            else
            {
                Pos = new Vector3(-113.77f, 6465.91f, 31.62f);
                Pos2 = new Vector3(-103.79f, 6468.15f, 31.62f);
                TellaPos = new Vector3(-111.15f, 6470.05f, 31.62f);
                Rob1p = new Vector3(-101.58f, 6463.33f, 31.62f);
                sVehType = "Frogger";
                vGetaway = new Vector3(3344.84f, 5507f, 19.2f);
                fMission_01 = 227.0f;

                vTarget_01 = new Vector3(-117.14f, 6455.7f, 30.42f);
                vTarget_02 = new Vector3(3336f, 5474.17f, 18.83f);
                vTarget_03 = new Vector3(-110.94f, 6462.72f, 30.64f);
            }

            NPCSpawn(RandNPC(13), Pos, 77.30f, false, 150, 1, 0, null, 0, false, 0, 0, "");
            NPCSpawn(RandNPC(13), Pos2, 77.30f, false, 150, 1, 0, null, 0, false, 0, 0, "");
            NPCSpawn("cs_bankman", TellaPos, 77.30f, false, 150, 1, 0, null, 0, false, 0, 0, "");

            Npc_01 = NPCSpawn("mp_m_freemode_01", Rob1p, 77.30f, true, 120, 2, 0, null, 9, false, 0, 4, "");
            Npc_02 = NPCSpawn("mp_m_freemode_01", Rob1p, 77.30f, true, 120, 2, 0, null, 9, false, 0, 5, "");
            Npc_03 = NPCSpawn("mp_m_freemode_01", Rob1p, 77.30f, true, 120, 2, 0, null, 9, false, 0, 6, "");

            iTime_01.Add(0);

            if (iLocationX == 99)
            {
                BigMessageThread.MessageInstance.ShowSimpleShard("Pacific Standard", "", 5000);
                iMissionVar_03 = 4500000;
            }
            else
            {
                BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[1], "", 5000);
                iMissionVar_03 = RandInt(1100000, 1400000);
            }

            Groupies(true);
            bOnTheJob = true;
        }
        private void Packages()
        {
            LogThis("Packages");

            VectorList_01.Clear();
            VectorList_02.Clear();
            iDeliverList.Clear();
            sList_01.Clear();
            iTime_01.Clear();

            VTBTimerPool.Add(ttTextBar_01);
            ttTextBar_01.Label = "" + MyLang.Othertext[3] + "";
            ttTextBar_02.Label = "" + MyLang.Othertext[1] + "";
            fCorSize = 5.00f;

            int iBuild = 0;
            int iAddExtras = -1;
            bool bUseAll = false;

            iTime_01.Add(0);//iPackTimein   0
            iTime_01.Add(0);//iPackPlus     1
            iTime_01.Add(0);//iPausetime    2

            BeOnOff.Clear();

            BeOnOff.Add(false);//bPackCount 0
            BeOnOff.Add(false);//bMoveYourV 1
            BeOnOff.Add(false);//bTruckBlip 2
            BeOnOff.Add(false);//bLiveExport 3
            BeOnOff.Add(false);//bTargTogg 4
            
            List<PackBuild> PbLocal = new List<PackBuild>();

            if (bTestRun)
            {
                bJobLoaded = true;
                iJobType = 3;
                iBuild = 0;
            }
            else
            {
                if (iLocationX == 1)
                {
                    PackBuild LocalMish01 = new PackBuild();

                    LocalMish01.PackDrops.Add(new Vector3(606.1331f, -3076.071f, 6.06932f));// Seaport
                    LocalMish01.PackDrops.Add(new Vector3(670.8724f, -2656.838f, 6.081181f));
                    LocalMish01.PackDrops.Add(new Vector3(368.3771f, -2449.551f, 6.103002f));
                    LocalMish01.PackDrops.Add(new Vector3(262.8023f, -2501.746f, 6.440527f));
                    LocalMish01.PackDrops.Add(new Vector3(134.7997f, -2477.386f, 5.999991f));
                    LocalMish01.PackDrops.Add(new Vector3(116.2258f, -2559.884f, 5.999993f));
                    LocalMish01.PackDrops.Add(new Vector3(11.09534f, -2675.23f, 6.008894f));
                    LocalMish01.PackDrops.Add(new Vector3(-44.1941f, -2729.565f, 6.147783f));
                    LocalMish01.PackDrops.Add(new Vector3(-111.609f, -2675.784f, 6.006345f));
                    LocalMish01.PackDrops.Add(new Vector3(-234.9835f, -2663.382f, 6.000295f));
                    LocalMish01.PackDrops.Add(new Vector3(-289.2259f, -2459.019f, 7.294806f));
                    LocalMish01.PackDrops.Add(new Vector3(-336.0657f, -2457.042f, 7.294814f));
                    LocalMish01.PackDrops.Add(new Vector3(-299.5649f, -2598.12f, 6.000296f));
                    LocalMish01.PackDrops.Add(new Vector3(-314.4655f, -2777.074f, 5.00024f));
                    LocalMish01.PackDrops.Add(new Vector3(1211.444f, -3103.413f, 6.027918f));
                    LocalMish01.PackDrops.Add(new Vector3(1195.812f, -3254.429f, 7.095187f));
                    LocalMish01.PackDrops.Add(new Vector3(755.6094f, -3181.837f, 7.405778f));
                    LocalMish01.PackDrops.Add(new Vector3(821.003f, -3196.436f, 5.900819f));
                    LocalMish01.PackDrops.Add(new Vector3(814.2813f, -2982.313f, 6.02089f));

                    PbLocal.Add(Packages_KitBuild(LocalMish01, new Vector3(-412.229f, -2840.585f, 5.491673f), new Vector3(-417.4f, -2853.87f, 5.64f), 182.6f, "Mule2", "hei_prop_heist_wooden_box", 4));
                    PackBuild LocalMish02 = new PackBuild();

                    LocalMish02.PackDrops.Add(new Vector3(-541.3153f, -2227.74f, 6.394024f));// Airport
                    LocalMish02.PackDrops.Add(new Vector3(-623.8204f, -2361.339f, 13.95158f));
                    LocalMish02.PackDrops.Add(new Vector3(-685.3821f, -2413.586f, 13.94453f));
                    LocalMish02.PackDrops.Add(new Vector3(-705.3857f, -2448.599f, 13.9444f));
                    LocalMish02.PackDrops.Add(new Vector3(-710.1678f, -2528.124f, 13.9444f));
                    LocalMish02.PackDrops.Add(new Vector3(-815.3716f, -2782.938f, 13.94609f));
                    LocalMish02.PackDrops.Add(new Vector3(-925.5151f, -2547.041f, 14.05221f));
                    LocalMish02.PackDrops.Add(new Vector3(-863.3908f, -2387.771f, 14.02718f));
                    LocalMish02.PackDrops.Add(new Vector3(-832.1877f, -2347.607f, 14.57062f));
                    LocalMish02.PackDrops.Add(new Vector3(-1070.43f, -2249.979f, 12.10998f));
                    LocalMish02.PackDrops.Add(new Vector3(-1098.497f, -2138.16f, 13.39889f));
                    LocalMish02.PackDrops.Add(new Vector3(-1168.532f, -2022.022f, 13.16054f));
                    LocalMish02.PackDrops.Add(new Vector3(-1071.398f, -2003.326f, 15.78551f));
                    LocalMish02.PackDrops.Add(new Vector3(-967.1698f, -2069.492f, 9.405894f));
                    LocalMish02.PackDrops.Add(new Vector3(-821.2372f, -2103.405f, 8.960634f));
                    LocalMish02.PackDrops.Add(new Vector3(-754.8344f, -2226.979f, 5.786045f));
                    LocalMish02.PackDrops.Add(new Vector3(-429.6969f, -2166.995f, 10.32835f));
                    LocalMish02.PackDrops.Add(new Vector3(-457.2208f, -2266.364f, 8.515819f));
                    LocalMish02.PackDrops.Add(new Vector3(-110.3373f, -2235.801f, 7.811676f));
                    LocalMish02.PackDrops.Add(new Vector3(-398.9398f, -1876.624f, 20.52785f));
                    LocalMish02.PackDrops.Add(new Vector3(-468.7385f, -1717.421f, 18.79402f));
                    LocalMish02.PackDrops.Add(new Vector3(-553.7200f, -1813.109f, 22.82181f));
                    LocalMish02.PackDrops.Add(new Vector3(-591.1908f, -1774.49f, 22.77674f));
                    LocalMish02.PackDrops.Add(new Vector3(-586.3838f, -1588.896f, 26.75115f));

                    PbLocal.Add(Packages_KitBuild(LocalMish02, new Vector3(-412.229f, -2840.585f, 5.491673f), new Vector3(-417.4f, -2853.87f, 5.64f), 182.6f, "Mule2", "hei_prop_heist_wooden_box", 4));
                    PackBuild LocalMish03 = new PackBuild();

                    LocalMish03.PackDrops.Add(new Vector3(1736.674f, -1609.645f, 112.4697f));// cypress.mess
                    LocalMish03.PackDrops.Add(new Vector3(1561.137f, -2133.279f, 77.4785f));
                    LocalMish03.PackDrops.Add(new Vector3(1459.511f, -1935.92f, 71.30696f));
                    LocalMish03.PackDrops.Add(new Vector3(1455.132f, -1682.857f, 66.06307f));
                    LocalMish03.PackDrops.Add(new Vector3(1193.554f, -1240.154f, 36.32576f));
                    LocalMish03.PackDrops.Add(new Vector3(1122.821f, -1303.704f, 34.71646f));
                    LocalMish03.PackDrops.Add(new Vector3(994.2419f, -1555.895f, 30.75485f));
                    LocalMish03.PackDrops.Add(new Vector3(918.1321f, -1516.955f, 30.96606f));
                    LocalMish03.PackDrops.Add(new Vector3(903.4687f, -1590.887f, 30.22392f));
                    LocalMish03.PackDrops.Add(new Vector3(804.6454f, -1666.87f, 30.86449f));
                    LocalMish03.PackDrops.Add(new Vector3(746.9606f, -1862.089f, 29.29224f));
                    LocalMish03.PackDrops.Add(new Vector3(1025.895f, -1686.251f, 33.57116f));
                    LocalMish03.PackDrops.Add(new Vector3(928.8152f, -1726.541f, 32.15963f));
                    LocalMish03.PackDrops.Add(new Vector3(897.4868f, -1864.518f, 30.61937f));
                    LocalMish03.PackDrops.Add(new Vector3(1087.357f, -1970.058f, 31.01467f));
                    LocalMish03.PackDrops.Add(new Vector3(973.9832f, -1978.706f, 30.63801f));
                    LocalMish03.PackDrops.Add(new Vector3(890.3286f, -2001.457f, 30.61759f));
                    LocalMish03.PackDrops.Add(new Vector3(953.8917f, -2117.238f, 30.55156f));
                    LocalMish03.PackDrops.Add(new Vector3(879.512f, -2166.26f, 32.27139f));
                    LocalMish03.PackDrops.Add(new Vector3(840.3463f, -2292.076f, 30.51253f));
                    LocalMish03.PackDrops.Add(new Vector3(864.4549f, -2361.586f, 31.51551f));
                    LocalMish03.PackDrops.Add(new Vector3(943.5316f, -2169.565f, 30.5664f));
                    LocalMish03.PackDrops.Add(new Vector3(1002.891f, -2161.235f, 30.55158f));
                    LocalMish03.PackDrops.Add(new Vector3(1041.598f, -2170.343f, 31.50933f));
                    LocalMish03.PackDrops.Add(new Vector3(1019.803f, -2381.706f, 30.49956f));
                    LocalMish03.PackDrops.Add(new Vector3(1095.563f, -2227.028f, 31.304f));
                    LocalMish03.PackDrops.Add(new Vector3(1091.22f, -2279.994f, 30.14508f));
                    LocalMish03.PackDrops.Add(new Vector3(1083.314f, -2413.066f, 30.23936f));
                    LocalMish03.PackDrops.Add(new Vector3(923.9042f, -2533.111f, 28.30268f));
                    LocalMish03.PackDrops.Add(new Vector3(1211.444f, -3103.413f, 6.027918f));
                    LocalMish03.PackDrops.Add(new Vector3(1195.812f, -3254.429f, 7.095187f));
                    LocalMish03.PackDrops.Add(new Vector3(755.6094f, -3181.837f, 7.405778f));
                    LocalMish03.PackDrops.Add(new Vector3(821.003f, -3196.436f, 5.900819f));
                    LocalMish03.PackDrops.Add(new Vector3(814.2813f, -2982.313f, 6.02089f));

                    PbLocal.Add(Packages_KitBuild(LocalMish03, new Vector3(-412.229f, -2840.585f, 5.491673f), new Vector3(-417.4f, -2853.87f, 5.64f), 182.6f, "Mule2", "hei_prop_heist_wooden_box", 4));
                    PackBuild LocalMish04 = new PackBuild();

                    LocalMish04.PackDrops.Add(new Vector3(109.8548f, -1595.567f, 30.89486f));// strwberry
                    LocalMish04.PackDrops.Add(new Vector3(211.0892f, -1856.77f, 27.20064f));
                    LocalMish04.PackDrops.Add(new Vector3(257.4243f, -1801.21f, 27.11315f));
                    LocalMish04.PackDrops.Add(new Vector3(479.7857f, -2168.685f, 5.918276f));
                    LocalMish04.PackDrops.Add(new Vector3(450.7411f, -1881.882f, 26.81059f));
                    LocalMish04.PackDrops.Add(new Vector3(540.288f, -1945.175f, 24.98511f));
                    LocalMish04.PackDrops.Add(new Vector3(552.86f, -1639.724f, 28.15303f));
                    LocalMish04.PackDrops.Add(new Vector3(488.4154f, -1524.887f, 29.29461f));
                    LocalMish04.PackDrops.Add(new Vector3(454.5216f, -1305.83f, 30.12104f));
                    LocalMish04.PackDrops.Add(new Vector3(349.7768f, -1246.292f, 32.50904f));
                    LocalMish04.PackDrops.Add(new Vector3(150.8443f, -1338.228f, 29.20241f));
                    LocalMish04.PackDrops.Add(new Vector3(5.289824f, -1308.736f, 30.16653f));
                    LocalMish04.PackDrops.Add(new Vector3(-78.11802f, -1392.021f, 29.32072f));
                    LocalMish04.PackDrops.Add(new Vector3(-175.5446f, -1268.026f, 32.59798f));
                    LocalMish04.PackDrops.Add(new Vector3(-315.9799f, -1337.25f, 31.37128f));
                    LocalMish04.PackDrops.Add(new Vector3(-205.8848f, -1353.025f, 31.26374f));
                    LocalMish04.PackDrops.Add(new Vector3(727.3312f, -1191.563f, 24.27694f));
                    LocalMish04.PackDrops.Add(new Vector3(866.8922f, -966.7406f, 27.86195f));
                    LocalMish04.PackDrops.Add(new Vector3(742.6314f, -949.1918f, 25.63259f));
                    LocalMish04.PackDrops.Add(new Vector3(866.7693f, -1059.789f, 28.92712f));
                    LocalMish04.PackDrops.Add(new Vector3(895.7161f, -1140.812f, 25.94267f));
                    LocalMish04.PackDrops.Add(new Vector3(915.3958f, -1267.584f, 25.56782f));
                    LocalMish04.PackDrops.Add(new Vector3(754.502f, -1261.593f, 26.32873f));
                    LocalMish04.PackDrops.Add(new Vector3(731.8141f, -1387.889f, 26.48004f));

                    PbLocal.Add(Packages_KitBuild(LocalMish04, new Vector3(-412.229f, -2840.585f, 5.491673f), new Vector3(-417.4f, -2853.87f, 5.64f), 182.6f, "Mule2", "hei_prop_heist_wooden_box", 4));

                    iAddExtras = 1;
                }
                else if (iLocationX == 2)
                {
                    PackBuild LocalMish01 = new PackBuild();

                    LocalMish01.PackDrops.Add(new Vector3(-356.741f, 16.12581f, 47.85474f));// burton vinwood
                    LocalMish01.PackDrops.Add(new Vector3(-362.0493f, 57.46016f, 54.4298f));
                    LocalMish01.PackDrops.Add(new Vector3(-411.5159f, 152.6001f, 81.74309f));
                    LocalMish01.PackDrops.Add(new Vector3(-384.4481f, 153.008f, 81.74698f));
                    LocalMish01.PackDrops.Add(new Vector3(-303.3091f, 84.56718f, 76.66209f));
                    LocalMish01.PackDrops.Add(new Vector3(-313.5391f, 83.60252f, 75.65311f));
                    LocalMish01.PackDrops.Add(new Vector3(-332.7193f, 88.68687f, 71.21808f));
                    LocalMish01.PackDrops.Add(new Vector3(-263.5449f, 98.93026f, 77.56315f));
                    LocalMish01.PackDrops.Add(new Vector3(-188.5497f, 184.8336f, 88.60064f));
                    LocalMish01.PackDrops.Add(new Vector3(-154.3215f, 214.6461f, 98.32927f));
                    LocalMish01.PackDrops.Add(new Vector3(-143.7316f, 174.7767f, 93.62655f));
                    LocalMish01.PackDrops.Add(new Vector3(-161.3621f, 161.0014f, 89.70206f));
                    LocalMish01.PackDrops.Add(new Vector3(-206.0126f, -7.720617f, 60.62708f));
                    LocalMish01.PackDrops.Add(new Vector3(-161.1083f, -4.599355f, 66.46642f));
                    LocalMish01.PackDrops.Add(new Vector3(-102.2039f, -31.8603f, 70.44765f));
                    LocalMish01.PackDrops.Add(new Vector3(-18.69028f, -68.38952f, 61.37531f));
                    LocalMish01.PackDrops.Add(new Vector3(-27.58074f, -61.06355f, 67.59225f));
                    LocalMish01.PackDrops.Add(new Vector3(-21.88984f, -23.86292f, 73.24532f));
                    LocalMish01.PackDrops.Add(new Vector3(-14.02445f, -11.82469f, 79.34619f));
                    LocalMish01.PackDrops.Add(new Vector3(20.95977f, 114.1915f, 87.27728f));
                    LocalMish01.PackDrops.Add(new Vector3(107.7924f, 54.56335f, 81.77329f));
                    LocalMish01.PackDrops.Add(new Vector3(189.1337f, 11.49182f, 81.41087f));
                    LocalMish01.PackDrops.Add(new Vector3(212.0644f, 1.590603f, 79.19212f));
                    LocalMish01.PackDrops.Add(new Vector3(188.576f, 40.0778f, 87.82249f));
                    LocalMish01.PackDrops.Add(new Vector3(208.1531f, 73.78002f, 96.09595f));
                    LocalMish01.PackDrops.Add(new Vector3(284.9831f, 47.12731f, 96.6929f));
                    LocalMish01.PackDrops.Add(new Vector3(254.5233f, 25.36229f, 92.12718f));
                    LocalMish01.PackDrops.Add(new Vector3(388.1746f, 2.197361f, 91.41467f));
                    LocalMish01.PackDrops.Add(new Vector3(485.1955f, 212.3895f, 108.3095f));

                    PbLocal.Add(Packages_KitBuild(LocalMish01, new Vector3(61.74551f, 99.28784f, 78.44849f), new Vector3(68.3553f, 120.66f, 79.04f), 159.0f, "Boxville2", "prop_cs_cardbox_01", 1));
                    PackBuild LocalMish02 = new PackBuild();

                    LocalMish02.PackDrops.Add(new Vector3(-1177.005f, -1073.163f, 5.906403f));// little soul vaspuci
                    LocalMish02.PackDrops.Add(new Vector3(-1183.198f, -1064.417f, 2.150418f));
                    LocalMish02.PackDrops.Add(new Vector3(-1191.016f, -1054.863f, 2.150433f));
                    LocalMish02.PackDrops.Add(new Vector3(-1188.258f, -1041.719f, 2.150275f));
                    LocalMish02.PackDrops.Add(new Vector3(-1201.109f, -1031.956f, 2.150406f));
                    LocalMish02.PackDrops.Add(new Vector3(-1204.234f, -1021.773f, 5.945113f));
                    LocalMish02.PackDrops.Add(new Vector3(-1338.218f, -941.2662f, 15.35802f));
                    LocalMish02.PackDrops.Add(new Vector3(-1353.765f, -908.0026f, 12.4705f));
                    LocalMish02.PackDrops.Add(new Vector3(-1335.845f, -1146.224f, 6.731401f));
                    LocalMish02.PackDrops.Add(new Vector3(-1252.488f, -1143.985f, 8.513974f));
                    LocalMish02.PackDrops.Add(new Vector3(-1172.675f, -1260.892f, 14.90674f));
                    LocalMish02.PackDrops.Add(new Vector3(-1229.549f, -1235.521f, 11.02771f));
                    LocalMish02.PackDrops.Add(new Vector3(-1306.429f, -1229.076f, 8.980485f));
                    LocalMish02.PackDrops.Add(new Vector3(-1317.88f, -1238.943f, 7.168704f));
                    LocalMish02.PackDrops.Add(new Vector3(-1272.146f, -1295.553f, 8.285895f));
                    LocalMish02.PackDrops.Add(new Vector3(-1246.816f, -1358.752f, 7.820462f));
                    LocalMish02.PackDrops.Add(new Vector3(-1145.777f, -1466.309f, 7.690706f));
                    LocalMish02.PackDrops.Add(new Vector3(-1156.229f, -1574.861f, 8.345174f));
                    LocalMish02.PackDrops.Add(new Vector3(-1098.117f, -1673.513f, 8.39401f));
                    LocalMish02.PackDrops.Add(new Vector3(-1059.984f, -1657.836f, 4.674311f));
                    LocalMish02.PackDrops.Add(new Vector3(-1070.926f, -1636.006f, 8.194701f));
                    LocalMish02.PackDrops.Add(new Vector3(-1076.572f, -1620.789f, 4.442664f));
                    LocalMish02.PackDrops.Add(new Vector3(-1078.258f, -1616.337f, 4.428094f));
                    LocalMish02.PackDrops.Add(new Vector3(-1093.088f, -1607.943f, 8.458809f));
                    LocalMish02.PackDrops.Add(new Vector3(-1112.636f, -1577.709f, 8.679523f));
                    LocalMish02.PackDrops.Add(new Vector3(-1148.522f, -1523.617f, 10.62805f));
                    LocalMish02.PackDrops.Add(new Vector3(-1116.498f, -1506.122f, 4.403326f));
                    LocalMish02.PackDrops.Add(new Vector3(-1110.924f, -1498.482f, 4.672343f));
                    LocalMish02.PackDrops.Add(new Vector3(-1102.588f, -1492.073f, 4.887649f));
                    LocalMish02.PackDrops.Add(new Vector3(-1108.559f, -1527.218f, 6.779534f));
                    LocalMish02.PackDrops.Add(new Vector3(-1091.374f, -1517.666f, 4.792679f));
                    LocalMish02.PackDrops.Add(new Vector3(-1086.088f, -1503.486f, 5.707945f));
                    LocalMish02.PackDrops.Add(new Vector3(-1085.366f, -1558.724f, 4.489116f));
                    LocalMish02.PackDrops.Add(new Vector3(-1077.584f, -1553.464f, 4.625066f));
                    LocalMish02.PackDrops.Add(new Vector3(-1066.284f, -1545.243f, 4.902433f));
                    LocalMish02.PackDrops.Add(new Vector3(-1057.291f, -1551.201f, 4.911008f));
                    LocalMish02.PackDrops.Add(new Vector3(-1043.943f, -1579.937f, 5.03639f));
                    LocalMish02.PackDrops.Add(new Vector3(-1048.449f, -1579.996f, 4.944197f));
                    LocalMish02.PackDrops.Add(new Vector3(-1056.9f, -1587.358f, 4.613483f));
                    LocalMish02.PackDrops.Add(new Vector3(-1038.341f, -1609.897f, 5.003761f));
                    LocalMish02.PackDrops.Add(new Vector3(-956.5812f, -1432.736f, 7.679167f));
                    LocalMish02.PackDrops.Add(new Vector3(-868.7635f, -1286.318f, 13.20004f));
                    LocalMish02.PackDrops.Add(new Vector3(-936.1241f, -1310.397f, 9.70009f));
                    LocalMish02.PackDrops.Add(new Vector3(-869.3542f, -1103.725f, 6.445571f));
                    LocalMish02.PackDrops.Add(new Vector3(-903.3987f, -1005.532f, 2.150328f));
                    LocalMish02.PackDrops.Add(new Vector3(-913.8767f, -989.0179f, 2.150327f));
                    LocalMish02.PackDrops.Add(new Vector3(-908.3992f, -976.228f, 2.150325f));
                    LocalMish02.PackDrops.Add(new Vector3(-942.7357f, -969.0355f, 2.150114f));
                    LocalMish02.PackDrops.Add(new Vector3(-934.5264f, -939.1158f, 2.145313f));
                    LocalMish02.PackDrops.Add(new Vector3(-947.3409f, -927.6057f, 2.145313f));
                    LocalMish02.PackDrops.Add(new Vector3(-975.7267f, -909.0048f, 2.159486f));
                    LocalMish02.PackDrops.Add(new Vector3(-1022.753f, -896.6989f, 5.41547f));
                    LocalMish02.PackDrops.Add(new Vector3(-1023.957f, -912.3516f, 6.961076f));
                    LocalMish02.PackDrops.Add(new Vector3(-1042.891f, -924.6329f, 3.154166f));
                    LocalMish02.PackDrops.Add(new Vector3(-1053.634f, -929.9891f, 7.554896f));
                    LocalMish02.PackDrops.Add(new Vector3(-1061.149f, -943.5154f, 2.182675f));
                    LocalMish02.PackDrops.Add(new Vector3(-1091.015f, -925.9146f, 3.146876f));
                    LocalMish02.PackDrops.Add(new Vector3(-1161.481f, -973.403f, 2.150194f));
                    LocalMish02.PackDrops.Add(new Vector3(-1181.619f, -988.9208f, 2.150193f));
                    LocalMish02.PackDrops.Add(new Vector3(-1204.326f, -943.4292f, 8.114918f));
                    LocalMish02.PackDrops.Add(new Vector3(-1151.095f, -913.4648f, 6.628778f));
                    LocalMish02.PackDrops.Add(new Vector3(-1042.812f, -1024.366f, 2.150358f));
                    LocalMish02.PackDrops.Add(new Vector3(-1008.249f, -1036.944f, 2.150358f));
                    LocalMish02.PackDrops.Add(new Vector3(-1000.026f, -1030.441f, 2.150311f));
                    LocalMish02.PackDrops.Add(new Vector3(-997.8235f, -1012.419f, 2.150311f));
                    LocalMish02.PackDrops.Add(new Vector3(-967.3852f, -1008.264f, 2.15031f));
                    LocalMish02.PackDrops.Add(new Vector3(-978.1533f, -990.1673f, 4.545312f));
                    LocalMish02.PackDrops.Add(new Vector3(-995.0858f, -966.8881f, 2.54532f));
                    LocalMish02.PackDrops.Add(new Vector3(-1018.765f, -963.067f, 2.150194f));
                    LocalMish02.PackDrops.Add(new Vector3(-1027.697f, -968.8497f, 2.1502f));
                    LocalMish02.PackDrops.Add(new Vector3(-1035.725f, -984.0291f, 2.150194f));
                    LocalMish02.PackDrops.Add(new Vector3(-1055.298f, -998.6008f, 6.410484f));
                    LocalMish02.PackDrops.Add(new Vector3(-1130.638f, -1031.046f, 2.150357f));
                    LocalMish02.PackDrops.Add(new Vector3(-1122.727f, -1027.076f, 2.150356f));
                    LocalMish02.PackDrops.Add(new Vector3(-1113.141f, -1018.701f, 2.150358f));
                    LocalMish02.PackDrops.Add(new Vector3(-1103.691f, -1013.49f, 2.150357f));
                    LocalMish02.PackDrops.Add(new Vector3(-1101.415f, -1082.764f, 2.150356f));
                    LocalMish02.PackDrops.Add(new Vector3(-1128.448f, -1080.953f, 4.222689f));
                    LocalMish02.PackDrops.Add(new Vector3(-1064.395f, -1057.067f, 6.411655f));
                    LocalMish02.PackDrops.Add(new Vector3(-1075.633f, -1026.472f, 4.545251f));
                    LocalMish02.PackDrops.Add(new Vector3(-921.0966f, -1095.091f, 2.15031f));
                    LocalMish02.PackDrops.Add(new Vector3(-946.3143f, -1050.763f, 2.171845f));
                    LocalMish02.PackDrops.Add(new Vector3(-951.3636f, -1079.171f, 2.15031f));
                    LocalMish02.PackDrops.Add(new Vector3(-960.2056f, -1109.441f, 2.150381f));
                    LocalMish02.PackDrops.Add(new Vector3(-982.7823f, -1066.106f, 2.150313f));
                    LocalMish02.PackDrops.Add(new Vector3(-982.4726f, -1083.512f, 2.545213f));
                    LocalMish02.PackDrops.Add(new Vector3(-970.9428f, -1120.898f, 2.171845f));
                    LocalMish02.PackDrops.Add(new Vector3(-991.4828f, -1103.666f, 2.150312f));
                    LocalMish02.PackDrops.Add(new Vector3(-986.8842f, -1122.311f, 4.545273f));
                    LocalMish02.PackDrops.Add(new Vector3(-1031.39f, -1109.176f, 2.1586f));
                    LocalMish02.PackDrops.Add(new Vector3(-1004.998f, -1154.655f, 2.158741f));
                    LocalMish02.PackDrops.Add(new Vector3(-1022.293f, -1160.524f, 2.1586f));
                    LocalMish02.PackDrops.Add(new Vector3(-1031.984f, -1173.81f, 2.158597f));
                    LocalMish02.PackDrops.Add(new Vector3(-1063.752f, -1132.606f, 2.158602f));
                    LocalMish02.PackDrops.Add(new Vector3(-1091.859f, -1145.276f, 2.158598f));
                    LocalMish02.PackDrops.Add(new Vector3(-1064.242f, -1159.144f, 2.159603f));
                    LocalMish02.PackDrops.Add(new Vector3(-1068.306f, -1163.143f, 2.745344f));
                    LocalMish02.PackDrops.Add(new Vector3(-1099.331f, -1210.65f, 2.538017f));
                    LocalMish02.PackDrops.Add(new Vector3(-1094.835f, -1218.866f, 2.674695f));
                    LocalMish02.PackDrops.Add(new Vector3(-1087.718f, -1230.778f, 2.91478f));
                    LocalMish02.PackDrops.Add(new Vector3(-1126.017f, -1172.03f, 2.357591f));
                    LocalMish02.PackDrops.Add(new Vector3(-1128.641f, -1162.314f, 6.494957f));
                    LocalMish02.PackDrops.Add(new Vector3(-1128.47f, -1143.433f, 2.840051f));
                    LocalMish02.PackDrops.Add(new Vector3(-1145.392f, -1127.529f, 6.503163f));
                    LocalMish02.PackDrops.Add(new Vector3(-1142.907f, -1122.372f, 2.643049f));
                    LocalMish02.PackDrops.Add(new Vector3(-1159.114f, -1100.559f, 6.531281f));

                    PbLocal.Add(Packages_KitBuild(LocalMish02, new Vector3(61.74551f, 99.28784f, 78.44849f), new Vector3(68.3553f, 120.66f, 79.04f), 159.0f, "Boxville2", "prop_cs_cardbox_01", 1));
                    PackBuild LocalMish03 = new PackBuild();

                    LocalMish03.PackDrops.Add(new Vector3(-1469.499f, 23.98446f, 53.64318f));//delpero rockford
                    LocalMish03.PackDrops.Add(new Vector3(-1509.753f, 6.369807f, 56.06623f));
                    LocalMish03.PackDrops.Add(new Vector3(-1579.321f, 12.67341f, 61.08215f));
                    LocalMish03.PackDrops.Add(new Vector3(-1625.327f, 8.889999f, 62.53669f));
                    LocalMish03.PackDrops.Add(new Vector3(-1599.91f, -33.59167f, 58.19274f));
                    LocalMish03.PackDrops.Add(new Vector3(-1544.099f, -98.91996f, 54.52899f));
                    LocalMish03.PackDrops.Add(new Vector3(-1481.332f, -41.2363f, 56.84435f));
                    LocalMish03.PackDrops.Add(new Vector3(-1182.347f, 305.6922f, 69.89175f));
                    LocalMish03.PackDrops.Add(new Vector3(-1134.616f, 362.8218f, 74.93424f));
                    LocalMish03.PackDrops.Add(new Vector3(-1111.962f, 313.533f, 66.97783f));
                    LocalMish03.PackDrops.Add(new Vector3(-1041.385f, 296.4107f, 66.7803f));
                    LocalMish03.PackDrops.Add(new Vector3(-1045.758f, 374.5154f, 69.94336f));
                    LocalMish03.PackDrops.Add(new Vector3(-870.2264f, 357.041f, 85.10243f));
                    LocalMish03.PackDrops.Add(new Vector3(-889.8139f, 311.1008f, 84.12887f));
                    LocalMish03.PackDrops.Add(new Vector3(-805.5648f, 250.4268f, 79.11285f));
                    LocalMish03.PackDrops.Add(new Vector3(-1043.047f, 237.5888f, 64.16473f));
                    LocalMish03.PackDrops.Add(new Vector3(-1020.127f, 162.336f, 58.53504f));
                    LocalMish03.PackDrops.Add(new Vector3(-975.7432f, 103.4353f, 55.89742f));
                    LocalMish03.PackDrops.Add(new Vector3(-908.3871f, 125.7879f, 55.31467f));
                    LocalMish03.PackDrops.Add(new Vector3(-949.7228f, 214.9841f, 67.34995f));
                    LocalMish03.PackDrops.Add(new Vector3(-889.1459f, 201.5653f, 69.83292f));
                    LocalMish03.PackDrops.Add(new Vector3(-794.7856f, 176.6714f, 72.83533f));
                    LocalMish03.PackDrops.Add(new Vector3(-819.6236f, 108.1988f, 56.65382f));
                    LocalMish03.PackDrops.Add(new Vector3(-896.2682f, 50.55714f, 50.03809f));
                    LocalMish03.PackDrops.Add(new Vector3(-929.5912f, 32.33089f, 49.22243f));
                    LocalMish03.PackDrops.Add(new Vector3(-895.6555f, -23.75793f, 41.92866f));
                    LocalMish03.PackDrops.Add(new Vector3(-856.2868f, -33.26972f, 44.154f));

                    PbLocal.Add(Packages_KitBuild(LocalMish03, new Vector3(61.74551f, 99.28784f, 78.44849f), new Vector3(68.3553f, 120.66f, 79.04f), 159.0f, "Boxville2", "prop_cs_cardbox_01", 1));
                    PackBuild LocalMish04 = new PackBuild();

                    LocalMish04.PackDrops.Add(new Vector3(-876.4699f, 486.163f, 87.81596f));// vinwood hills
                    LocalMish04.PackDrops.Add(new Vector3(-814.6655f, 465.4533f, 90.76906f));
                    LocalMish04.PackDrops.Add(new Vector3(-831.5496f, 512.7079f, 94.61716f));
                    LocalMish04.PackDrops.Add(new Vector3(-900.957f, 507.1272f, 92.22887f));
                    LocalMish04.PackDrops.Add(new Vector3(-859.8825f, 549.3598f, 97.02918f));
                    LocalMish04.PackDrops.Add(new Vector3(-903.6682f, 549.173f, 97.32504f));
                    LocalMish04.PackDrops.Add(new Vector3(-898.3152f, 598.1339f, 104.9367f));
                    LocalMish04.PackDrops.Add(new Vector3(-924.5178f, 562.5059f, 99.80518f));
                    LocalMish04.PackDrops.Add(new Vector3(-951.625f, 613.6896f, 109.6659f));
                    LocalMish04.PackDrops.Add(new Vector3(-947.6028f, 568.3109f, 101.4761f));
                    LocalMish04.PackDrops.Add(new Vector3(-973.9167f, 583.9152f, 101.9155f));
                    LocalMish04.PackDrops.Add(new Vector3(-1107.415f, 593.4894f, 104.4546f));
                    LocalMish04.PackDrops.Add(new Vector3(-1031.149f, 564.9263f, 100.5148f));
                    LocalMish04.PackDrops.Add(new Vector3(-1068.457f, 562.9708f, 102.7286f));
                    LocalMish04.PackDrops.Add(new Vector3(-1126.343f, 552.0135f, 102.2961f));
                    LocalMish04.PackDrops.Add(new Vector3(-1146.912f, 547.5715f, 101.4294f));
                    LocalMish04.PackDrops.Add(new Vector3(-1164.63f, 589.8889f, 101.8328f));
                    LocalMish04.PackDrops.Add(new Vector3(-1200.821f, 582.1893f, 100.1303f));
                    LocalMish04.PackDrops.Add(new Vector3(-1197.679f, 533.1424f, 96.21648f));
                    LocalMish04.PackDrops.Add(new Vector3(-1290.315f, 501.1377f, 97.55988f));
                    LocalMish04.PackDrops.Add(new Vector3(-932.3692f, 472.0573f, 85.11881f));
                    LocalMish04.PackDrops.Add(new Vector3(-983.5774f, 442.0766f, 79.97154f));
                    LocalMish04.PackDrops.Add(new Vector3(-970.5432f, 534.5553f, 81.67139f));
                    LocalMish04.PackDrops.Add(new Vector3(-1012.013f, 527.2021f, 79.61324f));
                    LocalMish04.PackDrops.Add(new Vector3(-984.8823f, 475.62f, 82.26645f));
                    LocalMish04.PackDrops.Add(new Vector3(-1013.231f, 457.128f, 79.36449f));
                    LocalMish04.PackDrops.Add(new Vector3(-1060.118f, 515.8932f, 84.381f));
                    LocalMish04.PackDrops.Add(new Vector3(-1067.292f, 482.6874f, 85.3016f));
                    LocalMish04.PackDrops.Add(new Vector3(-1036.205f, 443.2584f, 72.86395f));
                    LocalMish04.PackDrops.Add(new Vector3(-1105.836f, 429.959f, 75.6862f));
                    LocalMish04.PackDrops.Add(new Vector3(-1118.202f, 505.9364f, 82.24579f));
                    LocalMish04.PackDrops.Add(new Vector3(-1161.977f, 501.0114f, 86.0938f));
                    LocalMish04.PackDrops.Add(new Vector3(-1160.795f, 434.7254f, 86.63664f));
                    LocalMish04.PackDrops.Add(new Vector3(-1215.607f, 458.8355f, 91.85357f));
                    LocalMish04.PackDrops.Add(new Vector3(-1257.983f, 447.0746f, 94.73567f));
                    LocalMish04.PackDrops.Add(new Vector3(-1294.518f, 455.4332f, 97.35609f));
                    LocalMish04.PackDrops.Add(new Vector3(-1308.411f, 453.3697f, 99.70641f));
                    LocalMish04.PackDrops.Add(new Vector3(-1332.115f, 491.9036f, 102.4476f));
                    LocalMish04.PackDrops.Add(new Vector3(-1346.35f, 441.8075f, 100.9924f));
                    LocalMish04.PackDrops.Add(new Vector3(-1409.876f, 445.3276f, 112.22f));
                    LocalMish04.PackDrops.Add(new Vector3(-1392.663f, 517.6506f, 123.292f));
                    LocalMish04.PackDrops.Add(new Vector3(-1452.043f, 545.3224f, 120.7994f));
                    LocalMish04.PackDrops.Add(new Vector3(-1458.978f, 500.1378f, 117.5965f));
                    LocalMish04.PackDrops.Add(new Vector3(-1493.765f, 541.6144f, 118.2722f));
                    LocalMish04.PackDrops.Add(new Vector3(-1493.509f, 421.1047f, 111.2437f));
                    LocalMish04.PackDrops.Add(new Vector3(-1542.629f, 408.7433f, 109.6781f));
                    LocalMish04.PackDrops.Add(new Vector3(-1067.901f, 821.439f, 166.8808f));
                    LocalMish04.PackDrops.Add(new Vector3(-1097.104f, 824.2603f, 168.6352f));
                    LocalMish04.PackDrops.Add(new Vector3(-1145.602f, 799.0558f, 167.4061f));
                    LocalMish04.PackDrops.Add(new Vector3(-1107.727f, 738.1865f, 159.9176f));
                    LocalMish04.PackDrops.Add(new Vector3(-1144.178f, 718.804f, 155.4649f));
                    LocalMish04.PackDrops.Add(new Vector3(-1197.619f, 694.1948f, 147.4094f));
                    LocalMish04.PackDrops.Add(new Vector3(-1219.122f, 665.3551f, 144.5338f));
                    LocalMish04.PackDrops.Add(new Vector3(-1223.961f, 636.0889f, 142.7451f));
                    LocalMish04.PackDrops.Add(new Vector3(-1262.987f, 692.0536f, 150.6537f));
                    LocalMish04.PackDrops.Add(new Vector3(-1282.651f, 663.9969f, 144.8519f));
                    LocalMish04.PackDrops.Add(new Vector3(-1270.896f, 629.1021f, 143.23f));
                    LocalMish04.PackDrops.Add(new Vector3(-1331.552f, 588.2698f, 134.37f));
                    LocalMish04.PackDrops.Add(new Vector3(-1384.961f, 606.8231f, 133.8726f));
                    LocalMish04.PackDrops.Add(new Vector3(-1372.576f, 585.5729f, 131.4471f));
                    LocalMish04.PackDrops.Add(new Vector3(-1356.573f, 537.3622f, 124.6708f));
                    LocalMish04.PackDrops.Add(new Vector3(-1400.062f, 577.7793f, 127.0419f));
                    LocalMish04.PackDrops.Add(new Vector3(-599.9012f, 481.0077f, 109.0135f));
                    LocalMish04.PackDrops.Add(new Vector3(-585.5557f, 541.2571f, 109.6203f));
                    LocalMish04.PackDrops.Add(new Vector3(-615.4255f, 475.7243f, 108.8786f));
                    LocalMish04.PackDrops.Add(new Vector3(-640.5946f, 519.4641f, 109.6877f));
                    LocalMish04.PackDrops.Add(new Vector3(-657.5634f, 462.1192f, 110.3896f));
                    LocalMish04.PackDrops.Add(new Vector3(-679.0991f, 511.4417f, 113.526f));
                    LocalMish04.PackDrops.Add(new Vector3(-741.4827f, 507.2439f, 110.1819f));
                    LocalMish04.PackDrops.Add(new Vector3(-709.9409f, 439.7062f, 106.8985f));
                    LocalMish04.PackDrops.Add(new Vector3(-747.0872f, 409.5476f, 96.0173f));
                    LocalMish04.PackDrops.Add(new Vector3(-775.8024f, 476.9246f, 100.1721f));
                    LocalMish04.PackDrops.Add(new Vector3(-833.1953f, 404.6588f, 91.55969f));
                    LocalMish04.PackDrops.Add(new Vector3(-1070.472f, 749.7695f, 168.0472f));
                    LocalMish04.PackDrops.Add(new Vector3(-1059.009f, 712.2664f, 165.5936f));
                    LocalMish04.PackDrops.Add(new Vector3(-1020.068f, 718.5629f, 163.9963f));
                    LocalMish04.PackDrops.Add(new Vector3(-974.3307f, 685.3311f, 158.0342f));
                    LocalMish04.PackDrops.Add(new Vector3(-951.1431f, 683.4838f, 153.578f));
                    LocalMish04.PackDrops.Add(new Vector3(-908.5171f, 694.7616f, 151.4326f));
                    LocalMish04.PackDrops.Add(new Vector3(-886.0207f, 699.3416f, 151.2711f));
                    LocalMish04.PackDrops.Add(new Vector3(-853.3905f, 696.6192f, 148.7828f));
                    LocalMish04.PackDrops.Add(new Vector3(-809.6923f, 674.0168f, 147.2904f));
                    LocalMish04.PackDrops.Add(new Vector3(-763.8483f, 651.5327f, 145.5013f));
                    LocalMish04.PackDrops.Add(new Vector3(-751.5979f, 621.2493f, 142.2435f));
                    LocalMish04.PackDrops.Add(new Vector3(-745.7672f, 589.5885f, 142.6156f));
                    LocalMish04.PackDrops.Add(new Vector3(-703.7216f, 590.2789f, 142.0164f));
                    LocalMish04.PackDrops.Add(new Vector3(-687.9229f, 597.8907f, 143.642f));
                    LocalMish04.PackDrops.Add(new Vector3(-643.7551f, 632.6365f, 149.619f));
                    LocalMish04.PackDrops.Add(new Vector3(-704.4034f, 627.3926f, 155.1603f));
                    LocalMish04.PackDrops.Add(new Vector3(-568.2637f, 665.2595f, 145.4776f));
                    LocalMish04.PackDrops.Add(new Vector3(-544.3185f, 694.801f, 146.0745f));
                    LocalMish04.PackDrops.Add(new Vector3(-621.2768f, 637.5131f, 151.041f));
                    LocalMish04.PackDrops.Add(new Vector3(-707.6903f, 712.0728f, 162.0412f));
                    LocalMish04.PackDrops.Add(new Vector3(-663.5795f, 742.3569f, 174.2841f));
                    LocalMish04.PackDrops.Add(new Vector3(-601.3591f, 711.8802f, 180.0073f));
                    LocalMish04.PackDrops.Add(new Vector3(-608.6313f, 771.2157f, 188.5102f));
                    LocalMish04.PackDrops.Add(new Vector3(-554.4477f, 754.2482f, 185.425f));
                    LocalMish04.PackDrops.Add(new Vector3(-577.0934f, 812.272f, 191.2517f));
                    LocalMish04.PackDrops.Add(new Vector3(-658.4011f, 784.6013f, 196.5904f));
                    LocalMish04.PackDrops.Add(new Vector3(-781.4969f, 792.8298f, 214.57f));
                    LocalMish04.PackDrops.Add(new Vector3(-818.0649f, 795.6208f, 202.5863f));
                    LocalMish04.PackDrops.Add(new Vector3(-859.8956f, 766.4213f, 191.8201f));
                    LocalMish04.PackDrops.Add(new Vector3(-906.9011f, 752.5503f, 182.1613f));
                    LocalMish04.PackDrops.Add(new Vector3(-931.3448f, 827.0118f, 184.3368f));
                    LocalMish04.PackDrops.Add(new Vector3(-956.7988f, 846.5051f, 177.4667f));
                    LocalMish04.PackDrops.Add(new Vector3(-953.8853f, 736.2907f, 175.5582f));
                    LocalMish04.PackDrops.Add(new Vector3(-1011.727f, 773.0004f, 171.3789f));
                    LocalMish04.PackDrops.Add(new Vector3(-1019.988f, 829.1194f, 172.3859f));

                    PbLocal.Add(Packages_KitBuild(LocalMish04, new Vector3(61.74551f, 99.28784f, 78.44849f), new Vector3(68.3553f, 120.66f, 79.04f), 159.0f, "Boxville2", "prop_cs_cardbox_01", 1));

                    iAddExtras = 2;
                }
                else if (iLocationX == 3)
                {
                    PackBuild LocalMish01 = new PackBuild();

                    LocalMish01.PackDrops.Add(new Vector3(-3225.671f, 911.6782f, 13.99328f));
                    LocalMish01.PackDrops.Add(new Vector3(-3238.209f, 922.1356f, 13.95989f));
                    LocalMish01.PackDrops.Add(new Vector3(-3242.884f, 931.8699f, 17.22135f));
                    LocalMish01.PackDrops.Add(new Vector3(-3237.128f, 952.9849f, 13.14549f));
                    LocalMish01.PackDrops.Add(new Vector3(-3251.259f, 1027.374f, 11.75769f));
                    LocalMish01.PackDrops.Add(new Vector3(-3254.493f, 1063.829f, 11.1462f));
                    LocalMish01.PackDrops.Add(new Vector3(-3252.789f, 1077.478f, 11.03329f));
                    LocalMish01.PackDrops.Add(new Vector3(-3228.171f, 1092.434f, 10.75639f));
                    LocalMish01.PackDrops.Add(new Vector3(-3233.788f, 1110.743f, 10.57354f));
                    LocalMish01.PackDrops.Add(new Vector3(-3220.034f, 1137.555f, 9.895407f));
                    LocalMish01.PackDrops.Add(new Vector3(-3214.605f, 1149.277f, 9.895408f));
                    LocalMish01.PackDrops.Add(new Vector3(-3205.43f, 1151.904f, 9.662267f));
                    LocalMish01.PackDrops.Add(new Vector3(-3199.772f, 1165.077f, 9.654344f));
                    LocalMish01.PackDrops.Add(new Vector3(-3205.8f, 1186.661f, 9.664678f));
                    LocalMish01.PackDrops.Add(new Vector3(-3203.429f, 1206.695f, 12.82314f));
                    LocalMish01.PackDrops.Add(new Vector3(-3193.675f, 1230.114f, 10.04832f));
                    LocalMish01.PackDrops.Add(new Vector3(-3197.585f, 1274.163f, 12.66765f));
                    LocalMish01.PackDrops.Add(new Vector3(-3181.797f, 1310.762f, 14.55494f));

                    PbLocal.Add(Packages_KitBuild(LocalMish01, new Vector3(-3131.44f, 1111.76f, 20.12679f), new Vector3(-3139.27f, 1098.87f, 20.63f), 81.7f, "Rumpo2", "prop_paper_bag_01", 0));
                    PackBuild LocalMish02 = new PackBuild();

                    LocalMish02.PackDrops.Add(new Vector3(-3109.391f, 751.4032f, 24.70188f));
                    LocalMish02.PackDrops.Add(new Vector3(-3106.902f, 719.2998f, 20.61939f));
                    LocalMish02.PackDrops.Add(new Vector3(-3087.058f, 656.056f, 11.5886f));
                    LocalMish02.PackDrops.Add(new Vector3(-3051.573f, 569.4459f, 7.823583f));
                    LocalMish02.PackDrops.Add(new Vector3(-3044.509f, 564.0283f, 7.818895f));
                    LocalMish02.PackDrops.Add(new Vector3(-3036.565f, 558.9866f, 7.507683f));
                    LocalMish02.PackDrops.Add(new Vector3(-3036.482f, 544.608f, 7.507683f));
                    LocalMish02.PackDrops.Add(new Vector3(-3041.9f, 523.9325f, 7.426294f));
                    LocalMish02.PackDrops.Add(new Vector3(-3038.055f, 492.2998f, 6.767862f));
                    LocalMish02.PackDrops.Add(new Vector3(-3053.02f, 487.0674f, 6.779647f));
                    LocalMish02.PackDrops.Add(new Vector3(-3049.986f, 474.4078f, 6.779647f));
                    LocalMish02.PackDrops.Add(new Vector3(-3069.546f, 454.4254f, 9.643095f));
                    LocalMish02.PackDrops.Add(new Vector3(-3073.3f, 452.9189f, 6.357774f));
                    LocalMish02.PackDrops.Add(new Vector3(-3080.653f, 406.0587f, 6.968522f));
                    LocalMish02.PackDrops.Add(new Vector3(-3090.885f, 379.1903f, 7.112432f));
                    LocalMish02.PackDrops.Add(new Vector3(-3102.068f, 367.1784f, 7.119124f));
                    LocalMish02.PackDrops.Add(new Vector3(-3100.813f, 361.2336f, 7.59102f));
                    LocalMish02.PackDrops.Add(new Vector3(-3110.472f, 335.3844f, 7.493347f));
                    LocalMish02.PackDrops.Add(new Vector3(-3111.59f, 315.6106f, 8.38104f));
                    LocalMish02.PackDrops.Add(new Vector3(-3115.084f, 303.729f, 8.38104f));
                    LocalMish02.PackDrops.Add(new Vector3(-3115.483f, 294.5401f, 8.972106f));
                    LocalMish02.PackDrops.Add(new Vector3(-3131.787f, 247.3237f, 12.492f));
                    LocalMish02.PackDrops.Add(new Vector3(-3099.842f, 211.6886f, 14.0702f));
                    LocalMish02.PackDrops.Add(new Vector3(-2973.217f, 600.1259f, 24.24677f));
                    LocalMish02.PackDrops.Add(new Vector3(-2973.584f, 642.0483f, 25.79752f));
                    LocalMish02.PackDrops.Add(new Vector3(-2995.112f, 682.2404f, 25.04422f));
                    LocalMish02.PackDrops.Add(new Vector3(-2986.079f, 719.8495f, 28.49687f));
                    LocalMish02.PackDrops.Add(new Vector3(-3018.052f, 746.3233f, 27.58763f));

                    PbLocal.Add(Packages_KitBuild(LocalMish02, new Vector3(-3131.44f, 1111.76f, 20.12679f), new Vector3(-3139.27f, 1098.87f, 20.63f), 81.7f, "Rumpo2", "prop_paper_bag_01", 0));
                    PackBuild LocalMish03 = new PackBuild();

                    LocalMish03.PackDrops.Add(new Vector3(-1754.303f, -708.6591f, 10.39663f));
                    LocalMish03.PackDrops.Add(new Vector3(-1764.108f, -708.2756f, 10.6142f));
                    LocalMish03.PackDrops.Add(new Vector3(-1764.566f, -708.1951f, 14.04145f));
                    LocalMish03.PackDrops.Add(new Vector3(-1764.033f, -708.2069f, 17.64467f));
                    LocalMish03.PackDrops.Add(new Vector3(-1777.351f, -702.067f, 10.4848f));
                    LocalMish03.PackDrops.Add(new Vector3(-1776.769f, -691.2233f, 16.97348f));
                    LocalMish03.PackDrops.Add(new Vector3(-1780.731f, -680.2358f, 10.44997f));
                    LocalMish03.PackDrops.Add(new Vector3(-1793.184f, -673.2136f, 10.57397f));
                    LocalMish03.PackDrops.Add(new Vector3(-1803.759f, -662.3365f, 10.7237f));
                    LocalMish03.PackDrops.Add(new Vector3(-1817.498f, -657.4927f, 13.81193f));
                    LocalMish03.PackDrops.Add(new Vector3(-1827.267f, -652.1654f, 18.04963f));
                    LocalMish03.PackDrops.Add(new Vector3(-1834.165f, -641.7821f, 11.47759f));
                    LocalMish03.PackDrops.Add(new Vector3(-1836.708f, -631.6794f, 10.74891f));
                    LocalMish03.PackDrops.Add(new Vector3(-1838.648f, -629.8493f, 11.0014f));
                    LocalMish03.PackDrops.Add(new Vector3(-1879.679f, -606.2506f, 18.92933f));
                    LocalMish03.PackDrops.Add(new Vector3(-1885.089f, -600.3168f, 11.89937f));
                    LocalMish03.PackDrops.Add(new Vector3(-1885.209f, -600.2053f, 15.5457f));
                    LocalMish03.PackDrops.Add(new Vector3(-1884.697f, -600.3395f, 19.14856f));
                    LocalMish03.PackDrops.Add(new Vector3(-1890.028f, -592.5482f, 18.331f));
                    LocalMish03.PackDrops.Add(new Vector3(-1901.561f, -586.2667f, 11.8717f));
                    LocalMish03.PackDrops.Add(new Vector3(-1901.737f, -586.5366f, 15.50729f));
                    LocalMish03.PackDrops.Add(new Vector3(-1901.345f, -586.4103f, 18.8586f));
                    LocalMish03.PackDrops.Add(new Vector3(-1913.928f, -574.6428f, 11.43515f));
                    LocalMish03.PackDrops.Add(new Vector3(-1920.347f, -570.4515f, 11.91194f));
                    LocalMish03.PackDrops.Add(new Vector3(-1920.237f, -570.4377f, 14.7448f));
                    LocalMish03.PackDrops.Add(new Vector3(-1915.89f, -565.7648f, 17.67347f));
                    LocalMish03.PackDrops.Add(new Vector3(-1915.907f, -565.6242f, 20.47274f));
                    LocalMish03.PackDrops.Add(new Vector3(-1923.306f, -559.0013f, 12.06105f));
                    LocalMish03.PackDrops.Add(new Vector3(-1927.94f, -551.8524f, 11.84189f));
                    LocalMish03.PackDrops.Add(new Vector3(-1946.505f, -548.1843f, 14.72549f));
                    LocalMish03.PackDrops.Add(new Vector3(-1950.271f, -545.1097f, 14.72549f));
                    LocalMish03.PackDrops.Add(new Vector3(-1958.221f, -538.7208f, 11.89937f));
                    LocalMish03.PackDrops.Add(new Vector3(-1958.538f, -538.6161f, 15.55085f));
                    LocalMish03.PackDrops.Add(new Vector3(-1957.957f, -538.9095f, 19.15357f));
                    LocalMish03.PackDrops.Add(new Vector3(-1968.042f, -532.4321f, 12.17067f));
                    LocalMish03.PackDrops.Add(new Vector3(-1976.333f, -525.4742f, 18.92434f));
                    LocalMish03.PackDrops.Add(new Vector3(-1980.079f, -520.5913f, 11.894f));
                    LocalMish03.PackDrops.Add(new Vector3(-1980.366f, -520.8674f, 14.7404f));
                    LocalMish03.PackDrops.Add(new Vector3(-1976.356f, -516.4469f, 17.67827f));
                    LocalMish03.PackDrops.Add(new Vector3(-1976.218f, -516.0389f, 20.4677f));

                    PbLocal.Add(Packages_KitBuild(LocalMish03, new Vector3(-3131.44f, 1111.76f, 20.12679f), new Vector3(-3139.27f, 1098.87f, 20.63f), 81.7f, "Rumpo2", "prop_paper_bag_01", 0));
                    PackBuild LocalMish04 = new PackBuild();

                    LocalMish04.PackDrops.Add(new Vector3(-1909.111f, 129.635f, 82.45064f));
                    LocalMish04.PackDrops.Add(new Vector3(-1859.039f, 207.8242f, 84.29408f));
                    LocalMish04.PackDrops.Add(new Vector3(-1959.546f, 212.3604f, 86.51141f));
                    LocalMish04.PackDrops.Add(new Vector3(-1893.244f, 251.7575f, 86.25306f));
                    LocalMish04.PackDrops.Add(new Vector3(-1981.675f, 244.1014f, 87.61314f));
                    LocalMish04.PackDrops.Add(new Vector3(-1908.839f, 292.472f, 88.60768f));
                    LocalMish04.PackDrops.Add(new Vector3(-1861.554f, 310.2534f, 89.11358f));
                    LocalMish04.PackDrops.Add(new Vector3(-1769.747f, 346.0624f, 93.37177f));
                    LocalMish04.PackDrops.Add(new Vector3(-1742.369f, 364.5176f, 88.72827f));
                    LocalMish04.PackDrops.Add(new Vector3(-1673.764f, 371.5128f, 85.11893f));
                    LocalMish04.PackDrops.Add(new Vector3(-2009.15f, 316.877f, 91.56063f));
                    LocalMish04.PackDrops.Add(new Vector3(-1919.008f, 356.4274f, 93.78138f));
                    LocalMish04.PackDrops.Add(new Vector3(-1931.474f, 398.6515f, 96.50707f));
                    LocalMish04.PackDrops.Add(new Vector3(-2021.623f, 369.8535f, 94.57845f));
                    LocalMish04.PackDrops.Add(new Vector3(-1932.137f, 452.8219f, 102.7027f));
                    LocalMish04.PackDrops.Add(new Vector3(-2027.374f, 449.6474f, 105.6779f));
                    LocalMish04.PackDrops.Add(new Vector3(-2037.174f, 495.6615f, 107.012f));
                    LocalMish04.PackDrops.Add(new Vector3(-1923.487f, 543.7314f, 114.82f));
                    LocalMish04.PackDrops.Add(new Vector3(-2004.955f, 602.0804f, 117.9033f));
                    LocalMish04.PackDrops.Add(new Vector3(-1929.894f, 595.8158f, 122.2849f));
                    LocalMish04.PackDrops.Add(new Vector3(-1994.404f, 639.9923f, 122.5362f));
                    LocalMish04.PackDrops.Add(new Vector3(-1878.629f, 651.9398f, 130.00f));

                    PbLocal.Add(Packages_KitBuild(LocalMish04, new Vector3(-3131.44f, 1111.76f, 20.12679f), new Vector3(-3139.27f, 1098.87f, 20.63f), 81.7f, "Rumpo2", "prop_paper_bag_01", 0));
                }
                else if (iLocationX == 4)
                {
                    PackBuild LocalMish = new PackBuild();

                    LocalMish.PackDrops.Add(new Vector3(1207.021f, -673.2103f, 61.11215f));
                    LocalMish.PackDrops.Add(new Vector3(1213.941f, -701.9628f, 60.30816f));
                    LocalMish.PackDrops.Add(new Vector3(1215.253f, -729.3919f, 58.94733f));
                    LocalMish.PackDrops.Add(new Vector3(995.0197f, -739.0646f, 57.44802f));
                    LocalMish.PackDrops.Add(new Vector3(988.8434f, -710.9371f, 58.0252f));
                    LocalMish.PackDrops.Add(new Vector3(962.9817f, -696.3831f, 58.0994f));
                    LocalMish.PackDrops.Add(new Vector3(957.2084f, -665.1748f, 58.01148f));
                    LocalMish.PackDrops.Add(new Vector3(1002.87f, -591.4628f, 59.20106f));
                    LocalMish.PackDrops.Add(new Vector3(1018.085f, -566.4f, 59.66459f));
                    LocalMish.PackDrops.Add(new Vector3(1004.908f, -526.3587f, 60.40078f));
                    LocalMish.PackDrops.Add(new Vector3(983.4021f, -540.3289f, 59.63057f));
                    LocalMish.PackDrops.Add(new Vector3(964.0696f, -554.757f, 59.00647f));
                    LocalMish.PackDrops.Add(new Vector3(969.8193f, -576.8511f, 58.87088f));
                    LocalMish.PackDrops.Add(new Vector3(962.0546f, -606.3818f, 59.49267f));
                    LocalMish.PackDrops.Add(new Vector3(926.4136f, -570.8307f, 57.92761f));
                    LocalMish.PackDrops.Add(new Vector3(892.5603f, -595.6162f, 57.554f));
                    LocalMish.PackDrops.Add(new Vector3(868.2073f, -578.7185f, 57.647f));
                    LocalMish.PackDrops.Add(new Vector3(857.3127f, -560.0723f, 57.47778f));
                    LocalMish.PackDrops.Add(new Vector3(883.0701f, -550.0735f, 57.53517f));
                    LocalMish.PackDrops.Add(new Vector3(879.7803f, -506.7889f, 57.45839f));
                    LocalMish.PackDrops.Add(new Vector3(918.1938f, -519.1744f, 58.69641f));
                    LocalMish.PackDrops.Add(new Vector3(930.3493f, -485.4208f, 60.08249f));
                    LocalMish.PackDrops.Add(new Vector3(963.7202f, -496.1301f, 61.53802f));
                    LocalMish.PackDrops.Add(new Vector3(965.8538f, -463.4195f, 62.22671f));
                    LocalMish.PackDrops.Add(new Vector3(1014.155f, -460.7629f, 64.06299f));
                    LocalMish.PackDrops.Add(new Vector3(996.7019f, -441.6269f, 63.93599f));
                    LocalMish.PackDrops.Add(new Vector3(1066.67f, -450.9628f, 65.49625f));
                    LocalMish.PackDrops.Add(new Vector3(1061.671f, -477.5435f, 64.04195f));
                    LocalMish.PackDrops.Add(new Vector3(1056.921f, -502.142f, 62.67876f));
                    LocalMish.PackDrops.Add(new Vector3(1082.299f, -489.9038f, 63.51603f));
                    LocalMish.PackDrops.Add(new Vector3(1098.596f, -474.7681f, 66.93564f));
                    LocalMish.PackDrops.Add(new Vector3(1097.893f, -426.1955f, 67.28503f));
                    LocalMish.PackDrops.Add(new Vector3(942.2897f, -255.0595f, 67.49841f));
                    LocalMish.PackDrops.Add(new Vector3(932.2645f, -252.0051f, 68.14607f));
                    LocalMish.PackDrops.Add(new Vector3(927.1663f, -228.3628f, 70.33281f));
                    LocalMish.PackDrops.Add(new Vector3(878.4464f, -210.3623f, 70.78152f));
                    LocalMish.PackDrops.Add(new Vector3(853.2083f, -192.314f, 72.63569f));
                    LocalMish.PackDrops.Add(new Vector3(813.6287f, -168.7192f, 73.92041f));
                    LocalMish.PackDrops.Add(new Vector3(799.2471f, -161.8204f, 73.72651f));
                    LocalMish.PackDrops.Add(new Vector3(787.4902f, -143.8369f, 74.82004f));
                    LocalMish.PackDrops.Add(new Vector3(789.5784f, -121.7295f, 75.86514f));
                    LocalMish.PackDrops.Add(new Vector3(772.9427f, -133.7863f, 74.83371f));
                    LocalMish.PackDrops.Add(new Vector3(1268.203f, -422.6983f, 69.09253f));
                    LocalMish.PackDrops.Add(new Vector3(1267.012f, -447.5618f, 69.81529f));
                    LocalMish.PackDrops.Add(new Vector3(1269.74f, -483.0303f, 69.09258f));
                    LocalMish.PackDrops.Add(new Vector3(1263.176f, -500.3384f, 69.10938f));
                    LocalMish.PackDrops.Add(new Vector3(1255.999f, -525.82f, 69.04993f));
                    LocalMish.PackDrops.Add(new Vector3(1364.71f, -559.247f, 74.50141f));
                    LocalMish.PackDrops.Add(new Vector3(1379.771f, -592.6221f, 74.51224f));
                    LocalMish.PackDrops.Add(new Vector3(1350.297f, -590.8824f, 74.4875f));
                    LocalMish.PackDrops.Add(new Vector3(1324.882f, -572.6253f, 73.32757f));
                    LocalMish.PackDrops.Add(new Vector3(1251.123f, -570.0441f, 69.21765f));
                    LocalMish.PackDrops.Add(new Vector3(1254.815f, -596.3622f, 69.01241f));
                    LocalMish.PackDrops.Add(new Vector3(1261.984f, -613.939f, 68.88661f));
                    LocalMish.PackDrops.Add(new Vector3(1260.629f, -643.8718f, 67.85249f));
                    LocalMish.PackDrops.Add(new Vector3(1282.915f, -678.0354f, 65.91342f));
                    LocalMish.PackDrops.Add(new Vector3(1262.216f, -717.5988f, 64.4155f));
                    LocalMish.PackDrops.Add(new Vector3(1191.326f, -549.5949f, 64.66839f));
                    LocalMish.PackDrops.Add(new Vector3(1190.161f, -585.5353f, 64.16667f));
                    LocalMish.PackDrops.Add(new Vector3(1191.312f, -600.8296f, 63.97587f));
                    LocalMish.PackDrops.Add(new Vector3(1196.803f, -625.5676f, 63.02939f));

                    PbLocal.Add(Packages_KitBuild(LocalMish, new Vector3(954.853f, -146.4427f, 73.91478f), new Vector3(985.1311f, -138.0587f, 71.72433f), 58.15194f, "SlamVan2", "ng_proc_binbag_01a", 0));
                }
                else if (iLocationX == 5)
                {
                    PackBuild LocalMish01 = new PackBuild();

                    LocalMish01.PackDrops.Add(new Vector3(3294.645f, 5188.46f, 18.41536f));
                    LocalMish01.PackDrops.Add(new Vector3(2234.094f, 5608.012f, 54.64093f));
                    LocalMish01.PackDrops.Add(new Vector3(2256.062f, 5158.674f, 57.96902f));
                    LocalMish01.PackDrops.Add(new Vector3(1697.929f, 4874.469f, 42.03117f));
                    LocalMish01.PackDrops.Add(new Vector3(1648.552f, 4781.981f, 42.11193f));
                    LocalMish01.PackDrops.Add(new Vector3(1717.678f, 4679.414f, 43.65579f));
                    LocalMish01.PackDrops.Add(new Vector3(1667.145f, 4680.101f, 43.05535f));
                    LocalMish01.PackDrops.Add(new Vector3(1677.29f, 4653.63f, 43.37117f));
                    LocalMish01.PackDrops.Add(new Vector3(1364.512f, 4359.951f, 44.4988f));
                    LocalMish01.PackDrops.Add(new Vector3(740.5996f, 4170.04f, 41.0878f));

                    PbLocal.Add(Packages_KitBuild(LocalMish01, new Vector3(1977.48f, 4653.158f, 40.45607f), new Vector3(1929.128f, 4645.529f, 39.35381f), 74.04933f, "Scrap", "prop_paper_bag_01", 5));
                    PackBuild LocalMish02 = new PackBuild();

                    LocalMish02.PackDrops.Add(new Vector3(1366.07f, 3648.678f, 33.78039f));
                    LocalMish02.PackDrops.Add(new Vector3(1441.558f, 3630.086f, 34.97598f));
                    LocalMish02.PackDrops.Add(new Vector3(1424.652f, 3665.129f, 39.72842f));
                    LocalMish02.PackDrops.Add(new Vector3(1503.234f, 3699.392f, 39.05916f));
                    LocalMish02.PackDrops.Add(new Vector3(1641.75f, 3729.399f, 35.06714f));
                    LocalMish02.PackDrops.Add(new Vector3(1648.607f, 3810.293f, 38.65067f));
                    LocalMish02.PackDrops.Add(new Vector3(1669.977f, 3743.251f, 34.86417f));
                    LocalMish02.PackDrops.Add(new Vector3(1745.342f, 3700.265f, 34.34354f));
                    LocalMish02.PackDrops.Add(new Vector3(1779.095f, 3642.883f, 34.47246f));
                    LocalMish02.PackDrops.Add(new Vector3(1782.287f, 3745.965f, 34.65663f));
                    LocalMish02.PackDrops.Add(new Vector3(1746.644f, 3785.375f, 34.83487f));
                    LocalMish02.PackDrops.Add(new Vector3(1778.128f, 3802.267f, 38.36934f));
                    LocalMish02.PackDrops.Add(new Vector3(1811.733f, 3853.763f, 34.53526f));
                    LocalMish02.PackDrops.Add(new Vector3(1719.855f, 3851.263f, 34.79908f));
                    LocalMish02.PackDrops.Add(new Vector3(1712.258f, 3844.736f, 35.09302f));
                    LocalMish02.PackDrops.Add(new Vector3(1737.591f, 3899.409f, 35.559f));
                    LocalMish02.PackDrops.Add(new Vector3(1781.677f, 3907.481f, 39.80395f));
                    LocalMish02.PackDrops.Add(new Vector3(1815.851f, 3907.366f, 37.2175f));
                    LocalMish02.PackDrops.Add(new Vector3(1885.031f, 3911.95f, 33.09767f));
                    LocalMish02.PackDrops.Add(new Vector3(1920.32f, 3890.656f, 32.65907f));
                    LocalMish02.PackDrops.Add(new Vector3(1903.048f, 3876.147f, 32.4305f));
                    LocalMish02.PackDrops.Add(new Vector3(1859.193f, 3852.417f, 33.03402f));
                    LocalMish02.PackDrops.Add(new Vector3(1871.298f, 3806.77f, 32.64043f));
                    LocalMish02.PackDrops.Add(new Vector3(1894.649f, 3785.76f, 32.77509f));
                    LocalMish02.PackDrops.Add(new Vector3(1947.112f, 3803.384f, 32.03712f));
                    LocalMish02.PackDrops.Add(new Vector3(1915.621f, 3822.773f, 32.43993f));
                    LocalMish02.PackDrops.Add(new Vector3(1939.32f, 3851.287f, 32.16716f));
                    LocalMish02.PackDrops.Add(new Vector3(1975.69f, 3814.874f, 33.42525f));

                    PbLocal.Add(Packages_KitBuild(LocalMish02, new Vector3(1977.48f, 4653.158f, 40.45607f), new Vector3(1929.128f, 4645.529f, 39.35381f), 74.04933f, "Scrap", "prop_paper_bag_01", 5));
                    PackBuild LocalMish03 = new PackBuild();

                    LocalMish03.PackDrops.Add(new Vector3(2184.301f, 3503.538f, 45.41576f));
                    LocalMish03.PackDrops.Add(new Vector3(2190.204f, 3340.191f, 45.70337f));
                    LocalMish03.PackDrops.Add(new Vector3(2152.329f, 3390.411f, 45.40681f));
                    LocalMish03.PackDrops.Add(new Vector3(2168.019f, 3379.724f, 46.43439f));
                    LocalMish03.PackDrops.Add(new Vector3(2379.093f, 3350.109f, 47.95228f));
                    LocalMish03.PackDrops.Add(new Vector3(2484.173f, 3446.39f, 51.06676f));
                    LocalMish03.PackDrops.Add(new Vector3(2482.338f, 3722.635f, 43.92163f));
                    LocalMish03.PackDrops.Add(new Vector3(2412.371f, 4034.768f, 36.81679f));
                    LocalMish03.PackDrops.Add(new Vector3(2552.169f, 4281.502f, 41.61633f));
                    LocalMish03.PackDrops.Add(new Vector3(2637.038f, 4245.829f, 44.80367f));
                    LocalMish03.PackDrops.Add(new Vector3(2726.922f, 4143.099f, 44.28887f));
                    LocalMish03.PackDrops.Add(new Vector3(2734.81f, 4274.33f, 48.5205f));

                    PbLocal.Add(Packages_KitBuild(LocalMish03, new Vector3(1977.48f, 4653.158f, 40.45607f), new Vector3(1929.128f, 4645.529f, 39.35381f), 74.04933f, "Scrap", "prop_paper_bag_01", 5));
                    PackBuild LocalMish04 = new PackBuild();

                    LocalMish04.PackDrops.Add(new Vector3(1541.871f, 2239.158f, 77.69897f));
                    LocalMish04.PackDrops.Add(new Vector3(1379.956f, 2164.427f, 97.81518f));
                    LocalMish04.PackDrops.Add(new Vector3(768.7703f, 2177.563f, 52.37225f));
                    LocalMish04.PackDrops.Add(new Vector3(730.4855f, 2332.482f, 50.53867f));
                    LocalMish04.PackDrops.Add(new Vector3(-264.924f, 2206.832f, 130.0993f));
                    LocalMish04.PackDrops.Add(new Vector3(-33.62269f, 1943.332f, 190.1862f));
                    LocalMish04.PackDrops.Add(new Vector3(201.6048f, 2437.004f, 60.46714f));
                    LocalMish04.PackDrops.Add(new Vector3(380.8315f, 2574.337f, 43.51957f));
                    LocalMish04.PackDrops.Add(new Vector3(470.6082f, 2607.824f, 44.47719f));
                    LocalMish04.PackDrops.Add(new Vector3(498.1459f, 2605.617f, 43.69965f));
                    LocalMish04.PackDrops.Add(new Vector3(995.9922f, 2719.427f, 40.08806f));
                    LocalMish04.PackDrops.Add(new Vector3(982.1971f, 2669.811f, 40.06126f));
                    LocalMish04.PackDrops.Add(new Vector3(1582.44f, 2906.777f, 56.95695f));

                    PbLocal.Add(Packages_KitBuild(LocalMish04, new Vector3(1977.48f, 4653.158f, 40.45607f), new Vector3(1929.128f, 4645.529f, 39.35381f), 74.04933f, "Scrap", "prop_paper_bag_01", 5));

                    iAddExtras = 1;
                    BeOnOff[3] = true;
                }
                else if (iLocationX == 6)
                {
                    List<Vector3> RevMe = new List<Vector3>();

                    PackBuild LocalMish01 = new PackBuild();

                    RevMe.Add(new Vector3(35.34615f, 6662.261f, 32.1904f));
                    RevMe.Add(new Vector3(-8.791785f, 6652.338f, 31.11401f));
                    RevMe.Add(new Vector3(-40.96972f, 6637.074f, 31.08753f));
                    RevMe.Add(new Vector3(-130.0771f, 6551.079f, 29.52209f));
                    RevMe.Add(new Vector3(-230.2176f, 6444.808f, 31.19743f));
                    RevMe.Add(new Vector3(-247.7849f, 6412.838f, 31.19486f));
                    RevMe.Add(new Vector3(-271.8068f, 6399.928f, 31.34099f));
                    RevMe.Add(new Vector3(-368.535f, 6340.365f, 29.84361f));
                    RevMe.Add(new Vector3(-406.8186f, 6313.565f, 28.94281f));
                    RevMe.Add(new Vector3(-448.7317f, 6272.207f, 33.33007f));
                    RevMe.Add(new Vector3(-454.3108f, 6198.265f, 29.55284f));

                    LocalMish01.PackDrops = ListReverseVec3(RevMe);
                    RevMe.Clear();
                    PbLocal.Add(Packages_KitBuild(LocalMish01, new Vector3(-422.5247f, 6061.337f, 30.88972f), new Vector3(-410.65f, 6064.71f, 31.08f), 182.5f, "Cruiser", "prop_cliff_paper", 0));
                    PackBuild LocalMish02 = new PackBuild();

                    RevMe.Add(new Vector3(0.8270233f, 6613.946f, 31.87855f));
                    RevMe.Add(new Vector3(-27.163f, 6597.772f, 31.86064f));
                    RevMe.Add(new Vector3(-45.85287f, 6583.171f, 32.17552f));
                    RevMe.Add(new Vector3(-105.2644f, 6528.991f, 30.16692f));
                    RevMe.Add(new Vector3(-190.2481f, 6411.322f, 31.91249f));
                    RevMe.Add(new Vector3(-214.6027f, 6396.603f, 33.08506f));
                    RevMe.Add(new Vector3(-228.32f, 6378.578f, 31.759f));
                    RevMe.Add(new Vector3(-249.2476f, 6371.27f, 31.48093f));
                    RevMe.Add(new Vector3(-282.0695f, 6352.01f, 32.48915f));
                    RevMe.Add(new Vector3(-303.2068f, 6329.105f, 32.48937f));
                    RevMe.Add(new Vector3(-333.4198f, 6303.397f, 33.08813f));
                    RevMe.Add(new Vector3(-358.663f, 6261.862f, 31.48751f));
                    RevMe.Add(new Vector3(-379.498f, 6253.611f, 31.8508f));

                    LocalMish02.PackDrops = ListReverseVec3(RevMe);
                    RevMe.Clear();
                    PbLocal.Add(Packages_KitBuild(LocalMish02, new Vector3(-422.5247f, 6061.337f, 30.88972f), new Vector3(-410.65f, 6064.71f, 31.08f), 182.5f, "Cruiser", "prop_cliff_paper", 0));
                    PackBuild LocalMish03 = new PackBuild();

                    RevMe.Add(new Vector3(32.80961f, 6595.813f, 32.47044f));
                    RevMe.Add(new Vector3(13.30143f, 6577.16f, 32.73557f));
                    RevMe.Add(new Vector3(-14.45749f, 6558.055f, 33.24044f));
                    RevMe.Add(new Vector3(-163.1803f, 6390.546f, 31.47822f));
                    RevMe.Add(new Vector3(-346.0628f, 6222.56f, 31.48944f));
                    RevMe.Add(new Vector3(-355.9504f, 6206.227f, 31.4893f));
                    RevMe.Add(new Vector3(-373.7543f, 6190.161f, 31.72942f));

                    LocalMish03.PackDrops = ListReverseVec3(RevMe);
                    RevMe.Clear();
                    PbLocal.Add(Packages_KitBuild(LocalMish03, new Vector3(-422.5247f, 6061.337f, 30.88972f), new Vector3(-410.65f, 6064.71f, 31.08f), 182.5f, "Cruiser", "prop_cliff_paper", 0));
                    PackBuild LocalMish04 = new PackBuild();

                    RevMe.Add(new Vector3(-399.6143f, 6379.244f, 14.10481f));
                    RevMe.Add(new Vector3(-454.451f, 6337.76f, 12.78236f));
                    RevMe.Add(new Vector3(-482.027f, 6277.658f, 13.35727f));

                    LocalMish04.PackDrops = ListReverseVec3(RevMe);
                    RevMe.Clear();
                    PbLocal.Add(Packages_KitBuild(LocalMish04, new Vector3(-422.5247f, 6061.337f, 30.88972f), new Vector3(-410.65f, 6064.71f, 31.08f), 182.5f, "Cruiser", "prop_cliff_paper", 0));

                    bUseAll = true;
                }
                else if (iLocationX == 7)
                {
                    PackBuild LocalMish = new PackBuild();
                    List<Vector3> Pos_01 = new List<Vector3>();
                    List<Vector3> Pos_02 = new List<Vector3>();
                    List<string> Objset = new List<string>();

                    //Graple
                    Pos_01.Add(new Vector3(3901.277f, -4694.813f, 4.234453f));
                    Pos_01.Add(new Vector3(4495.951f, -4734.207f, 10.84465f));
                    Pos_01.Add(new Vector3(4873.813f, -4485.711f, 10.15341f));
                    Pos_01.Add(new Vector3(4863.543f, -4635.776f, 14.18864f));
                    Pos_01.Add(new Vector3(4895.215f, -4792.363f, 2.784456f));
                    Pos_01.Add(new Vector3(5107.291f, -4578.146f, 29.71777f));
                    Pos_01.Add(new Vector3(5130.018f, -4609.434f, 12.69085f));
                    Pos_01.Add(new Vector3(4866.521f, -5160.332f, 2.434262f));
                    Pos_01.Add(new Vector3(5140.08f, -5085.565f, 2.292881f));
                    Pos_01.Add(new Vector3(4903.876f, -5331.577f, 29.14107f));
                    Pos_01.Add(new Vector3(5266.809f, -5430.166f, 141.041f));
                    Pos_01.Add(new Vector3(5612.969f, -5651.019f, 10.05457f));
                    Pos_01.Add(new Vector3(5600.291f, -5459.215f, 10.72322f));
                    Pos_01.Add(new Vector3(5593.851f, -5224.01f, 14.34492f));
                    Pos_01.Add(new Vector3(5403.367f, -5174.496f, 31.46212f));

                    while (Pos_02.Count < 4)
                    {
                        int iRand = RandInt(0, Pos_01.Count - 1);
                        Pos_02.Add(Pos_01[iRand]);
                        Pos_01.RemoveAt(iRand);
                        Objset.Add("h4_prop_h4_bag_hook_01a");
                    }
                    Pos_01.Clear();

                    //Clothing
                    Pos_01.Add(new Vector3(4501.908f, -4522.904f, 4.412361f));
                    Pos_01.Add(new Vector3(4527.481f, -4535.834f, 7.552054f));
                    Pos_01.Add(new Vector3(4765.726f, -4777.026f, 4.855045f));
                    Pos_01.Add(new Vector3(5059.213f, -4591.081f, 2.906231f));
                    Pos_01.Add(new Vector3(5077.466f, -4630.137f, 2.390313f));
                    Pos_01.Add(new Vector3(5169.982f, -4675.766f, 2.435424f));
                    Pos_01.Add(new Vector3(5164.579f, -5049.855f, 4.335027f));
                    Pos_01.Add(new Vector3(5010.848f, -5201.055f, 2.516255f));
                    Pos_01.Add(new Vector3(4927.385f, -5272.393f, 5.658763f));
                    Pos_01.Add(new Vector3(4950.118f, -5321.06f, 8.083879f));
                    Pos_01.Add(new Vector3(4886.743f, -5460.385f, 30.73853f));
                    Pos_01.Add(new Vector3(5108.986f, -5522.397f, 54.2145f));
                    Pos_01.Add(new Vector3(5272.928f, -5425.16f, 65.59611f));

                    while (Pos_02.Count < 8)
                    {
                        int iRand = RandInt(0, Pos_01.Count - 1);
                        Pos_02.Add(Pos_01[iRand]);
                        Pos_01.RemoveAt(iRand);
                        Objset.Add("h4_prop_h4_crate_cloth_01a");
                    }
                    Pos_01.Clear();

                    //BoltCutters
                    Pos_01.Add(new Vector3(4074.888f, -4664.603f, 4.288707f));
                    Pos_01.Add(new Vector3(4415.872f, -4478.275f, 4.334019f));
                    Pos_01.Add(new Vector3(4535.767f, -4543.152f, 4.970639f));
                    Pos_01.Add(new Vector3(4505.364f, -4654.637f, 11.63728f));
                    Pos_01.Add(new Vector3(5071.25f, -4634.065f, 2.359646f));
                    Pos_01.Add(new Vector3(4841.807f, -5171.894f, 2.265403f));
                    Pos_01.Add(new Vector3(4878.454f, -5114.993f, 2.197809f));
                    Pos_01.Add(new Vector3(5215.129f, -5126.617f, 6.260477f));
                    Pos_01.Add(new Vector3(5328.317f, -5265.676f, 33.18594f));
                    Pos_01.Add(new Vector3(5400.062f, -5172.845f, 31.38728f));
                    Pos_01.Add(new Vector3(5422.316f, -5239.97f, 35.46599f));

                    while (Pos_02.Count < 12)
                    {
                        int iRand = RandInt(0, Pos_01.Count - 1);
                        Pos_02.Add(Pos_01[iRand]);
                        Pos_01.RemoveAt(iRand);
                        Objset.Add("h4_prop_h4_bolt_cutter_01a");
                    }
                    Pos_01.Clear();

                    //Cutting Powder
                    Pos_01.Add(new Vector3(5404.683f, -5170.87f, 31.43855f));
                    Pos_01.Add(new Vector3(5215.685f, -5131.827f, 6.293792f));
                    Pos_01.Add(new Vector3(4919.547f, -5273.42f, 5.646538f));

                    int iRand2 = RandInt(0, Pos_01.Count - 1);
                    Pos_02.Add(Pos_01[iRand2]);
                    Objset.Add("h4_prop_h4_powdercleaner_01a");

                    LocalMish.PackDrops = ListReverseVec3(Packages_SortCayo(Objset, Pos_02, new Vector3(4985.809f, -5713.806f, 18.8802f)));

                    if (bTrainM)
                        PbLocal.Add(Packages_KitBuild(LocalMish, new Vector3(4491.126f, -4511.222f, 4.357188f), new Vector3(4491.126f, -4511.222f, 4.357188f), 289.3603f, "WINKY", "h4_prop_h4_powdercleaner_01a", 0));
                    else
                        PbLocal.Add(Packages_KitBuild(LocalMish, new Vector3(4491.126f, -4511.222f, 4.357188f), new Vector3(4491.126f, -4511.222f, 4.357188f), 289.3603f, "REBEL", "h4_prop_h4_powdercleaner_01a", 0));
                    
                    bUseAll = true;
                }

                if (FindBuiltMissions(2))
                {
                    if (MySettings.BulderOnly)
                    {
                        iAddExtras = -1;
                        bUseAll = false;
                        BeOnOff[3] = false;
                        iBuild = SelectBuilderMish(2);
                    }
                    else
                    {
                        int iOrig = MyMissions.PackersXM.Count;

                        for (int i = 0; i < PbLocal.Count; i++)
                            MyMissions.PackersXM.Add(PbLocal[i]);

                        if (iLocationX == 1)
                            iBuild = FindRandom(2, 0, MyMissions.PackersXM.Count - 1);
                        else if (iLocationX == 2)
                            iBuild = FindRandom(100, 0, MyMissions.PackersXM.Count - 1);
                        else if (iLocationX == 3)
                            iBuild = FindRandom(101, 0, MyMissions.PackersXM.Count - 1);
                        else if (iLocationX == 4)
                            iBuild = FindRandom(102, 0, MyMissions.PackersXM.Count - 1);
                        else if (iLocationX == 5)
                            iBuild = FindRandom(103, 0, MyMissions.PackersXM.Count - 1);
                        else if (iLocationX == 6)
                            iBuild = FindRandom(98, 0, MyMissions.PackersXM.Count - 1);
                        else
                            iBuild = FindRandom(106, 0, MyMissions.PackersXM.Count - 1);

                        if (iBuild < iOrig)
                        {
                            bUseAll = false;
                            BeOnOff[3] = false;
                            iAddExtras = -1;
                        }
                    }
                }
                else
                {
                    for (int i = 0; i < PbLocal.Count; i++)
                        MyMissions.PackersXM.Add(PbLocal[i]);

                    if (iLocationX == 1)
                        iBuild = FindRandom(2, 0, MyMissions.PackersXM.Count - 1);
                    else if (iLocationX == 2)
                        iBuild = FindRandom(100, 0, MyMissions.PackersXM.Count - 1);
                    else if (iLocationX == 3)
                        iBuild = FindRandom(101, 0, MyMissions.PackersXM.Count - 1);
                    else if (iLocationX == 4)
                        iBuild = FindRandom(102, 0, MyMissions.PackersXM.Count - 1);
                    else if (iLocationX == 5)
                        iBuild = FindRandom(103, 0, MyMissions.PackersXM.Count - 1);
                    else if (iLocationX == 6)
                        iBuild = FindRandom(98, 0, MyMissions.PackersXM.Count - 1);
                    else
                        iBuild = FindRandom(106, 0, MyMissions.PackersXM.Count - 1);
                }
            }

            vFuMiss = MyMissions.PackersXM[iBuild].FarstStart;
            vTarget_05 = MyMissions.PackersXM[iBuild].PackVehStart;
            fGetDir = MyMissions.PackersXM[iBuild].PackVehDir;

            if (iAddExtras != -1)
                VehicleSpawn(MyMissions.PackersXM[iBuild].PackVehType, vTarget_05, fGetDir, false, false, true, false, iAddExtras, MyMissions.PackersXM[iBuild].Livery, 66, MyLang.Maptext[3], 1, true);
            else if (MyMissions.PackersXM[iBuild].Livery != -1)
                VehicleSpawn(MyMissions.PackersXM[iBuild].PackVehType, vTarget_05, fGetDir, false, false, true, false, 5, MyMissions.PackersXM[iBuild].Livery, 66, MyLang.Maptext[3], 1, true);
            else
                VehicleSpawn(MyMissions.PackersXM[iBuild].PackVehType, vTarget_05, fGetDir, false, false, true, false, 0, 0, 66, MyLang.Maptext[3], 1, true);

            int iRanBox = 0;
            if (BeOnOff[3])
                iRanBox = 6;
            else if (MyMissions.PackersXM[iBuild].PackDrops.Count > 12)
                iRanBox = FindRandom(99, 6, 12);
            else if (MyMissions.PackersXM[iBuild].PackDrops.Count > 6)
                iRanBox = FindRandom(99, 6, MyMissions.PackersXM[iBuild].PackDrops.Count - 1);
            else
                iRanBox = MyMissions.PackersXM[iBuild].PackDrops.Count - 1;

            Packages_DeliverThis(MyMissions.PackersXM[iBuild].PackDrops, iRanBox, bUseAll);

            iParcelCost = RandInt(10, 50);
            sMissionVar_01 = MyMissions.PackersXM[iBuild].PackDropType;

            vGetaway = vTarget_05;
            vTarget_05.Z -= 1.00f;
            if (!bTestRun)
                BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[2], "", 5000);
            bOnTheJob = true;
        }
        public class PackBuild
        {
            public int Local { get; set; }
            public Vector3 FarstStart { get; set; }
            public Vector3 PackVehStart { get; set; }
            public float PackVehDir { get; set; }
            public string PackVehType { get; set; }
            public string PackDropType { get; set; }
            public int Livery { get; set; }
            public List<Vector3> PackDrops { get; set; }

            public PackBuild()
            {
                PackDrops = new List<Vector3>();
            }
        }
        private void Convicts()
        {
            LogThis("Convicts");

            VectorList_01.Clear();
            iList_01.Clear();
            iTime_01.Clear();
            BeOnOff.Clear();
            List<ConsBuild> ConLocal = new List<ConsBuild>();

            int iBuild = 0;

            if (bTestRun)
            {
                bJobLoaded = true;
                iBuild = 0;
                iJobType = 4;
            }
            else
            {
                if (iLocationX == 1)
                {
                    ConsBuild LocalMish = new ConsBuild();
                    LocalMish.Local = iLocationX;

                    LocalMish.ConMarch.Add(new Vector3(228.6289f, -1394.52f, 30.494f));
                    LocalMish.ConMarch.Add(new Vector3(252.5324f, -1400.599f, 30.53424f));
                    LocalMish.ConMarch.Add(new Vector3(273.3281f, -1378.727f, 31.95101f));
                    LocalMish.ConMarch.Add(new Vector3(273.2798f, -1359.458f, 31.93511f));
                    LocalMish.ConMarch.Add(new Vector3(250.2143f, -1339.669f, 31.92071f));
                    LocalMish.ConMarch.Add(new Vector3(235.2781f, -1346.481f, 30.5051f));
                    LocalMish.ConMarch.Add(new Vector3(219.2509f, -1365.954f, 30.56017f));

                    ConLocal.Add(LocalMish);
                    LocalMish.ConMarch.Clear();

                    LocalMish.ConMarch.Add(new Vector3(-227.1508f, -2023.395f, 27.75543f));
                    LocalMish.ConMarch.Add(new Vector3(-222.3802f, -2007.24f, 27.75543f));
                    LocalMish.ConMarch.Add(new Vector3(-219.4253f, -1989.297f, 27.75542f));
                    LocalMish.ConMarch.Add(new Vector3(-221.2715f, -1971.702f, 27.75571f));
                    LocalMish.ConMarch.Add(new Vector3(-224.2942f, -1960.297f, 27.75689f));
                    LocalMish.ConMarch.Add(new Vector3(-240.3955f, -1966.939f, 29.94605f));
                    LocalMish.ConMarch.Add(new Vector3(-239.069f, -1973.878f, 29.94605f));
                    LocalMish.ConMarch.Add(new Vector3(-237.4634f, -1992.5f, 29.94605f));
                    LocalMish.ConMarch.Add(new Vector3(-240.9862f, -2009.94f, 29.94605f));
                    LocalMish.ConMarch.Add(new Vector3(-249.9569f, -2026.076f, 29.94605f));
                    LocalMish.ConMarch.Add(new Vector3(-263.3784f, -2040.735f, 29.94605f));
                    LocalMish.ConMarch.Add(new Vector3(-277.9292f, -2048.336f, 29.94605f));
                    LocalMish.ConMarch.Add(new Vector3(-273.3261f, -2064.927f, 27.75543f));
                    LocalMish.ConMarch.Add(new Vector3(-246.0456f, -2048.949f, 27.75543f));
                    LocalMish.ConMarch.Add(new Vector3(-235.4299f, -2037.349f, 27.75543f));

                    ConLocal.Add(LocalMish);
                    LocalMish.ConMarch.Clear();

                    LocalMish.ConMarch.Add(new Vector3(-924.767f, -2571.403f, 13.97616f));
                    LocalMish.ConMarch.Add(new Vector3(-943.3739f, -2565.557f, 13.93645f));
                    LocalMish.ConMarch.Add(new Vector3(-961.3f, -2544.967f, 13.98062f));
                    LocalMish.ConMarch.Add(new Vector3(-967.3834f, -2523.3f, 13.98103f));
                    LocalMish.ConMarch.Add(new Vector3(-965.3172f, -2502.885f, 13.98098f));
                    LocalMish.ConMarch.Add(new Vector3(-960.5615f, -2492.263f, 13.98057f));
                    LocalMish.ConMarch.Add(new Vector3(-947.3313f, -2478.542f, 13.9807f));
                    LocalMish.ConMarch.Add(new Vector3(-932.3168f, -2470.56f, 13.9807f));
                    LocalMish.ConMarch.Add(new Vector3(-913.9728f, -2467.62f, 13.98073f));
                    LocalMish.ConMarch.Add(new Vector3(-889.0792f, -2472.986f, 13.98049f));
                    LocalMish.ConMarch.Add(new Vector3(-872.939f, -2489.196f, 13.98072f));
                    LocalMish.ConMarch.Add(new Vector3(-866.3092f, -2501.952f, 13.98075f));
                    LocalMish.ConMarch.Add(new Vector3(-863.3466f, -2512.478f, 13.98059f));
                    LocalMish.ConMarch.Add(new Vector3(-863.6301f, -2528.947f, 13.98072f));
                    LocalMish.ConMarch.Add(new Vector3(-869.4406f, -2546.69f, 13.97835f));
                    LocalMish.ConMarch.Add(new Vector3(-884.2811f, -2561.323f, 13.98074f));
                    LocalMish.ConMarch.Add(new Vector3(-896.1907f, -2568.416f, 13.98074f));
                    LocalMish.ConMarch.Add(new Vector3(-903.6213f, -2570.235f, 13.98074f));

                    ConLocal.Add(LocalMish);
                    LocalMish.ConMarch.Clear();

                    LocalMish.ConMarch.Add(new Vector3(-287.7649f, -1638.534f, 31.84882f));
                    LocalMish.ConMarch.Add(new Vector3(-298.8279f, -1656.257f, 31.84881f));
                    LocalMish.ConMarch.Add(new Vector3(-317.5655f, -1644.264f, 31.85344f));
                    LocalMish.ConMarch.Add(new Vector3(-303.9065f, -1622.695f, 31.84882f));

                    ConLocal.Add(LocalMish);
                    LocalMish.ConMarch.Clear();

                    LocalMish.ConMarch.Add(new Vector3(1476.682f, -1984.691f, 70.69158f));
                    LocalMish.ConMarch.Add(new Vector3(1453.445f, -1972.131f, 70.44451f));
                    LocalMish.ConMarch.Add(new Vector3(1434.379f, -1986.595f, 65.75795f));
                    LocalMish.ConMarch.Add(new Vector3(1423.388f, -2007.92f, 61.90174f));
                    LocalMish.ConMarch.Add(new Vector3(1433.237f, -2031.683f, 57.47531f));
                    LocalMish.ConMarch.Add(new Vector3(1469.974f, -2042.295f, 57.02632f));
                    LocalMish.ConMarch.Add(new Vector3(1478.932f, -2002.187f, 68.38514f));

                    ConLocal.Add(LocalMish);
                }
                else if (iLocationX == 2)
                {
                    ConsBuild LocalMish = new ConsBuild();
                    LocalMish.Local = iLocationX;

                    LocalMish.ConMarch.Add(new Vector3(129.9129f, -988.9407f, 29.32248f));
                    LocalMish.ConMarch.Add(new Vector3(169.9703f, -880.6992f, 30.55882f));
                    LocalMish.ConMarch.Add(new Vector3(174.1833f, -881.5703f, 30.89416f));
                    LocalMish.ConMarch.Add(new Vector3(186.1561f, -849.1542f, 31.16665f));
                    LocalMish.ConMarch.Add(new Vector3(193.5296f, -847.7554f, 30.91245f));
                    LocalMish.ConMarch.Add(new Vector3(263.498f, -872.455f, 29.17216f));
                    LocalMish.ConMarch.Add(new Vector3(211.1392f, -1018.212f, 29.30549f));

                    ConLocal.Add(LocalMish);
                    LocalMish.ConMarch.Clear();

                    LocalMish.ConMarch.Add(new Vector3(356.3345f, 160.7301f, 103.0043f));
                    LocalMish.ConMarch.Add(new Vector3(222.6689f, 208.8755f, 105.5123f));
                    LocalMish.ConMarch.Add(new Vector3(266.2624f, 328.2007f, 105.5289f));
                    LocalMish.ConMarch.Add(new Vector3(339.1058f, 311.9287f, 104.5361f));
                    LocalMish.ConMarch.Add(new Vector3(404.6719f, 292.2426f, 102.9655f));

                    ConLocal.Add(LocalMish);
                    LocalMish.ConMarch.Clear();

                    LocalMish.ConMarch.Add(new Vector3(-68.89455f, -402.1517f, 37.29737f));
                    LocalMish.ConMarch.Add(new Vector3(-103.1039f, -389.6021f, 36.63163f));
                    LocalMish.ConMarch.Add(new Vector3(-108.889f, -409.1098f, 35.77497f));
                    LocalMish.ConMarch.Add(new Vector3(-127.2451f, -411.5541f, 34.58294f));
                    LocalMish.ConMarch.Add(new Vector3(-139.3882f, -421.2568f, 33.74562f));
                    LocalMish.ConMarch.Add(new Vector3(-148.7219f, -435.5255f, 33.47985f));
                    LocalMish.ConMarch.Add(new Vector3(-153.0547f, -451.4209f, 33.79173f));
                    LocalMish.ConMarch.Add(new Vector3(-145.8188f, -464.7188f, 33.17519f));
                    LocalMish.ConMarch.Add(new Vector3(-132.132f, -472.3099f, 33.07674f));
                    LocalMish.ConMarch.Add(new Vector3(-121.9619f, -474.8518f, 33.34896f));
                    LocalMish.ConMarch.Add(new Vector3(-89.17182f, -474.3718f, 34.96899f));
                    LocalMish.ConMarch.Add(new Vector3(-77.55576f, -466.7515f, 36.39326f));
                    LocalMish.ConMarch.Add(new Vector3(-67.24388f, -449.3546f, 38.11158f));
                    LocalMish.ConMarch.Add(new Vector3(-64.59761f, -437.8882f, 38.43552f));
                    LocalMish.ConMarch.Add(new Vector3(-64.19228f, -419.8323f, 38.09665f));

                    ConLocal.Add(LocalMish);
                    LocalMish.ConMarch.Clear();

                    LocalMish.ConMarch.Add(new Vector3(-736.3101f, 90.46006f, 55.58132f));
                    LocalMish.ConMarch.Add(new Vector3(-737.0633f, 69.59921f, 54.30896f));
                    LocalMish.ConMarch.Add(new Vector3(-734.0124f, 47.01559f, 47.47584f));
                    LocalMish.ConMarch.Add(new Vector3(-728.4005f, 29.74567f, 42.26787f));
                    LocalMish.ConMarch.Add(new Vector3(-703.6444f, 36.59576f, 43.22058f));
                    LocalMish.ConMarch.Add(new Vector3(-681.6513f, 46.41314f, 43.09964f));
                    LocalMish.ConMarch.Add(new Vector3(-661.1816f, 46.04203f, 41.12265f));
                    LocalMish.ConMarch.Add(new Vector3(-658.776f, 85.53405f, 52.46266f));
                    LocalMish.ConMarch.Add(new Vector3(-662.4477f, 103.3301f, 56.80659f));
                    LocalMish.ConMarch.Add(new Vector3(-662.0488f, 119.3575f, 57.01698f));
                    LocalMish.ConMarch.Add(new Vector3(-675.6852f, 115.9964f, 56.75283f));
                    LocalMish.ConMarch.Add(new Vector3(-709.5087f, 98.95238f, 56.07108f));
                    LocalMish.ConMarch.Add(new Vector3(-718.9947f, 95.15092f, 55.8739f));

                    ConLocal.Add(LocalMish);
                    LocalMish.ConMarch.Clear();

                    LocalMish.ConMarch.Add(new Vector3(-1765.645f, -1149.159f, 13.07916f));
                    LocalMish.ConMarch.Add(new Vector3(-1837.407f, -1227.053f, 13.01728f));
                    LocalMish.ConMarch.Add(new Vector3(-1869.622f, -1210.43f, 13.01711f));
                    LocalMish.ConMarch.Add(new Vector3(-1831.916f, -1162.537f, 13.01727f));
                    LocalMish.ConMarch.Add(new Vector3(-1806.807f, -1181.257f, 13.01744f));
                    LocalMish.ConMarch.Add(new Vector3(-1797.633f, -1177.67f, 13.01751f));
                    LocalMish.ConMarch.Add(new Vector3(-1786.751f, -1169.576f, 13.01768f));
                    LocalMish.ConMarch.Add(new Vector3(-1660.035f, -1023.637f, 13.01778f));
                    LocalMish.ConMarch.Add(new Vector3(-1652.489f, -1014.507f, 13.01739f));
                    LocalMish.ConMarch.Add(new Vector3(-1659.945f, -1009.417f, 13.01739f));
                    LocalMish.ConMarch.Add(new Vector3(-1709.898f, -1070.201f, 13.01735f));
                    LocalMish.ConMarch.Add(new Vector3(-1709.359f, -1083.783f, 13.10089f));

                    ConLocal.Add(LocalMish);
                }
                else if (iLocationX == 3)
                {
                    ConsBuild LocalMish = new ConsBuild();
                    LocalMish.Local = iLocationX;

                    LocalMish.ConMarch.Add(new Vector3(-2891.325f, -8.690169f, 7.963134f));
                    LocalMish.ConMarch.Add(new Vector3(-2910.282f, -37.03131f, 3.024998f));
                    LocalMish.ConMarch.Add(new Vector3(-2999.717f, 0.8205602f, 4.733732f));
                    LocalMish.ConMarch.Add(new Vector3(-2997.566f, 30.52503f, 7.300454f));
                    LocalMish.ConMarch.Add(new Vector3(-2995.444f, 36.81783f, 7.95881f));
                    LocalMish.ConMarch.Add(new Vector3(-2992.152f, 35.16978f, 8.5967f));
                    LocalMish.ConMarch.Add(new Vector3(-2987.468f, 42.83352f, 11.6085f));
                    LocalMish.ConMarch.Add(new Vector3(-2939.735f, 20.68083f, 11.60792f));
                    LocalMish.ConMarch.Add(new Vector3(-2943.227f, 12.65156f, 11.60476f));
                    LocalMish.ConMarch.Add(new Vector3(-2918.954f, 1.69491f, 11.60532f));
                    LocalMish.ConMarch.Add(new Vector3(-2891.381f, -6.391256f, 11.60316f));
                    LocalMish.ConMarch.Add(new Vector3(-2888.387f, 2.114674f, 11.608f));
                    LocalMish.ConMarch.Add(new Vector3(-2886.561f, 0.7008348f, 11.608f));
                    LocalMish.ConMarch.Add(new Vector3(-2888.892f, -7.902122f, 7.959469f));

                    ConLocal.Add(LocalMish);
                    LocalMish.ConMarch.Clear();

                    LocalMish.ConMarch.Add(new Vector3(-1486.228f, 875.5378f, 182.6471f));
                    LocalMish.ConMarch.Add(new Vector3(-1478.33f, 831.1494f, 181.7178f));
                    LocalMish.ConMarch.Add(new Vector3(-1514.694f, 814.3276f, 181.9242f));
                    LocalMish.ConMarch.Add(new Vector3(-1521.786f, 816.0013f, 181.8818f));
                    LocalMish.ConMarch.Add(new Vector3(-1532.458f, 826.3513f, 181.4863f));
                    LocalMish.ConMarch.Add(new Vector3(-1543.011f, 817.2687f, 182.2451f));
                    LocalMish.ConMarch.Add(new Vector3(-1549.201f, 782.2504f, 188.5506f));
                    LocalMish.ConMarch.Add(new Vector3(-1558.725f, 777.4117f, 189.1925f));
                    LocalMish.ConMarch.Add(new Vector3(-1584.688f, 765.293f, 189.1942f));
                    LocalMish.ConMarch.Add(new Vector3(-1592.872f, 784.2383f, 189.194f));
                    LocalMish.ConMarch.Add(new Vector3(-1578.12f, 790.5488f, 189.1929f));
                    LocalMish.ConMarch.Add(new Vector3(-1585.357f, 804.7038f, 185.9943f));
                    LocalMish.ConMarch.Add(new Vector3(-1575.385f, 809.5252f, 185.9944f));
                    LocalMish.ConMarch.Add(new Vector3(-1578.809f, 818.0173f, 185.9939f));
                    LocalMish.ConMarch.Add(new Vector3(-1534.582f, 848.1694f, 181.7705f));
                    LocalMish.ConMarch.Add(new Vector3(-1521.602f, 854.8638f, 181.5947f));
                    LocalMish.ConMarch.Add(new Vector3(-1496.966f, 870.4911f, 181.9422f));

                    ConLocal.Add(LocalMish);
                    LocalMish.ConMarch.Clear();

                    LocalMish.ConMarch.Add(new Vector3(-1893.8f, 1974.631f, 143.1386f));
                    LocalMish.ConMarch.Add(new Vector3(-1929.31f, 1969.096f, 148.8142f));
                    LocalMish.ConMarch.Add(new Vector3(-1966.108f, 1968.237f, 154.9804f));
                    LocalMish.ConMarch.Add(new Vector3(-1982.965f, 1961.467f, 160.8532f));
                    LocalMish.ConMarch.Add(new Vector3(-1987.9f, 1950.067f, 167.1869f));
                    LocalMish.ConMarch.Add(new Vector3(-1982.987f, 1941.103f, 171.1532f));
                    LocalMish.ConMarch.Add(new Vector3(-1945.131f, 1917.294f, 173.789f));
                    LocalMish.ConMarch.Add(new Vector3(-1938.31f, 1890.808f, 179.907f));
                    LocalMish.ConMarch.Add(new Vector3(-1954.827f, 1842.859f, 180.2473f));
                    LocalMish.ConMarch.Add(new Vector3(-1957.488f, 1830.848f, 178.8064f));
                    LocalMish.ConMarch.Add(new Vector3(-1945.764f, 1820.129f, 172.0853f));
                    LocalMish.ConMarch.Add(new Vector3(-1937.965f, 1823.133f, 170.6982f));
                    LocalMish.ConMarch.Add(new Vector3(-1920.848f, 1840.997f, 166.5749f));
                    LocalMish.ConMarch.Add(new Vector3(-1899.503f, 1851.748f, 160.8903f));
                    LocalMish.ConMarch.Add(new Vector3(-1879.112f, 1865.361f, 156.9021f));
                    LocalMish.ConMarch.Add(new Vector3(-1841.115f, 1891.895f, 146.2764f));
                    LocalMish.ConMarch.Add(new Vector3(-1836.474f, 1901.321f, 145.8237f));
                    LocalMish.ConMarch.Add(new Vector3(-1839.368f, 1912.564f, 147.3022f));
                    LocalMish.ConMarch.Add(new Vector3(-1853.069f, 1930.572f, 150.2391f));
                    LocalMish.ConMarch.Add(new Vector3(-1878.708f, 1956.751f, 145.8794f));

                    ConLocal.Add(LocalMish);
                    LocalMish.ConMarch.Clear();

                    LocalMish.ConMarch.Add(new Vector3(-319.6601f, 2786.814f, 59.43f));
                    LocalMish.ConMarch.Add(new Vector3(-337.5543f, 2800.789f, 58.15808f));
                    LocalMish.ConMarch.Add(new Vector3(-338.9051f, 2804.992f, 58.13386f));
                    LocalMish.ConMarch.Add(new Vector3(-327.3314f, 2822.454f, 58.19631f));
                    LocalMish.ConMarch.Add(new Vector3(-317.4219f, 2826.94f, 58.47928f));
                    LocalMish.ConMarch.Add(new Vector3(-312.7925f, 2831.25f, 58.25769f));
                    LocalMish.ConMarch.Add(new Vector3(-310.0566f, 2831.212f, 58.38048f));
                    LocalMish.ConMarch.Add(new Vector3(-297.7459f, 2823.444f, 59.15673f));
                    LocalMish.ConMarch.Add(new Vector3(-299.6138f, 2818.963f, 59.19112f));
                    LocalMish.ConMarch.Add(new Vector3(-295.6808f, 2811.254f, 58.98975f));
                    LocalMish.ConMarch.Add(new Vector3(-308.6064f, 2790.959f, 59.41709f));
                    LocalMish.ConMarch.Add(new Vector3(-316.4038f, 2787.014f, 59.56699f));
                    LocalMish.ConMarch.Add(new Vector3(-323.0881f, 2789.975f, 59.20899f));

                    ConLocal.Add(LocalMish);
                    LocalMish.ConMarch.Clear();

                    LocalMish.ConMarch.Add(new Vector3(-2768.271f, 2695.774f, 1.370201f));
                    LocalMish.ConMarch.Add(new Vector3(-2755.266f, 2703.515f, 1.416718f));
                    LocalMish.ConMarch.Add(new Vector3(-2735.553f, 2738.595f, 1.462122f));
                    LocalMish.ConMarch.Add(new Vector3(-2730.177f, 2799.426f, 1.757612f));
                    LocalMish.ConMarch.Add(new Vector3(-2717.147f, 2824.657f, 1.186048f));
                    LocalMish.ConMarch.Add(new Vector3(-2730.011f, 2855.175f, 1.459975f));
                    LocalMish.ConMarch.Add(new Vector3(-2720.936f, 2897.158f, 1.232428f));
                    LocalMish.ConMarch.Add(new Vector3(-2723.055f, 2915.156f, 1.214248f));
                    LocalMish.ConMarch.Add(new Vector3(-2717.156f, 2934.323f, 1.675791f));
                    LocalMish.ConMarch.Add(new Vector3(-2736.917f, 2953.923f, 2.776649f));
                    LocalMish.ConMarch.Add(new Vector3(-2746.004f, 2954.125f, 2.354859f));
                    LocalMish.ConMarch.Add(new Vector3(-2751.835f, 2943.838f, 2.075438f));
                    LocalMish.ConMarch.Add(new Vector3(-2752.229f, 2914.945f, 1.281913f));
                    LocalMish.ConMarch.Add(new Vector3(-2752.62f, 2887.3f, 1.572614f));
                    LocalMish.ConMarch.Add(new Vector3(-2756.117f, 2854.283f, 1.468493f));
                    LocalMish.ConMarch.Add(new Vector3(-2764.645f, 2779.508f, 2.047434f));
                    LocalMish.ConMarch.Add(new Vector3(-2769.536f, 2743.653f, 2.138904f));
                    LocalMish.ConMarch.Add(new Vector3(-2776.014f, 2720.484f, 2.238141f));

                    ConLocal.Add(LocalMish);
                }
                else if (iLocationX == 4)
                {
                    ConsBuild LocalMish = new ConsBuild();
                    LocalMish.Local = iLocationX;

                    LocalMish.ConMarch.Add(new Vector3(1061.091f, -558.9828f, 59.28479f));
                    LocalMish.ConMarch.Add(new Vector3(1066.203f, -597.2649f, 56.83318f));
                    LocalMish.ConMarch.Add(new Vector3(1062.106f, -610.6114f, 56.76826f));
                    LocalMish.ConMarch.Add(new Vector3(1022.904f, -655.5869f, 58.68858f));
                    LocalMish.ConMarch.Add(new Vector3(1020.39f, -657.876f, 58.61199f));
                    LocalMish.ConMarch.Add(new Vector3(1020.476f, -698.0944f, 56.81086f));
                    LocalMish.ConMarch.Add(new Vector3(1056.699f, -719.1822f, 56.815f));
                    LocalMish.ConMarch.Add(new Vector3(1088.558f, -738.0333f, 56.76314f));
                    LocalMish.ConMarch.Add(new Vector3(1132.372f, -738.0198f, 56.74362f));
                    LocalMish.ConMarch.Add(new Vector3(1143.484f, -710.3257f, 56.80364f));
                    LocalMish.ConMarch.Add(new Vector3(1127.766f, -660.5972f, 56.68017f));
                    LocalMish.ConMarch.Add(new Vector3(1126.506f, -644.8978f, 56.77164f));
                    LocalMish.ConMarch.Add(new Vector3(1119.372f, -633.5688f, 56.78326f));
                    LocalMish.ConMarch.Add(new Vector3(1118.719f, -612.4344f, 56.74827f));
                    LocalMish.ConMarch.Add(new Vector3(1124.979f, -604.9899f, 56.74682f));
                    LocalMish.ConMarch.Add(new Vector3(1139.324f, -591.7932f, 56.75398f));
                    LocalMish.ConMarch.Add(new Vector3(1142.248f, -582.8869f, 56.75351f));
                    LocalMish.ConMarch.Add(new Vector3(1133.203f, -563.3502f, 56.99999f));
                    LocalMish.ConMarch.Add(new Vector3(1125.851f, -551.4424f, 56.93082f));
                    LocalMish.ConMarch.Add(new Vector3(1105.572f, -540.5275f, 57.76503f));
                    LocalMish.ConMarch.Add(new Vector3(1105.599f, -540.5577f, 57.76052f));
                    LocalMish.ConMarch.Add(new Vector3(1100.637f, -540.5255f, 57.95548f));
                    LocalMish.ConMarch.Add(new Vector3(1100.362f, -527.494f, 63.07243f));
                    LocalMish.ConMarch.Add(new Vector3(1073.51f, -530.7902f, 62.03668f));

                    ConLocal.Add(LocalMish);
                    LocalMish.ConMarch.Clear();

                    LocalMish.ConMarch.Add(new Vector3(1163.911f, 280.2455f, 82.19042f));
                    LocalMish.ConMarch.Add(new Vector3(991.5728f, -11.44712f, 81.85177f));
                    LocalMish.ConMarch.Add(new Vector3(993.7879f, -40.10574f, 81.92294f));
                    LocalMish.ConMarch.Add(new Vector3(1011.639f, -65.61469f, 82.19008f));
                    LocalMish.ConMarch.Add(new Vector3(1038.523f, -82.89301f, 82.19008f));
                    LocalMish.ConMarch.Add(new Vector3(1072.831f, -82.7739f, 82.16786f));
                    LocalMish.ConMarch.Add(new Vector3(1095.682f, -69.53146f, 82.08484f));
                    LocalMish.ConMarch.Add(new Vector3(1265.938f, 178.9096f, 81.98807f));
                    LocalMish.ConMarch.Add(new Vector3(1273.632f, 195.978f, 81.91003f));
                    LocalMish.ConMarch.Add(new Vector3(1274.658f, 222.6223f, 81.90385f));
                    LocalMish.ConMarch.Add(new Vector3(1261.318f, 257.1254f, 82.07339f));
                    LocalMish.ConMarch.Add(new Vector3(1235.155f, 278.5591f, 82.08091f));
                    LocalMish.ConMarch.Add(new Vector3(1209.412f, 284.0538f, 82.0095f));

                    ConLocal.Add(LocalMish);
                    LocalMish.ConMarch.Clear();

                    LocalMish.ConMarch.Add(new Vector3(2493.767f, -317.9808f, 92.99265f));
                    LocalMish.ConMarch.Add(new Vector3(2465.75f, -331.269f, 92.99268f));
                    LocalMish.ConMarch.Add(new Vector3(2445.703f, -353.545f, 92.98891f));
                    LocalMish.ConMarch.Add(new Vector3(2446.853f, -417.4889f, 92.99274f));
                    LocalMish.ConMarch.Add(new Vector3(2474.773f, -444.7306f, 92.99303f));
                    LocalMish.ConMarch.Add(new Vector3(2480.923f, -437.5063f, 92.99287f));
                    LocalMish.ConMarch.Add(new Vector3(2479.751f, -420.7701f, 93.73516f));
                    LocalMish.ConMarch.Add(new Vector3(2481.842f, -406.8932f, 93.73528f));
                    LocalMish.ConMarch.Add(new Vector3(2494.202f, -390.2369f, 94.11994f));
                    LocalMish.ConMarch.Add(new Vector3(2493.491f, -374.688f, 94.11996f));
                    LocalMish.ConMarch.Add(new Vector3(2481.127f, -358.7106f, 93.73526f));
                    LocalMish.ConMarch.Add(new Vector3(2481.344f, -341.2011f, 93.00871f));
                    LocalMish.ConMarch.Add(new Vector3(2480.642f, -324.369f, 92.99266f));

                    ConLocal.Add(LocalMish);
                    LocalMish.ConMarch.Clear();

                    LocalMish.ConMarch.Add(new Vector3(1443.998f, 1032.925f, 114.2406f));
                    LocalMish.ConMarch.Add(new Vector3(1507.861f, 1033.247f, 114.2185f));
                    LocalMish.ConMarch.Add(new Vector3(1514.412f, 1043.134f, 114.2258f));
                    LocalMish.ConMarch.Add(new Vector3(1514.912f, 1101.076f, 114.2287f));
                    LocalMish.ConMarch.Add(new Vector3(1502.632f, 1178.213f, 114.2156f));
                    LocalMish.ConMarch.Add(new Vector3(1484.8f, 1185.216f, 114.1505f));
                    LocalMish.ConMarch.Add(new Vector3(1434.625f, 1186.282f, 114.1913f));
                    LocalMish.ConMarch.Add(new Vector3(1433.847f, 1092.753f, 114.2267f));

                    ConLocal.Add(LocalMish);
                    LocalMish.ConMarch.Clear();

                    LocalMish.ConMarch.Add(new Vector3(2692.736f, 1705.75f, 24.68079f));
                    LocalMish.ConMarch.Add(new Vector3(2806.105f, 1705.584f, 24.68113f));
                    LocalMish.ConMarch.Add(new Vector3(2818.727f, 1704.424f, 24.69106f));
                    LocalMish.ConMarch.Add(new Vector3(2823.846f, 1699.423f, 24.71452f));
                    LocalMish.ConMarch.Add(new Vector3(2824.438f, 1696.413f, 24.69556f));
                    LocalMish.ConMarch.Add(new Vector3(2824.696f, 1647.154f, 24.64242f));
                    LocalMish.ConMarch.Add(new Vector3(2782.65f, 1647.183f, 24.60208f));
                    LocalMish.ConMarch.Add(new Vector3(2780.294f, 1653.693f, 24.53028f));
                    LocalMish.ConMarch.Add(new Vector3(2711.461f, 1654.09f, 24.53372f));
                    LocalMish.ConMarch.Add(new Vector3(2711.587f, 1647.229f, 24.60396f));
                    LocalMish.ConMarch.Add(new Vector3(2698.269f, 1646.656f, 24.60472f));
                    LocalMish.ConMarch.Add(new Vector3(2695.426f, 1649.674f, 24.61012f));
                    LocalMish.ConMarch.Add(new Vector3(2694.013f, 1653.814f, 24.62069f));
                    LocalMish.ConMarch.Add(new Vector3(2694.363f, 1691.255f, 24.69635f));
                    LocalMish.ConMarch.Add(new Vector3(2696.989f, 1695.163f, 24.7006f));
                    LocalMish.ConMarch.Add(new Vector3(2702.095f, 1696.548f, 24.66678f));

                    ConLocal.Add(LocalMish);
                }
                else if (iLocationX == 5)
                {
                    ConsBuild LocalMish = new ConsBuild();
                    LocalMish.Local = iLocationX;

                    LocalMish.ConMarch.Add(new Vector3(1623.121f, 3228.294f, 40.41154f));
                    LocalMish.ConMarch.Add(new Vector3(1548.318f, 3147.528f, 40.53161f));
                    LocalMish.ConMarch.Add(new Vector3(1099.019f, 3015.776f, 40.56151f));
                    LocalMish.ConMarch.Add(new Vector3(1074.616f, 3035.108f, 41.24891f));
                    LocalMish.ConMarch.Add(new Vector3(1085.017f, 3076.249f, 40.42923f));

                    ConLocal.Add(LocalMish);
                    LocalMish.ConMarch.Clear();

                    LocalMish.ConMarch.Add(new Vector3(1090.78f, 3566.191f, 34.09589f));
                    LocalMish.ConMarch.Add(new Vector3(1091.477f, 3610.838f, 33.05823f));
                    LocalMish.ConMarch.Add(new Vector3(1047.076f, 3610.903f, 33.11738f));
                    LocalMish.ConMarch.Add(new Vector3(1012.615f, 3597.394f, 33.21322f));
                    LocalMish.ConMarch.Add(new Vector3(1017.906f, 3568.242f, 33.92956f));

                    ConLocal.Add(LocalMish);
                    LocalMish.ConMarch.Clear();

                    LocalMish.ConMarch.Add(new Vector3(73.27388f, 3633.642f, 39.70792f));
                    LocalMish.ConMarch.Add(new Vector3(27.01976f, 3700.822f, 39.70713f));
                    LocalMish.ConMarch.Add(new Vector3(28.15174f, 3713.856f, 39.71289f));
                    LocalMish.ConMarch.Add(new Vector3(35.53751f, 3726.467f, 39.65743f));
                    LocalMish.ConMarch.Add(new Vector3(73.20634f, 3740.686f, 39.71008f));
                    LocalMish.ConMarch.Add(new Vector3(83.90422f, 3739.935f, 39.69468f));
                    LocalMish.ConMarch.Add(new Vector3(99.68319f, 3726.861f, 39.67576f));
                    LocalMish.ConMarch.Add(new Vector3(102.9181f, 3719.429f, 39.70041f));
                    LocalMish.ConMarch.Add(new Vector3(82.71038f, 3679.274f, 39.71919f));
                    LocalMish.ConMarch.Add(new Vector3(81.40222f, 3636.785f, 39.69534f));

                    ConLocal.Add(LocalMish);
                    LocalMish.ConMarch.Clear();

                    LocalMish.ConMarch.Add(new Vector3(1041.883f, 2191.695f, 44.96709f));
                    LocalMish.ConMarch.Add(new Vector3(1066.888f, 2213.252f, 46.80863f));
                    LocalMish.ConMarch.Add(new Vector3(1031.368f, 2213.759f, 51.05772f));
                    LocalMish.ConMarch.Add(new Vector3(989.4823f, 2218.621f, 47.55013f));
                    LocalMish.ConMarch.Add(new Vector3(997.8649f, 2204.891f, 46.05443f));
                    LocalMish.ConMarch.Add(new Vector3(1021.423f, 2190.472f, 45.28568f));

                    ConLocal.Add(LocalMish);
                    LocalMish.ConMarch.Clear();

                    LocalMish.ConMarch.Add(new Vector3(2440.191f, 4837.629f, 36.53263f));
                    LocalMish.ConMarch.Add(new Vector3(2428.567f, 4921.247f, 43.66103f));
                    LocalMish.ConMarch.Add(new Vector3(2472.179f, 4965.375f, 45.16649f));
                    LocalMish.ConMarch.Add(new Vector3(2480.896f, 4990.179f, 46.22219f));
                    LocalMish.ConMarch.Add(new Vector3(2478.137f, 5002.943f, 45.85592f));
                    LocalMish.ConMarch.Add(new Vector3(2466.199f, 5016.405f, 45.56878f));
                    LocalMish.ConMarch.Add(new Vector3(2416.468f, 4969.382f, 46.13856f));
                    LocalMish.ConMarch.Add(new Vector3(2386.791f, 4938.182f, 42.70732f));
                    LocalMish.ConMarch.Add(new Vector3(2363.594f, 4912.43f, 41.9899f));
                    LocalMish.ConMarch.Add(new Vector3(2373.377f, 4895.569f, 41.92224f));
                    LocalMish.ConMarch.Add(new Vector3(2394.373f, 4874.57f, 40.84945f));

                    ConLocal.Add(LocalMish);
                }
                else
                {
                    ConsBuild LocalMish = new ConsBuild();
                    LocalMish.Local = iLocationX;

                    LocalMish.ConMarch.Add(new Vector3(234.6885f, 6418.486f, 30.96218f));
                    LocalMish.ConMarch.Add(new Vector3(248.8196f, 6415.337f, 31.88116f));
                    LocalMish.ConMarch.Add(new Vector3(269.739f, 6414.965f, 32.11745f));
                    LocalMish.ConMarch.Add(new Vector3(288.8002f, 6420.939f, 31.35575f));
                    LocalMish.ConMarch.Add(new Vector3(298.797f, 6432.084f, 31.80929f));
                    LocalMish.ConMarch.Add(new Vector3(301.9339f, 6444.203f, 32.29673f));
                    LocalMish.ConMarch.Add(new Vector3(306.1744f, 6493.814f, 29.37009f));
                    LocalMish.ConMarch.Add(new Vector3(250.2143f, 6489.353f, 30.67807f));
                    LocalMish.ConMarch.Add(new Vector3(171.8803f, 6482.01f, 31.94304f));
                    LocalMish.ConMarch.Add(new Vector3(175.2863f, 6475.943f, 31.89293f));

                    ConLocal.Add(LocalMish);
                    LocalMish.ConMarch.Clear();

                    LocalMish.ConMarch.Add(new Vector3(157.3289f, 7044.97f, 1.865713f));
                    LocalMish.ConMarch.Add(new Vector3(102.7529f, 7073.901f, 1.931986f));
                    LocalMish.ConMarch.Add(new Vector3(52.24357f, 7079.25f, 2.17193f));
                    LocalMish.ConMarch.Add(new Vector3(23.56722f, 7052.823f, 1.409035f));
                    LocalMish.ConMarch.Add(new Vector3(31.16364f, 7023.305f, 7.387625f));
                    LocalMish.ConMarch.Add(new Vector3(41.1493f, 7013.06f, 8.625368f));
                    LocalMish.ConMarch.Add(new Vector3(36.24067f, 6995.254f, 8.021345f));
                    LocalMish.ConMarch.Add(new Vector3(73.45621f, 6951.467f, 11.52127f));
                    LocalMish.ConMarch.Add(new Vector3(76.90339f, 6968.756f, 10.14844f));
                    LocalMish.ConMarch.Add(new Vector3(96.15324f, 6976.542f, 9.490364f));
                    LocalMish.ConMarch.Add(new Vector3(144.0458f, 6980.392f, 8.019959f));
                    LocalMish.ConMarch.Add(new Vector3(157.614f, 6990.637f, 4.969121f));
                    LocalMish.ConMarch.Add(new Vector3(158.9223f, 7011.254f, 3.681879f));

                    ConLocal.Add(LocalMish);
                    LocalMish.ConMarch.Clear();

                    LocalMish.ConMarch.Add(new Vector3(-576.4569f, 5452.922f, 60.71923f));
                    LocalMish.ConMarch.Add(new Vector3(-560.6669f, 5474.996f, 61.77381f));
                    LocalMish.ConMarch.Add(new Vector3(-552.685f, 5494.2f, 59.80086f));
                    LocalMish.ConMarch.Add(new Vector3(-550.2758f, 5515.276f, 59.87648f));
                    LocalMish.ConMarch.Add(new Vector3(-572.0354f, 5544.016f, 52.74706f));
                    LocalMish.ConMarch.Add(new Vector3(-601.4049f, 5515.799f, 49.60851f));
                    LocalMish.ConMarch.Add(new Vector3(-620.7578f, 5506.275f, 51.13645f));
                    LocalMish.ConMarch.Add(new Vector3(-634.4025f, 5477.448f, 53.29848f));
                    LocalMish.ConMarch.Add(new Vector3(-637.6897f, 5453.631f, 52.85682f));
                    LocalMish.ConMarch.Add(new Vector3(-595.5697f, 5458.982f, 59.10485f));

                    ConLocal.Add(LocalMish);
                    LocalMish.ConMarch.Clear();

                    LocalMish.ConMarch.Add(new Vector3(-334.3983f, 6183.464f, 31.42284f));
                    LocalMish.ConMarch.Add(new Vector3(-305.0548f, 6212.236f, 31.45675f));
                    LocalMish.ConMarch.Add(new Vector3(-302.0125f, 6213.075f, 31.39697f));
                    LocalMish.ConMarch.Add(new Vector3(-284.0596f, 6234.494f, 31.49339f));
                    LocalMish.ConMarch.Add(new Vector3(-237.9272f, 6281.979f, 31.45799f));
                    LocalMish.ConMarch.Add(new Vector3(-252.1601f, 6297.677f, 31.45717f));
                    LocalMish.ConMarch.Add(new Vector3(-301.6298f, 6251.044f, 31.51244f));
                    LocalMish.ConMarch.Add(new Vector3(-305.8697f, 6247.805f, 31.43438f));
                    LocalMish.ConMarch.Add(new Vector3(-318.1996f, 6232.045f, 31.48331f));
                    LocalMish.ConMarch.Add(new Vector3(-322.5253f, 6227.77f, 31.46884f));
                    LocalMish.ConMarch.Add(new Vector3(-360.4957f, 6191.922f, 31.48243f));

                    ConLocal.Add(LocalMish);
                    LocalMish.ConMarch.Clear();

                    LocalMish.ConMarch.Add(new Vector3(-1445.911f, 4228.153f, 49.88695f));
                    LocalMish.ConMarch.Add(new Vector3(-1437.855f, 4232.769f, 48.72689f));
                    LocalMish.ConMarch.Add(new Vector3(-1414.334f, 4225.317f, 42.9243f));
                    LocalMish.ConMarch.Add(new Vector3(-1406.202f, 4234.257f, 39.57491f));
                    LocalMish.ConMarch.Add(new Vector3(-1398.107f, 4235.384f, 37.1693f));
                    LocalMish.ConMarch.Add(new Vector3(-1381.473f, 4242.933f, 32.96693f));
                    LocalMish.ConMarch.Add(new Vector3(-1379.1f, 4227.457f, 27.85471f));
                    LocalMish.ConMarch.Add(new Vector3(-1375.508f, 4221.704f, 26.20435f));
                    LocalMish.ConMarch.Add(new Vector3(-1371.023f, 4221.62f, 24.55573f));
                    LocalMish.ConMarch.Add(new Vector3(-1369.318f, 4234.283f, 21.74896f));
                    LocalMish.ConMarch.Add(new Vector3(-1365.844f, 4237.374f, 20.58922f));
                    LocalMish.ConMarch.Add(new Vector3(-1362.55f, 4222.789f, 18.0125f));
                    LocalMish.ConMarch.Add(new Vector3(-1357.766f, 4223.158f, 16.33216f));
                    LocalMish.ConMarch.Add(new Vector3(-1355.488f, 4230.613f, 14.08321f));
                    LocalMish.ConMarch.Add(new Vector3(-1349.775f, 4261.309f, 7.204568f));
                    LocalMish.ConMarch.Add(new Vector3(-1350.807f, 4280.167f, 3.489815f));
                    LocalMish.ConMarch.Add(new Vector3(-1366.992f, 4291.422f, 2.879005f));
                    LocalMish.ConMarch.Add(new Vector3(-1375.258f, 4295.798f, 2.808748f));
                    LocalMish.ConMarch.Add(new Vector3(-1409.907f, 4301.811f, 5.031199f));
                    LocalMish.ConMarch.Add(new Vector3(-1511.659f, 4307.015f, 5.628844f));
                    LocalMish.ConMarch.Add(new Vector3(-1585.516f, 4343.747f, 3.159351f));
                    LocalMish.ConMarch.Add(new Vector3(-1610.404f, 4373.366f, 2.441379f));
                    LocalMish.ConMarch.Add(new Vector3(-1644.269f, 4431.979f, 3.232418f));
                    LocalMish.ConMarch.Add(new Vector3(-1677.754f, 4452.332f, 2.484089f));
                    LocalMish.ConMarch.Add(new Vector3(-1734.826f, 4452.425f, 4.763266f));
                    LocalMish.ConMarch.Add(new Vector3(-1783.387f, 4475.105f, 11.17609f));
                    LocalMish.ConMarch.Add(new Vector3(-1815.323f, 4479.708f, 17.87292f));
                    LocalMish.ConMarch.Add(new Vector3(-1842.674f, 4500.0f, 22.1328f));
                    LocalMish.ConMarch.Add(new Vector3(-1855.061f, 4500.765f, 22.36915f));
                    LocalMish.ConMarch.Add(new Vector3(-1878.805f, 4481.325f, 26.10547f));
                    LocalMish.ConMarch.Add(new Vector3(-1912.77f, 4482.177f, 29.16429f));
                    LocalMish.ConMarch.Add(new Vector3(-1927.905f, 4460.231f, 34.65511f));
                    LocalMish.ConMarch.Add(new Vector3(-1905.194f, 4437.292f, 42.7122f));
                    LocalMish.ConMarch.Add(new Vector3(-1870.033f, 4417.005f, 48.25819f));
                    LocalMish.ConMarch.Add(new Vector3(-1739.497f, 4344.018f, 62.30252f));
                    LocalMish.ConMarch.Add(new Vector3(-1701.276f, 4303.689f, 69.18857f));
                    LocalMish.ConMarch.Add(new Vector3(-1659.563f, 4215.886f, 82.93988f));
                    LocalMish.ConMarch.Add(new Vector3(-1637.42f, 4205.126f, 84.06075f));
                    LocalMish.ConMarch.Add(new Vector3(-1587.657f, 4200.398f, 81.1502f));
                    LocalMish.ConMarch.Add(new Vector3(-1567.076f, 4205.095f, 78.5675f));
                    LocalMish.ConMarch.Add(new Vector3(-1566.948f, 4205.121f, 78.53695f));
                    LocalMish.ConMarch.Add(new Vector3(-1489.583f, 4226.147f, 57.02686f));
                    LocalMish.ConMarch.Add(new Vector3(-1461.699f, 4225.801f, 52.18763f));

                    ConLocal.Add(LocalMish);
                }


                if (FindBuiltMissions(3))
                {
                    if (MySettings.BulderOnly)
                        iBuild = SelectBuilderMish(3);
                    else
                    {
                        for (int i = 0; i < ConLocal.Count; i++)
                            MyMissions.ConsXM.Add(ConLocal[i]);

                        if (iLocationX == 1)
                            iBuild = FindRandom(3, 0, MyMissions.ConsXM.Count - 1); 
                        else if (iLocationX == 2)
                            iBuild = FindRandom(104, 0, MyMissions.ConsXM.Count - 1);
                        else if (iLocationX == 3)
                            iBuild = FindRandom(107, 0, MyMissions.ConsXM.Count - 1);
                        else if (iLocationX == 4)
                            iBuild = FindRandom(108, 0, MyMissions.ConsXM.Count - 1);
                        else if (iLocationX == 5)
                            iBuild = FindRandom(109, 0, MyMissions.ConsXM.Count - 1);
                        else 
                            iBuild = FindRandom(110, 0, MyMissions.ConsXM.Count - 1);
                    }
                }
                else
                {
                    for (int i = 0; i < ConLocal.Count; i++)
                        MyMissions.ConsXM.Add(ConLocal[i]);

                    if (iLocationX == 1)
                        iBuild = FindRandom(3, 0, MyMissions.ConsXM.Count - 1);
                    else if (iLocationX == 2)
                        iBuild = FindRandom(104, 0, MyMissions.ConsXM.Count - 1);
                    else if (iLocationX == 3)
                        iBuild = FindRandom(107, 0, MyMissions.ConsXM.Count - 1);
                    else if (iLocationX == 4)
                        iBuild = FindRandom(108, 0, MyMissions.ConsXM.Count - 1);
                    else if (iLocationX == 5)
                        iBuild = FindRandom(109, 0, MyMissions.ConsXM.Count - 1);
                    else
                        iBuild = FindRandom(110, 0, MyMissions.ConsXM.Count - 1);
                }
            }

            if (MyMissions.ConsXM[iBuild].Local == 1)
            {
                vFuMiss = new Vector3(808.463f, -1292.11f, 26.20689f);
                vGetaway = new Vector3(859.1813f, -1350.158f, 26.32215f); fGetDir = 89.46764f;
            }
            else if (MyMissions.ConsXM[iBuild].Local == 2)
            {
                vFuMiss = new Vector3(-550.1166f, -147.5585f, 38.26155f);
                vGetaway = new Vector3(-561.4053f, -163.2523f, 38.38601f); fGetDir = 112.3586f;
            }
            else if (MyMissions.ConsXM[iBuild].Local == 3)
            {
                vFuMiss = new Vector3(-1155.791f, -833.9677f, 14.30229f);
                vGetaway = new Vector3(-1066.42f, -855.1868f, 5.125729f); fGetDir = 215.7682f;
            }
            else if (MyMissions.ConsXM[iBuild].Local == 4)
            {
                vFuMiss = new Vector3(574.4177f, -65.24456f, 71.70435f);
                vGetaway = new Vector3(541.0709f, -43.40835f, 71.08759f); fGetDir = 208.7263f;
            }
            else if (MyMissions.ConsXM[iBuild].Local == 5)
            {
                vFuMiss = new Vector3(1861.364f, 3670.887f, 33.91336f);
                vGetaway = new Vector3(1863.648f, 3676.296f, 33.94254f); fGetDir = 120.0636f;
            }
            else
            {
                vFuMiss = new Vector3(-438.1813f, 6040.049f, 31.34058f);
                vGetaway = new Vector3(-460.7939f, 6020.269f, 31.6007f); fGetDir = 316.3787f;
            }


            iMissionVar_01 = RandInt(0, MyMissions.ConsXM[iBuild].ConMarch.Count - 1);
            VectorList_01 = MyMissions.ConsXM[iBuild].ConMarch;

            VehicleSpawn("PBus", vGetaway, fGetDir, false, false, MySettings.ShowRoute, false, 0, 0, 66, MyLang.Maptext[4], 1, false);

            vTarget_01 = VectorList_01[iMissionVar_01];

            BeOnOff.Add(false);//bPrisonAlarms
            BeOnOff.Add(false);//bHarryChant

            iTime_01.Add(0);
            if (!bTestRun)
                BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[3], "", 5000);
            bOnTheJob = true;
        }
        public class ConsBuild
        {
            public int Local { get; set; }
            public List<Vector3> ConMarch { get; set; }

            public ConsBuild()
            {
                ConMarch = new List<Vector3>();
            }
        }
        private void FUber()
        {
            LogThis("FUber");

            iList_01.Clear();
            BeOnOff.Clear();
            MultiPed.Clear();

            int iFubPick = 0;

            iCashBouns = 5;

            string MyZone = World.GetZoneNameLabel(Game.Player.Character.Position);

            if (iLocationX == 1)
            {
                if (MyZone == "AIRP")
                    iFubPick = 1;
                else if (MyZone == "ELYSIAN")
                    iFubPick = 2;
                else if (MyZone == "TERMINA")
                    iFubPick = 3;
                else if (MyZone == "CYPRE")
                    iFubPick = 4;
                else if (MyZone == "EBURO")//houses
                    iFubPick = 5;
                else if (MyZone == "MURRI")
                    iFubPick = 6;
                else if (MyZone == "BANNING" || MyZone == "STAD")
                    iFubPick = 7;
                else if (MyZone == "RANCHO")//houses
                    iFubPick = 8;
                else if (MyZone == "DAVIS")//houses
                    iFubPick = 9;
                else if (MyZone == "LOSPUER" || MyZone == "DELSOL")
                    iFubPick = 10;
                else if (MyZone == "CHAMH")//houses
                    iFubPick = 11;
                else if (MyZone == "STRAW")
                    iFubPick = 12;
                else if (MyZone == "LMESA")
                    iFubPick = 13;
                else
                    iFubPick = 0;
            }
            else if (iLocationX == 2)
            {
                if (MyZone == "SKID")
                    iFubPick = 1;
                else if (MyZone == "LEGSQU")
                    iFubPick = 2;
                else if (MyZone == "TEXTI")
                    iFubPick = 3;
                else if (MyZone == "PBOX")
                    iFubPick = 4;
                else if (MyZone == "DTVINE")
                    iFubPick = 5;
                else if (MyZone == "KOREAT")//   houses
                    iFubPick = 6;
                else if (MyZone == "VCANA")//    houses
                    iFubPick = 7;
                else if (MyZone == "VESP")
                    iFubPick = 8;
                else if (MyZone == "BEACH")
                    iFubPick = 9;
                else if (MyZone == "DELBE")
                    iFubPick = 10;
                else if (MyZone == "DELPE" || MyZone == "SanAnd")
                    iFubPick = 11;
                else if (MyZone == "MOVIE" || MyZone == "MORN")
                    iFubPick = 12;
                else if (MyZone == "ROCKF" || MyZone == "golf")//    houses
                    iFubPick = 13;
                else if (MyZone == "BURTON")
                    iFubPick = 14;
                else if (MyZone == "ALTA")//    housese 
                    iFubPick = 15;
                else if (MyZone == "HAWICK")//  houses 
                    iFubPick = 16;
                else if (MyZone == "WVINE")//    houses
                    iFubPick = 17;
                else
                    iFubPick = 0;
            }
            else if (iLocationX == 3)
            {
                if (MyZone == "RICHM" || MyZone == "RGLEN") // houses
                    iFubPick = 1;
                else if (MyZone == "PBLUFF")
                    iFubPick = 2;
                else if (MyZone == "BHAMCA" || MyZone == "BANHAMC" || MyZone == "CHU")// houses
                    iFubPick = 3;
                else if (MyZone == "TONGVAH" || MyZone == "TONGVAV")
                    iFubPick = 4;
                else
                    iFubPick = 0;
            }
            else if (iLocationX == 4)
            {
                if (MyZone == "MIRR") // houses
                    iFubPick = 1;
                else if (MyZone == "PALHIGH" || MyZone == "NOOSE")
                    iFubPick = 2;
                else if (MyZone == "TATAMO" || MyZone == "PALMPOW" || MyZone == "WINDF")
                    iFubPick = 3;
                else if (MyZone == "HORS" || MyZone == "EAST_V")
                    iFubPick = 4;
                else if (MyZone == "CHIL")
                    iFubPick = 5;
                else
                    iFubPick = 0;
            }
            else if (iLocationX == 5)
            {
                if (MyZone == "GREATC" || MyZone == "ZANCUDO" || MyZone == "SLAB")
                    iFubPick = 1;
                else if (MyZone == "DESRT" || MyZone == "HARMO" || MyZone == "RTRAK" || MyZone == "JAIL") // houes
                    iFubPick = 2;
                else if (MyZone == "ZQ_UAR")
                    iFubPick = 3;
                else if (MyZone == "SANDY")// houses
                    iFubPick = 4;
                else if (MyZone == "ALAMO")
                    iFubPick = 5;
                else if (MyZone == "SANCHIA" || MyZone == "HUMLAB")
                    iFubPick = 6;
                else if (MyZone == "GRAPES" || MyZone == "GALFISH")// houses
                    iFubPick = 7;
                else
                    iFubPick = 0;
            }
            else
            {
                if (MyZone == "ARMYB" || MyZone == "MTJOSE" || MyZone == "NCHU" || MyZone == "CANNY" || MyZone == "CCREAK" || MyZone == "CMSW" || MyZone == "PALCOV")
                    iFubPick = 1;
                else if (MyZone == "MTCHIL" || MyZone == "PROCOB" || MyZone == "PALFOR")
                    iFubPick = 2;
                else if (MyZone == "PALETO") // houses
                    iFubPick = 3;
                else if (MyZone == "BRADP" || MyZone == "MTGORDO" || MyZone == "ELGORL")
                    iFubPick = 4;
                else
                    iFubPick = 0;
            }

            if (bTestRun)
            {
                LogThis("MyMissions.FubardXM == " + MyMissions.FubardXM.Count + ", iTestKit == " + iTestKit);

                bJobLoaded = true;
                iJobType = 5;

                vTarget_02 = MyMissions.FubardXM[iTestKit].FUbarCar;//Park Here
                vTarget_01 = MyMissions.FubardXM[iTestKit].FUbarPed;//Ped Spawn

                iTestKit += 1;

                Fubar_Vectors(iLocationX, iFubPick, false, false);
                int iBe = RandInt(0, VectorList_01.Count - 1);
                vTarget_03 = VectorList_01[iBe];
            }
            else
            {
                if (iFubPick == 0)
                    iFubPick = Fubar_Vectors(iLocationX, iFubPick, true, true);
                else
                    iFubPick = Fubar_Vectors(iLocationX, iFubPick, false, true);

                int iRandomPicks = iRandomPicks = RandInt(0, VectorList_01.Count - 1);

                vTarget_02 = VectorList_01[iRandomPicks];//Park Here
                while (vGetaway.DistanceTo(vTarget_02) < 2.00f)
                {
                    iRandomPicks = iRandomPicks = RandInt(0, VectorList_01.Count - 1);
                    vTarget_02 = VectorList_01[iRandomPicks];//Park Here
                }
                vTarget_01 = VectorList_02[iRandomPicks];//Ped Spawn

                int iRanDest = FindRandom(4, 0, 50);
                if (iRanDest < 20)
                {
                    int YourDest = RandInt(0, VectorList_01.Count - 1);
                    vTarget_03 = VectorList_01[YourDest];
                    while (vTarget_02.DistanceTo(vTarget_03) < 30.00f)
                    {
                        YourDest = RandInt(0, VectorList_01.Count - 1);
                        vTarget_03 = VectorList_01[YourDest];
                    }
                }
                else if (iRanDest < 35)
                {
                    int iZoneOut = iFubPick;

                    while (iZoneOut == iFubPick)
                        iZoneOut = Fubar_Vectors(iLocationX, 0, true, false);

                    int iBe = RandInt(0, VectorList_01.Count - 1);

                    vTarget_03 = VectorList_01[iBe];
                }
                else if (iRanDest < 49)
                {
                    int iPickDiff = iLocationX;

                    if (iPickDiff > 1 && iPickDiff < 6)
                    {
                        if (FindRandom(80, 1, 4) > 2)
                            iPickDiff += 1;
                        else
                            iPickDiff -= 1;
                    }
                    else if (iPickDiff == 1)
                        iPickDiff = 2;
                    else
                        iPickDiff = 5;

                    Fubar_Vectors(iPickDiff, 0, true, false);

                    int iBe = RandInt(0, VectorList_01.Count - 1);

                    vTarget_03 = VectorList_01[iBe];
                }
                else
                {
                    vTarget_03 = new Vector3(-1033.683f, -2722.559f, 12.99118f);
                }
            }



            vTarget_02.Z -= 1.0f;
            vTarget_03.Z -= 1.0f;

            vGetaway = vTarget_03;

            iList_01.Add(0);//iToteTaxi  0
            iList_01.Add(0);//iDeadTaxi  1
            iList_01.Add(0);//iAngerTax  2
            iList_01.Add(RandInt(1, 3));//iFUberPass  3
            iList_01.Add(0);//iStupidPed 4

            BeOnOff.Add(false);//bTruckBlip 0
            BeOnOff.Add(false);//bMoveYourV 1
            BeOnOff.Add(false);//bVAComplete2
            BeOnOff.Add(false);//bRadioPlay 3
            if (!bMoreFubar)
            {
                VTBTimerPool.Add(ttTextBar_01);
                ttTextBar_01.Label = "" + MyLang.Othertext[4] + "";
                if (!bTestRun)
                    BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[4], "", 5000);

                VehicleSpawn("Dilettante", World.GetNextPositionOnStreet(Game.Player.Character.Position), fphdirect, false, false, false, true, 3, 1, 66, MyLang.Maptext[16], 1, true);
            }
            iMissionSeq = 0;
            bOnTheJob = true;
        }
        public class FuberBuild
        {
            public int Local { get; set; }
            public Vector3 FUbarCar { get; set; }
            public Vector3 FUbarPed { get; set; }
        }
        private void Pilot()
        {
            LogThis("Pilot");

            if (iLocationX == 1)
            {
                vFuMiss = new Vector3(-808.957f, -1558.815f, 6.031153f);

                VTBTimerPool.Add(ttTextBar_03);
                ttTextBar_03.Label = "" + MyLang.Othertext[15] + "";
                VectorList_01.Clear();
                iCoronaList.Clear();
                PropList_01.Clear();
                iTime_01.Clear();
                iList_01.Clear();
                fList_01.Clear();
                BeOnOff.Clear();
                iMissionVar_01 = 0;

                string fInflateGate = "ar_prop_inflategates_cp_h2";
                string fStartBlock = "stt_prop_stunt_bblock_huge_02";
                Vector3 posy = new Vector3(-837.200867f, -1628.32861f, -0.25f);
                Vector3 Rota = new Vector3(0.0f, 0.0f, -47.1415977f);
                BuildProp(fStartBlock, posy, Rota, true, true);

                posy = new Vector3(-1770.9104f, -1190.31116f, -1.75f);
                Rota = new Vector3(0.0f, 0.0f, 50.78582f);
                BuildProp(fInflateGate, posy, Rota, true, true);

                posy = new Vector3(-1614.61548f, -1297.24561f, -1.75f);
                Rota = new Vector3(0.0f, 0.0f, -46.1202126f);
                BuildProp(fInflateGate, posy, Rota, true, true);

                posy = new Vector3(-1735.17041f, -1146.11926f, -1.75f);
                Rota = new Vector3(0.0f, 0.0f, -127.55275f);
                BuildProp(fInflateGate, posy, Rota, true, true);

                posy = new Vector3(-1548.09167f, -1366.90845f, -1.75f);
                Rota = new Vector3(0.0f, 0.0f, 128.643829f);
                BuildProp(fInflateGate, posy, Rota, true, true);

                posy = new Vector3(-1638.41821f, -1146.68958f, -1.75f);
                Rota = new Vector3(0.0f, 0.0f, -134.754181f);
                BuildProp(fInflateGate, posy, Rota, true, true);

                posy = new Vector3(-1764.59583f, -1277.83801f, -1.75f);
                Rota = new Vector3(0.0f, 0.0f, 44.9944763f);
                BuildProp(fInflateGate, posy, Rota, true, true);

                posy = new Vector3(-1725.89832f, -1406.23682f, 1.75f);
                Rota = new Vector3(0.0f, 0.0f, -50.0115967f);
                BuildProp(fInflateGate, posy, Rota, true, true);

                posy = new Vector3(-1669.31799f, -1470.46326f, 1.75f);
                Rota = new Vector3(0.0f, 0.0f, 125.150612f);
                BuildProp(fInflateGate, posy, Rota, true, true);

                posy = new Vector3(-819.915039f, -1612.55334f, -5.71f);
                Rota = new Vector3(0.00f, 179.99f, 132.76f);
                BuildProp("prop_ind_barge_02", posy, Rota, true, true);

                VectorList_01.Add(new Vector3(-1606.878f, -1063.248f, 39.63494f));
                VectorList_01.Add(new Vector3(-1441.708f, -1286.413f, 17.71205f));
                VectorList_01.Add(new Vector3(-1507.741f, -1620.703f, 215.414f));
                VectorList_01.Add(new Vector3(-1660.58f, -1355.754f, 42.74666f));
                VectorList_01.Add(new Vector3(-1762.695f, -1156.728f, 50.28794f));
                VectorList_01.Add(new Vector3(-1778.513f, -961.5923f, 45.5566f));
                VectorList_01.Add(new Vector3(-1637.696f, -906.721f, 40.6034f));
                VectorList_01.Add(new Vector3(-1485.101f, -1016.242f, 45.83596f));
                VectorList_01.Add(new Vector3(-1497.698f, -1237.158f, 50.0643f));
                VectorList_01.Add(new Vector3(-1588.551f, -1342.19f, 45.82077f));
                VectorList_01.Add(new Vector3(-1706.297f, -1449.52f, 43.77718f));
                VectorList_01.Add(new Vector3(-1867.604f, -1559.695f, 35.9673f));
                VectorList_01.Add(new Vector3(-2144.738f, -1466.103f, 49.63389f));
                VectorList_01.Add(new Vector3(-2174.646f, -1240.072f, 43.40317f));
                VectorList_01.Add(new Vector3(-2026.626f, -1144.635f, 43.44013f));
                VectorList_01.Add(new Vector3(-1841.927f, -1130.624f, 44.5578f));
                VectorList_01.Add(new Vector3(-1743.697f, -1180.515f, 43.03557f));
                VectorList_01.Add(new Vector3(-1587.45f, -1447.784f, 46.62258f));
                VectorList_01.Add(new Vector3(-1012.828f, -1792.611f, 42.19064f));
                vTarget_01 = new Vector3(-810.1065f, -1603.461f, 0.21f);//plane spawn point

                VehicleSpawn("Howard", vTarget_01, 131.772f, false, true, true, false, 2, 3, 66, MyLang.Maptext[6], 1, true);

                iTime_01.Add(0);//iColourTime   0

                iList_01.Add(0);//iColour       0
                iList_01.Add(0);//iCorronas     1
                iList_01.Add(0);//iLaptime     2

                fList_01.Add(0.00f);
                fList_01.Add(0.00f);
                fList_01.Add(0.00f);

                BeOnOff.Add(false);//PlaneSmoke
                BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[5], MyLang.Jobtext[25], 5000);
            }
            else if (iLocationX == 2)
            {
                vFuMiss = new Vector3(-752.767f, -243.5818f, 36.58149f);

                VectorList_01.Clear();
                VectorList_02.Clear();

                VectorList_01.Add(new Vector3(-1082.904f, -1262.042f, 5.601765f));//White Widow Garage -La Puerta--Area 2
                VectorList_01.Add(new Vector3(274.8883f, -3015.478f, 5.697752f));//Pier 400 Utility Building -Elysian Island--Area 1
                VectorList_01.Add(new Vector3(51.19014f, -2571.348f, 6.004592f));//Pacific Bait Storage -Elysian Island--Area 1
                VectorList_01.Add(new Vector3(-424.7138f, 185.4996f, 80.79431f));//Foreclosed Garage -West Vinewood--Area 2
                VectorList_01.Add(new Vector3(247.5364f, -1956.876f, 23.20047f));//Convenience Store Lockup -Rancho--Area 1
                VectorList_01.Add(new Vector3(896.3674f, -1036.089f, 35.11144f)); //Celltowa Unit -La Mesa--Area 1
                VectorList_01.Add(new Vector3(499.7f, -652.116f, 24.90832f));  //Railyard Warehouse -La Mesa--Area 1
                VectorList_01.Add(new Vector3(539.6681f, -1945.474f, 24.98463f));   //Old Power Station -Rancho--Area 1
                VectorList_01.Add(new Vector3(-315.2117f, -2698.162f, 7.550228f));  //LS Marine Building 3 -Elysian Island--Area 1
                VectorList_01.Add(new Vector3(1569.585f, -2130.049f, 78.33009f));   //GEE Warehouse -El Burro Heights--Area 4
                VectorList_01.Add(new Vector3(-528.1617f, -1784.413f, 21.5696f));   //Fridgit Annexe -La Puerta--Area 1
                VectorList_01.Add(new Vector3(-324.7966f, -1356.194f, 31.29572f));  //Disused Factory Outlet -Strawberry--Area 1
                VectorList_01.Add(new Vector3(367.8993f, 351.118f, 103.116f)); // Discount Retail Unit -Downtown Vinewood--Area 2
                VectorList_01.Add(new Vector3(-1268.326f, -812.3163f, 17.10782f)); //Derriere Lingerie Backlot -Del Perro--Area 2
                VectorList_01.Add(new Vector3(-1042.583f, -2023.351f, 13.16157f)); //Xero Gas Factory -LSIA--Area 1 
                VectorList_01.Add(new Vector3(1037.856f, -2173.218f, 31.53337f));   //Wholesale Furniture -Cypress Flats--Area 1 
                VectorList_01.Add(new Vector3(-245.2137f, 203.542f, 83.92123f));    //West Vinewood Backlot -West Vinewood--Area 2
                VectorList_01.Add(new Vector3(95.99369f, -2216.351f, 6.171199f));   //Walker & Sons Warehouse -Banning--Area 1
                VectorList_01.Add(new Vector3(926.5911f, -1560.207f, 30.74203f));   //Logistics Depot -La Mesa--Area 1
                VectorList_01.Add(new Vector3(759.4894f, -909.5288f, 25.28011f));   //Darnel Bros Warehouse -La Mesa--Area 1
                VectorList_01.Add(new Vector3(1017.381f, -2529.118f, 28.30198f));   //Cypress Warehouses -Cypress Flats--Area 1
                VectorList_01.Add(new Vector3(-863.278f, -2717.185f, 13.93703f)); //Bilgeco Warehouse -LSIA--Area 1
                VectorList_01.Add(new Vector3(1213.582f, -1256.47f, 35.22673f));   //Murrieta Heights--Area 4
                VectorList_01.Add(new Vector3(-514.9291f, -2202.32f, 6.394022f));   //LSIA_2--Area 1
                VectorList_01.Add(new Vector3(-1151.348f, -2171.485f, 13.27091f));  //LSIA_1--Area 1
                VectorList_01.Add(new Vector3(-632.261f, -1779.464f, 23.99491f));   //La Puerta--Area 1
                VectorList_01.Add(new Vector3(1002.028f, -1855.53f, 31.03982f));    //La Mesa--Area 1
                VectorList_01.Add(new Vector3(144.3457f, -3005.535f, 7.030923f));   //Elysian Island--Area 1
                VectorList_01.Add(new Vector3(1754.477f, -1649.149f, 112.6555f));   //El Burro Heights--Area 4
                VectorList_01.Add(new Vector3(-72.075f, -1821.423f, 26.94197f));    //Davis--Area 1
                VectorList_01.Add(new Vector3(804.5797f, -2220.493f, 29.44927f)); //Cypress Flats--Area 1

                VectorList_02.Add(new Vector3(-1071.595f, -1257.742f, 5.765803f));
                VectorList_02.Add(new Vector3(265.5325f, -3013.481f, 5.733489f));
                VectorList_02.Add(new Vector3(53.12275f, -2555.897f, 6.000017f));
                VectorList_02.Add(new Vector3(-440.39f, 184.3075f, 75.24253f));
                VectorList_02.Add(new Vector3(235.1687f, -1939.101f, 23.467f));
                VectorList_02.Add(new Vector3(899.2383f, -1021.448f, 34.96652f));
                VectorList_02.Add(new Vector3(512.4969f, -646.7656f, 24.75116f));
                VectorList_02.Add(new Vector3(566.2303f, -1947.01f, 24.77984f));
                VectorList_02.Add(new Vector3(-299.1319f, -2700.198f, 6.000292f));
                VectorList_02.Add(new Vector3(1553.864f, -2141.628f, 77.51177f));
                VectorList_02.Add(new Vector3(-531.0887f, -1769.243f, 21.3567f));
                VectorList_02.Add(new Vector3(-338.617f, -1375.384f, 31.29641f));
                VectorList_02.Add(new Vector3(363.4832f, 318.7624f, 103.5593f));
                VectorList_02.Add(new Vector3(-1278.058f, -818.5338f, 17.11186f));
                VectorList_02.Add(new Vector3(-1062.267f, -2021.632f, 13.16158f));
                VectorList_02.Add(new Vector3(1065.253f, -2174.105f, 31.85984f));
                VectorList_02.Add(new Vector3(-260.1906f, 193.9405f, 85.02009f));
                VectorList_02.Add(new Vector3(89.80456f, -2215.411f, 6.049509f));
                VectorList_02.Add(new Vector3(910.07f, -1561.849f, 30.74919f));
                VectorList_02.Add(new Vector3(772.2822f, -908.2357f, 25.27207f));
                VectorList_02.Add(new Vector3(1004.686f, -2510.55f, 28.30198f));
                VectorList_02.Add(new Vector3(-887.592f, -2731.941f, 13.82849f));
                VectorList_02.Add(new Vector3(1204.382f, -1266.914f, 35.22673f));
                VectorList_02.Add(new Vector3(-498.4551f, -2180.958f, 7.789339f));
                VectorList_02.Add(new Vector3(-1165.239f, -2188.126f, 13.19559f));
                VectorList_02.Add(new Vector3(-640.1238f, -1792.985f, 24.17831f));
                VectorList_02.Add(new Vector3(1007.468f, -1864.927f, 30.88983f));
                VectorList_02.Add(new Vector3(133.2242f, -2988.763f, 7.030922f));
                VectorList_02.Add(new Vector3(1778.321f, -1664.141f, 112.6454f));
                VectorList_02.Add(new Vector3(-60.11577f, -1834.603f, 26.73312f));
                VectorList_02.Add(new Vector3(810.2488f, -2236.852f, 29.70855f));

                vTarget_01 = new Vector3(-760.15f, -226.8486f, 36.28f);
                int iRandStar = FindRandom(5, 0, VectorList_01.Count - 1);
                vTarget_02 = VectorList_02[iRandStar];
                vTarget_03 = VectorList_01[iRandStar];

                int iRandomDrops = RandInt(1, 4);
                if (iRandomDrops == 1)
                {
                    vTarget_04 = new Vector3(-75.10117f, -819.2855f, 326.1752f);
                    vTarget_05 = new Vector3(-75.07004f, -824.8751f, 321.2919f);
                }
                else if (iRandomDrops == 2)
                {
                    vTarget_04 = new Vector3(-144.6091f, -593.4995f, 211.7752f);
                    vTarget_05 = new Vector3(-136.1827f, -596.647f, 206.9157f);
                }
                else if (iRandomDrops == 3)
                {
                    vTarget_04 = new Vector3(-1391.722f, -477.6622f, 91.25081f);
                    vTarget_05 = new Vector3(-1369.462f, -471.949f, 84.44692f);
                }
                else
                {
                    vTarget_04 = new Vector3(-1582.136f, -569.4719f, 116.3276f);
                    vTarget_05 = new Vector3(-1561.048f, -569.0844f, 114.4493f);
                }

                Vector3 Pos = new Vector3(-738.2433f, -222.94f, 47.47f);
                VehicleSpawn("Volatus", Pos, 252.7368f, false, true, false, false, 2, 4, 0, "", 1, false);
                BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[5], MyLang.Jobtext[26], 5000);
            }
            else if (iLocationX == 3)
            {
                MultiPed.Clear();
                vFuMiss = new Vector3(-2471.704f, 3226.925f, 32.31913f);

                VTBTimerPool.Add(ttTextBar_01);
                ttTextBar_01.Label = "" + MyLang.Othertext[0] + "";
                BeOnOff.Clear();
                iTime_01.Clear();

                vTarget_01 = new Vector3(-1576.321f, 2786.125f, 15.9334f);
                vTarget_02 = new Vector3(-2477.7f, 3258.43f, 31.77f);
                vTarget_03 = new Vector3(1713.36f, 3253.13f, 40.07f);
                vTarget_04 = new Vector3(2127.9f, 4806.1f, 40.19f);
                iMissionVar_01 = 0;
                VehicleSpawn("Strikeforce", vTarget_02, 160.00f, false, true, true, false, 5, 6, 66, MyLang.Maptext[6], 1, true);

                BeOnOff.Add(true); //   bInFort             0

                iTime_01.Add(0);//      iDogTimer   0 
                BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[5], MyLang.Jobtext[27], 5000);
            }
            else if (iLocationX == 4)
            {
                vFuMiss = new Vector3(2558.651f, -344.7433f, 92.48465f);
                BeOnOff.Clear();
                vTarget_01 = new Vector3(2543.80f, -334.29f, 93.10f);
                vTarget_02 = new Vector3(2539.93f, -330.10f, 96.70f);
                vTarget_03 = new Vector3(2510.70f, -342.00f, 117.13f);
                int iRandomDrops = RandInt(1, 3);
                if (iRandomDrops == 1)
                {
                    PropList_01.Clear();
                    VectorList_01.Clear();
                    string Bargey = "prop_ind_barge_01_cr";
                    Vector3 posy = new Vector3(3670.565f, 2609.00f, 0.10f);
                    Vector3 Rota = new Vector3(0.00f, 0.00f, 98.40f);
                    BuildProp(Bargey, posy, Rota, true, true);

                    posy = new Vector3(3637.07f, 2528.74f, 0.10f);
                    Rota = new Vector3(0.00f, 0.00f, -169.60f);
                    BuildProp(Bargey, posy, Rota, true, true);

                    vTarget_04 = new Vector3(3611.642f, 2528.678f, 512.2806f);
                    Vector3 vHere_02 = new Vector3(2995.679f, 2217.538f, 515.8416f);
                    Vector3 vHere_03 = new Vector3(2713.421f, 2018.943f, 465.5262f);
                    Vector3 vHere_04 = new Vector3(2197.234f, 1622.248f, 445.9396f);
                    Vector3 vHere_05 = new Vector3(1822.196f, 1146.567f, 460.0574f);
                    Vector3 vHere_06 = new Vector3(1359.407f, 494.0837f, 442.5105f);
                    Vector3 vHere_07 = new Vector3(995.6508f, -0.3318772f, 394.4747f);
                    Vector3 vHere_08 = new Vector3(431.698f, -806.3925f, 306.9451f);
                    Vector3 vHere_09 = new Vector3(-253.8699f, -1835.442f, 227.2719f);
                    vTarget_05 = new Vector3(-505.2578f, -2193.864f, 31.27496f);
                    VectorList_01.Add(vTarget_05);
                    VectorList_01.Add(vHere_09);
                    VectorList_01.Add(vHere_08);
                    VectorList_01.Add(vHere_07);
                    VectorList_01.Add(vHere_06);
                    VectorList_01.Add(vHere_05);
                    VectorList_01.Add(vHere_04);
                    VectorList_01.Add(vHere_03);
                    VectorList_01.Add(vHere_02);
                }
                else if (iRandomDrops == 2)
                {
                    PropList_01.Clear();
                    VectorList_01.Clear();
                    string sBargey = "prop_ind_barge_01_cr";
                    Vector3 posy = new Vector3(-3300.00f, 2437.00f, 0.10f);
                    Vector3 Rota = new Vector3(0.00f, 0.00f, -90.40f);
                    BuildProp(sBargey, posy, Rota, true, true);
                    posy = new Vector3(-3296.00f, 2407.21f, 1.00f);
                    Rota = new Vector3(0.00f, 0.00f, 178.50f);
                    BuildProp(sBargey, posy, Rota, true, true);
                    vTarget_04 = new Vector3(-3300.00f, 2437.00f, 521.408f);
                    Vector3 vHere_02 = new Vector3(-2504.913f, 1880.594f, 490.6801f);
                    Vector3 vHere_03 = new Vector3(-1913.291f, 1420.218f, 433.8033f);
                    Vector3 vHere_04 = new Vector3(-1403.295f, 1085.122f, 403.0447f);
                    Vector3 vHere_05 = new Vector3(-949.6682f, 701.1384f, 383.1638f);
                    Vector3 vHere_06 = new Vector3(-304.0422f, 172.7121f, 319.8065f);
                    Vector3 vHere_07 = new Vector3(315.7495f, -336.6328f, 259.5117f);
                    Vector3 vHere_08 = new Vector3(1495.177f, -1398.264f, 187.2499f);
                    Vector3 vHere_09 = new Vector3(1665.258f, -1532.604f, 204.2363f);
                    vTarget_05 = new Vector3(1764.635f, -1650.477f, 124.0762f);
                    VectorList_01.Add(vTarget_05);
                    VectorList_01.Add(vHere_09);
                    VectorList_01.Add(vHere_08);
                    VectorList_01.Add(vHere_07);
                    VectorList_01.Add(vHere_06);
                    VectorList_01.Add(vHere_05);
                    VectorList_01.Add(vHere_04);
                    VectorList_01.Add(vHere_03);
                    VectorList_01.Add(vHere_02);
                }
                else
                {
                    PropList_01.Clear();
                    VectorList_01.Clear();
                    string sBargey = "prop_ind_barge_01_cr";
                    Vector3 posy = new Vector3(-2333.73f, 5065.85f, 0.10f);
                    Vector3 Rota = new Vector3(0.00f, 0.00f, -90.40f);
                    BuildProp(sBargey, posy, Rota, true, true);
                    posy = new Vector3(-2306.34f, 5148.768f, 0.10f);
                    Rota = new Vector3(0.00f, 0.00f, 178.50f);
                    BuildProp(sBargey, posy, Rota, true, true);
                    vTarget_04 = new Vector3(-2335.00f, 5127.00f, 529.949f);
                    Vector3 vHere_02 = new Vector3(-2061.499f, 4527.216f, 495.0395f);
                    Vector3 vHere_03 = new Vector3(-1706.212f, 3642.564f, 397.6057f);
                    Vector3 vHere_04 = new Vector3(-1282.026f, 2777.223f, 380.9995f);
                    Vector3 vHere_05 = new Vector3(-685.1597f, 2187.614f, 379.6081f);
                    Vector3 vHere_06 = new Vector3(-224.9484f, 1741.988f, 393.4701f);
                    Vector3 vHere_07 = new Vector3(-4.271536f, 1384.082f, 377.8856f);
                    Vector3 vHere_08 = new Vector3(268.4175f, 854.5297f, 335.7408f);
                    Vector3 vHere_09 = new Vector3(526.3968f, 256.4404f, 297.1049f);
                    Vector3 vHere_10 = new Vector3(901.7145f, -528.7383f, 230.9604f);
                    Vector3 vHere_11 = new Vector3(1098.566f, -1081.197f, 206.9486f);
                    vTarget_05 = new Vector3(1203.487f, -1269.62f, 49.9391f);
                    VectorList_01.Add(vTarget_05);
                    VectorList_01.Add(vHere_11);
                    VectorList_01.Add(vHere_10);
                    VectorList_01.Add(vHere_09);
                    VectorList_01.Add(vHere_08);
                    VectorList_01.Add(vHere_07);
                    VectorList_01.Add(vHere_06);
                    VectorList_01.Add(vHere_05);
                    VectorList_01.Add(vHere_04);
                    VectorList_01.Add(vHere_03);
                    VectorList_01.Add(vHere_02);
                }

                BeOnOff.Add(false);//   bFlightHight  0
                VehicleSpawn("Buzzard", vTarget_03, 90.00f, false, true, true, false, 0, 0, 0, "", 1, false);
                BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[5], MyLang.Jobtext[28], 5000);
            }
            else if (iLocationX == 5)
            {
                vFuMiss = new Vector3(2167.74f, 4771.713f, 40.70564f);

                //Grapesead crop dusting...
                VTBTimerPool.Add(ttTextBar_01);
                ttTextBar_01.Label = "" + MyLang.Othertext[5] + "";
                BeOnOff.Clear();
                iTime_01.Clear();
                VectorList_01.Clear();

                iTime_01.Add(0);//                  iPosionTime     0

                vTarget_01 = new Vector3(2130.47f, 4812.37f, 40.22f);
                vTarget_02 = new Vector3(1833.0f, 4667.55f, 65.0f);
                int iRandomDrops = FindRandom(6, 1, 5);
                if (iRandomDrops == 1)
                {
                    iTime_01[0] = 14000;
                    Vector3 vHere_01 = new Vector3(2448.722f, 4809.713f, 55.75618f);
                    Vector3 vHere_02 = new Vector3(2505.565f, 4865.3f, 55.75618f);
                    Vector3 vHere_03 = new Vector3(2478.393f, 4844.374f, 55.75618f);
                    Vector3 vHere_04 = new Vector3(2552.147f, 4779.53f, 55.75618f);
                    Vector3 vHere_05 = new Vector3(2614.088f, 4768.742f, 55.75618f);
                    Vector3 vHere_06 = new Vector3(2532.115f, 4842.767f, 55.75618f);
                    VectorList_01.Add(vHere_06);
                    VectorList_01.Add(vHere_05);
                    VectorList_01.Add(vHere_04);
                    VectorList_01.Add(vHere_03);
                    VectorList_01.Add(vHere_02);
                    VectorList_01.Add(vHere_01);
                }
                else if (iRandomDrops == 2)
                {
                    iTime_01[0] = 14000;
                    Vector3 vHere_01 = new Vector3(2576.481f, 4765.511f, 60.00237f);
                    Vector3 vHere_02 = new Vector3(2671.52f, 4668.758f, 60.00237f);
                    Vector3 vHere_03 = new Vector3(2572.585f, 4658.025f, 60.00237f);
                    Vector3 vHere_04 = new Vector3(2676.44f, 4525.318f, 60.00237f);
                    Vector3 vHere_05 = new Vector3(2602.719f, 4587.295f, 60.00237f);
                    Vector3 vHere_06 = new Vector3(2527.707f, 4515.359f, 60.00237f);
                    VectorList_01.Add(vHere_06);
                    VectorList_01.Add(vHere_05);
                    VectorList_01.Add(vHere_04);
                    VectorList_01.Add(vHere_03);
                    VectorList_01.Add(vHere_02);
                    VectorList_01.Add(vHere_01);
                }
                else if (iRandomDrops == 3)
                {
                    iTime_01[0] = 14000;
                    Vector3 vHere_01 = new Vector3(2849.052f, 4730.358f, 70.11709f);
                    Vector3 vHere_02 = new Vector3(2886.181f, 4596.32f, 70.11709f);
                    Vector3 vHere_03 = new Vector3(2815.923f, 4723.78f, 70.11709f);
                    Vector3 vHere_04 = new Vector3(2839.474f, 4581.26f, 70.11709f);
                    Vector3 vHere_05 = new Vector3(2860.864f, 4660.234f, 70.11709f);
                    Vector3 vHere_06 = new Vector3(2955.208f, 4681.459f, 70.11709f);
                    VectorList_01.Add(vHere_06);
                    VectorList_01.Add(vHere_05);
                    VectorList_01.Add(vHere_04);
                    VectorList_01.Add(vHere_03);
                    VectorList_01.Add(vHere_02);
                    VectorList_01.Add(vHere_01);
                }
                else if (iRandomDrops == 4)
                {
                    iTime_01[0] = 14000;
                    Vector3 vHere_01 = new Vector3(801.4687f, 6461.438f, 60.01804f);
                    Vector3 vHere_02 = new Vector3(613.8648f, 6482.624f, 60.01804f);
                    Vector3 vHere_03 = new Vector3(353.5813f, 6470.871f, 60.01804f);
                    Vector3 vHere_04 = new Vector3(217.6227f, 6462.814f, 60.01804f);
                    Vector3 vHere_05 = new Vector3(124.6508f, 6506.21f, 60.01804f);
                    Vector3 vHere_06 = new Vector3(374.664f, 6520.164f, 60.01804f);
                    VectorList_01.Add(vHere_06);
                    VectorList_01.Add(vHere_05);
                    VectorList_01.Add(vHere_04);
                    VectorList_01.Add(vHere_03);
                    VectorList_01.Add(vHere_02);
                    VectorList_01.Add(vHere_01);
                }
                else
                {
                    iTime_01[0] = 14000;
                    Vector3 vHere_01 = new Vector3(-1880.2f, 2107.816f, 163.7816f);
                    Vector3 vHere_02 = new Vector3(-1866.956f, 2270.744f, 99.97744f);
                    Vector3 vHere_03 = new Vector3(-1834.532f, 2114.699f, 154.4291f);
                    Vector3 vHere_04 = new Vector3(-1781.521f, 2252.621f, 115.4473f);
                    Vector3 vHere_05 = new Vector3(-1600.278f, 2192.43f, 106.3301f);
                    Vector3 vHere_06 = new Vector3(-1767.172f, 2377.229f, 78.32089f);
                    VectorList_01.Add(vHere_06);
                    VectorList_01.Add(vHere_05);
                    VectorList_01.Add(vHere_04);
                    VectorList_01.Add(vHere_03);
                    VectorList_01.Add(vHere_02);
                    VectorList_01.Add(vHere_01);
                }

                BeOnOff.Add(false);//       bNonLoopFx  0 
                BeOnOff.Add(false);//       bDustTogg   1
                BeOnOff.Add(false);//       bEcoMental  2 

                VehicleSpawn("Duster", vTarget_01, 117.50f, false, true, true, false, 0, 0, 66, MyLang.Maptext[6], 1, false);
                BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[5], MyLang.Jobtext[29], 5000);
            }
            else
            {
                VectorList_01.Clear();
                BeOnOff.Clear();
                VTBTimerPool.Add(ttTextBar_01);
                ttTextBar_01.Label = "" + MyLang.Othertext[6] + "";

                vFuMiss = new Vector3(-279.6988f, 6106.246f, 30.70985f);

                vTarget_01 = new Vector3(-279.598f, 6130.19f, 31.28f);//rota 262.7
                vTarget_02 = new Vector3(-267.95f, 6141f, 31.53f);//rota 121

                List<Vector3> Higgs = new List<Vector3>();

                int iRandFirst = RandInt(1, 5);
                if (iRandFirst == 1)
                    Higgs.Add(new Vector3(3099.649f, 6041.718f, 123.2769f));
                else if (iRandFirst == 2)
                    Higgs.Add(new Vector3(2827.337f, 5966.326f, 351.5675f));
                else if (iRandFirst == 3)
                    Higgs.Add(new Vector3(3321.136f, 5147.967f, 18.30022f));
                else if (iRandFirst == 4)
                    Higgs.Add(new Vector3(499.3408f, 5591.032f, 795.0212f));
                else
                    Higgs.Add(new Vector3(1511.96f, 6626.829f, 2.50751f));
                iRandFirst = RandInt(1, 5);
                if (iRandFirst == 1)
                    Higgs.Add(new Vector3(34.92531f, 6942f, 16.43684f));
                else if (iRandFirst == 2)
                    Higgs.Add(new Vector3(-207.7613f, 6546.077f, 11.09517f));
                else if (iRandFirst == 3)
                    Higgs.Add(new Vector3(-987.3856f, 6248.711f, 2.825436f));
                else if (iRandFirst == 4)
                    Higgs.Add(new Vector3(-1577.118f, 5158.229f, 19.9019f));
                else
                    Higgs.Add(new Vector3(-2197.535f, 5179.065f, 15.65481f));
                iRandFirst = RandInt(1, 5);
                if (iRandFirst == 1)
                    Higgs.Add(new Vector3(-925.0684f, 4837.404f, 308.8438f));
                else if (iRandFirst == 2)
                    Higgs.Add(new Vector3(-2411.968f, 4233.252f, 10.08531f));
                else if (iRandFirst == 3)
                    Higgs.Add(new Vector3(-3112.612f, 3409.361f, 2.275631f));
                else if (iRandFirst == 4)
                    Higgs.Add(new Vector3(1312.213f, 4327.11f, 38.16022f));
                else
                    Higgs.Add(new Vector3(-768.5018f, 5543.954f, 33.48962f));
                iRandFirst = RandInt(1, 5);
                if (iRandFirst == 1)
                    Higgs.Add(new Vector3(246.9969f, 7431.734f, 17.13332f));
                else if (iRandFirst == 2)
                    Higgs.Add(new Vector3(1856.761f, 6401.458f, 46.38666f));
                else if (iRandFirst == 3)
                    Higgs.Add(new Vector3(3676.37f, 4977.885f, 15.71186f));
                else if (iRandFirst == 4)
                    Higgs.Add(new Vector3(3633.82f, 5670.996f, 8.751589f));
                else
                    Higgs.Add(new Vector3(-1178.777f, 3843.314f, 487.167f));
                VectorList_01 = ListReverseVec3(FarToNear(Higgs, vTarget_01));
                BeOnOff.Add(false);// bGetInHeli    0 
                VehicleSpawn("Swift", vTarget_01, 262.7f, false, true, true, false, 24, 0, 66, MyLang.Maptext[5], 1, false);
                BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[5], MyLang.Jobtext[30], 5000);
            }

            bOnTheJob = true;
        }
        private void Ambulance()
        {
            LogThis("Ambulance");

            fList_01.Clear();
            sList_01.Clear();
            VectorList_01.Clear();
            VectorList_02.Clear();
            BeOnOff.Clear();
            iTime_01.Clear();
            iList_01.Clear();
            string sHospital = "";

            VectorList_02.Add(new Vector3(294.84f, -1439.035f, 28.8041f));
            VectorList_02.Add(new Vector3(363.3773f, -588.3364f, 27.683f));
            VectorList_02.Add(new Vector3(-492.237f, -334.1218f, 33.37f));
            VectorList_02.Add(new Vector3(1153.971f, -1514.0f, 33.69f));
            VectorList_02.Add(new Vector3(1813.8746f, 3686.3318f, 33.2243f));
            VectorList_02.Add(new Vector3(-229.238f, 6312.495f, 30.3f));
            int iTotals = 0;

            if (iLocationX == 1)
            {
                vFuMiss = new Vector3(349.6006f, -1487.052f, 28.75062f);

                VectorList_01.Add(new Vector3(1295.991f, -1588.85f, 52.19732f));
                VectorList_01.Add(new Vector3(-307.0375f, -1189.777f, 24.1509f));
                VectorList_01.Add(new Vector3(-348.3725f, -1314f, 31.40127f));
                VectorList_01.Add(new Vector3(-332.9052f, -1565.624f, 25.23175f));
                VectorList_01.Add(new Vector3(-232.7374f, -1369.014f, 31.25828f));
                VectorList_01.Add(new Vector3(-177.1512f, -1274.484f, 32.59555f));
                VectorList_01.Add(new Vector3(-58.69757f, -1223.602f, 28.71806f));
                VectorList_01.Add(new Vector3(4.041627f, -1306.417f, 30.16679f));
                VectorList_01.Add(new Vector3(4.798547f, -1214.869f, 26.70302f));
                VectorList_01.Add(new Vector3(156.0699f, -1222.187f, 29.5406f));
                VectorList_01.Add(new Vector3(135.7204f, -1320.296f, 29.20231f));
                VectorList_01.Add(new Vector3(259.1181f, -1205.05f, 29.28905f));
                VectorList_01.Add(new Vector3(301.2187f, -1249.861f, 29.44078f));
                VectorList_01.Add(new Vector3(442.3185f, -1244.345f, 30.26213f));
                VectorList_01.Add(new Vector3(473.2682f, -1283.217f, 29.53937f));
                VectorList_01.Add(new Vector3(476.9983f, -1524.71f, 29.30152f));
                VectorList_01.Add(new Vector3(417.7134f, -1541.646f, 29.2505f));
                VectorList_01.Add(new Vector3(543.3961f, -1602.051f, 28.65779f));
                VectorList_01.Add(new Vector3(288.6476f, -1601.094f, 31.26226f));
                VectorList_01.Add(new Vector3(131.9738f, -1545.597f, 29.24033f));
                VectorList_01.Add(new Vector3(124.1449f, -1487.002f, 29.14162f));
                VectorList_01.Add(new Vector3(37.06306f, -1456.389f, 29.3117f));
                VectorList_01.Add(new Vector3(-132.3365f, -1419.739f, 31.30029f));
                VectorList_01.Add(new Vector3(-219.7744f, -1530.927f, 31.61536f));
                VectorList_01.Add(new Vector3(-265.1535f, -1571.182f, 32.06605f));
                VectorList_01.Add(new Vector3(-302.5743f, -1641.343f, 32.18322f));
                VectorList_01.Add(new Vector3(-8.088839f, -1494.789f, 30.08593f));
                VectorList_01.Add(new Vector3(11.41061f, -1607.148f, 29.39714f));
                VectorList_01.Add(new Vector3(60.42377f, -1619.376f, 29.42404f));
                VectorList_01.Add(new Vector3(-41.85682f, -1676.044f, 29.4227f));
                VectorList_01.Add(new Vector3(-150.7254f, -1623.922f, 33.65359f));
                VectorList_01.Add(new Vector3(8.481181f, -1727.738f, 29.30294f));
                VectorList_01.Add(new Vector3(-14.10281f, -1816.332f, 25.85069f));
                VectorList_01.Add(new Vector3(190.6884f, -1843.94f, 27.20505f));
                VectorList_01.Add(new Vector3(168.1409f, -1715.241f, 29.29168f));
                VectorList_01.Add(new Vector3(229.2058f, -1761.528f, 28.6836f));
                VectorList_01.Add(new Vector3(280.5085f, -1735.393f, 29.35996f));
                VectorList_01.Add(new Vector3(163.5823f, -1676.922f, 29.7743f));
                VectorList_01.Add(new Vector3(567.0923f, -1608.899f, 27.74163f));
                VectorList_01.Add(new Vector3(542.2665f, -1740.724f, 30.69151f));
                VectorList_01.Add(new Vector3(560.0998f, -1775.572f, 33.4808f));
                VectorList_01.Add(new Vector3(564.1755f, -1836.491f, 25.332f));
                VectorList_01.Add(new Vector3(600.1234f, -1875.706f, 24.85271f));
                VectorList_01.Add(new Vector3(516.8292f, -1947.492f, 24.98512f));
                VectorList_01.Add(new Vector3(445.7083f, -1901.135f, 26.69668f));
                VectorList_01.Add(new Vector3(219.2378f, -1993.643f, 19.67838f));
                VectorList_01.Add(new Vector3(182.7478f, -2029.663f, 18.24595f));
                VectorList_01.Add(new Vector3(421.1747f, -2058.19f, 22.28779f));
                VectorList_01.Add(new Vector3(367.4519f, -2118.551f, 16.34019f));
                VectorList_01.Add(new Vector3(585.4458f, -2073.127f, 15.60356f));
                VectorList_01.Add(new Vector3(543.8434f, -2406.682f, 5.871284f));
                VectorList_01.Add(new Vector3(477.4642f, -2250.117f, 5.917679f));
                VectorList_01.Add(new Vector3(395.1972f, -2214.458f, 5.917676f));
                VectorList_01.Add(new Vector3(240.7368f, -2210.84f, 8.013161f));
                VectorList_01.Add(new Vector3(131.5114f, -2204.566f, 7.186296f));
                VectorList_01.Add(new Vector3(280.5862f, -2168.832f, 12.64457f));
                VectorList_01.Add(new Vector3(99.07872f, -2067.101f, 17.68201f));
                VectorList_01.Add(new Vector3(-107.3909f, -1848.81f, 5.748288f));
                VectorList_01.Add(new Vector3(-559.9066f, -1456.414f, 10.88732f));
                VectorList_01.Add(new Vector3(-661.9313f, -1688.835f, 25.0436f));
                VectorList_01.Add(new Vector3(-603.6251f, -1781.529f, 23.64001f));
                VectorList_01.Add(new Vector3(-455.9268f, -1672.153f, 19.29108f));
                VectorList_01.Add(new Vector3(-497.0885f, -1752.62f, 18.30396f));
                VectorList_01.Add(new Vector3(-571.8822f, -1690.514f, 20.03663f));
                VectorList_01.Add(new Vector3(-489.2251f, -1641.585f, 18.20733f));
                VectorList_01.Add(new Vector3(-260.8029f, -1889.738f, 27.75541f));
                VectorList_01.Add(new Vector3(-275.4695f, -2100.006f, 22.04967f));
                VectorList_01.Add(new Vector3(-132.2104f, -1983.053f, 22.80532f));
                VectorList_01.Add(new Vector3(-565.9182f, -2237.333f, 5.917212f));
                VectorList_01.Add(new Vector3(-433.3442f, -2195.788f, 9.847511f));
                VectorList_01.Add(new Vector3(-385.141f, -2283.689f, 7.608184f));
                VectorList_01.Add(new Vector3(-177.4064f, -2270.748f, 7.821116f));
                VectorList_01.Add(new Vector3(-108.484f, -2234.651f, 7.811672f));
                VectorList_01.Add(new Vector3(-779.1458f, -2234.354f, 5.942057f));
                VectorList_01.Add(new Vector3(-747.5679f, -2086.397f, 12.7347f));
                VectorList_01.Add(new Vector3(-914.3769f, -2039.792f, 9.404987f));
                VectorList_01.Add(new Vector3(-1165.538f, -2047.71f, 14.51669f));
                VectorList_01.Add(new Vector3(-1214.923f, -2058.038f, 14.42374f));
                VectorList_01.Add(new Vector3(-876.9254f, -2149.601f, 8.929814f));
                VectorList_01.Add(new Vector3(-1057.923f, -2090.583f, 13.29208f));
                VectorList_01.Add(new Vector3(-925.5623f, -2344.835f, 6.763047f));
                VectorList_01.Add(new Vector3(-710.0975f, -2527.765f, 13.9444f));
                VectorList_01.Add(new Vector3(-811.5503f, -2780.453f, 13.94471f));
                VectorList_01.Add(new Vector3(-1033.112f, -2731.714f, 13.75664f));
                VectorList_01.Add(new Vector3(-890.3541f, -2385.502f, 14.02436f));
                VectorList_01.Add(new Vector3(-531.0646f, -2903.05f, 6.000385f));
                VectorList_01.Add(new Vector3(-335.2472f, -2793.107f, 5.000239f));
                VectorList_01.Add(new Vector3(-247.0453f, -2686.215f, 6.000299f));
                VectorList_01.Add(new Vector3(-372.5172f, -2667.43f, 6.020175f));
                VectorList_01.Add(new Vector3(-433.7004f, -2667.901f, 6.000216f));
                VectorList_01.Add(new Vector3(-337.6092f, -2439.792f, 6.000635f));
                VectorList_01.Add(new Vector3(-251.6559f, -2421.585f, 6.000635f));
                VectorList_01.Add(new Vector3(-110.3893f, -2565.354f, 6.00071f));
                VectorList_01.Add(new Vector3(-107.665f, -2674.75f, 6.006342f));
                VectorList_01.Add(new Vector3(-77.84619f, -2667.905f, 6.00266f));
                VectorList_01.Add(new Vector3(53.03234f, -2682.723f, 6.009068f));
                VectorList_01.Add(new Vector3(27.75469f, -2566.049f, 6.005089f));
                VectorList_01.Add(new Vector3(135.6209f, -2483.69f, 6.094528f));
                VectorList_01.Add(new Vector3(285.0528f, -2492.843f, 6.440169f));
                VectorList_01.Add(new Vector3(380.5201f, -2426.611f, 6.041658f));
                VectorList_01.Add(new Vector3(362.3727f, -2649.536f, 6.221566f));
                VectorList_01.Add(new Vector3(322.363f, -2758.287f, 5.996541f));
                VectorList_01.Add(new Vector3(287.2047f, -3000.646f, 5.759924f));
                VectorList_01.Add(new Vector3(266.4539f, -3232.93f, 5.790268f));
                VectorList_01.Add(new Vector3(160.1541f, -3321.103f, 5.992997f));
                VectorList_01.Add(new Vector3(122.4961f, -3180.883f, 5.956728f));
                VectorList_01.Add(new Vector3(142.343f, -3103.598f, 5.896312f));
                VectorList_01.Add(new Vector3(671.1514f, -2657.151f, 6.081183f));
                VectorList_01.Add(new Vector3(658.5178f, -3018.126f, 6.045217f));
                VectorList_01.Add(new Vector3(451.8949f, -2932.97f, 6.040792f));
                VectorList_01.Add(new Vector3(439.1473f, -2737.697f, 6.668174f));
                VectorList_01.Add(new Vector3(473.197f, -2571.102f, 6.375737f));
                VectorList_01.Add(new Vector3(841.8812f, -3205.756f, 6.004801f));
                VectorList_01.Add(new Vector3(834.9917f, -3346.321f, 5.900516f));
                VectorList_01.Add(new Vector3(1241.977f, -3238.619f, 6.028767f));
                VectorList_01.Add(new Vector3(1293.745f, -3094.569f, 5.906603f));
                VectorList_01.Add(new Vector3(1043.904f, -2979.187f, 5.901051f));
                VectorList_01.Add(new Vector3(1112.307f, -3031.898f, 5.901045f));
                VectorList_01.Add(new Vector3(1002.462f, -3090.521f, 5.90104f));
                VectorList_01.Add(new Vector3(944.5012f, -3085.445f, 5.900763f));
                VectorList_01.Add(new Vector3(853.6526f, -3096.722f, 5.900853f));
                VectorList_01.Add(new Vector3(702.4927f, -2332.333f, 25.25414f));
                VectorList_01.Add(new Vector3(706.869f, -2105.826f, 29.16093f));
                VectorList_01.Add(new Vector3(851.0704f, -2129.359f, 30.29191f));
                VectorList_01.Add(new Vector3(833.6018f, -2309.2f, 30.49599f));
                VectorList_01.Add(new Vector3(804.8823f, -2373.59f, 29.09732f));
                VectorList_01.Add(new Vector3(924.3118f, -2532.779f, 28.30266f));
                VectorList_01.Add(new Vector3(1073.938f, -2444.706f, 29.27938f));
                VectorList_01.Add(new Vector3(976.6308f, -2360.208f, 31.82376f));
                VectorList_01.Add(new Vector3(1017.847f, -2193.912f, 31.53337f));
                VectorList_01.Add(new Vector3(1126.734f, -2303.074f, 30.71645f));
                VectorList_01.Add(new Vector3(1128.196f, -2068.839f, 31.01188f));
                VectorList_01.Add(new Vector3(1105.453f, -1984.081f, 31.01881f));
                VectorList_01.Add(new Vector3(1027.578f, -1879.27f, 37.38991f));
                VectorList_01.Add(new Vector3(1073.075f, -1840.03f, 37.30691f));
                VectorList_01.Add(new Vector3(942.8682f, -1721.185f, 30.4981f));
                VectorList_01.Add(new Vector3(750.1907f, -1941.338f, 29.19209f));
                VectorList_01.Add(new Vector3(769.6085f, -1642.769f, 30.14714f));
                VectorList_01.Add(new Vector3(923.7332f, -1521.389f, 31.03543f));
                VectorList_01.Add(new Vector3(1003.24f, -1563.05f, 30.75877f));
                VectorList_01.Add(new Vector3(998.4811f, -1489.542f, 31.39792f));
                VectorList_01.Add(new Vector3(982.7969f, -1379.169f, 31.48456f));
                VectorList_01.Add(new Vector3(1193.731f, -1266.771f, 35.19605f));
                VectorList_01.Add(new Vector3(1328.51f, -1661.897f, 51.23643f));
                VectorList_01.Add(new Vector3(1336.514f, -1848.901f, 57.08916f));
                VectorList_01.Add(new Vector3(1251.493f, -1965.263f, 44.3163f));
                VectorList_01.Add(new Vector3(1251.912f, -2288.496f, 50.93319f));
                VectorList_01.Add(new Vector3(1260.006f, -2567.281f, 42.71802f));
                VectorList_01.Add(new Vector3(1528.078f, -2539.776f, 57.22543f));
                VectorList_01.Add(new Vector3(1567.723f, -2164.728f, 77.56761f));
                VectorList_01.Add(new Vector3(1363.382f, -2100.701f, 51.99954f));
                VectorList_01.Add(new Vector3(1454.57f, -1893.724f, 71.86729f));
                VectorList_01.Add(new Vector3(1592.455f, -1693.269f, 88.09962f));
                VectorList_01.Add(new Vector3(1691.731f, -1654.241f, 112.4008f));

                vGetaway = new Vector3(328.9428f, -1472.228f, 29.51733f);
                fGetDir = 231.2519f;

                sHospital = "Central Los Santos Medical Center";

                iTotals = FindRandom(36, 0, VectorList_01.Count - 1);
            }
            else if (iLocationX == 2)
            {
                vFuMiss = new Vector3(366.1713f, -540.9857f, 28.22815f);

                VectorList_01.Add(new Vector3(-1275.577f, 312.0424f, 65.51177f));
                VectorList_01.Add(new Vector3(-1152.01f, 72.72306f, 57.15506f));
                VectorList_01.Add(new Vector3(-1097.044f, 68.95177f, 54.02635f));
                VectorList_01.Add(new Vector3(-952.0342f, -77.34747f, 40.06761f));
                VectorList_01.Add(new Vector3(-1103.319f, -115.9165f, 41.55255f));
                VectorList_01.Add(new Vector3(-1236.093f, -4.297013f, 48.26363f));
                VectorList_01.Add(new Vector3(-1341.863f, 59.95958f, 55.24566f));
                VectorList_01.Add(new Vector3(-1349.179f, 22.04873f, 53.45015f));
                VectorList_01.Add(new Vector3(-1353.893f, -140.0306f, 49.57463f));
                VectorList_01.Add(new Vector3(-1412.771f, -139.7202f, 48.76534f));
                VectorList_01.Add(new Vector3(-1376.375f, -172.628f, 47.46911f));
                VectorList_01.Add(new Vector3(-1478.465f, -160.9035f, 48.82884f));
                VectorList_01.Add(new Vector3(-1323.68f, -252.9121f, 42.29361f));
                VectorList_01.Add(new Vector3(-1231.259f, -171.5737f, 39.3256f));
                VectorList_01.Add(new Vector3(-1167.888f, -233.8117f, 37.94518f));
                VectorList_01.Add(new Vector3(-1158.482f, -346.2335f, 36.64722f));
                VectorList_01.Add(new Vector3(-1302.805f, -453.5108f, 34.78057f));
                VectorList_01.Add(new Vector3(-1378.877f, -322.5248f, 39.86762f));
                VectorList_01.Add(new Vector3(-1407.346f, -254.5081f, 46.37916f));
                VectorList_01.Add(new Vector3(-1499.574f, -297.3288f, 48.69509f));
                VectorList_01.Add(new Vector3(-1552.723f, -264.136f, 48.26653f));
                VectorList_01.Add(new Vector3(-1479.695f, -337.8638f, 45.87229f));
                VectorList_01.Add(new Vector3(-1345.13f, -511.3288f, 23.26935f));
                VectorList_01.Add(new Vector3(-1552.965f, -580.7216f, 33.94003f));
                VectorList_01.Add(new Vector3(-1623.234f, -639.0882f, 32.66094f));
                VectorList_01.Add(new Vector3(-1667.016f, -508.0188f, 37.28838f));
                VectorList_01.Add(new Vector3(-1717.021f, -490.4058f, 41.61931f));
                VectorList_01.Add(new Vector3(-1929.574f, -384.9653f, 48.64286f));
                VectorList_01.Add(new Vector3(-2039.735f, -369.8246f, 44.10654f));
                VectorList_01.Add(new Vector3(-1823.997f, -370.9774f, 49.38745f));
                VectorList_01.Add(new Vector3(-1775.679f, -387.3345f, 46.47361f));
                VectorList_01.Add(new Vector3(-1662.762f, -385.4789f, 44.84059f));
                VectorList_01.Add(new Vector3(-1636.514f, -397.4153f, 43.01781f));
                VectorList_01.Add(new Vector3(-1561.058f, -414.9048f, 38.09902f));
                VectorList_01.Add(new Vector3(-1450.759f, -693.9831f, 26.3128f));
                VectorList_01.Add(new Vector3(-1355.457f, -599.0952f, 28.61878f));
                VectorList_01.Add(new Vector3(-1306.464f, -572.8126f, 29.30234f));
                VectorList_01.Add(new Vector3(-1212.349f, -722.1855f, 21.60095f));
                VectorList_01.Add(new Vector3(-1120.565f, -850.2847f, 19.69294f));
                VectorList_01.Add(new Vector3(-1179.563f, -903.1732f, 13.55116f));
                VectorList_01.Add(new Vector3(-1241.368f, -864.1287f, 12.7232f));
                VectorList_01.Add(new Vector3(-1271.507f, -882.5458f, 11.9303f));
                VectorList_01.Add(new Vector3(-1331.592f, -740.3315f, 25.25989f));
                VectorList_01.Add(new Vector3(-1664.258f, -1111.584f, 13.09503f));
                VectorList_01.Add(new Vector3(-1858.592f, -1242.062f, 8.615787f));
                VectorList_01.Add(new Vector3(-1846.416f, -1198.31f, 19.18477f));
                VectorList_01.Add(new Vector3(-1812.555f, -1223.38f, 19.16964f));
                VectorList_01.Add(new Vector3(-1564.53f, -906.8204f, 9.165163f));
                VectorList_01.Add(new Vector3(-1541.676f, -879.1148f, 10.2729f));
                VectorList_01.Add(new Vector3(-1866.732f, -613.0494f, 12.06257f));
                VectorList_01.Add(new Vector3(-2000.812f, -506.8006f, 11.63716f));
                VectorList_01.Add(new Vector3(-1902.603f, -711.7704f, 8.832592f));
                VectorList_01.Add(new Vector3(-1799.197f, -855.5845f, 7.630542f));
                VectorList_01.Add(new Vector3(-1657.15f, -1006.094f, 7.006292f));
                VectorList_01.Add(new Vector3(-1553.957f, -1151.978f, 2.322932f));
                VectorList_01.Add(new Vector3(-1518.391f, -1272.674f, 3.459242f));
                VectorList_01.Add(new Vector3(-1468.468f, -1384.666f, 2.512661f));
                VectorList_01.Add(new Vector3(-1433.639f, -1515.052f, 2.105373f));
                VectorList_01.Add(new Vector3(-1367.521f, -1619.662f, 2.3506f));
                VectorList_01.Add(new Vector3(-1295.23f, -1759.258f, 2.062442f));
                VectorList_01.Add(new Vector3(-1150.568f, -1644.182f, 4.37371f));
                VectorList_01.Add(new Vector3(-1118.646f, -1623.67f, 4.412444f));
                VectorList_01.Add(new Vector3(-1211.627f, -1575.931f, 4.607938f));
                VectorList_01.Add(new Vector3(-1285.411f, -1608.487f, 4.096843f));
                VectorList_01.Add(new Vector3(-1277.177f, -1538.849f, 4.313595f));
                VectorList_01.Add(new Vector3(-1229.568f, -1407.336f, 4.21226f));
                VectorList_01.Add(new Vector3(-1337.169f, -1280.162f, 4.84399f));
                VectorList_01.Add(new Vector3(-1318.917f, -1242.003f, 4.598817f));
                VectorList_01.Add(new Vector3(-1333.172f, -1158.473f, 4.516616f));
                VectorList_01.Add(new Vector3(-1339.545f, -1081.115f, 6.935713f));
                VectorList_01.Add(new Vector3(-1342.604f, -931.7051f, 11.75301f));
                VectorList_01.Add(new Vector3(-1192.887f, -1131.989f, 7.674825f));
                VectorList_01.Add(new Vector3(-1213.446f, -1063.908f, 8.387691f));
                VectorList_01.Add(new Vector3(-1242.203f, -1138.828f, 7.737703f));
                VectorList_01.Add(new Vector3(-1228.999f, -1230.91f, 7.030772f));
                VectorList_01.Add(new Vector3(-1171.263f, -1262.759f, 7.005009f));
                VectorList_01.Add(new Vector3(-1014.644f, -1366.579f, 5.553194f));
                VectorList_01.Add(new Vector3(-1185.957f, -1391.929f, 4.57114f));
                VectorList_01.Add(new Vector3(-1040.472f, -1475.02f, 5.575446f));
                VectorList_01.Add(new Vector3(-970.9581f, -1511.179f, 5.024017f));
                VectorList_01.Add(new Vector3(-1122.354f, -1447.301f, 5.050552f));
                VectorList_01.Add(new Vector3(-847.3286f, -1113.553f, 7.06216f));
                VectorList_01.Add(new Vector3(-1006.188f, -728.5076f, 21.52976f));
                VectorList_01.Add(new Vector3(-931.8746f, -731.1098f, 19.92262f));
                VectorList_01.Add(new Vector3(-834.2229f, -617.7413f, 29.02698f));
                VectorList_01.Add(new Vector3(-724.943f, -682.987f, 30.31257f));
                VectorList_01.Add(new Vector3(-791.8027f, -727.0508f, 27.27884f));
                VectorList_01.Add(new Vector3(-813.9529f, -809.52f, 19.52963f));
                VectorList_01.Add(new Vector3(-888.8446f, -852.8353f, 20.56604f));
                VectorList_01.Add(new Vector3(-803.2098f, -907.3216f, 19.10034f));
                VectorList_01.Add(new Vector3(-699.5457f, -931.8818f, 19.0139f));
                VectorList_01.Add(new Vector3(-693.5906f, -811.4927f, 24.01396f));
                VectorList_01.Add(new Vector3(-676.6083f, -879.3112f, 24.45689f));
                VectorList_01.Add(new Vector3(-657.4034f, -909.5959f, 24.23141f));
                VectorList_01.Add(new Vector3(-604.64f, -1062.089f, 21.78754f));
                VectorList_01.Add(new Vector3(-671.1124f, -1213.345f, 10.6417f));
                VectorList_01.Add(new Vector3(-652.1324f, -1148.927f, 9.152239f));
                VectorList_01.Add(new Vector3(-446.8413f, -1078.38f, 23.55053f));
                VectorList_01.Add(new Vector3(-459.3374f, -979.1005f, 23.54526f));
                VectorList_01.Add(new Vector3(-523.4534f, -879.4631f, 25.22615f));
                VectorList_01.Add(new Vector3(-489.6425f, -718.2501f, 33.21196f));
                VectorList_01.Add(new Vector3(-537.5546f, -626.5345f, 34.67635f));
                VectorList_01.Add(new Vector3(-693.3104f, -589.9702f, 31.55413f));
                VectorList_01.Add(new Vector3(-918.442f, -351.1229f, 38.96907f));
                VectorList_01.Add(new Vector3(-758.0732f, -408.6161f, 35.69364f));
                VectorList_01.Add(new Vector3(-981.1857f, -271.5476f, 38.28515f));
                VectorList_01.Add(new Vector3(-891.5757f, -214.5062f, 39.10325f));
                VectorList_01.Add(new Vector3(-792.9392f, -198.1893f, 37.28369f));
                VectorList_01.Add(new Vector3(-729.8556f, -293.4692f, 36.94607f));
                VectorList_01.Add(new Vector3(-623.5414f, -250.433f, 38.53127f));
                VectorList_01.Add(new Vector3(-698.5738f, -146.8939f, 37.84547f));
                VectorList_01.Add(new Vector3(-537.7913f, -215.5909f, 37.64979f));
                VectorList_01.Add(new Vector3(-462.8381f, -452.2699f, 34.20129f));
                VectorList_01.Add(new Vector3(-331.7549f, -435.6098f, 32.03751f));
                VectorList_01.Add(new Vector3(-238.6038f, -339.8153f, 30.02007f));
                VectorList_01.Add(new Vector3(-362.435f, -237.0402f, 36.08009f));
                VectorList_01.Add(new Vector3(-460.7722f, -61.74419f, 44.51339f));
                VectorList_01.Add(new Vector3(-378.2862f, -83.28149f, 45.6634f));
                VectorList_01.Add(new Vector3(-179.4025f, -165.1036f, 44.03228f));
                VectorList_01.Add(new Vector3(-323.7705f, -1066.44f, 29.38497f));
                VectorList_01.Add(new Vector3(-267.8411f, -982.2144f, 31.21548f));
                VectorList_01.Add(new Vector3(-119.4417f, -976.4725f, 30.4504f));
                VectorList_01.Add(new Vector3(-116.7756f, -1031.736f, 27.33035f));
                VectorList_01.Add(new Vector3(-201.7282f, -1115.89f, 22.88361f));
                VectorList_01.Add(new Vector3(-15.40278f, -1059.279f, 28.25936f));
                VectorList_01.Add(new Vector3(36.57449f, -1027.556f, 29.50605f));
                VectorList_01.Add(new Vector3(124.3465f, -1040.879f, 29.21977f));
                VectorList_01.Add(new Vector3(256.3816f, -1109.329f, 29.70339f));
                VectorList_01.Add(new Vector3(366.6701f, -1110.683f, 29.40641f));
                VectorList_01.Add(new Vector3(470.8782f, -1059.474f, 29.21167f));
                VectorList_01.Add(new Vector3(454.8644f, -861.613f, 27.60908f));
                VectorList_01.Add(new Vector3(462.0893f, -779.6675f, 27.35778f));
                VectorList_01.Add(new Vector3(464.6252f, -706.1085f, 27.5263f));
                VectorList_01.Add(new Vector3(459.5844f, -616.6682f, 28.49977f));
                VectorList_01.Add(new Vector3(464.7895f, -530.8231f, 28.53473f));
                VectorList_01.Add(new Vector3(369.9629f, -795.5699f, 29.28785f));
                VectorList_01.Add(new Vector3(214.6817f, -932.8238f, 24.14158f));
                VectorList_01.Add(new Vector3(180.892f, -970.239f, 29.57923f));
                VectorList_01.Add(new Vector3(47.86868f, -831.1182f, 31.07672f));
                VectorList_01.Add(new Vector3(-51.74949f, -773.9797f, 32.89146f));
                VectorList_01.Add(new Vector3(-209.035f, -794.7747f, 30.45401f));
                VectorList_01.Add(new Vector3(-307.2984f, -604.8634f, 33.55817f));
                VectorList_01.Add(new Vector3(-156.8815f, -579.5831f, 32.42447f));
                VectorList_01.Add(new Vector3(-51.37901f, -804.2873f, 44.2251f));
                VectorList_01.Add(new Vector3(129.2775f, -685.1415f, 42.02926f));
                VectorList_01.Add(new Vector3(305.582f, -618.9428f, 43.45035f));
                VectorList_01.Add(new Vector3(-117.5915f, -432.6723f, 35.91202f));
                VectorList_01.Add(new Vector3(47.2446f, -460.1062f, 42.93524f));
                VectorList_01.Add(new Vector3(127.5092f, -348.0383f, 45.66156f));
                VectorList_01.Add(new Vector3(237.1046f, -406.3701f, 47.92436f));
                VectorList_01.Add(new Vector3(389.6807f, -356.3604f, 48.02427f));
                VectorList_01.Add(new Vector3(286.2361f, -305.7621f, 49.86424f));
                VectorList_01.Add(new Vector3(385.7697f, -326.4211f, 46.86916f));
                VectorList_01.Add(new Vector3(120.7525f, -240.8967f, 53.35598f));
                VectorList_01.Add(new Vector3(-39.31205f, -184.7605f, 54.27045f));
                VectorList_01.Add(new Vector3(544.1168f, -188.0486f, 54.49725f));
                VectorList_01.Add(new Vector3(484.9264f, -225.7366f, 53.78141f));
                VectorList_01.Add(new Vector3(328.8309f, -193.218f, 54.22644f));
                VectorList_01.Add(new Vector3(202.7554f, -103.8833f, 68.90282f));
                VectorList_01.Add(new Vector3(209.2283f, -166.7125f, 56.34424f));
                VectorList_01.Add(new Vector3(146.1458f, -93.40529f, 64.56207f));
                VectorList_01.Add(new Vector3(54.08985f, -45.14072f, 69.39441f));
                VectorList_01.Add(new Vector3(-29.85673f, 3.081035f, 71.18885f));
                VectorList_01.Add(new Vector3(-171.0098f, -4.133281f, 58.21464f));
                VectorList_01.Add(new Vector3(-350.3228f, 29.56337f, 47.85376f));
                VectorList_01.Add(new Vector3(-500.8236f, 37.66475f, 52.57988f));
                VectorList_01.Add(new Vector3(-672.835f, 94.19141f, 55.85539f));
                VectorList_01.Add(new Vector3(-812.7924f, 47.48517f, 48.57475f));
                VectorList_01.Add(new Vector3(-772.8734f, 17.12931f, 40.65421f));
                VectorList_01.Add(new Vector3(-876.5214f, -24.95477f, 41.75396f));
                VectorList_01.Add(new Vector3(-890.4031f, 142.9519f, 63.01735f));
                VectorList_01.Add(new Vector3(-739.7845f, 247.8303f, 77.33287f));
                VectorList_01.Add(new Vector3(-664.3096f, 229.6056f, 85.08134f));
                VectorList_01.Add(new Vector3(-683.2351f, 311.7654f, 83.08416f));
                VectorList_01.Add(new Vector3(-630.1306f, 241.5545f, 81.91869f));
                VectorList_01.Add(new Vector3(-598.1657f, 324.3062f, 84.01013f));
                VectorList_01.Add(new Vector3(-559.8638f, 272.7294f, 83.01963f));
                VectorList_01.Add(new Vector3(-595.6068f, 178.9053f, 65.31698f));
                VectorList_01.Add(new Vector3(-425.4068f, 181.0757f, 80.6342f));
                VectorList_01.Add(new Vector3(-419.6145f, 265.5547f, 83.19469f));
                VectorList_01.Add(new Vector3(-367.4872f, 265.2892f, 84.84436f));
                VectorList_01.Add(new Vector3(-230.8123f, 293.7858f, 92.18646f));
                VectorList_01.Add(new Vector3(-276.5627f, 162.3596f, 78.75587f));
                VectorList_01.Add(new Vector3(-148.2416f, 154.9984f, 77.5014f));
                VectorList_01.Add(new Vector3(-29.5976f, 164.3102f, 94.99086f));
                VectorList_01.Add(new Vector3(-119.3471f, 358.8907f, 112.88f));
                VectorList_01.Add(new Vector3(-151.6026f, 290.5312f, 97.83833f));
                VectorList_01.Add(new Vector3(-84.97717f, 236.5968f, 100.5634f));
                VectorList_01.Add(new Vector3(-21.63676f, 243.5354f, 109.5534f));
                VectorList_01.Add(new Vector3(96.77094f, 177.6804f, 104.5986f));
                VectorList_01.Add(new Vector3(187.2232f, 84.45721f, 87.89471f));
                VectorList_01.Add(new Vector3(230.4962f, 110.8354f, 93.83304f));
                VectorList_01.Add(new Vector3(258.4269f, -15.61534f, 73.64758f));
                VectorList_01.Add(new Vector3(423.1389f, 56.73925f, 98.82393f));
                VectorList_01.Add(new Vector3(518.9357f, -31.32157f, 75.58662f));
                VectorList_01.Add(new Vector3(643.8714f, 144.6637f, 91.76051f));
                VectorList_01.Add(new Vector3(746.3617f, 220.468f, 87.02998f));
                VectorList_01.Add(new Vector3(465.7555f, 211.8628f, 103.104f));
                VectorList_01.Add(new Vector3(301.2422f, 260.3613f, 105.5253f));
                VectorList_01.Add(new Vector3(311.4685f, 344.5657f, 105.2014f));
                VectorList_01.Add(new Vector3(193.3728f, 325.8731f, 105.3934f));
                VectorList_01.Add(new Vector3(120.5809f, 281.1498f, 109.974f));

                vGetaway = new Vector3(341.4239f, -560.3026f, 28.51324f);
                fGetDir = 337.9559f;

                sHospital = "Pillbox Hill Medical Center";

                iTotals = FindRandom(37, 0, VectorList_01.Count - 1);
            }
            else if (iLocationX == 3)
            {
                vFuMiss = new Vector3(-415.4373f, -300.6146f, 34.15752f);

                VectorList_01.Add(new Vector3(-291.2712f, 2544.365f, 75.41582f));
                VectorList_01.Add(new Vector3(-278.5249f, 2844.024f, 53.98352f));
                VectorList_01.Add(new Vector3(-1130.211f, 2692.908f, 18.8004f));
                VectorList_01.Add(new Vector3(-1406.543f, 2515.155f, 32.94881f));
                VectorList_01.Add(new Vector3(-1654.044f, 3110.578f, 31.70347f));
                VectorList_01.Add(new Vector3(-1601.245f, 3045.645f, 33.65606f));
                VectorList_01.Add(new Vector3(-1638.142f, 3028.333f, 32.90874f));
                VectorList_01.Add(new Vector3(-1586.407f, 2791.162f, 16.92226f));
                VectorList_01.Add(new Vector3(-2082.62f, 2611.691f, 3.083975f));
                VectorList_01.Add(new Vector3(-2769.864f, 2715.421f, 2.349873f));
                VectorList_01.Add(new Vector3(-2519.016f, 2311.338f, 33.21602f));
                VectorList_01.Add(new Vector3(-1912.18f, 2083.522f, 140.3839f));
                VectorList_01.Add(new Vector3(-1970.93f, 1933.293f, 172.0175f));
                VectorList_01.Add(new Vector3(-1904.134f, 1780.671f, 170.6505f));
                VectorList_01.Add(new Vector3(-1743.91f, 1992.474f, 117.2028f));
                VectorList_01.Add(new Vector3(-1709.715f, 1884.546f, 161.3072f));
                VectorList_01.Add(new Vector3(-1587.619f, 2097.857f, 68.70098f));
                VectorList_01.Add(new Vector3(-1357.837f, 2160.219f, 51.93659f));
                VectorList_01.Add(new Vector3(-1514.324f, 1515.17f, 115.2731f));
                VectorList_01.Add(new Vector3(-1555.444f, 1376.918f, 126.8769f));
                VectorList_01.Add(new Vector3(-1839.605f, 791.3201f, 138.7291f));
                VectorList_01.Add(new Vector3(-1995.846f, 549.2031f, 110.1493f));
                VectorList_01.Add(new Vector3(-1680.208f, 494.1615f, 128.8708f));
                VectorList_01.Add(new Vector3(-1755.332f, 185.6081f, 64.43365f));
                VectorList_01.Add(new Vector3(-1736.217f, 204.3954f, 64.94268f));
                VectorList_01.Add(new Vector3(-1764.753f, 165.0018f, 64.94669f));
                VectorList_01.Add(new Vector3(-1713.108f, 141.3231f, 64.90344f));
                VectorList_01.Add(new Vector3(-1706.472f, 214.2735f, 62.38493f));
                VectorList_01.Add(new Vector3(-1629.256f, 268.8999f, 59.5435f));
                VectorList_01.Add(new Vector3(-1578.046f, 183.0742f, 58.86268f));
                VectorList_01.Add(new Vector3(-1634.716f, 181.6893f, 61.74959f));
                VectorList_01.Add(new Vector3(-2306.207f, 235.1366f, 167.5879f));
                VectorList_01.Add(new Vector3(-2291.757f, 367.4641f, 174.595f));
                VectorList_01.Add(new Vector3(-1697.997f, -271.6696f, 51.88332f));
                VectorList_01.Add(new Vector3(-1754.722f, -198.7336f, 57.46332f));
                VectorList_01.Add(new Vector3(-1693.734f, -148.4457f, 58.1592f));
                VectorList_01.Add(new Vector3(-2000.047f, -256.4221f, 29.09476f));
                VectorList_01.Add(new Vector3(-2187.31f, -400.8175f, 13.2528f));
                VectorList_01.Add(new Vector3(-2962.976f, 53.76942f, 11.6085f));
                VectorList_01.Add(new Vector3(-3056.343f, 90.29734f, 12.79408f));
                VectorList_01.Add(new Vector3(-2926.841f, -37.22206f, 2.298412f));
                VectorList_01.Add(new Vector3(-3040.794f, 27.46547f, 10.10806f));
                VectorList_01.Add(new Vector3(-3158.827f, 278.4117f, 2.351314f));
                VectorList_01.Add(new Vector3(-2954.031f, 386.1595f, 14.99633f));
                VectorList_01.Add(new Vector3(-2946.438f, 453.9384f, 15.29806f));
                VectorList_01.Add(new Vector3(-2966.865f, 432.5781f, 15.27232f));
                VectorList_01.Add(new Vector3(-3244.453f, 967.4296f, 12.73052f));
                VectorList_01.Add(new Vector3(-3250.323f, 1011.025f, 12.44748f));
                VectorList_01.Add(new Vector3(-3045.727f, 620.9409f, 7.451577f));
                VectorList_01.Add(new Vector3(-3152.753f, 1109.938f, 20.87215f));
                VectorList_01.Add(new Vector3(-2971.914f, 2129.081f, 41.13417f));

                vGetaway = new Vector3(-419.0133f, -333.0517f, 32.87f);
                fGetDir = 352.5294f;

                sHospital = "Mount Zonah Medical Center";

                iTotals = FindRandom(38, 0, VectorList_01.Count - 1);
            }
            else if (iLocationX == 4)
            {
                vFuMiss = new Vector3(1143.186f, -1490.784f, 34.17999f);

                VectorList_01.Add(new Vector3(-429.4246f, 1215.803f, 325.7583f));
                VectorList_01.Add(new Vector3(-341.2092f, 1305.813f, 336.8911f));
                VectorList_01.Add(new Vector3(-427.6469f, 1115.923f, 326.782f));
                VectorList_01.Add(new Vector3(-418.7949f, 1056.466f, 323.8432f));
                VectorList_01.Add(new Vector3(201.93f, 1165.923f, 227.0053f));
                VectorList_01.Add(new Vector3(705.3666f, 1199.944f, 325.2016f));
                VectorList_01.Add(new Vector3(757.2481f, 1275.769f, 360.2966f));
                VectorList_01.Add(new Vector3(1220.602f, 1897.394f, 77.92645f));
                VectorList_01.Add(new Vector3(1254.534f, 1829.831f, 81.44193f));
                VectorList_01.Add(new Vector3(1369.477f, 2184.939f, 97.82227f));
                VectorList_01.Add(new Vector3(1534.54f, 2228.073f, 77.68973f));
                VectorList_01.Add(new Vector3(1590.794f, 2198.697f, 78.8641f));
                VectorList_01.Add(new Vector3(2114.305f, 2235.576f, 104.764f));
                VectorList_01.Add(new Vector3(2355.571f, 2278.136f, 95.15147f));
                VectorList_01.Add(new Vector3(2296.979f, 1974.724f, 131.2879f));
                VectorList_01.Add(new Vector3(2078.363f, 1696.763f, 105.9699f));
                VectorList_01.Add(new Vector3(2617.165f, 1691.603f, 27.59538f));
                VectorList_01.Add(new Vector3(2676.148f, 1592.313f, 32.51419f));
                VectorList_01.Add(new Vector3(2746.124f, 1486.892f, 30.78432f));
                VectorList_01.Add(new Vector3(2887.79f, 1524.084f, 24.96322f));
                VectorList_01.Add(new Vector3(2360.47f, 2540.61f, 47.69607f));
                VectorList_01.Add(new Vector3(2339.34f, 2570.183f, 47.71948f));
                VectorList_01.Add(new Vector3(2562.806f, 2574.354f, 37.87205f));
                VectorList_01.Add(new Vector3(2617.214f, 2821.745f, 33.89419f));
                VectorList_01.Add(new Vector3(2629.834f, 2790.548f, 33.82434f));
                VectorList_01.Add(new Vector3(2629.363f, 2925.268f, 40.41792f));
                VectorList_01.Add(new Vector3(2832.357f, 2806.384f, 57.39913f));
                VectorList_01.Add(new Vector3(2953.996f, 2741.092f, 43.83486f));
                VectorList_01.Add(new Vector3(1534.691f, 1702.348f, 109.7114f));
                VectorList_01.Add(new Vector3(1566.587f, 860.5251f, 77.51894f));
                VectorList_01.Add(new Vector3(1899.624f, 584.2365f, 178.3987f));
                VectorList_01.Add(new Vector3(1917.581f, 380.3685f, 161.4969f));
                VectorList_01.Add(new Vector3(1662.717f, -26.68935f, 173.7747f));
                VectorList_01.Add(new Vector3(2568.399f, 484.7982f, 108.5263f));
                VectorList_01.Add(new Vector3(2506.034f, -383.8343f, 94.1134f));
                VectorList_01.Add(new Vector3(2544.437f, -313.6512f, 92.98766f));
                VectorList_01.Add(new Vector3(2435.032f, -413.4328f, 93.08391f));
                VectorList_01.Add(new Vector3(2506.621f, -451.7578f, 92.98555f));
                VectorList_01.Add(new Vector3(2676.567f, -659.6204f, 41.65691f));
                VectorList_01.Add(new Vector3(2824.429f, -742.3856f, 1.606231f));
                VectorList_01.Add(new Vector3(1361.785f, -702.8633f, 67.2277f));
                VectorList_01.Add(new Vector3(1324.952f, -756.6548f, 66.40025f));
                VectorList_01.Add(new Vector3(1139.244f, -780.0002f, 57.59484f));
                VectorList_01.Add(new Vector3(1132.807f, -798.575f, 57.57878f));
                VectorList_01.Add(new Vector3(1125.957f, -993.0307f, 45.91859f));
                VectorList_01.Add(new Vector3(1099.421f, -784.8134f, 58.26013f));
                VectorList_01.Add(new Vector3(1052.775f, -724.7465f, 57.48206f));
                VectorList_01.Add(new Vector3(1111.538f, -636.4796f, 56.8156f));
                VectorList_01.Add(new Vector3(1223.825f, -595.252f, 68.42015f));
                VectorList_01.Add(new Vector3(1233.239f, -465.8586f, 66.63689f));
                VectorList_01.Add(new Vector3(1146.365f, -453.3453f, 66.98067f));
                VectorList_01.Add(new Vector3(1101.174f, -550.124f, 56.65363f));
                VectorList_01.Add(new Vector3(1129.701f, -454.7057f, 66.45693f));
                VectorList_01.Add(new Vector3(1174.98f, -397.4349f, 67.81779f));
                VectorList_01.Add(new Vector3(1232.593f, -354.5934f, 69.06885f));
                VectorList_01.Add(new Vector3(1310.674f, -399.1987f, 67.71224f));
                VectorList_01.Add(new Vector3(1143.129f, -299.8851f, 68.78143f));
                VectorList_01.Add(new Vector3(1122.463f, -322.1445f, 67.14088f));
                VectorList_01.Add(new Vector3(1093.196f, -364.4661f, 67.02354f));
                VectorList_01.Add(new Vector3(836.7168f, -575.6613f, 57.10654f));
                VectorList_01.Add(new Vector3(706.3624f, -302.3811f, 59.23769f));
                VectorList_01.Add(new Vector3(743.7562f, -220.7275f, 66.09843f));
                VectorList_01.Add(new Vector3(811.6596f, -285.6776f, 66.45554f));
                VectorList_01.Add(new Vector3(838.2612f, -257.1425f, 65.61382f));
                VectorList_01.Add(new Vector3(877.7681f, -280.1527f, 65.49063f));
                VectorList_01.Add(new Vector3(957.6571f, -204.2076f, 73.12271f));
                VectorList_01.Add(new Vector3(849.0433f, -112.9065f, 79.46316f));
                VectorList_01.Add(new Vector3(979.2575f, -142.5325f, 74.22153f));
                VectorList_01.Add(new Vector3(983.4789f, -107.8521f, 74.33319f));
                VectorList_01.Add(new Vector3(1087.738f, 16.63198f, 80.87926f));
                VectorList_01.Add(new Vector3(1139.83f, 114.605f, 80.84036f));
                VectorList_01.Add(new Vector3(1261.257f, 323.3363f, 81.98537f));
                VectorList_01.Add(new Vector3(1103.61f, 222.222f, 80.98802f));
                VectorList_01.Add(new Vector3(885.9136f, -1.531257f, 78.76098f));
                VectorList_01.Add(new Vector3(1238.931f, -1097.322f, 38.52563f));
                VectorList_01.Add(new Vector3(1064.307f, -239.0685f, 57.94653f));

                vGetaway = new Vector3(1116.722f, -1502.635f, 34.46165f);
                fGetDir = 268.4588f;

                sHospital = "St. Fiacre Hospital";

                iTotals = FindRandom(39, 0, VectorList_01.Count - 1);
            }
            else if (iLocationX == 5)
            {
                vFuMiss = new Vector3(1824.192f, 3701.154f, 33.23653f);

                VectorList_01.Add(new Vector3(81.51405f, 4555.892f, 90.46643f));
                VectorList_01.Add(new Vector3(799.0942f, 4160.361f, 35.2229f));
                VectorList_01.Add(new Vector3(798.4566f, 4531.143f, 49.23855f));
                VectorList_01.Add(new Vector3(1335.921f, 4269.669f, 31.50312f));
                VectorList_01.Add(new Vector3(1307.986f, 4390.837f, 41.68717f));
                VectorList_01.Add(new Vector3(1796.021f, 4605.88f, 37.18285f));
                VectorList_01.Add(new Vector3(1674.801f, 4680.874f, 43.05534f));
                VectorList_01.Add(new Vector3(1706.065f, 4735.913f, 42.14462f));
                VectorList_01.Add(new Vector3(1725.979f, 4801.671f, 41.71417f));
                VectorList_01.Add(new Vector3(1642.043f, 4856.824f, 42.27125f));
                VectorList_01.Add(new Vector3(1696.117f, 4879.972f, 42.03887f));
                VectorList_01.Add(new Vector3(1678.268f, 4882.429f, 42.04193f));
                VectorList_01.Add(new Vector3(1672.494f, 4977.512f, 42.31419f));
                VectorList_01.Add(new Vector3(1714.319f, 4923.555f, 42.09154f));
                VectorList_01.Add(new Vector3(1861.355f, 4970.008f, 52.82473f));
                VectorList_01.Add(new Vector3(1900.041f, 4925.076f, 48.81167f));
                VectorList_01.Add(new Vector3(1998.057f, 4981.703f, 41.60786f));
                VectorList_01.Add(new Vector3(1983.406f, 5175.345f, 47.63911f));
                VectorList_01.Add(new Vector3(2264.839f, 5156.901f, 58.03756f));
                VectorList_01.Add(new Vector3(2381.871f, 5029.653f, 45.96196f));
                VectorList_01.Add(new Vector3(2360.25f, 4938.104f, 42.49917f));
                VectorList_01.Add(new Vector3(2244.616f, 4872.182f, 40.82914f));
                VectorList_01.Add(new Vector3(2422.265f, 4754.923f, 34.30349f));
                VectorList_01.Add(new Vector3(2359.47f, 4751.41f, 34.40399f));
                VectorList_01.Add(new Vector3(2302.268f, 4749.335f, 37.04872f));
                VectorList_01.Add(new Vector3(2144.68f, 4775.483f, 40.99308f));
                VectorList_01.Add(new Vector3(2012.107f, 4719.181f, 41.5946f));
                VectorList_01.Add(new Vector3(1944.651f, 4657.399f, 40.56476f));
                VectorList_01.Add(new Vector3(2194.838f, 5595.23f, 53.76274f));
                VectorList_01.Add(new Vector3(2589.505f, 5063.989f, 44.91933f));
                VectorList_01.Add(new Vector3(2724.282f, 5185.595f, 46.37607f));
                VectorList_01.Add(new Vector3(3315.647f, 5179.81f, 19.61458f));
                VectorList_01.Add(new Vector3(3393.677f, 5501.158f, 24.14926f));
                VectorList_01.Add(new Vector3(3718.582f, 4536.331f, 21.55841f));
                VectorList_01.Add(new Vector3(3823.788f, 4442.232f, 2.80595f));
                VectorList_01.Add(new Vector3(2575.538f, 4648.531f, 34.0546f));
                VectorList_01.Add(new Vector3(2853.658f, 4556.799f, 47.17968f));
                VectorList_01.Add(new Vector3(2897.936f, 4507.654f, 47.99141f));
                VectorList_01.Add(new Vector3(2889.991f, 4346.492f, 50.39873f));
                VectorList_01.Add(new Vector3(2971.468f, 3488.954f, 71.44313f));
                VectorList_01.Add(new Vector3(2676.799f, 3500.828f, 53.30354f));
                VectorList_01.Add(new Vector3(2633.805f, 3291.088f, 55.72838f));
                VectorList_01.Add(new Vector3(2472.229f, 3440.476f, 49.93312f));
                VectorList_01.Add(new Vector3(2376.8f, 3348.705f, 47.9312f));
                VectorList_01.Add(new Vector3(2369.887f, 3158.99f, 48.20874f));
                VectorList_01.Add(new Vector3(2340.908f, 3125.443f, 48.20874f));
                VectorList_01.Add(new Vector3(2428.426f, 3143.442f, 48.15261f));
                VectorList_01.Add(new Vector3(2409.005f, 3033.293f, 48.15258f));
                VectorList_01.Add(new Vector3(2341.584f, 3051.906f, 48.1518f));
                VectorList_01.Add(new Vector3(2057.751f, 3170.661f, 45.36538f));
                VectorList_01.Add(new Vector3(1993.976f, 3053.033f, 47.21455f));
                VectorList_01.Add(new Vector3(2893.15f, 3735.65f, 44.20612f));
                VectorList_01.Add(new Vector3(2709.993f, 4127.261f, 43.86822f));
                VectorList_01.Add(new Vector3(2734.949f, 4278.868f, 48.41084f));
                VectorList_01.Add(new Vector3(2705.414f, 4333.314f, 45.852f));
                VectorList_01.Add(new Vector3(2551.983f, 4281.257f, 41.61634f));
                VectorList_01.Add(new Vector3(2503.317f, 4207.412f, 39.91094f));
                VectorList_01.Add(new Vector3(2408.159f, 4299.113f, 35.22048f));
                VectorList_01.Add(new Vector3(2506.076f, 4080.691f, 38.65971f));
                VectorList_01.Add(new Vector3(2412.145f, 4034.883f, 36.81591f));
                VectorList_01.Add(new Vector3(2469.002f, 3831.031f, 39.94996f));
                VectorList_01.Add(new Vector3(2489.016f, 3773.163f, 44.11203f));
                VectorList_01.Add(new Vector3(2086.534f, 3499.129f, 43.43225f));
                VectorList_01.Add(new Vector3(2050.395f, 3683.347f, 34.58794f));
                VectorList_01.Add(new Vector3(1990.43f, 3793.121f, 32.18081f));
                VectorList_01.Add(new Vector3(1955.167f, 3839.283f, 32.18029f));
                VectorList_01.Add(new Vector3(1917.289f, 3908.558f, 33.44164f));
                VectorList_01.Add(new Vector3(1787.303f, 3895.257f, 34.38925f));
                VectorList_01.Add(new Vector3(1867.364f, 3760.323f, 33.0069f));
                VectorList_01.Add(new Vector3(1898.676f, 3732.602f, 32.71269f));
                VectorList_01.Add(new Vector3(1712.353f, 3844.636f, 35.09303f));
                VectorList_01.Add(new Vector3(1693.142f, 3786.374f, 34.76216f));
                VectorList_01.Add(new Vector3(1651.74f, 3805.848f, 34.96206f));
                VectorList_01.Add(new Vector3(1601.419f, 3826.67f, 34.17381f));
                VectorList_01.Add(new Vector3(1538.749f, 3798.993f, 34.40332f));
                VectorList_01.Add(new Vector3(1568.872f, 3684.475f, 34.73395f));
                VectorList_01.Add(new Vector3(1450.616f, 3754.751f, 31.9337f));
                VectorList_01.Add(new Vector3(1422.453f, 3663.262f, 39.71322f));
                VectorList_01.Add(new Vector3(1369.891f, 3651.806f, 33.9472f));
                VectorList_01.Add(new Vector3(1387.58f, 3617.335f, 38.90529f));
                VectorList_01.Add(new Vector3(1551.087f, 3516.637f, 35.91622f));
                VectorList_01.Add(new Vector3(1628.383f, 3656.517f, 35.12894f));
                VectorList_01.Add(new Vector3(1605.051f, 3569.886f, 38.77521f));
                VectorList_01.Add(new Vector3(1601.791f, 3586.172f, 38.76653f));
                VectorList_01.Add(new Vector3(1593.36f, 3593.009f, 38.76653f));
                VectorList_01.Add(new Vector3(1583.142f, 3616.987f, 38.77521f));
                VectorList_01.Add(new Vector3(1543.397f, 3593.187f, 35.45259f));
                VectorList_01.Add(new Vector3(1514.269f, 3570.81f, 38.73652f));
                VectorList_01.Add(new Vector3(1542.39f, 3589.362f, 38.76651f));
                VectorList_01.Add(new Vector3(1733.86f, 3031.972f, 61.92279f));
                VectorList_01.Add(new Vector3(957.741f, 3616.931f, 32.7385f));
                VectorList_01.Add(new Vector3(895.6479f, 3610.629f, 32.80084f));
                VectorList_01.Add(new Vector3(447.4222f, 3522.782f, 33.56482f));
                VectorList_01.Add(new Vector3(360.8811f, 3406.756f, 36.37774f));
                VectorList_01.Add(new Vector3(78.56032f, 3706.695f, 41.07283f));
                VectorList_01.Add(new Vector3(11.73879f, 3719.627f, 39.59069f));
                VectorList_01.Add(new Vector3(100.6081f, 3606.26f, 39.66945f));
                VectorList_01.Add(new Vector3(244.4168f, 3113.378f, 42.47698f));
                VectorList_01.Add(new Vector3(163.4923f, 3118.479f, 43.40684f));
                VectorList_01.Add(new Vector3(219.2472f, 2780.656f, 45.63362f));
                VectorList_01.Add(new Vector3(293.2191f, 2841.813f, 43.56917f));
                VectorList_01.Add(new Vector3(365.6619f, 2625.837f, 44.57616f));
                VectorList_01.Add(new Vector3(249.7715f, 2593.994f, 45.10711f));
                VectorList_01.Add(new Vector3(201.8722f, 2440.062f, 60.51326f));
                VectorList_01.Add(new Vector3(498.5258f, 2604.816f, 43.68026f));
                VectorList_01.Add(new Vector3(557.0615f, 2663.304f, 42.17883f));
                VectorList_01.Add(new Vector3(562.3815f, 2740.476f, 42.69144f));
                VectorList_01.Add(new Vector3(651.3659f, 2730.515f, 41.98263f));
                VectorList_01.Add(new Vector3(734.3535f, 2523.488f, 73.20567f));
                VectorList_01.Add(new Vector3(721.3502f, 2314.368f, 50.36142f));
                VectorList_01.Add(new Vector3(953.3123f, 2294.082f, 50.08419f));
                VectorList_01.Add(new Vector3(1142.236f, 2118.787f, 55.77753f));
                VectorList_01.Add(new Vector3(1020.972f, 2456.443f, 44.74253f));
                VectorList_01.Add(new Vector3(826.4545f, 2170.425f, 52.2709f));
                VectorList_01.Add(new Vector3(793.3954f, 2161.768f, 53.07783f));
                VectorList_01.Add(new Vector3(1065.421f, 2653.585f, 39.52509f));
                VectorList_01.Add(new Vector3(1138.976f, 2629.198f, 37.99173f));
                VectorList_01.Add(new Vector3(1183.547f, 2723.095f, 38.61087f));
                VectorList_01.Add(new Vector3(1254.578f, 2739.573f, 38.46508f));

                vGetaway = new Vector3(1827.306f, 3693.122f, 33.993f);
                fGetDir = 299.4382f;

                sHospital = "Sandy Shores Medical Center";

                iTotals = FindRandom(40, 0, VectorList_01.Count - 1);
            }
            else
            {
                vFuMiss = new Vector3(-222.471f, 6318.833f, 30.83202f);

                VectorList_01.Add(new Vector3(1870.273f, 6408.297f, 46.56896f));
                VectorList_01.Add(new Vector3(1691.686f, 6438.447f, 32.62918f));
                VectorList_01.Add(new Vector3(1599.166f, 6457.118f, 25.30086f));
                VectorList_01.Add(new Vector3(1586.865f, 6520.422f, 16.95047f));
                VectorList_01.Add(new Vector3(1464.029f, 6541.686f, 14.43836f));
                VectorList_01.Add(new Vector3(1363.895f, 6551.077f, 14.40837f));
                VectorList_01.Add(new Vector3(894.3557f, 6646.197f, 1.556715f));
                VectorList_01.Add(new Vector3(1543.212f, 6334.947f, 24.07725f));
                VectorList_01.Add(new Vector3(1504.889f, 6326.722f, 24.06939f));
                VectorList_01.Add(new Vector3(1442.115f, 6333.458f, 23.89027f));
                VectorList_01.Add(new Vector3(1437.23f, 6359.487f, 23.96965f));
                VectorList_01.Add(new Vector3(1345.684f, 6387.137f, 33.41008f));
                VectorList_01.Add(new Vector3(1088.342f, 6507.485f, 21.04118f));
                VectorList_01.Add(new Vector3(749.1741f, 6461.103f, 31.10237f));
                VectorList_01.Add(new Vector3(501.5004f, 6465.24f, 30.85743f));
                VectorList_01.Add(new Vector3(434.1044f, 6471.987f, 28.76303f));
                VectorList_01.Add(new Vector3(440.8949f, 6511.248f, 28.72778f));
                VectorList_01.Add(new Vector3(318.1997f, 6654.002f, 28.90871f));
                VectorList_01.Add(new Vector3(283.9963f, 6785.421f, 15.67939f));
                VectorList_01.Add(new Vector3(72.12117f, 6949.551f, 11.65868f));
                VectorList_01.Add(new Vector3(69.73324f, 6659.012f, 32.27151f));
                VectorList_01.Add(new Vector3(174.6193f, 6645.385f, 31.51025f));
                VectorList_01.Add(new Vector3(176.6928f, 6419.251f, 32.34123f));
                VectorList_01.Add(new Vector3(71.68548f, 6571.394f, 28.43097f));
                VectorList_01.Add(new Vector3(-0.9529091f, 6612.592f, 31.86915f));
                VectorList_01.Add(new Vector3(-46.67231f, 6582.178f, 32.167f));
                VectorList_01.Add(new Vector3(-112.2852f, 6367.177f, 31.45825f));
                VectorList_01.Add(new Vector3(-118.3919f, 6320.568f, 33.37083f));
                VectorList_01.Add(new Vector3(-207.5957f, 6573.147f, 10.99058f));
                VectorList_01.Add(new Vector3(-320.5085f, 6303.709f, 36.58052f));
                VectorList_01.Add(new Vector3(-313.5651f, 6270.607f, 31.48563f));
                VectorList_01.Add(new Vector3(-334.3918f, 6226.925f, 31.47299f));
                VectorList_01.Add(new Vector3(-371.3245f, 6255.206f, 31.47296f));
                VectorList_01.Add(new Vector3(-407.6978f, 6315.729f, 32.22515f));
                VectorList_01.Add(new Vector3(-450.4157f, 6270.474f, 33.31968f));
                VectorList_01.Add(new Vector3(-483.6811f, 6261.515f, 12.91183f));
                VectorList_01.Add(new Vector3(-429.724f, 6162.676f, 31.45789f));
                VectorList_01.Add(new Vector3(-325.7654f, 6181.24f, 32.30342f));
                VectorList_01.Add(new Vector3(-376.5441f, 6031.316f, 31.51441f));
                VectorList_01.Add(new Vector3(-116.9922f, 6095.342f, 31.06293f));
                VectorList_01.Add(new Vector3(-19.0751f, 6305.593f, 31.3614f));
                VectorList_01.Add(new Vector3(-436.3317f, 5983.188f, 31.49013f));
                VectorList_01.Add(new Vector3(-543.8734f, 5872.407f, 33.14574f));
                VectorList_01.Add(new Vector3(-628.5837f, 5823.533f, 23.83971f));
                VectorList_01.Add(new Vector3(-663.7585f, 5808.839f, 17.51111f));
                VectorList_01.Add(new Vector3(-750.4944f, 5814.406f, 17.49895f));
                VectorList_01.Add(new Vector3(-760.1648f, 5594.888f, 36.70619f));
                VectorList_01.Add(new Vector3(-791.933f, 5481.721f, 26.54518f));
                VectorList_01.Add(new Vector3(-803.6578f, 5391.052f, 34.49738f));
                VectorList_01.Add(new Vector3(-700.301f, 5448.565f, 40.45042f));
                VectorList_01.Add(new Vector3(-603.6163f, 5521.163f, 50.12442f));
                VectorList_01.Add(new Vector3(-469.8421f, 5355.837f, 80.73311f));
                VectorList_01.Add(new Vector3(-490.0967f, 5261.551f, 86.97383f));
                VectorList_01.Add(new Vector3(-556.4681f, 5320.503f, 73.58968f));
                VectorList_01.Add(new Vector3(-498.9151f, 4923.883f, 147.2367f));
                VectorList_01.Add(new Vector3(-639.7859f, 5096.952f, 131.0995f));
                VectorList_01.Add(new Vector3(-1035.138f, 4918.399f, 205.958f));
                VectorList_01.Add(new Vector3(-1027.445f, 4710.075f, 239.2344f));
                VectorList_01.Add(new Vector3(-853.9802f, 4830.626f, 297.7522f));
                VectorList_01.Add(new Vector3(-397.1013f, 4700.09f, 263.4803f));
                VectorList_01.Add(new Vector3(-523.509f, 4503.75f, 79.5913f));
                VectorList_01.Add(new Vector3(-521.1319f, 4370.738f, 67.45171f));
                VectorList_01.Add(new Vector3(-880.3391f, 4413.074f, 20.88786f));
                VectorList_01.Add(new Vector3(-1354.539f, 4289.695f, 1.934863f));
                VectorList_01.Add(new Vector3(-1564.575f, 4394.226f, 4.732732f));
                VectorList_01.Add(new Vector3(-1948.36f, 4455.686f, 35.51091f));
                VectorList_01.Add(new Vector3(-2129.363f, 4505.476f, 29.58157f));
                VectorList_01.Add(new Vector3(-2302.898f, 4385.215f, 10.15656f));
                VectorList_01.Add(new Vector3(-2196.619f, 4287.714f, 49.17346f));
                VectorList_01.Add(new Vector3(-2173.408f, 4289.769f, 49.049f));
                VectorList_01.Add(new Vector3(-2188.512f, 4251.55f, 48.93982f));
                VectorList_01.Add(new Vector3(-1014.172f, 4171.244f, 123.7002f));

                vGetaway = new Vector3(-267.2005f, 6337.363f, 32.18432f);
                fGetDir = 88.0215f;

                sHospital = "The Bay Care Center";

                iTotals = FindRandom(41, 0, VectorList_01.Count - 1);
            }

            if (sHospFix == "")
                sHospFix = MyLang.Mistext[52];
            MyLang.Mistext[52] = sHospFix + "~y~" + sHospital + "~w~.";

            if (bTestRun)
            {
                VectorList_01.Clear();
                bJobLoaded = true;
                iJobType = 7;
                iTotals = 0;

                if (iTestKit < MyMissions.AmbuXM.Count())
                {
                    VectorList_01.Add(MyMissions.AmbuXM[iTestKit].AmbPed);
                    iTestKit += 1;
                }
            }
            else if (FindBuiltMissions(5))
            {
                List<Vector3> NewStops_01 = new List<Vector3>();

                for (int i = 0; i < MyMissions.AmbuXM.Count; i++)
                    NewStops_01.Add(MyMissions.AmbuXM[i].AmbPed);

                if (NewStops_01.Count > 0)
                {
                    if (MySettings.BulderOnly)
                        VectorList_01.Clear();

                    for (int i = 0; i < NewStops_01.Count; i++)
                        VectorList_01.Add(NewStops_01[i]);

                    iTotals = RandInt(0, VectorList_01.Count - 1);
                }
            }

            ttTextBar_01.Text = "$ " + iCashBouns + "";
            vTarget_01 = VectorList_01[iTotals];

            for (int i = 0; i < VectorList_02.Count; i++)
            {
                float fDist = VectorList_02[i].DistanceTo(vTarget_01);
                fList_01.Add(fDist);
            }
            float fMin = fList_01[0];
            int iStation = 0;
            for (int i = 0; i < fList_01.Count; i++)
            {
                if (fList_01[i] < fMin)
                {
                    fMin = fList_01[i];
                    iStation = i;
                }
            }

            if (iStation == 0)
            {
                vTarget_02 = VectorList_02[0];
                vTarget_03 = new Vector3(293.6819f, -1448.296f, 29.966f);
            }
            else if (iStation == 1)
            {
                vTarget_02 = VectorList_02[1];
                vTarget_03 = new Vector3(359.5868f, -585.00f, 28.80f);
            }
            else if (iStation == 2)
            {
                vTarget_02 = VectorList_02[2];
                vTarget_03 = new Vector3(-497.76f, -328.71f, 34.5f);
            }
            else if (iStation == 3)
            {
                vTarget_02 = VectorList_02[3];
                vTarget_03 = new Vector3(1150.85f, -1529.34f, 35.37f);
            }
            else if (iStation == 4)
            {
                vTarget_02 = VectorList_02[4];
                vTarget_03 = new Vector3(1816.146f, 3678.7f, 34.27f);
            }
            else
            {
                vTarget_02 = VectorList_02[5];
                vTarget_03 = new Vector3(-248f, 6332.4766f, 32.4f);
            }

            BeOnOff.Add(false);//       bNonLoopFx  0 
            BeOnOff.Add(false);//       bPackCount  1 
            BeOnOff.Add(false);//       bMedic      2   
            BeOnOff.Add(false);//       bMoveYourV  3 
            BeOnOff.Add(false);//       bTruckBlip  4 
            BeOnOff.Add(false);//       bNoMedical  5 
            BeOnOff.Add(false);//       bNotimmer   6 
            BeOnOff.Add(false);//       bhalfTimer  7 


            iTime_01.Add(0);//  iPackPlus   0 
            iTime_01.Add(0);//  iColourTime 1 

            iList_01.Add(0);//  iStupidPed  0
            iList_01.Add(0);//  illness  0 

            if (bCovidInf)
                iList_01[1] = 2;
            else
            {
                int iRanDow = FindRandom(42, 0, 45);
                if (iRanDow < 3)
                    iList_01[1] = 2;
                else if (iRanDow < 15)
                    iList_01[1] = 1;
                else if (iRanDow < 25)
                    iList_01[1] = 3;
                else if (iRanDow < 35)
                    iList_01[1] = 4;
                else
                    iList_01[1] = 5;
            }
            Ambulance_Fluids(iList_01[1]);
            if (!bAmberAntz)
            {
                VehicleSpawn("Ambulance", vGetaway, fGetDir, false, false, true, false, 0, 0, 66, MyLang.Maptext[7], 1, true);
                VTBTimerPool.Add(ttTextBar_01);
                ttTextBar_01.Label = "" + MyLang.Othertext[8] + "";
                ttTextBar_02.Label = "" + MyLang.Othertext[1] + "";
                iCashReward = 0;
                BeOnOff[4] = true;
                if (!bTestRun)
                    BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[6], "", 5000);
            }
            bOnTheJob = true;
        }
        public class AmbBuild
        {
            public int Local { get; set; }
            public Vector3 AmbPed { get; set; }
        }
        private void Follow()
        {
            LogThis("Follow");

            VTBTimerPool.Add(BtSlideBar);
            BtSlideBar.Label = "" + MyLang.Othertext[17] + "";
            ttTextBar_01.Label = "" + MyLang.Othertext[13] + "";
            MultiPed.Clear();
            BeOnOff.Clear();
            iTime_01.Clear();
            iList_01.Clear();
            if (Function.Call<int>(Hash.GET_CLOCK_HOURS) > 21 || Function.Call<int>(Hash.GET_CLOCK_HOURS) < 5 && iLocationX > 4)
            {
                if (RandInt(1, 40) < 20)
                    iMissionVar_01 = FindRandom(8, 1, 5);
                else
                    iMissionVar_01 = 6;
            }
            else
                iMissionVar_01 = FindRandom(8, 1, 5);

            iList_01.Add(0);//  iStupidPed  0
            iList_01.Add(0);//  iVehPay     1
            iList_01.Add(0);//  iVehMaxHeal 2
            iList_01.Add(0);//  iVehBroken  3

            if (iMissionVar_01 == 3)
                ttTextBar_02.Label = "" + MyLang.Othertext[7] + "";
            //alien abduction...Random Drive.iMissionVar_01 = 6
            if (iLocationX == 1)
            {
                VectorList_01.Clear();
                VectorList_02.Clear();
                if (iMissionVar_01 == 1)//npc travel to althoraties--fib/etc
                {
                    VectorList_01.Add(new Vector3(360.5464f, -1584.165f, 29.29195f));//--runto
                    VectorList_01.Add(new Vector3(368.7477f, -1568.24f, 29.28557f));//--car stop
                }       //Take out the two npc's route the npcs--find safe house for each zone.iMissionVar_01 = 1
                else if (iMissionVar_01 == 2)//npc travel to blow up spot
                {
                    int iRanEnd = RandInt(0, 10);
                    if (iRanEnd == 1)
                        VectorList_01.Add(new Vector3(-212.9721f, -1492.458f, 31.26519f));
                    else if (iRanEnd == 2)
                        VectorList_01.Add(new Vector3(-220.3911f, -1730.155f, 32.30098f));
                    else if (iRanEnd == 3)
                        VectorList_01.Add(new Vector3(1104.397f, -1461.017f, 34.69287f));
                    else if (iRanEnd == 4)
                        VectorList_01.Add(new Vector3(113.1834f, -1944.621f, 20.72637f));
                    else if (iRanEnd == 5)
                        VectorList_01.Add(new Vector3(522.5928f, -2120.974f, 5.986337f));
                    else if (iRanEnd == 6)
                        VectorList_01.Add(new Vector3(1124.81f, -1254.712f, 20.65065f));
                    else if (iRanEnd == 7)
                        VectorList_01.Add(new Vector3(1549.309f, -2571.281f, 55.69209f));
                    else if (iRanEnd == 8)
                        VectorList_01.Add(new Vector3(180.2808f, -3307.198f, 5.593638f));
                    else if (iRanEnd == 9)
                        VectorList_01.Add(new Vector3(-514.3119f, -2754.772f, 6.000218f));
                    else
                        VectorList_01.Add(new Vector3(-1202.346f, -2051.986f, 13.92475f));
                }       //Follow to end then arial atack the car at end point.iMissionVar_01 = 2
                else if (iMissionVar_01 == 3)//ambush player
                {
                    int iRanEnd = RandInt(1, 8);
                    if (iRanEnd == 1)
                    {
                        VectorList_01.Add(new Vector3(-466.3487f, -1681.311f, 19.00033f));
                        VectorList_01.Add(new Vector3(-468.6617f, -1696.539f, 18.82487f));
                        VectorList_01.Add(new Vector3(-470.0145f, -1707.781f, 18.89761f));
                        VectorList_01.Add(new Vector3(-433.1457f, -1720.573f, 18.95468f));
                        VectorList_01.Add(new Vector3(-422.8595f, -1699.194f, 19.10666f));
                        VectorList_01.Add(new Vector3(-443.4807f, -1703.646f, 18.90604f));//-- park
                    }
                    else if (iRanEnd == 2)
                    {
                        VectorList_01.Add(new Vector3(-220.8786f, -2652.528f, 11.79702f));
                        VectorList_01.Add(new Vector3(-233.6745f, -2651.991f, 11.79702f));
                        VectorList_01.Add(new Vector3(-237.1441f, -2667.249f, 8.876022f));
                        VectorList_01.Add(new Vector3(-217.7384f, -2651.669f, 6.000296f));
                        VectorList_01.Add(new Vector3(-236.7321f, -2651.404f, 6.000294f));
                        VectorList_01.Add(new Vector3(-229.2889f, -2647.295f, 6.000293f));
                    }
                    else if (iRanEnd == 3)
                    {
                        VectorList_01.Add(new Vector3(428.1903f, -2912.532f, 6.736246f));
                        VectorList_01.Add(new Vector3(544.6238f, -2906.799f, 6.736241f));
                        VectorList_01.Add(new Vector3(491.8947f, -2911.617f, 6.73115f));
                        VectorList_01.Add(new Vector3(478.3532f, -2912.956f, 6.729879f));
                        VectorList_01.Add(new Vector3(479.5107f, -2940.874f, 6.044461f));

                        string sPlank = "prop_rub_planks_03";
                        Vector3 posy = new Vector3(487.212799f, -2925.94751f, 6.18317032f);
                        Vector3 Rota = new Vector3(-55.0000572f, -1.209414f, -1.243144f);
                        BuildProp(sPlank, posy, Rota, true, true);
                    }
                    else if (iRanEnd == 4)
                    {
                        VectorList_01.Add(new Vector3(1742.744f, -1618.212f, 116.1949f));
                        VectorList_01.Add(new Vector3(1707.913f, -1616.933f, 112.4624f));
                        VectorList_01.Add(new Vector3(1697.077f, -1557.716f, 112.6263f));
                        VectorList_01.Add(new Vector3(1714.654f, -1597.784f, 113.8148f));
                        VectorList_01.Add(new Vector3(1720.242f, -1599.38f, 112.5155f));
                        VectorList_01.Add(new Vector3(1737.309f, -1597.527f, 112.5378f));
                        VectorList_01.Add(new Vector3(1731.439f, -1570.151f, 112.6263f));
                    }
                    else if (iRanEnd == 5)
                    {
                        VectorList_01.Add(new Vector3(304.6562f, -2040.644f, 20.18769f));
                        VectorList_01.Add(new Vector3(336.1408f, -2015.46f, 25.80145f));
                        VectorList_01.Add(new Vector3(371.3257f, -2047.301f, 22.06841f));
                        VectorList_01.Add(new Vector3(347.0751f, -2068.79f, 20.88846f));
                        VectorList_01.Add(new Vector3(344.499f, -2035.49f, 21.85677f));
                        VectorList_01.Add(new Vector3(329.0612f, -2035.297f, 20.95919f));
                    }
                    else if (iRanEnd == 6)
                    {
                        VectorList_01.Add(new Vector3(445.6512f, -1558.722f, 29.28262f));
                        VectorList_01.Add(new Vector3(420.9958f, -1569.005f, 29.3926f));
                        VectorList_01.Add(new Vector3(433.3597f, -1535.887f, 29.28205f));
                        VectorList_01.Add(new Vector3(433.0142f, -1560.252f, 32.79224f));
                        VectorList_01.Add(new Vector3(425.2534f, -1549.954f, 29.07599f));
                    }
                    else if (iRanEnd == 7)
                    {
                        VectorList_01.Add(new Vector3(-346.0823f, -1338.078f, 37.30556f));
                        VectorList_01.Add(new Vector3(-329.6708f, -1340.884f, 31.29306f));
                        VectorList_01.Add(new Vector3(-347.8383f, -1315.876f, 31.41311f));
                        VectorList_01.Add(new Vector3(-334.7632f, -1313.421f, 31.4002f));
                        VectorList_01.Add(new Vector3(-336.9937f, -1318.542f, 31.37252f));
                        VectorList_01.Add(new Vector3(-327.2391f, -1326.327f, 31.34753f));
                    }
                    else
                    {
                        VectorList_01.Add(new Vector3(986.048f, -1547.899f, 38.09137f));
                        VectorList_01.Add(new Vector3(991.3909f, -1529.613f, 30.86609f));
                        VectorList_01.Add(new Vector3(1003.014f, -1539.112f, 30.83599f));
                        VectorList_01.Add(new Vector3(992.9978f, -1550.005f, 30.75492f));
                        VectorList_01.Add(new Vector3(987.3577f, -1535.514f, 30.75465f));
                    }
                }       //abush player at end point.iMissionVar_01 = 3
                else if (iMissionVar_01 == 4)//sell the car
                {
                    VectorList_01.Add(new Vector3(1204.6427f, -3105.188f, 4.3991f));
                    VectorList_01.Add(new Vector3(1175.856f, -3103.262f, 5.028f));
                }       //have player steal and deliver a vehcle. find delivery point for each zone.iMissionVar_01 = 4
                else if (iMissionVar_01 == 5)// car goes to heli safe zone thing.
                {
                    VectorList_01.Add(new Vector3(-488.9879f, -1822.73f, 22.68803f));   //Heli spot	
                    VectorList_01.Add(new Vector3(-507.5099f, -1805.486f, 22.12456f)); //park
                }        //have player protect two in car against two attacking cars--Find diffren safe zone for each zone.iMissionVar_01 = 5

                int iRanMid = FindRandom(25, 1, 22);
                if (iRanMid == 1)
                {
                    VectorList_02.Add(new Vector3(29.23337f, -1348.415f, 29.49703f));
                    VectorList_01.Add(new Vector3(28.0686f, -1357.108f, 28.65457f));
                    VectorList_01.Add(new Vector3(63.66151f, -1316.564f, 28.68255f));
                }
                else if (iRanMid == 2)
                {
                    VectorList_02.Add(new Vector3(81.74303f, -1391.563f, 29.38763f));
                    VectorList_01.Add(new Vector3(86.91164f, -1390.736f, 28.6442f));
                    VectorList_01.Add(new Vector3(89.8817f, -1393.499f, 28.70121f));
                }
                else if (iRanMid == 3)
                {
                    VectorList_02.Add(new Vector3(128.0179f, -1297.512f, 29.26953f));
                    VectorList_01.Add(new Vector3(132.0314f, -1307.579f, 28.52441f));
                    VectorList_01.Add(new Vector3(123.205f, -1361.701f, 28.69243f));
                }
                else if (iRanMid == 4)
                {
                    VectorList_02.Add(new Vector3(133.5348f, -1711.055f, 29.29162f));
                    VectorList_01.Add(new Vector3(129.9288f, -1717.183f, 28.49205f));
                    VectorList_01.Add(new Vector3(150.4179f, -1738.598f, 28.54851f));
                }
                else if (iRanMid == 5)
                {
                    VectorList_02.Add(new Vector3(-52.55956f, -1755.939f, 29.42101f));
                    VectorList_01.Add(new Vector3(-65.20522f, -1757.994f, 28.69993f));
                    VectorList_01.Add(new Vector3(-102.9381f, -1769.873f, 29.05534f));
                }
                else if (iRanMid == 6)
                {
                    VectorList_02.Add(new Vector3(-137.6957f, -2037.263f, 22.95606f));
                    VectorList_01.Add(new Vector3(-153.1859f, -2032.061f, 22.11925f));
                    VectorList_01.Add(new Vector3(-161.5409f, -2071.736f, 25.26752f));
                }
                else if (iRanMid == 7)
                {
                    VectorList_02.Add(new Vector3(-249.2285f, -1877.849f, 27.75544f));
                    VectorList_01.Add(new Vector3(-238.8648f, -1861.373f, 28.19997f));
                    VectorList_01.Add(new Vector3(-259.1034f, -1838.252f, 27.69475f));
                }
                else if (iRanMid == 8)
                {
                    VectorList_02.Add(new Vector3(-434.3504f, -2170.941f, 11.33855f));
                    VectorList_01.Add(new Vector3(-436.1488f, -2161.472f, 9.623337f));
                    VectorList_01.Add(new Vector3(-474.4507f, -2152.865f, 8.923837f));
                }
                else if (iRanMid == 9)
                {
                    VectorList_02.Add(new Vector3(-1037.877f, -2737.805f, 20.16927f));
                    VectorList_01.Add(new Vector3(-1033.819f, -2730.47f, 19.48834f));
                    VectorList_01.Add(new Vector3(-1081.809f, -2690.297f, 19.57225f));
                }
                else if (iRanMid == 10)
                {
                    VectorList_02.Add(new Vector3(-697.024f, -2282.052f, 13.06055f));
                    VectorList_01.Add(new Vector3(-688.7805f, -2285.939f, 12.39142f));
                    VectorList_01.Add(new Vector3(-616.1142f, -2267.951f, 5.357932f));
                }
                else if (iRanMid == 11)
                {
                    VectorList_02.Add(new Vector3(-878.5355f, -2179.119f, 9.809047f));
                    VectorList_01.Add(new Vector3(-886.9496f, -2188.644f, 7.948472f));
                    VectorList_01.Add(new Vector3(-851.291f, -2256.93f, 6.617734f));
                }
                else if (iRanMid == 12)
                {
                    VectorList_02.Add(new Vector3(-415.1752f, -2765.653f, 6.000383f));
                    VectorList_01.Add(new Vector3(-414.1678f, -2769.615f, 5.424991f));
                    VectorList_01.Add(new Vector3(-372.4109f, -2752.222f, 5.463089f));
                }
                else if (iRanMid == 13)
                {
                    VectorList_02.Add(new Vector3(256.8485f, -3061.773f, 5.863027f));
                    VectorList_01.Add(new Vector3(239.1449f, -3071.851f, 5.231382f));
                    VectorList_01.Add(new Vector3(283.8772f, -3122.928f, 5.085526f));
                }
                else if (iRanMid == 14)
                {
                    VectorList_02.Add(new Vector3(637.727f, -3013.609f, 6.227631f));
                    VectorList_01.Add(new Vector3(637.6893f, -3005.846f, 5.470101f));
                    VectorList_01.Add(new Vector3(589.182f, -3016.52f, 5.468886f));
                }
                else if (iRanMid == 15)
                {
                    VectorList_02.Add(new Vector3(1193.594f, -3256.138f, 7.095187f));
                    VectorList_01.Add(new Vector3(1173.26f, -3256.969f, 5.26041f));
                    VectorList_01.Add(new Vector3(1155.172f, -3321.503f, 5.352808f));
                }
                else if (iRanMid == 16)
                {
                    VectorList_02.Add(new Vector3(933.8091f, -1809.5f, 30.78419f));
                    VectorList_01.Add(new Vector3(949.5656f, -1808.37f, 30.56504f));
                    VectorList_01.Add(new Vector3(924.9987f, -1769.509f, 30.40345f));
                }
                else if (iRanMid == 17)
                {
                    VectorList_02.Add(new Vector3(820.9397f, -1632.992f, 30.74221f));
                    VectorList_01.Add(new Vector3(825.5375f, -1635.506f, 29.88921f));
                    VectorList_01.Add(new Vector3(834.3431f, -1578.166f, 29.98528f));
                }
                else if (iRanMid == 18)
                {
                    VectorList_02.Add(new Vector3(1322.209f, -1651.059f, 52.27487f));
                    VectorList_01.Add(new Vector3(1313.032f, -1639.093f, 51.49751f));
                    VectorList_01.Add(new Vector3(1268.845f, -1667.092f, 46.22371f));
                }
                else if (iRanMid == 19)
                {
                    VectorList_02.Add(new Vector3(1776.385f, -1617.179f, 112.3981f));
                    VectorList_01.Add(new Vector3(1780.726f, -1612.925f, 111.8114f));
                    VectorList_01.Add(new Vector3(1770.492f, -1577.206f, 111.994f));
                }
                else if (iRanMid == 20)
                {
                    VectorList_02.Add(new Vector3(1429.655f, -2596.344f, 48.05575f));
                    VectorList_01.Add(new Vector3(1429.385f, -2581.218f, 47.42775f));
                    VectorList_01.Add(new Vector3(1391.722f, -2575.155f, 48.10217f));
                }
                else if (iRanMid == 21)
                {
                    VectorList_02.Add(new Vector3(843.981f, -1025.446f, 28.19486f));
                    VectorList_01.Add(new Vector3(842.7297f, -1011.748f, 27.24161f));
                    VectorList_01.Add(new Vector3(806.2791f, -1008.782f, 25.5903f));
                }
                else
                {
                    VectorList_02.Add(new Vector3(791.995f, -736.0549f, 27.49739f));
                    VectorList_01.Add(new Vector3(780.7507f, -745.2405f, 26.79471f));
                    VectorList_01.Add(new Vector3(778.6619f, -799.9254f, 25.85231f));
                }
            }
            else if (iLocationX == 2)
            {
                VectorList_01.Clear();
                VectorList_02.Clear();
                if (iMissionVar_01 == 1)
                {
                    VectorList_01.Add(new Vector3(437.1844f, -979.4984f, 30.68965f));
                    VectorList_01.Add(new Vector3(399.3774f, -986.9354f, 29.44869f));
                }       //npc travel to althoraties--fib/etc
                else if (iMissionVar_01 == 2)
                {
                    int iRanEnd = RandInt(1, 7);
                    if (iRanEnd == 1)
                        VectorList_01.Add(new Vector3(-305.1092f, 316.7586f, 93.25459f));
                    else if (iRanEnd == 2)
                        VectorList_01.Add(new Vector3(515.2481f, -630.4966f, 24.06135f));
                    else if (iRanEnd == 3)
                        VectorList_01.Add(new Vector3(-355.3961f, -948.6683f, 30.38784f));
                    else if (iRanEnd == 4)
                        VectorList_01.Add(new Vector3(28.46826f, -889.8625f, 29.40291f));
                    else if (iRanEnd == 5)
                        VectorList_01.Add(new Vector3(-759.4818f, -576.5731f, 29.43292f));
                    else if (iRanEnd == 6)
                        VectorList_01.Add(new Vector3(-1663.27f, -851.8062f, 8.492905f));
                    else
                        VectorList_01.Add(new Vector3(-1161.485f, -1757.189f, 3.299878f));
                }       //npc travel to blow up spot
                else if (iMissionVar_01 == 3)
                {
                    int iRanEnd = RandInt(1, 6);
                    if (iRanEnd == 1)
                    {
                        VectorList_01.Add(new Vector3(-941.4105f, 152.5079f, 65.02007f));
                        VectorList_01.Add(new Vector3(-920.506f, 157.4754f, 69.02317f));
                        VectorList_01.Add(new Vector3(-905.4229f, 155.7684f, 69.02409f));
                        VectorList_01.Add(new Vector3(-908.3251f, 153.3763f, 66.16821f));
                        VectorList_01.Add(new Vector3(-934.6646f, 161.8468f, 65.41588f));
                    }
                    else if (iRanEnd == 2)
                    {
                        VectorList_01.Add(new Vector3(121.0306f, -378.0263f, 42.7957f));
                        VectorList_01.Add(new Vector3(106.1587f, -379.3279f, 41.76587f));
                        VectorList_01.Add(new Vector3(109.7575f, -411.4167f, 41.21627f));
                        VectorList_01.Add(new Vector3(102.5173f, -453.8578f, 41.13155f));
                        VectorList_01.Add(new Vector3(104.8115f, -439.1882f, 41.51765f));
                        VectorList_01.Add(new Vector3(117.9353f, -429.0256f, 40.39623f));
                    }
                    else if (iRanEnd == 3)
                    {
                        VectorList_01.Add(new Vector3(-1455.117f, -680.4637f, 26.53085f));
                        VectorList_01.Add(new Vector3(-1446.568f, -694.6417f, 26.36806f));
                        VectorList_01.Add(new Vector3(-1424.018f, -660.3842f, 28.67337f));
                        VectorList_01.Add(new Vector3(-1433.032f, -662.9283f, 26.85435f));
                        VectorList_01.Add(new Vector3(-1441.234f, -667.9251f, 25.91721f));
                    }
                    else if (iRanEnd == 4)
                    {
                        VectorList_01.Add(new Vector3(-1121.113f, -974.092f, 6.632129f));
                        VectorList_01.Add(new Vector3(-1130.522f, -953.6594f, 6.628807f));
                        VectorList_01.Add(new Vector3(-1119.516f, -965.3847f, 2.150753f));
                        VectorList_01.Add(new Vector3(-1121.4f, -971.5309f, 2.160945f));
                        VectorList_01.Add(new Vector3(-1112.713f, -963.7789f, 1.6106f));
                    }
                    else if (iRanEnd == 5)
                    {
                        VectorList_01.Add(new Vector3(-1275.67f, -1347.123f, 9.711223f));
                        VectorList_01.Add(new Vector3(-1262.919f, -1345.914f, 4.083723f));
                        VectorList_01.Add(new Vector3(-1257.257f, -1365.544f, 4.053958f));
                        VectorList_01.Add(new Vector3(-1269.841f, -1367.156f, 4.299968f));
                        VectorList_01.Add(new Vector3(-1266.601f, -1358.039f, 3.523245f));
                    }
                    else
                    {
                        VectorList_01.Add(new Vector3(460.8025f, -762.4088f, 27.3578f));
                        VectorList_01.Add(new Vector3(452.9416f, -777.0596f, 27.3578f));
                        VectorList_01.Add(new Vector3(460.7719f, -770.8568f, 27.35778f));
                        VectorList_01.Add(new Vector3(448.8096f, -800.5675f, 27.80494f));
                        VectorList_01.Add(new Vector3(457.1569f, -796.0293f, 27.35778f));
                    }
                }       //ambush player
                else if (iMissionVar_01 == 4)
                {
                    VectorList_01.Add(new Vector3(-13.47234f, -1082.492f, 25.67207f));
                    VectorList_01.Add(new Vector3(-28.76398f, -1085.738f, 26.56468f));
                }       //sell the car
                else if (iMissionVar_01 == 5)
                {
                    VectorList_01.Add(new Vector3(-119.3288f, -420.7425f, 35.39782f));
                    VectorList_01.Add(new Vector3(-152.6864f, -404.7901f, 33.60013f));
                }       // car goes to heli safe zone thing.

                int iRanMid = FindRandom(26, 1, 28);
                if (iRanMid == 1)
                {
                    VectorList_02.Add(new Vector3(150.5676f, -1038.429f, 29.37779f));
                    VectorList_01.Add(new Vector3(154.8974f, -1031.307f, 28.5814f));
                    VectorList_01.Add(new Vector3(125.958f, -1018.502f, 28.63811f));
                }
                else if (iRanMid == 2)
                {
                    VectorList_02.Add(new Vector3(435.5468f, -981.9232f, 30.6896f));
                    VectorList_01.Add(new Vector3(403.8796f, -981.2629f, 28.64109f));
                    VectorList_01.Add(new Vector3(401.5371f, -1025.104f, 28.70385f));
                }
                else if (iRanMid == 3)
                {
                    VectorList_02.Add(new Vector3(419.2306f, -807.6665f, 29.50262f));
                    VectorList_01.Add(new Vector3(411.4574f, -809.9119f, 28.47944f));
                    VectorList_01.Add(new Vector3(408.4914f, -833.3914f, 28.61216f));
                }
                else if (iRanMid == 4)
                {
                    VectorList_02.Add(new Vector3(309.6114f, -728.0588f, 29.31677f));
                    VectorList_01.Add(new Vector3(319.8952f, -731.7748f, 28.5953f));
                    VectorList_01.Add(new Vector3(342.1745f, -687.5825f, 28.65983f));
                }
                else if (iRanMid == 5)
                {
                    VectorList_02.Add(new Vector3(17.77203f, -1114.053f, 29.80933f));
                    VectorList_01.Add(new Vector3(16.63231f, -1125.647f, 28.06987f));
                    VectorList_01.Add(new Vector3(45.7648f, -1108.079f, 28.51067f));
                }
                else if (iRanMid == 6)
                {
                    VectorList_02.Add(new Vector3(-157.7985f, -305.1355f, 39.73332f));
                    VectorList_01.Add(new Vector3(-147.679f, -305.7886f, 38.11828f));
                    VectorList_01.Add(new Vector3(-125.9831f, -248.4289f, 43.55973f));
                }
                else if (iRanMid == 7)
                {
                    VectorList_02.Add(new Vector3(126.7074f, -212.7012f, 54.55783f));
                    VectorList_01.Add(new Vector3(134.0649f, -199.8658f, 53.67999f));
                    VectorList_01.Add(new Vector3(89.80457f, -181.9914f, 54.18617f));
                }
                else if (iRanMid == 8)
                {
                    VectorList_02.Add(new Vector3(259.3805f, 204.2648f, 106.2831f));
                    VectorList_01.Add(new Vector3(254.653f, 186.6486f, 104.2287f));
                    VectorList_01.Add(new Vector3(274.2308f, 178.7519f, 103.8945f));
                }
                else if (iRanMid == 9)
                {
                    VectorList_02.Add(new Vector3(321.1473f, 179.5577f, 103.5865f));
                    VectorList_01.Add(new Vector3(316.4339f, 165.1335f, 102.9876f));
                    VectorList_01.Add(new Vector3(343.2505f, 153.9202f, 102.4657f));
                }
                else if (iRanMid == 10)
                {
                    VectorList_02.Add(new Vector3(377.0154f, 324.1906f, 103.5664f));
                    VectorList_01.Add(new Vector3(374.426f, 315.8162f, 102.6391f));
                    VectorList_01.Add(new Vector3(404.8438f, 305.6038f, 102.2811f));
                }
                else if (iRanMid == 11)
                {
                    VectorList_02.Add(new Vector3(245.0385f, -45.62914f, 69.94103f));
                    VectorList_01.Add(new Vector3(237.4628f, -59.92862f, 68.72849f));
                    VectorList_01.Add(new Vector3(263.1981f, -71.03434f, 69.25334f));
                }
                else if (iRanMid == 12)
                {
                    VectorList_02.Add(new Vector3(328.1036f, -73.02845f, 70.92542f));
                    VectorList_01.Add(new Vector3(323.9522f, -91.40186f, 68.08755f));
                    VectorList_01.Add(new Vector3(359.7021f, -102.1399f, 65.88079f));
                }
                else if (iRanMid == 13)
                {
                    VectorList_02.Add(new Vector3(392.07f, -366.2047f, 46.82951f));
                    VectorList_01.Add(new Vector3(403.1596f, -382.5547f, 46.07794f));
                    VectorList_01.Add(new Vector3(442.0821f, -345.303f, 46.78571f));
                }
                else if (iRanMid == 14)
                {
                    VectorList_02.Add(new Vector3(315.0392f, -276.8981f, 54.17453f));
                    VectorList_01.Add(new Vector3(319.6658f, -268.366f, 53.09295f));
                    VectorList_01.Add(new Vector3(278.2222f, -250.8765f, 53.26501f));
                }
                else if (iRanMid == 15)
                {
                    VectorList_02.Add(new Vector3(6.693173f, -984.5064f, 29.36952f));
                    VectorList_01.Add(new Vector3(12.53872f, -973.5062f, 28.7167f));
                    VectorList_01.Add(new Vector3(-11.21784f, -963.0413f, 28.64429f));
                }
                else if (iRanMid == 16)
                {
                    VectorList_02.Add(new Vector3(-1287.183f, -1116.392f, 6.990112f));
                    VectorList_01.Add(new Vector3(-1296.747f, -1115.58f, 6.019869f));
                    VectorList_01.Add(new Vector3(-1298.694f, -1150.089f, 5.026756f));
                }
                else if (iRanMid == 17)
                {
                    VectorList_02.Add(new Vector3(-1154.255f, -1424.516f, 4.954461f));
                    VectorList_01.Add(new Vector3(-1165.649f, -1415.353f, 4.265989f));
                    VectorList_01.Add(new Vector3(-1172.066f, -1453.376f, 3.89234f));
                }
                else if (iRanMid == 18)
                {
                    VectorList_02.Add(new Vector3(-818.3663f, -1078.256f, 11.3396f));
                    VectorList_01.Add(new Vector3(-809.4523f, -1083.536f, 10.74389f));
                    VectorList_01.Add(new Vector3(-823.6926f, -1034.418f, 12.74137f));
                }
                else if (iRanMid == 19)
                {
                    VectorList_02.Add(new Vector3(-663.9907f, -943.4654f, 21.82922f));
                    VectorList_01.Add(new Vector3(-661.7155f, -952.7981f, 20.87846f));
                    VectorList_01.Add(new Vector3(-646.4616f, -936.1199f, 21.87238f));
                }
                else if (iRanMid == 20)
                {
                    VectorList_02.Add(new Vector3(-711.6722f, -915.5839f, 19.21559f));
                    VectorList_01.Add(new Vector3(-710.6805f, -927.8516f, 18.54868f));
                    VectorList_01.Add(new Vector3(-682.2473f, -953.5211f, 20.12739f));
                }
                else if (iRanMid == 21)
                {
                    VectorList_02.Add(new Vector3(-1214.073f, -329.0381f, 37.79074f));
                    VectorList_01.Add(new Vector3(-1220.868f, -318.1037f, 37.08377f));
                    VectorList_01.Add(new Vector3(-1269.245f, -342.6541f, 36.22647f));
                }
                else if (iRanMid == 22)
                {
                    VectorList_02.Add(new Vector3(-350.3195f, -47.78835f, 49.04627f));
                    VectorList_01.Add(new Vector3(-331.8652f, -33.8008f, 47.3376f));
                    VectorList_01.Add(new Vector3(-377.7131f, -16.585f, 46.37019f));
                }
                else if (iRanMid == 23)
                {
                    VectorList_02.Add(new Vector3(-1225.991f, -903.5627f, 12.33818f));
                    VectorList_01.Add(new Vector3(-1231.791f, -897.3057f, 11.63345f));
                    VectorList_01.Add(new Vector3(-1260.357f, -915.747f, 10.61654f));
                }
                else if (iRanMid == 24)
                {
                    VectorList_02.Add(new Vector3(-715.5591f, -156.2034f, 37.41513f));
                    VectorList_01.Add(new Vector3(-725.0962f, -159.5366f, 36.48624f));
                    VectorList_01.Add(new Vector3(-700.7872f, -204.7722f, 36.45102f));
                }
                else if (iRanMid == 25)
                {
                    VectorList_02.Add(new Vector3(-822.507f, -187.3798f, 37.56894f));
                    VectorList_01.Add(new Vector3(-829.0215f, -192.5075f, 36.99609f));
                    VectorList_01.Add(new Vector3(-807.1179f, -233.9201f, 36.66647f));
                }
                else if (iRanMid == 26)
                {
                    VectorList_02.Add(new Vector3(-1313.495f, -390.4828f, 36.69578f));
                    VectorList_01.Add(new Vector3(-1331.804f, -392.1112f, 36.12673f));
                    VectorList_01.Add(new Vector3(-1354.216f, -413.1361f, 35.70697f));
                }
                else if (iRanMid == 27)
                {
                    VectorList_02.Add(new Vector3(-1455.13f, -232.8911f, 49.79767f));
                    VectorList_01.Add(new Vector3(-1459.44f, -228.1249f, 48.73184f));
                    VectorList_01.Add(new Vector3(-1478.014f, -243.8873f, 49.6101f));
                }
                else
                {
                    VectorList_02.Add(new Vector3(-1276.471f, 312.2378f, 65.51176f));
                    VectorList_01.Add(new Vector3(-1285.92f, 291.7623f, 64.34614f));
                    VectorList_01.Add(new Vector3(-1215.076f, 247.9535f, 66.87453f));
                }
            }
            else if (iLocationX == 3)
            {
                VectorList_01.Clear();
                VectorList_02.Clear();
                if (iMissionVar_01 == 1)//npc travel to althoraties--fib/etc
                {
                    VectorList_01.Add(new Vector3(-1093.32f, -809.6802f, 19.28031f));
                    VectorList_01.Add(new Vector3(-1109.039f, -794.2333f, 18.33924f));
                }
                else if (iMissionVar_01 == 2)//npc travel to blow up spot
                {
                    int iRanEnd = RandInt(1, 5);
                    if (iRanEnd == 1)
                        VectorList_01.Add(new Vector3(-1147.108f, 2655.513f, 16.8784f));
                    else if (iRanEnd == 2)
                        VectorList_01.Add(new Vector3(-2214.634f, 2314.952f, 31.92688f));
                    else if (iRanEnd == 3)
                        VectorList_01.Add(new Vector3(-2633.869f, 1408.097f, 133.7498f));
                    else if (iRanEnd == 4)
                        VectorList_01.Add(new Vector3(-1164.654f, 935.5737f, 196.8013f));
                    else
                        VectorList_01.Add(new Vector3(-1648.272f, -202.5842f, 54.42236f));
                }
                else if (iMissionVar_01 == 3)//ambush player
                {
                    int iRanEnd = RandInt(1, 5);
                    if (iRanEnd == 1)
                    {
                        VectorList_01.Add(new Vector3(-1916.915f, 1787.843f, 172.1105f));
                        VectorList_01.Add(new Vector3(-1927.097f, 1789.93f, 172.5048f));
                        VectorList_01.Add(new Vector3(-1953.392f, 1778.626f, 182.9692f));
                        VectorList_01.Add(new Vector3(-1951.746f, 1775.084f, 182.9704f));
                        VectorList_01.Add(new Vector3(-1930.831f, 1772.518f, 172.7545f));
                    }
                    else if (iRanEnd == 2)
                    {
                        VectorList_01.Add(new Vector3(-2960.012f, 50.08887f, 16.09332f));
                        VectorList_01.Add(new Vector3(-2947.078f, 58.85783f, 11.60851f));
                        VectorList_01.Add(new Vector3(-2954.036f, 49.58205f, 11.60851f));
                        VectorList_01.Add(new Vector3(-2965.753f, 54.34407f, 11.60851f));
                        VectorList_01.Add(new Vector3(-2972.483f, 70.1152f, 11.6085f));
                    }
                    else if (iRanEnd == 3)
                    {
                        VectorList_01.Add(new Vector3(-2959.741f, 446.2224f, 15.28847f));
                        VectorList_01.Add(new Vector3(-2947.957f, 450.3016f, 15.30228f));
                        VectorList_01.Add(new Vector3(-2965.23f, 433.1578f, 15.28108f));
                        VectorList_01.Add(new Vector3(-2961.716f, 443.0429f, 15.26522f));
                    }
                    else if (iRanEnd == 4)
                    {
                        VectorList_01.Add(new Vector3(-3023.697f, 755.4214f, 31.59152f));
                        VectorList_01.Add(new Vector3(-3007.525f, 737.8899f, 27.58927f));
                        VectorList_01.Add(new Vector3(-3020.523f, 759.449f, 27.58969f));
                        VectorList_01.Add(new Vector3(-3021.461f, 750.8193f, 27.5876f));
                        VectorList_01.Add(new Vector3(-3022.211f, 738.6611f, 26.48458f));
                    }
                    else
                    {
                        VectorList_01.Add(new Vector3(-2785.367f, 1441.805f, 100.8382f));
                        VectorList_01.Add(new Vector3(-2795.599f, 1434.323f, 100.9284f));
                        VectorList_01.Add(new Vector3(-2784.188f, 1434.718f, 100.9284f));
                        VectorList_01.Add(new Vector3(-2772.503f, 1435.061f, 100.4354f));
                    }
                }
                else if (iMissionVar_01 == 4)//sell the car
                {
                    VectorList_01.Add(new Vector3(-1131.881f, 2697.187f, 17.80042f));
                    VectorList_01.Add(new Vector3(-1121.609f, 2679.994f, 18.52382f));
                }
                else if (iMissionVar_01 == 5)// car goes to heli safe zone thing.
                {
                    VectorList_01.Add(new Vector3(-2954.219f, 2167.244f, 40.16458f));
                    VectorList_01.Add(new Vector3(-2968.396f, 2119.992f, 41.1056f));
                }

                int iRanMid = FindRandom(27, 1, 11);
                if (iRanMid == 1)
                {
                    VectorList_02.Add(new Vector3(-3023.628f, 81.30469f, 11.60812f));
                    VectorList_01.Add(new Vector3(-3017.194f, 92.83518f, 11.14902f));
                    VectorList_01.Add(new Vector3(-3023.84f, 158.7286f, 15.13305f));
                }
                else if (iRanMid == 2)
                {
                    VectorList_02.Add(new Vector3(-3039.551f, 589.3835f, 7.908935f));
                    VectorList_01.Add(new Vector3(-3031.718f, 592.6396f, 7.234287f));
                    VectorList_01.Add(new Vector3(-3051.739f, 648.9286f, 8.024443f));
                }
                else if (iRanMid == 3)
                {
                    VectorList_02.Add(new Vector3(-2965.294f, 483.0129f, 15.7068f));
                    VectorList_01.Add(new Vector3(-2974.928f, 480.5086f, 14.78557f));
                    VectorList_01.Add(new Vector3(-2984.725f, 408.2559f, 14.46988f));
                }
                else if (iRanMid == 4)
                {
                    VectorList_02.Add(new Vector3(-2972.692f, 390.6443f, 15.05512f));
                    VectorList_01.Add(new Vector3(-2981.137f, 391.2685f, 14.40238f));
                    VectorList_01.Add(new Vector3(-2993.822f, 338.7894f, 14.12743f));
                }
                else if (iRanMid == 5)
                {
                    VectorList_02.Add(new Vector3(-3240.85f, 1003.79f, 12.83072f));
                    VectorList_01.Add(new Vector3(-3234.54f, 1003.532f, 11.81621f));
                    VectorList_01.Add(new Vector3(-3213.248f, 1106.623f, 9.898706f));
                }
                else if (iRanMid == 6)
                {
                    VectorList_02.Add(new Vector3(-3169.013f, 1074.34f, 20.82919f));
                    VectorList_01.Add(new Vector3(-3157.267f, 1073.005f, 20.21522f));
                    VectorList_01.Add(new Vector3(-3115.631f, 1136.303f, 19.94344f));
                }
                else if (iRanMid == 7)
                {
                    VectorList_02.Add(new Vector3(-1823.114f, 788.9677f, 138.1927f));
                    VectorList_01.Add(new Vector3(-1807.822f, 783.0052f, 136.9682f));
                    VectorList_01.Add(new Vector3(-1764.408f, 801.2717f, 139.7294f));
                }
                else if (iRanMid == 8)
                {
                    VectorList_02.Add(new Vector3(-2289.872f, 361.6877f, 174.6018f));
                    VectorList_01.Add(new Vector3(-2296.743f, 376.432f, 174.0022f));
                    VectorList_01.Add(new Vector3(-2311.907f, 416.1378f, 174.0021f));
                }
                else if (iRanMid == 9)
                {
                    VectorList_02.Add(new Vector3(-1096.334f, 2706.922f, 19.11935f));
                    VectorList_01.Add(new Vector3(-1097.656f, 2693.289f, 19.14252f));
                    VectorList_01.Add(new Vector3(-1041.632f, 2727.878f, 22.51594f));
                }
                else if (iRanMid == 10)
                {
                    VectorList_02.Add(new Vector3(-1113.655f, 2691.379f, 18.55425f));
                    VectorList_01.Add(new Vector3(-1097.656f, 2693.289f, 19.14252f));
                    VectorList_01.Add(new Vector3(-1041.632f, 2727.878f, 22.51594f));
                }
                else
                {
                    VectorList_02.Add(new Vector3(-1576.248f, 2103.661f, 67.65606f));
                    VectorList_01.Add(new Vector3(-1572.975f, 2100.486f, 67.69952f));
                    VectorList_01.Add(new Vector3(-1541.537f, 2150.371f, 54.83641f));
                }
            }
            else if (iLocationX == 4)
            {
                VectorList_01.Clear();
                VectorList_02.Clear();
                if (iMissionVar_01 == 1)//npc travel to althoraties--fib/etc
                {
                    VectorList_01.Add(new Vector3(826.7388f, -1290.302f, 28.24066f));
                    VectorList_01.Add(new Vector3(806.112f, -1290.233f, 26.31686f));
                }
                else if (iMissionVar_01 == 2)//npc travel to blow up spot
                {
                    int iRanEnd = RandInt(1, 5);
                    if (iRanEnd == 1)
                        VectorList_01.Add(new Vector3(2280.166f, 2002.796f, 132.2157f));
                    else if (iRanEnd == 2)
                        VectorList_01.Add(new Vector3(2778.472f, -713.0547f, 5.608036f));
                    else if (iRanEnd == 3)
                        VectorList_01.Add(new Vector3(709.0997f, -290.3679f, 59.1889f));
                    else if (iRanEnd == 4)
                        VectorList_01.Add(new Vector3(1198.236f, -1066.468f, 41.19764f));
                    else
                        VectorList_01.Add(new Vector3(1371.678f, -747.1602f, 67.19487f));
                }
                else if (iMissionVar_01 == 3)//ambush player
                {
                    int iRanEnd = RandInt(1, 5);
                    if (iRanEnd == 1)
                    {
                        VectorList_01.Add(new Vector3(2736.188f, 1548.928f, 32.5069f));
                        VectorList_01.Add(new Vector3(2730.232f, 1529.587f, 32.50654f));
                        VectorList_01.Add(new Vector3(2719.819f, 1534.225f, 24.5007f));
                        VectorList_01.Add(new Vector3(2744.08f, 1551.935f, 24.50095f));
                        VectorList_01.Add(new Vector3(2740.117f, 1566.393f, 32.5075f));
                        VectorList_01.Add(new Vector3(2742.157f, 1566.531f, 24.50095f));
                        VectorList_01.Add(new Vector3(2693.872f, 1559.927f, 24.54244f));
                    }
                    else if (iRanEnd == 2)
                    {
                        VectorList_01.Add(new Vector3(2357.994f, 2607.385f, 46.51448f));
                        VectorList_01.Add(new Vector3(2351.258f, 2611.903f, 46.66764f));
                        VectorList_01.Add(new Vector3(2356.281f, 2621.718f, 46.66764f));
                        VectorList_01.Add(new Vector3(2380.117f, 2617.933f, 46.65619f));
                    }
                    else if (iRanEnd == 3)
                    {
                        VectorList_01.Add(new Vector3(1154.625f, -393.3374f, 72.85555f));
                        VectorList_01.Add(new Vector3(1146.096f, -407.4189f, 67.28852f));
                        VectorList_01.Add(new Vector3(1132.047f, -394.3004f, 67.2338f));
                        VectorList_01.Add(new Vector3(1135.685f, -381.2762f, 67.09464f));
                        VectorList_01.Add(new Vector3(1145.254f, -380.4049f, 67.04916f));
                    }
                    else if (iRanEnd == 4)
                    {
                        VectorList_01.Add(new Vector3(1139.505f, 89.88462f, 80.89087f));
                        VectorList_01.Add(new Vector3(1114.042f, 83.56051f, 80.89034f));
                        VectorList_01.Add(new Vector3(1103.433f, 74.87099f, 80.89034f));
                        VectorList_01.Add(new Vector3(1103.008f, 66.36649f, 80.89034f));
                        VectorList_01.Add(new Vector3(1136.152f, 60.93471f, 80.75613f));
                    }
                    else
                    {
                        VectorList_01.Add(new Vector3(995.9102f, -105.3168f, 74.09823f));
                        VectorList_01.Add(new Vector3(984.004f, -126.2193f, 73.99069f));
                        VectorList_01.Add(new Vector3(969.9445f, -110.1391f, 80.1138f));
                        VectorList_01.Add(new Vector3(972.4277f, -90.44528f, 74.35313f));
                        VectorList_01.Add(new Vector3(944.2719f, -122.1368f, 74.3932f));
                        VectorList_01.Add(new Vector3(976.4417f, -148.78f, 74.24051f));
                        VectorList_01.Add(new Vector3(964.5579f, -133.1566f, 74.3485f));
                    }
                }
                else if (iMissionVar_01 == 4)//sell the car
                {
                    VectorList_01.Add(new Vector3(1120.84f, -785.0795f, 56.72751f));
                    VectorList_01.Add(new Vector3(1130.572f, -775.5194f, 57.60971f));
                }
                else if (iMissionVar_01 == 5)// car goes to heli safe zone thing.
                {
                    VectorList_01.Add(new Vector3(1100.2f, -883.7745f, 48.78764f));
                    VectorList_01.Add(new Vector3(1113.32f, -857.6119f, 52.59922f));
                }

                int iRanMid = FindRandom(28, 1, 9);
                if (iRanMid == 1)
                {
                    VectorList_02.Add(new Vector3(2558.26f, 385.7349f, 108.6229f));
                    VectorList_01.Add(new Vector3(2565.313f, 385.7251f, 107.7566f));
                    VectorList_01.Add(new Vector3(2561.809f, 438.3223f, 107.7476f));
                }
                else if (iRanMid == 2)
                {
                    VectorList_02.Add(new Vector3(915.132f, -302.7374f, 65.63821f));
                    VectorList_01.Add(new Vector3(915.5397f, -322.9527f, 65.21774f));
                    VectorList_01.Add(new Vector3(975.765f, -264.062f, 66.41336f));
                }
                else if (iRanMid == 3)
                {
                    VectorList_02.Add(new Vector3(1140.036f, -980.8665f, 46.42763f));
                    VectorList_01.Add(new Vector3(1148.456f, -979.1394f, 45.51437f));
                    VectorList_01.Add(new Vector3(1149.726f, -929.6285f, 48.95156f));
                }
                else if (iRanMid == 4)
                {
                    VectorList_02.Add(new Vector3(1140.35f, -777.0135f, 57.59868f));
                    VectorList_01.Add(new Vector3(1147.356f, -766.6075f, 56.82197f));
                    VectorList_01.Add(new Vector3(1096.718f, -762.7686f, 57.0197f));
                }
                else if (iRanMid == 5)
                {
                    VectorList_02.Add(new Vector3(1148.3f, -643.3685f, 56.75234f));
                    VectorList_01.Add(new Vector3(1171.921f, -638.9775f, 61.83797f));
                    VectorList_01.Add(new Vector3(1168.966f, -581.2392f, 63.57932f));
                }
                else if (iRanMid == 6)
                {
                    VectorList_02.Add(new Vector3(1208.514f, -470.74f, 66.20801f));
                    VectorList_01.Add(new Vector3(1196.552f, -468.9954f, 65.4528f));
                    VectorList_01.Add(new Vector3(1188.679f, -496.7256f, 64.72223f));
                }
                else if (iRanMid == 7)
                {
                    VectorList_02.Add(new Vector3(1159.593f, -325.3616f, 69.20515f));
                    VectorList_01.Add(new Vector3(1161.269f, -337.5496f, 67.69138f));
                    VectorList_01.Add(new Vector3(1132.317f, -355.0282f, 66.31724f));
                }
                else if (iRanMid == 8)
                {
                    VectorList_02.Add(new Vector3(264.6922f, 1111.179f, 219.4086f));
                    VectorList_01.Add(new Vector3(272.2054f, 1119.912f, 219.4321f));
                    VectorList_01.Add(new Vector3(247.1488f, 1203.263f, 227.7251f));
                }
                else
                {
                    VectorList_02.Add(new Vector3(-414.2745f, 1164.385f, 325.8295f));
                    VectorList_01.Add(new Vector3(-415.3402f, 1177.515f, 325.368f));
                    VectorList_01.Add(new Vector3(-448.1671f, 1191.971f, 325.4735f));
                }
            }
            else if (iLocationX == 5)
            {
                VectorList_01.Clear();
                VectorList_02.Clear();
                if (iMissionVar_01 == 1)//npc travel to althoraties--fib/etc
                {
                    VectorList_01.Add(new Vector3(1856.081f, 3682.657f, 34.26738f));
                    VectorList_01.Add(new Vector3(1865.972f, 3673.243f, 33.81769f));
                }
                else if (iMissionVar_01 == 2)//npc travel to blow up spot
                {
                    int iRanEnd = RandInt(1, 10);
                    if (iRanEnd == 1)
                        VectorList_01.Add(new Vector3(1108.477f, 3403.804f, 33.55983f));
                    else if (iRanEnd == 2)
                        VectorList_01.Add(new Vector3(2050.62f, 3934.335f, 33.08924f));
                    else if (iRanEnd == 3)
                        VectorList_01.Add(new Vector3(377.3796f, 3605.99f, 32.98812f));
                    else if (iRanEnd == 4)
                        VectorList_01.Add(new Vector3(1762.063f, 3056.42f, 61.17683f));
                    else if (iRanEnd == 5)
                        VectorList_01.Add(new Vector3(754.2726f, 2563.917f, 75.38659f));
                    else if (iRanEnd == 6)
                        VectorList_01.Add(new Vector3(780.9742f, 2852.612f, 56.71167f));
                    else if (iRanEnd == 7)
                        VectorList_01.Add(new Vector3(381.162f, 4436.018f, 62.16729f));
                    else if (iRanEnd == 8)
                        VectorList_01.Add(new Vector3(2288.722f, 5095.484f, 48.42321f));
                    else if (iRanEnd == 9)
                        VectorList_01.Add(new Vector3(3322.251f, 5443.404f, 16.94511f));
                    else
                        VectorList_01.Add(new Vector3(2482.423f, 3397.792f, 49.97121f));
                }
                else if (iMissionVar_01 == 3)//ambush player
                {
                    int iRanEnd = RandInt(1, 10);
                    if (iRanEnd == 1)
                    {
                        VectorList_01.Add(new Vector3(1027.707f, 2435.173f, 49.56542f));
                        VectorList_01.Add(new Vector3(1027.986f, 2449.356f, 49.56542f));
                        VectorList_01.Add(new Vector3(1021.449f, 2460.057f, 49.56542f));
                        VectorList_01.Add(new Vector3(1009.09f, 2458.269f, 49.56554f));
                        VectorList_01.Add(new Vector3(1014.779f, 2442.407f, 43.97125f));
                    }
                    else if (iRanEnd == 2)
                    {
                        VectorList_01.Add(new Vector3(407.5113f, 2962.585f, 41.79216f));
                        VectorList_01.Add(new Vector3(411.2284f, 2967.025f, 41.87529f));
                        VectorList_01.Add(new Vector3(430.9095f, 2996.549f, 41.32463f));
                        VectorList_01.Add(new Vector3(374.102f, 2977.123f, 41.00305f));
                        VectorList_01.Add(new Vector3(394.9966f, 2982.83f, 40.35896f));
                    }
                    else if (iRanEnd == 3)
                    {
                        VectorList_01.Add(new Vector3(173.2763f, 2794.865f, 49.80713f));
                        VectorList_01.Add(new Vector3(176.9924f, 2778.042f, 46.07818f));
                        VectorList_01.Add(new Vector3(204.3632f, 2774.66f, 45.65338f));
                        VectorList_01.Add(new Vector3(214.0398f, 2774.114f, 45.65528f));
                        VectorList_01.Add(new Vector3(194.2831f, 2792.18f, 45.12713f));
                    }
                    else if (iRanEnd == 4)
                    {
                        VectorList_01.Add(new Vector3(1587.646f, 3607.843f, 42.11666f));
                        VectorList_01.Add(new Vector3(1591.415f, 3610.72f, 38.73139f));
                        VectorList_01.Add(new Vector3(1579.745f, 3615.354f, 38.7752f));
                        VectorList_01.Add(new Vector3(1578.052f, 3604.84f, 38.74046f));
                        VectorList_01.Add(new Vector3(1595.535f, 3598.655f, 35.43479f));
                        VectorList_01.Add(new Vector3(1603.089f, 3606.787f, 34.61742f));
                    }
                    else if (iRanEnd == 5)
                    {
                        VectorList_01.Add(new Vector3(1539.111f, 3795.603f, 38.17743f));
                        VectorList_01.Add(new Vector3(1557.168f, 3807.591f, 33.44397f));
                        VectorList_01.Add(new Vector3(1545.757f, 3801.669f, 33.42204f));
                        VectorList_01.Add(new Vector3(1550.309f, 3801.84f, 34.25225f));
                        VectorList_01.Add(new Vector3(1564.409f, 3795.103f, 33.5909f));
                    }
                    else if (iRanEnd == 6)
                    {
                        VectorList_01.Add(new Vector3(2268.36f, 4877.315f, 40.8889f));
                        VectorList_01.Add(new Vector3(2276.772f, 4870.61f, 40.96036f));
                        VectorList_01.Add(new Vector3(2291.448f, 4875.987f, 41.80824f));
                        VectorList_01.Add(new Vector3(2299.679f, 4876.243f, 41.80824f));
                        VectorList_01.Add(new Vector3(2320.396f, 4901.738f, 41.80821f));
                        VectorList_01.Add(new Vector3(2299.758f, 4899.009f, 40.7242f));
                    }
                    else if (iRanEnd == 7)
                    {
                        VectorList_01.Add(new Vector3(1657.649f, 4820.704f, 41.98249f));
                        VectorList_01.Add(new Vector3(1645.117f, 4839.243f, 42.02917f));
                        VectorList_01.Add(new Vector3(1642.364f, 4858.191f, 42.01729f));
                        VectorList_01.Add(new Vector3(1642.198f, 4849.808f, 45.47571f));
                        VectorList_01.Add(new Vector3(1645.205f, 4825.659f, 41.47425f));
                    }
                    else if (iRanEnd == 8)
                    {
                        VectorList_01.Add(new Vector3(1306.21f, 4347.69f, 41.32056f));
                        VectorList_01.Add(new Vector3(1342.688f, 4357.353f, 44.36367f));
                        VectorList_01.Add(new Vector3(1353.405f, 4339.191f, 38.57713f));
                        VectorList_01.Add(new Vector3(1339.785f, 4320.96f, 38.00051f));
                        VectorList_01.Add(new Vector3(1300.407f, 4309.272f, 37.59229f));
                        VectorList_01.Add(new Vector3(1320.972f, 4303.334f, 37.89163f));
                        VectorList_01.Add(new Vector3(1317.442f, 4330.553f, 37.66453f));
                    }
                    else if (iRanEnd == 9)
                    {
                        VectorList_01.Add(new Vector3(45.82893f, 3719.364f, 39.69672f));
                        VectorList_01.Add(new Vector3(58.60051f, 3692.243f, 39.92076f));
                        VectorList_01.Add(new Vector3(48.95095f, 3682.659f, 39.73145f));
                        VectorList_01.Add(new Vector3(5.152738f, 3698.356f, 39.55355f));
                        VectorList_01.Add(new Vector3(11.45968f, 3712.728f, 39.60435f));
                        VectorList_01.Add(new Vector3(29.00184f, 3715.389f, 39.1848f));
                    }
                    else
                    {
                        VectorList_01.Add(new Vector3(2365.323f, 3155.951f, 48.20874f));
                        VectorList_01.Add(new Vector3(2339.775f, 3125.729f, 48.20871f));
                        VectorList_01.Add(new Vector3(2352.162f, 3116.47f, 48.20871f));
                        VectorList_01.Add(new Vector3(2360.49f, 3128.69f, 48.20871f));
                        VectorList_01.Add(new Vector3(2373.907f, 3122.939f, 47.55207f));
                    }
                }
                else if (iMissionVar_01 == 4)//sell the car
                {
                    VectorList_01.Add(new Vector3(258.5934f, 2577.703f, 43.62426f));
                    VectorList_01.Add(new Vector3(266.1903f, 2599.558f, 44.74001f));
                }
                else if (iMissionVar_01 == 5)// car goes to heli safe zone thing.
                {
                    VectorList_01.Add(new Vector3(1029.049f, 3584.657f, 31.52591f));
                    VectorList_01.Add(new Vector3(1018.097f, 3621.509f, 32.06242f));
                }

                int iRanMid = FindRandom(29, 1, 14);
                if (iRanMid == 1)
                {
                    VectorList_02.Add(new Vector3(1933.079f, 3726.348f, 32.84442f));
                    VectorList_01.Add(new Vector3(1939.689f, 3718.473f, 31.62953f));
                    VectorList_01.Add(new Vector3(1938.509f, 3743.054f, 31.63459f));
                }
                else if (iRanMid == 2)
                {
                    VectorList_02.Add(new Vector3(1861.12f, 3749.396f, 33.04617f));
                    VectorList_01.Add(new Vector3(1851.967f, 3742.908f, 32.42038f));
                    VectorList_01.Add(new Vector3(1882.575f, 3745.844f, 32.02911f));
                }
                else if (iRanMid == 3)
                {
                    VectorList_02.Add(new Vector3(1698.635f, 3753.226f, 34.70535f));
                    VectorList_01.Add(new Vector3(1712.471f, 3758.034f, 33.43766f));
                    VectorList_01.Add(new Vector3(1713.685f, 3797.461f, 34.23224f));
                }
                else if (iRanMid == 4)
                {
                    VectorList_02.Add(new Vector3(1688.038f, 4820.677f, 42.07446f));
                    VectorList_01.Add(new Vector3(1678.884f, 4821.141f, 41.30297f));
                    VectorList_01.Add(new Vector3(1679.767f, 4781.978f, 41.27766f));
                }
                else if (iRanMid == 5)
                {
                    VectorList_02.Add(new Vector3(617.9573f, 2752.053f, 42.08813f));
                    VectorList_01.Add(new Vector3(620.6678f, 2735.253f, 41.34486f));
                    VectorList_01.Add(new Vector3(620.3091f, 2701.476f, 40.46325f));
                }
                else if (iRanMid == 6)
                {
                    VectorList_02.Add(new Vector3(544.3318f, 2671.773f, 42.1565f));
                    VectorList_01.Add(new Vector3(540.8783f, 2682.033f, 41.62656f));
                    VectorList_01.Add(new Vector3(520.9294f, 2683.099f, 41.9037f));
                }
                else if (iRanMid == 7)
                {
                    VectorList_02.Add(new Vector3(1394.043f, 3600.989f, 34.98092f));
                    VectorList_01.Add(new Vector3(1399.933f, 3591.951f, 34.19351f));
                    VectorList_01.Add(new Vector3(1431.433f, 3600.657f, 34.24733f));
                }
                else if (iRanMid == 8)
                {
                    VectorList_02.Add(new Vector3(1964.538f, 3741.424f, 32.34374f));
                    VectorList_01.Add(new Vector3(1970.567f, 3736.066f, 31.62642f));
                    VectorList_01.Add(new Vector3(2004.35f, 3752.087f, 31.7258f));
                }
                else if (iRanMid == 9)
                {
                    VectorList_02.Add(new Vector3(1699.717f, 4928.577f, 42.06368f));
                    VectorList_01.Add(new Vector3(1695.356f, 4935.955f, 41.38763f));
                    VectorList_01.Add(new Vector3(1665.608f, 4911.56f, 41.40209f));
                }
                else if (iRanMid == 10)
                {
                    VectorList_02.Add(new Vector3(2681.51f, 3283.092f, 55.24113f));
                    VectorList_01.Add(new Vector3(2688.923f, 3281.579f, 54.5511f));
                    VectorList_01.Add(new Vector3(2753.334f, 3349.12f, 55.46349f));
                }
                else if (iRanMid == 11)
                {
                    VectorList_02.Add(new Vector3(1989.972f, 3053.153f, 47.21529f));
                    VectorList_01.Add(new Vector3(1993.477f, 3063.049f, 46.35755f));
                    VectorList_01.Add(new Vector3(1950.738f, 3137.697f, 46.19405f));
                }
                else if (iRanMid == 12)
                {
                    VectorList_02.Add(new Vector3(1197.966f, 2704.411f, 38.2341f));
                    VectorList_01.Add(new Vector3(1184.5f, 2692.11f, 37.14613f));
                    VectorList_01.Add(new Vector3(1241.116f, 2684.684f, 36.91374f));
                }
                else if (iRanMid == 13)
                {
                    VectorList_02.Add(new Vector3(1166.357f, 2704.871f, 38.16949f));
                    VectorList_01.Add(new Vector3(1184.5f, 2692.11f, 37.14613f));
                    VectorList_01.Add(new Vector3(1241.116f, 2684.684f, 36.91374f));
                }
                else
                {
                    VectorList_02.Add(new Vector3(1175.296f, 2704.559f, 38.0978f));
                    VectorList_01.Add(new Vector3(1184.5f, 2692.11f, 37.14613f));
                    VectorList_01.Add(new Vector3(1241.116f, 2684.684f, 36.91374f));
                }
            }
            else
            {
                VectorList_01.Clear();
                VectorList_02.Clear();
                if (iMissionVar_01 == 1)//npc travel to althoraties--fib/etc
                {
                    VectorList_01.Add(new Vector3(-441.4881f, 6017.921f, 31.60883f));
                    VectorList_01.Add(new Vector3(-438.5785f, 6038.645f, 31.34055f));
                }
                else if (iMissionVar_01 == 2)//npc travel to blow up spot
                {
                    int iRanEnd = RandInt(1, 5);
                    if (iRanEnd == 1)
                        VectorList_01.Add(new Vector3(-1625.467f, 4745.729f, 52.33703f));
                    else if (iRanEnd == 2)
                        VectorList_01.Add(new Vector3(-719.379f, 5812.31f, 16.80513f));
                    else if (iRanEnd == 3)
                        VectorList_01.Add(new Vector3(-129.7749f, 6609.743f, 10.49038f));
                    else if (iRanEnd == 4)
                        VectorList_01.Add(new Vector3(257.5587f, 6933.455f, 8.108569f));
                    else
                        VectorList_01.Add(new Vector3(1603.805f, 6526.804f, 15.68663f));
                }
                else if (iMissionVar_01 == 3)//ambush player
                {
                    int iRanEnd = RandInt(1, 5);
                    if (iRanEnd == 1)
                    {
                        VectorList_01.Add(new Vector3(-699.522f, 5805.568f, 17.36731f));
                        VectorList_01.Add(new Vector3(-682.6395f, 5810.653f, 21.84249f));
                        VectorList_01.Add(new Vector3(-669.7758f, 5813.931f, 17.51829f));
                        VectorList_01.Add(new Vector3(-667.5911f, 5829.822f, 17.3313f));
                        VectorList_01.Add(new Vector3(-688.4876f, 5823.847f, 17.33291f));
                    }
                    else if (iRanEnd == 2)
                    {
                        VectorList_01.Add(new Vector3(-377.7809f, 6075.845f, 31.45531f));
                        VectorList_01.Add(new Vector3(-380.4823f, 6062.071f, 31.50013f));
                        VectorList_01.Add(new Vector3(-354.9041f, 6090.243f, 31.38692f));
                        VectorList_01.Add(new Vector3(-350.0206f, 6077.725f, 31.43814f));
                    }
                    else if (iRanEnd == 3)
                    {
                        VectorList_01.Add(new Vector3(401.3973f, 6473.691f, 29.16297f));
                        VectorList_01.Add(new Vector3(423.3479f, 6473.468f, 35.87312f));
                        VectorList_01.Add(new Vector3(426.7705f, 6477.21f, 28.79894f));
                        VectorList_01.Add(new Vector3(437.715f, 6501.934f, 28.81324f));
                        VectorList_01.Add(new Vector3(432.837f, 6501.687f, 28.78592f));
                        VectorList_01.Add(new Vector3(420.4396f, 6492.071f, 28.18608f));
                    }
                    else if (iRanEnd == 4)
                    {
                        VectorList_01.Add(new Vector3(1426.701f, 6566.481f, 16.16204f));
                        VectorList_01.Add(new Vector3(1465.058f, 6571.545f, 12.60599f));
                        VectorList_01.Add(new Vector3(1474.506f, 6550.378f, 13.98796f));
                        VectorList_01.Add(new Vector3(1472.12f, 6540.609f, 13.96069f));
                        VectorList_01.Add(new Vector3(1454.541f, 6549.437f, 14.87973f));
                    }
                    else
                    {
                        VectorList_01.Add(new Vector3(-824.7751f, 5418.944f, 34.2673f));
                        VectorList_01.Add(new Vector3(-827.1906f, 5399.262f, 34.56618f));
                        VectorList_01.Add(new Vector3(-823.722f, 5383.088f, 34.51685f));
                        VectorList_01.Add(new Vector3(-813.2783f, 5382.992f, 34.51685f));
                        VectorList_01.Add(new Vector3(-788.4846f, 5402.617f, 34.10927f));
                        VectorList_01.Add(new Vector3(-803.7128f, 5422.73f, 34.34464f));
                    }
                }
                else if (iMissionVar_01 == 4)//sell the car
                {
                    VectorList_01.Add(new Vector3(101.88f, 6634.28f, 30.43f));
                    VectorList_01.Add(new Vector3(122.8424f, 6628.6421f, 30.92f));
                }
                else if (iMissionVar_01 == 5)// car goes to heli safe zone thing.
                {
                    VectorList_01.Add(new Vector3(-563.5784f, 6176.025f, 6.705557f));
                    VectorList_01.Add(new Vector3(-546.8909f, 6179.143f, 6.584301f));
                }

                int iRanMid = FindRandom(30, 1, 13);
                if (iRanMid == 1)
                {
                    VectorList_02.Add(new Vector3(-701.1307f, 5805.21f, 17.33214f));
                    VectorList_01.Add(new Vector3(-701.0538f, 5815.281f, 16.50128f));
                    VectorList_01.Add(new Vector3(-728.2564f, 5764.872f, 17.65182f));
                }
                else if (iRanMid == 2)
                {
                    VectorList_02.Add(new Vector3(-757.4761f, 5589.087f, 36.70622f));
                    VectorList_01.Add(new Vector3(-776.839f, 5576.867f, 32.79653f));
                    VectorList_01.Add(new Vector3(-784.7336f, 5546.356f, 32.68147f));
                }
                else if (iRanMid == 3)
                {
                    VectorList_02.Add(new Vector3(-441.7554f, 6018.231f, 31.60533f));
                    VectorList_01.Add(new Vector3(-423.1526f, 6031.896f, 30.66116f));
                    VectorList_01.Add(new Vector3(-437.5349f, 6063.253f, 30.67015f));
                }
                else if (iRanMid == 4)
                {
                    VectorList_02.Add(new Vector3(-335.7032f, 6150.397f, 31.48905f));
                    VectorList_01.Add(new Vector3(-344.0456f, 6148.367f, 30.79785f));
                    VectorList_01.Add(new Vector3(-374.3185f, 6153.798f, 30.62915f));
                }
                else if (iRanMid == 5)
                {
                    VectorList_02.Add(new Vector3(-325.9989f, 6076.614f, 31.45477f));
                    VectorList_01.Add(new Vector3(-315.6501f, 6071.485f, 30.50856f));
                    VectorList_01.Add(new Vector3(-290.5639f, 6093.178f, 30.50189f));
                }
                else if (iRanMid == 6)
                {
                    VectorList_02.Add(new Vector3(-290.234f, 6198.825f, 31.50152f));
                    VectorList_01.Add(new Vector3(-287.1915f, 6207.178f, 30.71095f));
                    VectorList_01.Add(new Vector3(-320.5128f, 6244.212f, 30.81025f));
                }
                else if (iRanMid == 7)
                {
                    VectorList_02.Add(new Vector3(-280.6788f, 6231.598f, 31.69551f));
                    VectorList_01.Add(new Vector3(-287.9967f, 6238.822f, 30.63232f));
                    VectorList_01.Add(new Vector3(-283.2607f, 6213.795f, 30.77818f));
                }
                else if (iRanMid == 8)
                {
                    VectorList_02.Add(new Vector3(-110.1597f, 6463.812f, 31.62672f));
                    VectorList_01.Add(new Vector3(-116.1263f, 6456.284f, 30.75365f));
                    VectorList_01.Add(new Vector3(-112.3067f, 6415.033f, 30.67347f));
                }
                else if (iRanMid == 9)
                {
                    VectorList_02.Add(new Vector3(0.003763938f, 6515.981f, 31.88934f));
                    VectorList_01.Add(new Vector3(-6.885899f, 6520.164f, 30.58564f));
                    VectorList_01.Add(new Vector3(-25.514f, 6505.981f, 30.68832f));
                }
                else if (iRanMid == 10)
                {
                    VectorList_02.Add(new Vector3(104.1556f, 6615.081f, 32.43527f));
                    VectorList_01.Add(new Vector3(124.8537f, 6610.755f, 31.16878f));
                    VectorList_01.Add(new Vector3(224.9221f, 6572.477f, 31.09827f));
                }
                else if (iRanMid == 11)
                {
                    VectorList_02.Add(new Vector3(1469.311f, 6541.158f, 14.68089f));
                    VectorList_01.Add(new Vector3(1455.938f, 6547.631f, 14.16645f));
                    VectorList_01.Add(new Vector3(1429.994f, 6517.838f, 18.19917f));
                }
                else if (iRanMid == 12)
                {
                    VectorList_02.Add(new Vector3(1590.588f, 6448.094f, 25.31714f));
                    VectorList_01.Add(new Vector3(1586.027f, 6441.043f, 24.37673f));
                    VectorList_01.Add(new Vector3(1612.88f, 6411.742f, 26.3919f));
                }
                else
                {
                    VectorList_02.Add(new Vector3(1731.658f, 6412.44f, 35.03722f));
                    VectorList_01.Add(new Vector3(1722.062f, 6402.163f, 33.52321f));
                    VectorList_01.Add(new Vector3(1820.794f, 6365.858f, 39.26671f));
                }
            }
            fMission_01 = 0.00f;
            vGetaway = World.GetNextPositionOnStreet(VectorList_02[0].Around(550.00f));
            while (vGetaway.DistanceTo(VectorList_02[0]) < 150.00f || World.GetZoneNameLabel(vGetaway) == "AIRP" || World.GetZoneNameLabel(vGetaway) == "ARMYB" || World.GetZoneNameLabel(vGetaway) == "JAIL")
                vGetaway = World.GetNextPositionOnStreet(VectorList_02[0].Around(550.00f));
            vGetaway.Z = World.GetGroundHeight(vGetaway);
            AddTarget(vGetaway, true, true, 120.00f, false, 66, MyLang.Maptext[26]);
            iCanDrive = 1073742652;
            iMissionVar_03 = VectorList_01.Count - 1;
            iTime_01.Add(0);//                  0
            iTime_01.Add(0);//                  1
            iTime_01.Add(0);//                  2
            iTime_01.Add(0);//                  3
            iTime_01.Add(0);//                  4
            iTime_01.Add(0);//    iTimeTaken    5
            iTime_01.Add(0);//    iDogTimer     6

            BtSlideBar.BackgroundColor = Color.Black;

            BeOnOff.Add(false); //bFollowToo    0
            BeOnOff.Add(false); //bDoorEnter    1
            BeOnOff.Add(false); //bNocarz       2
            BeOnOff.Add(false); //bSpooky       3
            BeOnOff.Add(false); //bOnWheels     4
            BeOnOff.Add(false); //bFlashWarn    5
            BeOnOff.Add(false); //bPostPick     6
            BeOnOff.Add(false); //bTheyKnowU    7
            BeOnOff.Add(false); //bOntheHill    8
            BeOnOff.Add(false); //bJustSlowdown 9
            BeOnOff.Add(false); //bDamages      10 
            BeOnOff.Add(true);  //bAliens       11

            BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[7], "", 5000);

            vLanLoc = vGetaway;
            iMishText = 59;
            bOnTheJob = true;
        }
        private void FireDept()
        {
            LogThis("FireDept");

            VectorList_01.Clear();
            VectorList_02.Clear();
            VectorList_03.Clear();
            sList_01.Clear();
            BeOnOff.Clear();

            string sFires = "";
            iMissionVar_01 = FindRandom(9, 1, 5);

            if (iLocationX == 1)
            {
                vFuMiss = new Vector3(212.9583f, -1625.14f, 28.66316f);

                vGetaway = new Vector3(216.1825f, -1639.169f, 29.6262f);
                fGetDir = 320.04f;

                if (iMissionVar_01 == 1)
                {
                    VectorList_01.Add(new Vector3(-994.2792f, -2520.325f, 13.41739f));
                    VectorList_01.Add(new Vector3(1165.043f, -3222.609f, 5.385954f));
                    VectorList_01.Add(new Vector3(933.6134f, -2081.24f, 30.13177f));
                    VectorList_01.Add(new Vector3(101.8374f, -1864.978f, 23.94473f));
                    VectorList_01.Add(new Vector3(68.45313f, -1497.742f, 28.89089f));
                    VectorList_01.Add(new Vector3(783.5147f, -1000.46f, 25.71556f));
                    VectorList_01.Add(new Vector3(464.176f, -1825.874f, 27.61972f));
                    VectorList_01.Add(new Vector3(523.4406f, -2984.174f, 5.628889f));
                    VectorList_01.Add(new Vector3(-172.0261f, -1920.919f, 24.72114f));
                    VectorList_01.Add(new Vector3(-108.2467f, -1354.8f, 28.97163f));
                }                //Put out fire vehicle
                else if (iMissionVar_01 == 2)
                {
                    VectorList_01.Add(new Vector3(-11.86616f, -1442.035f, 34.39618f));
                    VectorList_01.Add(new Vector3(130.4162f, -1538.652f, 35.24918f));
                    VectorList_01.Add(new Vector3(322.2232f, -1857.563f, 31.42738f));
                    VectorList_01.Add(new Vector3(116.4408f, -1962.625f, 24.9567f));
                    VectorList_01.Add(new Vector3(-564.8655f, -1815.113f, 28.62768f));
                    VectorList_01.Add(new Vector3(867.5987f, -3186.705f, 11.90496f));
                    VectorList_01.Add(new Vector3(1067.069f, -2242.364f, 39.09667f));
                    VectorList_01.Add(new Vector3(986.0532f, -1938.056f, 36.14178f));
                    VectorList_01.Add(new Vector3(1279.941f, -1720.043f, 57.64454f));
                    VectorList_01.Add(new Vector3(1446.823f, -1659.761f, 71.77194f));
                }           //Put out fire house
                else if (iMissionVar_01 == 3)
                {
                    VectorList_01.Add(new Vector3(168.2279f, -1469.199f, 29.14101f));
                    VectorList_01.Add(new Vector3(-32.64261f, -1301.234f, 29.18018f));
                    VectorList_01.Add(new Vector3(-183.6499f, -1292.177f, 31.29598f));
                    VectorList_01.Add(new Vector3(-347.7736f, -1346.667f, 31.27607f));
                    VectorList_01.Add(new Vector3(106.7457f, -1816.44f, 26.54376f));
                    VectorList_01.Add(new Vector3(146.9498f, -2251.595f, 6.100518f));
                    VectorList_01.Add(new Vector3(845.4675f, -2182.293f, 30.30516f));
                    VectorList_01.Add(new Vector3(957.0235f, -1574.832f, 30.50766f));
                    VectorList_01.Add(new Vector3(825.36f, -1065.384f, 28.01146f));
                    VectorList_01.Add(new Vector3(-889.3368f, -2377.061f, 13.94446f));
                }           //Put out fire Weeley bin
                else if (iMissionVar_01 == 4)
                {
                    int iCat = FindRandom(52, 1, 10);
                    if (iCat == 1)
                    {
                        VectorList_03.Add(new Vector3(990.4315f, -2908.047f, 5.906881f));
                        VectorList_03.Add(new Vector3(990.8276f, -2904.836f, 11.92457f));
                        VectorList_03.Add(new Vector3(988.6428f, -2904.823f, 28.16458f));
                        VectorList_03.Add(new Vector3(979.5891f, -2904.785f, 47.62289f));
                        VectorList_03.Add(new Vector3(979.6679f, -2960.224f, 43.28537f));
                        VectorList_03.Add(new Vector3(979.7318f, -2902.172f, 72.78313f));
                    }
                    else if (iCat == 2)
                    {
                        VectorList_03.Add(new Vector3(329.991f, -2758.334f, 6.07591f));
                        VectorList_03.Add(new Vector3(353.3759f, -2753.441f, 21.5707f));
                        VectorList_03.Add(new Vector3(341.4529f, -2723.276f, 39.40429f));
                        VectorList_03.Add(new Vector3(338.4341f, -2763.283f, 43.63232f));
                    }
                    else if (iCat == 3)
                    {
                        VectorList_03.Add(new Vector3(563.7545f, -2204.024f, 8.781557f));
                        VectorList_03.Add(new Vector3(560.7622f, -2204.463f, 12.89944f));
                        VectorList_03.Add(new Vector3(551.6384f, -2216.125f, 68.98109f));
                    }
                    else if (iCat == 4)
                    {
                        VectorList_03.Add(new Vector3(988.7126f, -1912.683f, 31.15284f));
                        VectorList_03.Add(new Vector3(986.7842f, -1912.66f, 44.39808f));
                        VectorList_03.Add(new Vector3(969.8815f, -1912.091f, 52.47533f));
                        VectorList_03.Add(new Vector3(969.0193f, -1907.429f, 61.69697f));
                    }
                    else if (iCat == 5)
                    {
                        VectorList_03.Add(new Vector3(171.3466f, -2132.272f, 12.3922f));
                        VectorList_03.Add(new Vector3(170.6103f, -2133.501f, 20.15985f));
                        VectorList_03.Add(new Vector3(171.555f, -2144.849f, 27.4754f));
                    }
                    else if (iCat == 6)
                    {
                        VectorList_03.Add(new Vector3(-750.8582f, -2091.132f, 9.081368f));
                        VectorList_03.Add(new Vector3(-726.4521f, -2087.394f, 20.41779f));
                        VectorList_03.Add(new Vector3(-661.7372f, -2132.691f, 52.44682f));
                        VectorList_03.Add(new Vector3(-564.0597f, -2201.186f, 99.58532f));
                        VectorList_03.Add(new Vector3(-546.9232f, -2230.037f, 122.3655f));
                    }
                    else if (iCat == 7)
                    {
                        VectorList_03.Add(new Vector3(-1013.224f, -1909.707f, 13.16505f));
                        VectorList_03.Add(new Vector3(-1026.246f, -1969.08f, 19.76334f));
                        VectorList_03.Add(new Vector3(-1050.061f, -1964.186f, 37.22753f));
                        VectorList_03.Add(new Vector3(-1051.122f, -1958.896f, 42.63218f));
                    }
                    else if (iCat == 8)
                    {
                        VectorList_03.Add(new Vector3(-611.5026f, -1642.726f, 25.9797f));
                        VectorList_03.Add(new Vector3(-623.3297f, -1634.776f, 33.86921f));
                        VectorList_03.Add(new Vector3(-613.2112f, -1623.635f, 41.04972f));
                    }
                    else if (iCat == 9)
                    {
                        VectorList_03.Add(new Vector3(-63.11477f, -1312.831f, 29.27547f));
                        VectorList_03.Add(new Vector3(-75.70776f, -1293.487f, 33.79663f));
                        VectorList_03.Add(new Vector3(-65.95271f, -1280.114f, 47.6948f));
                    }
                    else if (iCat == 10)
                    {
                        VectorList_03.Add(new Vector3(820.0727f, -2344.213f, 30.33858f));
                        VectorList_03.Add(new Vector3(814.9317f, -2338.989f, 34.50211f));
                        VectorList_03.Add(new Vector3(818.6331f, -2308.808f, 38.06253f));
                        VectorList_03.Add(new Vector3(811.1056f, -2304.844f, 43.0081f));
                        VectorList_03.Add(new Vector3(830.2932f, -2303.968f, 47.04805f));
                        VectorList_03.Add(new Vector3(805.8372f, -2296.752f, 51.80018f));
                        VectorList_03.Add(new Vector3(798.2391f, -2302.468f, 55.57926f));
                        VectorList_03.Add(new Vector3(803.1917f, -2331.276f, 62.09147f));
                    }
                    vTarget_01 = VectorList_03[0];
                }           //save cat
                else
                {
                    VectorList_01.Add(new Vector3(-994.2792f, -2520.325f, 13.41739f));
                    VectorList_01.Add(new Vector3(1165.043f, -3222.609f, 5.385954f));
                    VectorList_01.Add(new Vector3(933.6134f, -2081.24f, 30.13177f));
                    VectorList_01.Add(new Vector3(101.8374f, -1864.978f, 23.94473f));
                    VectorList_01.Add(new Vector3(68.45313f, -1497.742f, 28.89089f));
                    VectorList_01.Add(new Vector3(783.5147f, -1000.46f, 25.71556f));
                    VectorList_01.Add(new Vector3(464.176f, -1825.874f, 27.61972f));
                    VectorList_01.Add(new Vector3(523.4406f, -2984.174f, 5.628889f));
                    VectorList_01.Add(new Vector3(-172.0261f, -1920.919f, 24.72114f));
                    VectorList_01.Add(new Vector3(-108.2467f, -1354.8f, 28.97163f));
                }                            //chase driver throwing molitovs
                sFires = "Davis Fire Station ";
            }
            else if (iLocationX == 2)
            {
                vFuMiss = new Vector3(-610.9536f, -61.93935f, 41.14728f);

                vGetaway = new Vector3(-632.3837f, -71.35f, 40.5971f);
                fGetDir = 355.0277f;

                if (iMissionVar_01 == 1)
                {
                    VectorList_01.Add(new Vector3(-640.8735f, -838.8285f, 24.45141f));
                    VectorList_01.Add(new Vector3(-1058.591f, -1024.118f, 1.774962f));
                    VectorList_01.Add(new Vector3(-1153.756f, -1339.463f, 4.697246f));
                    VectorList_01.Add(new Vector3(-1226.06f, -433.3082f, 33.18565f));
                    VectorList_01.Add(new Vector3(-699.404f, -19.63133f, 37.53633f));
                    VectorList_01.Add(new Vector3(-212.2905f, 127.8813f, 69.16212f));
                    VectorList_01.Add(new Vector3(354.2812f, 134.1312f, 102.6729f));
                    VectorList_01.Add(new Vector3(222.583f, -215.2652f, 53.6492f));
                    VectorList_01.Add(new Vector3(166.6302f, -829.5413f, 30.7629f));
                    VectorList_01.Add(new Vector3(-179.5928f, -885.489f, 28.94018f));
                }                //Put out fire vehicle
                else if (iMissionVar_01 == 2)
                {
                    VectorList_01.Add(new Vector3(-1130.439f, -954.3047f, 6.63213f));
                    VectorList_01.Add(new Vector3(-1144.074f, -1473.395f, 10.58288f));
                    VectorList_01.Add(new Vector3(-1464.831f, -381.295f, 44.77815f));
                    VectorList_01.Add(new Vector3(-487.8067f, -17.98136f, 49.55106f));
                    VectorList_01.Add(new Vector3(209.8121f, -859.6545f, 35.29748f));
                    VectorList_01.Add(new Vector3(-297.6049f, -921.7738f, 35.95244f));
                    VectorList_01.Add(new Vector3(-375.4223f, 268.4404f, 89.9464f));
                    VectorList_01.Add(new Vector3(-56.02592f, 62.35524f, 78.56653f));
                    VectorList_01.Add(new Vector3(529.6868f, -157.3343f, 61.4922f));
                    VectorList_01.Add(new Vector3(111.7982f, -204.2706f, 58.97997f));
                }           //Put out fire house
                else if (iMissionVar_01 == 3)
                {
                    VectorList_01.Add(new Vector3(227.3719f, 103.3158f, 93.67694f));
                    VectorList_01.Add(new Vector3(317.3839f, 262.8306f, 104.5204f));
                    VectorList_01.Add(new Vector3(101.9639f, 156.3715f, 104.6742f));
                    VectorList_01.Add(new Vector3(31.23298f, -82.09966f, 61.31293f));
                    VectorList_01.Add(new Vector3(-461.1617f, 61.62276f, 58.63753f));
                    VectorList_01.Add(new Vector3(66.71404f, -840.2115f, 30.84228f));
                    VectorList_01.Add(new Vector3(-1174.17f, -1145.426f, 5.673794f));
                    VectorList_01.Add(new Vector3(-1411.269f, -642.275f, 28.67337f));
                    VectorList_01.Add(new Vector3(-586.1796f, -754.062f, 29.48705f));
                    VectorList_01.Add(new Vector3(360.4597f, -791.2961f, 29.28889f));
                }           //Put out fire Weeley bin
                else if (iMissionVar_01 == 4)
                {
                    int iCat = FindRandom(52, 1, 10);
                    if (iCat == 1)
                    {
                        VectorList_03.Add(new Vector3(-447.7411f, -1079.003f, 23.54898f));
                        VectorList_03.Add(new Vector3(-449.6465f, -1079.447f, 27.10633f));
                        VectorList_03.Add(new Vector3(-452.262f, -1081.795f, 65.8438f));
                        VectorList_03.Add(new Vector3(-409.3894f, -1070.397f, 69.31025f));
                    }
                    else if (iCat == 2)
                    {
                        VectorList_03.Add(new Vector3(-114.9596f, -978.2042f, 27.69116f));
                        VectorList_03.Add(new Vector3(-119.4298f, -976.4756f, 30.45085f));
                        VectorList_03.Add(new Vector3(-117.6392f, -977.1044f, 56.35491f));
                        VectorList_03.Add(new Vector3(-119.4345f, -976.474f, 63.44019f));
                        VectorList_03.Add(new Vector3(-117.6436f, -977.1255f, 86.17181f));
                        VectorList_03.Add(new Vector3(-119.4367f, -976.4696f, 93.26001f));
                        VectorList_03.Add(new Vector3(-117.6443f, -977.1223f, 115.9898f));
                        VectorList_03.Add(new Vector3(-119.4364f, -976.4659f, 123.0735f));
                        VectorList_03.Add(new Vector3(-117.6396f, -977.1151f, 145.8024f));
                        VectorList_03.Add(new Vector3(-119.4289f, -976.4747f, 152.8908f));
                        VectorList_03.Add(new Vector3(-117.6443f, -977.1274f, 175.6152f));
                        VectorList_03.Add(new Vector3(-119.4326f, -976.4718f, 182.6986f));
                        VectorList_03.Add(new Vector3(-117.6429f, -977.1227f, 205.4289f));
                        VectorList_03.Add(new Vector3(-119.4294f, -976.4729f, 212.515f));
                        VectorList_03.Add(new Vector3(-117.6439f, -977.1269f, 235.2452f));
                        VectorList_03.Add(new Vector3(-119.4327f, -976.4712f, 242.3287f));
                        VectorList_03.Add(new Vector3(-117.6445f, -977.1221f, 265.0555f));
                        VectorList_03.Add(new Vector3(-119.4281f, -976.4728f, 272.1439f));
                        VectorList_03.Add(new Vector3(-118.256f, -973.5796f, 292.7375f));
                        VectorList_03.Add(new Vector3(-120.9791f, -976.6447f, 296.2109f));
                        VectorList_03.Add(new Vector3(-119.3349f, -977.0608f, 304.2495f));
                    }
                    else if (iCat == 3)
                    {
                        VectorList_03.Add(new Vector3(47.63587f, -455.6017f, 40.17879f));
                        VectorList_03.Add(new Vector3(47.24371f, -460.1096f, 42.93575f));
                        VectorList_03.Add(new Vector3(48.78002f, -463.2804f, 96.35428f));
                        VectorList_03.Add(new Vector3(51.11815f, -403.5366f, 99.8222f));
                    }
                    else if (iCat == 4)
                    {
                        VectorList_03.Add(new Vector3(-664.4091f, 225.0738f, 82.32626f));
                        VectorList_03.Add(new Vector3(-664.3094f, 229.5972f, 85.08173f));
                        VectorList_03.Add(new Vector3(-664.3101f, 227.6925f, 110.9983f));
                        VectorList_03.Add(new Vector3(-664.3095f, 229.5979f, 118.0815f));
                        VectorList_03.Add(new Vector3(-664.3101f, 227.6923f, 140.812f));
                        VectorList_03.Add(new Vector3(-664.3104f, 229.5985f, 147.897f));
                        VectorList_03.Add(new Vector3(-666.0506f, 232.6609f, 153.5798f));
                        VectorList_03.Add(new Vector3(-664.2935f, 248.1813f, 157.3605f));
                    }
                    else if (iCat == 5)
                    {
                        VectorList_03.Add(new Vector3(-619.6422f, -155.1574f, 38.27605f));
                        VectorList_03.Add(new Vector3(-590.7766f, -136.8396f, 39.63365f));
                        VectorList_03.Add(new Vector3(-625.733f, -125.4332f, 47.36606f));
                        VectorList_03.Add(new Vector3(-617.8801f, -85.96204f, 51.98095f));
                        VectorList_03.Add(new Vector3(-608.0366f, -77.26147f, 58.40785f));
                    }
                    else if (iCat == 6)
                    {
                        VectorList_03.Add(new Vector3(-255.5883f, -198.9922f, 40.20316f));
                        VectorList_03.Add(new Vector3(-224.0681f, -189.7777f, 78.45409f));
                        VectorList_03.Add(new Vector3(-186.5666f, -149.9927f, 85.22469f));
                        VectorList_03.Add(new Vector3(-151.0828f, -140.7088f, 93.70245f));
                    }
                    else if (iCat == 7)
                    {
                        VectorList_03.Add(new Vector3(52.03278f, 156.2182f, 104.6395f));
                        VectorList_03.Add(new Vector3(33.67483f, 153.6316f, 117.5249f));
                        VectorList_03.Add(new Vector3(46.28093f, 182.4599f, 126.2164f));
                    }
                    else if (iCat == 8)
                    {
                        VectorList_03.Add(new Vector3(281.2852f, -1004.909f, 29.35802f));
                        VectorList_03.Add(new Vector3(278.9556f, -1010.7f, 34.64793f));
                        VectorList_03.Add(new Vector3(274.0553f, -1018.779f, 51.39609f));
                        VectorList_03.Add(new Vector3(259.0381f, -1010.151f, 61.63672f));
                    }
                    else if (iCat == 9)
                    {
                        VectorList_03.Add(new Vector3(166.7373f, -1069.914f, 29.19704f));
                        VectorList_03.Add(new Vector3(160.4567f, -1067.88f, 34.77694f));
                        VectorList_03.Add(new Vector3(161.8633f, -1061.519f, 41.9845f));
                        VectorList_03.Add(new Vector3(163.9445f, -1061.368f, 66.08058f));
                        VectorList_03.Add(new Vector3(178.6456f, -1060.949f, 71.73961f));
                        VectorList_03.Add(new Vector3(175.9049f, -1071.798f, 77.54419f));
                    }
                    else if (iCat == 10)
                    {
                        VectorList_03.Add(new Vector3(-1172.507f, -527.0783f, 30.37776f));
                        VectorList_03.Add(new Vector3(-1200.487f, -495.5178f, 35.53702f));
                        VectorList_03.Add(new Vector3(-1205.021f, -490.9817f, 38.79013f));
                        VectorList_03.Add(new Vector3(-1205.385f, -489.4001f, 47.0639f));
                        VectorList_03.Add(new Vector3(-1179.487f, -472.3701f, 55.1913f));
                        VectorList_03.Add(new Vector3(-1175.412f, -472.3513f, 60.10122f));
                    }
                    vTarget_01 = VectorList_03[0];
                }           //save cat
                else
                {
                    VectorList_01.Add(new Vector3(-640.8735f, -838.8285f, 24.45141f));
                    VectorList_01.Add(new Vector3(-1058.591f, -1024.118f, 1.774962f));
                    VectorList_01.Add(new Vector3(-1153.756f, -1339.463f, 4.697246f));
                    VectorList_01.Add(new Vector3(-1226.06f, -433.3082f, 33.18565f));
                    VectorList_01.Add(new Vector3(-699.404f, -19.63133f, 37.53633f));
                    VectorList_01.Add(new Vector3(-212.2905f, 127.8813f, 69.16212f));
                    VectorList_01.Add(new Vector3(354.2812f, 134.1312f, 102.6729f));
                    VectorList_01.Add(new Vector3(222.583f, -215.2652f, 53.6492f));
                    VectorList_01.Add(new Vector3(166.6302f, -829.5413f, 30.7629f));
                    VectorList_01.Add(new Vector3(-179.5928f, -885.489f, 28.94018f));
                }                            //chase driver throwing molitovs
                sFires = "Rockford Hills Fire Station";
            }
            else if (iLocationX == 3)//fort access
            {
                vFuMiss = new Vector3(-2079.348f, 2842.614f, 32.30162f);

                vGetaway = new Vector3(-2107.329f, 2844.5947f, 32.8784f);
                fGetDir = 28.8017f;

                if (iMissionVar_01 == 1)
                {
                    VectorList_01.Add(new Vector3(-2024.08f, -175.2686f, 26.76026f));
                    VectorList_01.Add(new Vector3(-2960.124f, 98.36689f, 13.35277f));
                    VectorList_01.Add(new Vector3(-2985.582f, 544.3261f, 16.4247f));
                    VectorList_01.Add(new Vector3(-3100.223f, 1191.346f, 19.91869f));
                    VectorList_01.Add(new Vector3(-2652.758f, 1501.169f, 118.0722f));
                    VectorList_01.Add(new Vector3(-1514.433f, 2126.713f, 55.75016f));
                    VectorList_01.Add(new Vector3(-1991.367f, 696.023f, 142.7182f));
                    VectorList_01.Add(new Vector3(-2304.964f, 410.1695f, 174.0543f));
                    VectorList_01.Add(new Vector3(-1567.98f, -173.0723f, 55.11384f));
                    VectorList_01.Add(new Vector3(-2709.916f, 2291.146f, 18.22017f));
                }                //Put out fire vehicle
                else if (iMissionVar_01 == 2)
                {
                    VectorList_01.Add(new Vector3(-1996.864f, 554.9059f, 115.5041f));
                    VectorList_01.Add(new Vector3(-3033.075f, 519.4292f, 10.65713f));
                    VectorList_01.Add(new Vector3(-3001.448f, 723.1372f, 32.48245f));
                    VectorList_01.Add(new Vector3(-3191.196f, 1205.117f, 12.83127f));
                    VectorList_01.Add(new Vector3(-1929.775f, 159.919f, 89.87039f));
                    VectorList_01.Add(new Vector3(-1506.466f, 1511.146f, 118.0221f));
                    VectorList_01.Add(new Vector3(-1918.871f, 1782.752f, 177.2037f));
                    VectorList_01.Add(new Vector3(-427.2083f, 1210.563f, 328.9536f));
                    VectorList_01.Add(new Vector3(-849.713f, 785.8577f, 195.3546f));
                    VectorList_01.Add(new Vector3(-667.9451f, 745.3073f, 178.6693f));
                }           //Put out fire house
                else if (iMissionVar_01 == 3)
                {
                    VectorList_01.Add(new Vector3(-1134.84f, 2692.777f, 18.80042f));
                    VectorList_01.Add(new Vector3(-3198.06f, 1058.967f, 20.86343f));
                    VectorList_01.Add(new Vector3(-2958.009f, 442.2449f, 15.26188f));
                    VectorList_01.Add(new Vector3(-1819.236f, 806.6959f, 138.6937f));
                    VectorList_01.Add(new Vector3(-1702.201f, -282.2467f, 51.88353f));
                    VectorList_01.Add(new Vector3(-2236.478f, -362.0002f, 13.31052f));
                    VectorList_01.Add(new Vector3(-3032.547f, 581.7611f, 7.802179f));
                    VectorList_01.Add(new Vector3(-2569.291f, 2333.144f, 33.06003f));
                    VectorList_01.Add(new Vector3(-52.82417f, 1882.283f, 195.6634f));
                    VectorList_01.Add(new Vector3(-310.0613f, 2755.316f, 65.12257f));
                }           //Put out fire Weeley bin
                else if (iMissionVar_01 == 4)
                {
                    int iCat = FindRandom(52, 1, 10);
                    if (iCat == 1)
                    {
                        VectorList_03.Add(new Vector3(-3245.531f, 967.5728f, 12.73052f));
                        VectorList_03.Add(new Vector3(-3411.661f, 971.7932f, 8.376493f));
                        VectorList_03.Add(new Vector3(-3418.302f, 967.7336f, 11.93614f));
                    }
                    else if (iCat == 2)
                    {
                        VectorList_03.Add(new Vector3(-1947.979f, 1780.116f, 175.0855f));
                        VectorList_03.Add(new Vector3(-1955.495f, 1776.703f, 184.0402f));
                    }
                    else if (iCat == 3)
                    {
                        VectorList_03.Add(new Vector3(-2263.28f, 206.7552f, 174.6016f));
                        VectorList_03.Add(new Vector3(-2265.143f, 210.8193f, 174.6404f));
                        VectorList_03.Add(new Vector3(-2265.085f, 220.6445f, 184.7005f));
                        VectorList_03.Add(new Vector3(-2229.959f, 208.5015f, 194.6066f));
                    }
                    else if (iCat == 4)
                    {
                        VectorList_03.Add(new Vector3(-2972.835f, 413.6099f, 15.22648f));
                        VectorList_03.Add(new Vector3(-2990.377f, 417.0118f, 24.85259f));
                    }
                    else if (iCat == 5)
                    {
                        VectorList_03.Add(new Vector3(-3170.601f, 1092.951f, 20.85954f));
                        VectorList_03.Add(new Vector3(-3175.083f, 1058.582f, 25.48407f));
                        VectorList_03.Add(new Vector3(-3169.532f, 1055.47f, 27.65624f));
                    }
                    else if (iCat == 6)
                    {
                        VectorList_03.Add(new Vector3(-2952.258f, 39.01147f, 11.61715f));
                        VectorList_03.Add(new Vector3(-2951.121f, 43.23766f, 19.24514f));
                        VectorList_03.Add(new Vector3(-2938.926f, 45.65293f, 20.0999f));
                    }
                    else if (iCat == 7)
                    {
                        VectorList_03.Add(new Vector3(-2043.044f, -131.8538f, 27.65075f));
                        VectorList_03.Add(new Vector3(-2096.824f, -115.0337f, 40.50086f));
                        VectorList_03.Add(new Vector3(-2211.156f, -0.8868051f, 92.96025f));
                        VectorList_03.Add(new Vector3(-2289.029f, -2.836433f, 118.8311f));
                    }
                    else if (iCat == 8)
                    {
                        VectorList_03.Add(new Vector3(-3094.541f, 757.3378f, 21.58059f));
                        VectorList_03.Add(new Vector3(-3079.948f, 766.7496f, 31.36243f));
                    }
                    else if (iCat == 9)
                    {
                        VectorList_03.Add(new Vector3(-3037.003f, 544.0945f, 7.507683f));
                        VectorList_03.Add(new Vector3(-3048.037f, 550.2264f, 12.97215f));
                        VectorList_03.Add(new Vector3(-3044.569f, 552.6439f, 13.55266f));
                    }
                    else if (iCat == 10)
                    {
                        VectorList_03.Add(new Vector3(-2183.936f, 274.093f, 169.6071f));
                        VectorList_03.Add(new Vector3(-2183.556f, 245.7094f, 184.6018f));
                        VectorList_03.Add(new Vector3(-2210.163f, 287.6249f, 194.6047f));
                    }
                    vTarget_01 = VectorList_03[0];
                }           //save cat
                else
                {
                    VectorList_01.Add(new Vector3(-2024.08f, -175.2686f, 26.76026f));
                    VectorList_01.Add(new Vector3(-2960.124f, 98.36689f, 13.35277f));
                    VectorList_01.Add(new Vector3(-2985.582f, 544.3261f, 16.4247f));
                    VectorList_01.Add(new Vector3(-3100.223f, 1191.346f, 19.91869f));
                    VectorList_01.Add(new Vector3(-2652.758f, 1501.169f, 118.0722f));
                    VectorList_01.Add(new Vector3(-1514.433f, 2126.713f, 55.75016f));
                    VectorList_01.Add(new Vector3(-1991.367f, 696.023f, 142.7182f));
                    VectorList_01.Add(new Vector3(-2304.964f, 410.1695f, 174.0543f));
                    VectorList_01.Add(new Vector3(-1567.98f, -173.0723f, 55.11384f));
                    VectorList_01.Add(new Vector3(-2709.916f, 2291.146f, 18.22017f));
                }                            //chase driver throwing molitovs
                sFires = "Fort Zancudo Fire Station";
            }
            else if (iLocationX == 4)
            {
                vFuMiss = new Vector3(1182.863f, -1446.108f, 34.32778f);

                vGetaway = new Vector3(1196.7448f, -1457.824f, 34.9314f);
                fGetDir = 357.4331f;

                if (iMissionVar_01 == 1)
                {
                    VectorList_01.Add(new Vector3(2604.583f, 2507.948f, 28.76816f));
                    VectorList_01.Add(new Vector3(2576.702f, 418.3727f, 108.0408f));
                    VectorList_01.Add(new Vector3(1331.708f, -1615.235f, 52.11648f));
                    VectorList_01.Add(new Vector3(918.6093f, -593.2044f, 56.90709f));
                    VectorList_01.Add(new Vector3(1269.138f, -540.7137f, 68.56045f));
                    VectorList_01.Add(new Vector3(873.0724f, -111.8709f, 79.04739f));
                    VectorList_01.Add(new Vector3(1233.344f, -1420.103f, 35.10855f));
                    VectorList_01.Add(new Vector3(1161.572f, -949.0202f, 47.99375f));
                    VectorList_01.Add(new Vector3(2589.429f, -371.2926f, 92.46644f));
                    VectorList_01.Add(new Vector3(2690.265f, 1642.243f, 24.16985f));
                }                //Put out fire vehicle
                else if (iMissionVar_01 == 2)
                {
                    VectorList_01.Add(new Vector3(960.6366f, -542.3948f, 65.13508f));
                    VectorList_01.Add(new Vector3(1201.479f, -499.6996f, 71.86517f));
                    VectorList_01.Add(new Vector3(1267.791f, -683.4991f, 70.217f));
                    VectorList_01.Add(new Vector3(1141.973f, -663.2056f, 61.46155f));
                    VectorList_01.Add(new Vector3(2719.809f, 1445.834f, 35.19713f));
                    VectorList_01.Add(new Vector3(2572.389f, 2569.716f, 46.74532f));
                    VectorList_01.Add(new Vector3(1912.73f, 580.1736f, 181.3683f));
                    VectorList_01.Add(new Vector3(832.8171f, -104.1443f, 87.12511f));
                    VectorList_01.Add(new Vector3(916.4573f, -233.383f, 74.47128f));
                    VectorList_01.Add(new Vector3(704.8089f, -305.7661f, 62.11916f));
                }           //Put out fire house
                else if (iMissionVar_01 == 3)
                {
                    VectorList_01.Add(new Vector3(995.0942f, -101.8012f, 74.25548f));
                    VectorList_01.Add(new Vector3(958.9585f, -203.4636f, 73.0535f));
                    VectorList_01.Add(new Vector3(823.3715f, -123.2328f, 80.31831f));
                    VectorList_01.Add(new Vector3(1123.522f, -466.1527f, 66.48949f));
                    VectorList_01.Add(new Vector3(1399.874f, -735.1304f, 67.34861f));
                    VectorList_01.Add(new Vector3(1085.153f, -795.2288f, 58.29309f));
                    VectorList_01.Add(new Vector3(2445.395f, -410.215f, 92.99274f));
                    VectorList_01.Add(new Vector3(2547.271f, 342.9552f, 108.4646f));
                    VectorList_01.Add(new Vector3(2677.061f, 1431.203f, 24.50079f));
                    VectorList_01.Add(new Vector3(2349.459f, 2590.092f, 46.66763f));
                }           //Put out fire Weeley bin
                else if (iMissionVar_01 == 4)
                {
                    int iCat = FindRandom(52, 1, 10);
                    if (iCat == 1)
                    {
                        VectorList_03.Add(new Vector3(1176.709f, -401.3213f, 67.86218f));
                        VectorList_03.Add(new Vector3(1172.744f, -389.3003f, 71.58459f));
                    }
                    else if (iCat == 2)
                    {
                        VectorList_03.Add(new Vector3(1050.432f, 203.0428f, 81.00118f));
                        VectorList_03.Add(new Vector3(1045.66f, 192.4007f, 84.99088f));
                        VectorList_03.Add(new Vector3(1038.867f, 157.8588f, 90.24052f));
                    }
                    else if (iCat == 3)
                    {
                        VectorList_03.Add(new Vector3(2543.799f, -433.5045f, 94.12083f));
                        VectorList_03.Add(new Vector3(2540.221f, -438.1306f, 97.81189f));
                        VectorList_03.Add(new Vector3(2538.54f, -438.1291f, 101.2687f));
                        VectorList_03.Add(new Vector3(2522.876f, -438.5635f, 114.0892f));
                    }
                    else if (iCat == 4)
                    {
                        VectorList_03.Add(new Vector3(2737.933f, 1522.518f, 24.50071f));
                        VectorList_03.Add(new Vector3(2758.451f, 1527.956f, 32.50706f));
                        VectorList_03.Add(new Vector3(2752.74f, 1541.158f, 40.33219f));
                        VectorList_03.Add(new Vector3(2745.437f, 1520.103f, 42.88893f));
                        VectorList_03.Add(new Vector3(2747.897f, 1525.129f, 48.15131f));
                        VectorList_03.Add(new Vector3(2735.234f, 1537.351f, 50.69622f));
                        VectorList_03.Add(new Vector3(2719.178f, 1541.375f, 50.53091f));
                    }
                    else if (iCat == 5)
                    {
                        VectorList_03.Add(new Vector3(2747.737f, 1559.18f, 24.50095f));
                        VectorList_03.Add(new Vector3(2768.139f, 1564.615f, 32.50669f));
                        VectorList_03.Add(new Vector3(2761.064f, 1559.337f, 40.33364f));
                        VectorList_03.Add(new Vector3(2755.404f, 1556.733f, 42.88876f));
                        VectorList_03.Add(new Vector3(2757.495f, 1561.938f, 48.1517f));
                        VectorList_03.Add(new Vector3(2745.225f, 1573.99f, 50.69639f));
                        VectorList_03.Add(new Vector3(2735.578f, 1576.091f, 50.53191f));
                        VectorList_03.Add(new Vector3(2728.982f, 1577.459f, 66.53811f));
                    }
                    else if (iCat == 6)
                    {
                        VectorList_03.Add(new Vector3(2369.055f, 2197.838f, 102.866f));
                        VectorList_03.Add(new Vector3(2368.969f, 2193.18f, 105.6187f));
                        VectorList_03.Add(new Vector3(2368.872f, 2186.679f, 140.6358f));
                    }
                    else if (iCat == 7)
                    {
                        VectorList_03.Add(new Vector3(2674.238f, 2794.201f, 32.81267f));
                        VectorList_03.Add(new Vector3(2676.679f, 2791.165f, 40.51861f));
                    }
                    else if (iCat == 8)
                    {
                        VectorList_03.Add(new Vector3(1911.586f, 578.1634f, 176.3678f));
                        VectorList_03.Add(new Vector3(1902.479f, 612.1648f, 190.4232f));
                    }
                    else if (iCat == 9)
                    {
                        VectorList_03.Add(new Vector3(1662.736f, -22.32487f, 173.5064f));
                        VectorList_03.Add(new Vector3(1666.577f, -27.66433f, 184.7772f));
                        VectorList_03.Add(new Vector3(1665.025f, -27.98582f, 196.9362f));
                    }
                    else if (iCat == 10)
                    {
                        VectorList_03.Add(new Vector3(744.8895f, 603.6869f, 125.9338f));
                        VectorList_03.Add(new Vector3(717.8181f, 594.5558f, 137.3117f));
                        VectorList_03.Add(new Vector3(724.5558f, 592.4565f, 140.7948f));
                    }
                    vTarget_01 = VectorList_03[0];
                }           //save cat
                else
                {
                    VectorList_01.Add(new Vector3(2604.583f, 2507.948f, 28.76816f));
                    VectorList_01.Add(new Vector3(2576.702f, 418.3727f, 108.0408f));
                    VectorList_01.Add(new Vector3(1331.708f, -1615.235f, 52.11648f));
                    VectorList_01.Add(new Vector3(918.6093f, -593.2044f, 56.90709f));
                    VectorList_01.Add(new Vector3(1269.138f, -540.7137f, 68.56045f));
                    VectorList_01.Add(new Vector3(873.0724f, -111.8709f, 79.04739f));
                    VectorList_01.Add(new Vector3(1233.344f, -1420.103f, 35.10855f));
                    VectorList_01.Add(new Vector3(1161.572f, -949.0202f, 47.99375f));
                    VectorList_01.Add(new Vector3(2589.429f, -371.2926f, 92.46644f));
                    VectorList_01.Add(new Vector3(2690.265f, 1642.243f, 24.16985f));
                }                            //chase driver throwing molitovs
                sFires = "El Burro Heights Fire Station";
            }
            else if (iLocationX == 5)
            {
                vFuMiss = new Vector3(1714.219f, 3587.345f, 34.92292f);

                vGetaway = new Vector3(1698.2177f, 3585.0623f, 35.64f);
                fGetDir = -150.19f;

                if (iMissionVar_01 == 1)
                {
                    VectorList_01.Add(new Vector3(1889.192f, 3834.451f, 32.01105f));
                    VectorList_01.Add(new Vector3(1609.499f, 3675.907f, 34.07229f));
                    VectorList_01.Add(new Vector3(1667.149f, 4874.436f, 41.66345f));
                    VectorList_01.Add(new Vector3(2512.01f, 4135.024f, 38.16343f));
                    VectorList_01.Add(new Vector3(2824.888f, 4413.539f, 48.57113f));
                    VectorList_01.Add(new Vector3(1154.737f, 2684.383f, 37.74841f));
                    VectorList_01.Add(new Vector3(420.9953f, 2673.239f, 43.63997f));
                    VectorList_01.Add(new Vector3(860.386f, 2238.428f, 48.13387f));
                    VectorList_01.Add(new Vector3(2061.712f, 2999.06f, 44.66584f));
                    VectorList_01.Add(new Vector3(74.05325f, 3635.154f, 39.30263f));
                }                //Put out fire vehicle
                else if (iMissionVar_01 == 2)
                {
                    VectorList_01.Add(new Vector3(1929.717f, 3735.022f, 36.11206f));
                    VectorList_01.Add(new Vector3(1942.172f, 3800.411f, 35.659f));
                    VectorList_01.Add(new Vector3(2253.288f, 5168.728f, 62.60575f));
                    VectorList_01.Add(new Vector3(379.7092f, 3573.542f, 38.1857f));
                    VectorList_01.Add(new Vector3(1429.54f, 3668.432f, 39.72841f));
                    VectorList_01.Add(new Vector3(580.5334f, 2674.995f, 45.68588f));
                    VectorList_01.Add(new Vector3(201.2184f, 2437.865f, 60.52894f));
                    VectorList_01.Add(new Vector3(-38.18939f, 2871.778f, 62.79957f));
                    VectorList_01.Add(new Vector3(2033.008f, 3189.573f, 48.78548f));
                    VectorList_01.Add(new Vector3(885.9108f, 2866.014f, 60.9489f));
                }           //Put out fire house
                else if (iMissionVar_01 == 3)
                {
                    VectorList_01.Add(new Vector3(2018.387f, 4974.779f, 41.24078f));
                    VectorList_01.Add(new Vector3(1712.089f, 4804.994f, 41.78631f));
                    VectorList_01.Add(new Vector3(1639.633f, 4839.666f, 42.0242f));
                    VectorList_01.Add(new Vector3(2106.266f, 4768.405f, 41.2288f));
                    VectorList_01.Add(new Vector3(1504.209f, 3761.94f, 33.98816f));
                    VectorList_01.Add(new Vector3(1563.927f, 3572.856f, 33.74734f));
                    VectorList_01.Add(new Vector3(2474.682f, 3771.779f, 41.34366f));
                    VectorList_01.Add(new Vector3(1987.676f, 3035.25f, 47.0563f));
                    VectorList_01.Add(new Vector3(559.2806f, 2808.339f, 42.24008f));
                    VectorList_01.Add(new Vector3(305.5799f, 2875.192f, 43.50591f));
                }           //Put out fire Weeley bin
                else if (iMissionVar_01 == 4)
                {
                    int iCat = FindRandom(52, 1, 10);
                    if (iCat == 1)
                    {
                        VectorList_03.Add(new Vector3(1131.608f, 2177.422f, 49.3606f));
                        VectorList_03.Add(new Vector3(1131.583f, 2172.774f, 52.11588f));
                        VectorList_03.Add(new Vector3(1130.349f, 2175.294f, 75.79888f));
                        VectorList_03.Add(new Vector3(1131.086f, 2171.276f, 79.27214f));
                        VectorList_03.Add(new Vector3(1132.542f, 2172.199f, 87.30864f));
                    }
                    else if (iCat == 2)
                    {
                        VectorList_03.Add(new Vector3(1045.85f, 2280.369f, 49.70117f));
                        VectorList_03.Add(new Vector3(1050.772f, 2280.446f, 52.45603f));
                        VectorList_03.Add(new Vector3(1051.557f, 2283.604f, 76.13608f));
                        VectorList_03.Add(new Vector3(1014.338f, 2236.634f, 79.60358f));
                    }
                    else if (iCat == 3)
                    {
                        VectorList_03.Add(new Vector3(946.3651f, 2413.913f, 51.44973f));
                        VectorList_03.Add(new Vector3(948.6259f, 2409.764f, 54.2018f));
                        VectorList_03.Add(new Vector3(951.6443f, 2408.019f, 77.8914f));
                        VectorList_03.Add(new Vector3(957.8938f, 2393.696f, 81.67262f));
                    }
                    else if (iCat == 4)
                    {
                        VectorList_03.Add(new Vector3(287.476f, 2872.253f, 43.64721f));
                        VectorList_03.Add(new Vector3(285.8731f, 2871.332f, 56.86985f));
                        VectorList_03.Add(new Vector3(271.0888f, 2863.196f, 64.93308f));
                        VectorList_03.Add(new Vector3(267.5765f, 2866.448f, 74.17478f));
                    }
                    else if (iCat == 5)
                    {
                        VectorList_03.Add(new Vector3(2675.507f, 3468.64f, 55.55955f));
                        VectorList_03.Add(new Vector3(2701.592f, 3492.359f, 62.76652f));
                    }
                    else if (iCat == 6)
                    {
                        VectorList_03.Add(new Vector3(1574.704f, 3358.57f, 37.43276f));
                        VectorList_03.Add(new Vector3(1574.83f, 3361.074f, 42.12829f));
                        VectorList_03.Add(new Vector3(1574.762f, 3364.033f, 48.63499f));
                    }
                    else if (iCat == 7)
                    {
                        VectorList_03.Add(new Vector3(2121.196f, 2918.85f, 47.65158f));
                        VectorList_03.Add(new Vector3(2106.017f, 2928.885f, 59.93315f));
                    }
                    else if (iCat == 8)
                    {
                        VectorList_03.Add(new Vector3(2368.762f, 4941.804f, 42.48777f));
                        VectorList_03.Add(new Vector3(2370.867f, 4938.896f, 66.73099f));
                    }
                    else if (iCat == 9)
                    {
                        VectorList_03.Add(new Vector3(2885.729f, 4330.319f, 50.41188f));
                        VectorList_03.Add(new Vector3(2902.985f, 4331.645f, 92.31193f));
                    }
                    else if (iCat == 10)
                    {
                        VectorList_03.Add(new Vector3(1987.044f, 5025.16f, 41.0343f));
                        VectorList_03.Add(new Vector3(1990.572f, 5026.928f, 61.6032f));
                    }
                    vTarget_01 = VectorList_03[0];
                }           //save cat
                else
                {
                    VectorList_01.Add(new Vector3(1889.192f, 3834.451f, 32.01105f));
                    VectorList_01.Add(new Vector3(1609.499f, 3675.907f, 34.07229f));
                    VectorList_01.Add(new Vector3(1667.149f, 4874.436f, 41.66345f));
                    VectorList_01.Add(new Vector3(2512.01f, 4135.024f, 38.16343f));
                    VectorList_01.Add(new Vector3(2824.888f, 4413.539f, 48.57113f));
                    VectorList_01.Add(new Vector3(1154.737f, 2684.383f, 37.74841f));
                    VectorList_01.Add(new Vector3(420.9953f, 2673.239f, 43.63997f));
                    VectorList_01.Add(new Vector3(860.386f, 2238.428f, 48.13387f));
                    VectorList_01.Add(new Vector3(2061.712f, 2999.06f, 44.66584f));
                    VectorList_01.Add(new Vector3(74.05325f, 3635.154f, 39.30263f));
                }                            //chase driver throwing molitovs
                sFires = "Sandy Shores Fire Station";
            }
            else
            {
                vFuMiss = new Vector3(-397.2693f, 6133.777f, 31.00628f);

                vGetaway = new Vector3(-376.7517f, 6128.0347f, 31.4968f);
                fGetDir = 44.8131f;

                if (iMissionVar_01 == 1)
                {
                    VectorList_01.Add(new Vector3(-1505.434f, 5000.363f, 62.35179f));
                    VectorList_01.Add(new Vector3(-945.9736f, 5415.901f, 38.02508f));
                    VectorList_01.Add(new Vector3(-666.4794f, 5980.88f, 12.4952f));
                    VectorList_01.Add(new Vector3(-223.158f, 6152.968f, 30.78292f));
                    VectorList_01.Add(new Vector3(69.45302f, 6612.893f, 31.14452f));
                    VectorList_01.Add(new Vector3(1351.396f, 6501.865f, 19.50821f));
                    VectorList_01.Add(new Vector3(-2233.997f, 4280.964f, 46.50346f));
                }                //Put out fire vehicle
                else if (iMissionVar_01 == 2)
                {
                    VectorList_01.Add(new Vector3(-305.9053f, 6205.513f, 35.65318f));
                    VectorList_01.Add(new Vector3(-251.0526f, 6257.79f, 32.06403f));
                    VectorList_01.Add(new Vector3(-242.4512f, 6365.154f, 35.85625f));
                    VectorList_01.Add(new Vector3(-128.2716f, 6362.34f, 36.97274f));
                    VectorList_01.Add(new Vector3(1415.824f, 6350.627f, 24.29479f));
                    VectorList_01.Add(new Vector3(-401.945f, 6374.469f, 18.88838f));
                    VectorList_01.Add(new Vector3(-677.7927f, 5840.36f, 21.64999f));
                    VectorList_01.Add(new Vector3(-566.8689f, 5249.597f, 73.6452f));
                    VectorList_01.Add(new Vector3(1585.052f, 6462.974f, 28.68683f));
                    VectorList_01.Add(new Vector3(34.16683f, 6556.016f, 33.7843f));
                }           //Put out fire house
                else if (iMissionVar_01 == 3)
                {
                    VectorList_01.Add(new Vector3(-414.3453f, 6177.978f, 31.4782f));
                    VectorList_01.Add(new Vector3(-369.1945f, 6060.814f, 31.50013f));
                    VectorList_01.Add(new Vector3(-293.1514f, 6270.734f, 31.49305f));
                    VectorList_01.Add(new Vector3(-230.3975f, 6261.953f, 31.48927f));
                    VectorList_01.Add(new Vector3(-72.35649f, 6392.305f, 31.49036f));
                    VectorList_01.Add(new Vector3(41.4637f, 6293.524f, 31.24101f));
                    VectorList_01.Add(new Vector3(408.895f, 6623.648f, 28.21533f));
                    VectorList_01.Add(new Vector3(-682.398f, 5782.822f, 17.33096f));
                    VectorList_01.Add(new Vector3(-566.9645f, 5375.292f, 70.23253f));
                    VectorList_01.Add(new Vector3(-2166.834f, 4280.235f, 48.95645f));
                }           //Put out fire Weeley bin
                else if (iMissionVar_01 == 4)
                {
                    int iCat = FindRandom(52, 1, 10);
                    if (iCat == 1)
                    {
                        VectorList_03.Add(new Vector3(476.7609f, 5564.091f, 787.7924f));
                        VectorList_03.Add(new Vector3(465.2097f, 5564.118f, 790.1517f));
                        VectorList_03.Add(new Vector3(443.056f, 5571.859f, 794.0636f));
                    }
                    else if (iCat == 2)
                    {
                        VectorList_03.Add(new Vector3(-529.29f, 5296.477f, 74.17416f));
                        VectorList_03.Add(new Vector3(-533.8841f, 5298.164f, 76.22298f));
                        VectorList_03.Add(new Vector3(-547.3457f, 5307.155f, 81.70724f));
                        VectorList_03.Add(new Vector3(-549.8339f, 5308.257f, 114.1458f));
                    }
                    else if (iCat == 3)
                    {
                        VectorList_03.Add(new Vector3(-378.7972f, 6082.82f, 31.44448f));
                        VectorList_03.Add(new Vector3(-380.0973f, 6087.844f, 44.25361f));
                    }
                    else if (iCat == 4)
                    {
                        VectorList_03.Add(new Vector3(-116.5642f, 6095.181f, 31.08812f));
                        VectorList_03.Add(new Vector3(-114.667f, 6095.59f, 50.65103f));
                        VectorList_03.Add(new Vector3(-120.6208f, 6103.851f, 66.39037f));
                    }
                    else if (iCat == 5)
                    {
                        VectorList_03.Add(new Vector3(-133.8914f, 6153.745f, 31.33397f));
                        VectorList_03.Add(new Vector3(-140.6442f, 6153.557f, 39.75406f));
                        VectorList_03.Add(new Vector3(-178.2877f, 6156.795f, 42.53918f));
                        VectorList_03.Add(new Vector3(-178.427f, 6146.682f, 42.63742f));
                    }
                    else if (iCat == 6)
                    {
                        VectorList_03.Add(new Vector3(-211.7788f, 6119.181f, 31.46959f));
                        VectorList_03.Add(new Vector3(-210.7851f, 6117.274f, 42.10376f));
                        VectorList_03.Add(new Vector3(-211.6232f, 6125.68f, 50.80574f));
                        VectorList_03.Add(new Vector3(-215.0806f, 6122.5f, 57.27292f));
                    }
                    else if (iCat == 7)
                    {
                        VectorList_03.Add(new Vector3(106.5499f, 6322.443f, 31.39839f));
                        VectorList_03.Add(new Vector3(107.8129f, 6330.101f, 44.49488f));
                    }
                    else if (iCat == 8)
                    {
                        VectorList_03.Add(new Vector3(433.916f, 6462.895f, 28.76925f));
                        VectorList_03.Add(new Vector3(421.8325f, 6471.436f, 37.08047f));
                    }
                    else if (iCat == 9)
                    {
                        VectorList_03.Add(new Vector3(-45.65552f, 6185.589f, 31.0194f));
                        VectorList_03.Add(new Vector3(-47.4403f, 6176.68f, 38.69144f));
                    }
                    else if (iCat == 10)
                    {
                        VectorList_03.Add(new Vector3(-1007.743f, 4837.706f, 269.5457f));
                        VectorList_03.Add(new Vector3(-1007.268f, 4842.294f, 272.2487f));
                        VectorList_03.Add(new Vector3(-1000.971f, 4851.799f, 274.6058f));
                    }
                    vTarget_01 = VectorList_03[0];
                }           //save cat
                else
                {
                    VectorList_01.Add(new Vector3(-1505.434f, 5000.363f, 62.35179f));
                    VectorList_01.Add(new Vector3(-945.9736f, 5415.901f, 38.02508f));
                    VectorList_01.Add(new Vector3(-666.4794f, 5980.88f, 12.4952f));
                    VectorList_01.Add(new Vector3(-223.158f, 6152.968f, 30.78292f));
                    VectorList_01.Add(new Vector3(69.45302f, 6612.893f, 31.14452f));
                    VectorList_01.Add(new Vector3(1351.396f, 6501.865f, 19.50821f));
                    VectorList_01.Add(new Vector3(-2233.997f, 4280.964f, 46.50346f));
                }                            //chase driver throwing molitovs
                sFires = "Paleto Bay Fire Station";
            }

            BeOnOff.Add(false);//   bBurningC   0 
            BeOnOff.Add(false);//   bBackAtFort 1 
            BeOnOff.Add(false);//   bFortAccess 2 
            BeOnOff.Add(false);//   bTruckBlip  3
            BeOnOff.Add(false);//   bCatHat     4 

            iMissionVar_02 = 0;

            if (iLocationX == 3)
            {
                BeOnOff[1] = true;
                BeOnOff[2] = true;
                Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "restrictedareas");
            }

            if (iMissionVar_01 == 1)
            {
                Fire_StartinFires();
            }                //Put out fire vehicle
            else if (iMissionVar_01 == 2)
            {
                Fire_StartinFires();
            }           //Put out fire house
            else if (iMissionVar_01 == 3)
            {
                sList_01.Add("prop_bin_14a");
                sList_01.Add("prop_bin_14b");
                sList_01.Add("p_dumpster_t");

                Fire_StartinFires();
            }           //Put out fire Weeley bin
            else if (iMissionVar_01 == 4)
            {
                vTarget_01.Z -= 1.00f;

                Fubar_Vectors(iLocationX, 0, true, false);

                int iRandomPicks = RandInt(0, VectorList_01.Count - 1);

                vTarget_02 = VectorList_01[iRandomPicks];
                vTarget_03 = VectorList_02[iRandomPicks];
            }           //save cat
            else
            {
                iTime_01.Clear();
                iTime_01.Add(0);
                Fire_StartinFires();
            }                            //chase driver throwing molitovs
            if (!bReFire)
            {
                VTBTimerPool.Add(ttTextBar_01);
                VTBTimerPool.Add(BtSlideBar);
                BtSlideBar.Label = "" + MyLang.Othertext[9] + "";
                ttTextBar_01.Label = "" + MyLang.Othertext[0] + "";
                if (sFireFix == "")
                    sFireFix = MyLang.Mistext[67];
                MyLang.Mistext[67] = sFireFix + "~y~" + sFires + "~w~.";
                iMishText = 67;
                BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[8], "", 5000);
            }
            bOnTheJob = true;
        }
        private void HeresJohnny()
        {
            LogThis("HeresJohnny");

            VTBTimerPool.Add(ttTextBar_01);
            ttTextBar_01.Label = "" + MyLang.Othertext[10] + "";
            ttTextBar_02.Label = "" + MyLang.Othertext[1] + "";

            int iBuild = 0;
            BeOnOff.Clear();

            if (bTestRun)
            {
                bJobLoaded = true;
                iJobType = 10;
            }
            else
            {
                List<Vector3> FuDrop = new List<Vector3>();
                List<Vector3> VePark = new List<Vector3>();
                List<float> VeHead = new List<float>();
                List<Vector3> VeDest = new List<Vector3>();
                JohnnyBuild OrigBill = new JohnnyBuild();

                if (iLocationX == 1)
                {
                    VeDest.Add(new Vector3(-1041.083f, -2718.568f, 12.93392f));
                    VeDest.Add(new Vector3(-1061.077f, -2077.698f, 12.52617f));
                    VeDest.Add(new Vector3(-395.7942f, -1874.429f, 19.77618f));
                    VeDest.Add(new Vector3(-681.4741f, -1416.372f, 4.248418f));
                    VeDest.Add(new Vector3(-138.5219f, -1630.083f, 31.84668f));
                    VeDest.Add(new Vector3(308.1444f, -1377.628f, 31.08431f));
                    VeDest.Add(new Vector3(605.5705f, -3045.7f, 5.317531f));
                    VeDest.Add(new Vector3(1197.563f, -3097.259f, 5.071759f));
                    VeDest.Add(new Vector3(1073.497f, -2182.429f, 30.73612f));
                    VeDest.Add(new Vector3(829.1868f, -2120.764f, 28.58011f));
                    VeDest.Add(new Vector3(409.894f, -1673.724f, 28.39863f));
                    VeDest.Add(new Vector3(417.3291f, -1338.622f, 45.30168f));
                    VeDest.Add(new Vector3(709.8922f, -989.934f, 23.31389f));
                    VeDest.Add(new Vector3(834.902f, -1078.826f, 27.20664f));
                    VeDest.Add(new Vector3(1715.123f, -1783.607f, 110.5077f));
                    VeDest.Add(new Vector3(1484.828f, -1622.327f, 70.1957f));
                    VeDest.Add(new Vector3(143.6719f, -1324.573f, 28.45681f));
                    VeDest.Add(new Vector3(698.8793f, -1039.842f, 21.61163f));
                    VeDest.Add(new Vector3(-328.418f, -2726.433f, 5.261106f));
                    VeDest.Add(new Vector3(832.888f, -1577.809f, 29.72132f));

                    VePark.Add(new Vector3(763.0951f, -753.2785f, 26.15745f)); VeHead.Add(181.3244f);
                    VePark.Add(new Vector3(967.4774f, -1020.293f, 40.1831f)); VeHead.Add(267.9459f);
                    VePark.Add(new Vector3(890.8727f, -887.1221f, 26.18314f)); VeHead.Add(90.56949f);
                    VePark.Add(new Vector3(816.6873f, -920.8327f, 25.29131f)); VeHead.Add(359.3065f);
                    VePark.Add(new Vector3(841.8243f, -1160.949f, 24.59419f)); VeHead.Add(2.923792f);
                    VePark.Add(new Vector3(724.6313f, -1193.057f, 23.60598f)); VeHead.Add(253.3395f);
                    VePark.Add(new Vector3(1027.624f, -2398.818f, 29.17621f)); VeHead.Add(269.1856f);
                    VePark.Add(new Vector3(868.2722f, -2237.377f, 29.81623f)); VeHead.Add(124.5151f);
                    VePark.Add(new Vector3(476.8271f, -1543.507f, 28.55205f)); VeHead.Add(319.0801f);
                    VePark.Add(new Vector3(507.5983f, -1496.719f, 28.61389f)); VeHead.Add(165.8853f);
                    VePark.Add(new Vector3(572.3157f, -1567.647f, 27.92348f)); VeHead.Add(316.8122f);
                    VePark.Add(new Vector3(525.8751f, -1600.893f, 28.5511f)); VeHead.Add(48.28445f);
                    VePark.Add(new Vector3(-8.841423f, -1644.185f, 28.53421f)); VeHead.Add(309.7827f);
                    VePark.Add(new Vector3(-339.2939f, -1464.422f, 29.91447f)); VeHead.Add(267.1234f);
                    VePark.Add(new Vector3(-669.2146f, -2377.531f, 13.164f)); VeHead.Add(60.1353f);
                    VePark.Add(new Vector3(-1084.677f, -2231.546f, 12.56676f)); VeHead.Add(310.7375f);

                    FuDrop.Add(new Vector3(767.4902f, -763.3738f, 26.01537f));
                    FuDrop.Add(new Vector3(991.3975f, -1015.788f, 41.47733f));
                    FuDrop.Add(new Vector3(890.5455f, -909.1808f, 26.11003f));
                    FuDrop.Add(new Vector3(791.5894f, -929.159f, 24.87198f));
                    FuDrop.Add(new Vector3(869.3484f, -1166.822f, 24.3893f));
                    FuDrop.Add(new Vector3(763.2751f, -1198.393f, 23.78876f));
                    FuDrop.Add(new Vector3(1031.024f, -2414.611f, 28.67257f));
                    FuDrop.Add(new Vector3(882.3638f, -2243.256f, 30.04296f));
                    FuDrop.Add(new Vector3(493.0397f, -1555.147f, 28.71536f));
                    FuDrop.Add(new Vector3(519.2209f, -1498.67f, 28.65422f));
                    FuDrop.Add(new Vector3(565.6391f, -1555.059f, 28.6565f));
                    FuDrop.Add(new Vector3(511.4433f, -1604.321f, 28.65405f));
                    FuDrop.Add(new Vector3(4.830258f, -1649.614f, 28.75245f));
                    FuDrop.Add(new Vector3(-337.213f, -1440.709f, 29.61197f));
                    FuDrop.Add(new Vector3(-688.0628f, -2381.543f, 13.4418f));
                    FuDrop.Add(new Vector3(-1060.161f, -2238.28f, 11.75805f));
                }
                else if (iLocationX == 2)
                {
                    VeDest.Add(new Vector3(139.7241f, -1081.181f, 28.44081f));
                    VeDest.Add(new Vector3(29.14905f, -1029.682f, 28.69712f));
                    VeDest.Add(new Vector3(-50.24825f, -785.8937f, 43.37382f));
                    VeDest.Add(new Vector3(-71.04037f, -611.7898f, 35.39153f));
                    VeDest.Add(new Vector3(-341.7037f, -761.6899f, 52.49443f));
                    VeDest.Add(new Vector3(244.2844f, 193.9185f, 104.2734f));
                    VeDest.Add(new Vector3(57.88021f, 18.9896f, 68.61149f));
                    VeDest.Add(new Vector3(-387.251f, -127.8733f, 37.93008f));
                    VeDest.Add(new Vector3(-421.0049f, -346.2681f, 32.3571f));
                    VeDest.Add(new Vector3(-658.934f, -271.3972f, 35.04425f));
                    VeDest.Add(new Vector3(-1387.674f, 28.38145f, 52.83684f));
                    VeDest.Add(new Vector3(-1046.806f, 762.9147f, 166.6382f));
                    VeDest.Add(new Vector3(234.3188f, -33.85854f, 68.96152f));
                    VeDest.Add(new Vector3(332.2938f, -541.4509f, 27.99221f));
                    VeDest.Add(new Vector3(-1057.122f, -1688.98f, 3.719565f));
                    VeDest.Add(new Vector3(-1069.563f, -1420.941f, 4.624523f));
                    VeDest.Add(new Vector3(-1277.739f, -1149.508f, 5.553957f));
                    VeDest.Add(new Vector3(-1566.812f, -1035.633f, 12.26583f));
                    VeDest.Add(new Vector3(-812.8978f, -1100.804f, 10.08981f));
                    VeDest.Add(new Vector3(-1188.423f, -738.4568f, 19.60114f));

                    VePark.Add(new Vector3(-1532.188f, -345.0203f, 44.78691f)); VeHead.Add(111.9126f);
                    VePark.Add(new Vector3(-1553.959f, -403.1271f, 41.31369f)); VeHead.Add(229.697f);
                    VePark.Add(new Vector3(-1608.258f, -450.827f, 37.48773f)); VeHead.Add(139.5216f);
                    VePark.Add(new Vector3(-1457.42f, -497.9855f, 31.96311f)); VeHead.Add(13.19475f);
                    VePark.Add(new Vector3(-1240.887f, -255.6689f, 38.34529f)); VeHead.Add(338.0434f);
                    VePark.Add(new Vector3(-826.4299f, -439.9897f, 35.96603f)); VeHead.Add(122.2067f);
                    VePark.Add(new Vector3(-873.1349f, -368.9036f, 37.33173f)); VeHead.Add(206.889f);
                    VePark.Add(new Vector3(-993.2934f, -1425.717f, 4.348188f)); VeHead.Add(107.8907f);
                    VePark.Add(new Vector3(-812.9409f, -954.1818f, 14.73317f)); VeHead.Add(88.66773f);
                    VePark.Add(new Vector3(-760.0768f, -870.6204f, 20.73964f)); VeHead.Add(271.9166f);
                    VePark.Add(new Vector3(-786.7484f, -805.6275f, 19.95922f)); VeHead.Add(179.0629f);
                    VePark.Add(new Vector3(-667.9493f, -852.0062f, 23.61065f)); VeHead.Add(0.8087238f);
                    VePark.Add(new Vector3(-276.53f, -998.269f, 24.51661f)); VeHead.Add(250.5747f);
                    VePark.Add(new Vector3(-27.38151f, -623.9631f, 34.76946f)); VeHead.Add(250.3548f);
                    VePark.Add(new Vector3(-635.6614f, 56.31993f, 43.08276f)); VeHead.Add(93.84727f);
                    VePark.Add(new Vector3(-503.9017f, 84.24171f, 55.76758f)); VeHead.Add(88.76174f);
                    VePark.Add(new Vector3(-632.2485f, 152.6626f, 56.56872f)); VeHead.Add(85.54179f);
                    VePark.Add(new Vector3(-796.055f, 303.8038f, 85.02842f)); VeHead.Add(178.2735f);
                    VePark.Add(new Vector3(-206.0486f, 193.6038f, 79.80665f)); VeHead.Add(85.39515f);
                    VePark.Add(new Vector3(-215.8696f, 37.88378f, 58.94828f)); VeHead.Add(73.43102f);
                    VePark.Add(new Vector3(-33.43102f, -68.7942f, 58.63094f)); VeHead.Add(138.1592f);
                    VePark.Add(new Vector3(-10.6674f, 37.73257f, 70.93261f)); VeHead.Add(155.6066f);
                    VePark.Add(new Vector3(25.66169f, 82.36754f, 74.07247f)); VeHead.Add(247.7371f);
                    VePark.Add(new Vector3(280.3262f, -147.0995f, 64.40244f)); VeHead.Add(72.3112f);

                    FuDrop.Add(new Vector3(-1533.334f, -364.4132f, 43.67853f));
                    FuDrop.Add(new Vector3(-1529.481f, -390.7781f, 41.43423f));
                    FuDrop.Add(new Vector3(-1609.774f, -464.364f, 37.07407f));
                    FuDrop.Add(new Vector3(-1448.519f, -485.545f, 33.80241f));
                    FuDrop.Add(new Vector3(-1224.811f, -263.9234f, 37.97966f));
                    FuDrop.Add(new Vector3(-853.2125f, -455.0513f, 36.13256f));
                    FuDrop.Add(new Vector3(-859.6529f, -379.6357f, 38.95545f));
                    FuDrop.Add(new Vector3(-1021.435f, -1446.801f, 4.528006f));
                    FuDrop.Add(new Vector3(-840.0447f, -962.4284f, 14.67098f));
                    FuDrop.Add(new Vector3(-749.395f, -879.2277f, 20.89071f));
                    FuDrop.Add(new Vector3(-781.2857f, -827.0645f, 20.71199f));
                    FuDrop.Add(new Vector3(-678.5861f, -845.3114f, 23.52249f));
                    FuDrop.Add(new Vector3(-239.4945f, -1002.435f, 28.69679f));
                    FuDrop.Add(new Vector3(0.0340514f, -598.6345f, 37.23772f));
                    FuDrop.Add(new Vector3(-649.4835f, 42.97626f, 39.88513f));
                    FuDrop.Add(new Vector3(-541.7806f, 81.33409f, 57.01714f));
                    FuDrop.Add(new Vector3(-643.9061f, 145.3134f, 56.63571f));
                    FuDrop.Add(new Vector3(-786.1089f, 291.9819f, 85.20614f));
                    FuDrop.Add(new Vector3(-220.7553f, 188.6172f, 79.30544f));
                    FuDrop.Add(new Vector3(-228.0083f, 32.52436f, 57.26588f));
                    FuDrop.Add(new Vector3(-60.82083f, -68.11106f, 58.45665f));
                    FuDrop.Add(new Vector3(-2.753045f, 24.9047f, 70.547f));
                    FuDrop.Add(new Vector3(45.35606f, 72.65817f, 74.62936f));
                    FuDrop.Add(new Vector3(266.5732f, -138.9419f, 65.36573f));
                }
                else if (iLocationX == 3)
                {
                    VeDest.Add(new Vector3(-1549.014f, -548.3881f, 33.60472f));
                    VeDest.Add(new Vector3(-1326.126f, -394.6718f, 35.70398f));
                    VeDest.Add(new Vector3(-1345.405f, -511.1104f, 31.31937f));
                    VeDest.Add(new Vector3(-1643.713f, -232.7397f, 54.10257f));
                    VeDest.Add(new Vector3(-2163.325f, -418.072f, 12.60256f));
                    VeDest.Add(new Vector3(-3022.737f, 93.2095f, 10.85898f));
                    VeDest.Add(new Vector3(-2964.872f, 358.821f, 14.01834f));
                    VeDest.Add(new Vector3(-3245.632f, 987.9403f, 11.74526f));
                    VeDest.Add(new Vector3(-3154.126f, 1089.095f, 19.95444f));
                    VeDest.Add(new Vector3(-2571.136f, 2336.588f, 32.30839f));
                    VeDest.Add(new Vector3(-1905.079f, 2013.517f, 140.4563f));
                    VeDest.Add(new Vector3(-387.2896f, 1202.528f, 324.8897f));
                    VeDest.Add(new Vector3(217.4675f, 1233.237f, 224.7079f));
                    VeDest.Add(new Vector3(-2204.677f, 2318.118f, 32.16485f));
                    VeDest.Add(new Vector3(-2636.95f, 1314.521f, 143.6815f));
                    VeDest.Add(new Vector3(-1496.934f, 1513.846f, 114.4686f));
                    VeDest.Add(new Vector3(-2286.872f, 409.126f, 173.7149f));
                    VeDest.Add(new Vector3(-1580.878f, -377.0668f, 44.11908f));
                    VeDest.Add(new Vector3(-1451.276f, -368.8031f, 42.75115f));
                    VeDest.Add(new Vector3(-2024.668f, -347.4093f, 47.35437f));

                    VePark.Add(new Vector3(131.947f, 568.0752f, 182.8266f)); VeHead.Add(64.51907f);
                    VePark.Add(new Vector3(-189.3015f, 502.137f, 133.7102f)); VeHead.Add(79.99348f);
                    VePark.Add(new Vector3(-554.9893f, 665.6639f, 144.2542f)); VeHead.Add(339.4485f);
                    VePark.Add(new Vector3(-684.2095f, 603.2633f, 142.9608f)); VeHead.Add(337.039f);
                    VePark.Add(new Vector3(-742.5267f, 602.235f, 141.3216f)); VeHead.Add(252.8183f);
                    VePark.Add(new Vector3(-753.5316f, 626.5713f, 141.9162f)); VeHead.Add(219.3472f);
                    VePark.Add(new Vector3(-863.5941f, 699.2778f, 148.361f)); VeHead.Add(328.155f);
                    VePark.Add(new Vector3(-1297.894f, 456.6954f, 96.76454f)); VeHead.Add(276.7415f);
                    VePark.Add(new Vector3(-1414.112f, 538.3188f, 121.5406f)); VeHead.Add(108.2322f);
                    VePark.Add(new Vector3(-1133.141f, 2696.482f, 18.12704f)); VeHead.Add(144.8906f);

                    FuDrop.Add(new Vector3(130.148f, 574.3458f, 182.9167f));
                    FuDrop.Add(new Vector3(-204.0348f, 507.3595f, 131.8259f));
                    FuDrop.Add(new Vector3(-545.743f, 668.3389f, 143.3046f));
                    FuDrop.Add(new Vector3(-693.5018f, 605.1281f, 142.7581f));
                    FuDrop.Add(new Vector3(-727.9581f, 600.4442f, 141.3411f));
                    FuDrop.Add(new Vector3(-741.9579f, 616.4372f, 141.6683f));
                    FuDrop.Add(new Vector3(-872.7078f, 710.4829f, 148.966f));
                    FuDrop.Add(new Vector3(-1302.1f, 463.727f, 97.24272f));
                    FuDrop.Add(new Vector3(-1430.907f, 530.097f, 118.8338f));
                    FuDrop.Add(new Vector3(-1133.623f, 2660.846f, 16.86149f));
                }
                else if (iLocationX == 4)
                {
                    VeDest.Add(new Vector3(876.9699f, -40.16737f, 78.01224f));
                    VeDest.Add(new Vector3(758.0613f, -304.1064f, 59.12941f));
                    VeDest.Add(new Vector3(1146.086f, -471.1216f, 65.80056f));
                    VeDest.Add(new Vector3(1027.572f, -771.8019f, 57.28512f));
                    VeDest.Add(new Vector3(2575.484f, 328.6403f, 107.7009f));
                    VeDest.Add(new Vector3(2714.342f, 1391.438f, 23.77573f));
                    VeDest.Add(new Vector3(1362.614f, 1190.502f, 111.8559f));
                    VeDest.Add(new Vector3(646.2476f, 625.8518f, 128.159f));
                    VeDest.Add(new Vector3(862.9474f, -428.6084f, 28.58277f));
                    VeDest.Add(new Vector3(2541.387f, 2586.331f, 37.19322f));
                    VeDest.Add(new Vector3(2019.421f, 2343.798f, 92.37755f));
                    VeDest.Add(new Vector3(2674.441f, -798.6969f, 31.71748f));
                    VeDest.Add(new Vector3(1905.316f, 564.2309f, 175.0699f));
                    VeDest.Add(new Vector3(826.8267f, 1352.873f, 349.3413f));
                    VeDest.Add(new Vector3(1116.142f, 255.1911f, 80.10362f));
                    VeDest.Add(new Vector3(980.2012f, -217.2981f, 69.70745f));
                    VeDest.Add(new Vector3(913.6071f, -261.5765f, 67.87341f));
                    VeDest.Add(new Vector3(332.3805f, 870.631f, 194.396f));
                    VeDest.Add(new Vector3(1122.022f, -958.9174f, 46.49674f));
                    VeDest.Add(new Vector3(1201.854f, -1058.385f, 40.22353f));

                    VePark.Add(new Vector3(1352.448f, -1574.958f, 53.32595f)); VeHead.Add(215.6431f);
                    VePark.Add(new Vector3(902.6223f, -143.3312f, 75.93208f)); VeHead.Add(328.1572f);
                    VePark.Add(new Vector3(2465.714f, 1589.281f, 32.04578f)); VeHead.Add(273.0558f);
                    VePark.Add(new Vector3(394.2663f, 445.1308f, 143.1411f)); VeHead.Add(255.0541f);
                    VePark.Add(new Vector3(355.6105f, 437.9221f, 145.4459f)); VeHead.Add(294.3441f);

                    FuDrop.Add(new Vector3(1357.771f, -1586.517f, 52.27367f));
                    FuDrop.Add(new Vector3(896.9446f, -131.7422f, 76.66305f));
                    FuDrop.Add(new Vector3(2501.145f, 1590.861f, 31.98931f));
                    FuDrop.Add(new Vector3(413.0874f, 436.9318f, 141.6056f));
                    FuDrop.Add(new Vector3(374.8738f, 441.8295f, 143.6883f));
                }
                else if (iLocationX == 5)
                {
                    VeDest.Add(new Vector3(756.8173f, 2529.267f, 72.63226f));
                    VeDest.Add(new Vector3(1194.211f, 2695.812f, 37.42419f));
                    VeDest.Add(new Vector3(621.0852f, 2724.247f, 41.33144f));
                    VeDest.Add(new Vector3(353.738f, 2627.645f, 43.99853f));
                    VeDest.Add(new Vector3(30.18124f, 2792.97f, 57.39325f));
                    VeDest.Add(new Vector3(356.6727f, 3552.389f, 32.94365f));
                    VeDest.Add(new Vector3(1626.912f, 3579.607f, 34.64998f));
                    VeDest.Add(new Vector3(1887.315f, 3716.875f, 32.35853f));
                    VeDest.Add(new Vector3(2034.266f, 3454.775f, 43.33938f));
                    VeDest.Add(new Vector3(2436.803f, 3806.299f, 39.5065f));
                    VeDest.Add(new Vector3(2489.314f, 4124.451f, 37.67253f));
                    VeDest.Add(new Vector3(2560.723f, 4693.43f, 33.41275f));
                    VeDest.Add(new Vector3(2148.872f, 4801.017f, 40.56701f));
                    VeDest.Add(new Vector3(1801.27f, 4585.74f, 36.42428f));
                    VeDest.Add(new Vector3(356.784f, 4454.051f, 62.3696f));
                    VeDest.Add(new Vector3(1642.268f, 4839.343f, 41.52587f));
                    VeDest.Add(new Vector3(1915.273f, 5130.429f, 44.47802f));
                    VeDest.Add(new Vector3(3791.192f, 4469.835f, 5.294667f));
                    VeDest.Add(new Vector3(3321.107f, 5143.908f, 17.75576f));
                    VeDest.Add(new Vector3(721.6434f, 4176.446f, 40.20927f));

                    VePark.Add(new Vector3(191.7131f, 2787.094f, 44.95649f)); VeHead.Add(275.4593f);
                    VePark.Add(new Vector3(216.8162f, 2606.092f, 45.41368f)); VeHead.Add(10.91905f);
                    VePark.Add(new Vector3(639.272f, 2776.037f, 41.31077f)); VeHead.Add(356.1178f);
                    VePark.Add(new Vector3(1884.758f, 3768.683f, 32.17389f)); VeHead.Add(209.9817f);
                    VePark.Add(new Vector3(2552.551f, 4672.816f, 33.30616f)); VeHead.Add(18.82985f);
                    VePark.Add(new Vector3(1664.247f, 4768.503f, 41.31775f)); VeHead.Add(277.2863f);

                    FuDrop.Add(new Vector3(189.9987f, 2811.081f, 44.62182f));
                    FuDrop.Add(new Vector3(218.4454f, 2621.194f, 46.63481f));
                    FuDrop.Add(new Vector3(657.6193f, 2757.525f, 41.45344f));
                    FuDrop.Add(new Vector3(1899.49f, 3756.363f, 31.9322f));
                    FuDrop.Add(new Vector3(2545.275f, 4691.283f, 33.09167f));
                    FuDrop.Add(new Vector3(1673.208f, 4766.211f, 41.45985f));
                }
                else
                {
                    VeDest.Add(new Vector3(-228.7692f, 6313.809f, 30.6689f));
                    VeDest.Add(new Vector3(-314.9991f, 6072f, 30.56262f));
                    VeDest.Add(new Vector3(434.9284f, 6535.594f, 27.34294f));
                    VeDest.Add(new Vector3(183.9387f, 7041.575f, 1.482337f));
                    VeDest.Add(new Vector3(-789.5906f, 5628.471f, 25.5773f));
                    VeDest.Add(new Vector3(-1056.008f, 4780.963f, 235.0106f));
                    VeDest.Add(new Vector3(-1526.405f, 4478.364f, 17.42576f));
                    VeDest.Add(new Vector3(-377.0736f, 4276.489f, 47.22919f));
                    VeDest.Add(new Vector3(-235.5413f, 4128.151f, 39.45612f));
                    VeDest.Add(new Vector3(3312.311f, 5141.266f, 17.49276f));
                    VeDest.Add(new Vector3(132.7263f, 6630.996f, 30.93512f));
                    VeDest.Add(new Vector3(-462.7952f, 6009.6f, 30.58922f));
                    VeDest.Add(new Vector3(-367.3727f, 4935.563f, 196.8069f));
                    VeDest.Add(new Vector3(2361.862f, 5645.574f, 88.95358f));
                    VeDest.Add(new Vector3(2325.98f, 5348.494f, 117.7516f));
                    VeDest.Add(new Vector3(-957.2271f, 5532.75f, 4.997598f));
                    VeDest.Add(new Vector3(-976.8973f, 6224.723f, 2.74015f));
                    VeDest.Add(new Vector3(-773.1357f, 5531.051f, 32.72634f));
                    VeDest.Add(new Vector3(1587.402f, 6445.721f, 24.39896f));
                    VeDest.Add(new Vector3(-457.0739f, 5507.59f, 80.10921f));

                    VePark.Add(new Vector3(-2205.158f, 4247.259f, 47.0336f)); VeHead.Add(36.72251f);
                    VePark.Add(new Vector3(-244.3123f, 6237.997f, 30.81558f)); VeHead.Add(227.4248f);
                    VePark.Add(new Vector3(-71.92449f, 6430.187f, 30.76656f)); VeHead.Add(45.31582f);
                    VePark.Add(new Vector3(-11.0485f, 6562.656f, 31.28877f)); VeHead.Add(224.9607f);
                    VePark.Add(new Vector3(-105.092f, 6534.54f, 29.1365f)); VeHead.Add(46.96247f);
                    VePark.Add(new Vector3(-294.3618f, 6338.538f, 31.61744f)); VeHead.Add(46.27416f);

                    FuDrop.Add(new Vector3(-2225.065f, 4255.953f, 45.77827f));
                    FuDrop.Add(new Vector3(-266.9243f, 6209.992f, 31.01622f));
                    FuDrop.Add(new Vector3(-97.21156f, 6428.724f, 30.87597f));
                    FuDrop.Add(new Vector3(4.856897f, 6545.97f, 30.8189f));
                    FuDrop.Add(new Vector3(-110.4845f, 6547.493f, 28.97705f));
                    FuDrop.Add(new Vector3(-307.3465f, 6348.717f, 29.94456f));
                }

                OrigBill.Local = iLocationX;

                int iRandSt = RandInt(0, VeDest.Count - 1);
                OrigBill.JohnnyPark = VeDest[iRandSt];

                int iRandVe = RandInt(0, VePark.Count - 1);
                OrigBill.JohnnyStart = VePark[iRandVe];
                OrigBill.JohnnyHeads = VeHead[iRandVe];

                int iVe = FindRandom(111, 1, 19);
                if (iVe > 13 || iVe < 18)
                    iVe = 1;
                OrigBill.JohnnyCar = RanVehListX(iVe, 1, true);

                if (FindBuiltMissions(7))
                {
                    if (MySettings.BulderOnly)
                        iBuild = SelectBuilderMish(4);
                    else
                    {
                        MyMissions.JohnsXM.Add(OrigBill);
                        iBuild = FindRandom(69, 0, MyMissions.JohnsXM.Count - 1);
                    }
                }
                else
                {
                    MyMissions.JohnsXM.Add(OrigBill);
                    iBuild = 0;
                }
            }

            vGetaway = MyMissions.JohnsXM[iBuild].JohnnyStart;
            vTarget_01 = MyMissions.JohnsXM[iBuild].JohnnyPark;
            vFuMiss = MyMissions.JohnsXM[iBuild].FubarStop;

            VehicleSpawn(MyMissions.JohnsXM[iBuild].JohnnyCar, vGetaway, MyMissions.JohnsXM[iBuild].JohnnyHeads, false, false, true, false, 0, 0, 66, MyLang.Maptext[9], 1, true);

            iCashBouns = RandInt(45000, 50000);
            iCashReward = 0;

            BeOnOff.Add(true);//        bMoveYourV  0 
            BeOnOff.Add(false);//       bTruckBlip  1 

            if (!bTestRun)
                BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[9], "", 5000);
            bOnTheJob = true;
        }
        public class JohnnyBuild
        {
            public int Local { get; set; }
            public Vector3 FubarStop { get; set; }
            public Vector3 JohnnyStart { get; set; }
            public float JohnnyHeads { get; set; }
            public Vector3 JohnnyPark { get; set; }
            public string JohnnyCar { get; set; }
        }
        private void Raceist()
        {
            LogThis("Raceist");

            iList_01.Clear();
            MultiPed.Clear();
            VectorList_01.Clear();
            iDeliverList.Clear();
            PropList_01.Clear();
            iCoronaList.Clear();
            BeOnOff.Clear();

            iMissionVar_01 = 0;//Raceinlist

            sMissionVar_01 = "";//player veh
            fMission_01 = 0.00f;//ReSpawnHeading

            iList_01.Add(0);//CustomRace0,NormRace-1-Cuttin,2-Jetski,3-Bike,4-Heli,5-MotoBike,6-Yachts
            iList_01.Add(0);//RaceTime Total
            iList_01.Add(0);//RaceTIme Lap
            iList_01.Add(0);//Position
            iList_01.Add(0);//Pick a Veh
            iList_01.Add(5);//Race Count Down
            iList_01.Add(0);//Counting Crows
            iList_01.Add(40);//RacePeds40-41-43 

            BeOnOff.Add(false);//       FreezPos
            BeOnOff.Add(false);//       NoVehSelect...Delete?

            bool bYachting = false;
            bool bReCycle = false;
            bool bCutCorn = false;

            if (iCurrentLap < 1)
                iCurrentLap = 1;
            
            fMaxSpeed = 15.00f;
            bFloater = false;

            if (bTestRun)
            {
                bJobLoaded = true;
                bSoloRace = false;

                if (MyMissions.RaceXM[iMissionVar_01].VehClass == 3)
                {
                    BeOnOff[0] = true;
                    iList_01[0] = 4;
                    iList_01[7] = 43;
                }
                else if (MyMissions.RaceXM[iMissionVar_01].VehClass == 2)
                {
                    iList_01[0] = 3;
                    iList_01[7] = 42;
                }
                else
                {
                    iList_01[0] = 1;
                    if (MyMissions.RaceXM[iMissionVar_01].VehClass == 4)
                        iList_01[7] = 41;
                }
            }
            else
            {
                FindBuiltMissions(8);

                List<Vector3> RevRace = new List<Vector3>();
                List<Vector3> RaceCaz = new List<Vector3>();
                List<float> RaceHeads = new List<float>();

                if (bOnCayoLand)
                {
                    iList_01[0] = 5;

                    RevRace.Add(new Vector3(5147.734f, -5008.327f, 8.194172f));
                    RevRace.Add(new Vector3(5163.934f, -5204.785f, 4.182639f));
                    RevRace.Add(new Vector3(5069.657f, -5246.439f, 4.384394f));
                    RevRace.Add(new Vector3(5016.076f, -5185.677f, 1.905935f));
                    RevRace.Add(new Vector3(4946.305f, -5221.691f, 1.915694f));
                    RevRace.Add(new Vector3(4924.707f, -5348.12f, 9.092091f));
                    RevRace.Add(new Vector3(4843.653f, -5473.705f, 21.47081f));
                    RevRace.Add(new Vector3(4959.707f, -5444.595f, 32.57549f));
                    RevRace.Add(new Vector3(4985.145f, -5591.257f, 23.53427f));
                    RevRace.Add(new Vector3(5095.909f, -5597.434f, 36.05911f));
                    RevRace.Add(new Vector3(5193.088f, -5538.555f, 45.03407f));
                    RevRace.Add(new Vector3(5336.574f, -5488.068f, 52.60291f));
                    RevRace.Add(new Vector3(5429.529f, -5388.582f, 37.26349f));
                    RevRace.Add(new Vector3(5431.015f, -5313.071f, 25.2255f));
                    RevRace.Add(new Vector3(5523.693f, -5299.267f, 12.16038f));
                    RevRace.Add(new Vector3(5497.296f, -5167.862f, 12.91647f));
                    RevRace.Add(new Vector3(5368.384f, -5113.812f, 13.1756f));
                    RevRace.Add(new Vector3(5270.312f, -5088.003f, 13.35778f));
                    RevRace.Add(new Vector3(5214.976f, -5022.094f, 14.96472f));

                    RaceCaz.Add(new Vector3(5174.001f, -4988.228f, 13.65166f)); RaceHeads.Add(248.1184f);
                    RaceCaz.Add(new Vector3(5199.167f, -4997.615f, 13.7541f)); RaceHeads.Add(220.9705f);
                    RaceCaz.Add(new Vector3(5201.846f, -4995.511f, 13.75265f)); RaceHeads.Add(220.9705f);
                    RaceCaz.Add(new Vector3(5196.402f, -5000.076f, 13.57836f)); RaceHeads.Add(220.9705f);
                    RaceCaz.Add(new Vector3(5193.73f, -5002.414f, 13.46276f)); RaceHeads.Add(220.9705f);

                    RaceBuild PreRace = new RaceBuild
                    {
                        AvalableVeh = Racist_Carz(7),
                        FubStop = new Vector3(5201.846f, -4995.511f, 13.75265f),
                        Local = 0,
                        RaceCars = RaceCaz,
                        RaceHead = RaceHeads,
                        TheRace = ListReverseVec3(RevRace),
                        VehClass = 1
                    };
                    MyMissions.RaceXM.Add(PreRace);
                }
                else if (!MySettings.BulderOnly || MyMissions.RaceXM.Count == 0)
                {
                    if (iLocationX == 1)
                    {
                        iList_01[0] = 1;

                        RevRace.Add(new Vector3(-57.20544f, -1637.819f, 28.57509f));
                        RevRace.Add(new Vector3(-68.28426f, -1706.129f, 28.41583f));
                        RevRace.Add(new Vector3(79.12366f, -1656.612f, 28.59166f));
                        RevRace.Add(new Vector3(282.9262f, -1539.076f, 28.59111f));
                        RevRace.Add(new Vector3(481.7351f, -1441.778f, 28.59613f));
                        RevRace.Add(new Vector3(533.6118f, -1460.099f, 28.59089f));
                        RevRace.Add(new Vector3(478.0335f, -1420.373f, 28.59172f));
                        RevRace.Add(new Vector3(348.9517f, -1315.807f, 31.6308f));
                        RevRace.Add(new Vector3(400.4664f, -1259.809f, 31.78956f));
                        RevRace.Add(new Vector3(498.2137f, -1257.284f, 28.57402f));
                        RevRace.Add(new Vector3(498.8779f, -957.3315f, 26.45624f));
                        RevRace.Add(new Vector3(257.7741f, -956.0562f, 28.56417f));
                        RevRace.Add(new Vector3(194.0435f, -1128.518f, 28.4595f));
                        RevRace.Add(new Vector3(69.14757f, -1137.012f, 28.55371f));
                        RevRace.Add(new Vector3(81.26402f, -1314.08f, 28.59313f));
                        RevRace.Add(new Vector3(130.9812f, -1412.803f, 28.58896f));
                        RevRace.Add(new Vector3(41.42286f, -1518.247f, 28.59016f));

                        VectorList_01.Add(new Vector3(83.08556f, -1482.831f, 28.56946f));
                        VectorList_01.Add(new Vector3(116.2179f, -1449.694f, 28.55403f));
                        VectorList_01.Add(new Vector3(126.2271f, -1403.168f, 28.50347f));
                        VectorList_01.Add(new Vector3(86.01027f, -1324.641f, 28.54881f));
                        VectorList_01.Add(new Vector3(55.54393f, -1221.321f, 28.55342f));
                        VectorList_01.Add(new Vector3(62.65983f, -1144.368f, 28.54875f));
                        VectorList_01.Add(new Vector3(172.9235f, -1130.531f, 28.54345f));
                        VectorList_01.Add(new Vector3(204.2364f, -1130.818f, 28.54396f));
                        VectorList_01.Add(new Vector3(232.7088f, -984.435f, 28.50902f));
                        VectorList_01.Add(new Vector3(269.795f, -953.684f, 28.53325f));
                        VectorList_01.Add(new Vector3(456.4836f, -951.0273f, 27.48217f));
                        VectorList_01.Add(new Vector3(484.7998f, -953.3574f, 26.572f));
                        VectorList_01.Add(new Vector3(501.0209f, -984.5234f, 26.85003f));
                        VectorList_01.Add(new Vector3(504.8291f, -1232.788f, 28.49609f));
                        VectorList_01.Add(new Vector3(478.4326f, -1260.197f, 28.61223f));
                        VectorList_01.Add(new Vector3(429.5378f, -1257.538f, 30.68373f));
                        VectorList_01.Add(new Vector3(388.4329f, -1268.049f, 31.7557f));
                        VectorList_01.Add(new Vector3(363.2329f, -1300.893f, 31.64578f));
                        VectorList_01.Add(new Vector3(348.9722f, -1330.099f, 31.6453f));
                        VectorList_01.Add(new Vector3(368.7035f, -1351.955f, 31.24252f));
                        VectorList_01.Add(new Vector3(493.6837f, -1422.372f, 28.50945f));
                        VectorList_01.Add(new Vector3(538.8262f, -1443.921f, 28.55858f));
                        VectorList_01.Add(new Vector3(527.105f, -1459.275f, 28.57718f));
                        VectorList_01.Add(new Vector3(504.3167f, -1441.177f, 28.55985f));
                        VectorList_01.Add(new Vector3(472.496f, -1440.451f, 28.55931f));
                        VectorList_01.Add(new Vector3(352.619f, -1504.48f, 28.49762f));
                        VectorList_01.Add(new Vector3(149.4904f, -1620.73f, 28.50528f));
                        VectorList_01.Add(new Vector3(-4.898925f, -1700.051f, 28.5401f));
                        VectorList_01.Add(new Vector3(-62.16915f, -1706.672f, 28.33993f));
                        VectorList_01.Add(new Vector3(-81.6236f, -1676.795f, 28.57453f));
                        VectorList_01.Add(new Vector3(-39.12133f, -1614.408f, 28.58032f));

                        RaceCaz.Add(new Vector3(-7.671109f, -1554.019f, 28.60843f)); RaceHeads.Add(239.7765f);
                        RaceCaz.Add(new Vector3(11.53736f, -1548.344f, 28.49794f)); RaceHeads.Add(320.2968f);
                        RaceCaz.Add(new Vector3(16.39961f, -1550.597f, 28.54076f)); RaceHeads.Add(320.2968f);
                        RaceCaz.Add(new Vector3(25.00448f, -1556.959f, 29.34339f)); RaceHeads.Add(320.2968f);
                        RaceCaz.Add(new Vector3(27.81766f, -1560.342f, 28.49625f)); RaceHeads.Add(320.2968f);

                        RaceBuild PreRace = new RaceBuild
                        {
                            AvalableVeh = Racist_Carz(1),
                            FubStop = new Vector3(9.226546f, -1548.999f, 28.73895f),
                            Local = 1,
                            RaceCars = RaceCaz,
                            RaceHead = RaceHeads,
                            TheRace = ListReverseVec3(RevRace),
                            VehClass = 1
                        };
                        MyMissions.RaceXM.Add(PreRace);
                        iMissionVar_01 = FindRandom(91, 0, MyMissions.RaceXM.Count - 1);
                        if (iMissionVar_01 == MyMissions.RaceXM.Count - 1)
                            bCutCorn = true;
                    }
                    else if (iLocationX == 2)
                    {
                        iList_01[0] = 2;

                        RevRace.Add(new Vector3(-1645.748f, -1261.047f, 0.51f));
                        RevRace.Add(new Vector3(-1702.272f, -1222.724f, 0.51f));
                        RevRace.Add(new Vector3(-1737.956f, -1246.581f, 0.51f));
                        RevRace.Add(new Vector3(-1686.184f, -1293.532f, 0.51f));
                        RevRace.Add(new Vector3(-1637.875f, -1314.182f, 0.51f));
                        RevRace.Add(new Vector3(-1619.987f, -1286.133f, 0.51f));
                        RevRace.Add(new Vector3(-1600.089f, -1292.425f, 0.51f));
                        RevRace.Add(new Vector3(-1600.401f, -1274.724f, 0.51f));
                        RevRace.Add(new Vector3(-1577.251f, -1274.578f, 0.51f));
                        RevRace.Add(new Vector3(-1623.311f, -1205.906f, 0.51f));
                        RevRace.Add(new Vector3(-1647.99f, -1216.67f, 0.51f));

                        RaceCaz.Add(new Vector3(-1620.501f, -1172.018f, -0.1960505f)); RaceHeads.Add(131.3762f);
                        RaceCaz.Add(new Vector3(-1651.03f, -1224.61f, -0.1960505f)); RaceHeads.Add(316.4212f);
                        RaceCaz.Add(new Vector3(-1653.03f, -1222.61f, -0.1960505f)); RaceHeads.Add(316.4212f);
                        RaceCaz.Add(new Vector3(-1656.03f, -1219.61f, -0.1960505f)); RaceHeads.Add(316.4212f);
                        RaceCaz.Add(new Vector3(-1658.721f, -1218.04f, 0.51f)); RaceHeads.Add(316.4212f);

                        RaceBuild PreRace = new RaceBuild
                        {
                            AvalableVeh = Racist_Carz(2),
                            FubStop = new Vector3(-1594.706f, -1151.572f, 1.638812f),
                            Local = 2,
                            RaceCars = RaceCaz,
                            RaceHead = RaceHeads,
                            TheRace = ListReverseVec3(RevRace),
                            VehClass = 4
                        };
                        MyMissions.RaceXM.Add(PreRace);
                        iMissionVar_01 = FindRandom(92, 0, MyMissions.RaceXM.Count - 1);
                    }
                    else if (iLocationX == 3)
                    {
                        iList_01[0] = 3;

                        RevRace.Add(new Vector3(-2331.796f, 381.784f, 174.1289f));
                        RevRace.Add(new Vector3(-2343.833f, 370.0826f, 174.1318f));
                        RevRace.Add(new Vector3(-2327.708f, 327.7558f, 169.7004f));
                        RevRace.Add(new Vector3(-2304.872f, 301.6005f, 169.2651f));
                        RevRace.Add(new Vector3(-2283.26f, 252.2816f, 169.2641f));
                        RevRace.Add(new Vector3(-2262.935f, 259.5325f, 174.275f));
                        RevRace.Add(new Vector3(-2232.867f, 264.308f, 174.2735f));
                        RevRace.Add(new Vector3(-2201.387f, 192.5392f, 174.2181f));
                        RevRace.Add(new Vector3(-2187.414f, 158.8263f, 170.0803f));
                        RevRace.Add(new Vector3(-2187.76f, 126.1394f, 167.7306f));
                        RevRace.Add(new Vector3(-2235.659f, 92.48656f, 155.8075f));
                        RevRace.Add(new Vector3(-2287.136f, 0.04835975f, 119.2449f));
                        RevRace.Add(new Vector3(-2268.17f, -24.82425f, 111.8399f));
                        RevRace.Add(new Vector3(-2213.876f, 0.7592883f, 94.44165f));
                        RevRace.Add(new Vector3(-2162.388f, -55.38888f, 62.89052f));
                        RevRace.Add(new Vector3(-2137.922f, -92.5589f, 48.56309f));
                        RevRace.Add(new Vector3(-2096.598f, -116.852f, 40.08492f));
                        RevRace.Add(new Vector3(-2040.899f, -131.7518f, 27.49518f));
                        RevRace.Add(new Vector3(-2023.657f, -146.6982f, 27.98518f));
                        RevRace.Add(new Vector3(-2021.285f, -176.7086f, 27.34095f));
                        RevRace.Add(new Vector3(-2131.501f, -252.1583f, 15.55162f));
                        RevRace.Add(new Vector3(-2172.698f, -348.3796f, 12.82483f));
                        RevRace.Add(new Vector3(-2295.309f, -326.6084f, 13.28643f));
                        RevRace.Add(new Vector3(-2436.38f, -241.3617f, 15.91687f));
                        RevRace.Add(new Vector3(-2582.869f, -161.056f, 20.66327f));
                        RevRace.Add(new Vector3(-2560.825f, -127.8996f, 23.06373f));
                        RevRace.Add(new Vector3(-2530.124f, -100.5304f, 31.51521f));
                        RevRace.Add(new Vector3(-2508.333f, -99.49518f, 37.64386f));
                        RevRace.Add(new Vector3(-2467.406f, -62.97541f, 51.28775f));
                        RevRace.Add(new Vector3(-2452.199f, 4.705995f, 69.38241f));
                        RevRace.Add(new Vector3(-2421.428f, 57.79004f, 89.13654f));
                        RevRace.Add(new Vector3(-2399.918f, 81.81671f, 98.4449f));
                        RevRace.Add(new Vector3(-2404.125f, 175.0274f, 123.3239f));
                        RevRace.Add(new Vector3(-2398.74f, 218.4145f, 140.9025f));
                        RevRace.Add(new Vector3(-2397.932f, 269.951f, 143.9396f));
                        RevRace.Add(new Vector3(-2433.065f, 326.2294f, 145.9435f));
                        RevRace.Add(new Vector3(-2441.734f, 369.3964f, 148.3107f));
                        RevRace.Add(new Vector3(-2432.058f, 411.1215f, 154.1392f));
                        RevRace.Add(new Vector3(-2443.225f, 460.9167f, 165.3897f));
                        RevRace.Add(new Vector3(-2364.854f, 445.1956f, 187.1961f));
                        RevRace.Add(new Vector3(-2335.563f, 392.416f, 175.573f));

                        RaceCaz.Add(new Vector3(-2333.18408f, 373.418335f, 173.049258f)); RaceHeads.Add(114.32859f);
                        RaceCaz.Add(new Vector3(-2325.45483f, 378.496948f, 173.271136f)); RaceHeads.Add(23.6091194f);
                        RaceCaz.Add(new Vector3(-2326.72559f, 377.941162f, 173.27103f)); RaceHeads.Add(23.6091194f);
                        RaceCaz.Add(new Vector3(-2328.43091f, 377.191132f, 174.123444f)); RaceHeads.Add(23.6091194f);
                        RaceCaz.Add(new Vector3(-2329.80444f, 376.594757f, 173.271106f)); RaceHeads.Add(23.6091194f);

                        RaceBuild PreRace = new RaceBuild
                        {
                            AvalableVeh = Racist_Carz(3),
                            FubStop = new Vector3(-2321.406f, 390.7362f, 173.9591f),
                            Local = 3,
                            RaceCars = RaceCaz,
                            RaceHead = RaceHeads,
                            TheRace = ListReverseVec3(RevRace),
                            VehClass = 2
                        };
                        MyMissions.RaceXM.Add(PreRace);
                        iMissionVar_01 = FindRandom(93, 0, MyMissions.RaceXM.Count - 1);
                        if (iMissionVar_01 == MyMissions.RaceXM.Count - 1)
                            bReCycle = true;
                    }
                    else if (iLocationX == 4)
                    {
                        iList_01[0] = 4;

                        RevRace.Add(new Vector3(2191.374f, 2164.052f, 142.1804f));
                        RevRace.Add(new Vector3(2079.089f, 2151.178f, 137.4246f));
                        RevRace.Add(new Vector3(2052.427f, 2003.601f, 132.5833f));
                        RevRace.Add(new Vector3(2052.165f, 1898.071f, 115.3032f));
                        RevRace.Add(new Vector3(2065.159f, 1690.522f, 132.0897f));
                        RevRace.Add(new Vector3(2079.600f, 1632.700f, 139.7131f));
                        RevRace.Add(new Vector3(2200.755f, 1488.153f, 143.8672f));
                        RevRace.Add(new Vector3(2221.752f, 1399.355f, 112.2035f));
                        RevRace.Add(new Vector3(2306.348f, 1325.598f, 94.61472f));
                        RevRace.Add(new Vector3(2393.861f, 1236.786f, 90.658f));
                        RevRace.Add(new Vector3(2382.376f, 1412.095f, 82.45281f));
                        RevRace.Add(new Vector3(2349.293f, 1504.679f, 85.25463f));
                        RevRace.Add(new Vector3(2330.898f, 1606.148f, 85.83896f));
                        RevRace.Add(new Vector3(2343.379f, 1669.146f, 88.64292f));
                        RevRace.Add(new Vector3(2274.784f, 1837.136f, 135.2109f));
                        RevRace.Add(new Vector3(2231.784f, 1897.136f, 135.2109f));

                        RaceCaz.Add(new Vector3(2269.067f, 2047.752f, 127.4055f)); RaceHeads.Add(147.2953f);
                        RaceCaz.Add(new Vector3(2222.172f, 1990.882f, 143.2751f)); RaceHeads.Add(183.8615f);
                        RaceCaz.Add(new Vector3(2231.172f, 1989.882f, 143.2751f)); RaceHeads.Add(183.8615f);
                        RaceCaz.Add(new Vector3(2236.172f, 1989.882f, 143.2751f)); RaceHeads.Add(183.8615f);
                        RaceCaz.Add(new Vector3(2244.172f, 1989.882f, 143.2751f)); RaceHeads.Add(183.8615f);

                        RaceBuild PreRace = new RaceBuild
                        {
                            AvalableVeh = Racist_Carz(4),
                            FubStop = new Vector3(2218.207f, 2064.011f, 131.6865f),
                            Local = 4,
                            RaceCars = RaceCaz,
                            RaceHead = RaceHeads,
                            TheRace = ListReverseVec3(RevRace),
                            VehClass = 3
                        };
                        MyMissions.RaceXM.Add(PreRace);
                        iMissionVar_01 = FindRandom(94, 0, MyMissions.RaceXM.Count - 1);
                    }
                    else if (iLocationX == 5)
                    {
                        iList_01[0] = 5;

                        RevRace.Add(new Vector3(1927.005f, 3940.72f, 31.91909f));
                        RevRace.Add(new Vector3(2059.921f, 3725.649f, 32.54865f));
                        RevRace.Add(new Vector3(2115.197f, 3638.173f, 37.36998f));
                        RevRace.Add(new Vector3(2110.978f, 3573.82f, 41.26443f));
                        RevRace.Add(new Vector3(2233.399f, 3292.721f, 45.86748f));
                        RevRace.Add(new Vector3(2240.048f, 3247.199f, 47.50423f));
                        RevRace.Add(new Vector3(2156.711f, 3255.74f, 45.4173f));
                        RevRace.Add(new Vector3(2031.897f, 3303.491f, 45.26267f));
                        RevRace.Add(new Vector3(1976.348f, 3289.763f, 45.02364f));
                        RevRace.Add(new Vector3(1903.159f, 3316.971f, 43.47427f));
                        RevRace.Add(new Vector3(1818.639f, 3294.215f, 42.58525f));
                        RevRace.Add(new Vector3(1715.543f, 3477.923f, 37.33646f));
                        RevRace.Add(new Vector3(1617.756f, 3648.473f, 34.31989f));
                        RevRace.Add(new Vector3(1550.795f, 3758.07f, 34.00111f));
                        RevRace.Add(new Vector3(1664.479f, 3859.182f, 34.37016f));
                        RevRace.Add(new Vector3(1739.822f, 3918.892f, 34.42171f));
                        RevRace.Add(new Vector3(1808.715f, 3941.348f, 33.18561f));

                        RaceCaz.Add(new Vector3(1870.861f, 3917.92f, 31.94371f)); RaceHeads.Add(14.08257f);
                        RaceCaz.Add(new Vector3(1844.07f, 3950.798f, 32.01545f)); RaceHeads.Add(97.06139f);
                        RaceCaz.Add(new Vector3(1843.786f, 3946.197f, 32.54472f)); RaceHeads.Add(97.06139f);
                        RaceCaz.Add(new Vector3(1845.178f, 3947.744f, 32.05015f)); RaceHeads.Add(97.06139f);
                        RaceCaz.Add(new Vector3(1844.858f, 3944.031f, 32.01577f)); RaceHeads.Add(97.06139f);

                        RaceBuild PreRace = new RaceBuild
                        {
                            AvalableVeh = Racist_Carz(5),
                            FubStop = new Vector3(1861.054f, 3910.356f, 32.52079f),
                            Local = 5,
                            RaceCars = RaceCaz,
                            RaceHead = RaceHeads,
                            TheRace = ListReverseVec3(RevRace),
                            VehClass = 1
                        };
                        MyMissions.RaceXM.Add(PreRace);
                        iMissionVar_01 = FindRandom(95, 0, MyMissions.RaceXM.Count - 1);
                    }
                    else
                    {
                        iList_01[0] = 6;

                        RevRace.Add(new Vector3(24.82016f, 7334.861f, -0.00f));
                        RevRace.Add(new Vector3(3258.503f, 6502.657f, -0.00f));
                        RevRace.Add(new Vector3(4023.263f, 4619.553f, -0.00f));
                        RevRace.Add(new Vector3(4070.122f, 3664.816f, -0.00f));
                        RevRace.Add(new Vector3(2992.67f, 1262.628f, -0.00f));
                        RevRace.Add(new Vector3(3138.701f, -263.2599f, -0.00f));
                        RevRace.Add(new Vector3(2689.806f, -2212.811f, -0.00f));
                        RevRace.Add(new Vector3(1356.76f, -3377.767f, -0.00f));
                        RevRace.Add(new Vector3(-1561.713f, -3523.635f, -0.00f));
                        RevRace.Add(new Vector3(-3370.541f, -2241.433f, -0.00f));
                        RevRace.Add(new Vector3(-3469.20f, 112.624f, -0.00f));
                        RevRace.Add(new Vector3(-3479.537f, 1116.318f, -0.00f));
                        RevRace.Add(new Vector3(-3250.67f, 3365.701f, -0.00f));
                        RevRace.Add(new Vector3(-1855.163f, 5297.628f, -0.00f));

                        RaceCaz.Add(new Vector3(-1613.572f, 5241.811f, 1.771683f)); RaceHeads.Add(30.84494f);
                        RaceCaz.Add(new Vector3(-1810.738f, 5341.485f, 1.229648f)); RaceHeads.Add(130.9153f);
                        RaceCaz.Add(new Vector3(-1802.738f, 5332.485f, 1.229648f)); RaceHeads.Add(130.9153f);
                        RaceCaz.Add(new Vector3(-1805.738f, 5337.485f, 1.229648f)); RaceHeads.Add(130.9153f);
                        RaceCaz.Add(new Vector3(-1798.738f, 5327.485f, 1.229648f)); RaceHeads.Add(130.9153f);

                        RaceBuild PreRace = new RaceBuild
                        {
                            AvalableVeh = Racist_Carz(6),
                            FubStop = new Vector3(-1602.904f, 5241.12f, 3.46784f),
                            Local = 6,
                            RaceCars = RaceCaz,
                            RaceHead = RaceHeads,
                            TheRace = ListReverseVec3(RevRace),
                            VehClass = 4
                        };
                        MyMissions.RaceXM.Add(PreRace);
                        iMissionVar_01 = FindRandom(96, 0, MyMissions.RaceXM.Count - 1);
                        if (iMissionVar_01 == MyMissions.RaceXM.Count - 1)
                            bYachting = true;
                    }
                }
                else
                    iMissionVar_01 = SelectBuilderMish(5);

                if (bYachting)
                    Racist06_Yachtclub();
                else if (bCutCorn)
                    Racist01_CuttinCoroners();
                else if (bReCycle)
                    Racist03_HillRun();

                if (MyMissions.RaceXM[iMissionVar_01].VehClass == 3)
                {
                    BeOnOff[0] = true;
                    iList_01[0] = 4;
                    iList_01[7] = 43;
                }
                else if (MyMissions.RaceXM[iMissionVar_01].VehClass == 2)
                {
                    iList_01[0] = 3;
                    iList_01[7] = 42;
                }
                else
                {
                    iList_01[0] = 1;
                    if (MyMissions.RaceXM[iMissionVar_01].VehClass == 4)
                        iList_01[7] = 41;
                }
            }

            if (iList_01[0] == 2)
            {
                fCorSize = 5.00f;
                fAiCoronaListSize = 10.00f;
                fCoronaDirHt = 4.75f;
                fCoronaHight = 16.50f;
                iRacingStyle = 4194304;
            }
            else if (iList_01[0] == 3)
            {
                fCorSize = 5.00f;
                fAiCoronaListSize = 4.50f;
                fCoronaDirHt = 4.75f;
                fCoronaHight = 16.50f;
                iRacingStyle = 16777216;
            }
            else if (iList_01[0] == 4)
            {
                bFloater = true;
                fCorSize = 45.00f;
                fCoronaDirHt = 0.00f;
                fAiCoronaListSize = 50.00f;
                fCoronaHight = 0.00f;
                iRacingStyle = 786469;
            }
            else if (iList_01[0] == 5)
            {
                fCorSize = 20.00f;
                fAiCoronaListSize = 15.00f;
                fCoronaDirHt = 1.00f;
                fCoronaHight = 12.00f;
                iRacingStyle = 262144;
            }
            else if (iList_01[0] == 6)
            {
                bFloater = true;
                fCorSize = 45.00f;
                fAiCoronaListSize = 35.00f;
                fCoronaDirHt = 0.00f;
                fCoronaHight = -5.50f;
                iRacingStyle = 786469;

                iCurrentLap = 1;
            }
            else
            {
                fCorSize = 10.00f;
                fAiCoronaListSize = 7.50f;
                fCoronaDirHt = 1.90f;
                fCoronaHight = 12.00f;
                iRacingStyle = 16777216;  //828;//
            }
            
            VTBTimerPool.Add(ttTextBar_01);
            VTBTimerPool.Add(ttTextBar_02);
            VTBTimerPool.Add(ttTextBar_03);
            ttTextBar_01.Label = "" + MyLang.Othertext[12] + "";
            ttTextBar_02.Label = "" + MyLang.Othertext[14] + "";
            ttTextBar_03.Label = "" + MyLang.Othertext[15] + "";

            if (!bSoloRace)
            {
                VTBTimerPool.Add(ttTextBar_04);
                ttTextBar_04.Label = "" + MyLang.Othertext[11] + "";
                ttTextBar_02.Text = "00:00:01";
            }
            else
                ttTextBar_02.Text = "--:--:--";

            iTotalLap = iCurrentLap;
            Function.Call(Hash._0xC54A08C85AE4D410, 1.50f);

            vFuMiss = MyMissions.RaceXM[iMissionVar_01].FubStop;

            AddTarget(MyMissions.RaceXM[iMissionVar_01].RaceCars[0], false, true, 1.00f, false, 38, MyLang.Maptext[27]);

            if (!bTestRun)
                BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[10], "", 5000);
            bOnTheJob = true;
        }
        public class RaceBuild
        {
            public int Local { get; set; }
            public Vector3 FubStop { get; set; }
            public List<Vector3> RaceCars { get; set; }
            public List<float> RaceHead { get; set; }
            public List<Vector3> TheRace { get; set; }
            public int VehClass { get; set; }
            public List<string> AvalableVeh { get; set; }

            public RaceBuild()
            {
                RaceCars = new List<Vector3>();
                RaceHead = new List<float>();
                TheRace = new List<Vector3>();
                AvalableVeh = new List<string>();
            }
        }
        private void BBBomb()
        {
            LogThis("BBBomb");

            iTime_01.Clear();
            ttTextBar_02.Label = "" + MyLang.Othertext[16] + "";
            VTBTimerPool.Add(ttTextBar_02);
            VectorList_01.Clear();
            List<Vector3> PoliceS = new List<Vector3>();
            List<float> PoliceDis = new List<float>();

            PoliceS.Add(new Vector3(432.0016f, -982.2522f, 30.71071f));
            PoliceS.Add(new Vector3(826.6686f, -1290.105f, 28.24086f));
            PoliceS.Add(new Vector3(360.6976f, -1583.997f, 29.29205f));
            PoliceS.Add(new Vector3(639.3252f, 1.446257f, 82.78688f));
            PoliceS.Add(new Vector3(-560.6122f, -133.5047f, 38.08427f));
            PoliceS.Add(new Vector3(-1631.851f, -1014.673f, 13.11931f));
            PoliceS.Add(new Vector3(-1093.045f, -809.5769f, 19.27813f));
            PoliceS.Add(new Vector3(-1313.826f, -1527.571f, 4.41676f));
            PoliceS.Add(new Vector3(1855.559f, 3682.646f, 34.26752f));
            PoliceS.Add(new Vector3(-442.1248f, 6017.591f, 31.67277f));

            int iBuild = 0;

            List<BombBuild> BbLocal = new List<BombBuild>();

            if (bTestRun)
            {
                bJobLoaded = true;
                iJobType = 12;
            }
            else
            {
                BombBuild ThisBomb = new BombBuild();
                List<Vector3> BobPos = new List<Vector3>();
                List<float> BobEdd = new List<float>();

                if (iLocationX == 1)
                {
                    ThisBomb.Local = iLocationX;
                    ThisBomb.Fubstop = new Vector3(802.9281f, -3113.601f, 5.394254f);
                    BobPos.Add(new Vector3(809.645996f, -3146.7771f, 5.42136478f)); BobEdd.Add(49.5572357f);
                    BobPos.Add(new Vector3(759.653503f, -3198.10474f, 5.31337023f)); BobEdd.Add(-179.695557f);
                    BobPos.Add(new Vector3(794.750122f, -3244.75098f, 14.1211061f)); BobEdd.Add(178.63858f);
                    BobPos.Add(new Vector3(836.008118f, -3198.64917f, 13.737318f)); BobEdd.Add(0.178615138f);
                    BobPos.Add(new Vector3(844.122559f, -3074.92749f, 23.4406586f)); BobEdd.Add(179.319962f);
                    int iPlop = RandInt(0, BobPos.Count - 1);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(978.3376f, -2964.917f, 5.39352f);
                    BobPos.Add(new Vector3(1011.35748f, -2866.52734f, 38.3971634f)); BobEdd.Add(1.05535889f);
                    BobPos.Add(new Vector3(979.365723f, -2878.87183f, 42.5198822f)); BobEdd.Add(-88.67556f);
                    BobPos.Add(new Vector3(822.007996f, -2883.1499f, 12.9319744f)); BobEdd.Add(-90.9461594f);
                    BobPos.Add(new Vector3(942.405945f, -2866.43408f, 15.6671467f)); BobEdd.Add(179.7052f);
                    BobPos.Add(new Vector3(1077.89526f, -2866.35059f, 10.5003233f)); BobEdd.Add(89.8087082f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(-15.48617f, -2629.367f, 5.49523f);
                    BobPos.Add(new Vector3(-36.4727859f, -2686.59888f, 5.23544931f)); BobEdd.Add(-91.7282639f);
                    BobPos.Add(new Vector3(24.4833164f, -2656.25293f, 8.99747467f)); BobEdd.Add(-0.328724951f);
                    BobPos.Add(new Vector3(16.0186195f, -2734.82397f, 5.23998642f)); BobEdd.Add(0.118843608f);
                    BobPos.Add(new Vector3(-81.6152802f, -2726.91504f, 7.97542667f)); BobEdd.Add(-1.00918067f);
                    BobPos.Add(new Vector3(-77.0177307f, -2664.97778f, 5.23544931f)); BobEdd.Add(-0.344806939f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(-1040.477f, -2718.445f, 13.19968f);
                    BobPos.Add(new Vector3(-1070.98828f, -2734.62402f, 0.0501132458f)); BobEdd.Add(-131.87027f);
                    BobPos.Add(new Vector3(-1049.2926f, -2737.86719f, 19.9042778f)); BobEdd.Add(-27.8410625f);
                    BobPos.Add(new Vector3(-1061.24048f, -2721.07568f, 12.9918613f)); BobEdd.Add(-120.162682f);
                    BobPos.Add(new Vector3(-984.430908f, -2714.77905f, 13.2442551f)); BobEdd.Add(-17.0465107f);
                    BobPos.Add(new Vector3(-1014.86975f, -2748.21802f, 19.404501f)); BobEdd.Add(64.6025238f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(-158.1563f, -2003.839f, 22.27131f);
                    BobPos.Add(new Vector3(-171.764771f, -1998.38391f, 27.1467056f)); BobEdd.Add(172.2258f);
                    BobPos.Add(new Vector3(-129.011536f, -1992.28625f, 22.0405521f)); BobEdd.Add(-90.1620636f);
                    BobPos.Add(new Vector3(-73.1962357f, -2003.56262f, 17.2521744f)); BobEdd.Add(173.185059f);
                    BobPos.Add(new Vector3(-178.384598f, -2137.14282f, 18.063694f)); BobEdd.Add(18.6282787f);
                    BobPos.Add(new Vector3(-217.650757f, -2016.13342f, 27.8908062f)); BobEdd.Add(71.0807266f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(1047.66f, -2196.231f, 30.12133f);
                    BobPos.Add(new Vector3(990.069763f, -2204.72949f, 40.3480339f)); BobEdd.Add(-5.66307878f);
                    BobPos.Add(new Vector3(992.549805f, -2195.22852f, 30.8230572f)); BobEdd.Add(-93.8779297f);
                    BobPos.Add(new Vector3(942.604919f, -2270.18115f, 39.0710678f)); BobEdd.Add(174.692917f);
                    BobPos.Add(new Vector3(977.92572f, -2175.93481f, 38.8139648f)); BobEdd.Add(175.04985f);
                    BobPos.Add(new Vector3(1002.24054f, -2241.7356f, 33.9945335f)); BobEdd.Add(85.2047882f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(197.5926f, -2188.438f, 6.60955f);
                    BobPos.Add(new Vector3(202.099182f, -2229.37793f, 5.18944311f)); BobEdd.Add(-1.77546966f);
                    BobPos.Add(new Vector3(165.293518f, -2212.7854f, 12.6219416f)); BobEdd.Add(90.6059341f);
                    BobPos.Add(new Vector3(126.135963f, -2242.2019f, 5.32065487f)); BobEdd.Add(0.0544548295f);
                    BobPos.Add(new Vector3(123.235268f, -2204.79346f, 6.42151451f)); BobEdd.Add(179.641144f);
                    BobPos.Add(new Vector3(102.064209f, -2175.32275f, 20.33498f)); BobEdd.Add(-89.3424683f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(424.2131f, -1466.043f, 28.68664f);
                    BobPos.Add(new Vector3(457.746155f, -1472.93665f, 32.3358879f)); BobEdd.Add(-163.168152f);
                    BobPos.Add(new Vector3(426.96109f, -1505.31909f, 40.1624489f)); BobEdd.Add(-59.497551f);
                    BobPos.Add(new Vector3(490.714355f, -1523.04321f, 28.5266209f)); BobEdd.Add(-131.216797f);
                    BobPos.Add(new Vector3(460.380432f, -1455.98413f, 32.7180061f)); BobEdd.Add(-74.4183731f);
                    BobPos.Add(new Vector3(480.143341f, -1553.00354f, 32.0275269f)); BobEdd.Add(-40.8613129f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(-91.74182f, -1240.411f, 28.44001f);
                    BobPos.Add(new Vector3(-61.2889137f, -1218.56775f, 27.9370804f)); BobEdd.Add(91.5783691f);
                    BobPos.Add(new Vector3(-7.24806499f, -1215.04065f, 29.7718487f)); BobEdd.Add(-0.940741658f);
                    BobPos.Add(new Vector3(-22.4572964f, -1283.50977f, 49.6661911f)); BobEdd.Add(-15.0027161f);
                    BobPos.Add(new Vector3(-63.3148232f, -1327.68982f, 32.4317131f)); BobEdd.Add(120.057899f);
                    BobPos.Add(new Vector3(-126.32859f, -1259.71521f, 49.8670044f)); BobEdd.Add(-88.4529495f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(-411.0846f, -1715.506f, 18.74651f);
                    BobPos.Add(new Vector3(-440.010406f, -1677.32324f, 18.5263081f)); BobEdd.Add(159.834549f);
                    BobPos.Add(new Vector3(-442.548737f, -1716.09949f, 18.4738827f)); BobEdd.Add(81.7372894f);
                    BobPos.Add(new Vector3(-463.065369f, -1735.82104f, 19.0399647f)); BobEdd.Add(-76.4177399f);
                    BobPos.Add(new Vector3(-513.388916f, -1676.56262f, 24.3209553f)); BobEdd.Add(42.760952f);
                    BobPos.Add(new Vector3(-520.416992f, -1731.10938f, 21.1413231f)); BobEdd.Add(55.2201462f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                }
                else if (iLocationX == 2)
                {
                    ThisBomb.Local = iLocationX;
                    ThisBomb.Fubstop = new Vector3(-1196.651f, -1533.475f, 3.918629f);
                    BobPos.Add(new Vector3(-1175.37292f, -1547.41772f, 16.5733166f)); BobEdd.Add(124.615746f);
                    BobPos.Add(new Vector3(-1156.82007f, -1574.55994f, 7.58400249f)); BobEdd.Add(-145.622772f);
                    BobPos.Add(new Vector3(-1195.41077f, -1577.52576f, 3.84261274f)); BobEdd.Add(-55.0179634f);
                    BobPos.Add(new Vector3(-1205.4834f, -1621.29712f, 3.60915422f)); BobEdd.Add(35.5921669f);
                    BobPos.Add(new Vector3(-1245.9989f, -1531.13879f, 3.53143215f)); BobEdd.Add(-103.252808f);
                    int iPlop = RandInt(0, BobPos.Count - 1);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(-1599.262f, -1039.933f, 12.51689f);
                    BobPos.Add(new Vector3(-1638.32666f, -1064.24597f, 12.3875465f)); BobEdd.Add(-129.622437f);
                    BobPos.Add(new Vector3(-1631.20886f, -1038.297f, 12.3885536f)); BobEdd.Add(-40.8498421f);
                    BobPos.Add(new Vector3(-1619.05652f, -1035.41553f, 12.3881044f)); BobEdd.Add(140.250626f);
                    BobPos.Add(new Vector3(-1615.90149f, -1089.50293f, 30.6011219f)); BobEdd.Add(-39.4154778f);
                    BobPos.Add(new Vector3(-1677.17944f, -1095.5625f, 12.3874826f)); BobEdd.Add(-42.9677734f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(230.9913f, 43.84718f, 83.39185f);
                    BobPos.Add(new Vector3(213.35083f, 38.6580696f, 83.0438232f)); BobEdd.Add(159.678879f);
                    BobPos.Add(new Vector3(207.971436f, 2.82237387f, 78.4323883f)); BobEdd.Add(-20.0443115f);
                    BobPos.Add(new Vector3(199.070633f, -34.6884499f, 74.2225494f)); BobEdd.Add(160.498917f);
                    BobPos.Add(new Vector3(271.420715f, 43.524807f, 99.6538162f)); BobEdd.Add(69.0033646f);
                    BobPos.Add(new Vector3(227.189316f, -9.40581417f, 77.1833344f)); BobEdd.Add(-110.679077f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(-75.34953f, 298.0136f, 105.7971f);
                    BobPos.Add(new Vector3(-77.657196f, 369.666321f, 111.698509f)); BobEdd.Add(-116.77227f);
                    BobPos.Add(new Vector3(-2.17734241f, 290.335663f, 110.162666f)); BobEdd.Add(155.254547f);
                    BobPos.Add(new Vector3(11.1071682f, 351.266602f, 111.33036f)); BobEdd.Add(-115.512306f);
                    BobPos.Add(new Vector3(-40.6772881f, 347.204834f, 113.142052f)); BobEdd.Add(65.0234146f);
                    BobPos.Add(new Vector3(-92.9653168f, 357.271667f, 111.986633f)); BobEdd.Add(-23.6294918f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(0.3715829f, -394.5313f, 38.91852f);
                    BobPos.Add(new Vector3(19.4681225f, -415.481598f, 54.5251846f)); BobEdd.Add(-19.2196465f);
                    BobPos.Add(new Vector3(47.769577f, -379.894592f, 73.1822586f)); BobEdd.Add(160.543472f);
                    BobPos.Add(new Vector3(80.3583298f, -338.362122f, 66.4373856f)); BobEdd.Add(-110.334671f);
                    BobPos.Add(new Vector3(51.0579681f, -404.374725f, 99.0550995f)); BobEdd.Add(177.036438f);
                    BobPos.Add(new Vector3(69.2523041f, -406.944092f, 36.7874985f)); BobEdd.Add(68.8189163f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(-111.1355f, -937.3212f, 28.73638f);
                    BobPos.Add(new Vector3(-171.934494f, -1003.9325f, 295.441681f)); BobEdd.Add(117.471489f);
                    BobPos.Add(new Vector3(-130.317062f, -1106.66357f, 35.3745613f)); BobEdd.Add(-160.492996f);
                    BobPos.Add(new Vector3(-169.545639f, -1010.7641f, 20.5120735f)); BobEdd.Add(150.719666f);
                    BobPos.Add(new Vector3(-139.024612f, -1006.71912f, 38.499218f)); BobEdd.Add(-110.756447f);
                    BobPos.Add(new Vector3(-153.401138f, -1098.71899f, 12.3522339f)); BobEdd.Add(161.002625f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(-649.1975f, -891.6447f, 24.19453f);
                    BobPos.Add(new Vector3(-672.612061f, -908.727905f, 37.8687248f)); BobEdd.Add(-91.6921463f);
                    BobPos.Add(new Vector3(-674.617737f, -881.09021f, 23.7142372f)); BobEdd.Add(-88.9547501f);
                    BobPos.Add(new Vector3(-691.618225f, -916.815308f, 22.907135f)); BobEdd.Add(179.975388f);
                    BobPos.Add(new Vector3(-573.192078f, -903.041931f, 24.9249763f)); BobEdd.Add(177.645691f);
                    BobPos.Add(new Vector3(-698.135986f, -933.198425f, 18.2491283f)); BobEdd.Add(-90.4771576f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(-1324.5f, -29.00793f, 49.34758f);
                    BobPos.Add(new Vector3(-1362.3877f, 88.9128799f, 59.8693504f)); BobEdd.Add(-175.098099f);
                    BobPos.Add(new Vector3(-1357.61316f, 117.013184f, 55.5052834f)); BobEdd.Add(-175.268814f);
                    BobPos.Add(new Vector3(-1346.82092f, 70.8044434f, 54.4808617f)); BobEdd.Add(3.44622636f);
                    BobPos.Add(new Vector3(-1273.48499f, 33.3905106f, 48.6141777f)); BobEdd.Add(32.2189789f);
                    BobPos.Add(new Vector3(-1315.87012f, 123.890732f, 56.4197693f)); BobEdd.Add(127.454277f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(-579.8363f, -71.4973f, 41.48576f);
                    BobPos.Add(new Vector3(-568.578491f, -88.9845428f, 41.5704536f)); BobEdd.Add(-78.783287f);
                    BobPos.Add(new Vector3(-610.379028f, -106.800728f, 39.2434387f)); BobEdd.Add(7.33203363f);
                    BobPos.Add(new Vector3(-630.423523f, -136.875412f, 51.2252388f)); BobEdd.Add(120.083588f);
                    BobPos.Add(new Vector3(-594.150452f, -140.687668f, 46.5919914f)); BobEdd.Add(119.812538f);
                    BobPos.Add(new Vector3(-546.102783f, -202.427383f, 51.4382782f)); BobEdd.Add(29.4465294f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(148.7211f, -918.1437f, 29.51619f);
                    BobPos.Add(new Vector3(184.037308f, -903.02887f, 30.9313583f)); BobEdd.Add(-125.325417f);
                    BobPos.Add(new Vector3(155.433258f, -958.396667f, 29.3011284f)); BobEdd.Add(-109.844543f);
                    BobPos.Add(new Vector3(211.827744f, -934.979736f, 23.5111675f)); BobEdd.Add(54.9836044f);
                    BobPos.Add(new Vector3(203.416916f, -882.158997f, 30.7335625f)); BobEdd.Add(-125.298744f);
                    BobPos.Add(new Vector3(201.570679f, -954.157898f, 30.2224751f)); BobEdd.Add(-56.1505318f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                }
                else if (iLocationX == 3)
                {
                    ThisBomb.Local = iLocationX;
                    ThisBomb.Fubstop = new Vector3(-2295.458f, 378.6476f, 173.9588f);
                    BobPos.Add(new Vector3(-2306.03687f, 219.781464f, 166.836929f)); BobEdd.Add(23.2707767f);
                    BobPos.Add(new Vector3(-2268.83008f, 218.431885f, 183.846649f)); BobEdd.Add(-0.993731558f);
                    BobPos.Add(new Vector3(-2227.11108f, 305.985535f, 183.838531f)); BobEdd.Add(114.073357f);
                    BobPos.Add(new Vector3(-2271.21973f, 228.493484f, 193.846603f)); BobEdd.Add(88.5154114f);
                    BobPos.Add(new Vector3(-2182.44238f, 283.988159f, 169.013779f)); BobEdd.Add(-65.4517212f);
                    int iPlop = RandInt(0, BobPos.Count - 1);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(-3021.246f, 107.1351f, 11.13024f);
                    BobPos.Add(new Vector3(-3026.08936f, 70.0190506f, 12.1424503f)); BobEdd.Add(-121.525932f);
                    BobPos.Add(new Vector3(-3023.21338f, 38.083416f, 9.35300541f)); BobEdd.Add(148.861786f);
                    BobPos.Add(new Vector3(-2951.51367f, 45.8909378f, 15.3285236f)); BobEdd.Add(-27.0971222f);
                    BobPos.Add(new Vector3(-2876.16455f, 21.092083f, 10.8432178f)); BobEdd.Add(-105.010078f);
                    BobPos.Add(new Vector3(-2947.42505f, 58.7796516f, 10.8437195f)); BobEdd.Add(-25.1157227f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(-2977.945f, 443.8141f, 14.58083f);
                    BobPos.Add(new Vector3(-2948.21191f, 442.429077f, 14.5027485f)); BobEdd.Add(-2.68304944f);
                    BobPos.Add(new Vector3(-2999.49194f, 417.899292f, 23.8814812f)); BobEdd.Add(-94.9783478f);
                    BobPos.Add(new Vector3(-2954.35376f, 472.821899f, 14.7039127f)); BobEdd.Add(-2.81995177f);
                    BobPos.Add(new Vector3(-2964.40649f, 454.892151f, 14.5514097f)); BobEdd.Add(-90.9236679f);
                    BobPos.Add(new Vector3(-2955.82617f, 386.906616f, 14.2559147f)); BobEdd.Add(87.2603912f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(-3133.762f, 1064.762f, 19.83897f);
                    BobPos.Add(new Vector3(-3157.29102f, 1043.32605f, 20.0635357f)); BobEdd.Add(-25.0883083f);
                    BobPos.Add(new Vector3(-3178.81714f, 1075.49585f, 24.7243404f)); BobEdd.Add(68.4889221f);
                    BobPos.Add(new Vector3(-3162.99146f, 1115.3053f, 20.0878944f)); BobEdd.Add(-25.8738689f);
                    BobPos.Add(new Vector3(-3143.19922f, 1137.43311f, 20.715929f)); BobEdd.Add(63.0035591f);
                    BobPos.Add(new Vector3(-3182.69507f, 1110.53735f, 20.3020573f)); BobEdd.Add(63.9797325f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(-3233.352f, 980.6213f, 12.2523f);
                    BobPos.Add(new Vector3(-3247.62378f, 1010.95734f, 11.7046356f)); BobEdd.Add(-94.7868729f);
                    BobPos.Add(new Vector3(-3262.13477f, 974.175415f, 7.58738518f)); BobEdd.Add(-91.2626038f);
                    BobPos.Add(new Vector3(-3415.42114f, 957.682983f, 11.1512156f)); BobEdd.Add(1.38209331f);
                    BobPos.Add(new Vector3(-3425.26465f, 984.458008f, 9.30355549f)); BobEdd.Add(-89.6551514f);
                    BobPos.Add(new Vector3(-3407.46118f, 969.698853f, 7.53174496f)); BobEdd.Add(-91.2883835f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(-1864.956f, 2036.339f, 137.4786f);
                    BobPos.Add(new Vector3(-1896.81689f, 2079.35254f, 140.23288f)); BobEdd.Add(44.4430122f);
                    BobPos.Add(new Vector3(-1933.86938f, 2061.06616f, 140.074417f)); BobEdd.Add(169.107574f);
                    BobPos.Add(new Vector3(-1851.02893f, 2074.62524f, 139.060486f)); BobEdd.Add(115.648117f);
                    BobPos.Add(new Vector3(-1916.51245f, 2087.33252f, 136.176758f)); BobEdd.Add(-120.526894f);
                    BobPos.Add(new Vector3(-1927.07349f, 2031.34033f, 139.974487f)); BobEdd.Add(168.410797f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(-1794.419f, 481.9546f, 133.2008f);
                    BobPos.Add(new Vector3(-1843.30457f, 462.796997f, 126.109871f)); BobEdd.Add(-22.2250099f);
                    BobPos.Add(new Vector3(-1847.16724f, 438.603333f, 125.34407f)); BobEdd.Add(70.7081528f);
                    BobPos.Add(new Vector3(-1756.40283f, 427.365845f, 126.920204f)); BobEdd.Add(-106.927696f);
                    BobPos.Add(new Vector3(-1785.23706f, 415.23111f, 112.888443f)); BobEdd.Add(90.6045685f);
                    BobPos.Add(new Vector3(-1799.50708f, 408.22699f, 127.54287f)); BobEdd.Add(0.0596792027f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(-1469.613f, 886.8474f, 182.3928f);
                    BobPos.Add(new Vector3(-1499.65405f, 801.135681f, 181.066208f)); BobEdd.Add(-60.5556145f);
                    BobPos.Add(new Vector3(-1614.75208f, 752.878174f, 188.478317f)); BobEdd.Add(25.1190033f);
                    BobPos.Add(new Vector3(-1605.3783f, 833.093262f, 185.229095f)); BobEdd.Add(57.3495102f);
                    BobPos.Add(new Vector3(-1500.92432f, 858.718872f, 180.829987f)); BobEdd.Add(-65.5763245f);
                    BobPos.Add(new Vector3(-1526.07764f, 832.607117f, 181.608551f)); BobEdd.Add(-37.8450432f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(-410.68f, 1178.289f, 325.1302f);
                    BobPos.Add(new Vector3(-390.557617f, 1135.7179f, 321.864166f)); BobEdd.Add(74.7756119f);
                    BobPos.Add(new Vector3(-423.333069f, 1073.1488f, 326.926575f)); BobEdd.Add(-5.92038918f);
                    BobPos.Add(new Vector3(-461.054657f, 1080.46252f, 323.087341f)); BobEdd.Add(-106.392441f);
                    BobPos.Add(new Vector3(-480.734589f, 1134.32983f, 319.331543f)); BobEdd.Add(75.8536758f);
                    BobPos.Add(new Vector3(-413.261536f, 1054.94043f, 321.156494f)); BobEdd.Add(-106.093178f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(-1665.253f, 129.2197f, 62.56456f);
                    BobPos.Add(new Vector3(-1707.02429f, 187.314087f, 63.1602402f)); BobEdd.Add(125.172707f);
                    BobPos.Add(new Vector3(-1748.44714f, 236.415894f, 63.6840439f)); BobEdd.Add(123.72879f);
                    BobPos.Add(new Vector3(-1667.6698f, 192.864044f, 60.9925156f)); BobEdd.Add(-65.9685059f);
                    BobPos.Add(new Vector3(-1639.5083f, 275.937683f, 58.7905159f)); BobEdd.Add(113.650391f);
                    BobPos.Add(new Vector3(-1724.89661f, 234.823654f, 57.7119102f)); BobEdd.Add(-154.546265f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                }
                else if (iLocationX == 4)
                {
                    ThisBomb.Local = iLocationX;
                    ThisBomb.Fubstop = new Vector3(1172.171f, -637.871f, 62.09513f);
                    BobPos.Add(new Vector3(1113.38f, -647.378784f, 56.0562897f)); BobEdd.Add(-78.4457397f);
                    BobPos.Add(new Vector3(1135.96033f, -666.972351f, 56.3178024f)); BobEdd.Add(-85.3810654f);
                    BobPos.Add(new Vector3(1073.27637f, -679.915161f, 56.7843018f)); BobEdd.Add(26.534214f);
                    BobPos.Add(new Vector3(1118.66357f, -656.284363f, 56.0533752f)); BobEdd.Add(-76.7573166f);
                    BobPos.Add(new Vector3(1070.69873f, -712.518555f, 57.7183113f)); BobEdd.Add(-48.9688797f);
                    int iPlop = RandInt(0, BobPos.Count - 1);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(958.5806f, -148.603f, 73.9059f);
                    BobPos.Add(new Vector3(994.848572f, -129.160446f, 85.6969376f)); BobEdd.Add(-29.5178738f);
                    BobPos.Add(new Vector3(999.608459f, -98.4904785f, 73.4324875f)); BobEdd.Add(-35.5934372f);
                    BobPos.Add(new Vector3(998.469238f, -133.460144f, 73.3835754f)); BobEdd.Add(-32.1555023f);
                    BobPos.Add(new Vector3(966.49884f, -102.447006f, 80.1008301f)); BobEdd.Add(135.147354f);
                    BobPos.Add(new Vector3(944.348328f, -126.590645f, 73.6767654f)); BobEdd.Add(-142.633774f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(1131.584f, 48.13541f, 80.24796f);
                    BobPos.Add(new Vector3(1082.08276f, 73.3747101f, 80.1255875f)); BobEdd.Add(-33.1104012f);
                    BobPos.Add(new Vector3(1029.03943f, 126.204536f, 87.2256851f)); BobEdd.Add(67.4846725f);
                    BobPos.Add(new Vector3(1051.75317f, 183.176697f, 84.2260742f)); BobEdd.Add(-123.073242f);
                    BobPos.Add(new Vector3(1138.82678f, 95.5992432f, 80.1268158f)); BobEdd.Add(57.5041122f);
                    BobPos.Add(new Vector3(1066.30237f, 164.464417f, 80.2258606f)); BobEdd.Add(148.162048f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(1191.465f, -411.8354f, 67.14699f);
                    BobPos.Add(new Vector3(1172.94421f, -388.903412f, 70.8247833f)); BobEdd.Add(-16.5683041f);
                    BobPos.Add(new Vector3(1147.29431f, -418.937134f, 71.1614609f)); BobEdd.Add(-105.319504f);
                    BobPos.Add(new Vector3(1146.03455f, -406.520172f, 66.5182495f)); BobEdd.Add(74.4052658f);
                    BobPos.Add(new Vector3(1180.08496f, -407.331512f, 66.9784622f)); BobEdd.Add(-107.452271f);
                    BobPos.Add(new Vector3(1158.41931f, -442.632263f, 73.8063354f)); BobEdd.Add(-103.666977f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(875.2722f, -557.2955f, 56.69806f);
                    BobPos.Add(new Vector3(915.505127f, -554.892395f, 57.1998138f)); BobEdd.Add(117.551689f);
                    BobPos.Add(new Vector3(896.000244f, -533.375305f, 57.3694687f)); BobEdd.Add(115.345772f);
                    BobPos.Add(new Vector3(864.222656f, -610.057373f, 57.5900345f)); BobEdd.Add(-131.42012f);
                    BobPos.Add(new Vector3(846.061157f, -503.736542f, 54.0774498f)); BobEdd.Add(137.622971f);
                    BobPos.Add(new Vector3(830.575867f, -561.436157f, 56.9481316f)); BobEdd.Add(-169.737198f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(1202.495f, -1077.011f, 40.25689f);
                    BobPos.Add(new Vector3(1241.36121f, -1091.36121f, 44.7610016f)); BobEdd.Add(32.837719f);
                    BobPos.Add(new Vector3(1227.50562f, -1081.46216f, 30.3923607f)); BobEdd.Add(-55.7637291f);
                    BobPos.Add(new Vector3(1232.20044f, -1102.46375f, 34.6719437f)); BobEdd.Add(-56.5835724f);
                    BobPos.Add(new Vector3(1253.17456f, -1061.66406f, 38.0805359f)); BobEdd.Add(124.305061f);
                    BobPos.Add(new Vector3(1243.04724f, -1104.65125f, 30.3923607f)); BobEdd.Add(-55.2475243f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(2523.324f, -381.7299f, 92.48529f);
                    BobPos.Add(new Vector3(2476.50732f, -378.263123f, 94.3548508f)); BobEdd.Add(-1.13646483f);
                    BobPos.Add(new Vector3(2506.64502f, -435.494232f, 92.3568497f)); BobEdd.Add(-91.3385239f);
                    BobPos.Add(new Vector3(2505.99829f, -430.043121f, 114.928169f)); BobEdd.Add(46.8818436f);
                    BobPos.Add(new Vector3(2496.17139f, -347.269012f, 113.321602f)); BobEdd.Add(46.2065773f);
                    BobPos.Add(new Vector3(2495.31567f, -306.552155f, 92.4610443f)); BobEdd.Add(-0.499072462f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(2599.199f, 391.4112f, 107.763f);
                    BobPos.Add(new Vector3(2553.49854f, 390.691467f, 107.858208f)); BobEdd.Add(-2.79013181f);
                    BobPos.Add(new Vector3(2579.21655f, 283.212494f, 107.842216f)); BobEdd.Add(90.9094543f);
                    BobPos.Add(new Vector3(2545.33276f, 371.798828f, 107.849602f)); BobEdd.Add(-93.7815704f);
                    BobPos.Add(new Vector3(2590.25928f, 484.250336f, 107.913864f)); BobEdd.Add(89.8007507f);
                    BobPos.Add(new Vector3(2588.57275f, 362.679138f, 107.883064f)); BobEdd.Add(-2.20973396f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(2687.026f, 1642.834f, 24.11814f);
                    BobPos.Add(new Vector3(2744.98633f, 1575.90454f, 49.9270821f)); BobEdd.Add(164.616257f);
                    BobPos.Add(new Vector3(2758.74121f, 1544.79883f, 30.0270061f)); BobEdd.Add(75.0416412f);
                    BobPos.Add(new Vector3(2724.42773f, 1486.93262f, 33.5497475f)); BobEdd.Add(73.0875397f);
                    BobPos.Add(new Vector3(2723.02368f, 1570.79309f, 20.0587616f)); BobEdd.Add(163.774384f);
                    BobPos.Add(new Vector3(2747.23315f, 1541.89563f, 49.9272461f)); BobEdd.Add(-106.262947f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(2554.306f, 2702.626f, 41.32283f);
                    BobPos.Add(new Vector3(2608.36499f, 2782.50928f, 37.4999199f)); BobEdd.Add(73.0545349f);
                    BobPos.Add(new Vector3(2676.93872f, 2791.14893f, 39.7588081f)); BobEdd.Add(-92.1003418f);
                    BobPos.Add(new Vector3(2676.69995f, 2757.91992f, 37.9435005f)); BobEdd.Add(-167.886292f);
                    BobPos.Add(new Vector3(2652.3606f, 2892.09961f, 40.333889f)); BobEdd.Add(18.616457f);
                    BobPos.Add(new Vector3(2739.79883f, 2781.77515f, 34.9451523f)); BobEdd.Add(-130.627518f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                }
                else if (iLocationX == 5)
                {
                    ThisBomb.Local = iLocationX;
                    ThisBomb.Fubstop = new Vector3(1791.836f, 3310.597f, 41.19687f);
                    BobPos.Add(new Vector3(1760.46631f, 3333.75098f, 41.0341301f)); BobEdd.Add(-60.9285088f);
                    BobPos.Add(new Vector3(1717.18787f, 3312.80859f, 40.4587135f)); BobEdd.Add(104.220711f);
                    BobPos.Add(new Vector3(1686.48779f, 3287.50269f, 40.381752f)); BobEdd.Add(-56.6268311f);
                    BobPos.Add(new Vector3(1702.23352f, 3290.57031f, 48.1616364f)); BobEdd.Add(-150.332474f);
                    BobPos.Add(new Vector3(1751.89221f, 3307.82227f, 40.3885422f)); BobEdd.Add(-35.8374481f);
                    int iPlop = RandInt(0, BobPos.Count - 1);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(252.9818f, 2845.228f, 43.02372f);
                    BobPos.Add(new Vector3(271.301727f, 2865.59009f, 73.4146347f)); BobEdd.Add(-148.963898f);
                    BobPos.Add(new Vector3(323.372864f, 2893.89771f, 48.8086395f)); BobEdd.Add(33.2550392f);
                    BobPos.Add(new Vector3(314.471649f, 2893.09741f, 45.7033653f)); BobEdd.Add(-150.688766f);
                    BobPos.Add(new Vector3(305.861908f, 2815.77026f, 42.675209f)); BobEdd.Add(26.1873627f);
                    BobPos.Add(new Vector3(261.925507f, 2870.33057f, 42.8570595f)); BobEdd.Add(-149.869537f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(227.1032f, 2614.318f, 45.93844f);
                    BobPos.Add(new Vector3(263.242462f, 2591.16797f, 44.1902809f)); BobEdd.Add(7.45335579f);
                    BobPos.Add(new Vector3(256.03186f, 2584.94897f, 44.1728058f)); BobEdd.Add(-80.1387177f);
                    BobPos.Add(new Vector3(222.261185f, 2574.01587f, 45.2677231f)); BobEdd.Add(-64.4093246f);
                    BobPos.Add(new Vector3(253.882507f, 2618.90088f, 44.4365807f)); BobEdd.Add(-167.026947f);
                    BobPos.Add(new Vector3(226.356812f, 2594.91382f, 44.6472931f)); BobEdd.Add(9.65452766f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(70.57696f, 3626.838f, 38.98684f);
                    BobPos.Add(new Vector3(65.1670685f, 3682.12085f, 39.0695343f)); BobEdd.Add(-38.7010193f);
                    BobPos.Add(new Vector3(103.042175f, 3682.31689f, 38.9900818f)); BobEdd.Add(178.937347f);
                    BobPos.Add(new Vector3(75.9722443f, 3700.92456f, 40.3174057f)); BobEdd.Add(142.61824f);
                    BobPos.Add(new Vector3(50.1884613f, 3689.48706f, 39.1534233f)); BobEdd.Add(55.6498299f);
                    BobPos.Add(new Vector3(13.6236525f, 3722.02563f, 38.8854294f)); BobEdd.Add(135.858322f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(1346.571f, 4333.721f, 37.54305f);
                    BobPos.Add(new Vector3(1336.63928f, 4227.09131f, 33.1557808f)); BobEdd.Add(-12.3485098f);
                    BobPos.Add(new Vector3(1301.85156f, 4310.08398f, 37.1902885f)); BobEdd.Add(-36.0756073f);
                    BobPos.Add(new Vector3(1303.3363f, 4387.84277f, 41.012867f)); BobEdd.Add(-104.631699f);
                    BobPos.Add(new Vector3(1345.84631f, 4390.4751f, 43.5789948f)); BobEdd.Add(-10.9691658f);
                    BobPos.Add(new Vector3(1367.448f, 4309.30078f, 37.3232155f)); BobEdd.Add(73.7938614f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(1662.025f, 4856.363f, 41.45222f);
                    BobPos.Add(new Vector3(1638.96558f, 4877.80664f, 41.2658691f)); BobEdd.Add(-80.9843979f);
                    BobPos.Add(new Vector3(1677.8335f, 4882.03711f, 46.555172f)); BobEdd.Add(56.2789268f);
                    BobPos.Add(new Vector3(1701.37695f, 4830.35791f, 41.2006454f)); BobEdd.Add(97.2353363f);
                    BobPos.Add(new Vector3(1712.29382f, 4791.30713f, 41.2192345f)); BobEdd.Add(-179.89595f);
                    BobPos.Add(new Vector3(1639.62451f, 4819.17432f, 41.2437439f)); BobEdd.Add(106.796303f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(1959.503f, 4904.847f, 43.48162f);
                    BobPos.Add(new Vector3(1920.03833f, 4921.7373f, 49.0715103f)); BobEdd.Add(-10.4585171f);
                    BobPos.Add(new Vector3(1899.67725f, 4926.01465f, 48.0826492f)); BobEdd.Add(-25.7218609f);
                    BobPos.Add(new Vector3(1903.75891f, 4854.87012f, 45.7730637f)); BobEdd.Add(-136.048981f);
                    BobPos.Add(new Vector3(1871.85815f, 4846.9541f, 43.8312416f)); BobEdd.Add(132.546524f);
                    BobPos.Add(new Vector3(1927.67053f, 4822.84912f, 44.5983582f)); BobEdd.Add(48.6232224f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(2548.815f, 4686.794f, 33.18369f);
                    BobPos.Add(new Vector3(2572.17017f, 4645.63135f, 33.2907944f)); BobEdd.Add(-151.954727f);
                    BobPos.Add(new Vector3(2585.7981f, 4691.04248f, 33.0850677f)); BobEdd.Add(-42.4792442f);
                    BobPos.Add(new Vector3(2573.95117f, 4661.96143f, 33.5484428f)); BobEdd.Add(8.63050079f);
                    BobPos.Add(new Vector3(2556.88818f, 4635.43604f, 33.3011475f)); BobEdd.Add(46.0045433f);
                    BobPos.Add(new Vector3(2532.60767f, 4669.80176f, 32.9970474f)); BobEdd.Add(-134.173615f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(2417.808f, 3761.484f, 40.15976f);
                    BobPos.Add(new Vector3(2447.84204f, 3761.2146f, 40.8058815f)); BobEdd.Add(146.996994f);
                    BobPos.Add(new Vector3(2495.11597f, 3762.37842f, 41.6409912f)); BobEdd.Add(-67.1103516f);
                    BobPos.Add(new Vector3(2480.3623f, 3715.08521f, 42.7044678f)); BobEdd.Add(34.1762276f);
                    BobPos.Add(new Vector3(2511.8833f, 3777.76636f, 52.1995506f)); BobEdd.Add(90.5929565f);
                    BobPos.Add(new Vector3(2467.20288f, 3830.43506f, 39.1871643f)); BobEdd.Add(103.786362f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(2374.891f, 3112.922f, 47.56325f);
                    BobPos.Add(new Vector3(2431.73267f, 3146.77271f, 47.3878136f)); BobEdd.Add(103.512375f);
                    BobPos.Add(new Vector3(2426.57422f, 3053.45898f, 47.3878059f)); BobEdd.Add(172.115082f);
                    BobPos.Add(new Vector3(2378.88379f, 3094.22754f, 47.8085098f)); BobEdd.Add(-178.005478f);
                    BobPos.Add(new Vector3(2342.32495f, 3057.39038f, 48.3981247f)); BobEdd.Add(-15.8540945f);
                    BobPos.Add(new Vector3(2368.69238f, 3033.12476f, 50.3187675f)); BobEdd.Add(-179.434723f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                }
                else
                {
                    ThisBomb.Local = iLocationX;
                    ThisBomb.Fubstop = new Vector3(-595.5298f, 5283.958f, 69.72607f);
                    BobPos.Add(new Vector3(-549.605164f, 5308.17236f, 113.395943f)); BobEdd.Add(-22.503418f);
                    BobPos.Add(new Vector3(-543.165222f, 5329.26465f, 76.3908844f)); BobEdd.Add(70.1343842f);
                    BobPos.Add(new Vector3(-545.467407f, 5364.88037f, 69.942955f)); BobEdd.Add(89.9101563f);
                    BobPos.Add(new Vector3(-580.696167f, 5351.38281f, 69.4496765f)); BobEdd.Add(-20.9698524f);
                    BobPos.Add(new Vector3(-559.73822f, 5288.10254f, 75.5423737f)); BobEdd.Add(-110.181091f);
                    int iPlop = RandInt(0, BobPos.Count - 1);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(-783.1334f, 5547.864f, 32.92183f);
                    BobPos.Add(new Vector3(-765.957458f, 5597.17041f, 32.8351212f)); BobEdd.Add(77.5357742f);
                    BobPos.Add(new Vector3(-753.154358f, 5592.48682f, 40.8949356f)); BobEdd.Add(-90.2711334f);
                    BobPos.Add(new Vector3(-736.563721f, 5585.38477f, 35.9498825f)); BobEdd.Add(89.6301804f);
                    BobPos.Add(new Vector3(-736.964539f, 5602.03955f, 40.8948288f)); BobEdd.Add(-90.8948517f);
                    BobPos.Add(new Vector3(-740.715088f, 5595.06689f, 36.7780151f)); BobEdd.Add(90.4016571f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(-696.6239f, 5825.393f, 16.56497f);
                    BobPos.Add(new Vector3(-680.09668f, 5812.51123f, 16.5661774f)); BobEdd.Add(154.292908f);
                    BobPos.Add(new Vector3(-686.100586f, 5765.45801f, 16.746233f)); BobEdd.Add(-26.9625206f);
                    BobPos.Add(new Vector3(-695.120728f, 5784.4248f, 16.5661774f)); BobEdd.Add(65.6818237f);
                    BobPos.Add(new Vector3(-678.357422f, 5792.70313f, 16.5661774f)); BobEdd.Add(-25.6781178f);
                    BobPos.Add(new Vector3(-681.087708f, 5802.27783f, 16.5661774f)); BobEdd.Add(-23.4015446f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(1724.261f, 6391.394f, 33.69069f);
                    BobPos.Add(new Vector3(1734.29712f, 6423.84229f, 33.5694389f)); BobEdd.Add(154.053497f);
                    BobPos.Add(new Vector3(1735.38293f, 6419.15479f, 34.2724648f)); BobEdd.Add(-118.11824f);
                    BobPos.Add(new Vector3(1700.24219f, 6417.1377f, 31.9992771f)); BobEdd.Add(-26.47719f);
                    BobPos.Add(new Vector3(1676.26892f, 6431.60596f, 30.9249725f)); BobEdd.Add(-29.0275822f);
                    BobPos.Add(new Vector3(1686.12427f, 6442.84082f, 36.3949776f)); BobEdd.Add(63.4788246f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(1490.958f, 6425.833f, 21.86567f);
                    BobPos.Add(new Vector3(1443.42358f, 6334.67969f, 23.0111351f)); BobEdd.Add(-88.6909485f);
                    BobPos.Add(new Vector3(1436.92224f, 6360.79492f, 23.2124557f)); BobEdd.Add(-92.9941711f);
                    BobPos.Add(new Vector3(1506.35645f, 6364.74316f, 15.62288f)); BobEdd.Add(-17.094965f);
                    BobPos.Add(new Vector3(1524.55176f, 6319.58398f, 23.3277512f)); BobEdd.Add(-33.5229607f);
                    BobPos.Add(new Vector3(1539.84167f, 6340.44531f, 23.3193321f)); BobEdd.Add(-29.6696682f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(428.8315f, 6555.467f, 26.64591f);
                    BobPos.Add(new Vector3(442.875824f, 6503.93896f, 28.1512012f)); BobEdd.Add(-85.516098f);
                    BobPos.Add(new Vector3(431.06723f, 6472.9541f, 28.0150928f)); BobEdd.Add(139.681641f);
                    BobPos.Add(new Vector3(439.253174f, 6456.76367f, 35.1051598f)); BobEdd.Add(-132.482132f);
                    BobPos.Add(new Vector3(422.303619f, 6446.06836f, 28.0441952f)); BobEdd.Add(3.77886033f);
                    BobPos.Add(new Vector3(471.001709f, 6535.25195f, 32.2081261f)); BobEdd.Add(-0.898896396f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(-204.2401f, 6315.154f, 30.92814f);
                    BobPos.Add(new Vector3(-176.68782f, 6237.38232f, 30.9946747f)); BobEdd.Add(-44.0779114f);
                    BobPos.Add(new Vector3(-148.776337f, 6276.11621f, 30.7246685f)); BobEdd.Add(-43.5058594f);
                    BobPos.Add(new Vector3(-168.356262f, 6284.93311f, 32.3960037f)); BobEdd.Add(-135.329895f);
                    BobPos.Add(new Vector3(-218.207596f, 6291.26318f, 31.0372105f)); BobEdd.Add(-135.676636f);
                    BobPos.Add(new Vector3(-197.466095f, 6263.94287f, 30.8898373f)); BobEdd.Add(-139.04155f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(-399.8442f, 6125.085f, 30.87493f);
                    BobPos.Add(new Vector3(-362.671875f, 6105.99414f, 45.6095123f)); BobEdd.Add(134.80751f);
                    BobPos.Add(new Vector3(-380.761841f, 6085.31982f, 38.8501587f)); BobEdd.Add(-150.967361f);
                    BobPos.Add(new Vector3(-364.694641f, 6104.05811f, 34.6748886f)); BobEdd.Add(-45.9018631f);
                    BobPos.Add(new Vector3(-366.427521f, 6105.625f, 38.6976166f)); BobEdd.Add(-136.302612f);
                    BobPos.Add(new Vector3(-382.838074f, 6112.65527f, 30.7280693f)); BobEdd.Add(44.574852f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(-53.81245f, 6297.023f, 30.90609f);
                    BobPos.Add(new Vector3(-63.2133217f, 6226.24609f, 46.7131081f)); BobEdd.Add(32.7081795f);
                    BobPos.Add(new Vector3(-100.013115f, 6190.71289f, 30.6462097f)); BobEdd.Add(41.6808014f);
                    BobPos.Add(new Vector3(-40.1956024f, 6180.41602f, 37.7744865f)); BobEdd.Add(-59.5133896f);
                    BobPos.Add(new Vector3(-121.992249f, 6102.94189f, 65.6306229f)); BobEdd.Add(-47.4416237f);
                    BobPos.Add(new Vector3(-169.23642f, 6144.6665f, 41.8776665f)); BobEdd.Add(-136.109116f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                    ThisBomb.Fubstop = new Vector3(502.5401f, 5537.348f, 777.4535f);
                    BobPos.Add(new Vector3(442.443024f, 5572.52197f, 776.605896f)); BobEdd.Add(174.680847f);
                    BobPos.Add(new Vector3(429.508545f, 5614.93945f, 765.461121f)); BobEdd.Add(-172.733109f);
                    BobPos.Add(new Vector3(501.517029f, 5603.93652f, 797.150024f)); BobEdd.Add(175.935944f);
                    BobPos.Add(new Vector3(451.204346f, 5568.1626f, 795.921875f)); BobEdd.Add(140.872787f);
                    BobPos.Add(new Vector3(453.622345f, 5589.1665f, 780.444336f)); BobEdd.Add(0.627222776f);
                    ThisBomb.Bomb = BobPos[iPlop];
                    ThisBomb.Fheader = BobEdd[iPlop];
                    BbLocal.Add(ThisBomb);
                    BobPos.Clear();
                    BobEdd.Clear();

                }

                if (FindBuiltMissions(9))
                {
                    if (MySettings.BulderOnly)
                        iBuild = SelectBuilderMish(6);
                    else
                    {
                        for (int i = 0; i < BbLocal.Count; i++)
                            MyMissions.BombXM.Add(BbLocal[i]);

                        if (iLocationX == 1)
                            iBuild = FindRandom(19, 0, MyMissions.BombXM.Count - 1);
                        else if (iLocationX == 2)
                            iBuild = FindRandom(20, 0, MyMissions.BombXM.Count - 1);
                        else if (iLocationX == 3)
                            iBuild = FindRandom(21, 0, MyMissions.BombXM.Count - 1);
                        else if (iLocationX == 4)
                            iBuild = FindRandom(22, 0, MyMissions.BombXM.Count - 1);
                        else if (iLocationX == 5)
                            iBuild = FindRandom(23, 0, MyMissions.BombXM.Count - 1);
                        else if (iLocationX == 6)
                            iBuild = FindRandom(24, 0, MyMissions.BombXM.Count - 1);
                        else
                            iBuild = FindRandom(25, 0, MyMissions.BombXM.Count - 1);
                    }
                }
                else
                {
                    MyMissions.BombXM = BbLocal;

                    if (iLocationX == 1)
                        iBuild = FindRandom(19, 0, MyMissions.BombXM.Count - 1);
                    else if (iLocationX == 2)
                        iBuild = FindRandom(20, 0, MyMissions.BombXM.Count - 1);
                    else if (iLocationX == 3)
                        iBuild = FindRandom(21, 0, MyMissions.BombXM.Count - 1);
                    else if (iLocationX == 4)
                        iBuild = FindRandom(22, 0, MyMissions.BombXM.Count - 1);
                    else if (iLocationX == 5)
                        iBuild = FindRandom(23, 0, MyMissions.BombXM.Count - 1);
                    else if (iLocationX == 6)
                        iBuild = FindRandom(24, 0, MyMissions.BombXM.Count - 1);
                    else
                        iBuild = FindRandom(25, 0, MyMissions.BombXM.Count - 1);
                }
            }

            vFuMiss = MyMissions.BombXM[iBuild].Fubstop;
            vTarget_01 = MyMissions.BombXM[iBuild].Bomb;
            vTarget_01.Z -= 0.2f;
            fMission_01 = MyMissions.BombXM[iBuild].Fheader;

            for (int i = 0; i < PoliceS.Count; i++)
            {
                float fDist = PoliceS[i].DistanceTo(vTarget_01);
                PoliceDis.Add(fDist);
            }
            float fMin = PoliceDis[0];
            int iStation = 0;
            for (int i = 0; i < PoliceDis.Count; i++)
            {
                if (PoliceDis[i] < fMin)
                { fMin = PoliceDis[i]; iStation = i; }
            }

            if (iStation == 0)
            {
                //MissioRow
                VectorList_01.Add(new Vector3(424.9822f, -975.7164f, 30.70994f));
                VectorList_01.Add(new Vector3(430.0728f, -975.2698f, 30.71041f));
                VectorList_01.Add(new Vector3(431.8297f, -976.2233f, 30.7107f));
                vTarget_02 = new Vector3(432.0016f, -982.2522f, 30.71071f);
                vTarget_03 = new Vector3(422.6159f, -958.9047f, 28.73893f);
            }
            else if (iStation == 1)
            {
                //La Mesa
                VectorList_01.Add(new Vector3(818.5182f, -1286.459f, 26.29823f));
                VectorList_01.Add(new Vector3(817.4276f, -1291.899f, 26.28673f));
                VectorList_01.Add(new Vector3(818.553f, -1294.349f, 26.28424f));
                vTarget_02 = new Vector3(826.6686f, -1290.105f, 28.24086f);
                vTarget_03 = new Vector3(808.1988f, -1292.15f, 25.71989f);
            }
            else if (iStation == 2)
            {
                //Davis
                VectorList_01.Add(new Vector3(361.3124f, -1577.367f, 29.29205f));
                VectorList_01.Add(new Vector3(357.6923f, -1583.221f, 29.29205f));
                VectorList_01.Add(new Vector3(356.771f, -1584.818f, 29.29205f));
                vTarget_02 = new Vector3(360.6976f, -1583.997f, 29.29205f);
                vTarget_03 = new Vector3(369.5829f, -1569.948f, 28.73894f);
            }
            else if (iStation == 3)
            {
                //Vinewood
                VectorList_01.Add(new Vector3(644.7836f, 5.072305f, 82.78687f));
                VectorList_01.Add(new Vector3(639.6327f, -5.474602f, 82.78826f));
                VectorList_01.Add(new Vector3(640.5361f, -4.35584f, 82.7886f));
                vTarget_02 = new Vector3(639.3252f, 1.446257f, 82.78688f);
                vTarget_03 = new Vector3(666.3584f, -13.99784f, 83.09074f);
            }
            else if (iStation == 4)
            {
                //Rockford
                VectorList_01.Add(new Vector3(-564.3727f, -136.9801f, 38.13983f));
                VectorList_01.Add(new Vector3(-555.5646f, -134.1428f, 38.21357f));
                VectorList_01.Add(new Vector3(-555.6986f, -132.275f, 38.13365f));
                vTarget_02 = new Vector3(-560.6122f, -133.5047f, 38.08427f);
                vTarget_03 = new Vector3(-547.814f, -144.8625f, 37.73637f);
            }
            else if (iStation == 5)
            {
                //DelPerro
                VectorList_01.Add(new Vector3(-1633.709f, -1009.621f, 13.07926f));
                VectorList_01.Add(new Vector3(-1626.259f, -1014.065f, 13.14364f));
                VectorList_01.Add(new Vector3(-1627.825f, -1015.812f, 13.14277f));
                vTarget_02 = new Vector3(-1631.851f, -1014.673f, 13.11931f);
                vTarget_03 = new Vector3(-1628.884f, -1000.764f, 12.5358f);
            }
            else if (iStation == 6)
            {
                //Vespucci
                VectorList_01.Add(new Vector3(-1086.839f, -803.2225f, 19.25974f));
                VectorList_01.Add(new Vector3(-1099.912f, -812.1174f, 19.31997f));
                VectorList_01.Add(new Vector3(-1101.959f, -811.5011f, 19.31709f));
                vTarget_02 = new Vector3(-1093.045f, -809.5769f, 19.27813f);
                vTarget_03 = new Vector3(-1103.157f, -796.7576f, 17.90961f);
            }
            else if (iStation == 7)
            {
                //Vespucci Beach
                VectorList_01.Add(new Vector3(-1310.293f, -1536.93f, 4.313596f));
                VectorList_01.Add(new Vector3(-1306.709f, -1526.721f, 4.358545f));
                VectorList_01.Add(new Vector3(-1308.001f, -1524.764f, 4.389328f));
                vTarget_02 = new Vector3(-1313.826f, -1527.571f, 4.41676f);
                vTarget_03 = new Vector3(-1206.207f, -1442.319f, 3.878422f);
            }
            else if (iStation == 8)
            {
                //Sandy
                VectorList_01.Add(new Vector3(1855.079f, 3678.924f, 33.80996f));
                VectorList_01.Add(new Vector3(1860.517f, 3681.536f, 33.76942f));
                VectorList_01.Add(new Vector3(1859.754f, 3679.984f, 33.7042f));
                vTarget_02 = new Vector3(1855.559f, 3682.646f, 34.26752f);
                vTarget_03 = new Vector3(1860.758f, 3673.69f, 33.27175f);
            }
            else
            {
                //paleto
                VectorList_01.Add(new Vector3(-442.0172f, 6022.679f, 31.49011f));
                VectorList_01.Add(new Vector3(-435.961f, 6021.011f, 31.49011f));
                VectorList_01.Add(new Vector3(-437.0332f, 6019.181f, 31.49011f));
                vTarget_02 = new Vector3(-442.1248f, 6017.591f, 31.67277f);
                vTarget_03 = new Vector3(-440.5876f, 6037.623f, 30.83302f);
            }

            iTime_01.Add(0);// BobmTimmer   0 

            if (!bTestRun)
                BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[11], "", 5000);
            bOnTheJob = true;
        }
        public class BombBuild
        {
            public int Local { get; set; }
            public Vector3 Fubstop { get; set; }
            public Vector3 Bomb { get; set; }
            public float Fheader { get; set; }
        }
        private void HitMan()
        {
            LogThis("HitMan");

            VectorList_01.Clear();
            VectorList_02.Clear();
            VectorList_03.Clear();
            VectorList_04.Clear();

            fList_01.Clear();
            iList_01.Clear();
            PropList_01.Clear();
            sMissionVar_01 = "";

            BeOnOff.Clear();
            BeOnOff.Add(false);//   bDoorEnter  0 
            BeOnOff.Add(false);//   bOneAtaTime 1 

            int iBuild = 0;
            int iMishWop = 0;

            HitBuild MyHitB = new HitBuild();

            if (bTestRun)
            {
                bJobLoaded = true;
                iJobType = 13;
            }
            else 
            {
                if (bOnCayoLand)
                {
                    if (iAssMissionList[6] > 4)
                        iMishWop = RandInt(0, 4);
                    else
                        iMishWop = iAssMissionList[6];

                    if (iMishWop == 0)
                    {
                        MyHitB.Goon05.Add(new Vector3(4473.899f, -4511.396f, 4.187176f)); //GuardWalk_03-
                        MyHitB.Goon04.Add(new Vector3(4527.359f, -4528.516f, 4.155666f)); //GuardWalk_02-
                        MyHitB.Goon03.Add(new Vector3(4497.993f, -4539.132f, 4.141154f)); //GuardWalk_01-
                        MyHitB.Goon02 = new Vector3(4523.792f, -4536.616f, 7.552061f); MyHitB.Goon02Dir = 21.41515f;
                        MyHitB.Goon01 = new Vector3(4518.237f, -4550.28f, 7.56531f); MyHitB.Goon01Dir = 45.2341f;
                        MyHitB.Vboss = new Vector3(4503.695f, -4553.788f, 4.1719f); MyHitB.BossDir = 200.9265f;//0

                        MyHitB.Goon03.Add(new Vector3(4498.449f, -4538.28f, 4.171075f));
                        MyHitB.Goon03.Add(new Vector3(4511.435f, -4529.924f, 4.219851f));
                        MyHitB.Goon03.Add(new Vector3(4505.698f, -4511.168f, 3.960274f));
                        MyHitB.Goon03.Add(new Vector3(4490.829f, -4513.242f, 4.124402f));
                        MyHitB.Goon03.Add(new Vector3(4503.334f, -4509.995f, 4.092979f));
                        MyHitB.Goon03.Add(new Vector3(4512.584f, -4529.077f, 4.193905f));

                        MyHitB.Goon04.Add(new Vector3(4527.535f, -4527.914f, 4.193107f));
                        MyHitB.Goon04.Add(new Vector3(4521.755f, -4529.071f, 4.143321f));
                        MyHitB.Goon04.Add(new Vector3(4509.937f, -4510.527f, 4.114697f));
                        MyHitB.Goon04.Add(new Vector3(4526.833f, -4495.362f, 4.18601f));
                        MyHitB.Goon04.Add(new Vector3(4512.508f, -4503.898f, 4.183725f));
                        MyHitB.Goon04.Add(new Vector3(4517.468f, -4527.148f, 4.178466f));

                        MyHitB.Goon05.Add(new Vector3(4492.424f, -4570.478f, 5.6365f));
                        MyHitB.Goon05.Add(new Vector3(4471.955f, -4513.821f, 4.187965f));

                        MyHitB.Vstart = new Vector3(4513.035f, -4451.502f, 3.732822f);

                        MyHitB.FUbstop = MyHitB.Vstart;

                        iMobStarz = 52;
                        sMissionVar_01 = "IG_IslDJ_00";
                    }
                    else if (iMishWop == 1)
                    {
                        MyHitB.Goon05.Add(new Vector3(5049.748f, -4607.531f, 2.979198f));
                        MyHitB.Goon04.Add(new Vector3(5165.396f, -4702.243f, 2.153193f));
                        MyHitB.Goon03.Add(new Vector3(5086.114f, -4682.189f, 2.360273f));
                        MyHitB.Goon02 = new Vector3(5033.615f, -4631.193f, 21.68073f); MyHitB.Goon02Dir = 256.7936f;
                        MyHitB.Goon01 = new Vector3(5094.524f, -4655.409f, 1.757612f); MyHitB.Goon01Dir = 260.6545f;
                        MyHitB.Vboss = new Vector3(5123.886f, -4642.248f, 1.400684f); MyHitB.BossDir = 164.0761f;

                        MyHitB.Goon03.Add(new Vector3(5084.328f, -4681.426f, 2.385362f));
                        MyHitB.Goon03.Add(new Vector3(5072.037f, -4673.802f, 2.932216f));
                        MyHitB.Goon03.Add(new Vector3(5059.477f, -4634.299f, 2.648646f));
                        MyHitB.Goon03.Add(new Vector3(5035.237f, -4617.473f, 3.513743f));
                        MyHitB.Goon03.Add(new Vector3(5057.626f, -4636.332f, 2.633209f));
                        MyHitB.Goon03.Add(new Vector3(5069.723f, -4672.357f, 2.989979f));
                        MyHitB.Goon03.Add(new Vector3(5085.625f, -4681.076f, 2.407427f));

                        MyHitB.Goon04.Add(new Vector3(5166.854f, -4698.667f, 2.178764f));
                        MyHitB.Goon04.Add(new Vector3(5166.389f, -4671.986f, 2.766574f));
                        MyHitB.Goon04.Add(new Vector3(5173.757f, -4644.004f, 2.853223f));
                        MyHitB.Goon04.Add(new Vector3(5173.076f, -4635.888f, 2.819802f));
                        MyHitB.Goon04.Add(new Vector3(5173.601f, -4644.069f, 2.85945f));
                        MyHitB.Goon04.Add(new Vector3(5164.905f, -4674.674f, 2.70859f));
                        MyHitB.Goon04.Add(new Vector3(5166.289f, -4703.957f, 2.079124f));

                        MyHitB.Goon05.Add(new Vector3(5053.102f, -4607.109f, 2.916398f));
                        MyHitB.Goon05.Add(new Vector3(5079.043f, -4611.108f, 2.960062f));
                        MyHitB.Goon05.Add(new Vector3(5130.677f, -4624.859f, 2.82174f));
                        MyHitB.Goon05.Add(new Vector3(5153.719f, -4628.627f, 2.988436f));
                        MyHitB.Goon05.Add(new Vector3(5155.554f, -4597.353f, 3.518908f));
                        MyHitB.Goon05.Add(new Vector3(5139.344f, -4589.227f, 4.864506f));
                        MyHitB.Goon05.Add(new Vector3(5107.482f, -4614.512f, 2.567264f));
                        MyHitB.Goon05.Add(new Vector3(5068.46f, -4608.898f, 2.732914f));

                        MyHitB.Vstart = new Vector3(4988.147f, -4535.954f, 8.097687f);

                        MyHitB.FUbstop = MyHitB.Vstart;

                        vTarget_02 = new Vector3(5123.886f, -4642.248f, 1.400684f);
                        iMobStarz = 52;
                        sMissionVar_01 = "IG_IslDJ_01";
                    }
                    else if (iMishWop == 2)
                    {
                        MyHitB.Goon05.Add(new Vector3(5289.793f, -5218.747f, 31.35961f));
                        MyHitB.Goon04.Add(new Vector3(5284.155f, -5286.204f, 31.78162f));
                        MyHitB.Goon03.Add(new Vector3(5381.637f, -5303.728f, 35.72071f));
                        MyHitB.Goon02 = new Vector3(5328.118f, -5263.481f, 37.27973f); MyHitB.Goon02Dir = 356.2472f;
                        MyHitB.Goon01 = new Vector3(5329.722f, -5273.086f, 36.87106f); MyHitB.Goon01Dir = 161.2967f;
                        MyHitB.Vboss = new Vector3(5330.616f, -5270.467f, 33.18246f); MyHitB.BossDir = 121.288f;

                        MyHitB.Goon03.Add(new Vector3(5381.01f, -5303.126f, 35.70126f));
                        MyHitB.Goon03.Add(new Vector3(5321.302f, -5249.752f, 32.57737f));

                        MyHitB.Goon04.Add(new Vector3(5280.464f, -5290.719f, 31.71746f));
                        MyHitB.Goon04.Add(new Vector3(5386.142f, -5184.534f, 31.11724f));

                        MyHitB.Goon05.Add(new Vector3(5285.92f, -5215.083f, 30.47023f));
                        MyHitB.Goon05.Add(new Vector3(5319.126f, -5247.02f, 32.57311f));
                        MyHitB.Goon05.Add(new Vector3(5349.337f, -5217.763f, 31.12744f));
                        MyHitB.Goon05.Add(new Vector3(5311.005f, -5179.859f, 29.67479f));
                        MyHitB.Goon05.Add(new Vector3(5349.229f, -5218.341f, 31.14395f));
                        MyHitB.Goon05.Add(new Vector3(5320.939f, -5247.692f, 32.56763f));

                        MyHitB.Vstart = new Vector3(5257.43f, -5263.344f, 24.48767f);

                        vTarget_02 = new Vector3(5330.616f, -5270.467f, 33.18246f);
                        iMobStarz = 52;
                        sMissionVar_01 = "IG_IslDJ_02";
                    }
                    else if (iMishWop == 3)
                    {
                        MyHitB.Goon05.Add(new Vector3(5114.223f, -5203.785f, 2.398109f));
                        MyHitB.Goon04.Add(new Vector3(5120.153f, -5084.902f, 2.360956f));
                        MyHitB.Goon03.Add(new Vector3(5032.746f, -5116.829f, 5.319641f));
                        MyHitB.Goon02 = new Vector3(5046.298f, -5112.081f, 12.57241f); MyHitB.Goon02Dir = 359.2585f;
                        MyHitB.Goon01 = new Vector3(5040.758f, -5117.302f, 18.13903f); MyHitB.Goon01Dir = 131.8663f;
                        MyHitB.Vboss = new Vector3(5042.745f, -5114.8f, 22.93991f); MyHitB.BossDir = 94.88478f;

                        MyHitB.Goon03.Add(new Vector3(5036.303f, -5116.772f, 5.737444f));
                        MyHitB.Goon03.Add(new Vector3(5012.694f, -5129.415f, 2.9919f));
                        MyHitB.Goon03.Add(new Vector3(5018.085f, -5152.899f, 2.65039f));
                        MyHitB.Goon03.Add(new Vector3(5038.566f, -5195.042f, 2.682085f));
                        MyHitB.Goon03.Add(new Vector3(5044.731f, -5215.362f, 3.057317f));
                        MyHitB.Goon03.Add(new Vector3(5036.879f, -5194.092f, 2.545181f));
                        MyHitB.Goon03.Add(new Vector3(5019.313f, -5157.417f, 2.574997f));
                        MyHitB.Goon03.Add(new Vector3(5020.292f, -5132.826f, 3.109585f));
                        MyHitB.Goon03.Add(new Vector3(5027.321f, -5120.981f, 4.317581f));

                        MyHitB.Goon04.Add(new Vector3(5119.485f, -5085.836f, 2.299197f));
                        MyHitB.Goon04.Add(new Vector3(5114.708f, -5108.212f, 2.1675f));
                        MyHitB.Goon04.Add(new Vector3(5112.895f, -5121.462f, 2.206454f));
                        MyHitB.Goon04.Add(new Vector3(5112.96f, -5140.31f, 2.199696f));
                        MyHitB.Goon04.Add(new Vector3(5112.614f, -5156.182f, 2.245853f));
                        MyHitB.Goon04.Add(new Vector3(5112.858f, -5175.816f, 2.313444f));
                        MyHitB.Goon04.Add(new Vector3(5113.223f, -5202.912f, 2.384449f));
                        MyHitB.Goon04.Add(new Vector3(5121.214f, -5209.073f, 2.665782f));
                        MyHitB.Goon04.Add(new Vector3(5134.446f, -5206.216f, 2.926885f));
                        MyHitB.Goon04.Add(new Vector3(5130.966f, -5208.709f, 2.978797f));
                        MyHitB.Goon04.Add(new Vector3(5117.441f, -5208.045f, 2.54545f));
                        MyHitB.Goon04.Add(new Vector3(5114.211f, -5199.12f, 2.352396f));
                        MyHitB.Goon04.Add(new Vector3(5112.896f, -5175.494f, 2.310411f));
                        MyHitB.Goon04.Add(new Vector3(5113.439f, -5154.506f, 2.263836f));
                        MyHitB.Goon04.Add(new Vector3(5113.521f, -5136.032f, 2.311946f));
                        MyHitB.Goon04.Add(new Vector3(5113.716f, -5116.948f, 2.209894f));

                        MyHitB.Goon05.Add(new Vector3(5013.922f, -5135.069f, 2.982546f));
                        MyHitB.Goon05.Add(new Vector3(4986.65f, -5151.049f, 2.530167f));
                        MyHitB.Goon05.Add(new Vector3(4989.745f, -5169.334f, 2.545022f));
                        MyHitB.Goon05.Add(new Vector3(5000.681f, -5182.458f, 2.514796f));
                        MyHitB.Goon05.Add(new Vector3(5017.758f, -5184.628f, 2.520133f));
                        MyHitB.Goon05.Add(new Vector3(5026.959f, -5173.516f, 2.783011f));
                        MyHitB.Goon05.Add(new Vector3(5020.555f, -5144.618f, 2.671165f));

                        MyHitB.Vstart = new Vector3(5155.222f, -5128.624f, 1.295301f);

                        MyHitB.FUbstop = MyHitB.Vstart;

                        vTarget_02 = new Vector3(5042.745f, -5114.8f, 22.93991f);
                        iMobStarz = 52;
                        sMissionVar_01 = "IG_IslDJ_03";
                    }
                    else
                    {
                        MyHitB.Goon05.Add(new Vector3(5030.289f, -5749.438f, 16.27629f));
                        MyHitB.Goon04.Add(new Vector3(5012.663f, -5743.717f, 19.86789f));
                        MyHitB.Goon03.Add(new Vector3(5003.215f, -5751.935f, 28.68034f));
                        MyHitB.Goon02 = new Vector3(5023.134f, -5748.972f, 19.87768f); MyHitB.Goon02Dir = 276.0576f;
                        MyHitB.Goon01 = new Vector3(5001.348f, -5754.646f, 19.87576f); MyHitB.Goon01Dir = 149.9054f;
                        MyHitB.Vboss = new Vector3(5009.038f, -5754.581f, 28.84526f); MyHitB.BossDir = 149.7885f;

                        MyHitB.Goon03.Add(new Vector3(5002.911f, -5752.313f, 28.68233f));
                        MyHitB.Goon03.Add(new Vector3(5006.708f, -5746.745f, 28.68233f));
                        MyHitB.Goon03.Add(new Vector3(5009.672f, -5741.836f, 26.49426f));
                        MyHitB.Goon03.Add(new Vector3(5018.38f, -5747.015f, 24.2728f));
                        MyHitB.Goon03.Add(new Vector3(5009.93f, -5741.321f, 26.49229f));
                        MyHitB.Goon03.Add(new Vector3(5006.693f, -5746.122f, 28.68328f));

                        MyHitB.Goon04.Add(new Vector3(5013.232f, -5743.474f, 19.88034f));
                        MyHitB.Goon04.Add(new Vector3(5005.97f, -5740.077f, 19.88021f));
                        MyHitB.Goon04.Add(new Vector3(5003.674f, -5736.941f, 19.88022f));
                        MyHitB.Goon04.Add(new Vector3(5002.887f, -5734.158f, 19.8803f));
                        MyHitB.Goon04.Add(new Vector3(5004.678f, -5738.075f, 19.88023f));
                        MyHitB.Goon04.Add(new Vector3(5007.891f, -5741.285f, 19.8802f));

                        MyHitB.Goon05.Add(new Vector3(5030.402f, -5749.088f, 16.27834f));
                        MyHitB.Goon05.Add(new Vector3(5020.631f, -5762.595f, 16.27756f));
                        MyHitB.Goon05.Add(new Vector3(5004.514f, -5774.552f, 16.27845f));
                        MyHitB.Goon05.Add(new Vector3(5024.32f, -5745.851f, 16.28125f));

                        MyHitB.Vstart = new Vector3(4985.809f, -5713.806f, 18.8802f);

                        MyHitB.FUbstop = MyHitB.Vstart;

                        vTarget_02 = new Vector3(5009.038f, -5754.581f, 28.84526f);

                        iMobStarz = 52;
                        sMissionVar_01 = "IG_IslDJ_04";
                        BeOnOff[0] = true;
                    }
                }
                else if (iLocationX == 1)
                {
                    if (iAssMissionList[0] > 4)
                        iMishWop = RandInt(0, 4);
                    else
                        iMishWop = iAssMissionList[0];

                    if (iMishWop == 0)
                    {
                        MyHitB.Goon05.Add(new Vector3(1229.62f, -2921.219f, 17.33289f));
                        MyHitB.Goon04.Add(new Vector3(1253.167f, -2950.298f, 9.319255f));
                        MyHitB.Goon03.Add(new Vector3(1228.313f, -2924.687f, 9.319263f));
                        MyHitB.Goon02 = new Vector3(1219.501f, -2915.277f, 5.866065f); MyHitB.Goon02Dir = 337.1597f;
                        MyHitB.Goon01 = new Vector3(1222.668f, -2914.625f, 5.880469f); MyHitB.Goon01Dir = 131.4427f;
                        MyHitB.Vboss = new Vector3(1231.332f, -2917.555f, 26.45622f); MyHitB.BossDir = 131.4427f;

                        MyHitB.Goon03.Add(new Vector3(1228.313f, -2924.687f, 9.319263f));
                        MyHitB.Goon03.Add(new Vector3(1252.82f, -2923.144f, 9.319261f));
                        MyHitB.Goon03.Add(new Vector3(1252.724f, -2950.048f, 9.319261f));
                        MyHitB.Goon03.Add(new Vector3(1229.017f, -2950.106f, 9.319257f));
                        MyHitB.Goon03.Add(new Vector3(1228.458f, -2939.91f, 9.319262f));

                        MyHitB.Goon04.Add(new Vector3(1253.167f, -2950.298f, 9.319255f));
                        MyHitB.Goon04.Add(new Vector3(1228.614f, -2951.87f, 9.319256f));
                        MyHitB.Goon04.Add(new Vector3(1228.804f, -3002.856f, 9.319259f));
                        MyHitB.Goon04.Add(new Vector3(1252.686f, -3002.903f, 9.319256f));
                        MyHitB.Goon04.Add(new Vector3(1252.763f, -2950.377f, 9.319261f));

                        MyHitB.Goon05.Add(new Vector3(1229.62f, -2921.219f, 17.33289f));
                        MyHitB.Goon05.Add(new Vector3(1251.382f, -2921.088f, 17.33288f));

                        MyHitB.Vstart = new Vector3(1192.2f, -3067.692f, 4.987493f);
                        iMobStarz = 16;

                        MyHitB.FUbstop = new Vector3(1174.633f, -3086.502f, 5.347713f);
                    }
                    else if (iMishWop == 1)
                    {
                        MyHitB.Goon05.Add(new Vector3(19.64524f, -2688.488f, 12.50f));
                        MyHitB.Goon04.Add(new Vector3(48.22489f, -2745.141f, 12.508f));
                        MyHitB.Goon03.Add(new Vector3(20.65493f, -2675.646f, 12.008f));
                        MyHitB.Goon02 = new Vector3(34.01345f, -2679.244f, 12.035f); MyHitB.Goon02Dir = 358.159f;
                        MyHitB.Goon01 = new Vector3(27.48125f, -2688.801f, 12.008f); MyHitB.Goon01Dir = 89.52501f;
                        MyHitB.Vboss = new Vector3(33.84007f, -2691.393f, 12.008f); MyHitB.BossDir = 176.5982f;

                        MyHitB.Goon03.Add(new Vector3(34.44283f, -2674.603f, 12.06331f));
                        MyHitB.Goon03.Add(new Vector3(47.15094f, -2675.877f, 12.00943f));
                        MyHitB.Goon03.Add(new Vector3(46.7704f, -2684.993f, 12.00943f));
                        MyHitB.Goon03.Add(new Vector3(44.09134f, -2685.037f, 12.00943f));
                        MyHitB.Goon03.Add(new Vector3(43.92788f, -2675.145f, 17.15017f));
                        MyHitB.Goon03.Add(new Vector3(23.88951f, -2675.556f, 17.15017f));
                        MyHitB.Goon03.Add(new Vector3(23.56731f, -2685.437f, 12.00879f));
                        MyHitB.Goon03.Add(new Vector3(20.8575f, -2684.973f, 12.00879f));
                        MyHitB.Goon03.Add(new Vector3(20.65493f, -2675.646f, 12.00879f));

                        MyHitB.Goon04.Add(new Vector3(43.55402f, -2745.357f, 13.51919f));
                        MyHitB.Goon04.Add(new Vector3(48.22489f, -2745.141f, 12.0066f));
                        MyHitB.Goon04.Add(new Vector3(47.78152f, -2719.32f, 12.00674f));
                        MyHitB.Goon04.Add(new Vector3(19.62543f, -2719.374f, 12.00684f));
                        MyHitB.Goon04.Add(new Vector3(19.58252f, -2744.939f, 12.00709f));
                        MyHitB.Goon04.Add(new Vector3(24.58426f, -2745.261f, 13.51921f));
                        MyHitB.Goon04.Add(new Vector3(24.58426f, -2745.261f, 13.51921f));
                        MyHitB.Goon04.Add(new Vector3(19.58252f, -2744.939f, 12.00709f));
                        MyHitB.Goon04.Add(new Vector3(19.62543f, -2719.374f, 12.00684f));
                        MyHitB.Goon04.Add(new Vector3(47.78152f, -2719.32f, 12.00674f));
                        MyHitB.Goon04.Add(new Vector3(48.22489f, -2745.141f, 12.0066f));
                        MyHitB.Goon04.Add(new Vector3(43.55402f, -2745.357f, 13.51919f));

                        MyHitB.Goon05.Add(new Vector3(19.24374f, -2718.498f, 12.00685f));
                        MyHitB.Goon05.Add(new Vector3(19.64524f, -2688.488f, 12.00685f));
                        MyHitB.Goon05.Add(new Vector3(48.12241f, -2689.036f, 12.00683f));
                        MyHitB.Goon05.Add(new Vector3(47.77153f, -2718.917f, 12.0066f));

                        MyHitB.Vstart = new Vector3(59.60139f, -2637.591f, 5.029f);

                        Vector3 vSteps = new Vector3(45.138f, -2723.31f, 5.00f);
                        Vector3 vStepsR = new Vector3(0.00f, 0.00f, -91.0648f);
                        BuildProp("prop_portasteps_02", vSteps, vStepsR, true, false);
                        iMobStarz = 6;

                        MyHitB.FUbstop = new Vector3(59.46093f, -2619.733f, 5.504735f);
                    }
                    else if (iMishWop == 2)
                    {
                        MyHitB.Goon05.Add(new Vector3(322.4924f, -1549.453f, 36.29724f));
                        MyHitB.Goon04.Add(new Vector3(332.1236f, -1593.688f, 29.29193f));
                        MyHitB.Goon03.Add(new Vector3(309.5382f, -1565.522f, 36.28808f));
                        MyHitB.Goon02 = new Vector3(346.4529f, -1569.449f, 36.27796f); MyHitB.Goon02Dir = 318.1562f;
                        MyHitB.Goon01 = new Vector3(324.7176f, -1585.714f, 32.71544f); MyHitB.Goon01Dir = 138.8346f;
                        MyHitB.Vboss = new Vector3(326.7136f, -1583.937f, 36.29747f); MyHitB.BossDir = 138.74f;

                        MyHitB.Goon03.Add(new Vector3(309.5382f, -1565.522f, 36.28808f));
                        MyHitB.Goon03.Add(new Vector3(330.5859f, -1582.785f, 36.28808f));

                        MyHitB.Goon04.Add(new Vector3(301.2746f, -1567.027f, 29.3291f));
                        MyHitB.Goon04.Add(new Vector3(323.8167f, -1539.903f, 29.28773f));
                        MyHitB.Goon04.Add(new Vector3(355.2028f, -1566.285f, 29.29217f));
                        MyHitB.Goon04.Add(new Vector3(332.1236f, -1593.688f, 29.29193f));

                        MyHitB.Goon05.Add(new Vector3(346.3667f, -1569.814f, 36.27857f));
                        MyHitB.Goon05.Add(new Vector3(335.5739f, -1582.018f, 36.28791f));
                        MyHitB.Goon05.Add(new Vector3(345.8018f, -1569.149f, 36.27539f));
                        MyHitB.Goon05.Add(new Vector3(322.4924f, -1549.453f, 36.29724f));

                        MyHitB.Vstart = new Vector3(379.8796f, -1638.833f, 31.50078f); //-- Start Point.

                        iMobStarz = 31;

                        MyHitB.FUbstop = new Vector3(408.8784f, -1674.746f, 28.64179f);
                    }
                    else if (iMishWop == 3)
                    {
                        MyHitB.Goon05.Add(new Vector3(180.4981f, -2234.048f, 5.980174f));
                        MyHitB.Goon04.Add(new Vector3(179.8964f, -2232.37f, 5.97946f));
                        MyHitB.Goon03.Add(new Vector3(95.33917f, -2190.859f, 5.997694f));
                        MyHitB.Goon02 = new Vector3(168.4527f, -2223.325f, 7.236109f); MyHitB.Goon02Dir = 150.681f;
                        MyHitB.Goon01 = new Vector3(167.09f, -2221.467f, 13.38672f); MyHitB.Goon01Dir = 174.5936f;
                        MyHitB.Vboss = new Vector3(166.1355f, -2213.007f, 13.38672f); MyHitB.BossDir = 352.9091f;

                        MyHitB.Goon03.Add(new Vector3(175.1628f, -2189.65f, 6.219862f));
                        MyHitB.Goon03.Add(new Vector3(95.33917f, -2190.859f, 5.997694f));

                        MyHitB.Goon04.Add(new Vector3(92.0293f, -2231.113f, 6.033323f));
                        MyHitB.Goon04.Add(new Vector3(179.8964f, -2232.37f, 5.97946f));

                        MyHitB.Goon05.Add(new Vector3(179.9824f, -2191.904f, 6.513243f));
                        MyHitB.Goon05.Add(new Vector3(180.4981f, -2234.048f, 5.980174f));

                        MyHitB.Vstart = new Vector3(231.6781f, -2188.885f, 7.87558f); //-- Start Point.

                        iMobStarz = 8;

                        MyHitB.FUbstop = new Vector3(239.7962f, -2096.332f, 16.64877f);
                    }
                    else
                    {
                        MyHitB.Goon05.Add(new Vector3(820.2464f, -2506.051f, 37.43614f));
                        MyHitB.Goon04.Add(new Vector3(949.2033f, -2522.715f, 48.29663f));
                        MyHitB.Goon03.Add(new Vector3(881.1595f, -2501.313f, 48.29713f));
                        MyHitB.Goon02 = new Vector3(874.5434f, -2500.339f, 48.28411f); MyHitB.Goon02Dir = 220.1823f;
                        MyHitB.Goon01 = new Vector3(894.6924f, -2538.095f, 52.30277f); MyHitB.Goon01Dir = 225.5563f;
                        MyHitB.Vboss = new Vector3(866.3467f, -2506.64f, 48.31793f); MyHitB.BossDir = 262.1452f;

                        MyHitB.Goon03.Add(new Vector3(951.6783f, -2507.288f, 48.29662f));
                        MyHitB.Goon03.Add(new Vector3(881.1595f, -2501.313f, 48.29713f));

                        MyHitB.Goon04.Add(new Vector3(883.374f, -2516.431f, 48.2971f));
                        MyHitB.Goon04.Add(new Vector3(949.2033f, -2522.715f, 48.29663f));

                        MyHitB.Goon05.Add(new Vector3(820.2464f, -2506.051f, 36.43614f));
                        MyHitB.Goon05.Add(new Vector3(843.4808f, -2508.547f, 36.59108f));
                        MyHitB.Goon05.Add(new Vector3(844.4509f, -2501.387f, 40.51944f));
                        MyHitB.Goon05.Add(new Vector3(849.8228f, -2501.901f, 40.68602f));
                        MyHitB.Goon05.Add(new Vector3(847.6412f, -2523.593f, 40.5252f));
                        MyHitB.Goon05.Add(new Vector3(849.8228f, -2501.901f, 40.68602f));
                        MyHitB.Goon05.Add(new Vector3(844.4509f, -2501.387f, 40.51944f));
                        MyHitB.Goon05.Add(new Vector3(843.4808f, -2508.547f, 36.59108f));

                        MyHitB.Vstart = new Vector3(801.6285f, -2496.214f, 21.14066f); //-- Start Point.

                        iMobStarz = 1;

                        MyHitB.FUbstop = new Vector3(764.6891f, -2490.405f, 19.42806f);
                    }

                    sMissionVar_01 = RandNPC(iMobStarz);
                }
                else if (iLocationX == 2)
                {
                    if (iAssMissionList[1] > 4)
                        iMishWop = RandInt(0, 4);
                    else
                        iMishWop = iAssMissionList[1];

                    if (iMishWop == 0)
                    {
                        MyHitB.Goon05.Add(new Vector3(472.6585f, -808.6378f, 42.5186f));
                        MyHitB.Goon04.Add(new Vector3(469.6671f, -751.8098f, 37.37757f));
                        MyHitB.Goon03.Add(new Vector3(455.6923f, -772.2094f, 27.35778f));
                        MyHitB.Goon02 = new Vector3(456.881f, -725.7477f, 27.35909f); MyHitB.Goon02Dir = 356.1181f;
                        MyHitB.Goon01 = new Vector3(462.9327f, -736.3919f, 27.3614f); MyHitB.Goon01Dir = 159.2728f;
                        MyHitB.Vboss = new Vector3(463.3673f, -730.1653f, 27.35761f); MyHitB.BossDir = 88.53651f;

                        MyHitB.Goon03.Add(new Vector3(456.7629f, -702.7166f, 27.36512f));
                        MyHitB.Goon03.Add(new Vector3(455.6923f, -772.2094f, 27.35778f));

                        MyHitB.Goon04.Add(new Vector3(469.4762f, -737.4404f, 37.37773f));
                        MyHitB.Goon04.Add(new Vector3(487.7828f, -737.6826f, 37.37757f));
                        MyHitB.Goon04.Add(new Vector3(487.3804f, -750.106f, 37.37757f));
                        MyHitB.Goon04.Add(new Vector3(469.6671f, -751.8098f, 37.37757f));

                        MyHitB.Goon05.Add(new Vector3(472.7426f, -786.6891f, 42.5186f));
                        MyHitB.Goon05.Add(new Vector3(472.6585f, -808.6378f, 42.5186f));

                        MyHitB.Vstart = new Vector3(416.3363f, -713.1559f, 28.354f); //-- Start Point.

                        iMobStarz = 7;
                        MyHitB.FUbstop = new Vector3(400.7948f, -728.7968f, 28.64635f);
                    }
                    else if (iMishWop == 1)
                    {
                        MyHitB.Goon05.Add(new Vector3(65.09759f, -390.6096f, 39.92027f));
                        MyHitB.Goon04.Add(new Vector3(65.80093f, -345.8131f, 67.19714f));
                        MyHitB.Goon03.Add(new Vector3(47.5579f, -398.3995f, 73.94062f));
                        MyHitB.Goon02 = new Vector3(46.32808f, -417.696f, 45.55898f); MyHitB.Goon02Dir = 250.7595f;
                        MyHitB.Goon01 = new Vector3(45.11557f, -402.7439f, 55.28497f); MyHitB.Goon01Dir = 109.7192f;
                        MyHitB.Vboss = new Vector3(36.69075f, -368.9121f, 55.28428f); MyHitB.BossDir = 341.8449f;

                        MyHitB.Goon03.Add(new Vector3(46.80554f, -411.3244f, 73.94062f));
                        MyHitB.Goon03.Add(new Vector3(59.13193f, -382.0238f, 73.94208f));
                        MyHitB.Goon03.Add(new Vector3(54.37819f, -375.5727f, 73.94208f));
                        MyHitB.Goon03.Add(new Vector3(58.97313f, -383.6569f, 73.94208f));
                        MyHitB.Goon03.Add(new Vector3(47.5579f, -398.3995f, 73.94062f));

                        MyHitB.Goon04.Add(new Vector3(89.48793f, -355.7539f, 67.19714f));
                        MyHitB.Goon04.Add(new Vector3(65.80093f, -345.8131f, 67.19714f));

                        MyHitB.Goon05.Add(new Vector3(52.64137f, -427.5997f, 39.9211f));
                        MyHitB.Goon05.Add(new Vector3(33.33545f, -419.8749f, 39.92244f));
                        MyHitB.Goon05.Add(new Vector3(47.21172f, -383.8306f, 39.92105f));
                        MyHitB.Goon05.Add(new Vector3(65.09759f, -390.6096f, 39.92027f));

                        MyHitB.Vstart = new Vector3(118.4199f, -362.7799f, 41.58885f); //-- Start Point.

                        Vector3 PropX = new Vector3(44.1962852f, -375.137268f, 54.2930298f);
                        Vector3 PropR = new Vector3(0.00f, 0.00f, -109.909622f);
                        BuildProp("prop_portacabin01", PropX, PropR, true, true);

                        PropX = new Vector3(67.2774124f, -357.792114f, 66.3006134f);
                        PropR = new Vector3(-90.00f, -71.00f, 0.00f);
                        BuildProp("prop_const_fence03a_cr", PropX, PropR, true, true);

                        PropX = new Vector3(61.1067352f, -370.916534f, 63.9689331f);
                        PropR = new Vector3(-89.00f, 109.711678f, -180.00f);
                        BuildProp("prop_const_fence03a_cr", PropX, PropR, true, true);

                        PropX = new Vector3(58.0884781f, -375.2005f, 64.1185989f);
                        PropR = new Vector3(0.00f, 0.00f, -19.1175747f);
                        BuildProp("prop_conc_blocks01a", PropX, PropR, true, true);

                        PropX = new Vector3(68.0418549f, -351.828827f, 66.3754883f);
                        PropR = new Vector3(-13.00f, -4.38115f, -18.9079647f);
                        BuildProp("prop_conc_blocks01a", PropX, PropR, true, true);

                        iMobStarz = 50;

                        MyHitB.FUbstop = new Vector3(146.7832f, -350.9908f, 43.03316f);
                    }
                    else if (iMishWop == 2)
                    {
                        MyHitB.Goon05.Add(new Vector3(-830.2202f, -1181.61f, 6.563109f));
                        MyHitB.Goon04.Add(new Vector3(-807.8983f, -1250.295f, 15.55804f));
                        MyHitB.Goon03.Add(new Vector3(-748.4064f, -1243.806f, 10.62637f));
                        MyHitB.Goon02 = new Vector3(-749.2515f, -1215.959f, 10.62637f); MyHitB.Goon02Dir = 250.1729f;
                        MyHitB.Goon01 = new Vector3(-769.4945f, -1224.638f, 10.62638f); MyHitB.Goon01Dir = 196.7793f;
                        MyHitB.Vboss = new Vector3(-797.2293f, -1263.064f, 10.62328f); MyHitB.BossDir = 267.6799f;

                        MyHitB.Goon03.Add(new Vector3(-750.7853f, -1242.718f, 10.62638f));
                        MyHitB.Goon03.Add(new Vector3(-768.506f, -1226.165f, 10.62637f));
                        MyHitB.Goon03.Add(new Vector3(-774.0214f, -1231.924f, 10.62399f));
                        MyHitB.Goon03.Add(new Vector3(-771.0255f, -1234.603f, 10.62399f));
                        MyHitB.Goon03.Add(new Vector3(-774.5523f, -1231.954f, 10.62399f));
                        MyHitB.Goon03.Add(new Vector3(-768.0485f, -1226.437f, 10.62637f));
                        MyHitB.Goon03.Add(new Vector3(-748.4064f, -1243.806f, 10.62637f));

                        MyHitB.Goon04.Add(new Vector3(-797.392f, -1258.829f, 15.55804f));
                        MyHitB.Goon04.Add(new Vector3(-783.0823f, -1241.732f, 15.55848f));
                        MyHitB.Goon04.Add(new Vector3(-796.5568f, -1259.465f, 15.55804f));
                        MyHitB.Goon04.Add(new Vector3(-807.8983f, -1250.295f, 15.55804f));

                        MyHitB.Goon05.Add(new Vector3(-806.1038f, -1202.531f, 6.934639f));
                        MyHitB.Goon05.Add(new Vector3(-823.16f, -1223.631f, 7.36058f));
                        MyHitB.Goon05.Add(new Vector3(-838.9916f, -1241.554f, 6.933933f));
                        MyHitB.Goon05.Add(new Vector3(-821.95f, -1221.632f, 7.329305f));
                        MyHitB.Goon05.Add(new Vector3(-805.6579f, -1201.917f, 6.934637f));
                        MyHitB.Goon05.Add(new Vector3(-830.2202f, -1181.61f, 6.563109f));

                        MyHitB.Vstart = new Vector3(-821.5909f, -1267.316f, 4.150073f); //-- Start Point.

                        Vector3 PropX = new Vector3(-815.161377f, -1204.63574f, 5.95f);
                        Vector3 PropR = new Vector3(0.00f, 0.00f, -129.962433f);
                        BuildProp("prop_lev_crate_01", PropX, PropR, true, true);

                        PropX = new Vector3(-817.414551f, -1207.32458f, 5.95f);
                        PropR = new Vector3(0.00f, 0.00f, 129.962433f);
                        BuildProp("prop_lev_crate_01", PropX, PropR, true, true);

                        PropX = new Vector3(-816.227905f, -1206.00659f, 8.26f);
                        PropR = new Vector3(0.00f, 0.00f, -130.349335f);
                        BuildProp("prop_lev_crate_01", PropX, PropR, true, true);

                        iMobStarz = 38;

                        MyHitB.FUbstop = new Vector3(-766.8001f, -1299.866f, 4.492908f);
                    }
                    else if (iMishWop == 3)
                    {
                        MyHitB.Goon05.Add(new Vector3(-277.645f, -308.2796f, 18.29003f));
                        MyHitB.Goon04.Add(new Vector3(-292.5435f, -304.275f, 10.06316f));
                        MyHitB.Goon03.Add(new Vector3(-297.4647f, -296.5092f, 10.06316f));
                        MyHitB.Goon02 = new Vector3(-285.6105f, -338.2589f, 18.28811f); MyHitB.Goon02Dir = 134.0289f;
                        MyHitB.Goon01 = new Vector3(-296.5644f, -294.7615f, 10.06316f); MyHitB.Goon01Dir = 182.6955f;
                        MyHitB.Vboss = new Vector3(-291.7663f, -292.7603f, 10.06316f); MyHitB.BossDir = 199.104f;

                        MyHitB.Goon03.Add(new Vector3(-289.8233f, -297.2211f, 10.06316f));
                        MyHitB.Goon03.Add(new Vector3(-290.0239f, -312.5032f, 10.06316f));
                        MyHitB.Goon03.Add(new Vector3(-290.5504f, -353.0921f, 10.0631f));
                        MyHitB.Goon03.Add(new Vector3(-292.1029f, -359.7104f, 10.0631f));
                        MyHitB.Goon03.Add(new Vector3(-295.4711f, -361.8761f, 10.0631f));
                        MyHitB.Goon03.Add(new Vector3(-298.9847f, -358.6346f, 10.0631f));
                        MyHitB.Goon03.Add(new Vector3(-299.1021f, -311.0461f, 10.06316f));
                        MyHitB.Goon03.Add(new Vector3(-297.4647f, -296.5092f, 10.06316f));

                        MyHitB.Goon04.Add(new Vector3(-295.0848f, -310.6173f, 10.06316f));
                        MyHitB.Goon04.Add(new Vector3(-296.6198f, -310.4763f, 10.06316f));
                        MyHitB.Goon04.Add(new Vector3(-296.5306f, -326.6769f, 18.28813f));
                        MyHitB.Goon04.Add(new Vector3(-297.6626f, -332.7889f, 18.28813f));
                        MyHitB.Goon04.Add(new Vector3(-296.6054f, -337.818f, 18.294f));
                        MyHitB.Goon04.Add(new Vector3(-296.5121f, -353.4188f, 10.0631f));
                        MyHitB.Goon04.Add(new Vector3(-292.8206f, -353.284f, 10.0631f));
                        MyHitB.Goon04.Add(new Vector3(-292.6532f, -336.6879f, 18.28812f));
                        MyHitB.Goon04.Add(new Vector3(-291.6863f, -331.7599f, 18.28812f));
                        MyHitB.Goon04.Add(new Vector3(-292.7159f, -327.2827f, 18.28813f));
                        MyHitB.Goon04.Add(new Vector3(-292.5435f, -304.275f, 10.06316f));

                        MyHitB.Goon05.Add(new Vector3(-278.4434f, -331.541f, 18.28813f));
                        MyHitB.Goon05.Add(new Vector3(-285.9347f, -331.1507f, 18.28813f));
                        MyHitB.Goon05.Add(new Vector3(-278.8092f, -330.1296f, 18.28813f));
                        MyHitB.Goon05.Add(new Vector3(-278.6689f, -316.9438f, 18.28978f));
                        MyHitB.Goon05.Add(new Vector3(-277.645f, -308.2796f, 18.29003f));

                        MyHitB.Vstart = new Vector3(-246.1797f, -336.1305f, 28.97524f); //-- Start Point.

                        iMobStarz = 9;

                        MyHitB.FUbstop = new Vector3(-255.8934f, -334.3924f, 29.29095f);
                    }
                    else
                    {
                        MyHitB.Goon05.Add(new Vector3(-1849.297f, -1231.631f, 13.01728f));
                        MyHitB.Goon04.Add(new Vector3(-1830.23f, -1234.019f, 13.01734f));
                        MyHitB.Goon03.Add(new Vector3(-1870.061f, -1208.122f, 13.01711f));
                        MyHitB.Goon02 = new Vector3(-1837.848f, -1201.714f, 14.30476f); MyHitB.Goon02Dir = 166.2297f;
                        MyHitB.Goon01 = new Vector3(-1821.772f, -1203.717f, 19.16464f); MyHitB.Goon01Dir = 132.5266f;
                        MyHitB.Vboss = new Vector3(-1848.826f, -1200.298f, 19.14339f); MyHitB.BossDir = 165.824f;

                        MyHitB.Goon03.Add(new Vector3(-1870.086f, -1215.344f, 13.01713f));
                        MyHitB.Goon03.Add(new Vector3(-1858.132f, -1217.874f, 13.01717f));
                        MyHitB.Goon03.Add(new Vector3(-1840.758f, -1231.264f, 13.01732f));
                        MyHitB.Goon03.Add(new Vector3(-1833.656f, -1237.782f, 13.01729f));
                        MyHitB.Goon03.Add(new Vector3(-1819.635f, -1239.65f, 13.01727f));
                        MyHitB.Goon03.Add(new Vector3(-1788.522f, -1200.065f, 13.0173f));
                        MyHitB.Goon03.Add(new Vector3(-1824.51f, -1168.362f, 13.01732f));
                        MyHitB.Goon03.Add(new Vector3(-1836.096f, -1168.824f, 13.01725f));
                        MyHitB.Goon03.Add(new Vector3(-1870.061f, -1208.122f, 13.01711f));

                        MyHitB.Goon04.Add(new Vector3(-1833.688f, -1231.561f, 13.01734f));
                        MyHitB.Goon04.Add(new Vector3(-1836.393f, -1226.08f, 13.01728f));
                        MyHitB.Goon04.Add(new Vector3(-1808.704f, -1197.679f, 13.01745f));
                        MyHitB.Goon04.Add(new Vector3(-1803.548f, -1202.021f, 14.30476f));
                        MyHitB.Goon04.Add(new Vector3(-1803.025f, -1206.546f, 14.30477f));
                        MyHitB.Goon04.Add(new Vector3(-1799.925f, -1210.426f, 13.01728f));
                        MyHitB.Goon04.Add(new Vector3(-1805.519f, -1216.99f, 16.06497f));
                        MyHitB.Goon04.Add(new Vector3(-1812.613f, -1224.225f, 19.16972f));
                        MyHitB.Goon04.Add(new Vector3(-1821.701f, -1230.137f, 16.07651f));
                        MyHitB.Goon04.Add(new Vector3(-1830.23f, -1234.019f, 13.01734f));

                        MyHitB.Goon05.Add(new Vector3(-1849.402f, -1232.195f, 13.01728f));
                        MyHitB.Goon05.Add(new Vector3(-1841.599f, -1238.597f, 13.01727f));
                        MyHitB.Goon05.Add(new Vector3(-1829.071f, -1239.79f, 13.01727f));
                        MyHitB.Goon05.Add(new Vector3(-1807.84f, -1244.064f, 13.01744f));
                        MyHitB.Goon05.Add(new Vector3(-1823.396f, -1263.139f, 9.821608f));
                        MyHitB.Goon05.Add(new Vector3(-1832.576f, -1255.504f, 8.615788f));
                        MyHitB.Goon05.Add(new Vector3(-1851.096f, -1246.4f, 8.615793f));
                        MyHitB.Goon05.Add(new Vector3(-1858.264f, -1242.085f, 8.620294f));
                        MyHitB.Goon05.Add(new Vector3(-1849.297f, -1231.631f, 13.01728f));

                        MyHitB.Vstart = new Vector3(-1749.522f, -1128.634f, 12.09095f); //-- Start Point.

                        iMobStarz = 10;

                        MyHitB.FUbstop = new Vector3(-1637.61f, -990.769f, 12.50938f);
                    }

                    sMissionVar_01 = RandNPC(iMobStarz);
                }
                else if (iLocationX == 3)
                {
                    if (iAssMissionList[2] > 4)
                        iMishWop = RandInt(0, 4);
                    else
                        iMishWop = iAssMissionList[2];

                    if (iMishWop == 0)
                    {
                        MyHitB.Goon05.Add(new Vector3(-2193.282f, 235.5259f, 184.6018f));
                        MyHitB.Goon04.Add(new Vector3(-2223.777f, 276.0439f, 198.1041f));
                        MyHitB.Goon03.Add(new Vector3(-2202.147f, 211.6152f, 194.6015f));
                        MyHitB.Goon02 = new Vector3(-2175.842f, 230.6704f, 184.6018f); MyHitB.Goon02Dir = 91.44373f;
                        MyHitB.Goon01 = new Vector3(-2182.791f, 225.1664f, 184.6018f); MyHitB.Goon01Dir = 117.0788f;
                        MyHitB.Vboss = new Vector3(-2164.615f, 215.312f, 184.6018f); MyHitB.BossDir = 194.0452f;

                        MyHitB.Goon03.Add(new Vector3(-2193.12f, 214.8187f, 194.6015f));
                        MyHitB.Goon03.Add(new Vector3(-2187.273f, 200.6972f, 194.6015f));
                        MyHitB.Goon03.Add(new Vector3(-2195.246f, 197.4945f, 194.6015f));
                        MyHitB.Goon03.Add(new Vector3(-2202.147f, 211.6152f, 194.6015f));

                        MyHitB.Goon04.Add(new Vector3(-2205.943f, 284.1791f, 198.1042f));
                        MyHitB.Goon04.Add(new Vector3(-2190.154f, 249.9319f, 198.1042f));
                        MyHitB.Goon04.Add(new Vector3(-2193.155f, 248.5463f, 198.1042f));
                        MyHitB.Goon04.Add(new Vector3(-2195.564f, 254.7708f, 198.1041f));
                        MyHitB.Goon04.Add(new Vector3(-2211.713f, 247.9421f, 198.1041f));
                        MyHitB.Goon04.Add(new Vector3(-2223.777f, 276.0439f, 198.1041f));

                        MyHitB.Goon05.Add(new Vector3(-2181.586f, 241.0944f, 184.6015f));
                        MyHitB.Goon05.Add(new Vector3(-2183.65f, 247.7438f, 184.6018f));
                        MyHitB.Goon05.Add(new Vector3(-2167.301f, 254.9386f, 184.6014f));
                        MyHitB.Goon05.Add(new Vector3(-2162.183f, 251.9092f, 184.6014f));
                        MyHitB.Goon05.Add(new Vector3(-2151.097f, 223.4035f, 184.6018f));
                        MyHitB.Goon05.Add(new Vector3(-2158.881f, 219.6353f, 184.6018f));
                        MyHitB.Goon05.Add(new Vector3(-2175.402f, 216.5356f, 184.6018f));
                        MyHitB.Goon05.Add(new Vector3(-2181.213f, 225.0541f, 184.6017f));
                        MyHitB.Goon05.Add(new Vector3(-2188.713f, 223.2862f, 184.6018f));
                        MyHitB.Goon05.Add(new Vector3(-2192.207f, 230.9244f, 184.6018f));
                        MyHitB.Goon05.Add(new Vector3(-2193.282f, 235.5259f, 184.6018f));

                        MyHitB.Vstart = new Vector3(-2292.242f, 368.3256f, 173.6016f); //-- Start Point.

                        iMobStarz = 13;
                        MyHitB.FUbstop = new Vector3(-2289.002f, 382.1094f, 173.959f);
                    }
                    else if (iMishWop == 1)
                    {
                        MyHitB.Goon05.Add(new Vector3(-1684.6f, -209.7332f, 57.53469f));
                        MyHitB.Goon04.Add(new Vector3(-1708.826f, -240.1459f, 54.11729f));
                        MyHitB.Goon03.Add(new Vector3(-1690.386f, -217.1109f, 57.54454f));
                        MyHitB.Goon02 = new Vector3(-1697.421f, -233.6458f, 55.70928f); MyHitB.Goon02Dir = 2.999983f;
                        MyHitB.Goon01 = new Vector3(-1724.445f, -241.228f, 53.95118f); MyHitB.Goon01Dir = 98.57713f;
                        MyHitB.Vboss = new Vector3(-1719.305f, -235.0199f, 55.10064f); MyHitB.BossDir = 0.00f;

                        MyHitB.Goon03.Add(new Vector3(-1696.339f, -231.1925f, 56f));
                        MyHitB.Goon03.Add(new Vector3(-1692.168f, -214.6881f, 57.5444f));
                        MyHitB.Goon03.Add(new Vector3(-1716.279f, -215.0625f, 57.53803f));
                        MyHitB.Goon03.Add(new Vector3(-1734.436f, -211.6512f, 57.45734f));
                        MyHitB.Goon03.Add(new Vector3(-1738.01f, -242.2859f, 53.65525f));
                        MyHitB.Goon03.Add(new Vector3(-1730.969f, -259.2317f, 51.58413f));
                        MyHitB.Goon03.Add(new Vector3(-1707.515f, -241.5851f, 54.14204f));
                        MyHitB.Goon03.Add(new Vector3(-1695.752f, -231.155f, 56.06041f));
                        MyHitB.Goon03.Add(new Vector3(-1690.386f, -217.1109f, 57.54454f));

                        MyHitB.Goon04.Add(new Vector3(-1712.414f, -247.3833f, 53.19257f));
                        MyHitB.Goon04.Add(new Vector3(-1733.539f, -259.792f, 51.58722f));
                        MyHitB.Goon04.Add(new Vector3(-1738.586f, -236.0341f, 54.09969f));
                        MyHitB.Goon04.Add(new Vector3(-1732.834f, -211.2153f, 57.50314f));
                        MyHitB.Goon04.Add(new Vector3(-1741.738f, -203.749f, 57.49961f));
                        MyHitB.Goon04.Add(new Vector3(-1754.511f, -192.491f, 57.54516f));
                        MyHitB.Goon04.Add(new Vector3(-1785.649f, -219.863f, 52.15072f));
                        MyHitB.Goon04.Add(new Vector3(-1771.741f, -230.7688f, 52.77929f));
                        MyHitB.Goon04.Add(new Vector3(-1759.96f, -235.5635f, 53.00547f));
                        MyHitB.Goon04.Add(new Vector3(-1745.87f, -239.4451f, 53.40018f));
                        MyHitB.Goon04.Add(new Vector3(-1726.956f, -241.0094f, 53.91877f));
                        MyHitB.Goon04.Add(new Vector3(-1708.826f, -240.1459f, 54.11729f));

                        MyHitB.Goon05.Add(new Vector3(-1685.734f, -209.1683f, 57.529f));
                        MyHitB.Goon05.Add(new Vector3(-1700.192f, -214.8236f, 57.47515f));
                        MyHitB.Goon05.Add(new Vector3(-1720.822f, -213.317f, 57.54206f));
                        MyHitB.Goon05.Add(new Vector3(-1735.292f, -209.2518f, 57.47928f));
                        MyHitB.Goon05.Add(new Vector3(-1742.708f, -203.6408f, 57.46876f));
                        MyHitB.Goon05.Add(new Vector3(-1749.761f, -193.5887f, 57.54453f));
                        MyHitB.Goon05.Add(new Vector3(-1749.049f, -186.0264f, 57.54453f));
                        MyHitB.Goon05.Add(new Vector3(-1740.429f, -173.0496f, 57.811f));
                        MyHitB.Goon05.Add(new Vector3(-1732.955f, -168.3997f, 58.54979f));
                        MyHitB.Goon05.Add(new Vector3(-1716.589f, -166.9732f, 57.50301f));
                        MyHitB.Goon05.Add(new Vector3(-1709.482f, -163.2827f, 57.4664f));
                        MyHitB.Goon05.Add(new Vector3(-1702.274f, -152.3726f, 57.45462f));
                        MyHitB.Goon05.Add(new Vector3(-1691.398f, -158.583f, 57.6211f));
                        MyHitB.Goon05.Add(new Vector3(-1684.761f, -168.9742f, 57.49302f));
                        MyHitB.Goon05.Add(new Vector3(-1679.721f, -185.9232f, 57.53905f));
                        MyHitB.Goon05.Add(new Vector3(-1679.45f, -199.283f, 57.54282f));
                        MyHitB.Goon05.Add(new Vector3(-1684.6f, -209.7332f, 57.53469f));

                        MyHitB.Vstart = new Vector3(-1828.877f, -234.5518f, 39.79652f); //-- Start Point.

                        iMobStarz = 39;

                        MyHitB.FUbstop = new Vector3(-1842.027f, -237.2443f, 39.47428f);
                    }
                    else if (iMishWop == 2)
                    {
                        MyHitB.Goon05.Add(new Vector3(-1322.103f, 31.90036f, 53.53466f));
                        MyHitB.Goon04.Add(new Vector3(-1362.258f, 111.99f, 60.62912f));
                        MyHitB.Goon03.Add(new Vector3(-1400.993f, 90.64942f, 53.70214f));
                        MyHitB.Goon02 = new Vector3(-1326.336f, 59.92653f, 53.54417f); MyHitB.Goon02Dir = 270.3112f;
                        MyHitB.Goon01 = new Vector3(-1335.88f, 44.74322f, 55.24566f); MyHitB.Goon01Dir = 281.351f;
                        MyHitB.Vboss = new Vector3(-1338.219f, 40.63132f, 60.45979f); MyHitB.BossDir = 225.7309f;

                        MyHitB.Goon03.Add(new Vector3(-1399.9f, 66.3326f, 53.34227f));
                        MyHitB.Goon03.Add(new Vector3(-1393.094f, 14.19838f, 53.2293f));
                        MyHitB.Goon03.Add(new Vector3(-1382.317f, 16.93267f, 53.57621f));
                        MyHitB.Goon03.Add(new Vector3(-1378.956f, 16.70747f, 53.51094f));
                        MyHitB.Goon03.Add(new Vector3(-1373.589f, 13.51838f, 53.42646f));
                        MyHitB.Goon03.Add(new Vector3(-1366.751f, 23.72099f, 53.77364f));
                        MyHitB.Goon03.Add(new Vector3(-1355.669f, 21.30159f, 53.35223f));
                        MyHitB.Goon03.Add(new Vector3(-1339.363f, 23.18568f, 53.33221f));
                        MyHitB.Goon03.Add(new Vector3(-1334.062f, 24.8021f, 53.5796f));
                        MyHitB.Goon03.Add(new Vector3(-1335.095f, 39.26785f, 53.56892f));
                        MyHitB.Goon03.Add(new Vector3(-1337.551f, 44.55224f, 55.24564f));
                        MyHitB.Goon03.Add(new Vector3(-1341.005f, 59.07327f, 55.24566f));
                        MyHitB.Goon03.Add(new Vector3(-1339.755f, 57.23912f, 55.24565f));
                        MyHitB.Goon03.Add(new Vector3(-1340.758f, 72.91788f, 55.24566f));
                        MyHitB.Goon03.Add(new Vector3(-1338.594f, 73.87442f, 55.24635f));
                        MyHitB.Goon03.Add(new Vector3(-1339.579f, 80.82087f, 54.30826f));
                        MyHitB.Goon03.Add(new Vector3(-1341.292f, 83.82114f, 54.47037f));
                        MyHitB.Goon03.Add(new Vector3(-1343.281f, 106.0034f, 56.14111f));
                        MyHitB.Goon03.Add(new Vector3(-1345.647f, 126.3551f, 56.23872f));
                        MyHitB.Goon03.Add(new Vector3(-1355.008f, 144.4275f, 56.2575f));
                        MyHitB.Goon03.Add(new Vector3(-1379.028f, 142.8582f, 56.08464f));
                        MyHitB.Goon03.Add(new Vector3(-1385.638f, 140.1001f, 55.89283f));
                        MyHitB.Goon03.Add(new Vector3(-1384.781f, 108.8661f, 54.98751f));
                        MyHitB.Goon03.Add(new Vector3(-1391.122f, 106.8313f, 54.66446f));
                        MyHitB.Goon03.Add(new Vector3(-1394.105f, 105.338f, 54.43337f));
                        MyHitB.Goon03.Add(new Vector3(-1397.381f, 102.0704f, 54.08099f));
                        MyHitB.Goon03.Add(new Vector3(-1400.337f, 96.6853f, 53.79763f));
                        MyHitB.Goon03.Add(new Vector3(-1400.993f, 90.64942f, 53.70214f));

                        MyHitB.Goon04.Add(new Vector3(-1359.25f, 109.761f, 60.62912f));
                        MyHitB.Goon04.Add(new Vector3(-1358.956f, 100.3841f, 60.62912f));
                        MyHitB.Goon04.Add(new Vector3(-1358.079f, 94.08092f, 60.62912f));
                        MyHitB.Goon04.Add(new Vector3(-1364.079f, 94.70335f, 60.62912f));
                        MyHitB.Goon04.Add(new Vector3(-1364.38f, 108.2094f, 60.62912f));
                        MyHitB.Goon04.Add(new Vector3(-1362.258f, 111.99f, 60.62912f));

                        MyHitB.Goon05.Add(new Vector3(-1329.007f, 108.6033f, 56.48982f));
                        MyHitB.Goon05.Add(new Vector3(-1322.103f, 31.90036f, 53.53466f));

                        MyHitB.Vstart = new Vector3(-1297.746f, -29.46151f, 47.84842f); //-- Start Point.

                        iMobStarz = 46;

                        MyHitB.FUbstop = new Vector3(-1321.412f, -32.89452f, 48.9683f);
                    }
                    else if (iMishWop == 3)
                    {
                        MyHitB.Goon05.Add(new Vector3(-1917.792f, 2076.364f, 140.3837f));
                        MyHitB.Goon04.Add(new Vector3(-1903.96f, 2091.038f, 140.3857f));
                        MyHitB.Goon03.Add(new Vector3(-1903.564f, 2092.86f, 140.3861f));
                        MyHitB.Goon02 = new Vector3(-1874.738f, 2089.304f, 140.9944f); MyHitB.Goon02Dir = 319.0304f;
                        MyHitB.Goon01 = new Vector3(-1854.385f, 2068.078f, 141.0906f); MyHitB.Goon01Dir = 173.2433f;
                        MyHitB.Vboss = new Vector3(-1901.163f, 2092.905f, 140.3887f); MyHitB.BossDir = 13.10736f;

                        MyHitB.Goon03.Add(new Vector3(-1917.044f, 2076.618f, 140.3836f));
                        MyHitB.Goon03.Add(new Vector3(-1903.564f, 2092.86f, 140.3861f));

                        MyHitB.Goon04.Add(new Vector3(-1879.473f, 2091.383f, 140.9938f));
                        MyHitB.Goon04.Add(new Vector3(-1863.216f, 2082.07f, 140.9942f));
                        MyHitB.Goon04.Add(new Vector3(-1865.948f, 2071.529f, 140.9967f));
                        MyHitB.Goon04.Add(new Vector3(-1883.579f, 2075.255f, 140.9974f));
                        MyHitB.Goon04.Add(new Vector3(-1903.96f, 2091.038f, 140.3857f));

                        MyHitB.Goon05.Add(new Vector3(-1897.665f, 2058.754f, 140.9139f));
                        MyHitB.Goon05.Add(new Vector3(-1917.792f, 2076.364f, 140.3837f));

                        MyHitB.Vstart = new Vector3(-1885.544f, 1965.577f, 143.0124f); //-- Start Point.

                        iMobStarz = 29;

                        MyHitB.FUbstop = new Vector3(-1864.986f, 1959.259f, 143.7409f);
                    }
                    else
                    {
                        MyHitB.Goon05.Add(new Vector3(-3023.458f, 53.66692f, 11.60313f));
                        MyHitB.Goon04.Add(new Vector3(-2963.148f, 52.59982f, 11.6085f));
                        MyHitB.Goon03.Add(new Vector3(-3008.228f, 12.22274f, 7.085264f));
                        MyHitB.Goon02 = new Vector3(-3035.323f, 61.27785f, 11.60313f); MyHitB.Goon02Dir = 67.78362f;
                        MyHitB.Goon01 = new Vector3(-3017.087f, 47.91266f, 11.60312f); MyHitB.Goon01Dir = 150.8523f;
                        MyHitB.Vboss = new Vector3(-3029.618f, 60.41986f, 16.11314f); MyHitB.BossDir = 111.0933f;

                        MyHitB.Goon03.Add(new Vector3(-3016.97f, 16.51763f, 6.705266f));
                        MyHitB.Goon03.Add(new Vector3(-3031.105f, 23.01101f, 10.11841f));
                        MyHitB.Goon03.Add(new Vector3(-3025.127f, 35.15769f, 10.11779f));
                        MyHitB.Goon03.Add(new Vector3(-3026.633f, 37.19355f, 10.11778f));
                        MyHitB.Goon03.Add(new Vector3(-3024.499f, 43.38901f, 10.11779f));
                        MyHitB.Goon03.Add(new Vector3(-3020.429f, 52.10837f, 11.60314f));
                        MyHitB.Goon03.Add(new Vector3(-3002.373f, 42.45235f, 11.6302f));
                        MyHitB.Goon03.Add(new Vector3(-2999.926f, 45.96546f, 11.6085f));
                        MyHitB.Goon03.Add(new Vector3(-2996.425f, 44.29176f, 11.606f));
                        MyHitB.Goon03.Add(new Vector3(-2998.59f, 38.51485f, 8.603334f));
                        MyHitB.Goon03.Add(new Vector3(-2995.228f, 37.27494f, 7.958846f));
                        MyHitB.Goon03.Add(new Vector3(-3008.228f, 12.22274f, 7.085264f));

                        MyHitB.Goon04.Add(new Vector3(-2962.402f, 55.89622f, 11.6085f));
                        MyHitB.Goon04.Add(new Vector3(-2967.744f, 64.93795f, 11.6085f));
                        MyHitB.Goon04.Add(new Vector3(-2968.336f, 71.34634f, 11.53587f));
                        MyHitB.Goon04.Add(new Vector3(-2963.681f, 74.33125f, 11.39804f));
                        MyHitB.Goon04.Add(new Vector3(-2939.467f, 63.2231f, 12.27784f));
                        MyHitB.Goon04.Add(new Vector3(-2924.334f, 55.33182f, 11.04195f));
                        MyHitB.Goon04.Add(new Vector3(-2924.985f, 46.85469f, 11.60516f));
                        MyHitB.Goon04.Add(new Vector3(-2930.876f, 34.74577f, 11.60752f));
                        MyHitB.Goon04.Add(new Vector3(-2937.264f, 19.42201f, 11.61003f));
                        MyHitB.Goon04.Add(new Vector3(-2987.228f, 42.28254f, 11.60849f));
                        MyHitB.Goon04.Add(new Vector3(-2988.122f, 40.62498f, 11.60306f));
                        MyHitB.Goon04.Add(new Vector3(-2999.879f, 45.80571f, 11.6085f));
                        MyHitB.Goon04.Add(new Vector3(-3003.888f, 42.82432f, 11.62649f));
                        MyHitB.Goon04.Add(new Vector3(-3033.602f, 59.71888f, 11.60313f));
                        MyHitB.Goon04.Add(new Vector3(-3064.749f, 92.10178f, 11.60836f));
                        MyHitB.Goon04.Add(new Vector3(-3060.458f, 97.07211f, 12.15885f));
                        MyHitB.Goon04.Add(new Vector3(-3047.299f, 107.7877f, 12.34625f));
                        MyHitB.Goon04.Add(new Vector3(-3026.591f, 90.21472f, 12.34663f));
                        MyHitB.Goon04.Add(new Vector3(-3023.905f, 87.06458f, 11.65143f));
                        MyHitB.Goon04.Add(new Vector3(-3017.124f, 81.91355f, 11.6752f));
                        MyHitB.Goon04.Add(new Vector3(-3011.966f, 82.15981f, 11.68586f));
                        MyHitB.Goon04.Add(new Vector3(-3003.249f, 83.73952f, 11.59328f));
                        MyHitB.Goon04.Add(new Vector3(-2983.661f, 72.34309f, 11.57396f));
                        MyHitB.Goon04.Add(new Vector3(-2975.731f, 63.75891f, 11.6085f));
                        MyHitB.Goon04.Add(new Vector3(-2976.61f, 59.97843f, 11.6085f));
                        MyHitB.Goon04.Add(new Vector3(-2963.148f, 52.59982f, 11.6085f));

                        MyHitB.Goon05.Add(new Vector3(-3035.562f, 61.8787f, 11.60313f));
                        MyHitB.Goon05.Add(new Vector3(-3030.359f, 72.34447f, 12.90223f));
                        MyHitB.Goon05.Add(new Vector3(-3032.417f, 75.52391f, 12.90223f));
                        MyHitB.Goon05.Add(new Vector3(-3040.525f, 75.92637f, 12.81855f));
                        MyHitB.Goon05.Add(new Vector3(-3061.576f, 96.1216f, 12.15868f));
                        MyHitB.Goon05.Add(new Vector3(-3050.11f, 107.5771f, 12.34624f));
                        MyHitB.Goon05.Add(new Vector3(-3064.66f, 91.81219f, 11.60813f));
                        MyHitB.Goon05.Add(new Vector3(-3031.909f, 58.83051f, 11.60313f));
                        MyHitB.Goon05.Add(new Vector3(-3023.458f, 53.66692f, 11.60313f));

                        MyHitB.Vstart = new Vector3(-2890.587f, -6.512034f, 6.963f); //-- Start Point.

                        iMobStarz = 12;

                        MyHitB.FUbstop = new Vector3(-2831.061f, 38.20364f, 14.14951f);
                    }

                    sMissionVar_01 = RandNPC(iMobStarz);
                }
                else if (iLocationX == 4)
                {
                    if (iAssMissionList[3] > 4)
                        iMishWop = RandInt(0, 4);
                    else
                        iMishWop = iAssMissionList[3];

                    if (iMishWop == 0)
                    {
                        MyHitB.Goon05.Add(new Vector3(1252.049f, 320.0551f, 85.9905f));
                        MyHitB.Goon04.Add(new Vector3(1272.008f, 340.5941f, 81.99088f));
                        MyHitB.Goon03.Add(new Vector3(1250.756f, 306.1347f, 81.99088f));
                        MyHitB.Goon02 = new Vector3(1266.325f, 331.7076f, 81.99087f); MyHitB.Goon02Dir = 141.3652f;
                        MyHitB.Goon01 = new Vector3(1248.288f, 313.2198f, 85.99055f); MyHitB.Goon01Dir = 81.07424f;
                        MyHitB.Vboss = new Vector3(1257.96f, 307.1272f, 85.99054f); MyHitB.BossDir = 147.3938f;

                        MyHitB.Goon03.Add(new Vector3(1274.831f, 340.8813f, 81.99088f));
                        MyHitB.Goon03.Add(new Vector3(1292.302f, 325.9212f, 81.99088f));
                        MyHitB.Goon03.Add(new Vector3(1269.854f, 294.8071f, 81.99088f));
                        MyHitB.Goon03.Add(new Vector3(1250.756f, 306.1347f, 81.99088f));

                        MyHitB.Goon04.Add(new Vector3(1250.677f, 306.6872f, 81.99088f));
                        MyHitB.Goon04.Add(new Vector3(1229.07f, 320.3226f, 81.99088f));
                        MyHitB.Goon04.Add(new Vector3(1252.581f, 352.3154f, 81.99088f));
                        MyHitB.Goon04.Add(new Vector3(1272.008f, 340.5941f, 81.99088f));

                        MyHitB.Goon05.Add(new Vector3(1261.513f, 335.7514f, 85.99055f));
                        MyHitB.Goon05.Add(new Vector3(1271.821f, 328.9999f, 85.99055f));
                        MyHitB.Goon05.Add(new Vector3(1262.331f, 313.6626f, 85.99058f));
                        MyHitB.Goon05.Add(new Vector3(1252.049f, 320.0551f, 85.9905f));

                        MyHitB.Vstart = new Vector3(1149.714f, 280.4417f, 80.12628f); //-- Start Point.

                        iMobStarz = 2;
                        MyHitB.FUbstop = new Vector3(1102.137f, 259.7896f, 80.34773f);
                    }
                    else if (iMishWop == 1)
                    {
                        MyHitB.Goon05.Add(new Vector3(2749.39f, 1487.837f, 30.79178f));
                        MyHitB.Goon04.Add(new Vector3(2737.501f, 1464.713f, 38.28245f));
                        MyHitB.Goon03.Add(new Vector3(2716.034f, 1503.323f, 42.24905f));
                        MyHitB.Goon02 = new Vector3(2739.402f, 1489.967f, 45.29512f); MyHitB.Goon02Dir = 72.30518f;
                        MyHitB.Goon01 = new Vector3(2715.213f, 1502.91f, 42.24908f); MyHitB.Goon01Dir = 147.3279f;
                        MyHitB.Vboss = new Vector3(2710.728f, 1513.976f, 44.46539f); MyHitB.BossDir = 83.04913f;

                        MyHitB.Goon03.Add(new Vector3(2716.129f, 1504.041f, 42.24908f));
                        MyHitB.Goon03.Add(new Vector3(2716.006f, 1500.687f, 42.24792f));
                        MyHitB.Goon03.Add(new Vector3(2713.639f, 1490.468f, 42.24908f));
                        MyHitB.Goon03.Add(new Vector3(2727.346f, 1486.386f, 42.24928f));
                        MyHitB.Goon03.Add(new Vector3(2733.738f, 1484.581f, 45.29513f));
                        MyHitB.Goon03.Add(new Vector3(2733.411f, 1481.977f, 45.29577f));
                        MyHitB.Goon03.Add(new Vector3(2737.539f, 1481.092f, 45.29577f));
                        MyHitB.Goon03.Add(new Vector3(2742.041f, 1498.155f, 45.31561f));
                        MyHitB.Goon03.Add(new Vector3(2738.764f, 1504.34f, 45.29539f));
                        MyHitB.Goon03.Add(new Vector3(2741.372f, 1514.76f, 45.29513f));
                        MyHitB.Goon03.Add(new Vector3(2735.535f, 1516.769f, 42.24856f));
                        MyHitB.Goon03.Add(new Vector3(2720.756f, 1520.449f, 42.24905f));
                        MyHitB.Goon03.Add(new Vector3(2716.034f, 1503.323f, 42.24905f));

                        MyHitB.Goon04.Add(new Vector3(2742.201f, 1481.54f, 38.28428f));
                        MyHitB.Goon04.Add(new Vector3(2742.236f, 1484.91f, 38.2868f));
                        MyHitB.Goon04.Add(new Vector3(2744.685f, 1493.659f, 38.28878f));
                        MyHitB.Goon04.Add(new Vector3(2745.892f, 1496.063f, 38.28703f));
                        MyHitB.Goon04.Add(new Vector3(2750.488f, 1511.828f, 38.28703f));
                        MyHitB.Goon04.Add(new Vector3(2746.019f, 1496.152f, 38.28718f));
                        MyHitB.Goon04.Add(new Vector3(2744.494f, 1493.08f, 38.2868f));
                        MyHitB.Goon04.Add(new Vector3(2741.634f, 1483.431f, 38.29844f));
                        MyHitB.Goon04.Add(new Vector3(2742.239f, 1481.693f, 38.28377f));
                        MyHitB.Goon04.Add(new Vector3(2737.501f, 1464.713f, 38.28245f));

                        MyHitB.Goon05.Add(new Vector3(2756.688f, 1486.927f, 30.79179f));
                        MyHitB.Goon05.Add(new Vector3(2780.408f, 1575.894f, 30.79191f));
                        MyHitB.Goon05.Add(new Vector3(2773.795f, 1577.714f, 30.79192f));
                        MyHitB.Goon05.Add(new Vector3(2749.39f, 1487.837f, 30.79178f));

                        MyHitB.Vstart = new Vector3(2747.758f, 1559.025f, 23.50097f); //-- Start Point.

                        iMobStarz = 47;

                        MyHitB.FUbstop = new Vector3(2685.917f, 1610.47f, 24.07866f);
                    }
                    else if (iMishWop == 2)
                    {
                        MyHitB.Goon05.Add(new Vector3(2502.197f, -428.9225f, 114.0905f));
                        MyHitB.Goon04.Add(new Vector3(2512.221f, -352.3284f, 114.0875f));
                        MyHitB.Goon03.Add(new Vector3(2473.686f, -348.1714f, 109.5219f));
                        MyHitB.Goon02 = new Vector3(2495.181f, -401.2391f, 114.0868f); MyHitB.Goon02Dir = 28.69302f;
                        MyHitB.Goon01 = new Vector3(2486.144f, -352.1967f, 114.0861f); MyHitB.Goon01Dir = 74.73852f;
                        MyHitB.Vboss = new Vector3(2467.513f, -344.0601f, 109.5219f); MyHitB.BossDir = 86.07456f;

                        MyHitB.Goon03.Add(new Vector3(2466.756f, -357.4921f, 109.5219f));
                        MyHitB.Goon03.Add(new Vector3(2460.675f, -363.1433f, 109.522f));
                        MyHitB.Goon03.Add(new Vector3(2461.143f, -373.9704f, 109.5218f));
                        MyHitB.Goon03.Add(new Vector3(2463.292f, -376.8359f, 109.5218f));
                        MyHitB.Goon03.Add(new Vector3(2463.404f, -396.2715f, 109.522f));
                        MyHitB.Goon03.Add(new Vector3(2462.222f, -400.6283f, 109.5221f));
                        MyHitB.Goon03.Add(new Vector3(2462.864f, -405.1978f, 109.5221f));
                        MyHitB.Goon03.Add(new Vector3(2472.124f, -408.046f, 109.5221f));
                        MyHitB.Goon03.Add(new Vector3(2479.847f, -399.734f, 109.5221f));
                        MyHitB.Goon03.Add(new Vector3(2479.611f, -391.726f, 109.5221f));
                        MyHitB.Goon03.Add(new Vector3(2472.891f, -391.7273f, 109.5221f));
                        MyHitB.Goon03.Add(new Vector3(2473.624f, -376.7001f, 109.522f));
                        MyHitB.Goon03.Add(new Vector3(2480.025f, -376.3521f, 109.5221f));
                        MyHitB.Goon03.Add(new Vector3(2479.721f, -368.9119f, 109.5221f));
                        MyHitB.Goon03.Add(new Vector3(2474.433f, -362.9229f, 109.5219f));
                        MyHitB.Goon03.Add(new Vector3(2473.686f, -348.1714f, 109.5219f));

                        MyHitB.Goon04.Add(new Vector3(2512.194f, -358.8307f, 114.0873f));
                        MyHitB.Goon04.Add(new Vector3(2506.969f, -364.6768f, 114.0872f));
                        MyHitB.Goon04.Add(new Vector3(2492.725f, -365.5279f, 114.0866f));
                        MyHitB.Goon04.Add(new Vector3(2487.476f, -360.584f, 114.0864f));
                        MyHitB.Goon04.Add(new Vector3(2487.479f, -345.9434f, 114.086f));
                        MyHitB.Goon04.Add(new Vector3(2492.106f, -341.3466f, 114.086f));
                        MyHitB.Goon04.Add(new Vector3(2499.621f, -340.4717f, 114.0872f));
                        MyHitB.Goon04.Add(new Vector3(2492.786f, -340.835f, 114.086f));
                        MyHitB.Goon04.Add(new Vector3(2487.385f, -346.5126f, 114.086f));
                        MyHitB.Goon04.Add(new Vector3(2487.315f, -359.8349f, 114.0864f));
                        MyHitB.Goon04.Add(new Vector3(2492.966f, -365.4258f, 114.0867f));
                        MyHitB.Goon04.Add(new Vector3(2505.558f, -365.2966f, 114.087f));
                        MyHitB.Goon04.Add(new Vector3(2512.009f, -358.9853f, 114.0873f));
                        MyHitB.Goon04.Add(new Vector3(2512.221f, -352.3284f, 114.0875f));

                        MyHitB.Goon05.Add(new Vector3(2492.715f, -427.4875f, 114.0879f));
                        MyHitB.Goon05.Add(new Vector3(2486.577f, -421.6962f, 114.0877f));
                        MyHitB.Goon05.Add(new Vector3(2486.688f, -408.6144f, 114.0873f));
                        MyHitB.Goon05.Add(new Vector3(2492.931f, -402.5152f, 114.0871f));
                        MyHitB.Goon05.Add(new Vector3(2506.004f, -402.6693f, 114.0865f));
                        MyHitB.Goon05.Add(new Vector3(2512.103f, -408.8118f, 114.0866f));
                        MyHitB.Goon05.Add(new Vector3(2512.263f, -417.2939f, 114.0884f));
                        MyHitB.Goon05.Add(new Vector3(2512.247f, -409.3155f, 114.0866f));
                        MyHitB.Goon05.Add(new Vector3(2504.904f, -402.1249f, 114.0867f));
                        MyHitB.Goon05.Add(new Vector3(2493.43f, -401.8575f, 114.0871f));
                        MyHitB.Goon05.Add(new Vector3(2487f, -408.6649f, 114.0874f));
                        MyHitB.Goon05.Add(new Vector3(2486.758f, -421.5493f, 114.0878f));
                        MyHitB.Goon05.Add(new Vector3(2492.532f, -427.3813f, 114.0879f));
                        MyHitB.Goon05.Add(new Vector3(2502.197f, -428.9225f, 114.0905f));

                        MyHitB.Vstart = new Vector3(2593.775f, -288.1873f, 91.88568f); //-- Start Point.

                        iMobStarz = 48;

                        MyHitB.FUbstop = new Vector3(2580.741f, -283.8819f, 92.48505f);
                    }
                    else if (iMishWop == 3)
                    {
                        MyHitB.Goon05.Add(new Vector3(172.946f, 1228.402f, 231.3267f));
                        MyHitB.Goon04.Add(new Vector3(190.265f, 1242.596f, 225.5947f));
                        MyHitB.Goon03.Add(new Vector3(166.5291f, 1231.856f, 229.5994f));
                        MyHitB.Goon02 = new Vector3(185.3232f, 1212.812f, 231.3265f); MyHitB.Goon02Dir = 201.5691f;
                        MyHitB.Goon01 = new Vector3(187.8561f, 1229.181f, 231.3266f); MyHitB.Goon01Dir = 282.6088f;
                        MyHitB.Vboss = new Vector3(176.3479f, 1226.477f, 231.3266f); MyHitB.BossDir = 172.7456f;

                        MyHitB.Goon03.Add(new Vector3(165.3706f, 1243.916f, 229.5994f));
                        MyHitB.Goon03.Add(new Vector3(170.317f, 1244.953f, 229.5994f));
                        MyHitB.Goon03.Add(new Vector3(162.8092f, 1243.388f, 229.5994f));
                        MyHitB.Goon03.Add(new Vector3(166.5291f, 1231.856f, 229.5994f));

                        MyHitB.Goon04.Add(new Vector3(197.3412f, 1210.515f, 225.5948f));
                        MyHitB.Goon04.Add(new Vector3(213.9503f, 1216.606f, 225.5947f));
                        MyHitB.Goon04.Add(new Vector3(196.4233f, 1213.144f, 225.5947f));
                        MyHitB.Goon04.Add(new Vector3(190.265f, 1242.596f, 225.5947f));

                        MyHitB.Goon05.Add(new Vector3(178.9831f, 1206.969f, 225.5954f));
                        MyHitB.Goon05.Add(new Vector3(183.5664f, 1204.313f, 225.5954f));
                        MyHitB.Goon05.Add(new Vector3(186.8263f, 1182.507f, 225.5946f));
                        MyHitB.Goon05.Add(new Vector3(186.1802f, 1162.673f, 225.5944f));
                        MyHitB.Goon05.Add(new Vector3(197.4359f, 1139.935f, 225.5943f));
                        MyHitB.Goon05.Add(new Vector3(207.7782f, 1143.113f, 227.0093f));
                        MyHitB.Goon05.Add(new Vector3(202.2832f, 1166.904f, 227.0045f));
                        MyHitB.Goon05.Add(new Vector3(196.5689f, 1188.546f, 227.0101f));
                        MyHitB.Goon05.Add(new Vector3(186.8285f, 1188.397f, 225.5941f));
                        MyHitB.Goon05.Add(new Vector3(181.9728f, 1208.952f, 225.5955f));
                        MyHitB.Goon05.Add(new Vector3(178.0035f, 1208.04f, 225.5955f));
                        MyHitB.Goon05.Add(new Vector3(172.946f, 1228.402f, 231.3267f));

                        MyHitB.Vstart = new Vector3(248.8441f, 1129.461f, 221.3617f); //-- Start Point.

                        iMobStarz = 5;

                        MyHitB.FUbstop = new Vector3(261.4789f, 1142.812f, 221.6532f);
                    }
                    else
                    {
                        MyHitB.Goon05.Add(new Vector3(650.3622f, 576.902f, 129.051f));
                        MyHitB.Goon04.Add(new Vector3(746.0137f, 602.2731f, 125.9197f));
                        MyHitB.Goon03.Add(new Vector3(677.7837f, 559.4578f, 129.0463f));
                        MyHitB.Goon02 = new Vector3(652.8771f, 578.6671f, 129.051f); MyHitB.Goon02Dir = 356.1734f;
                        MyHitB.Goon01 = new Vector3(714.191f, 556.9922f, 129.0508f); MyHitB.Goon01Dir = 253.2013f;
                        MyHitB.Vboss = new Vector3(682.7437f, 567.4234f, 130.4613f); MyHitB.BossDir = 157.7996f;

                        MyHitB.Goon03.Add(new Vector3(665.4657f, 570.3066f, 129.0466f));
                        MyHitB.Goon03.Add(new Vector3(596.5162f, 484.8895f, 144.6454f));
                        MyHitB.Goon03.Add(new Vector3(613.8167f, 472.9295f, 144.6454f));
                        MyHitB.Goon03.Add(new Vector3(627.2529f, 464.7474f, 144.6454f));
                        MyHitB.Goon03.Add(new Vector3(660.1801f, 452.9376f, 144.6453f));
                        MyHitB.Goon03.Add(new Vector3(695.9135f, 448.863f, 144.6446f));
                        MyHitB.Goon03.Add(new Vector3(697.3724f, 553.0838f, 129.0458f));
                        MyHitB.Goon03.Add(new Vector3(677.7837f, 559.4578f, 129.0463f));

                        MyHitB.Goon04.Add(new Vector3(738.6559f, 582.8843f, 125.9198f));
                        MyHitB.Goon04.Add(new Vector3(716.8008f, 590.9428f, 129.0509f));
                        MyHitB.Goon04.Add(new Vector3(710.4515f, 571.093f, 129.0509f));
                        MyHitB.Goon04.Add(new Vector3(716.4241f, 569.3599f, 129.0509f));
                        MyHitB.Goon04.Add(new Vector3(711.1804f, 555.2366f, 129.0509f));
                        MyHitB.Goon04.Add(new Vector3(715.435f, 569.7562f, 129.0509f));
                        MyHitB.Goon04.Add(new Vector3(710.6652f, 572.7615f, 129.0509f));
                        MyHitB.Goon04.Add(new Vector3(717.5749f, 590.2658f, 129.0509f));
                        MyHitB.Goon04.Add(new Vector3(738.647f, 582.5916f, 125.9197f));
                        MyHitB.Goon04.Add(new Vector3(746.0137f, 602.2731f, 125.9197f));

                        MyHitB.Goon05.Add(new Vector3(660.1697f, 606.0498f, 129.051f));
                        MyHitB.Goon05.Add(new Vector3(650.3622f, 576.902f, 129.051f));

                        MyHitB.Vstart = new Vector3(773.4139f, 589.575f, 124.9152f); //-- Start Point.

                        iMobStarz = 3;

                        MyHitB.FUbstop = new Vector3(790.1108f, 587.7974f, 125.2726f);
                    }

                    sMissionVar_01 = RandNPC(iMobStarz);
                }
                else if (iLocationX == 5)
                {
                    if (iAssMissionList[4] > 4)
                        iMishWop = RandInt(0, 4);
                    else
                        iMishWop = iAssMissionList[4];

                    if (iMishWop == 0)
                    {
                        MyHitB.Goon05.Add(new Vector3(340.744f, 2854.836f, 43.43604f));
                        MyHitB.Goon04.Add(new Vector3(295.8181f, 2892.656f, 43.60744f));
                        MyHitB.Goon03.Add(new Vector3(273.4195f, 2854.501f, 43.64209f));
                        MyHitB.Goon02 = new Vector3(315.1468f, 2884.779f, 49.57343f); MyHitB.Goon02Dir = 142.8985f;
                        MyHitB.Goon01 = new Vector3(272.5177f, 2866.132f, 74.17432f); MyHitB.Goon01Dir = 256.3994f;
                        MyHitB.Vboss = new Vector3(273.4961f, 2864.117f, 64.92805f); MyHitB.BossDir = 157.7332f;

                        MyHitB.Goon03.Add(new Vector3(311.9371f, 2877.399f, 43.48515f));
                        MyHitB.Goon03.Add(new Vector3(332.7512f, 2846.731f, 43.43607f));
                        MyHitB.Goon03.Add(new Vector3(287.2278f, 2831.782f, 43.43173f));
                        MyHitB.Goon03.Add(new Vector3(273.4195f, 2854.501f, 43.64209f));

                        MyHitB.Goon04.Add(new Vector3(263.0713f, 2876.522f, 43.61074f));
                        MyHitB.Goon04.Add(new Vector3(295.9029f, 2891.116f, 43.60786f));
                        MyHitB.Goon04.Add(new Vector3(306.0526f, 2875.568f, 43.50587f));
                        MyHitB.Goon04.Add(new Vector3(265.6938f, 2852.161f, 43.61774f));
                        MyHitB.Goon04.Add(new Vector3(305.3912f, 2875.516f, 43.50589f));
                        MyHitB.Goon04.Add(new Vector3(295.8181f, 2892.656f, 43.60744f));

                        MyHitB.Goon05.Add(new Vector3(284.8827f, 2828.409f, 43.43379f));
                        MyHitB.Goon05.Add(new Vector3(340.744f, 2854.836f, 43.43604f));

                        MyHitB.Vstart = new Vector3(224.7818f, 2882.74f, 42.51745f); //-- Start Point.

                        iMobStarz = 4;
                        MyHitB.FUbstop = new Vector3(230.3268f, 2916.2f, 42.67411f);
                    }
                    else if (iMishWop == 1)
                    {
                        MyHitB.Goon05.Add(new Vector3(1557.302f, 3600.265f, 38.77518f));
                        MyHitB.Goon04.Add(new Vector3(1567.208f, 3600.576f, 35.43183f));
                        MyHitB.Goon03.Add(new Vector3(1503.925f, 3577.993f, 35.42987f));
                        MyHitB.Goon02 = new Vector3(1501.693f, 3578.562f, 35.41425f); MyHitB.Goon02Dir = 249.7173f;
                        MyHitB.Goon01 = new Vector3(1562.053f, 3612.89f, 38.73403f); MyHitB.Goon01Dir = 173.9365f;
                        MyHitB.Vboss = new Vector3(1552.73f, 3587.81f, 38.73153f); MyHitB.BossDir = 205.6844f;

                        MyHitB.Goon03.Add(new Vector3(1561.882f, 3612.627f, 35.43483f));
                        MyHitB.Goon03.Add(new Vector3(1570.241f, 3598.013f, 35.34276f));
                        MyHitB.Goon03.Add(new Vector3(1512.646f, 3564.601f, 35.34513f));
                        MyHitB.Goon03.Add(new Vector3(1508.009f, 3568.101f, 35.43494f));
                        MyHitB.Goon03.Add(new Vector3(1503.925f, 3577.993f, 35.42987f));

                        MyHitB.Goon04.Add(new Vector3(1570.469f, 3594.964f, 35.34573f));
                        MyHitB.Goon04.Add(new Vector3(1542.851f, 3572.031f, 35.36273f));
                        MyHitB.Goon04.Add(new Vector3(1513.98f, 3561.483f, 35.34253f));
                        MyHitB.Goon04.Add(new Vector3(1505.999f, 3574.725f, 38.72665f));
                        MyHitB.Goon04.Add(new Vector3(1504.937f, 3573.891f, 38.73009f));
                        MyHitB.Goon04.Add(new Vector3(1510.527f, 3563.786f, 38.73009f));
                        MyHitB.Goon04.Add(new Vector3(1569.854f, 3598.75f, 38.73285f));
                        MyHitB.Goon04.Add(new Vector3(1564.839f, 3607.901f, 38.73139f));
                        MyHitB.Goon04.Add(new Vector3(1563.257f, 3606.921f, 38.73143f));
                        MyHitB.Goon04.Add(new Vector3(1567.208f, 3600.576f, 35.43183f));

                        MyHitB.Goon05.Add(new Vector3(1556.338f, 3602.33f, 38.77517f));
                        MyHitB.Goon05.Add(new Vector3(1553.705f, 3606.639f, 38.73141f));
                        MyHitB.Goon05.Add(new Vector3(1549.766f, 3605.031f, 38.73141f));
                        MyHitB.Goon05.Add(new Vector3(1533.377f, 3594.701f, 38.73153f));
                        MyHitB.Goon05.Add(new Vector3(1535.362f, 3590.602f, 38.76653f));
                        MyHitB.Goon05.Add(new Vector3(1534.274f, 3586.417f, 38.7665f));
                        MyHitB.Goon05.Add(new Vector3(1537.886f, 3579.533f, 38.73153f));
                        MyHitB.Goon05.Add(new Vector3(1558.568f, 3592.217f, 38.73152f));
                        MyHitB.Goon05.Add(new Vector3(1557.302f, 3600.265f, 38.77518f));

                        MyHitB.Vstart = new Vector3(1600.252f, 3601.43f, 34.24609f); //-- Start Point.

                        iMobStarz = 22;

                        MyHitB.FUbstop = new Vector3(1583.455f, 3646.516f, 33.97811f);
                    }
                    else if (iMishWop == 2)
                    {
                        MyHitB.Goon05.Add(new Vector3(2321.647f, 4847.645f, 41.80827f));
                        MyHitB.Goon04.Add(new Vector3(2297.261f, 4871.159f, 41.80822f));
                        MyHitB.Goon03.Add(new Vector3(2354.695f, 4873.283f, 41.80996f));
                        MyHitB.Goon02 = new Vector3(2306.544f, 4882.843f, 41.80826f); MyHitB.Goon02Dir = 45.17728f;
                        MyHitB.Goon01 = new Vector3(2307.568f, 4832.615f, 48.176f); MyHitB.Goon01Dir = 226.672f;
                        MyHitB.Vboss = new Vector3(2328.1f, 4846.455f, 41.80822f); MyHitB.BossDir = 232.1723f;

                        MyHitB.Goon03.Add(new Vector3(2318.967f, 4838.601f, 41.80822f));
                        MyHitB.Goon03.Add(new Vector3(2354.695f, 4873.283f, 41.80996f));

                        MyHitB.Goon04.Add(new Vector3(2298.175f, 4879.726f, 41.80826f));
                        MyHitB.Goon04.Add(new Vector3(2304.109f, 4889.827f, 41.80826f));
                        MyHitB.Goon04.Add(new Vector3(2324.028f, 4900.575f, 41.81262f));
                        MyHitB.Goon04.Add(new Vector3(2348.52f, 4878.257f, 41.81926f));
                        MyHitB.Goon04.Add(new Vector3(2353.455f, 4871.659f, 41.81401f));
                        MyHitB.Goon04.Add(new Vector3(2323.628f, 4845.782f, 41.80827f));
                        MyHitB.Goon04.Add(new Vector3(2297.261f, 4871.159f, 41.80822f));

                        MyHitB.Goon05.Add(new Vector3(2299.706f, 4869.14f, 41.80819f));
                        MyHitB.Goon05.Add(new Vector3(2321.647f, 4847.645f, 41.80827f));

                        MyHitB.Vstart = new Vector3(2288.661f, 4979.157f, 40.81767f); //-- Start Point.

                        iMobStarz = 23;

                        MyHitB.FUbstop = new Vector3(2267.126f, 4997.805f, 42.06471f);
                    }
                    else if (iMishWop == 3)
                    {
                        MyHitB.Goon05.Add(new Vector3(1657.862f, 4834.355f, 47.17301f));
                        MyHitB.Goon04.Add(new Vector3(1638.303f, 4867.082f, 42.02855f));
                        MyHitB.Goon03.Add(new Vector3(1661.448f, 4827.105f, 42.07011f));
                        MyHitB.Goon02 = new Vector3(1647.802f, 4828.048f, 42.02239f); MyHitB.Goon02Dir = 22.90079f;
                        MyHitB.Goon01 = new Vector3(1650.428f, 4867.372f, 41.88936f); MyHitB.Goon01Dir = 263.617f;
                        MyHitB.Vboss = new Vector3(1641.539f, 4851.53f, 45.50526f); MyHitB.BossDir = 358.4285f;

                        MyHitB.Goon03.Add(new Vector3(1644.147f, 4825.98f, 42.01594f));
                        MyHitB.Goon03.Add(new Vector3(1635.695f, 4857.085f, 42.02081f));
                        MyHitB.Goon03.Add(new Vector3(1644.741f, 4825.145f, 41.99265f));
                        MyHitB.Goon03.Add(new Vector3(1661.448f, 4827.105f, 42.07011f));

                        MyHitB.Goon04.Add(new Vector3(1636.811f, 4890.342f, 42.04609f));
                        MyHitB.Goon04.Add(new Vector3(1638.303f, 4867.082f, 42.02855f));

                        MyHitB.Goon05.Add(new Vector3(1649.929f, 4833.092f, 47.17131f));
                        MyHitB.Goon05.Add(new Vector3(1657.862f, 4834.355f, 47.17301f));

                        MyHitB.Vstart = new Vector3(1698.747f, 4881.217f, 41.0342f); //-- Start Point.

                        iMobStarz = 17;

                        MyHitB.FUbstop = new Vector3(1674.996f, 4842.517f, 41.52208f);
                    }
                    else
                    {
                        MyHitB.Goon05.Add(new Vector3(2709.445f, 2821.631f, 40.00f));
                        MyHitB.Goon04.Add(new Vector3(2671.472f, 2763.025f, 37.87803f));
                        MyHitB.Goon03.Add(new Vector3(2761.239f, 2806.703f, 41.73893f));
                        MyHitB.Goon02 = new Vector3(2690.285f, 2760.773f, 37.84019f); MyHitB.Goon02Dir = 195.2845f;
                        MyHitB.Goon01 = new Vector3(2677.376f, 2790.567f, 40.5186f); MyHitB.Goon01Dir = 256.1927f;
                        MyHitB.Vboss = new Vector3(2712.72f, 2784.174f, 37.87799f); MyHitB.BossDir = 295.9645f;

                        MyHitB.Goon03.Add(new Vector3(2759.709f, 2805.8f, 41.73897f));
                        MyHitB.Goon03.Add(new Vector3(2758.911f, 2807.281f, 41.73896f));
                        MyHitB.Goon03.Add(new Vector3(2755.162f, 2805.116f, 41.73896f));
                        MyHitB.Goon03.Add(new Vector3(2759.09f, 2806.964f, 41.73893f));
                        MyHitB.Goon03.Add(new Vector3(2760.083f, 2806.064f, 41.73896f));
                        MyHitB.Goon03.Add(new Vector3(2761.239f, 2806.703f, 41.73893f));

                        MyHitB.Goon04.Add(new Vector3(2688.278f, 2770.796f, 37.878f));
                        MyHitB.Goon04.Add(new Vector3(2692.782f, 2762.073f, 37.87238f));
                        MyHitB.Goon04.Add(new Vector3(2684.776f, 2758.062f, 37.87803f));
                        MyHitB.Goon04.Add(new Vector3(2678.576f, 2766.702f, 37.87803f));
                        MyHitB.Goon04.Add(new Vector3(2671.472f, 2763.025f, 37.87803f));

                        MyHitB.Goon05.Add(new Vector3(2732.909f, 2843.75f, 38.53904f));
                        MyHitB.Goon05.Add(new Vector3(2678.177f, 2841.705f, 40.0709f));
                        MyHitB.Goon05.Add(new Vector3(2676.612f, 2799.527f, 40.43023f));
                        MyHitB.Goon05.Add(new Vector3(2685.635f, 2798.989f, 40.23642f));
                        MyHitB.Goon05.Add(new Vector3(2687.616f, 2816.012f, 40.36447f));
                        MyHitB.Goon05.Add(new Vector3(2709.445f, 2821.631f, 40.00f));

                        MyHitB.Vstart = new Vector3(2586.596f, 2723.151f, 41.64703f); //-- Start Point.

                        iMobStarz = 50;

                        MyHitB.FUbstop = new Vector3(2555.999f, 2706.22f, 41.52115f);
                    }

                    sMissionVar_01 = RandNPC(iMobStarz);
                }
                else
                {
                    if (iAssMissionList[5] > 4)
                        iMishWop = RandInt(0, 4);
                    else
                        iMishWop = iAssMissionList[5];

                    if (iMishWop == 0)
                    {
                        MyHitB.Goon05.Add(new Vector3(-767.345f, 5583.257f, 33.60571f));
                        MyHitB.Goon04.Add(new Vector3(-755.4155f, 5598.173f, 41.66508f));
                        MyHitB.Goon03.Add(new Vector3(-738.0662f, 5595.271f, 41.65459f));
                        MyHitB.Goon02 = new Vector3(-736.4711f, 5588.167f, 41.65414f); MyHitB.Goon02Dir = 206.0923f;
                        MyHitB.Goon01 = new Vector3(-741.9067f, 5557.609f, 36.70968f); MyHitB.Goon01Dir = 178.5684f;
                        MyHitB.Vboss = new Vector3(-737.0172f, 5567.404f, 36.70968f); MyHitB.BossDir = 264.3277f;

                        MyHitB.Goon03.Add(new Vector3(-746.4897f, 5594.63f, 41.65459f));
                        MyHitB.Goon03.Add(new Vector3(-748.2638f, 5587.582f, 41.65414f));
                        MyHitB.Goon03.Add(new Vector3(-754.9839f, 5587.543f, 41.65474f));
                        MyHitB.Goon03.Add(new Vector3(-755.6539f, 5602.023f, 41.66507f));
                        MyHitB.Goon03.Add(new Vector3(-747.6964f, 5602.552f, 41.65459f));
                        MyHitB.Goon03.Add(new Vector3(-747.2025f, 5595.154f, 41.65459f));
                        MyHitB.Goon03.Add(new Vector3(-738.0662f, 5595.271f, 41.65459f));

                        MyHitB.Goon04.Add(new Vector3(-754.9137f, 5599.81f, 41.66511f));
                        MyHitB.Goon04.Add(new Vector3(-749.9346f, 5600.047f, 40.64637f));
                        MyHitB.Goon04.Add(new Vector3(-749.7846f, 5590.161f, 38.02629f));
                        MyHitB.Goon04.Add(new Vector3(-756.705f, 5589.916f, 36.71615f));
                        MyHitB.Goon04.Add(new Vector3(-758.0966f, 5588.067f, 36.70622f));
                        MyHitB.Goon04.Add(new Vector3(-760.3561f, 5587.396f, 36.70622f));
                        MyHitB.Goon04.Add(new Vector3(-760.1637f, 5601.39f, 36.70622f));
                        MyHitB.Goon04.Add(new Vector3(-757.8819f, 5601.993f, 36.70622f));
                        MyHitB.Goon04.Add(new Vector3(-757.6944f, 5591.96f, 36.70622f));
                        MyHitB.Goon04.Add(new Vector3(-751.4635f, 5591.595f, 38.0263f));
                        MyHitB.Goon04.Add(new Vector3(-751.5088f, 5598.002f, 40.64657f));
                        MyHitB.Goon04.Add(new Vector3(-755.4155f, 5598.173f, 41.66508f));

                        MyHitB.Goon05.Add(new Vector3(-757.9305f, 5584.678f, 36.70965f));
                        MyHitB.Goon05.Add(new Vector3(-757.6879f, 5600.951f, 36.70622f));
                        MyHitB.Goon05.Add(new Vector3(-760.2615f, 5601.565f, 36.70622f));
                        MyHitB.Goon05.Add(new Vector3(-759.8745f, 5584.589f, 36.70969f));
                        MyHitB.Goon05.Add(new Vector3(-767.577f, 5584.732f, 33.60597f));
                        MyHitB.Goon05.Add(new Vector3(-767.842f, 5582.199f, 33.60597f));
                        MyHitB.Goon05.Add(new Vector3(-761.2136f, 5582.326f, 36.70964f));
                        MyHitB.Goon05.Add(new Vector3(-754.5424f, 5583.642f, 36.70964f));

                        MyHitB.Vstart = new Vector3(-823.821f, 5561.648f, 30.46187f); //-- Start Point.

                        iMobStarz = 11;
                        MyHitB.FUbstop = new Vector3(-800.3827f, 5563.648f, 31.62369f);
                    }
                    else if (iMishWop == 1)
                    {
                        MyHitB.Goon05.Add(new Vector3(-514.6453f, 5271.71f, 80.65714f));
                        MyHitB.Goon04.Add(new Vector3(-527.8826f, 5291.014f, 74.17958f));
                        MyHitB.Goon03.Add(new Vector3(-526.7314f, 5308.281f, 80.23985f));
                        MyHitB.Goon02 = new Vector3(-557.3286f, 5283.622f, 77.1786f); MyHitB.Goon02Dir = 280.9823f;
                        MyHitB.Goon01 = new Vector3(-507.0502f, 5298.56f, 80.59415f); MyHitB.Goon01Dir = 125.2596f;
                        MyHitB.Vboss = new Vector3(-534.6129f, 5295.723f, 76.22177f); MyHitB.BossDir = 163.9837f;

                        MyHitB.Goon03.Add(new Vector3(-507.8468f, 5303.367f, 80.23985f));
                        MyHitB.Goon03.Add(new Vector3(-498.7983f, 5327.183f, 80.26272f));
                        MyHitB.Goon03.Add(new Vector3(-507.5448f, 5302.066f, 80.23985f));
                        MyHitB.Goon03.Add(new Vector3(-526.7314f, 5308.281f, 80.23985f));

                        MyHitB.Goon04.Add(new Vector3(-539.9435f, 5252.771f, 74.94093f));
                        MyHitB.Goon04.Add(new Vector3(-518.7679f, 5244.862f, 79.98583f));
                        MyHitB.Goon04.Add(new Vector3(-510.9202f, 5270.467f, 80.53647f));
                        MyHitB.Goon04.Add(new Vector3(-520.3823f, 5246.012f, 79.83928f));
                        MyHitB.Goon04.Add(new Vector3(-540.4612f, 5253.007f, 74.84053f));
                        MyHitB.Goon04.Add(new Vector3(-527.8826f, 5291.014f, 74.17958f));

                        MyHitB.Goon05.Add(new Vector3(-568.4789f, 5291.338f, 75.39369f));
                        MyHitB.Goon05.Add(new Vector3(-514.6453f, 5271.71f, 80.65714f));

                        MyHitB.Vstart = new Vector3(-665.6201f, 5244.412f, 75.6614f); //-- Start Point.

                        iMobStarz = 19;

                        MyHitB.FUbstop = new Vector3(-638.0407f, 5250.491f, 74.33782f);
                    }
                    else if (iMishWop == 2)
                    {
                        MyHitB.Goon05.Add(new Vector3(-66.301f, 6346.253f, 31.49036f));
                        MyHitB.Goon04.Add(new Vector3(-110.2449f, 6315.527f, 31.49036f));
                        MyHitB.Goon03.Add(new Vector3(-99.96815f, 6328.335f, 35.50035f));
                        MyHitB.Goon02 = new Vector3(-84.6138f, 6361.315f, 31.5759f); MyHitB.Goon02Dir = 156.8777f;
                        MyHitB.Goon01 = new Vector3(-87.35072f, 6371.907f, 35.12779f); MyHitB.Goon01Dir = 37.15335f;
                        MyHitB.Vboss = new Vector3(-81.57904f, 6364.71f, 35.41002f); MyHitB.BossDir = 275.6308f;

                        MyHitB.Goon03.Add(new Vector3(-109.1785f, 6337.84f, 35.50075f));
                        MyHitB.Goon03.Add(new Vector3(-88.0182f, 6358.469f, 35.50075f));
                        MyHitB.Goon03.Add(new Vector3(-108.9201f, 6336.981f, 35.50075f));
                        MyHitB.Goon03.Add(new Vector3(-99.96815f, 6328.335f, 35.50035f));

                        MyHitB.Goon04.Add(new Vector3(-100.9715f, 6310.309f, 31.49037f));
                        MyHitB.Goon04.Add(new Vector3(-90.23823f, 6321.042f, 31.49037f));
                        MyHitB.Goon04.Add(new Vector3(-103.6349f, 6308.77f, 31.49044f));
                        MyHitB.Goon04.Add(new Vector3(-110.2449f, 6315.527f, 31.49036f));

                        MyHitB.Goon05.Add(new Vector3(-87.65194f, 6325.415f, 31.49036f));
                        MyHitB.Goon05.Add(new Vector3(-90.99855f, 6339.509f, 31.49036f));
                        MyHitB.Goon05.Add(new Vector3(-74.31131f, 6352.809f, 31.49036f));
                        MyHitB.Goon05.Add(new Vector3(-66.301f, 6346.253f, 31.49036f));

                        MyHitB.Vstart = new Vector3(-135.5479f, 6334.841f, 30.47937f); //-- Start Point.

                        iMobStarz = 24;

                        MyHitB.FUbstop = new Vector3(-131.1716f, 6322.359f, 30.90629f);
                    }
                    else if (iMishWop == 3)
                    {
                        MyHitB.Goon05.Add(new Vector3(-343.9828f, 6115.645f, 31.44182f));
                        MyHitB.Goon04.Add(new Vector3(-342.4623f, 6115.922f, 31.44272f));
                        MyHitB.Goon03.Add(new Vector3(-391.5671f, 6131.014f, 31.37105f));
                        MyHitB.Goon02 = new Vector3(-367.6535f, 6111.827f, 39.46238f); MyHitB.Goon02Dir = 302.0133f;
                        MyHitB.Goon01 = new Vector3(-375.8508f, 6120.208f, 35.43965f); MyHitB.Goon01Dir = 348.0855f;
                        MyHitB.Vboss = new Vector3(-368.007f, 6099.551f, 35.43965f); MyHitB.BossDir = 137.4085f;

                        MyHitB.Goon03.Add(new Vector3(-380.4186f, 6119.364f, 31.54456f));
                        MyHitB.Goon03.Add(new Vector3(-391.5671f, 6131.014f, 31.37105f));

                        MyHitB.Goon04.Add(new Vector3(-363.4133f, 6137.021f, 31.4421f));
                        MyHitB.Goon04.Add(new Vector3(-342.4623f, 6115.922f, 31.44272f));

                        MyHitB.Goon05.Add(new Vector3(-369.2594f, 6090.41f, 31.45273f));
                        MyHitB.Goon05.Add(new Vector3(-380.0799f, 6104.286f, 31.44447f));
                        MyHitB.Goon05.Add(new Vector3(-364.4882f, 6091.61f, 31.44446f));
                        MyHitB.Goon05.Add(new Vector3(-343.9828f, 6115.645f, 31.44182f));

                        MyHitB.Vstart = new Vector3(-431.6277f, 6139.681f, 30.47821f); //-- Start Point.

                        iMobStarz = 49;

                        MyHitB.FUbstop = new Vector3(-420.1826f, 6124.761f, 30.82228f);
                    }
                    else
                    {
                        MyHitB.Goon05.Add(new Vector3(1511.616f, 6332.944f, 23.97563f));
                        MyHitB.Goon04.Add(new Vector3(1433.309f, 6330.135f, 23.9949f));
                        MyHitB.Goon03.Add(new Vector3(1439.893f, 6334.007f, 23.92226f));
                        MyHitB.Goon02 = new Vector3(1511.34f, 6328.012f, 24.60712f); MyHitB.Goon02Dir = 51.32638f;
                        MyHitB.Goon01 = new Vector3(1434.69f, 6354.518f, 23.98501f); MyHitB.Goon01Dir = 120.5622f;
                        MyHitB.Vboss = new Vector3(1414.122f, 6340.835f, 24.10848f); MyHitB.BossDir = 94.37645f;

                        MyHitB.Goon03.Add(new Vector3(1438.554f, 6350.476f, 23.98502f));
                        MyHitB.Goon03.Add(new Vector3(1464.721f, 6353.114f, 23.84916f));
                        MyHitB.Goon03.Add(new Vector3(1439.869f, 6346.296f, 23.96572f));
                        MyHitB.Goon03.Add(new Vector3(1439.893f, 6334.007f, 23.92226f));

                        MyHitB.Goon04.Add(new Vector3(1422.331f, 6354.054f, 23.985f));
                        MyHitB.Goon04.Add(new Vector3(1418.82f, 6358.752f, 23.98615f));
                        MyHitB.Goon04.Add(new Vector3(1425.885f, 6348.37f, 23.985f));
                        MyHitB.Goon04.Add(new Vector3(1433.309f, 6330.135f, 23.9949f));

                        MyHitB.Goon05.Add(new Vector3(1485.165f, 6353.153f, 23.97673f));
                        MyHitB.Goon05.Add(new Vector3(1511.616f, 6332.944f, 23.97563f));

                        MyHitB.Vstart = new Vector3(1625.025f, 6352.656f, 39.91281f); //-- Start Point.

                        iMobStarz = 33;

                        MyHitB.FUbstop = new Vector3(1544.126f, 6403.336f, 23.61435f);
                    }

                    sMissionVar_01 = RandNPC(iMobStarz);
                }

                if (FindBuiltMissions(10))
                {
                    if (MySettings.BulderOnly)
                        SelectBuilderMish(7);
                    else
                    {
                        MyMissions.HitXM.Add(MyHitB);
                        FindRandom(71, 0, MyMissions.HitXM.Count - 1);
                    }
                }
                else
                {
                    MyMissions.HitXM.Add(MyHitB);
                }
            }
            
            vFuMiss = MyMissions.HitXM[iBuild].FUbstop;

            VectorList_01.Add(MyMissions.HitXM[iBuild].Goon05[0]);    //--5
            fList_01.Add(0.00f);
            VectorList_01.Add(MyMissions.HitXM[iBuild].Goon04[0]);   //--4
            fList_01.Add(0.00f);
            VectorList_01.Add(MyMissions.HitXM[iBuild].Goon03[0]);   //--3
            fList_01.Add(0.00f);
            VectorList_01.Add(MyMissions.HitXM[iBuild].Goon02);   //--2
            fList_01.Add(MyMissions.HitXM[iBuild].Goon02Dir);
            VectorList_01.Add(MyMissions.HitXM[iBuild].Goon01);   //--1
            fList_01.Add(MyMissions.HitXM[iBuild].Goon01Dir);
            VectorList_01.Add(MyMissions.HitXM[iBuild].Vboss);   //--0
            fList_01.Add(MyMissions.HitXM[iBuild].BossDir);

            VectorList_02 = ListReverseVec3(MyMissions.HitXM[iBuild].Goon03);

            VectorList_03 = ListReverseVec3(MyMissions.HitXM[iBuild].Goon04);

            VectorList_04 = ListReverseVec3(MyMissions.HitXM[iBuild].Goon05);

            vTarget_01 = MyMissions.HitXM[iBuild].Vstart;
            vTarget_02 = MyMissions.HitXM[iBuild].Goon01;

            if (sMissionVar_01 == "")
            {
                iMobStarz = FindRandom(72, 0, 52);
                sMissionVar_01 = RandNPC(iMobStarz);
            }      

            iList_01.Add(0);
            iList_01.Add(0);
            iList_01.Add(0);

            if (!bTestRun)
                BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[12], "", 5000);
            bOnTheJob = true;
        }
        public class HitBuild
        {
            public int Local { get; set; }
            public Vector3 FUbstop { get; set; }
            public Vector3 Vstart { get; set; }
            public Vector3 Vboss { get; set; }
            public float BossDir { get; set; }
            public Vector3 Goon01 { get; set; }
            public float Goon01Dir { get; set; }
            public Vector3 Goon02 { get; set; }
            public float Goon02Dir { get; set; }
            public List<Vector3> Goon03 { get; set; }
            public List<Vector3> Goon04 { get; set; }
            public List<Vector3> Goon05 { get; set; }

            public HitBuild()
            {
                Goon03 = new List<Vector3>();
                Goon04 = new List<Vector3>();
                Goon05 = new List<Vector3>();
            }
        }
        private void MrMOneyMAn()
        {
            LogThis("MrMOneyMAn");

            VectorList_01.Clear();
            VectorList_02.Clear();
            BeOnOff.Clear();
            MultiPed.Clear();
            ttTextBar_01.Label = "" + MyLang.Othertext[1] + "";
            VTBTimerPool.Add(ttTextBar_01);

            int iRanLoc = 0;

            if (iLocationX == 1)
            {
                vGetaway = new Vector3(934.419f, -1578.40f, 29.94f);
                fGetDir = 88.32f;

                vTarget_02 = new Vector3(961.1391f, -1586.041f, 30.38947f);
                fphdirect = 297.1811f;

                vTarget_03 = new Vector3(934.419f, -1578.40f, 29.94f); //Depo
                vFuMiss = new Vector3(968.2625f, -1575.904f, 30.10956f);

                iRanLoc = FindRandom(73, 1, 6);
                if (iRanLoc == 1)
                {
                    //-----------Amunation
                    VectorList_01.Add(new Vector3(818.1103f, -2155.561f, 29.61901f)); //Door
                    VectorList_01.Add(new Vector3(811.7623f, -2148.854f, 29.63132f)); //Collect Pack
                    VectorList_01.Add(new Vector3(822.6222f, -2140.836f, 28.98856f)); //Park Truck
                }
                else if (iRanLoc == 2)
                {
                    //-----------Tattoo
                    VectorList_01.Add(new Vector3(1326.98f, -1654.731f, 52.27643f));
                    VectorList_01.Add(new Vector3(1321.362f, -1649.768f, 52.14555f));
                    VectorList_01.Add(new Vector3(1309.416f, -1655.837f, 50.73122f));
                }
                else if (iRanLoc == 3)
                {

                    //-----------garage straw
                    VectorList_01.Add(new Vector3(-43.22453f, -1748.926f, 29.42101f));
                    VectorList_01.Add(new Vector3(-53.39435f, -1756.822f, 29.43963f));
                    VectorList_01.Add(new Vector3(-53.6435f, -1764.465f, 28.96912f));
                }
                else if (iRanLoc == 4)
                {
                    //-----------Hair straw
                    VectorList_01.Add(new Vector3(141.3755f, -1705.638f, 29.29162f));
                    VectorList_01.Add(new Vector3(132.6712f, -1712.163f, 29.29171f));
                    VectorList_01.Add(new Vector3(133.0044f, -1719.993f, 28.52891f));
                }
                else if (iRanLoc == 5)
                {
                    //-----------Clothin straw
                    VectorList_01.Add(new Vector3(71.55688f, -1391.018f, 29.37615f));
                    VectorList_01.Add(new Vector3(83.43826f, -1391.65f, 29.41966f));
                    VectorList_01.Add(new Vector3(98.63625f, -1395.907f, 28.73691f));
                }
                else
                {
                    //-----------"247 straw
                    VectorList_01.Add(new Vector3(28.20053f, -1339.815f, 29.49702f));
                    VectorList_01.Add(new Vector3(28.86574f, -1349.547f, 29.32179f));
                    VectorList_01.Add(new Vector3(15.55747f, -1345.465f, 28.76207f));
                }
            }
            else if (iLocationX == 2)
            {
                vGetaway = new Vector3(-270.6081f, 285.802f, 90.00076f);
                fGetDir = 178.6714f;

                vTarget_02 = new Vector3(-277.6512f, 282.4237f, 89.88692f);
                fphdirect = 174.0191f;

                vTarget_03 = new Vector3(-270.6081f, 285.802f, 89.00076f); //Depo
                vFuMiss = new Vector3(-279.1794f, 272.047f, 88.99425f);

                iRanLoc = FindRandom(74, 1, 17);
                if (iRanLoc == 1)
                {
                    //-----------247 vinwood
                    VectorList_01.Add(new Vector3(378.172f, 333.1444f, 103.5664f));
                    VectorList_01.Add(new Vector3(376.2864f, 322.5743f, 103.4389f));
                    VectorList_01.Add(new Vector3(374.499f, 315.3937f, 102.8113f));
                }
                else if (iRanLoc == 2)
                {
                    //-----------tato vinewood
                    VectorList_01.Add(new Vector3(322.3571f, 185.3816f, 103.5865f));
                    VectorList_01.Add(new Vector3(320.9264f, 177.7515f, 103.5556f));
                    VectorList_01.Add(new Vector3(326.8551f, 163.4843f, 102.8829f));
                }
                else if (iRanLoc == 3)
                {
                    //-----------Amun Vinewood
                    VectorList_01.Add(new Vector3(255.1956f, -46.45491f, 69.94107f));
                    VectorList_01.Add(new Vector3(243.4802f, -44.94433f, 69.89601f));
                    VectorList_01.Add(new Vector3(237.7722f, -36.02295f, 69.19891f));
                }
                else if (iRanLoc == 4)
                {
                    //-----------Sub Vinwood
                    VectorList_01.Add(new Vector3(117.6362f, -234.1445f, 54.55783f));
                    VectorList_01.Add(new Vector3(127.3477f, -210.5648f, 54.53751f));
                    VectorList_01.Add(new Vector3(131.3723f, -198.0184f, 53.89521f));
                }
                else if (iRanLoc == 5)
                {
                    //-----------Hair Vinewood
                    VectorList_01.Add(new Vector3(-34.64671f, -155.6644f, 57.07654f));
                    VectorList_01.Add(new Vector3(-30.43615f, -146.8482f, 57.03374f));
                    VectorList_01.Add(new Vector3(-32.57223f, -135.1536f, 56.55999f));
                }
                else if (iRanLoc == 6)
                {
                    //-----------Poision Vinewood
                    VectorList_01.Add(new Vector3(-167.0284f, -299.8949f, 39.73331f));
                    VectorList_01.Add(new Vector3(-156.523f, -305.6676f, 39.60716f));
                    VectorList_01.Add(new Vector3(-145.5589f, -304.0175f, 38.54705f));
                }
                else if (iRanLoc == 7)
                {
                    //-----------Flesa Vinewood
                    VectorList_01.Add(new Vector3(-354.9683f, -54.16336f, 49.04631f));
                    VectorList_01.Add(new Vector3(-349.905f, -45.62924f, 49.0368f));
                    VectorList_01.Add(new Vector3(-333.5276f, -30.75565f, 47.31762f));
                }
                else if (iRanLoc == 8)
                {
                    //-----------Rockford poison
                    VectorList_01.Add(new Vector3(-705.4026f, -151.8214f, 37.41514f));
                    VectorList_01.Add(new Vector3(-716.6645f, -156.6859f, 36.98803f));
                    VectorList_01.Add(new Vector3(-713.6541f, -174.4834f, 36.29914f));
                }
                else if (iRanLoc == 9)
                {
                    //-----------Rockford Hair
                    VectorList_01.Add(new Vector3(-809.0403f, -180.0453f, 37.5689f));
                    VectorList_01.Add(new Vector3(-823.1348f, -188.0848f, 37.56448f));
                    VectorList_01.Add(new Vector3(-829.8032f, -193.5309f, 36.85846f));
                }
                else if (iRanLoc == 10)
                {
                    //-----------DOwntownAmun
                    VectorList_01.Add(new Vector3(13.78183f, -1105.942f, 29.79702f));
                    VectorList_01.Add(new Vector3(17.52078f, -1116.09f, 29.79116f));
                    VectorList_01.Add(new Vector3(29.00081f, -1111.169f, 28.78214f));
                }
                else if (iRanLoc == 11)
                {
                    //-----------Downtown Binko
                    VectorList_01.Add(new Vector3(429.239f, -807.9297f, 29.49116f));
                    VectorList_01.Add(new Vector3(417.9985f, -807.4713f, 29.39871f));
                    VectorList_01.Add(new Vector3(410.6239f, -808.3939f, 28.66582f));
                }
                else if (iRanLoc == 12)
                {
                    //-----------Saul Garrage
                    VectorList_01.Add(new Vector3(-709.3326f, -904.5909f, 19.21559f));
                    VectorList_01.Add(new Vector3(-711.9661f, -917.5385f, 19.1905f));
                    VectorList_01.Add(new Vector3(-711.6331f, -921.455f, 18.48202f));
                }
                else if (iRanLoc == 13)
                {
                    //-----------Saul Amun
                    VectorList_01.Add(new Vector3(-666.1755f, -933.9166f, 21.82924f));
                    VectorList_01.Add(new Vector3(-664.0195f, -945.0365f, 21.71522f));
                    VectorList_01.Add(new Vector3(-660.3688f, -952.5757f, 20.82885f));
                }
                else if (iRanLoc == 14)
                {
                    //-----------vesp binko
                    VectorList_01.Add(new Vector3(-822.8187f, -1069.324f, 11.32811f));
                    VectorList_01.Add(new Vector3(-818.163f, -1079.369f, 11.13253f));
                    VectorList_01.Add(new Vector3(-818.7191f, -1091.316f, 10.43837f));
                }
                else if (iRanLoc == 15)
                {
                    //-----------vesp hair
                    VectorList_01.Add(new Vector3(-1278.28f, -1119.134f, 6.990117f));
                    VectorList_01.Add(new Vector3(-1288.733f, -1116.69f, 6.95709f));
                    VectorList_01.Add(new Vector3(-1297.564f, -1118.927f, 5.959809f));
                }
                else if (iRanLoc == 16)
                {
                    //-----------vesp corner shop
                    VectorList_01.Add(new Vector3(-1220.407f, -915.9023f, 11.32622f));
                    VectorList_01.Add(new Vector3(-1227.223f, -901.9172f, 12.27057f));
                    VectorList_01.Add(new Vector3(-1231.168f, -896.8222f, 11.58054f));
                }
                else
                {
                    //-----------vesp tato
                    VectorList_01.Add(new Vector3(-1149.823f, -1428.394f, 4.954461f));
                    VectorList_01.Add(new Vector3(-1155.2f, -1423.332f, 4.770182f));
                    VectorList_01.Add(new Vector3(-1158.976f, -1415.312f, 4.262128f));
                }
            }
            else if (iLocationX == 3)
            {
                vGetaway = new Vector3(-1379.842f, -651.2659f, 28.15535f);
                fGetDir = 305.7188f;

                vTarget_02 = new Vector3(-1399.386f, -657.6003f, 28.67339f);
                fphdirect = 307.8122f;

                vTarget_03 = new Vector3(-1379.842f, -651.2659f, 27.15535f); //Depo
                vFuMiss = new Vector3(-1357.154f, -686.0685f, 24.80783f);

                iRanLoc = FindRandom(75, 1, 11);
                if (iRanLoc == 1)
                {
                    //-----------Cherm suburb
                    VectorList_01.Add(new Vector3(-3179.448f, 1033.921f, 20.86322f));
                    VectorList_01.Add(new Vector3(-3168.043f, 1056.976f, 20.85882f));
                    VectorList_01.Add(new Vector3(-3163.755f, 1067.212f, 20.14717f));
                }
                else if (iRanLoc == 2)
                {
                    //-----------Cherm tato
                    VectorList_01.Add(new Vector3(-3174.916f, 1075.816f, 20.82918f));
                    VectorList_01.Add(new Vector3(-3167.124f, 1073.91f, 20.84766f));
                    VectorList_01.Add(new Vector3(-3161.903f, 1073.675f, 20.13908f));
                }
                else if (iRanLoc == 3)
                {
                    //-----------Cherm amun
                    VectorList_01.Add(new Vector3(-3174.98f, 1084.587f, 20.83875f));
                    VectorList_01.Add(new Vector3(-3163.575f, 1082.781f, 20.84772f));
                    VectorList_01.Add(new Vector3(-3154.986f, 1085.563f, 20.16389f));
                }
                else if (iRanLoc == 4)
                {
                    //-----------Cherm 247 north
                    VectorList_01.Add(new Vector3(-3249.464f, 1004.355f, 12.83071f));
                    VectorList_01.Add(new Vector3(-3239.379f, 1004.18f, 12.46062f));
                    VectorList_01.Add(new Vector3(-3237.647f, 988.4939f, 11.97033f));
                }
                else if (iRanLoc == 5)
                {
                    //-----------Cherm 247 south
                    VectorList_01.Add(new Vector3(-3047.151f, 585.8731f, 7.908928f));
                    VectorList_01.Add(new Vector3(-3037.997f, 589.6797f, 7.815798f));
                    VectorList_01.Add(new Vector3(-3050.408f, 597.5205f, 6.909779f));
                }
                else if (iRanLoc == 6)
                {
                    //-----------Cherm cov store
                    VectorList_01.Add(new Vector3(-2959.535f, 387.8404f, 14.04316f));
                    VectorList_01.Add(new Vector3(-2973.912f, 390.9749f, 15.03499f));
                    VectorList_01.Add(new Vector3(-2981.786f, 390.5113f, 14.33195f));
                }
                else if (iRanLoc == 7)
                {
                    //-----------Cherm flesia
                    VectorList_01.Add(new Vector3(-2957.448f, 480.7054f, 15.70681f));
                    VectorList_01.Add(new Vector3(-2965.833f, 483.4164f, 15.69704f));
                    VectorList_01.Add(new Vector3(-2974.798f, 481.1916f, 14.72671f));
                }
                else if (iRanLoc == 8)
                {
                    //-----------Del P Flisia
                    VectorList_01.Add(new Vector3(-1212.138f, -335.7886f, 37.79067f));
                    VectorList_01.Add(new Vector3(-1214.548f, -327.7181f, 37.66832f));
                    VectorList_01.Add(new Vector3(-1219.321f, -315.0229f, 37.17657f));
                }
                else if (iRanLoc == 9)
                {
                    //-----------Del P amun
                    VectorList_01.Add(new Vector3(-1303.215f, -390.6413f, 36.69578f));
                    VectorList_01.Add(new Vector3(-1315.139f, -390.2487f, 36.56477f));
                    VectorList_01.Add(new Vector3(-1323.571f, -392.335f, 35.94392f));
                }
                else if (iRanLoc == 10)
                {
                    //-----------Del Poision
                    VectorList_01.Add(new Vector3(-1447.627f, -241.0643f, 49.81923f));
                    VectorList_01.Add(new Vector3(-1455.621f, -232.2648f, 49.78922f));
                    VectorList_01.Add(new Vector3(-1458.832f, -227.6372f, 48.64274f));
                }
                else
                {
                    //-----------Del Hillshop
                    VectorList_01.Add(new Vector3(-1828.599f, 798.9403f, 138.1795f));
                    VectorList_01.Add(new Vector3(-1821.645f, 787.6665f, 138.1489f));
                    VectorList_01.Add(new Vector3(-1818.875f, 784.5744f, 137.3242f));
                }
            }
            else if (iLocationX == 4)
            {
                vGetaway = new Vector3(1099.12f, -1270.16f, 19.795f);
                fGetDir = -51.03f;

                vTarget_02 = new Vector3(1098.566f, -1274.972f, 20.74246f);
                fphdirect = 312.774f;

                vTarget_03 = new Vector3(1099.12f, -1270.16f, 19.795f); //Depo
                vFuMiss = new Vector3(1125.113f, -1261.781f, 20.09493f);

                iRanLoc = FindRandom(76, 1, 6);
                if (iRanLoc == 1)
                {
                    //-----------Hair shop
                    VectorList_01.Add(new Vector3(1216.396f, -475.7311f, 66.20808f));
                    VectorList_01.Add(new Vector3(1206.959f, -470.4778f, 66.16388f));
                    VectorList_01.Add(new Vector3(1196.073f, -470.9982f, 65.57097f));
                }
                else if (iRanLoc == 2)
                {

                    //-----------Garrage
                    VectorList_01.Add(new Vector3(1160.074f, -314.111f, 69.20514f));
                    VectorList_01.Add(new Vector3(1159.967f, -327.2746f, 69.21417f));
                    VectorList_01.Add(new Vector3(1156.982f, -331.7316f, 68.32507f));
                }
                else if (iRanLoc == 3)
                {
                    //-----------Amun messa
                    VectorList_01.Add(new Vector3(846.6501f, -1035.193f, 28.3325f));
                    VectorList_01.Add(new Vector3(843.7968f, -1024.143f, 28.12939f));
                    VectorList_01.Add(new Vector3(839.9777f, -1011.106f, 27.00286f));
                }
                else if (iRanLoc == 4)
                {
                    //-----------Corner shop
                    VectorList_01.Add(new Vector3(1126.577f, -980.6263f, 45.41566f));
                    VectorList_01.Add(new Vector3(1142.111f, -981.1093f, 46.18622f));
                    VectorList_01.Add(new Vector3(1149.826f, -977.8307f, 45.73932f));
                }
                else if (iRanLoc == 5)
                {
                    //-----------TataV amun
                    VectorList_01.Add(new Vector3(2572.253f, 292.7031f, 108.7349f));
                    VectorList_01.Add(new Vector3(2569.835f, 304.0079f, 108.6078f));
                    VectorList_01.Add(new Vector3(2571.05f, 313.6378f, 107.9333f));
                }
                else
                {
                    //-----------TataV shope
                    VectorList_01.Add(new Vector3(2550.167f, 385.037f, 108.623f));
                    VectorList_01.Add(new Vector3(2560.021f, 385.3103f, 108.6211f));
                    VectorList_01.Add(new Vector3(2565.156f, 386.3684f, 107.9341f));
                }
            }
            else if (iLocationX == 5)
            {
                vGetaway = new Vector3(2470.4231f, 4079.9763f, 37.00f);
                fGetDir = -112.445f;

                vTarget_02 = new Vector3(2476.441f, 4087.215f, 38.11901f);
                fphdirect = 242.7f;

                vTarget_03 = new Vector3(2470.4231f, 4079.9763f, 37.00f); //Depo
                vFuMiss = new Vector3(2483.111f, 4082.512f, 37.41102f);

                iRanLoc = FindRandom(77, 0, 14);
                if (iRanLoc == 1)
                {
                    //-----------Harmon subur
                    VectorList_01.Add(new Vector3(617.5039f, 2775.508f, 42.08813f));
                    VectorList_01.Add(new Vector3(617.8914f, 2750.032f, 42.08892f));
                    VectorList_01.Add(new Vector3(617.494f, 2737.448f, 41.45228f));
                }
                else if (iRanLoc == 2)
                {
                    //-----------Harmon 247
                    VectorList_01.Add(new Vector3(546.1213f, 2663.55f, 42.1565f));
                    VectorList_01.Add(new Vector3(544.249f, 2673.423f, 42.15178f));
                    VectorList_01.Add(new Vector3(543.9064f, 2679.666f, 41.67859f));
                }
                else if (iRanLoc == 3)
                {
                    //-----------Gs Binco
                    VectorList_01.Add(new Vector3(1198.342f, 2713.979f, 38.22293f));
                    VectorList_01.Add(new Vector3(1198.509f, 2702.313f, 38.15563f));
                    VectorList_01.Add(new Vector3(1200.099f, 2695.825f, 37.36243f));
                }
                else if (iRanLoc == 4)
                {
                    //-----------Gs Corner
                    VectorList_01.Add(new Vector3(1168.47f, 2718.329f, 37.15754f));
                    VectorList_01.Add(new Vector3(1166.224f, 2703.072f, 38.17934f));
                    VectorList_01.Add(new Vector3(1164.742f, 2696.91f, 37.33692f));
                }
                else if (iRanLoc == 5)
                {
                    //-----------GS Falica
                    VectorList_01.Add(new Vector3(1176.768f, 2711.985f, 38.09777f));
                    VectorList_01.Add(new Vector3(1175.112f, 2702.563f, 38.1728f));
                    VectorList_01.Add(new Vector3(1175.921f, 2696.473f, 37.43602f));
                }
                else if (iRanLoc == 6)
                {
                    //-----------SAndy hair
                    VectorList_01.Add(new Vector3(1931.251f, 3734.453f, 32.84468f));
                    VectorList_01.Add(new Vector3(1933.528f, 3725.155f, 32.7968f));
                    VectorList_01.Add(new Vector3(1938.352f, 3717.634f, 31.7961f));
                }
                else if (iRanLoc == 7)
                {
                    //-----------SAndy 247
                    VectorList_01.Add(new Vector3(1959.433f, 3748.225f, 32.34375f));
                    VectorList_01.Add(new Vector3(1965.725f, 3740.154f, 32.32369f));
                    VectorList_01.Add(new Vector3(1970.195f, 3735.998f, 31.79704f));
                }
                else if (iRanLoc == 8)
                {
                    //-----------SAndy tatto
                    VectorList_01.Add(new Vector3(1865.294f, 3746.35f, 33.03188f));
                    VectorList_01.Add(new Vector3(1859.885f, 3748.965f, 33.01699f));
                    VectorList_01.Add(new Vector3(1857.872f, 3742.37f, 32.53915f));
                }
                else if (iRanLoc == 9)
                {
                    //-----------SAndy corner
                    VectorList_01.Add(new Vector3(1390.946f, 3607.937f, 34.98093f));
                    VectorList_01.Add(new Vector3(1394.429f, 3599.112f, 35.00449f));
                    VectorList_01.Add(new Vector3(1397.758f, 3594.731f, 34.39877f));
                }
                else if (iRanLoc == 10)
                {
                    //-----------SAndy amun
                    VectorList_01.Add(new Vector3(1689.871f, 3757.967f, 34.70535f));
                    VectorList_01.Add(new Vector3(1699.534f, 3751.866f, 34.51932f));
                    VectorList_01.Add(new Vector3(1705.501f, 3749.265f, 33.47446f));
                }
                else if (iRanLoc == 11)
                {
                    //-----------Grap Binko
                    VectorList_01.Add(new Vector3(1697.423f, 4821.755f, 42.06332f));
                    VectorList_01.Add(new Vector3(1686.561f, 4820.475f, 41.97686f));
                    VectorList_01.Add(new Vector3(1678.187f, 4819.64f, 41.48005f));
                }
                else if (iRanLoc == 12)
                {
                    //-----------Garp garrage
                    VectorList_01.Add(new Vector3(1706.918f, 4919.901f, 42.06368f));
                    VectorList_01.Add(new Vector3(1698.662f, 4929.488f, 42.07811f));
                    VectorList_01.Add(new Vector3(1698.783f, 4940.655f, 41.56523f));
                }
                else if (iRanLoc == 13)
                {
                    //-----------Char binko
                    VectorList_01.Add(new Vector3(-1102.444f, 2714.538f, 19.10787f));
                    VectorList_01.Add(new Vector3(-1095.547f, 2705.624f, 19.08519f));
                    VectorList_01.Add(new Vector3(-1093.724f, 2698.565f, 19.04576f));
                }
                else
                {
                    //-----------Charp Amu
                    VectorList_01.Add(new Vector3(-1121.844f, 2696.824f, 18.55415f));
                    VectorList_01.Add(new Vector3(-1112.695f, 2689.975f, 18.58567f));
                    VectorList_01.Add(new Vector3(-1108.882f, 2687.981f, 18.14283f));
                }
            }
            else
            {
                vGetaway = new Vector3(-32.27702f, 6420.57f, 30.94404f);
                fGetDir = 225.2031f;

                vTarget_02 = new Vector3(-38.61729f, 6420.182f, 31.49045f);
                fphdirect = 231.998f;

                vTarget_03 = new Vector3(-32.27702f, 6420.57f, 29.94404f); //Depo
                vFuMiss = new Vector3(-10.03841f, 6391.624f, 30.78662f);

                iRanLoc = FindRandom(78, 1, 5);
                if (iRanLoc == 1)
                {
                    //-----------Hair shop
                    VectorList_01.Add(new Vector3(-276.0725f, 6223.65f, 31.69553f));
                    VectorList_01.Add(new Vector3(-281.699f, 6232.842f, 31.60391f));
                    VectorList_01.Add(new Vector3(-286.0955f, 6241.862f, 30.79247f));
                }
                else if (iRanLoc == 2)
                {
                    //-----------tato
                    VectorList_01.Add(new Vector3(-295.0442f, 6199.955f, 31.48837f));
                    VectorList_01.Add(new Vector3(-289.1778f, 6199.99f, 31.46494f));
                    VectorList_01.Add(new Vector3(-286.6538f, 6203.642f, 30.81242f));
                }
                else if (iRanLoc == 3)
                {
                    //-----------amun
                    VectorList_01.Add(new Vector3(-334.0562f, 6081.944f, 31.45477f));
                    VectorList_01.Add(new Vector3(-324.8422f, 6075.586f, 31.24472f));
                    VectorList_01.Add(new Vector3(-317.418f, 6069.649f, 30.66432f));
                }
                else if (iRanLoc == 4)
                {
                    //-----------247
                    VectorList_01.Add(new Vector3(1734.999f, 6420.008f, 35.03723f));
                    VectorList_01.Add(new Vector3(1730.541f, 6410.849f, 35.00064f));
                    VectorList_01.Add(new Vector3(1728.83f, 6405.631f, 33.91109f));
                }
                else
                {
                    //-----------binko
                    VectorList_01.Add(new Vector3(6.315853f, 6508.681f, 31.87787f));
                    VectorList_01.Add(new Vector3(-1.083668f, 6516.653f, 31.87712f));
                    VectorList_01.Add(new Vector3(-6.146315f, 6518.496f, 30.76712f));
                }
            }

            VehicleSpawn("Stockade", vGetaway, fGetDir, false, false, true, false, 10, 0, 66, MyLang.Maptext[1], 1, false);
            ttTextBar_01.Label = "" + MyLang.Othertext[1] + "";

            BeOnOff.Add(false);//   bSuitCase   0   
            BeOnOff.Add(false);//   bJackIsBack 1   
            BeOnOff.Add(false);//   bMoneyVehAt 2   
            BeOnOff.Add(false);//   bJackWait   3   
            BeOnOff.Add(false);//   bTruckBlip  4   
            BeOnOff.Add(false);//   bMoveYourV  5   
            BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[13], "", 5000);
            bOnTheJob = true;
        }
        private void SeaBattles()
        {
            LogThis("SeaBattles");

            if (!bOnlineStuffLoaded)
                LoadOnlineIps(true);

            if (iLocationX == 1)
            {
                PropList_01.Clear();
                VectorList_01.Clear();
                VectorList_02.Clear();
                VehicleList_01.Clear();
                BeOnOff.Clear();

                Vector3 Vtug = new Vector3(-297.986f, -2508.42f, 0.28f);
                float fhead = 51.99f;
                VehicleSpawn("TUG", Vtug, fhead, false, false, false, false, 0, 0, 0, "", 5, false);

                Vector3 posy = new Vector3(-467.467f, -2421.15f, -0.86f);
                Vector3 Rota = new Vector3(0.00f, 0.00f, 140.04f);

                Prop_01 = BuildProp("prop_ind_barge_01_cr", posy, Rota, true, true);
                posy.Z = posy.Z - 3.50f;
                Vehicle ViCME = VehicleSpawn("SPEEDER", posy, Rota.Z, true, true, false, false, 23, 0, 0, "", 0, false);

                Prop_02 = BuildProp("zprop_bin_01a_old", Vtug, Rota, false, true);

                if (Prop_02 != null)
                    Prop_02.AttachTo(VehTrackin_05, 0, new Vector3(0.00f, -16.90f, 1.20f), new Vector3(0.00f, 0.00f, 90.00f));

                Prop_03 = BuildProp("prop_mp_base_marker", posy, Rota, false, true);

                if (Prop_01 != null && Prop_03 != null)
                    Prop_03.AttachTo(Prop_01, 0, new Vector3(0.07f, -16.80f, 0.95f), new Vector3(0.00f, 0.00f, 90.00f));

                vTarget_01 = new Vector3(-296.9974f, -2498.0f, 6.01f);
                vTarget_02 = new Vector3(-532.22f, -3142.22f, 4.879541f);

                Vector3 Vec = new Vector3(-451.83f, -2427.72f, 5.32f);
                VehicleSpawn(RanVehListX(1, 1, true), Vec, 48.22f, true, true, false, false, 0, 0, 0, "", 1, true);
                Vector3 Vec2 = new Vector3(-449.83f, -2425.72f, 5.32f);
                VehicleSpawn(RanVehListX(1, 1, true), Vec2, 48.22f, true, true, false, false, 0, 0, 0, "", 2, true);
                Vector3 Vec3 = new Vector3(-447.83f, -2423.72f, 5.32f);
                VehicleSpawn(RanVehListX(1, 1, true), Vec3, 48.22f, true, true, false, false, 0, 0, 0, "", 3, true);

                Vector3 vBargiePos01 = new Vector3(0.00f, 0.00f, 0.00f);
                Vector3 vBargieRot01 = new Vector3(0.00f, 0.00f, 0.00f);

                Vector3 vBargiePos02 = new Vector3(0.00f, 0.00f, 0.00f);
                Vector3 vBargieRot02 = new Vector3(0.00f, 0.00f, 0.00f);

                int iRandomDrops = RandInt(1, 3);

                if (iRandomDrops == 1)
                {
                    vBargiePos01 = new Vector3(3620.21f, 2629.51f, -1.525f);
                    vBargieRot01 = new Vector3(0.00f, 0.00f, 72.51f);

                    vBargiePos02 = new Vector3(3622.987f, 2586.88f, -1.525f);
                    vBargieRot02 = new Vector3(0.00f, 0.00f, 147.35f);

                    VectorList_01.Add(new Vector3(3649.372f, 2617.402f, 6.63372f));
                    VectorList_01.Add(new Vector3(3651.506f, 2614.691f, 6.633721f));
                    VectorList_01.Add(new Vector3(3627.223f, 2626.364f, 4.244568f));
                    VectorList_01.Add(new Vector3(3609.775f, 2630.035f, 4.244568f));
                    VectorList_01.Add(new Vector3(3628.146f, 2593.23f, 4.20523f));
                    VectorList_01.Add(new Vector3(3618.583f, 2578.76f, 4.20523f));

                    VectorList_02.Add(new Vector3(3420.099f, 2491.043f, 0.6345347f));
                    VectorList_02.Add(new Vector3(3405.634f, 2612.699f, 1.414109f));
                    VectorList_02.Add(new Vector3(3440.099f, 2712.043f, 1.188157f));
                    VectorList_02.Add(new Vector3(3549.929f, 2779.896f, 0.5909276f));
                    VectorList_02.Add(new Vector3(3675.02f, 2745.809f, -0.9453772f));
                    VectorList_02.Add(new Vector3(3710.018f, 2479.11f, -0.08554739f));

                    vTarget_03 = new Vector3(3652.68f, 2617.99f, 1.53f);
                    fphdirect = -48.99f;

                    vTarget_04 = new Vector3(2391.884f, 2606.851f, 714.0196f);

                    vTarget_05 = new Vector3(3461.911f, 2592.899f, 17.56484f);

                    fMission_02 = 129.3113f;

                    vGetaway = new Vector3(3638.695f, 2534.938f, 45.00f);
                }       //Area4
                else if (iRandomDrops == 2)
                {
                    vBargiePos01 = new Vector3(-3488.987f, 2567.464f, -1.525f);
                    vBargieRot01 = new Vector3(0.00f, 0.00f, 0.00f);

                    vBargiePos02 = new Vector3(-3461.614f, 2537.045f, -1.525f);
                    vBargieRot02 = new Vector3(0.00f, 0.00f, -90.782f);

                    VectorList_01.Add(new Vector3(-3504.892f, 2538.714f, 6.43768f));
                    VectorList_01.Add(new Vector3(-3503.309f, 2542.615f, 6.43768f));
                    VectorList_01.Add(new Vector3(-3468.269f, 2540.936f, 4.196299f));
                    VectorList_01.Add(new Vector3(-3455.491f, 2536.626f, 4.196299f));
                    VectorList_01.Add(new Vector3(-3490.959f, 2562.74f, 4.259959f));
                    VectorList_01.Add(new Vector3(-3488.732f, 2575.614f, 4.259959f));

                    VectorList_02.Add(new Vector3(-3361.782f, 2576.428f, 1.018636f));
                    VectorList_02.Add(new Vector3(-3429.236f, 2465.523f, -1.819907f));
                    VectorList_02.Add(new Vector3(-3388.378f, 2353.15f, 1.727046f));
                    VectorList_02.Add(new Vector3(-3304.568f, 2320.081f, 1.053782f));
                    VectorList_02.Add(new Vector3(-3198.47f, 2395.765f, 1.087626f));
                    VectorList_02.Add(new Vector3(-3210.874f, 2537.606f, 1.138748f));

                    vTarget_03 = new Vector3(-3506.61f, 2541.75f, 1.335f);
                    fphdirect = 59.99f;

                    vTarget_04 = new Vector3(-1986.925f, 2386.277f, 798.9652f);

                    vTarget_05 = new Vector3(-2777.655f, 2702.865f, 2.265981f);

                    fMission_02 = 151.1022f;

                    vGetaway = new Vector3(-3296.078f, 2434.163f, 45.00f);
                }       //Area 3
                else
                {
                    vBargiePos01 = new Vector3(-2294.5625f, 5076.313f, -1.525f);
                    vBargieRot01 = new Vector3(0.00f, 0.00f, -114.632f);

                    vBargiePos02 = new Vector3(-2291.265f, 5114.785f, -1.525f);
                    vBargieRot02 = new Vector3(0.00f, 0.00f, -58.89f);

                    VectorList_01.Add(new Vector3(-2325.56f, 5103.03f, 6.935183f));
                    VectorList_01.Add(new Vector3(-2329.237f, 5101.743f, 6.938537f));
                    VectorList_01.Add(new Vector3(-2300.375f, 5081.123f, 4.247458f));
                    VectorList_01.Add(new Vector3(-2287.496f, 5075.647f, 4.247458f));
                    VectorList_01.Add(new Vector3(-2285.91f, 5119.862f, 4.249745f));
                    VectorList_01.Add(new Vector3(-2296.667f, 5112.091f, 4.249745f));

                    VectorList_02.Add(new Vector3(-2366.315f, 5316.938f, 0.4459411f));
                    VectorList_02.Add(new Vector3(-2505.177f, 5118.204f, -1.392775f));
                    VectorList_02.Add(new Vector3(-2460.614f, 4977.973f, 2.337129f));
                    VectorList_02.Add(new Vector3(-2294.666f, 4919.8f, 2.374352f));
                    VectorList_02.Add(new Vector3(-2082.271f, 5040.844f, 0.138085f));
                    VectorList_02.Add(new Vector3(-1997.227f, 5188.623f, 1.223455f));
                    VectorList_02.Add(new Vector3(-1985.521f, 5297.569f, 1.387197f));
                    VectorList_02.Add(new Vector3(-2097.74f, 5386.565f, 0.2941358f));

                    vTarget_03 = new Vector3(-2329.28882f, 5105.92432f, 1.836f);//tug space
                    fphdirect = 27.899807f;

                    vTarget_04 = new Vector3(-1021.073f, 4403.199f, 716.9043f);

                    vTarget_05 = new Vector3(-2168.488f, 5191.466f, 45.00f);

                    fMission_02 = 222.6737f;

                    vGetaway = new Vector3(-2338.36f, 5068.45f, 15.797754f);
                }       //Area 6

                BuildProp("prop_ind_barge_01_cr", vBargiePos01, vBargieRot01, true, true);

                BuildProp("prop_ind_barge_01_cr", vBargiePos02, vBargieRot02, true, true);

                vFuMiss = new Vector3(-267.8495f, -2553.718f, 5.492561f);

                iMobStarz = RandInt(2, 10);

                BeOnOff.Add(false);//   bBargeDone  0   
                BeOnOff.Add(false);//   bChopRed    1 
                BeOnOff.Add(false);//   bTolow      2  
                BeOnOff.Add(false);//   bWait4Hel   3  
                BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[14], MyLang.Jobtext[31], 5000);
            }
            else if (iLocationX == 2)
            {
                fList_01.Clear();
                VectorList_01.Clear();

                vTarget_01 = new Vector3(-2062.635f, -1025.35f, 14.89584f); //yahht pos.

                vTarget_02 = new Vector3(-792.833f, -1501.074f, 1.868256f);  // Seasparrow
                fList_01.Add(124.9655f);
                vTarget_03 = new Vector3(-1003.107f, -1060.22f, -0.7159257f);  // Speedboat
                fList_01.Add(117.8598f);
                vTarget_04 = new Vector3(-1125.589f, -1609.41f, 3.980671f);  // technical
                fList_01.Add(308.9667f);

                int iRandFub = RandInt(0, 30);
                if (iRandFub < 10)
                    vFuMiss = new Vector3(-759.5714f, -1488.978f, 4.493412f);
                else if (iRandFub < 20)
                    vFuMiss = new Vector3(-1021.038f, -1087.49f, 1.444673f);
                else
                    vFuMiss = new Vector3(-1132.264f, -1583.583f, 3.785678f);

                VectorList_01.Add(new Vector3(-2089.241f, -1017.131f, 12.77942f));
                VectorList_01.Add(new Vector3(-2084.963f, -1018.17f, 12.7819f));
                VectorList_01.Add(new Vector3(-2075.85f, -1023.987f, 11.90897f));
                VectorList_01.Add(new Vector3(-2057.141f, -1023.712f, 11.90752f));
                VectorList_01.Add(new Vector3(-2059.652f, -1029.798f, 11.90751f));
                VectorList_01.Add(new Vector3(-2038.46f, -1033.382f, 8.971486f));
                VectorList_01.Add(new Vector3(-2079.459f, -1026.553f, 8.971498f));
                VectorList_01.Add(new Vector3(-2050.709f, -1027.698f, 8.971485f));
                VectorList_01.Add(new Vector3(-2095.92f, -1014.094f, 8.980425f));
                VectorList_01.Add(new Vector3(-2088.441f, -1016.918f, 8.971198f));
                VectorList_01.Add(new Vector3(-2121.264f, -1007.252f, 7.992996f));
                VectorList_01.Add(new Vector3(-2101.255f, -1014.084f, 5.884184f));
                VectorList_01.Add(new Vector3(-2090.708f, -1016.646f, 5.88879f));
                VectorList_01.Add(new Vector3(-2075.17f, -1019.912f, 5.884132f));
                VectorList_01.Add(new Vector3(-2033.05f, -1039.868f, 5.882174f));
                VectorList_01.Add(new Vector3(-2029.334f, -1042.119f, 2.566328f));
                VectorList_01.Add(new Vector3(-2052.608f, -1035.781f, 2.563384f));
                VectorList_01.Add(new Vector3(-2053.243f, -1022.338f, 3.010738f));
                VectorList_01.Add(new Vector3(-2065.84f, -1027.916f, 3.061461f));
                VectorList_01.Add(new Vector3(-2069.564f, -1019.077f, 3.067517f));

                VTBTimerPool.Add(ttTextBar_01);
                ttTextBar_01.Label = "" + MyLang.Othertext[7] + "";

                iMissionVar_02 = 20;
                if (bYachtOwner)
                {
                    Water02_BoatOff();
                    WriteNSMDat(0, -1);
                }
                Water02_AddHeistYacht(true);
                BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[14], MyLang.Jobtext[32], 5000);
            }
            else if (iLocationX == 3)
            {
                fList_01.Clear();
                BeOnOff.Clear();
                VectorList_01.Clear();
                VectorList_02.Clear();
                Vector3 vBoats = new Vector3(-1522.54f, 1504.275f, 109.20f);
                VehicleSpawn("Tropic", vBoats, 347.7118f, false, false, true, false, 11, 2, 66, MyLang.Maptext[17], 1, false);

                VectorList_01.Add(new Vector3(-2267.098f, 2718.057f, -0.1050927f));
                VectorList_01.Add(new Vector3(-2276.375f, 2800.253f, -0.02853893f));
                VectorList_01.Add(new Vector3(-2452.397f, 2758.311f, -0.1024196f));
                VectorList_01.Add(new Vector3(-2520.441f, 2781.299f, 0.01976691f));
                VectorList_01.Add(new Vector3(-2692.24f, 2803.303f, 0.09795412f));
                VectorList_01.Add(new Vector3(-2675.768f, 2549.733f, 0.09234437f));
                VectorList_01.Add(new Vector3(-2512.779f, 2457.329f, -0.1280194f));
                VectorList_01.Add(new Vector3(-2405.962f, 2498.461f, -0.1005725f));
                VectorList_01.Add(new Vector3(-2350.739f, 2531.461f, 0.1267544f));
                VectorList_01.Add(new Vector3(-2192.352f, 2542.014f, 0.1361143f));
                VectorList_01.Add(new Vector3(-2122.215f, 2487.729f, 0.1340764f));
                VectorList_01.Add(new Vector3(-2058.875f, 2488.626f, 0.1319462f));
                VectorList_01.Add(new Vector3(-1972.177f, 2535.516f, -0.03703161f));
                VectorList_01.Add(new Vector3(-1862.23f, 2559.718f, 0.08299349f));
                VectorList_01.Add(new Vector3(-1741.274f, 2562.792f, -0.05941249f));
                VectorList_01.Add(new Vector3(-1615.856f, 2555.23f, 0.007432766f));
                VectorList_01.Add(new Vector3(-1452.784f, 2256.166f, 16.83186f));
                VectorList_01.Add(new Vector3(-1435.809f, 2133.348f, 29.95456f));
                VectorList_01.Add(new Vector3(-1447.689f, 2105.221f, 41.10828f));
                VectorList_01.Add(new Vector3(-1453.399f, 2061.905f, 53.68446f));
                VectorList_01.Add(new Vector3(-1439.854f, 2001.397f, 56.65691f));
                VectorList_01.Add(new Vector3(-1476.355f, 1826.803f, 77.81793f));
                VectorList_01.Add(new Vector3(-1538.943f, 1693.724f, 92.91889f));

                VectorList_02.Add(new Vector3(-2271.455f, 2710.373f, 1.795847f));
                VectorList_02.Add(new Vector3(-2262.034f, 2797.965f, 1.158177f));
                VectorList_02.Add(new Vector3(-2443.822f, 2773.958f, 1.107026f));
                VectorList_02.Add(new Vector3(-2534.851f, 2785.696f, 1.705645f));
                VectorList_02.Add(new Vector3(-2686.559f, 2776.299f, 1.092641f));
                VectorList_02.Add(new Vector3(-2679.578f, 2560.405f, 3.279952f));
                VectorList_02.Add(new Vector3(-2502.054f, 2456.114f, 1.351156f));
                VectorList_02.Add(new Vector3(-2423.841f, 2488.548f, 1.536321f));
                VectorList_02.Add(new Vector3(-2335.076f, 2540.096f, 1.103614f));
                VectorList_02.Add(new Vector3(-2187.082f, 2533.962f, 1.61509f));
                VectorList_02.Add(new Vector3(-2135.926f, 2507.35f, 1.477846f));
                VectorList_02.Add(new Vector3(-2077.144f, 2481.595f, 1.757198f));
                VectorList_02.Add(new Vector3(-1959.703f, 2541.121f, 1.714661f));
                VectorList_02.Add(new Vector3(-1855.056f, 2563.261f, 1.079439f));
                VectorList_02.Add(new Vector3(-1746.728f, 2576.327f, 1.261585f));
                VectorList_02.Add(new Vector3(-1630.159f, 2546.065f, 1.604008f));
                VectorList_02.Add(new Vector3(-1462.37f, 2249.08f, 22.67013f));
                VectorList_02.Add(new Vector3(-1424.021f, 2124.391f, 43.95115f));
                VectorList_02.Add(new Vector3(-1449.981f, 2121.201f, 43.7417f));
                VectorList_02.Add(new Vector3(-1446.47f, 2074.82f, 55.03326f));
                VectorList_02.Add(new Vector3(-1434.415f, 2021.363f, 58.56808f));
                VectorList_02.Add(new Vector3(-1487.785f, 1819.803f, 81.04632f));
                VectorList_02.Add(new Vector3(-1549.853f, 1695.853f, 102.0555f));

                fList_01.Add(317.2858f);
                fList_01.Add(143.218f);
                fList_01.Add(162.8035f);
                fList_01.Add(3.788758f);
                fList_01.Add(16.96323f);
                fList_01.Add(62.12259f);
                fList_01.Add(84.93685f);
                fList_01.Add(282.6599f);
                fList_01.Add(70.49986f);
                fList_01.Add(344.4031f);
                fList_01.Add(174.1375f);
                fList_01.Add(261.1181f);
                fList_01.Add(75.94833f);
                fList_01.Add(63.00495f);
                fList_01.Add(273.4592f);
                fList_01.Add(302.6676f);
                fList_01.Add(287.7927f);
                fList_01.Add(62.98845f);
                fList_01.Add(306.0093f);
                fList_01.Add(97.05612f);
                fList_01.Add(136.722f);
                fList_01.Add(284.4136f);
                fList_01.Add(232.9542f);

                vTarget_02 = new Vector3(-2078.157f, 2600.188f, -0.09435405f);
                Water03_RandDest(8);

                VTBTimerPool.Add(BtSlideBar);
                BtSlideBar.Label = "" + MyLang.Othertext[18] + "";
                ttTextBar_02.Label = "" + MyLang.Othertext[1] + "";

                vFuMiss = new Vector3(-1504.369f, 1483.937f, 116.4095f);

                BeOnOff.Add(false);//   bOutOfWater 0 
                BeOnOff.Add(false);//   bOnTarget   1 
                BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[14], MyLang.Jobtext[33], 5000);
            }
            else if (iLocationX == 4)
            {
                VectorList_01.Clear();
                iList_01.Clear();
                BeOnOff.Clear();
                Vector3 VechPos = new Vector3(658.0602f, -1499.01f, 9.931272f);
                VehicleSpawn("Blazer5", VechPos, 18.00f, false, false, true, false, 0, 0, 66, MyLang.Maptext[18], 1, true);

                VectorList_01.Add(new Vector3(644.6057f, -1453.172f, 8.380302f));
                VectorList_01.Add(new Vector3(617.7773f, -1362.886f, 8.36958f));
                VectorList_01.Add(new Vector3(598.3756f, -1306.039f, 8.368834f));
                VectorList_01.Add(new Vector3(593.0373f, -1246.08f, 8.466216f));
                VectorList_01.Add(new Vector3(593.0325f, -1177.757f, 8.655041f));
                VectorList_01.Add(new Vector3(593.1477f, -1102.322f, 8.863312f));
                VectorList_01.Add(new Vector3(591.6036f, -1011.895f, 9.112757f));
                VectorList_01.Add(new Vector3(591.8387f, -907.4847f, 9.397379f));
                VectorList_01.Add(new Vector3(597.3967f, -854.2623f, 9.520418f));
                VectorList_01.Add(new Vector3(585.8411f, -850.317f, 9.540106f));
                VectorList_01.Add(new Vector3(593.5573f, -795.2447f, 9.708557f));
                VectorList_01.Add(new Vector3(594.1461f, -696.8318f, 11.49453f));
                VectorList_01.Add(new Vector3(609.5754f, -615.5567f, 13.03183f));
                VectorList_01.Add(new Vector3(650.6841f, -525.8651f, 13.7698f));
                VectorList_01.Add(new Vector3(740.8145f, -445.4544f, 16.7115f));
                VectorList_01.Add(new Vector3(815.7368f, -420.1507f, 24.94323f));
                VectorList_01.Add(new Vector3(853.3591f, -413.1623f, 28.1094f));
                VectorList_01.Add(new Vector3(890.9553f, -406.0472f, 31.22633f));
                VectorList_01.Add(new Vector3(926.817f, -398.8194f, 40.30638f));
                VectorList_01.Add(new Vector3(977.196f, -377.061f, 44.12959f));
                VectorList_01.Add(new Vector3(1019.552f, -331.3167f, 47.8512f));
                VectorList_01.Add(new Vector3(1048.574f, -286.2695f, 49.32551f));
                VectorList_01.Add(new Vector3(1141.052f, -148.9637f, 53.11688f));
                VectorList_01.Add(new Vector3(1153.834f, -131.8845f, 53.92586f));
                VectorList_01.Add(new Vector3(1182.161f, -115.118f, 55.40979f));
                VectorList_01.Add(new Vector3(1193.617f, -107.5604f, 55.85151f));
                VectorList_01.Add(new Vector3(1228.677f, -83.05925f, 58.0977f));
                VectorList_01.Add(new Vector3(1220.656f, -91.59956f, 57.3595f));
                VectorList_01.Add(new Vector3(1240.186f, -84.26402f, 58.30257f));
                VectorList_01.Add(new Vector3(1267.35f, -60.69587f, 59.6433f));
                VectorList_01.Add(new Vector3(1299.277f, -50.74736f, 62.17868f));
                VectorList_01.Add(new Vector3(1326.597f, -55.19455f, 66.49007f));
                VectorList_01.Add(new Vector3(1350.118f, -60.14297f, 70.46875f));
                VectorList_01.Add(new Vector3(1367.034f, -67.37091f, 74.93937f));
                VectorList_01.Add(new Vector3(1383.645f, -78.74095f, 80.77425f));
                VectorList_01.Add(new Vector3(1403.523f, -79.4838f, 86.1574f));
                VectorList_01.Add(new Vector3(1429.455f, -73.40284f, 91.33286f));
                VectorList_01.Add(new Vector3(1447.304f, -69.76672f, 93.72147f));
                VectorList_01.Add(new Vector3(1463.348f, -66.92113f, 97.12095f));
                VectorList_01.Add(new Vector3(1478.598f, -61.89777f, 101.4568f));
                VectorList_01.Add(new Vector3(1498.115f, -55.76527f, 106.721f));
                VectorList_01.Add(new Vector3(1520.315f, -43.57081f, 113.1369f));
                VectorList_01.Add(new Vector3(1537.892f, -45.18201f, 116.3369f));
                VectorList_01.Add(new Vector3(1555.162f, -41.50235f, 118.0891f));
                VectorList_01.Add(new Vector3(1580.393f, -34.48945f, 119.9327f));
                VectorList_01.Add(new Vector3(1596.361f, -28.97597f, 120.3855f));
                VectorList_01.Add(new Vector3(1614.301f, -27.9798f, 122.7313f));
                VectorList_01.Add(new Vector3(1628.417f, -30.19465f, 125.4519f));
                VectorList_01.Add(new Vector3(1642.442f, -32.26805f, 129.3114f));
                VectorList_01.Add(new Vector3(1655.088f, -19.52f, 133.676f));

                BeOnOff.Add(false);//   bRubishFond 0 

                iList_01.Add(0);//  iBlowenIt 0 
                iList_01.Add(0);//  iPuckaFuker 1 

                VTBTimerPool.Add(ttTextBar_02);
                VTBTimerPool.Add(ttTextBar_01);
                ttTextBar_02.Label = "" + MyLang.Othertext[1] + "";
                ttTextBar_01.Label = "" + MyLang.Othertext[19] + "";
                iMissionVar_01 = VectorList_01.Count;
                vFuMiss = new Vector3(682.1233f, -1501.779f, 9.200512f);
                BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[14], MyLang.Jobtext[34], 5000);
            }
            else if (iLocationX == 5)
            {
                VectorList_01.Clear();
                VectorList_02.Clear();
                iList_01.Clear();
                BeOnOff.Clear();
                VectorList_02.Add(new Vector3(-3417.66f, 981.9805f, 8.34669f));
                VectorList_01.Add(new Vector3(-3425.679f, 988.0658f, -0.4135762f));

                VectorList_02.Add(new Vector3(-1114.736f, -1007.078f, 2.177857f));
                VectorList_01.Add(new Vector3(-1116.891f, -1002.886f, -0.3947005f));

                VectorList_02.Add(new Vector3(-964.8194f, -996.0452f, 2.002331f));
                VectorList_01.Add(new Vector3(-960.1927f, -995.0172f, -0.5029534f));

                VectorList_02.Add(new Vector3(-951.4834f, -1137.628f, 2.17064f));
                VectorList_01.Add(new Vector3(-949.938f, -1142.282f, -0.4759525f));

                VectorList_02.Add(new Vector3(-902.7395f, -1334.835f, 1.605166f));
                VectorList_01.Add(new Vector3(-903.6382f, -1339.536f, -0.474332f));

                VectorList_02.Add(new Vector3(-906.389f, -1464.898f, 1.634168f));
                VectorList_01.Add(new Vector3(-911.6304f, -1468.966f, -0.4746946f));

                VectorList_02.Add(new Vector3(-762.3993f, -1377.127f, 1.595215f));
                VectorList_01.Add(new Vector3(-761.4526f, -1370.358f, -0.4747677f));

                VectorList_02.Add(new Vector3(-730.4474f, -1381.247f, 1.595219f));
                VectorList_01.Add(new Vector3(-735.7456f, -1381.012f, -0.4747501f));

                VectorList_02.Add(new Vector3(-291.5653f, -2769.219f, 2.1953f));
                VectorList_01.Add(new Vector3(-292.4311f, -2765.102f, -0.9227597f));

                VectorList_02.Add(new Vector3(-115.8161f, -2749.743f, 1.054507f));
                VectorList_01.Add(new Vector3(-119.3161f, -2739.881f, -0.4958232f));

                VectorList_02.Add(new Vector3(12.84902f, -2779.834f, 2.525953f));
                VectorList_01.Add(new Vector3(-2.132256f, -2773.471f, -0.3174165f));

                VectorList_02.Add(new Vector3(128.3928f, -2264.188f, 6.081558f));
                VectorList_01.Add(new Vector3(141.4335f, -2272.176f, -0.4737459f));

                VectorList_02.Add(new Vector3(3854.963f, 4460.619f, 1.849768f));
                VectorList_01.Add(new Vector3(3855.122f, 4447.122f, -0.4748148f));

                VectorList_02.Add(new Vector3(3373.243f, 5183.339f, 1.460242f));
                VectorList_01.Add(new Vector3(3372.931f, 5189.433f, -0.4748721f));

                VectorList_02.Add(new Vector3(-1612.876f, 5261.07f, 3.974101f));
                VectorList_01.Add(new Vector3(-1613.518f, 5269.683f, -0.147253f));

                VectorList_02.Add(new Vector3(712.3718f, 4101.125f, 35.78519f));
                VectorList_01.Add(new Vector3(707.4186f, 4110.55f, 29.52869f));

                vTarget_01 = new Vector3(1313.976f, 4318.277f, 38.14502f);
                Vector3 Vtar = new Vector3(1291.9556f, 4332.9907f, 37.6536f);
                VehicleSpawn("CARGOBOB2", Vtar, -120.36f, false, true, false, false, 0, 0, 0, "", 1, false);

                vFuMiss = new Vector3(1349.204f, 4370.698f, 43.82962f);

                BeOnOff.Add(false);//    bTruckBlip  0
                iList_01.Add(0);// timmer 
                BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[14], MyLang.Jobtext[35], 5000);
            }
            else
            {
                fList_01.Clear();
                fList_02.Clear();
                VectorList_01.Clear();
                VectorList_02.Clear();

                VectorList_01.Add(new Vector3(514.5162f, 4817.99f, -68.99113f)); fList_01.Add(358.4791f);       //0
                VectorList_01.Add(new Vector3(515.1494f, 4833.569f, -68.99053f)); fList_01.Add(147.967f);       //1
                VectorList_01.Add(new Vector3(514.2175f, 4845.671f, -66.18684f)); fList_01.Add(171.5724f);       //2
                VectorList_01.Add(new Vector3(511.546f, 4839.045f, -66.18919f)); fList_01.Add(277.5858f);       //3
                VectorList_01.Add(new Vector3(514.0159f, 4826.606f, -62.58789f)); fList_01.Add(281.0165f);       //4
                VectorList_01.Add(new Vector3(516.7152f, 4835.981f, -62.58571f)); fList_01.Add(285.4374f);       //5
                VectorList_01.Add(new Vector3(512.8048f, 4834.631f, -62.58789f)); fList_01.Add(39.10049f);       //6
                VectorList_01.Add(new Vector3(512.0849f, 4847.815f, -62.58978f)); fList_01.Add(315.7887f);       //7
                VectorList_01.Add(new Vector3(514.315f, 4855.767f, -62.5621f)); fList_01.Add(331.6915f);       //8
                VectorList_01.Add(new Vector3(514.342f, 4862.028f, -62.5621f)); fList_01.Add(81.839f);       //9
                VectorList_01.Add(new Vector3(514.2056f, 4867.008f, -62.5621f)); fList_01.Add(345.2088f);       //10
                VectorList_01.Add(new Vector3(516.3999f, 4877.61f, -62.58648f)); fList_01.Add(247.0659f);       //11
                VectorList_01.Add(new Vector3(517.0668f, 4888.617f, -66.19463f)); fList_01.Add(315.7018f);
                VectorList_01.Add(new Vector3(511.3239f, 4898.304f, -66.14313f)); fList_01.Add(212.5531f);
                VectorList_01.Add(new Vector3(516.1567f, 4895.687f, -66.14314f)); fList_01.Add(210.9975f);
                VectorList_01.Add(new Vector3(515.4485f, 4886.842f, -68.98938f)); fList_01.Add(64.17663f);
                VectorList_01.Add(new Vector3(515.063f, 4874.99f, -68.99102f)); fList_01.Add(134.8187f);
                VectorList_01.Add(new Vector3(514.2709f, 4868.423f, -68.99116f)); fList_01.Add(169.0464f);
                VectorList_01.Add(new Vector3(514.1342f, 4857.547f, -68.99112f)); fList_01.Add(179.0815f);

                VectorList_02.Add(new Vector3(-1485.873f, 5874.927f, -23.60273f)); fList_02.Add(338.469f);
                VectorList_02.Add(new Vector3(-1452.883f, 5891.918f, -26.59448f)); fList_02.Add(40.32843f);
                VectorList_02.Add(new Vector3(-1470.491f, 5931.848f, -34.98941f)); fList_02.Add(351.9011f);

                Vector3 Posy = new Vector3(-1457.39f, 5976.5293f, -36.6497f);
                Vector3 Rota = new Vector3(0.00f, 0.00f, 38.4993f);

                BuildProp("xm_prop_x17_sub", Posy, Rota, false, true);

                vTarget_01 = new Vector3(-865.0032f, 5869.187f, -0.7135592f);
                vTarget_02 = new Vector3(512.4218f, 4836.779f, -63.58794f);
                vTarget_03 = new Vector3(514.3708f, 4844f, -63.58934f);
                vTarget_04 = new Vector3(-1415.453f, 6009.928f, -15.73509f);
                vTarget_05 = new Vector3(-1465.418f, 5970.25f, -8.544f);

                VehicleSpawn("STROMBERG", new Vector3(-323.972f, 6093.478f, 30.71f), -134.72f, false, false, true, false, 0, 0, 66, MyLang.Maptext[19], 1, true);

                vFuMiss = new Vector3(-307.1304f, 6081.307f, 30.701f);
                BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[14], MyLang.Jobtext[36], 5000);
            }
            bOnTheJob = true;
        }
        private void ImportsExpo()
        {
            LogThis("ImportsExpo");
            UpppDateIMPEXList();
            VectorList_01.Clear();
            VectorList_02.Clear();
            fList_01.Clear();
            iTime_01.Clear();
            iList_01.Clear();
            iList_02.Clear();
            sList_01.Clear();
            BeOnOff.Clear();
            ttTextBar_01.Label = "" + MyLang.Othertext[10] + "";
            BtSlideBar.Label = "" + MyLang.Othertext[18] + "";
            BtSlideBar.BackgroundColor = Color.Black;
            BtSlideBar.ForegroundColor = Color.White;

            iList_01.Add(0);//  NoCars  0   
            iList_01.Add(0);//  VehType  1   
            iList_01.Add(0);//  VehHealth  2   

            BeOnOff.Add(false);//   bTruckBlip  0 

            iTime_01.Add(0);

            Vector3 PVec_01 = Vector3.Zero;
            Vector3 PRot_01 = Vector3.Zero;
            Vector3 PVec_02 = Vector3.Zero;
            Vector3 PRot_02 = Vector3.Zero;

            if (iLocationX == 1)
            {
                VectorList_01.Add(new Vector3(-471.7313f, -2423.815f, 3.063863f));
                VectorList_01.Add(new Vector3(-440.5895f, -2451.739f, 5.476831f));
                VectorList_01.Add(new Vector3(-271.6974f, -2615.334f, 5.519654f));

                VectorList_02.Add(new Vector3(-448.7739f, -2418.878f, 6.00079f)); fList_01.Add(150.2767f);
                VectorList_02.Add(new Vector3(-449.0481f, -2428.503f, 6.261684f)); fList_01.Add(229.8575f);

                PVec_01 = new Vector3(-467.467f, -2421.15f, -0.86f);
                PRot_01 = new Vector3(0.00f, 0.00f, -40.04f);

                PVec_02 = new Vector3(-460.349274f, -2434.24951f, 4.00978384f);
                PRot_02 = new Vector3(6.59998989f, 0.00f, 49.2614975f);
            }
            else if (iLocationX == 2)
            {
                VectorList_01.Add(new Vector3(-2155.33f, -528.2202f, 2.691958f));
                VectorList_01.Add(new Vector3(-2107.276f, -485.45f, 4.257054f));
                VectorList_01.Add(new Vector3(-2064.365f, -411.8389f, 10.8162f));

                VectorList_02.Add(new Vector3(-2137.034f, -487.0437f, 2.997781f)); fList_01.Add(248.9881f);
                VectorList_02.Add(new Vector3(-2130.624f, -489.7626f, 2.564268f)); fList_01.Add(329.4985f);

                PVec_01 = new Vector3(-2151.424f, -523.7899f, -2.06f);
                PRot_01 = new Vector3(0.00f, 0.00f, -46.224f);

                PVec_02 = new Vector3(-2139.552f, -508.325f, 1.06558251f);
                PRot_02 = new Vector3(15.3000126f, 0.00f, 137.25f);
            }
            else if (iLocationX == 3)
            {
                VectorList_01.Add(new Vector3(-3298.518f, 1270.644f, 1.726939f));
                VectorList_01.Add(new Vector3(-3220.54f, 1255.031f, 2.906645f));
                VectorList_01.Add(new Vector3(-3013.054f, 1207.983f, 16.53849f));

                VectorList_02.Add(new Vector3(-3256.225f, 1260.652f, 2.412136f)); fList_01.Add(255.7132f);
                VectorList_02.Add(new Vector3(-3253.803f, 1253.441f, 2.655439f)); fList_01.Add(22.71264f);

                PVec_01 = new Vector3(-3290.715f, 1271.307f, -2.56f);
                PRot_01 = new Vector3(0.00f, 0.00f, -103.5014f);

                PVec_02 = new Vector3(-3271.32544f, 1268.72021f, 0.56715298f);
                PRot_02 = new Vector3(15.3000135f, 0.00f, 77.8570786f);
            }
            else if (iLocationX == 4)
            {
                VectorList_01.Add(new Vector3(2872.187f, -625.9441f, 2.311935f));
                VectorList_01.Add(new Vector3(2807.857f, -655.1345f, 1.71902f));
                VectorList_01.Add(new Vector3(2738.233f, -688.6348f, 10.93631f));

                VectorList_02.Add(new Vector3(2835.066f, -633.0577f, 1.845662f)); fList_01.Add(135.2393f);
                VectorList_02.Add(new Vector3(2825.964f, -643.6343f, 1.232047f)); fList_01.Add(109.0696f);

                PVec_01 = new Vector3(2867.1411f, -629.7086f, -2.06f);
                PRot_01 = new Vector3(0.00f, 0.00f, 106.6414f);

                PVec_02 = new Vector3(2849.26367f, -637.624939f, 0.94101167f);
                PRot_02 = new Vector3(15.3000135f, 0.00f, -70.9093094f);
            }
            else if (iLocationX == 5)
            {
                VectorList_01.Add(new Vector3(3895.991f, 4465.392f, 1.885381f));
                VectorList_01.Add(new Vector3(3827.638f, 4464.061f, 2.2999f));
                VectorList_01.Add(new Vector3(3771.6f, 4463.569f, 6.473855f));

                VectorList_02.Add(new Vector3(3817.498f, 4456.074f, 3.678974f)); fList_01.Add(56.81924f);
                VectorList_02.Add(new Vector3(3807.958f, 4466.089f, 3.956213f)); fList_01.Add(97.24484f);

                PVec_01 = new Vector3(3891.6228f, 4466.2192f, -2.86f);
                PRot_01 = new Vector3(0.00f, 0.00f, 90.0789f);

                PVec_02 = new Vector3(3871.53296f, 4463.60156f, 1.43711805f);
                PRot_02 = new Vector3(5.8000083f, 0.00f, -89.8046951f);
            }
            else
            {
                VectorList_01.Add(new Vector3(-1838.067f, 4866.93f, 2.02f));
                VectorList_01.Add(new Vector3(-1829.18787f, 4812.896f, 2.887918f));
                VectorList_01.Add(new Vector3(-1745.28223f, 4665.32227f, 18.1445694f));

                VectorList_02.Add(new Vector3(-1824.44f, 4818.69f, 2.8897f)); fList_01.Add(159.27f);//Ped
                VectorList_02.Add(new Vector3(-1829.18787f, 4812.896f, 2.887918f)); fList_01.Add(136.00f);//Vehicle

                PVec_01 = new Vector3(-1836.00244f, 4862.52637f, -1.411000878f);
                PRot_01 = new Vector3(0.00f, 0.00f, -156.65f);

                PVec_02 = new Vector3(-1826.45215f, 4845.18213f, 1.51857018f);
                PRot_02 = new Vector3(14.3000679f, 0.00f, 23.1414642f);
            }

            BuildProp("prop_ind_barge_01_cr", PVec_01, PRot_01, true, true);
            BuildProp("imp_prop_impexp_bblock_lrg1", PVec_02, PRot_02, true, true);

            ImportsExpo_CollisionBug(iLocationX);

            BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[15], "", 5000);
            bOnTheJob = true;
        }
        private void DebtCollect()
        {
            LogThis("DebtCollect");

            if (!bOnlineStuffLoaded)
                LoadOnlineIps(true);

            VectorList_01.Clear();
            VectorList_02.Clear();
            BeOnOff.Clear();

            BeOnOff.Add(false);//   bSuitCase   0 
            BeOnOff.Add(false);//   bAddIplLd   1 

            fGetDir = 0.00f;

            int iRando = FindRandom(12, 1, 5);

            if (iLocationX == 1)
            {
                if (iRando == 1)
                {
                    VectorList_01.Add(new Vector3(1230.83f, -1591.396f, 53.77849f));
                    vFuMiss = new Vector3(1237.73f, -1610.2f, 51.86958f);
                }
                else if (iRando == 2)
                {
                    VectorList_01.Add(new Vector3(-1.921694f, -1442.32f, 30.96308f));
                    vFuMiss = new Vector3(-0.4836727f, -1455.9f, 29.8962f);
                }
                else if (iRando == 3)
                {
                    VectorList_01.Add(new Vector3(197.9588f, -1725.563f, 29.66365f));
                    vFuMiss = new Vector3(200.5367f, -1740.033f, 28.36587f);
                }
                else if (iRando == 4)
                {
                    VectorList_01.Add(new Vector3(171.032f, -1871.397f, 24.40023f));
                    vFuMiss = new Vector3(163.3284f, -1885.499f, 23.13896f);
                }
                else
                {
                    VectorList_01.Add(new Vector3(399.8479f, -1864.863f, 26.71638f));
                    vFuMiss = new Vector3(410.4913f, -1877.867f, 25.63404f);
                }

                // Small Apart;
                VectorList_01.Add(new Vector3(255.6427f, -1001.104f, -99.00988f));
                VectorList_01.Add(new Vector3(261.9597f, -1002.951f, -99.00864f));
                VectorList_01.Add(new Vector3(265.3889f, -995.8669f, -99.00861f));
                VectorList_01.Add(new Vector3(266.1645f, -1007.233f, -101.0086f)); //Start--works

                vTarget_01 = new Vector3(145.6812f, -1044.564f, 29.37781f);
                iCashReward = RandInt(600, 650);

                vTarget_03 = new Vector3(152.1862f, -1028.955f, 28.73017f);
            }
            else if (iLocationX == 2)
            {
                if (iRando == 1)
                {
                    VectorList_01.Add(new Vector3(-914.4083f, -455.2541f, 39.59985f));//                    Wezal App 26;

                    VectorList_01.Add(new Vector3(-899.3471f, -434.4514f, 89.2646f));
                    VectorList_01.Add(new Vector3(-894.4338f, -441.2721f, 89.26263f));
                    VectorList_01.Add(new Vector3(-891.5045f, -428.4247f, 89.25385f));
                    VectorList_01.Add(new Vector3(-900.9719f, -430.0855f, 94.05854f));
                    VectorList_01.Add(new Vector3(-900.9902f, -438.8939f, 94.05856f));
                    VectorList_01.Add(new Vector3(-899.51f, -440.603f, 94.05856f));
                    VectorList_01.Add(new Vector3(-895.0486f, -446.9772f, 95.46671f));
                    VectorList_01.Add(new Vector3(-881.1011f, -447.6875f, 95.46118f));
                    VectorList_01.Add(new Vector3(-890.693f, -453.1191f, 95.46118f));  //Start
                    fGetDir = -70.00f;

                    vFuMiss = new Vector3(-932.4382f, -461.422f, 36.64993f);
                }        //Wezal App 26;
                else if (iRando == 2)
                {
                    VectorList_01.Add(new Vector3(-774.9841f, 313.0516f, 85.69816f));

                    VectorList_01.Add(new Vector3(-755.1921f, 324.9401f, 199.4861f));
                    VectorList_01.Add(new Vector3(-756.4911f, 321.966f, 199.5233f));
                    VectorList_01.Add(new Vector3(-763.6169f, 318.8523f, 199.4911f));
                    VectorList_01.Add(new Vector3(-763.3571f, 328.4738f, 199.4863f));
                    VectorList_01.Add(new Vector3(-778.1786f, 315.4348f, 195.8864f));
                    VectorList_01.Add(new Vector3(-778.4504f, 327.8043f, 196.086f));
                    VectorList_01.Add(new Vector3(-763.5885f, 331.035f, 196.086f));
                    VectorList_01.Add(new Vector3(-773.4202f, 334.114f, 196.086f));
                    VectorList_01.Add(new Vector3(-774.23f, 342.00f, 196.6862f)); //start
                    fGetDir = 90.00f;

                    vFuMiss = new Vector3(-772.3277f, 294.0016f, 85.0843f);
                }   //Eclips towers
                else if (iRando == 3)
                {
                    VectorList_01.Add(new Vector3(-47.98295f, -587.1663f, 37.95301f));

                    VectorList_01.Add(new Vector3(-41.4437f, -583.9338f, 78.83031f));
                    VectorList_01.Add(new Vector3(-34.13421f, -583.5911f, 78.86551f));
                    VectorList_01.Add(new Vector3(-27.02728f, -580.8799f, 79.23077f));
                    VectorList_01.Add(new Vector3(-11.76741f, -586.218f, 79.43074f));
                    VectorList_01.Add(new Vector3(-9.632593f, -595.597f, 79.43023f));
                    VectorList_01.Add(new Vector3(-9.363688f, -597.8205f, 79.43023f));
                    VectorList_01.Add(new Vector3(-31.17531f, -595.0803f, 80.03091f));  //Start

                    fGetDir = -110.00f;

                    vFuMiss = new Vector3(-60.04512f, -575.9579f, 36.77391f);
                }   //Integraty 28;
                else if (iRando == 4)
                {
                    VectorList_01.Add(new Vector3(-175.3135f, 502.5657f, 137.4208f));

                    VectorList_01.Add(new Vector3(-172.6292f, 492.1187f, 130.0437f));
                    VectorList_01.Add(new Vector3(-173.6727f, 490.9218f, 130.0437f));
                    VectorList_01.Add(new Vector3(-167.9145f, 490.3182f, 133.8722f));
                    VectorList_01.Add(new Vector3(-166.1767f, 494.7598f, 133.8438f));
                    VectorList_01.Add(new Vector3(-166.8645f, 479.2725f, 133.8438f));
                    VectorList_01.Add(new Vector3(-164.5432f, 479.6711f, 133.8438f));
                    VectorList_01.Add(new Vector3(-165.7053f, 484.7502f, 137.2585f));
                    VectorList_01.Add(new Vector3(-167.4492f, 495.1891f, 137.6537f));
                    VectorList_01.Add(new Vector3(-173.8757f, 497.8188f, 137.666f)); //Start
                    fGetDir = -170.00f;

                    vFuMiss = new Vector3(-186.034f, 507.852f, 134.6451f);
                }   //Wild oats Dr
                else
                {
                    VectorList_01.Add(new Vector3(119.5764f, 564.1172f, 183.9593f));

                    VectorList_01.Add(new Vector3(117.9137f, 567.4348f, 176.6971f));
                    VectorList_01.Add(new Vector3(118.6697f, 569.1439f, 176.6971f));
                    VectorList_01.Add(new Vector3(124.1776f, 555.1124f, 180.4973f));
                    VectorList_01.Add(new Vector3(123.6576f, 541.2617f, 180.4975f));
                    VectorList_01.Add(new Vector3(126.0195f, 543.5494f, 183.9233f));
                    VectorList_01.Add(new Vector3(123.7556f, 555.7462f, 184.2971f));
                    VectorList_01.Add(new Vector3(117.4815f, 559.4827f, 184.3049f)); //Start
                    fGetDir = 180.00f;

                    vFuMiss = new Vector3(121.7479f, 572.1733f, 182.6833f);
                }                    //Whispy mount drv

                vTarget_01 = new Vector3(263.0179f, 220.9197f, 101.6833f);
                iCashReward = RandInt(5000, 5500);

                vTarget_03 = new Vector3(219.8759f, 220.3288f, 105.0024f);
            }
            else if (iLocationX == 3)
            {
                if (iRando == 1)
                {
                    VectorList_01.Add(new Vector3(-3194.99f, 1221.228f, 10.04832f));
                    vFuMiss = new Vector3(-3183.036f, 1220.357f, 9.448875f);
                }
                else if (iRando == 2)
                {
                    VectorList_01.Add(new Vector3(-3232.137f, 1067.74f, 11.01528f));
                    vFuMiss = new Vector3(-3224.607f, 1070.247f, 10.52774f);
                }
                else if (iRando == 3)
                {
                    VectorList_01.Add(new Vector3(-2992.66f, 707.0112f, 28.49655f));
                    vFuMiss = new Vector3(-3014.989f, 698.4484f, 22.38799f);
                }
                else if (iRando == 4)
                {
                    VectorList_01.Add(new Vector3(-3093.228f, 349.4763f, 7.537311f));
                    vFuMiss = new Vector3(-3080.656f, 335.7588f, 6.774641f);
                }
                else
                {
                    VectorList_01.Add(new Vector3(-3038.996f, 492.8183f, 6.772681f));
                    vFuMiss = new Vector3(-3027.013f, 488.6257f, 6.350005f);
                }
                // Medi Apart;
                VectorList_01.Add(new Vector3(338.8605f, -1003.227f, -99.19618f));
                VectorList_01.Add(new Vector3(343.8432f, -1002.688f, -99.19618f));
                VectorList_01.Add(new Vector3(351.9203f, -995.3839f, -99.19619f));
                VectorList_01.Add(new Vector3(347.5306f, -994.1599f, -99.19618f));
                VectorList_01.Add(new Vector3(346.5659f, -1012.851f, -99.19622f)); //Start--

                vTarget_01 = new Vector3(-2957.636f, 480.4899f, 15.70684f);
                iCashReward = RandInt(600, 650);

                vTarget_03 = new Vector3(-2972.304f, 464.4413f, 14.66363f);
            }
            else if (iLocationX == 4)
            {
                if (iRando == 1)
                {
                    VectorList_01.Add(new Vector3(1262.519f, -429.8223f, 70.02103f));
                    vFuMiss = new Vector3(1277.271f, -426.1381f, 68.48877f);
                }
                else if (iRando == 2)
                {
                    VectorList_01.Add(new Vector3(930.8569f, -245.4462f, 69.00272f));
                    vFuMiss = new Vector3(923.9637f, -254.9505f, 67.8756f);
                }
                else if (iRando == 3)
                {
                    VectorList_01.Add(new Vector3(963.6226f, -596.0009f, 59.90271f));
                    vFuMiss = new Vector3(943.9349f, -582.1475f, 57.51982f);
                }
                else if (iRando == 4)
                {
                    VectorList_01.Add(new Vector3(1250.951f, -621.413f, 69.41326f));
                    vFuMiss = new Vector3(1268.787f, -611.8056f, 68.43167f);
                }
                else
                {
                    VectorList_01.Add(new Vector3(1014.597f, -469.2007f, 64.50296f));
                    vFuMiss = new Vector3(1004.094f, -456.5672f, 63.2429f);
                }
                // Medi Apart;
                VectorList_01.Add(new Vector3(338.8605f, -1003.227f, -99.19618f));
                VectorList_01.Add(new Vector3(343.8432f, -1002.688f, -99.19618f));
                VectorList_01.Add(new Vector3(351.9203f, -995.3839f, -99.19619f));
                VectorList_01.Add(new Vector3(347.5306f, -994.1599f, -99.19618f));
                VectorList_01.Add(new Vector3(346.5659f, -1012.851f, -99.19622f)); //Start--

                vTarget_01 = new Vector3(310.4331f, -283.032f, 54.17452f);
                iCashReward = RandInt(600, 650);

                vTarget_03 = new Vector3(319.2635f, -267.6611f, 53.29949f);
            }
            else if (iLocationX == 5)
            {
                if (iRando == 1)
                {
                    VectorList_01.Add(new Vector3(749.2419f, 4184.243f, 41.08786f));
                    vFuMiss = new Vector3(752.2614f, 4191.2f, 40.24923f);
                }
                else if (iRando == 2)
                {
                    VectorList_01.Add(new Vector3(1683.31f, 4689.686f, 43.06617f));
                    vFuMiss = new Vector3(1693.769f, 4682.436f, 42.55414f);
                }
                else if (iRando == 3)
                {
                    VectorList_01.Add(new Vector3(2418.973f, 4020.583f, 36.83426f));
                    vFuMiss = new Vector3(2441.141f, 4002.953f, 36.43673f);
                }
                else if (iRando == 4)
                {
                    VectorList_01.Add(new Vector3(1728.636f, 3851.676f, 34.78353f));
                    vFuMiss = new Vector3(1737.227f, 3840.868f, 34.30986f);
                }
                else
                {
                    VectorList_01.Add(new Vector3(1925.207f, 3824.606f, 32.43999f));
                    vFuMiss = new Vector3(1907.435f, 3811.906f, 31.84607f);
                }
                // Small Apart;
                VectorList_01.Add(new Vector3(255.6427f, -1001.104f, -99.00988f));
                VectorList_01.Add(new Vector3(261.9597f, -1002.951f, -99.00864f));
                VectorList_01.Add(new Vector3(265.3889f, -995.8669f, -99.00861f));
                VectorList_01.Add(new Vector3(266.1645f, -1007.233f, -101.0086f)); //Start--works

                vTarget_01 = new Vector3(1177.34f, 2711.71f, 38.09776f);
                iCashReward = RandInt(600, 650);

                vTarget_03 = new Vector3(1176.951f, 2692.882f, 37.39336f);
            }
            else
            {
                if (iRando == 1)
                {
                    VectorList_01.Add(new Vector3(-453.6041f, 6337.572f, 12.80778f));
                    vFuMiss = new Vector3(-459.0108f, 6357.438f, 11.73484f);
                }
                else if (iRando == 2)
                {
                    VectorList_01.Add(new Vector3(1510.197f, 6326.338f, 24.60714f));
                    vFuMiss = new Vector3(1477.047f, 6357.187f, 23.2679f);
                }
                else if (iRando == 3)
                {
                    VectorList_01.Add(new Vector3(35.3881f, 6662.907f, 32.1904f));
                    vFuMiss = new Vector3(35.00813f, 6649.879f, 30.96768f);
                }
                else if (iRando == 4)
                {
                    VectorList_01.Add(new Vector3(-213.8764f, 6396.349f, 33.0851f));
                    vFuMiss = new Vector3(-215.1514f, 6413.896f, 30.95057f);
                }
                else
                {
                    VectorList_01.Add(new Vector3(-379.7733f, 6252.729f, 31.85119f));
                    vFuMiss = new Vector3(-394.9077f, 6278.917f, 29.127f);
                }
                // Small Apart;
                VectorList_01.Add(new Vector3(255.6427f, -1001.104f, -99.00988f));
                VectorList_01.Add(new Vector3(261.9597f, -1002.951f, -99.00864f));
                VectorList_01.Add(new Vector3(265.3889f, -995.8669f, -99.00861f));
                VectorList_01.Add(new Vector3(266.1645f, -1007.233f, -101.0086f)); //Start--works

                vTarget_01 = new Vector3(-103.3442f, 6477.649f, 31.62672f);
                iCashReward = RandInt(600, 650);

                vTarget_03 = new Vector3(-139.4577f, 6458.511f, 30.94309f);
            }

            Vector3 ThisPalce = VectorList_01[VectorList_01.Count - 1];
            if (iLocationX == 2 && iRando == 2)
            {
                BeOnOff[1] = true;
                LoadInMissionIPLs(10, true, true);
            }

            AppeyNess(ThisPalce);

            BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[16], "", 5000);
            bOnTheJob = true;
        }
        private void BikerRaids()
        {
            LogThis("BikerRaids");

            if (!bOnlineStuffLoaded)
                LoadOnlineIps(true);
            //Clubhouse = 246273 
            //Second Clubhouse = 246529
            fList_01.Clear();
            VectorList_01.Clear();
            VectorList_02.Clear();
            VectorList_03.Clear();
            iTime_01.Clear();
            BeOnOff.Clear();
            MishPed.Clear();
            iUltPed01 = 0;
            iMissionVar_02 = 0;
            int iBeCon = -1;
            int iNAmed = 28;

            if (iLocationX == 1)
            {
                int iRand = FindRandom(16, 1, 5);
                if (iRand == 1)
                {
                    //Coke
                    VectorList_01.Add(new Vector3(-253.127f, -2591.235f, 6.00063f)); //Area 1
                    VectorList_02.Add(new Vector3(-257.52f, -2578.633f, 5.747865f)); fGetDir = 358.6416f;
                    iMissionVar_02 = 1;

                    vFuMiss = new Vector3(-271.448f, -2605.758f, 5.513664f);
                }
                else if (iRand == 2)
                {
                    //CounterF
                    VectorList_01.Add(new Vector3(671.4573f, -2667.482f, 6.081184f)); //Area 1
                    VectorList_02.Add(new Vector3(665.4442f, -2661.298f, 5.828631f)); fGetDir = 173.3453f;
                    iMissionVar_02 = 2;

                    vFuMiss = new Vector3(640.4276f, -2677.848f, 5.591949f);
                }
                else if (iRand == 3)
                {
                    //Forgery
                    VectorList_01.Add(new Vector3(-331.4328f, -2779.082f, 5.145244f)); //Area 1
                    VectorList_02.Add(new Vector3(-339.66f, -2785.07f, 4.747363f)); fGetDir = 90.13049f;
                    iMissionVar_02 = 3;

                    vFuMiss = new Vector3(-354.8958f, -2755.537f, 5.536752f);
                }
                else if (iRand == 4)
                {   //Meth
                    VectorList_01.Add(new Vector3(1181.329f, -3113.877f, 6.028024f)); //Area 1
                    VectorList_02.Add(new Vector3(1177.212f, -3099.988f, 5.61451f)); fGetDir = 93.3966f;
                    iMissionVar_02 = 4;

                    vFuMiss = new Vector3(1164.82f, -3098.476f, 5.294124f);
                }
                else
                {
                    //Weed
                    VectorList_01.Add(new Vector3(137.1495f, -2472.777f, 5.999994f)); //Area 1
                    VectorList_02.Add(new Vector3(141.4945f, -2480.523f, 5.747184f)); fGetDir = 231.874f;
                    iMissionVar_02 = 5;

                    vFuMiss = new Vector3(157.942f, -2489.262f, 5.479729f);
                }
                vTarget_01 = new Vector3(67.73476f, 2788.052f, 57.8783f);
            }
            else if (iLocationX == 2)
            {
                if (FindRandom(81, 1, 4) > 2)
                {
                    //CounterF
                    VectorList_01.Add(new Vector3(-1171.181f, -1380.728f, 4.968224f)); //Area 2
                    VectorList_02.Add(new Vector3(-1185.14f, -1380.52f, 4.612405f)); fGetDir = 25.45f;
                    iMissionVar_02 = 2;

                    vFuMiss = new Vector3(-1195.177f, -1369.412f, 4.025767f);
                }
                else
                {
                    //Weed
                    VectorList_01.Add(new Vector3(102.2836f, 175.3346f, 104.5978f)); //Area 2
                    VectorList_02.Add(new Vector3(105.2762f, 166.4761f, 104.2679f)); fGetDir = 252.1446f;
                    iMissionVar_02 = 5;

                    vFuMiss = new Vector3(57.21848f, 188.8472f, 104.4442f);
                }
                vTarget_01 = new Vector3(1730.088f, 3711.632f, 34.21038f);
            }
            else if (iLocationX == 3)
            {
                //Coke
                VectorList_01.Add(new Vector3(-1462.757f, -381.7663f, 38.84196f)); //Area 3
                VectorList_02.Add(new Vector3(-1458.237f, -385.976f, 38.17595f)); fGetDir = 126.5163f;
                iMissionVar_02 = 1;

                vTarget_01 = new Vector3(-356.9074f, 6069.39f, 31.49843f);

                vFuMiss = new Vector3(-1476.011f, -411.1121f, 36.16133f);
            }
            else if (iLocationX == 4)
            {
                int iRand = FindRandom(18, 1, 3);
                if (iRand == 1)
                {
                    //Meth
                    VectorList_01.Add(new Vector3(1454.523f, -1651.867f, 66.99489f)); //Area 4
                    VectorList_02.Add(new Vector3(1462.962f, -1638.762f, 68.51147f)); fGetDir = 303.1189f;
                    iMissionVar_02 = 4;

                    vFuMiss = new Vector3(1418.365f, -1638.559f, 59.83923f);
                }
                else if (iRand == 2)
                {
                    //Forgery
                    VectorList_01.Add(new Vector3(299.2111f, -759.0056f, 29.35474f)); //Area 3
                    VectorList_02.Add(new Vector3(307.9433f, -763.4205f, 28.97479f)); fGetDir = 159.9837f;
                    iMissionVar_02 = 3;

                    vFuMiss = new Vector3(311.2955f, -755.9443f, 28.75925f);
                }
                else
                {
                    //Meth
                    VectorList_01.Add(new Vector3(201.7818f, 2461.978f, 55.68566f));   //Area 4
                    VectorList_02.Add(new Vector3(216.4589f, 2456.052f, 56.29801f)); fGetDir = 346.6528f;
                    iMissionVar_02 = 4;

                    vFuMiss = new Vector3(215.3635f, 2456.214f, 56.08536f);
                }

                vTarget_01 = new Vector3(-362.3576f, 6069.657f, 31.75538f);
            }
            else if (iLocationX == 5)
            {
                int iRand = FindRandom(17, 1, 4);
                if (iRand == 1)
                {
                    //Coke
                    VectorList_01.Add(new Vector3(387.5507f, 3585.138f, 33.29227f)); //Area 5
                    VectorList_02.Add(new Vector3(373.2563f, 3593.6711f, 33.615f)); fGetDir = -49.502f;
                    iMissionVar_02 = 1;

                    vFuMiss = new Vector3(403.8936f, 3592.87f, 32.79099f);
                }
                else if (iRand == 2)
                {
                    //CounterF
                    VectorList_01.Add(new Vector3(635.1768f, 2774.864f, 42.00759f)); //Area 5
                    VectorList_02.Add(new Vector3(651.8953f, 2789.042f, 41.32149f)); fGetDir = 183.952f;
                    iMissionVar_02 = 2;

                    vFuMiss = new Vector3(655.0673f, 2757.986f, 41.44898f);
                }
                else if (iRand == 3)
                {
                    //Forgery
                    VectorList_01.Add(new Vector3(1657.198f, 4850.345f, 41.98742f));  //Area 5
                    VectorList_02.Add(new Vector3(1661.595f, 4855.484f, 41.66934f)); fGetDir = 8.066874f;
                    iMissionVar_02 = 3;

                    vFuMiss = new Vector3(1665.656f, 4841.49f, 41.50963f);
                }
                else
                {
                    //Weed
                    VectorList_01.Add(new Vector3(2848.198f, 4450.209f, 48.51353f));    //Area 5
                    VectorList_02.Add(new Vector3(2840.699f, 4450.243f, 48.33881f)); fGetDir = 198.1508f;
                    iMissionVar_02 = 5;

                    vFuMiss = new Vector3(2850.218f, 4428.765f, 48.43183f);
                }
                vTarget_01 = new Vector3(-1467.747f, -927.0994f, 10.09529f);
            }
            else
            {
                int iRand = FindRandom(16, 1, 5);
                if (iRand == 1)
                {
                    //Coke
                    VectorList_01.Add(new Vector3(51.57604f, 6486.273f, 31.42688f)); //Area 6
                    VectorList_02.Add(new Vector3(60.02742f, 6467.314f, 30.91507f)); fGetDir = 133.8197f;
                    iMissionVar_02 = 1;

                    vFuMiss = new Vector3(69.85964f, 6464.673f, 30.8649f);
                }
                else if (iRand == 2)
                {
                    //CounterF
                    VectorList_01.Add(new Vector3(-413.7644f, 6172.072f, 31.47821f)); //Area 6
                    VectorList_02.Add(new Vector3(-420.6328f, 6175.214f, 31.22611f)); fGetDir = 315.02f;
                    iMissionVar_02 = 2;

                    vFuMiss = new Vector3(-392.2291f, 6168.831f, 31.05536f);
                }
                else if (iRand == 3)
                {
                    //Forgery
                    VectorList_01.Add(new Vector3(-163.5257f, 6334.902f, 31.58081f)); //Area 6
                    VectorList_02.Add(new Vector3(-156.981f, 6335.649f, 31.23901f)); fGetDir = 223.7198f;
                    iMissionVar_02 = 3;

                    vFuMiss = new Vector3(-153.3542f, 6334.087f, 31.03994f);
                }
                else if (iRand == 4)
                {
                    //Meth
                    VectorList_01.Add(new Vector3(90.31782f, 6340.292f, 31.37566f)); //Area 6
                    VectorList_02.Add(new Vector3(79.48358f, 6340.361f, 30.97269f)); fGetDir = 116.1504f;
                    iMissionVar_02 = 4;


                    vFuMiss = new Vector3(85.23461f, 6375.621f, 30.71994f);
                }
                else
                {
                    //Weed
                    VectorList_01.Add(new Vector3(416.7168f, 6520.83f, 27.71297f)); //Area 6
                    VectorList_02.Add(new Vector3(427.0963f, 6529.909f, 27.48225f)); fGetDir = 354.0391f;
                    iMissionVar_02 = 5;

                    vFuMiss = new Vector3(426.2917f, 6549.695f, 27.08142f);
                }
                vTarget_01 = new Vector3(260.4337f, -1823.662f, 26.79713f);
            }

            if (iMissionVar_02 == 1)
            {
                VectorList_03.Add(new Vector3(1101.271f, -3197.999f, -38.99346f));
                VectorList_03.Add(new Vector3(1093.563f, -3194.035f, -38.99346f));
                VectorList_03.Add(new Vector3(1093.422f, -3197.22f, -38.99346f));
                VectorList_03.Add(new Vector3(1087.632f, -3196.166f, -38.99346f));
                VectorList_03.Add(new Vector3(1088.632f, -3187.793f, -38.99346f));  //start

                fMission_01 = 180.00f;
                iNAmed = 28;
                iBeCon = 497;
            }        //Coke Warehouse = 247553
            else if (iMissionVar_02 == 2)
            {
                VectorList_03.Add(new Vector3(1137.116f, -3194.313f, -40.39756f));
                VectorList_03.Add(new Vector3(1127.94f, -3194.983f, -40.40163f));
                VectorList_03.Add(new Vector3(1121.973f, -3195.467f, -40.40202f));
                VectorList_03.Add(new Vector3(1117.973f, -3195.85f, -40.40057f));
                VectorList_03.Add(new Vector3(1138.141f, -3198.814f, -39.66573f));  //start

                iBeCon = 500;
                iNAmed = 29;
                fMission_01 = 0.00f;
            }   //Counterfeit Cash Warehouse = 247809
            else if (iMissionVar_02 == 3)
            {
                VectorList_03.Add(new Vector3(1157.049f, -3198.495f, -39.00798f));
                VectorList_03.Add(new Vector3(1159.132f, -3191.732f, -39.00798f));
                VectorList_03.Add(new Vector3(1164.112f, -3192.009f, -39.00798f));
                VectorList_03.Add(new Vector3(1166.495f, -3196.158f, -39.00798f));
                VectorList_03.Add(new Vector3(1173.276f, -3196.729f, -39.00798f));  //start

                iBeCon = 498;
                iNAmed = 30;
                fMission_01 = 90.00f;
            }   //Documents Forgery Warehouse = 246785
            else if (iMissionVar_02 == 4)
            {
                VectorList_03.Add(new Vector3(1016.395f, -3195.819f, -38.99313f));
                VectorList_03.Add(new Vector3(1009.775f, -3200.557f, -38.99313f));
                VectorList_03.Add(new Vector3(1003.916f, -3195.244f, -38.99313f));
                VectorList_03.Add(new Vector3(999.0506f, -3199.958f, -38.99313f));
                VectorList_03.Add(new Vector3(997.2625f, -3200.779f, -36.3937f)); //start

                iBeCon = 499;
                iNAmed = 32;
                fMission_01 = -90.00f;
            }   //Meth Warehouse = 247041
            else
            {
                VectorList_03.Add(new Vector3(1042.56f, -3195.37f, -38.16234f));
                VectorList_03.Add(new Vector3(1036.336f, -3206.347f, -38.17264f));
                VectorList_03.Add(new Vector3(1054.596f, -3200.797f, -39.16124f));
                VectorList_03.Add(new Vector3(1058.92f, -3193.996f, -39.16131f));
                VectorList_03.Add(new Vector3(1066.142f, -3183.28f, -39.16345f));  //start

                iBeCon = 496;
                iNAmed = 31;
                fMission_01 = 90.00f;
            }                            //Weed Warehouse = 247297

            iMissionVar_01 = FindRandom(13, 1, 3);

            Vector3 VT = VectorList_01[0];
            VT.Z -= 1.00f;
            TheYellowCorona(VT, 1.00f);
            AddTarget(VT, true, true, 1.00f, false, iBeCon, MyLang.Maptext[iNAmed]);

            iCashBouns = 500;
            iTime_01.Add(0);
            iTime_01.Add(1);
            BeOnOff.Add(false);//   bSuitCase   0 
            BeOnOff.Add(false);//   bTruckBlip  1 
            BeOnOff.Add(false);//   bMoveYourV  2 
            BeOnOff.Add(false);//   bDoOnce     3    
            BeOnOff.Add(false);//   bBypassShare4  

            LoadInMissionIPLs(iMissionVar_02, true, false);

            BikerRaids_LoadClutter();
            BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[17], "", 5000);
            bOnTheJob = true;
        }
        private void CargoCollect()
        {
            LogThis("CargoCollect");

            if (!bOnlineStuffLoaded)
                LoadOnlineIps(true);

            iList_01.Clear();
            fList_01.Clear();
            fList_02.Clear();
            BeOnOff.Clear();
            VectorList_01.Clear();
            VectorList_02.Clear();
            VectorList_03.Clear();
            VectorList_04.Clear();

            List<Vector3> vList = new List<Vector3>();

            List<Vector3> FuFuList = new List<Vector3>();

            int iBeCon = -1;
            int iNames = 34;

            if (iLocationX == 1)
            {
                int iRanBiz = FindRandom(10, 1, 3);
                if (iRanBiz == 1)
                {
                    FuFuList.Add(new Vector3(286.4788f, -2993.62f, 5.228967f));
                    FuFuList.Add(new Vector3(53.62731f, -2554.311f, 5.491848f));
                    FuFuList.Add(new Vector3(235.7016f, -1936.402f, 23.04256f));
                    FuFuList.Add(new Vector3(905.642f, -1006.598f, 34.17911f));

                    VectorList_01.Add(new Vector3(274.8883f, -3015.478f, 5.697752f));//Pier 400 Utility Building -Elysian Island--Area 1
                    VectorList_01.Add(new Vector3(51.19014f, -2571.348f, 6.004592f));//Pacific Bait Storage -Elysian Island--Area 1
                    VectorList_01.Add(new Vector3(247.5364f, -1956.876f, 23.20047f));//Convenience Store Lockup -Rancho--Area 1
                    VectorList_01.Add(new Vector3(896.3674f, -1036.089f, 35.11144f)); //Celltowa Unit -La Mesa--Area 1

                    VectorList_03.Add(new Vector3(143.8923f, -3002.613f, 7.030982f)); fList_01.Add(3.425886f);
                    VectorList_03.Add(new Vector3(57.65947f, -2563.766f, 6.001038f)); fList_01.Add(356.2111f);
                    VectorList_03.Add(new Vector3(246.8526f, -1967.732f, 21.96168f)); fList_01.Add(222.8701f);
                    VectorList_03.Add(new Vector3(908.6414f, -1054.812f, 32.82803f)); fList_01.Add(74.6995f);

                    VectorList_04.Add(new Vector3(164.4823f, -2989.739f, 5.713963f)); fList_02.Add(269.5402f);
                    VectorList_04.Add(new Vector3(70.94057f, -2559.056f, 5.804798f)); fList_02.Add(181.4869f);
                    VectorList_04.Add(new Vector3(257.1387f, -1957.479f, 22.83393f)); fList_02.Add(48.34646f);
                    VectorList_04.Add(new Vector3(892.3995f, -1021.739f, 34.78522f)); fList_02.Add(92.14743f);
                    iMissionVar_01 = 8;
                }   //LargeWarehose
                else if (iRanBiz == 2)
                {
                    FuFuList.Add(new Vector3(501.4008f, -672.8757f, 24.63765f));
                    FuFuList.Add(new Vector3(534.1782f, -1898.31f, 24.7183f));
                    FuFuList.Add(new Vector3(-316.4882f, -2674.782f, 5.540444f));
                    FuFuList.Add(new Vector3(-515.141f, -1779.458f, 20.61676f));
                    FuFuList.Add(new Vector3(-288.9933f, -1369.201f, 30.67698f));

                    VectorList_01.Add(new Vector3(499.7f, -652.116f, 24.90832f));  //Railyard Warehouse -La Mesa--Area 1
                    VectorList_01.Add(new Vector3(539.6681f, -1945.474f, 24.98463f));   //Old Power Station -Rancho--Area 1
                    VectorList_01.Add(new Vector3(-315.2117f, -2698.162f, 7.550228f));  //LS Marine Building 3 -Elysian Island--Area 1
                    VectorList_01.Add(new Vector3(-528.1617f, -1784.413f, 21.5696f));   //Fridgit Annexe -La Puerta--Area 1
                    VectorList_01.Add(new Vector3(-324.7966f, -1356.194f, 31.29572f));  //Disused Factory Outlet -Strawberry--Area 1

                    VectorList_03.Add(new Vector3(495.9565f, -636.6316f, 24.94718f)); fList_01.Add(292.6637f);
                    VectorList_03.Add(new Vector3(541.1272f, -1944.672f, 24.98512f)); fList_01.Add(314.951f);
                    VectorList_03.Add(new Vector3(-294.8669f, -2691.587f, 6.000297f)); fList_01.Add(131.9584f);
                    VectorList_03.Add(new Vector3(-548.0119f, -1801.606f, 22.02978f)); fList_01.Add(60.1952f);
                    VectorList_03.Add(new Vector3(-327.7578f, -1348.119f, 31.35056f)); fList_01.Add(89.34285f);

                    VectorList_04.Add(new Vector3(515.2159f, -627.2473f, 24.56723f)); fList_02.Add(353.3535f);
                    VectorList_04.Add(new Vector3(550.1658f, -1929.799f, 24.62446f)); fList_02.Add(303.8734f);
                    VectorList_04.Add(new Vector3(-312.2143f, -2719.738f, 5.804877f)); fList_02.Add(136.3163f);
                    VectorList_04.Add(new Vector3(-552.5865f, -1786.923f, 21.97653f)); fList_02.Add(331.8421f);
                    VectorList_04.Add(new Vector3(-336.1457f, -1353.774f, 31.15578f)); fList_02.Add(178.9565f);

                    iMissionVar_01 = 7;
                }   //MedWarehose
                else
                {
                    FuFuList.Add(new Vector3(-1074.949f, -2025.39f, 12.55295f));
                    FuFuList.Add(new Vector3(1050.773f, -2173.575f, 31.1052f));
                    FuFuList.Add(new Vector3(129.747f, -2191.982f, 5.514949f));
                    FuFuList.Add(new Vector3(849.6513f, -1562.424f, 29.30508f));
                    FuFuList.Add(new Vector3(771.269f, -938.0235f, 25.09335f));
                    FuFuList.Add(new Vector3(1002.289f, -2472.827f, 27.96207f));
                    FuFuList.Add(new Vector3(-881.3438f, -2725.938f, 13.32079f));

                    VectorList_01.Add(new Vector3(-1042.583f, -2023.351f, 13.16157f)); //Xero Gas Factory -LSIA--Area 1 
                    VectorList_01.Add(new Vector3(1037.856f, -2173.218f, 31.53337f));   //Wholesale Furniture -Cypress Flats--Area 1 
                    VectorList_01.Add(new Vector3(95.99369f, -2216.351f, 6.171199f));   //Walker & Sons Warehouse -Banning--Area 1
                    VectorList_01.Add(new Vector3(926.5911f, -1560.207f, 30.74203f));   //Logistics Depot -La Mesa--Area 1
                    VectorList_01.Add(new Vector3(759.4894f, -909.5288f, 25.28011f));   //Darnel Bros Warehouse -La Mesa--Area 1
                    VectorList_01.Add(new Vector3(1017.381f, -2529.118f, 28.30198f));   //Cypress Warehouses -Cypress Flats--Area 1
                    VectorList_01.Add(new Vector3(-863.278f, -2717.185f, 13.93703f)); //Bilgeco Warehouse -LSIA--Area 1

                    VectorList_03.Add(new Vector3(-1049.724f, -2018.736f, 13.16158f)); fList_01.Add(138.4975f);
                    VectorList_03.Add(new Vector3(1040.495f, -2177.792f, 31.47174f)); fList_01.Add(260.5353f);
                    VectorList_03.Add(new Vector3(108.8328f, -2203.059f, 7.653018f)); fList_01.Add(353.475f);
                    VectorList_03.Add(new Vector3(924.2091f, -1563.939f, 30.72375f)); fList_01.Add(91.18757f);
                    VectorList_03.Add(new Vector3(762.2568f, -899.5262f, 25.17671f)); fList_01.Add(274.0542f);
                    VectorList_03.Add(new Vector3(1014.684f, -2525.242f, 28.30399f)); fList_01.Add(72.11306f);
                    VectorList_03.Add(new Vector3(-876.1209f, -2732.82f, 13.82849f)); fList_01.Add(60.4894f);

                    VectorList_04.Add(new Vector3(-1054.654f, -2016.696f, 12.96902f)); fList_02.Add(317.3377f);
                    VectorList_04.Add(new Vector3(1047.039f, -2168.228f, 31.5702f)); fList_02.Add(354.6175f);
                    VectorList_04.Add(new Vector3(102.823f, -2194.802f, 5.878262f)); fList_02.Add(88.19944f);
                    VectorList_04.Add(new Vector3(900.8614f, -1556.664f, 30.46791f)); fList_02.Add(126.1308f);
                    VectorList_04.Add(new Vector3(753.0141f, -881.3607f, 24.88846f)); fList_02.Add(90.48436f);
                    VectorList_04.Add(new Vector3(1012.498f, -2492.435f, 28.11445f)); fList_02.Add(339.6606f);
                    VectorList_04.Add(new Vector3(-891.7543f, -2740.43f, 13.63446f)); fList_02.Add(150.4673f);

                    iMissionVar_01 = 6;
                }   //SmallWarehose
                vList.Add(new Vector3(-385.749f, 1211.177f, 325.6418f));
                vList.Add(new Vector3(198.1118f, 1235.713f, 225.46f));
                vList.Add(new Vector3(612.6734f, 634.253f, 128.9111f));
                vList.Add(new Vector3(1118.019f, 235.4945f, 80.85564f));
                vList.Add(new Vector3(907.884f, -55.81165f, 78.76413f));
                vList.Add(new Vector3(2541.999f, -396.4591f, 92.99284f));
                vList.Add(new Vector3(2579.628f, 439.6417f, 108.4557f));
                vList.Add(new Vector3(2660.208f, 1685.798f, 24.48824f));
                vList.Add(new Vector3(2725.141f, 1355.962f, 24.524f));
                vList.Add(new Vector3(2547.122f, 2613.274f, 37.94488f));
            }
            else if (iLocationX == 2)
            {
                int iRanBiz = FindRandom(10, 1, 3);
                if (iRanBiz == 1)
                {
                    FuFuList.Add(new Vector3(-1061.154f, -1269.829f, 5.439614f));
                    FuFuList.Add(new Vector3(-407.0453f, 229.2834f, 82.85832f));

                    VectorList_01.Add(new Vector3(-1082.904f, -1262.042f, 5.601765f));//White Widow Garage -La Puerta--Area 2
                    VectorList_01.Add(new Vector3(-424.7138f, 185.4996f, 80.79431f));//Foreclosed Garage -West Vinewood--Area 2

                    VectorList_03.Add(new Vector3(-1083.866f, -1254.879f, 5.404573f)); fList_01.Add(303.3562f);
                    VectorList_03.Add(new Vector3(-421.5192f, 182.9661f, 80.50156f)); fList_01.Add(259.9094f);

                    VectorList_04.Add(new Vector3(-1073.89f, -1263.036f, 5.657478f)); fList_02.Add(211.2767f);
                    VectorList_04.Add(new Vector3(-400.0655f, 203.4503f, 83.0389f)); fList_02.Add(358.319f);

                    iMissionVar_01 = 8;
                }   //LargeWarehose
                else if (iRanBiz == 2)
                {
                    FuFuList.Add(new Vector3(354.6386f, 320.6063f, 103.3927f));
                    FuFuList.Add(new Vector3(-1247.178f, -881.2542f, 11.61784f));

                    VectorList_01.Add(new Vector3(367.8993f, 351.118f, 103.116f)); // Discount Retail Unit -Downtown Vinewood--Area 2
                    VectorList_01.Add(new Vector3(-1268.326f, -812.3163f, 17.10782f)); //Derriere Lingerie Backlot -Del Perro--Area 2

                    VectorList_03.Add(new Vector3(367.2045f, 337.8325f, 103.3221f)); fList_01.Add(206.8836f);
                    VectorList_03.Add(new Vector3(-1267.413f, -817.7491f, 17.09917f)); fList_01.Add(126.7912f);

                    VectorList_04.Add(new Vector3(354.9602f, 321.4632f, 103.7651f)); fList_02.Add(74.92898f);
                    VectorList_04.Add(new Vector3(-1286.751f, -813.6746f, 17.1413f)); fList_02.Add(123.7716f);

                    iMissionVar_01 = 7;
                }   //MedWarehose
                else
                {
                    FuFuList.Add(new Vector3(-231.9018f, 194.6969f, 80.62703f));

                    VectorList_01.Add(new Vector3(-245.2137f, 203.542f, 83.92123f));    //West Vinewood Backlot -West Vinewood--Area 2

                    VectorList_03.Add(new Vector3(-262.4737f, 200.0251f, 85.27554f)); fList_01.Add(185.1555f);

                    VectorList_04.Add(new Vector3(-273.088f, 200.9226f, 85.51161f)); fList_02.Add(58.10743f);

                    iMissionVar_01 = 6;
                }   //SmallWarehose

                vList.Add(new Vector3(366.5912f, 2633.793f, 44.49739f));
                vList.Add(new Vector3(621.1447f, 2724.342f, 41.82872f));
                vList.Add(new Vector3(1124.017f, 2648.292f, 37.99646f));
                vList.Add(new Vector3(1996.471f, 3055.928f, 47.05279f));
                vList.Add(new Vector3(1869.733f, 2584.461f, 45.67206f));
                vList.Add(new Vector3(2662.729f, 3260.35f, 55.24051f));
                vList.Add(new Vector3(2763.139f, 3458.586f, 55.75253f));
                vList.Add(new Vector3(318.086f, 3460.958f, 36.01319f));
                vList.Add(new Vector3(1420.838f, 3622.756f, 34.87066f));
                vList.Add(new Vector3(1546.354f, 3782.107f, 34.06033f));
                vList.Add(new Vector3(1704.99f, 3765.2f, 34.3701f));
                vList.Add(new Vector3(1885.653f, 3720.016f, 32.85341f));
                vList.Add(new Vector3(1959.192f, 3765.042f, 32.1996f));
                vList.Add(new Vector3(2480.416f, 4114.066f, 38.06472f));
                vList.Add(new Vector3(3333.39f, 5160.618f, 18.30962f));
                vList.Add(new Vector3(2904.15f, 4396.701f, 50.2622f));
                vList.Add(new Vector3(1793.418f, 4585.181f, 37.21337f));
                vList.Add(new Vector3(1690.838f, 4770.571f, 41.92147f));
            }
            else if (iLocationX == 3)
            {
                FuFuList.Add(new Vector3(-3016.109f, 3351.985f, 9.94969f));
                FuFuList.Add(new Vector3(-3119.893f, 1315.089f, 19.23047f));

                VectorList_01.Add(new Vector3(-3031.497f, 3334.082f, 10.19057f));//Area 3
                VectorList_01.Add(new Vector3(-3157.577f, 1376.335f, 16.88033f)); //Area 3

                VectorList_03.Add(new Vector3(-3027.749f, 3334.768f, 10.03492f)); fList_01.Add(277.8759f);
                VectorList_03.Add(new Vector3(-3152.141f, 1376.579f, 17.34282f)); fList_01.Add(276.9177f);

                VectorList_04.Add(new Vector3(-3009.387f, 3352.261f, 10.34941f)); fList_02.Add(12.67088f);
                VectorList_04.Add(new Vector3(-3138.906f, 1340.406f, 19.2906f)); fList_02.Add(200.9747f);

                vList.Add(new Vector3(-1539.419f, 4935.714f, 61.53736f));
                vList.Add(new Vector3(-1576.76f, 5168.608f, 19.03519f));
                vList.Add(new Vector3(-759.3788f, 5547.596f, 33.48568f));
                vList.Add(new Vector3(-674.0231f, 5779.188f, 17.33097f));
                vList.Add(new Vector3(-265.0732f, 6064.716f, 31.4644f));
                vList.Add(new Vector3(-391.4352f, 6083.209f, 31.50013f));
                vList.Add(new Vector3(-137.5783f, 6356.531f, 31.49063f));
                vList.Add(new Vector3(-225.8601f, 6347.249f, 32.3539f));
                vList.Add(new Vector3(-70.07785f, 6355.13f, 31.49036f));
                vList.Add(new Vector3(62.98142f, 6378.325f, 31.23985f));
                vList.Add(new Vector3(1585.525f, 6446.103f, 25.1308f));
                vList.Add(new Vector3(1447.849f, 6579.536f, 13.04301f));
                iMissionVar_01 = 9;                //Bunkers
            }
            else if (iLocationX == 4)
            {

                int iRanBiz = FindRandom(7, 1, 2);

                if (iRanBiz == 1)
                {
                    FuFuList.Add(new Vector3(1535.109f, -2184.418f, 76.80535f));

                    VectorList_01.Add(new Vector3(1569.585f, -2130.049f, 78.33009f));   //GEE Warehouse -El Burro Heights--Area 4

                    VectorList_03.Add(new Vector3(1566.348f, -2153.749f, 77.55859f)); fList_01.Add(351.1119f);

                    VectorList_04.Add(new Vector3(1549.432f, -2147.021f, 77.32233f)); fList_02.Add(159.8675f);

                    iMissionVar_01 = 7;
                }   //MedWarehose
                else
                {
                    FuFuList.Add(new Vector3(1530.614f, 2202.683f, 78.0166f));

                    VectorList_01.Add(new Vector3(1572.153f, 2226.005f, 78.28186f));//Area 4

                    VectorList_03.Add(new Vector3(1571.915f, 2223.302f, 78.40997f)); fList_01.Add(166.6924f);

                    VectorList_04.Add(new Vector3(1569.052f, 2206.243f, 78.74351f)); fList_02.Add(93.91222f);

                    iMissionVar_01 = 9;
                }        //Bunkers
                vList.Add(new Vector3(418.5228f, -1323.451f, 45.99149f));
                vList.Add(new Vector3(-707.1237f, -2125.089f, 5.991802f));
                vList.Add(new Vector3(-1032.987f, -2644.564f, 21.60494f));
                vList.Add(new Vector3(-912.8343f, -2602.602f, 31.60501f));
                vList.Add(new Vector3(-323.3053f, -2730.198f, 6.010223f));
                vList.Add(new Vector3(-53.84815f, -2106.136f, 16.70485f));
                vList.Add(new Vector3(-226.6113f, -1485.485f, 31.32402f));
                vList.Add(new Vector3(30.41531f, -1740.875f, 29.30323f));
                vList.Add(new Vector3(708.2263f, -1392.039f, 26.30967f));
                vList.Add(new Vector3(782.2178f, -2961.597f, 5.800721f));
                vList.Add(new Vector3(829.4429f, -2120.328f, 29.33405f));
                vList.Add(new Vector3(997.9778f, -1955.919f, 30.81864f));
                vList.Add(new Vector3(1311.081f, -1664.154f, 51.23629f));
                vList.Add(new Vector3(1184.142f, -1554.17f, 34.69258f));
                vList.Add(new Vector3(1443.838f, -2611.028f, 48.32217f));
            }
            else if (iLocationX == 5)
            {
                FuFuList.Add(new Vector3(2496.238f, 3212.709f, 48.39721f));
                FuFuList.Add(new Vector3(2038.698f, 3317.65f, 45.21719f));
                FuFuList.Add(new Vector3(851.0466f, 3091.883f, 39.46188f));
                FuFuList.Add(new Vector3(514.5208f, 3062.716f, 39.45173f));
                FuFuList.Add(new Vector3(53.01784f, 2849.96f, 53.94388f));
                FuFuList.Add(new Vector3(1710.984f, 4700.84f, 42.20218f));

                VectorList_01.Add(new Vector3(2489.491f, 3162.176f, 49.01019f));//Area 5
                VectorList_01.Add(new Vector3(2109.757f, 3325.773f, 45.35473f));//Area 5
                VectorList_01.Add(new Vector3(849.797f, 3021.237f, 41.31252f));//Area 5
                VectorList_01.Add(new Vector3(492.7792f, 3013.473f, 40.95134f));//Area 5
                VectorList_01.Add(new Vector3(38.98915f, 2931.238f, 55.86897f));//Area 5
                VectorList_01.Add(new Vector3(1801.849f, 4705.611f, 39.79904f));//Area 5

                VectorList_03.Add(new Vector3(2488.411f, 3167.057f, 49.19688f)); fList_01.Add(12.43598f);
                VectorList_03.Add(new Vector3(2104.299f, 3323.37f, 45.35637f)); fList_01.Add(115.0392f);
                VectorList_03.Add(new Vector3(849.9589f, 3026.213f, 41.26106f)); fList_01.Add(355.2358f);
                VectorList_03.Add(new Vector3(495.1412f, 3017.337f, 41.01286f)); fList_01.Add(332.5786f);
                VectorList_03.Add(new Vector3(41.57499f, 2926.659f, 55.6709f)); fList_01.Add(210.2706f);
                VectorList_03.Add(new Vector3(1795.429f, 4705.885f, 40.02833f)); fList_01.Add(79.38572f);

                VectorList_04.Add(new Vector3(2497.187f, 3204.1f, 48.84472f)); fList_02.Add(314.7668f);
                VectorList_04.Add(new Vector3(2070.462f, 3315.039f, 45.44235f)); fList_02.Add(149.7169f);
                VectorList_04.Add(new Vector3(870.8865f, 3050.909f, 40.64046f)); fList_02.Add(338.0659f);
                VectorList_04.Add(new Vector3(482.8536f, 3034.044f, 39.86146f)); fList_02.Add(315.2647f);
                VectorList_04.Add(new Vector3(14.42008f, 2908.858f, 57.50762f)); fList_02.Add(192.1089f);
                VectorList_04.Add(new Vector3(1770.261f, 4714.629f, 40.91407f)); fList_02.Add(89.64275f);
                iMissionVar_01 = 9;                //Bunkers
                vList.Add(new Vector3(484.9134f, -1102.252f, 29.20086f));
                vList.Add(new Vector3(9.671286f, -1063.956f, 38.15213f));
                vList.Add(new Vector3(-320.6418f, -753.4194f, 48.42424f));
                vList.Add(new Vector3(-673.2905f, -609.6758f, 25.30779f));
                vList.Add(new Vector3(-499.6268f, 170.145f, 70.93163f));
                vList.Add(new Vector3(-367.1788f, -45.75231f, 54.42317f));
                vList.Add(new Vector3(-1228.149f, -667.3433f, 35.53881f));
                vList.Add(new Vector3(-1267.663f, -216.0041f, 56.10192f));
                vList.Add(new Vector3(-1230.685f, -386.1529f, 53.79265f));
                vList.Add(new Vector3(-2011.531f, -329.1964f, 48.10631f));
            }
            else
            {
                FuFuList.Add(new Vector3(-380.6723f, 4279.208f, 48.06001f));
                FuFuList.Add(new Vector3(-679.215f, 5955.822f, 14.62427f));

                VectorList_01.Add(new Vector3(-389.0054f, 4340.79f, 56.16319f));//Area 6
                VectorList_01.Add(new Vector3(-756.1978f, 5944.006f, 19.9384f));//Area 6

                VectorList_03.Add(new Vector3(-388.3983f, 4335.65f, 55.97264f)); fList_01.Add(190.199f);
                VectorList_03.Add(new Vector3(-750.7578f, 5944.738f, 19.66197f)); fList_01.Add(277.7047f);

                VectorList_04.Add(new Vector3(-380.4007f, 4281.34f, 48.93768f)); fList_02.Add(229.943f);
                VectorList_04.Add(new Vector3(-750.405f, 5933.408f, 18.99001f)); fList_02.Add(191.6073f);
                iMissionVar_01 = 9;               //Bunkers
                vList.Add(new Vector3(-1650.93f, -226.0081f, 55.04493f));
                vList.Add(new Vector3(-2166.621f, -392.1426f, 13.33964f));
                vList.Add(new Vector3(-1905.582f, 2017.274f, 140.9272f));
                vList.Add(new Vector3(-2339.518f, 293.3825f, 169.4672f));
                vList.Add(new Vector3(-2988.337f, 86.62109f, 11.5693f));
                vList.Add(new Vector3(-2965.499f, 359.8159f, 14.76993f));
                vList.Add(new Vector3(-3052.89f, 602.9825f, 7.294055f));
                vList.Add(new Vector3(-3245.57f, 988.1583f, 12.5006f));
                vList.Add(new Vector3(-3138.26f, 1091.163f, 20.64276f));
                vList.Add(new Vector3(-1154.366f, 2677.421f, 18.09391f));
            }

            if (iMissionVar_01 == 6)
            {
                VectorList_02.Add(new Vector3(1000.237f, -3091.657f, -38.9999f));
                VectorList_02.Add(new Vector3(1017.577f, -3099.977f, -38.99988f));
                VectorList_02.Add(new Vector3(1011.025f, -3105.29f, -38.99988f));
                VectorList_02.Add(new Vector3(1012.526f, -3094.295f, -38.99988f));
                VectorList_02.Add(new Vector3(1022.533f, -3094.535f, -38.99987f));
                VectorList_02.Add(new Vector3(1022.373f, -3102.042f, -38.99987f));
                VectorList_02.Add(new Vector3(1021.009f, -3110.479f, -38.99987f));
                VectorList_02.Add(new Vector3(1007.563f, -3111.366f, -38.99987f));
                VectorList_02.Add(new Vector3(996.416f, -3107.894f, -38.99988f));
                VectorList_02.Add(new Vector3(992.7119f, -3097.946f, -38.99586f));    //start
                fMission_01 = -90.00f;
                iBeCon = 474;
            }
            else if (iMissionVar_01 == 7)
            {
                VectorList_02.Add(new Vector3(1064.339f, -3106.556f, -38.99995f));
                VectorList_02.Add(new Vector3(1070.742f, -3105.32f, -38.99995f));
                VectorList_02.Add(new Vector3(1070.318f, -3099.159f, -38.99995f));
                VectorList_02.Add(new Vector3(1063.515f, -3099.027f, -38.99995f));
                VectorList_02.Add(new Vector3(1056.528f, -3098.606f, -38.99995f));
                VectorList_02.Add(new Vector3(1048.456f, -3097.323f, -38.99995f));    //start
                fMission_01 = -90.00f;
                iBeCon = 474;
            }
            else if (iMissionVar_01 == 8)
            {
                VectorList_02.Add(new Vector3(1102.655f, -3100.313f, -38.99995f));
                VectorList_02.Add(new Vector3(1097.039f, -3102.641f, -38.99995f));
                VectorList_02.Add(new Vector3(1087.757f, -3099.406f, -38.99995f));   //start
                fMission_01 = -90.00f;
                iBeCon = 474;
            }
            else
            {
                VectorList_02.Add(new Vector3(868.2318f, -3230.087f, -98.29446f));
                VectorList_02.Add(new Vector3(886.4559f, -3212.001f, -98.19621f));
                VectorList_02.Add(new Vector3(908.8542f, -3211.221f, -98.22218f));
                VectorList_02.Add(new Vector3(906.2184f, -3229.914f, -98.29436f));
                VectorList_02.Add(new Vector3(943.6704f, -3236.479f, -98.2968f));
                VectorList_02.Add(new Vector3(931.1979f, -3214.218f, -98.26333f));
                VectorList_02.Add(new Vector3(940.9261f, -3197.448f, -98.26443f));
                VectorList_02.Add(new Vector3(893.1318f, -3179.854f, -97.11796f));
                VectorList_02.Add(new Vector3(904.9841f, -3200.06f, -97.18797f));
                VectorList_02.Add(new Vector3(893.9405f, -3206.172f, -98.18995f));
                VectorList_02.Add(new Vector3(882.6129f, -3204.415f, -98.1963f));
                VectorList_02.Add(new Vector3(866.1926f, -3217.693f, -97.87908f));
                VectorList_02.Add(new Vector3(856.3937f, -3228.032f, -98.47646f));
                VectorList_02.Add(new Vector3(855.9623f, -3230.793f, -98.47524f));
                VectorList_02.Add(new Vector3(868.3938f, -3238.448f, -98.29231f));
                VectorList_02.Add(new Vector3(894.5801f, -3245.898f, -98.25877f));     //start
                fMission_01 = 90.00f;
                iNames = 33;
                iBeCon = 557;
            }

            iMissionVar_03 = RandInt(0, VectorList_01.Count - 1);
            vTarget_01 = VectorList_01[iMissionVar_03];

            vFuMiss = FuFuList[iMissionVar_03];

            vTarget_03 = vList[RandInt(0, vList.Count - 1)];
            vTarget_03.Z -= 1.00f;

            BeOnOff.Add(false);//   bForkStuck  0   
            BeOnOff.Add(false);//   bForkBlip   1   
            BeOnOff.Add(false);//   bTruckBlip  2  
            BeOnOff.Add(false);//   bDoOnce     3 
            BeOnOff.Add(false);//   bMoveYourV  4 
            BeOnOff.Add(false);//   bSuitCase   5 

            iList_01.Add(152);//--0 for sub
            iList_01.Add(152);//--0 for sub
            iList_01.Add(152);//--0 for sub

            vTarget_01.Z -= 1.00f;
            AddTarget(vTarget_01, true, true, 1.00f, false, iBeCon, MyLang.Maptext[iNames]);
            TheYellowCorona(vTarget_01, 1.00f);

            LoadInMissionIPLs(iMissionVar_01, true, false);

            CargoCollect_LoadClutter();

            if (sCargFix == "")
                sCargFix = MyLang.Mistext[150];
            MyLang.Mistext[150] = sCargFix + "~y~" + sMissionVar_01 + "~w~.";

            BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[18], "", 5000);
            bOnTheJob = true;
        }
        private void DeepDown()
        {
            LogThis("DeepDown");

            PropList_01.Clear();
            BeOnOff.Clear();

            int iBuild = 0;

            List<DeapBuild> DPBuids = new List<DeapBuild>();

            if (bTestRun)
            {
                bJobLoaded = true;
                iJobType = 20;
            }
            else
            {
                DeapBuild MyDPBuild = new DeapBuild();

                if (iLocationX == 1)
                {
                    MyDPBuild.StartPoint = new Vector3(1829.751f, -2962.983f, -41.09711f);
                    MyDPBuild.SubSpawn = new Vector3(604.118408f, -2109.82544f, 0.632450938f); MyDPBuild.SubHead = 174.998993f;
                    MyDPBuild.FubStop = new Vector3(584.8275f, -2091.987f, 14.14371f);
                    DPBuids.Add(MyDPBuild);
                    MyDPBuild.StartPoint = new Vector3(881.9769f, -3480.864f, -12.39751f);
                    MyDPBuild.SubSpawn = new Vector3(604.118408f, -2109.82544f, 0.632450938f); MyDPBuild.SubHead = 174.998993f;
                    MyDPBuild.FubStop = new Vector3(584.8275f, -2091.987f, 14.14371f);
                    DPBuids.Add(MyDPBuild);
                    MyDPBuild.StartPoint = new Vector3(271.4858f, -2290.783f, -8.27566f);
                    MyDPBuild.SubSpawn = new Vector3(604.118408f, -2109.82544f, 0.632450938f); MyDPBuild.SubHead = 174.998993f;
                    MyDPBuild.FubStop = new Vector3(584.8275f, -2091.987f, 14.14371f);
                    DPBuids.Add(MyDPBuild);
                    MyDPBuild.StartPoint = new Vector3(-199.2741f, -2862.99f, -11.28995f);
                    MyDPBuild.SubSpawn = new Vector3(604.118408f, -2109.82544f, 0.632450938f); MyDPBuild.SubHead = 174.998993f;
                    MyDPBuild.FubStop = new Vector3(584.8275f, -2091.987f, 14.14371f);
                    DPBuids.Add(MyDPBuild);
                }
                else if (iLocationX == 2)
                {
                    MyDPBuild.StartPoint = new Vector3(-1892.526f, -1307.415f, -35.69325f);
                    MyDPBuild.SubSpawn = new Vector3(-1798.24133f, -1231.06409f, 0.431125998f); MyDPBuild.SubHead = 139.999176f;
                    MyDPBuild.FubStop = new Vector3(-1602.185f, -1035.632f, 12.55381f);
                    DPBuids.Add(MyDPBuild);
                    MyDPBuild.StartPoint = new Vector3(-2843.658f, -574.4394f, -44.94706f);
                    MyDPBuild.SubSpawn = new Vector3(-1798.24133f, -1231.06409f, 0.431125998f); MyDPBuild.SubHead = 139.999176f;
                    MyDPBuild.FubStop = new Vector3(-1602.185f, -1035.632f, 12.55381f);
                    DPBuids.Add(MyDPBuild);
                }
                else if (iLocationX == 3)
                {
                    MyDPBuild.StartPoint = new Vector3(-3189.769f, 3026.521f, -30.46286f);
                    MyDPBuild.SubSpawn = new Vector3(-3426.61743f, 948.637329f, 0.913f); MyDPBuild.SubHead = 89.9997f;
                    MyDPBuild.FubStop = new Vector3(-3233.816f, 967.9095f, 12.50666f);
                    DPBuids.Add(MyDPBuild);
                    MyDPBuild.StartPoint = new Vector3(-3252.511f, 3681.582f, -23.06396f);
                    MyDPBuild.SubSpawn = new Vector3(-3426.61743f, 948.637329f, 0.913f); MyDPBuild.SubHead = 89.9997f;
                    MyDPBuild.FubStop = new Vector3(-3233.816f, 967.9095f, 12.50666f);
                    DPBuids.Add(MyDPBuild);
                    MyDPBuild.StartPoint = new Vector3(-3374.703f, 504.2789f, -24.57951f);
                    MyDPBuild.SubSpawn = new Vector3(-3426.61743f, 948.637329f, 0.913f); MyDPBuild.SubHead = 89.9997f;
                    MyDPBuild.FubStop = new Vector3(-3233.816f, 967.9095f, 12.50666f);
                    DPBuids.Add(MyDPBuild);
                    MyDPBuild.StartPoint = new Vector3(-3163.912f, 3003.868f, -38.98509f);
                    MyDPBuild.SubSpawn = new Vector3(-3426.61743f, 948.637329f, 0.913f); MyDPBuild.SubHead = 89.9997f;
                    MyDPBuild.FubStop = new Vector3(-3233.816f, 967.9095f, 12.50666f);
                    DPBuids.Add(MyDPBuild);
                }
                else if (iLocationX == 4)
                {
                    MyDPBuild.StartPoint = new Vector3(2655.749f, -1395.955f, -12.85984f);
                    MyDPBuild.SubSpawn = new Vector3(2873.02f, -719.071f, 0.6788f); MyDPBuild.SubHead = -78.999f;
                    MyDPBuild.FubStop = new Vector3(2779.22f, -714.098f, 5.011173f);
                    DPBuids.Add(MyDPBuild);
                    MyDPBuild.StartPoint = new Vector3(3164.551f, -364.2288f, -19.23776f);
                    MyDPBuild.SubSpawn = new Vector3(2873.02f, -719.071f, 0.6788f); MyDPBuild.SubHead = -78.999f;
                    MyDPBuild.FubStop = new Vector3(2779.22f, -714.098f, 5.011173f);
                    DPBuids.Add(MyDPBuild);
                }
                else if (iLocationX == 5)
                {
                    MyDPBuild.StartPoint = new Vector3(3886.64f, 3041.357f, -16.14589f);
                    MyDPBuild.SubSpawn = new Vector3(3863.60f, 4468.92f, 0.3944f); MyDPBuild.SubHead = -86.9996f;
                    MyDPBuild.FubStop = new Vector3(3789.329f, 4463.776f, 5.342578f);
                    DPBuids.Add(MyDPBuild);
                    MyDPBuild.StartPoint = new Vector3(4279.323f, 2971.412f, -170.3207f);
                    MyDPBuild.SubSpawn = new Vector3(3863.60f, 4468.92f, 0.3944f); MyDPBuild.SubHead = -86.9996f;
                    MyDPBuild.FubStop = new Vector3(3789.329f, 4463.776f, 5.342578f);
                    DPBuids.Add(MyDPBuild);
                    MyDPBuild.StartPoint = new Vector3(4218.59f, 3616.418f, -34.40534f);
                    MyDPBuild.SubSpawn = new Vector3(3863.60f, 4468.92f, 0.3944f); MyDPBuild.SubHead = -86.9996f;
                    MyDPBuild.FubStop = new Vector3(3789.329f, 4463.776f, 5.342578f);
                    DPBuids.Add(MyDPBuild);
                }
                else
                {
                    MyDPBuild.StartPoint = new Vector3(3401.174f, 6310.327f, -44.94764f);
                    MyDPBuild.SubSpawn = new Vector3(-1617.081f, 5254.33f, 0.352575f); MyDPBuild.SubHead = 26.5998f;
                    MyDPBuild.FubStop = new Vector3(-1577.156f, 5165.118f, 19.04766f);
                    DPBuids.Add(MyDPBuild);
                    MyDPBuild.StartPoint = new Vector3(3269.4f, 6419.564f, -46.06504f);
                    MyDPBuild.SubSpawn = new Vector3(-1617.081f, 5254.33f, 0.352575f); MyDPBuild.SubHead = 26.5998f;
                    MyDPBuild.FubStop = new Vector3(-1577.156f, 5165.118f, 19.04766f);
                    DPBuids.Add(MyDPBuild);
                    MyDPBuild.StartPoint = new Vector3(2649.136f, 6661.476f, -17.16622f);
                    MyDPBuild.SubSpawn = new Vector3(-1617.081f, 5254.33f, 0.352575f); MyDPBuild.SubHead = 26.5998f;
                    MyDPBuild.FubStop = new Vector3(-1577.156f, 5165.118f, 19.04766f);
                    DPBuids.Add(MyDPBuild);
                    MyDPBuild.StartPoint = new Vector3(747.8029f, 7393.903f, -108.1086f);
                    MyDPBuild.SubSpawn = new Vector3(-1617.081f, 5254.33f, 0.352575f); MyDPBuild.SubHead = 26.5998f;
                    MyDPBuild.FubStop = new Vector3(-1577.156f, 5165.118f, 19.04766f);
                    DPBuids.Add(MyDPBuild);
                    MyDPBuild.StartPoint = new Vector3(-951.4739f, 6692.083f, -32.37279f);
                    MyDPBuild.SubSpawn = new Vector3(-1617.081f, 5254.33f, 0.352575f); MyDPBuild.SubHead = 26.5998f;
                    MyDPBuild.FubStop = new Vector3(-1577.156f, 5165.118f, 19.04766f);
                    DPBuids.Add(MyDPBuild);
                }

                if (FindBuiltMissions(6))
                {
                    if (MySettings.BulderOnly)
                        iBuild = SelectBuilderMish(8);
                    else
                    {
                        for (int i = 0; i < DPBuids.Count; i++)
                            MyMissions.SharksXM.Add(DPBuids[i]);
                        iBuild = FindRandom(82, 0, MyMissions.SharksXM.Count - 1);
                    }
                }
                else
                {
                    for (int i = 0; i < DPBuids.Count; i++)
                        MyMissions.SharksXM.Add(DPBuids[i]);
                    iBuild = FindRandom(82, 0, MyMissions.SharksXM.Count - 1);
                }
            }
            
            vTarget_01 = MyMissions.SharksXM[iBuild].StartPoint;
            vFuMiss = MyMissions.SharksXM[iBuild].FubStop;
            VehicleSpawn("SUBMERSIBLE2", MyMissions.SharksXM[iBuild].SubSpawn, MyMissions.SharksXM[iBuild].SubHead, false, false, true, true, 27, 0, 66, MyLang.Maptext[13], 1, false);

            BeOnOff.Add(false);//   bTruckBlip  0 
            BeOnOff.Add(false);//   bSuitCase   1 

            if (!bTestRun)
                BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[19], "", 5000);
            bOnTheJob = true;
        }
        public class DeapBuild
        {
            public int Local { get; set; }
            public Vector3 FubStop { get; set; }
            public Vector3 StartPoint { get; set; }
            public Vector3 SubSpawn { get; set; }
            public float SubHead { get; set; }
        }
        private void HappyShopper()
        {
            LogThis("HappyShopper");

            VTBTimerPool.Add(BtSlideBar);
            BtSlideBar.Label = MyLang.Othertext[148];
            iList_01.Clear();
            VectorList_01.Clear();
            VectorList_02.Clear();

            if (iLocationX == 1)
            {
                VectorList_01.Add(new Vector3(29.64387f, -1345.215f, 29.49702f));
                VectorList_02.Add(new Vector3(26.80501f, -1358.587f, 29.30912f));

                VectorList_01.Add(new Vector3(-50.59483f, -1753.585f, 29.42101f));
                VectorList_02.Add(new Vector3(-64.6314f, -1751.915f, 29.36364f));
            }
            else if (iLocationX == 2)
            {
                VectorList_01.Add(new Vector3(-1487.997f, -380.9005f, 40.16343f));
                VectorList_02.Add(new Vector3(-1505.49f, -385.3145f, 40.58879f));

                VectorList_01.Add(new Vector3(-1224.308f, -906.5152f, 12.32636f));
                VectorList_02.Add(new Vector3(-1229.835f, -894.6361f, 12.26104f));

                VectorList_01.Add(new Vector3(-712.1381f, -912.7143f, 19.21559f));
                VectorList_02.Add(new Vector3(-708.7623f, -922.5479f, 19.01391f));

                VectorList_01.Add(new Vector3(377.684f, 327.039f, 103.5664f));
                VectorList_02.Add(new Vector3(374.3104f, 315.3594f, 103.3505f));
            }
            else if (iLocationX == 3)
            {
                VectorList_01.Add(new Vector3(-1825.143f, 791.1376f, 138.2037f));
                VectorList_02.Add(new Vector3(-1814.062f, 785.4301f, 137.6717f));

                VectorList_01.Add(new Vector3(-3243.652f, 1005.266f, 12.83072f));
                VectorList_02.Add(new Vector3(-3233.665f, 1007.551f, 12.20609f));

                VectorList_01.Add(new Vector3(-3042.417f, 588.8845f, 7.908929f));
                VectorList_02.Add(new Vector3(-3039.583f, 601.0354f, 7.604254f));

                VectorList_01.Add(new Vector3(-2969.143f, 390.0993f, 15.04331f));
                VectorList_02.Add(new Vector3(-2980.632f, 392.4883f, 14.87388f));
            }
            else if (iLocationX == 4)
            {
                VectorList_01.Add(new Vector3(2555.359f, 386.0572f, 108.6229f));
                VectorList_02.Add(new Vector3(2566.392f, 389.8063f, 108.4625f));

                VectorList_01.Add(new Vector3(1159.109f, -322.5788f, 69.20506f));
                VectorList_02.Add(new Vector3(1162.659f, -332.2061f, 68.87901f));

                VectorList_01.Add(new Vector3(1137.132f, -981.4756f, 46.41585f));
                VectorList_02.Add(new Vector3(1149.581f, -979.6863f, 46.15464f));
            }
            else if (iLocationX == 5)
            {
                VectorList_01.Add(new Vector3(1702.199f, 4926.69f, 42.06368f));
                VectorList_02.Add(new Vector3(1694.112f, 4938.759f, 42.13372f));

                VectorList_01.Add(new Vector3(1963.373f, 3744.478f, 32.34375f));
                VectorList_02.Add(new Vector3(1970.084f, 3734.326f, 32.34889f));

                VectorList_01.Add(new Vector3(544.546f, 2668.044f, 42.1565f));
                VectorList_02.Add(new Vector3(544.7075f, 2679.103f, 42.21569f));

                VectorList_01.Add(new Vector3(2678.789f, 3284.812f, 55.24113f));
                VectorList_02.Add(new Vector3(2686.977f, 3278.672f, 55.24055f));

                VectorList_01.Add(new Vector3(1174.963f, 2695.265f, 37.92607f));
                VectorList_02.Add(new Vector3(1166.677f, 2707.874f, 38.1577f));
            }
            else
            {
                VectorList_01.Add(new Vector3(1733.445f, 6414.844f, 35.03722f));
                VectorList_02.Add(new Vector3(1726.596f, 6403.456f, 34.41432f));
            }


            int iShop = RandInt(0, VectorList_01.Count - 1);
            vTarget_01 = VectorList_01[iShop];
            vFuMiss = VectorList_02[iShop];

            BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[20], "", 5000);
            bOnTheJob = true;
        }
        private void MoresMuted()
        {
            LogThis("MoresMuted");


            BeOnOff.Clear();
            iList_01.Clear();
            fList_01.Clear();
            fList_02.Clear();
            VTBTimerPool.Add(BtSlideBar);
            BtSlideBar.Label = MyLang.Othertext[149];
            BtSlideBar.BackgroundColor = Color.Aquamarine;
            BtSlideBar.ForegroundColor = Color.Red;
            VectorList_01.Clear();
            VectorList_02.Clear();
            VectorList_03.Clear();

            if (iLocationX == 1)
            {
                vTarget_01 = new Vector3(-440.3831f, -2177.316f, 9.24302f);
                fMission_01 = 0.00f;

                VectorList_01.Add(new Vector3(84.20266f, -1966.634f, 20.93918f)); fList_01.Add(230.444f);
                VectorList_02.Add(new Vector3(87.30824f, -1969.552f, 19.93783f)); fList_02.Add(320.917f);
                VectorList_03.Add(new Vector3(100.4769f, -1950.94f, 19.86541f));

                VectorList_01.Add(new Vector3(39.26086f, -1920.131f, 21.77095f)); fList_01.Add(229.1118f);
                VectorList_02.Add(new Vector3(41.49519f, -1921.343f, 20.85589f)); fList_02.Add(321.2408f);
                VectorList_03.Add(new Vector3(53.63236f, -1901.676f, 20.74206f));

                VectorList_01.Add(new Vector3(-10.54978f, -1883.92f, 24.14166f)); fList_01.Add(233.0125f);
                VectorList_02.Add(new Vector3(-4.453674f, -1882.576f, 22.8608f)); fList_02.Add(320.2308f);
                VectorList_03.Add(new Vector3(8.046188f, -1863.673f, 22.97386f));

                VectorList_01.Add(new Vector3(-33.88563f, -1855.649f, 26.00873f)); fList_01.Add(228.3124f);
                VectorList_02.Add(new Vector3(-34.92201f, -1859.586f, 24.94159f)); fList_02.Add(318.0888f);
                VectorList_03.Add(new Vector3(-20.91398f, -1840.368f, 24.42374f));

                VectorList_01.Add(new Vector3(49.99574f, -1852.118f, 22.84576f)); fList_01.Add(60.77221f);
                VectorList_02.Add(new Vector3(41.77658f, -1853.679f, 22.02344f)); fList_02.Add(134.9895f);
                VectorList_03.Add(new Vector3(27.47417f, -1869.911f, 22.16131f));

                VectorList_01.Add(new Vector3(130.6817f, -1853.337f, 25.23481f)); fList_01.Add(138.5571f);
                VectorList_02.Add(new Vector3(127.461f, -1857.101f, 24.0227f)); fList_02.Add(147.7483f);
                VectorList_03.Add(new Vector3(118.1679f, -1865.055f, 23.7024f));

                VectorList_01.Add(new Vector3(104.0836f, -1885.373f, 24.31879f)); fList_01.Add(342.0549f);
                VectorList_02.Add(new Vector3(104.4129f, -1880.979f, 23.1531f)); fList_02.Add(319.0333f);
                VectorList_03.Add(new Vector3(116.9264f, -1873.724f, 23.12681f));

                VectorList_01.Add(new Vector3(168.9512f, -1863.017f, 24.20553f)); fList_01.Add(67.41178f);
                VectorList_02.Add(new Vector3(166.4229f, -1860.035f, 23.35534f)); fList_02.Add(155.4723f);
                VectorList_03.Add(new Vector3(160.4642f, -1884.452f, 22.83161f));

                VectorList_01.Add(new Vector3(170.351f, -1924.428f, 21.0126f)); fList_01.Add(143.2722f);
                VectorList_02.Add(new Vector3(165.9371f, -1925.597f, 20.25205f)); fList_02.Add(229.4186f);
                VectorList_03.Add(new Vector3(179.8295f, -1946.993f, 19.3425f));

                VectorList_01.Add(new Vector3(315.3064f, -1937.965f, 24.64761f)); fList_01.Add(116.9479f);
                VectorList_02.Add(new Vector3(313.6001f, -1940.976f, 23.83472f)); fList_02.Add(230.8509f);
                VectorList_03.Add(new Vector3(329.5819f, -1956.983f, 23.48311f));

                VectorList_01.Add(new Vector3(279.8965f, -1993.613f, 20.80377f)); fList_01.Add(306.767f);
                VectorList_02.Add(new Vector3(280.0525f, -1986.149f, 19.60719f)); fList_02.Add(229.3767f);
                VectorList_03.Add(new Vector3(292.0263f, -2002.936f, 19.4984f));

                VectorList_01.Add(new Vector3(431.7693f, -1829.072f, 28.174f)); fList_01.Add(148.0199f);
                VectorList_02.Add(new Vector3(432.4315f, -1832.684f, 27.17112f)); fList_02.Add(223.401f);
                VectorList_03.Add(new Vector3(441.5151f, -1847.125f, 26.90405f));

                VectorList_01.Add(new Vector3(401.6761f, -1849.478f, 27.31974f)); fList_01.Add(140.0258f);
                VectorList_02.Add(new Vector3(401.0239f, -1855.893f, 25.95042f)); fList_02.Add(224.3387f);
                VectorList_03.Add(new Vector3(415.1102f, -1872.503f, 25.53964f));

                VectorList_01.Add(new Vector3(359.5192f, -1895.442f, 24.80364f)); fList_01.Add(126.8208f);
                VectorList_02.Add(new Vector3(357.149f, -1896.948f, 23.99098f)); fList_02.Add(227.606f);
                VectorList_03.Add(new Vector3(375.2751f, -1911.2f, 23.74269f));

                VectorList_01.Add(new Vector3(472.0719f, -1775.363f, 29.07085f)); fList_01.Add(268.9535f);
                VectorList_02.Add(new Vector3(477.3909f, -1777.301f, 27.84221f)); fList_02.Add(264.7756f);
                VectorList_03.Add(new Vector3(488.2884f, -1766.817f, 27.66769f));

                VectorList_01.Add(new Vector3(471.5162f, -1739.155f, 28.95332f)); fList_01.Add(179.2899f);
                VectorList_02.Add(new Vector3(471.2513f, -1742.723f, 28.13832f)); fList_02.Add(251.76f);
                VectorList_03.Add(new Vector3(493.39f, -1746.902f, 27.80442f));

                VectorList_01.Add(new Vector3(477.7936f, -1710.293f, 29.70831f)); fList_01.Add(65.62551f);
                VectorList_02.Add(new Vector3(484.4769f, -1719.649f, 28.58888f)); fList_02.Add(248.6884f);
                VectorList_03.Add(new Vector3(499.3467f, -1724.395f, 28.39082f));

                VectorList_01.Add(new Vector3(-32.60644f, -1446.189f, 31.89141f)); fList_01.Add(90.84241f);
                VectorList_02.Add(new Vector3(-38.51572f, -1447.832f, 30.69892f)); fList_02.Add(183.3811f);
                VectorList_03.Add(new Vector3(-39.84614f, -1460.19f, 30.72243f));
            }
            else if (iLocationX == 2)
            {
                vTarget_01 = new Vector3(135.4072f, -1050.72f, 27.34729f);
                fMission_01 = 162.00f;

                VectorList_01.Add(new Vector3(-1030.029f, -1604.094f, 4.954391f)); fList_01.Add(327.2115f);
                VectorList_02.Add(new Vector3(-1035.496f, -1599.852f, 4.072091f)); fList_02.Add(32.57589f);
                VectorList_03.Add(new Vector3(-1059.207f, -1609.166f, 3.524583f));

                VectorList_01.Add(new Vector3(-1038.922f, -1610.168f, 4.99319f)); fList_01.Add(303.9706f);
                VectorList_02.Add(new Vector3(-1044.602f, -1605.52f, 4.068557f)); fList_02.Add(34.67142f);
                VectorList_03.Add(new Vector3(-1059.567f, -1608.18f, 3.517702f));

                VectorList_01.Add(new Vector3(-1073.439f, -1561.955f, 4.492709f)); fList_01.Add(129.2019f);
                VectorList_02.Add(new Vector3(-1065.332f, -1566.446f, 3.754892f)); fList_02.Add(215.3678f);
                VectorList_03.Add(new Vector3(-1032.26f, -1552.945f, 4.229605f));

                VectorList_01.Add(new Vector3(-1103.79f, -1222.267f, 2.569435f)); fList_01.Add(22.61918f);
                VectorList_02.Add(new Vector3(-1108.205f, -1228.695f, 1.779695f)); fList_02.Add(119.5274f);
                VectorList_03.Add(new Vector3(-1127.051f, -1215.02f, 1.531878f));

                VectorList_01.Add(new Vector3(-1142.937f, -1144.457f, 2.84641f)); fList_01.Add(112.2072f);
                VectorList_02.Add(new Vector3(-1148.143f, -1144.903f, 2.031888f)); fList_02.Add(122.6273f);
                VectorList_03.Add(new Vector3(-1137.362f, -1188.145f, 1.365093f));

                VectorList_01.Add(new Vector3(-1022.515f, -896.59f, 5.418101f)); fList_01.Add(21.94026f);
                VectorList_02.Add(new Vector3(-1022.527f, -892.3627f, 4.740325f)); fList_02.Add(26.83562f);
                VectorList_03.Add(new Vector3(-1033.707f, -883.277f, 5.068366f));

                VectorList_01.Add(new Vector3(-1031.194f, -902.9557f, 3.693242f)); fList_01.Add(30.13037f);
                VectorList_02.Add(new Vector3(-1036.069f, -900.0116f, 3.462452f)); fList_02.Add(24.80447f);
                VectorList_03.Add(new Vector3(-1043.986f, -889.4573f, 4.246201f));

                VectorList_01.Add(new Vector3(-1676.925f, -444.971f, 39.78131f)); fList_01.Add(131.1187f);
                VectorList_02.Add(new Vector3(-1672.4f, -450.8193f, 38.58677f)); fList_02.Add(229.8798f);
                VectorList_03.Add(new Vector3(-1657.442f, -460.5329f, 38.03026f));

                VectorList_01.Add(new Vector3(-1622.657f, -380.0714f, 43.71575f)); fList_01.Add(231.7045f);
                VectorList_02.Add(new Vector3(-1613.229f, -376.8541f, 42.5669f)); fList_02.Add(226.976f);
                VectorList_03.Add(new Vector3(-1601.912f, -387.7082f, 42.41357f));

                VectorList_01.Add(new Vector3(-1101.468f, 354.1614f, 68.48946f)); fList_01.Add(344.5029f);
                VectorList_02.Add(new Vector3(-1097.562f, 359.9052f, 67.72594f)); fList_02.Add(0.2987321f);
                VectorList_03.Add(new Vector3(-1082.727f, 368.6064f, 67.79617f));

                VectorList_01.Add(new Vector3(-1052.087f, 431.9183f, 77.06366f)); fList_01.Add(172.4103f);
                VectorList_02.Add(new Vector3(-1065.601f, 436.5994f, 73.05495f)); fList_02.Add(99.11024f);
                VectorList_03.Add(new Vector3(-1073.393f, 437.8279f, 72.66914f));

                VectorList_01.Add(new Vector3(-1094.351f, 427.3158f, 75.88007f)); fList_01.Add(252.708f);
                VectorList_02.Add(new Vector3(-1094.455f, 438.9992f, 74.47643f)); fList_02.Add(261.6625f);
                VectorList_03.Add(new Vector3(-1083.686f, 439.2239f, 73.6269f));

                VectorList_01.Add(new Vector3(-1174.851f, 440.3727f, 86.84982f)); fList_01.Add(81.2718f);
                VectorList_02.Add(new Vector3(-1179.401f, 456.0742f, 85.8743f)); fList_02.Add(77.90117f);
                VectorList_03.Add(new Vector3(-1195.032f, 466.4229f, 87.58995f));

                VectorList_01.Add(new Vector3(-1452.619f, 545.5289f, 120.7995f)); fList_01.Add(251.1616f);
                VectorList_02.Add(new Vector3(-1453.488f, 533.9799f, 118.4625f)); fList_02.Add(250.8972f);
                VectorList_03.Add(new Vector3(-1447.804f, 528.346f, 117.9717f));

                VectorList_01.Add(new Vector3(-1492.877f, 421.5539f, 111.2437f)); fList_01.Add(133.7239f);
                VectorList_02.Add(new Vector3(-1505.586f, 426.6992f, 110.296f)); fList_02.Add(43.60711f);
                VectorList_03.Add(new Vector3(-1524.306f, 443.1196f, 108.4835f));

                VectorList_01.Add(new Vector3(-1540.128f, 421.1296f, 110.014f)); fList_01.Add(11.07101f);
                VectorList_02.Add(new Vector3(-1547.168f, 428.1627f, 108.5409f)); fList_02.Add(274.7539f);
                VectorList_03.Add(new Vector3(-1528.674f, 439.1963f, 107.9726f));

                VectorList_01.Add(new Vector3(-1364.324f, 569.9561f, 134.9729f)); fList_01.Add(277.3567f);
                VectorList_02.Add(new Vector3(-1357.245f, 578.1824f, 130.5742f)); fList_02.Add(249.118f);
                VectorList_03.Add(new Vector3(-1353.038f, 577.9769f, 130.6345f));

                VectorList_01.Add(new Vector3(-1277.542f, 629.769f, 143.1857f)); fList_01.Add(120.2769f);
                VectorList_02.Add(new Vector3(-1288.326f, 625.2386f, 138.0066f)); fList_02.Add(43.81479f);
                VectorList_03.Add(new Vector3(-1285.146f, 636.1577f, 137.8836f));

                VectorList_01.Add(new Vector3(-997.7878f, 768.8508f, 171.4258f)); fList_01.Add(310.6081f);
                VectorList_02.Add(new Vector3(-1000.539f, 785.6525f, 170.8327f)); fList_02.Add(289.5009f);
                VectorList_03.Add(new Vector3(-993.6044f, 797.8585f, 171.481f));

                VectorList_01.Add(new Vector3(-972.8319f, 752.9464f, 176.3808f)); fList_01.Add(36.27644f);
                VectorList_02.Add(new Vector3(-966.5909f, 763.1278f, 174.585f)); fList_02.Add(42.06779f);
                VectorList_03.Add(new Vector3(-992.3173f, 798.5406f, 171.6323f));

                VectorList_01.Add(new Vector3(-921.0504f, 813.4844f, 184.3362f)); fList_01.Add(181.8919f);
                VectorList_02.Add(new Vector3(-918.4263f, 806.7975f, 183.5177f)); fList_02.Add(184.9363f);
                VectorList_03.Add(new Vector3(-913.0612f, 793.1495f, 183.9441f));

                VectorList_01.Add(new Vector3(-599.6575f, 806.9816f, 191.1432f)); fList_01.Add(201.8537f);
                VectorList_02.Add(new Vector3(-595.2399f, 807.0707f, 190.0545f)); fList_02.Add(152.0084f);
                VectorList_03.Add(new Vector3(-597.3881f, 799.813f, 189.5988f));

                VectorList_01.Add(new Vector3(-662.5278f, 679.2593f, 153.9106f)); fList_01.Add(69.54745f);
                VectorList_02.Add(new Vector3(-668.3492f, 670.407f, 149.6529f)); fList_02.Add(73.03522f);
                VectorList_03.Add(new Vector3(-677.288f, 672.5547f, 150.927f));

                VectorList_01.Add(new Vector3(-819.1831f, 697.0107f, 148.1098f)); fList_01.Add(8.687302f);
                VectorList_02.Add(new Vector3(-809.6436f, 704.5671f, 146.2754f)); fList_02.Add(16.58844f);
                VectorList_03.Add(new Vector3(-813.7659f, 712.7256f, 146.2532f));

                VectorList_01.Add(new Vector3(-1065.014f, 727.1508f, 165.4747f)); fList_01.Add(2.338568f);
                VectorList_02.Add(new Vector3(-1058.929f, 736.1923f, 164.6416f)); fList_02.Add(304.9607f);
                VectorList_03.Add(new Vector3(-1044.445f, 746.0131f, 166.1993f));

                VectorList_01.Add(new Vector3(-495.717f, 738.8193f, 163.031f)); fList_01.Add(338.5178f);
                VectorList_02.Add(new Vector3(-495.9344f, 744.4732f, 162.0204f)); fList_02.Add(245.0275f);
                VectorList_03.Add(new Vector3(-482.4576f, 737.7457f, 161.7826f));

                VectorList_01.Add(new Vector3(-551.7747f, 686.921f, 146.0746f)); fList_01.Add(157.8091f);
                VectorList_02.Add(new Vector3(-559.7916f, 684.7753f, 144.6036f)); fList_02.Add(165.4025f);
                VectorList_03.Add(new Vector3(-568.0866f, 678.9849f, 145.3323f));

                VectorList_01.Add(new Vector3(-678.6812f, 511.3183f, 113.5261f)); fList_01.Add(185.6514f);
                VectorList_02.Add(new Vector3(-687.4655f, 502.4781f, 109.3234f)); fList_02.Add(198.0579f);
                VectorList_03.Add(new Vector3(-687.4109f, 491.4248f, 108.9832f));

                VectorList_01.Add(new Vector3(-537.3251f, 477.4789f, 103.1936f)); fList_01.Add(43.65727f);
                VectorList_02.Add(new Vector3(-539.2659f, 487.4217f, 102.3473f)); fList_02.Add(51.47024f);
                VectorList_03.Add(new Vector3(-554.9604f, 495.6445f, 102.9963f));

                VectorList_01.Add(new Vector3(-409.1807f, 341.7456f, 108.9074f)); fList_01.Add(269.8381f);
                VectorList_02.Add(new Vector3(-404.3836f, 340.4113f, 107.9095f)); fList_02.Add(357.9998f);
                VectorList_03.Add(new Vector3(-395.477f, 351.2617f, 107.6919f));

                VectorList_01.Add(new Vector3(-406.3863f, 567.267f, 124.6045f)); fList_01.Add(153.4125f);
                VectorList_02.Add(new Vector3(-408.8252f, 559.408f, 123.4815f)); fList_02.Add(152.5758f);
                VectorList_03.Add(new Vector3(-417.1774f, 547.2891f, 121.677f));

                VectorList_01.Add(new Vector3(231.6937f, 672.7675f, 189.9456f)); fList_01.Add(41.63981f);
                VectorList_02.Add(new Vector3(227.4575f, 679.6514f, 188.6887f)); fList_02.Add(105.1379f);
                VectorList_03.Add(new Vector3(217.8956f, 670.4632f, 188.2628f));

                VectorList_01.Add(new Vector3(119.5292f, 494.3599f, 147.343f)); fList_01.Add(104.7187f);
                VectorList_02.Add(new Vector3(113.6118f, 496.9965f, 146.3376f)); fList_02.Add(191.7236f);
                VectorList_03.Add(new Vector3(116.6034f, 488.5889f, 146.0152f));

                VectorList_01.Add(new Vector3(316.03f, 501.6293f, 153.1798f)); fList_01.Add(196.5503f);
                VectorList_02.Add(new Vector3(318.8831f, 495.0455f, 151.8954f)); fList_02.Add(282.3397f);
                VectorList_03.Add(new Vector3(329.6293f, 494.6665f, 150.8042f));
            }
            else if (iLocationX == 3)
            {
                vTarget_01 = new Vector3(-1132.258f, 2697.845f, 17.99048f);
                fMission_01 = 144.75f;

                VectorList_01.Add(new Vector3(-3088.34f, 221.8034f, 14.06823f)); fList_01.Add(304.688f);
                VectorList_02.Add(new Vector3(-3082.865f, 221.7141f, 13.19848f)); fList_02.Add(322.1592f);
                VectorList_03.Add(new Vector3(-3074.917f, 227.9563f, 13.97002f));

                VectorList_01.Add(new Vector3(-3104.39f, 246.8689f, 12.46988f)); fList_01.Add(283.1918f);
                VectorList_02.Add(new Vector3(-3100.545f, 245.1811f, 11.53011f)); fList_02.Add(295.022f);
                VectorList_03.Add(new Vector3(-3095.229f, 254.6647f, 10.65957f));

                VectorList_01.Add(new Vector3(-3093.356f, 349.1923f, 7.53771f)); fList_01.Add(257.9991f);
                VectorList_02.Add(new Vector3(-3088.548f, 342.615f, 6.595543f)); fList_02.Add(255.4592f);
                VectorList_03.Add(new Vector3(-3079.758f, 341.0291f, 6.344898f));

                VectorList_01.Add(new Vector3(-3088.383f, 392.0005f, 11.44855f)); fList_01.Add(251.4219f);
                VectorList_02.Add(new Vector3(-3073.059f, 395.3136f, 6.157819f)); fList_02.Add(252.3164f);
                VectorList_03.Add(new Vector3(-3064.688f, 397.5193f, 6.004481f));

                VectorList_01.Add(new Vector3(-3037.019f, 559.1574f, 7.507684f)); fList_01.Add(259.3506f);
                VectorList_02.Add(new Vector3(-3032.233f, 555.8598f, 6.694488f)); fList_02.Add(272.9912f);
                VectorList_03.Add(new Vector3(-3024.547f, 560.4851f, 6.766912f));

                VectorList_01.Add(new Vector3(-3017.326f, 746.5541f, 27.77714f)); fList_01.Add(124.0796f);
                VectorList_02.Add(new Vector3(-3018.058f, 739.6817f, 26.75076f)); fList_02.Add(110.4103f);
                VectorList_03.Add(new Vector3(-3040.199f, 734.564f, 21.5592f));

                VectorList_01.Add(new Vector3(-3199.833f, 1164.802f, 9.654345f)); fList_01.Add(226.432f);
                VectorList_02.Add(new Vector3(-3197.699f, 1161.168f, 8.810711f)); fList_02.Add(249.5113f);
                VectorList_03.Add(new Vector3(-3187.871f, 1167.305f, 8.689035f));

                VectorList_01.Add(new Vector3(-3190.914f, 1297.424f, 19.06739f)); fList_01.Add(247.3892f);
                VectorList_02.Add(new Vector3(-3179.946f, 1289.453f, 13.33451f)); fList_02.Add(243.6794f);
                VectorList_03.Add(new Vector3(-3167.778f, 1292.869f, 13.53854f));

                VectorList_01.Add(new Vector3(-1974.367f, 630.3055f, 122.5363f)); fList_01.Add(228.9758f);
                VectorList_02.Add(new Vector3(-1973.088f, 622.8451f, 121.5146f)); fList_02.Add(245.6446f);
                VectorList_03.Add(new Vector3(-1964.116f, 608.7496f, 119.5682f));

                VectorList_01.Add(new Vector3(-1996.084f, 591.3221f, 118.102f)); fList_01.Add(251.1711f);
                VectorList_02.Add(new Vector3(-1989.513f, 602.9088f, 117.1304f)); fList_02.Add(256.283f);
                VectorList_03.Add(new Vector3(-1972.614f, 570.355f, 114.8073f));

                VectorList_01.Add(new Vector3(-1938.069f, 551.3741f, 114.8284f)); fList_01.Add(66.20253f);
                VectorList_02.Add(new Vector3(-1941.144f, 552.9941f, 114.0151f)); fList_02.Add(158.3867f);
                VectorList_03.Add(new Vector3(-1962.102f, 550.783f, 112.1075f));

                VectorList_01.Add(new Vector3(-2014.356f, 499.4279f, 107.1717f)); fList_01.Add(232.8885f);
                VectorList_02.Add(new Vector3(-2012.928f, 484.5465f, 106.2232f)); fList_02.Add(256.2994f);
                VectorList_03.Add(new Vector3(-1992.073f, 474.5867f, 102.8086f));

                VectorList_01.Add(new Vector3(-1943.313f, 449.5075f, 102.9281f)); fList_01.Add(93.79943f);
                VectorList_02.Add(new Vector3(-1955.165f, 448.5034f, 100.194f)); fList_02.Add(191.2195f);
                VectorList_03.Add(new Vector3(-1972.064f, 440.6574f, 99.22685f));

                VectorList_01.Add(new Vector3(-2008.788f, 367.3722f, 94.81433f)); fList_01.Add(257.0851f);
                VectorList_02.Add(new Vector3(-2001.462f, 367.8036f, 93.67271f)); fList_02.Add(181.3413f);
                VectorList_03.Add(new Vector3(-1972.767f, 352.2867f, 90.10172f));

                VectorList_01.Add(new Vector3(-1797.636f, 408.4626f, 113.4534f)); fList_01.Add(218.6547f);
                VectorList_02.Add(new Vector3(-1796.43f, 398.6094f, 111.9814f)); fList_02.Add(107.3791f);
                VectorList_03.Add(new Vector3(-1861.812f, 345.2932f, 87.80962f));

                VectorList_01.Add(new Vector3(-1808.378f, 334.5894f, 89.37168f)); fList_01.Add(16.99551f);
                VectorList_02.Add(new Vector3(-1794.013f, 347.9051f, 87.74335f)); fList_02.Add(63.83973f);
                VectorList_03.Add(new Vector3(-1793.413f, 360.4525f, 87.77419f));

                VectorList_01.Add(new Vector3(-1995.502f, 300.3811f, 91.96469f)); fList_01.Add(192.1783f);
                VectorList_02.Add(new Vector3(-1988.586f, 294.9155f, 90.95404f)); fList_02.Add(195.0404f);
                VectorList_03.Add(new Vector3(-1906.252f, 252.5124f, 86.25108f));

                VectorList_01.Add(new Vector3(-1909.679f, 248.5442f, 85.44144f)); fList_01.Add(28.93135f);
                VectorList_02.Add(new Vector3(-1936.12f, 250.0084f, 83.89528f)); fList_02.Add(144.9986f);
                VectorList_03.Add(new Vector3(-1930.879f, 208.9198f, 83.68752f));
            }
            else if (iLocationX == 4)
            {
                vTarget_01 = new Vector3(1139.909f, -792.7662f, 56.78955f);
                fMission_01 = 90.00f;

                VectorList_01.Add(new Vector3(1114.316f, -391.2363f, 68.94814f)); fList_01.Add(56.55698f);
                VectorList_02.Add(new Vector3(1107.985f, -400.0927f, 67.22527f)); fList_02.Add(74.62318f);
                VectorList_03.Add(new Vector3(1087.829f, -396.8072f, 66.23475f));

                VectorList_01.Add(new Vector3(1056.331f, -448.8003f, 66.2575f)); fList_01.Add(343.2968f);
                VectorList_02.Add(new Vector3(1060.874f, -445.3619f, 65.11522f)); fList_02.Add(258.4206f);
                VectorList_03.Add(new Vector3(1075.237f, -451.7528f, 64.68692f));

                VectorList_01.Add(new Vector3(1098.355f, -464.7331f, 67.3194f)); fList_01.Add(154.387f);
                VectorList_02.Add(new Vector3(1098.682f, -472.8954f, 66.12813f)); fList_02.Add(78.15363f);
                VectorList_03.Add(new Vector3(1079.35f, -460.0664f, 64.2834f));

                VectorList_01.Add(new Vector3(1046.19f, -497.9495f, 64.07931f)); fList_01.Add(341.9858f);
                VectorList_02.Add(new Vector3(1048.804f, -487.5267f, 63.11507f)); fList_02.Add(257.5276f);
                VectorList_03.Add(new Vector3(1065.805f, -498.6169f, 62.0813f));

                VectorList_01.Add(new Vector3(1006.398f, -511.0345f, 60.99268f)); fList_01.Add(137.9344f);
                VectorList_02.Add(new Vector3(1003.546f, -515.0314f, 59.88464f)); fList_02.Add(206.985f);
                VectorList_03.Add(new Vector3(1007.003f, -534.6654f, 59.38917f));

                VectorList_01.Add(new Vector3(964.3513f, -595.9388f, 59.9027f)); fList_01.Add(69.7037f);
                VectorList_02.Add(new Vector3(954.6882f, -598.1376f, 58.56387f)); fList_02.Add(28.93439f);
                VectorList_03.Add(new Vector3(937.6322f, -585.5336f, 56.90552f));

                VectorList_01.Add(new Vector3(999.7351f, -593.9122f, 59.63856f)); fList_01.Add(263.9391f);
                VectorList_02.Add(new Vector3(1006.775f, -589.3687f, 58.27563f)); fList_02.Add(257.7098f);
                VectorList_03.Add(new Vector3(1023.223f, -576.6242f, 58.36628f));

                VectorList_01.Add(new Vector3(1009.582f, -572.3876f, 60.59443f)); fList_01.Add(252.036f);
                VectorList_02.Add(new Vector3(1005.979f, -562.5046f, 59.38989f)); fList_02.Add(262.803f);
                VectorList_03.Add(new Vector3(1027.383f, -553.2776f, 59.34914f));

                VectorList_01.Add(new Vector3(987.8304f, -433.2296f, 63.8907f)); fList_01.Add(224.3197f);
                VectorList_02.Add(new Vector3(992.1111f, -435.9765f, 62.9909f)); fList_02.Add(292.4419f);
                VectorList_03.Add(new Vector3(1000.074f, -449.4273f, 62.92389f));

                VectorList_01.Add(new Vector3(943.9503f, -463.5369f, 61.39575f)); fList_01.Add(132.8595f);
                VectorList_02.Add(new Vector3(942.0056f, -467.8198f, 60.44307f)); fList_02.Add(212.6937f);
                VectorList_03.Add(new Vector3(947.2629f, -486.7507f, 59.8382f));

                VectorList_01.Add(new Vector3(970.4537f, -502.3956f, 62.1409f)); fList_01.Add(74.85342f);
                VectorList_02.Add(new Vector3(962.0403f, -501.9242f, 60.73756f)); fList_02.Add(30.9975f);
                VectorList_03.Add(new Vector3(947.3581f, -494.8595f, 59.64105f));

                VectorList_01.Add(new Vector3(945.921f, -519.0024f, 60.63099f)); fList_01.Add(291.5394f);
                VectorList_02.Add(new Vector3(948.6455f, -513.8672f, 59.42098f)); fList_02.Add(29.37918f);
                VectorList_03.Add(new Vector3(932.9282f, -503.0384f, 58.71077f));

                VectorList_01.Add(new Vector3(844.1748f, -562.8563f, 57.83388f)); fList_01.Add(195.6381f);
                VectorList_02.Add(new Vector3(847.658f, -566.5543f, 56.89813f)); fList_02.Add(280.628f);
                VectorList_03.Add(new Vector3(871.0152f, -568.0969f, 56.42696f));

                VectorList_01.Add(new Vector3(875.5919f, -602.3216f, 58.44252f)); fList_01.Add(45.68369f);
                VectorList_02.Add(new Vector3(874.3745f, -598.3331f, 57.36862f)); fList_02.Add(318.0552f);
                VectorList_03.Add(new Vector3(894.251f, -586.8076f, 56.44651f));

                VectorList_01.Add(new Vector3(943.3564f, -653.3843f, 58.42872f)); fList_01.Add(212.2516f);
                VectorList_02.Add(new Vector3(948.8981f, -655.2887f, 57.19143f)); fList_02.Add(309.2443f);
                VectorList_03.Add(new Vector3(965.4006f, -649.7277f, 56.54283f));

                VectorList_01.Add(new Vector3(979.176f, -716.3843f, 58.22068f)); fList_01.Add(315.7729f);
                VectorList_02.Add(new Vector3(979.3314f, -711.0975f, 56.90813f)); fList_02.Add(311.6814f);
                VectorList_03.Add(new Vector3(994.1804f, -704.2687f, 56.55691f));

                VectorList_01.Add(new Vector3(1229.051f, -725.6559f, 60.79797f)); fList_01.Add(101.5858f);
                VectorList_02.Add(new Vector3(1224.793f, -727.629f, 59.63126f)); fList_02.Add(159.8873f);
                VectorList_03.Add(new Vector3(1208.56f, -730.0123f, 58.03516f));

                VectorList_01.Add(new Vector3(1222.699f, -697.1072f, 60.80511f)); fList_01.Add(105.7467f);
                VectorList_02.Add(new Vector3(1224.382f, -704.056f, 59.89064f)); fList_02.Add(98.59629f);
                VectorList_03.Add(new Vector3(1203.486f, -699.0427f, 59.26168f));

                VectorList_01.Add(new Vector3(1251.556f, -494.1965f, 69.90691f)); fList_01.Add(258.9244f);
                VectorList_02.Add(new Vector3(1258.889f, -493.0148f, 68.60412f)); fList_02.Add(257.4376f);
                VectorList_03.Add(new Vector3(1269.375f, -500.4934f, 68.17149f));

                VectorList_01.Add(new Vector3(1250.859f, -620.845f, 69.57206f)); fList_01.Add(208.7307f);
                VectorList_02.Add(new Vector3(1254.917f, -623.6689f, 68.56918f)); fList_02.Add(295.5106f);
                VectorList_03.Add(new Vector3(1274.363f, -622.0574f, 68.10347f));
            }
            else if (iLocationX == 5)
            {
                vTarget_01 = new Vector3(2350.803f, 3133.545f, 47.39877f);
                fMission_01 = 78.00f;

                VectorList_01.Add(new Vector3(803.2142f, 2175.106f, 53.0708f)); fList_01.Add(318.2054f);
                VectorList_02.Add(new Vector3(809.3359f, 2180.842f, 51.54044f)); fList_02.Add(249.6649f);
                VectorList_03.Add(new Vector3(786.0928f, 2211.978f, 51.36097f));

                VectorList_01.Add(new Vector3(359.617f, 2623.094f, 44.67857f)); fList_01.Add(39.80532f);
                VectorList_02.Add(new Vector3(354.1595f, 2627.776f, 43.68883f)); fList_02.Add(32.85324f);
                VectorList_03.Add(new Vector3(321.5165f, 2639.582f, 43.75037f));

                VectorList_01.Add(new Vector3(379.9637f, 2629.398f, 44.67242f)); fList_01.Add(45.83405f);
                VectorList_02.Add(new Vector3(373.7971f, 2633.73f, 43.68918f)); fList_02.Add(32.06982f);
                VectorList_03.Add(new Vector3(322.961f, 2643.34f, 43.77767f));

                VectorList_01.Add(new Vector3(980.2728f, 2666.566f, 40.04344f)); fList_01.Add(5.071246f);
                VectorList_02.Add(new Vector3(994.3892f, 2667.536f, 39.27209f)); fList_02.Add(0.6908962f);
                VectorList_03.Add(new Vector3(995.0891f, 2687.013f, 38.90311f));

                VectorList_01.Add(new Vector3(241.5029f, 3107.774f, 42.48719f)); fList_01.Add(101.4586f);
                VectorList_02.Add(new Vector3(235.8502f, 3105.206f, 41.61662f)); fList_02.Add(185.8448f);
                VectorList_03.Add(new Vector3(223.0855f, 3093.06f, 41.44109f));

                VectorList_01.Add(new Vector3(247.5917f, 3169.376f, 42.78289f)); fList_01.Add(106.3041f);
                VectorList_02.Add(new Vector3(239.5608f, 3165.556f, 41.85842f)); fList_02.Add(102.8332f);
                VectorList_03.Add(new Vector3(220.1292f, 3169.346f, 41.67123f));

                VectorList_01.Add(new Vector3(-287.5244f, 2535.65f, 75.47896f)); fList_01.Add(272.6512f);
                VectorList_02.Add(new Vector3(-283.9333f, 2535.301f, 73.86099f)); fList_02.Add(1.183134f);
                VectorList_03.Add(new Vector3(-264.0311f, 2622.53f, 61.55291f));

                VectorList_01.Add(new Vector3(1683.184f, 4689.478f, 43.06565f)); fList_01.Add(251.5361f);
                VectorList_02.Add(new Vector3(1681.594f, 4681.109f, 42.24663f)); fList_02.Add(269.7292f);
                VectorList_03.Add(new Vector3(1692.259f, 4679.82f, 42.29196f));

                VectorList_01.Add(new Vector3(1718.861f, 4677.259f, 43.65579f)); fList_01.Add(76.78881f);
                VectorList_02.Add(new Vector3(1712.121f, 4668.929f, 42.28226f)); fList_02.Add(90.04243f);
                VectorList_03.Add(new Vector3(1699.653f, 4674.552f, 42.39527f));

                VectorList_01.Add(new Vector3(2418.923f, 4020.43f, 36.83405f)); fList_01.Add(240.5624f);
                VectorList_02.Add(new Vector3(2423.304f, 4011.607f, 35.89188f)); fList_02.Add(243.4589f);
                VectorList_03.Add(new Vector3(2439.703f, 3994.561f, 36.12376f));

                VectorList_01.Add(new Vector3(1406.814f, 3655.861f, 34.21154f)); fList_01.Add(103.8562f);
                VectorList_02.Add(new Vector3(1402.228f, 3659.188f, 33.3542f)); fList_02.Add(20.23462f);
                VectorList_03.Add(new Vector3(1389.737f, 3677.36f, 32.85825f));
            }
            else
            {
                vTarget_01 = new Vector3(-62.00491f, 6443.913f, 30.68172f);
                fMission_01 = 43.50f;

                VectorList_01.Add(new Vector3(-9.451751f, 6654.047f, 31.47972f)); fList_01.Add(199.7582f);
                VectorList_02.Add(new Vector3(-15.31159f, 6644.873f, 30.2937f)); fList_02.Add(199.3737f);
                VectorList_03.Add(new Vector3(-14.10001f, 6636.241f, 30.16339f));

                VectorList_01.Add(new Vector3(1.799951f, 6612.593f, 32.07961f)); fList_01.Add(30.25636f);
                VectorList_02.Add(new Vector3(-5.105602f, 6616.125f, 30.66235f)); fList_02.Add(31.05975f);
                VectorList_03.Add(new Vector3(-10.89833f, 6625.515f, 30.08684f));

                VectorList_01.Add(new Vector3(-37.27459f, 6578.817f, 32.31625f)); fList_01.Add(313.427f);
                VectorList_02.Add(new Vector3(-31.19669f, 6581.276f, 30.45761f)); fList_02.Add(40.06662f);
                VectorList_03.Add(new Vector3(-48.62258f, 6600.507f, 28.90215f));

                VectorList_01.Add(new Vector3(-105.3131f, 6528.751f, 30.16693f)); fList_01.Add(323.5632f);
                VectorList_02.Add(new Vector3(-104.1652f, 6533.693f, 28.99922f)); fList_02.Add(43.69716f);
                VectorList_03.Add(new Vector3(-116.037f, 6544.479f, 28.71773f));

                VectorList_01.Add(new Vector3(-230.0806f, 6444.822f, 31.19745f)); fList_01.Add(156.3605f);
                VectorList_02.Add(new Vector3(-231.5935f, 6440.661f, 30.39005f)); fList_02.Add(227.7995f);
                VectorList_03.Add(new Vector3(-213.4868f, 6428.529f, 30.6507f));

                VectorList_01.Add(new Vector3(-360.0052f, 6260.813f, 31.91234f)); fList_01.Add(308.4899f);
                VectorList_02.Add(new Vector3(-355.3246f, 6268.027f, 30.5388f)); fList_02.Add(46.66677f);
                VectorList_03.Add(new Vector3(-378.4335f, 6294.267f, 28.81931f));

                VectorList_01.Add(new Vector3(-407.2681f, 6314.024f, 28.94147f)); fList_01.Add(218.5359f);
                VectorList_02.Add(new Vector3(-396.364f, 6311.494f, 28.14927f)); fList_02.Add(224.5848f);
                VectorList_03.Add(new Vector3(-392.2848f, 6291.854f, 28.80124f));

                VectorList_01.Add(new Vector3(-347.4092f, 6225.333f, 31.8842f)); fList_01.Add(202.3903f);
                VectorList_02.Add(new Vector3(-352.4228f, 6220.427f, 30.68048f)); fList_02.Add(224.638f);
                VectorList_03.Add(new Vector3(-334.7883f, 6207.195f, 30.46373f));

                VectorList_01.Add(new Vector3(-15.26303f, 6557.373f, 33.24042f)); fList_01.Add(317.6784f);
                VectorList_02.Add(new Vector3(-9.324566f, 6561.588f, 31.16088f)); fList_02.Add(227.377f);
                VectorList_03.Add(new Vector3(9.080943f, 6551.361f, 30.50678f));

                VectorList_01.Add(new Vector3(1510.184f, 6326.24f, 24.60711f)); fList_01.Add(47.05679f);
                VectorList_02.Add(new Vector3(1505.188f, 6330.137f, 23.18942f)); fList_02.Add(334.9275f);
                VectorList_03.Add(new Vector3(1473.289f, 6360.643f, 22.85462f));
            }

            iMissionVar_01 = RandInt(0, VectorList_02.Count - 1);

            vFuMiss = VectorList_03[iMissionVar_01];
            vGetaway = VectorList_02[iMissionVar_01];
            fGetDir = fList_02[iMissionVar_01];

            int iVe = FindRandom(112, 1, 13);
            sMissionVar_01 = RanVehListX(iVe, 1, true);

            if (sCustomCarz.Count > 0 && RandInt(0, 20) < 10)
                sMissionVar_01 = sCustomCarz[RandInt(0, sCustomCarz.Count)];

            VehicleSpawn(sMissionVar_01, vGetaway, fGetDir, false, false, true, false, 0, 0, 66, MyLang.Maptext[14], 1, false);
            iCashBouns = RandInt(5000, 6000);
            iCashReward = 0;
            BeOnOff.Add(true);//The Ghost Car Add
            BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[21], "", 5000);
            bOnTheJob = true;
        }
        private void TempAgency()
        {
            LogThis("TempAgency");

            if (!bOnlineStuffLoaded)
                LoadOnlineIps(true);

            Vector3 VStarter = new Vector3();
            int iNamez = 73;
            int iCon = -1;

            if (iLocationX == 1)
            {
                VTBTimerPool.Add(ttTextBar_01);
                VTBTimerPool.Add(ttTextBar_03);
                ttTextBar_01.Label = MyLang.Othertext[150];
                ttTextBar_03.Label = MyLang.Othertext[151];
                VectorList_01.Clear();
                fList_01.Clear();
                BeOnOff.Clear();
                iMissionVar_04 = 0;
                bSoloRace = true;

                vTarget_01 = new Vector3(787.7271f, -1770.375f, 28.29461f);
                vTarget_02 = new Vector3(-2212.344f, 1073.025f, 29.77212f);
                vTarget_03 = new Vector3(-1981.921f, 1099.328f, 26.46269f);
                vTarget_04 = new Vector3(-2151.073f, 1105.916f, 28.08027f);
                vTarget_05 = new Vector3(784.5073f, -1868.115f, 29.2216f);
                fMission_02 = 251.9097f;

                vFuMiss = new Vector3(800.1396f, -1774.456f, 29.34297f);
                fMission_01 = 297.9076f;

                VectorList_01.Add(new Vector3(-1998.645f, 1097.889f, 24.86589f)); fList_01.Add(269.5195f);
                VectorList_01.Add(new Vector3(-2001.027f, 1102.583f, 24.86389f)); fList_01.Add(269.5195f);
                VectorList_01.Add(new Vector3(-2001.151f, 1091.858f, 24.86417f)); fList_01.Add(271.7703f);
                VectorList_01.Add(new Vector3(-2007.956f, 1088.784f, 24.86602f)); fList_01.Add(271.7376f);
                VectorList_01.Add(new Vector3(-2008.376f, 1115.527f, 24.86123f)); fList_01.Add(266.8758f);
                VectorList_01.Add(new Vector3(-1969.02f, 1098.757f, 24.86595f)); fList_01.Add(90.43178f);
                VectorList_01.Add(new Vector3(-1964.685f, 1092.816f, 24.86395f)); fList_01.Add(90.43178f);
                VectorList_01.Add(new Vector3(-1963.999f, 1104.846f, 24.86103f)); fList_01.Add(90.43177f);
                VectorList_01.Add(new Vector3(-1955.946f, 1106.741f, 24.86423f)); fList_01.Add(90.43176f);
                VectorList_01.Add(new Vector3(-1956.167f, 1089.103f, 24.86414f)); fList_01.Add(90.43172f);

                BeOnOff.Add(true);
                BeOnOff.Add(false);
                iNamez = 88;
                iCon = 546;
                VStarter = vTarget_01;
                BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[22], MyLang.Jobtext[37], 5000);
            }       // --carball
            else if (iLocationX == 2)
            {
                fMission_03 = 0.00f;
                iMissionVar_01 = 0;
                iUltPed01 = 0;
                BeOnOff.Clear();
                MultiPed.Clear();
                fList_01.Clear();
                fList_02.Clear();
                fList_03.Clear();
                iList_01.Clear();
                iList_02.Clear();
                VectorList_01.Clear();
                VectorList_02.Clear();
                VectorList_03.Clear();
                VectorList_04.Clear();
                VectorList_05.Clear();

                VTBTimerPool.Add(ttTextBar_01);
                VTBTimerPool.Add(BtSlideBar);
                ttTextBar_01.Label = MyLang.Othertext[152];
                BtSlideBar.Label = MyLang.Othertext[153];
                BtSlideBar.BackgroundColor = Color.AliceBlue;
                BtSlideBar.ForegroundColor = Color.Red;

                iList_01.Add(FindRandom(61, 12, 16));
                if (iList_01[0] == 12)
                {
                    vFuMiss = new Vector3(351.0237f, -950.7453f, 29.40918f);

                    VectorList_01.Add(new Vector3(345.7501f, -977.9116f, 28.37905f)); fList_01.Add(270.4436f);
                    VectorList_01.Add(new Vector3(345.9431f, -982.3931f, 28.36338f)); fList_01.Add(3.461613f);
                    VectorList_01.Add(new Vector3(345.8682f, -980.9756f, 28.36891f)); fList_01.Add(3.167192f);
                    VectorList_01.Add(new Vector3(345.8458f, -979.6537f, 28.37225f)); fList_01.Add(7.168578f);
                    VectorList_01.Add(new Vector3(345.897f, -976.9437f, 28.38092f)); fList_01.Add(234.9466f);

                    LoadInMissionIPLs(12, true, false);
                }       //    MissionRow
                else if (iList_01[0] == 13)
                {
                    vFuMiss = new Vector3(395.7168f, 252.5639f, 102.9311f);

                    VectorList_01.Add(new Vector3(371.4525f, 253.1166f, 102.0098f)); fList_01.Add(341.0112f);
                    VectorList_01.Add(new Vector3(378.521f, 250.5499f, 102.0096f)); fList_01.Add(71.15887f);
                    VectorList_01.Add(new Vector3(376.7061f, 251.1696f, 102.0096f)); fList_01.Add(69.54118f);
                    VectorList_01.Add(new Vector3(374.183f, 252.1099f, 102.0096f)); fList_01.Add(69.55529f);
                    VectorList_01.Add(new Vector3(370.2097f, 253.97f, 102.0096f)); fList_01.Add(282.6834f);

                    LoadInMissionIPLs(13, true, false);
                }       //      Vinewood
                else if (iList_01[0] == 14)
                {
                    vFuMiss = new Vector3(10.77269f, 214.7812f, 107.1411f);

                    VectorList_01.Add(new Vector3(4.677205f, 220.2921f, 106.7159f)); fList_01.Add(240.0815f);
                    VectorList_01.Add(new Vector3(7.061273f, 225.475f, 107.4876f)); fList_01.Add(138.3406f);
                    VectorList_01.Add(new Vector3(6.504213f, 224.0539f, 107.2854f)); fList_01.Add(157.16f);
                    VectorList_01.Add(new Vector3(6.1691f, 222.7032f, 107.0936f)); fList_01.Add(137.9715f);
                    VectorList_01.Add(new Vector3(5.043196f, 218.9231f, 106.5565f)); fList_01.Add(272.9461f);

                    LoadInMissionIPLs(14, true, false);
                }       //      VinewoodWest
                else if (iList_01[0] == 15)
                {
                    vFuMiss = new Vector3(-1178.25f, -1123.005f, 5.700791f);

                    VectorList_01.Add(new Vector3(-1174.457f, -1153.458f, 4.658165f)); fList_01.Add(278.3068f);
                    VectorList_01.Add(new Vector3(-1175.295f, -1148.321f, 4.668828f)); fList_01.Add(186.327f);
                    VectorList_01.Add(new Vector3(-1175.162f, -1149.529f, 4.666319f)); fList_01.Add(186.2316f);
                    VectorList_01.Add(new Vector3(-1174.859f, -1151.743f, 4.661713f)); fList_01.Add(186.4143f);
                    VectorList_01.Add(new Vector3(-1171.938f, -1153.139f, 4.657416f)); fList_01.Add(18.46338f);

                    LoadInMissionIPLs(15, true, false);
                }       //      Vespucci
                else if (iList_01[0] == 16)
                {
                    vFuMiss = new Vector3(-1288.408f, -643.213f, 26.5635f);

                    VectorList_01.Add(new Vector3(-1285.273f, -652.0281f, 25.62972f)); fList_01.Add(38.44094f);
                    VectorList_01.Add(new Vector3(-1277.746f, -644.5825f, 25.73287f)); fList_01.Add(131.9127f);
                    VectorList_01.Add(new Vector3(-1279.317f, -645.4908f, 25.70546f)); fList_01.Add(119.8866f);
                    VectorList_01.Add(new Vector3(-1281.751f, -647.4449f, 25.65853f)); fList_01.Add(123.1041f);
                    VectorList_01.Add(new Vector3(-1287.868f, -651.7767f, 25.56246f)); fList_01.Add(359.7041f);

                    LoadInMissionIPLs(16, true, false);
                }       //      Dellpero

                vTarget_01 = VectorList_01[0];

                vTarget_02 = new Vector3(-1569.667f, -3017.43f, -74.40616f);
                fMission_01 = 15.0804f;

                vTarget_03 = new Vector3(-1582.72f, -3014.096f, -77.00f);
                fMission_02 = 265.8795f;

                VectorList_03.Add(new Vector3(-1610.426f, -2998.037f, -79.00599f)); fList_02.Add(135.2245f);
                VectorList_03.Add(new Vector3(-1609.814f, -2999.876f, -79.00599f)); fList_02.Add(81.68466f);
                VectorList_03.Add(new Vector3(-1612.359f, -2997.706f, -79.00599f)); fList_02.Add(215.9869f);
                VectorList_03.Add(new Vector3(-1603.596f, -3006.15f, -77.00497f)); fList_02.Add(271.7049f);
                VectorList_03.Add(new Vector3(-1604.874f, -3017.468f, -79.40477f)); fList_02.Add(270.0359f);
                VectorList_03.Add(new Vector3(-1590.409f, -3018.858f, -80.00601f)); fList_02.Add(10.92452f);
                VectorList_03.Add(new Vector3(-1575.277f, -3007.495f, -80.00595f)); fList_02.Add(100.0471f);
                VectorList_03.Add(new Vector3(-1591.086f, -3012.034f, -80.00499f)); fList_02.Add(87.81898f);

                VectorList_02.Add(new Vector3(-1585.062f, -3005.696f, -77.00f));
                VectorList_02.Add(new Vector3(-1582.686f, -3008.728f, -77.00f));
                VectorList_02.Add(new Vector3(-1583.689f, -3012.495f, -77.00f));

                VectorList_04.Add(new Vector3(-1585.390f, -3009.250f, -76.00f)); fList_03.Add(220.00f);
                VectorList_04.Add(new Vector3(-1586.791f, -3011.937f, -76.00f)); fList_03.Add(275.00f);
                VectorList_04.Add(new Vector3(-1586.814f, -3013.453f, -76.00f)); fList_03.Add(275.00f);
                VectorList_04.Add(new Vector3(-1585.707f, -3016.560f, -76.00f)); fList_03.Add(330.00f);

                VectorList_05.Add(new Vector3(-1584.191f, -3009.705f, -77.00f));
                VectorList_05.Add(new Vector3(-1584.832f, -3011.816f, -77.00f));
                VectorList_05.Add(new Vector3(-1584.934f, -3013.338f, -77.00f));
                VectorList_05.Add(new Vector3(-1584.620f, -3015.287f, -77.00f));

                BeOnOff.Add(false);//adddrinker.
                BeOnOff.Add(false);//Returndrinker.

                iList_01.Add(0);//barwalks
                iList_02.Add(0);
                iList_02.Add(1);
                iList_02.Add(2);
                iList_02.Add(3);

                iCon = 614;
                VStarter = vTarget_01;
                BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[22], MyLang.Jobtext[38], 5000);
            }       // --club
            else if (iLocationX == 3)
            {
                BeOnOff.Clear();
                sList_01.Clear();
                VectorList_01.Clear();
                VectorList_02.Clear();
                MishVic.Clear();
                fList_01.Clear();
                iMissionVar_01 = 0;
                vTarget_01 = new Vector3(-2013.86096f, 3218.96973f, 52.1987915f);
                vFuMiss = new Vector3(-2063.984f, 3191.224f, 32.81033f);

                vTarget_02 = new Vector3(-1300.317f, -2989.907f, -33.072f);
                fMission_01 = 177.2672f;

                vTarget_03 = new Vector3(-1308.34302f, -2992.78857f, -48.9497147f);
                fMission_02 = -89.7529602f;

                List<string> sPoper = new List<string>();
                List<Vector3> VPoser = new List<Vector3>();
                List<Vector3> VRoter = new List<Vector3>();

                sPoper.Add("xm_prop_lab_door02_r");
                VPoser.Add(new Vector3(-1300.87854f, -2989.34937f, -34.0867786f));
                VRoter.Add(new Vector3(0.00f, 0.00f, 2.0027160f));

                sPoper.Add("xm_prop_lab_doorframe02");
                VPoser.Add(new Vector3(-2012.91052f, 3218.39478f, 52.4544754f));
                VRoter.Add(new Vector3(0.00f, 0.00f, -119.907417f));

                sPoper.Add("xm_prop_lab_door02_r");
                VPoser.Add(new Vector3(-2012.57422f, 3218.9502f, 52.455545f));
                VRoter.Add(new Vector3(0.00f, 0.00f, -119.902489f));

                for (int i = 0; i < sPoper.Count; i++)
                    BuildProp(sPoper[i], VPoser[i], VRoter[i], true, true);

                VectorList_01.Add(new Vector3(-1490.6792f, 2702.30664f, 18.014452f));
                VectorList_01.Add(new Vector3(-1516.29944f, 2724.75562f, 18.0269489f));
                VectorList_01.Add(new Vector3(-1530.4884f, 2737.34253f, 18.0259171f));
                VectorList_01.Add(new Vector3(-1503.85864f, 2713.92212f, 18.0179501f));

                VectorList_02.Add(new Vector3(189.6861f, 2819.862f, 40.78401f));
                VectorList_02.Add(new Vector3(190.8403f, 2837.878f, 40.83955f));
                VectorList_02.Add(new Vector3(196.4462f, 2855.003f, 41.085f));
                VectorList_02.Add(new Vector3(202.5097f, 2874.981f, 40.98077f));

                BeOnOff.Add(true);//traed dozer
                BeOnOff.Add(false);//inout of doza
                BeOnOff.Add(false);//inbuildin
                iCon = 569;
                iNamez = 79;
                VStarter = vTarget_01;
                BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[22], MyLang.Jobtext[39], 5000);
            }       // --hanger
            else if (iLocationX == 4)
            {
                VectorList_01.Clear();
                VectorList_02.Clear();
                BeOnOff.Clear();
                MishPed.Clear();
                iUltPed01 = 0;
                iMissionVar_01 = 0;
                VTBTimerPool.Add(ttTextBar_01);
                ttTextBar_01.Label = MyLang.Othertext[152];
                vTarget_01 = new Vector3(977.4801f, 16.66478f, 79.99027f);
                vFuMiss = new Vector3(972.0197f, 1.485185f, 81.04102f);

                vTarget_02 = new Vector3(2549.292f, -269.0374f, -58.72298f);
                fMission_01 = 149.0205f;

                BuildProp("vw_prop_vw_valet_01a", new Vector3(926.022339f, 53.1337013f, 80.0960464f), new Vector3(0.00f, 0.00f, 56.3316803f), true, false);

                VectorList_01.Add(new Vector3(2546.965f, -275.5642f, -59.72301f));
                VectorList_01.Add(new Vector3(2531.238f, -301.6779f, -59.72301f));

                vTarget_03 = new Vector3(927.10f, 52.47f, 80.09f);
                fMission_02 = 53.27f;

                vTarget_04 = new Vector3(919.32f, 53.66f, 79.90f);//60fRadi

                vTarget_05 = new Vector3(934.57f, -1.20f, 77.75f);

                vTarget_06 = new Vector3(1339.46f, 183.83f, -48.88f);

                vTarget_07 = new Vector3(1341.45f, 190.6f, -49.20f);

                VectorList_01.Add(new Vector3(2517.586f, -263.2542f, -59.7164f));
                VectorList_01.Add(new Vector3(1379.966f, 259.5016f, -49.99368f));
                VectorList_01.Add(new Vector3(1379.977f, 178.0438f, -49.99321f));
                VectorList_01.Add(new Vector3(935.7204f, 46.89984f, 80.09576f));

                BeOnOff.Add(false);//UnLoadCustom
                BeOnOff.Add(true);//Removecorpse


                VectorList_02.Add(new Vector3(1024.554f, 224.2933f, 81.56049f));
                VectorList_02.Add(new Vector3(927.2502f, -130.6656f, 75.88772f));
                iCon = 679;
                iNamez = 80;
                VStarter = vTarget_01;
                BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[22], MyLang.Jobtext[40], 5000);
            }      // --casino get data...
            else if (iLocationX == 5)
            {
                sList_01.Clear();
                MyMissions.RaceXM.Clear();
                bSoloRace = false;

                List<Vector3> vStart = new List<Vector3>();
                List<Vector3> vFubs = new List<Vector3>();

                vStart.Add(new Vector3(1277.125f, 2838.207f, 48.39413f));
                vStart.Add(new Vector3(-3.889916f, 3339.952f, 40.63113f));
                vStart.Add(new Vector3(30.87291f, 2618.736f, 84.99996f));
                vStart.Add(new Vector3(2759.654f, 3911.022f, 44.81792f));

                vFubs.Add(new Vector3(1262.347f, 2808.717f, 47.86474f));
                vFubs.Add(new Vector3(65.38f, 3329.08f, 36.33f));
                vFubs.Add(new Vector3(104.47f, 2689.83f, 52.75f));
                vFubs.Add(new Vector3(2744.54f, 3877.85f, 43.45f));

                int iRanSpot = RandInt(0, vStart.Count - 1);
                vTarget_09 = vStart[iRanSpot];
                vFuMiss = vFubs[iRanSpot];
                
                List<Vector3> RevRace = new List<Vector3>();
                List<Vector3> RaceCaz = new List<Vector3>();
                List<float> RaceHeads = new List<float>();
                
                RevRace.Add(new Vector3(479.4138f, 4822.151f, -59.00217f));
                RevRace.Add(new Vector3(495.0264f, 4822.544f, -59.01122f));
                RevRace.Add(new Vector3(504.1416f, 4786.058f, -54.61969f));
                RevRace.Add(new Vector3(495.8223f, 4767.827f, -54.62121f));
                RevRace.Add(new Vector3(469.9835f, 4781.028f, -54.62616f));
                RevRace.Add(new Vector3(460.2986f, 4816.664f, -54.6142f));
                RevRace.Add(new Vector3(465.0684f, 4836.181f, -54.61276f));
                RevRace.Add(new Vector3(489.6268f, 4840.071f, -54.61074f));
                RevRace.Add(new Vector3(500.0325f, 4824.912f, -54.61177f));
                RevRace.Add(new Vector3(509.8183f, 4789.662f, -54.61192f));
                RevRace.Add(new Vector3(503.9454f, 4789.169f, -54.6496f));
                RevRace.Add(new Vector3(495.5768f, 4819.361f, -58.84171f));
                RevRace.Add(new Vector3(481.1179f, 4836.292f, -59.30496f));
                RevRace.Add(new Vector3(465.3367f, 4825.074f, -59.61578f));
                RevRace.Add(new Vector3(446.564f, 4820.87f, -59.61536f));
                RevRace.Add(new Vector3(404.5983f, 4823.772f, -59.62111f));
                RevRace.Add(new Vector3(368.0305f, 4830.588f, -59.61905f));
                RevRace.Add(new Vector3(345.57f, 4834.439f, -59.61797f));
                RevRace.Add(new Vector3(337.0717f, 4849.362f, -59.61703f));
                RevRace.Add(new Vector3(341.6886f, 4858.903f, -59.61588f));
                RevRace.Add(new Vector3(327.9584f, 4872.175f, -59.61192f));
                RevRace.Add(new Vector3(322.1784f, 4866.196f, -59.6078f));
                RevRace.Add(new Vector3(345.1567f, 4855.936f, -63.21039f));
                RevRace.Add(new Vector3(356.337f, 4850.235f, -63.21277f));
                RevRace.Add(new Vector3(364.7047f, 4850.47f, -63.21467f));
                RevRace.Add(new Vector3(375.0516f, 4845.581f, -63.21251f));
                RevRace.Add(new Vector3(391.7603f, 4842.811f, -63.21326f));
                RevRace.Add(new Vector3(410.0732f, 4842.909f, -63.21255f));
                RevRace.Add(new Vector3(413.2673f, 4837.597f, -63.21358f));
                RevRace.Add(new Vector3(405.9442f, 4835.903f, -63.21299f));
                RevRace.Add(new Vector3(395.4799f, 4835.614f, -59.61334f));
                RevRace.Add(new Vector3(395.2175f, 4827.196f, -59.61522f));
                RevRace.Add(new Vector3(440.6614f, 4820.905f, -59.61539f));
                RevRace.Add(new Vector3(470.6897f, 4818.968f, -59.0039f));
                RevRace.Add(new Vector3(480.9774f, 4786.456f, -59.00739f));
                RevRace.Add(new Vector3(475.0404f, 4782.72f, -59.60529f));
                RevRace.Add(new Vector3(483.1854f, 4773.935f, -59.60934f));
                RevRace.Add(new Vector3(496.4059f, 4774.347f, -59.44008f));
                RevRace.Add(new Vector3(500.3993f, 4785.472f, -59.00656f));
                RevRace.Add(new Vector3(484.2861f, 4806.086f, -58.99649f));

                RaceCaz.Add(new Vector3(480.320343f, 4805.76514f, -58.9978867f)); RaceHeads.Add(10.00f);
                RaceCaz.Add(new Vector3(480.320343f, 4805.76514f, -58.9978867f)); RaceHeads.Add(10.00f);
                RaceCaz.Add(new Vector3(483.320343f, 4806.76514f, -58.9978867f)); RaceHeads.Add(10.00f);
                RaceCaz.Add(new Vector3(488.320343f, 4807.76514f, -58.9978867f)); RaceHeads.Add(10.00f);
                RaceCaz.Add(new Vector3(486.320343f, 4807.76514f, -58.9978867f)); RaceHeads.Add(10.00f);

                sList_01.Add("BMX");

                RaceBuild PreRace = new RaceBuild
                {
                    AvalableVeh = sList_01,
                    FubStop = vFuMiss,
                    Local = 2,
                    RaceCars = RaceCaz,
                    RaceHead = RaceHeads,
                    TheRace = RevRace,
                    VehClass = 3
                };
                MyMissions.RaceXM.Add(PreRace);

                LoadInMissionIPLs(19, true, false);

                bTestRun = true;
                Raceist();

                BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[22], MyLang.Jobtext[41], 5000);
            }       // --Facility
            else
            {
                sList_01.Clear();
                VectorList_01.Clear();
                VectorList_02.Clear();
                VectorList_03.Clear();
                MishPed.Clear();
                MultiPed.Clear();
                fList_01.Clear();
                iMissionVar_01 = 0;
                sMissionVar_01 = "";
                sMissionVar_02 = MyLang.Mistext[224];
                vTarget_01 = new Vector3(-354.5753f, 4825.253f, 143.2983f);
                vFuMiss = new Vector3(-356.3851f, 4817.959f, 142.884f);

                vTarget_02 = new Vector3(1259.798f, 4813.462f, -40.1302f);
                fMission_01 = 344.0048f;

                vTarget_03 = new Vector3(618.0434f, 5975.604f, -158.6149f);

                VectorList_01.Add(new Vector3(583.1594f, 5950.698f, -157.8608f));
                VectorList_01.Add(new Vector3(561.7137f, 5946.754f, -158.0875f));
                VectorList_01.Add(new Vector3(525.4651f, 5914.496f, -158.0743f));
                VectorList_01.Add(new Vector3(506.1479f, 5930.793f, -158.2723f));
                VectorList_01.Add(new Vector3(471.1572f, 5942.663f, -158.2724f));

                VectorList_02.Add(new Vector3(451.5411f, 5934.055f, -158.2725f));
                VectorList_02.Add(new Vector3(435.8286f, 5896.741f, -158.1377f));
                VectorList_02.Add(new Vector3(404.3304f, 5911.654f, -158.1404f));
                VectorList_02.Add(new Vector3(385.5074f, 5919.386f, -158.1323f));
                VectorList_02.Add(new Vector3(318.8944f, 5912.807f, -158.2419f));
                VectorList_02.Add(new Vector3(292.2531f, 5910.451f, -158.744f));
                VectorList_02.Add(new Vector3(247.2675f, 5951.258f, -159.4836f));
                VectorList_02.Add(new Vector3(241.526f, 6011.808f, -159.4314f));
                VectorList_02.Add(new Vector3(249.2736f, 6093.571f, -159.4274f));

                VectorList_03.Add(new Vector3(435.5199f, 5952.862f, -158.272f));
                VectorList_03.Add(new Vector3(415.0114f, 5941.154f, -158.272f));
                VectorList_03.Add(new Vector3(376.1922f, 5944.769f, -158.2718f));
                VectorList_03.Add(new Vector3(344.732f, 5947.076f, -158.2718f));
                VectorList_03.Add(new Vector3(311.6838f, 5969.031f, -158.2795f));
                VectorList_03.Add(new Vector3(315.4673f, 6004.23f, -158.8825f));
                VectorList_03.Add(new Vector3(283.5168f, 6026.202f, -159.148f));
                VectorList_03.Add(new Vector3(238.6745f, 6048.443f, -159.4266f));
                VectorList_03.Add(new Vector3(249.362f, 6093.539f, -159.4273f));


                LoadInMissionIPLs(19, true, false);

                iCon = 788;
                iNamez = 87;
                VStarter = vTarget_01;
                BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[22], MyLang.Jobtext[42], 5000);
            }       // --Lab

            AddTarget(VStarter, true, true, 1.00f, false, iCon, MyLang.Maptext[iNamez]);
            TheYellowCorona(VStarter, 1.00f);

            bOnTheJob = true;
        }
        private void ParaDisplay()
        {
            LogThis("ParaDisplay");

            VTBTimerPool.Add(ttTextBar_01);
            VTBTimerPool.Add(ttTextBar_02);
            ttTextBar_01.Label = MyLang.Othertext[155];
            ttTextBar_02.Label = MyLang.Othertext[156];

            fList_01.Clear();
            VectorList_01.Clear();
            VectorList_02.Clear();
            VectorList_03.Clear();
            VectorList_04.Clear();
            VectorList_05.Clear();
            MultiPed.Clear();
            iTime_01.Clear();
            iUltPed01 = 0;
            iMissionVar_01 = 45000;
            fCorSize = 2000.00f;
            Vector3 vStartPos = new Vector3(1068.51855f, -3847.56299f, 995.000122f);
            float fStartDir = 10.2862473f;

            if (iLocationX == 1)
            {
                fMission_01 = 150.00f;
                vStartPos = new Vector3(1699.023f, -3577.555f, 1018.34636f); fStartDir = 34.15989f;//old--2299.858f, -4412.603f,
                vTarget_01 = new Vector3(108.2113f, -1941.377f, 20.80372f);

                VectorList_03.Add(new Vector3(223.069641f, -1896.65125f, 24.2081623f));
                VectorList_04.Add(new Vector3(-3.32281637f, 3.19225144f, 138.758911f));
                VectorList_03.Add(new Vector3(207.738464f, -1820.0553f, 27.1213188f));
                VectorList_04.Add(new Vector3(-2.70992279f, 2.97014093f, -129.429886f));
                VectorList_03.Add(new Vector3(99.8504639f, -1695.01807f, 28.364357f));
                VectorList_04.Add(new Vector3(-0.192785218f, 3.41915298f, 47.7202759f));
                VectorList_03.Add(new Vector3(-3.79475117f, -1686.7771f, 28.5365658f));
                VectorList_04.Add(new Vector3(-0.327540517f, 2.88135099f, 110.861511f));
                VectorList_03.Add(new Vector3(-157.149078f, -1704.77222f, 30.1984634f));
                VectorList_04.Add(new Vector3(-5.59065628f, 1.12581515f, -140.375381f));
                VectorList_03.Add(new Vector3(-221.686096f, -1822.52649f, 29.2542477f));
                VectorList_04.Add(new Vector3(-0.352184147f, 2.38653851f, -59.9763527f));
                VectorList_03.Add(new Vector3(-50.9852448f, -2065.60449f, 20.5321617f));
                VectorList_04.Add(new Vector3(-4.96850777f, 3.75270677f, -70.9435272f));
                VectorList_03.Add(new Vector3(269.132996f, -2125.07324f, 15.2646103f));
                VectorList_04.Add(new Vector3(-1.86874688f, 0.0654623806f, -133.749695f));
                VectorList_03.Add(new Vector3(466.723755f, -2022.37073f, 23.3443279f));
                VectorList_04.Add(new Vector3(-1.90386152f, 2.97871566f, 46.1792984f));
                VectorList_03.Add(new Vector3(385.206573f, -1937.49805f, 23.9206181f));
                VectorList_04.Add(new Vector3(-0.173518762f, 2.8863399f, 45.4935684f));
                VectorList_03.Add(new Vector3(387.483978f, -1701.9884f, 28.7558842f));
                VectorList_04.Add(new Vector3(-0.888412118f, 2.90239f, 138.120178f));
                VectorList_03.Add(new Vector3(338.766693f, -2470.65381f, 5.1641326f));
                VectorList_04.Add(new Vector3(1.74202418f, 0.0318012871f, -3.28795528f));
                VectorList_03.Add(new Vector3(589.089355f, -2579.83789f, 5.52716589f));
                VectorList_04.Add(new Vector3(0.327573091f, -0.293803006f, 39.4159546f));
                VectorList_03.Add(new Vector3(735.086792f, -2345.29297f, 23.8826599f));
                VectorList_04.Add(new Vector3(-4.94287109f, -0.00540586701f, 174.996368f));
                VectorList_03.Add(new Vector3(678.722168f, -2044.76245f, 28.7802238f));
                VectorList_04.Add(new Vector3(-0.445292145f, 3.0200808f, 86.2545013f));
                VectorList_03.Add(new Vector3(795.435608f, -2234.91699f, 29.4625626f));
                VectorList_04.Add(new Vector3(0f, 0f, 84.21772f));
                VectorList_03.Add(new Vector3(688.257446f, -1725.52515f, 29.1790619f));
                VectorList_04.Add(new Vector3(-0.345492095f, 3.10908294f, 84.514328f));
                VectorList_03.Add(new Vector3(939.507019f, -1754.05151f, 31.2762203f));
                VectorList_04.Add(new Vector3(0f, 0f, 82.1573334f));
                VectorList_03.Add(new Vector3(504.658966f, -1654.62488f, 26.1815434f));
                VectorList_04.Add(new Vector3(0f, 0f, 49.6371727f));
                VectorList_03.Add(new Vector3(440.733612f, -1802.92212f, 28.1295204f));
                VectorList_04.Add(new Vector3(1.07485783f, 3.01643276f, 50.3501358f));
                VectorList_03.Add(new Vector3(416.99585f, -1873.16724f, 26.6898746f));
                VectorList_04.Add(new Vector3(-4.45100498f, 2.72261858f, 132.681717f));
                VectorList_03.Add(new Vector3(274.861053f, -2022.6582f, 19.1382599f));
                VectorList_04.Add(new Vector3(2.01146126f, -1.96641898f, -37.8370514f));
                VectorList_03.Add(new Vector3(464.177765f, -1919.04626f, 24.8415298f));
                VectorList_04.Add(new Vector3(-1.09292579f, 0.509907782f, 112.671097f));
                VectorList_03.Add(new Vector3(445.328369f, -2090.68921f, 21.9599152f));
                VectorList_04.Add(new Vector3(-5.37756109f, 2.77378845f, 137.762085f));
                VectorList_03.Add(new Vector3(-45.4067879f, -1972.65039f, 14.9201756f));
                VectorList_04.Add(new Vector3(4.33863068f, 2.54190874f, 72.015358f));
                VectorList_03.Add(new Vector3(-150.630936f, -2000.22852f, 22.3075256f));
                VectorList_04.Add(new Vector3(-0.330421656f, 3.71954417f, -6.43309832f));
                VectorList_03.Add(new Vector3(39.3238297f, -2050.41821f, 17.7456684f));
                VectorList_04.Add(new Vector3(-0.516545951f, 3.90853667f, -91.8154221f));
                VectorList_03.Add(new Vector3(28.4606133f, -1636.43359f, 29.134676f));
                VectorList_04.Add(new Vector3(-0.00986503344f, -2.4448998f, -131.271942f));
                VectorList_03.Add(new Vector3(-48.3390236f, -1652.70544f, 29.0977077f));
                VectorList_04.Add(new Vector3(-0.0247420389f, 2.32085991f, -39.8408966f));
                VectorList_03.Add(new Vector3(15.8145781f, -1541.12244f, 29.1025448f));
                VectorList_04.Add(new Vector3(-0.0754465014f, 2.43277645f, 138.947433f));

                VectorList_05.Add(new Vector3(78.14943f, -1947.699f, 21.17414f));
                VectorList_05.Add(new Vector3(85.30692f, -1958.906f, 21.1217f));
                VectorList_05.Add(new Vector3(111.7987f, -1959.725f, 20.90635f));
                VectorList_05.Add(new Vector3(130.37f, -1939.236f, 20.62193f));
                VectorList_05.Add(new Vector3(125.1701f, -1929.549f, 21.38252f));
                VectorList_05.Add(new Vector3(110.7112f, -1921.619f, 20.83934f));
                VectorList_05.Add(new Vector3(99.49545f, -1913.781f, 21.02738f));
                VectorList_05.Add(new Vector3(74.56801f, -1937.954f, 21.00955f));
            }
            else if (iLocationX == 2)
            {
                fMission_01 = 150.00f;
                vStartPos = new Vector3(-2661.153f, -1634.276f, 1012.495f); fStartDir = 292.9644f;//old- 3448.599f, -1970.952f,
                vTarget_01 = new Vector3(-509.8384f, -264.9922f, 35.5558f);

                VectorList_03.Add(new Vector3(-428.351501f, -192.857483f, 35.8732719f));
                VectorList_04.Add(new Vector3(2.46799231f, 1.66035879f, 30.1970882f));
                VectorList_03.Add(new Vector3(-648.766357f, -157.515289f, 36.9013634f));
                VectorList_04.Add(new Vector3(-0.580370963f, 1.54843736f, -149.280411f));
                VectorList_03.Add(new Vector3(-645.855713f, -48.7235107f, 39.8795204f));
                VectorList_04.Add(new Vector3(-4.35533714f, 3.17090273f, 93.8861465f));
                VectorList_03.Add(new Vector3(-733.315002f, -200.724167f, 36.4026794f));
                VectorList_04.Add(new Vector3(0.200866342f, -2.40872526f, -150.609467f));
                VectorList_03.Add(new Vector3(-732.631226f, -141.669968f, 36.638752f));
                VectorList_04.Add(new Vector3(0.349232703f, -2.00595665f, 29.5830631f));
                VectorList_03.Add(new Vector3(-581.61853f, -383.577179f, 34.2407455f));
                VectorList_04.Add(new Vector3(0.223708853f, 0.880116522f, -88.6676025f));
                VectorList_03.Add(new Vector3(-622.106384f, -518.909668f, 34.2426567f));
                VectorList_04.Add(new Vector3(-0.728673756f, 3.04559588f, -0.412145913f));
                VectorList_03.Add(new Vector3(-390.478119f, -311.58905f, 32.71101f));
                VectorList_04.Add(new Vector3(-3.14718509f, 2.91770363f, -125.45726f));
                VectorList_03.Add(new Vector3(-368.488953f, -401.721619f, 30.2422848f));
                VectorList_04.Add(new Vector3(-2.22831655f, 3.3266871f, -99.774437f));
                VectorList_03.Add(new Vector3(-890.428101f, -544.979736f, 33.1194267f));
                VectorList_04.Add(new Vector3(3.20753264f, 3.12432528f, 25.9633427f));
                VectorList_03.Add(new Vector3(-855.020752f, -720.785645f, 25.4144363f));
                VectorList_04.Add(new Vector3(3.49025249f, 4.28949451f, 0.275246561f));
                VectorList_03.Add(new Vector3(-1026.4032f, -788.869446f, 16.7456493f));
                VectorList_04.Add(new Vector3(3.4619453f, 3.03365636f, 65.4763336f));
                VectorList_03.Add(new Vector3(-1028.70764f, -734.529663f, 19.0141373f));
                VectorList_04.Add(new Vector3(3.37747979f, 1.27407491f, -49.3797874f));
                VectorList_03.Add(new Vector3(-1148.10022f, -665.019287f, 21.6073513f));
                VectorList_04.Add(new Vector3(2.09716201f, 3.97845936f, 40.2602196f));
                VectorList_03.Add(new Vector3(-1175.01062f, -423.94931f, 34.2427711f));
                VectorList_04.Add(new Vector3(3.20524287f, 3.26981878f, -81.2015839f));
                VectorList_03.Add(new Vector3(-1049.51111f, -390.217712f, 37.5714951f));
                VectorList_04.Add(new Vector3(-0.121449031f, 0.0476220958f, -64.4462662f));
                VectorList_03.Add(new Vector3(-1015.26392f, -309.39798f, 37.7697983f));
                VectorList_04.Add(new Vector3(-0.314976037f, -2.94223523f, -153.168472f));
                VectorList_03.Add(new Vector3(-1332.10742f, -827.343445f, 16.9648018f));
                VectorList_04.Add(new Vector3(-1.78820658f, 2.81479931f, 47.5422058f));
                VectorList_03.Add(new Vector3(-1215.76184f, -886.454529f, 12.7156858f));
                VectorList_04.Add(new Vector3(0.969336569f, 2.79640746f, -56.4302597f));
                VectorList_03.Add(new Vector3(-1191.14258f, -973.303894f, 4.96707916f));
                VectorList_04.Add(new Vector3(-3.47964954f, 2.96035981f, -59.384613f));
                VectorList_03.Add(new Vector3(-1349.4906f, -1115.76746f, 4.46442795f));
                VectorList_04.Add(new Vector3(3.92493176f, 2.34853482f, -62.0137978f));
                VectorList_03.Add(new Vector3(-1615.25098f, -973.528076f, 13.0242643f));
                VectorList_04.Add(new Vector3(-1.04509139f, 0.000503223098f, -39.361599f));
                VectorList_03.Add(new Vector3(-1649.99231f, -826.753113f, 10.0524092f));
                VectorList_04.Add(new Vector3(0.00f, 0.00f, -129.611267f));
                VectorList_03.Add(new Vector3(-1589.46399f, -644.941772f, 30.1931934f));
                VectorList_04.Add(new Vector3(-4.11451149f, 3.15607619f, -128.93251f));
                VectorList_03.Add(new Vector3(-1594.03174f, -542.658691f, 34.5307007f));
                VectorList_04.Add(new Vector3(1.66435742f, 2.96827173f, -49.6530647f));
                VectorList_03.Add(new Vector3(-1500.43103f, -412.92691f, 37.6136971f));
                VectorList_04.Add(new Vector3(0.00f, 0.00f, -133.349701f));
                VectorList_03.Add(new Vector3(-1290.03699f, -646.275513f, 25.9803085f));
                VectorList_04.Add(new Vector3(0.270301133f, 3.2749176f, -52.4793816f));
                VectorList_03.Add(new Vector3(-1110.34058f, -802.405151f, 17.6258774f));
                VectorList_04.Add(new Vector3(4.8824501f, 2.3683784f, -48.1967316f));
                VectorList_03.Add(new Vector3(-898.992004f, -834.888611f, 17.2463932f));
                VectorList_04.Add(new Vector3(0.00f, 0.00f, -91.5602417f));
                VectorList_03.Add(new Vector3(-1068.07251f, -1006.93774f, 1.96821249f));
                VectorList_04.Add(new Vector3(-0.137536436f, 2.14258528f, 29.8695049f));

                VectorList_05.Add(new Vector3(-508.8449f, -245.3427f, 36.16624f));
                VectorList_05.Add(new Vector3(-527.0029f, -256.3004f, 36.16623f));
                VectorList_05.Add(new Vector3(-519.2386f, -248.7684f, 36.27728f));
                VectorList_05.Add(new Vector3(-524.0146f, -240.2447f, 36.07898f));
                VectorList_05.Add(new Vector3(-526.8874f, -221.3588f, 38.70853f));
                VectorList_05.Add(new Vector3(-538.8707f, -228.8061f, 38.72643f));
                VectorList_05.Add(new Vector3(-547.4329f, -219.6783f, 37.51975f));
                VectorList_05.Add(new Vector3(-530.3271f, -209.8037f, 37.52062f));
            }
            else if (iLocationX == 3)
            {
                fMission_01 = 250.00f;
                vStartPos = new Vector3(-3738.292f, 2733.368f, 1028.42558f); fStartDir = 223.4233f;
                vTarget_01 = new Vector3(-1892.363f, 2019.61f, 140.806f);

                VectorList_03.Add(new Vector3(-1800.07568f, 1837.06995f, 154.664764f));
                VectorList_04.Add(new Vector3(-7.22506428f, 0.463861436f, -68.233757f));
                VectorList_03.Add(new Vector3(-1666.15234f, 2227.47437f, 86.3855667f));
                VectorList_04.Add(new Vector3(-5.8964386f, 0.358199418f, 68.1683426f));
                VectorList_03.Add(new Vector3(-2051.99902f, 2272.71411f, 41.9171791f));
                VectorList_04.Add(new Vector3(6.41081429f, 0.528923452f, -90.9059525f));
                VectorList_03.Add(new Vector3(-2058.13257f, 2330.30908f, 35.4738274f));
                VectorList_04.Add(new Vector3(2.90696764f, 0.298571706f, 112.845627f));
                VectorList_03.Add(new Vector3(-2214.46411f, 2309.97925f, 32.3033867f));
                VectorList_04.Add(new Vector3(-0.916671097f, 1.97470784f, 116.539154f));
                VectorList_03.Add(new Vector3(-2048.09326f, 2002.83411f, 189.913437f));
                VectorList_04.Add(new Vector3(-2.36645555f, 0.453647316f, -124.661232f));
                VectorList_03.Add(new Vector3(-2207.3064f, 1919.59656f, 187.86795f));
                VectorList_04.Add(new Vector3(1.59277093f, 0.364391536f, -67.5529404f));
                VectorList_03.Add(new Vector3(-2507.68433f, 2284.94922f, 31.8073463f));
                VectorList_04.Add(new Vector3(-2.31512308f, 0.304288477f, -85.0598602f));
                VectorList_03.Add(new Vector3(-2730.33984f, 2296.00757f, 18.2064095f));
                VectorList_04.Add(new Vector3(2.96184254f, -0.102390639f, 153.622665f));
                VectorList_03.Add(new Vector3(-2540.20581f, 1904.81116f, 168.348633f));
                VectorList_04.Add(new Vector3(7.33108091f, -0.0859338716f, -16.2212677f));
                VectorList_03.Add(new Vector3(-2499.38232f, 1700.35583f, 153.684494f));
                VectorList_04.Add(new Vector3(5.56719351f, 0.354690224f, -5.80199718f));
                VectorList_03.Add(new Vector3(-3049.8645f, 1720.85376f, 36.0555763f));
                VectorList_04.Add(new Vector3(-0.769342303f, 2.15847659f, -171.204269f));
                VectorList_03.Add(new Vector3(-3006.32837f, 1490.35718f, 27.2175083f));
                VectorList_04.Add(new Vector3(-0.318639934f, 2.51204729f, 149.751831f));
                VectorList_03.Add(new Vector3(-3002.49609f, 1292.83459f, 32.1535645f));
                VectorList_04.Add(new Vector3(6.84190083f, 0.919276834f, -38.001873f));
                VectorList_03.Add(new Vector3(-2794.94727f, 1308.80676f, 72.8844452f));
                VectorList_04.Add(new Vector3(9.27962303f, 1.83005261f, -42.6647873f));
                VectorList_03.Add(new Vector3(-2624.45117f, 1325.68994f, 143.285736f));
                VectorList_04.Add(new Vector3(-6.26832962f, 0.518840432f, -4.99323416f));
                VectorList_03.Add(new Vector3(-2205.45508f, 1061.06641f, 194.677277f));
                VectorList_04.Add(new Vector3(5.04236746f, 0.37845701f, 47.852726f));
                VectorList_03.Add(new Vector3(-2027.08948f, 806.926331f, 160.712296f));
                VectorList_04.Add(new Vector3(-8.06425285f, 2.01889563f, 172.142197f));
                VectorList_03.Add(new Vector3(-1816.58521f, 779.807129f, 137.404388f));
                VectorList_04.Add(new Vector3(0f, -0f, -137.027267f));
                VectorList_03.Add(new Vector3(-1624.74805f, 1044.64087f, 153.084152f));
                VectorList_04.Add(new Vector3(-0.548483729f, 0.258865803f, -16.9577122f));
                VectorList_03.Add(new Vector3(-1557.93872f, 1381.53931f, 126.817955f));
                VectorList_04.Add(new Vector3(-7.37123299f, 1.64660549f, -44.5004158f));
                VectorList_03.Add(new Vector3(-1501.04602f, 1488.25378f, 116.647606f));
                VectorList_04.Add(new Vector3(-4.30387831f, -3.27342057f, -15.2719383f));
                VectorList_03.Add(new Vector3(-1475.23853f, 2035.19775f, 64.1003571f));
                VectorList_04.Add(new Vector3(-5.86831474f, 0.112408511f, 26.1861362f));
                VectorList_03.Add(new Vector3(-1544.48755f, 2146.27881f, 55.4697609f));
                VectorList_04.Add(new Vector3(-3.34061313f, 2.88651395f, -60.3111801f));
                VectorList_03.Add(new Vector3(-1551.89465f, 2259.92676f, 53.5113297f));
                VectorList_04.Add(new Vector3(-3.73024154f, -1.11416399f, 19.2420406f));
                VectorList_03.Add(new Vector3(-1561.00464f, 2410.0083f, 25.4594707f));
                VectorList_04.Add(new Vector3(0f, 0f, 80.8412094f));
                VectorList_03.Add(new Vector3(-1360.67944f, 2422.75879f, 27.9491825f));
                VectorList_04.Add(new Vector3(0f, -0f, -132.838409f));
                VectorList_03.Add(new Vector3(-1336.87024f, 2174.41797f, 52.5123177f));
                VectorList_04.Add(new Vector3(-5.74557066f, -0.118999861f, 44.6206551f));
                VectorList_03.Add(new Vector3(-1441.78967f, 1830.66565f, 79.9013443f));
                VectorList_04.Add(new Vector3(-5.64744139f, 0.541410327f, -22.7745209f));
                VectorList_03.Add(new Vector3(-1497.10205f, 1661.78015f, 102.187004f));
                VectorList_04.Add(new Vector3(0f, 0f, 18.1835804f));

                VectorList_05.Add(new Vector3(-1889.045f, 2000.307f, 141.9783f));
                VectorList_05.Add(new Vector3(-1908.31f, 1997.688f, 142.0989f));
                VectorList_05.Add(new Vector3(-1910.906f, 2022.19f, 140.8345f));
                VectorList_05.Add(new Vector3(-1923.563f, 2030.954f, 140.7387f));
                VectorList_05.Add(new Vector3(-1925.242f, 2047.531f, 140.8321f));
                VectorList_05.Add(new Vector3(-1931.795f, 2062.081f, 140.839f));
                VectorList_05.Add(new Vector3(-1889.49f, 2050.174f, 140.9855f));
                VectorList_05.Add(new Vector3(-1891.58f, 2039.388f, 140.8805f));
            }
            else if (iLocationX == 4)
            {
                fMission_01 = 350.00f;
                vStartPos = new Vector3(2771.21f, 1022.148f, 1057.28427f); fStartDir = 115.942f;
                vTarget_01 = new Vector3(1173.156f, -640.7235f, 62.5041f);

                VectorList_03.Add(new Vector3(1293.04028f, -639.247742f, 67.3089294f));
                VectorList_04.Add(new Vector3(-3.11234236f, -2.6095221f, -160.00592f));
                VectorList_03.Add(new Vector3(1336.90271f, -725.678223f, 65.7022476f));
                VectorList_04.Add(new Vector3(-3.62250972f, 3.0675683f, 74.0496902f));
                VectorList_03.Add(new Vector3(1374.04407f, -577.700562f, 73.6403046f));
                VectorList_04.Add(new Vector3(0.567226946f, 1.34238577f, 31.6552315f));
                VectorList_03.Add(new Vector3(1291.1167f, -445.364319f, 68.3425446f));
                VectorList_04.Add(new Vector3(0.647225618f, 0.930428267f, 5.17004633f));
                VectorList_03.Add(new Vector3(1134.76563f, -352.851257f, 66.3476639f));
                VectorList_04.Add(new Vector3(0f, -0f, 95.3252945f));
                VectorList_03.Add(new Vector3(1038.37402f, -419.702301f, 65.3265686f));
                VectorList_04.Add(new Vector3(-2.77280951f, 2.94934702f, 129.386765f));
                VectorList_03.Add(new Vector3(893.166687f, -509.607513f, 56.9196739f));
                VectorList_04.Add(new Vector3(-3.49597263f, 1.73154294f, 109.451721f));
                VectorList_03.Add(new Vector3(918.720032f, -604.277344f, 56.6237488f));
                VectorList_04.Add(new Vector3(0.10055089f, 2.38402367f, -126.057281f));
                VectorList_03.Add(new Vector3(994.023438f, -552.019348f, 58.9927483f));
                VectorList_04.Add(new Vector3(1.91626883f, 4.05932236f, -55.6649704f));
                VectorList_03.Add(new Vector3(999.086243f, -711.068848f, 56.7126465f));
                VectorList_04.Add(new Vector3(0.0757178888f, 3.03406453f, -140.388535f));
                VectorList_03.Add(new Vector3(1088.24487f, -763.638855f, 57.2289314f));
                VectorList_04.Add(new Vector3(-0.746891558f, 3.01602507f, -89.8002319f));
                VectorList_03.Add(new Vector3(1169.02869f, -916.867371f, 49.9797173f));
                VectorList_04.Add(new Vector3(4.33744478f, 2.70662856f, 0.0602228418f));
                VectorList_03.Add(new Vector3(1055.42529f, -851.438843f, 48.2726898f));
                VectorList_04.Add(new Vector3(2.86761022f, 3.48246408f, -89.4318695f));
                VectorList_03.Add(new Vector3(1015.57806f, -323.957092f, 66.4333725f));
                VectorList_04.Add(new Vector3(0f, -0f, -120.643372f));
                VectorList_03.Add(new Vector3(914.748047f, -262.143066f, 68.1364899f));
                VectorList_04.Add(new Vector3(0f, -0f, -127.401314f));
                VectorList_03.Add(new Vector3(811.748535f, -79.0462646f, 80.5091705f));
                VectorList_04.Add(new Vector3(0f, -0f, -123.653549f));
                VectorList_03.Add(new Vector3(1227.14636f, -287.862823f, 70.2237396f));
                VectorList_04.Add(new Vector3(-13.6332569f, 3.3957181f, 114.166794f));
                VectorList_03.Add(new Vector3(1000.89221f, 197.777679f, 81.0435867f));
                VectorList_04.Add(new Vector3(-1.76727188f, -2.86715841f, 141.590805f));
                VectorList_03.Add(new Vector3(1055.51917f, 468.039886f, 93.4352875f));
                VectorList_04.Add(new Vector3(-5.08103752f, -0.260001361f, -136.311127f));
                VectorList_03.Add(new Vector3(1295.70715f, 1094.79187f, 105.580887f));
                VectorList_04.Add(new Vector3(-0.234695315f, 1.13668478f, -174.084076f));
                VectorList_03.Add(new Vector3(1516.10547f, 890.901123f, 77.3401871f));
                VectorList_04.Add(new Vector3(-2.26464963f, -0.00916889962f, 151.113098f));
                VectorList_03.Add(new Vector3(1301.04773f, 612.860535f, 80.0765686f));
                VectorList_04.Add(new Vector3(-1.42576492f, 0.0238981768f, 133.435211f));
                VectorList_03.Add(new Vector3(2091.60449f, -589.134583f, 95.46698f));
                VectorList_04.Add(new Vector3(-0.0726985708f, 0.00304320408f, 128.667648f));
                VectorList_03.Add(new Vector3(1832.98132f, -792.189636f, 78.1664124f));
                VectorList_04.Add(new Vector3(-5.93284941f, -0.0519473478f, 126.223038f));
                VectorList_03.Add(new Vector3(1198.84131f, -1085.81726f, 39.9602127f));
                VectorList_04.Add(new Vector3(2.73375201f, 1.58684623f, 28.6088676f));
                VectorList_03.Add(new Vector3(1252.63867f, -1394.36389f, 34.5620117f));
                VectorList_04.Add(new Vector3(-0.0122969011f, 4.37820911f, 21.1016884f));
                VectorList_03.Add(new Vector3(1109.62219f, -1426.16846f, 35.6369057f));
                VectorList_04.Add(new Vector3(-0.437101334f, -2.63189459f, -89.531662f));
                VectorList_03.Add(new Vector3(1045.35205f, -981.198242f, 43.6283455f));
                VectorList_04.Add(new Vector3(2.30010319f, 2.66851473f, -73.3302307f));
                VectorList_03.Add(new Vector3(1196.18213f, -1446.73059f, 34.8982849f));
                VectorList_04.Add(new Vector3(0f, 0f, -88.6941299f));
                VectorList_03.Add(new Vector3(1257.31897f, -1229.6095f, 35.8189087f));
                VectorList_04.Add(new Vector3(1.05962145f, -2.85236931f, 5.13774633f));

                VectorList_05.Add(new Vector3(1144.993f, -634.9371f, 56.79569f));
                VectorList_05.Add(new Vector3(1146.292f, -649.1385f, 56.80311f));
                VectorList_05.Add(new Vector3(1144.897f, -664.7214f, 57.08257f));
                VectorList_05.Add(new Vector3(1134.253f, -665.8447f, 57.08257f));
                VectorList_05.Add(new Vector3(1113.844f, -649.0207f, 57.74995f));
                VectorList_05.Add(new Vector3(1109.608f, -632.2032f, 56.81606f));
                VectorList_05.Add(new Vector3(1165.73f, -640.44f, 62.27423f));
                VectorList_05.Add(new Vector3(1166.636f, -644.357f, 62.14673f));
            }
            else if (iLocationX == 5)
            {
                fMission_01 = 400.00f;
                vStartPos = new Vector3(2439.888f, 4419.493f, 1025.7415f); fStartDir = 124.8518f;
                vTarget_01 = new Vector3(872.162f, 2852.799f, 56.98187f);

                VectorList_03.Add(new Vector3(1112.76807f, 2823.00732f, 37.241539f));
                VectorList_04.Add(new Vector3(2.65541077f, -0.0972295851f, -2.0165174f));
                VectorList_03.Add(new Vector3(1021.42004f, 2679.39819f, 38.808342f));
                VectorList_04.Add(new Vector3(-0.575794935f, 6.83965588f, -3.0690093f));
                VectorList_03.Add(new Vector3(926.64447f, 2710.0144f, 39.8323593f));
                VectorList_04.Add(new Vector3(-0.0253110621f, -0.591971695f, 174.721359f));
                VectorList_03.Add(new Vector3(759.577637f, 2693.12207f, 39.3670921f));
                VectorList_04.Add(new Vector3(-0.45513007f, -0.50635618f, 90.6253281f));
                VectorList_03.Add(new Vector3(539.395691f, 2681.75195f, 41.7428093f));
                VectorList_04.Add(new Vector3(0f, 0f, -82.7792892f));
                VectorList_03.Add(new Vector3(519.291992f, 3054.50903f, 39.3013687f));
                VectorList_04.Add(new Vector3(-1.35355556f, -1.81640458f, -136.585815f));
                VectorList_03.Add(new Vector3(814.267883f, 3104.15625f, 41.2202721f));
                VectorList_04.Add(new Vector3(-5.19503212f, -3.52047157f, -97.1857758f));
                VectorList_03.Add(new Vector3(1024.12366f, 3009.14868f, 40.5629196f));
                VectorList_04.Add(new Vector3(-1.95919311f, 5.20101404f, -160.508255f));
                VectorList_03.Add(new Vector3(1154.29675f, 3175.05566f, 40.7868767f));
                VectorList_04.Add(new Vector3(2.34195113f, 1.6267606f, 93.6499634f));
                VectorList_03.Add(new Vector3(1565.50439f, 3088.29565f, 39.9761581f));
                VectorList_04.Add(new Vector3(-0.680675328f, -1.320889f, 119.212685f));
                VectorList_03.Add(new Vector3(1593.05725f, 2886.80127f, 56.6610069f));
                VectorList_04.Add(new Vector3(-0.00366343581f, -0.45068866f, 123.52623f));
                VectorList_03.Add(new Vector3(1718.36157f, 3065.1189f, 56.1258545f));
                VectorList_04.Add(new Vector3(-9.22774315f, 1.51729214f, 39.2216339f));
                VectorList_03.Add(new Vector3(1830.65332f, 3199.90356f, 44.4882355f));
                VectorList_04.Add(new Vector3(-1.95596611f, -1.86792898f, 116.012833f));
                VectorList_03.Add(new Vector3(1786.20496f, 3337.04858f, 40.4496193f));
                VectorList_04.Add(new Vector3(2.19841504f, 4.12127113f, -150.776276f));
                VectorList_03.Add(new Vector3(1703.35742f, 3482.05347f, 36.7172508f));
                VectorList_04.Add(new Vector3(2.04907417f, 1.57810223f, -152.290985f));
                VectorList_03.Add(new Vector3(1830.94592f, 3642.05322f, 34.240406f));
                VectorList_04.Add(new Vector3(-0.839130223f, -2.85634875f, 122.728249f));
                VectorList_03.Add(new Vector3(1950.29041f, 3741.18164f, 32.2453957f));
                VectorList_04.Add(new Vector3(0.0542543307f, -2.87524486f, -154.582809f));
                VectorList_03.Add(new Vector3(2061.12891f, 3426.73486f, 44.3040237f));
                VectorList_04.Add(new Vector3(1.05374122f, -0.476198107f, -179.945328f));
                VectorList_03.Add(new Vector3(1995.83508f, 3847.05371f, 32.3076019f));
                VectorList_04.Add(new Vector3(-0.652533352f, 1.90478945f, 30.3217449f));
                VectorList_03.Add(new Vector3(1855.15967f, 3930.53149f, 33.0033379f));
                VectorList_04.Add(new Vector3(0f, -0f, -166.915497f));
                VectorList_03.Add(new Vector3(1754.42346f, 3732.56079f, 34.089077f));
                VectorList_04.Add(new Vector3(-0.891025126f, 0.561151147f, -151.92717f));
                VectorList_03.Add(new Vector3(1675.77136f, 3535.7771f, 35.6052513f));
                VectorList_04.Add(new Vector3(-0.462651908f, 2.47747946f, -152.120621f));
                VectorList_03.Add(new Vector3(1686.47668f, 3632.16968f, 35.3143082f));
                VectorList_04.Add(new Vector3(0.858959377f, 0.537669778f, 120.821793f));
                VectorList_03.Add(new Vector3(2128.87549f, 3764.00146f, 32.941185f));
                VectorList_04.Add(new Vector3(0f, -0f, 118.36042f));
                VectorList_03.Add(new Vector3(2183.49512f, 3392.00073f, 45.356636f));
                VectorList_04.Add(new Vector3(-0.0785832182f, -1.42664444f, -159.030106f));
                VectorList_03.Add(new Vector3(2163.85767f, 3514.82764f, 45.1197739f));
                VectorList_04.Add(new Vector3(-0.606364608f, 4.50036716f, 61.9365273f));
                VectorList_03.Add(new Vector3(2042.6416f, 3293.30615f, 44.7109451f));
                VectorList_04.Add(new Vector3(-0.77263695f, 2.7112422f, 76.7969818f));
                VectorList_03.Add(new Vector3(1885.57495f, 3308.02954f, 43.2658272f));
                VectorList_04.Add(new Vector3(0f, -0f, 99.7826767f));
                VectorList_03.Add(new Vector3(1966.88098f, 3114.11816f, 46.5558205f));
                VectorList_04.Add(new Vector3(2.2839613f, 8.68070507f, 27.4541321f));
                VectorList_03.Add(new Vector3(1486.82813f, 3370.62524f, 35.9536781f));
                VectorList_04.Add(new Vector3(3.10809946f, -3.34223199f, 109.710831f));

                VectorList_05.Add(new Vector3(847.4106f, 2863.256f, 58.48529f));
                VectorList_05.Add(new Vector3(889.1376f, 2855.058f, 57.0004f));
                VectorList_05.Add(new Vector3(891.0823f, 2875.32f, 56.27547f));
                VectorList_05.Add(new Vector3(860.6051f, 2876.518f, 57.98239f));
                VectorList_05.Add(new Vector3(866.5287f, 2838.802f, 58.054f));
                VectorList_05.Add(new Vector3(842.7958f, 2844.654f, 58.77506f));
                VectorList_05.Add(new Vector3(882.1851f, 2863.635f, 56.59078f));
                VectorList_05.Add(new Vector3(871.5983f, 2877.702f, 56.85495f));
            }
            else
            {
                fMission_01 = 150.00f;
                vStartPos = new Vector3(125.0108f, 7804.23f, 1022.20254f); fStartDir = 180.6979f;
                vTarget_01 = new Vector3(-591.01f, 5287.489f, 70.21441f);

                VectorList_03.Add(new Vector3(-136.719666f, 6313.33643f, 30.6852398f));
                VectorList_04.Add(new Vector3(-0.202562809f, -3.69897676f, -135.357147f));
                VectorList_03.Add(new Vector3(-137.811646f, 6388.93799f, 30.6612949f));
                VectorList_04.Add(new Vector3(1.31085324f, -1.72574866f, 130.22377f));
                VectorList_03.Add(new Vector3(-32.2639847f, 6362.9668f, 30.6258488f));
                VectorList_04.Add(new Vector3(-0.0477754697f, 0.715203524f, 134.527451f));
                VectorList_03.Add(new Vector3(-193.223389f, 6460.18408f, 30.0988426f));
                VectorList_04.Add(new Vector3(1.39947355f, -1.0512749f, 148.750397f));
                VectorList_03.Add(new Vector3(-235.023697f, 6307.99756f, 30.7104759f));
                VectorList_04.Add(new Vector3(0.435115606f, -0.225370139f, 134.332413f));
                VectorList_03.Add(new Vector3(-286.357849f, 6203.17773f, 30.7224236f));
                VectorList_04.Add(new Vector3(-0.436585248f, 1.40521657f, -134.301422f));
                VectorList_03.Add(new Vector3(-418.566315f, 6202.72119f, 31.0649014f));
                VectorList_04.Add(new Vector3(-0.705557108f, 0.730944395f, -173.914688f));
                VectorList_03.Add(new Vector3(-439.440857f, 6094.07031f, 30.7960968f));
                VectorList_04.Add(new Vector3(-0.0232108757f, 0.907664657f, -175.529449f));
                VectorList_03.Add(new Vector3(-546.740112f, 5771.18164f, 35.2364578f));
                VectorList_04.Add(new Vector3(0.792770386f, 1.26600885f, 156.004959f));
                VectorList_03.Add(new Vector3(-724.950928f, 5798.79297f, 16.9191074f));
                VectorList_04.Add(new Vector3(0.940417945f, -2.25173998f, 155.147125f));
                VectorList_03.Add(new Vector3(-774.818787f, 5667.9624f, 22.6893749f));
                VectorList_04.Add(new Vector3(3.82960916f, 1.39724886f, 161.325928f));
                VectorList_03.Add(new Vector3(-652.735168f, 5502.28711f, 48.7729073f));
                VectorList_04.Add(new Vector3(11.1443157f, -0.0655769482f, -104.641518f));
                VectorList_03.Add(new Vector3(-715.282959f, 5432.98828f, 43.6404953f));
                VectorList_04.Add(new Vector3(6.28496408f, -1.02741933f, -118.998718f));
                VectorList_03.Add(new Vector3(-939.325073f, 5402.89209f, 37.7439766f));
                VectorList_04.Add(new Vector3(-2.58144569f, -1.35670042f, -94.0981827f));
                VectorList_03.Add(new Vector3(-884.982483f, 5310.64404f, 78.5250931f));
                VectorList_04.Add(new Vector3(-2.33589888f, -1.74536932f, -78.194191f));
                VectorList_03.Add(new Vector3(-737.425049f, 5186.5542f, 107.735413f));
                VectorList_04.Add(new Vector3(-16.6892033f, 1.16218948f, 0.796692729f));
                VectorList_03.Add(new Vector3(-634.996399f, 5091.13965f, 131.181763f));
                VectorList_04.Add(new Vector3(0f, 0f, 30.8269958f));
                VectorList_03.Add(new Vector3(-940.903198f, 5151.41162f, 158.647827f));
                VectorList_04.Add(new Vector3(-8.13166142f, -2.94254637f, -71.1649246f));
                VectorList_03.Add(new Vector3(-1037.03357f, 5334.53418f, 44.0614967f));
                VectorList_04.Add(new Vector3(-3.51631904f, 0.470099419f, -48.3000259f));
                VectorList_03.Add(new Vector3(-545.200806f, 5560.81885f, 59.8949852f));
                VectorList_04.Add(new Vector3(0.480304688f, -12.5392876f, 167.474335f));
                VectorList_03.Add(new Vector3(-471.589081f, 5551.75586f, 75.0832214f));
                VectorList_04.Add(new Vector3(9.41190815f, 12.3629694f, -177.389084f));
                VectorList_03.Add(new Vector3(-517.563721f, 5726.28809f, 46.2666855f));
                VectorList_04.Add(new Vector3(-0.587916553f, 4.42832422f, 167.234055f));
                VectorList_03.Add(new Vector3(-630.286804f, 6076.6333f, 8.11592579f));
                VectorList_04.Add(new Vector3(0.215343982f, -1.033283f, 144.101074f));
                VectorList_03.Add(new Vector3(-533.366882f, 6198.11523f, 7.34357357f));
                VectorList_04.Add(new Vector3(-2.36437201f, -0.926510394f, 166.485382f));
                VectorList_03.Add(new Vector3(-458.376526f, 6355.55273f, 11.783432f));
                VectorList_04.Add(new Vector3(-3.6740942f, 3.31865644f, 122.283752f));
                VectorList_03.Add(new Vector3(-334.592743f, 6341.72266f, 29.6717949f));
                VectorList_04.Add(new Vector3(-0.894815743f, -1.13732088f, 131.450623f));
                VectorList_03.Add(new Vector3(-331.014648f, 6267.03467f, 30.9012222f));
                VectorList_04.Add(new Vector3(0.206469104f, 1.04802144f, -137.87706f));
                VectorList_03.Add(new Vector3(-305.875732f, 6437.72461f, 12.4501009f));
                VectorList_04.Add(new Vector3(0.725406229f, 1.00950122f, 127.137367f));
                VectorList_03.Add(new Vector3(-148.333893f, 6522.42432f, 29.3302307f));
                VectorList_04.Add(new Vector3(-0.000211482387f, 0.446801722f, 140.741165f));
                VectorList_03.Add(new Vector3(75.6379623f, 6613.3877f, 31.2831478f));
                VectorList_04.Add(new Vector3(0f, 0f, 44.942276f));

                VectorList_05.Add(new Vector3(-589.8073f, 5320f, 70.51969f));
                VectorList_05.Add(new Vector3(-587.0214f, 5328.494f, 70.6096f));
                VectorList_05.Add(new Vector3(-569.1222f, 5321.714f, 70.18068f));
                VectorList_05.Add(new Vector3(-575.8088f, 5279.454f, 71.62724f));
                VectorList_05.Add(new Vector3(-564.2249f, 5270.697f, 70.42567f));
            }

            VectorList_01.Add(new Vector3(1.14f, -0.07f, 0.34f));
            VectorList_02.Add(new Vector3(-0.04f, 0.15f, -180.00f));

            VectorList_01.Add(new Vector3(0.22f, -0.07f, 0.34f));
            VectorList_02.Add(new Vector3(0.04f, 0.15f, -180.00f));

            VectorList_01.Add(new Vector3(-0.79f, -0.07f, 0.34f));
            VectorList_02.Add(new Vector3(0.00f, 0.15f, -180.00f));

            VehicleSpawn("BOMBUSHKA", vStartPos, fStartDir, true, true, false, false, 30, 0, 0, "", 1, false);

            BeOnOff.Add(false);//OutOfCorrona
            BeOnOff.Add(true);//Carweapp
            BeOnOff.Add(true);//OutaCar

            BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[23], "", 5000);
            bOnTheJob = true;
        }
        private void Deliverwho()
        {
            LogThis("Deliverwho");

            VectorList_01.Clear();
            VectorList_02.Clear();
            List<Vector3> Resturant = new List<Vector3>();
            List<Vector3> FubLand = new List<Vector3>();

            if (iLocationX == 1)
            {
                Resturant.Add(new Vector3(174.7219f, -2025.638f, 18.32789f));
                Resturant.Add(new Vector3(95.52487f, -1682.885f, 29.25154f));
                Resturant.Add(new Vector3(11.95004f, -1605.959f, 29.39591f));
                Resturant.Add(new Vector3(131.8358f, -1543.287f, 29.18998f));
                Resturant.Add(new Vector3(169.4836f, -1634.133f, 29.29169f));
                Resturant.Add(new Vector3(224.9469f, -1511.112f, 29.29166f));
                Resturant.Add(new Vector3(165.8172f, -1451.553f, 29.24164f));
                Resturant.Add(new Vector3(132.847f, -1462.134f, 29.35705f));
                Resturant.Add(new Vector3(-184.9118f, -1426.935f, 31.4732f));
                Resturant.Add(new Vector3(-163.603f, -1439.759f, 31.42305f));
                Resturant.Add(new Vector3(438.1306f, -1465.815f, 29.29185f));
                Resturant.Add(new Vector3(793.8766f, -735.6752f, 27.9632f));
                Resturant.Add(new Vector3(980.3463f, -1397.404f, 31.68541f));

                FubLand.Add(new Vector3(169.5345f, -2032.333f, 18.24882f));
                FubLand.Add(new Vector3(92.00637f, -1687.648f, 29.1028f));
                FubLand.Add(new Vector3(7.429781f, -1617.048f, 29.21888f));
                FubLand.Add(new Vector3(128.012f, -1551.289f, 29.22529f));
                FubLand.Add(new Vector3(163.2165f, -1624.577f, 29.27625f));
                FubLand.Add(new Vector3(232.6098f, -1518.179f, 29.14175f));
                FubLand.Add(new Vector3(161.2903f, -1460.658f, 29.14163f));
                FubLand.Add(new Vector3(117.1757f, -1455.064f, 29.26249f));
                FubLand.Add(new Vector3(-191.989f, -1421.288f, 31.38076f));
                FubLand.Add(new Vector3(-171.8224f, -1432.739f, 31.25053f));
                FubLand.Add(new Vector3(427.2476f, -1466.275f, 29.195f));
                FubLand.Add(new Vector3(783.4414f, -730.3138f, 27.85395f));
                FubLand.Add(new Vector3(985.1877f, -1409.768f, 31.28222f));

                Fubar_Vectors(iLocationX, 12, false, false);
            }
            else if (iLocationX == 2)
            {
                Resturant.Add(new Vector3(-1182.345f, -1410.692f, 4.50316f));
                Resturant.Add(new Vector3(-1171.482f, -1434.788f, 4.429714f));
                Resturant.Add(new Vector3(-1296.938f, -1387.891f, 4.547965f));
                Resturant.Add(new Vector3(-1039.25f, -1353.112f, 5.553197f));
                Resturant.Add(new Vector3(-861.1603f, -1140.684f, 7.192539f));
                Resturant.Add(new Vector3(-664.447f, -1217.739f, 11.81289f));
                Resturant.Add(new Vector3(-1168.547f, -1267.424f, 6.196338f));
                Resturant.Add(new Vector3(-1199.633f, -1162.747f, 7.696858f));
                Resturant.Add(new Vector3(-1204.714f, -1146.318f, 7.6997f));
                Resturant.Add(new Vector3(-1221.513f, -1095.832f, 8.119779f));
                Resturant.Add(new Vector3(-1247.383f, -1105.522f, 8.111277f));
                Resturant.Add(new Vector3(-1256.258f, -1079.282f, 8.416458f));
                Resturant.Add(new Vector3(-1271.639f, -1200.768f, 5.366248f));
                Resturant.Add(new Vector3(-1356.783f, -791.7081f, 20.24218f));
                Resturant.Add(new Vector3(-1392.222f, -732.0483f, 24.52657f));
                Resturant.Add(new Vector3(-1420.753f, -709.4023f, 24.60311f));
                Resturant.Add(new Vector3(-1258.993f, -760.4215f, 20.36723f));
                Resturant.Add(new Vector3(-1198.172f, -791.6373f, 16.36787f));
                Resturant.Add(new Vector3(-1222.636f, -807.1538f, 16.62217f));
                Resturant.Add(new Vector3(-1183.256f, -883.866f, 13.75003f));
                Resturant.Add(new Vector3(-1209.567f, -823.78f, 15.4547f));
                Resturant.Add(new Vector3(-701.1832f, -883.6132f, 23.7861f));
                Resturant.Add(new Vector3(-655.4609f, -880.138f, 24.66836f));
                Resturant.Add(new Vector3(-654.3143f, -885.2839f, 24.67649f));
                Resturant.Add(new Vector3(-661.2089f, -900.5251f, 24.61339f));
                Resturant.Add(new Vector3(-661.3875f, -907.5388f, 24.60414f));
                Resturant.Add(new Vector3(-657.0827f, -678.7854f, 31.44188f));
                Resturant.Add(new Vector3(-798.1232f, -632.4376f, 29.02699f));
                Resturant.Add(new Vector3(-210.6713f, -787.3541f, 30.45358f));
                Resturant.Add(new Vector3(-263.4384f, -903.8679f, 32.3108f));
                Resturant.Add(new Vector3(-49.93354f, -1059.001f, 27.80145f));
                Resturant.Add(new Vector3(43.76184f, -998.3373f, 29.33635f));
                Resturant.Add(new Vector3(354.3358f, -1028.714f, 29.33105f));
                Resturant.Add(new Vector3(370.0248f, -1028.524f, 29.3334f));
                Resturant.Add(new Vector3(386.6402f, -1010.925f, 29.41794f));
                Resturant.Add(new Vector3(287.1616f, -963.2271f, 29.41863f));
                Resturant.Add(new Vector3(282.2809f, -800.7978f, 29.3168f));
                Resturant.Add(new Vector3(55.09104f, -798.9953f, 31.58579f));
                Resturant.Add(new Vector3(386.1157f, -325.8739f, 46.86657f));
                Resturant.Add(new Vector3(376.0016f, -335.8715f, 48.16139f));
                Resturant.Add(new Vector3(538.4419f, 101.4782f, 96.52731f));
                Resturant.Add(new Vector3(443.7397f, 134.5928f, 100.006f));
                Resturant.Add(new Vector3(396.9903f, 176.0687f, 103.8559f));
                Resturant.Add(new Vector3(81.21592f, 274.5881f, 110.2102f));
                Resturant.Add(new Vector3(100.8242f, 209.464f, 107.968f));
                Resturant.Add(new Vector3(220.1626f, 304.9125f, 105.5794f));
                Resturant.Add(new Vector3(229.5502f, -22.64144f, 74.98737f));
                Resturant.Add(new Vector3(89.07203f, -222.0428f, 54.63671f));
                Resturant.Add(new Vector3(-13.70352f, -110.492f, 56.83508f));
                Resturant.Add(new Vector3(-212.6554f, -40.60809f, 50.06713f));
                Resturant.Add(new Vector3(-240.9052f, -346.1793f, 30.02625f));
                Resturant.Add(new Vector3(-137.7486f, -257.1517f, 43.59502f));
                Resturant.Add(new Vector3(-132.4608f, -247.2119f, 44.25613f));
                Resturant.Add(new Vector3(-12.96229f, 239.6362f, 109.5535f));
                Resturant.Add(new Vector3(-84.31174f, 234.654f, 100.5634f));
                Resturant.Add(new Vector3(-242.2127f, 279.3671f, 92.03849f));
                Resturant.Add(new Vector3(-361.1803f, 275.4205f, 86.42198f));
                Resturant.Add(new Vector3(-718.9736f, 256.4108f, 79.86425f));
                Resturant.Add(new Vector3(-509.3947f, -22.40191f, 45.60899f));
                Resturant.Add(new Vector3(-628.6705f, -300.51f, 35.34404f));

                FubLand.Add(new Vector3(-1179.461f, -1417.663f, 4.48194f));
                FubLand.Add(new Vector3(-1173.688f, -1429.02f, 4.375045f));
                FubLand.Add(new Vector3(-1287.082f, -1396.21f, 4.556036f));
                FubLand.Add(new Vector3(-1048.875f, -1345.157f, 5.425283f));
                FubLand.Add(new Vector3(-847.8644f, -1140.11f, 6.691577f));
                FubLand.Add(new Vector3(-668.9949f, -1208.192f, 10.61222f));
                FubLand.Add(new Vector3(-1180.301f, -1272.366f, 5.925337f));
                FubLand.Add(new Vector3(-1208.884f, -1164.633f, 7.706399f));
                FubLand.Add(new Vector3(-1213.963f, -1149.219f, 7.738284f));
                FubLand.Add(new Vector3(-1228.804f, -1098.198f, 8.092859f));
                FubLand.Add(new Vector3(-1240.678f, -1101.675f, 8.063031f));
                FubLand.Add(new Vector3(-1252.023f, -1072.697f, 8.310191f));
                FubLand.Add(new Vector3(-1283.764f, -1210.524f, 4.703927f));
                FubLand.Add(new Vector3(-1361.547f, -801.8234f, 19.23226f));
                FubLand.Add(new Vector3(-1401.446f, -725.8313f, 23.94372f));
                FubLand.Add(new Vector3(-1425.87f, -724.8497f, 23.39538f));
                FubLand.Add(new Vector3(-1186.766f, -833.0563f, 14.29909f));
                FubLand.Add(new Vector3(-1186.028f, -828.6629f, 14.35529f));
                FubLand.Add(new Vector3(-1188.586f, -828.064f, 14.37008f));
                FubLand.Add(new Vector3(-1181.856f, -876.3614f, 13.89946f));
                FubLand.Add(new Vector3(-1186.55f, -830.0739f, 14.37216f));
                FubLand.Add(new Vector3(-708.1152f, -873.343f, 23.49054f));
                FubLand.Add(new Vector3(-647.22f, -878.0816f, 24.56091f));
                FubLand.Add(new Vector3(-646.96f, -884.6307f, 24.73709f));
                FubLand.Add(new Vector3(-645.7163f, -900.4319f, 24.67939f));
                FubLand.Add(new Vector3(-647.1793f, -910.3851f, 24.11437f));
                FubLand.Add(new Vector3(-646.274f, -669.3174f, 31.66708f));
                FubLand.Add(new Vector3(-798.2741f, -647.712f, 28.48053f));
                FubLand.Add(new Vector3(-163.7493f, -799.0621f, 31.73997f));
                FubLand.Add(new Vector3(-279.1348f, -897.7268f, 31.08061f));
                FubLand.Add(new Vector3(-61.45641f, -1061.149f, 27.52783f));
                FubLand.Add(new Vector3(49.14608f, -991.3887f, 29.29308f));
                FubLand.Add(new Vector3(359.3452f, -1038.918f, 29.1848f));
                FubLand.Add(new Vector3(369.7517f, -1037.381f, 29.22819f));
                FubLand.Add(new Vector3(395.1532f, -1011.348f, 29.35005f));
                FubLand.Add(new Vector3(287.3452f, -954.9193f, 29.39147f));
                FubLand.Add(new Vector3(291.5555f, -815.7929f, 29.25587f));
                FubLand.Add(new Vector3(64.61053f, -791.5984f, 31.60077f));
                FubLand.Add(new Vector3(369.7381f, -390.0443f, 45.99895f));
                FubLand.Add(new Vector3(405.622f, -382.371f, 46.85032f));
                FubLand.Add(new Vector3(539.3729f, 86.12935f, 96.23695f));
                FubLand.Add(new Vector3(440.4284f, 118.9001f, 99.80352f));
                FubLand.Add(new Vector3(383.6215f, 179.9098f, 102.9699f));
                FubLand.Add(new Vector3(77.19465f, 252.0652f, 109.135f));
                FubLand.Add(new Vector3(105.9912f, 220.8545f, 107.8025f));
                FubLand.Add(new Vector3(231.5567f, 301.654f, 105.5196f));
                FubLand.Add(new Vector3(225.6819f, -34.17041f, 69.71882f));
                FubLand.Add(new Vector3(90.85313f, -211.9513f, 54.49149f));
                FubLand.Add(new Vector3(-17.49179f, -122.6441f, 56.91018f));
                FubLand.Add(new Vector3(-212.371f, -51.12828f, 50.21075f));
                FubLand.Add(new Vector3(-255.7206f, -341.936f, 29.87149f));
                FubLand.Add(new Vector3(-128.9525f, -259.3884f, 43.36798f));
                FubLand.Add(new Vector3(-123.688f, -248.4262f, 44.3778f));
                FubLand.Add(new Vector3(-25.84668f, 253.0207f, 107.3759f));
                FubLand.Add(new Vector3(-85.9645f, 247.0087f, 100.1715f));
                FubLand.Add(new Vector3(-248.5368f, 272.2939f, 91.88966f));
                FubLand.Add(new Vector3(-358.0089f, 267.8432f, 84.83607f));
                FubLand.Add(new Vector3(-717.1361f, 248.5179f, 79.69215f));
                FubLand.Add(new Vector3(-524.2219f, -10.71935f, 44.32103f));
                FubLand.Add(new Vector3(-642.8713f, -308.3486f, 35.03686f));

                int iBe = 13;
                if (RandInt(0, 20) > 10)
                    iBe = 7;
                Fubar_Vectors(iLocationX, iBe, false, false);
            }
            else if (iLocationX == 3)
            {
                Resturant.Add(new Vector3(-3047.475f, 615.5475f, 7.307231f));
                Resturant.Add(new Vector3(-2963.698f, 432.1267f, 15.27607f));
                Resturant.Add(new Vector3(-3282.008f, 958.4794f, 8.34717f));
                Resturant.Add(new Vector3(-2189.884f, -399.882f, 13.28392f));
                Resturant.Add(new Vector3(-1546.786f, -467.1021f, 36.18938f));
                Resturant.Add(new Vector3(-1534.953f, -453.5941f, 35.92408f));
                Resturant.Add(new Vector3(-1539.451f, -427.6065f, 35.59195f));
                Resturant.Add(new Vector3(-1535.214f, -422.3969f, 35.59195f));
                Resturant.Add(new Vector3(-1552.775f, -440.0368f, 40.51905f));
                Resturant.Add(new Vector3(-1229.987f, -285.7762f, 37.73454f));
                Resturant.Add(new Vector3(-1250.297f, -295.308f, 37.35014f));
                Resturant.Add(new Vector3(-1470.963f, -135.1681f, 51.08985f));
                Resturant.Add(new Vector3(-1497.667f, -225.5246f, 51.31511f));

                FubLand.Add(new Vector3(-3041.182f, 605.6071f, 7.488614f));
                FubLand.Add(new Vector3(-2977.851f, 431.5735f, 15.03917f));
                FubLand.Add(new Vector3(-3236.36f, 967.8706f, 12.99567f));
                FubLand.Add(new Vector3(-2176.883f, -405.118f, 13.19032f));
                FubLand.Add(new Vector3(-1540.92f, -476.1146f, 35.37147f));
                FubLand.Add(new Vector3(-1522.685f, -444.666f, 35.442f));
                FubLand.Add(new Vector3(-1528.531f, -435.227f, 35.4421f));
                FubLand.Add(new Vector3(-1524.654f, -430.7524f, 35.44213f));
                FubLand.Add(new Vector3(-1527.931f, -436.151f, 35.44211f));
                FubLand.Add(new Vector3(-1218.399f, -289.5798f, 37.74344f));
                FubLand.Add(new Vector3(-1245.247f, -303.3829f, 37.30605f));
                FubLand.Add(new Vector3(-1463.507f, -128.2197f, 50.64071f));
                FubLand.Add(new Vector3(-1501.431f, -236.1465f, 50.61327f));

                Fubar_Vectors(iLocationX, 0, true, false);
            }
            else if (iLocationX == 4)
            {
                Resturant.Add(new Vector3(1092.837f, -363.5387f, 67.0603f));
                Resturant.Add(new Vector3(1234.103f, -354.5481f, 69.08221f));
                Resturant.Add(new Vector3(1198.899f, -501.6474f, 65.24533f));
                Resturant.Add(new Vector3(1139.908f, -464.4051f, 66.84972f));
                Resturant.Add(new Vector3(1139.041f, -962.4807f, 47.53018f));
                Resturant.Add(new Vector3(2581.265f, 464.3506f, 108.619f));
                Resturant.Add(new Vector3(2562.228f, 2591.034f, 38.08298f));

                FubLand.Add(new Vector3(1089.419f, -370.4643f, 66.96081f));
                FubLand.Add(new Vector3(1222.596f, -356.2746f, 69.01031f));
                FubLand.Add(new Vector3(1192.054f, -505.9784f, 65.04221f));
                FubLand.Add(new Vector3(1150.051f, -467.945f, 66.54852f));
                FubLand.Add(new Vector3(1143.587f, -957.1385f, 47.63154f));
                FubLand.Add(new Vector3(2581.322f, 456.7094f, 108.4555f));
                FubLand.Add(new Vector3(2556.782f, 2618.71f, 37.94498f));

                int iBe = 4;
                if (RandInt(0, 20) > 10)
                    iBe = 1;
                Fubar_Vectors(iLocationX, iBe, false, false);
            }
            else if (iLocationX == 5)
            {
                Resturant.Add(new Vector3(649.7606f, 2728.31f, 41.99591f));
                Resturant.Add(new Vector3(1039.429f, 2664.549f, 39.55108f));
                Resturant.Add(new Vector3(958.686f, 3618.934f, 32.67379f));
                Resturant.Add(new Vector3(1952.556f, 3841.769f, 32.17755f));
                Resturant.Add(new Vector3(1907.373f, 3709.889f, 32.71615f));
                Resturant.Add(new Vector3(2566.965f, 4274.169f, 41.98906f));

                FubLand.Add(new Vector3(659.7086f, 2730.696f, 41.95459f));
                FubLand.Add(new Vector3(1052.179f, 2671.617f, 39.55115f));
                FubLand.Add(new Vector3(944.1627f, 3617.014f, 32.57851f));
                FubLand.Add(new Vector3(1960.693f, 3843.757f, 31.99647f));
                FubLand.Add(new Vector3(1910.333f, 3704.47f, 32.75637f));
                FubLand.Add(new Vector3(2575.506f, 4275.078f, 41.80929f));
                int iBe = 4;
                if (RandInt(0, 20) > 10)
                    iBe = 0;
                Fubar_Vectors(iLocationX, iBe, false, false);
            }
            else
            {
                Resturant.Add(new Vector3(-302.3239f, 6212.022f, 31.41476f));
                Resturant.Add(new Vector3(-123.1747f, 6389.583f, 32.17769f));
                Resturant.Add(new Vector3(-40.03239f, 6471.573f, 31.5014f));
                Resturant.Add(new Vector3(1591.726f, 6450.412f, 25.31714f));
                Resturant.Add(new Vector3(-2193.437f, 4290.155f, 49.17433f));

                FubLand.Add(new Vector3(-297.7297f, 6216.836f, 31.39065f));
                FubLand.Add(new Vector3(-121.8505f, 6401.77f, 31.30724f));
                FubLand.Add(new Vector3(-51.75516f, 6475.325f, 31.25928f));
                FubLand.Add(new Vector3(1589.408f, 6443.447f, 25.16729f));
                FubLand.Add(new Vector3(-2211.015f, 4279.377f, 47.8907f));

                Fubar_Vectors(iLocationX, 3, false, false);
            }

            int iPosy = RandInt(0, Resturant.Count - 1);
            vTarget_01 = Resturant[iPosy];
            vFuMiss = FubLand[iPosy];
            vTarget_01.Z -= 1.00f;

            AddTarget(vTarget_01, true, true, 1.00f, false, 408, MyLang.Maptext[121]);
            TheYellowCorona(vTarget_01, 1.00F);

            int iDesto = RandInt(0, VectorList_02.Count - 1);
            vTarget_02 = VectorList_02[iDesto];
            vTarget_02.Z -= 1.00f;

            float fPay = vTarget_01.DistanceTo(vTarget_02) / 10.00f;
            iCashBouns = (int)fPay;

            vTarget_03 = VectorList_01[iDesto];
            BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[24], "", 5000);
            bOnTheJob = true;
        }
        private void TheCayoMissions()
        {
            LogThis("TheCayoMissions");

            if (iJobType == 101)
            {
                Packages();
            }      //Packages
            else if (iJobType == 102)
            {
                VTBTimerPool.Add(BtSlideBar);
                BtSlideBar.Label = "" + MyLang.Othertext[17] + "";
                ttTextBar_01.Label = "" + MyLang.Othertext[13] + "";
                iTime_01.Clear();
                BeOnOff.Clear();

                iTime_01.Add(0);
                iTime_01.Add(0);
                iTime_01.Add(0);
                iTime_01.Add(0);
                iTime_01.Add(0);

                iCashReward = 0;

                int iRandm = FindRandom(34, 1, 3);

                fList_01.Clear();
                fList_02.Clear();
                VectorList_01.Clear();
                VectorList_02.Clear();
                VectorList_03.Clear();

                if (iRandm == 1)
                {
                    VectorList_01.Add(new Vector3(4961.72f, -4823.566f, 5.969322f));
                    VectorList_01.Add(new Vector3(4968.433f, -4710.264f, 8.319826f));
                    VectorList_01.Add(new Vector3(5005.988f, -4715.379f, 10.74354f));
                    VectorList_01.Add(new Vector3(5014.907f, -4768.094f, 17.62075f));
                    VectorList_01.Add(new Vector3(5049.153f, -4835.865f, 19.09438f));
                    VectorList_01.Add(new Vector3(5107.04f, -4888.757f, 15.08302f));
                    VectorList_01.Add(new Vector3(5105.134f, -4946.161f, 17.234f));
                    VectorList_01.Add(new Vector3(5132.717f, -4944.722f, 14.9087f));
                    VectorList_01.Add(new Vector3(5139.033f, -4949.664f, 14.52732f));
                    VectorList_01.Add(new Vector3(5138.216f, -4956.092f, 14.51503f));
                    VectorList_01.Add(new Vector3(5148.449f, -4964.634f, 13.98844f));
                    VectorList_01.Add(new Vector3(5150.176f, -4973.736f, 13.15734f));
                    VectorList_01.Add(new Vector3(5198.056f, -5050.193f, 12.95233f));

                    vTarget_02 = new Vector3(4967.81f, -4668.752f, 11.41602f);

                    iCashReward = RandInt(500, 550);
                }
                else if (iRandm == 2)
                {
                    VectorList_01.Add(new Vector3(5007.773f, -4926.326f, 9.441853f));
                    VectorList_01.Add(new Vector3(5052.629f, -4910.178f, 15.26108f));
                    VectorList_01.Add(new Vector3(5071.191f, -4920.844f, 17.56548f));
                    VectorList_01.Add(new Vector3(5112.578f, -4949.875f, 16.03908f));
                    VectorList_01.Add(new Vector3(5132.667f, -4944.529f, 14.91733f));
                    VectorList_01.Add(new Vector3(5138.29f, -4948.303f, 14.5717f));
                    VectorList_01.Add(new Vector3(5139.203f, -4956.247f, 14.48044f));
                    VectorList_01.Add(new Vector3(5148.311f, -4964.622f, 13.99567f));
                    VectorList_01.Add(new Vector3(5149.051f, -4974.38f, 13.15724f));
                    VectorList_01.Add(new Vector3(5159.524f, -5001.336f, 10.62832f));
                    VectorList_01.Add(new Vector3(5166.199f, -5003.822f, 11.54279f));
                    VectorList_01.Add(new Vector3(5195.089f, -5049.757f, 12.72364f));

                    vTarget_02 = new Vector3(5022.979f, -4871.323f, 14.67111f);

                    iCashReward = RandInt(500, 550);
                }
                else
                {
                    VectorList_01.Add(new Vector3(4511.16f, -4517.847f, 3.587658f));
                    VectorList_01.Add(new Vector3(4515.872f, -4527.401f, 3.652275f));
                    VectorList_01.Add(new Vector3(4543.808f, -4535.727f, 5.535728f));
                    VectorList_01.Add(new Vector3(4629.189f, -4544.506f, 13.17307f));
                    VectorList_01.Add(new Vector3(4725.248f, -4534.113f, 25.95804f));
                    VectorList_01.Add(new Vector3(4803.674f, -4562.749f, 22.14445f));
                    VectorList_01.Add(new Vector3(4908.089f, -4615.26f, 14.42918f));
                    VectorList_01.Add(new Vector3(4951.479f, -4657.686f, 12.37331f));
                    VectorList_01.Add(new Vector3(4964.315f, -4697.906f, 8.262118f));
                    VectorList_01.Add(new Vector3(4999.572f, -4713.235f, 10.152f));
                    VectorList_01.Add(new Vector3(5015.257f, -4751.375f, 14.55854f));
                    VectorList_01.Add(new Vector3(5035.354f, -4785.92f, 17.62213f));
                    VectorList_01.Add(new Vector3(5060.729f, -4837.399f, 18.13685f));
                    VectorList_01.Add(new Vector3(5074.84f, -4883.288f, 16.71885f));
                    VectorList_01.Add(new Vector3(5098.159f, -4917.585f, 16.05454f));
                    VectorList_01.Add(new Vector3(5108.796f, -4947.615f, 15.96881f));
                    VectorList_01.Add(new Vector3(5131.853f, -4944.349f, 14.43147f));
                    VectorList_01.Add(new Vector3(5138.741f, -4949.731f, 14.01434f));
                    VectorList_01.Add(new Vector3(5138.146f, -4955.658f, 13.98357f));
                    VectorList_01.Add(new Vector3(5148.977f, -4964.736f, 13.43088f));
                    VectorList_01.Add(new Vector3(5148.332f, -4978.535f, 12.0283f));
                    VectorList_01.Add(new Vector3(5158.495f, -4999.322f, 10.34334f));
                    VectorList_01.Add(new Vector3(5166.982f, -5004.785f, 11.12053f));
                    VectorList_01.Add(new Vector3(5192.109f, -5050.282f, 11.95023f));

                    vTarget_02 = new Vector3(4523.574f, -4614.735f, 11.39894f);

                    iCashReward = RandInt(950, 1000);
                }

                iRandm = RandInt(1, 5);
                if (iRandm == 1)
                {
                    VectorList_02.Add(new Vector3(5233.71f, -5055.481f, 14.41616f));
                    VectorList_02.Add(new Vector3(5269.771f, -5102.388f, 13.13458f));
                    VectorList_02.Add(new Vector3(5278.364f, -5125.787f, 13.75129f));
                    VectorList_02.Add(new Vector3(5287.151f, -5145.533f, 22.36536f));
                    VectorList_02.Add(new Vector3(5308.764f, -5180.225f, 29.13452f));
                    VectorList_02.Add(new Vector3(5346.964f, -5218.778f, 30.71546f));
                    VectorList_02.Add(new Vector3(5333.356f, -5267.576f, 32.84147f));
                    fMission_01 = 133.7113f;

                    iCashReward += RandInt(500, 550);
                }
                else if (iRandm == 2)
                {
                    VectorList_02.Add(new Vector3(5194.607f, -5067.506f, 11.8923f));
                    VectorList_02.Add(new Vector3(5174.759f, -5130.188f, 2.333519f));
                    VectorList_02.Add(new Vector3(5186.785f, -5133.329f, 3.339868f));
                    fMission_01 = 249.0917f;

                    iCashReward += RandInt(200, 250);
                }
                else if (iRandm == 3)
                {
                    VectorList_02.Add(new Vector3(5203.195f, -5075.889f, 10.8781f));
                    VectorList_02.Add(new Vector3(5224.331f, -5128.517f, 6.7265f));
                    VectorList_02.Add(new Vector3(5198.844f, -5199.504f, 12.17268f));
                    VectorList_02.Add(new Vector3(5158.8f, -5215.011f, 5.527559f));
                    VectorList_02.Add(new Vector3(5143.752f, -5271.163f, 8.674473f));
                    VectorList_02.Add(new Vector3(5096.204f, -5284.654f, 5.629894f));
                    VectorList_02.Add(new Vector3(5016.943f, -5179.651f, 1.995464f));
                    VectorList_02.Add(new Vector3(4995.838f, -5182.11f, 1.955377f));

                    VectorList_02.Add(new Vector3(4991.229f, -5169.521f, 2.579536f));
                    VectorList_02.Add(new Vector3(4975.339f, -5150.584f, 2.530874f));
                    VectorList_02.Add(new Vector3(4969.555f, -5123.96f, 2.733868f));
                    VectorList_02.Add(new Vector3(4959.88f, -5114.331f, 2.909248f));
                    fMission_01 = 342.8236f;

                    iCashReward += RandInt(700, 850);
                }
                else if (iRandm == 4)
                {
                    VectorList_02.Add(new Vector3(5203.195f, -5075.889f, 10.8781f));
                    VectorList_02.Add(new Vector3(5224.331f, -5128.517f, 6.7265f));
                    VectorList_02.Add(new Vector3(5198.844f, -5199.504f, 12.17268f));
                    VectorList_02.Add(new Vector3(5158.8f, -5215.011f, 5.527559f));
                    VectorList_02.Add(new Vector3(5143.752f, -5271.163f, 8.674473f));
                    VectorList_02.Add(new Vector3(5096.204f, -5284.654f, 5.629894f));
                    VectorList_02.Add(new Vector3(5016.943f, -5179.651f, 1.995464f));
                    VectorList_02.Add(new Vector3(4995.838f, -5182.11f, 1.955377f));

                    VectorList_02.Add(new Vector3(4974.74f, -5198.996f, 2.475773f));
                    VectorList_02.Add(new Vector3(4943.943f, -5217.656f, 2.516457f));
                    VectorList_02.Add(new Vector3(4922.802f, -5216.061f, 2.440305f));
                    VectorList_02.Add(new Vector3(4914.682f, -5227.528f, 2.52028f));
                    VectorList_02.Add(new Vector3(4920.186f, -5238.085f, 2.522556f));
                    fMission_01 = 214.1936f;

                    iCashReward += RandInt(700, 850);
                }
                else
                {
                    VectorList_02.Add(new Vector3(5203.195f, -5075.889f, 10.8781f));
                    VectorList_02.Add(new Vector3(5224.331f, -5128.517f, 6.7265f));
                    VectorList_02.Add(new Vector3(5198.844f, -5199.504f, 12.17268f));
                    VectorList_02.Add(new Vector3(5158.8f, -5215.011f, 5.527559f));
                    VectorList_02.Add(new Vector3(5143.752f, -5271.163f, 8.674473f));
                    VectorList_02.Add(new Vector3(5096.204f, -5284.654f, 5.629894f));
                    VectorList_02.Add(new Vector3(5016.943f, -5179.651f, 1.995464f));
                    VectorList_02.Add(new Vector3(4995.838f, -5182.11f, 1.955377f));

                    VectorList_02.Add(new Vector3(4995.05f, -5167.059f, 2.694044f));
                    fMission_01 = 295.8683f;

                    iCashReward += RandInt(500, 550);
                }

                VectorList_03.Add(new Vector3(5115.762f, -5404.809f, 21.81437f)); fList_01.Add(66.24686f);
                VectorList_03.Add(new Vector3(5113.277f, -5399.584f, 22.52935f)); fList_01.Add(152.3342f);
                VectorList_03.Add(new Vector3(5106.564f, -5406.225f, 21.23528f)); fList_01.Add(284.2396f);

                vTarget_05 = new Vector3(5110.793f, -5404.554f, 23.40375f);//the henging iron
                BeOnOff.Add(false);// Sneaky        0   
                BeOnOff.Add(false);// bFlashWarn    1  
                BeOnOff.Add(false);// bTheyKnowU    2  
                BeOnOff.Add(false);// bDoOnce       3    
                fList_02.Add(0.00f);
                fList_02.Add(0.00f);

                BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[7], "", 5000);
            }       //Follow
            else if (iJobType == 103)
            {
                ControlSelect(2, true);
            }       //Raceist
            else if (iJobType == 104)
            {
                HitMan();
            }       //Assassination
            else if (iJobType == 105)
            {
                fList_01.Clear();
                fList_02.Clear();
                iTime_01.Clear();
                iList_01.Clear();
                VectorList_01.Clear();
                VectorList_02.Clear();
                VectorList_03.Clear();

                vTarget_01 = new Vector3(4887.682f, -5747.711f, 116.7361f);
                fphdirect = 331.936f;
                bPedCanFly = false;
                iMissionVar_02 = FindRandom(35, 1, 3);
                iList_01.Add(176);

                if (iMissionVar_02 == 1)
                {
                    VectorList_01.Add(new Vector3(5083.081f, -5429.721f, 91.19279f)); fList_01.Add(327.6324f);
                    VectorList_01.Add(new Vector3(5111.587f, -5172.778f, 82.07673f)); fList_01.Add(39.21318f);
                    VectorList_01.Add(new Vector3(5020.269f, -5066.57f, 58.27757f)); fList_01.Add(78.82922f);
                    VectorList_01.Add(new Vector3(4878.171f, -5074.571f, 44.4136f)); fList_01.Add(149.9168f);

                    VectorList_02.Add(new Vector3(4977.092f, -5234.123f, 5.362415f));
                    VectorList_02.Add(new Vector3(4954.453f, -5214.639f, 2.526253f));
                    VectorList_02.Add(new Vector3(4981.531f, -5194.562f, 2.431887f));
                    VectorList_02.Add(new Vector3(4985.519f, -5177.848f, 2.494078f));
                    VectorList_02.Add(new Vector3(4968.461f, -5169.152f, 1.989646f));

                    VectorList_03.Add(new Vector3(4919.874f, -5150.256f, 0.8445827f)); fList_02.Add(68.7543f);
                    VectorList_03.Add(new Vector3(4862.507f, -5147.771f, 0.2120789f)); fList_02.Add(96.23953f);
                    VectorList_03.Add(new Vector3(4791.742f, -5156.351f, 0.9501548f)); fList_02.Add(96.89198f);
                    VectorList_03.Add(new Vector3(4616.667f, -5183.412f, 0.3926994f)); fList_02.Add(98.49694f);
                    VectorList_03.Add(new Vector3(4308.156f, -5304.354f, 0.7222227f)); fList_02.Add(124.8904f);

                    sMissionVar_01 = MyLang.Othertext[20];
                    iList_01[0] = 176;
                }
                else if (iMissionVar_02 == 2)
                {
                    VectorList_01.Add(new Vector3(5133.882f, -4887.601f, 92.11411f)); fList_01.Add(317.4302f);
                    VectorList_01.Add(new Vector3(5259.402f, -4663.197f, 84.42941f)); fList_01.Add(28.20848f);
                    VectorList_01.Add(new Vector3(5126.226f, -4516.298f, 58.03263f)); fList_01.Add(103.8986f);
                    VectorList_01.Add(new Vector3(4972.652f, -4673.413f, 45.36294f)); fList_01.Add(212.9373f);

                    VectorList_02.Add(new Vector3(5040.295f, -4701.252f, 7.407453f));
                    VectorList_02.Add(new Vector3(5061.636f, -4641.003f, 2.585966f));
                    VectorList_02.Add(new Vector3(5065.153f, -4629.664f, 2.471225f));
                    VectorList_02.Add(new Vector3(5080.699f, -4634.967f, 1.898226f));

                    VectorList_03.Add(new Vector3(5110.091f, -4645.685f, 0.1159754f)); fList_02.Add(249.2792f);
                    VectorList_03.Add(new Vector3(5130.176f, -4663.891f, 0.1220539f)); fList_02.Add(208.313f);
                    VectorList_03.Add(new Vector3(5171.159f, -4739.768f, 1.031728f)); fList_02.Add(206.4276f);
                    VectorList_03.Add(new Vector3(5209.934f, -4783.289f, 0.0811865f)); fList_02.Add(266.0689f);
                    VectorList_03.Add(new Vector3(5379.867f, -4791.873f, 1.245439f)); fList_02.Add(267.1191f);
                    VectorList_03.Add(new Vector3(5642.272f, -4776.828f, 1.898507f)); fList_02.Add(278.6447f);

                    sMissionVar_01 = MyLang.Othertext[21];
                    iList_01[0] = 177;
                }
                else
                {
                    VectorList_01.Add(new Vector3(4566.874f, -5000.102f, 77.30904f)); fList_01.Add(12.97973f);

                    VectorList_02.Add(new Vector3(4614.354f, -4531.724f, 12.35623f));
                    VectorList_02.Add(new Vector3(4582.088f, -4511.286f, 10.25273f));
                    VectorList_02.Add(new Vector3(4543.866f, -4505.861f, 4.452652f));
                    VectorList_02.Add(new Vector3(4485.055f, -4498.207f, 4.189588f));

                    vTarget_02 = new Vector3(2702.896f, -5152.048f, 410.2933f);
                    bPedCanFly = true;

                    sMissionVar_01 = MyLang.Othertext[22];
                    iList_01[0] = 178;
                }

                iTime_01.Add(0);
                VehicleSpawn("VALKYRIE", new Vector3(4889.581f, -5738.292f, 25.7357f), 339.405f, true, true, true, false, 28, 0, 66, MyLang.Maptext[5], 1, false);

                BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[43], "", 5000);
            }       //Thief
            else if (iJobType == 106)
            {
                LogThis("ParaDisplay");

                VTBTimerPool.Add(ttTextBar_01);
                VTBTimerPool.Add(ttTextBar_02);
                ttTextBar_01.Label = MyLang.Othertext[155];
                ttTextBar_02.Label = MyLang.Othertext[156];

                fList_01.Clear();
                VectorList_01.Clear();
                VectorList_02.Clear();
                VectorList_03.Clear();
                VectorList_04.Clear();
                VectorList_05.Clear();
                MultiPed.Clear();
                iTime_01.Clear();
                iUltPed01 = 0;
                iMissionVar_01 = 45000;
                fCorSize = 2000.00f;

                fMission_01 = 150.00f;

                Vector3 vStartPos = new Vector3(4106.358f, -2904.234f, 1015.284f);
                float fStartDir = 186.5306f;

                vTarget_01 = new Vector3(4995.699f, -5183.38f, 2.493078f);

                VectorList_03.Add(new Vector3(5164.53174f, -5108.91162f, 1.78176606f));
                VectorList_04.Add(new Vector3(2.79566741f, 1.79541504f, -140.760941f));
                VectorList_03.Add(new Vector3(5230.93506f, -5188.34521f, 12.9792423f));
                VectorList_04.Add(new Vector3(8.0732832f, 0.530857742f, 178.291763f));
                VectorList_03.Add(new Vector3(5158.85547f, -5197.22803f, 2.91734219f));
                VectorList_04.Add(new Vector3(10.0709343f, 3.15090847f, -162.34053f));
                VectorList_03.Add(new Vector3(5197.14502f, -4990.61523f, 13.6738758f));
                VectorList_04.Add(new Vector3(-0.217229128f, 2.35747981f, -142.329269f));
                VectorList_03.Add(new Vector3(5267.94775f, -5104.64404f, 13.1067448f));
                VectorList_04.Add(new Vector3(0.745732367f, -0.311599284f, 170.919266f));
                VectorList_03.Add(new Vector3(5428.1875f, -5124.91602f, 12.6195211f));
                VectorList_04.Add(new Vector3(-0.344099849f, -1.14771867f, -133.494919f));
                VectorList_03.Add(new Vector3(5321.02637f, -5242.11475f, 32.1562195f));
                VectorList_04.Add(new Vector3(-1.30173361f, 0.629400134f, 86.2589722f));
                VectorList_03.Add(new Vector3(5320.729f, -5337.69385f, 37.0143356f));
                VectorList_04.Add(new Vector3(5.4849658f, 6.22199917f, -133.231186f));
                VectorList_03.Add(new Vector3(5245.29102f, -5417.51221f, 64.4054184f));
                VectorList_04.Add(new Vector3(-5.85160732f, -0.746050894f, 157.901642f));
                VectorList_03.Add(new Vector3(5205.10205f, -5521.02051f, 46.1516457f));
                VectorList_04.Add(new Vector3(-5.65445423f, -1.98117244f, 156.355865f));
                VectorList_03.Add(new Vector3(5070.0957f, -5596.74609f, 33.697403f));
                VectorList_04.Add(new Vector3(-8.31995106f, 3.5322969f, 57.7547302f));
                VectorList_03.Add(new Vector3(4986.31982f, -5579.4458f, 24.1382027f));
                VectorList_04.Add(new Vector3(4.16208935f, -5.091609f, 6.5577507f));
                VectorList_03.Add(new Vector3(4909.29688f, -5473.39941f, 29.2757969f));
                VectorList_04.Add(new Vector3(-1.33691347f, -1.39216328f, 118.360245f));
                VectorList_03.Add(new Vector3(4910.3125f, -5383.09326f, 12.6768074f));
                VectorList_04.Add(new Vector3(-5.49159098f, -2.02776027f, -11.2319613f));
                VectorList_03.Add(new Vector3(4943.86621f, -5287.45361f, 4.3240695f));
                VectorList_04.Add(new Vector3(-5.24508476f, -3.43512511f, -2.31216884f));
                VectorList_03.Add(new Vector3(5385.77441f, -5686.93262f, 46.7793922f));
                VectorList_04.Add(new Vector3(9.65440655f, 3.6026566f, -3.77865982f));
                VectorList_03.Add(new Vector3(5466.53076f, -5814.37354f, 20.1124859f));
                VectorList_04.Add(new Vector3(2.84323382f, -0.695722461f, 5.96165514f));
                VectorList_03.Add(new Vector3(5367.15479f, -5553.71436f, 52.3266335f));
                VectorList_04.Add(new Vector3(-2.07167172f, 2.65848184f, 11.482358f));
                VectorList_03.Add(new Vector3(5494.56787f, -5295.37012f, 17.5160503f));
                VectorList_04.Add(new Vector3(4.22245836f, 0.783318877f, 65.7412796f));
                VectorList_03.Add(new Vector3(5545.99268f, -5232.63232f, 13.3726654f));
                VectorList_04.Add(new Vector3(-5.68270874f, 0.461402088f, 136.043854f));
                VectorList_03.Add(new Vector3(5030.74707f, -4883.55371f, 15.1805925f));
                VectorList_04.Add(new Vector3(0.531460047f, -2.29641867f, -124.099655f));
                VectorList_03.Add(new Vector3(5169.25098f, -4962.55859f, 13.978796f));
                VectorList_04.Add(new Vector3(-1.04118097f, -4.41632175f, -134.311905f));
                VectorList_03.Add(new Vector3(5069.94824f, -4664.79785f, 2.81808066f));
                VectorList_04.Add(new Vector3(0.304469496f, 2.46392345f, 26.9353294f));
                VectorList_03.Add(new Vector3(5071.71436f, -4558.38525f, 5.60371399f));
                VectorList_04.Add(new Vector3(0.524244249f, -1.4417814f, 80.8856506f));
                VectorList_03.Add(new Vector3(4924.3623f, -4495.59326f, 8.67020893f));
                VectorList_04.Add(new Vector3(-3.48338556f, -4.31276512f, -94.5364838f));
                VectorList_03.Add(new Vector3(4860.30322f, -4380.27979f, 5.69810772f));
                VectorList_04.Add(new Vector3(-3.39680314f, 0.819799542f, -129.974167f));
                VectorList_03.Add(new Vector3(4995.37695f, -4542.14502f, 8.45503902f));
                VectorList_04.Add(new Vector3(-1.87267339f, -2.70915031f, -139.90184f));
                VectorList_03.Add(new Vector3(5020.60693f, -4689.97656f, 8.22763634f));
                VectorList_04.Add(new Vector3(4.96786213f, -0.00804555789f, 173.681152f));
                VectorList_03.Add(new Vector3(5000.61133f, -4821.21094f, 13.9201279f));
                VectorList_04.Add(new Vector3(0.426867485f, -4.06502104f, -163.206879f));
                VectorList_03.Add(new Vector3(4967.17334f, -4705.26855f, 8.09709454f));
                VectorList_04.Add(new Vector3(-0.498839319f, -0.986715674f, -38.3691483f));

                VectorList_05.Add(new Vector3(5000.246f, -5163.39f, 3.701138f));
                VectorList_05.Add(new Vector3(5001.257f, -5165.43f, 3.701141f));
                VectorList_05.Add(new Vector3(5003.046f, -5191.527f, 2.515878f));
                VectorList_05.Add(new Vector3(4979.662f, -5200.131f, 2.501703f));
                VectorList_05.Add(new Vector3(4970.88f, -5171.287f, 2.258204f));
                VectorList_05.Add(new Vector3(4959.281f, -5157.375f, 2.438913f));
                VectorList_05.Add(new Vector3(4977.195f, -5144.679f, 2.531023f));
                VectorList_05.Add(new Vector3(4994.537f, -5154.646f, 2.626558f));

                VectorList_01.Add(new Vector3(1.14f, -0.07f, 0.34f));
                VectorList_02.Add(new Vector3(-0.04f, 0.15f, -180.00f));

                VectorList_01.Add(new Vector3(0.22f, -0.07f, 0.34f));
                VectorList_02.Add(new Vector3(0.04f, 0.15f, -180.00f));

                VectorList_01.Add(new Vector3(-0.79f, -0.07f, 0.34f));
                VectorList_02.Add(new Vector3(0.00f, 0.15f, -180.00f));

                VehicleSpawn("BOMBUSHKA", vStartPos, fStartDir, true, true, false, false, 30, 0, 0, "", 1, false);

                BeOnOff.Add(false);//OutOfCorrona
                BeOnOff.Add(true);//Carweapp
                BeOnOff.Add(true);//OutaCar

                BigMessageThread.MessageInstance.ShowSimpleShard(MyLang.Jobtext[23], "", 5000);
            }           //ppara pero

            bOnTheJob = true;
        }
        private void TheCayoConnection(bool bLoadCayo)
        {
            LogThis("TheCayoConnection");

            if (bLoadCayo)
            {
                CayoPhones.Clear();
                List<Vector3> CayPos = new List<Vector3>();
                List<Vector3> CayRot = new List<Vector3>();

                CayPos.Add(new Vector3(4969.19336f, -5600.90381f, 23.20f)); CayRot.Add(new Vector3(0.00f, 0.00f, -31.9523754f));
                CayPos.Add(new Vector3(5099.08643f, -5719.28613f, 16.00f)); CayRot.Add(new Vector3(0.00f, 0.00f, -124.599854f));
                CayPos.Add(new Vector3(5368.04688f, -5434.42529f, 48.70f)); CayRot.Add(new Vector3(0.00f, 0.00f, 145.241089f));
                CayPos.Add(new Vector3(4892.95898f, -5453.17578f, 30.40f)); CayRot.Add(new Vector3(0.00f, 0.00f, -2.67467785f));
                CayPos.Add(new Vector3(4914.79004f, -5294.33057f, 7.90f)); CayRot.Add(new Vector3(3.00f, -1.00f, -88.7225647f));
                CayPos.Add(new Vector3(5117.92285f, -5189.38135f, 2.10f)); CayRot.Add(new Vector3(0.00f, 0.00f, -90.0995636f));
                CayPos.Add(new Vector3(5152.40479f, -5058.93018f, 3.80f)); CayRot.Add(new Vector3(0.00f, 0.00f, 87.5917511f));
                CayPos.Add(new Vector3(5142.36719f, -4952.96729f, 14.00f)); CayRot.Add(new Vector3(0.00f, 0.00f, 49.3263206f));
                CayPos.Add(new Vector3(5028.74512f, -4635.70703f, 4.70f)); CayRot.Add(new Vector3(0.00f, 0.00f, -101.267654f));
                CayPos.Add(new Vector3(4872.50977f, -4482.87988f, 9.80f)); CayRot.Add(new Vector3(0.00f, 0.00f, 88.2257385f));
                CayPos.Add(new Vector3(4492.33105f, -4522.10205f, 4.10f)); CayRot.Add(new Vector3(0.00f, 0.00f, 109.983139f));
                CayPos.Add(new Vector3(4365.35645f, -4579.11377f, 4.00f)); CayRot.Add(new Vector3(0.00f, 0.00f, -69.9810333f));
                CayPos.Add(new Vector3(5177.31738f, -4651.67627f, 2.20f)); CayRot.Add(new Vector3(0.00f, 0.00f, 167.547989f));
                CayPos.Add(new Vector3(5264.31201f, -5420.22607f, 65.50f)); CayRot.Add(new Vector3(0.00f, 0.00f, 55.1944542f));
                CayPos.Add(new Vector3(5132.79688f, -5527.75342f, 53.70f)); CayRot.Add(new Vector3(0.00f, 0.00f, 119.800873f));
                CayPos.Add(new Vector3(5032.13135f, -5759.62793f, 15.30f)); CayRot.Add(new Vector3(0.00f, 0.00f, 138.167618f));
                CayPos.Add(new Vector3(5038.44678f, -5120.1416f, 5.50f)); CayRot.Add(new Vector3(0.00f, 0.00f, -178.255859f));

                for (int i = 0; i < CayPos.Count; i++)
                {
                    Prop Bpox = BuildProp("p_phonebox_02_s", CayPos[i], CayRot[i], true, true);
                    if (Bpox != null)
                        CayoPhones.Add(new Prop(Bpox.Handle));
                }
                PropList_01.Clear();
                bOnCayoLand = true;
            }
            else
            {
                for (int i = 0; i < CayoPhones.Count; i++)
                    CayoPhones[i].Delete();
                CayoPhones.Clear();

                bOnCayoLand = false;
            }
        }
        private void AreULocal()
        {
            LogThis("AreULocal");

            WhereAreYou();

            if (bMoreFubar)
                PlayerPlays();
            else
                JobLot();
        }
        private void WhereAreYou()
        {
            LogThis("WhereAreYou");

            Vector3 PlayPos = Game.Player.Character.Position;
            string MyZone = World.GetZoneNameLabel(PlayPos);
            if (bOnCayoLand)
                iLocationX = 7;
            else if (MyZone == "AIRP" || MyZone == "ELYSIAN" || MyZone == "TERMINA" || MyZone == "CYPRE" || MyZone == "EBURO" || MyZone == "MURRI" || MyZone == "BANNING" || MyZone == "RANCHO" || MyZone == "DAVIS" || MyZone == "STAD" || MyZone == "LOSPUER" || MyZone == "CHAMH" || MyZone == "STRAW" || MyZone == "LMESA" || MyZone == "DELSOL")
                iLocationX = 1;
            else if (MyZone == "SKID" || MyZone == "LEGSQU" || MyZone == "TEXTI" || MyZone == "PBOX" || MyZone == "DTVINE" || MyZone == "KOREAT" || MyZone == "VCANA" || MyZone == "VESP" || MyZone == "BEACH" || MyZone == "DELBE" || MyZone == "DELPE" || MyZone == "SanAnd" || MyZone == "MOVIE" || MyZone == "MORN" || MyZone == "ROCKF" || MyZone == "BURTON" || MyZone == "ALTA" || MyZone == "HAWICK" || MyZone == "WVINE" || MyZone == "golf")
                iLocationX = 2;
            else if (MyZone == "RICHM" || MyZone == "PBLUFF" || MyZone == "BHAMCA" || MyZone == "BANHAMC" || MyZone == "CHU" || MyZone == "RGLEN" || MyZone == "TONGVAH" || MyZone == "TONGVAV" || MyZone == "LAGO")
                iLocationX = 3;
            else if (MyZone == "PALHIGH" || MyZone == "NOOSE" || MyZone == "TATAMO" || MyZone == "MIRR" || MyZone == "EAST_V" || MyZone == "HORS" || MyZone == "CHIL" || MyZone == "PALMPOW" || MyZone == "WINDF" || MyZone == "VINE" || MyZone == "LDAM" || MyZone == "LACT")
                iLocationX = 4;
            else if (MyZone == "GREATC" || MyZone == "ZANCUDO" || MyZone == "SLAB" || MyZone == "DESRT" || MyZone == "HARMO" || MyZone == "RTRAK" || MyZone == "JAIL" || MyZone == "ZQ_UAR" || MyZone == "SANDY" || MyZone == "ALAMO" || MyZone == "SANCHIA" || MyZone == "HUMLAB" || MyZone == "GRAPES" || MyZone == "GALFISH")
                iLocationX = 5;
            else if (MyZone == "OCEANA")
            {
                if (PlayPos.Y < -1941.00f)
                    iLocationX = 1;
                else if (PlayPos.X > 1480.00f && PlayPos.Y < 2450.00f)
                    iLocationX = 4;
                else if (PlayPos.X < -830.00f && PlayPos.Y < -420.00f)
                    iLocationX = 2;
                else if (PlayPos.X < -2150.00f && PlayPos.Y > -420.00f && PlayPos.Y < 3580.00f)
                    iLocationX = 3;
                else if (PlayPos.X > 2460.00f && PlayPos.Y < 5140.00f)
                    iLocationX = 5;
                else
                    iLocationX = 6;
            }
            else
                iLocationX = 6;
        }
        private void JobLot()
        {
            LogThis("JobLot");
            if (!bTrainM)
            {
                MySettings.Pilot = false;
                MySettings.Follow = false;
                MySettings.LSFD = false;
                MySettings.Johnny = false;
                MySettings.Raceist = false;
                MySettings.Raceist = false;
                MySettings.Gruppe6 = false;
                MySettings.Sailor = false;
                MySettings.ImportantEx = false;
                MySettings.MCBusiness = false;
                MySettings.BayLift = false;
                MySettings.MoresMute = false;
                MySettings.TempJob = false;
                MySettings.ParaDisplay = false;
                UI.Notify("Some Missions have been disabled due to missing despawn global. see the GTA-Mods page for more details");
            }

            if (iMissionList.Count == 0 || XmlHasChanged())
                LessRandomMain();
            else
            {
                if (iLocationX == 7)
                    iJobType = FindRandom(105, 101, 106);
                else
                    iJobType = iMissionList[FindRandom(33, 0, iMissionList.Count - 1)];

                ControlSelect(1, true);
            }
        }
        public bool XmlHasChanged()
        {
            bool TheyChanged = false;

            if (File.Exists(sNSPMSet))
            {
                XmlSetings TestSet = LoadXmlSetting(sNSPMSet);

                if (MySettings.Amulance != TestSet.Amulance)
                    TheyChanged = true;
                else if (MySettings.Assassination != TestSet.Assassination)
                    TheyChanged = true;
                else if (MySettings.BayLift != TestSet.BayLift)
                    TheyChanged = true;
                else if (MySettings.BBBomb != TestSet.BBBomb)
                    TheyChanged = true;
                else if (MySettings.Convicts != TestSet.Convicts)
                    TheyChanged = true;
                else if (MySettings.DebtCollect != TestSet.DebtCollect)
                    TheyChanged = true;
                else if (MySettings.Deliverwho != TestSet.Deliverwho)
                    TheyChanged = true;
                else if (MySettings.Follow != TestSet.Follow)
                    TheyChanged = true;
                else if (MySettings.FUber != TestSet.FUber)
                    TheyChanged = true;
                else if (MySettings.Getaway != TestSet.Getaway)
                    TheyChanged = true;
                else if (MySettings.Gruppe6 != TestSet.Gruppe6)
                    TheyChanged = true;
                else if (MySettings.HappyShopper != TestSet.HappyShopper)
                    TheyChanged = true;
                else if (MySettings.ImportantEx != TestSet.ImportantEx)
                    TheyChanged = true;
                else if (MySettings.Johnny != TestSet.Johnny)
                    TheyChanged = true;
                else if (MySettings.LSFD != TestSet.LSFD)
                    TheyChanged = true;
                else if (MySettings.MCBusiness != TestSet.MCBusiness)
                    TheyChanged = true;
                else if (MySettings.MoresMute != TestSet.MoresMute)
                    TheyChanged = true;
                else if (MySettings.Packages != TestSet.Packages)
                    TheyChanged = true;
                else if (MySettings.ParaDisplay != TestSet.ParaDisplay)
                    TheyChanged = true;
                else if (MySettings.Pilot != TestSet.Pilot)
                    TheyChanged = true;
                else if (MySettings.Raceist != TestSet.Raceist)
                    TheyChanged = true;
                else if (MySettings.Sailor != TestSet.Sailor)
                    TheyChanged = true;
                else if (MySettings.Sharks != TestSet.Sharks)
                    TheyChanged = true;
                else if (MySettings.TempJob != TestSet.TempJob)
                    TheyChanged = true;
                else if (MySettings.Truckin != TestSet.Truckin)
                    TheyChanged = true;

                MySettings = TestSet;
            }

            return TheyChanged;
        }
        private void LessRandomMain()
        {
            LogThis("LessRandomMain");
            iMissionList.Clear();

            if (MySettings.Truckin)
                iMissionList.Add(1);
            if (MySettings.Getaway)
                iMissionList.Add(2);
            if (MySettings.Packages)
                iMissionList.Add(3);
            if (MySettings.Convicts)
                iMissionList.Add(4);
            if (MySettings.FUber)
                iMissionList.Add(5);
            if (MySettings.Pilot)
                iMissionList.Add(6);
            if (MySettings.Amulance)
                iMissionList.Add(7);
            if (MySettings.Follow)
                iMissionList.Add(8);
            if (MySettings.LSFD)
                iMissionList.Add(9);
            if (MySettings.Johnny)
                iMissionList.Add(10);
            if (MySettings.Raceist)
                iMissionList.Add(11);
            if (MySettings.BBBomb)
                iMissionList.Add(12);
            if (MySettings.Assassination)
                iMissionList.Add(13);
            if (MySettings.Gruppe6)
                iMissionList.Add(14);
            if (MySettings.Sailor)
                iMissionList.Add(15);
            if (MySettings.ImportantEx)
                iMissionList.Add(16);
            if (MySettings.DebtCollect)
                iMissionList.Add(17);
            if (MySettings.MCBusiness)
                iMissionList.Add(18);
            if (MySettings.BayLift)
                iMissionList.Add(19);
            if (MySettings.Sharks)
                iMissionList.Add(20);
            if (MySettings.HappyShopper)
                iMissionList.Add(26);
            if (MySettings.MoresMute)
                iMissionList.Add(27);
            if (MySettings.TempJob)
                iMissionList.Add(28);
            if (MySettings.ParaDisplay)
                iMissionList.Add(29);
            if (MySettings.Deliverwho)
                iMissionList.Add(30);

            if (iMissionList.Count == 0)
            {
                iJobType = 0;
                ControlSelect(4, true);
            }
            else
                JobLot();
        }
        private void TakeNote()
        {
            if (bOnCayoLand)
            {
                if (iJobType == 101)
                    StickySubTitle(MyLang.Jobtext[44]);
                else if (iJobType == 102)
                    StickySubTitle(MyLang.Jobtext[45]);
                else if (iJobType == 103)
                    StickySubTitle(MyLang.Jobtext[46]);
                else if (iJobType == 104)
                    StickySubTitle(MyLang.Jobtext[47]);
                else if (iJobType == 105)
                    StickySubTitle(MyLang.Jobtext[48]);
                else if (iJobType == 106)
                    StickySubTitle(MyLang.Jobtext[88]);
            }
            else
            {
                if (iJobType == 1)
                    StickySubTitle(MyLang.Jobtext[49]);
                else if (iJobType == 2)
                    StickySubTitle(MyLang.Jobtext[50]);
                else if (iJobType == 3)
                    StickySubTitle(MyLang.Jobtext[51]);
                else if (iJobType == 4)
                    StickySubTitle(MyLang.Jobtext[52]);
                else if (iJobType == 5)
                    StickySubTitle(MyLang.Jobtext[53]);
                else if (iJobType == 6)
                {
                    if (iLocationX == 1)
                        StickySubTitle(MyLang.Jobtext[54]);
                    else if (iLocationX == 2)
                        StickySubTitle(MyLang.Jobtext[55]);
                    else if (iLocationX == 3)
                        StickySubTitle(MyLang.Jobtext[56]);
                    else if (iLocationX == 4)
                        StickySubTitle(MyLang.Jobtext[57]);
                    else if (iLocationX == 5)
                        StickySubTitle(MyLang.Jobtext[58]);
                    else
                        StickySubTitle(MyLang.Jobtext[59]);
                }
                else if (iJobType == 7)
                    StickySubTitle(MyLang.Jobtext[60]);
                else if (iJobType == 8)
                    StickySubTitle(MyLang.Jobtext[61]);
                else if (iJobType == 9)
                    StickySubTitle(MyLang.Jobtext[62]);
                else if (iJobType == 10)
                    StickySubTitle(MyLang.Jobtext[63]);
                else if (iJobType == 11)
                    StickySubTitle(MyLang.Jobtext[64]);
                else if (iJobType == 12)
                    StickySubTitle(MyLang.Jobtext[65]);
                else if (iJobType == 13)
                    StickySubTitle(MyLang.Jobtext[66]);
                else if (iJobType == 14)
                    StickySubTitle(MyLang.Jobtext[67]);
                else if (iJobType == 15)
                {
                    if (iLocationX == 1)
                        StickySubTitle(MyLang.Jobtext[68]);
                    else if (iLocationX == 2)
                    {
                        if (bYachtOwner)
                            StickySubTitle(MyLang.Jobtext[69]);
                        else
                            StickySubTitle(MyLang.Jobtext[70]);
                    }
                    else if (iLocationX == 3)
                        StickySubTitle(MyLang.Jobtext[71]);
                    else if (iLocationX == 4)
                        StickySubTitle(MyLang.Jobtext[72]);
                    else if (iLocationX == 5)
                        StickySubTitle(MyLang.Jobtext[73]);
                    else
                        StickySubTitle(MyLang.Jobtext[74]);
                }
                else if (iJobType == 16)
                    StickySubTitle(MyLang.Jobtext[75]);
                else if (iJobType == 17)
                    StickySubTitle(MyLang.Jobtext[76]);
                else if (iJobType == 18)
                    StickySubTitle(MyLang.Jobtext[77]);
                else if (iJobType == 19)
                    StickySubTitle(MyLang.Jobtext[78]);
                else if (iJobType == 20)
                    StickySubTitle(MyLang.Jobtext[79]);
                else if (iJobType == 26)
                    StickySubTitle(MyLang.Jobtext[80]);
                else if (iJobType == 27)
                    StickySubTitle(MyLang.Jobtext[81]);
                else if (iJobType == 28)
                {
                    if (iLocationX == 1)
                        StickySubTitle(MyLang.Jobtext[82]);
                    else if (iLocationX == 2)
                        StickySubTitle(MyLang.Jobtext[83]);
                    else if (iLocationX == 3)
                        StickySubTitle(MyLang.Jobtext[84]);
                    else if (iLocationX == 4)
                        StickySubTitle(MyLang.Jobtext[85]);
                    else if (iLocationX == 5)
                        StickySubTitle(MyLang.Jobtext[86]);
                    else
                        StickySubTitle(MyLang.Jobtext[87]);
                }
                else if (iJobType == 29)
                    StickySubTitle(MyLang.Jobtext[88]);
                else if (iJobType == 30)
                    StickySubTitle(MyLang.Jobtext[89]);
                else
                    StickySubTitle(MyLang.Jobtext[90]);
            }
        }
        private void CleanMishlists()
        {
            LogThis("CleanMishlists");

            MyMissions.TruckersXM.Clear();
            MyMissions.PackersXM.Clear();
            MyMissions.ConsXM.Clear();
            MyMissions.FubardXM.Clear();
            MyMissions.AmbuXM.Clear();
            MyMissions.SharksXM.Clear();
            MyMissions.JohnsXM.Clear();
            MyMissions.RaceXM.Clear();
            MyMissions.BombXM.Clear();
            MyMissions.HitXM.Clear();
        }
        private void BuildMissions(int iType, string sBuildName)
        {
            LogThis("BuildMissions, iType ==" + iType + ", sBuildName == " + sBuildName);

            if (!Directory.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/"))
                Directory.CreateDirectory("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/");

            if (iType == 1)
            {
                if (File.Exists(sBuildName))
                {
                    MissionBuilder Mb = LoadMissionBuilder(sBuildName);

                    for (int i = 0; i < Mb.TruckersXM.Count; i++)
                        MyMissions.TruckersXM.Add(Mb.TruckersXM[i]);

                    MyMissions.ConsXM = Mb.ConsXM;
                    MyMissions.PackersXM = Mb.PackersXM;
                    MyMissions.FubardXM = Mb.FubardXM;
                    MyMissions.AmbuXM = Mb.AmbuXM;
                    MyMissions.SharksXM = Mb.SharksXM;
                    MyMissions.JohnsXM = Mb.JohnsXM;
                    MyMissions.RaceXM = Mb.RaceXM;
                    MyMissions.BombXM = Mb.BombXM;
                    MyMissions.HitXM = Mb.HitXM;
                }
                SaveMissionBuilder(MyMissions, sBuildName);
            }   //Trucking
            else if (iType == 2)
            {
                if (File.Exists(sBuildName))
                {
                    MissionBuilder Mb = LoadMissionBuilder(sBuildName);

                    for (int i = 0; i < Mb.PackersXM.Count; i++)
                        MyMissions.PackersXM.Add(Mb.PackersXM[i]);

                    MyMissions.TruckersXM = Mb.TruckersXM;
                    MyMissions.ConsXM = Mb.ConsXM;
                    MyMissions.FubardXM = Mb.FubardXM;
                    MyMissions.AmbuXM = Mb.AmbuXM;
                    MyMissions.SharksXM = Mb.SharksXM;
                    MyMissions.JohnsXM = Mb.JohnsXM;
                    MyMissions.RaceXM = Mb.RaceXM;
                    MyMissions.BombXM = Mb.BombXM;
                    MyMissions.HitXM = Mb.HitXM;
                }
                SaveMissionBuilder(MyMissions, sBuildName);
            }       //Packages
            else if (iType == 3)
            {
                if (File.Exists(sBuildName))
                {
                    MissionBuilder Mb = LoadMissionBuilder(sBuildName);

                    for (int i = 0; i < Mb.ConsXM.Count; i++)
                        MyMissions.ConsXM.Add(Mb.ConsXM[i]);

                    MyMissions.TruckersXM = Mb.TruckersXM;
                    MyMissions.PackersXM = Mb.PackersXM;
                    MyMissions.FubardXM = Mb.FubardXM;
                    MyMissions.AmbuXM = Mb.AmbuXM;
                    MyMissions.SharksXM = Mb.SharksXM;
                    MyMissions.JohnsXM = Mb.JohnsXM;
                    MyMissions.RaceXM = Mb.RaceXM;
                    MyMissions.BombXM = Mb.BombXM;
                    MyMissions.HitXM = Mb.HitXM;
                }
                SaveMissionBuilder(MyMissions, sBuildName);
            }       //Convicts
            else if (iType == 4)
            {
                if (File.Exists(sBuildName))
                {
                    MissionBuilder Mb = LoadMissionBuilder(sBuildName);

                    for (int i = 0; i < Mb.FubardXM.Count; i++)
                        MyMissions.FubardXM.Add(Mb.FubardXM[i]);

                    MyMissions.TruckersXM = Mb.TruckersXM;
                    MyMissions.ConsXM = Mb.ConsXM;
                    MyMissions.PackersXM = Mb.PackersXM;
                    MyMissions.AmbuXM = Mb.AmbuXM;
                    MyMissions.SharksXM = Mb.SharksXM;
                    MyMissions.JohnsXM = Mb.JohnsXM;
                    MyMissions.RaceXM = Mb.RaceXM;
                    MyMissions.BombXM = Mb.BombXM;
                    MyMissions.HitXM = Mb.HitXM;
                }
                SaveMissionBuilder(MyMissions, sBuildName);
            }       //FUber
            else if (iType == 5)
            {
                if (File.Exists(sBuildName))
                {
                    MissionBuilder Mb = LoadMissionBuilder(sBuildName);

                    for (int i = 0; i < Mb.AmbuXM.Count; i++)
                        MyMissions.AmbuXM.Add(Mb.AmbuXM[i]);

                    MyMissions.TruckersXM = Mb.TruckersXM;
                    MyMissions.ConsXM = Mb.ConsXM;
                    MyMissions.PackersXM = Mb.PackersXM;
                    MyMissions.FubardXM = Mb.FubardXM;
                    MyMissions.SharksXM = Mb.SharksXM;
                    MyMissions.JohnsXM = Mb.JohnsXM;
                    MyMissions.RaceXM = Mb.RaceXM;
                    MyMissions.BombXM = Mb.BombXM;
                    MyMissions.HitXM = Mb.HitXM;
                }
                SaveMissionBuilder(MyMissions, sBuildName);
            }       //Ambulance
            else if (iType == 6)
            {
                if (File.Exists(sBuildName))
                {
                    MissionBuilder Mb = LoadMissionBuilder(sBuildName);

                    for (int i = 0; i < Mb.SharksXM.Count; i++)
                        MyMissions.SharksXM.Add(Mb.SharksXM[i]);

                    MyMissions.TruckersXM = Mb.TruckersXM;
                    MyMissions.ConsXM = Mb.ConsXM;
                    MyMissions.PackersXM = Mb.PackersXM;
                    MyMissions.FubardXM = Mb.FubardXM;
                    MyMissions.AmbuXM = Mb.AmbuXM;
                    MyMissions.JohnsXM = Mb.JohnsXM;
                    MyMissions.RaceXM = Mb.RaceXM;
                    MyMissions.BombXM = Mb.BombXM;
                    MyMissions.HitXM = Mb.HitXM;
                }
                SaveMissionBuilder(MyMissions, sBuildName);
            }       //Sharks
            else if (iType == 7)
            {
                if (File.Exists(sBuildName))
                {
                    MissionBuilder Mb = LoadMissionBuilder(sBuildName);

                    for (int i = 0; i < Mb.JohnsXM.Count; i++)
                        MyMissions.JohnsXM.Add(Mb.JohnsXM[i]);

                    MyMissions.TruckersXM = Mb.TruckersXM;
                    MyMissions.ConsXM = Mb.ConsXM;
                    MyMissions.PackersXM = Mb.PackersXM;
                    MyMissions.FubardXM = Mb.FubardXM;
                    MyMissions.AmbuXM = Mb.AmbuXM;
                    MyMissions.SharksXM = Mb.SharksXM;
                    MyMissions.RaceXM = Mb.RaceXM;
                    MyMissions.BombXM = Mb.BombXM;
                    MyMissions.HitXM = Mb.HitXM;
                }
                SaveMissionBuilder(MyMissions, sBuildName);
            }      //Johnny
            else if (iType == 8)
            {
                if (File.Exists(sBuildName))
                {
                    MissionBuilder Mb = LoadMissionBuilder(sBuildName);

                    for (int i = 0; i < Mb.RaceXM.Count; i++)
                        MyMissions.RaceXM.Add(Mb.RaceXM[i]);

                    MyMissions.TruckersXM = Mb.TruckersXM;
                    MyMissions.ConsXM = Mb.ConsXM;
                    MyMissions.PackersXM = Mb.PackersXM;
                    MyMissions.FubardXM = Mb.FubardXM;
                    MyMissions.AmbuXM = Mb.AmbuXM;
                    MyMissions.SharksXM = Mb.SharksXM;
                    MyMissions.JohnsXM = Mb.JohnsXM;
                    MyMissions.BombXM = Mb.BombXM;
                    MyMissions.HitXM = Mb.HitXM;
                }
                SaveMissionBuilder(MyMissions, sBuildName);
            }       //Raceist
            else if (iType == 9)
            {
                if (File.Exists(sBuildName))
                {
                    MissionBuilder Mb = LoadMissionBuilder(sBuildName);

                    for (int i = 0; i < Mb.BombXM.Count; i++)
                        MyMissions.BombXM.Add(Mb.BombXM[i]);

                    MyMissions.TruckersXM = Mb.TruckersXM;
                    MyMissions.ConsXM = Mb.ConsXM;
                    MyMissions.PackersXM = Mb.PackersXM;
                    MyMissions.FubardXM = Mb.FubardXM;
                    MyMissions.AmbuXM = Mb.AmbuXM;
                    MyMissions.SharksXM = Mb.SharksXM;
                    MyMissions.JohnsXM = Mb.JohnsXM;
                    MyMissions.RaceXM = Mb.RaceXM;
                    MyMissions.HitXM = Mb.HitXM;
                }
                SaveMissionBuilder(MyMissions, sBuildName);
            }       //BBBomb
            else if (iType == 10)
            {
                if (File.Exists(sBuildName))
                {
                    MissionBuilder Mb = LoadMissionBuilder(sBuildName);

                    for (int i = 0; i < Mb.HitXM.Count; i++)
                        MyMissions.HitXM.Add(Mb.HitXM[i]);

                    MyMissions.TruckersXM = Mb.TruckersXM;
                    MyMissions.ConsXM = Mb.ConsXM;
                    MyMissions.PackersXM = Mb.PackersXM;
                    MyMissions.FubardXM = Mb.FubardXM;
                    MyMissions.AmbuXM = Mb.AmbuXM;
                    MyMissions.SharksXM = Mb.SharksXM;
                    MyMissions.JohnsXM = Mb.JohnsXM;
                    MyMissions.RaceXM = Mb.RaceXM;
                    MyMissions.BombXM = Mb.BombXM;
                }
                SaveMissionBuilder(MyMissions, sBuildName);
            }       //HitMan

            CleanMishlists();
        }
        public class MissionBuilder
        {
            public List<TruckBuild> TruckersXM { get; set; }
            public List<PackBuild> PackersXM { get; set; }
            public List<ConsBuild> ConsXM { get; set; }
            public List<FuberBuild> FubardXM { get; set; }
            public List<AmbBuild> AmbuXM { get; set; }
            public List<DeapBuild> SharksXM { get; set; }
            public List<JohnnyBuild> JohnsXM { get; set; }
            public List<RaceBuild> RaceXM { get; set; }
            public List<BombBuild> BombXM { get; set; }
            public List<HitBuild> HitXM { get; set; }

            public MissionBuilder()
            {
                TruckersXM = new List<TruckBuild>();
                PackersXM = new List<PackBuild>();
                ConsXM = new List<ConsBuild>();
                FubardXM = new List<FuberBuild>();
                AmbuXM = new List<AmbBuild>();
                SharksXM = new List<DeapBuild>();
                JohnsXM = new List<JohnnyBuild>();
                RaceXM = new List<RaceBuild>();
                BombXM = new List<BombBuild>();
                HitXM = new List<HitBuild>();
            }
        }
        public void SaveMissionBuilder(MissionBuilder config, string fileName)
        {
            XmlSerializer xml = new XmlSerializer(typeof(MissionBuilder));
            using (StreamWriter sw = new StreamWriter(fileName))
            {
                xml.Serialize(sw, config);
            }
        }
        public MissionBuilder LoadMissionBuilder(string fileName)
        {
            XmlSerializer xml = new XmlSerializer(typeof(MissionBuilder));
            using (StreamReader sr = new StreamReader(fileName))
            {
                return (MissionBuilder)xml.Deserialize(sr);
            }
        }
        public bool FindBuiltMissions(int iType)
        {
            LogThis("FindBuiltMissions, Type == " + iType);

            bool bMishcons = false;
            iMadeMish = 0;
            CleanMishlists();

            if (iType == 1)
            {
                if (Directory.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/"))
                {
                    string[] MyBulders = Directory.GetFiles("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/");
                    for (int i = 0; i < MyBulders.Count(); i++)
                    {
                        if (File.Exists(MyBulders[i]))
                        {
                            MissionBuilder Mb = LoadMissionBuilder(MyBulders[i]);
                            for (int ii = 0; ii < Mb.TruckersXM.Count; ii++)
                            {
                                if (iLocationX == Mb.TruckersXM[ii].Local)
                                {
                                    MyMissions.TruckersXM.Add(Mb.TruckersXM[ii]);
                                    iMadeMish += 1;
                                    bMishcons = true;
                                }
                            }
                        }
                    }
                }
            }       //Trucking
            else if (iType == 2)
            {
                if (Directory.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/"))
                {
                    string[] MyBulders = Directory.GetFiles("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/");
                    for (int i = 0; i < MyBulders.Count(); i++)
                    {
                        if (File.Exists(MyBulders[i]))
                        {
                            MissionBuilder Mb = LoadMissionBuilder(MyBulders[i]);
                            for (int ii = 0; ii < Mb.PackersXM.Count; ii++)
                            {
                                if (iLocationX == Mb.PackersXM[ii].Local)
                                {
                                    MyMissions.PackersXM.Add(Mb.PackersXM[ii]);
                                    iMadeMish += 1;
                                    bMishcons = true;
                                }
                            }
                        }
                    }
                }
            }       //Packages
            else if (iType == 3)
            {
                if (Directory.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/"))
                {
                    string[] MyBulders = Directory.GetFiles("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/");
                    for (int i = 0; i < MyBulders.Count(); i++)
                    {
                        if (File.Exists(MyBulders[i]))
                        {
                            MissionBuilder Mb = LoadMissionBuilder(MyBulders[i]);
                            for (int ii = 0; ii < Mb.ConsXM.Count; ii++)
                            {
                                if (iLocationX == Mb.ConsXM[ii].Local)
                                {
                                    MyMissions.ConsXM.Add(Mb.ConsXM[ii]);
                                    iMadeMish += 1;
                                    bMishcons = true;
                                }
                            }
                        }
                    }
                }
            }       //Convicts
            else if (iType == 4)
            {
                if (Directory.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/"))
                {
                    string[] MyBulders = Directory.GetFiles("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/");
                    for (int i = 0; i < MyBulders.Count(); i++)
                    {
                        if (File.Exists(MyBulders[i]))
                        {
                            MissionBuilder Mb = LoadMissionBuilder(MyBulders[i]);
                            for (int ii = 0; ii < Mb.FubardXM.Count; ii++)
                            {
                                if (iLocationX == Mb.FubardXM[ii].Local)
                                {
                                    MyMissions.FubardXM.Add(Mb.FubardXM[ii]);
                                    iMadeMish += 1;
                                    bMishcons = true;
                                }
                            }
                        }
                    }
                }
            }       //FUber
            else if (iType == 5)
            {
                if (Directory.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/"))
                {
                    string[] MyBulders = Directory.GetFiles("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/");
                    for (int i = 0; i < MyBulders.Count(); i++)
                    {
                        if (File.Exists(MyBulders[i]))
                        {
                            MissionBuilder Mb = LoadMissionBuilder(MyBulders[i]);
                            for (int ii = 0; ii < Mb.AmbuXM.Count; ii++)
                            {
                                if (iLocationX == Mb.AmbuXM[ii].Local)
                                {
                                    MyMissions.AmbuXM.Add(Mb.AmbuXM[ii]);
                                    iMadeMish += 1;
                                    bMishcons = true;
                                }
                            }
                        }
                    }
                }
            }       //Ambulance
            else if (iType == 6)
            {
                if (Directory.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/"))
                {
                    string[] MyBulders = Directory.GetFiles("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/");
                    for (int i = 0; i < MyBulders.Count(); i++)
                    {
                        if (File.Exists(MyBulders[i]))
                        {
                            MissionBuilder Mb = LoadMissionBuilder(MyBulders[i]);
                            for (int ii = 0; ii < Mb.SharksXM.Count; ii++)
                            {
                                if (iLocationX == Mb.SharksXM[ii].Local)
                                {
                                    MyMissions.SharksXM.Add(Mb.SharksXM[ii]);
                                    iMadeMish += 1;
                                    bMishcons = true;
                                }
                            }
                        }
                    }
                }
            }       //Sharks
            else if (iType == 7)
            {
                if (Directory.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/"))
                {
                    string[] MyBulders = Directory.GetFiles("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/");
                    for (int i = 0; i < MyBulders.Count(); i++)
                    {
                        if (File.Exists(MyBulders[i]))
                        {
                            MissionBuilder Mb = LoadMissionBuilder(MyBulders[i]);
                            for (int ii = 0; ii < Mb.JohnsXM.Count; ii++)
                            {
                                if (iLocationX == Mb.JohnsXM[ii].Local)
                                {
                                    MyMissions.JohnsXM.Add(Mb.JohnsXM[ii]);
                                    iMadeMish += 1;
                                    bMishcons = true;
                                }
                            }
                        }
                    }
                }
            }       //Johnny
            else if (iType == 8)
            {
                if (Directory.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/"))
                {
                    string[] MyBulders = Directory.GetFiles("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/");
                    for (int i = 0; i < MyBulders.Count(); i++)
                    {
                        if (File.Exists(MyBulders[i]))
                        {
                            MissionBuilder Mb = LoadMissionBuilder(MyBulders[i]);
                            for (int ii = 0; ii < Mb.RaceXM.Count; ii++)
                            {
                                if (iLocationX == Mb.RaceXM[ii].Local)
                                {
                                    MyMissions.RaceXM.Add(Mb.RaceXM[ii]);
                                    iMadeMish += 1;
                                    bMishcons = true;
                                }
                            }
                        }
                    }
                }
            }       //Raceist
            else if (iType == 9)
            {
                if (Directory.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/"))
                {
                    string[] MyBulders = Directory.GetFiles("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/");
                    for (int i = 0; i < MyBulders.Count(); i++)
                    {
                        if (File.Exists(MyBulders[i]))
                        {
                            MissionBuilder Mb = LoadMissionBuilder(MyBulders[i]);
                            for (int ii = 0; ii < Mb.BombXM.Count; ii++)
                            {
                                if (iLocationX == Mb.BombXM[ii].Local)
                                {
                                    MyMissions.BombXM.Add(Mb.BombXM[ii]);
                                    iMadeMish += 1;
                                    bMishcons = true;
                                }
                            }
                        }
                    }
                }
            }       //BBBomb
            else if (iType == 10)
            {
                if (Directory.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/"))
                {
                    string[] MyBulders = Directory.GetFiles("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/");
                    for (int i = 0; i < MyBulders.Count(); i++)
                    {
                        if (File.Exists(MyBulders[i]))
                        {
                            MissionBuilder Mb = LoadMissionBuilder(MyBulders[i]);
                            for (int ii = 0; ii < Mb.HitXM.Count; ii++)
                            {
                                if (iLocationX == Mb.HitXM[ii].Local)
                                {
                                    MyMissions.HitXM.Add(Mb.HitXM[ii]);
                                    iMadeMish += 1;
                                    bMishcons = true;
                                }
                            }
                        }
                    }
                }
            }       //HitMan

            return bMishcons;
        }
        public List<string> BuildMishLists(int itype)
        {
            LogThis("BuildMishLists, itype == " + itype);

            List<string> MishString = new List<string>();

            if (itype == 1)
            {
                MishString.Add("SADLER"); //
                MishString.Add("BISON"); //
                MishString.Add("BISON2"); //<!-- McGill-Olsen Bison -->
                MishString.Add("BISON3"); //<!-- Mighty Bush Bison -->
                MishString.Add("BOBCATXL"); //
                MishString.Add("INSURGENT3"); //<!-- Insurgent Pick-Up Custom -->
                MishString.Add("TECHNICAL3"); //<!-- Technical Custom -->
            }
            else if (itype == 2)
            {
                MishString.Add("HAULER"); //
                MishString.Add("HAULER2"); //<!-- Hauler Custom -->
                MishString.Add("PACKER"); //
                MishString.Add("PHANTOM"); //
                MishString.Add("PHANTOM3"); //<!-- Phantom Custom -->
                MishString.Add("BARRACKS2"); //<!-- Barracks Semi -->
            }
            else if (itype == 3)
            {
                MishString.Add("Tractor2"); //
            }
            else if (itype == 4)
            {
                MishString.Add("TrailerSmall");
                MishString.Add("BoatTrailer");
                MishString.Add("BaleTrailer");
                MishString.Add("graintrailer");
                MishString.Add("armytanker");
                MishString.Add("Tanker");
                MishString.Add("armytrailer");
                MishString.Add("tr2");
                MishString.Add("TR4");
                MishString.Add("TrailerLogs");
                MishString.Add("trailers");
                MishString.Add("Trailers2");
                MishString.Add("Trailers3");
                MishString.Add("Trailers4");
                MishString.Add("tvtrailer");
            }
            else if (itype == 5)
            {
                MishString.Add("POUNDER");
                MishString.Add("BENSON");
                MishString.Add("Mule2");
                MishString.Add("Boxville2");
                MishString.Add("BURRITO");
                MishString.Add("PONY");
                MishString.Add("Rumpo2");
                MishString.Add("RUMPO3");
                MishString.Add("SPEEDO");
                MishString.Add("SlamVan2");
                MishString.Add("Cruiser");
            }
            else if (itype == 6)
            {
                MishString.Add("prop_rub_cage01b");
                MishString.Add("prop_sacktruck_02b");
                MishString.Add("hei_prop_heist_wooden_box");
                MishString.Add("prop_cs_cardbox_01");
                MishString.Add("prop_cardbordbox_03a");
                MishString.Add("prop_ball_box");
                MishString.Add("ng_proc_box_01a");
                MishString.Add("prop_box_ammo03a");
                MishString.Add("prop_tshirt_box_02");
                MishString.Add("ng_proc_binbag_01a");
                MishString.Add("prop_cliff_paper");
            }
            else if (itype == 7)
            {
                if (Directory.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/"))
                {
                    string[] MyBulders = Directory.GetFiles("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/");
                    for (int i = 0; i < MyBulders.Count(); i++)
                        MishString.Add(MyBulders[i]);
                }
            }
            return MishString;
        }
        private void Trucking_Attachments(int iAtt)
        {
            LogThis("Trucking_Attachments");

            if (iAtt == 1)
                Function.Call(Hash.ATTACH_VEHICLE_TO_TRAILER, VehTrackin_01.Handle, VehTrackin_02.Handle, 5.0f);
            else if (iAtt == 2)
                VehicleSpawn("Tropic2", VehTrackin_02.Position, VehTrackin_02.Heading, true, false, false, false, 16, 1, 0, "", 0, false);
            else if (iAtt == 3)
                VehicleSpawn("Bulldozer", VehTrackin_02.Position, VehTrackin_02.Heading, true, false, false, false, 16, 2, 0, "", 0, false);
            else if (iAtt == 4)
                VehicleSpawn("Lguard", VehTrackin_02.Position, VehTrackin_02.Heading, true, false, false, false, 16, 2, 0, "", 0, false);
            else if (iAtt == 5)
                VehicleSpawn("RHINO", VehTrackin_02.Position, VehTrackin_02.Heading, true, false, false, false, 16, 3, 0, "", 0, false);
            else if (iAtt == 6)
                VehicleSpawn("SUBMERSIBLE2", VehTrackin_02.Position, VehTrackin_02.Heading, true, false, false, false, 16, 5, 0, "", 0, false);
            else if (iAtt == 7)
            {
                List<int> MyExtras = new List<int>();
                Vehicle Buzz = VehicleSpawn("Buzzard", VehTrackin_02.Position, VehTrackin_02.Heading, true, false, false, false, 16, 3, 0, "", 0, false);
                MyExtras.Add(16);
                ModExtras(Buzz, MyExtras);
            }
            else if (iAtt == 8)
                VehicleSpawn("Tractor2", VehTrackin_02.Position, VehTrackin_02.Heading, true, false, false, false, 16, 4, 0, "", 0, false);
        }
        private void Trucking_LostTrail()
        {
            LogThis("Trucking_LostTrail");

            iTime_01[0] = Game.GameTime + 10000;
            float fDir = VehTrackin_02.Heading;
            float fHi = VehTrackin_02.Position.Z + 1.00f;

            VehTrackin_02.Rotation = new Vector3(0.0f, 0.0f, fDir);
            VehTrackin_02.Position = new Vector3(VehTrackin_02.Position.X, VehTrackin_02.Position.Y, fHi);
        }
        private void Trucking_CashNCrash()
        {
            LogThis("Trucking_CashNCrash");

            iList_01.Clear();
            iList_02.Clear();
            MishVic.Clear();

            float fVehCheck = VehTrackin_01.BodyHealth + VehTrackin_01.EngineHealth + VehTrackin_01.PetrolTankHealth;
            iList_01.Add((int)fVehCheck);
            MishVic.Add(new Vehicle(VehTrackin_01.Handle));
            fVehCheck = VehTrackin_02.BodyHealth + VehTrackin_02.EngineHealth + VehTrackin_02.PetrolTankHealth;
            iList_01.Add((int)fVehCheck);
            MishVic.Add(new Vehicle(VehTrackin_02.Handle));
            float fdist = Vector3.Distance2D(VehTrackin_02.Position, vTarget_01);
            int icash = (int)fdist;
            icash = icash / 10;
            iCrash4Cash = icash * 50;
            if (BeOnOff[5])
                iCrash4Cash = iCrash4Cash / 2;
            iCashReward = iCrash4Cash;
        }
        private void Getaway_FearInBank()
        {
            LogThis("Getaway_FearInBank");
            ScaredBy(vTarget_03);

            EnterPlayerVeh(Npc_01, 1, 2.00f);
            EnterPlayerVeh(Npc_02, 2, 2.00f);
            EnterPlayerVeh(Npc_03, 3, 2.00f);
        }
        private void Getaway_RobDaBank()
        {
            LogThis("Getaway_RobDaBank");

            Game.Player.WantedLevel = 4;
            Function.Call(Hash.SET_POLICE_IGNORE_PLAYER, Game.Player.Character.Handle, false);
            VehTrackin_05.IsDriveable = true;
            VehTrackin_05.HandbrakeOn = false;

            float fVehCheck = VehTrackin_05.BodyHealth + VehTrackin_05.EngineHealth + VehTrackin_05.PetrolTankHealth;
            iList_01.Add((int)fVehCheck);
            MishVic.Add(new Vehicle(VehTrackin_05.Handle));

            iList_02.Add(Npc_01.Health);
            MishPed.Add(new Ped(Npc_01.Handle));

            iList_02.Add(Npc_02.Health);
            MishPed.Add(new Ped(Npc_02.Handle));

            iList_02.Add(Npc_03.Health);
            MishPed.Add(new Ped(Npc_03.Handle));

            iList_02.Add(Game.Player.Character.Health);
            MishPed.Add(new Ped(Game.Player.Character.Handle));

            iCashReward = iMissionVar_03;

            VehicleSpawn(sVehType, vGetaway, fMission_01, true, true, false, false, 0, 0, 0, "", 1, false);

            Function.Call(Hash.TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS, Npc_01.Handle, false);
            Function.Call(Hash.TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS, Npc_02.Handle, false);
            Function.Call(Hash.TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS, Npc_03.Handle, false);

            ArmsRegulator(Npc_01, 3);
            ArmsRegulator(Npc_02, 3);
            ArmsRegulator(Npc_03, 3);

            BeOnOff[7] = true;

            if (!BeOnOff[0])
                NSCoinInvestments(false, 25, 50, "Fleeca Shares");
        }
        private void Getaway_StopLoss()
        {
            LogThis("Getaway_StopLoss");

            for (int i = 0; i < iFireList.Count; i++)
                Function.Call(Hash.STOP_PARTICLE_FX_LOOPED, iFireList[i], true);

            iFireList.Clear();
            iTime_01[0] = 0;
            BeOnOff[9] = false;
            BeOnOff[8] = false;
        }
        private void Getaway_CarSwap(Vehicle Vhick)
        {
            LogThis("Getaway_CarSwap");

            Vehicle Vreplace = World.CreateVehicle(Vhick.Model, new Vector3(1563.228f, 3793.665f, 33.65359f));
            Vreplace.IsPersistent = true;
            VehicleList_01.Add(new Vehicle(Vreplace.Handle));
            Function.Call(Hash.SET_VEHICLE_MOD_KIT, Vreplace.Handle, 0);
            if (Vhick.IsToggleModOn(VehicleToggleMod.Turbo))
                Vreplace.ToggleMod(VehicleToggleMod.Turbo, true);
            if (Vhick.IsToggleModOn(VehicleToggleMod.XenonHeadlights))
                Vreplace.ToggleMod(VehicleToggleMod.XenonHeadlights, true);
            for (int i = 0; i < 67; i++)
            {
                int imoded = Function.Call<int>(Hash.GET_VEHICLE_MOD, Vhick.Handle, i);
                Function.Call(Hash.SET_VEHICLE_MOD, Vreplace.Handle, i, imoded, true);
            }
            Vector3 VeVecP = Vhick.Position;
            Vector3 VeVecO = Vhick.Rotation;
            Vhick.Delete();
            VehicleWarp(Vreplace, Game.Player.Character, 1);
            Vreplace.Position = VeVecP;
            Vreplace.Rotation = VeVecO;
            VehTrackin_05 = Vreplace;
            iMissionSeq = 3;
            RemoveTargets();
            World.AddExplosion(vTarget_03, ExplosionType.Flare, 1.0f, 0.0f);
            EnterAnyVeh(VehTrackin_05, Npc_01, 1, 2.00f);
            EnterAnyVeh(VehTrackin_05, Npc_02, 2, 2.00f);
            EnterAnyVeh(VehTrackin_05, Npc_03, 3, 2.00f);
            iWait4Sec = Game.GameTime + 15000;
            VehTrackin_05.EngineRunning = false;
            VehTrackin_05.IsExplosionProof = false;
            VehTrackin_05.IsOnlyDamagedByPlayer = false;
            VehTrackin_05.IsFireProof = false;
            BeOnOff[7] = true;
        }
        public PackBuild Packages_KitBuild(PackBuild LocalMish, Vector3 Fub, Vector3 VehStart, float fDirect, string sVeh, string sPack, int Live)
        {
            LocalMish.FarstStart = Fub;
            LocalMish.PackVehStart = VehStart;
            LocalMish.PackVehDir = fDirect; ;
            LocalMish.PackVehType = sVeh;
            LocalMish.PackDropType = sPack;
            LocalMish.Livery = Live;

            return LocalMish;
        }
        private void Packages_DeliverThis(List<Vector3> MyDrops, int iDropIt, bool bUseAll)
        {
            LogThis("Packages_DeliverThis, iDropIt == " + iDropIt);

            VectorList_01.Clear();

            if (bUseAll)
                VectorList_01 = MyDrops;
            else
            {
                List<int> DropSelect = new List<int>();
                List<Vector3> DropVec = new List<Vector3>();
                int iRanRange = MyDrops.Count - 1;
                while (iDropIt > 0)
                {
                    int iRan = RandInt(0, iRanRange);
                    if (DropSelect.Count == 0)
                    {
                        DropSelect.Add(iRan);
                        iDropIt = iDropIt - 1;
                    }
                    else
                    {
                        if (!DropSelect.Contains(iRan))
                        {
                            DropSelect.Add(iRan);
                            iDropIt = iDropIt - 1;
                        }
                    }
                }
                for (int i = 0; i < DropSelect.Count; i++)
                    DropVec.Add(MyDrops[DropSelect[i]]);

                VectorList_01 = ListReverseVec3(FarToNear(DropVec, vTarget_05));
            }

            float fTotalDist = VectorList_01[VectorList_01.Count - 1].DistanceTo(vTarget_05);
            float fRoadDist = World.CalculateTravelDistance(VectorList_01[VectorList_01.Count - 1], vTarget_05);

            LogThis("Packages_DeliverThis, fTotalDist == " + fTotalDist + ", fRoadDist == " + fRoadDist);

            for (int i = VectorList_01.Count - 1; i > 0; i--)
            {
                float fDist = VectorList_01[i].DistanceTo(VectorList_01[i - 1]);
                fTotalDist += fDist;
            }
            LogThis("Packages_DeliverThis, iTotalDist == " + fTotalDist);

            iTime_01[0] = (int)fTotalDist * 75;
            fTotalDist *= 2;
            if (fTotalDist < fRoadDist)
                iTime_01[0] *= 2;
        }
        public List<Vector3> Packages_SortCayo(List<string> ObName, List<Vector3> ListToFix, Vector3 vStartPoint)
        {
            LogThis("Packages_SortCayo ObName.Count == " + ObName.Count + ", ListToFix.Count == " + ListToFix.Count);

            sList_01.Clear();

            List<Vector3> ObPos = new List<Vector3>
            {
                new Vector3(5265.879f, -5427.419f, 141.0486f),
                new Vector3(5407.132f, -5716.747f, 37.52242f),
                new Vector3(5503.971f, -5366.125f, 22.51798f),
                new Vector3(5066.929f, -5497.295f, 47.59791f),
                new Vector3(4896.859f, -5349.224f, 10.32985f),
                new Vector3(5230.103f, -5062.415f, 13.97499f),
                new Vector3(4930.749f, -4873.889f, 6.68732f),
                new Vector3(5043.498f, -4608.462f, 3.196184f),
                new Vector3(4768.677f, -4385.518f, 14.03571f),
                new Vector3(4519.254f, -4673.16f, 13.40476f)
            };

            List<Vector3> NewVList = new List<Vector3>();
            List<Vector3> AddVList = new List<Vector3>();
            List<string> ObbVList = new List<string>();

            for (int i = 0; i < ObPos.Count; i++)
            {
                if (i == 0)
                {
                    for (int ii = 0; ii < ListToFix.Count; ii++)
                    {
                        if (ListToFix[ii].DistanceTo(ObPos[i]) < 10.00f)
                        {
                            AddVList.Add(ListToFix[ii]);
                            ObbVList.Add(ObName[ii]);
                        }
                    }
                }
                else
                {
                    for (int ii = 0; ii < ListToFix.Count; ii++)
                    {
                        if (ListToFix[ii].DistanceTo(ObPos[i]) < 250.00f)
                        {
                            AddVList.Add(ListToFix[ii]);
                            ObbVList.Add(ObName[ii]);
                        }
                    }
                }

                while (AddVList.Count > 0)
                {
                    if (AddVList.Count == 1)
                    {
                        ListToFix.Remove(AddVList[0]);
                        ObName.Remove(ObbVList[0]);
                        NewVList.Add(AddVList[0]);
                        sList_01.Add(ObbVList[0]);
                        AddVList.RemoveAt(0);
                        ObbVList.RemoveAt(0);
                    }
                    else
                    {
                        float fGetDist = 0.00f;
                        int iDrop = 0;

                        for (int iii = 0; iii < AddVList.Count; iii++)
                        {
                            if (AddVList[iii].DistanceTo(ObPos[i]) > fGetDist)
                            {
                                fGetDist = AddVList[iii].DistanceTo(vStartPoint);
                                iDrop = iii;
                            }
                        }
                        ListToFix.Remove(AddVList[iDrop]);
                        ObName.Remove(ObbVList[iDrop]);
                        NewVList.Add(AddVList[iDrop]);
                        sList_01.Add(ObbVList[iDrop]);
                        AddVList.RemoveAt(iDrop);
                        ObbVList.RemoveAt(iDrop);
                    }
                }
            }
            for (int i = 0; i < ListToFix.Count; i++)
            {
                NewVList.Add(ListToFix[i]);
                sList_01.Add(ObName[i]);
            }

            return NewVList;
        }
        private void Packages_LiveExport()
        {
            LogThis("Packages_LiveExport");

            Ped PHen = NPCSpawn("a_c_hen", vTarget_01, 0.00f, false, 150, 0, 0, null, 0, false, 0, 0, "");
            PHen.AttachTo(VehTrackin_01, VehTrackin_01.GetBoneIndex("bodyshell"), new Vector3(-0.70f, -0.20f, 0.48f), new Vector3(0.00f, 0.00f, RandFlow(0.01f, 359.99f)));

            PHen = NPCSpawn("a_c_hen", vTarget_01, 0.00f, false, 150, 0, 0, null, 0, false, 0, 0, "");
            PHen.AttachTo(VehTrackin_01, VehTrackin_01.GetBoneIndex("bodyshell"), new Vector3(-0.40f, -1.00f, 0.48f), new Vector3(0.00f, 0.00f, RandFlow(0.01f, 359.99f)));

            PHen = NPCSpawn("a_c_hen", vTarget_01, 0.00f, false, 150, 0, 0, null, 0, false, 0, 0, "");
            PHen.AttachTo(VehTrackin_01, VehTrackin_01.GetBoneIndex("bodyshell"), new Vector3(0.40f, -1.20f, 0.48f), new Vector3(0.00f, 0.00f, RandFlow(0.01f, 359.99f)));

            PHen = NPCSpawn("a_c_hen", vTarget_01, 0.00f, false, 150, 0, 0, null, 0, false, 0, 0, "");
            PHen.AttachTo(VehTrackin_01, VehTrackin_01.GetBoneIndex("bodyshell"), new Vector3(0.80f, -0.20f, 0.48f), new Vector3(0.00f, 0.00f, RandFlow(0.01f, 359.99f)));

            PHen = NPCSpawn("a_c_hen", vTarget_01, 0.00f, false, 150, 0, 0, null, 0, false, 0, 0, "");
            PHen.AttachTo(VehTrackin_01, VehTrackin_01.GetBoneIndex("bodyshell"), new Vector3(0.50f, -2.40f, 0.48f), new Vector3(0.00f, 0.00f, RandFlow(0.01f, 359.99f)));

            PHen = NPCSpawn("a_c_hen", vTarget_01, 0.00f, false, 150, 0, 0, null, 0, false, 0, 0, "");
            PHen.AttachTo(VehTrackin_01, VehTrackin_01.GetBoneIndex("bodyshell"), new Vector3(-0.80f, -2.80f, 0.48f), new Vector3(0.00f, 0.00f, RandFlow(0.01f, 359.99f)));
        }
        private void Convicts_DumpCons()
        {
            LogThis("Convicts_DumpCons");

            for (int i = 0; i < 7; i++)
            {
                Script.Wait(500);
                if (i == 0)
                    Npc_01 = NPCSpawn("s_m_y_prisoner_01", vTarget_01, 0.00f, false, 115, 3, 0, null, 0, true, 18, 0, MyLang.Maptext[108]);
                else
                    NPCSpawn("s_m_y_prisoner_01", vTarget_01, 0.00f, false, 115, 4, 0, null, 0, true, 18, 0, MyLang.Maptext[108]);
            }
        }
        private void Convicts_KrishaToBus()
        {
            LogThis("Convicts_KrishaToBus");

            Game.FadeScreenOut(1000);
            Script.Wait(1000);

            int iSitEre = VehTrackin_01.PassengerSeats;

            for (int i = 0; i < PedList_01.Count; i++)
            {
                FreeSeat(VehTrackin_01, iSitEre, false);
                PedList_01[i].CurrentBlip.Remove();
                WarptoAnyVeh(VehTrackin_01, PedList_01[i], iSitEre);
                iSitEre -= 1;
            }

            iMissionSeq = 5;
            iWait4Sec = Game.GameTime + 15000;
            TheYellowCorona(vTarget_02, 5.00f);
            AddTarget(vTarget_02, true, true, 1.00f, false, 526, MyLang.Maptext[35]);
            Game.FadeScreenIn(1000);
        }
        private void Convicts_KrishaLine(Ped Harry, bool Leader)
        {
            LogThis("Convicts_KrishaLine, Leader == " + Leader);

            iList_01.Add(iMissionVar_01);
            if (Leader)
                Function.Call(Hash.SET_PED_AS_GROUP_LEADER, Harry.Handle, GP_ANPCs);

            iList_01[iList_01.Count - 1] = PedWalkies(Harry, VectorList_01, iList_01[iList_01.Count - 1]);
        }
        private void Convicts_WalkLoop()
        {
            int iBeenHit = 0;
            for (int i = 0; i < PedList_01.Count; i++)
            {
                if (PedList_01[i].HasBeenDamagedBy(Game.Player.Character))
                    iBeenHit += 1;
                else if (PedList_01[i].IsFleeing)
                    iBeenHit += 1;
                else if (PedList_01[i].Position.DistanceTo(VectorList_01[iList_01[i]]) < 1.50f)
                    iList_01[i] = PedWalkies(PedList_01[i], VectorList_01, iList_01[i]);
            }

            if (iBeenHit > 0)
            {
                iBeenHit = 0;
                if (BeOff[0])
                {
                    BeOff[0] = false;
                    Hare.Stop();
                }

                Script.Wait(2000);
                for (int i = 0; i < PedList_01.Count; i++)
                {
                    if (PedList_01[i].HasBeenDamagedBy(Game.Player.Character))
                        iBeenHit += 1;
                    else if (PedList_01[i].IsDead)
                        iBeenHit += 1;

                    PedList_01[i].Task.FleeFrom(Game.Player.Character);
                }
                if (iBeenHit == PedList_01.Count)
                    iMissionSeq = 25;
                else
                    iMissionSeq = 45;
            }
            else
                BeOff[3] = false;
        }
        private void CopKillerz()
        {
            Vehicle[] CopKillar = World.GetNearbyVehicles(Game.Player.Character, 75.0f);

            for (int i = 0; i < CopKillar.Count(); i++)
            {
                if (VehExists(CopKillar, i))
                {
                    if (CopKillar[i].ClassType == VehicleClass.Emergency && CopKillar[i].IsPersistent == false)
                        CopKillar[i].Delete();
                    else if (CopKillar[i].ClassType == VehicleClass.Helicopters && CopKillar[i].IsPersistent == false)
                        CopKillar[i].Delete();
                }
            }
        }
        public int Fubar_Vectors(int Local, int iArea, bool bRandom, bool bUseCustom)
        {
            LogThis("Fubar_Vectors, Local == " + Local + ", iArea == " + iArea + ", bRandom == " + bRandom);

            VectorList_01.Clear();//park
            VectorList_02.Clear();//ped


            if (Local == 1)
            {
                if (bRandom)
                    iArea = RandInt(1, 13);

                if (iArea == 1)//        "AIRP")
                {
                    VectorList_02.Add(new Vector3(-1042.819f, -2746.101f, 21.3594f));
                    VectorList_01.Add(new Vector3(-1033.355f, -2730.467f, 19.36782f));
                    VectorList_02.Add(new Vector3(-880.0367f, -2175.426f, 9.809046f));
                    VectorList_01.Add(new Vector3(-886.2841f, -2188.905f, 7.813149f));
                    VectorList_02.Add(new Vector3(-702.2244f, -2275.315f, 13.45538f));
                    VectorList_01.Add(new Vector3(-691.0641f, -2288.052f, 12.27384f));
                    VectorList_02.Add(new Vector3(-675.5292f, -2398.912f, 16.1189f));
                    VectorList_01.Add(new Vector3(-684.2182f, -2401.862f, 13.94477f));
                    VectorList_02.Add(new Vector3(-894.1396f, -2401.645f, 14.02436f));
                    VectorList_01.Add(new Vector3(-905.5909f, -2407.064f, 13.35347f));
                }
                else if (iArea == 2)//        "ELYSIAN")
                {
                    VectorList_02.Add(new Vector3(-423.3445f, -2788.727f, 6.000384f));
                    VectorList_01.Add(new Vector3(-419.82f, -2782.47f, 5.294005f));
                    VectorList_02.Add(new Vector3(-301.2311f, -2611.85f, 17.10094f));
                    VectorList_01.Add(new Vector3(-303.4613f, -2595.057f, 5.298008f));
                    VectorList_02.Add(new Vector3(374.0266f, -2420f, 6.041661f));
                    VectorList_01.Add(new Vector3(370.1503f, -2430.4f, 5.335281f));
                    VectorList_02.Add(new Vector3(-259.8698f, -2678.943f, 6.355639f));
                    VectorList_01.Add(new Vector3(-255.6797f, -2683.559f, 5.293688f));
                    VectorList_02.Add(new Vector3(-328.3435f, -2700.521f, 7.549515f));
                    VectorList_01.Add(new Vector3(-332.4807f, -2694.783f, 5.321131f));
                    VectorList_02.Add(new Vector3(-332.4876f, -2792.459f, 5.00024f));
                    VectorList_01.Add(new Vector3(-355.9153f, -2791.711f, 5.294162f));
                    VectorList_02.Add(new Vector3(581.9357f, -2723.062f, 7.186927f));
                    VectorList_01.Add(new Vector3(582.1222f, -2731.58f, 5.349043f));
                    VectorList_02.Add(new Vector3(661.4727f, -2644.04f, 8.406054f));
                    VectorList_01.Add(new Vector3(656.2927f, -2658.732f, 5.375378f));
                    VectorList_02.Add(new Vector3(308.5914f, -2861.397f, 6.015434f));
                    VectorList_01.Add(new Vector3(301.2867f, -2857.547f, 5.317563f));
                    VectorList_02.Add(new Vector3(213.5255f, -3077.135f, 7.01534f));
                    VectorList_01.Add(new Vector3(212.4372f, -3070.709f, 5.087289f));

                }
                else if (iArea == 3)//        "TERMINA")
                {
                    VectorList_02.Add(new Vector3(1240.476f, -3179.404f, 7.104862f));
                    VectorList_01.Add(new Vector3(1252.465f, -3172.607f, 5.094413f));
                    VectorList_02.Add(new Vector3(1229.969f, -2912.093f, 9.319263f));
                    VectorList_01.Add(new Vector3(1215.25f, -2916.509f, 5.159297f));
                    VectorList_02.Add(new Vector3(1009.878f, -2893.166f, 11.26011f));
                    VectorList_01.Add(new Vector3(1001.554f, -2909.409f, 5.193929f));
                    VectorList_02.Add(new Vector3(813.5453f, -2982.219f, 6.020936f));
                    VectorList_01.Add(new Vector3(827.9223f, -2976.194f, 5.198393f));
                    VectorList_02.Add(new Vector3(1239.33f, -3002.832f, 9.319263f));
                    VectorList_01.Add(new Vector3(1216.304f, -2994.296f, 5.358681f));
                    VectorList_02.Add(new Vector3(1005.204f, -2891.085f, 11.26011f));
                    VectorList_01.Add(new Vector3(1008.078f, -2909.402f, 5.393286f));
                }
                else if (iArea == 4)//        "CYPRE")
                {
                    VectorList_02.Add(new Vector3(982.0045f, -1805.02f, 35.48458f));
                    VectorList_01.Add(new Vector3(985.834f, -1793.137f, 30.51365f));
                    VectorList_02.Add(new Vector3(906.4805f, -1932.75f, 30.62246f));
                    VectorList_01.Add(new Vector3(902.3698f, -1935.763f, 29.90796f));
                    VectorList_02.Add(new Vector3(938.6974f, -2127.271f, 30.50483f));
                    VectorList_01.Add(new Vector3(932.3851f, -2126.394f, 29.60342f));
                    VectorList_02.Add(new Vector3(902.7444f, -2273.203f, 32.54755f));
                    VectorList_01.Add(new Vector3(910.3268f, -2272.678f, 29.83482f));
                    VectorList_02.Add(new Vector3(990.9307f, -2431.029f, 31.24243f));
                    VectorList_01.Add(new Vector3(984.599f, -2434.663f, 27.98843f));
                    VectorList_02.Add(new Vector3(805.5872f, -2380.521f, 29.0977f));
                    VectorList_01.Add(new Vector3(802.0189f, -2380.978f, 28.39072f));
                    VectorList_02.Add(new Vector3(703.8163f, -2196.052f, 29.17698f));
                    VectorList_01.Add(new Vector3(708.5906f, -2197.963f, 28.48933f));
                    VectorList_02.Add(new Vector3(1018.954f, -2511.357f, 28.48421f));
                    VectorList_01.Add(new Vector3(1011.88f, -2509.148f, 27.59706f));
                    VectorList_02.Add(new Vector3(743.4415f, -1797.433f, 29.29167f));
                    VectorList_01.Add(new Vector3(737.1614f, -1796.497f, 28.58462f));

                }
                else if (iArea == 5)//        "EBURO")
                {
                    VectorList_02.Add(new Vector3(1258.926f, -1761.398f, 49.67699f));
                    VectorList_01.Add(new Vector3(1252.724f, -1749.146f, 46.87161f));
                    VectorList_02.Add(new Vector3(1250.658f, -1734.747f, 52.03196f));
                    VectorList_01.Add(new Vector3(1261.994f, -1740.818f, 49.06741f));
                    VectorList_02.Add(new Vector3(1295.26f, -1739.837f, 54.27173f));
                    VectorList_01.Add(new Vector3(1298.471f, -1728.669f, 53.11452f));
                    VectorList_02.Add(new Vector3(1289.748f, -1711.345f, 55.27933f));
                    VectorList_01.Add(new Vector3(1303.558f, -1708.63f, 54.35196f));
                    VectorList_02.Add(new Vector3(1314.942f, -1732.162f, 54.70008f));
                    VectorList_01.Add(new Vector3(1316.505f, -1719.276f, 53.91096f));
                    VectorList_02.Add(new Vector3(1316.928f, -1699.868f, 57.83794f));
                    VectorList_01.Add(new Vector3(1325.958f, -1710.673f, 54.93906f));
                    VectorList_02.Add(new Vector3(1365.561f, -1720.873f, 65.63401f));
                    VectorList_01.Add(new Vector3(1361.208f, -1706.997f, 60.67844f));
                    VectorList_02.Add(new Vector3(1355.67f, -1690.747f, 60.49119f));
                    VectorList_01.Add(new Vector3(1360.257f, -1700.94f, 60.10064f));
                    VectorList_02.Add(new Vector3(1342.94f, -1579.568f, 54.0538f));
                    VectorList_01.Add(new Vector3(1353.538f, -1577.313f, 53.16742f));
                    VectorList_02.Add(new Vector3(1411.792f, -1490.745f, 60.65726f));
                    VectorList_01.Add(new Vector3(1414.42f, -1502.572f, 59.29406f));
                    VectorList_02.Add(new Vector3(1382.07f, -1544.12f, 57.10718f));
                    VectorList_01.Add(new Vector3(1378.299f, -1537.098f, 55.76317f));
                    VectorList_02.Add(new Vector3(1379.234f, -1515.886f, 58.02826f));
                    VectorList_01.Add(new Vector3(1372.943f, -1522.675f, 56.37854f));
                    VectorList_02.Add(new Vector3(1360.438f, -1555.744f, 56.34147f));
                    VectorList_01.Add(new Vector3(1357.027f, -1544.014f, 53.8348f));
                    VectorList_02.Add(new Vector3(1337.987f, -1525.484f, 54.17774f));
                    VectorList_01.Add(new Vector3(1340.507f, -1539.055f, 52.13292f));
                    VectorList_02.Add(new Vector3(1315.645f, -1526.977f, 51.80762f));
                    VectorList_01.Add(new Vector3(1320.099f, -1542.56f, 49.60325f));
                    VectorList_02.Add(new Vector3(1326.927f, -1552.963f, 54.05164f));
                    VectorList_01.Add(new Vector3(1317.267f, -1553.681f, 49.75652f));
                    VectorList_02.Add(new Vector3(1286.392f, -1603.538f, 54.82489f));
                    VectorList_01.Add(new Vector3(1280.522f, -1585.16f, 51.23847f));
                    VectorList_02.Add(new Vector3(1230.891f, -1591.095f, 53.76609f));
                    VectorList_01.Add(new Vector3(1241.029f, -1606.726f, 52.13516f));
                    VectorList_02.Add(new Vector3(1244.871f, -1626.249f, 53.28225f));
                    VectorList_01.Add(new Vector3(1237.989f, -1615.666f, 51.32797f));
                    VectorList_02.Add(new Vector3(1206.614f, -1608.26f, 50.34828f));
                    VectorList_01.Add(new Vector3(1219.272f, -1620.496f, 48.36689f));
                    VectorList_02.Add(new Vector3(1214.302f, -1643.783f, 48.64599f));
                    VectorList_01.Add(new Vector3(1207.69f, -1633.361f, 45.57808f));
                    VectorList_02.Add(new Vector3(1193.243f, -1622.892f, 45.22145f));
                    VectorList_01.Add(new Vector3(1194.241f, -1636.156f, 42.71461f));
                    VectorList_02.Add(new Vector3(1193.184f, -1656.018f, 43.02645f));
                    VectorList_01.Add(new Vector3(1187.123f, -1647.503f, 40.10266f));

                }
                else if (iArea == 6)//        "MURRI")
                {
                    VectorList_02.Add(new Vector3(1155.98f, -1546.396f, 34.84367f));
                    VectorList_01.Add(new Vector3(1154.955f, -1515.225f, 34.10002f));
                    VectorList_02.Add(new Vector3(1192.315f, -1248.059f, 39.93959f));
                    VectorList_01.Add(new Vector3(1200.000f, -1264.236f, 34.63448f));
                    VectorList_02.Add(new Vector3(1165.555f, -1347.332f, 35.96715f));
                    VectorList_01.Add(new Vector3(1172.089f, -1347.337f, 34.20704f));
                    VectorList_02.Add(new Vector3(1098.399f, -1275.067f, 20.7339f));
                    VectorList_01.Add(new Vector3(1097.589f, -1271.286f, 19.56124f));
                    VectorList_02.Add(new Vector3(1139.061f, -961.2004f, 47.53792f));
                    VectorList_01.Add(new Vector3(1141.401f, -955.7689f, 47.78555f));

                }
                else if (iArea == 7)//        "BANNING")+"STAD")
                {
                    VectorList_02.Add(new Vector3(-130.1736f, -2240.337f, 7.989907f));
                    VectorList_01.Add(new Vector3(-126.3377f, -2247.762f, 7.219027f));
                    VectorList_02.Add(new Vector3(167.6787f, -2222.852f, 7.23611f));
                    VectorList_01.Add(new Vector3(169.2989f, -2230.687f, 5.440534f));
                    VectorList_02.Add(new Vector3(-179.5384f, -2129.996f, 22.82841f));
                    VectorList_01.Add(new Vector3(-160.7402f, -2138.382f, 16.19898f));
                    VectorList_02.Add(new Vector3(-305.949f, -2191.671f, 10.83942f));
                    VectorList_01.Add(new Vector3(-295.472f, -2186.849f, 9.631311f));
                    VectorList_02.Add(new Vector3(-238.3608f, -1899.795f, 27.82936f));
                    VectorList_01.Add(new Vector3(-235.4618f, -1862.648f, 28.29552f));
                    VectorList_02.Add(new Vector3(-248.779f, -2025.752f, 29.94605f));
                    VectorList_01.Add(new Vector3(-228.6881f, -2048.887f, 27.02817f));
                    VectorList_02.Add(new Vector3(-236.8143f, -1996.463f, 29.94605f));
                    VectorList_01.Add(new Vector3(-206.9641f, -2002.085f, 27.02783f));
                }
                else if (iArea == 8)//        "RANCHO")
                {
                    VectorList_02.Add(new Vector3(297.2595f, -2097.519f, 17.66359f));
                    VectorList_01.Add(new Vector3(281.283f, -2084.28f, 16.11637f));
                    VectorList_02.Add(new Vector3(295.5801f, -2093.154f, 17.66357f));
                    VectorList_01.Add(new Vector3(281.283f, -2084.28f, 16.11637f));
                    VectorList_02.Add(new Vector3(293.3682f, -2087.566f, 17.66357f));
                    VectorList_01.Add(new Vector3(281.283f, -2084.28f, 16.11637f));
                    VectorList_02.Add(new Vector3(293.0396f, -2086.144f, 17.66357f));
                    VectorList_01.Add(new Vector3(281.283f, -2084.28f, 16.11637f));
                    VectorList_02.Add(new Vector3(289.6334f, -2077.022f, 17.66078f));
                    VectorList_01.Add(new Vector3(281.283f, -2084.28f, 16.11637f));
                    VectorList_02.Add(new Vector3(287.9153f, -2072.455f, 17.66359f));
                    VectorList_01.Add(new Vector3(281.283f, -2084.28f, 16.11637f));
                    VectorList_02.Add(new Vector3(279.6186f, -2042.905f, 19.76756f));
                    VectorList_01.Add(new Vector3(276.5648f, -2033.824f, 17.92848f));
                    VectorList_02.Add(new Vector3(280.6062f, -2041.752f, 19.76755f));
                    VectorList_01.Add(new Vector3(276.5648f, -2033.824f, 17.92848f));
                    VectorList_02.Add(new Vector3(287.0049f, -2034.633f, 19.76756f));
                    VectorList_01.Add(new Vector3(276.5648f, -2033.824f, 17.92848f));
                    VectorList_02.Add(new Vector3(289.5717f, -2031.132f, 19.76725f));
                    VectorList_01.Add(new Vector3(276.5648f, -2033.824f, 17.92848f));
                    VectorList_02.Add(new Vector3(313.9517f, -2040.767f, 20.93602f));
                    VectorList_01.Add(new Vector3(333.4731f, -2039.357f, 20.45381f));
                    VectorList_02.Add(new Vector3(317.11f, -2043.383f, 20.93639f));
                    VectorList_01.Add(new Vector3(333.4731f, -2039.357f, 20.45381f));
                    VectorList_02.Add(new Vector3(325.714f, -2050.058f, 20.9364f));
                    VectorList_01.Add(new Vector3(333.4731f, -2039.357f, 20.45381f));
                    VectorList_02.Add(new Vector3(334.11f, -2057.375f, 20.93613f));
                    VectorList_01.Add(new Vector3(333.4731f, -2039.357f, 20.45381f));
                    VectorList_02.Add(new Vector3(342.4112f, -2064.538f, 20.93642f));
                    VectorList_01.Add(new Vector3(333.4731f, -2039.357f, 20.45381f));
                    VectorList_02.Add(new Vector3(345.5887f, -2067.228f, 20.93641f));
                    VectorList_01.Add(new Vector3(333.4731f, -2039.357f, 20.45381f));
                    VectorList_02.Add(new Vector3(357.6005f, -2073.108f, 21.74449f));
                    VectorList_01.Add(new Vector3(333.4731f, -2039.357f, 20.45381f));
                    VectorList_02.Add(new Vector3(364.8902f, -2064.472f, 21.74449f));
                    VectorList_01.Add(new Vector3(333.4731f, -2039.357f, 20.45381f));
                    VectorList_02.Add(new Vector3(371.1835f, -2057.155f, 21.7445f));
                    VectorList_01.Add(new Vector3(333.4731f, -2039.357f, 20.45381f));
                    VectorList_02.Add(new Vector3(364.3695f, -2045.641f, 22.35371f));
                    VectorList_01.Add(new Vector3(333.4731f, -2039.357f, 20.45381f));
                    VectorList_02.Add(new Vector3(360.5106f, -2042.656f, 22.3543f));
                    VectorList_01.Add(new Vector3(333.4731f, -2039.357f, 20.45381f));
                    VectorList_02.Add(new Vector3(353.1429f, -2036.6f, 22.35431f));
                    VectorList_01.Add(new Vector3(333.4731f, -2039.357f, 20.45381f));
                    VectorList_02.Add(new Vector3(351.7538f, -2035.112f, 22.35429f));
                    VectorList_01.Add(new Vector3(333.4731f, -2039.357f, 20.45381f));
                    VectorList_02.Add(new Vector3(344.6013f, -2029.163f, 22.3543f));
                    VectorList_01.Add(new Vector3(333.4731f, -2039.357f, 20.45381f));
                    VectorList_02.Add(new Vector3(343.1128f, -2028.159f, 22.35431f));
                    VectorList_01.Add(new Vector3(333.4731f, -2039.357f, 20.45381f));
                    VectorList_02.Add(new Vector3(335.6897f, -2021.638f, 22.3543f));
                    VectorList_01.Add(new Vector3(333.4731f, -2039.357f, 20.45381f));
                    VectorList_02.Add(new Vector3(332.3005f, -2018.967f, 22.35416f));
                    VectorList_01.Add(new Vector3(333.4731f, -2039.357f, 20.45381f));
                    VectorList_02.Add(new Vector3(331.4324f, -1981.701f, 24.16728f));
                    VectorList_01.Add(new Vector3(320.3594f, -1981.213f, 22.35782f));
                    VectorList_02.Add(new Vector3(334.114f, -1978.607f, 24.16728f));
                    VectorList_01.Add(new Vector3(320.3594f, -1981.213f, 22.35782f));
                    VectorList_02.Add(new Vector3(324.9895f, -1989.26f, 24.16728f));
                    VectorList_01.Add(new Vector3(320.3594f, -1981.213f, 22.35782f));
                    VectorList_02.Add(new Vector3(383.8976f, -1994.846f, 24.23498f));
                    VectorList_01.Add(new Vector3(373.5545f, -1970.037f, 23.65805f));
                    VectorList_02.Add(new Vector3(374.5296f, -1991.047f, 24.235f));
                    VectorList_01.Add(new Vector3(373.5545f, -1970.037f, 23.65805f));
                    VectorList_02.Add(new Vector3(364f, -1987.414f, 24.23451f));
                    VectorList_01.Add(new Vector3(373.5545f, -1970.037f, 23.65805f));
                    VectorList_02.Add(new Vector3(405.9168f, -1751.467f, 29.71029f));
                    VectorList_01.Add(new Vector3(394.1053f, -1743.29f, 28.61055f));
                    VectorList_02.Add(new Vector3(430.7849f, -1741f, 29.60396f));
                    VectorList_01.Add(new Vector3(423.1591f, -1729.126f, 28.65469f));
                    VectorList_02.Add(new Vector3(430.6302f, -1725.376f, 29.60146f));
                    VectorList_01.Add(new Vector3(419.5047f, -1713.15f, 28.55581f));
                    VectorList_02.Add(new Vector3(443.4339f, -1707.119f, 29.70905f));
                    VectorList_01.Add(new Vector3(432.6241f, -1698.296f, 28.5797f));
                    VectorList_02.Add(new Vector3(490.0269f, -1714.521f, 29.70519f));
                    VectorList_01.Add(new Vector3(502.9299f, -1717.948f, 28.608f));
                    VectorList_02.Add(new Vector3(479.9201f, -1736.504f, 29.15102f));
                    VectorList_01.Add(new Vector3(477.463f, -1744.357f, 28.29779f));
                    VectorList_02.Add(new Vector3(472.2731f, -1774.885f, 29.07085f));
                    VectorList_01.Add(new Vector3(479.7751f, -1776.714f, 27.98321f));
                    VectorList_02.Add(new Vector3(513.6623f, -1780.66f, 28.91397f));
                    VectorList_01.Add(new Vector3(500.4468f, -1782.357f, 27.80231f));
                    VectorList_02.Add(new Vector3(495.4278f, -1823.095f, 28.86971f));
                    VectorList_01.Add(new Vector3(484.5051f, -1813.766f, 27.56089f));
                    VectorList_02.Add(new Vector3(368.6719f, -1896.409f, 25.17853f));
                    VectorList_01.Add(new Vector3(380.2398f, -1906.966f, 24.08315f));
                    VectorList_02.Add(new Vector3(385.4476f, -1881.849f, 26.03137f));
                    VectorList_01.Add(new Vector3(396.2569f, -1891.434f, 24.66819f));
                    VectorList_02.Add(new Vector3(399.448f, -1864.953f, 26.71635f));
                    VectorList_01.Add(new Vector3(411.071f, -1877.123f, 25.58627f));
                    VectorList_02.Add(new Vector3(427.4836f, -1841.994f, 28.46345f));
                    VectorList_01.Add(new Vector3(434.6688f, -1854.25f, 26.93241f));
                    VectorList_02.Add(new Vector3(440.0391f, -1830.395f, 28.36186f));
                    VectorList_01.Add(new Vector3(448.5591f, -1841.51f, 27.25047f));
                    VectorList_02.Add(new Vector3(349.0762f, -1820.522f, 28.8941f));
                    VectorList_01.Add(new Vector3(346.9402f, -1807.412f, 27.83603f));
                    VectorList_02.Add(new Vector3(328.6295f, -1845.301f, 27.74807f));
                    VectorList_01.Add(new Vector3(316.558f, -1835.695f, 26.40304f));
                    VectorList_02.Add(new Vector3(269.8459f, -1916.823f, 26.18237f));
                    VectorList_01.Add(new Vector3(258.692f, -1905.442f, 25.32743f));
                    VectorList_02.Add(new Vector3(250.4847f, -1935.005f, 24.69927f));
                    VectorList_01.Add(new Vector3(238.5349f, -1929.15f, 23.39324f));
                    VectorList_02.Add(new Vector3(324.2186f, -1938.26f, 25.01898f));
                    VectorList_01.Add(new Vector3(335.2216f, -1950.085f, 23.79116f));
                    VectorList_02.Add(new Vector3(295.8637f, -1972.111f, 22.90082f));
                    VectorList_01.Add(new Vector3(306.892f, -1983.827f, 21.45563f));
                    VectorList_02.Add(new Vector3(280.3494f, -1993.836f, 20.8038f));
                    VectorList_01.Add(new Vector3(292.5224f, -2000.789f, 19.75769f));
                    VectorList_02.Add(new Vector3(256.7441f, -2023.586f, 19.26635f));
                    VectorList_01.Add(new Vector3(268.5673f, -2030.575f, 17.92979f));

                }
                else if (iArea == 9)//        "DAVIS")
                {
                    VectorList_02.Add(new Vector3(-50.39761f, -1783.597f, 28.30082f));
                    VectorList_01.Add(new Vector3(-57.99997f, -1797.434f, 26.75445f));
                    VectorList_02.Add(new Vector3(-20.35306f, -1858.548f, 25.40867f));
                    VectorList_01.Add(new Vector3(-12.61712f, -1846.052f, 24.31055f));
                    VectorList_02.Add(new Vector3(-10.39145f, -1883.942f, 24.14204f));
                    VectorList_01.Add(new Vector3(1.918285f, -1876.412f, 23.1049f));
                    VectorList_02.Add(new Vector3(5.216082f, -1884.246f, 23.69726f));
                    VectorList_01.Add(new Vector3(16.6125f, -1871.542f, 22.67904f));
                    VectorList_02.Add(new Vector3(45.92031f, -1864.545f, 23.27833f));
                    VectorList_01.Add(new Vector3(31.95667f, -1873.358f, 22.1308f));
                    VectorList_02.Add(new Vector3(23.177f, -1896.414f, 22.96589f));
                    VectorList_01.Add(new Vector3(34.17988f, -1886.511f, 21.71531f));
                    VectorList_02.Add(new Vector3(54.39722f, -1873.642f, 22.80583f));
                    VectorList_01.Add(new Vector3(52.75089f, -1878.867f, 21.62855f));
                    VectorList_02.Add(new Vector3(39.40047f, -1911.863f, 21.9535f));
                    VectorList_01.Add(new Vector3(53.0804f, -1901.614f, 20.94305f));
                    VectorList_02.Add(new Vector3(76.59599f, -1948.475f, 21.17416f));
                    VectorList_01.Add(new Vector3(91.37643f, -1935.88f, 20.10258f));
                    VectorList_02.Add(new Vector3(85.55811f, -1958.879f, 21.12167f));
                    VectorList_01.Add(new Vector3(98.82529f, -1948.292f, 20.11119f));
                    VectorList_02.Add(new Vector3(114.092f, -1961.006f, 21.33425f));
                    VectorList_01.Add(new Vector3(107.2141f, -1949.395f, 20.13007f));
                    VectorList_02.Add(new Vector3(100.4846f, -1912.679f, 21.40742f));
                    VectorList_01.Add(new Vector3(93.13752f, -1924.911f, 20.08893f));
                    VectorList_02.Add(new Vector3(104.29f, -1885.105f, 24.31878f));
                    VectorList_01.Add(new Vector3(106.311f, -1878.515f, 23.34496f));
                    VectorList_02.Add(new Vector3(130.2774f, -1853.328f, 25.23479f));
                    VectorList_01.Add(new Vector3(124.8095f, -1868.742f, 23.66036f));
                    VectorList_02.Add(new Vector3(128.0303f, -1896.44f, 23.6742f));
                    VectorList_01.Add(new Vector3(137.0386f, -1882.512f, 22.94671f));
                    VectorList_02.Add(new Vector3(171.1915f, -1871.533f, 24.40023f));
                    VectorList_01.Add(new Vector3(162.018f, -1884.568f, 23.05028f));
                    VectorList_02.Add(new Vector3(192.1942f, -1883.464f, 25.05676f));
                    VectorList_01.Add(new Vector3(185.4829f, -1895.689f, 23.09596f));
                    VectorList_02.Add(new Vector3(179.1025f, -1924.555f, 21.37102f));
                    VectorList_01.Add(new Vector3(175.1854f, -1934.801f, 20.40962f));
                    VectorList_02.Add(new Vector3(149.0806f, -1960.494f, 19.45883f));
                    VectorList_01.Add(new Vector3(160.0891f, -1971.575f, 17.89874f));

                }
                else if (iArea == 10)//        "LOSPUER"){  (MyZone == "DELSOL")
                {
                    VectorList_02.Add(new Vector3(-1040.85f, -1475.032f, 5.57517f));
                    VectorList_01.Add(new Vector3(-1047.524f, -1466.829f, 4.423398f));
                    VectorList_02.Add(new Vector3(-1038.237f, -1396.715f, 5.553193f));
                    VectorList_01.Add(new Vector3(-1048.505f, -1398.825f, 4.83193f));
                    VectorList_02.Add(new Vector3(-822.8834f, -1222.964f, 7.36541f));
                    VectorList_01.Add(new Vector3(-828.3438f, -1216.498f, 6.34208f));
                    VectorList_02.Add(new Vector3(-783.1737f, -1351.898f, 8.99978f));
                    VectorList_01.Add(new Vector3(-783.9278f, -1333.898f, 4.407724f));
                    VectorList_02.Add(new Vector3(-753.3792f, -1511.745f, 5.016343f));
                    VectorList_01.Add(new Vector3(-753.189f, -1501.009f, 4.408158f));
                    VectorList_02.Add(new Vector3(-499.4994f, -1714.084f, 19.89919f));
                    VectorList_01.Add(new Vector3(-508.1526f, -1720.533f, 18.72518f));
                    VectorList_02.Add(new Vector3(-621.099f, -1640.762f, 25.97497f));
                    VectorList_01.Add(new Vector3(-625.2062f, -1645.418f, 25.23293f));

                }
                else if (iArea == 11)//        "CHAMH")
                {
                    VectorList_02.Add(new Vector3(-212.6789f, -1669.577f, 34.4632f));
                    VectorList_01.Add(new Vector3(-187.9321f, -1672.19f, 32.86395f));
                    VectorList_02.Add(new Vector3(-213.5734f, -1608.434f, 34.86931f));
                    VectorList_01.Add(new Vector3(-186.8391f, -1607.341f, 33.37147f));
                    VectorList_02.Add(new Vector3(-170.9348f, -1538.064f, 35.1156f));
                    VectorList_01.Add(new Vector3(-148.8884f, -1552.597f, 34.02704f));
                    VectorList_02.Add(new Vector3(-117.0381f, -1477.216f, 33.8227f));
                    VectorList_01.Add(new Vector3(-133.6183f, -1500.327f, 33.46594f));
                    VectorList_02.Add(new Vector3(-158.1097f, -1680.082f, 33.83337f));
                    VectorList_01.Add(new Vector3(-163.4962f, -1701.08f, 30.80787f));
                    VectorList_02.Add(new Vector3(-141.8925f, -1693.16f, 32.87245f));
                    VectorList_01.Add(new Vector3(-163.4962f, -1701.08f, 30.80787f));
                    VectorList_02.Add(new Vector3(-147.9179f, -1688.423f, 32.87242f));
                    VectorList_01.Add(new Vector3(-163.4962f, -1701.08f, 30.80787f));
                    VectorList_02.Add(new Vector3(-142.2503f, -1693.109f, 36.1673f));
                    VectorList_01.Add(new Vector3(-163.4962f, -1701.08f, 30.80787f));
                    VectorList_02.Add(new Vector3(-147.5f, -1688.599f, 36.16715f));
                    VectorList_01.Add(new Vector3(-163.4962f, -1701.08f, 30.80787f));
                    VectorList_02.Add(new Vector3(-158.2306f, -1679.633f, 36.96638f));
                    VectorList_01.Add(new Vector3(-163.4962f, -1701.08f, 30.80787f));
                    VectorList_02.Add(new Vector3(-116.7299f, -1660.611f, 32.56437f));
                    VectorList_01.Add(new Vector3(-101.5155f, -1679.808f, 28.62062f));
                    VectorList_02.Add(new Vector3(-80.86539f, -1612.877f, 31.48242f));
                    VectorList_01.Add(new Vector3(-59.22719f, -1629.017f, 28.62579f));
                    VectorList_02.Add(new Vector3(-138.0755f, -1590.171f, 34.24369f));
                    VectorList_01.Add(new Vector3(-158.3103f, -1577.135f, 34.18251f));

                }
                else if (iArea == 12)//        "STRAW")
                {
                    VectorList_02.Add(new Vector3(20.65767f, -1506.336f, 31.85014f));
                    VectorList_01.Add(new Vector3(12.1674f, -1519.459f, 28.89222f));
                    VectorList_02.Add(new Vector3(-295.9617f, -1342.609f, 31.31202f));
                    VectorList_01.Add(new Vector3(-289.9343f, -1345.626f, 30.58545f));
                    VectorList_02.Add(new Vector3(-121.1603f, -1290.486f, 29.3136f));
                    VectorList_01.Add(new Vector3(-113.7367f, -1291.787f, 28.59361f));
                    VectorList_02.Add(new Vector3(87.13698f, -1295.678f, 29.20869f));
                    VectorList_01.Add(new Vector3(81.75984f, -1302.132f, 28.60637f));
                    VectorList_02.Add(new Vector3(-32.69242f, -1446.294f, 31.89136f));
                    VectorList_01.Add(new Vector3(-38.02354f, -1450.038f, 30.98904f));
                    VectorList_02.Add(new Vector3(-64.27878f, -1449.677f, 32.52492f));
                    VectorList_01.Add(new Vector3(-63.81673f, -1462.527f, 31.47367f));
                    VectorList_02.Add(new Vector3(-83.0243f, -1399.693f, 29.32075f));
                    VectorList_01.Add(new Vector3(-80.07758f, -1405.342f, 28.81458f));
                    VectorList_02.Add(new Vector3(53.03144f, -1479.529f, 29.27781f));
                    VectorList_01.Add(new Vector3(68.60536f, -1476.826f, 28.69232f));
                }
                else //        "LMESA")
                {
                    VectorList_02.Add(new Vector3(792.9578f, -735.9182f, 27.56665f));
                    VectorList_01.Add(new Vector3(781.3509f, -749.787f, 26.57809f));
                    VectorList_02.Add(new Vector3(895.0829f, -896.4345f, 27.78768f));
                    VectorList_01.Add(new Vector3(886.1035f, -903.9097f, 25.76367f));
                    VectorList_02.Add(new Vector3(871.4327f, -1146.561f, 25.98947f));
                    VectorList_01.Add(new Vector3(866.3556f, -1155.935f, 23.91385f));
                    VectorList_02.Add(new Vector3(826.7053f, -1289.793f, 28.24066f));
                    VectorList_01.Add(new Vector3(808.5062f, -1289.575f, 25.62454f));
                    VectorList_02.Add(new Vector3(830.7275f, -1054.169f, 28.66163f));
                    VectorList_01.Add(new Vector3(825.2499f, -1066.779f, 27.53641f));
                    VectorList_02.Add(new Vector3(844.934f, -851.4561f, 26.54606f));
                    VectorList_01.Add(new Vector3(828.899f, -839.3197f, 25.84308f));
                    VectorList_02.Add(new Vector3(793.6158f, -735.8035f, 27.74888f));
                    VectorList_01.Add(new Vector3(784.0593f, -737.003f, 27.11176f));
                }

            }
            else if (Local == 2)
            {
                if (bRandom)
                    iArea = RandInt(1, 17);

                if (iArea == 1)//        "SKID" 
                {
                    VectorList_02.Add(new Vector3(354.2527f, -1028.431f, 29.33105f));
                    VectorList_01.Add(new Vector3(357.0464f, -1036.737f, 28.64928f));
                    VectorList_02.Add(new Vector3(433.7992f, -982.1172f, 30.70951f));
                    VectorList_01.Add(new Vector3(402.9555f, -983.3735f, 28.84099f));
                    VectorList_02.Add(new Vector3(396.8822f, -1169.79f, 29.29176f));
                    VectorList_01.Add(new Vector3(397.0258f, -1158.473f, 28.7617f));
                    VectorList_02.Add(new Vector3(417.872f, -767.4501f, 29.41702f));
                    VectorList_01.Add(new Vector3(409.3581f, -768.8823f, 28.73415f));
                    VectorList_02.Add(new Vector3(391.4617f, -930.6711f, 29.41866f));
                    VectorList_01.Add(new Vector3(399.9209f, -926.3832f, 28.82933f));
                    VectorList_02.Add(new Vector3(377.8676f, -999.1207f, 29.45313f));
                    VectorList_01.Add(new Vector3(395.0699f, -1009.7f, 28.8324f));
                }
                else if (iArea == 2)//        "LEGSQU" 
                {
                    VectorList_02.Add(new Vector3(177.0969f, -979.6016f, 29.99313f));
                    VectorList_01.Add(new Vector3(168.3188f, -1010.917f, 28.80831f));
                    VectorList_02.Add(new Vector3(104.949f, -932.8635f, 29.81259f));
                    VectorList_01.Add(new Vector3(116.4733f, -936.0852f, 29.14896f));
                    VectorList_02.Add(new Vector3(184.9182f, -887.6499f, 31.11672f));
                    VectorList_01.Add(new Vector3(171.2225f, -871.0737f, 29.9788f));
                    VectorList_02.Add(new Vector3(273.7766f, -833.3542f, 29.41132f));
                    VectorList_01.Add(new Vector3(264.5758f, -838.8533f, 28.76188f));
                    VectorList_02.Add(new Vector3(287.8855f, -919.9745f, 29.29419f));
                    VectorList_01.Add(new Vector3(277.9113f, -922.6801f, 28.36518f));
                }
                else if (iArea == 3)//        "TEXTI"  
                {
                    VectorList_02.Add(new Vector3(458.9576f, -853.5832f, 27.33997f));
                    VectorList_01.Add(new Vector3(470.0547f, -829.0839f, 25.8446f));
                    VectorList_02.Add(new Vector3(460.754f, -769.7076f, 27.3578f));
                    VectorList_01.Add(new Vector3(455.3673f, -763.0317f, 26.82866f));
                    VectorList_02.Add(new Vector3(394.7988f, -711.6652f, 29.28482f));
                    VectorList_01.Add(new Vector3(401.2914f, -712.3533f, 28.64416f));
                    VectorList_02.Add(new Vector3(418.4028f, -767.5741f, 29.42775f));
                    VectorList_01.Add(new Vector3(410.084f, -769.1244f, 28.67112f));
                    VectorList_02.Add(new Vector3(494.0114f, -571.1681f, 24.55081f));
                    VectorList_01.Add(new Vector3(504.4706f, -581.2975f, 24.25294f));
                }
                else if (iArea == 4)//        "PBOX"   
                {
                    VectorList_02.Add(new Vector3(-115.7897f, -603.7586f, 36.28072f));
                    VectorList_01.Add(new Vector3(-106.2625f, -608.1697f, 35.52522f));
                    VectorList_02.Add(new Vector3(-66.73456f, -801.8816f, 44.22729f));
                    VectorList_01.Add(new Vector3(-51.92704f, -784.653f, 43.60859f));
                    VectorList_02.Add(new Vector3(7.609715f, -706.3086f, 45.97303f));
                    VectorList_01.Add(new Vector3(35.64244f, -715.6297f, 43.52236f));
                    VectorList_02.Add(new Vector3(110.041f, -637.1196f, 44.24202f));
                    VectorList_01.Add(new Vector3(96.78452f, -633.0899f, 43.6225f));
                    VectorList_02.Add(new Vector3(92.1524f, -741.7303f, 45.75599f));
                    VectorList_01.Add(new Vector3(58.26967f, -741.9115f, 43.56817f));
                    VectorList_02.Add(new Vector3(-97.36321f, -1014.177f, 27.27522f));
                    VectorList_01.Add(new Vector3(-97.16437f, -1020.443f, 26.74354f));
                    VectorList_02.Add(new Vector3(-177.6473f, -1158.428f, 23.81366f));
                    VectorList_01.Add(new Vector3(-176.7727f, -1149.438f, 22.50645f));
                    VectorList_02.Add(new Vector3(-286.7964f, -1060.97f, 27.20541f));
                    VectorList_01.Add(new Vector3(-277.104f, -1064.466f, 25.28302f));
                    VectorList_02.Add(new Vector3(-210.6174f, -1021.075f, 30.1405f));
                    VectorList_01.Add(new Vector3(-215.2424f, -1005.848f, 28.64495f));
                    VectorList_02.Add(new Vector3(-232.0792f, -915.1109f, 32.31084f));
                    VectorList_01.Add(new Vector3(-211.4211f, -921.6801f, 28.6483f));
                    VectorList_02.Add(new Vector3(-185.1166f, -788.0728f, 30.45403f));
                    VectorList_01.Add(new Vector3(-165.662f, -797.7302f, 31.10581f));
                    VectorList_02.Add(new Vector3(102.106f, -818.2697f, 31.34554f));
                    VectorList_01.Add(new Vector3(105.2083f, -807.3613f, 30.75293f));
                    VectorList_02.Add(new Vector3(5.52696f, -984.9729f, 29.3564f));
                    VectorList_01.Add(new Vector3(8.179337f, -971.4874f, 28.87354f));
                    VectorList_02.Add(new Vector3(43.79702f, -998.0366f, 29.33619f));
                    VectorList_01.Add(new Vector3(48.0556f, -993.5015f, 28.70993f));
                }
                else if (iArea == 5)//        "DTVINE"  
                {
                    VectorList_02.Add(new Vector3(58.5491f, 224.3279f, 109.3446f));
                    VectorList_01.Add(new Vector3(60.29726f, 236.8945f, 108.9385f));
                    VectorList_02.Add(new Vector3(285.691f, 200.2816f, 104.3727f));
                    VectorList_01.Add(new Vector3(291.9229f, 176.447f, 103.5972f));
                    VectorList_02.Add(new Vector3(339.964f, 179.0237f, 103.0279f));
                    VectorList_01.Add(new Vector3(333.5558f, 160.7843f, 102.7396f));
                    VectorList_02.Add(new Vector3(299.9526f, 135.8692f, 104.1121f));
                    VectorList_01.Add(new Vector3(304.2964f, 145.2028f, 103.1819f));
                    VectorList_02.Add(new Vector3(220.6625f, 304.7425f, 105.5735f));
                    VectorList_01.Add(new Vector3(232.6737f, 301.8434f, 105.0194f));
                    VectorList_02.Add(new Vector3(80.90257f, 273.1755f, 110.2102f));
                    VectorList_01.Add(new Vector3(80.73256f, 268.3891f, 109.1223f));
                    VectorList_02.Add(new Vector3(225.0676f, 336.988f, 105.6021f));
                    VectorList_01.Add(new Vector3(231.3641f, 346.6825f, 104.9356f));
                    VectorList_02.Add(new Vector3(511.6814f, 228.5841f, 104.7448f));
                    VectorList_01.Add(new Vector3(525.1632f, 253.7698f, 102.4465f));
                    VectorList_02.Add(new Vector3(554.7083f, 150.9967f, 99.23253f));
                    VectorList_01.Add(new Vector3(543.8952f, 150.5306f, 98.23286f));
                    VectorList_02.Add(new Vector3(538.4095f, 101.4291f, 96.52667f));
                    VectorList_01.Add(new Vector3(528.6589f, 105.3687f, 95.66783f));
                    VectorList_02.Add(new Vector3(619.7996f, 18.79947f, 87.9332f));
                    VectorList_01.Add(new Vector3(624.3416f, 30.71176f, 87.93405f));
                }
                else if (iArea == 6)//        "KOREAT" 
                {
                    VectorList_02.Add(new Vector3(-491.3341f, -705.1888f, 29.66495f));
                    VectorList_01.Add(new Vector3(-492.4659f, -668.1738f, 32.25398f));
                    VectorList_02.Add(new Vector3(-818.8256f, -575.5591f, 30.27625f));
                    VectorList_01.Add(new Vector3(-805.1441f, -569.605f, 29.59624f));
                    VectorList_02.Add(new Vector3(-1006.886f, -729.0814f, 21.52976f));
                    VectorList_01.Add(new Vector3(-1012.787f, -720.1366f, 20.16511f));
                    VectorList_02.Add(new Vector3(-796.8664f, -684.7003f, 29.54898f));
                    VectorList_01.Add(new Vector3(-800.4079f, -667.2416f, 27.86353f));
                    VectorList_02.Add(new Vector3(-668.2699f, -971.0567f, 22.34084f));
                    VectorList_01.Add(new Vector3(-670.9226f, -961.2521f, 20.42223f));
                    VectorList_02.Add(new Vector3(-667.4276f, -1105.683f, 14.68489f));
                    VectorList_01.Add(new Vector3(-677.4309f, -1101.269f, 13.99504f));
                    VectorList_02.Add(new Vector3(-699.7384f, -1032.83f, 16.10666f));
                    VectorList_01.Add(new Vector3(-689.7061f, -1054.854f, 14.72245f));
                    VectorList_02.Add(new Vector3(-759.088f, -1047.608f, 13.5029f));
                    VectorList_01.Add(new Vector3(-744.5236f, -1048.969f, 11.68449f));
                    VectorList_02.Add(new Vector3(-601.835f, -1127.903f, 22.32424f));
                    VectorList_01.Add(new Vector3(-589.35f, -1129.539f, 21.64803f));
                    VectorList_02.Add(new Vector3(-729.3005f, -879.8181f, 22.71092f));
                    VectorList_01.Add(new Vector3(-740.5681f, -876.4502f, 21.08265f));
                    VectorList_02.Add(new Vector3(-693.7856f, -810.1913f, 24.01492f));
                    VectorList_01.Add(new Vector3(-691.8843f, -826.7587f, 23.26679f));
                    VectorList_02.Add(new Vector3(-471.3071f, -865.2595f, 23.96403f));
                    VectorList_01.Add(new Vector3(-472.2751f, -872.899f, 23.29834f));
                    VectorList_02.Add(new Vector3(-598.7448f, -930.2391f, 23.86363f));
                    VectorList_01.Add(new Vector3(-603.0508f, -953.1522f, 21.49878f));
                    VectorList_02.Add(new Vector3(-546.7633f, -810.2938f, 30.7459f));
                    VectorList_01.Add(new Vector3(-549.5628f, -827.8044f, 27.73886f));
                    VectorList_02.Add(new Vector3(-580.7145f, -778.4678f, 25.01723f));
                    VectorList_01.Add(new Vector3(-616.8736f, -778.3973f, 24.68242f));
                }
                else if (iArea == 7)//        "VCANA"   
                {
                    VectorList_02.Add(new Vector3(-951.0064f, -905.6769f, 2.745484f));
                    VectorList_01.Add(new Vector3(-948.0278f, -898.9374f, 1.633701f));
                    VectorList_02.Add(new Vector3(-947.7943f, -927.8657f, 2.14531f));
                    VectorList_01.Add(new Vector3(-938.8552f, -926.405f, 1.61489f));
                    VectorList_02.Add(new Vector3(-927.522f, -949.3549f, 2.746102f));
                    VectorList_01.Add(new Vector3(-920.4854f, -950.0219f, 1.63327f));
                    VectorList_02.Add(new Vector3(-864.665f, -1101.799f, 6.447026f));
                    VectorList_01.Add(new Vector3(-852.7875f, -1096.924f, 1.632867f));
                    VectorList_02.Add(new Vector3(-1035.512f, -1227.947f, 6.346426f));
                    VectorList_01.Add(new Vector3(-1039.014f, -1234.404f, 5.340991f));
                    VectorList_02.Add(new Vector3(-1126.493f, -1172.118f, 2.357592f));
                    VectorList_01.Add(new Vector3(-1132.724f, -1174f, 1.654989f));
                    VectorList_02.Add(new Vector3(-1136.023f, -1153.578f, 2.744121f));
                    VectorList_01.Add(new Vector3(-1144.977f, -1154.373f, 2.274264f));
                    VectorList_02.Add(new Vector3(-1143.087f, -1144.126f, 2.853676f));
                    VectorList_01.Add(new Vector3(-1148.846f, -1145.358f, 2.308584f));
                    VectorList_02.Add(new Vector3(-1183.264f, -1064.341f, 2.150421f));
                    VectorList_01.Add(new Vector3(-1188.896f, -1065.672f, 1.620275f));
                    VectorList_02.Add(new Vector3(-1191.291f, -1054.983f, 2.150431f));
                    VectorList_01.Add(new Vector3(-1197.972f, -1056.369f, 1.621082f));
                    VectorList_02.Add(new Vector3(-1195.782f, -1036.116f, 2.167662f));
                    VectorList_01.Add(new Vector3(-1205.348f, -1040.543f, 1.62129f));
                    VectorList_02.Add(new Vector3(-1201.187f, -1032.25f, 2.150407f));
                    VectorList_01.Add(new Vector3(-1206.196f, -1032.939f, 1.620837f));
                    VectorList_02.Add(new Vector3(-1090.517f, -925.978f, 3.145119f));
                    VectorList_01.Add(new Vector3(-1095.53f, -918.2084f, 2.423995f));
                    VectorList_02.Add(new Vector3(-1031.229f, -902.9789f, 3.69277f));
                    VectorList_01.Add(new Vector3(-1036.207f, -898.7838f, 3.906092f));
                    VectorList_02.Add(new Vector3(-1022.78f, -896.4982f, 5.418818f));
                    VectorList_01.Add(new Vector3(-1024.35f, -889.9529f, 5.115498f));
                    VectorList_02.Add(new Vector3(-1116.821f, -895.3629f, 7.796868f));
                    VectorList_01.Add(new Vector3(-1104.145f, -913.7859f, 2.350959f));
                    VectorList_02.Add(new Vector3(-1151.271f, -913.3595f, 6.628776f));
                    VectorList_01.Add(new Vector3(-1139.727f, -927.0404f, 2.08931f));
                    VectorList_02.Add(new Vector3(-1179.832f, -929.8004f, 6.628771f));
                    VectorList_01.Add(new Vector3(-1174.866f, -945.9295f, 2.647262f));
                    VectorList_02.Add(new Vector3(-1075.694f, -1026.807f, 4.545152f));
                    VectorList_01.Add(new Vector3(-1068.656f, -1021.217f, 1.508651f));
                    VectorList_02.Add(new Vector3(-1108.508f, -1041.39f, 2.150356f));
                    VectorList_01.Add(new Vector3(-1107.058f, -1048.322f, 1.620899f));
                    VectorList_02.Add(new Vector3(-1122.273f, -1046.655f, 2.150357f));
                    VectorList_01.Add(new Vector3(-1121.254f, -1052.749f, 1.621226f));
                    VectorList_02.Add(new Vector3(-1127.787f, -1081.126f, 4.222689f));
                    VectorList_01.Add(new Vector3(-1133.471f, -1071.877f, 1.57613f));
                    VectorList_02.Add(new Vector3(-1114.697f, -1069.593f, 2.150359f));
                    VectorList_01.Add(new Vector3(-1122.547f, -1065.817f, 1.533568f));
                    VectorList_02.Add(new Vector3(-1068.539f, -1049.219f, 6.411661f));
                    VectorList_01.Add(new Vector3(-1071.924f, -1038.167f, 1.585658f));
                    VectorList_02.Add(new Vector3(-1022.088f, -1022.706f, 2.150359f));
                    VectorList_01.Add(new Vector3(-1024.648f, -1013.672f, 1.609797f));
                    VectorList_02.Add(new Vector3(-1008.787f, -1014.9f, 2.150308f));
                    VectorList_01.Add(new Vector3(-1010.491f, -1007.871f, 1.620196f));
                    VectorList_02.Add(new Vector3(-990.2632f, -975.8735f, 4.222694f));
                    VectorList_01.Add(new Vector3(-984.612f, -983.4828f, 1.519559f));
                    VectorList_02.Add(new Vector3(-1022.818f, -998.0176f, 2.150195f));
                    VectorList_01.Add(new Vector3(-1014.343f, -1000.667f, 1.580476f));
                    VectorList_02.Add(new Vector3(-1053.879f, -1006.539f, 2.150193f));
                    VectorList_01.Add(new Vector3(-1049.045f, -1018.238f, 1.620131f));
                    VectorList_02.Add(new Vector3(-1068.322f, -1163.15f, 2.745448f));
                    VectorList_01.Add(new Vector3(-1071.766f, -1158.873f, 1.581696f));
                    VectorList_02.Add(new Vector3(-1046.051f, -1159.626f, 2.158599f));
                    VectorList_01.Add(new Vector3(-1047.434f, -1150.759f, 1.629194f));
                    VectorList_02.Add(new Vector3(-1035.156f, -1129.51f, 2.158599f));
                    VectorList_01.Add(new Vector3(-1035.165f, -1136.228f, 1.53474f));
                    VectorList_02.Add(new Vector3(-1034.903f, -1147.1f, 2.158599f));
                    VectorList_01.Add(new Vector3(-1042.317f, -1143.031f, 1.560673f));
                    VectorList_02.Add(new Vector3(-1024.528f, -1139.903f, 2.745337f));
                    VectorList_01.Add(new Vector3(-1025.213f, -1134.372f, 1.653199f));
                    VectorList_02.Add(new Vector3(-942.9496f, -1075.458f, 2.745272f));
                    VectorList_01.Add(new Vector3(-937.7101f, -1079.082f, 1.564626f));
                    VectorList_02.Add(new Vector3(-952.4178f, -1077.698f, 2.671045f));
                    VectorList_01.Add(new Vector3(-949.9753f, -1082.455f, 1.620425f));
                    VectorList_02.Add(new Vector3(-948.5066f, -1107.555f, 2.171847f));
                    VectorList_01.Add(new Vector3(-952.9219f, -1093.12f, 1.620167f));
                    VectorList_02.Add(new Vector3(-960.0089f, -1109.859f, 2.150314f));
                    VectorList_01.Add(new Vector3(-962.6642f, -1101.267f, 1.620263f));
                    VectorList_02.Add(new Vector3(-976.8805f, -1092.348f, 4.22256f));
                    VectorList_01.Add(new Vector3(-970.9733f, -1099.311f, 1.592695f));
                    VectorList_02.Add(new Vector3(-991.6511f, -1103.455f, 2.150309f));
                    VectorList_01.Add(new Vector3(-983.785f, -1106.11f, 1.490934f));
                    VectorList_02.Add(new Vector3(-986.5675f, -1121.498f, 4.545396f));
                    VectorList_01.Add(new Vector3(-993.0151f, -1115.217f, 1.615117f));
                }
                else if (iArea == 8)//        "VESP"   
                {
                    VectorList_02.Add(new Vector3(-1247.026f, -1358.836f, 7.820425f));
                    VectorList_01.Add(new Vector3(-1239.632f, -1355.699f, 3.180847f));
                    VectorList_02.Add(new Vector3(-1272.103f, -1295.553f, 8.285895f));
                    VectorList_01.Add(new Vector3(-1258.842f, -1302.896f, 3.152466f));
                    VectorList_02.Add(new Vector3(-1237.916f, -1238.131f, 11.02771f));
                    VectorList_01.Add(new Vector3(-1251.62f, -1239.837f, 5.372354f));
                    VectorList_02.Add(new Vector3(-1271.541f, -1198.63f, 5.366247f));
                    VectorList_01.Add(new Vector3(-1270.787f, -1213.683f, 4.082492f));
                    VectorList_02.Add(new Vector3(-1300.529f, -1233.508f, 4.486339f));
                    VectorList_01.Add(new Vector3(-1294.273f, -1232.306f, 3.760854f));
                    VectorList_02.Add(new Vector3(-1286.419f, -1267.013f, 4.516672f));
                    VectorList_01.Add(new Vector3(-1280.713f, -1274.322f, 3.15608f));
                }
                else if (iArea == 9)//        "BEACH"  
                {
                    VectorList_02.Add(new Vector3(-1418.114f, -1021.361f, 4.927687f));
                    VectorList_01.Add(new Vector3(-1397.046f, -1028.397f, 3.637372f));
                    VectorList_02.Add(new Vector3(-1348.222f, -1081.693f, 6.938175f));
                    VectorList_01.Add(new Vector3(-1329.58f, -1094.18f, 6.160664f));
                    VectorList_02.Add(new Vector3(-1347.625f, -1214.454f, 5.944139f));
                    VectorList_01.Add(new Vector3(-1349.045f, -1201.545f, 3.703147f));
                    VectorList_02.Add(new Vector3(-1182.977f, -1773.753f, 3.908463f));
                    VectorList_01.Add(new Vector3(-1175.066f, -1771.921f, 3.109406f));
                    VectorList_02.Add(new Vector3(-1155.814f, -1574.51f, 8.345077f));
                    VectorList_01.Add(new Vector3(-1149.69f, -1583.255f, 3.570674f));
                    VectorList_02.Add(new Vector3(-1174.325f, -1598.715f, 4.373224f));
                    VectorList_01.Add(new Vector3(-1155.435f, -1588.295f, 3.608639f));
                    VectorList_02.Add(new Vector3(-1213.075f, -1531.63f, 4.283716f));
                    VectorList_01.Add(new Vector3(-1192.247f, -1527.082f, 3.59797f));
                    VectorList_02.Add(new Vector3(-1226.105f, -1439.336f, 4.336521f));
                    VectorList_01.Add(new Vector3(-1207.356f, -1438.97f, 3.637824f));
                    VectorList_02.Add(new Vector3(-1301.149f, -1387.367f, 4.482184f));
                    VectorList_01.Add(new Vector3(-1285.8f, -1393.937f, 3.718754f));
                }
                else if (iArea == 10)//        "DELBE"   
                {
                    VectorList_02.Add(new Vector3(-1666.039f, -978.4476f, 8.159396f));
                    VectorList_01.Add(new Vector3(-1647.855f, -950.4069f, 7.125754f));
                    VectorList_02.Add(new Vector3(-1519.308f, -893.8687f, 13.68465f));
                    VectorList_01.Add(new Vector3(-1518.693f, -880.8948f, 9.37102f));
                    VectorList_02.Add(new Vector3(-1605.442f, -1001.208f, 13.01739f));
                    VectorList_01.Add(new Vector3(-1606.668f, -1012.511f, 12.27762f));
                    VectorList_02.Add(new Vector3(-1558.287f, -968.8815f, 17.41216f));
                    VectorList_01.Add(new Vector3(-1554.237f, -982.1717f, 12.2773f));
                    VectorList_02.Add(new Vector3(-1608.203f, -1073.929f, 13.01849f));
                    VectorList_01.Add(new Vector3(-1600.424f, -1043.029f, 12.28701f));
                }
                else if (iArea == 11)//        "DELPE" MyZone 0)//        "SanAnd"  
                {
                    VectorList_02.Add(new Vector3(-1371.109f, -685.431f, 24.98824f));
                    VectorList_01.Add(new Vector3(-1369.095f, -693.772f, 24.12055f));
                    VectorList_02.Add(new Vector3(-1285.63f, -566.7027f, 31.7124f));
                    VectorList_01.Add(new Vector3(-1276.193f, -555.6957f, 29.53902f));
                    VectorList_02.Add(new Vector3(-1388.62f, -586.6864f, 30.21924f));
                    VectorList_01.Add(new Vector3(-1393.777f, -581.3997f, 29.44041f));
                    VectorList_02.Add(new Vector3(-1540.682f, -454.5637f, 40.51902f));
                    VectorList_01.Add(new Vector3(-1533.505f, -441.2186f, 34.70186f));
                    VectorList_02.Add(new Vector3(-1558.364f, -417.0175f, 38.09856f));
                    VectorList_01.Add(new Vector3(-1568.341f, -421.9239f, 37.19434f));
                    VectorList_02.Add(new Vector3(-1697.246f, -422.2608f, 46.02833f));
                    VectorList_01.Add(new Vector3(-1710.424f, -411.8491f, 44.21511f));
                    VectorList_02.Add(new Vector3(-1710.878f, -494.3299f, 41.61913f));
                    VectorList_01.Add(new Vector3(-1715.123f, -502.8709f, 37.30872f));
                    VectorList_02.Add(new Vector3(-1662.496f, -532.7106f, 36.02411f));
                    VectorList_01.Add(new Vector3(-1667.62f, -542.1003f, 34.23432f));
                    VectorList_02.Add(new Vector3(-1459.068f, -659.1591f, 33.38121f));
                    VectorList_01.Add(new Vector3(-1465.437f, -654.7037f, 28.76304f));
                    VectorList_02.Add(new Vector3(-1456.073f, -648.6187f, 33.38124f));
                    VectorList_01.Add(new Vector3(-1465.565f, -654.2465f, 28.85791f));
                    VectorList_02.Add(new Vector3(-1472.997f, -646.3132f, 33.3812f));
                    VectorList_01.Add(new Vector3(-1465.436f, -654.7052f, 28.76287f));
                    VectorList_02.Add(new Vector3(-1481.831f, -652.4942f, 29.58295f));
                    VectorList_01.Add(new Vector3(-1465.436f, -654.7052f, 28.76331f));
                    VectorList_02.Add(new Vector3(-1467.847f, -665.3153f, 29.58303f));
                    VectorList_01.Add(new Vector3(-1465.436f, -654.7053f, 28.76324f));
                    VectorList_02.Add(new Vector3(-1453.239f, -653.4661f, 29.5829f));
                    VectorList_01.Add(new Vector3(-1465.436f, -654.7053f, 28.76223f));
                    VectorList_02.Add(new Vector3(-1356.744f, -791.3961f, 20.24218f));
                    VectorList_01.Add(new Vector3(-1362.593f, -800.9634f, 18.49312f));
                    VectorList_02.Add(new Vector3(-1279.467f, -876.9868f, 11.93032f));
                    VectorList_01.Add(new Vector3(-1286.797f, -883.9025f, 10.54494f));
                    VectorList_02.Add(new Vector3(-1329.545f, -938.4286f, 12.35571f));
                    VectorList_01.Add(new Vector3(-1318.439f, -923.1606f, 10.46153f));
                }
                else if (iArea == 12)//        "MOVIE"    "MORN"     
                {
                    VectorList_02.Add(new Vector3(-1460.172f, -168.6274f, 48.81977f));
                    VectorList_01.Add(new Vector3(-1446.605f, -149.2165f, 48.38486f));
                    VectorList_02.Add(new Vector3(-1369.502f, -169.7315f, 47.48642f));
                    VectorList_01.Add(new Vector3(-1393.748f, -156.9173f, 46.6925f));
                    VectorList_02.Add(new Vector3(-1423.839f, -215.8649f, 46.50041f));
                    VectorList_01.Add(new Vector3(-1420.433f, -190.4328f, 46.38483f));
                    VectorList_02.Add(new Vector3(-1376.746f, -285.9489f, 43.46873f));
                    VectorList_01.Add(new Vector3(-1390.941f, -288.5725f, 42.58349f));
                    VectorList_02.Add(new Vector3(-1472.6f, -329.9493f, 44.81713f));
                    VectorList_01.Add(new Vector3(-1450.284f, -334.9542f, 43.68563f));
                    VectorList_02.Add(new Vector3(-1532.739f, -275.296f, 49.71008f));
                    VectorList_01.Add(new Vector3(-1524.951f, -279.0801f, 48.89013f));
                }
                else if (iArea == 13)//        "ROCKF"       "golf"  
                {
                    VectorList_02.Add(new Vector3(-1354.29f, -140.058f, 49.57456f));
                    VectorList_01.Add(new Vector3(-1357.142f, -147.6312f, 47.79842f));
                    VectorList_02.Add(new Vector3(-1026.242f, 315.9842f, 66.88311f));
                    VectorList_01.Add(new Vector3(-1041.429f, 321.4409f, 66.07804f));
                    VectorList_02.Add(new Vector3(-1026.074f, 360.7628f, 71.36153f));
                    VectorList_01.Add(new Vector3(-1015.007f, 358.0407f, 69.87968f));
                    VectorList_02.Add(new Vector3(-892.2721f, 352.8219f, 85.47115f));
                    VectorList_01.Add(new Vector3(-887.5854f, 369.4475f, 84.2992f));
                    VectorList_02.Add(new Vector3(-875.8641f, 315.7621f, 84.15994f));
                    VectorList_01.Add(new Vector3(-870.7113f, 302.4772f, 83.24094f));
                    VectorList_02.Add(new Vector3(-819.4623f, 268.2599f, 86.38909f));
                    VectorList_01.Add(new Vector3(-825.0667f, 272.9646f, 85.54727f));
                    VectorList_02.Add(new Vector3(-948.934f, 320.3693f, 71.35191f));
                    VectorList_01.Add(new Vector3(-947.6569f, 308.0075f, 70.40042f));
                    VectorList_02.Add(new Vector3(-1037.066f, 207.9634f, 64.56448f));
                    VectorList_01.Add(new Vector3(-1046.699f, 221.1928f, 63.02604f));
                    VectorList_02.Add(new Vector3(-949.5158f, 196.6293f, 67.39026f));
                    VectorList_01.Add(new Vector3(-953.416f, 187.3162f, 65.85413f));
                    VectorList_02.Add(new Vector3(-916.7498f, 203.2301f, 69.43185f));
                    VectorList_01.Add(new Vector3(-910.2756f, 188.7189f, 68.70294f));
                    VectorList_02.Add(new Vector3(-993.275f, 162.2733f, 62.14541f));
                    VectorList_01.Add(new Vector3(-989.3348f, 144.4876f, 59.88694f));
                    VectorList_02.Add(new Vector3(-971.3362f, 122.028f, 57.04857f));
                    VectorList_01.Add(new Vector3(-960.4633f, 111.0401f, 55.67738f));
                    VectorList_02.Add(new Vector3(-923.2835f, 124.1776f, 55.53205f));
                    VectorList_01.Add(new Vector3(-918.8908f, 110.3132f, 54.57633f));
                    VectorList_02.Add(new Vector3(-934.5027f, 3.251942f, 47.74643f));
                    VectorList_01.Add(new Vector3(-925.3032f, 10.76216f, 46.97826f));
                    VectorList_02.Add(new Vector3(-896.5391f, -4.971326f, 43.79887f));
                    VectorList_01.Add(new Vector3(-886.3248f, -9.607732f, 42.53655f));
                    VectorList_02.Add(new Vector3(-841.3217f, -24.86731f, 40.39839f));
                    VectorList_01.Add(new Vector3(-830.4749f, -33.85237f, 37.74441f));
                    VectorList_02.Add(new Vector3(-766.9527f, -23.84942f, 41.08041f));
                    VectorList_01.Add(new Vector3(-758.5886f, -36.68955f, 36.94484f));
                    VectorList_02.Add(new Vector3(-247.7577f, -329.3505f, 27.60481f));
                    VectorList_01.Add(new Vector3(-256.4178f, -337.0367f, 29.11594f));
                    VectorList_02.Add(new Vector3(-481.2264f, -401.667f, 34.5466f));
                    VectorList_01.Add(new Vector3(-483.3846f, -386.6872f, 33.41516f));
                    VectorList_02.Add(new Vector3(-570.5855f, -395.0763f, 35.05656f));
                    VectorList_01.Add(new Vector3(-572.5616f, -383.1132f, 34.1718f));
                    VectorList_02.Add(new Vector3(-554.2025f, -329.9634f, 35.1568f));
                    VectorList_01.Add(new Vector3(-547.9968f, -325.5482f, 34.29967f));
                    VectorList_02.Add(new Vector3(-561.881f, -131.3118f, 38.43238f));
                    VectorList_01.Add(new Vector3(-553.8245f, -147.4621f, 37.40226f));
                    VectorList_02.Add(new Vector3(-730.188f, -130.8872f, 38.07042f));
                    VectorList_01.Add(new Vector3(-738.5037f, -131.5499f, 36.61028f));
                    VectorList_02.Add(new Vector3(-723.9586f, -280.9983f, 37.1396f));
                    VectorList_01.Add(new Vector3(-729.4451f, -285.4275f, 36.20818f));
                    VectorList_02.Add(new Vector3(-759.3776f, -209.7389f, 37.27201f));
                    VectorList_01.Add(new Vector3(-767.3508f, -207.0348f, 36.53815f));
                    VectorList_02.Add(new Vector3(-801.4948f, -177.8358f, 38.13674f));
                    VectorList_01.Add(new Vector3(-792.1018f, -177.4919f, 36.5426f));
                    VectorList_02.Add(new Vector3(-845.2264f, -123.8861f, 34.92541f));
                    VectorList_01.Add(new Vector3(-841.033f, -139.4222f, 36.93386f));
                    VectorList_02.Add(new Vector3(-814.8182f, -202.0733f, 37.48641f));
                    VectorList_01.Add(new Vector3(-824.1635f, -202.3184f, 36.6447f));
                    VectorList_02.Add(new Vector3(-1044.833f, -231.1025f, 39.01435f));
                    VectorList_01.Add(new Vector3(-1051.043f, -216.2052f, 37.00772f));
                    VectorList_02.Add(new Vector3(-733.4784f, -318.2313f, 36.5607f));
                    VectorList_01.Add(new Vector3(-742.6403f, -325.5553f, 35.38481f));
                    VectorList_02.Add(new Vector3(-769.0097f, -355.9413f, 37.33335f));
                    VectorList_01.Add(new Vector3(-766.2805f, -343.241f, 35.31346f));
                    VectorList_02.Add(new Vector3(-720.5628f, -411.4023f, 34.98101f));
                    VectorList_01.Add(new Vector3(-732.4562f, -411.7837f, 34.55416f));
                    VectorList_02.Add(new Vector3(-783.394f, -391.1441f, 37.33352f));
                    VectorList_01.Add(new Vector3(-788.0407f, -402.7892f, 35.16359f));
                    VectorList_02.Add(new Vector3(-1026.703f, -418.8185f, 39.61594f));
                    VectorList_01.Add(new Vector3(-1048.815f, -391.3591f, 36.82092f));
                    VectorList_02.Add(new Vector3(-1095.178f, -325.564f, 37.82364f));
                    VectorList_01.Add(new Vector3(-1095.845f, -317.3362f, 36.92531f));
                    VectorList_02.Add(new Vector3(-1164.338f, -348.5981f, 36.63751f));
                    VectorList_01.Add(new Vector3(-1168.575f, -341.5084f, 36.32198f));
                    VectorList_02.Add(new Vector3(-1232.031f, -143.9317f, 40.40824f));
                    VectorList_01.Add(new Vector3(-1207.98f, -129.8569f, 40.29033f));

                    VectorList_02.Add(new Vector3(-1189.34f, 292.0604f, 69.89325f));
                    VectorList_01.Add(new Vector3(-1183.382f, 286.2881f, 68.78954f));
                    VectorList_02.Add(new Vector3(-1146.913f, 381.85f, 71.31322f));
                    VectorList_01.Add(new Vector3(-1131.19f, 382.7086f, 70.02845f));
                    VectorList_02.Add(new Vector3(-1274.038f, 315.7936f, 65.51176f));
                    VectorList_01.Add(new Vector3(-1286.176f, 295.006f, 64.15466f));
                    VectorList_02.Add(new Vector3(-1366.692f, 56.64131f, 54.09836f));
                    VectorList_01.Add(new Vector3(-1379.541f, 55.16712f, 52.9743f));
                }
                else if (iArea == 14)//        "BURTON"  
                {
                    VectorList_02.Add(new Vector3(-137.9203f, -256.7903f, 43.59498f));
                    VectorList_01.Add(new Vector3(-130.958f, -259.2365f, 42.49442f));
                    VectorList_02.Add(new Vector3(-431.2309f, -24.3851f, 46.22859f));
                    VectorList_01.Add(new Vector3(-424.1801f, -25.54552f, 45.52f));
                    VectorList_02.Add(new Vector3(-490.0871f, 27.91375f, 46.29721f));
                    VectorList_01.Add(new Vector3(-487.0178f, 21.20043f, 44.28422f));
                    VectorList_02.Add(new Vector3(-509.5037f, -22.15906f, 45.60895f));
                    VectorList_01.Add(new Vector3(-531.4308f, -24.39477f, 43.63002f));
                    VectorList_02.Add(new Vector3(-433.5324f, -159.0408f, 37.82975f));
                    VectorList_01.Add(new Vector3(-443.5297f, -167.6072f, 36.80051f));
                    VectorList_02.Add(new Vector3(-310.7526f, -278.0241f, 31.71694f));
                    VectorList_01.Add(new Vector3(-294.5354f, -278.9979f, 30.3766f));
                }
                else if (iArea == 15)//        "ALTA"
                {
                    VectorList_02.Add(new Vector3(337.1231f, -224.7314f, 58.01926f));
                    VectorList_01.Add(new Vector3(323.8887f, -216.8452f, 53.70169f));
                    VectorList_02.Add(new Vector3(337.1165f, -224.7166f, 54.22176f));
                    VectorList_01.Add(new Vector3(323.8885f, -216.8456f, 53.70388f));
                    VectorList_02.Add(new Vector3(340.9855f, -214.898f, 54.22177f));
                    VectorList_01.Add(new Vector3(323.8886f, -216.8452f, 53.70319f));
                    VectorList_02.Add(new Vector3(311.2467f, -203.8005f, 58.01926f));
                    VectorList_01.Add(new Vector3(323.8888f, -216.8456f, 53.70368f));
                    VectorList_02.Add(new Vector3(310.719f, -217.6171f, 58.01925f));
                    VectorList_01.Add(new Vector3(323.8882f, -216.8456f, 53.70445f));
                    VectorList_02.Add(new Vector3(307.2587f, -216.3905f, 54.22177f));
                    VectorList_01.Add(new Vector3(323.8895f, -216.8458f, 53.70464f));
                    VectorList_02.Add(new Vector3(311.9126f, -204.0758f, 54.22183f));
                    VectorList_01.Add(new Vector3(323.8886f, -216.8453f, 53.70185f));
                    VectorList_02.Add(new Vector3(140.2924f, -286.6419f, 50.44962f));
                    VectorList_01.Add(new Vector3(128.9395f, -307.2529f, 44.80704f));
                    VectorList_02.Add(new Vector3(85.26392f, -268.0471f, 47.79923f));
                    VectorList_01.Add(new Vector3(81.0944f, -291.2837f, 46.27134f));
                    VectorList_02.Add(new Vector3(1.905731f, -240.8442f, 51.86057f));
                    VectorList_01.Add(new Vector3(6.666971f, -263.2705f, 46.87637f));
                    VectorList_02.Add(new Vector3(141.3129f, -379.8523f, 43.25697f));
                    VectorList_01.Add(new Vector3(133.2358f, -376.0379f, 42.86023f));
                    VectorList_02.Add(new Vector3(-52.99578f, -397.6029f, 38.12812f));
                    VectorList_01.Add(new Vector3(-30.21463f, -405.3861f, 39.05763f));
                    VectorList_02.Add(new Vector3(-30.1248f, -347.0221f, 46.32362f));
                    VectorList_01.Add(new Vector3(-14.9734f, -356.9637f, 40.29393f));
                }
                else if (iArea == 16)//        "HAWICK"  
                {
                    VectorList_02.Add(new Vector3(271.4294f, -208.6099f, 61.57072f));
                    VectorList_01.Add(new Vector3(274.9666f, -187.8761f, 61.16962f));
                    VectorList_02.Add(new Vector3(220.3426f, -92.2359f, 69.61214f));
                    VectorList_01.Add(new Vector3(215.4621f, -65.28774f, 68.67736f));
                    VectorList_02.Add(new Vector3(207.7987f, -190.7932f, 54.39412f));
                    VectorList_01.Add(new Vector3(205.085f, -199.0758f, 53.51561f));
                    VectorList_02.Add(new Vector3(26.37074f, -168.5097f, 55.57018f));
                    VectorList_01.Add(new Vector3(24.60649f, -156.8087f, 55.36599f));
                    VectorList_02.Add(new Vector3(-13.98569f, -110.5151f, 56.83979f));
                    VectorList_01.Add(new Vector3(-15.4755f, -117.5756f, 56.37433f));
                }
                else //        "WVINE" 
                {
                    VectorList_02.Add(new Vector3(-479.2487f, 218.3924f, 83.69603f));
                    VectorList_01.Add(new Vector3(-480.8465f, 224.3893f, 82.71607f));
                    VectorList_02.Add(new Vector3(-569.7756f, 169.5958f, 66.56587f));
                    VectorList_01.Add(new Vector3(-551.2469f, 168.4349f, 66.6234f));
                    VectorList_02.Add(new Vector3(-511.6719f, 108.9022f, 63.79959f));
                    VectorList_01.Add(new Vector3(-512.4089f, 123.2785f, 62.79382f));
                    VectorList_02.Add(new Vector3(-392.7119f, 151.4118f, 65.52414f));
                    VectorList_01.Add(new Vector3(-395.6694f, 132.4798f, 65.08716f));
                    VectorList_02.Add(new Vector3(-208.1687f, 159.859f, 74.05302f));
                    VectorList_01.Add(new Vector3(-220.4445f, 162.1267f, 72.90894f));
                    VectorList_02.Add(new Vector3(-149.0777f, 121.9784f, 70.22536f));
                    VectorList_01.Add(new Vector3(-164.8017f, 106.0881f, 69.87028f));
                    VectorList_02.Add(new Vector3(-329.4156f, 97.45921f, 67.05153f));
                    VectorList_01.Add(new Vector3(-321.8814f, 115.0459f, 66.84548f));
                    VectorList_02.Add(new Vector3(-355.3001f, 94.91445f, 70.5202f));
                    VectorList_01.Add(new Vector3(-346.1362f, 108.3023f, 66.27882f));
                    VectorList_02.Add(new Vector3(-355.2776f, 15.46274f, 47.85473f));
                    VectorList_01.Add(new Vector3(-356.3561f, 33.08219f, 47.41592f));
                    VectorList_02.Add(new Vector3(-314.8544f, 83.60764f, 71.66293f));
                    VectorList_01.Add(new Vector3(-315.9304f, 72.05852f, 65.04311f));
                    VectorList_02.Add(new Vector3(-282.1409f, 12.98766f, 54.75249f));
                    VectorList_01.Add(new Vector3(-269.334f, 27.04459f, 54.35106f));
                    VectorList_02.Add(new Vector3(-219.1817f, -3.427589f, 52.36488f));
                    VectorList_01.Add(new Vector3(-225.7999f, 4.687866f, 52.03117f));
                    VectorList_02.Add(new Vector3(-161.3873f, -3.951782f, 62.46285f));
                    VectorList_01.Add(new Vector3(-152.9026f, -1.673734f, 57.37193f));
                    VectorList_02.Add(new Vector3(-117.107f, -37.25715f, 62.19587f));
                    VectorList_01.Add(new Vector3(-129.4191f, -26.90284f, 57.75457f));
                    VectorList_02.Add(new Vector3(-77.88377f, 7.237984f, 70.25868f));
                    VectorList_01.Add(new Vector3(-71.19195f, -3.913839f, 69.62611f));
                    VectorList_02.Add(new Vector3(-0.08573192f, -15.04306f, 71.10311f));
                    VectorList_01.Add(new Vector3(0.01606551f, 5.507839f, 70.46945f));
                }
            }
            else if (Local == 3)
            {
                if (bRandom)
                    iArea = RandInt(1, 4);

                if (iArea == 1)//        "RICHM" && MyZone 0)//        "RGLEN" 
                {
                    VectorList_02.Add(new Vector3(-1878.568f, 214.5692f, 84.43929f));
                    VectorList_01.Add(new Vector3(-1873.862f, 193.8993f, 83.7653f));
                    VectorList_02.Add(new Vector3(-1892.024f, 235.6097f, 86.25183f));
                    VectorList_01.Add(new Vector3(-1905.712f, 242.3712f, 85.72104f));
                    VectorList_02.Add(new Vector3(-1921.954f, 308.4248f, 89.07661f));
                    VectorList_01.Add(new Vector3(-1928.648f, 297.501f, 88.54451f));
                    VectorList_02.Add(new Vector3(-1930.378f, 369.2367f, 93.78211f));
                    VectorList_01.Add(new Vector3(-1938.424f, 360.773f, 93.05482f));
                    VectorList_02.Add(new Vector3(-1941.7f, 386.0603f, 96.50709f));
                    VectorList_01.Add(new Vector3(-1950.128f, 401.4925f, 95.74673f));
                    VectorList_02.Add(new Vector3(-1943.1f, 449.7197f, 102.9281f));
                    VectorList_01.Add(new Vector3(-1955.434f, 447.6809f, 100.4078f));
                    VectorList_02.Add(new Vector3(-1939.811f, 534.4824f, 114.8257f));
                    VectorList_01.Add(new Vector3(-1941.551f, 552.8403f, 114.2949f));
                    VectorList_02.Add(new Vector3(-1929.164f, 595.4424f, 122.2849f));
                    VectorList_01.Add(new Vector3(-1944.052f, 582.5765f, 118.1756f));
                    VectorList_02.Add(new Vector3(-1897.366f, 642.0092f, 130.2086f));
                    VectorList_01.Add(new Vector3(-1888.728f, 626.4341f, 129.4718f));
                    VectorList_02.Add(new Vector3(-1967.342f, 649.6359f, 122.5363f));
                    VectorList_01.Add(new Vector3(-1973.95f, 622.8629f, 121.8698f));
                    VectorList_02.Add(new Vector3(-2000.012f, 613.8847f, 117.9034f));
                    VectorList_01.Add(new Vector3(-1987.878f, 603.7962f, 117.3801f));
                    VectorList_02.Add(new Vector3(-2024.877f, 478.917f, 107.1619f));
                    VectorList_01.Add(new Vector3(-2011.932f, 484.1914f, 106.5138f));
                    VectorList_02.Add(new Vector3(-2022.839f, 455.3822f, 105.753f));
                    VectorList_01.Add(new Vector3(-2008.189f, 454.4774f, 102.1402f));
                    VectorList_02.Add(new Vector3(-2011.445f, 350.2057f, 94.4791f));
                    VectorList_01.Add(new Vector3(-2000.829f, 367.4298f, 93.97578f));
                    VectorList_02.Add(new Vector3(-2009.404f, 289.1414f, 91.97834f));
                    VectorList_01.Add(new Vector3(-1992.321f, 294.4626f, 91.25754f));
                    VectorList_02.Add(new Vector3(-1970.168f, 246.2813f, 87.81215f));
                    VectorList_01.Add(new Vector3(-1975.152f, 260.3556f, 86.71169f));
                    VectorList_02.Add(new Vector3(-1960.694f, 212.0906f, 86.81219f));
                    VectorList_01.Add(new Vector3(-1955.168f, 214.5622f, 85.54868f));
                    VectorList_02.Add(new Vector3(-1931.561f, 162.9542f, 84.65261f));
                    VectorList_01.Add(new Vector3(-1934.191f, 184.5886f, 84.06035f));
                    VectorList_02.Add(new Vector3(-1906.881f, 141.3684f, 81.64087f));
                    VectorList_01.Add(new Vector3(-1892.904f, 136.0754f, 80.95974f));
                }
                else if (iArea == 2)//        "PBLUFF" 
                {
                    VectorList_02.Add(new Vector3(-3023.749f, 80.59142f, 11.60812f));
                    VectorList_01.Add(new Vector3(-3017.372f, 88.69462f, 11.07981f));
                    VectorList_02.Add(new Vector3(-2189.858f, -399.3562f, 13.30098f));
                    VectorList_01.Add(new Vector3(-2181.863f, -409.2686f, 12.5398f));
                    VectorList_02.Add(new Vector3(-2073.705f, -126.1924f, 35.80942f));
                    VectorList_01.Add(new Vector3(-2038.215f, -136.9038f, 26.9034f));
                    VectorList_02.Add(new Vector3(-1857.052f, -348.5349f, 49.83775f));
                    VectorList_01.Add(new Vector3(-1861.999f, -353.8299f, 48.71446f));
                    VectorList_02.Add(new Vector3(-1684.828f, -292.6348f, 51.8908f));
                    VectorList_01.Add(new Vector3(-1685.22f, -300.6436f, 51.28144f));
                    VectorList_02.Add(new Vector3(-2295.177f, 363.814f, 174.6016f));
                    VectorList_01.Add(new Vector3(-2296.555f, 376.1144f, 173.9368f));
                }
                else if (iArea == 3)//        "BHAMCA" && MyZone 0)//        "BANHAMC"  && MyZone 0)//        "CHU" 
                {
                    VectorList_02.Add(new Vector3(-3110.801f, 750.4182f, 24.70186f));
                    VectorList_01.Add(new Vector3(-3097.423f, 743.9031f, 20.48927f));
                    VectorList_02.Add(new Vector3(-3107.09f, 718.6204f, 20.633f));
                    VectorList_01.Add(new Vector3(-3100.444f, 716.2214f, 19.83283f));
                    VectorList_02.Add(new Vector3(-3086.756f, 664.8164f, 11.58845f));
                    VectorList_01.Add(new Vector3(-3072.689f, 658.2528f, 10.44048f));
                    VectorList_02.Add(new Vector3(-3036.034f, 574.8292f, 7.823583f));
                    VectorList_01.Add(new Vector3(-3026.632f, 573.8799f, 7.016073f));
                    VectorList_02.Add(new Vector3(-3036.793f, 558.8264f, 7.507683f));
                    VectorList_01.Add(new Vector3(-3030.468f, 556.2008f, 6.872155f));
                    VectorList_02.Add(new Vector3(-3039.289f, 492.8857f, 6.772714f));
                    VectorList_01.Add(new Vector3(-3031.783f, 498.2742f, 6.175517f));
                    VectorList_02.Add(new Vector3(-3047.145f, 485.2661f, 6.779647f));
                    VectorList_01.Add(new Vector3(-3038.043f, 477.445f, 6.115459f));
                    VectorList_02.Add(new Vector3(-3067.425f, 439.884f, 6.360351f));
                    VectorList_01.Add(new Vector3(-3052.8f, 441.2135f, 5.709949f));
                    VectorList_02.Add(new Vector3(-3088.146f, 391.8495f, 11.44504f));
                    VectorList_01.Add(new Vector3(-3072.913f, 393.2456f, 6.335815f));
                    VectorList_02.Add(new Vector3(-3091.191f, 378.8426f, 7.112263f));
                    VectorList_01.Add(new Vector3(-3077.573f, 371.858f, 6.424158f));
                    VectorList_02.Add(new Vector3(-3092.814f, 349.5691f, 7.532001f));
                    VectorList_01.Add(new Vector3(-3088.889f, 341.8463f, 6.776845f));
                    VectorList_02.Add(new Vector3(-3101.632f, 332.9786f, 7.493346f));
                    VectorList_01.Add(new Vector3(-3089.019f, 324.63f, 6.851557f));
                    VectorList_02.Add(new Vector3(-3106.015f, 313.4806f, 8.38104f));
                    VectorList_01.Add(new Vector3(-3095.504f, 304.6574f, 7.801707f));
                    VectorList_02.Add(new Vector3(-3109.53f, 301.7948f, 8.381039f));
                    VectorList_01.Add(new Vector3(-3095.505f, 304.6575f, 7.800583f));
                    VectorList_02.Add(new Vector3(-3111.452f, 296.164f, 8.972106f));
                    VectorList_01.Add(new Vector3(-3100.482f, 289.2973f, 8.56084f));
                    VectorList_02.Add(new Vector3(-3114.491f, 253.7804f, 12.492f));
                    VectorList_01.Add(new Vector3(-3101.362f, 251.1279f, 11.42317f));
                    VectorList_02.Add(new Vector3(-3095.399f, 217.7303f, 14.58094f));
                    VectorList_01.Add(new Vector3(-3083.608f, 223.2508f, 13.3014f));
                    VectorList_02.Add(new Vector3(-2972.425f, 599.5049f, 24.4398f));
                    VectorList_01.Add(new Vector3(-2981.605f, 604.1546f, 19.10135f));
                    VectorList_02.Add(new Vector3(-2971.332f, 635.1398f, 25.7979f));
                    VectorList_01.Add(new Vector3(-2981.608f, 653.7446f, 24.52167f));
                    VectorList_02.Add(new Vector3(-2991.647f, 677.6633f, 25.03615f));
                    VectorList_01.Add(new Vector3(-3001.683f, 688.0192f, 24.008f));
                    VectorList_02.Add(new Vector3(-2989.949f, 729.2177f, 28.49687f));
                    VectorList_01.Add(new Vector3(-2995.868f, 721.2349f, 27.84494f));
                    VectorList_02.Add(new Vector3(-3021.26f, 751.2949f, 27.5876f));
                    VectorList_01.Add(new Vector3(-3017.81f, 738.942f, 27.08741f));
                    VectorList_02.Add(new Vector3(-3226.107f, 911.2578f, 13.99327f));
                    VectorList_01.Add(new Vector3(-3216.154f, 914.3242f, 13.51317f));
                    VectorList_02.Add(new Vector3(-3238.567f, 923.0718f, 13.95989f));
                    VectorList_01.Add(new Vector3(-3224.866f, 927.2133f, 13.43289f));
                    VectorList_02.Add(new Vector3(-3238.777f, 929.2819f, 17.14999f));
                    VectorList_01.Add(new Vector3(-3230.473f, 938.7974f, 13.24235f));
                    VectorList_02.Add(new Vector3(-3237.766f, 952.3402f, 13.12962f));
                    VectorList_01.Add(new Vector3(-3233.314f, 948.5009f, 12.81998f));
                    VectorList_02.Add(new Vector3(-3251.234f, 1043.102f, 11.75771f));
                    VectorList_01.Add(new Vector3(-3236.66f, 1037.344f, 11.17605f));
                    VectorList_02.Add(new Vector3(-3245.689f, 1062.886f, 11.14619f));
                    VectorList_01.Add(new Vector3(-3233.137f, 1057.34f, 10.66858f));
                    VectorList_02.Add(new Vector3(-3235.27f, 1076.041f, 11.03331f));
                    VectorList_01.Add(new Vector3(-3229.212f, 1071.461f, 10.40678f));
                    VectorList_02.Add(new Vector3(-3231.806f, 1081.586f, 10.8089f));
                    VectorList_01.Add(new Vector3(-3226.823f, 1086.945f, 10.19171f));
                    VectorList_02.Add(new Vector3(-3228.666f, 1092.662f, 10.77182f));
                    VectorList_01.Add(new Vector3(-3226.825f, 1086.943f, 10.17782f));
                    VectorList_02.Add(new Vector3(-3224.834f, 1113.216f, 10.57764f));
                    VectorList_01.Add(new Vector3(-3218.955f, 1105.772f, 9.89898f));
                    VectorList_02.Add(new Vector3(-3213.26f, 1134.408f, 9.895407f));
                    VectorList_01.Add(new Vector3(-3204.593f, 1136.673f, 9.370088f));
                    VectorList_02.Add(new Vector3(-3210.196f, 1146.144f, 9.895408f));
                    VectorList_01.Add(new Vector3(-3204.592f, 1136.674f, 9.367161f));
                    VectorList_02.Add(new Vector3(-3199.891f, 1165.147f, 9.654341f));
                    VectorList_01.Add(new Vector3(-3196.638f, 1160.642f, 9.050935f));
                    VectorList_02.Add(new Vector3(-3205.993f, 1187.009f, 9.664687f));
                    VectorList_01.Add(new Vector3(-3191.01f, 1181.408f, 8.82839f));
                    VectorList_02.Add(new Vector3(-3194.872f, 1209.193f, 9.424752f));
                    VectorList_01.Add(new Vector3(-3186.948f, 1201.075f, 8.994352f));
                    VectorList_02.Add(new Vector3(-3194.43f, 1230.428f, 10.04832f));
                    VectorList_01.Add(new Vector3(-3186.025f, 1226.601f, 9.543797f));
                    VectorList_02.Add(new Vector3(-3190.776f, 1297.634f, 19.06739f));
                    VectorList_01.Add(new Vector3(-3176.015f, 1294.986f, 13.88427f));
                    VectorList_02.Add(new Vector3(-2794.065f, 1436.65f, 100.9284f));
                    VectorList_01.Add(new Vector3(-2784.956f, 1431.801f, 100.3998f));
                }
                else //        "TONGVAH" && MyZone 0)//        "TONGVAV" 
                {
                    VectorList_02.Add(new Vector3(-1516.543f, 1505.643f, 115.0055f));
                    VectorList_01.Add(new Vector3(-1502.462f, 1493.975f, 115.4031f));
                    VectorList_02.Add(new Vector3(-1585.992f, 2110.469f, 65.85062f));
                    VectorList_01.Add(new Vector3(-1579.633f, 2097.453f, 68.14568f));
                    VectorList_02.Add(new Vector3(-1897.6f, 2058.515f, 140.9148f));
                    VectorList_01.Add(new Vector3(-1889.138f, 2045.076f, 140.233f));
                    VectorList_02.Add(new Vector3(-1743.845f, 2379.063f, 47.18592f));
                    VectorList_01.Add(new Vector3(-1745.479f, 2391.582f, 42.8428f));
                    VectorList_02.Add(new Vector3(-1717.544f, 1874.892f, 163.155f));
                    VectorList_01.Add(new Vector3(-1713.895f, 1883.34f, 160.9319f));
                }
            }
            else if (Local == 4)
            {
                if (bRandom)
                    iArea = RandInt(1, 5);

                if (iArea == 1)//        "MIRR" 
                {
                    VectorList_02.Add(new Vector3(1303.104f, -528.0761f, 71.46065f));
                    VectorList_01.Add(new Vector3(1309.066f, -535.1337f, 70.73479f));
                    VectorList_02.Add(new Vector3(1328.005f, -536.041f, 72.44083f));
                    VectorList_01.Add(new Vector3(1317.968f, -538.2343f, 71.43388f));
                    VectorList_02.Add(new Vector3(1348.163f, -547.7917f, 73.89162f));
                    VectorList_01.Add(new Vector3(1353.236f, -555.9352f, 73.63641f));
                    VectorList_02.Add(new Vector3(1372.689f, -555.9731f, 74.68577f));
                    VectorList_01.Add(new Vector3(1362.776f, -557.3074f, 73.77276f));
                    VectorList_02.Add(new Vector3(1388.346f, -569.6031f, 74.49653f));
                    VectorList_01.Add(new Vector3(1388.113f, -578.3655f, 73.77274f));
                    VectorList_02.Add(new Vector3(1385.853f, -593.0632f, 74.48546f));
                    VectorList_01.Add(new Vector3(1378.244f, -597.2811f, 73.77341f));
                    VectorList_02.Add(new Vector3(1367.295f, -606.2516f, 74.71093f));
                    VectorList_01.Add(new Vector3(1359.627f, -600.3322f, 73.77345f));
                    VectorList_02.Add(new Vector3(1342f, -597.175f, 74.7008f));
                    VectorList_01.Add(new Vector3(1347.955f, -577.8033f, 73.62755f));
                    VectorList_02.Add(new Vector3(1323.486f, -582.6028f, 73.24638f));
                    VectorList_01.Add(new Vector3(1318.944f, -574.3151f, 72.35325f));
                    VectorList_02.Add(new Vector3(1301.144f, -573.8477f, 71.73234f));
                    VectorList_01.Add(new Vector3(1295.759f, -566.8878f, 70.58719f));
                    VectorList_02.Add(new Vector3(1203.279f, -557.5997f, 69.40067f));
                    VectorList_01.Add(new Vector3(1184.475f, -555.3583f, 63.85255f));
                    VectorList_02.Add(new Vector3(1201.368f, -578.7299f, 69.13488f));
                    VectorList_01.Add(new Vector3(1183.985f, -584.4063f, 63.49017f));
                    VectorList_02.Add(new Vector3(1203.674f, -599.1799f, 68.06352f));
                    VectorList_01.Add(new Vector3(1186.999f, -604.1857f, 63.22091f));
                    VectorList_02.Add(new Vector3(1206.905f, -619.9584f, 66.43616f));
                    VectorList_01.Add(new Vector3(1203.073f, -613.0959f, 65.27635f));
                    VectorList_02.Add(new Vector3(1221.432f, -668.447f, 63.50019f));
                    VectorList_01.Add(new Vector3(1215.585f, -665.6649f, 62.1657f));
                    VectorList_02.Add(new Vector3(1222.634f, -696.9823f, 60.80664f));
                    VectorList_01.Add(new Vector3(1222.546f, -704.6004f, 60.25977f));
                    VectorList_02.Add(new Vector3(1228.98f, -725.4678f, 60.79766f));
                    VectorList_01.Add(new Vector3(1223.973f, -728.1918f, 59.96362f));
                    VectorList_02.Add(new Vector3(1265.76f, -703.2062f, 64.56302f));
                    VectorList_01.Add(new Vector3(1276.88f, -709.9447f, 64.16968f));
                    VectorList_02.Add(new Vector3(1271.215f, -683.229f, 66.03163f));
                    VectorList_01.Add(new Vector3(1276.321f, -672.1403f, 65.55285f));
                    VectorList_02.Add(new Vector3(1265.496f, -648.1833f, 67.92143f));
                    VectorList_01.Add(new Vector3(1281.524f, -636.264f, 67.85822f));
                    VectorList_02.Add(new Vector3(1243.872f, -634.2845f, 69.32861f));
                    VectorList_01.Add(new Vector3(1258.799f, -622.2938f, 68.90398f));
                    VectorList_02.Add(new Vector3(1233.232f, -593.3051f, 69.42253f));
                    VectorList_01.Add(new Vector3(1244.551f, -585.997f, 68.82187f));
                    VectorList_02.Add(new Vector3(1242.479f, -565.8297f, 69.65738f));
                    VectorList_01.Add(new Vector3(1258.098f, -565.493f, 68.23525f));
                    VectorList_02.Add(new Vector3(1239.262f, -513.1147f, 69.12914f));
                    VectorList_01.Add(new Vector3(1248.86f, -522.4438f, 68.26224f));
                    VectorList_02.Add(new Vector3(1251.532f, -494.2249f, 69.90682f));
                    VectorList_01.Add(new Vector3(1261.78f, -493.555f, 68.59668f));
                    VectorList_02.Add(new Vector3(1260.101f, -479.5116f, 70.18879f));
                    VectorList_01.Add(new Vector3(1278.476f, -478.6996f, 68.22017f));
                    VectorList_02.Add(new Vector3(1266.084f, -458.3353f, 70.51691f));
                    VectorList_01.Add(new Vector3(1273.115f, -455.0135f, 68.57989f));
                    VectorList_02.Add(new Vector3(1262.461f, -429.394f, 70.01487f));
                    VectorList_01.Add(new Vector3(1275.764f, -424.0667f, 68.22583f));
                    VectorList_02.Add(new Vector3(999.6509f, -602.5077f, 59.24988f));
                    VectorList_01.Add(new Vector3(1007.827f, -589.7651f, 58.31434f));
                    VectorList_02.Add(new Vector3(1010.405f, -572.106f, 60.59447f));
                    VectorList_01.Add(new Vector3(1024.028f, -564.0795f, 58.89515f));
                    VectorList_02.Add(new Vector3(976.5464f, -580.268f, 59.85033f));
                    VectorList_01.Add(new Vector3(968.4319f, -570.5289f, 58.0456f));
                    VectorList_02.Add(new Vector3(965.8971f, -609.0874f, 59.49282f));
                    VectorList_01.Add(new Vector3(954.2767f, -596.7289f, 58.6325f));
                    VectorList_02.Add(new Vector3(919.8752f, -569.8582f, 58.36637f));
                    VectorList_01.Add(new Vector3(933.074f, -577.1251f, 56.91011f));
                    VectorList_02.Add(new Vector3(965.7161f, -542.8255f, 59.35909f));
                    VectorList_01.Add(new Vector3(973.2179f, -554.7656f, 58.32329f));
                    VectorList_02.Add(new Vector3(988.0938f, -525.8449f, 60.69068f));
                    VectorList_01.Add(new Vector3(989.012f, -543.071f, 58.85779f));
                    VectorList_02.Add(new Vector3(1005.954f, -511.3791f, 60.83396f));
                    VectorList_01.Add(new Vector3(1005.942f, -519.3906f, 59.9563f));
                    VectorList_02.Add(new Vector3(1056.8f, -448.1799f, 66.25742f));
                    VectorList_01.Add(new Vector3(1064.382f, -445.4654f, 65.09992f));
                    VectorList_02.Add(new Vector3(1051.081f, -470.3268f, 64.29682f));
                    VectorList_01.Add(new Vector3(1068.162f, -473.2799f, 63.43224f));
                    VectorList_02.Add(new Vector3(1046.621f, -497.4203f, 64.07932f));
                    VectorList_01.Add(new Vector3(1051.812f, -488.407f, 63.14861f));
                    VectorList_02.Add(new Vector3(1089.776f, -484.1317f, 65.66021f));
                    VectorList_01.Add(new Vector3(1077.637f, -482.2654f, 63.0863f));
                    VectorList_02.Add(new Vector3(1097.907f, -464.9969f, 67.3194f));
                    VectorList_01.Add(new Vector3(1080.9f, -462.766f, 64.13667f));
                    VectorList_02.Add(new Vector3(1099.318f, -438.5551f, 67.7905f));
                    VectorList_01.Add(new Vector3(1099.034f, -429.365f, 66.62222f));
                    VectorList_02.Add(new Vector3(1100.173f, -411.3625f, 67.55515f));
                    VectorList_01.Add(new Vector3(1090.41f, -417.8437f, 66.27037f));
                    VectorList_02.Add(new Vector3(1121.068f, -396.8421f, 68.32484f));
                    VectorList_01.Add(new Vector3(1103.595f, -399.2865f, 66.98724f));
                    VectorList_02.Add(new Vector3(1014.722f, -469.2599f, 64.50301f));
                    VectorList_01.Add(new Vector3(1013.713f, -452.9554f, 63.72364f));
                    VectorList_02.Add(new Vector3(970.1812f, -502.0331f, 62.1409f));
                    VectorList_01.Add(new Vector3(960.3265f, -501.11f, 60.9422f));
                    VectorList_02.Add(new Vector3(946.805f, -518.6298f, 60.62551f));
                    VectorList_01.Add(new Vector3(945.9794f, -509.9754f, 59.78003f));
                    VectorList_02.Add(new Vector3(924.0212f, -525.62f, 59.78107f));
                    VectorList_01.Add(new Vector3(922.7343f, -509.6968f, 58.43071f));
                    VectorList_02.Add(new Vector3(892.7018f, -540.6726f, 58.50655f));
                    VectorList_01.Add(new Vector3(886.5193f, -554.0729f, 57.34649f));
                    VectorList_02.Add(new Vector3(979.9705f, -627.5128f, 59.23589f));
                    VectorList_01.Add(new Vector3(974.6395f, -619.7267f, 58.43463f));
                    VectorList_02.Add(new Vector3(989.3026f, -738.9448f, 57.46308f));
                    VectorList_01.Add(new Vector3(1010.657f, -726.6682f, 57.08143f));
                    VectorList_02.Add(new Vector3(979.4105f, -716.0731f, 58.22066f));
                    VectorList_01.Add(new Vector3(982.3991f, -708.5142f, 57.17782f));
                    VectorList_02.Add(new Vector3(970.9582f, -701.2431f, 58.48196f));
                    VectorList_01.Add(new Vector3(972.29f, -686.0255f, 57.32935f));
                    VectorList_02.Add(new Vector3(944.2244f, -678.2466f, 58.44977f));
                    VectorList_01.Add(new Vector3(967.3783f, -656.6362f, 56.90245f));
                    VectorList_02.Add(new Vector3(939.8877f, -663.1575f, 58.01383f));
                    VectorList_01.Add(new Vector3(951.2182f, -653.0005f, 57.47144f));
                    VectorList_02.Add(new Vector3(929.2795f, -639.2144f, 58.24234f));
                    VectorList_01.Add(new Vector3(929.0761f, -626.1235f, 57.30887f));
                    VectorList_02.Add(new Vector3(903.2495f, -615.7738f, 58.45334f));
                    VectorList_01.Add(new Vector3(913.0081f, -620.7134f, 57.60374f));
                    VectorList_02.Add(new Vector3(874.7638f, -607.1186f, 58.21776f));
                    VectorList_01.Add(new Vector3(878.3079f, -592.7166f, 57.42387f));
                    VectorList_02.Add(new Vector3(862.0755f, -582.3646f, 58.15649f));
                    VectorList_01.Add(new Vector3(874.6371f, -586.4609f, 57.19283f));
                    VectorList_02.Add(new Vector3(846.4515f, -551.504f, 57.70799f));
                    VectorList_01.Add(new Vector3(851.7446f, -564.995f, 57.30214f));
                    VectorList_02.Add(new Vector3(850.5616f, -532.464f, 57.92542f));
                    VectorList_01.Add(new Vector3(865.4143f, -535.7256f, 56.76198f));
                    VectorList_02.Add(new Vector3(861.998f, -509.8099f, 57.32896f));
                    VectorList_01.Add(new Vector3(859.9089f, -522.9789f, 56.90236f));
                    VectorList_02.Add(new Vector3(878.6312f, -498.1406f, 58.09062f));
                    VectorList_01.Add(new Vector3(881.3627f, -513.0558f, 56.80643f));
                    VectorList_02.Add(new Vector3(901.3936f, -472.5109f, 59.01522f));
                    VectorList_01.Add(new Vector3(914.4992f, -490.2616f, 58.60363f));
                    VectorList_02.Add(new Vector3(922.1134f, -478.2256f, 61.0836f));
                    VectorList_01.Add(new Vector3(938.1192f, -489.2669f, 59.6607f));
                    VectorList_02.Add(new Vector3(943.9189f, -463.2539f, 61.39602f));
                    VectorList_01.Add(new Vector3(944.2679f, -471.275f, 60.84516f));
                    VectorList_02.Add(new Vector3(961.065f, -458.4801f, 62.39756f));
                    VectorList_01.Add(new Vector3(975.4355f, -452.9048f, 62.0961f));
                    VectorList_02.Add(new Vector3(988.1276f, -433.536f, 63.89075f));
                    VectorList_01.Add(new Vector3(998.2275f, -435.7723f, 63.65527f));
                    VectorList_02.Add(new Vector3(1004.812f, -414.8121f, 64.94271f));
                    VectorList_01.Add(new Vector3(1022.149f, -430.826f, 64.61664f));
                    VectorList_02.Add(new Vector3(1029.585f, -409.1599f, 65.94939f));
                    VectorList_01.Add(new Vector3(1025.356f, -423.0311f, 65.07549f));
                    VectorList_02.Add(new Vector3(1060.76f, -378.5183f, 68.23116f));
                    VectorList_01.Add(new Vector3(1058.172f, -388.1536f, 67.40376f));
                }
                else if (iArea == 2)//        "PALHIGH" || MyZone 0)//        "NOOSE" 
                {
                    VectorList_02.Add(new Vector3(2520.735f, -414.4421f, 94.12382f));
                    VectorList_01.Add(new Vector3(2531.759f, -404.8683f, 92.42744f));
                    VectorList_02.Add(new Vector3(2515.324f, -357.0011f, 94.13097f));
                    VectorList_01.Add(new Vector3(2533.931f, -360.9075f, 92.42843f));
                    VectorList_02.Add(new Vector3(2459.782f, -383.9377f, 93.32551f));
                    VectorList_01.Add(new Vector3(2451.829f, -383.2078f, 92.42839f));
                    VectorList_02.Add(new Vector3(2825.373f, -648.0712f, 1.867333f));
                    VectorList_01.Add(new Vector3(2824.316f, -667.1207f, 0.7700033f));
                    VectorList_02.Add(new Vector3(1890.609f, -1019.087f, 78.56707f));
                    VectorList_01.Add(new Vector3(1898.707f, -1020.049f, 78.33401f));
                }
                else if (iArea == 3)//        "TATAMO" || MyZone 0)//        "PALMPOW" || MyZone 0)//        "WINDF" 
                {
                    VectorList_02.Add(new Vector3(2562.764f, 2591.259f, 38.08143f));
                    VectorList_01.Add(new Vector3(2553.303f, 2616.184f, 37.38126f));
                    VectorList_02.Add(new Vector3(2617.469f, 1690.186f, 27.59884f));
                    VectorList_01.Add(new Vector3(2630.439f, 1650.774f, 25.7706f));
                    VectorList_02.Add(new Vector3(2722.836f, 1510.59f, 24.5007f));
                    VectorList_01.Add(new Vector3(2709.175f, 1521.067f, 23.93703f));
                    VectorList_02.Add(new Vector3(2461.603f, 1575.208f, 33.11259f));
                    VectorList_01.Add(new Vector3(2472.126f, 1583.449f, 32.15523f));
                    VectorList_02.Add(new Vector3(1659.634f, -14.56253f, 169.9923f));
                    VectorList_01.Add(new Vector3(1666.431f, -17.75419f, 173.2095f));
                    VectorList_02.Add(new Vector3(1903.146f, 592.4578f, 178.3986f));
                    VectorList_01.Add(new Vector3(1915.557f, 571.7368f, 174.9158f));
                    VectorList_02.Add(new Vector3(2580.549f, 464.5234f, 108.6211f));
                    VectorList_01.Add(new Vector3(2579.158f, 457.8897f, 107.8901f));
                }
                else if (iArea == 4)//        "HORS" || MyZone 0)//        "EAST_V"
                {
                    VectorList_02.Add(new Vector3(705.1702f, -303.5435f, 59.24223f));
                    VectorList_01.Add(new Vector3(704.0766f, -290.1624f, 58.62016f));
                    VectorList_02.Add(new Vector3(977.1418f, -196.2304f, 74.84734f));
                    VectorList_01.Add(new Vector3(961.8153f, -201.5031f, 72.54203f));
                    VectorList_02.Add(new Vector3(894.9619f, -179.6218f, 74.70035f));
                    VectorList_01.Add(new Vector3(909.2927f, -175.4855f, 73.63686f));
                    VectorList_02.Add(new Vector3(981.9587f, -103.4368f, 74.84873f));
                    VectorList_01.Add(new Vector3(979.7997f, -115.6234f, 73.57495f));
                    VectorList_02.Add(new Vector3(952.8666f, -252.3892f, 67.98509f));
                    VectorList_01.Add(new Vector3(946.447f, -255.0999f, 67.03085f));
                    VectorList_02.Add(new Vector3(930.8372f, -245.196f, 69.00294f));
                    VectorList_01.Add(new Vector3(924.669f, -254.4765f, 67.81981f));
                    VectorList_02.Add(new Vector3(921.0618f, -238.4596f, 70.17359f));
                    VectorList_01.Add(new Vector3(912.358f, -246.1808f, 68.61733f));
                    VectorList_02.Add(new Vector3(880.0348f, -205.1522f, 71.97648f));
                    VectorList_01.Add(new Vector3(872.5756f, -206.5369f, 70.22362f));
                    VectorList_02.Add(new Vector3(840.3095f, -181.7112f, 74.18803f));
                    VectorList_01.Add(new Vector3(840.9575f, -195.8371f, 72.03631f));
                    VectorList_02.Add(new Vector3(808.4063f, -164.1897f, 75.74919f));
                    VectorList_01.Add(new Vector3(803.6614f, -177.258f, 72.21603f));
                    VectorList_02.Add(new Vector3(798.9208f, -159.3197f, 74.89246f));
                    VectorList_01.Add(new Vector3(789.8212f, -171.2433f, 73.21214f));
                    VectorList_02.Add(new Vector3(773.602f, -150.4751f, 75.61332f));
                    VectorList_01.Add(new Vector3(768.3834f, -159.254f, 73.72443f));
                }
                else //        "CHIL" 
                {
                    VectorList_02.Add(new Vector3(-419.193f, 1146.05f, 325.8549f));
                    VectorList_01.Add(new Vector3(-412.1227f, 1174.139f, 325.0765f));
                    VectorList_02.Add(new Vector3(217.3246f, 1192.034f, 225.5947f));
                    VectorList_01.Add(new Vector3(229.2496f, 1194.73f, 224.8951f));
                    VectorList_02.Add(new Vector3(815.1804f, 543.0743f, 125.9202f));
                    VectorList_01.Add(new Vector3(816.4588f, 561.2748f, 125.2159f));
                    VectorList_02.Add(new Vector3(659.97f, 592.8452f, 129.0509f));
                    VectorList_01.Add(new Vector3(645.7329f, 599.199f, 128.346f));
                    VectorList_02.Add(new Vector3(-189.7077f, 977.7711f, 236.135f));
                    VectorList_01.Add(new Vector3(-169.762f, 971.246f, 236.3166f));
                    VectorList_02.Add(new Vector3(-144.6623f, 884.5777f, 233.5724f));
                    VectorList_01.Add(new Vector3(-137.541f, 904.4686f, 235.2376f));
                    VectorList_02.Add(new Vector3(-85.99014f, 834.6893f, 235.9201f));
                    VectorList_01.Add(new Vector3(-106.22f, 833.5862f, 235.2054f));
                    VectorList_02.Add(new Vector3(-46.26027f, 899.7635f, 231.5049f));
                    VectorList_01.Add(new Vector3(-72.19061f, 896.1033f, 235.0206f));
                    VectorList_02.Add(new Vector3(-104.0571f, 974.8898f, 235.7569f));
                    VectorList_01.Add(new Vector3(-124.1415f, 990.1696f, 235.2449f));
                }
            }
            else if (Local == 5)
            {
                if (bRandom)
                    iArea = RandInt(1, 7);

                if (iArea == 1)//        "GREATC" || MyZone 0)//        "ZANCUDO" || MyZone 0)//        "SLAB" 
                {
                    VectorList_02.Add(new Vector3(8.881083f, 3685.904f, 39.61732f));
                    VectorList_01.Add(new Vector3(26.05397f, 3685.02f, 39.06121f));
                    VectorList_02.Add(new Vector3(-462.365f, 2865.509f, 35.04441f));
                    VectorList_01.Add(new Vector3(-449.1972f, 2861.065f, 35.08772f));
                    VectorList_02.Add(new Vector3(-1105.215f, 2696.135f, 18.61517f));
                    VectorList_01.Add(new Vector3(-1098.553f, 2690.11f, 19.06244f));
                    VectorList_02.Add(new Vector3(-290.5939f, 2528.723f, 74.61299f));
                    VectorList_01.Add(new Vector3(-283.2376f, 2542.211f, 74.01343f));
                    VectorList_02.Add(new Vector3(-310.4129f, 2794.155f, 59.46859f));
                    VectorList_01.Add(new Vector3(-317.8717f, 2748.369f, 66.60876f));
                }
                else if (iArea == 2)//        "DESRT" || MyZone 0)//        "HARMO" || MyZone 0)//        "RTRAK" || MyZone 0)//        "JAIL" 
                {
                    VectorList_02.Add(new Vector3(1106.108f, 2652.767f, 38.14092f));
                    VectorList_01.Add(new Vector3(1137.087f, 2665.955f, 37.20128f));
                    VectorList_02.Add(new Vector3(1106.378f, 2648.518f, 38.14092f));
                    VectorList_01.Add(new Vector3(1137.087f, 2665.955f, 37.20128f));
                    VectorList_02.Add(new Vector3(1107.603f, 2641.913f, 38.14375f));
                    VectorList_01.Add(new Vector3(1137.087f, 2665.955f, 37.20128f));
                    VectorList_02.Add(new Vector3(1115.116f, 2641.803f, 38.14375f));
                    VectorList_01.Add(new Vector3(1137.087f, 2665.955f, 37.20128f));
                    VectorList_02.Add(new Vector3(1121.895f, 2641.998f, 38.14375f));
                    VectorList_01.Add(new Vector3(1137.087f, 2665.955f, 37.20128f));
                    VectorList_02.Add(new Vector3(1125.351f, 2641.756f, 38.14389f));
                    VectorList_01.Add(new Vector3(1137.087f, 2665.955f, 37.20128f));
                    VectorList_02.Add(new Vector3(1133.093f, 2641.903f, 38.1437f));
                    VectorList_01.Add(new Vector3(1137.087f, 2665.955f, 37.20128f));
                    VectorList_02.Add(new Vector3(1136.419f, 2641.913f, 38.1437f));
                    VectorList_01.Add(new Vector3(1137.087f, 2665.955f, 37.20128f));
                    VectorList_02.Add(new Vector3(1141.487f, 2642.028f, 38.1437f));
                    VectorList_01.Add(new Vector3(1137.087f, 2665.955f, 37.20128f));
                    VectorList_02.Add(new Vector3(1142.277f, 2643.694f, 38.1437f));
                    VectorList_01.Add(new Vector3(1137.087f, 2665.955f, 37.20128f));
                    VectorList_02.Add(new Vector3(1142.131f, 2651.322f, 38.14091f));
                    VectorList_01.Add(new Vector3(1137.087f, 2665.955f, 37.20128f));
                    VectorList_02.Add(new Vector3(1142.421f, 2654.643f, 38.1504f));
                    VectorList_01.Add(new Vector3(1137.087f, 2665.955f, 37.20128f));
                    VectorList_02.Add(new Vector3(722.1896f, 2330.87f, 51.75035f));
                    VectorList_01.Add(new Vector3(716.0236f, 2341.886f, 49.38189f));
                    VectorList_02.Add(new Vector3(791.8693f, 2176.558f, 52.64839f));
                    VectorList_01.Add(new Vector3(811.7886f, 2178.157f, 51.58363f));
                    VectorList_02.Add(new Vector3(1535.814f, 2231.998f, 77.69906f));
                    VectorList_01.Add(new Vector3(1524.794f, 2230.634f, 74.86063f));
                    VectorList_02.Add(new Vector3(1392.468f, 2162.03f, 97.74464f));
                    VectorList_01.Add(new Vector3(1402.862f, 2163.731f, 97.28335f));
                    VectorList_02.Add(new Vector3(1586.27f, 2906.867f, 57.97039f));
                    VectorList_01.Add(new Vector3(1587.733f, 2896.49f, 56.26361f));
                    VectorList_02.Add(new Vector3(980.3115f, 2666.715f, 40.05014f));
                    VectorList_01.Add(new Vector3(994.0294f, 2674.613f, 39.1761f));
                    VectorList_02.Add(new Vector3(976.7388f, 2730.973f, 39.51086f));
                    VectorList_01.Add(new Vector3(969.2026f, 2716.069f, 38.97165f));
                    VectorList_02.Add(new Vector3(890.3466f, 2854.747f, 57.0004f));
                    VectorList_01.Add(new Vector3(880.4413f, 2853.6f, 56.27011f));
                    VectorList_02.Add(new Vector3(848.1699f, 2864.064f, 58.48573f));
                    VectorList_01.Add(new Vector3(858.4886f, 2849.197f, 57.06968f));
                    VectorList_02.Add(new Vector3(859.2158f, 2877.006f, 57.98265f));
                    VectorList_01.Add(new Vector3(872.1891f, 2869.081f, 56.36434f));
                    VectorList_02.Add(new Vector3(564.4514f, 2598.54f, 43.8341f));
                    VectorList_01.Add(new Vector3(556.0435f, 2596.402f, 42.30201f));
                    VectorList_02.Add(new Vector3(506.3685f, 2610.314f, 43.94688f));
                    VectorList_01.Add(new Vector3(497.8611f, 2614.855f, 42.44781f));
                    VectorList_02.Add(new Vector3(470.9477f, 2607.567f, 44.4772f));
                    VectorList_01.Add(new Vector3(466.2688f, 2616.857f, 42.74304f));
                    VectorList_02.Add(new Vector3(382.2904f, 2576.652f, 44.23201f));
                    VectorList_01.Add(new Vector3(376.918f, 2575.872f, 43.00775f));
                    VectorList_02.Add(new Vector3(366.9477f, 2571.536f, 44.49765f));
                    VectorList_01.Add(new Vector3(355.9208f, 2574.071f, 43.0085f));
                    VectorList_02.Add(new Vector3(348.3048f, 2565.5f, 43.51952f));
                    VectorList_01.Add(new Vector3(342.304f, 2562.802f, 43.01845f));
                    VectorList_02.Add(new Vector3(201.1159f, 2442.344f, 60.4483f));
                    VectorList_01.Add(new Vector3(211.0188f, 2443.243f, 57.91403f));
                    VectorList_02.Add(new Vector3(392.1702f, 2634.382f, 44.66927f));
                    VectorList_01.Add(new Vector3(385.7183f, 2639.736f, 43.9827f));
                    VectorList_02.Add(new Vector3(384.7893f, 2632.815f, 44.68297f));
                    VectorList_01.Add(new Vector3(373.8996f, 2634.392f, 43.98769f));
                    VectorList_02.Add(new Vector3(379.0063f, 2630.322f, 44.64661f));
                    VectorList_01.Add(new Vector3(374.3689f, 2634.371f, 43.79418f));
                    VectorList_02.Add(new Vector3(372.6312f, 2628.28f, 44.68018f));
                    VectorList_01.Add(new Vector3(373.8996f, 2634.392f, 43.98738f));
                    VectorList_02.Add(new Vector3(366.9004f, 2624.87f, 44.67241f));
                    VectorList_01.Add(new Vector3(373.9002f, 2634.391f, 43.98606f));
                    VectorList_02.Add(new Vector3(359.1547f, 2623.402f, 44.68687f));
                    VectorList_01.Add(new Vector3(347.9727f, 2626.478f, 43.98643f));
                    VectorList_02.Add(new Vector3(354.2147f, 2620.051f, 44.67242f));
                    VectorList_01.Add(new Vector3(347.9726f, 2626.479f, 43.98935f));
                    VectorList_02.Add(new Vector3(346.7339f, 2618.583f, 44.68309f));
                    VectorList_01.Add(new Vector3(347.9692f, 2626.481f, 43.99496f));
                    VectorList_02.Add(new Vector3(341.5994f, 2615.505f, 44.66917f));
                    VectorList_01.Add(new Vector3(347.9725f, 2626.479f, 43.9882f));
                    VectorList_02.Add(new Vector3(-35.57145f, 2871.392f, 59.59684f));
                    VectorList_01.Add(new Vector3(-37.22775f, 2865.152f, 58.68879f));
                    VectorList_02.Add(new Vector3(195.0032f, 3030.994f, 43.88666f));
                    VectorList_01.Add(new Vector3(199.7019f, 3038.737f, 42.86736f));
                    VectorList_02.Add(new Vector3(241.1663f, 3107.958f, 42.48717f));
                    VectorList_01.Add(new Vector3(233.7224f, 3094.945f, 41.97177f));
                    VectorList_02.Add(new Vector3(190.2618f, 3094.545f, 43.07414f));
                    VectorList_01.Add(new Vector3(177.1561f, 3095.674f, 42.49979f));
                    VectorList_02.Add(new Vector3(248.6368f, 3180.585f, 42.91877f));
                    VectorList_01.Add(new Vector3(236.9269f, 3163.9f, 42.0658f));
                }
                else if (iArea == 3)//        "ZQ_UAR" 
                {
                    VectorList_02.Add(new Vector3(2569.701f, 2719.698f, 42.90607f));
                    VectorList_01.Add(new Vector3(2574.727f, 2716.069f, 41.63546f));
                    VectorList_02.Add(new Vector3(2833.906f, 2806.462f, 57.40425f));
                    VectorList_01.Add(new Vector3(2828.2f, 2796.574f, 56.86005f));
                    VectorList_02.Add(new Vector3(2745.813f, 2787.738f, 35.57073f));
                    VectorList_01.Add(new Vector3(2732.689f, 2780.434f, 35.11758f));
                    VectorList_02.Add(new Vector3(2706.889f, 2776.905f, 37.87803f));
                    VectorList_01.Add(new Vector3(2695.961f, 2773.133f, 37.06485f));
                    VectorList_02.Add(new Vector3(2627.236f, 2935.35f, 40.42284f));
                    VectorList_01.Add(new Vector3(2622.771f, 2910.397f, 35.8194f));
                    VectorList_02.Add(new Vector3(2663.344f, 2891.49f, 36.90667f));
                    VectorList_01.Add(new Vector3(2659.201f, 2899.723f, 35.50852f));
                    VectorList_02.Add(new Vector3(2601.118f, 2803.863f, 33.82192f));
                    VectorList_01.Add(new Vector3(2592.893f, 2797.829f, 33.27939f));

                }
                else if (iArea == 4)//        "SANDY" 
                {
                    VectorList_02.Add(new Vector3(2389.463f, 3341.572f, 47.72219f));
                    VectorList_01.Add(new Vector3(2396.545f, 3325.496f, 46.83057f));
                    VectorList_02.Add(new Vector3(2392.829f, 3320.546f, 48.45065f));
                    VectorList_01.Add(new Vector3(2396.545f, 3325.496f, 46.83057f));
                    VectorList_02.Add(new Vector3(2489.863f, 3442.953f, 50.06467f));
                    VectorList_01.Add(new Vector3(2477.348f, 3425.041f, 49.09996f));
                    VectorList_02.Add(new Vector3(1385.014f, 3659.524f, 34.92771f));
                    VectorList_01.Add(new Vector3(1385.874f, 3676.129f, 32.83449f));
                    VectorList_02.Add(new Vector3(1406.574f, 3656.235f, 34.21167f));
                    VectorList_01.Add(new Vector3(1397.748f, 3669.189f, 33.09452f));
                    VectorList_02.Add(new Vector3(1536.855f, 3707.824f, 34.82714f));
                    VectorList_01.Add(new Vector3(1521.929f, 3719.167f, 33.54586f));
                    VectorList_02.Add(new Vector3(1827.154f, 3729.609f, 33.96196f));
                    VectorList_01.Add(new Vector3(1831.226f, 3722.84f, 32.44462f));
                    VectorList_02.Add(new Vector3(1851.281f, 3784.816f, 33.04296f));
                    VectorList_01.Add(new Vector3(1847.915f, 3766.17f, 32.21405f));
                    VectorList_02.Add(new Vector3(1900.309f, 3772.731f, 32.87964f));
                    VectorList_01.Add(new Vector3(1906.825f, 3784.434f, 31.81898f));
                    VectorList_02.Add(new Vector3(1880.978f, 3810.795f, 32.77878f));
                    VectorList_01.Add(new Vector3(1892.596f, 3815.768f, 31.49548f));
                    VectorList_02.Add(new Vector3(1777.051f, 3799.372f, 34.54548f));
                    VectorList_01.Add(new Vector3(1769.489f, 3788.509f, 33.01802f));
                    VectorList_02.Add(new Vector3(1639.738f, 3731.604f, 35.0671f));
                    VectorList_01.Add(new Vector3(1648.793f, 3727.542f, 33.49438f));
                    VectorList_02.Add(new Vector3(1661.924f, 3820.039f, 35.46976f));
                    VectorList_01.Add(new Vector3(1666.821f, 3808.889f, 34.00944f));
                    VectorList_02.Add(new Vector3(1691.653f, 3866.071f, 34.90841f));
                    VectorList_01.Add(new Vector3(1682.875f, 3870.218f, 34.03076f));
                    VectorList_02.Add(new Vector3(1837.934f, 3916.815f, 33.24038f));
                    VectorList_01.Add(new Vector3(1837.688f, 3902.202f, 32.38109f));
                    VectorList_02.Add(new Vector3(1832.167f, 3868.24f, 34.2976f));
                    VectorList_01.Add(new Vector3(1822.602f, 3874.45f, 32.92525f));
                    VectorList_02.Add(new Vector3(1858.24f, 3854.265f, 33.08321f));
                    VectorList_01.Add(new Vector3(1864.39f, 3845.125f, 31.78188f));
                    VectorList_02.Add(new Vector3(1902.802f, 3866.26f, 33.06639f));
                    VectorList_01.Add(new Vector3(1908.797f, 3859.409f, 31.54244f));
                    VectorList_02.Add(new Vector3(1894.084f, 3895.881f, 33.15143f));
                    VectorList_01.Add(new Vector3(1884.966f, 3886.014f, 32.10987f));
                    VectorList_02.Add(new Vector3(1916.24f, 3909.3f, 33.44159f));
                    VectorList_01.Add(new Vector3(1929.137f, 3921.694f, 31.60845f));
                    VectorList_02.Add(new Vector3(1936.745f, 3891.11f, 32.53016f));
                    VectorList_01.Add(new Vector3(1937.799f, 3877.645f, 31.41957f));
                    VectorList_02.Add(new Vector3(2179.24f, 3496.884f, 45.88393f));
                    VectorList_01.Add(new Vector3(2171.346f, 3506.891f, 44.64259f));
                    VectorList_02.Add(new Vector3(2163.232f, 3374.59f, 46.14158f));
                    VectorList_01.Add(new Vector3(2169.843f, 3365.11f, 44.7066f));
                    VectorList_02.Add(new Vector3(2200.855f, 3318.164f, 46.88804f));
                    VectorList_01.Add(new Vector3(2214.03f, 3309.552f, 45.19223f));
                }
                else if (iArea == 5)//        "ALAMO" 
                {
                    VectorList_02.Add(new Vector3(387.3527f, 3584.745f, 33.29222f));
                    VectorList_01.Add(new Vector3(378.4148f, 3592.091f, 32.48848f));
                    VectorList_02.Add(new Vector3(438.4768f, 3570.548f, 33.89853f));
                    VectorList_01.Add(new Vector3(426.7444f, 3578.094f, 32.42588f));
                    VectorList_02.Add(new Vector3(911.0425f, 3644.367f, 32.67706f));
                    VectorList_01.Add(new Vector3(910.9032f, 3637.734f, 31.6573f));
                    VectorList_02.Add(new Vector3(899.5674f, 3582.851f, 33.41278f));
                    VectorList_01.Add(new Vector3(908.0741f, 3590.216f, 32.38536f));
                    VectorList_02.Add(new Vector3(959.2548f, 3619.023f, 32.66993f));
                    VectorList_01.Add(new Vector3(950.4551f, 3615.18f, 31.81508f));
                }
                else if (iArea == 6)//        "SANCHIA" || MyZone 0)//        "HUMLAB" 
                {
                    VectorList_02.Add(new Vector3(3807.908f, 4478.596f, 6.365325f));
                    VectorList_01.Add(new Vector3(3794.228f, 4467.279f, 4.846033f));
                    VectorList_02.Add(new Vector3(3725.273f, 4525.252f, 22.46952f));
                    VectorList_01.Add(new Vector3(3712.427f, 4519.564f, 20.82699f));
                    VectorList_02.Add(new Vector3(3688.062f, 4562.869f, 25.18306f));
                    VectorList_01.Add(new Vector3(3694.858f, 4557.306f, 24.63262f));
                    VectorList_02.Add(new Vector3(2890.177f, 4391.291f, 50.33842f));
                    VectorList_01.Add(new Vector3(2898.639f, 4387.975f, 49.53016f));
                    VectorList_02.Add(new Vector3(2660.38f, 3291.893f, 55.82876f));
                    VectorList_01.Add(new Vector3(2650.044f, 3282.463f, 54.71011f));
                    VectorList_02.Add(new Vector3(2632.871f, 3258.812f, 55.46336f));
                    VectorList_01.Add(new Vector3(2638.369f, 3265.512f, 54.72956f));
                }
                else //        "GRAPES" || MyZone 0)//        "GALFISH"
                {
                    VectorList_02.Add(new Vector3(1338.701f, 4359.917f, 44.36738f));
                    VectorList_01.Add(new Vector3(1345.047f, 4368.24f, 43.90841f));
                    VectorList_02.Add(new Vector3(1366.181f, 4358.456f, 44.5f));
                    VectorList_01.Add(new Vector3(1368.074f, 4367.771f, 43.932f));
                    VectorList_02.Add(new Vector3(1374.121f, 4381.065f, 45.11992f));
                    VectorList_01.Add(new Vector3(1367.757f, 4376.39f, 43.89225f));
                    VectorList_02.Add(new Vector3(1429.394f, 4377.73f, 44.59793f));
                    VectorList_01.Add(new Vector3(1423.805f, 4384.286f, 43.51751f));
                    VectorList_02.Add(new Vector3(1663.095f, 4775.675f, 42.00761f));
                    VectorList_01.Add(new Vector3(1670.112f, 4769.056f, 41.45914f));
                    VectorList_02.Add(new Vector3(1659.559f, 4756.741f, 41.96615f));
                    VectorList_01.Add(new Vector3(1670.749f, 4751.769f, 41.44023f));
                    VectorList_02.Add(new Vector3(1675.876f, 4680.809f, 43.05522f));
                    VectorList_01.Add(new Vector3(1686.044f, 4680.881f, 42.62078f));
                    VectorList_02.Add(new Vector3(1718.966f, 4676.812f, 43.65579f));
                    VectorList_01.Add(new Vector3(1711.55f, 4669.007f, 42.65202f));
                    VectorList_02.Add(new Vector3(1674.403f, 4657.681f, 43.37113f));
                    VectorList_01.Add(new Vector3(1681.119f, 4653.235f, 42.55849f));
                    VectorList_02.Add(new Vector3(1724.62f, 4641.602f, 43.87546f));
                    VectorList_01.Add(new Vector3(1723.476f, 4629.428f, 42.39647f));
                    VectorList_02.Add(new Vector3(1966.87f, 4634.104f, 41.1016f));
                    VectorList_01.Add(new Vector3(1963.076f, 4643.931f, 39.92876f));
                }
            }
            else
            {
                if (bRandom)
                    iArea = RandInt(1, 4);

                if (iArea == 1)//        "NCHU" || MyZone 0)//        "MTJOSE" || MyZone 0)//        "ARMYB"     "CANNY" || MyZone 0)//        "CCREAK"   "CMSW" ||  MyZone 0)//        "PALCOV" 
                {
                    VectorList_02.Add(new Vector3(-2192.83f, 4285.766f, 49.17549f));
                    VectorList_01.Add(new Vector3(-2197.211f, 4268.291f, 48.03174f));
                    VectorList_02.Add(new Vector3(-2230.192f, 3481.066f, 30.16892f));
                    VectorList_01.Add(new Vector3(-2244.532f, 3473.812f, 29.93354f));

                    VectorList_02.Add(new Vector3(-1555.876f, 4460.74f, 17.30642f));
                    VectorList_01.Add(new Vector3(-1553.37f, 4480.744f, 19.11336f));
                    VectorList_02.Add(new Vector3(-1072.359f, 4369.473f, 13.50683f));
                    VectorList_01.Add(new Vector3(-1065.936f, 4376.642f, 11.79403f));
                    VectorList_02.Add(new Vector3(-1350.143f, 4261.536f, 7.27169f));
                    VectorList_01.Add(new Vector3(-1360.185f, 4297.027f, 1.867007f));

                    VectorList_02.Add(new Vector3(-1042.253f, 4909.827f, 208.3053f));
                    VectorList_01.Add(new Vector3(-1037.468f, 4916.057f, 206.3439f));
                    VectorList_02.Add(new Vector3(-1490.407f, 4981.597f, 63.35542f));
                    VectorList_01.Add(new Vector3(-1496.595f, 4981.688f, 62.52434f));
                    VectorList_02.Add(new Vector3(-1567.983f, 5178.375f, 15.77355f));
                    VectorList_01.Add(new Vector3(-1581.282f, 5165.406f, 19.15366f));
                }
                else if (iArea == 2)//        "MTCHIL" || MyZone 0)//        "PROCOB" || MyZone 0)//        "PALFOR" 
                {
                    VectorList_02.Add(new Vector3(-502.3836f, 5264.665f, 80.61025f));
                    VectorList_01.Add(new Vector3(-512.0334f, 5258.259f, 80.2546f));
                    VectorList_02.Add(new Vector3(-552.933f, 5348.917f, 74.74302f));
                    VectorList_01.Add(new Vector3(-566.3308f, 5352.837f, 69.61542f));
                    VectorList_02.Add(new Vector3(-709.4831f, 5769.405f, 17.5092f));
                    VectorList_01.Add(new Vector3(-694.3478f, 5772.844f, 16.9762f));
                    VectorList_02.Add(new Vector3(-701.7791f, 5765.044f, 17.51088f));
                    VectorList_01.Add(new Vector3(-694.3478f, 5772.844f, 16.9762f));
                    VectorList_02.Add(new Vector3(-698.0701f, 5763.163f, 17.51098f));
                    VectorList_01.Add(new Vector3(-694.3478f, 5772.844f, 16.9762f));
                    VectorList_02.Add(new Vector3(-694.1993f, 5761.503f, 17.511f));
                    VectorList_01.Add(new Vector3(-694.3478f, 5772.844f, 16.9762f));
                    VectorList_02.Add(new Vector3(-689.9605f, 5759.66f, 17.511f));
                    VectorList_01.Add(new Vector3(-694.3478f, 5772.844f, 16.9762f));
                    VectorList_02.Add(new Vector3(-687.4717f, 5758.861f, 17.511f));
                    VectorList_01.Add(new Vector3(-694.3478f, 5772.844f, 16.9762f));
                    VectorList_02.Add(new Vector3(-685.622f, 5762.833f, 17.511f));
                    VectorList_01.Add(new Vector3(-694.3478f, 5772.844f, 16.9762f));
                    VectorList_02.Add(new Vector3(-682.1684f, 5770.896f, 17.51058f));
                    VectorList_01.Add(new Vector3(-694.3478f, 5772.844f, 16.9762f));
                    VectorList_02.Add(new Vector3(-683.8336f, 5766.68f, 17.511f));
                    VectorList_01.Add(new Vector3(-694.3478f, 5772.844f, 16.9762f));
                    VectorList_02.Add(new Vector3(-749.814f, 5598.417f, 40.64638f));
                    VectorList_01.Add(new Vector3(-772.4623f, 5583.537f, 33.13069f));
                    VectorList_02.Add(new Vector3(-841.0642f, 5401.115f, 34.61522f));
                    VectorList_01.Add(new Vector3(-838.1064f, 5410.326f, 34.10001f));
                }
                else if (iArea == 3)//        "PALETO" 
                {
                    VectorList_02.Add(new Vector3(-371.8559f, 6335.212f, 29.84368f));
                    VectorList_01.Add(new Vector3(-359.8704f, 6328.174f, 29.0792f));
                    VectorList_02.Add(new Vector3(-272.5724f, 6400.933f, 31.50485f));
                    VectorList_01.Add(new Vector3(-262.445f, 6402.843f, 30.19f));
                    VectorList_02.Add(new Vector3(-246.0781f, 6414.225f, 31.4606f));
                    VectorList_01.Add(new Vector3(-248.9544f, 6406.491f, 30.78173f));
                    VectorList_02.Add(new Vector3(-230.1529f, 6445.155f, 31.19745f));
                    VectorList_01.Add(new Vector3(-223.0589f, 6432.951f, 30.84467f));
                    VectorList_02.Add(new Vector3(-130.6867f, 6551.887f, 29.87188f));
                    VectorList_01.Add(new Vector3(-124.9483f, 6550.625f, 29.07267f));
                    VectorList_02.Add(new Vector3(-41.50317f, 6637.042f, 31.08753f));
                    VectorList_01.Add(new Vector3(-39.79873f, 6625.59f, 29.81621f));
                    VectorList_02.Add(new Vector3(-9.389118f, 6654.011f, 31.50423f));
                    VectorList_01.Add(new Vector3(-14.04558f, 6645.291f, 30.75609f));
                    VectorList_02.Add(new Vector3(35.13187f, 6662.611f, 32.19038f));
                    VectorList_01.Add(new Vector3(22.50064f, 6655.907f, 31.11742f));

                    VectorList_02.Add(new Vector3(-453.2734f, 6337.072f, 13.09414f));
                    VectorList_01.Add(new Vector3(-447.8893f, 6347.536f, 11.89663f));
                    VectorList_02.Add(new Vector3(-480.8771f, 6266.04f, 13.6347f));
                    VectorList_01.Add(new Vector3(-491.188f, 6263.797f, 11.58691f));
                    VectorList_02.Add(new Vector3(-14.98113f, 6557.459f, 33.24044f));
                    VectorList_01.Add(new Vector3(-6.39504f, 6559.146f, 31.26225f));
                    VectorList_02.Add(new Vector3(11.70875f, 6578.31f, 33.0708f));
                    VectorList_01.Add(new Vector3(18.09615f, 6580.185f, 31.61535f));
                    VectorList_02.Add(new Vector3(25.71288f, 6602.099f, 32.47048f));
                    VectorList_01.Add(new Vector3(41.19342f, 6605.401f, 31.70087f));
                    VectorList_02.Add(new Vector3(1.700827f, 6612.539f, 32.07838f));
                    VectorList_01.Add(new Vector3(-4.421872f, 6617.645f, 30.76105f));
                    VectorList_02.Add(new Vector3(-26.80732f, 6597.684f, 31.86026f));
                    VectorList_01.Add(new Vector3(-17.67091f, 6608.921f, 30.31045f));
                    VectorList_02.Add(new Vector3(-33.86079f, 6571.095f, 31.47055f));
                    VectorList_01.Add(new Vector3(-39.9745f, 6591.987f, 29.84397f));
                    VectorList_02.Add(new Vector3(-105.4981f, 6528.586f, 30.16692f));
                    VectorList_01.Add(new Vector3(-108.3041f, 6537.882f, 29.08501f));
                    VectorList_02.Add(new Vector3(-180.695f, 6404.67f, 31.88605f));
                    VectorList_01.Add(new Vector3(-190.6143f, 6415.651f, 31.17549f));
                    VectorList_02.Add(new Vector3(-213.6821f, 6396.523f, 33.0851f));
                    VectorList_01.Add(new Vector3(-207.1203f, 6407.241f, 31.05694f));
                    VectorList_02.Add(new Vector3(-227.5194f, 6378.039f, 31.75923f));
                    VectorList_01.Add(new Vector3(-223.1334f, 6385.887f, 30.87843f));
                    VectorList_02.Add(new Vector3(-247.9305f, 6370.228f, 31.84764f));
                    VectorList_01.Add(new Vector3(-256.1295f, 6362.513f, 30.77239f));
                    VectorList_02.Add(new Vector3(-280.6378f, 6350.979f, 32.57881f));
                    VectorList_01.Add(new Vector3(-272.5419f, 6360.252f, 31.20849f));
                    VectorList_02.Add(new Vector3(-302.668f, 6327.436f, 32.88649f));
                    VectorList_01.Add(new Vector3(-295.5428f, 6339.388f, 31.43028f));
                    VectorList_02.Add(new Vector3(-316.6211f, 6294.715f, 32.48936f));
                    VectorList_01.Add(new Vector3(-316.8424f, 6315.597f, 31.3995f));
                    VectorList_02.Add(new Vector3(-374.4959f, 6190.917f, 31.72955f));
                    VectorList_01.Add(new Vector3(-376.7037f, 6183.094f, 30.78619f));
                    VectorList_02.Add(new Vector3(-367.3759f, 6213.406f, 31.84218f));
                    VectorList_01.Add(new Vector3(-366.3954f, 6200.037f, 30.78314f));
                    VectorList_02.Add(new Vector3(-347.6381f, 6225.237f, 31.8841f));
                    VectorList_01.Add(new Vector3(-348.7925f, 6217.142f, 30.78026f));
                    VectorList_02.Add(new Vector3(-371.1718f, 6267.241f, 31.87273f));
                    VectorList_01.Add(new Vector3(-367.3638f, 6281.116f, 29.35941f));
                    VectorList_02.Add(new Vector3(-379.793f, 6252.999f, 31.85118f));
                    VectorList_01.Add(new Vector3(-383.5283f, 6268.838f, 29.99367f));
                    VectorList_02.Add(new Vector3(-454.6533f, 6204.072f, 29.55285f));
                    VectorList_01.Add(new Vector3(-437.5063f, 6204.955f, 28.87807f));
                    VectorList_02.Add(new Vector3(-446.5808f, 6259.138f, 30.0415f));
                    VectorList_01.Add(new Vector3(-431.2646f, 6264.82f, 29.62897f));
                    VectorList_02.Add(new Vector3(-406.9542f, 6313.816f, 28.94232f));
                    VectorList_01.Add(new Vector3(-394.35f, 6309.122f, 28.48195f));
                }
                else //        "BRADP" || MyZone 0)//        "MTGORDO" || MyZone 0)//        "ELGORL"
                {
                    VectorList_02.Add(new Vector3(2017.828f, 6265.965f, 45.32155f));
                    VectorList_01.Add(new Vector3(2002.664f, 6241.593f, 45.94011f));
                    VectorList_02.Add(new Vector3(3380.229f, 5501.306f, 23.49531f));
                    VectorList_01.Add(new Vector3(3357.473f, 5510.913f, 18.17108f));
                    VectorList_02.Add(new Vector3(3346.712f, 5179.848f, 14.0603f));
                    VectorList_01.Add(new Vector3(3327.778f, 5151.634f, 17.95325f));
                    VectorList_02.Add(new Vector3(2935.547f, 5323.863f, 100.555f));
                    VectorList_01.Add(new Vector3(2917.3f, 5312.813f, 95.62965f));
                }
            }

            if (bUseCustom)
            {
                if (FindBuiltMissions(4))
                {
                    List<Vector3> NewStops_01 = new List<Vector3>();
                    List<Vector3> NewStops_02 = new List<Vector3>();

                    for (int i = 0; i < MyMissions.FubardXM.Count; i++)
                    {
                        NewStops_01.Add(MyMissions.FubardXM[i].FUbarCar);
                        NewStops_02.Add(MyMissions.FubardXM[i].FUbarPed);
                    }

                    if (NewStops_01.Count > 0)
                    {
                        for (int i = 0; i < NewStops_01.Count; i++)
                        {
                            VectorList_01.Add(NewStops_01[i]);
                            VectorList_02.Add(NewStops_02[i]);
                        }
                    }
                }
            }

            return iArea;
        }
        private void Fubar_CarShare()
        {
            LogThis("Fubar_CarShare");

            FreeSeat(VehTrackin_01, 2, true);
            FreeSeat(VehTrackin_01, 3, true);
            FreeSeat(VehTrackin_01, 4, true);

            float fAce = Function.Call<float>(Hash.GET_HEADING_FROM_VECTOR_2D, vTarget_01.X - vTarget_02.X, vTarget_01.Y - vTarget_02.Y);

            if (iList_01[3] == 1)
            {
                int iRandNumb = RandInt(0, 30);
                if (iRandNumb < 10)
                    Npc_01 = NPCSpawn(RandNPC(RandInt(1, 35)), vTarget_01, fAce, false, 180, 5, 0, null, 0, true, 18, 0, MyLang.Maptext[45]);
                else if (iRandNumb < 20)
                    Npc_01 = NPCSpawn(RandNPC(RandInt(1, 35)), vTarget_01, fAce, false, 180, 6, 0, null, 0, true, 18, 0, MyLang.Maptext[45]);
                else
                    Npc_01 = NPCSpawn(RandNPC(RandInt(1, 35)), vTarget_01, fAce, false, 180, 7, 0, null, 0, true, 18, 0, MyLang.Maptext[45]);
            }
            else if (iList_01[3] == 2)
            {
                Npc_01 = NPCSpawn(RandNPC(RandInt(1, 35)), vTarget_01, fAce, false, 180, 6, 0, null, 0, true, 18, 0, MyLang.Maptext[45]);
                Npc_02 = NPCSpawn(RandNPC(RandInt(1, 35)), vTarget_01, fAce, false, 180, 7, 0, null, 0, true, 18, 0, MyLang.Maptext[45]);
            }
            else
            {
                Npc_01 = NPCSpawn(RandNPC(RandInt(1, 35)), vTarget_01, fAce, false, 180, 5, 0, null, 0, true, 18, 0, MyLang.Maptext[45]);
                Npc_02 = NPCSpawn(RandNPC(RandInt(1, 35)), vTarget_01, fAce, false, 180, 6, 0, null, 0, true, 18, 0, MyLang.Maptext[45]);
                Npc_03 = NPCSpawn(RandNPC(RandInt(1, 35)), vTarget_01, fAce, false, 180, 7, 0, null, 0, true, 18, 0, MyLang.Maptext[45]);
            }
        }
        private void Fubar_AngreyTaxi()
        {
            LogThis("Fubar_AngreyTaxi");

            int iTax = RandInt(0, 50);
            if (iTax < 20 && Game.Player.Character.IsInVehicle(VehTrackin_01))
            {
                if (iAngerTax < 1)
                {
                    int iNoAttacks = (iLocationX - 7) * -1;
                    iAngerTax = 10;
                    for (int i = 0; i < iNoAttacks; i++)
                        SearchVeh(35.00f, 150.00f, "TAXI", false, false, false, false, 20, 0, 1, MyLang.Maptext[24], 0, false, true);
                }
            }
            else
                BeOnOff[2] = false;
            iAngerTax = iAngerTax - 1;
        }
        private void Fubar_Math(bool bTextBar)
        {
            iFuClock = Game.GameTime + 5000;

            float fFIndFee = vTarget_02.DistanceTo(VehTrackin_01.Position) / 50;
            int iCost = (int)fFIndFee + 5;
            if (iCost > iCashBouns)
                iCashBouns = iCost;

            if (bTextBar)
                ttTextBar_01.Text = "$ " + iCashBouns + "";
        }
        private void Pilot01_ChecksNBalance(bool bEnd)
        {
            LogThis("Pilot01_ChecksNBalance, bEnd == " + bEnd);
            CleanUpCheckPoints();
            RemoveTargets();
            iMissionVar_01 -= 1;
            vTarget_02 = VectorList_01[iMissionVar_01];

            if (iMissionVar_01 > 0)
            {
                int mark2 = iMissionVar_01 - 1;
                vTarget_05 = VectorList_01[mark2];
                AddTarget(vTarget_05, false, false, 0.50f, false, -1, MyLang.Maptext[36]);
                Pilot01_RedNutCheckPoints(false, false);
            }
            AddTarget(vTarget_02, false, true, 1.00f, false, -1, MyLang.Maptext[36]);
            Pilot01_RedNutCheckPoints(bEnd, true);
        }
        private void Pilot01_RedNutCheckPoints(bool bFinish, bool bPrimary)
        {
            LogThis("Pilot01_RedNutCheckPoints, bFinish == " + bFinish + ", bPrimary == " + bPrimary);
            int ThisCheck = 0;
            if (bFinish)
            {
                int iCorona = 42;

                float posX1 = vTarget_02.X;
                float posY1 = vTarget_02.Y;
                float posZ1 = vTarget_02.Z;
                float posX2 = vTarget_05.X;
                float posY2 = vTarget_05.Y;
                float posZ2 = vTarget_05.Z;
                float radius = 15.00f;

                int red = 255;
                int green = 255;
                int blue = 0;
                int alpha = 100;
                int reserved = 170;

                ThisCheck = Function.Call<int>(Hash.CREATE_CHECKPOINT, iCorona, posX1, posY1, posZ1, posX2, posY2, posZ2, radius, red, green, blue, alpha, reserved);
                iCoronaList.Add(ThisCheck);

                red = 0;
                green = 102;
                blue = 255;
                alpha = 150;
                Function.Call(Hash._SET_CHECKPOINT_ICON_RGBA, ThisCheck, red, green, blue, alpha);

                iList_01[1] = iCorona;
            }
            else
            {
                if (bPrimary)
                {                    //37 == flat 38 == left, 39 == Right, 40 == invert
                    int iCorona = 37;

                    if (iMissionVar_01 == 1)
                        iCorona = 40;
                    else if (iMissionVar_01 == 4)
                        iCorona = 40;
                    else if (iMissionVar_01 == 5)
                        iCorona = 38;
                    else if (iMissionVar_01 == 6)
                        iCorona = 38;
                    else if (iMissionVar_01 == 7)
                        iCorona = 38;
                    else if (iMissionVar_01 == 8)
                        iCorona = 38;
                    else if (iMissionVar_01 == 9)
                        iCorona = 40;
                    else if (iMissionVar_01 == 11)
                        iCorona = 38;
                    else if (iMissionVar_01 == 12)
                        iCorona = 38;
                    else if (iMissionVar_01 == 13)
                        iCorona = 38;
                    else if (iMissionVar_01 == 14)
                        iCorona = 38;
                    else if (iMissionVar_01 == 15)
                        iCorona = 38;
                    else if (iMissionVar_01 == 16)
                    {
                        iList_01[2] = Game.GameTime;
                        iCorona = 38;
                    }
                    else if (iMissionVar_01 == 17)
                        iCorona = 37;
                    else if (iMissionVar_01 == 18)
                        iCorona = 42;

                    float posX1 = vTarget_02.X;
                    float posY1 = vTarget_02.Y;
                    float posZ1 = vTarget_02.Z;
                    float posX2 = vTarget_05.X;
                    float posY2 = vTarget_05.Y;
                    float posZ2 = vTarget_05.Z;
                    float radius = 15.00f;

                    int red = 255;
                    int green = 255;
                    int blue = 0;
                    int alpha = 100;
                    int reserved = 0;

                    ThisCheck = Function.Call<int>(Hash.CREATE_CHECKPOINT, iCorona, posX1, posY1, posZ1, posX2, posY2, posZ2, radius, red, green, blue, alpha, reserved);
                    iCoronaList.Add(ThisCheck);

                    red = 0;
                    green = 102;
                    blue = 255;
                    alpha = 150;
                    Function.Call(Hash._SET_CHECKPOINT_ICON_RGBA, ThisCheck, red, green, blue, alpha);

                    iList_01[1] = iCorona;
                }
                else
                {
                    int iCorona = 42;

                    float posX1 = vTarget_05.X;
                    float posY1 = vTarget_05.Y;
                    float posZ1 = vTarget_05.Z;
                    float posX2 = vTarget_02.X;
                    float posY2 = vTarget_02.Y;
                    float posZ2 = vTarget_02.Z;
                    float radius = 7.50f;

                    int red = 255;
                    int green = 128;
                    int blue = 0;
                    int alpha = 100;
                    int reserved = 0;

                    ThisCheck = Function.Call<int>(Hash.CREATE_CHECKPOINT, iCorona, posX1, posY1, posZ1, posX2, posY2, posZ2, radius, red, green, blue, alpha, reserved);
                    iCoronaList.Add(ThisCheck);
                }
            }
            ReadWriteBlips(false, true, -1, ThisCheck, -1, -1, -1, -1);
        }
        private void Pilot04_ImportBob(Vehicle Vhicary)
        {
            LogThis("Pilot04_ImportBob");

            int irandCar = RandInt(1, 50);
            if (irandCar < 10)
                Vhicary.NumberPlate = "D3V1L";
            else if (irandCar < 20)
                Vhicary.NumberPlate = "D34TH4U";
            else if (irandCar < 30)
                Vhicary.NumberPlate = "C4TCHM3";
            else if (irandCar < 40)
                Vhicary.NumberPlate = "D3V1L";
            else
                Vhicary.NumberPlate = "M4K3B4NK";
            Vhicary.AttachTo(VehTrackin_02, Vhicary.Handle, new Vector3(0.0f, 0.0f, -3.0f), new Vector3(0.0f, -15.0f, 0.0f));
        }
        private void Pilot06_TakeAPhoto(Ped Pedx)
        {
            LogThis("Pilot06_TakeAPhoto");

            PedBlimp(Pedx, 0.75f, false, false, 53, MyLang.Maptext[104]);
            GetOutofVeh(Pedx, 1);
            Script.Wait(1000);
            Pedx.Task.WanderAround();
        }
        private void Pilot06_GoBacktoOff(Ped Pedx)
        {
            LogThis("Pilot06_GoBacktoOff");

            GetOutofVeh(Pedx, 0);
            Script.Wait(1000);
            WalkThisWay(Pedx, vTarget_02, 1.00f);
        }
        private void Ambulance_StartLine()
        {
            LogThis("Ambulance_StartLine");

            BeOnOff[2] = true;
            VehTrackin_01.CurrentBlip.Remove();
            AddTarget(vTarget_02, true, true, 1.00f, false, 153, MyLang.Maptext[37]);
            TheYellowCorona(vTarget_02, 5.00f);
            float fdist = World.CalculateTravelDistance(vTarget_01, vTarget_02);
            int idist = (int)fdist;
            iCrash4Cash += idist / 8;
            int iPack = idist * 65;
            if (iPack < 30000)
                iPack = 30000;

            iTime_01[0] = Game.GameTime + iPack;

            if (BeOnOff[7])
            {
                int iHalf = iPack / 3;
                iTime_01[0] = Game.GameTime + (iHalf * 2);
                iCrash4Cash = 0;
            }

            VTBTimerPool.Add(ttTextBar_02);

            if (BeOnOff[6])
                iCrash4Cash = 0;
            else
                BeOnOff[1] = true;
            BeOnOff[3] = true;
        }
        private void Ambulance_Menu()
        {
            LogThis("Ambulance_Menu");

            string sWhatsTheProb = "";
            if (bCovidInf)
            {
                int iRan = RandInt(1, 5);
                if (iRan == 1)
                    sWhatsTheProb = MyLang.Othertext[23];
                else if (iRan == 2)
                    sWhatsTheProb = MyLang.Othertext[24];
                else if (iRan == 3)
                    sWhatsTheProb = MyLang.Othertext[24] + MyLang.Othertext[24] + MyLang.Othertext[24];
                else if (iRan == 4)
                    sWhatsTheProb = MyLang.Othertext[24] + MyLang.Othertext[24] + MyLang.Othertext[24] + " .. " + MyLang.Othertext[24] + MyLang.Othertext[24];
                else
                    sWhatsTheProb = MyLang.Othertext[24] + MyLang.Othertext[25] + MyLang.Othertext[24];
            }
            else if (iList_01[1] == 1)
            {
                int iRan = RandInt(1, 5);
                if (iRan == 1)
                    sWhatsTheProb = MyLang.Othertext[26];
                else if (iRan == 2)
                    sWhatsTheProb = MyLang.Othertext[27];
                else if (iRan == 3)
                    sWhatsTheProb = MyLang.Othertext[28];
                else if (iRan == 4)
                    sWhatsTheProb = MyLang.Othertext[29];
                else
                    sWhatsTheProb = MyLang.Othertext[30];
            }       //Injury
            else if (iList_01[1] == 2)
            {
                int iRan = RandInt(1, 5);
                if (iRan == 1)
                    sWhatsTheProb = MyLang.Othertext[23];
                else if (iRan == 2)
                    sWhatsTheProb = MyLang.Othertext[24];
                else if (iRan == 3)
                    sWhatsTheProb = MyLang.Othertext[24] + MyLang.Othertext[24] + MyLang.Othertext[24];
                else if (iRan == 4)
                    sWhatsTheProb = MyLang.Othertext[24] + MyLang.Othertext[24] + MyLang.Othertext[24] + " .. " + MyLang.Othertext[24] + MyLang.Othertext[24];
                else
                    sWhatsTheProb = MyLang.Othertext[24] + MyLang.Othertext[25] + MyLang.Othertext[24];
            }       //Covid
            else if (iList_01[1] == 3)
            {
                int iRan = RandInt(1, 5);
                if (iRan == 1)
                    sWhatsTheProb = MyLang.Othertext[31];
                else if (iRan == 2)
                    sWhatsTheProb = MyLang.Othertext[32];
                else if (iRan == 3)
                    sWhatsTheProb = MyLang.Othertext[33];
                else if (iRan == 4)
                    sWhatsTheProb = MyLang.Othertext[34];
                else
                    sWhatsTheProb = MyLang.Othertext[35];
            }       //Burns
            else if (iList_01[1] == 4)
            {
                int iRan = RandInt(1, 5);
                if (iRan == 1)
                    sWhatsTheProb = MyLang.Othertext[36];
                else if (iRan == 2)
                    sWhatsTheProb = MyLang.Othertext[37];
                else if (iRan == 3)
                    sWhatsTheProb = MyLang.Othertext[38];
                else if (iRan == 4)
                    sWhatsTheProb = MyLang.Othertext[39];
                else
                    sWhatsTheProb = MyLang.Othertext[40];
            }       //Vomit/Diarea
            else
            {
                int iRan = RandInt(1, 5);
                if (iRan == 1)
                    sWhatsTheProb = MyLang.Othertext[41];
                else if (iRan == 2)
                    sWhatsTheProb = MyLang.Othertext[42];
                else if (iRan == 3)
                    sWhatsTheProb = MyLang.Othertext[43];
                else if (iRan == 4)
                    sWhatsTheProb = MyLang.Othertext[44];
                else
                    sWhatsTheProb = MyLang.Othertext[45];
            }                             //Fake 

            var mainMenu = new UIMenu(MyLang.Othertext[46], sWhatsTheProb)
            {
                ControlDisablingEnabled = true
            };
            mainMenu.SetMenuWidthOffset(100);
            YtmenuPool.Add(mainMenu);
            Ambulance_Diagnosis(mainMenu);
            YtmenuPool.RefreshIndex();
            bMenuOpen = true;
            mainMenu.Visible = !mainMenu.Visible;
        }
        private void Ambulance_Diagnosis(UIMenu XMen)
        {
            LogThis("Ambulance_Diagnosis");

            int iAniTime = 4000;

            var Rand_01 = new UIMenuItem(MyLang.Othertext[47], "");

            var Rand_02 = new UIMenuItem(MyLang.Othertext[48], "");

            var Rand_03 = new UIMenuItem(MyLang.Othertext[49], "");

            var Rand_04 = new UIMenuItem(MyLang.Othertext[50], "");

            var Rand_05 = new UIMenuItem(MyLang.Othertext[51], "");

            XMen.AddItem(Rand_01);
            XMen.AddItem(Rand_02);
            XMen.AddItem(Rand_03);
            XMen.AddItem(Rand_04);
            XMen.AddItem(Rand_05);

            XMen.OnItemSelect += (sender, item, index) =>
            {
                if (item == Rand_01)
                {
                    if (iList_01[1] == 1)
                    {
                        iCrash4Cash = RandInt(50, 100);
                        iMissionSeq = 15;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                    else if (iList_01[1] == 2)
                    {
                        bCovidInf = true;
                        BeOnOff[6] = true;
                        iMissionSeq = 16;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                    else if (iList_01[1] == 3)
                    {
                        BeOnOff[7] = true;
                        iMissionSeq = 16;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                    else if (iList_01[1] == 4)
                    {
                        BeOnOff[7] = true;
                        iMissionSeq = 16;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                    else
                    {
                        BeOnOff[6] = true;
                        iMissionSeq = 16;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                }
                else if (item == Rand_02)
                {
                    if (iList_01[1] == 1)
                    {
                        BeOnOff[7] = true;
                        iMissionSeq = 16;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                    else if (iList_01[1] == 2)
                    {
                        iCrash4Cash = RandInt(50, 100);
                        iMissionSeq = 15;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                    else if (iList_01[1] == 3)
                    {
                        BeOnOff[7] = true;
                        iMissionSeq = 16;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                    else if (iList_01[1] == 4)
                    {
                        BeOnOff[7] = true;
                        iMissionSeq = 16;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                    else
                    {
                        BeOnOff[6] = true;
                        iMissionSeq = 16;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                }
                else if (item == Rand_03)
                {
                    if (iList_01[1] == 1)
                    {
                        BeOnOff[7] = true;
                        iMissionSeq = 16;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                    else if (iList_01[1] == 2)
                    {
                        bCovidInf = true;
                        BeOnOff[6] = true;
                        iMissionSeq = 16;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                    else if (iList_01[1] == 3)
                    {
                        iCrash4Cash = RandInt(50, 100);
                        iMissionSeq = 15;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                    else if (iList_01[1] == 4)
                    {
                        BeOnOff[7] = true;
                        iMissionSeq = 16;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                    else
                    {
                        BeOnOff[6] = true;
                        iMissionSeq = 16;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                }
                else if (item == Rand_04)
                {
                    if (iList_01[1] == 1)
                    {
                        BeOnOff[7] = true;
                        iMissionSeq = 16;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                    else if (iList_01[1] == 2)
                    {
                        BeOnOff[6] = true;
                        bCovidInf = true;
                        iMissionSeq = 16;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                    else if (iList_01[1] == 3)
                    {
                        BeOnOff[7] = true;
                        iMissionSeq = 16;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                    else if (iList_01[1] == 4)
                    {
                        iCrash4Cash = RandInt(50, 100);
                        iMissionSeq = 15;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                    else
                    {
                        BeOnOff[6] = true;
                        iMissionSeq = 16;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                        PedScenario(Game.Player.Character, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", Game.Player.Character.Position, Game.Player.Character.Heading, false);
                    }
                }
                else if (item == Rand_05)
                {
                    if (iList_01[1] == 1)
                    {
                        iMissionSeq = 17;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                    }
                    else if (iList_01[1] == 2)
                    {
                        bCovidInf = true;
                        iMissionSeq = 18;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                    }
                    else if (iList_01[1] == 3)
                    {
                        iMissionSeq = 17;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                    }
                    else if (iList_01[1] == 4)
                    {
                        iMissionSeq = 17;
                        iWait4Sec = Game.GameTime + iAniTime;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                    }
                    else
                    {
                        iCrash4Cash = RandInt(50, 100);
                        iMissionSeq = 18;
                        Game.Player.Character.Task.TurnTo(Npc_01);
                    }
                }

                bMenuOpen = false;
                XMen.Visible = !XMen.Visible;
            };
        }
        private void Ambulance_Fluids(int iMessy)
        {
            LogThis("Ambulance_Fluids, iMessy == " + iMessy);

            if (iMessy == 1)
            {
                sList_01.Add("scr_solomon3");
                sList_01.Add("scr_trev4_747_blood_splash");
                sList_01.Add("cut_trevor1");
                sList_01.Add("cs_trev1_blood_pool");
                sList_01.Add("core");
                sList_01.Add("ped_foot_decal_blood");
            }
            else if (iMessy == 2)
            {

            }
            else if (iMessy == 3)
            {
                sList_01.Add("cut_chinese1");
                sList_01.Add("cs_cig_exhale_mouth");
                sList_01.Add("cut_chinese1");
                sList_01.Add("cs_cig_smoke");
                sList_01.Add("core");
                sList_01.Add("ent_amb_smoke_factory_white");
            }
            else if (iMessy == 4)
            {
                sList_01.Add("scr_reburials");
                sList_01.Add("scr_burial_dirt");
                sList_01.Add("scr_player_timetable_scene");
                sList_01.Add("scr_pts_vomit_water");
                sList_01.Add("core");
                sList_01.Add("ent_amb_fly_swarm");
            }
        }
        private void Follow_ButTherArntAny()
        {
            MakeCarz.Clear();
            LogThis("Follow_ButTherArntAny");
            RemoveTargets();
            vGetaway = World.GetNextPositionOnStreet(VectorList_02[0].Around(550.00f));
            while (vGetaway.DistanceTo(VectorList_02[0]) < 150.00f || World.GetZoneNameLabel(vGetaway) == "AIRP" || World.GetZoneNameLabel(vGetaway) == "ARMYB" || World.GetZoneNameLabel(vGetaway) == "JAIL")
                vGetaway = World.GetNextPositionOnStreet(VectorList_02[0].Around(550.00f));
            AddTarget(vGetaway, true, true, 250.00f, false, 66, MyLang.Maptext[26]);
        }
        private void Follow_AddToMuilti(Ped Bob, string sBobsName, Blip BobsBlip, Vehicle VMick)
        {
            PedMultiTask MyBob = AddAMultiped();
            MyBob.MyPed = Bob;
            MyBob.MyName = sBobsName;
            MyBob.MyBlip = BobsBlip;
            MyBob.MyVehicle = VMick;
            MyBob.MyTask_01 = 1;
            MultiPed.Add(MyBob);
        }
        private void Follow_AmbushPlayer()
        {
            LogThis("Follow_AmbushPlayer");

            iMissionVar_03 = iMissionVar_03 - 1;
            int iNpNum = RandInt(6, 12);
            iAmbushCount = iNpNum + 2;
            while (iNpNum > 0)
            {
                iNpNum -= 1;
                int iLocal = 0;
                if (iMissionVar_03 > 0)
                    iLocal = RandInt(0, iMissionVar_03);
                Vector3 Vrond = VectorList_01[iLocal];
                Ped Bob = NPCSpawn(RandNPC(RandInt(1, 35)), Vrond, 0.00f, false, 180, 8, 0, null, 0, false, 0, 0, "");
                Follow_AddToMuilti(Bob, MyLang.Maptext[105], PedBlimp(Bob, 0.75f, false, false, 1, MyLang.Maptext[105]), null);
            }
        }
        private void Follow_DefToOff()
        {
            LogThis("Follow_DefToOff");

            VehTrackin_01.CurrentBlip.Remove();
            GetOutofVeh(Npc_01, 1);
            GetOutofVeh(Npc_02, 1);
            AttackThePlayer(Npc_01, true);
            AttackThePlayer(Npc_02, true);

            Follow_AddToMuilti(Npc_01, MyLang.Maptext[105], VehTrackin_01.CurrentBlip, VehTrackin_01);
            Follow_AddToMuilti(Npc_02, MyLang.Maptext[105], null, null);
        }
        private void Follow_CArSaleSeatChecker()
        {
            LogThis("Follow_CArSaleSeatChecker");

            int iSittinON = VehTrackin_01.PassengerSeats;
            while (iSittinON > 1)
            {
                FreeSeat(VehTrackin_01, iSittinON, false);
                iSittinON -= 1;
            }
        }
        private void Follow_SpiningAround(Vehicle VSpin)
        {
            LogThis("Follow_SpiningAround");

            Vehicle VRota = World.GetClosestVehicle(VSpin.Position, 30.00f);
            VSpin.Rotation = VRota.Rotation;
        }
        private void Follow_RunToHeli()
        {
            LogThis("Follow_RunToHeli");

            GetOutofVeh(Npc_01, 1);
            GetOutofVeh(Npc_02, 1);
            Script.Wait(500);
            EnterAnyVeh(VehTrackin_02, Npc_01, 1, 2.00f);
            Script.Wait(500);
            EnterAnyVeh(VehTrackin_02, Npc_02, 2, 2.00f);
        }
        private void Fire_StartinFires()
        {
            LogThis("Fire_StartinFires");

            int iSee = VectorList_01.Count - 1;
            int iCounts = RandInt(0, iSee);
            while (VectorList_01[iCounts] == vTarget_01)
                iCounts = RandInt(0, iSee);

            vTarget_01 = VectorList_01[iCounts];
        }
        public bool Fire_BurnOut()
        {
            LogThis("Fire_BurnOut");

            bool bOver = false;

            if (iMissionVar_02 < Game.GameTime)
                bOver = true;
            else
            {
                int iTimeLeft = Game.GameTime - iMissionVar_02;
                iTimeLeft = iTimeLeft + 60000;
                float fSake = (int)iTimeLeft;
                float fTimeLeft = fSake / 60000.00f;

                float fCash = fTimeLeft * 1000.00f;
                double iRewRD = (float)fCash;
                iCashBouns = 1000 - (int)Math.Floor(iRewRD);

                if (fTimeLeft > 0.90)
                    BtSlideBar.ForegroundColor = Color.Red;
                else
                    BtSlideBar.ForegroundColor = Color.Yellow;

                BtSlideBar.Percentage = fTimeLeft;
                ttTextBar_01.Text = "$ " + iCashBouns + "";

                VTBTimerPool.Draw();
            }
            return bOver;
        }
        public bool Fire_IntheHall(Vector3 VFire)
        {
            LogThis("Fire_IntheHall");

            bool Bfiredup = false;
            int iFirey = Function.Call<int>(Hash.GET_NUMBER_OF_FIRES_IN_RANGE, VFire.X, VFire.Y, VFire.Z, 5.00f);
            if (iFirey < 1)
                Bfiredup = true;
            return Bfiredup;
        }
        private void Fire_ShootRanPed()
        {
            LogThis("Fire_ShootRanPed");

            iWait4Sec = Game.GameTime + RandInt(1000, 3000);
            bool pEddFound = false;
            Ped[] PedTargs = World.GetNearbyPeds(Npc_01.Position, 25.00f);
            for (int i = 0; i < PedTargs.Count(); i++)
            {
                if (PedExists(PedTargs, i) && !pEddFound)
                {
                    if (!PedTargs[i].IsInVehicle())
                    {
                        Npc_01.Task.VehicleShootAtPed(PedTargs[i]);
                        pEddFound = true;
                        break;
                    }
                }
            }
        }
        private void Johnny_PlayerAntics()
        {
            LogThis("Johnny_PlayerAntics");

            int RandSettin = RandInt(0, 40);
            if (RandSettin < 10)
            {
                int iNpNum = RandInt(1, 5);
                while (iNpNum > 0)
                {
                    iNpNum -= 1;
                    Vector3 Vrond = vTarget_01.Around(5.00f);
                    NPCSpawn(RandNPC(RandInt(1, 35)), Vrond, 0.00f, false, 0, 9, 0, null, 0, false, 0, 0, "");
                }
            }
            else if (RandSettin < 20)
            {
                int iNpNum = RandInt(1, 5);
                int iRanVeh = RandInt(1, 25);
                while (iNpNum > 0)
                {
                    iNpNum -= 1;
                    Vector3 Vrond = vTarget_01.Around(25.00f);
                    VehicleSpawn(RanVehListX(1, 5, true), Vrond, 0.0f, false, false, false, false, 14, 0, 0, "", 0, false);
                }
            }
        }
        private void Racist01_CuttinCoroners()
        {
            LogThis("Racist01_CuttinCoroners");

            List<Vector3> tyres = new List<Vector3>();
            List<Vector3> DIrtyres = new List<Vector3>();
            List<Vector3> Barria5b = new List<Vector3>();
            List<Vector3> DIrBarria5b = new List<Vector3>();
            List<Vector3> Barria5c = new List<Vector3>();
            List<Vector3> DIrBarria5c = new List<Vector3>();

            //prop_offroad_tyres02
            tyres.Add(new Vector3(122.46772f, -1402.58154f, 28.2209042f));
            DIrtyres.Add(new Vector3(0f, 0f, 43.4979668f));

            tyres.Add(new Vector3(134.731232f, -1122.40649f, 28.2854965f));
            DIrtyres.Add(new Vector3(0f, 0f, -90.3373718f));

            tyres.Add(new Vector3(189.030289f, -1119.86292f, 28.3538044f));
            DIrtyres.Add(new Vector3(0f, 0f, -39.3384705f));

            tyres.Add(new Vector3(267.302094f, -960.90448f, 28.2495869f));
            DIrtyres.Add(new Vector3(0f, 0f, -62.7546768f));

            tyres.Add(new Vector3(447.244843f, -948.033752f, 27.7269848f));
            DIrtyres.Add(new Vector3(0f, 0f, -35.8590736f));

            tyres.Add(new Vector3(491.717438f, -963.937744f, 26.2332829f));
            DIrtyres.Add(new Vector3(0f, 0f, 145.158417f));

            tyres.Add(new Vector3(490.921295f, -1248.39526f, 28.2085484f));
            DIrtyres.Add(new Vector3(0f, 0f, 79.8484573f));

            tyres.Add(new Vector3(369.98996f, -1280.54028f, 31.4419361f));
            DIrtyres.Add(new Vector3(0f, 0f, 76.744278f));

            tyres.Add(new Vector3(355.938202f, -1322.16223f, 31.3997276f));
            DIrtyres.Add(new Vector3(0f, 0f, -137.257172f));

            tyres.Add(new Vector3(364.90448f, -1360.60632f, 31.0141903f));
            DIrtyres.Add(new Vector3(0f, 0f, -126.578819f));

            tyres.Add(new Vector3(384.523956f, -1383.27698f, 29.5502499f));
            DIrtyres.Add(new Vector3(0f, 0f, -140.356598f));

            tyres.Add(new Vector3(528.631592f, -1443.76416f, 28.4827259f));
            DIrtyres.Add(new Vector3(0f, 0f, -106.975151f));

            tyres.Add(new Vector3(528.105896f, -1453.0918f, 28.4733265f));
            DIrtyres.Add(new Vector3(0f, 0f, -8.25796509f));

            tyres.Add(new Vector3(515.173828f, -1459.48267f, 28.2009857f));
            DIrtyres.Add(new Vector3(0f, 0f, 133.603577f));

            tyres.Add(new Vector3(-3.41955328f, -1709.98901f, 28.2653797f));
            DIrtyres.Add(new Vector3(0f, 0f, 101.067284f));

            tyres.Add(new Vector3(-66.3390732f, -1700.91211f, 28.3244007f));
            DIrtyres.Add(new Vector3(0f, 0f, 48.3295479f));

            tyres.Add(new Vector3(-50.748188f, -1615.15039f, 28.5367039f));
            DIrtyres.Add(new Vector3(0f, 0f, -39.5391006f));

            tyres.Add(new Vector3(162.163742f, -1136.48083f, 28.2811192f));
            DIrtyres.Add(new Vector3(0f, 0f, -94.883606f));

            //prop_barier_conc_05b
            Barria5b.Add(new Vector3(110.921623f, -1339.88501f, 28.2572842f));
            DIrBarria5b.Add(new Vector3(0f, 0f, 31.9550514f));

            Barria5b.Add(new Vector3(83.4083786f, -1295.09045f, 28.2713833f));
            DIrBarria5b.Add(new Vector3(0f, 0f, 29.2692757f));

            Barria5b.Add(new Vector3(215.495865f, -1004.33557f, 28.2150841f));
            DIrBarria5b.Add(new Vector3(0f, 0f, -19.8856354f));

            Barria5b.Add(new Vector3(269.79306f, -963.805542f, 28.2771168f));
            DIrBarria5b.Add(new Vector3(0f, 0f, -54.2640572f));

            Barria5b.Add(new Vector3(395.188965f, -944.879211f, 28.3552189f));
            DIrBarria5b.Add(new Vector3(0f, 0f, -87.0277557f));

            Barria5b.Add(new Vector3(359.1474f, -1320.27161f, 31.4880676f));
            DIrBarria5b.Add(new Vector3(0f, 0f, -147.598572f));

            Barria5b.Add(new Vector3(361.209015f, -1364.48608f, 30.8907452f));
            DIrBarria5b.Add(new Vector3(0f, 0f, -129.105026f));

            Barria5b.Add(new Vector3(525.075928f, -1443.69983f, 28.4256954f));
            DIrBarria5b.Add(new Vector3(0f, 0f, 178.272415f));

            Barria5b.Add(new Vector3(528.781006f, -1447.57849f, 28.4044838f));
            DIrBarria5b.Add(new Vector3(0f, 0f, -89.0889969f));

            Barria5b.Add(new Vector3(525.234375f, -1449.87964f, 28.3978481f));
            DIrBarria5b.Add(new Vector3(0f, 0f, -58.0283356f));

            Barria5b.Add(new Vector3(518.058044f, -1443.28809f, 28.3465939f));
            DIrBarria5b.Add(new Vector3(0f, 0f, -40.3511009f));

            Barria5b.Add(new Vector3(459.665161f, -1437.22156f, 28.4974918f));
            DIrBarria5b.Add(new Vector3(0f, 0f, -167.915848f));

            Barria5b.Add(new Vector3(467.140961f, -1435.75891f, 28.3444614f));
            DIrBarria5b.Add(new Vector3(0f, 0f, -167.055756f));

            Barria5b.Add(new Vector3(475.003479f, -1433.80078f, 28.3439007f));
            DIrBarria5b.Add(new Vector3(0f, 0f, -163.846619f));

            Barria5b.Add(new Vector3(482.640839f, -1432.68225f, 28.3435593f));
            DIrBarria5b.Add(new Vector3(0f, 0f, -176.133057f));

            Barria5b.Add(new Vector3(490.243378f, -1432.97522f, 28.3437958f));
            DIrBarria5b.Add(new Vector3(0f, 0f, 173.305527f));

            Barria5b.Add(new Vector3(497.894958f, -1434.34961f, 28.3437843f));
            DIrBarria5b.Add(new Vector3(0f, 0f, 168.938705f));

            Barria5b.Add(new Vector3(505.740204f, -1436.14612f, 28.3444023f));
            DIrBarria5b.Add(new Vector3(0f, 0f, 163.636688f));

            Barria5b.Add(new Vector3(512.548828f, -1439.16479f, 28.3457832f));
            DIrBarria5b.Add(new Vector3(0f, 0f, 147.398254f));

            Barria5b.Add(new Vector3(463.30603f, -1402.93921f, 28.2705708f));
            DIrBarria5b.Add(new Vector3(0f, 0f, -115.698044f));

            Barria5b.Add(new Vector3(499.068054f, -1415.24463f, 28.2942982f));
            DIrBarria5b.Add(new Vector3(0f, 0f, -95.4208755f));

            Barria5b.Add(new Vector3(304.983093f, -1539.54712f, 28.3010712f));
            DIrBarria5b.Add(new Vector3(0f, 0f, 119.050766f));

            Barria5b.Add(new Vector3(290.046997f, -1552.2157f, 28.2959747f));
            DIrBarria5b.Add(new Vector3(0f, 0f, 117.944687f));

            Barria5b.Add(new Vector3(251.510681f, -1570.3252f, 28.2937469f));
            DIrBarria5b.Add(new Vector3(0f, 0f, 119.295738f));

            Barria5b.Add(new Vector3(35.6568375f, -1695.77893f, 28.2886333f));
            DIrBarria5b.Add(new Vector3(0f, 0f, 124.663857f));

            Barria5b.Add(new Vector3(-21.9301167f, -1720.48315f, 28.2897129f));
            DIrBarria5b.Add(new Vector3(0f, 0f, 113.118652f));

            Barria5b.Add(new Vector3(-64.1996002f, -1698.14136f, 28.1586208f));
            DIrBarria5b.Add(new Vector3(0f, 0f, 51.8217163f));

            Barria5b.Add(new Vector3(127.637085f, -1451.76343f, 28.2965965f));
            DIrBarria5b.Add(new Vector3(0f, 0f, -40.4909897f));


            //prop_barier_conc_05c
            Barria5c.Add(new Vector3(119.922188f, -1402.82202f, 28.3287086f));
            DIrBarria5c.Add(new Vector3(0f, 0f, 5.71901083f));

            Barria5c.Add(new Vector3(44.2727737f, -1185.3949f, 28.3193874f));
            DIrBarria5c.Add(new Vector3(0f, 0f, 0.750671625f));

            Barria5c.Add(new Vector3(134.736282f, -1119.88855f, 28.3493576f));
            DIrBarria5c.Add(new Vector3(0f, 0f, -90.3373718f));

            Barria5c.Add(new Vector3(161.939865f, -1139.49316f, 28.3205223f));
            DIrBarria5c.Add(new Vector3(0f, 0f, -93.1709976f));

            Barria5c.Add(new Vector3(186.538162f, -1117.75452f, 28.3043823f));
            DIrBarria5c.Add(new Vector3(0f, 0f, -39.3384705f));

            Barria5c.Add(new Vector3(446.926697f, -945.237732f, 27.7108383f));
            DIrBarria5c.Add(new Vector3(0f, 0f, -86.522171f));

            Barria5c.Add(new Vector3(382.359833f, -1385.38782f, 29.5984516f));
            DIrBarria5c.Add(new Vector3(0f, 0f, -132.186996f));

            Barria5c.Add(new Vector3(480.914886f, -1410.19495f, 28.3370304f));
            DIrBarria5c.Add(new Vector3(0f, 0f, -102.849426f));

            Barria5c.Add(new Vector3(513.25238f, -1458.83459f, 28.2676449f));
            DIrBarria5c.Add(new Vector3(0f, 0f, -137.689453f));

            Barria5c.Add(new Vector3(466.083008f, -1453.17126f, 28.3300266f));
            DIrBarria5c.Add(new Vector3(0f, 0f, -81.9346542f));

            Barria5c.Add(new Vector3(454.647827f, -1455.87292f, 28.3243465f));
            DIrBarria5c.Add(new Vector3(0f, 0f, 112.986038f));

            Barria5c.Add(new Vector3(434.78006f, -1464.86206f, 28.3290043f));
            DIrBarria5c.Add(new Vector3(0f, 0f, 124.36203f));

            Barria5c.Add(new Vector3(404.466461f, -1482.51245f, 28.3287659f));
            DIrBarria5c.Add(new Vector3(0f, 0f, 119.748581f));

            Barria5c.Add(new Vector3(378.707764f, -1497.11279f, 28.3295612f));
            DIrBarria5c.Add(new Vector3(0f, 0f, 121.408302f));

            Barria5c.Add(new Vector3(357.973755f, -1509.37952f, 28.3255081f));
            DIrBarria5c.Add(new Vector3(0f, 0f, 133.542206f));

            Barria5c.Add(new Vector3(221.061432f, -1588.55225f, 28.3352489f));
            DIrBarria5c.Add(new Vector3(0f, 0f, 128.105988f));

            Barria5c.Add(new Vector3(204.273041f, -1597.25732f, 28.3782368f));
            DIrBarria5c.Add(new Vector3(0f, 0f, 124.09008f));

            Barria5c.Add(new Vector3(182.068329f, -1611.32544f, 28.3483143f));
            DIrBarria5c.Add(new Vector3(0f, 0f, 124.726067f));

            Barria5c.Add(new Vector3(86.4852676f, -1666.45117f, 28.2754936f));
            DIrBarria5c.Add(new Vector3(0f, 0f, 129.008636f));

            Barria5c.Add(new Vector3(-1.97026682f, -1712.42456f, 28.3230057f));
            DIrBarria5c.Add(new Vector3(0f, 0f, 115.200958f));

            Barria5c.Add(new Vector3(-52.7458801f, -1613.45166f, 28.3278618f));
            DIrBarria5c.Add(new Vector3(0f, 0f, -33.5547562f));

            for (int i = 0; i < tyres.Count; i++)
                BuildProp("prop_offroad_tyres02", tyres[i], DIrtyres[i], true, true);

            for (int i = 0; i < Barria5b.Count; i++)
                BuildProp("prop_barier_conc_05b", Barria5b[i], DIrBarria5b[i], true, true);

            for (int i = 0; i < Barria5c.Count; i++)
                BuildProp("prop_barier_conc_05c", Barria5c[i], DIrBarria5c[i], true, true);

            bCutingCul = true;
            Function.Call((Hash)0x9BAE5AD2508DF078, true);
        }
        private void Racist03_HillRun()
        {
            LogThis("Racist03_HillRun");

            List<Vector3> Ramp = new List<Vector3>();
            List<Vector3> DirRamp = new List<Vector3>();

            List<Vector3> Barria = new List<Vector3>();
            List<Vector3> DIrBarria = new List<Vector3>();

            //xs_prop_x18_flatbed_ramp
            Ramp.Add(new Vector3(-2574.48193f, -141.341949f, 20.5641022f));
            DirRamp.Add(new Vector3(-10.00f, -4.334721f, -35.195816f));

            Ramp.Add(new Vector3(-2570.40015f, -144.145248f, 20.5497684f));
            DirRamp.Add(new Vector3(-7.999998f, -0.00f, -34.9950371f));

            //ba_prop_battle_barrier_02a
            Barria.Add(new Vector3(-2567.00317f, -142.685059f, 21.2081394f));
            DIrBarria.Add(new Vector3(-8.99999428f, 11.5999641f, -169.04039f));

            Barria.Add(new Vector3(-2564.80737f, -142.008041f, 21.7090607f));
            DIrBarria.Add(new Vector3(-1.00000131f, 10.9999943f, -167.961807f));

            Barria.Add(new Vector3(-2571.99585f, -141.98912f, 20.5829697f));
            DIrBarria.Add(new Vector3(0f, 0f, 144.958115f));

            Barria.Add(new Vector3(-2575.01318f, -138.19809f, 20.9650898f));
            DIrBarria.Add(new Vector3(-8.999998f, -9.9999876f, 114.058754f));

            Barria.Add(new Vector3(-2575.1001f, -135.624237f, 21.6847382f));
            DIrBarria.Add(new Vector3(-3.00f, -15.9999781f, 90.1086349f));

            for (int i = 0; i < Ramp.Count; i++)
                BuildProp("xs_prop_x18_flatbed_ramp", Ramp[i], DirRamp[i], true, true);

            for (int i = 0; i < Barria.Count; i++)
                BuildProp("ba_prop_battle_barrier_02a", Barria[i], DIrBarria[i], true, true);


            Vector3 PropX = new Vector3(-2334.56836f, 390.689636f, 173.520493f);
            Vector3 PropR = new Vector3(0.00f, 0.00f, 114.343819f);
            BuildProp("prop_byard_rampold_cr", PropX, PropR, true, true);

            PropX = new Vector3(-2198.53613f, 184.315048f, 171.740598f);
            PropR = new Vector3(0.00f, -10.50f, 116.3285f);
            BuildProp("xs_prop_arena_pipe_ramp_01a", PropX, PropR, true, true);

            PropX = new Vector3(-2266.31201f, 258.361664f, 173.58552f);
            PropR = new Vector3(0.00f, 0.00f, 110.899078f);
            BuildProp("lts_prop_lts_ramp_02", PropX, PropR, true, true);

            PropX = new Vector3(-2286.13672f, 248.969284f, 169.193893f);
            PropR = new Vector3(0.00f, 0.00f, 112.677765f);
            BuildProp("stt_prop_tyre_wall_02", PropX, PropR, true, true);

            PropX = new Vector3(-2335.29443f, 392.395569f, 173.546069f);
            PropR = new Vector3(0.00f, 0.00f, 23.607132f);
            BuildProp("prop_mp_ramp_03", PropX, PropR, true, true);
        }
        private void Racist06_Yachtclub()
        {
            LogThis("Racist06_Yachtclub");

            List<Vector3> RevRace = new List<Vector3>();
            List<float> RevFRace = new List<float>();

            RevRace.Add(new Vector3(24.82016f, 7334.861f, -0.00f));
            RevFRace.Add(164.2365f);
            RevRace.Add(new Vector3(3258.503f, 6502.657f, -0.00f));
            RevFRace.Add(139.4218f);
            RevRace.Add(new Vector3(4023.263f, 4619.553f, -0.00f));
            RevFRace.Add(92.5183f);
            RevRace.Add(new Vector3(4070.122f, 3664.816f, -0.00f));
            RevFRace.Add(76.0657f);
            RevRace.Add(new Vector3(2992.67f, 1262.628f, -0.00f));
            RevFRace.Add(103.6867f);
            RevRace.Add(new Vector3(3138.701f, -263.2599f, -0.00f));
            RevFRace.Add(87.1977f);
            RevRace.Add(new Vector3(2689.806f, -2212.811f, -0.00f));
            RevFRace.Add(32.6976f);
            RevRace.Add(new Vector3(1356.76f, -3377.767f, -0.00f));
            RevFRace.Add(11.1433f);
            RevRace.Add(new Vector3(-1561.713f, -3523.635f, -0.00f));
            RevFRace.Add(-25.4958f);
            RevRace.Add(new Vector3(-3370.541f, -2241.433f, -0.00f));
            RevFRace.Add(-71.65024f);
            RevRace.Add(new Vector3(-3469.20f, 112.624f, -0.00f));
            RevFRace.Add(-88.2799f);
            RevRace.Add(new Vector3(-3479.537f, 1116.318f, -0.00f));
            RevFRace.Add(98.463467f);
            RevRace.Add(new Vector3(-3250.67f, 3365.701f, -0.00f));
            RevFRace.Add(247.1053f);
            RevRace.Add(new Vector3(-1855.163f, 5297.628f, -0.00f));
            RevFRace.Add(226.9597f);

            for (int i = 0; i < RevRace.Count; i++)
            {
                Vector3 vCheckP = RevRace[i];
                Vector3 vCheckR = new Vector3(0.00f, 0.00f, RevFRace[i]);
                vCheckP.Z = -25.00f;
                Prop Popoff = BuildProp("ar_prop_ar_neon_gate_02a", vCheckP, vCheckR, true, true);
                if (Popoff != null)
                    Popoff.HasCollision = false;
            }
        }
        public List<string> Racist_Carz(int iRace)
        {
            LogThis("Racist_Carz, iRace == " + iRace);

            List<string> sVehicles = new List<string>();

            if (iRace == 1)
            {
                sVehicles.Add("FORMULA"); //<!-- PR4, should be Open Wheel class-->
                sVehicles.Add("FORMULA2"); //<!-- R88, should be Open Wheel class-->
                sVehicles.Add("OPENWHEEL1"); //
                sVehicles.Add("OPENWHEEL2"); //

                if (sCustomCarz.Count > 0)
                {
                    for (int i = 0; i < sCustomCarz.Count; i++)
                        sVehicles.Add(sCustomCarz[i]);
                }
            }
            else if (iRace == 2)
            {
                sVehicles.Add("SEASHARK"); //
                sVehicles.Add("SEASHARK2"); //<!-- Lifeguard Seashark -->
                sVehicles.Add("SEASHARK3"); //<!-- Seashark yacht variant -->

                if (sCustomBoatsz.Count > 0)
                {
                    for (int i = 0; i < sCustomBoatsz.Count; i++)
                        sVehicles.Add(sCustomBoatsz[i]);
                }
            }
            else if (iRace == 3)
            {
                sVehicles = VehicleListX(1, 20, false);
            }
            else if (iRace == 4)
            {
                sVehicles.Add("BUZZARD2"); //<!-- Buzzard -->
                sVehicles.Add("HAVOK"); //
                sVehicles.Add("FROGGER"); //
                sVehicles.Add("SEASPARROW2"); //

                if (sCustomChopperz.Count > 0)
                {
                    for (int i = 0; i < sCustomChopperz.Count; i++)
                        sVehicles.Add(sCustomChopperz[i]);
                }
            }
            else if (iRace == 5)
            {
                sVehicles = VehicleListX(1, 19, false);
            }
            else if (iRace == 6)
            {
                sVehicles = VehicleListX(2, 1, true);
            }
            else if (iRace == 7)
            {
                sVehicles.Add("SULTANRS");
                sVehicles.Add("COMET4");
                sVehicles.Add("TAMPA2");
                sVehicles.Add("GB200");
                sVehicles.Add("KURUMA");
                sVehicles.Add("TROPHYTRUCK2");
                sVehicles.Add("TROPHYTRUCK");
                sVehicles.Add("ISSI7");
                sVehicles.Add("SUGOI");
                sVehicles.Add("SULTAN2");
                sVehicles.Add("WINKY");
                sVehicles.Add("OUTLAW");
                sVehicles.Add("VAGRANT");

                if (sCustomCarz.Count > 0)
                {
                    for (int i = 0; i < sCustomCarz.Count; i++)
                        sVehicles.Add(sCustomCarz[i]);
                }
            }
      
            return sVehicles;
        }
        private void Racist_MultiPed(Ped Peddy, Vehicle VKick)
        {
            PedMultiTask MyRacer = AddAMultiped();

            MyRacer.MyName = MyLang.Jobtext[10];
            MyRacer.MyBlip = Peddy.CurrentBlip;
            MyRacer.MyPed = Peddy;
            MyRacer.MyVehicle = VKick;
            MyRacer.MyTarget_01 = VKick.Position;
            MyRacer.MyTarget_02 = VKick.Position;
            MyRacer.MyTask_01 = 0;
            MyRacer.MyTask_02 = 0;
            MyRacer.MySwitch_01 = false;
            MyRacer.MySwitch_02 = false;
            MultiPed.Add(MyRacer);
        }
        private void Racist_StartLine()
        {
            LogThis("Racist_StartLine");

            Function.Call(Hash.SET_VEHICLE_POPULATION_BUDGET, 0);
            Function.Call(Hash.SET_PED_POPULATION_BUDGET, 0);
            Function.Call(Hash.SET_FAR_DRAW_VEHICLES, false);

            bool bBoata = false;
            VehTrackin_01.CurrentBlip.Remove();
            VehTrackin_01 = Game.Player.Character.CurrentVehicle;
            if (!VehTrackin_01.IsPersistent)
            {
                VehTrackin_01.IsPersistent = true;
                bIsVehPers = true;
            }
            VehTrackin_01.FreezePosition = true;
            Game.FadeScreenOut(1000);
            Script.Wait(1000);
            VehTrackin_01.Position = MyMissions.RaceXM[iMissionVar_01].RaceCars[3];
            VehTrackin_01.Heading = MyMissions.RaceXM[iMissionVar_01].RaceHead[3];

            if (iList_01[0] == 2 || iList_01[0] == 6)
            {
                VehTrackin_01.FreezePosition = false;
                VehTrackin_01.IsDriveable = false;
                Function.Call(Hash.SET_BOAT_ANCHOR, VehTrackin_01.Handle, true);
                bBoata = true;
            }

            if (!bSoloRace)
            {
                if (sMissionVar_01 == "" || Game.Player.Character.CurrentVehicle.Model.Hash != Function.Call<int>(Hash.GET_HASH_KEY, sMissionVar_01))
                    sMissionVar_01 = "GetPlayersVeh";

                VehicleSpawn(sMissionVar_01, MyMissions.RaceXM[iMissionVar_01].RaceCars[1], MyMissions.RaceXM[iMissionVar_01].RaceHead[1], false, BeOnOff[0], false, false, 22, 0, -1, "", 2, true);
                VehicleSpawn(sMissionVar_01, MyMissions.RaceXM[iMissionVar_01].RaceCars[2], MyMissions.RaceXM[iMissionVar_01].RaceHead[2], false, BeOnOff[0], false, false, 22, 0, -1, "", 3, true);
                VehicleSpawn(sMissionVar_01, MyMissions.RaceXM[iMissionVar_01].RaceCars[4], MyMissions.RaceXM[iMissionVar_01].RaceHead[4], false, BeOnOff[0], false, false, 22, 0, -1, "", 4, true);
            }

            Game.FadeScreenIn(1000);
            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "NET_RACE_START_EVENT_MASTER", 0, true);

            Function.Call(Hash.DISPLAY_RADAR, false);

            Vector3 Campo = VehTrackin_01.Position + (VehTrackin_01.ForwardVector * 4.00f) + (VehTrackin_01.UpVector * 1.50f);

            if (bBoata)
                Campo = VehTrackin_01.Position + (VehTrackin_01.ForwardVector * 14.00f) + (VehTrackin_01.UpVector * 3.00f);

            Vector3 Camro = new Vector3(0.00f, 0.00f, VehTrackin_01.Heading - 180.00f);

            cCams = World.CreateCamera(Campo, Camro, 50.00f);
            Function.Call(Hash.RENDER_SCRIPT_CAMS, 1, 1, cCams.Handle, 0, 0);
            Script.Wait(8000);

            CleanCams();
            RemoveTargets();
            CleanFakeBlips();
            fMaxSpeed = Function.Call<float>(Hash._GET_VEHICLE_MAX_SPEED, VehTrackin_01.Model);
        }
        private void Racist_CountDown(Vector3 Vpos)
        {
            LogThis("Racist_CountDown");

            int iTimes = Game.GameTime + 1000;
            int iPlayFor = RandInt(500, 900);
            MarkerType Starter = MarkerType.Number5;
            while (iList_01[5] > 0)
            {
                World.DrawMarker(Starter, new Vector3(Vpos.X, Vpos.Y, Vpos.Z + 1.00f), Vector3.Zero, new Vector3(0.00f, 0.00f, Game.Player.Character.Heading), new Vector3(fCorSize, fCorSize, fCorSize), color: Color.IndianRed);
                if (iTimes < Game.GameTime)
                {
                    iTimes = Game.GameTime + 1000;
                    if (iList_01[5] == 5)
                        Starter = MarkerType.Number4;
                    else if (iList_01[5] == 4)
                        Starter = MarkerType.Number3;
                    else if (iList_01[5] == 3)
                        Starter = MarkerType.Number2;
                    else
                        Starter = MarkerType.Number1;
                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "CHECKPOINT_UNDER_THE_BRIDGE", "HUD_MINI_GAME_SOUNDSET", true);
                    iList_01[5] -= 1;
                }
                else if (!bSoloRace)
                {
                    if (iPlayFor < Game.GameTime)
                    {
                        int iPlayHorn = RandInt(1, 5);
                        iPlayFor = RandInt(500, 900);
                        if (iPlayHorn == 1)
                            VehTrackin_02.SoundHorn(iPlayFor - RandInt(0, 350));
                        else if (iPlayHorn == 2)
                            VehTrackin_03.SoundHorn(iPlayFor - RandInt(0, 350));
                        else if (iPlayHorn == 3)
                            VehTrackin_04.SoundHorn(iPlayFor - RandInt(0, 350));
                        else if (iPlayHorn == 4)
                        {
                            VehTrackin_02.SoundHorn(iPlayFor - RandInt(0, 350));
                            VehTrackin_04.SoundHorn(iPlayFor - 150);
                        }
                    }
                }

                Script.Wait(1);
            }

        }
        private void Racist_PosTime(bool bLapX)
        {
            int iLapTotal = iList_01[2] - Game.GameTime;
            iLapTotal *= -1;

            if (bLapX)
                FindTheTime(iLapTotal, 1, "", true);

            if (!bSoloRace)
                Racist_Racers();
        }
        private void Racist_OnACorner(Ped Peddy, int iCheck, List<Vector3> vLaps, Vehicle vhick)
        {
            Vector3 vBefore = vLaps[iCheck];

            Vector3 vAfter = vLaps[iCheck];

            if (iCheck == 0)
                vBefore = vLaps[vLaps.Count - 1];
            else
                vBefore = vLaps[iCheck - 1];

            if (iCheck == vLaps.Count - 1)
                vAfter = vLaps[0];
            else
                vAfter = vLaps[iCheck + 1];

            float dxA = vLaps[iCheck].X - vBefore.X;
            float dyA = vLaps[iCheck].Y - vBefore.Y;

            float fHeadding1 = Function.Call<float>(Hash.GET_HEADING_FROM_VECTOR_2D, dxA, dyA);

            float dxB = vLaps[iCheck].X - vAfter.X;
            float dyB = vLaps[iCheck].Y - vAfter.Y;

            float fHeadding2 = Function.Call<float>(Hash.GET_HEADING_FROM_VECTOR_2D, dxB, dyB);

            float fHeaddin = fHeadding2 - fHeadding1;

            if (fHeaddin < 0)
                fHeaddin *= -1;

            if (fHeaddin < 110 || fHeaddin > 250)
                Raceisums(Peddy, vLaps[iCheck], vhick, 17.00f);

        }
        private void Racist_Racers()
        {
            int iRaceRiot = 4;
            int iOnLap = iTotalLap - iCurrentLap;

            if (iList_01[0] == 2 || iList_01[0] == 4 || iList_01[0] == 6)
            {
                for (int i = 0; i < MultiPed.Count; i++)
                {
                    if (MultiPed[i].MyTask_02 < iList_01[3])
                        iRaceRiot = iRaceRiot - 1;
                    else if (MultiPed[i].MyTask_01 < iList_01[6])
                        iRaceRiot = iRaceRiot - 1;
                    else if (MultiPed[i].MyTask_01 == iList_01[6])
                    {
                        if (Game.Player.Character.Position.DistanceTo(vTarget_01) < MultiPed[i].MyPed.Position.DistanceTo(vTarget_01))
                            iRaceRiot = iRaceRiot - 1;
                    }


                    if (MultiPed[i].MyPed.IsDead)
                    {

                    }
                    else if (!MultiPed[i].MyPed.IsInVehicle())
                    {
                        Racist_BackOnTrack(MultiPed[i].MyPed, MultiPed[i].MyVehicle, MultiPed[i].MyTarget_02, MultiPed[i].MyFloat_01, false, true);
                        Raceisums(MultiPed[i].MyPed, MultiPed[i].MyTarget_01, MultiPed[i].MyVehicle, fMaxSpeed);
                    }
                    else
                    { 
                        if (MultiPed[i].MyVehicle.Position.DistanceTo(MultiPed[i].MyTarget_01) < fAiCoronaListSize)
                        {
                            MultiPed[i].MyTask_01 += 1;
                            if (MultiPed[i].MyTask_01 == MyMissions.RaceXM[iMissionVar_01].TheRace.Count)
                            {
                                MultiPed[i].MyTask_01 = 0;
                                MultiPed[i].MyTask_02 += 1;
                            }
                            MultiPed[i].MyTarget_02 = MultiPed[i].MyTarget_01;
                            MultiPed[i].MyFloat_01 = MultiPed[i].MyVehicle.Heading;
                            MultiPed[i].MyTarget_01 = MyMissions.RaceXM[iMissionVar_01].TheRace[MultiPed[i].MyTask_01];
                            Raceisums(MultiPed[i].MyPed, MultiPed[i].MyTarget_01, MultiPed[i].MyVehicle, fMaxSpeed);
                        }
                    }
                }
            }
            else
            {
                for (int i = 0; i < MultiPed.Count; i++)
                {
                    if (MultiPed[i].MyTask_02 < iList_01[3])
                        iRaceRiot = iRaceRiot - 1;
                    else if (MultiPed[i].MyTask_01 < iList_01[6])
                        iRaceRiot = iRaceRiot - 1;
                    else if (MultiPed[i].MyTask_01 == iList_01[6])
                    {
                        if (Game.Player.Character.Position.DistanceTo(vTarget_01) < MultiPed[i].MyPed.Position.DistanceTo(vTarget_01))
                            iRaceRiot = iRaceRiot - 1;
                    }

                    if (MultiPed[i].MyPed.IsDead)
                    {

                    }
                    else if (!MultiPed[i].MyPed.IsInVehicle())
                    {
                        Racist_BackOnTrack(MultiPed[i].MyPed, MultiPed[i].MyVehicle, MultiPed[i].MyTarget_02, MultiPed[i].MyFloat_01, false, true);
                        Raceisums(MultiPed[i].MyPed, MultiPed[i].MyTarget_01, MultiPed[i].MyVehicle, fMaxSpeed);
                    }
                    else
                    {
                        if (MultiPed[i].MyVehicle.Position.DistanceTo(MultiPed[i].MyTarget_01) < 45.00f)
                        {
                            if (MultiPed[i].MySwitch_01)
                            {
                                if (MultiPed[i].MyVehicle.Position.DistanceTo(MultiPed[i].MyTarget_01) < fAiCoronaListSize)
                                {
                                    MultiPed[i].MySwitch_01 = false;
                                    MultiPed[i].MyTask_01 += 1;
                                    if (MultiPed[i].MyTask_01 == MyMissions.RaceXM[iMissionVar_01].TheRace.Count)
                                    {
                                        MultiPed[i].MyTask_01 = 0;
                                        MultiPed[i].MyTask_02 += 1;
                                    }
                                    MultiPed[i].MyTarget_02 = MultiPed[i].MyTarget_01;
                                    MultiPed[i].MyFloat_01 = MultiPed[i].MyVehicle.Heading;
                                    MultiPed[i].MyTarget_01 = MyMissions.RaceXM[iMissionVar_01].TheRace[MultiPed[i].MyTask_01];
                                    Raceisums(MultiPed[i].MyPed, MultiPed[i].MyTarget_01, MultiPed[i].MyVehicle, fMaxSpeed);
                                }
                            }
                            else
                            {
                                Racist_OnACorner(MultiPed[i].MyPed, MultiPed[i].MyTask_01, MyMissions.RaceXM[iMissionVar_01].TheRace, MultiPed[i].MyVehicle);
                                MultiPed[i].MySwitch_01 = true;
                            }
                        }
                        else if (MultiPed[i].MyTask_03 != -1)
                        {
                            if (MultiPed[i].MyTask_03 < Game.GameTime)
                            {
                                MultiPed[i].MyTask_03 = -1;
                                if (!MultiPed[i].MyVehicle.IsOnAllWheels || MultiPed[i].MyVehicle.IsStopped || MultiPed[i].MyVehicle.Health < 900)
                                {
                                    Racist_BackOnTrack(MultiPed[i].MyPed, MultiPed[i].MyVehicle, MultiPed[i].MyTarget_02, MultiPed[i].MyFloat_01, false, false);
                                    Raceisums(MultiPed[i].MyPed, MultiPed[i].MyTarget_01, MultiPed[i].MyVehicle, fMaxSpeed);
                                }
                            }
                        }
                        else
                        {
                            if (!MultiPed[i].MyVehicle.IsOnAllWheels || MultiPed[i].MyVehicle.IsStopped || MultiPed[i].MyVehicle.Health < 900)
                                MultiPed[i].MyTask_03 = Game.GameTime + 4000;
                            else
                                MultiPed[i].MyTask_03 = -1;
                        }
                    }
                }
            }

            ttTextBar_04.Text = "" + iRaceRiot + "/4";
        }
        public int CheckPointPro(bool bEnd, List<Vector3> CheckList, int iCheckPoints)
        {
            RemoveTargets();

            iCheckPoints += 1;
            int iCheck = iCheckPoints + 1;

            if (bEnd)
            {
                iCheck = 0;
                vTarget_02 = vTarget_01;
                vTarget_01 = CheckList[iCheck];
                RacingBlimps(true, vTarget_01);
                Racist_AddRaceCheckPoints(true, CheckList, iCheck);
            }
            else
            {
                if (iCheck == CheckList.Count)
                    iCheck = 0;
                else if (iCheckPoints == CheckList.Count)
                    iCheck = 1;

                if (iCheckPoints < CheckList.Count)
                {
                    vTarget_02 = vTarget_01;
                    vTarget_01 = CheckList[iCheckPoints];
                    RacingBlimps(true, vTarget_01);
                    RacingBlimps(false, CheckList[iCheck]);
                }
                else
                {
                    iCheckPoints = 0;
                    vTarget_02 = vTarget_01;
                    vTarget_01 = CheckList[iCheckPoints];
                    RacingBlimps(true, vTarget_01);
                    RacingBlimps(false, CheckList[iCheck]);
                }
                Racist_AddRaceCheckPoints(false, CheckList, iCheckPoints);

                iCheck = iCheckPoints;
            }

            return iCheck;
        }
        private void Racist_AddRaceCheckPoints(bool bFinish, List<Vector3> CheckList, int iCheckPoints)
        {
            int type = 0;
            int ThisCheck = 0;
            if (bFinish)
            {
                type = 4;
                if (bFloater)
                    type = 42;

                float posX1 = CheckList[iCheckPoints].X;
                float posY1 = CheckList[iCheckPoints].Y;
                float posZ1 = CheckList[iCheckPoints].Z - fCoronaHight;
                float posX2 = CheckList[iCheckPoints + 1].X;
                float posY2 = CheckList[iCheckPoints + 1].Y;
                float posZ2 = CheckList[iCheckPoints + 1].Z - fCoronaHight;

                int red = 255;
                int green = 255;
                int blue = 0;
                int alpha = 255;
                int reserved = 0;
                ThisCheck = Function.Call<int>(Hash.CREATE_CHECKPOINT, type, posX1, posY1, posZ1, posX2, posY2, posZ2, fCorSize, red, green, blue, alpha, reserved);
                iCoronaList.Add(ThisCheck);

                red = 0;
                green = 102;
                blue = 255;
                alpha = 255;
                Function.Call(Hash._SET_CHECKPOINT_ICON_RGBA, ThisCheck, red, green, blue, alpha);
                if (bFloater == false)
                    Function.Call(Hash._0x4B5B4DA5D79F1943, ThisCheck, fCoronaDirHt + 0.50f);
            }
            else
            {
                Vector3 vBefore = CheckList[iCheckPoints];

                Vector3 vAfter = CheckList[iCheckPoints];

                if (iCheckPoints == 0)
                    vBefore = CheckList[CheckList.Count - 1];
                else
                    vBefore = CheckList[iCheckPoints - 1];

                if (iCheckPoints == CheckList.Count - 1)
                    vAfter = CheckList[0];
                else
                    vAfter = CheckList[iCheckPoints + 1];

                float dxA = CheckList[iCheckPoints].X - vBefore.X;
                float dyA = CheckList[iCheckPoints].Y - vBefore.Y;

                float fHeadding1 = Function.Call<float>(Hash.GET_HEADING_FROM_VECTOR_2D, dxA, dyA);

                float dxB = CheckList[iCheckPoints].X - vAfter.X;
                float dyB = CheckList[iCheckPoints].Y - vAfter.Y;

                float fHeadding2 = Function.Call<float>(Hash.GET_HEADING_FROM_VECTOR_2D, dxB, dyB);

                float fHeaddin = fHeadding2 - fHeadding1;

                if (fHeaddin < 0)
                    fHeaddin = fHeaddin * -1;
                if (fHeaddin < 35 || fHeaddin > 325)
                {
                    if (bFloater)
                        type = 14;
                    else
                        type = 2;
                }
                else if (fHeaddin < 110 || fHeaddin > 250)
                {
                    if (bFloater)
                        type = 13;
                    else
                        type = 1;
                }
                else
                {
                    if (bFloater)
                        type = 12;
                    else
                        type = 0;
                }
                float posX1 = CheckList[iCheckPoints].X;
                float posY1 = CheckList[iCheckPoints].Y;
                float posZ1 = CheckList[iCheckPoints].Z - fCoronaHight;
                float posX2 = vAfter.X;
                float posY2 = vAfter.Y;
                float posZ2 = vAfter.Z - fCoronaHight;

                int red = 255;
                int green = 255;
                int blue = 0;
                int alpha = 255;
                int reserved = 0;
                ThisCheck = Function.Call<int>(Hash.CREATE_CHECKPOINT, type, posX1, posY1, posZ1, posX2, posY2, posZ2, fCorSize, red, green, blue, alpha, reserved);
                iCoronaList.Add(ThisCheck);

                red = 0;
                green = 102;
                blue = 255;
                alpha = 255;
                Function.Call(Hash._SET_CHECKPOINT_ICON_RGBA, ThisCheck, red, green, blue, alpha);
                if (bFloater == false)
                    Function.Call(Hash._0x4B5B4DA5D79F1943, ThisCheck, fCoronaDirHt);
            }

            ReadWriteBlips(false, true, -1, ThisCheck, -1, -1, -1, -1);
        }
        private void RacingBlimps(bool bPrimary, Vector3 vPlace)
        {
            if (bPrimary)
            {
                Target_01 = GTA.World.CreateBlip(vPlace);
                Target_01.Color = BlipColor.Yellow;
                ReadWriteBlips(false, true, Target_01.Handle, -1, -1, -1, -1, -1);
            }
            else
            {
                Target_02 = GTA.World.CreateBlip(vPlace);
                Target_02.Color = BlipColor.Yellow;
                Target_02.Scale = 0.50f;
                ReadWriteBlips(false, true, Target_02.Handle, -1, -1, -1, -1, -1);
            }
        }
        private void Racist_BackOnTrack(Ped Peddy, Vehicle Vhick, Vector3 Vpos, float fGoings, bool bPlayer, bool bFall)
        {
            if (bPlayer)
                Script.Wait(2000);
            if (bFall)
                WarptoAnyVeh(Vhick, Peddy, 1);
            Vhick.Repair();
            Vhick.Position = Vpos;
            Vhick.Heading = fGoings;
        }
        private void Raceisums(Ped PedX, Vector3 vEctor, Vehicle Vhick, float fSpeeds)
        {
            if (Vhick.ClassType == VehicleClass.Helicopters)
            {
                PedX.Task.ClearAll();
                float fheadder = Function.Call<float>(Hash.GET_HEADING_FROM_VECTOR_2D, PedX.Position.X - vEctor.X, PedX.Position.Y - vEctor.Y - 180.00f);
                FlyAway(PedX, vEctor, fSpeeds, 0.00f);
            }
            else if (Vhick.ClassType == VehicleClass.Boats)
            {
                PedX.Task.ClearAll();
                Function.Call(Hash.TASK_BOAT_MISSION, PedX.Handle, Vhick.Handle, 0, 0, vEctor.X, vEctor.Y, vEctor.Z, 4, fSpeeds / 2.00f, iRacingStyle, 2.50f, 7);
                Function.Call(Hash.SET_BLOCKING_OF_NON_TEMPORARY_EVENTS, PedX.Handle, true);
            }
            else
                DriveToDest(Vhick, vEctor, PedX, fSpeeds, iRacingStyle);
        }
        private void RaceEnd(bool bFail)
        {
            LogThis("RaceEnd, bFail == " + bFail);
            int iOnLap = iTotalLap - iCurrentLap;

            if (bCutingCul)
            {
                bCutingCul = false;
                Function.Call((Hash)0x9BAE5AD2508DF078, false);
            }

            Function.Call(Hash._0xC54A08C85AE4D410, 0.00f);

            if (bFail)
                GameOver(true, "", false, 0);
            else
            {
                int iRaceRiot = 4;
                if (!bSoloRace)
                {
                    for (int i = 0; i < MultiPed.Count; i++)
                    {
                        if (MultiPed[i].MyTask_02 < iList_01[3])
                            iRaceRiot = iRaceRiot - 1;
                        else if (MultiPed[i].MyTask_01 < iList_01[6])
                            iRaceRiot = iRaceRiot - 1;
                        else if (MultiPed[i].MyTask_01 == iList_01[6])
                        {
                            if (Game.Player.Character.Position.DistanceTo(vTarget_01) < MultiPed[i].MyPed.Position.DistanceTo(vTarget_01))
                                iRaceRiot = iRaceRiot - 1;
                        }
                    }
                    iList_01[3] = iRaceRiot;
                }
                int iBaseTime = 0;

                if (iLocationX == 1)
                    iBaseTime = 70000;
                else if (iLocationX == 2)
                    iBaseTime = 52000;
                else if (iLocationX == 3)
                    iBaseTime = 258000;
                else if (iLocationX == 4)
                    iBaseTime = 68000;
                else if (iLocationX == 5)
                    iBaseTime = 61000;
                else if (bOnCayoLand)
                    iBaseTime = 99000;

                for (int i = 0; i < iDeliverList.Count; i++)
                {
                    if (iList_01[0] == 6)
                        iCashReward += (iDeliverList[i] * -1) / 100;
                    else
                    {
                        if ((iDeliverList[i] * -1) < iBaseTime)
                            iCashReward += 1000;
                    }
                }

                if (iRaceRiot == 4)
                    iCashReward += 50;
                else if (iRaceRiot == 3)
                    iCashReward += 100;
                else if (iRaceRiot == 2)
                    iCashReward += 500;
                else
                    iCashReward += 10000;
                
                iDeliverList.Sort();
                int iBest = iDeliverList[iDeliverList.Count - 1];
                iBest = iBest * -1;
                FindTheTime(iBest, 5, MyLang.Othertext[52], false);
            }
        }
        private void BbBomb_BombSquad()
        {
            LogThis("BbBomb_BombSquad");

            for (int i = 0; i < VectorList_01.Count; i++)
                NPCSpawn(RandNPC(36), VectorList_01[i], RandInt(0, 360), true, 190, 10, 0, null, 2, false, 0, 0, "");
        }
        private void BbBomb_BombAtractor(Ped Peddy)
        {
            LogThis("BbBomb_BombAtractor");

            Peddy.Task.ClearAll();
            Peddy.Task.WanderAround(vTarget_01, 4.75f);
        }
        private void MoneyMan_HeyBud()
        {
            LogThis("MoneyMan_HeyBud");

            Game.Player.Character.CanBeDraggedOutOfVehicle = true;
            Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Npc_01.Handle, 0, false);
            Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Npc_01.Handle, 2, true);
            Npc_01.BlockPermanentEvents = true;
            Npc_01.RelationshipGroup = GP_Attack;
            Npc_01.Task.ShuffleToNextVehicleSeat(VehTrackin_01);
            Script.Wait(2000);
            if (Npc_01.SeatIndex != VehicleSeat.Driver)
            {
                GetOutofVeh(Game.Player.Character, 2);
                Npc_01.Task.ShuffleToNextVehicleSeat(VehTrackin_01);
            }
            Npc_01.Task.ClearAll();
            Npc_01.Task.CruiseWithVehicle(VehTrackin_01, 75.00f, 828);
        }
        private void MoneyMan_GetJack()
        {
            iWait4Sec = Game.GameTime + 500;

            if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
            {
                int iRan = -99;
                float fFirst = 25.00f;
                for (int i = 0; i < MultiPed.Count; i++)
                {
                    Ped Peddy = MultiPed[i].MyPed;
                    float fDis = Peddy.Position.DistanceTo(VehTrackin_01.Position);
                    if (Peddy.IsInVehicle(VehTrackin_01))
                    {

                    }
                    else
                    {
                        if (fDis < fFirst)
                        {
                            fFirst = fDis;
                            iRan = i;
                        }
                    }
                }

                if (iRan != -99)
                {
                    Ped Peddy = MultiPed[iRan].MyPed;
                    if (!BeOnOff[3])
                    {
                        Peddy.Task.ClearAll();
                        Peddy.AlwaysKeepTask = true;
                        Peddy.BlockPermanentEvents = true;
                        Function.Call(Hash.TASK_ENTER_VEHICLE, Peddy.Handle, VehTrackin_01.Handle, -1, -1, 2.00f, 1, 0);
                        while (!Peddy.IsInVehicle() && !Peddy.IsDead && Peddy.Position.DistanceTo(VehTrackin_01.Position) < 15)
                            Script.Wait(100);
                        Peddy.Task.CruiseWithVehicle(VehTrackin_01, 55.00f, 0);
                        BeOnOff[3] = true;
                        iCashReward *= 4;
                        iGotYourVan = Game.GameTime + 60000;
                    }
                }
            }
            else
            {
                for (int i = 0; i < MultiPed.Count; i++)
                {
                    Ped Peddy = MultiPed[i].MyPed;
                    if (Peddy.IsDead)
                    {
                        if (Peddy.CurrentBlip.Exists())
                            Peddy.CurrentBlip.Remove();
                    }
                    else if (BeOnOff[2])
                    {
                        if (Peddy.Position.DistanceTo(VehTrackin_01.Position) < 25.00f && !Peddy.Weapons.HasWeapon(WeaponHash.Bat))
                        {
                            if (VehTrackin_01.IsStopped)
                            {
                                GetOutofVeh(Peddy, 1);
                                ArmNpcWeapon("WEAPON_bat", Peddy);
                                ArmsRegulator(Peddy, 3);
                            }
                        }
                        else if (!VehTrackin_01.IsStopped && Peddy.Weapons.HasWeapon(WeaponHash.Bat) && Peddy.Position.DistanceTo(VehTrackin_01.Position) > 35.00f)
                        {
                            Peddy.Weapons.RemoveAll();
                            ArmsRegulator(Peddy, 4);
                            Peddy.Task.VehicleChase(Game.Player.Character);
                        }
                    }
                }
            }

            MultiPedTracker();
        }
        private void MoneyMan_Attacks()
        {
            LogThis("MoneyMan_Attacks");

            Game.Player.Character.CanBeDraggedOutOfVehicle = true;

            int iRanAttack = FindRandom(11, 1, 6);

            if (iRanAttack == 1)
            {
                BeOnOff[1] = true;
                
                SearchVeh(35.00f, 145.00f, RanVehListX(2, 5, false), false, false, true, true, 8, 5, 3, "", 0, true, true);
                iCashReward *= 2;
                BeOnOff[2] = true;
            }            // vehicle chase
            else if (iRanAttack == 2)
            {
                BeOnOff[1] = true;
                Vector3 VFor = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 30);
                UseAmbPed(VFor, 55.00f, -1, 3, "");
            }       // mob attack 
            else if (iRanAttack == 3)
            {
                AddDogFighters(1);
                iCashReward *= 8;
            }       // plane attack
            else if (iRanAttack == 4)
            {

            }       // Blank...No Attack
            else if (iRanAttack == 5)
            {
                BeOnOff[1] = true;
                SearchVeh(35.00f, 150.00f, RanVehListX(3, 5, false), false, false, false, true, 8, 5, 1, MyLang.Maptext[20], 0, true, true); 
                iCashReward *= 8;
            }       // tank attack
            else
            {
                MoneyMan_HeyBud();
                BeOnOff[1] = true;
                iCashReward *= 24;
            }                            // passenger attacks
        }
        private void Water01_BargeCars(Vehicle Veh, Prop Barge, int iPosition)
        {
            LogThis("Water01_BargeCars, iPosition == " + iPosition);

            if (iPosition == 1)
                Veh.AttachTo(Barge, 0, new Vector3(2.00f, 8.00f, 2.57f), new Vector3(0.00f, 0.00f, 90.00f));
            else if (iPosition == 2)
                Veh.AttachTo(Barge, 0, new Vector3(2.00f, 1.00f, 2.57f), new Vector3(0.00f, 0.00f, 90.00f));
            else
                Veh.AttachTo(Barge, 0, new Vector3(1.60f, -6.80f, 2.57f), new Vector3(0.00f, 0.00f, 50.00f));
        }
        private void Water01_BargeTow(Vehicle Barge, Vehicle Boat)
        {
            LogThis("Water01_BargeTow");

            float fxPos1 = 0.00f;
            float fyPos1 = -18.00f;
            float fzPos1 = 2.00f;

            float fxPos2 = 0.00f;
            float fyPos2 = 17.00f;
            float fzPos2 = 2.00f;

            float fxRot = 0.00f;
            float fyRot = 0.00f;
            float fzRot = 0.00f;

            float breakForce = 999999.00f;

            bool fixedRot = false;
            bool p15 = true;
            bool collision = true;
            bool teleport = false;
            int p18 = 2;

            Function.Call(Hash.ATTACH_ENTITY_TO_ENTITY_PHYSICALLY, Barge.Handle, Boat.Handle, 0, Boat.GetBoneIndex("bodyshell"), fxPos1, fyPos1, fzPos1, fxPos2, fyPos2, fzPos2, fxRot, fyRot, fzRot, breakForce, fixedRot, p15, collision, teleport, p18);
        }
        private void Water01_RentoMob()
        {
            LogThis("Water01_RentoMob");

            Water01_BargeCars(VehTrackin_01, PropList_01[3], 1);
            Water01_BargeCars(VehTrackin_02, PropList_01[3], 3);
            Water01_BargeCars(VehTrackin_03, PropList_01[3], 2);

            for (int i = 0; i < VectorList_01.Count; i++)
                NPCSpawn(RandNPC(iMobStarz), VectorList_01[i], 0.00f, false, 180, 14, 0, null, 2, true, 18, 0, MyLang.Maptext[110]);

            BeOnOff[0] = true;
        }
        private void Water01_BargeFloat()
        {
            Prop Bargie01 = PropList_01[PropList_01.Count - 1];
            Prop Bargie02 = PropList_01[PropList_01.Count - 2];

            Vector3 Vrot = new Vector3(VehicleList_01[0].Rotation.X, VehicleList_01[0].Rotation.Y, Bargie01.Rotation.Z);

            if (Vrot.X < 8.00f && Vrot.X > -8.00f && Vrot.Y < 8.00f && Vrot.Y > -8.00f)
                Bargie01.Rotation = Vrot;

            Vector3 Vrot2 = new Vector3(VehicleList_01[0].Rotation.X, VehicleList_01[0].Rotation.Y, Bargie02.Rotation.Z);

            if (Vrot2.X < 8.00f && Vrot2.X > -8.00f && Vrot2.Y < 8.00f && Vrot2.Y > -8.00f)
                Bargie02.Rotation = Vrot2;
        }
        private void Water01_BlowShitUp()
        {
            LogThis("Water01_BlowShitUp");

            for (int i = 0; i < VehicleList_01.Count; i++)
            {
                Vehicle vCarp = VehicleList_01[i];
                vCarp.Detach();
                vCarp.IsInvincible = false;
                vCarp.Explode();
            }
            iMissionSeq = 45;
        }
        private void Water01_JetSkiTrackin()
        {
            iTracking = Game.GameTime + 1000;

            MultiPedTracker();

            if (MultiPed.Count + MakeCarz.Count < 8)
            {
                int iLocals = RandInt(0, VectorList_02.Count - 1);
                Vector3 Vat = VectorList_02[iLocals];
                float fedd = RandFlow(0.00f, 360.00f);
                VehicleSpawn("Seashark3", Vat, fedd, false, false, false, false, 15, 0, 1, MyLang.Maptext[20], 0, false);
            }
        }
        private void Water01_HaveACar()
        {
            LogThis("Water01_HaveACar");

            VehTrackin_01.Detach();
            VehTrackin_01.FreezePosition = false;
            VehTrackin_01.Position = new Vector3(-448.75f, -2427.25f, 4.33f);
            VehTrackin_01.Heading = 139.65f;

            VehTrackin_02.Detach();
            VehTrackin_02.FreezePosition = false;
            VehTrackin_02.Position = new Vector3(-444.54f, -2430.93f, 4.33f);
            VehTrackin_02.Heading = 139.65f;

            VehTrackin_03.Detach();
            VehTrackin_03.FreezePosition = false;
            VehTrackin_03.Position = new Vector3(-440.53f, -2434.34f, 4.33f);
            VehTrackin_03.Heading = 139.65f;

            Vector3 Vhere = new Vector3(-446.42f, -2439.57f, 5.00f);
            SlowFastTravel(Vhere, 2.70f);
            iMissionSeq = 10;
        }
        private void Water02_BoatLaunch()
        {
            using (FileStream fs = File.Open(sBoatLaunch, FileMode.Create))
            {
                using (BinaryWriter w = new BinaryWriter(fs))
                {
                    w.Write(1);            //0
                }
            }
        }
        private void Water02_BoatOff()
        {
            using (FileStream fs = File.Open(sBoatOff, FileMode.Create))
            {
                using (BinaryWriter w = new BinaryWriter(fs))
                {
                    w.Write(1);            //0
                }
            }
        }
        private void Water02_AddHeistYacht(bool bAdd)
        {
            LogThis("Water02_AddHeistYacht");

            List<string> sAddIpl = new List<string>
            {
                "hei_yacht_heist_Lounge",
                "hei_yacht_heist_LODLights",
                "hei_yacht_heist_enginrm",
                "hei_yacht_heist_DistantLights",
                "hei_yacht_heist_Bridge",
                "hei_yacht_heist_Bedrm",
                "hei_yacht_heist_Bar",
                "hei_yacht_heist"
            };

            if (bAdd)
            {
                if (!bYachtLoaded)
                {
                    if (Function.Call<bool>(Hash.IS_IPL_ACTIVE, "smboat"))
                    {
                        Function.Call(Hash.REMOVE_IPL, "smboat");
                        bOldYacht = true;
                    }
                    for (int i = 0; i < sAddIpl.Count; i++)
                    {
                        if (!Function.Call<bool>(Hash.IS_IPL_ACTIVE, sAddIpl[i]))
                            Function.Call(Hash.REQUEST_IPL, sAddIpl[i]);
                    }
                    bYachtLoaded = true;
                }
            }
            else
            {
                for (int i = 0; i < sAddIpl.Count; i++)
                {
                    if (Function.Call<bool>(Hash.IS_IPL_ACTIVE, sAddIpl[i]))
                        Function.Call(Hash.REMOVE_IPL, sAddIpl[i]);
                }
                if (bOldYacht)
                {
                    if (!Function.Call<bool>(Hash.IS_IPL_ACTIVE, "smboat"))
                        Function.Call(Hash.REQUEST_IPL, "smboat");
                }
                bYachtLoaded = false;
            }
        }
        private void Water02_YachtAttack()
        {
            LogThis("Water02_YachtAttack");

            int iType = RandInt(1, 11);
            for (int i = 0; i < VectorList_01.Count; i++)
                NPCSpawn(RandNPC(iType), VectorList_01[i], 0.00f, true, 220, 15, 0, null, 0, true, 1, 0, MyLang.Maptext[111]);
        }
        private void Water03_RandDest(int iDests)
        {
            LogThis("Water03_RandDest, iDests == " + iDests);

            iDeliverList.Clear();
            iCashReward = 0;
            int iRanRange = VectorList_01.Count - 1;
            HashSet<int> numbers = new HashSet<int>();
            while (numbers.Count < iDests)
                numbers.Add(RandInt(0, iRanRange));

            while (iDests > 0)
            {
                iDests -= 1;
                iDeliverList.Add(numbers.ElementAt(iDests));
            }

            iDeliverList.Sort();
            for (int i = 0; i < iDeliverList.Count; i++)
                iCashReward = iCashReward + iDeliverList[i];

            iCashReward = iCashReward * 5;
        }
        private void Water04_AddTheRubbish()
        {

            LogThis("Water04_AddTheRubbish");

            PropList_01.Clear();

            for (int i = 0; i < VectorList_01.Count; i++)
            {
                string stype = "prop_rad_waste_barrel_01";

                int iobject = RandInt(0, 4);
                if (iobject == 1)
                    stype = "prop_rub_tyre_01";
                else if (iobject == 2)
                    stype = "prop_rub_tyre_02";
                else if (iobject == 3)
                    stype = "prop_rub_tyre_03";
                else if (iobject == 4)
                    stype = "prop_rub_washer_01";

                Vector3 VPickPos = VectorList_01[i];
                int iType = Function.Call<int>(Hash.GET_HASH_KEY, stype);
                Prop Picker = World.CreateAmbientPickup(PickupType.VehicleCustomScript, VPickPos, iType, 100);
                Picker.IsPersistent = true;
                Picker.AddBlip();
                Picker.CurrentBlip.IsShortRange = false;
                Picker.CurrentBlip.Sprite = BlipSprite.Package2;
                Picker.CurrentBlip.Color = BlipColor.Green;
                PropList_01.Add(new Prop(Picker.Handle));
            }

            iMissionSeq = 2;
            iList_01[0] = Game.GameTime + 140000;
        }
        private void Water04_RemoveRubbish()
        {

            LogThis("Water04_RemoveRubbish");

            for (int i = 0; i < PropList_01.Count; i++)
            {
                PropList_01[i].CurrentBlip.Remove();
                PropList_01[i].Delete();
            }

            PropList_01.Clear();
            BeOnOff[0] = true;
        }
        private void Water05_InYourBoat()
        {
            LogThis("Water05_InYourBoat");

            Ped Pedp = Game.Player.Character;

            for (int i = 1; i < VehicleList_01.Count; i++)
            {
                if (VehicleList_01[i].IsDead)
                {
                    iMissionSeq = 45;
                    break;
                }
                else if (Pedp.IsInVehicle(VehicleList_01[i]) || Water05_CargoBobed(VehicleList_01[i]))
                {
                    iMissionSeq = 3;
                    VehTrackin_01 = VehicleList_01[i];
                    Water05_BoatMarkerRem();
                    break;
                }
            }
        }
        public bool Water05_CargoBobed(Vehicle MyVick)
        {
            bool bCargoAttached = false;
            if (Game.Player.Character.IsInVehicle())
            {
                if (Function.Call<bool>(Hash.IS_VEHICLE_ATTACHED_TO_CARGOBOB, Game.Player.Character.CurrentVehicle.Handle, MyVick.Handle))
                    bCargoAttached = true;
            }
            return bCargoAttached;
        }
        private void Water05_BlipTheBoats()
        {
            LogThis("Water05_BlipTheBoats");

            for (int i = 0; i < VehicleList_01.Count; i++)
            {
                if (VehicleList_01[i].Model != VehicleHash.Cargobob2)
                    VehBlip(VehicleList_01[i], false, false, 3, MyLang.Maptext[0]);
            }
        }
        private void Water05_BoatMarkerRem()
        {
            LogThis("Water05_BoatMarkerRem");

            for (int i = 0; i < VehicleList_01.Count; i++)
            {
                if (VehicleList_01[i].CurrentBlip.Exists())
                    VehicleList_01[i].CurrentBlip.Remove();
            }

            int iTargs = RandInt(0, VectorList_01.Count - 1);
            vTarget_01 = VectorList_01[iTargs];
            vTarget_02 = VectorList_02[iTargs];
            iList_01[0] = Game.GameTime;
            AddTarget(vTarget_01, true, true, 1.00f, false, 356, MyLang.Maptext[0]);
            TheYellowCorona(vTarget_01, 5.00f);
            iMishText = 121;
        }
        private void Water06_SubCam()
        {

            LogThis("Water06_SubCam");

            Game.FadeScreenOut(1000);
            Script.Wait(1000);
            Ped Peddy = Game.Player.Character;

            Peddy.Task.ClearAllImmediately();

            Function.Call(Hash.DISPLAY_RADAR, false);
            Vector3 Campo = VectorList_02[0];
            Vector3 Camro = new Vector3(-4.00f, 0.00f, fList_02[0]);
            cCams = World.CreateCamera(Campo, Camro, 50.00f);
            Function.Call(Hash.RENDER_SCRIPT_CAMS, 1, 1, cCams.Handle, 0, 0);

            VehTrackin_01.Position = VectorList_02[1];
            VehTrackin_01.Rotation = new Vector3(-0.00f, 0.00f, fList_02[1]);

            WarptoAnyVeh(VehTrackin_01, Peddy, 1);
            Peddy.Task.DriveTo(VehTrackin_01, VectorList_02[2], 3.00f, 15.00f, 16777216);

            Game.FadeScreenIn(1000);
            Script.Wait(11000);
            Game.FadeScreenOut(1000);
            Script.Wait(1000);
            Peddy.Task.ClearAllImmediately();
            CleanCams();

            GetOutofVeh(Game.Player.Character, 1);
            Game.Player.Character.Position = new Vector3(514.3094f, 4887.639f, -62.59013f);
            Script.Wait(500);
            ShutThatDoor(VectorList_01[1], "0x19a63c9b");
            Water06_FillTheSub();
            Game.FadeScreenIn(1000);
        }
        private void Water06_FillTheSub()
        {
            LogThis("Water06_FillTheSub");

            int iAm = 33;

            for (int i = 0; i < VectorList_01.Count; i++)
            {
                if (i == 1)
                    Npc_02 = NPCSpawn(RandNPC(iAm), VectorList_01[i], fList_01[i], false, 180, 1, 0, null, 0, true, 18, 0, MyLang.Maptext[105]);//cowering
                else if (i == 7 || i == 4)
                    NPCSpawn(RandNPC(iAm), VectorList_01[i], fList_01[i], true, 220, 20, 0, null, 8, true, 1, 0, "");//offence
                else if (i == 10 || i == 9 || i == 6 || i == 5)
                    NPCSpawn(RandNPC(iAm), VectorList_01[i], fList_01[i], true, 220, 19, 0, null, 8, true, 1, 0, "");//defence
                else
                    NPCSpawn(RandNPC(iAm), VectorList_01[i], fList_01[i], true, 220, 18, 0, null, 8, true, 1, 0, "");//static
            }
        }
        private void HitMan_SecurtyDetail(string TheBoss, List<Vector3> GangPos, List<float> GangDir)
        {
            LogThis("HitMan_SecurtyDetail, TheBoss == " + TheBoss);

            bool bTheBoss = true;
            int iMob = GangPos.Count;
            while (iMob > 0)
            {
                iMob -= 1;
                Script.Wait(100);
                if (bTheBoss)
                {
                    Npc_01 = NPCSpawn(TheBoss, GangPos[iMob], GangDir[iMob], false, 180, 16, 0, null, 3, false, 0, 0, MyLang.Maptext[105]);
                    bTheBoss = false;
                }
                else
                    NPCSpawn(RandNPC(iMobStarz), GangPos[iMob], GangDir[iMob], true, 2200, 16, 0, null, 3, false, 0, 0, "");
            }
            iMissionSeq = 2;
        }
        private void Hitman_AddVisionCones(Ped Peddy)
        {

            LogThis("Hitman_AddVisionCones");

            Peddy.IsPersistent = true;
            Function.Call(Hash.SET_PED_TARGET_LOSS_RESPONSE, Peddy.Handle, 2);
            Script.Wait(50);
            Function.Call((Hash)0xD30C50DF888D58B5, Peddy.Handle, true);
            Script.Wait(50);
            Function.Call((Hash)0x0C4BBF625CA98C4E, Peddy.Handle, true);
            Script.Wait(50);
            Function.Call((Hash)0x97C65887D4B37FA9, Peddy.Handle, 45.00f);
            Script.Wait(50);
            Function.Call(Hash.HIDE_SPECIAL_ABILITY_LOCKON_OPERATION, Peddy.Handle, true);
        }
        private void Hitman_RemoveVisionCones()
        {
            LogThis("Hitman_RemoveVisionCones");

            for (int i = 0; i < PedList_01.Count; i++)
            {
                Function.Call((Hash)0xD30C50DF888D58B5, PedList_01[i].Handle, false);
                Function.Call((Hash)0x0C4BBF625CA98C4E, PedList_01[i].Handle, false);
            }
        }
        private void Hitman_ManualAI()
        {
            bool bToArms = false;
            List<Ped> DeadPed = new List<Ped>();
            DeadPed.Clear();

            for (int i = 0; i < PedList_01.Count; i++)
            {
                Ped pMe = PedList_01[i];
                if (pMe.IsDead)
                {
                    DeadPed.Add(new Ped(pMe.Handle));
                    if (pMe.CurrentBlip.Exists())
                        pMe.CurrentBlip.Color = BlipColor.BlueLight;
                    else
                    {
                        pMe.AddBlip();
                        pMe.CurrentBlip.Scale = 0.75f;
                        pMe.CurrentBlip.Color = BlipColor.BlueLight;
                    }
                }
                else
                {
                    if (i == 3)
                    {
                        if (!pMe.IsWalking)
                            iList_01[0] = PedWalkies(pMe, VectorList_02, iList_01[0]);
                        else if (pMe.Position.DistanceTo(VectorList_02[iList_01[0]]) < 1.00f)
                            pMe.Task.Wait(1000);
                    }
                    else if (i == 4)
                    {
                        if (!pMe.IsWalking)
                            iList_01[1] = PedWalkies(pMe, VectorList_03, iList_01[1]);
                        else if (pMe.Position.DistanceTo(VectorList_03[iList_01[1]]) < 1.00f)
                            pMe.Task.Wait(1000);
                    }
                    else if (i == 5)
                    {
                        if (!pMe.IsWalking)
                            iList_01[2] = PedWalkies(pMe, VectorList_04, iList_01[2]);
                        if (pMe.Position.DistanceTo(VectorList_04[iList_01[2]]) < 1.00f)
                            pMe.Task.Wait(1000);
                    }

                    if (!bToArms)
                    {
                        bToArms = BeenSpotted(pMe, Game.Player.Character, true);

                        if (bToArms)
                            pMe.CurrentBlip.Color = BlipColor.Pink;
                    }
                    else
                        break;
                }
            }

            if (DeadPed.Count > 0)
            {
                if (DeadPed.Count == 1)
                {
                    Ped IDead01 = DeadPed[0];
                    for (int i = 0; i < PedList_01.Count; i++)
                    {
                        Ped pMe = PedList_01[i];

                        if (!bToArms)
                            bToArms = BeenSpotted(pMe, IDead01, false);
                        else
                            break;
                    }
                }
                else if (DeadPed.Count == 2)
                {
                    Ped IDead01 = DeadPed[0];
                    Ped IDead02 = DeadPed[1];

                    for (int i = 0; i < PedList_01.Count; i++)
                    {
                        Ped pMe = PedList_01[i];
                        if (!bToArms)
                            bToArms = BeenSpotted(pMe, IDead01, false);
                        else
                            break;

                        if (!bToArms)
                            bToArms = BeenSpotted(pMe, IDead02, false);
                        else
                            break;
                    }
                }
                else if (DeadPed.Count == 3)
                {
                    Ped IDead01 = DeadPed[0];
                    Ped IDead02 = DeadPed[1];
                    Ped IDead03 = DeadPed[2];

                    for (int i = 0; i < PedList_01.Count; i++)
                    {
                        Ped pMe = PedList_01[i];
                        if (!bToArms)
                            bToArms = BeenSpotted(pMe, IDead01, false);
                        else
                            break;

                        if (!bToArms)
                            bToArms = BeenSpotted(pMe, IDead02, false);
                        else
                            break;

                        if (!bToArms)
                            bToArms = BeenSpotted(pMe, IDead03, false);
                        else
                            break;
                    }
                }
                else if (DeadPed.Count == 4)
                {
                    Ped IDead01 = DeadPed[0];
                    Ped IDead02 = DeadPed[1];
                    Ped IDead03 = DeadPed[2];
                    Ped IDead04 = DeadPed[3];

                    for (int i = 0; i < PedList_01.Count; i++)
                    {
                        Ped pMe = PedList_01[i];
                        if (!bToArms)
                            bToArms = BeenSpotted(pMe, IDead01, false);
                        else
                            break;

                        if (!bToArms)
                            bToArms = BeenSpotted(pMe, IDead02, false);
                        else
                            break;

                        if (!bToArms)
                            bToArms = BeenSpotted(pMe, IDead03, false);
                        else
                            break;

                        if (!bToArms)
                            bToArms = BeenSpotted(pMe, IDead04, false);
                        else
                            break;
                    }
                }
            }

            if (bToArms)
            {
                for (int i = 0; i < PedList_01.Count; i++)
                {
                    if (PedList_01[i].IsAlive)
                    {
                        PedList_01[i].Task.FightAgainst(Game.Player.Character);
                        PedList_01[i].AlwaysKeepTask = true;
                    }
                }
                Npc_01.Task.FleeFrom(Game.Player.Character);
                Function.Call((Hash)0xD30C50DF888D58B5, Npc_01.Handle, false);
                Function.Call((Hash)0x0C4BBF625CA98C4E, Npc_01.Handle, false);
                PedList_01.Remove(Npc_01);
                Npc_01.MarkAsNoLongerNeeded();
                iMissionSeq = 40;
            }
            BeOnOff[1] = true;
        }
        public bool BeenSpotted(Ped Guard, Ped Target, bool bAlive)
        {
            bool bSeeingYou = false;
            if (Guard.IsAlive)
            {
                Vector3 Vdir = (Target.Position - Guard.Position).Normalized;
                float fDirValue = Vector3.Dot(Vdir, Guard.ForwardVector);
                if (Function.Call<bool>(Hash.HAS_ENTITY_CLEAR_LOS_TO_ENTITY, Guard.Handle, Target.Handle, 17))
                {
                    if (Guard.Position.DistanceTo(Target.Position) < 35.00f)
                    {
                        if (fDirValue > 0.25f)
                            bSeeingYou = true;
                    }
                }
                if (bAlive)
                {
                    if (Function.Call<bool>(Hash.CAN_PED_HEAR_PLAYER, Target.Handle, Guard.Handle))
                        bSeeingYou = true;
                    if (Guard.IsInCombatAgainst(Target))
                        bSeeingYou = true;
                }
                else
                {
                    if (bSeeingYou)
                        Guard.CurrentBlip.Color = BlipColor.Orange;
                }
            }
            return bSeeingYou;
        }
        public string ImportsExpo_CarList(int iVechList)
        {
            LogThis("ImportsExpo_CarList, iVechList == " + iVechList);

            List<string> sVehicles = new List<string>();

            string sThisVehicle = "";

            if (iVechList == 1)
            {
                sVehicles = VehicleListX(1, 1, false);

                int iCar = FindRandom(43, 0, sVehicles.Count - 1);
                sThisVehicle = sVehicles[iCar];
            }            //Super
            else if (iVechList == 2)
            {
                sVehicles = VehicleListX(3, 1, false);

                int iCar = FindRandom(44, 0, sVehicles.Count - 1);
                sThisVehicle = sVehicles[iCar];
            }       //Coupe
            else if (iVechList == 3)
            {
                sVehicles = VehicleListX(2, 1, false);

                int iCar = FindRandom(45, 0, sVehicles.Count - 1);
                sThisVehicle = sVehicles[iCar];
            }       //Sport
            else if (iVechList == 4)
            {
                sVehicles = VehicleListX(4, 1, false);

                int iCar = FindRandom(46, 0, sVehicles.Count - 1);
                sThisVehicle = sVehicles[iCar];
            }       //Mussle
            else if (iVechList == 5)
            {
                sVehicles = VehicleListX(5, 1, false);

                int iCar = FindRandom(47, 0, sVehicles.Count - 1);
                sThisVehicle = sVehicles[iCar];
            }       //SportsClassic
            else if (iVechList == 6)
            {
                sVehicles = VehicleListX(9, 1, false);

                int iCar = FindRandom(48, 0, sVehicles.Count - 1);
                sThisVehicle = sVehicles[iCar];
            }       //Compact
            else if (iVechList == 7)
            {
                sVehicles = VehicleListX(6, 1, false);

                int iCar = FindRandom(49, 0, sVehicles.Count - 1);
                sThisVehicle = sVehicles[iCar];
            }       //Sedan
            else if (iVechList == 8)
            {
                sVehicles = VehicleListX(7, 1, false);

                int iCar = FindRandom(50, 0, sVehicles.Count - 1);
                sThisVehicle = sVehicles[iCar];
            }       //Offroad
            else if (iVechList == 9)
            {
                sVehicles = VehicleListX(8, 1, false);

                int iCar = FindRandom(51, 0, sVehicles.Count - 1);
                sThisVehicle = sVehicles[iCar];
            }       //SUV
            else
            {
                sVehicles = VehicleListX(0, 1, false);

                int iCar = FindRandom(58, 0, sVehicles.Count - 1);
                sThisVehicle = sVehicles[iCar];
            }

            return sThisVehicle;
        }
        private void ImportsExpo_CollisionBug(int iZone)
        {
            if (iZone == 2)
            {

                Vector3 ReBug_01 = new Vector3(-2138.074f, -506.461f, 0.7643f);
                Vector3 ReBugRot_01 = new Vector3(0.00f, 0.00f, -132.534f);

                Vector3 ReBug_02 = new Vector3(-2141.46f, -510.81f, 2.20f);
                Vector3 ReBugRot_02 = new Vector3(0.00f, 0.00f, -133.70f);

                BuildProp("prop_byard_rampold", ReBug_01, ReBugRot_01, true, true);
                BuildProp("prop_byard_rampold", ReBug_02, ReBugRot_02, true, true);
            }
            else if (iZone == 3)
            {
                Vector3 ReBug_01 = new Vector3(-3268.10f, 1268.10f, 0.013f);
                Vector3 ReBugRot_01 = new Vector3(0.00f, 0.00f, 166.098f);

                Vector3 ReBug_02 = new Vector3(-3273.055f, 1269.149f, 1.398f);
                Vector3 ReBugRot_02 = new Vector3(0.00f, 0.00f, 166.793f);

                BuildProp("prop_byard_rampold", ReBug_01, ReBugRot_01, true, true);
                BuildProp("prop_byard_rampold", ReBug_02, ReBugRot_02, true, true);
            }
            else if (iZone == 4)
            {
                Vector3 ReBug_01 = new Vector3(2851.892f, -636.868f, 2.032f);
                Vector3 ReBugRot_01 = new Vector3(0.00f, 0.00f, 18.182f);

                Vector3 ReBug_02 = new Vector3(2847.08f, -638.29f, 0.862f);
                Vector3 ReBugRot_02 = new Vector3(0.00f, 0.00f, 15.956f);

                Vector3 ReBug_03 = new Vector3(2842.25f, -640.03f, -0.872f);
                Vector3 ReBugRot_03 = new Vector3(0.00f, 0.00f, 17.137f);

                BuildProp("prop_byard_rampold", ReBug_01, ReBugRot_01, true, true);
                BuildProp("prop_byard_rampold", ReBug_02, ReBugRot_02, true, true);
                BuildProp("prop_byard_rampold", ReBug_03, ReBugRot_03, true, true);
            }
            else if (iZone == 5)
            {
                Vector3 ReBug_01 = new Vector3(3874.278f, 4463.562f, 2.253f);
                Vector3 ReBugRot_01 = new Vector3(6.67f, 12.099f, 0.233f);

                Vector3 ReBug_02 = new Vector3(3869.579f, 4463.611f, 1.776f);
                Vector3 ReBugRot_02 = new Vector3(2.668f, 11.799f, -1.541f);

                Vector3 ReBug_03 = new Vector3(3865.168f, 4463.689f, 1.338f);
                Vector3 ReBugRot_03 = new Vector3(-1.067f, 12.799f, -2.16f);

                BuildProp("prop_byard_rampold", ReBug_01, ReBugRot_01, true, true);
                BuildProp("prop_byard_rampold", ReBug_02, ReBugRot_02, true, true);
                BuildProp("prop_byard_rampold", ReBug_03, ReBugRot_03, true, true);
            }
            else if (iZone == 6)
            {
                Vector3 ReBug_01 = new Vector3(-1827.69f, 4847.84f, 2.75f);
                Vector3 ReBugRot_01 = new Vector3(2.134f, 2.999f, 112.71f);

                Vector3 ReBug_02 = new Vector3(-1825.889f, 4843.404f, 1.618f);
                Vector3 ReBugRot_02 = new Vector3(-7.47f, 4.09f, 110.105f);

                Vector3 ReBug_03 = new Vector3(-1823.82f, 4838.69f, 0.171f);
                Vector3 ReBugRot_03 = new Vector3(5.33f, 2.299f, 110.10f);

                BuildProp("prop_byard_rampold", ReBug_01, ReBugRot_01, true, true);
                BuildProp("prop_byard_rampold", ReBug_02, ReBugRot_02, true, true);
                BuildProp("prop_byard_rampold", ReBug_03, ReBugRot_03, true, true);
            }
        }
        private void ImportsExpo_MoveYourBoat()
        {
            LogThis("ImportsExpo_MoveYourBoat");

            Vehicle[] VTarg = World.GetNearbyVehicles(VectorList_01[0], 55.00f);

            for (int i = 0; i < VTarg.Count(); i++)
            {
                if (VehExists(VTarg, i))
                {
                    if (VTarg[i].ClassType == VehicleClass.Boats)
                        VTarg[i].Delete();
                }
            }
        }
        private void ImportsExpo_Targit()
        {
            LogThis("ImportsExpo_Targit");

            Vector3 CorHi = VectorList_01[0];
            CorHi.Z -= 0.6f;
            bool bGoto = true;
            if (iLocationX == 1)
                bGoto = false;
            AddTarget(CorHi, bGoto, true, 1.00f, false, 794, MyLang.Maptext[38]);
            TheYellowCorona(CorHi, 10.00f);
        }
        private void ImportsExpo_Gangz()
        {
            MultiPedTracker();

            for (int i = 0; i < MultiPed.Count; i++)
            {
                if (MultiPed[i].MyPed.Position.DistanceTo(Game.Player.Character.Position) > 150.00f || Game.Player.Character.Position.DistanceTo(VectorList_01[0]) < 250.00f)
                {
                    if (MultiPed[i].MyBlip != null)
                        MultiPed[i].MyBlip.Remove();
                    if (MultiPed[i].MyVehicle != null)
                    {
                        VehicleList_01.Remove(MultiPed[i].MyVehicle);
                        MultiPed[i].MyVehicle.MarkAsNoLongerNeeded();
                    }
                    MultiPed[i].MyPed.Task.FleeFrom(Game.Player.Character);
                    MultiPed[i].MyPed.MarkAsNoLongerNeeded();
                    ReadWriteBlips(false, false, -1, -1, MultiPed[i].MyPed.Handle, -1, -1, -1);
                    PedList_01.Remove(MultiPed[i].MyPed);
                    MultiPed.RemoveAt(i);
                    iUltPed01 += 1;
                }
            }

            if (Game.Player.Character.Position.DistanceTo(VectorList_01[0]) < 250.00f)
            {
                if (MakeCarz.Count > 0)
                    MakeCarz.Clear();
            }
            else
            {
                if (iTime_01[0] < Game.GameTime)
                {
                    if (MultiPed.Count + MakeCarz.Count < 6)
                    {
                        iTime_01[0] = Game.GameTime + 6000;
                        SearchVeh(35.00f, 150.00f, "KURUMA", false, false, false, false, 8, 5, 1, MyLang.Maptext[20], 0, true, true);
                    }
                    else
                        iTime_01[0] = Game.GameTime + RandInt(30000, 45000);
                }
            }
        }
        private void ImportsExpo_FunPlates(Vehicle vhicary)
        {
            LogThis("ImportsExpo_FunPlates");

            List<string> IPlate = new List<string>
            {
                "JU52FKU",
                "ZR0 KIDZ",
                "MUAHAHA",
                "P54CH0",
                "B88B8BB",
                "P004MAD",
                "CARDIEM",
                "MNNGFUL",
                "SU55PCT",
                "M11LFS",
                "G5POT",
                "H0R5SH1T",
                "CU11NNT",
                "PB4UGO",
                "PMS247",
                "HUF4RTD",
                "N1NJA",
                "STFUPLZ",
                "3JOH22A",
                "4EVERL8",
                "KSMYGAS",
                "EASYRDR",
                "CYABYE",
                "JEDIIAM",
                "X32iAR0",
                "JC51BEL",
                "D4TBOI",
                "YSOFFCR",
                "TPL55FUN",
                "A5RSE",
                "BE11END",
                "UT02SER",
                "PENN15",
                "UG04POO"
            };

            vhicary.NumberPlate = IPlate[RandInt(0, IPlate.Count - 1)];
        }
        private void DebtCollect_LoadHood()
        {
            LogThis("DebtCollect_LoadHood");

            for (int i = 1; i < VectorList_01.Count - 1; i++)
                NPCSpawn("", VectorList_01[i], 0.00f, true, 220, 15, 0, null, 0, true, 1, 1, MyLang.Maptext[113]);
        }
        private void BikerRaids_LoadClutter()
        {

            LogThis("BikerRaids_LoadClutter");

            sList_01.Clear();
            List<string> sOldPropL = new List<string>();
            List<string> sPropL = new List<string>();

            if (iMissionVar_02 == 1)
            {
                sOldPropL.Add("security_low");
                sOldPropL.Add("coke_cut_01");
                sOldPropL.Add("coke_cut_02");
                sOldPropL.Add("coke_cut_03");
                sOldPropL.Add("security_high");
                sOldPropL.Add("production_upgrade");
                sOldPropL.Add("production_basic");
                sOldPropL.Add("equipment_basic");
                sOldPropL.Add("equipment_upgrade");
                sOldPropL.Add("coke_cut_04");
                sOldPropL.Add("coke_cut_05");
                sOldPropL.Add("set_up");
                sOldPropL.Add("table_equipment");
                sOldPropL.Add("table_equipment_upgrade");
                sOldPropL.Add("coke_press_upgrade");
                sOldPropL.Add("coke_press_basic");

                if (iMissionVar_01 == 2)
                {
                    Vector3 Poz = new Vector3(1086.96191f, -3194.51221f, -39.9751938f);
                    Vector3 Rot = new Vector3(0.00f, 0.00f, -171.034943f);
                    BuildProp("prop_cratepile_07a_l1", Poz, Rot, true, false);

                    Poz = new Vector3(1094.07617f, -3193.77563f, -39.9933014f);
                    Rot = new Vector3(0.00f, 0.00f, -90.5383224f);
                    BuildProp("sm_prop_smug_crate_01a", Poz, Rot, true, false);

                    Poz = new Vector3(1096.43481f, -3198.1123f, -39.9933014f);
                    Rot = new Vector3(0.00f, 0.00f, -89.7508698f);
                    BuildProp("sm_prop_smug_crate_01a", Poz, Rot, true, false);
                }
                else
                {
                    sPropL.Add("coke_cut_01");
                    sPropL.Add("coke_cut_02");
                    sPropL.Add("coke_cut_03");
                    sPropL.Add("security_high");
                    sPropL.Add("production_upgrade");
                    sPropL.Add("equipment_upgrade");
                    sPropL.Add("coke_cut_04");
                    sPropL.Add("coke_cut_05");
                    sPropL.Add("set_up");
                    sPropL.Add("table_equipment_upgrade");
                    sPropL.Add("coke_press_upgrade");
                }
            }
            else if (iMissionVar_02 == 2)
            {
                sOldPropL.Add("counterfeit_security");
                sOldPropL.Add("counterfeit_cashpile10a");
                sOldPropL.Add("counterfeit_cashpile10b");
                sOldPropL.Add("counterfeit_cashpile10c");
                sOldPropL.Add("counterfeit_cashpile10d");
                sOldPropL.Add("counterfeit_cashpile20a");
                sOldPropL.Add("counterfeit_cashpile20b");
                sOldPropL.Add("counterfeit_cashpile20c");
                sOldPropL.Add("counterfeit_cashpile20d");
                sOldPropL.Add("counterfeit_cashpile100a");
                sOldPropL.Add("counterfeit_cashpile100b");
                sOldPropL.Add("counterfeit_cashpile100c");
                sOldPropL.Add("counterfeit_cashpile100d");
                sOldPropL.Add("counterfeit_low_security");
                sOldPropL.Add("counterfeit_setup");
                sOldPropL.Add("counterfeit_standard_equip_no_prod");
                sOldPropL.Add("counterfeit_upgrade_equip_no_prod");
                sOldPropL.Add("counterfeit_upgrade_equip");
                sOldPropL.Add("dryera_off");
                sOldPropL.Add("dryerb_off");
                sOldPropL.Add("dryerc_off");
                sOldPropL.Add("dryerd_off");
                sOldPropL.Add("dryera_on");
                sOldPropL.Add("dryerb_on");
                sOldPropL.Add("dryerc_on");
                sOldPropL.Add("dryerd_on");
                sOldPropL.Add("dryera_open");
                sOldPropL.Add("dryerb_open");
                sOldPropL.Add("dryerc_open");
                sOldPropL.Add("dryerd_open");
                sOldPropL.Add("money_cutter");
                sOldPropL.Add("special_chairs");

                if (iMissionVar_01 == 2)
                {
                    Vector3 Poz = new Vector3(1137.93652f, -3195.95581f, -40.6542892f);
                    Vector3 Rot = new Vector3(0.00f, 0.00f, -0.86184f);
                    BuildProp("prop_cons_plyboard_01", Poz, Rot, true, false);

                    Poz = new Vector3(1136.0896f, -3198.22876f, -40.660553f);
                    Rot = new Vector3(0.00f, 0.00f, 89.6559372f);
                    BuildProp("sm_prop_smug_crate_01a", Poz, Rot, true, false);

                    Poz = new Vector3(1136.03723f, -3198.22803f, -39.7015251f);
                    Rot = new Vector3(0.00f, 0.00f, 89.6559372f);
                    BuildProp("sm_prop_smug_crate_01a", Poz, Rot, true, false);

                    Poz = new Vector3(1129.00f, -3198.18506f, -40.660553f);
                    Rot = new Vector3(0.00f, 0.00f, -179.42128f);
                    BuildProp("sm_prop_smug_crate_01a", Poz, Rot, true, false);

                    Poz = new Vector3(1125.31262f, -3195.07422f, -41.4020462f);
                    Rot = new Vector3(0.00f, 0.00f, -0.603f);
                    BuildProp("sm_prop_smug_crate_01a", Poz, Rot, true, false);
                }
                else
                {
                    sPropL.Add("counterfeit_security");
                    sPropL.Add("counterfeit_cashpile20a");
                    sPropL.Add("counterfeit_cashpile100b");
                    sPropL.Add("counterfeit_cashpile100c");
                    sPropL.Add("counterfeit_cashpile100d");
                    sPropL.Add("counterfeit_setup");
                    sPropL.Add("counterfeit_upgrade_equip");
                    sPropL.Add("dryera_on");
                    sPropL.Add("dryerb_open");
                    sPropL.Add("dryerc_on");
                    sPropL.Add("dryerd_off");
                    sPropL.Add("money_cutter");
                    sPropL.Add("special_chairs");
                }
            }
            else if (iMissionVar_02 == 3)
            {
                sOldPropL.Add("equipment_upgrade");
                sOldPropL.Add("equipment_basic");
                sOldPropL.Add("production");
                sOldPropL.Add("security_high");
                sOldPropL.Add("security_low");
                sOldPropL.Add("set_up");
                sOldPropL.Add("clutter");
                sOldPropL.Add("interior_basic");
                sOldPropL.Add("interior_upgrade");
                sOldPropL.Add("Chair01");
                sOldPropL.Add("Chair02");
                sOldPropL.Add("Chair03");
                sOldPropL.Add("Chair04");
                sOldPropL.Add("Chair05");
                sOldPropL.Add("Chair06");
                sOldPropL.Add("Chair07");

                if (iMissionVar_01 == 2)
                {
                    sPropL.Add("interior_basic");
                }
                else
                {
                    sPropL.Add("equipment_upgrade");
                    sPropL.Add("production");
                    sPropL.Add("security_high");
                    sPropL.Add("clutter");
                    sPropL.Add("interior_upgrade");
                    sPropL.Add("Chair01");
                    sPropL.Add("Chair02");
                    sPropL.Add("Chair03");
                    sPropL.Add("Chair04");
                    sPropL.Add("Chair05");
                    sPropL.Add("Chair06");
                    sPropL.Add("Chair07");
                }
            }
            else if (iMissionVar_02 == 4)
            {
                sOldPropL.Add("meth_lab_upgrade");
                sOldPropL.Add("meth_lab_basic");
                sOldPropL.Add("meth_lab_production");
                sOldPropL.Add("meth_lab_security_high");
                sOldPropL.Add("meth_lab_setup");
                sOldPropL.Add("meth_lab_empty");

                if (iMissionVar_01 == 2)
                {
                    sPropL.Add("meth_lab_empty");

                    Vector3 Poz = new Vector3(999.5273f, -3199.010f, -37.4124f);
                    Vector3 Rot = new Vector3(0.00f, 0.00f, -90.2872f);
                    BuildProp("prop_cons_plyboard_01", Poz, Rot, true, false);

                    Poz = new Vector3(1005.87811f, -3200.47021f, -39.9929962f);
                    Rot = new Vector3(0.00f, 0.00f, -90.4774933f);
                    BuildProp("sm_prop_smug_crate_01a", Poz, Rot, true, false);

                    Poz = new Vector3(1007.12366f, -3196.58594f, -39.9929962f);
                    Rot = new Vector3(0.00f, 0.00f, -89.2303009f);
                    BuildProp("sm_prop_smug_crate_01a", Poz, Rot, true, false);

                    Poz = new Vector3(1007.12366f, -3196.58594f, -39.9929962f);
                    Rot = new Vector3(0.00f, 0.00f, -90.4774933f);
                    BuildProp("sm_prop_smug_crate_01a", Poz, Rot, true, false);

                    Poz = new Vector3(1007.12366f, -3196.58594f, -39.9929962f);
                    Rot = new Vector3(0.00f, 0.00f, -90.0826187f);
                    BuildProp("sm_prop_smug_crate_01a", Poz, Rot, true, false);
                }
                else
                {
                    sPropL.Add("meth_lab_upgrade");
                    sPropL.Add("meth_lab_production");
                    sPropL.Add("meth_lab_security_high");
                    sPropL.Add("meth_lab_setup");
                }
            }
            else
            {
                sOldPropL.Add("weed_growtha_stage1");
                sOldPropL.Add("weed_growtha_stage2");
                sOldPropL.Add("weed_growtha_stage3");
                sOldPropL.Add("weed_standard_equip");
                sOldPropL.Add("weed_upgrade_equip");
                sOldPropL.Add("weed_drying");
                sOldPropL.Add("weed_growthb_stage1");
                sOldPropL.Add("weed_growthb_stage2");
                sOldPropL.Add("weed_growthb_stage3");
                sOldPropL.Add("weed_growthc_stage1");
                sOldPropL.Add("weed_growthc_stage2");
                sOldPropL.Add("weed_growthc_stage3");
                sOldPropL.Add("weed_growthd_stage1");
                sOldPropL.Add("weed_growthd_stage2");
                sOldPropL.Add("weed_growthd_stage3");
                sOldPropL.Add("weed_growthe_stage1");
                sOldPropL.Add("weed_growthe_stage2");
                sOldPropL.Add("weed_growthe_stage3");
                sOldPropL.Add("weed_growthf_stage1");
                sOldPropL.Add("weed_growthf_stage2");
                sOldPropL.Add("weed_growthf_stage3");
                sOldPropL.Add("weed_growthg_stage1");
                sOldPropL.Add("weed_growthg_stage2");
                sOldPropL.Add("weed_growthg_stage3");
                sOldPropL.Add("weed_growthh_stage1");
                sOldPropL.Add("weed_growthh_stage2");
                sOldPropL.Add("weed_growthh_stage3");
                sOldPropL.Add("weed_growthi_stage1");
                sOldPropL.Add("weed_growthi_stage2");
                sOldPropL.Add("weed_growthi_stage3");
                sOldPropL.Add("weed_security_upgrade");
                sOldPropL.Add("weed_production");
                sOldPropL.Add("weed_set_up");
                sOldPropL.Add("weed_hosea");
                sOldPropL.Add("weed_hoseb");
                sOldPropL.Add("weed_hosec");
                sOldPropL.Add("weed_hosed");
                sOldPropL.Add("weed_hosee");
                sOldPropL.Add("weed_hosef");
                sOldPropL.Add("weed_hoseg");
                sOldPropL.Add("weed_hoseh");
                sOldPropL.Add("weed_hosei");
                sOldPropL.Add("light_growtha_stage23_standard");
                sOldPropL.Add("light_growthb_stage23_standard");
                sOldPropL.Add("light_growthc_stage23_standard");
                sOldPropL.Add("light_growthd_stage23_standard");
                sOldPropL.Add("light_growthe_stage23_standard");
                sOldPropL.Add("light_growthf_stage23_standard");
                sOldPropL.Add("light_growthg_stage23_standard");
                sOldPropL.Add("light_growthh_stage23_standard");
                sOldPropL.Add("light_growthi_stage23_standard");
                sOldPropL.Add("light_growtha_stage23_upgrade");
                sOldPropL.Add("light_growthb_stage23_upgrade");
                sOldPropL.Add("light_growthc_stage23_upgrade");
                sOldPropL.Add("light_growthd_stage23_upgrade");
                sOldPropL.Add("light_growthe_stage23_upgrade");
                sOldPropL.Add("light_growthf_stage23_upgrade");
                sOldPropL.Add("light_growthg_stage23_upgrade");
                sOldPropL.Add("light_growthh_stage23_upgrade");
                sOldPropL.Add("light_growthi_stage23_upgrade");
                sOldPropL.Add("weed_low_security");
                sOldPropL.Add("weed_chairs");

                if (iMissionVar_01 == 2)
                {
                    sPropL.Add("weed_growtha_stage1");
                    sPropL.Add("weed_growthb_stage1");
                    sPropL.Add("weed_growthc_stage1");
                    sPropL.Add("weed_growthd_stage1");
                    sPropL.Add("weed_growthe_stage1");
                    sPropL.Add("weed_growthf_stage1");
                    sPropL.Add("weed_growthg_stage1");
                    sPropL.Add("weed_growthh_stage1");
                    sPropL.Add("weed_growthi_stage1");
                    sPropL.Add("weed_standard_equip");

                    Vector3 Poz = new Vector3(1063.22192f, -3186.30127f, -40.1368523f);
                    Vector3 Rot = new Vector3(0.00f, 0.00f, -178.209686f);
                    BuildProp("sm_prop_smug_crate_01a", Poz, Rot, true, false);

                    Poz = new Vector3(1058.3396f, -3194.53247f, -40.1611748f);
                    Rot = new Vector3(0.00f, 0.00f, 90.4894867f);
                    BuildProp("sm_prop_smug_crate_01a", Poz, Rot, true, false);

                    Poz = new Vector3(1042.08301f, -3203.67603f, -39.1605415f);
                    Rot = new Vector3(0.00f, 0.00f, 31.8992805f);
                    BuildProp("sm_prop_smug_crate_01a", Poz, Rot, true, false);
                }
                else
                {
                    sPropL.Add("weed_growtha_stage3");
                    sPropL.Add("weed_upgrade_equip");
                    sPropL.Add("weed_drying");
                    sPropL.Add("weed_growthb_stage2");
                    sPropL.Add("weed_growthc_stage1");
                    sPropL.Add("weed_growthd_stage3");
                    sPropL.Add("weed_growthe_stage3");
                    sPropL.Add("weed_growthf_stage2");
                    sPropL.Add("weed_growthg_stage1");
                    sPropL.Add("weed_growthh_stage2");
                    sPropL.Add("weed_growthi_stage3");
                    sPropL.Add("weed_security_upgrade");
                    sPropL.Add("weed_production");
                    sPropL.Add("weed_hosea");
                    sPropL.Add("weed_hoseb");
                    sPropL.Add("weed_hosec");
                    sPropL.Add("weed_hosed");
                    sPropL.Add("weed_hosee");
                    sPropL.Add("weed_hosef");
                    sPropL.Add("weed_hoseg");
                    sPropL.Add("weed_hoseh");
                    sPropL.Add("weed_hosei");
                    sPropL.Add("light_growtha_stage23_upgrade");
                    sPropL.Add("light_growthb_stage23_upgrade");
                    sPropL.Add("light_growthc_stage23_upgrade");
                    sPropL.Add("light_growthd_stage23_upgrade");
                    sPropL.Add("light_growthe_stage23_upgrade");
                    sPropL.Add("light_growthf_stage23_upgrade");
                    sPropL.Add("light_growthg_stage23_upgrade");
                    sPropL.Add("light_growthh_stage23_upgrade");
                    sPropL.Add("light_growthi_stage23_upgrade");
                    sPropL.Add("weed_chairs");
                }
            }

            Vector3 Vloc = VectorList_03[VectorList_03.Count - 1];
            int iWare = Function.Call<int>(Hash.GET_INTERIOR_AT_COORDS, Vloc.X, Vloc.Y, Vloc.Z);

            if (!Function.Call<bool>(Hash.IS_INTERIOR_DISABLED, iWare))
            {
                for (int i = 0; i < sOldPropL.Count; i++)
                {
                    if (Function.Call<bool>(Hash._IS_INTERIOR_PROP_ENABLED, iWare, sOldPropL[i]))
                    {
                        Function.Call(Hash._DISABLE_INTERIOR_PROP, iWare, sOldPropL[i]);
                        sList_01.Add(sOldPropL[i]);
                    }
                }
            }
            else
            {
                Function.Call((Hash)0x2CA429C029CCF247, iWare);
                Function.Call(Hash.SET_INTERIOR_ACTIVE, iWare, true);
            }
            Function.Call(Hash.DISABLE_INTERIOR, iWare, false);

            for (int i = 0; i < sPropL.Count; i++)
            {
                if (!Function.Call<bool>(Hash._IS_INTERIOR_PROP_ENABLED, iWare, sPropL[i]))
                    Function.Call(Hash._ENABLE_INTERIOR_PROP, iWare, sPropL[i]);
            }
            Function.Call(Hash.REFRESH_INTERIOR, iWare);

            if (iMissionVar_01 == 2)
            {
                List<string> Contains = new List<string>
                {
                    "prop_container_03a",
                    "prop_container_03b",
                    "prop_container_03mb",
                    "prop_container_old1"
                };


                int iCont = RandInt(0, Contains.Count - 1);
                Vector3 posy = new Vector3(VectorList_02[0].X, VectorList_02[0].Y, VectorList_02[0].Z - 0.90f);
                Vector3 Rots = new Vector3(0.00f, 0.00f, fGetDir);
                BuildProp(Contains[iCont], posy, Rots, true, true);

            }
        }
        private void BikerRaids_UnloadInt(int iInterior)
        {

            LogThis("BikerRaids_UnloadInt, iInterior == " + iInterior);

            List<string> sPropL = new List<string>();

            Vector3 Vloc = VectorList_03[VectorList_03.Count - 1];
            int iWare = Function.Call<int>(Hash.GET_INTERIOR_AT_COORDS, Vloc.X, Vloc.Y, Vloc.Z);

            if (iInterior == 1)
            {
                sPropL.Add("coke_cut_01");
                sPropL.Add("coke_cut_02");
                sPropL.Add("coke_cut_03");
                sPropL.Add("security_high");
                sPropL.Add("production_upgrade");
                sPropL.Add("equipment_upgrade");
                sPropL.Add("coke_cut_04");
                sPropL.Add("coke_cut_05");
                sPropL.Add("set_up");
                sPropL.Add("table_equipment_upgrade");
                sPropL.Add("coke_press_upgrade");
            }
            else if (iInterior == 2)
            {
                sPropL.Add("counterfeit_security");
                sPropL.Add("counterfeit_cashpile20a");
                sPropL.Add("counterfeit_cashpile100b");
                sPropL.Add("counterfeit_cashpile100c");
                sPropL.Add("counterfeit_cashpile100d");
                sPropL.Add("counterfeit_setup");
                sPropL.Add("counterfeit_upgrade_equip");
                sPropL.Add("dryera_on");
                sPropL.Add("dryerb_open");
                sPropL.Add("dryerc_on");
                sPropL.Add("dryerd_off");
                sPropL.Add("money_cutter");
                sPropL.Add("special_chairs");
            }
            else if (iInterior == 3)
            {
                sPropL.Add("equipment_upgrade");
                sPropL.Add("production");
                sPropL.Add("security_high");
                sPropL.Add("clutter");
                sPropL.Add("interior_upgrade");
                sPropL.Add("Chair01");
                sPropL.Add("Chair02");
                sPropL.Add("Chair03");
                sPropL.Add("Chair04");
                sPropL.Add("Chair05");
                sPropL.Add("Chair06");
                sPropL.Add("Chair07");
            }
            else if (iInterior == 4)
            {
                sPropL.Add("meth_lab_upgrade");
                sPropL.Add("meth_lab_production");
                sPropL.Add("meth_lab_security_high");
            }
            else
            {
                sPropL.Add("weed_growtha_stage3");
                sPropL.Add("weed_upgrade_equip");
                sPropL.Add("weed_drying");
                sPropL.Add("weed_growthb_stage2");
                sPropL.Add("weed_growthc_stage1");
                sPropL.Add("weed_growthd_stage3");
                sPropL.Add("weed_growthe_stage3");
                sPropL.Add("weed_growthf_stage2");
                sPropL.Add("weed_growthg_stage1");
                sPropL.Add("weed_growthh_stage2");
                sPropL.Add("weed_growthi_stage3");
                sPropL.Add("weed_security_upgrade");
                sPropL.Add("weed_hosea");
                sPropL.Add("weed_hoseb");
                sPropL.Add("weed_hosec");
                sPropL.Add("weed_hosed");
                sPropL.Add("weed_hosee");
                sPropL.Add("weed_hosef");
                sPropL.Add("weed_hoseg");
                sPropL.Add("weed_hoseh");
                sPropL.Add("weed_hosei");
                sPropL.Add("light_growtha_stage23_upgrade");
                sPropL.Add("light_growthb_stage23_upgrade");
                sPropL.Add("light_growthc_stage23_upgrade");
                sPropL.Add("light_growthd_stage23_upgrade");
                sPropL.Add("light_growthe_stage23_upgrade");
                sPropL.Add("light_growthf_stage23_upgrade");
                sPropL.Add("light_growthg_stage23_upgrade");
                sPropL.Add("light_growthh_stage23_upgrade");
                sPropL.Add("light_growthi_stage23_upgrade");
            }

            for (int i = 0; i < sPropL.Count; i++)
            {
                if (Function.Call<bool>(Hash._IS_INTERIOR_PROP_ENABLED, iWare, sPropL[i]))
                    Function.Call(Hash._DISABLE_INTERIOR_PROP, iWare, sPropL[i]);
            }

            int iGetOldSet = sList_01.Count;
            if (iGetOldSet > 0)
            {
                while (iGetOldSet > 0)
                {
                    iGetOldSet = iGetOldSet - 1;
                    Function.Call(Hash._ENABLE_INTERIOR_PROP, iWare, sList_01[iGetOldSet]);
                }
                sList_01.Clear();
            }
            else
            {
                Function.Call(Hash.SET_INTERIOR_ACTIVE, iWare, false);
                Function.Call(Hash.DISABLE_INTERIOR, iWare, true);

                LoadInMissionIPLs(iInterior, true, false);
            }

        }
        private void BikerRaids_LoadHood()
        {
            LogThis("BikerRaids_LoadHood");
            if (iMissionVar_01 == 2)
            {
                for (int i = 0; i < VectorList_03.Count; i++)
                    NPCSpawn(RandNPC(4), VectorList_03[1], 0.00f, false, 250, 8, 0, null, 0, true, 1, 0, MyLang.Maptext[106]);
            }
            else 
            {
                int iCan = VectorList_03.Count - 1;
                while (iCan > 1)
                {
                    iCan -= 1;
                    if (FindRandom(83, 1, 4) > 2)
                    {
                        if (iMissionVar_02 == 1)
                            NPCSpawn("mp_f_cocaine_01", VectorList_03[iCan], 0.00f, false, 130, 26, 0, null, 0, true, 18, 0, MyLang.Maptext[112]);
                        else if (iMissionVar_02 == 2)
                            NPCSpawn("mp_f_counterfeit_01", VectorList_03[iCan], 0.00f, false, 130, 26, 0, null, 0, true, 18, 0, MyLang.Maptext[112]);
                        else if (iMissionVar_02 == 3)
                            NPCSpawn("mp_f_forgery_01", VectorList_03[iCan], 0.00f, false, 130, 26, 0, null, 0, true, 18, 0, MyLang.Maptext[112]);
                        else if (iMissionVar_02 == 4)
                            NPCSpawn("mp_f_meth_01", VectorList_03[iCan], 0.00f, false, 130, 26, 0, null, 0, true, 18, 0, MyLang.Maptext[112]);
                        else
                            NPCSpawn("mp_f_weed_01", VectorList_03[iCan], 0.00f, false, 130, 26, 0, null, 0, true, 18, 0, MyLang.Maptext[112]);
                    }
                    else
                    {
                        if (iMissionVar_02 == 1)
                            NPCSpawn("mp_m_cocaine_01", VectorList_03[iCan], 0.00f, false, 130, 27, 0, null, 0, true, 18, 0, MyLang.Maptext[112]);
                        else if (iMissionVar_02 == 2)
                            NPCSpawn("mp_m_counterfeit_01", VectorList_03[iCan], 0.00f, false, 130, 27, 0, null, 0, true, 18, 0, MyLang.Maptext[112]);
                        else if (iMissionVar_02 == 3)
                            NPCSpawn("mp_m_forgery_01", VectorList_03[iCan], 0.00f, false, 130, 27, 0, null, 0, true, 18, 0, MyLang.Maptext[112]);
                        else if (iMissionVar_02 == 4)
                            NPCSpawn("mp_m_meth_01", VectorList_03[iCan], 0.00f, false, 130, 27, 0, null, 0, true, 18, 0, MyLang.Maptext[112]);
                        else
                            NPCSpawn("mp_m_weed_01", VectorList_03[iCan], 0.00f, false, 130, 27, 0, null, 0, true, 18, 0, MyLang.Maptext[112]);
                    }
                }
                if (iMissionVar_02 == 1)
                    Npc_01 = NPCSpawn("mp_m_cocaine_01", VectorList_03[0], 0.00f, true, 220, 25, 0, null, 3, true, 1, 0, MyLang.Maptext[112]);
                else if (iMissionVar_02 == 2)
                    Npc_01 = NPCSpawn("mp_m_counterfeit_01", VectorList_03[0], 0.00f, true, 220, 25, 0, null, 3, true, 1, 0, MyLang.Maptext[112]);
                else if (iMissionVar_02 == 3)
                    Npc_01 = NPCSpawn("mp_m_forgery_01", VectorList_03[0], 0.00f, true, 220, 25, 0, null, 3, true, 1, 0, MyLang.Maptext[112]);
                else if (iMissionVar_02 == 4)
                    Npc_01 = NPCSpawn("mp_m_meth_01", VectorList_03[0], 0.00f, true, 220, 25, 0, null, 3, true, 1, 0, MyLang.Maptext[112]);
                else
                    Npc_01 = NPCSpawn("mp_m_cocaine_01", VectorList_03[0], 0.00f, true, 220, 25, 0, null, 3, true, 1, 0, MyLang.Maptext[112]);
            }
        }
        private void BikerRaids_KeepWalkin()
        {
            for (int i = 0; i < MishPed.Count; i++)
            {
                Ped Pedx = MishPed[i];
                if (Pedx.IsDead)
                    iMissionSeq = 44;
                else if (!Pedx.IsInVehicle(VehTrackin_01))
                {
                    if (Pedx.Position.DistanceTo(VectorList_03[VectorList_03.Count - 1]) < 1.50f)
                    {
                        if (Pedx.CurrentBlip.Exists())
                            Pedx.CurrentBlip.Remove();
                        WarptoAnyVeh(VehTrackin_01, Pedx, iMissionVar_03);
                        MishPed.Remove(Pedx);
                        iMissionVar_03 = iMissionVar_03 + 1;
                    }
                    else if (Game.Player.IsTargetting(Pedx))
                    {
                        Pedx.Task.ClearAll();
                        WalkThisWay(Pedx, VectorList_03[VectorList_03.Count - 1], 1.00f);
                    }
                    else
                    {
                        Pedx.Task.ClearAll();
                        Pedx.Task.Cower(-1);
                    }
                }
            }
            iWait4Sec = Game.GameTime + 2000;
        }
        private void BikerRaids_LostMCAtt()
        {
            iTracking = Game.GameTime + 1000;

            MultiPedTracker();

            for (int i = 0; i < MultiPed.Count; i++)
            {
                if (MultiPed[i].MyPed.Position.DistanceTo(Game.Player.Character.Position) > 450.00f || Game.Player.Character.Position.DistanceTo(vTarget_01) < 250.00f)
                {
                    MultiPed[i].MyPed.Task.FleeFrom(Game.Player.Character);
                    if (MultiPed[i].MyBlip.Exists())
                        MultiPed[i].MyBlip.Remove();
                    MultiPed[i].MyPed.MarkAsNoLongerNeeded();
                    MultiPed.RemoveAt(i);
                }
            }

            if (iTime_01[0] < Game.GameTime)
            {
                if (iMissionVar_01 == 2)
                {
                    if (MultiPed.Count + MakeCarz.Count < 6)
                        SearchVeh(35.00f, 150.00f, RanVehListX(4, 5, false), false, false, false, false, 8, 4, 1, MyLang.Maptext[20], 0, false, true);
                }
                else
                {
                    if (MultiPed.Count + MakeCarz.Count < 6 && Game.Player.Character.Position.DistanceTo(vTarget_01) > 250.00f)
                        SearchVeh(35.00f, 150.00f, RanVehListX(4, 5, false), false, false, false, false, 8, 2, 1, MyLang.Maptext[20], 0, false, true);
                    else
                        iTime_01[0] = Game.GameTime + RandInt(30000, 45000);
                }
            }
        }
        private void BikerRaids_BizzPedsSec(Ped Peddy, int iVariant)
        {
            LogThis("BikerRaids_BizzPedsSec, iVariant == " + iVariant);

            List<int> iComp = new List<int>();
            List<int> itext = new List<int>();
            if (iVariant == 1)
            {
                iComp.Add(1); itext.Add(2);//head
                iComp.Add(0); itext.Add(0);//beard
                iComp.Add(1); itext.Add(0);//hair
                iComp.Add(1); itext.Add(0);//Torso
                iComp.Add(1); itext.Add(0);//Legs
                iComp.Add(0); itext.Add(0);//Hands
                iComp.Add(1); itext.Add(0);//shoes
                iComp.Add(0); itext.Add(0);//Scarf
                iComp.Add(1); itext.Add(0);//AccTop
                iComp.Add(0); itext.Add(0);//Armor
                iComp.Add(0); itext.Add(0);//Emb--not used
                iComp.Add(0); itext.Add(0);//Top2
            }                //cocaine_
            else if (iVariant == 2)
            {
                iComp.Add(3); itext.Add(0);//head
                iComp.Add(0); itext.Add(0);//beard
                iComp.Add(2); itext.Add(0);//hair
                iComp.Add(2); itext.Add(0);//Torso
                iComp.Add(3); itext.Add(0);//Legs
                iComp.Add(0); itext.Add(0);//Hands
                iComp.Add(0); itext.Add(0);//shoes
                iComp.Add(0); itext.Add(0);//Scarf
                iComp.Add(0); itext.Add(0);//AccTop
                iComp.Add(0); itext.Add(0);//Armor
                iComp.Add(0); itext.Add(0);//Emb--not used
                iComp.Add(0); itext.Add(0);//Top2
            }           //counterfeit_
            else if (iVariant == 3)
            {
                iComp.Add(3); itext.Add(0);//head
                iComp.Add(0); itext.Add(0);//beard
                iComp.Add(0); itext.Add(0);//hair
                iComp.Add(3); itext.Add(0);//Torso
                iComp.Add(3); itext.Add(0);//Legs
                iComp.Add(0); itext.Add(0);//Hands
                iComp.Add(0); itext.Add(0);//shoes
                iComp.Add(0); itext.Add(0);//Scarf
                iComp.Add(1); itext.Add(0);//AccTop
                iComp.Add(0); itext.Add(0);//Armor
                iComp.Add(0); itext.Add(0);//Emb--not used
                iComp.Add(0); itext.Add(0);//Top2
            }           //forgery_
            else if (iVariant == 4)
            {
                iComp.Add(2); itext.Add(0);//head
                iComp.Add(0); itext.Add(0);//beard
                iComp.Add(2); itext.Add(0);//hair
                iComp.Add(2); itext.Add(0);//Torso
                iComp.Add(1); itext.Add(0);//Legs
                iComp.Add(0); itext.Add(0);//Hands
                iComp.Add(0); itext.Add(0);//shoes
                iComp.Add(0); itext.Add(0);//Scarf
                iComp.Add(2); itext.Add(0);//AccTop
                iComp.Add(0); itext.Add(0);//Armor
                iComp.Add(0); itext.Add(0);//Emb--not used
                iComp.Add(0); itext.Add(0);//Top2
            }           //meth_
            else
            {
                iComp.Add(1); itext.Add(2);//head
                iComp.Add(0); itext.Add(0);//beard
                iComp.Add(1); itext.Add(0);//hair
                iComp.Add(1); itext.Add(0);//Torso
                iComp.Add(1); itext.Add(0);//Legs
                iComp.Add(0); itext.Add(0);//Hands
                iComp.Add(1); itext.Add(0);//shoes
                iComp.Add(0); itext.Add(0);//Scarf
                iComp.Add(1); itext.Add(0);//AccTop
                iComp.Add(0); itext.Add(0);//Armor
                iComp.Add(0); itext.Add(0);//Emb--not used
                iComp.Add(0); itext.Add(0);//Top2
            }                                    //weed_

            for (int i = 0; i < iComp.Count; i++)
            {
                int iDrawId = iComp[i];
                int iDrawTx = itext[i];
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, i, iDrawId, iDrawTx, 2);
            }
        }
        private void BikerRaids_BizzPedsWork(Ped Peddy, int iVariant, bool bMale)
        {

            LogThis("BikerRaids_BizzPedsWork, iVariant == " + iVariant + ", bMale == " + bMale);

            List<int> iComp = new List<int>();
            List<int> itext = new List<int>();

            if (bMale)
            {
                if (iVariant == 1)
                {
                    int iRace = RandInt(0, 1);
                    iComp.Add(iRace); itext.Add(0);//head
                    iComp.Add(0); itext.Add(0);//beard
                    iComp.Add(0); itext.Add(0);//hair
                    iComp.Add(0); itext.Add(iRace);//Torso
                    iComp.Add(0); itext.Add(iRace);//Legs
                    iComp.Add(0); itext.Add(0);//Hands
                    iComp.Add(0); itext.Add(iRace);//shoes
                    iComp.Add(0); itext.Add(0);//Scarf
                    iComp.Add(0); itext.Add(0);//AccTop
                    iComp.Add(0); itext.Add(0);//Armor
                    iComp.Add(0); itext.Add(0);//Emb--not used
                    iComp.Add(0); itext.Add(0);//Top2
                }                //cocaine_
                else if (iVariant == 2)
                {
                    iComp.Add(RandInt(0, 1)); itext.Add(0);//head
                    iComp.Add(0); itext.Add(0);//beard
                    iComp.Add(0); itext.Add(0);//hair
                    iComp.Add(0); itext.Add(0);//Torso
                    iComp.Add(0); itext.Add(0);//Legs
                    iComp.Add(0); itext.Add(0);//Hands
                    iComp.Add(0); itext.Add(0);//shoes
                    iComp.Add(0); itext.Add(0);//Scarf
                    iComp.Add(0); itext.Add(0);//AccTop
                    iComp.Add(0); itext.Add(0);//Armor
                    iComp.Add(0); itext.Add(0);//Emb--not used
                    iComp.Add(1); itext.Add(0);//Top2
                }           //counterfeit_
                else if (iVariant == 3)
                {
                    iComp.Add(RandInt(0, 2)); itext.Add(0);//head
                    iComp.Add(0); itext.Add(0);//beard
                    iComp.Add(0); itext.Add(0);//hair
                    iComp.Add(0); itext.Add(0);//Torso
                    iComp.Add(RandInt(0, 1)); itext.Add(0);//Legs
                    iComp.Add(1); itext.Add(0);//Hands
                    iComp.Add(0); itext.Add(0);//shoes
                    iComp.Add(0); itext.Add(0);//Scarf
                    iComp.Add(0); itext.Add(0);//AccTop
                    iComp.Add(0); itext.Add(0);//Armor
                    iComp.Add(0); itext.Add(0);//Emb--not used
                    iComp.Add(0); itext.Add(0);//Top2
                }           //forgery_
                else if (iVariant == 4)
                {
                    iComp.Add(RandInt(0, 1)); itext.Add(0);//head
                    iComp.Add(0); itext.Add(0);//beard
                    iComp.Add(0); itext.Add(0);//hair
                    iComp.Add(RandInt(0, 1)); itext.Add(0);//Torso
                    iComp.Add(0); itext.Add(0);//Legs
                    iComp.Add(0); itext.Add(0);//Hands
                    iComp.Add(0); itext.Add(0);//shoes
                    iComp.Add(0); itext.Add(0);//Scarf
                    iComp.Add(0); itext.Add(0);//AccTop
                    iComp.Add(0); itext.Add(0);//Armor
                    iComp.Add(0); itext.Add(0);//Emb--not used
                    iComp.Add(0); itext.Add(0);//Top2
                }           //meth_
                else
                {
                    iComp.Add(RandInt(0, 1)); itext.Add(0);//head
                    iComp.Add(0); itext.Add(0);//beard
                    iComp.Add(0); itext.Add(0);//hair
                    iComp.Add(RandInt(0, 1)); itext.Add(0);//Torso
                    iComp.Add(RandInt(0, 3)); itext.Add(0);//Legs
                    iComp.Add(0); itext.Add(0);//Hands
                    iComp.Add(0); itext.Add(0);//shoes
                    iComp.Add(0); itext.Add(0);//Scarf
                    iComp.Add(0); itext.Add(0);//AccTop
                    iComp.Add(0); itext.Add(0);//Armor
                    iComp.Add(0); itext.Add(0);//Emb--not used
                    iComp.Add(0); itext.Add(0);//Top2
                }                                    //weed_
            }
            else
            {
                if (iVariant == 1)
                {
                    int iRace = RandInt(0, 1);
                    iComp.Add(iRace); itext.Add(0);//head
                    if (iRace == 0)
                        iRace = 1;
                    else
                        iRace = 3;
                    iComp.Add(0); itext.Add(0);//beard
                    iComp.Add(0); itext.Add(2);//hair
                    iComp.Add(0); itext.Add(iRace);//Torso
                    iComp.Add(0); itext.Add(iRace);//Leggs
                    iComp.Add(0); itext.Add(0);//Hands
                    if (iRace == 1)
                        iRace = 2;
                    else
                        iRace = 1;
                    iComp.Add(0); itext.Add(iRace);//shoes
                    iComp.Add(0); itext.Add(0);//Scarf
                    iComp.Add(0); itext.Add(0);//AccTop
                    iComp.Add(0); itext.Add(0);//Armor
                    iComp.Add(0); itext.Add(0);//Emb--not used
                    iComp.Add(0); itext.Add(0);//Top2
                }                //cocaine_
                else if (iVariant == 2)
                {
                    int iRace = RandInt(0, 2);

                    iComp.Add(iRace); itext.Add(0);//head
                    iComp.Add(0); itext.Add(0);//beard
                    iComp.Add(RandInt(0, 2)); itext.Add(0);//hair
                    if (iRace == 0)
                        iComp.Add(1);
                    else
                        iComp.Add(0);
                    itext.Add(0);//Torso
                    iComp.Add(RandInt(0, 1)); itext.Add(0);//Legs
                    iComp.Add(0); itext.Add(0);//Hands
                    iComp.Add(0); itext.Add(0);//shoes
                    iComp.Add(0); itext.Add(0);//Scarf
                    iComp.Add(0); itext.Add(0);//AccTop
                    iComp.Add(0); itext.Add(0);//Armor
                    iComp.Add(0); itext.Add(0);//Emb--not used
                    iComp.Add(0); itext.Add(0);//Top2
                }           //counterfeit_
                else if (iVariant == 3)
                {
                    int iRace = RandInt(0, 3);
                    iComp.Add(iRace); itext.Add(0);//head
                    iComp.Add(0); itext.Add(0);//beard
                    if (iRace == 0)
                        iComp.Add(RandInt(0, 1));
                    else if (iRace == 1)
                        iComp.Add(2);
                    else if (iRace == 2)
                        iComp.Add(4);
                    else
                        iComp.Add(5);
                    itext.Add(0);//hair
                    if (iRace == 0)
                        iComp.Add(RandInt(0, 1));
                    else if (iRace == 1)
                        iComp.Add(2);
                    else if (iRace == 2)
                        iComp.Add(3);
                    else
                        iComp.Add(4);
                    itext.Add(0);//Torso
                    if (iRace == 0)
                        iComp.Add(0);
                    else if (iRace == 1)
                        iComp.Add(3);
                    else if (iRace == 2)
                        iComp.Add(4);
                    else
                        iComp.Add(5);
                    itext.Add(0);//Legs
                    iComp.Add(0); itext.Add(0);//Hands
                    iComp.Add(0); itext.Add(0);//shoes
                    iComp.Add(0); itext.Add(0);//Scarf
                    iComp.Add(2); itext.Add(0);//AccTop
                    iComp.Add(0); itext.Add(0);//Armor
                    iComp.Add(0); itext.Add(0);//Emb--not used
                    iComp.Add(0); itext.Add(0);//Top2
                }           //forgery_
                else if (iVariant == 4)
                {
                    iComp.Add(0); itext.Add(0);//head
                    iComp.Add(0); itext.Add(0);//beard
                    iComp.Add(0); itext.Add(0);//hair
                    iComp.Add(0); itext.Add(0);//Torso
                    iComp.Add(0); itext.Add(0);//Legs
                    iComp.Add(0); itext.Add(0);//Hands
                    iComp.Add(0); itext.Add(0);//shoes
                    iComp.Add(0); itext.Add(0);//Scarf
                    iComp.Add(0); itext.Add(0);//AccTop
                    iComp.Add(0); itext.Add(0);//Armor
                    iComp.Add(0); itext.Add(0);//Emb--not used
                    iComp.Add(0); itext.Add(0);//Top2
                }           //meth_
                else
                {
                    iComp.Add(RandInt(0, 1)); itext.Add(0);//head
                    iComp.Add(0); itext.Add(0);//beard
                    iComp.Add(RandInt(0, 1)); itext.Add(0);//hair
                    iComp.Add(RandInt(0, 1)); itext.Add(0);//Torso
                    iComp.Add(0); itext.Add(0);//Legs
                    iComp.Add(0); itext.Add(0);//Hands
                    iComp.Add(0); itext.Add(0);//shoes
                    iComp.Add(0); itext.Add(0);//Scarf
                    iComp.Add(0); itext.Add(0);//AccTop
                    iComp.Add(0); itext.Add(0);//Armor
                    iComp.Add(0); itext.Add(0);//Emb--not used
                    iComp.Add(0); itext.Add(0);//Top2
                }                                    //weed_
            }

            for (int i = 0; i < iComp.Count; i++)
            {
                int iDrawId = iComp[i];
                int iDrawTx = itext[i];
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, i, iDrawId, iDrawTx, 2);
            }
            MishPed.Add(Peddy);
        }
        private void CargoCollect_LoadClutter()
        {

            LogThis("CargoCollect_LoadClutter");

            sList_01.Clear();

            List<string> sOldPropL = new List<string>();
            List<string> sPropL = new List<string>();

            List<string> sIplProps = new List<string>();

            List<Vector3> vPosL = new List<Vector3>();
            List<Vector3> vRotL = new List<Vector3>();

            if (iMissionVar_01 == 6)
            {
                sPropL.Add("ex_prop_crate_ammo_bc");
                sPropL.Add("ex_prop_crate_ammo_sc");
                sPropL.Add("ex_prop_crate_art_02_bc");
                sPropL.Add("ex_prop_crate_art_02_sc");
                sPropL.Add("ex_prop_crate_art_bc");
                sPropL.Add("ex_prop_crate_art_sc");
                sPropL.Add("ex_prop_crate_biohazard_bc");
                sPropL.Add("ex_prop_crate_biohazard_sc");
                sPropL.Add("ex_prop_crate_bull_bc_02");
                sPropL.Add("ex_prop_crate_bull_sc_02");
                sPropL.Add("ex_prop_crate_closed_bc");
                sPropL.Add("ex_prop_crate_clothing_bc");
                sPropL.Add("ex_prop_crate_clothing_sc");
                sPropL.Add("ex_prop_crate_elec_bc");
                sPropL.Add("ex_prop_crate_elec_sc");
                sPropL.Add("ex_prop_crate_expl_bc");
                sPropL.Add("ex_prop_crate_expl_sc");
                sPropL.Add("ex_prop_crate_furjacket_bc");
                sPropL.Add("ex_prop_crate_furjacket_sc");
                sPropL.Add("ex_prop_crate_gems_bc");
                sPropL.Add("ex_prop_crate_gems_sc");
                sPropL.Add("ex_prop_crate_highend_pharma_bc");
                sPropL.Add("ex_prop_crate_highend_pharma_sc");
                sPropL.Add("ex_prop_crate_jewels_bc");
                sPropL.Add("ex_prop_crate_jewels_racks_bc");
                sPropL.Add("ex_prop_crate_jewels_racks_sc");
                sPropL.Add("ex_prop_crate_jewels_sc");
                sPropL.Add("ex_prop_crate_med_bc");
                sPropL.Add("ex_prop_crate_med_sc");
                sPropL.Add("ex_prop_crate_money_bc");
                sPropL.Add("ex_prop_crate_money_sc");
                sPropL.Add("ex_prop_crate_narc_bc");
                sPropL.Add("ex_prop_crate_narc_sc");
                sPropL.Add("ex_prop_crate_pharma_bc");
                sPropL.Add("ex_prop_crate_pharma_sc");
                sPropL.Add("ex_prop_crate_tob_bc");
                sPropL.Add("ex_prop_crate_tob_sc");
                sPropL.Add("ex_prop_crate_wlife_bc");
                sPropL.Add("ex_prop_crate_wlife_sc");
                vPosL.Add(new Vector3(993.540283f, -3106.50317f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 90.3173218f));

                vPosL.Add(new Vector3(993.613464f, -3108.85791f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 90.3172836f));

                vPosL.Add(new Vector3(993.627563f, -3111.30713f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 90.0285568f));

                vPosL.Add(new Vector3(1026.45764f, -3111.39185f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -90.5088501f));

                vPosL.Add(new Vector3(1026.49158f, -3108.96094f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -91.5257492f));

                vPosL.Add(new Vector3(1026.58093f, -3106.57007f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -92.247345f));

                vPosL.Add(new Vector3(1026.59241f, -3096.39868f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -89.2680435f));

                vPosL.Add(new Vector3(1026.57178f, -3094.00928f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -90.1735153f));

                vPosL.Add(new Vector3(1026.52124f, -3091.52783f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -89.9307022f));

                vPosL.Add(new Vector3(1018.1983f, -3091.97266f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.476310164f));

                vPosL.Add(new Vector3(1015.69733f, -3091.93994f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.435770541f));

                vPosL.Add(new Vector3(1013.37708f, -3091.9231f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.435770541f));

                vPosL.Add(new Vector3(1010.94269f, -3091.99048f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.435770541f));

                vPosL.Add(new Vector3(1008.54211f, -3091.96582f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.292574644f));

                vPosL.Add(new Vector3(1006.10889f, -3091.94946f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.192989498f));

                vPosL.Add(new Vector3(1003.64362f, -3092.01563f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.161341712f));

                vPosL.Add(new Vector3(1003.62604f, -3096.77515f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.314484f));

                vPosL.Add(new Vector3(1005.94946f, -3096.72095f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.550766f));

                vPosL.Add(new Vector3(1008.41229f, -3096.65039f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.137253f));

                vPosL.Add(new Vector3(1010.92987f, -3096.72266f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.72348f));

                vPosL.Add(new Vector3(1013.27228f, -3096.73364f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.72348f));

                vPosL.Add(new Vector3(1015.65753f, -3096.71753f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.097229f));

                vPosL.Add(new Vector3(1018.1651f, -3096.76782f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.611603f));

                vPosL.Add(new Vector3(1018.17334f, -3103.12134f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.277661294f));

                vPosL.Add(new Vector3(1015.73279f, -3103.15796f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.22517097f));

                vPosL.Add(new Vector3(1013.30994f, -3103.18921f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.0808141753f));

                vPosL.Add(new Vector3(1010.93365f, -3103.14746f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.04123235f));

                vPosL.Add(new Vector3(1008.41376f, -3103.2002f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.575374007f));

                vPosL.Add(new Vector3(1006.08307f, -3103.1687f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.0832482651f));

                vPosL.Add(new Vector3(1003.74823f, -3103.12988f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.51762819f));

                vPosL.Add(new Vector3(1003.52454f, -3108.12573f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.400208f));

                vPosL.Add(new Vector3(1006.0119f, -3108.06372f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.049744f));

                vPosL.Add(new Vector3(1008.41968f, -3108.17651f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.741226f));

                vPosL.Add(new Vector3(1010.80005f, -3108.24634f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.161118f));

                vPosL.Add(new Vector3(1013.21289f, -3108.11743f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.082748f));

                vPosL.Add(new Vector3(1015.71112f, -3108.11377f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.426285f));

                vPosL.Add(new Vector3(1018.01129f, -3108.07251f, -39.868454f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.548035f));

                vPosL.Add(new Vector3(1018.01129f, -3108.07251f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.548035f));

                vPosL.Add(new Vector3(993.540283f, -3106.50317f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 90.3173218f));

                vPosL.Add(new Vector3(993.613464f, -3108.85791f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 90.3172836f));

                vPosL.Add(new Vector3(993.627563f, -3111.30713f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 90.0285568f));

                vPosL.Add(new Vector3(1026.45764f, -3111.39185f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -90.5088501f));

                vPosL.Add(new Vector3(1026.49158f, -3108.96094f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -91.5257492f));

                vPosL.Add(new Vector3(1026.58093f, -3106.57007f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -92.247345f));

                vPosL.Add(new Vector3(1026.59241f, -3096.39868f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -89.2680435f));

                vPosL.Add(new Vector3(1026.57178f, -3094.00928f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -90.1735153f));

                vPosL.Add(new Vector3(1026.52124f, -3091.52783f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -89.9307022f));

                vPosL.Add(new Vector3(1018.1983f, -3091.97266f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.476310164f));

                vPosL.Add(new Vector3(1015.69733f, -3091.93994f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.435770541f));

                vPosL.Add(new Vector3(1013.37708f, -3091.9231f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.435770541f));

                vPosL.Add(new Vector3(1010.94269f, -3091.99048f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.435770541f));

                vPosL.Add(new Vector3(1008.54211f, -3091.96582f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.292574644f));

                vPosL.Add(new Vector3(1006.10889f, -3091.94946f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.192989498f));

                vPosL.Add(new Vector3(1003.64362f, -3092.01563f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.161341712f));

                vPosL.Add(new Vector3(1003.62604f, -3096.77515f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.314484f));

                vPosL.Add(new Vector3(1005.94946f, -3096.72095f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.550766f));

                vPosL.Add(new Vector3(1008.41229f, -3096.65039f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.137253f));

                vPosL.Add(new Vector3(1010.92987f, -3096.72266f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.72348f));

                vPosL.Add(new Vector3(1013.27228f, -3096.73364f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.72348f));

                vPosL.Add(new Vector3(1015.65753f, -3096.71753f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.097229f));

                vPosL.Add(new Vector3(1018.1651f, -3096.76782f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.611603f));

                vPosL.Add(new Vector3(1018.17334f, -3103.12134f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.277661294f));

                vPosL.Add(new Vector3(1015.73279f, -3103.15796f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.22517097f));

                vPosL.Add(new Vector3(1013.30994f, -3103.18921f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.0808141753f));

                vPosL.Add(new Vector3(1010.93365f, -3103.14746f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.04123235f));

                vPosL.Add(new Vector3(1008.41376f, -3103.2002f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.575374007f));

                vPosL.Add(new Vector3(1006.08307f, -3103.1687f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.0832482651f));

                vPosL.Add(new Vector3(1003.74823f, -3103.12988f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.51762819f));

                vPosL.Add(new Vector3(1003.52454f, -3108.12573f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.400208f));

                vPosL.Add(new Vector3(1006.0119f, -3108.06372f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.049744f));

                vPosL.Add(new Vector3(1008.41968f, -3108.17651f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.741226f));

                vPosL.Add(new Vector3(1010.80005f, -3108.24634f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.161118f));

                vPosL.Add(new Vector3(1013.21289f, -3108.11743f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.082748f));

                vPosL.Add(new Vector3(1015.71112f, -3108.11377f, -37.7088165f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.426285f));

                vPosL.Add(new Vector3(1018.01129f, -3108.07251f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.548035f));

                vPosL.Add(new Vector3(993.540283f, -3106.50317f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 90.3173218f));

                vPosL.Add(new Vector3(993.613464f, -3108.85791f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 90.3172836f));

                vPosL.Add(new Vector3(993.627563f, -3111.30713f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 90.0285568f));

                vPosL.Add(new Vector3(1026.45764f, -3111.39185f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -90.5088501f));

                vPosL.Add(new Vector3(1026.49158f, -3108.96094f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -91.5257492f));

                vPosL.Add(new Vector3(1026.58093f, -3106.57007f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -92.247345f));

                vPosL.Add(new Vector3(1026.59241f, -3096.39868f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -89.2680435f));

                vPosL.Add(new Vector3(1026.57178f, -3094.00928f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -90.1735153f));

                vPosL.Add(new Vector3(1026.52124f, -3091.52783f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -89.9307022f));

                vPosL.Add(new Vector3(1018.1983f, -3091.97266f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.476310164f));

                vPosL.Add(new Vector3(1015.69733f, -3091.93994f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.435770541f));

                vPosL.Add(new Vector3(1013.37708f, -3091.9231f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.435770541f));

                vPosL.Add(new Vector3(1010.94269f, -3091.99048f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.435770541f));

                vPosL.Add(new Vector3(1008.54211f, -3091.96582f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.292574644f));

                vPosL.Add(new Vector3(1006.10889f, -3091.94946f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.192989498f));

                vPosL.Add(new Vector3(1003.64362f, -3092.01563f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.161341712f));

                vPosL.Add(new Vector3(1003.62604f, -3096.77515f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.314484f));

                vPosL.Add(new Vector3(1005.94946f, -3096.72095f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.550766f));

                vPosL.Add(new Vector3(1008.41229f, -3096.65039f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.137253f));

                vPosL.Add(new Vector3(1010.92987f, -3096.72266f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.72348f));

                vPosL.Add(new Vector3(1013.27228f, -3096.73364f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.72348f));

                vPosL.Add(new Vector3(1015.65753f, -3096.71753f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.097229f));

                vPosL.Add(new Vector3(1018.1651f, -3096.76782f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.611603f));

                vPosL.Add(new Vector3(1018.17334f, -3103.12134f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.277661294f));

                vPosL.Add(new Vector3(1015.73279f, -3103.15796f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.22517097f));

                vPosL.Add(new Vector3(1013.30994f, -3103.18921f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.0808141753f));

                vPosL.Add(new Vector3(1010.93365f, -3103.14746f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.04123235f));

                vPosL.Add(new Vector3(1008.41376f, -3103.2002f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.575374007f));

                vPosL.Add(new Vector3(1006.08307f, -3103.1687f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.0832482651f));

                vPosL.Add(new Vector3(1003.74823f, -3103.12988f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.51762819f));

                vPosL.Add(new Vector3(1003.52454f, -3108.12573f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.400208f));

                vPosL.Add(new Vector3(1006.0119f, -3108.06372f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.049744f));

                vPosL.Add(new Vector3(1008.41968f, -3108.17651f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.741226f));

                vPosL.Add(new Vector3(1010.80005f, -3108.24634f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.161118f));

                vPosL.Add(new Vector3(1013.21289f, -3108.11743f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.082748f));

                vPosL.Add(new Vector3(1015.71112f, -3108.11377f, -35.6691589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.426285f));
            }
            else if (iMissionVar_01 == 7)
            {
                sPropL.Add("ex_prop_crate_ammo_bc");
                sPropL.Add("ex_prop_crate_ammo_sc");
                sPropL.Add("ex_prop_crate_art_02_bc");
                sPropL.Add("ex_prop_crate_art_02_sc");
                sPropL.Add("ex_prop_crate_art_bc");
                sPropL.Add("ex_prop_crate_art_sc");
                sPropL.Add("ex_prop_crate_biohazard_bc");
                sPropL.Add("ex_prop_crate_biohazard_sc");
                sPropL.Add("ex_prop_crate_bull_bc_02");
                sPropL.Add("ex_prop_crate_bull_sc_02");
                sPropL.Add("ex_prop_crate_closed_bc");
                sPropL.Add("ex_prop_crate_clothing_bc");
                sPropL.Add("ex_prop_crate_clothing_sc");
                sPropL.Add("ex_prop_crate_elec_bc");
                sPropL.Add("ex_prop_crate_elec_sc");
                sPropL.Add("ex_prop_crate_expl_bc");
                sPropL.Add("ex_prop_crate_expl_sc");
                sPropL.Add("ex_prop_crate_furjacket_bc");
                sPropL.Add("ex_prop_crate_furjacket_sc");
                sPropL.Add("ex_prop_crate_gems_bc");
                sPropL.Add("ex_prop_crate_gems_sc");
                sPropL.Add("ex_prop_crate_highend_pharma_bc");
                sPropL.Add("ex_prop_crate_highend_pharma_sc");
                sPropL.Add("ex_prop_crate_jewels_bc");
                sPropL.Add("ex_prop_crate_jewels_racks_bc");
                sPropL.Add("ex_prop_crate_jewels_racks_sc");
                sPropL.Add("ex_prop_crate_jewels_sc");
                sPropL.Add("ex_prop_crate_med_bc");
                sPropL.Add("ex_prop_crate_med_sc");
                sPropL.Add("ex_prop_crate_money_bc");
                sPropL.Add("ex_prop_crate_money_sc");
                sPropL.Add("ex_prop_crate_narc_bc");
                sPropL.Add("ex_prop_crate_narc_sc");
                sPropL.Add("ex_prop_crate_pharma_bc");
                sPropL.Add("ex_prop_crate_pharma_sc");
                sPropL.Add("ex_prop_crate_tob_bc");
                sPropL.Add("ex_prop_crate_tob_sc");
                sPropL.Add("ex_prop_crate_wlife_bc");
                sPropL.Add("ex_prop_crate_wlife_sc");

                vPosL.Add(new Vector3(1053.06958f, -3109.60938f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.971985f));

                vPosL.Add(new Vector3(1055.46899f, -3109.60938f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.971985f));

                vPosL.Add(new Vector3(1057.86841f, -3109.60938f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.971985f));

                vPosL.Add(new Vector3(1060.34558f, -3109.56226f, -39.8684998f));
                vRotL.Add(new Vector3(7.951f, 1.38546f, 179.230362f));

                vPosL.Add(new Vector3(1062.70618f, -3109.60889f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.56752f));

                vPosL.Add(new Vector3(1065.09741f, -3109.57202f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.158249f));

                vPosL.Add(new Vector3(1067.56262f, -3109.49097f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.2957f));

                vPosL.Add(new Vector3(1053.13843f, -3102.97461f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.120f));

                vPosL.Add(new Vector3(1055.59583f, -3102.91553f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.07f));

                vPosL.Add(new Vector3(1057.96082f, -3102.89697f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.9502151f));

                vPosL.Add(new Vector3(1060.41003f, -3103.0166f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.6247f));

                vPosL.Add(new Vector3(1062.84766f, -3103.02368f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.2546643f));

                vPosL.Add(new Vector3(1065.19763f, -3103.08398f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.939663887f));

                vPosL.Add(new Vector3(1067.58691f, -3103.0481f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.510466456f));

                vPosL.Add(new Vector3(1067.66296f, -3095.70117f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.324f));

                vPosL.Add(new Vector3(1065.21204f, -3095.84302f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.543f));

                vPosL.Add(new Vector3(1062.76624f, -3095.82129f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.543f));

                vPosL.Add(new Vector3(1060.35181f, -3095.79565f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.23f));

                vPosL.Add(new Vector3(1058.01526f, -3095.75488f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.764f));

                vPosL.Add(new Vector3(1055.63367f, -3095.78125f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.235f));

                vPosL.Add(new Vector3(1053.11145f, -3095.83276f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.23f));

                vPosL.Add(new Vector3(1053.05652f, -3095.56958f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.23f));

                vPosL.Add(new Vector3(1053.06958f, -3109.60938f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.971985f));

                vPosL.Add(new Vector3(1055.46899f, -3109.60938f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.971985f));

                vPosL.Add(new Vector3(1057.86841f, -3109.60938f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.971985f));

                vPosL.Add(new Vector3(1060.34558f, -3109.56226f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.230362f));

                vPosL.Add(new Vector3(1062.70618f, -3109.60889f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.56752f));

                vPosL.Add(new Vector3(1065.09741f, -3109.57202f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.158249f));

                vPosL.Add(new Vector3(1067.56262f, -3109.49097f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 179.2957f));

                vPosL.Add(new Vector3(1053.13843f, -3102.97461f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.120f));

                vPosL.Add(new Vector3(1055.59583f, -3102.91553f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.07f));

                vPosL.Add(new Vector3(1057.96082f, -3102.89697f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.9502151f));

                vPosL.Add(new Vector3(1060.41003f, -3103.0166f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.6247f));

                vPosL.Add(new Vector3(1062.84766f, -3103.02368f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.2546643f));

                vPosL.Add(new Vector3(1065.19763f, -3103.08398f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.939663887f));

                vPosL.Add(new Vector3(1067.58691f, -3103.0481f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.510466456f));

                vPosL.Add(new Vector3(1067.66296f, -3095.70117f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.324f));

                vPosL.Add(new Vector3(1065.21204f, -3095.84302f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.543f));

                vPosL.Add(new Vector3(1062.76624f, -3095.82129f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.543f));

                vPosL.Add(new Vector3(1060.35181f, -3095.79565f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.23f));

                vPosL.Add(new Vector3(1058.01526f, -3095.75488f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.764f));

                vPosL.Add(new Vector3(1055.63367f, -3095.78125f, -37.7009354f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.235f));
            }
            else if (iMissionVar_01 == 8)
            {
                sPropL.Add("ex_prop_crate_ammo_bc");
                sPropL.Add("ex_prop_crate_ammo_sc");
                sPropL.Add("ex_prop_crate_art_02_bc");
                sPropL.Add("ex_prop_crate_art_02_sc");
                sPropL.Add("ex_prop_crate_art_bc");
                sPropL.Add("ex_prop_crate_art_sc");
                sPropL.Add("ex_prop_crate_biohazard_bc");
                sPropL.Add("ex_prop_crate_biohazard_sc");
                sPropL.Add("ex_prop_crate_bull_bc_02");
                sPropL.Add("ex_prop_crate_bull_sc_02");
                sPropL.Add("ex_prop_crate_closed_bc");
                sPropL.Add("ex_prop_crate_clothing_bc");
                sPropL.Add("ex_prop_crate_clothing_sc");
                sPropL.Add("ex_prop_crate_elec_bc");
                sPropL.Add("ex_prop_crate_elec_sc");
                sPropL.Add("ex_prop_crate_expl_bc");
                sPropL.Add("ex_prop_crate_expl_sc");
                sPropL.Add("ex_prop_crate_furjacket_bc");
                sPropL.Add("ex_prop_crate_furjacket_sc");
                sPropL.Add("ex_prop_crate_gems_bc");
                sPropL.Add("ex_prop_crate_gems_sc");
                sPropL.Add("ex_prop_crate_highend_pharma_bc");
                sPropL.Add("ex_prop_crate_highend_pharma_sc");
                sPropL.Add("ex_prop_crate_jewels_bc");
                sPropL.Add("ex_prop_crate_jewels_racks_bc");
                sPropL.Add("ex_prop_crate_jewels_racks_sc");
                sPropL.Add("ex_prop_crate_jewels_sc");
                sPropL.Add("ex_prop_crate_med_bc");
                sPropL.Add("ex_prop_crate_med_sc");
                sPropL.Add("ex_prop_crate_money_bc");
                sPropL.Add("ex_prop_crate_money_sc");
                sPropL.Add("ex_prop_crate_narc_bc");
                sPropL.Add("ex_prop_crate_narc_sc");
                sPropL.Add("ex_prop_crate_pharma_bc");
                sPropL.Add("ex_prop_crate_pharma_sc");
                sPropL.Add("ex_prop_crate_tob_bc");
                sPropL.Add("ex_prop_crate_tob_sc");
                sPropL.Add("ex_prop_crate_wlife_bc");
                sPropL.Add("ex_prop_crate_wlife_sc");

                vPosL.Add(new Vector3(1088.74683f, -3096.75146f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -0.134708673f));

                vPosL.Add(new Vector3(1091.28345f, -3096.57813f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.429592818f));

                vPosL.Add(new Vector3(1095.08557f, -3096.76392f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.0687025115f));

                vPosL.Add(new Vector3(1097.58936f, -3096.76416f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.0687025115f));

                vPosL.Add(new Vector3(1101.25781f, -3096.7605f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.0687025115f));

                vPosL.Add(new Vector3(1103.82813f, -3096.75854f, -39.8684998f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.0687025115f));

                vPosL.Add(new Vector3(1103.76807f, -3096.77856f, -37.6984978f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.0687025115f));

                vPosL.Add(new Vector3(1101.26819f, -3096.77856f, -37.6984978f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.0687025115f));

                vPosL.Add(new Vector3(1097.56909f, -3096.77856f, -37.6984978f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.0687025115f));

                vPosL.Add(new Vector3(1094.96973f, -3096.77856f, -37.6984978f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.0687025115f));

                vPosL.Add(new Vector3(1091.27063f, -3096.77856f, -37.6984978f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.0687025115f));

                vPosL.Add(new Vector3(1088.77124f, -3096.77856f, -37.6984978f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.0687025115f));
            }
            else
            {
                sOldPropL.Add("upgrade_bunker_set");
                sOldPropL.Add("standard_bunker_set");
                sOldPropL.Add("bunker_style_a");
                sOldPropL.Add("bunker_style_b");
                sOldPropL.Add("bunker_style_c");
                sOldPropL.Add("office_upgrade_set");
                sOldPropL.Add("office_blocker_set");
                sOldPropL.Add("gun_locker_upgrade");
                sOldPropL.Add("gun_range_blocker_set");
                sOldPropL.Add("security_upgrade");
                sOldPropL.Add("standard_security_set");
                sOldPropL.Add("gun_wall_blocker");
                sOldPropL.Add("Upgrade_Bunker_Set_More");
                sOldPropL.Add("Gun_schematic_set");
                sOldPropL.Add("Standard_Bunker_Set_More");
                sOldPropL.Add("gun_range_lights");

                sPropL.Add("ba_prop_battle_crates_rifles_01a");
                vPosL.Add(new Vector3(923.458435f, -3232.69727f, -99.2854843f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -75.7848206f));

                sPropL.Add("ba_prop_battle_crates_rifles_02a");
                vPosL.Add(new Vector3(929.155457f, -3239.77051f, -99.2970276f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -178.224823f));

                sPropL.Add("ba_prop_battle_crates_rifles_03a");
                vPosL.Add(new Vector3(933.701721f, -3239.65088f, -99.296608f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -179.418991f));

                sPropL.Add("ba_prop_battle_crates_rifles_04a");
                vPosL.Add(new Vector3(937.145569f, -3239.61816f, -99.298645f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -179.418991f));

                sPropL.Add("ba_prop_battle_crates_sam_01a");
                vPosL.Add(new Vector3(945.674133f, -3239.41626f, -99.2993698f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -179.41893f));

                sPropL.Add("ba_prop_battle_crates_wpn_mix_01a");
                vPosL.Add(new Vector3(939.155457f, -3229.90967f, -99.2904587f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 4.85300207f));

                sPropL.Add("ex_prop_crate_ammo_bc");
                vPosL.Add(new Vector3(941.691467f, -3229.87817f, -99.1617279f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 92.9039536f));

                sPropL.Add("ex_prop_crate_ammo_sc");
                vPosL.Add(new Vector3(943.951721f, -3229.87671f, -99.1602554f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 92.9039307f));

                sPropL.Add("ex_prop_crate_closed_bc");
                vPosL.Add(new Vector3(945.808105f, -3229.85303f, -99.1671066f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 90.6525574f));

                sPropL.Add("ex_prop_crate_closed_ms");
                vPosL.Add(new Vector3(947.573181f, -3232.29004f, -99.1695251f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.809956074f));

                sPropL.Add("ex_prop_crate_closed_mw");
                vPosL.Add(new Vector3(950.064697f, -3235.10962f, -99.1710815f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.915191054f));

                sPropL.Add("ex_prop_crate_closed_sc");
                vPosL.Add(new Vector3(950.096985f, -3237.1189f, -99.1710205f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 0.902066052f));

                sPropL.Add("ex_prop_crate_closed_sc");
                vPosL.Add(new Vector3(947.812012f, -3235.34473f, -99.169487f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 3.0477345f));

                sPropL.Add("ex_prop_crate_closed_sc");
                vPosL.Add(new Vector3(947.911804f, -3237.26904f, -99.1703415f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 3.26426029f));

                sPropL.Add("xm_prop_crates_rifles_04a");
                vPosL.Add(new Vector3(943.516174f, -3237.59033f, -99.2979736f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -90.5018463f));

                sPropL.Add("xm_prop_rsply_crate04b");
                vPosL.Add(new Vector3(923.959961f, -3230.34619f, -99.2831802f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -177.508408f));

                sPropL.Add("xm_prop_rsply_crate04a");
                vPosL.Add(new Vector3(925.840698f, -3230.23999f, -99.2840424f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -176.445313f));

                sPropL.Add("xm_prop_crates_weapon_mix_01a");
                vPosL.Add(new Vector3(928.262634f, -3230.0459f, -99.2842865f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -178.892624f));

                sPropL.Add("xm_prop_crates_sam_01a");
                vPosL.Add(new Vector3(930.593567f, -3229.87354f, -99.286705f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -178.892624f));

                sPropL.Add("xm_prop_crates_rifles_04a");
                vPosL.Add(new Vector3(936.661133f, -3218.73535f, -99.2795868f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 94.1384048f));

                sPropL.Add("xm_prop_crates_rifles_03a");
                vPosL.Add(new Vector3(936.722473f, -3220.57959f, -99.2803268f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -86.8848953f));

                sPropL.Add("xm_prop_crates_rifles_02a");
                vPosL.Add(new Vector3(936.852478f, -3222.87402f, -99.2840652f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -86.8848953f));

                sPropL.Add("xm_prop_crates_rifles_01a");
                vPosL.Add(new Vector3(936.953247f, -3224.63818f, -99.2855988f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -86.8848953f));

                sPropL.Add("xm_prop_crates_pistols_01a");
                vPosL.Add(new Vector3(937.182495f, -3225.9292f, -99.2879486f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -85.8282471f));

                sPropL.Add("sm_prop_smug_rsply_crate01a");
                vPosL.Add(new Vector3(936.993591f, -3227.11353f, -99.2895279f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -87.3434677f));

                sPropL.Add("prop_lev_crate_01");
                vPosL.Add(new Vector3(921.080078f, -3220.96851f, -99.2501251f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.62611103f));

                sPropL.Add("prop_lev_crate_01");
                vPosL.Add(new Vector3(917.042358f, -3220.79346f, -99.2455246f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -2.62611103f));

                sPropL.Add("ba_prop_battle_crate_closed_bc");
                vPosL.Add(new Vector3(918.066956f, -3233.68555f, -99.1663589f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 90.7133865f));

                sPropL.Add("ba_prop_battle_crate_closed_bc");
                vPosL.Add(new Vector3(918.043945f, -3231.16064f, -99.1604691f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 90.7133865f));

                sPropL.Add("ba_prop_battle_crates_pistols_01a");
                vPosL.Add(new Vector3(921.838196f, -3224.7959f, -99.2755661f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -90.946228f));

                sPropL.Add("ba_prop_battle_crates_rifles_01a");
                vPosL.Add(new Vector3(921.862f, -3223.17773f, -99.2730484f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -90.946228f));

                sPropL.Add("ba_prop_battle_crates_rifles_02a");
                vPosL.Add(new Vector3(939.838318f, -3223.61987f, -99.2871323f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 4.70347738f));

                sPropL.Add("ba_prop_battle_crates_rifles_03a");
                vPosL.Add(new Vector3(942.150024f, -3223.42725f, -99.2867813f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 4.70347738f));

                sPropL.Add("ba_prop_battle_crates_rifles_04a");
                vPosL.Add(new Vector3(944.407288f, -3223.2522f, -99.2895889f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 4.12604809f));

                sPropL.Add("ex_prop_crate_closed_mw");
                vPosL.Add(new Vector3(950.311523f, -3225.73633f, -99.1656265f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 176.068619f));

                sPropL.Add("ex_prop_crate_closed_mw");
                vPosL.Add(new Vector3(950.544617f, -3223.15308f, -99.1642532f));
                vRotL.Add(new Vector3(-2.07133613e-13f, -4.42925028e-07f, -0.492275923f));

                sPropL.Add("ex_prop_crate_closed_mw");
                vPosL.Add(new Vector3(950.307861f, -3220.7998f, -99.1628189f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -178.038986f));

                sPropL.Add("ex_prop_crate_closed_mw");
                vPosL.Add(new Vector3(950.035156f, -3217.32056f, -99.160141f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 2.68975663f));

                sPropL.Add("ex_prop_crate_expl_bc");
                vPosL.Add(new Vector3(949.020935f, -3200.24316f, -99.1220703f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 5.27651787f));

                sPropL.Add("ex_prop_crate_expl_sc");
                vPosL.Add(new Vector3(949.278137f, -3203.00098f, -99.1454468f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 10.0468082f));

                sPropL.Add("gr_prop_gr_cratespile_01a");
                vPosL.Add(new Vector3(929.098389f, -3222.29175f, -99.2777481f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 178.417297f));

                sPropL.Add("gr_prop_gr_cratespile_01a");
                vPosL.Add(new Vector3(929.611938f, -3219.28589f, -99.2745285f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -1.03194451f));

                sPropL.Add("prop_drop_crate_01_set");
                vPosL.Add(new Vector3(929.013245f, -3210.37598f, -99.2264404f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 101.008926f));

                sPropL.Add("prop_drop_crate_01_set2");
                vPosL.Add(new Vector3(931.444763f, -3209.92188f, -99.2284088f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -80.2574539f));

                sPropL.Add("vw_prop_vw_crate_01a");
                vPosL.Add(new Vector3(933.557861f, -3209.54028f, -99.2673721f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -79.994873f));

                sPropL.Add("xm_prop_crates_rifles_02a");
                vPosL.Add(new Vector3(934.024841f, -3211.7522f, -99.2699127f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 8.31225395f));

                sPropL.Add("xm_prop_crates_rifles_02a");
                vPosL.Add(new Vector3(936.893616f, -3211.4563f, -99.2716751f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -173.019577f));

                sPropL.Add("xm_prop_moderncrate_xplv_01");
                vPosL.Add(new Vector3(945.536255f, -3212.79736f, -99.2793274f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -3.96463776f));

                sPropL.Add("xm_prop_moderncrate_xplv_01");
                vPosL.Add(new Vector3(947.168213f, -3211.93115f, -99.2796097f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -22.0485935f));

                sPropL.Add("xm_prop_moderncrate_xplv_01");
                vPosL.Add(new Vector3(946.567566f, -3207.75977f, -99.2750854f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -160.683304f));

                sPropL.Add("xm_prop_moderncrate_xplv_01");
                vPosL.Add(new Vector3(945.042114f, -3209.36426f, -99.2753983f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -173.392944f));

                sPropL.Add("ba_prop_battle_crates_pistols_01a");
                vPosL.Add(new Vector3(942.401062f, -3205.79224f, -99.2703323f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -165.774109f));

                sPropL.Add("ba_prop_battle_crates_rifles_01a");
                vPosL.Add(new Vector3(938.989929f, -3206.86011f, -99.2680817f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -160.951111f));

                sPropL.Add("ba_prop_battle_crates_rifles_02a");
                vPosL.Add(new Vector3(940.641968f, -3206.20337f, -99.2700729f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -164.002213f));

                sPropL.Add("ba_prop_battle_crates_rifles_04a");
                vPosL.Add(new Vector3(937.973145f, -3205.21729f, -99.266922f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 108.560875f));

                sPropL.Add("ba_prop_battle_crates_sam_01a");
                vPosL.Add(new Vector3(937.26886f, -3203.03003f, -99.2639694f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 107.373161f));

                sPropL.Add("ba_prop_battle_crates_wpn_mix_01a");
                vPosL.Add(new Vector3(943.891479f, -3192.37769f, -99.2632904f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -85.060463f));

                sPropL.Add("ba_prop_battle_crates_rifles_04a");
                vPosL.Add(new Vector3(934.506409f, -3193.46558f, -99.2636108f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 6.42923689f));

                sPropL.Add("ba_prop_battle_crates_rifles_03a");
                vPosL.Add(new Vector3(937.003723f, -3193.18628f, -99.2624283f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 6.32424831f));

                sPropL.Add("ba_prop_battle_crate_beer_03");
                vPosL.Add(new Vector3(927.762695f, -3206.66333f, -99.2577667f));
                vRotL.Add(new Vector3(0.00f, 0.00f, 100.031738f));

                sPropL.Add("ba_prop_battle_crate_beer_04");
                vPosL.Add(new Vector3(925.228271f, -3205.81738f, -99.254364f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -172.730911f));

                sPropL.Add("ba_prop_battle_crate_beer_02");
                vPosL.Add(new Vector3(927.243408f, -3204.80859f, -99.2604523f));
                vRotL.Add(new Vector3(0.00f, 0.00f, -173.045685f));


                sIplProps.Add("upgrade_bunker_set");
                sIplProps.Add("bunker_style_c");
                sIplProps.Add("office_upgrade_set");
                sIplProps.Add("gun_locker_upgrade");
                sIplProps.Add("security_upgrade");
                sIplProps.Add("standard_security_set");
                sIplProps.Add("Upgrade_Bunker_Set_More");
                sIplProps.Add("Gun_schematic_set");
                sIplProps.Add("gun_range_lights");
            }

            Vector3 Vloc = VectorList_02[VectorList_02.Count - 1];
            int iWare = Function.Call<int>(Hash.GET_INTERIOR_AT_COORDS, Vloc.X, Vloc.Y, Vloc.Z);

            if (!Function.Call<bool>(Hash.IS_INTERIOR_DISABLED, iWare))
            {
                for (int i = 0; i < sOldPropL.Count; i++)
                {
                    if (Function.Call<bool>(Hash._IS_INTERIOR_PROP_ENABLED, iWare, sOldPropL[i]))
                    {
                        Function.Call(Hash._DISABLE_INTERIOR_PROP, iWare, sOldPropL[i]);
                        sList_01.Add(sOldPropL[i]);
                    }
                }
            }
            else
            {
                Function.Call((Hash)0x2CA429C029CCF247, iWare);
                Function.Call(Hash.SET_INTERIOR_ACTIVE, iWare, true);
            }
            Function.Call(Hash.DISABLE_INTERIOR, iWare, false);

            for (int i = 0; i < sIplProps.Count; i++)
            {
                if (!Function.Call<bool>(Hash._IS_INTERIOR_PROP_ENABLED, iWare, sIplProps[i]))
                    Function.Call(Hash._ENABLE_INTERIOR_PROP, iWare, sIplProps[i]);
            }
            Function.Call(Hash.REFRESH_INTERIOR, iWare);

            if (iMissionVar_01 == 6)
            {
                int iRanEnd = RandInt(0, 8);

                int iAddshit = vPosL.Count;
                while (iAddshit > 0)
                {
                    iAddshit = iAddshit - 1;
                    if (iAddshit == iRanEnd)
                    {
                        string sRanOb = "";
                        int iRanObj = RandInt(0, 60);
                        if (iRanObj < 10)
                        {
                            sRanOb = "ex_prop_crate_minig";
                            iList_01[0] = 152;
                            iList_01[1] = 158;
                            iList_01[2] = 165;
                            sMissionVar_02 = "Golden Minigun";
                        }
                        else if (iRanObj < 20)
                        {
                            sRanOb = "ex_prop_crate_oegg";
                            iList_01[0] = 153;
                            iList_01[1] = 159;
                            iList_01[2] = 166;
                            sMissionVar_02 = "Golden Egg";
                        }
                        else if (iRanObj < 30)
                        {
                            sRanOb = "ex_prop_crate_shide";
                            iList_01[0] = 154;
                            iList_01[1] = 160;
                            iList_01[2] = 167;
                            sMissionVar_02 = "Yetti Hide";
                        }
                        else if (iRanObj < 40)
                        {
                            sRanOb = "ex_prop_crate_freel";
                            iList_01[0] = 155;
                            iList_01[1] = 161;
                            iList_01[2] = 168;
                            sMissionVar_02 = "Film Reel";
                        }
                        else if (iRanObj < 50)
                        {
                            sRanOb = "ex_prop_crate_Watch";
                            iList_01[0] = 156;
                            iList_01[1] = 162;
                            iList_01[2] = 169;
                            sMissionVar_02 = "Antique Watch";
                        }
                        else
                        {
                            sRanOb = "ex_prop_crate_xldiam";
                            iList_01[0] = 157;
                            iList_01[1] = 163;
                            iList_01[2] = 170;
                            sMissionVar_02 = "Large Dimond";
                        }
                        Vector3 Vrot90 = vRotL[iAddshit];
                        Vrot90.Z = Vrot90.Z + 90.00f;
                        Prop_01 = BuildProp(sRanOb, vPosL[iAddshit], Vrot90, true, true);
                    }
                    else
                    {
                        string sRanOb = sPropL[RandInt(0, sPropL.Count - 1)];
                        Prop Proper = BuildProp(sRanOb, vPosL[iAddshit], vRotL[iAddshit], true, true);
                        if (Proper != null)
                            Proper.Position = new Vector3(Proper.Position.X, Proper.Position.Y, Proper.Position.Z - 0.10f);
                    }
                }
                vTarget_02 = new Vector3(1027.073f, -3101.486f, -38.999f);
            }
            else if (iMissionVar_01 == 7)
            {
                int iRanEnd = RandInt(0, 20);

                int iAddshit = vPosL.Count;
                while (iAddshit > 0)
                {
                    iAddshit = iAddshit - 1;
                    if (iAddshit == iRanEnd)
                    {
                        string sRanOb = "";
                        int iRanObj = RandInt(0, 60);
                        if (iRanObj < 10)
                        {
                            sRanOb = "ex_prop_crate_minig";
                            iList_01[0] = 152;
                            iList_01[1] = 158;
                            iList_01[2] = 165;
                            sMissionVar_02 = "Golden Minigun";
                        }
                        else if (iRanObj < 20)
                        {
                            sRanOb = "ex_prop_crate_oegg";
                            iList_01[0] = 153;
                            iList_01[1] = 159;
                            iList_01[2] = 166;
                            sMissionVar_02 = "Golden Egg";
                        }
                        else if (iRanObj < 30)
                        {
                            sRanOb = "ex_prop_crate_shide";
                            iList_01[0] = 154;
                            iList_01[1] = 160;
                            iList_01[2] = 167;
                            sMissionVar_02 = "Yetti Hide";
                        }
                        else if (iRanObj < 40)
                        {
                            sRanOb = "ex_prop_crate_freel";
                            iList_01[0] = 155;
                            iList_01[1] = 161;
                            iList_01[2] = 168;
                            sMissionVar_02 = "Film Reel";
                        }
                        else if (iRanObj < 50)
                        {
                            sRanOb = "ex_prop_crate_Watch";
                            iList_01[0] = 156;
                            iList_01[1] = 162;
                            iList_01[2] = 169;
                            sMissionVar_02 = "Antique Watch";
                        }
                        else
                        {
                            sRanOb = "ex_prop_crate_xldiam";
                            iList_01[0] = 157;
                            iList_01[1] = 163;
                            iList_01[2] = 170;
                            sMissionVar_02 = "Large Dimond";
                        }
                        Vector3 Vrot90 = vRotL[iAddshit];
                        Vrot90.Z = Vrot90.Z + 90.00f;
                        Prop_01 = BuildProp(sRanOb, vPosL[iAddshit], Vrot90, true, true);
                    }
                    else
                    {
                        string sRanOb = sPropL[RandInt(0, sPropL.Count - 1)];
                        Prop Proper = BuildProp(sRanOb, vPosL[iAddshit], vRotL[iAddshit], true, true);
                        if (Proper != null)
                            Proper.Position = new Vector3(Proper.Position.X, Proper.Position.Y, Proper.Position.Z - 0.10f);
                    }
                }
                vTarget_02 = new Vector3(1073.01f, -3102.541f, -38.99992f);
            }
            else if (iMissionVar_01 == 8)
            {
                int iRanEnd = RandInt(0, 5);

                int iAddshit = vPosL.Count;
                while (iAddshit > 0)
                {
                    iAddshit = iAddshit - 1;
                    if (iAddshit == iRanEnd)
                    {
                        string sRanOb = "";
                        int iRanObj = RandInt(0, 60);
                        if (iRanObj < 10)
                        {
                            sRanOb = "ex_prop_crate_minig";
                            iList_01[0] = 152;
                            iList_01[1] = 158;
                            iList_01[2] = 165;
                            sMissionVar_02 = "Golden Minigun";
                        }
                        else if (iRanObj < 20)
                        {
                            sRanOb = "ex_prop_crate_oegg";
                            iList_01[0] = 153;
                            iList_01[1] = 159;
                            iList_01[2] = 166;
                            sMissionVar_02 = "Golden Egg";
                        }
                        else if (iRanObj < 30)
                        {
                            sRanOb = "ex_prop_crate_shide";
                            iList_01[0] = 154;
                            iList_01[1] = 160;
                            iList_01[2] = 167;
                            sMissionVar_02 = "Yetti Hide";
                        }
                        else if (iRanObj < 40)
                        {
                            sRanOb = "ex_prop_crate_freel";
                            iList_01[0] = 155;
                            iList_01[1] = 161;
                            iList_01[2] = 168;
                            sMissionVar_02 = "Film Reel";
                        }
                        else if (iRanObj < 50)
                        {
                            sRanOb = "ex_prop_crate_Watch";
                            iList_01[0] = 156;
                            iList_01[1] = 162;
                            iList_01[2] = 169;
                            sMissionVar_02 = "Antique Watch";
                        }
                        else
                        {
                            sRanOb = "ex_prop_crate_xldiam";
                            iList_01[0] = 157;
                            iList_01[1] = 163;
                            iList_01[2] = 170;
                            sMissionVar_02 = "Large Dimond";
                        }
                        Vector3 Vrot90 = vRotL[iAddshit];
                        Vrot90.Z = Vrot90.Z + 90.00f;
                        Prop_01 = BuildProp(sRanOb, vPosL[iAddshit], Vrot90, true, true);
                    }
                    else
                    {
                        string sRanOb = sPropL[RandInt(0, sPropL.Count - 1)];
                        Prop Proper = BuildProp(sRanOb, vPosL[iAddshit], vRotL[iAddshit], true, true);
                        if (Proper != null)
                            Proper.Position = new Vector3(Proper.Position.X, Proper.Position.Y, Proper.Position.Z - 0.10f);
                    }
                }
                vTarget_02 = new Vector3(1104.75f, -3099.33f, -38.99996f);
            }
            else
            {
                int iRanEnd = RandInt(0, 60);
                if (iRanEnd < 10)
                {
                    Vector3 Poz = new Vector3(945.665f, -3237.394f, -99.17f);
                    Vector3 Rot = new Vector3(0.00f, 0.00f, 94.326f);
                    Prop_01 = BuildProp("ex_prop_crate_oegg", Poz, Rot, true, true);

                    iList_01[0] = 152;
                    iList_01[1] = 158;
                    iList_01[2] = 165;
                    sMissionVar_02 = "Golden Egg";
                }
                else if (iRanEnd < 20)
                {
                    Vector3 Poz = new Vector3(947.617f, -3229.75977f, -99.068f);
                    Vector3 Rot = new Vector3(0.00f, 0.00f, -90.36f);
                    Prop_01 = BuildProp("ex_prop_crate_shide", Poz, Rot, true, true);

                    iList_01[0] = 153;
                    iList_01[1] = 159;
                    iList_01[2] = 166;
                    sMissionVar_02 = "Yetti Hide";
                }
                else if (iRanEnd < 30)
                {
                    Vector3 Poz = new Vector3(928.077f, -3208.534f, -99.136f);
                    Vector3 Rot = new Vector3(0.00f, 0.00f, 4.884f);
                    Prop_01 = BuildProp("ex_prop_crate_minig", Poz, Rot, true, true);

                    iList_01[0] = 154;
                    iList_01[1] = 160;
                    iList_01[2] = 167;
                    sMissionVar_02 = "Golden Minigun";
                }
                else if (iRanEnd < 40)
                {
                    Vector3 Poz = new Vector3(945.47f, -3206.08f, -99.1497f);
                    Vector3 Rot = new Vector3(0.00f, 0.00f, 105.167f);
                    Prop_01 = BuildProp("ex_prop_crate_freel", Poz, Rot, true, true);

                    iList_01[0] = 155;
                    iList_01[1] = 161;
                    iList_01[2] = 168;
                    sMissionVar_02 = "Film Real";
                }
                else if (iRanEnd < 50)
                {
                    Vector3 Poz = new Vector3(944.21f, -3194.748f, -99.137f);
                    Vector3 Rot = new Vector3(0.00f, 0.00f, -172.513f);
                    Prop_01 = BuildProp("ex_prop_crate_Watch", Poz, Rot, true, true);

                    iList_01[0] = 156;
                    iList_01[1] = 162;
                    iList_01[2] = 169;
                    sMissionVar_02 = "Watch";
                }
                else
                {
                    Vector3 Poz = new Vector3(944.21f, -3194.748f, -99.136f);
                    Vector3 Rot = new Vector3(0.00f, 0.00f, -172.513f);
                    Prop_01 = BuildProp("ex_prop_crate_xldiam", Poz, Rot, true, true);

                    iList_01[0] = 157;
                    iList_01[1] = 163;
                    iList_01[2] = 170;
                    sMissionVar_02 = "Large Dimond";
                }

                int iAddshit = sPropL.Count;
                while (iAddshit > 0)
                {
                    iAddshit = iAddshit - 1;
                    BuildProp(sPropL[iAddshit], vPosL[iAddshit], vRotL[iAddshit], true, true);
                }
            }
        }
        private void CargoCollect_UnloadInt(int iInterior)
        {

            LogThis("CargoCollect_UnloadInt, iInterior == " + iInterior);

            List<string> sPropL = new List<string>();

            Vector3 Vloc = VectorList_02[VectorList_02.Count - 1];
            int iWare = Function.Call<int>(Hash.GET_INTERIOR_AT_COORDS, Vloc.X, Vloc.Y, Vloc.Z);

            if (iInterior == 8)
            {
                sPropL.Add("upgrade_bunker_set");
                sPropL.Add("bunker_style_c");
                sPropL.Add("office_upgrade_set");
                sPropL.Add("gun_locker_upgrade");
                sPropL.Add("security_upgrade");
                sPropL.Add("standard_security_set");
                sPropL.Add("Upgrade_Bunker_Set_More");
                sPropL.Add("Gun_schematic_set");
                sPropL.Add("gun_range_lights");
            }

            for (int i = 0; i < sPropL.Count; i++)
            {
                if (Function.Call<bool>(Hash._IS_INTERIOR_PROP_ENABLED, iWare, sPropL[i]))
                    Function.Call(Hash._DISABLE_INTERIOR_PROP, iWare, sPropL[i]);
            }

            int iGetOldSet = sList_01.Count;
            if (iGetOldSet > 0)
            {
                while (iGetOldSet > 0)
                {
                    iGetOldSet = iGetOldSet - 1;
                    Function.Call(Hash._ENABLE_INTERIOR_PROP, iWare, sList_01[iGetOldSet]);
                }
                sList_01.Clear();
            }
            else
            {
                Function.Call(Hash.SET_INTERIOR_ACTIVE, iWare, false);
                Function.Call(Hash.DISABLE_INTERIOR, iWare, true);

                //LoadInMissionIPLs(iInterior, true);
            }
        }
        private void CargoCollect_LoadHood()
        {
            LogThis("CargoCollect_LoadHood");

            int iAm = RandInt(1, 50);
            for (int i = 0; i < VectorList_02.Count - 1; i++)
                NPCSpawn("", VectorList_02[i], 0.00f, false, 220, 15, 0, null, 0, true, 1, 1, MyLang.Maptext[113]);
        }
        private void ResetTruck(Vehicle vTruck, Vector3 vPosy, float fHeaders)
        {

            LogThis("CargoCollect_ResetTruck");

            while (Game.IsControlPressed(2, GTA.Control.Context))
                Script.Wait(1);

            Game.FadeScreenOut(1000);
            Script.Wait(1000);
            vTruck.Position = vPosy;
            vTruck.Heading = fHeaders;
            Game.FadeScreenIn(1000);
            BeOnOff[0] = false;
        }
        private void CargoCollect_Suprise()
        {

            LogThis("CargoCollect_Suprise");

            CleanUpPeds();
            Game.Player.Character.CanBeDraggedOutOfVehicle = true;
            iMissionVar_03 = FindRandom(14, 1, 5);

            if (iMissionVar_03 == 1)
            {
                SearchVeh(35.00f, 150.00f, RanVehListX(18, 1, false), false, false, false, false, 8, 1, 1, MyLang.Maptext[20], 0, true, true);              
                iCashReward += 4000;
            }            // Arena vehicle chase
            else if (iMissionVar_03 == 2)
            {
                AddDogFighters(3);
                iCashReward += 15000;
            }       // Hydra attack
            else if (iMissionVar_03 == 3)
            {
                Vector3 NewV = (Game.Player.Character.Position) - (Game.Player.Character.ForwardVector * 500);
                NewV.Z = NewV.Z + 500.00f;
                Vehicle Vehic = VehicleSpawn(RanVehListX(2, 3, false), NewV, Game.Player.Character.Heading, false, false, false, false, 2, 8, 3, MyLang.Maptext[20], 0, false);
                MaxOutAllModsNoWheels(Vehic);
                iCashReward += 12000;
            }       // helli attack -- Make it work
            else if (iMissionVar_03 == 4)
            {
                int iCountEm = RandInt(5, 10);
                SearchPed(1.00f, 75.00f, "", false, 220, 20, 0, null, 10, true, 1, 2, "");
                iCashReward += 10000;
            }       // Green Suit Mele Attack 
            else
            {
                iCashReward += 1000;
            }                                // No attacks
        }
        private void DeepDown_Addfish()
        {
            LogThis("DeepDown_Addfish");

            Vector3 FishStack = vTarget_01;
            int iFish = RandInt(8, 15);
            iCashReward = iFish * 500;
            for (int i = 0; i < iFish; i++)
            {
                FishStack.Z = FishStack.Z + 0.50f;
                if (FindRandom(84, 1, 4) > 2)
                    FishStack.Y = FishStack.Y + 0.50f;
                else
                    FishStack.X = FishStack.X + 0.50f;

                NPCSpawn("a_c_sharktiger", vTarget_01, 0.00f, false, 400, 28, 0, null, 2, true, 1, 0, MyLang.Maptext[114]);
            }
        }
        private void DeepDown_SwimtoBarrel()
        {
            for (int i = 0; i < PedList_01.Count; i++)
            {
                if (PedList_01[i].IsDead)
                {
                    PedList_01[i].CurrentBlip.Remove();
                    PedList_01[i].MarkAsNoLongerNeeded();
                    PedList_01.RemoveAt(i);
                }
                else if (PropList_01.Count > 0)
                {
                    PedList_01[i].Task.ClearAll();
                    PedList_01[i].Task.GoTo(PropList_01[0].Position, true);
                }
                else if (PedList_01[i].Position.DistanceTo(vTarget_01) > 85.00f)
                {
                    PedList_01[i].Task.ClearAll();
                    PedList_01[i].Task.GoTo(vTarget_01, true);
                }
                else
                {
                    PedList_01[i].Task.ClearAll();
                    PedList_01[i].Task.FleeFrom(Game.Player.Character);
                }
            }
        }
        private void DeepDown_DropBomb()
        {
            LogThis("DeepDown_DropBomb");

            while (Game.IsControlPressed(2, GTA.Control.Context))
                Script.Wait(1);
            BuildProp("prop_barrel_02b", new Vector3(VehTrackin_01.Position.X, VehTrackin_01.Position.Y, VehTrackin_01.Position.Z - 2.75f), Vector3.Zero, false, true);
            BeOnOff[1] = false;
        }
        public float HappyShopper_DAmmagedGoods()
        {
            float fDam = 0.00f;

            Entity[] ShopBop = World.GetNearbyEntities(vTarget_01, 7.00f);

            for (int i = 0; i < ShopBop.Count(); i++)
            {
                if (Function.Call<bool>(Hash.IS_ENTITY_A_PED, ShopBop[i].Handle))
                {
                    if (ShopBop[i].IsDead)
                        iMissionSeq = 45;
                }
                else if (Function.Call<bool>(Hash.HAS_ENTITY_BEEN_DAMAGED_BY_ANY_PED, ShopBop[i].Handle) && !iList_01.Contains(ShopBop[i].Handle))
                {
                    iList_01.Add(ShopBop[i].Handle);
                    iMissionVar_01 += 1;
                }
            }

            if (iMissionVar_01 > 15)
                fDam = 1.00f;
            else
                fDam = (float)iMissionVar_01 / 15.00f;

            return fDam;
        }
        public float MoresMuted_DAmmagedGoods(Vehicle MyBMW)
        {
            LogThis("MoresMuted_DAmmagedGoods");

            int iDamU = iMissionVar_02 - MyBMW.Health;
            float fDam = 0.00f;

            if (iDamU > 100)
                fDam = 1.00f;
            else
            {
                fDam = (float)iDamU / 100;
            }

            LogThis("fDam = " + fDam + ", iDamU == " + iDamU);
            return fDam;
        }
        private void TempAgency_01_ChaseTheBall(Ped peddy, Vehicle Vhick)
        {
            if (peddy.IsDead)
                iMissionSeq = 45;
            else
                Function.Call(Hash._TASK_VEHICLE_FOLLOW, peddy.Handle, Vhick.Handle, Prop_01.Handle, 40.00f, 0, 1);
        }
        public bool TempAgency_01_BallTracking()
        {
            bool bBall = false;

            if (Prop_01.Position.X > -1865.00f)
            {
                if (Prop_01.Position.Y > 1088.00f && Prop_01.Position.Y < 1110.00f)
                {
                    iMissionVar_01 += 1;
                    BeOnOff[0] = true;
                }

                bBall = true;
            }
            else if (Prop_01.Position.X < -2106.00f)
            {
                if (Prop_01.Position.Y > 1088.00f && Prop_01.Position.Y < 1110.00f)
                {
                    iMissionVar_03 += 1;
                    BeOnOff[0] = true;
                }

                bBall = true;
            }
            else if (Prop_01.Position.Y < 1035.00f)
                bBall = true;
            else if (Prop_01.Position.Y > 1161.00f)
                bBall = true;

            return bBall;
        }
        private void TempAgency_01_FormationNGate()
        {
            LogThis("TempAgency_01_FormationNGate");

            Vector3 Vbe = new Vector3(-2151.073f, 1105.916f, 28.08027f);
            Prop[] Opensesme = World.GetNearbyProps(Vbe, 7.50f);
            for (int i = 0; i < Opensesme.Count(); i++)
            {
                Prop ThisDoor = Opensesme[i];
                ThisDoor.Delete();
            }

            for (int i = 0; i < VehicleList_01.Count(); i++)
            {
                if (VehTrackin_01 == VehicleList_01[i])
                {

                }
                else if (Game.Player.Character.CurrentVehicle != VehicleList_01[i])
                {
                    WarptoAnyVeh(VehicleList_01[i], PedList_01[i], 1);
                    PedList_01[i].CanBeDraggedOutOfVehicle = false;
                    PedList_01[i].BlockPermanentEvents = true;
                }
                else
                {
                    if (i < 5)
                        BeOnOff[1] = true;
                }
            }

            TempAgency_01_Formation();
        }
        private void TempAgency_01_Formation()
        {
            LogThis("TempAgency_01_Formation");
            Game.FadeScreenOut(1000);
            Script.Wait(900);
            for (int i = 0; i < VehicleList_01.Count() - 1; i++)
            {
                VehicleList_01[i].Position = VectorList_01[i];
                VehicleList_01[i].Heading = fList_01[i];

                VehicleList_01[i].FreezePosition = true;
            }

            Game.FadeScreenIn(1000);

            if (BeOnOff[0])
            {
                BeOnOff[0] = false;
                iMissionVar_02 = 5;
                Racist_CountDown(vTarget_03);
            }
            Prop_01.Position = vTarget_03;

            for (int i = 0; i < VehicleList_01.Count(); i++)
            {
                VehicleList_01[i].FreezePosition = false;

                if (VehTrackin_01 == VehicleList_01[i])
                {

                }
                else if (Game.Player.Character.CurrentVehicle != VehicleList_01[i])
                {
                    if (!PedList_01[i].IsInVehicle())
                        WarptoAnyVeh(VehicleList_01[i], PedList_01[i], 1);

                    TempAgency_01_ChaseTheBall(PedList_01[i], VehicleList_01[i]);
                }
            }
        }
        private void TempAgency_01_LoadInShit()
        {
            LogThis("TempAgency_01_LoadInShit");

            int iFive = 10;
            List<Vector3> CS0 = new List<Vector3>();
            List<float> fCS0 = new List<float>();
            CS0.Add(new Vector3(-2177.811f, 1087.438f, 28.18942f)); fCS0.Add(269.915f);
            CS0.Add(new Vector3(-2177.133f, 1094.691f, 28.19033f)); fCS0.Add(269.5286f);
            CS0.Add(new Vector3(-2177.756f, 1107.449f, 28.186f)); fCS0.Add(90.48133f);
            CS0.Add(new Vector3(-2177.749f, 1117.644f, 28.18346f)); fCS0.Add(270.4045f);
            CS0.Add(new Vector3(-2178.158f, 1124.109f, 28.183f)); fCS0.Add(270.1498f);
            CS0.Add(new Vector3(-2177.197f, 1137.583f, 28.18233f)); fCS0.Add(88.53631f);
            CS0.Add(new Vector3(-2160.691f, 1154.501f, 28.18356f)); fCS0.Add(179.0026f);
            CS0.Add(new Vector3(-2144.921f, 1145.939f, 28.18462f)); fCS0.Add(267.3809f);
            CS0.Add(new Vector3(-2145.376f, 1139.874f, 28.18336f)); fCS0.Add(88.67729f);
            CS0.Add(new Vector3(-2144.958f, 1136.682f, 28.18353f)); fCS0.Add(89.13258f);
            CS0.Add(new Vector3(-2145.425f, 1133.542f, 28.1842f)); fCS0.Add(88.60604f);
            CS0.Add(new Vector3(-2145.74f, 1093.254f, 28.18992f)); fCS0.Add(86.601f);
            CS0.Add(new Vector3(-2145.605f, 1083.198f, 28.19049f)); fCS0.Add(270.0027f);
            CS0.Add(new Vector3(-2158.845f, 1083.501f, 28.19156f)); fCS0.Add(268.9763f);
            CS0.Add(new Vector3(-2158.744f, 1086.845f, 28.19164f)); fCS0.Add(269.565f);
            CS0.Add(new Vector3(-2158.829f, 1094.491f, 28.19087f)); fCS0.Add(269.0538f);
            CS0.Add(new Vector3(-2158.365f, 1097.776f, 28.19056f)); fCS0.Add(270.9919f);
            CS0.Add(new Vector3(-2165.167f, 1097.727f, 28.19054f)); fCS0.Add(89.75224f);
            CS0.Add(new Vector3(-2164.7f, 1094.402f, 28.19084f)); fCS0.Add(92.01196f);
            CS0.Add(new Vector3(-2164.979f, 1086.673f, 28.1919f)); fCS0.Add(89.58455f);
            CS0.Add(new Vector3(-2165.531f, 1083.449f, 28.19239f)); fCS0.Add(88.94128f);
            CS0.Add(new Vector3(-2158.714f, 1115.803f, 28.18392f)); fCS0.Add(268.1812f);
            CS0.Add(new Vector3(-2164.125f, 1116.272f, 28.18392f)); fCS0.Add(88.08123f);
            CS0.Add(new Vector3(-2164.26f, 1126.021f, 28.18344f)); fCS0.Add(91.12691f);
            CS0.Add(new Vector3(-2159.291f, 1126.071f, 28.18359f)); fCS0.Add(270.1757f);
            CS0.Add(new Vector3(-2186.163f, 1093.162f, 29.77102f)); fCS0.Add(274.0882f);
            CS0.Add(new Vector3(-2185.962f, 1116.167f, 29.77088f)); fCS0.Add(89.21154f);
            CS0.Add(new Vector3(-2203.729f, 1125.39f, 29.77118f)); fCS0.Add(271.6154f);

            for (int i = 0; i < 10; i++)
            {
                if (iFive > 5)
                {
                    int iPos = RandInt(0, CS0.Count - 1);
                    Vector3 Vpos = CS0[iPos];
                    float fPos = fCS0[iPos];
                    CS0.RemoveAt(iPos);
                    VehicleSpawn("BRIOSO", Vpos, fPos, false, false, false, false, 2, 12, 0, "", 0, true);
                }
                else
                {
                    int iPos = RandInt(0, CS0.Count - 1);
                    Vector3 Vpos = CS0[iPos];
                    float fPos = fCS0[iPos];
                    CS0.RemoveAt(iPos);
                    VehicleSpawn("PANTO", Vpos, fPos, false, false, false, false, 2, 13, 0, "", 0, true);
                }
                iFive -= 1;
            }

            VehTrackin_01 = VehicleSpawn("ellie", new Vector3(-2160.837f, 1136.845f, 28.65855f), 39.86842f, false, false, false, false, 0, 0, 0, "", 0, true);
            VehTrackin_01.LockStatus = VehicleLockStatus.Locked;

            List<Vector3> CS1 = new List<Vector3>
            {
                new Vector3(-2206.477f, 1086.386f, 29.7719f),
                new Vector3(-2193.382f, 1087.739f, 29.77167f),
                new Vector3(-2188.012f, 1111.267f, 29.77104f),
                new Vector3(-2199.195f, 1125.646f, 29.77118f),
                new Vector3(-2192.204f, 1137.694f, 29.77069f),
                new Vector3(-2172.278f, 1143.476f, 28.6576f),
                new Vector3(-2164.511f, 1137.581f, 28.65852f),
                new Vector3(-2163.507f, 1135.108f, 28.65858f),
                new Vector3(-2161.861f, 1133.732f, 28.6586f),
                new Vector3(-2158.448f, 1134.506f, 28.6586f),
                new Vector3(-2145.184f, 1129.888f, 28.65871f),
                new Vector3(-2142.997f, 1153.408f, 28.65845f),
                new Vector3(-2142.765f, 1157.401f, 28.65796f),
                new Vector3(-2154.892f, 1118.25f, 28.65905f),
                new Vector3(-2154.965f, 1098.543f, 28.66558f),
                new Vector3(-2150.392f, 1088.793f, 28.66665f),
                new Vector3(-2153.834f, 1086.511f, 28.66689f),
                new Vector3(-2176.19f, 1098.916f, 28.66524f),
                new Vector3(-2168.064f, 1124.208f, 28.65883f),
                new Vector3(-2168.392f, 1117.993f, 28.65904f)
            };

            for (int i = 0; i < CS1.Count; i++)
            {
                int ido = 29;
                if (FindRandom(89, 1, 5) < 2)
                    ido = 32;
                NPCSpawn(RandNPC(53), CS1[i], 0.00f, false, 200, ido, 0, null, 3, false, 0, 0, "");
            }


            List<string> Neme = new List<string>();
            List<Vector3> POsy = new List<Vector3>();
            List<Vector3> Roty = new List<Vector3>();

            Neme.Add("xs_prop_arena_goal");
            POsy.Add(new Vector3(-2108.10742f, 1098.08179f, 23.2970879f));//-
            Roty.Add(new Vector3(0.00f, 0.00f, 90.3965073f));
            Neme.Add("xs_prop_arena_goal");
            POsy.Add(new Vector3(-1863.65381f, 1099.26257f, 23.2574173f));//-
            Roty.Add(new Vector3(0.00f, 0.00f, -90.3504639f));
            Neme.Add("xs_prop_barrier_15m_01a");
            POsy.Add(new Vector3(-1866.50854f, 1071.6676f, 24.6705627f));//-
            Roty.Add(new Vector3(0.00f, 0.00f, -90.5841675f));
            Neme.Add("xs_prop_barrier_15m_01a");
            POsy.Add(new Vector3(-1880.58362f, 1036.46375f, 24.6705627f));//-
            Roty.Add(new Vector3(0.00f, 0.00f, 179.409409f));
            Neme.Add("xs_prop_barrier_15m_01a");
            POsy.Add(new Vector3(-1910.40039f, 1036.78064f, 24.6705627f));//-
            Roty.Add(new Vector3(0.00f, 0.00f, -179.803619f));
            Neme.Add("xs_prop_barrier_15m_01a");
            POsy.Add(new Vector3(-1941.83679f, 1036.98657f, 24.6705627f));//-
            Roty.Add(new Vector3(0.00f, 0.00f, 179.940811f));
            Neme.Add("xs_prop_barrier_15m_01a");
            POsy.Add(new Vector3(-1970.30664f, 1036.93835f, 24.6705627f));//-
            Roty.Add(new Vector3(0.00f, 0.00f, 178.417297f));
            Neme.Add("xs_prop_barrier_15m_01a");
            POsy.Add(new Vector3(-2001.75317f, 1036.45374f, 24.6705627f));//-
            Roty.Add(new Vector3(0.00f, 0.00f, -179.856827f));
            Neme.Add("xs_prop_barrier_15m_01a");
            POsy.Add(new Vector3(-2031.73193f, 1036.14661f, 24.6705208f));//-
            Roty.Add(new Vector3(0.00f, 0.00f, 179.972244f));
            Neme.Add("xs_prop_barrier_15m_01a");
            POsy.Add(new Vector3(-2061.04321f, 1035.94739f, 24.6705227f));//-
            Roty.Add(new Vector3(0.00f, 0.00f, 179.118088f));
            Neme.Add("xs_prop_barrier_15m_01a");
            POsy.Add(new Vector3(-2090.04956f, 1036.71191f, 24.6705208f));//-
            Roty.Add(new Vector3(0.00f, 0.00f, 176.885681f));
            Neme.Add("xs_prop_barrier_15m_01a");
            POsy.Add(new Vector3(-2105.36353f, 1047.81274f, 24.6705227f));//-
            Roty.Add(new Vector3(0.00f, 0.00f, 89.9494095f));
            Neme.Add("xs_prop_barrier_15m_01a");
            POsy.Add(new Vector3(-2106.07861f, 1071.63562f, 24.6906185f));//-
            Roty.Add(new Vector3(0.00f, 0.00f, 89.9494095f));
            Neme.Add("xs_prop_barrier_15m_01a");
            POsy.Add(new Vector3(-2106.4646f, 1126.07898f, 24.6704292f));//-
            Roty.Add(new Vector3(0.00f, 0.00f, 86.8784409f));
            Neme.Add("xs_prop_barrier_15m_01a");
            POsy.Add(new Vector3(-2106.03467f, 1148.0896f, 24.6704807f));//-
            Roty.Add(new Vector3(0.00f, 0.00f, 87.1735458f));
            Neme.Add("xs_prop_barrier_15m_01a");
            POsy.Add(new Vector3(-2090.90259f, 1161.09912f, 24.6705208f));//-
            Roty.Add(new Vector3(0.00f, 0.00f, -1.38346684f));
            Neme.Add("xs_prop_barrier_15m_01a");
            POsy.Add(new Vector3(-2060.55469f, 1161.34534f, 24.6705227f));//-
            Roty.Add(new Vector3(0.00f, 0.00f, -0.628873169f));
            Neme.Add("xs_prop_barrier_15m_01a");
            POsy.Add(new Vector3(-2031.10046f, 1160.58984f, 24.6906185f));//-
            Roty.Add(new Vector3(0.00f, 0.00f, -1.32440674f));
            Neme.Add("xs_prop_barrier_15m_01a");
            POsy.Add(new Vector3(-1999.65234f, 1160.7179f, 24.6705627f));//-
            Roty.Add(new Vector3(0.00f, 0.00f, -0.799470484f));
            Neme.Add("xs_prop_barrier_15m_01a");
            POsy.Add(new Vector3(-1970.14722f, 1161.15833f, 24.6705627f));//-
            Roty.Add(new Vector3(0.00f, 0.00f, -0.806029916f));
            Neme.Add("xs_prop_barrier_15m_01a");
            POsy.Add(new Vector3(-1939.99878f, 1160.7334f, 24.6705627f));//-
            Roty.Add(new Vector3(0.00f, 0.00f, -0.806029916f));
            Neme.Add("xs_prop_barrier_15m_01a");
            POsy.Add(new Vector3(-1910.7478f, 1160.60864f, 24.6705627f));//-
            Roty.Add(new Vector3(0.00f, 0.00f, 0.0863575488f));
            Neme.Add("xs_prop_barrier_15m_01a");
            POsy.Add(new Vector3(-1880.94727f, 1161.03284f, 24.6705627f));//-
            Roty.Add(new Vector3(0.00f, 0.00f, -1.14067221f));
            Neme.Add("xs_prop_barrier_15m_01a");
            POsy.Add(new Vector3(-1866.349f, 1148.34021f, 24.6705627f));//-
            Roty.Add(new Vector3(0.00f, 0.00f, -90.4448242f));
            Neme.Add("xs_prop_barrier_15m_01a");
            POsy.Add(new Vector3(-1864.22278f, 1125.81921f, 24.6705627f));//-
            Roty.Add(new Vector3(0.00f, 0.00f, -87.3606796f));
            Neme.Add("xs_prop_barrier_15m_01a");
            POsy.Add(new Vector3(-1866.01367f, 1048.5166f, 24.6705627f));//-
            Roty.Add(new Vector3(0.00f, 0.00f, -90.1225281f));

            for (int i = 0; i < POsy.Count; i++)
                BuildProp(Neme[i], POsy[i], Roty[i], true, true);
        }
        private void TempAgency_01_AddGoal()
        {
            LogThis("LsUnderground_AddGoal");
            Blip Blip = World.CreateBlip(new Vector3(-1861.727f, 1098.592f, 25.65174f));
            Blip.Color = BlipColor.BlueDark;
            BlipList_01.Add(new Blip(Blip.Handle));
            ReadWriteBlips(false, true, Blip.Handle, -1, -1, -1, -1, -1);

            Blip = World.CreateBlip(new Vector3(-2109.57f, 1098.406f, 25.66548f));
            Blip.Color = BlipColor.RedDark;
            BlipList_01.Add(new Blip(Blip.Handle));
            ReadWriteBlips(false, true, Blip.Handle, -1, -1, -1, -1, -1);
        }
        private void TempAgency_01_ExitWithCar(bool bFail)
        {
            LogThis("TempAgency_01_ExitWithCar, bFail == " + bFail);
            VehTrackin_01.LockStatus = VehicleLockStatus.Unlocked;
            if (iMissionVar_01 > iMissionVar_03)
                VehTrackin_01.PrimaryColor = VehicleColor.MetallicBlazeRed;
            else
                VehTrackin_01.PrimaryColor = VehicleColor.MetaillicVDarkBlue;
            if (!bFail)
                WarptoAnyVeh(VehTrackin_01, Game.Player.Character, 1);
            Game.Player.Character.CurrentVehicle.Position = vTarget_05;
            Game.Player.Character.CurrentVehicle.Heading = fMission_02;

            if (!bFail)
                iCashReward = 10000;
            else
                iCashReward = 50;
            LoadInMissionIPLs(11, false, false);
            GameOver(bFail, "", false, iCashReward);
        }
        private void TempAgency_02_SmokinEyes(bool bOn)
        {
            LogThis("TempAgency_02_SmokinEyes on == " + bOn);

            if (bOn)
            {
                int iFaled = 0;
                iFireList.Clear();
                Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_ba_club");
                while (!Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, "scr_ba_club") || iFaled > 5000)
                {
                    iFaled += 1;
                    Script.Wait(1);
                }
                if (iFaled > 4000)
                    LogThis("LsUnderground_SmokinEyes iFaled == " + iFaled);

                Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_ba_club");

                iFireList.Add(Function.Call<int>(Hash.START_PARTICLE_FX_LOOPED_AT_COORD, "scr_ba_club_smoke_machine", VehTrackin_01, -1602.932f, -3019.1f, -79.99f, 0.0f, -10.0f, 66.0f, 1.00f, 0, 0, 0, 0));
                iFireList.Add(Function.Call<int>(Hash.START_PARTICLE_FX_LOOPED_AT_COORD, "scr_ba_club_smoke_machine", VehTrackin_01, -1593.238f, -3017.05f, -79.99f, 0.0f, -10.0f, 110.0f, 1.00f, 0, 0, 0, 0));
                iFireList.Add(Function.Call<int>(Hash.START_PARTICLE_FX_LOOPED_AT_COORD, "scr_ba_club_smoke_machine", VehTrackin_01, -1597.134f, -3008.2f, -79.99f, 0.0f, -10.0f, -122.53f, 1.00f, 0, 0, 0, 0));
                iFireList.Add(Function.Call<int>(Hash.START_PARTICLE_FX_LOOPED_AT_COORD, "scr_ba_club_smoke_machine", VehTrackin_01, -1589.966f, -3008.518f, -79.99f, 0.0f, -10.0f, -166.97f, 1.00f, 0, 0, 0, 0));
            }
            else
            {
                for (int i = 0; i < iFireList.Count; i++)
                {
                    Function.Call(Hash.REMOVE_PARTICLE_FX, iFireList[i], true);
                }
            }
        }
        private void TempAgency_02_ClubQUe()
        {
            Script.Wait(1000);
            List<string> sTings = new List<string>
            {
                "prop_dumpster_01a",
                "prop_dumpster_02b",
                "prop_boxpile_02d",
                "prop_rub_boxpile_04",
                "prop_rub_boxpile_06",
                "prop_rub_boxpile_08",
                "prop_rub_cardpile_01",
                "prop_rub_cardpile_03",
                "prop_bin_07b"
            };

            Prop[] Opensesme = World.GetNearbyProps(vTarget_01, 10.00f);

            for (int i = 0; i < Opensesme.Count(); i++)
            {
                if (PropExists(Opensesme, i))
                {
                    Prop ThisTrash = Opensesme[i];
                    for (int ii = 0; ii < sTings.Count; ii++)
                    {
                        if (Function.Call<int>(Hash.GET_HASH_KEY, sTings[ii]) == ThisTrash.Model)
                        {
                            ThisTrash.Delete();
                            break;
                        }
                    }
                }
            }
            for (int i = 1; i < VectorList_01.Count - 1; i++)
                NPCSpawn(RandNPC(54), VectorList_01[i], fList_01[i], false, 130, 0, 0, null, 0, false, 0, 0, "");

            NPCSpawn("s_m_m_bouncer_01", VectorList_01[VectorList_01.Count - 1], fList_01[VectorList_01.Count - 1], false, 250, 0, 0, null, 0, false, 0, 0, "");
        }
        private void TempAgency_02_FillClub()
        {
            LogThis("LsUnderground_ClubInt");

            List<float> Fed_01 = new List<float>();
            List<float> Fed_02 = new List<float>();
            List<Vector3> Pos_01 = new List<Vector3>();
            List<Vector3> Pos_02 = new List<Vector3>();

            Pos_01.Add(new Vector3(-1589.448f, -3007.774f, -76.00503f));
            Pos_01.Add(new Vector3(-1589.441f, -3012.488f, -76.00503f));
            Pos_01.Add(new Vector3(-1589.421f, -3017.055f, -76.00503f));
            Pos_01.Add(new Vector3(-1595.595f, -3005.779f, -76.00503f));
            Pos_01.Add(new Vector3(-1595.984f, -3001.398f, -75.80518f));
            Pos_01.Add(new Vector3(-1599.507f, -3001.861f, -75.80518f));
            Pos_01.Add(new Vector3(-1600.377f, -3005.892f, -76.00495f));
            Pos_01.Add(new Vector3(-1578.162f, -3013.235f, -79.00596f));
            Pos_01.Add(new Vector3(-1589.306f, -3016.852f, -79.00603f));
            Pos_01.Add(new Vector3(-1589.601f, -3012.639f, -79.00603f));

            Pos_02.Add(new Vector3(-1603.001f, -3012.568f, -77.81246f)); Fed_02.Add(274.2069f);
            Pos_02.Add(new Vector3(-1605.922f, -3011.58f, -77.813f)); Fed_02.Add(217.6719f);
            Pos_02.Add(new Vector3(-1606.194f, -3014.047f, -77.81195f)); Fed_02.Add(316.5241f);
            Pos_02.Add(new Vector3(-1612.174f, -3006.897f, -75.21956f)); Fed_02.Add(302.9684f);
            Pos_02.Add(new Vector3(-1609.34f, -3006.435f, -75.20525f)); Fed_02.Add(81.30991f);
            Pos_02.Add(new Vector3(-1622.524f, -3012.216f, -75.20502f)); Fed_02.Add(63.60439f);
            Pos_02.Add(new Vector3(-1609.007f, -3011.89f, -75.20503f)); Fed_02.Add(266.7303f);
            Pos_02.Add(new Vector3(-1608.683f, -3018.384f, -75.20503f)); Fed_02.Add(351.4129f);
            Pos_02.Add(new Vector3(-1612.251f, -3018.103f, -75.20503f)); Fed_02.Add(297.631f);
            Pos_02.Add(new Vector3(-1638.073f, -3005.74f, -78.14367f)); Fed_02.Add(321.8897f);
            Pos_02.Add(new Vector3(-1632.429f, -3003.553f, -78.14367f)); Fed_02.Add(96.29626f);
            Pos_02.Add(new Vector3(-1633.056f, -2997.56f, -78.14368f)); Fed_02.Add(51.76125f);
            Pos_02.Add(new Vector3(-1610.975f, -2999.991f, -78.00607f)); Fed_02.Add(335.8739f);
            Pos_02.Add(new Vector3(-1611.793f, -2997.942f, -78.00607f)); Fed_02.Add(200.2712f);
            Pos_02.Add(new Vector3(-1609.336f, -3016.917f, -79.00594f)); Fed_02.Add(270.7515f);
            Pos_02.Add(new Vector3(-1611.817f, -3010.424f, -79.00594f)); Fed_02.Add(252.4654f);

            Vector3 Myspot = new Vector3(-1572.162f, -3012.955f, -74.40617f); float Mdir = 271.7298f;
            NPCSpawn("s_f_y_clubbar_02", Myspot, Mdir, false, 250, 29, 0, null, 0, false, 0, 0, "");

            Myspot = new Vector3(-1577.193f, -3017.406f, -79.00587f); Mdir = 14.77673f;
            NPCSpawn("s_f_y_clubbar_02", Myspot, Mdir, false, 250, 29, 0, null, 0, false, 0, 0, "");

            for (int i = 0; i < Pos_01.Count; i++)
            {
                int iRand = RandInt(2, 3);
                if (World.CurrentDate.DayOfWeek == DayOfWeek.Friday || World.CurrentDate.DayOfWeek == DayOfWeek.Saturday)
                    iRand = iRand * 2;

                while (iRand > 0)
                {
                    Vector3 VPedPos = Pos_01[i].Around(2.00f);
                    VPedPos.Z = Pos_01[i].Z;
                    if (FindRandom(90, 1, 10) < 9)
                        NPCSpawn(RandNPC(54), VPedPos, RandInt(0, 360), false, 150, 31, 0, null, 0, false, 0, 0, "");
                    else
                        NPCSpawn("", VPedPos, RandInt(0, 360), false, 150, 31, 0, null, 0, false, 0, 1, "");

                    iRand -= 1;
                }
            }

            int iRand2 = RandInt(13, 18);
            if (World.CurrentDate.DayOfWeek == DayOfWeek.Friday || World.CurrentDate.DayOfWeek == DayOfWeek.Saturday)
                iRand2 = iRand2 * 2;
            Vector3 DancFloored = new Vector3(-1596.159f, -3013.074f, -79.00603f);
            while (iRand2 > 0)
            {
                Vector3 VPedPos = DancFloored.Around(4.50f);
                NPCSpawn(RandNPC(54), VPedPos, RandInt(0, 360), false, 150, 31, 0, null, 0, false, 0, 0, "");
                iRand2 -= 1;
            }
            for (int i = 1; i < VectorList_03.Count; i++)
            {
                if (VectorList_03[i] != vTarget_03)
                    NPCSpawn("s_m_m_bouncer_01", VectorList_03[i], fList_02[i], false, 250, 30, 0, null, 0, false, 0, 0, "");
            }
        }
        private void TempAgency_02_BarStools()
        {
            for (int i = 0; i < VectorList_04.Count; i++)
            {
                Prop[] Opensesme = World.GetNearbyProps(VectorList_04[i], 4.00f);
                for (int ii = 0; ii < Opensesme.Count(); ii++)
                {
                    Prop ThisTrash = Opensesme[ii];
                    if (Function.Call<int>(Hash.GET_HASH_KEY, "ba_prop_int_stool_low") == ThisTrash.Model || Function.Call<int>(Hash.GET_HASH_KEY, "ba_prop_int_edgy_stool") == ThisTrash.Model || Function.Call<int>(Hash.GET_HASH_KEY, "ba_prop_int_glam_stool") == ThisTrash.Model)
                        ThisTrash.Delete();
                }
            }

            Prop[] Bin = World.GetNearbyProps(new Vector3(-1583.90735f, -3009.52295f, -77.0045547f), 2.00f);
            for (int i = 0; i < Bin.Count(); i++)
            {
                Prop ThisTrash = Bin[i];
                if (Function.Call<int>(Hash.GET_HASH_KEY, "prop_bin_11a") == ThisTrash.Model)
                    ThisTrash.Delete();
            }
        }
        private void TempAgency_02_BuildCluber(Ped Peddy)
        {
            PedMultiTask MyCluber = new PedMultiTask
            {
                MyPed = new Ped(Peddy.Handle),
                MySwitch_01 = false,
                MySwitch_02 = false,
                MySwitch_03 = false,
                MyFloat_01 = 0.00f,
                MyTarget_01 = Vector3.Zero,
                MyTask_01 = -1,
                MyTask_02 = -1,
                MyTask_03 = -1,
                MyTimer_01 = -1,
                MyTimer_02 = -1
            };
            MultiPed.Add(MyCluber);
        }
        private void TempAgency_02_CleanOutClub()
        {
            for (int i = 0; i < MultiPed.Count; i++)
            {
                if (MultiPed[i].MyTask_02 != -1)
                    Function.Call(Hash.DELETE_CHECKPOINT, MultiPed[i].MyTask_02);
            }
        }
        private void TempAgency_02_RunForTHeHills()
        {
            iKeepDance = Game.GameTime + 1000;
            List<string> DancinFool = new List<string>();
            int iGetDrink = -1;

            if (BeOnOff[0] && RandInt(0, 20) < 15)
                iGetDrink = RandInt(0, MultiPed.Count - 1);

            if (fMission_03 > 0.95f)
            {
                TempAgency_02_CleanOutClub();
                float fMoreAnger = 0.00f;
                Ped PAngry = null;
                for (int i = 0; i < MultiPed.Count; i++)
                {
                    if (MultiPed[i].MyFloat_01 > fMoreAnger)
                    {
                        fMoreAnger = MultiPed[i].MyFloat_01;
                        PAngry = MultiPed[i].MyPed;
                    }
                }
                MultiPed.Clear();
                ArmsRegulator(PAngry, 4);
                AttackThePlayer(PAngry, false);

                for (int i = 0; i < MishPed.Count; i++)
                    FightingXPed(MishPed[i], PAngry);

                iMissionSeq = 7;
            }
            else
            {
                for (int i = 0; i < MultiPed.Count; i++)
                {
                    bool bMale = false;
                    int iRan = RandInt(1, 3);

                    if (MultiPed[i].MySwitch_01)
                    {
                        if (MultiPed[i].MySwitch_02)
                        {
                            if (MultiPed[i].MyPed.Position.DistanceTo(MultiPed[i].MyTarget_01) < 3.00f)
                            {
                                MultiPed[i].MySwitch_01 = false;
                                MultiPed[i].MySwitch_02 = false;
                                MultiPed[i].MySwitch_03 = false;
                            }
                            else
                            {
                                if (MultiPed[i].MyTask_03 > 8)
                                {
                                    if (Function.Call<int>(Hash.GET_NAVMESH_ROUTE_RESULT, MultiPed[i].MyPed.Handle) != 3)
                                    {
                                        MultiPed[i].MySwitch_01 = false;
                                        MultiPed[i].MySwitch_02 = false;
                                        MultiPed[i].MySwitch_03 = false;
                                    }
                                }
                                else
                                {
                                    WalkThisWay(MultiPed[i].MyPed, MultiPed[i].MyTarget_01, 1.00f);
                                    MultiPed[i].MyTask_03 += 1;
                                }
                            }
                        }
                        else
                        {
                            if (MultiPed[i].MyPed.Position.DistanceTo(VectorList_04[MultiPed[i].MyTask_01]) < 1.5f)
                            {
                                if (Game.Player.Character.Position.DistanceTo(VectorList_05[MultiPed[i].MyTask_01]) < 1.25f && BeOnOff[0])
                                {
                                    iMishText = 201;
                                    BeOnOff[0] = false;
                                    fMission_03 -= MultiPed[i].MyFloat_01;
                                    MultiPed[i].MyFloat_01 = 0.00f;
                                    Function.Call(Hash.DELETE_CHECKPOINT, MultiPed[i].MyTask_02);
                                    MultiPed[i].MyTask_02 = -1;
                                    MultiPed[i].MyTask_03 = -1;
                                    MultiPed[i].MyPed.Task.AchieveHeading(fList_03[MultiPed[i].MyTask_01], -1);
                                    TempAgency_02_HaveADrink(Game.Player.Character, MultiPed[i].MyPed, VectorList_05[MultiPed[i].MyTask_01], VectorList_04[MultiPed[i].MyTask_01]);
                                    AddTarget(vTarget_03, true, true, 1.00f, false, 93, MyLang.Maptext[74]);
                                    TheYellowCorona(vTarget_03, 1.00f);
                                    iList_02.Add(MultiPed[i].MyTask_01);
                                    MultiPed[i].MySwitch_02 = true;
                                    MultiPed[i].MyPed.Task.ClearAllImmediately();
                                    WalkThisWay(MultiPed[i].MyPed, MultiPed[i].MyTarget_01, 1.00f);
                                    iMissionSeq += 1;
                                }
                                else
                                {
                                    if (!MultiPed[i].MySwitch_03)
                                    {
                                        MultiPed[i].MySwitch_03 = true;
                                        MultiPed[i].MyTask_02 = MyCorona(VectorList_05[MultiPed[i].MyTask_01], 0.75f);
                                        Function.Call(Hash.TASK_TURN_PED_TO_FACE_ENTITY, MultiPed[i].MyPed.Handle, Game.Player.Character.Handle, -1);
                                    }
                                    fMission_03 += 0.01f;
                                    MultiPed[i].MyFloat_01 += 0.01f;
                                }
                            }
                            else
                            {
                                if (Function.Call<int>(Hash.GET_NAVMESH_ROUTE_RESULT, MultiPed[i].MyPed.Handle) != 3)
                                {
                                    if (MultiPed[i].MyTask_03 > 8)
                                    {
                                        MultiPed[i].MyPed.Task.ClearAll();
                                        iList_02.Add(MultiPed[i].MyTask_01);
                                        fMission_03 -= MultiPed[i].MyFloat_01;
                                        MultiPed[i].MyFloat_01 = 0.00f;
                                        if (MultiPed[i].MyTask_02 != -1)
                                            Function.Call(Hash.DELETE_CHECKPOINT, MultiPed[i].MyTask_02);
                                        MultiPed[i].MyTask_02 = -1;
                                        MultiPed[i].MyPed.Task.ClearAllImmediately();
                                        WalkThisWay(MultiPed[i].MyPed, MultiPed[i].MyTarget_01, 1.00f);
                                        MultiPed[i].MySwitch_02 = true;
                                    }
                                    else
                                    {
                                        WalkThisWay(MultiPed[i].MyPed, VectorList_04[MultiPed[i].MyTask_01], 1.00f);
                                        MultiPed[i].MyTask_03 += 1;
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        if (i == iGetDrink && iList_02.Count > 0)
                        {
                            MultiPed[i].MyPed.Task.ClearAllImmediately();
                            MultiPed[i].MyTarget_01 = MultiPed[i].MyPed.Position;
                            int iQue = RandInt(0, iList_02.Count - 1);
                            MultiPed[i].MyTask_01 = iList_02[iQue];
                            WalkThisWay(MultiPed[i].MyPed, VectorList_04[MultiPed[i].MyTask_01], 1.00f);
                            iList_02.RemoveAt(iQue);
                            MultiPed[i].MySwitch_01 = true;
                            MultiPed[i].MyTask_03 = -1;
                        }
                        else if (MultiPed[i].MyPed.IsFleeing)
                            WalkThisWay(MultiPed[i].MyPed, vTarget_02, 2.00f);
                        else if (MultiPed[i].MyPed.Position.DistanceTo(vTarget_02) < 2.50f)
                        {
                            MultiPed[i].MyPed.Position = vTarget_01;
                            MultiPed.RemoveAt(i);
                        }
                        else if (!Function.Call<bool>(Hash.GET_IS_TASK_ACTIVE, MultiPed[i].MyPed.Handle, 134))
                        {
                            MultiPed[i].MyPed.Task.ClearAll();

                            if (MultiPed[i].MyPed.Gender == Gender.Male)
                                bMale = true;

                            DancinFool = DanceList(bMale, iRan);

                            ForceAnim(MultiPed[i].MyPed, DancinFool[0], DancinFool[1], MultiPed[i].MyPed.Position, MultiPed[i].MyPed.Rotation);
                        }
                    }
                }
            }
        }
        private void TempAgency_02_HaveADrink(Ped BarStaff, Ped Drinker, Vector3 Bar, Vector3 Cust)
        {
            LogThis("TempAgency_02_HaveADrink");
            Script.Wait(1000);

            BarStaff.Task.ClearAllImmediately();
            Drinker.Task.ClearAllImmediately();

            while (Drinker.Position.DistanceTo(Cust) > 1.00f)
            {
                WalkThisWay(Drinker, Cust, 1.00f);
                Script.Wait(500);
            }
            while (BarStaff.Position.DistanceTo(Bar) > 1.50f)
            {
                WalkThisWay(BarStaff, Bar, 1.00f);
                Script.Wait(500);
            }

            BarStaff.Task.ClearAllImmediately();
            Drinker.Task.ClearAllImmediately();

            BarStaff.Task.AchieveHeading(Drinker.Heading - 180.00f, -1);
            Script.Wait(3000);

            ForceAnimOnce(Drinker, "anim@amb@nightclub@mini@drinking@bar@drink@one", "one_player", Drinker.Position, Drinker.Rotation);
            ForceAnimOnce(BarStaff, "anim@amb@nightclub@mini@drinking@bar@drink@one", "one_bartender", BarStaff.Position, BarStaff.Rotation);

            Script.Wait(1000);

            while (Function.Call<bool>(Hash.GET_IS_TASK_ACTIVE, BarStaff.Handle, 134))
                Script.Wait(100);

            BarStaff.Task.ClearAllImmediately();
        }
        private void TempAgency_03_TrackDump()
        {
            List<Vehicle> Vamos = new List<Vehicle>();
            bool bLastOne = false;

            for (int i = 0; i < VehicleList_01.Count; i++)
            {
                if (VehicleList_01[i].Position.DistanceTo(new Vector3(-1267.219f, -2981.585f, -44.04432f)) < 3.50f)
                {
                    if (VehicleList_01[i] != VehTrackin_01 && VehicleList_01[i] != VehTrackin_02)
                        Vamos.Add(new Vehicle(VehicleList_01[i].Handle));
                }

            }
            if (Vamos.Count > 3)
            {
                if (iMissionVar_01 == 3)
                    bLastOne = true;

                int iPass = 0;
                while (iPass < 4)
                {
                    Script.Wait(1000);
                    for (int i = 0; i < Vamos.Count; i++)
                        Vamos[i].Alpha = 120;
                    VehTrackin_01.Alpha = 120;
                    Script.Wait(500);
                    for (int i = 0; i < Vamos.Count; i++)
                        Vamos[i].Alpha = 255;
                    VehTrackin_01.Alpha = 255;
                    iPass += 1;
                }
                if (bLastOne)
                {
                    for (int i = 0; i < Vamos.Count; i++)
                    {
                        Vector3 MyOffSett = Function.Call<Vector3>(Hash.GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS, VehTrackin_01.Handle, Vamos[i].Position.X, Vamos[i].Position.Y, Vamos[i].Position.Z);
                        Function.Call(Hash.ATTACH_ENTITY_TO_ENTITY, Vamos[i].Handle, VehTrackin_01.Handle, 42, MyOffSett.X, MyOffSett.Y, MyOffSett.Z, Vamos[i].Rotation.X, Vamos[i].Rotation.Y, Vamos[i].Rotation.Z, false, false, true, false, 2, true);
                    }
                    WarptoAnyVeh(VehTrackin_01, Game.Player.Character, 1);
                    if (VehTrackin_01.CurrentBlip.Exists())
                        VehTrackin_01.CurrentBlip.Remove();
                    if (VehTrackin_02.CurrentBlip.Exists())
                        VehTrackin_02.CurrentBlip.Remove();
                }
                else
                {
                    for (int i = 0; i < Vamos.Count; i++)
                    {
                        Vector3 MyOffSett = Function.Call<Vector3>(Hash.GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS, VehTrackin_01.Handle, Vamos[i].Position.X, Vamos[i].Position.Y, Vamos[i].Position.Z);
                        Function.Call(Hash.ATTACH_ENTITY_TO_ENTITY, Vamos[i].Handle, VehTrackin_01.Handle, 42, MyOffSett.X, MyOffSett.Y, MyOffSett.Z, Vamos[i].Rotation.X, Vamos[i].Rotation.Y, Vamos[i].Rotation.Z, false, false, true, false, 2, true);
                        Vamos[i].Alpha = 255;
                    }
                }
                VehTrackin_01.Alpha = 255;
                VehTrackin_01.Position = VectorList_01[iMissionVar_01];
                VehTrackin_01.Heading = 224.6757f;
                iMissionVar_01 += 1;

                if (bLastOne)
                {
                    for (int i = 0; i < VehicleList_01.Count; i++)
                    {
                        if (VehicleList_01[i].Model == VehicleHash.Dump)
                        {
                            if (VehicleList_01[i].IsSeatFree(VehicleSeat.Driver))
                                NPCSpawn("s_m_y_armymech_01", VehicleList_01[i].Position, 0.00f, true, 220, 0, 1, VehicleList_01[i], 0, false, 0, 0, "");
                        }
                        else
                            VehicleList_01[i].Detach();
                    }
                    iMissionSeq += 1;
                }
                else
                {
                    VehTrackin_01 = VehicleSpawn("Dump", new Vector3(-1267.00818f, -2979.18091f, -48.1399612f), -0.0233801287f, false, false, false, false, 1, 0, 5, MyLang.Maptext[76], 0, false);
                    MishVic.Add(new Vehicle(VehTrackin_01.Handle));
                }
            }
        }
        private void TempAgency_03_HangerDupes()
        {
            LogThis("TempAgency_03_HangerDupes");
            List<Vector3> DupePos = new List<Vector3>
            {
                new Vector3(-1273.75f, -3033.00f, -49.1642036f),
                new Vector3(-1269.50f, -3033.00f, -49.1656837f),
                new Vector3(-1264.50f, -3033.00f, -49.1654396f),
                new Vector3(-1260.00f, -3033.00f, -49.1641922f),
                new Vector3(-1260.00f, -3025.50f, -49.1629486f),
                new Vector3(-1264.50f, -3025.50f, -49.1650314f),
                new Vector3(-1269.50f, -3025.50f, -49.1646805f),
                new Vector3(-1273.75f, -3025.50f, -49.1651878f),
                new Vector3(-1273.75f, -3018.25f, -49.165226f),
                new Vector3(-1269.50f, -3018.25f, -49.1641884f),
                new Vector3(-1264.50f, -3018.25f, -49.165062f),
                new Vector3(-1260.00f, -3018.25f, -49.1651382f),
                new Vector3(-1260.00f, -3010.75f, -49.1641541f),
                new Vector3(-1264.50f, -3010.75f, -49.164875f),
                new Vector3(-1269.50f, -3010.75f, -49.1651001f),
                new Vector3(-1273.75f, -3010.75f, -49.1651039f)
            };


            for (int i = 0; i < DupePos.Count; i++)
                VehicleSpawn("elegy", DupePos[i], 0.00f, false, false, false, false, 2, 14, 0, "", 0, true);

            VehicleSpawn("BULLDOZER", vTarget_03, fMission_02, false, false, false, false, 0, 0, 0, "", 2, false);

            Vehicle Dump = VehicleSpawn("Dump", new Vector3(-1267.00818f, -2979.18091f, -48.1399612f), -0.0233801287f, false, false, false, false, 1, 0, 5, MyLang.Maptext[76], 1, false);
            MishVic.Add(new Vehicle(Dump.Handle));
            TempAgency_03_HangerProps();
        }
        private void TempAgency_03_HangerProps()
        {
            LogThis("TempAgency_03_HangerProps");

            List<string> s_List = new List<string>();
            List<Vector3> Pos_List = new List<Vector3>();
            List<Vector3> Roll_List = new List<Vector3>();

            s_List.Add("xs_prop_arena_jump_s_01a_sf");
            Pos_List.Add(new Vector3(-1269.00061f, -2987.99976f, -49.5800133f));
            Roll_List.Add(new Vector3(0f, -0f, 90.0000305f));

            s_List.Add("xs_prop_arena_jump_s_01a_sf");
            Pos_List.Add(new Vector3(-1265.00012f, -2988.00024f, -49.5800323f));
            Roll_List.Add(new Vector3(0f, 0f, 89.9999847f));

            s_List.Add("sm_prop_smug_cont_01a");
            Pos_List.Add(new Vector3(-1223.34656f, -2983.521f, -49.4882088f));
            Roll_List.Add(new Vector3(0f, 0f, -86.9425354f));

            s_List.Add("sm_prop_smug_crate_l_antiques");
            Pos_List.Add(new Vector3(-1237.84485f, -3017.78809f, -49.4900513f));
            Roll_List.Add(new Vector3(0f, -0f, -179.749634f));

            s_List.Add("sm_prop_smug_crate_l_bones");
            Pos_List.Add(new Vector3(-1240.39331f, -3017.87109f, -49.4900513f));
            Roll_List.Add(new Vector3(0f, -0f, 178.602859f));

            s_List.Add("sm_prop_smug_crate_l_fake");
            Pos_List.Add(new Vector3(-1237.14258f, -3011.97144f, -49.4900169f));
            Roll_List.Add(new Vector3(0f, 0f, -89.7429733f));

            s_List.Add("sm_prop_smug_crate_l_hazard");
            Pos_List.Add(new Vector3(-1237.15356f, -3009.50244f, -49.4899788f));
            Roll_List.Add(new Vector3(0f, 0f, -89.7429733f));

            s_List.Add("sm_prop_smug_crate_l_jewellery");
            Pos_List.Add(new Vector3(-1242.77014f, -3006.91821f, -49.4899979f));
            Roll_List.Add(new Vector3(0f, -0f, 90.5718384f));

            s_List.Add("sm_prop_smug_crate_l_medical");
            Pos_List.Add(new Vector3(-1242.93164f, -3009.39648f, -49.4900055f));
            Roll_List.Add(new Vector3(0f, -0f, 90.8473129f));

            s_List.Add("sm_prop_smug_crate_l_narc");
            Pos_List.Add(new Vector3(-1242.8949f, -3011.90527f, -49.4900513f));
            Roll_List.Add(new Vector3(0f, -0f, 90.8473129f));

            s_List.Add("sm_prop_smug_crate_l_tobacco");
            Pos_List.Add(new Vector3(-1236.98523f, -3006.91919f, -49.4897461f));
            Roll_List.Add(new Vector3(0f, -0f, -90.2349396f));

            s_List.Add("sm_prop_smug_crate_m_antiques");
            Pos_List.Add(new Vector3(-1239.61304f, -3001.05786f, -49.4898033f));
            Roll_List.Add(new Vector3(0f, 0f, 0.0608037151f));

            s_List.Add("sm_prop_smug_crate_m_bones");
            Pos_List.Add(new Vector3(-1236.90576f, -3001.05664f, -49.4896851f));
            Roll_List.Add(new Vector3(0f, 0f, 0.0608037151f));

            s_List.Add("sm_prop_smug_crate_m_fake");
            Pos_List.Add(new Vector3(-1234.37158f, -3001.05469f, -49.4896851f));
            Roll_List.Add(new Vector3(0f, 0f, 0.356079221f));

            s_List.Add("sm_prop_smug_crate_m_hazard");
            Pos_List.Add(new Vector3(-1230.43408f, -3005.19019f, -49.4896851f));
            Roll_List.Add(new Vector3(0f, -0f, -90.4965286f));

            s_List.Add("sm_prop_smug_crate_m_jewellery");
            Pos_List.Add(new Vector3(-1230.42468f, -3007.86548f, -49.4896851f));
            Roll_List.Add(new Vector3(0f, 0f, -89.5708466f));

            s_List.Add("sm_prop_smug_crate_m_medical");
            Pos_List.Add(new Vector3(-1229.60645f, -3013.51978f, -49.4896851f));
            Roll_List.Add(new Vector3(0f, 0f, -89.6288147f));

            s_List.Add("sm_prop_smug_crate_m_narc");
            Pos_List.Add(new Vector3(-1229.60522f, -3016.04346f, -49.4896851f));
            Roll_List.Add(new Vector3(0f, 0f, -89.6288147f));

            s_List.Add("sm_prop_smug_crate_m_tobacco");
            Pos_List.Add(new Vector3(-1224.99756f, -3014.08276f, -49.4896851f));
            Roll_List.Add(new Vector3(0f, -0f, -90.3560791f));

            for (int i = 0; i < Pos_List.Count; i++)
                BuildProp(s_List[i], Pos_List[i], Roll_List[i], true, false);

        }
        private void TempAgency_03_TruckOff()
        {
            for (int i = 0; i < PedList_01.Count; i++)
                DriveToDest(PedList_01[i].CurrentVehicle, VectorList_02[i], PedList_01[i], 10.00f, 0);
        }
        private void TempAgency_03_DupeCount()
        {
            for (int i = 0; i < VehicleList_01.Count; i++)
            {
                if (VehicleList_01[i].Model == Function.Call<int>(Hash.GET_HASH_KEY, "elegy"))
                {
                    if (VehicleList_01[i].Position.DistanceTo(VehTrackin_01.Position) < 65.00f)
                        iCashReward += 10000;
                }
            }
        }
        private void TempAgency_04_CasWeaponSkit()
        {
            LogThis("TempAgency_04_CasWeaponSkit");
            List<string> s_List = new List<string>();
            List<Vector3> Pos_List = new List<Vector3>();
            List<Vector3> Roll_List = new List<Vector3>();

            s_List.Add("w_sg_assaultshotgun");
            Pos_List.Add(new Vector3(2545.89355f, -275.365295f, -58.3848877f));
            Roll_List.Add(new Vector3(90.00f, 93.8479309f, 0.00f));
            s_List.Add("w_sg_bullpupshotgun");
            Pos_List.Add(new Vector3(2545.75317f, -274.823669f, -58.1840553f));
            Roll_List.Add(new Vector3(-1.1739387e-06f, -103.999596f, -4.15173674f));
            s_List.Add("w_sg_heavyshotgun");
            Pos_List.Add(new Vector3(2545.91846f, -276.031555f, -58.4080276f));
            Roll_List.Add(new Vector3(82.3188934f, 86.8486404f, -179.999893f));
            s_List.Add("w_sg_pumpshotgun");
            Pos_List.Add(new Vector3(2545.74683f, -275.28479f, -58.3580399f));
            Roll_List.Add(new Vector3(89.0116653f, 97.3485565f, -179.999893f));
            s_List.Add("w_sr_marksmanrifle_luxe");
            Pos_List.Add(new Vector3(2546.19897f, -276.064301f, -58.4580803f));
            Roll_List.Add(new Vector3(-90.00f, -88.3821411f, 0.00f));
            s_List.Add("w_sr_heavysniper");
            Pos_List.Add(new Vector3(2545.74829f, -275.0495f, -58.3127403f));
            Roll_List.Add(new Vector3(-1.7075472e-06f, -67.9997787f, 136.381866f));
            s_List.Add("w_sb_smg_luxe");
            Pos_List.Add(new Vector3(2546.20142f, -274.816589f, -58.4481735f));
            Roll_List.Add(new Vector3(89.0355072f, -165.617645f, -34.99897f));
            s_List.Add("w_sb_pdw");
            Pos_List.Add(new Vector3(2545.72339f, -275.481598f, -58.3581886f));
            Roll_List.Add(new Vector3(90.00f, 44.3887863f, 0.00f));
            s_List.Add("w_sb_microsmg_luxe");
            Pos_List.Add(new Vector3(2546.10791f, -274.962585f, -58.3630333f));
            Roll_List.Add(new Vector3(90.00f, 89.3884735f, 0.00f));
            s_List.Add("w_sb_gusenberg");
            Pos_List.Add(new Vector3(2546.06055f, -275.701691f, -58.3607788f));
            Roll_List.Add(new Vector3(-1.6008255e-07f, 4.99999905f, 86.3419571f));
            s_List.Add("w_sb_assaultsmg");
            Pos_List.Add(new Vector3(2545.99243f, -275.792053f, -58.2390366f));
            Roll_List.Add(new Vector3(82.0028381f, -112.999687f, -0.267053485f));
            s_List.Add("w_pi_stungun");
            Pos_List.Add(new Vector3(2545.79565f, -275.031219f, -58.4463501f));
            Roll_List.Add(new Vector3(85.9494247f, -127.26741f, -6.04322759e-06f));
            s_List.Add("w_pi_sns_pistol");
            Pos_List.Add(new Vector3(2546.04272f, -274.99411f, -58.4657516f));
            Roll_List.Add(new Vector3(-89.0000458f, -121.168396f, -180.00f));
            s_List.Add("w_pi_pistol_luxe");
            Pos_List.Add(new Vector3(2545.82642f, -275.455688f, -58.445755f));
            Roll_List.Add(new Vector3(90.00f, 127.488113f, 0.00f));
            s_List.Add("w_pi_pistol");
            Pos_List.Add(new Vector3(2545.86401f, -275.164948f, -58.445755f));
            Roll_List.Add(new Vector3(89.0043564f, -148.496658f, 174.000092f));
            s_List.Add("w_pi_heavypistol");
            Pos_List.Add(new Vector3(2545.99316f, -275.525726f, -58.4336166f));
            Roll_List.Add(new Vector3(79.0040894f, -90.0001831f, 14.5752745f));
            s_List.Add("w_pi_flaregun");
            Pos_List.Add(new Vector3(2545.93604f, -275.049866f, -58.4563332f));
            Roll_List.Add(new Vector3(89.0010223f, 0.999995351f, -23.1672688f));
            s_List.Add("w_pi_appistol");
            Pos_List.Add(new Vector3(2545.93335f, -275.680267f, -58.4322815f));
            Roll_List.Add(new Vector3(-81.6061096f, -98.0002213f, 9.91467857f));
            s_List.Add("w_mg_minigun");
            Pos_List.Add(new Vector3(2545.86475f, -276.285889f, -58.3389816f));
            Roll_List.Add(new Vector3(-40.0005836f, 12.9999914f, 13.7287359f));
            s_List.Add("w_mg_mg");
            Pos_List.Add(new Vector3(2545.90796f, -274.775269f, -58.2189941f));
            Roll_List.Add(new Vector3(8.53773599e-07f, -115.999908f, -11.2055416f));
            s_List.Add("w_me_hatchet");
            Pos_List.Add(new Vector3(2546.07715f, -275.347565f, -58.3256454f));
            Roll_List.Add(new Vector3(89.4898605f, 122.000175f, 103.440681f));
            s_List.Add("w_me_bat");
            Pos_List.Add(new Vector3(2545.79419f, -275.838562f, -58.5338631f));
            Roll_List.Add(new Vector3(-5.00000048f, -23.0000687f, -3.62017989f));
            s_List.Add("w_lr_rpg");
            Pos_List.Add(new Vector3(2545.81665f, -275.983185f, -58.2445793f));
            Roll_List.Add(new Vector3(4.268868e-07f, 69.9999924f, -18.6529751f));
            s_List.Add("w_lr_grenadelauncher");
            Pos_List.Add(new Vector3(2546.07056f, -275.628326f, -58.1718636f));
            Roll_List.Add(new Vector3(-24f, -3.00000715f, 104.484489f));
            s_List.Add("w_ar_musket");
            Pos_List.Add(new Vector3(2545.93994f, -275.265839f, -58.1728325f));
            Roll_List.Add(new Vector3(33.9999847f, -64.9998779f, -74.9909821f));

            for (int i = 0; i < Pos_List.Count; i++)
                BuildProp(s_List[i], Pos_List[i], Roll_List[i], true, false);

            GetWeaps(true);

            TempAgency_04_AddGoons();

            TempAgency_04_CasDoors();
        }
        private void TempAgency_04_CasDoors()
        {
            Script.Wait(1000);
            LogThis("TempAgency_04_CasDoors");

            List<Vector3> MyPosList = new List<Vector3>
            {
                new Vector3(2506.7207f, -276.139709f, -58.5731506f),
                new Vector3(2506.7207f, -274.139771f, -58.5731506f),
                new Vector3(2511.61206f, -282.389862f, -58.5731506f),
                new Vector3(2523.92749f, -274.689728f, -58.5731506f),
                new Vector3(2526.82837f, -253.566864f, -60.1737862f),
                new Vector3(2509.74316f, -266.550842f, -58.5731506f),
                new Vector3(2528.2832f, -266.550842f, -58.5731506f),
                new Vector3(2524.82861f, -253.566864f, -60.1737862f),
                new Vector3(2506.7207f, -270.510681f, -58.5731506f),
                new Vector3(2506.7207f, -268.510742f, -58.5731506f),
                new Vector3(2500.83472f, -271.223907f, -58.5731659f),
                new Vector3(2500.93457f, -278.372498f, -58.5731659f)
            };

            for (int i = 0; i < MyPosList.Count(); i++)
                DoorsNear(MyPosList[i], 1.95f, true);
        }
        private void TempAgency_04_Discises(int iped)
        {
            LogThis("TempAgency_04_Discises, iped == " + iped);

            Ped Peddy = Game.Player.Character;

            if (iped == 1)
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 1, 1, 0, 2);     //1 
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 2, 4, 0, 2);     //2 
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 3, 18, 10, 2);     //3 Torso
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 4, 6, 7, 2);     //4 Legs
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 5, 0, 0, 2);     //5 Hands
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 6, 6, 2, 2);     //6 shoes
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 7, 0, 0, 2);     //7 Scarf
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 8, 0, 0, 2);     //8 AccTop
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 9, 0, 0, 2);     //9 Armor
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 10, 0, 0, 2);     //10 
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 11, 3, 15, 2);    //11 Top2
            }      //Franklin
            else if (iped == 2)
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 1, 0, 0, 2);     //1 
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 2, 0, 0, 2);     //2 
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 3, 23, 7, 2);     //3 Torso
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 4, 0, 3, 2);     //4 Legs
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 5, 0, 0, 2);     //5 Hands
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 6, 0, 0, 2);     //6 shoes
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 7, 0, 0, 2);     //7 Scarf
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 8, 0, 0, 2);     //8 AccTop
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 9, 0, 0, 2);     //9 Armor
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 10, 0, 0, 2);     //10 
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 11, 5, 8, 2);    //11 Top2
            }      //Michael
            else if (iped == 3)
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 1, 0, 0, 2);     //1 
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 2, 5, 0, 2);     //2 
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 3, 26, 3, 2);     //3 Torso
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 4, 21, 3, 2);     //4 Legs
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 5, 0, 0, 2);     //5 Hands
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 6, 0, 0, 2);     //6 shoes
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 7, 0, 0, 2);     //7 Scarf
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 8, 0, 0, 2);     //8 AccTop
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 9, 0, 0, 2);     //9 Armor
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 10, 0, 0, 2);     //10 
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 11, 0, 0, 2);    //11 Top2
            }       //Trevor
            else if (iped == 4)
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 1, 0, 0, 2);     //1 
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 2, 35, 0, 2);     //2 
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 3, 9, 0, 2);     //3 Torso
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 4, 133, 0, 2);     //4 Legs
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 5, 0, 0, 2);     //5 Hands
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 6, 101, 0, 2);     //6 shoes
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 7, 0, 0, 2);     //7 Scarf
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 8, 193, 0, 2);     //8 AccTop
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 9, 0, 0, 2);     //9 Armor
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 10, 0, 0, 2);     //10 
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 11, 303, 0, 2);    //11 Top2
            }      //MpFemale
            else if (iped == 5)
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 1, 0, 0, 2);     //1 
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 2, 57, 0, 2);     //2 
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 3, 11, 0, 2);     //3 Torso
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 4, 126, 0, 2);     //4 Legs
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 5, 0, 0, 2);     //5 Hands
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 6, 97, 0, 2);     //6 shoes
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 7, 0, 0, 2);     //7 Scarf
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 8, 157, 0, 2);     //8 AccTop
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 9, 0, 0, 2);     //9 Armor
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 10, 0, 0, 2);     //10 
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 11, 290, 0, 2);    //11 Top2
            }      //MpMale
            else
            {

            }

        }
        private void TempAgency_04_AddGoons()
        {
            LogThis("TempAgency_04_AddGoons");

            List<Vector3> Cleaners = new List<Vector3>();
            List<Vector3> Patrolls = new List<Vector3>();
            List<Vector3> Chairs = new List<Vector3>();

            Cleaners.Add(new Vector3(2495.053f, -282.5657f, -58.70786f));
            Cleaners.Add(new Vector3(2480.569f, -268.4429f, -58.27794f));
            Cleaners.Add(new Vector3(2496.782f, -260.0472f, -59.10851f));


            Chairs.Add(new Vector3(2544.8667f, -275.690979f, -59.7231636f));
            Chairs.Add(new Vector3(2538.56274f, -275.501831f, -59.7092514f));
            Chairs.Add(new Vector3(2538.6123f, -279.403137f, -59.7092476f));
            Chairs.Add(new Vector3(2533.35693f, -271.920441f, -59.7231636f));
            Chairs.Add(new Vector3(2534.81738f, -279.216278f, -59.7231636f));

            for (int i = 0; i < Chairs.Count(); i++)
            {
                Prop[] Pops = World.GetNearbyProps(Chairs[i], 1.00f);
                for (int ii = 0; ii < Pops.Count(); ii++)
                {
                    if (PropExists(Pops, ii))
                    {
                        Ped Psit = null;
                        if (Pops[ii].Model == Function.Call<int>(Hash.GET_HASH_KEY, "v_corp_offchair"))
                        {
                            Psit = NPCSpawn("s_m_y_westsec_02", Pops[ii].Position, Pops[ii].Heading - 180f, false, 130, 0, 0, null, 0, false, 0, 0, "");
                            PedSitHere(Psit, Pops[ii], 9);
                        }
                    }
                }
            }
            NPCSpawn("s_m_y_valet_01", vTarget_03, fMission_02, false, 0, 9, 0, null, 0, false, 0, 0, "");
        }
        private void TempAgency_05_AddBlocks()
        {
            LogThis("TempAgency_05_AddBlocks");
            List<Vector3> Pos_List = new List<Vector3>();
            List<Vector3> Roll_List = new List<Vector3>();
            Pos_List.Add(new Vector3(394.715f, 4835.46f, -59.9950f));
            Roll_List.Add(new Vector3(0.00f, 0.00f, 74.896f));
            Pos_List.Add(new Vector3(341.533875f, 4861.53369f, -59.9950676f));
            Roll_List.Add(new Vector3(0.00f, 0.00f, -23.196804f));
            Pos_List.Add(new Vector3(343.169312f, 4860.62549f, -59.9950562f));
            Roll_List.Add(new Vector3(0.00f, 0.00f, -34.0560303f));
            Pos_List.Add(new Vector3(327.744598f, 4872.64063f, -59.9948387f));
            Roll_List.Add(new Vector3(0.00f, 0.00f, 13.9749603f));
            Pos_List.Add(new Vector3(403.23938f, 4837.68652f, -63.5947685f));
            Roll_List.Add(new Vector3(0.00f, 0.00f, 58.5801811f));
            Pos_List.Add(new Vector3(395.424438f, 4836.42725f, -59.9950409f));
            Roll_List.Add(new Vector3(0.00f, 0.00f, 26.4402275f));
            Pos_List.Add(new Vector3(492.315613f, 4820.4585f, -59.3889122f));
            Roll_List.Add(new Vector3(0.00f, -0.00f, 163.980545f));
            Pos_List.Add(new Vector3(490.51709f, 4820.93115f, -59.3875427f));
            Roll_List.Add(new Vector3(0.00f, -0.00f, 166.788696f));
            Pos_List.Add(new Vector3(475.551727f, 4831.84131f, -59.989212f));
            Roll_List.Add(new Vector3(0.00f, 0.00f, -8.04261684f));
            Pos_List.Add(new Vector3(456.487671f, 4822.40283f, -59.9969139f));
            Roll_List.Add(new Vector3(0.00f, -0.00f, -144.970459f));
            Pos_List.Add(new Vector3(457.88739f, 4823.59717f, -59.9960747f));
            Roll_List.Add(new Vector3(0.00f, -0.00f, -133.85202f));
            Pos_List.Add(new Vector3(458.985107f, 4825.06104f, -59.9943161f));
            Roll_List.Add(new Vector3(0.00f, 0.00f, -119.759209f));
            Pos_List.Add(new Vector3(378.107513f, 4827.20264f, -59.9947395f));
            Roll_List.Add(new Vector3(0.00f, 0.00f, 138.187225f));
            Pos_List.Add(new Vector3(378.454865f, 4832.31055f, -59.9947395f));
            Roll_List.Add(new Vector3(0.00f, -0.00f, -162.840805f));
            Pos_List.Add(new Vector3(336.431427f, 4844.31152f, -59.9948387f));
            Roll_List.Add(new Vector3(0.00f, 0.00f, 76.3151855f));
            Pos_List.Add(new Vector3(335.900055f, 4842.53467f, -59.9948387f));
            Roll_List.Add(new Vector3(0.00f, 0.00f, 70.8418884f));
            Pos_List.Add(new Vector3(335.359863f, 4840.77002f, -59.9948387f));
            Roll_List.Add(new Vector3(0.00f, 0.00f, 74.346199f));
            Pos_List.Add(new Vector3(340.701355f, 4846.70996f, -59.9948387f));
            Roll_List.Add(new Vector3(0.00f, -0.00f, 162.468506f));
            Pos_List.Add(new Vector3(342.457184f, 4846.1543f, -59.9948387f));
            Roll_List.Add(new Vector3(0.00f, -0.00f, 161.489944f));
            Pos_List.Add(new Vector3(480.367554f, 4784.0752f, -59.3893051f));
            Roll_List.Add(new Vector3(0.00f, 0.00f, 41.3175125f));
            Pos_List.Add(new Vector3(481.612946f, 4785.46338f, -59.3893051f));
            Roll_List.Add(new Vector3(0.00f, 0.00f, 54.4668617f));
            Pos_List.Add(new Vector3(482.561279f, 4787.07129f, -59.3893051f));
            Roll_List.Add(new Vector3(0.00f, 0.00f, 64.8602142f));
            Pos_List.Add(new Vector3(478.077057f, 4786.6416f, -59.3893051f));
            Roll_List.Add(new Vector3(0.00f, -0.00f, 135.803772f));
            Pos_List.Add(new Vector3(476.568909f, 4787.65625f, -59.3893051f));
            Roll_List.Add(new Vector3(0.00f, -0.00f, 157.010147f));
            Pos_List.Add(new Vector3(494.674072f, 4770.61768f, -59.9890442f));
            Roll_List.Add(new Vector3(0.00f, -0.00f, -158.342758f));
            Pos_List.Add(new Vector3(492.703247f, 4770.31299f, -59.9892006f));
            Roll_List.Add(new Vector3(0.00f, -0.00f, -179.852386f));
            Pos_List.Add(new Vector3(502.467346f, 4799.10303f, -59.3886566f));
            Roll_List.Add(new Vector3(0.00f, 0.00f, -37.6204185f));
            Pos_List.Add(new Vector3(500.986267f, 4800.2124f, -59.3893929f));
            Roll_List.Add(new Vector3(0.00f, 0.00f, -36.6554871f));
            Pos_List.Add(new Vector3(499.45697f, 4801.21582f, -59.3893929f));
            Roll_List.Add(new Vector3(0.00f, 0.00f, -29.7129574f));
            Pos_List.Add(new Vector3(497.797668f, 4802.0957f, -59.3888092f));
            Roll_List.Add(new Vector3(0.00f, 0.00f, -26.5895519f));

            for (int i = 0; i < Pos_List.Count; i++)
                BuildProp("prop_plas_barier_01a", Pos_List[i], Roll_List[i], true, false);

            BuildProp("prop_inflatearch_01", new Vector3(482.492249f, 4812.09082f, -59.5458603f), new Vector3(0.00f, 0.00f, 11.00f), true, false);

        }
        private void TempAgency_05_RemoveDoors()
        {
            List<Vector3> ByDoors = new List<Vector3>
            {
                new Vector3(340.11f, 4861.208f, -59.61215f),
                new Vector3(344.5726f, 4857.786f, -59.61184f),
                new Vector3(395.1638f, 4834.494f, -59.61152f),
                new Vector3(356.0279f, 4841.44f, -59.61259f),
                new Vector3(455.519f, 4820.21f, -59.61078f)//doors to remove
            };

            for (int i = 0; i < ByDoors.Count; i++)
            {
                Prop[] Opensesme = World.GetNearbyProps(ByDoors[i], 5.50f);
                for (int ii = 0; ii < Opensesme.Count(); ii++)
                {
                    Prop ThisTrash = Opensesme[ii];
                    if (Function.Call<int>(Hash.GET_HASH_KEY, "xm_prop_cannon_room_door_02") == ThisTrash.Model || Function.Call<int>(Hash.GET_HASH_KEY, "xm_prop_facility_door_01") == ThisTrash.Model)
                        ThisTrash.Delete();
                }
            }
        }
        private void TempAgency_06_AddGoons()
        {
            LogThis("TempAgency_06_AddGoons");
            List<Vector3> Goon = new List<Vector3>();
            List<float> GoonHead = new List<float>();
            bool bSwitch = false;
            string MyGoon = "";
            //CostructionGoons
            Goon.Add(new Vector3(1306.938f, 5210.371f, -80.3287f)); GoonHead.Add(302.9738f);
            Goon.Add(new Vector3(1309.132f, 5211.627f, -79.46619f)); GoonHead.Add(123.8437f);
            Goon.Add(new Vector3(1266.205f, 5234.099f, -80.32871f)); GoonHead.Add(335.7401f);
            Goon.Add(new Vector3(1268.342f, 5233.802f, -80.32871f)); GoonHead.Add(96.11914f);
            Goon.Add(new Vector3(1137.212f, 5510.563f, -101.2616f)); GoonHead.Add(33.87546f);
            Goon.Add(new Vector3(1099.046f, 5527.323f, -101.3287f)); GoonHead.Add(24.43044f);
            Goon.Add(new Vector3(1098.062f, 5529.535f, -101.3287f)); GoonHead.Add(206.5871f);
            Goon.Add(new Vector3(705.9219f, 5879.918f, -152.3287f)); GoonHead.Add(4.627841f);
            Goon.Add(new Vector3(705.8505f, 5882.157f, -152.3287f)); GoonHead.Add(184.1738f);
            Goon.Add(new Vector3(707.8175f, 5881.49f, -151.9428f)); GoonHead.Add(115.1614f);
            Goon.Add(new Vector3(681.3373f, 5910.441f, -152.3287f)); GoonHead.Add(141.3932f);

            for (int i = 0; i < Goon.Count; i++)
            {
                if (bSwitch)
                    MyGoon = "s_m_y_construct_01";
                else
                    MyGoon = "s_m_y_construct_02";

                Ped ConW = NPCSpawn(MyGoon, Goon[i], GoonHead[i], false, 160, 32, 0, null, 3, false, 0, 0, "");
                MishPed.Add(new Ped(ConW.Handle));
                bSwitch = !bSwitch;
            }
            Npc_01 = NPCSpawn("s_m_m_gaffer_01", new Vector3(615.8879f, 5982.195f, -154.7342f), 122.4173f, false, 160, 33, 0, null, 3, false, 0, 0, "");
            MishPed.Add(new Ped(Npc_01.Handle));
            //OtherGoons
            Goon.Clear();
            GoonHead.Clear();
            Goon.Add(new Vector3(239.1968f, 6020.915f, -159.4276f)); GoonHead.Add(219.339f);
            Goon.Add(new Vector3(242.4085f, 6016.096f, -159.4022f)); GoonHead.Add(21.97007f);
            Goon.Add(new Vector3(247.625f, 5943.063f, -159.5079f)); GoonHead.Add(299.6284f);
            Goon.Add(new Vector3(352.4507f, 5916.985f, -158.1273f)); GoonHead.Add(185.4913f);
            Goon.Add(new Vector3(390.2784f, 5919.489f, -158.1243f)); GoonHead.Add(295.0339f);
            Goon.Add(new Vector3(425.6691f, 5898.668f, -158.1411f)); GoonHead.Add(138.6002f);
            Goon.Add(new Vector3(450.4256f, 5929.894f, -158.2726f)); GoonHead.Add(73.68127f);
            Goon.Add(new Vector3(427.4883f, 5941.192f, -158.272f)); GoonHead.Add(270.0465f);
            Goon.Add(new Vector3(327.4231f, 5944.21f, -158.2719f)); GoonHead.Add(325.9371f);
            Goon.Add(new Vector3(329.6937f, 5947.548f, -158.2719f)); GoonHead.Add(148.1353f);
            Goon.Add(new Vector3(337.3715f, 5955.014f, -158.2719f)); GoonHead.Add(277.3425f);
            Goon.Add(new Vector3(527.5824f, 5901.642f, -158.0846f)); GoonHead.Add(82.06773f);
            Goon.Add(new Vector3(525.0826f, 5917.692f, -158.0733f)); GoonHead.Add(331.5707f);
            Goon.Add(new Vector3(548.1776f, 5920.333f, -157.8977f)); GoonHead.Add(302.0384f);
            Goon.Add(new Vector3(536.5679f, 5935.516f, -158.0723f)); GoonHead.Add(226.2031f);

            for (int i = 0; i < Goon.Count; i++)
                NPCSpawn("mp_m_avongoon", Goon[i], GoonHead[i], true, 250, 34, 0, null, 3, false, 0, 0, "");

            Npc_02 = NPCSpawn("s_m_y_waretech_01", new Vector3(376.8057f, 5950.705f, -158.272f), 7.530061f, false, 160, 33, 0, null, 3, false, 0, 0, "");
            MishPed.Add(new Ped(Npc_02.Handle));
            //JugoGoons
            Goon.Clear();
            GoonHead.Clear();
            Goon.Add(new Vector3(575.5989f, 5964.111f, -158.0814f)); GoonHead.Add(183.9461f);
            Goon.Add(new Vector3(557.1788f, 5954.422f, -157.9881f)); GoonHead.Add(259.6692f);
            Goon.Add(new Vector3(490.8803f, 5937.244f, -158.2958f)); GoonHead.Add(246.5502f);
            Goon.Add(new Vector3(238.5329f, 6047.979f, -159.4268f)); GoonHead.Add(182.4382f);

            for (int i = 0; i < Goon.Count; i++)
                NPCSpawn("u_m_y_juggernaut_01", Goon[i], GoonHead[i], true, 300, 11, 0, null, 3, false, 0, 0, "");
            //ScienceGoons
            Goon.Clear();
            GoonHead.Clear();
            Goon.Add(new Vector3(259.2646f, 6153.511f, -161.0222f)); GoonHead.Add(171.4812f);
            Goon.Add(new Vector3(258.9621f, 6151.775f, -161.0222f)); GoonHead.Add(10.68928f);
            Goon.Add(new Vector3(280.3683f, 6139.214f, -154.4204f)); GoonHead.Add(164.0029f);
            Goon.Add(new Vector3(268.8067f, 6135.878f, -154.4204f)); GoonHead.Add(352.0036f);
            Goon.Add(new Vector3(210.776f, 6139.121f, -154.4204f)); GoonHead.Add(184.2138f);
            Goon.Add(new Vector3(244.3628f, 6144.983f, -146.4226f)); GoonHead.Add(0.677888f);
            Goon.Add(new Vector3(263.2607f, 6166.365f, -146.4225f)); GoonHead.Add(215.5028f);
            Goon.Add(new Vector3(264.4127f, 6163.958f, -146.4225f)); GoonHead.Add(32.97869f);
            Goon.Add(new Vector3(229.8948f, 6209.986f, -159.4223f)); GoonHead.Add(159.6417f);
            Goon.Add(new Vector3(261.0514f, 6215.176f, -159.4223f)); GoonHead.Add(221.9193f);
            Goon.Add(new Vector3(304.7452f, 6293.706f, -160.1471f)); GoonHead.Add(358.4538f);
            Goon.Add(new Vector3(304.0082f, 6302.98f, -160.1471f)); GoonHead.Add(50.90543f);

            int iDidScience = RandInt(0, Goon.Count - 1);
            for (int i = 0; i < Goon.Count; i++)
            {
                if (i == iDidScience)
                {
                    Npc_03 = NPCSpawn("s_m_m_scientist_01", Goon[0], GoonHead[0], false, 160, 35, 0, null, 3, false, 0, 0, "");
                    MishPed.Add(new Ped(Npc_03.Handle));
                }
                else
                {
                    Ped Sci = NPCSpawn("s_m_m_scientist_01", Goon[i], GoonHead[i], false, 160, 35, 0, null, 3, false, 0, 0, "");
                    MishPed.Add(new Ped(Sci.Handle));
                }
            }
        }
        private void TempAgency_06_AddVehs()
        {
            LogThis("TempAgency_06_AddVehs");
            List<string> s_List = new List<string>();
            List<Vector3> Pos_List = new List<Vector3>();
            List<Vector3> Roll_List = new List<Vector3>();

            Pos_List.Add(new Vector3(1264.63208f, 4813.87305f, -40.3282547f));
            Roll_List.Add(new Vector3(-0.717493057f, 3.79593587f, 72.4672241f));
            Pos_List.Add(new Vector3(1263.71338f, 4811.52246f, -40.1563721f));
            Roll_List.Add(new Vector3(-0.714827001f, 3.95013928f, 68.7811356f));
            Pos_List.Add(new Vector3(1262.89551f, 4809.03076f, -39.9866333f));
            Roll_List.Add(new Vector3(-0.149541602f, 4.11466217f, 71.9740219f));
            Pos_List.Add(new Vector3(534.000977f, 5906.86719f, -158.68869f));
            Roll_List.Add(new Vector3(-0.175746664f, 0.0824013501f, 141.091232f));
            Pos_List.Add(new Vector3(434.419922f, 5899.34521f, -158.765549f));
            Roll_List.Add(new Vector3(1.16542387f, 0.0566543825f, 141.4142f));
            Pos_List.Add(new Vector3(430.902649f, 5939.88916f, -158.87764f));
            Roll_List.Add(new Vector3(-0.258082926f, -0.00976648275f, 91.0728989f));
            Pos_List.Add(new Vector3(316.566101f, 5955.2334f, -158.869904f));
            Roll_List.Add(new Vector3(-0.0575229041f, 0.0868797526f, 169.462784f));
            Pos_List.Add(new Vector3(249.599838f, 6097.8999f, -160.026779f));
            Roll_List.Add(new Vector3(0f, 0f, 0f));

            for (int i = 0; i < Pos_List.Count - 1; i++)
                VehicleSpawn("caddy3", Pos_List[i], Roll_List[i].Z, false, false, false, false, 0, 0, 0, "", 0, false);
            VehicleSpawn("BMX", Pos_List[Pos_List.Count - 1], Roll_List[Pos_List.Count - 1].Z, false, false, false, false, 0, 0, 0, "", 0, false);
            //FormanStuff;
            Pos_List.Clear();
            Roll_List.Clear();

            s_List.Add("Bison");
            Pos_List.Add(new Vector3(713.638611f, 5884.9043f, -151.185654f));
            Roll_List.Add(new Vector3(6.46616411f, 1.80396986f, -86.1794281f));
            s_List.Add("Bison");
            Pos_List.Add(new Vector3(713.529785f, 5879.63477f, -151.239029f));
            Roll_List.Add(new Vector3(6.15290117f, 0.782989323f, -86.6256561f));
            s_List.Add("Bison");
            Pos_List.Add(new Vector3(713.271667f, 5875.20654f, -151.462128f));
            Roll_List.Add(new Vector3(9.10577202f, 1.28959644f, -86.3206253f));
            s_List.Add("bulldozer");
            Pos_List.Add(new Vector3(1303.30286f, 5229.73779f, -79.1020584f));
            Roll_List.Add(new Vector3(-8.36956501f, 0.533993244f, 131.134354f));
            s_List.Add("tiptruck");
            Pos_List.Add(new Vector3(1308.25195f, 5217.28467f, -79.3301392f));
            Roll_List.Add(new Vector3(-2.71315217f, -12.5126963f, 28.4812565f));
            s_List.Add("tiptruck2");
            Pos_List.Add(new Vector3(1261.35168f, 5238.57129f, -80.4373932f));
            Roll_List.Add(new Vector3(-0.744077206f, 0.0108090946f, -120.740524f));
            s_List.Add("mixer");
            Pos_List.Add(new Vector3(1149.10107f, 5502.99219f, -100.042847f));
            Roll_List.Add(new Vector3(-10.5581675f, 1.29395032f, 132.802414f));
            s_List.Add("rubble");
            Pos_List.Add(new Vector3(1106.43115f, 5520.51758f, -101.23893f));
            Roll_List.Add(new Vector3(-0.466586739f, 0.00501979515f, 50.219101f));
            s_List.Add("trailersmall");
            Pos_List.Add(new Vector3(713.779114f, 5868.40723f, -150.834854f));
            Roll_List.Add(new Vector3(7.67457676f, -10.8014879f, 5.02762794f));
            s_List.Add("trailersmall");
            Pos_List.Add(new Vector3(682.994141f, 5905.54883f, -152.441635f));
            Roll_List.Add(new Vector3(5.45184088f, 0.877506852f, 213.8103447f));
            s_List.Add("trailersmall");
            Pos_List.Add(new Vector3(678.406372f, 5911.36865f, -152.435654f));
            Roll_List.Add(new Vector3(5.03401041f, 0.88615948f, -140.980453f));

            for (int i = 0; i < Pos_List.Count; i++)
                VehicleSpawn(s_List[i], Pos_List[i], Roll_List[i].Z, false, false, false, false, 0, 0, 0, "", 0, false);

            TempAgency_06_AddGoons();
        }
        public int TempAgency_06_WhatsMyName(string sLabel)
        {
            int iAm = 0;

            if (sLabel == "ch_prop_toolbox_01a")
                iAm = 89;
            else if (sLabel == "prop_tool_wrench")
                iAm = 90;
            else if (sLabel == "ch_prop_ch_bag_02a")
                iAm = 91;
            else if (sLabel == "hei_prop_heist_box")
                iAm = 92;
            else if (sLabel == "ba_prop_battle_rsply_crate_02a")
                iAm = 92;
            else if (sLabel == "gr_prop_gr_rsply_crate01a")
                iAm = 92;
            else if (sLabel == "gr_prop_gr_rsply_crate03a")
                iAm = 92;
            else if (sLabel == "prop_drop_crate_01")
                iAm = 92;
            else if (sLabel == "prop_suitcase_03")
                iAm = 93;
            else if (sLabel == "sm_prop_smug_crate_s_hazard")
                iAm = 94;
            else if (sLabel == "v_med_barrel")
                iAm = 98;
            else if (sLabel == "xs_prop_arena_barrel_01a_sf")
                iAm = 99;
            else if (sLabel == "prop_barrel_02b")
                iAm = 100;
            else if (sLabel == "ba_prop_battle_control_console")
                iAm = 101;
            else if (sLabel == "v_med_testtubes")
                iAm = 102;
            else if (sLabel == "ba_prop_club_smoke_machine")
                iAm = 103;

            return iAm;
        }
        private void TempAgency_06_AddStuff(bool bScience)
        {
            LogThis("TempAgency_06_AddStuff");
            if (bScience)
            {
                List<string> s_List = new List<string>();
                List<Vector3> Pos_List = new List<Vector3>();
                List<Vector3> Roll_List = new List<Vector3>();

                s_List.Add("sm_prop_smug_crate_s_hazard");
                Pos_List.Add(new Vector3(250.969467f, 5963.44971f, -159.162094f));
                Roll_List.Add(new Vector3(0f, -0f, -149.612534f));
                s_List.Add("xs_prop_arena_barrel_01a_sf");
                Pos_List.Add(new Vector3(266.730957f, 6239.65039f, -161.022339f));
                Roll_List.Add(new Vector3(0f, -0f, -91.257309f));
                s_List.Add("prop_barrel_02b");
                Pos_List.Add(new Vector3(271.817383f, 6255.17725f, -161.219061f));
                Roll_List.Add(new Vector3(0f, -0f, 91.2169876f));
                s_List.Add("ba_prop_battle_control_console");
                Pos_List.Add(new Vector3(343.218842f, 6310.66699f, -159.848618f));
                Roll_List.Add(new Vector3(0f, -0f, -174.975052f));
                s_List.Add("v_med_testtubes");
                Pos_List.Add(new Vector3(369.440552f, 6316.16309f, -159.633102f));
                Roll_List.Add(new Vector3(0f, -0f, 102.423317f));

                int iBe = FindRandom(64, 0, Pos_List.Count - 1);

                Prop_02 = BuildProp(s_List[iBe], Pos_List[iBe], Roll_List[iBe], false, false);

                iMissionVar_01 = TempAgency_06_WhatsMyName(s_List[iBe]);
            }
            else
            {
                List<string> s_List = new List<string>();
                List<Vector3> Pos_List = new List<Vector3>();
                List<Vector3> Roll_List = new List<Vector3>();

                //technition stuff
                s_List.Add("ch_prop_toolbox_01a");
                Pos_List.Add(new Vector3(616.860107f, 5981.99951f, -155.731036f));
                Roll_List.Add(new Vector3(0f, 0f, -58.2386436f));
                s_List.Add("prop_tool_wrench");
                Pos_List.Add(new Vector3(577.000854f, 5973.20166f, -153.498096f));
                Roll_List.Add(new Vector3(-90f, -48.3684196f, 0f));
                s_List.Add("ch_prop_ch_bag_02a");
                Pos_List.Add(new Vector3(555.4953f, 5954.84229f, -158.023895f));
                Roll_List.Add(new Vector3(0f, 0f, 49.7450523f));
                s_List.Add("hei_prop_heist_box");
                Pos_List.Add(new Vector3(529.729858f, 5935.30566f, -159.19f));
                Roll_List.Add(new Vector3(0f, 0f, 71.9741974f));
                s_List.Add("ba_prop_battle_rsply_crate_02a");
                Pos_List.Add(new Vector3(529.471619f, 5901.979f, -159.085876f));
                Roll_List.Add(new Vector3(0f, -0f, -129.207016f));
                s_List.Add("gr_prop_gr_rsply_crate01a");
                Pos_List.Add(new Vector3(449.719086f, 5949.62549f, -159.25882f));
                Roll_List.Add(new Vector3(0f, 0f, 75.6604843f));
                s_List.Add("gr_prop_gr_rsply_crate03a");
                Pos_List.Add(new Vector3(384.817444f, 5920.98193f, -159.103455f));
                Roll_List.Add(new Vector3(0f, 0f, -13.0368681f));
                s_List.Add("prop_suitcase_03");
                Pos_List.Add(new Vector3(260.236847f, 6121.8125f, -159.955405f));
                Roll_List.Add(new Vector3(-90f, 3.30204272f, 0f));

                int iBe = FindRandom(63, 0, Pos_List.Count - 1);

                Prop_01 = BuildProp(s_List[iBe], Pos_List[iBe], Roll_List[iBe], false, false);

                iMissionVar_01 = TempAgency_06_WhatsMyName(s_List[iBe]);
            }
        }
        private void TempAgency_06_GoFetch(int iAm)
        {
            LogThis("TempAgency_06_GoFetch");
            if (iAm == 1)
            {
                int iRand = FindRandom(65, 14, VehicleList_01.Count - 1);
                VehTrackin_01 = VehicleList_01[iRand];
                sMissionVar_01 = GetEntNameHash(VehTrackin_01.Model.Hash);
                VehBlip(VehTrackin_01, false, true, 3, sMissionVar_01);

                MyLang.Mistext[224] = sMissionVar_02 + "~y~" + sMissionVar_01 + "~w~.";
            }
            else if (iAm == 2)
            {
                TempAgency_06_AddStuff(false);
                sMissionVar_01 = MyLang.Maptext[iMissionVar_01];
                AddTarget(Prop_01.Position, true, true, 1.00f, false, 478, sMissionVar_01);

                MyLang.Mistext[224] = sMissionVar_02 + "~y~" + sMissionVar_01 + "~w~.";
            }
            else if (iAm == 3)
            {
                TempAgency_06_AddStuff(true);
                sMissionVar_01 = MyLang.Maptext[iMissionVar_01];
                AddTarget(Prop_02.Position, true, true, 1.00f, false, 478, sMissionVar_01);

                MyLang.Mistext[224] = sMissionVar_02 + "~y~" + sMissionVar_01 + "~w~.";
            }
        }
        private void TempAgency_06_PlayerAttacks()
        {
            for (int i = 14; i < VehicleList_01.Count; i++)
                VehicleList_01[i].Explode();

            //Kanjally ???
            for (int i = 0; i < MishPed.Count; i++)
            {
                MishPed[i].Task.ReactAndFlee(Game.Player.Character);
                PedList_01.Remove(MishPed[i]);
                MishPed[i].MarkAsNoLongerNeeded();
            }
            MishPed.Clear();

            for (int i = 0; i < 4; i++)
            {
                Ped pMe = NPCSpawn("", VectorList_01[0], 0.00f, true, 350, 0, 0, null, 3, true, 1, 1, MyLang.Maptext[113]);
                PedMultiTask ThisPed = AddAMultiped();
                ThisPed.MyPed = new Ped(pMe.Handle);
                ThisPed.MyTask_01 = 1;
                ThisPed.MyBlip = ThisPed.MyPed.CurrentBlip;
                MultiPed.Add(ThisPed);
                Function.Call(Hash.SET_ENTITY_ONLY_DAMAGED_BY_PLAYER, pMe.Handle, true);
                pMe.RelationshipGroup = GP_BNPCs;
            }

            VehicleSpawn("Khanjali", new Vector3(591.25f, 5949.15f, -157.00f), 122.84f, false, false, false, false, 31, 0, 0, "", 0, false);
        }
        private void TempAgency_06_PlayerBrains()
        {
            for (int i = 0; i < MultiPed.Count; i++)
            {
                if (MultiPed[i].MyPed.IsDead)
                {
                    if (MultiPed[i].MyBlip != null)
                    {
                        MultiPed[i].MyBlip.Remove();
                        MultiPed[i].MyBlip = null;
                    }
                    MultiPed.RemoveAt(i);
                }
                else if (MultiPed[i].MySwitch_03)
                {
                    if (i < 2)
                    {
                        if (MultiPed[i].MySwitch_01)
                        {
                            if (MultiPed[i].MyTimer_01 < Game.GameTime)
                            {
                                MultiPed[i].MyTask_01 += 1;
                                if (MultiPed[i].MyTask_01 < VectorList_02.Count)
                                    MultiPed[i].MySwitch_01 = false;
                                else
                                    iMissionSeq = 45;
                            }
                        }
                        else
                        {
                            if (!MultiPed[i].MySwitch_02)
                            {
                                MultiPed[i].MySwitch_02 = true;
                                MultiPed[i].MyPed.Task.ClearAll();
                                Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, MultiPed[i].MyPed.Handle, 0, true);
                                Function.Call(Hash.SET_PED_COMBAT_MOVEMENT, MultiPed[i].MyPed.Handle, 2);
                                MultiPed[i].MyPed.BlockPermanentEvents = true;
                                WalkThisWay(MultiPed[i].MyPed, VectorList_02[MultiPed[i].MyTask_01], 2.00f);
                            }
                            else if (MultiPed[i].MyPed.Position.DistanceTo(VectorList_02[MultiPed[i].MyTask_01]) < 7.00f)
                            {
                                MultiPed[i].MySwitch_02 = false;
                                MultiPed[i].MySwitch_01 = true;
                                MultiPed[i].MyTimer_01 = Game.GameTime + 6000;
                                MultiPed[i].MyPed.Task.ClearAll();
                                MultiPed[i].MyPed.BlockPermanentEvents = false;
                                Function.Call(Hash.SET_PED_COMBAT_MOVEMENT, MultiPed[i].MyPed.Handle, 1);
                            }
                        }
                    }
                    else
                    {
                        if (MultiPed[i].MySwitch_01)
                        {
                            if (MultiPed[i].MyTimer_01 < Game.GameTime)
                            {
                                MultiPed[i].MyTask_01 += 1;
                                if (MultiPed[i].MyTask_01 < VectorList_03.Count)
                                    MultiPed[i].MySwitch_01 = false;
                                else
                                    iMissionSeq = 45;
                            }
                        }
                        else
                        {
                            if (!MultiPed[i].MySwitch_02)
                            {
                                MultiPed[i].MySwitch_02 = true;
                                MultiPed[i].MyPed.Task.ClearAll();
                                Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, MultiPed[i].MyPed.Handle, 0, true);
                                Function.Call(Hash.SET_PED_COMBAT_MOVEMENT, MultiPed[i].MyPed.Handle, 2);
                                MultiPed[i].MyPed.BlockPermanentEvents = true;
                                WalkThisWay(MultiPed[i].MyPed, VectorList_03[MultiPed[i].MyTask_01], 2.00f);
                            }
                            else if (MultiPed[i].MyPed.Position.DistanceTo(VectorList_03[MultiPed[i].MyTask_01]) < 7.00f)
                            {
                                MultiPed[i].MySwitch_02 = false;
                                MultiPed[i].MySwitch_01 = true;
                                MultiPed[i].MyTimer_01 = Game.GameTime + 6000;
                                MultiPed[i].MyPed.Task.ClearAll();
                                MultiPed[i].MyPed.BlockPermanentEvents = false;
                                Function.Call(Hash.SET_PED_COMBAT_MOVEMENT, MultiPed[i].MyPed.Handle, 1);
                            }
                        }
                    }
                }
                else
                {
                    if (MultiPed[i].MySwitch_01)
                    {
                        if (MultiPed[i].MyTimer_01 < Game.GameTime)
                        {
                            MultiPed[i].MyTask_01 += 1;
                            if (MultiPed[i].MyTask_01 < VectorList_01.Count)
                                MultiPed[i].MySwitch_01 = false;
                            else
                            {
                                MultiPed[i].MySwitch_03 = true;
                                MultiPed[i].MyTask_01 = 0;
                            }
                        }
                    }
                    else
                    {
                        if (!MultiPed[i].MySwitch_02)
                        {
                            MultiPed[i].MySwitch_02 = true;
                            MultiPed[i].MyPed.Task.ClearAll();
                            Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, MultiPed[i].MyPed.Handle, 0, true);
                            Function.Call(Hash.SET_PED_COMBAT_MOVEMENT, MultiPed[i].MyPed.Handle, 2);
                            MultiPed[i].MyPed.BlockPermanentEvents = true;
                            WalkThisWay(MultiPed[i].MyPed, VectorList_01[MultiPed[i].MyTask_01], 2.00f);
                        }
                        else if (MultiPed[i].MyPed.Position.DistanceTo(VectorList_01[MultiPed[i].MyTask_01]) < 5.00f)
                        {
                            MultiPed[i].MySwitch_02 = false;
                            MultiPed[i].MySwitch_01 = true;
                            MultiPed[i].MyTimer_01 = Game.GameTime + 6000;
                            MultiPed[i].MyPed.Task.ClearAll();
                            MultiPed[i].MyPed.BlockPermanentEvents = false;
                            Function.Call(Hash.SET_PED_COMBAT_MOVEMENT, MultiPed[i].MyPed.Handle, 1);
                        }
                    }
                }
            }             
        }
        private void Parra_Load()
        {
            LogThis("Parra_Load");
            MultiPed.Clear();
            Game.Player.Character.FreezePosition = true;
            GetWeaps(true);
            int iAddPlayer = RandInt(0, 11);
            int iPlussOne = 0;
            List<int> iSpot = new List<int>();
            for (int i = 0; i < VectorList_03.Count; i++)
                iSpot.Add(i);

            for (int i = 0; i < PropList_01.Count; i++)
            {
                for (int ii = 0; ii < VectorList_01.Count; ii++)
                {
                    if (iAddPlayer == iPlussOne)
                    {
                        Function.Call(Hash.SET_PED_GADGET, Game.Player.Character.Handle, Function.Call<int>(Hash.GET_HASH_KEY, "GADGET_PARACHUTE"), true);
                        ForceAnim(Game.Player.Character, "amb@code_human_in_bus_passenger_idles@male@sit@base", "base", Game.Player.Character.Position, Game.Player.Character.Rotation);
                        Game.Player.Character.AttachTo(PropList_01[i], 0, VectorList_01[ii], VectorList_02[ii]);
                    }
                    else
                    {
                        Ped PedShoot = NPCSpawn("", PropList_01[i].Position, 0.00f, false, 250, 24, 0, null, 0, false, 0, 3, "");
                        ForceAnim(PedShoot, "amb@code_human_in_bus_passenger_idles@male@sit@base", "base", PedShoot.Position, PedShoot.Rotation);
                        PedShoot.AttachTo(PropList_01[i], 0, VectorList_01[ii], VectorList_02[ii]);
                        Function.Call(Hash.SET_PED_GADGET, PedShoot.Handle, Function.Call<int>(Hash.GET_HASH_KEY, "GADGET_PARACHUTE"), true);
                        int iFinda = RandInt(0, iSpot.Count - 1);
                        int iLand = iSpot[iFinda];
                        iSpot.RemoveAt(iFinda);
                        PedMultiTask Para = AddAMultiped();
                        Para.MyPed = new Ped(PedShoot.Handle);
                        Para.MyTask_01 = 0;
                        Para.MyTask_02 = iLand + 1;
                        Para.MySwitch_01 = false;
                        Para.MySwitch_02 = true;
                        Para.MyTimer_01 = 0;
                        Para.MyTimer_02 = 0;
                        Para.MyTarget_01 = VectorList_03[iLand];
                        MultiPed.Add(Para);
                    }
                    iPlussOne += 1;
                }
            }
            Parra_AddStuff();
        }
        private void Parra_Jump(bool bOneOut)
        {
            iWait4Sec = Game.GameTime + RandInt(300, 1500);

            for (int i = 0; i < MultiPed.Count; i++)
            {
                if (MultiPed[i].MyPed.IsDead)
                {
                    MultiPed[i].MyPed.Task.ClearAll();
                    MultiPed.RemoveAt(i);
                }
                else if (MultiPed[i].MyTask_01 == 0)
                {
                    if (MultiPed[i].MyPed.IsAttached())
                    {
                        if (bOneOut)
                        {
                            if (RandInt(0, 40) > 20)
                            {
                                MultiPed[i].MyPed.Detach();
                                break;
                            }
                        }
                        else
                            MultiPed[i].MyPed.Detach();
                    }
                    else
                        MultiPed[i].MyTask_01 = 1;
                }
                else if (MultiPed[i].MyTask_01 == 1)
                {
                    Function.Call(Hash.TASK_SKY_DIVE, MultiPed[i].MyPed.Handle);
                    MultiPed[i].MyTask_01 = 2;
                }
                else if (MultiPed[i].MyTask_01 == 2)
                {
                    if (MultiPed[i].MyPed.Position.Z < 550.00f)
                    {
                        Function.Call(Hash.TASK_PARACHUTE, MultiPed[i].MyPed.Handle);
                        Function.Call(Hash.FORCE_PED_TO_OPEN_PARACHUTE, MultiPed[i].MyPed.Handle);
                        Function.Call(Hash.TASK_PARACHUTE_TO_TARGET, MultiPed[i].MyPed.Handle, MultiPed[i].MyTarget_01.X, MultiPed[i].MyTarget_01.Y, MultiPed[i].MyTarget_01.Z);
                        MultiPed[i].MySwitch_01 = false;
                        MultiPed[i].MyTask_01 = 3;
                    }
                }
                else if (MultiPed[i].MyTask_01 == 3)
                {
                    if (MultiPed[i].MyPed.Position.DistanceTo(MultiPed[i].MyTarget_01) < 15.00f)
                    {
                        Vehicle MrVic = VehicleList_01[MultiPed[i].MyTask_02];

                        MultiPed[i].MyPed.Task.ClearAll();
                        if (Game.Player.Character.Position.DistanceTo(MrVic.Position) < 35.00f)
                        {
                            Parra_MeliFight(MultiPed[i].MyPed);
                            ArmsRegulator(MultiPed[i].MyPed, 5);
                            MultiPed[i].MySwitch_02 = false;
                        }
                        else
                        {
                            WarptoAnyVeh(MrVic, MultiPed[i].MyPed, 1);
                            DriveToDest(MrVic, vTarget_01, MultiPed[i].MyPed, 35.00f, 0);
                            MultiPed[i].MySwitch_02 = true;
                        }
                        MultiPed[i].MyPed.IsInvincible = false;
                        MultiPed[i].MyTask_01 = 4;
                    }
                    else
                    {
                        if (iMissionSeq == 5)
                        {
                            if (!MultiPed[i].MyPed.IsInVehicle())
                            {
                                if (Game.Player.Character.Position.DistanceTo(MultiPed[i].MyPed.Position) < 20.00f)
                                {
                                    MultiPed[i].MyPed.Task.ClearAll();
                                    MultiPed[i].MyPed.RelationshipGroup = GP_Mental;
                                    AttackThePlayer(MultiPed[i].MyPed, false);
                                    ArmsRegulator(MultiPed[i].MyPed, 5);
                                    MultiPed[i].MySwitch_02 = false;
                                    MultiPed[i].MyPed.IsInvincible = false;
                                    MultiPed[i].MyTask_01 = 4;
                                }
                            }
                        }

                        if (MultiPed[i].MySwitch_01)
                        {
                            if (MultiPed[i].MyPed.Position.DistanceTo(vTarget_01) > fCorSize)
                            {
                                if (MultiPed[i].MyTimer_01 < Game.GameTime)
                                    MultiPed[i].MyPed.Kill();
                            }
                            else
                                MultiPed[i].MySwitch_01 = false;
                        }
                        else
                        {
                            if (MultiPed[i].MyPed.Position.DistanceTo(vTarget_01) > fCorSize)
                            {
                                MultiPed[i].MySwitch_01 = true;
                                MultiPed[i].MyPed.Task.ClearAll();
                                if (!MultiPed[i].MyPed.IsInVehicle())
                                    WalkThisWay(MultiPed[i].MyPed, vTarget_01, 1.00f);
                                MultiPed[i].MyTimer_01 = Game.GameTime + 10000;
                            }
                        }
                    }
                }
                else if (MultiPed[i].MyTask_01 == 4)
                {
                    if (MultiPed[i].MySwitch_02)
                    {
                        if (MultiPed[i].MyPed.Position.DistanceTo(vTarget_01) < 35.00f)
                        {
                            GetOutofVeh(MultiPed[i].MyPed, 2);
                            MultiPed[i].MyPed.Task.ClearAll();
                            MultiPed[i].MyPed.RelationshipGroup = GP_Mental;
                            ArmsRegulator(MultiPed[i].MyPed, 5);
                            FightAbility(MultiPed[i].MyPed);
                            Function.Call(Hash.TASK_COMBAT_HATED_TARGETS_IN_AREA, MultiPed[i].MyPed.Handle, vTarget_01.X, vTarget_01.Y, vTarget_01.Z, 30.00f, 0);
                            MultiPed[i].MySwitch_02 = false;
                        }
                    }
                    else
                    {
                        if (!MultiPed[i].MyPed.IsInCombat)
                            Function.Call(Hash.TASK_COMBAT_HATED_TARGETS_IN_AREA, MultiPed[i].MyPed.Handle, vTarget_01.X, vTarget_01.Y, vTarget_01.Z, 30.00f, 0);
                    }

                    if (MultiPed[i].MySwitch_01)
                    {
                        if (MultiPed[i].MyPed.Position.DistanceTo(vTarget_01) > fCorSize)
                        {
                            if (MultiPed[i].MyTimer_01 < Game.GameTime)
                                MultiPed[i].MyPed.Kill();
                        }
                        else
                            MultiPed[i].MySwitch_01 = false;
                    }
                    else
                    {
                        if (MultiPed[i].MyPed.Position.DistanceTo(vTarget_01) > fCorSize)
                        {
                            MultiPed[i].MySwitch_01 = true;
                            MultiPed[i].MyPed.Task.ClearAll();
                            WalkThisWay(MultiPed[i].MyPed, vTarget_01, 1.00f);
                            MultiPed[i].MyTimer_01 = Game.GameTime + 10000;
                        }
                    }
                }
            }

            if (Function.Call<bool>(Hash.IS_PED_ARMED, Game.Player.Character.Handle, 6))
                iMissionSeq = 45;

            if (iMissionSeq == 3)
            {
                int iLast = 0;
                for (int i = 0; i < MultiPed.Count; i++)
                {
                    if (MultiPed[i].MyTask_01 > 0)
                        iLast += 1;
                }
                if (iLast == MultiPed.Count)
                {
                    VehTrackin_01.HasCollision = false;
                    Game.Player.Character.Task.ClearAnimation("amb@code_human_in_bus_passenger_idles@male@sit@base", "base");
                    Game.Player.Character.Detach();
                    Game.Player.Character.FreezePosition = false;
                    iTime_01[0] = Game.GameTime + 5000;
                    iMishText = 235;
                    iMissionSeq += 1;
                }

                if (iMissionSeq == 45)
                {
                    for (int i = 0; i < MultiPed.Count; i++)
                        MultiPed[i].MyPed.Detach();
                    Game.Player.Character.Detach();
                }
            }
            else
            {
                ttTextBar_02.Text = "" + MultiPed.Count + "/11";

                if (MultiPed.Count == 0)
                    iMissionSeq = 6;
            }
        }
        private void Parra_MeliFight(Ped Pedd)
        {
            LogThis("Parra_MeliFight");

            Pedd.RelationshipGroup = GP_Mental;
            Pedd.IsEnemy = true;
            Pedd.CanBeTargette﻿d﻿ = true;
            FightAbility(Pedd);
            Function.Call(Hash.TASK_PUT_PED_DIRECTLY_INTO_MELEE, Pedd.Handle, Game.Player.Character.Handle, 8f, -1f, 10f, 67108864);
            Function.Call(Hash.SET_PED_PATH_CAN_USE_CLIMBOVERS, Pedd.Handle, true);
            Function.Call(Hash.SET_PED_PATH_CAN_USE_LADDERS, Pedd.Handle, true);
            Function.Call(Hash.SET_PED_PATH_CAN_DROP_FROM_HEIGHT, Pedd.Handle, true);
        }
        private void Parra_CarLocks()
        {
            GetOutofVeh(Game.Player.Character, 2);
            for (int i = 0; i < VehicleList_01.Count; i++)
                VehicleList_01[i].LockStatus = VehicleLockStatus.LockedForPlayer;
        }
        private void Parra_RemoveShit()
        {
            LogThis("Parra_RemoveShit");
            ReturnWeaps();
            for (int i = 0; i < PickList_01.Count; i++)
            {
                if (PickList_01[i].Exists())
                    PickList_01[i].Delete();
            }
            PickList_01.Clear();
        }
        private void Parra_AddStuff()
        {
            LogThis("Parra_AddStuff");

            List<string> s_List = new List<string>
            {
                "DOMINATOR4",
                "IMPALER2",
                "IMPERATOR",
                "SLAMVAN4",
                "DOMINATOR5",
                "IMPALER3",
                "IMPERATOR2",
                "SLAMVAN5",
                "DOMINATOR6",
                "IMPALER4",
                "IMPERATOR3",
                "SLAMVAN6",
                "BRUISER",
                "BRUTUS",
                "MONSTER3",
                "BRUISER2",
                "BRUTUS2",
                "MONSTER4",
                "BRUISER3",
                "BRUTUS3",
                "MONSTER5",
                "ZR3803",
                "ZR3802",
                "ZR380",
                "ISSI4",
                "ISSI5",
                "ISSI6"
            };

            for (int i = 0; i < VectorList_03.Count; i++)
            {
                int iCAr = RandInt(0, s_List.Count - 1);
                VehicleSpawn(s_List[iCAr], VectorList_03[i], VectorList_04[i].Z, false, false, false, false, 32, 0, -1, "", 0, true);
                //s_List.RemoveAt(iCAr);
            }

            List<string> s_Weap = new List<string>
            {
                "PICKUP_WEAPON_BAT",
                "PICKUP_WEAPON_BATTLEAXE",
                "PICKUP_WEAPON_BOTTLE",
                "PICKUP_WEAPON_CROWBAR",
                "PICKUP_WEAPON_DAGGER",
                "PICKUP_WEAPON_HAMMER",
                "PICKUP_WEAPON_HATCHET",
                "PICKUP_WEAPON_KNIFE",
                "PICKUP_WEAPON_KNUCKLE",
                "PICKUP_WEAPON_MACHETE",
                "PICKUP_WEAPON_NIGHTSTICK",
                "PICKUP_WEAPON_POOLCUE",
                "PICKUP_WEAPON_STONE_HATCHET",
                "PICKUP_WEAPON_SWITCHBLADE",
                "PICKUP_WEAPON_WRENCH"
            };

            List<string> s_WeapMod = new List<string>
            {
                "WEAPON_BAT",
                "WEAPON_BATTLEAXE",
                "WEAPON_BOTTLE",
                "WEAPON_CROWBAR",
                "WEAPON_DAGGER",
                "WEAPON_HAMMER",
                "WEAPON_HATCHET",
                "WEAPON_KNIFE",
                "WEAPON_KNUCKLE",
                "WEAPON_MACHETE",
                "WEAPON_NIGHTSTICK",
                "WEAPON_POOLCUE",
                "WEAPON_STONE_HATCHET",
                "WEAPON_SWITCHBLADE",
                "WEAPON_WRENCH"
            };

            for (int i = 0; i < VectorList_05.Count; i++)
            {
                int iRW = RandInt(0, s_Weap.Count - 1);
                int Picked = Function.Call<int>(Hash.CREATE_PICKUP, Function.Call<int>(Hash.GET_HASH_KEY, s_Weap[iRW]), VectorList_05[i].X, VectorList_05[i].Y, VectorList_05[i].Z, 1, true, Function.Call<int>(Hash.GET_HASH_KEY, s_WeapMod[iRW]));
                PickList_01.Add(new Pickup(Picked));
            }
        }
        private void Deliverwho_Backpack(int iPed)
        {
            LogThis("Deliverwho_Backpack");
            bDeliverWowRep = true;

            Ped Peddy = Game.Player.Character;

            if (iPed == 1)
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 8, 10, 0, 2);     //8 AccTop
            }      //Franklin
            else if (iPed == 2)
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 8, 15, 0, 2);     //8 AccTop
            }      //Michael
            else if (iPed == 3)
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 8, 15, 0, 2);     //8 AccTop
            }       //Trevor
            else if (iPed == 4)
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 5, 68, 0, 2);     //5 Hands
            }      //MpFemale
            else if (iPed == 5)
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 5, 68, 0, 2);     //5 Hands
            }      //MpMale
            else
            {

            }

            Prop CoolBag = BuildProp("prop_coolbox_01", Peddy.Position, Vector3.Zero, false, false);
            CoolBag.HasCollision = false;
            Function.Call(Hash.ATTACH_ENTITY_TO_ENTITY, CoolBag.Handle, Peddy.Handle, Function.Call<int>(Hash.GET_PED_BONE_INDEX, Peddy.Handle, 24818), -0.20f, -0.30f, 0.00f, 90.00f, 90.00f, 0.00f, false, false, false, false, 2, true);
        }
        public List<Vector3> FarToNear(List<Vector3> ListToFix, Vector3 vStartPoint)
        {
            LogThis("FarToNear");

            List<Vector3> NewVList = new List<Vector3>();
            List<Vector3> VNearest = new List<Vector3>();
            Vector3 VFurthest = Vector3.Zero;

            float fGetDist = 0.00f;
            int iDrop = 0;
            bool bNear = false;

            for (int i = 0; i < ListToFix.Count; i++)
            {
                float fDist = ListToFix[i].DistanceTo(vStartPoint);

                if (fDist > fGetDist)
                {
                    fGetDist = fDist;
                    iDrop = i;
                }
            }
            NewVList.Add(ListToFix[iDrop]);
            ListToFix.RemoveAt(iDrop);

            for (int i = 0; i < ListToFix.Count; i++)
            {
                float fDist = ListToFix[i].DistanceTo(vStartPoint);

                if (fDist < fGetDist)
                {
                    fGetDist = fDist;
                    iDrop = i;
                }
            }
            VNearest.Add(ListToFix[iDrop]); 
            ListToFix.RemoveAt(iDrop);

            while (ListToFix.Count > 0)
            {      
                if (bNear)
                    VFurthest = VNearest[0];
                else
                    VFurthest = NewVList[0];
                fGetDist = 9999.00f;
                iDrop = 0;

                if (ListToFix.Count == 1)
                {
                    if (bNear)
                        VNearest.Add(ListToFix[0]);
                    else
                        NewVList.Add(ListToFix[0]);
                    ListToFix.RemoveAt(0);
                }
                else
                {
                    for (int i = 0; i < ListToFix.Count; i++)
                    {
                        float fDist = ListToFix[i].DistanceTo(VFurthest);

                        if (fDist < fGetDist)
                        {
                            fGetDist = fDist;
                            iDrop = i;
                        }
                    }
                    if (bNear)
                        VNearest.Add(ListToFix[iDrop]);
                    else
                        NewVList.Add(ListToFix[iDrop]);
                    ListToFix.RemoveAt(iDrop);
                }
                bNear = !bNear;
            }
            ListToFix = ListReverseVec3(VNearest);
            for (int i = 0; i < ListToFix.Count; i++)
                NewVList.Add(ListToFix[i]);

            return NewVList;
        }
        public List<Vector3> ListReverseVec3(List<Vector3> VecList)
        {

            LogThis("ListReverseVec3");

            List<Vector3> SortedList = new List<Vector3>();

            int iList = VecList.Count;

            while (iList > 0)
            {
                iList -= 1;
                SortedList.Add(VecList[iList]);
            }

            return SortedList;
        }
        public List<string> ListReverseString(List<string> StrList)
        {

            LogThis("ListReverseString");

            List<string> SortedList = new List<string>();

            int iList = StrList.Count;

            while (iList > 0)
            {
                iList -= 1;
                SortedList.Add(StrList[iList]);
            }

            return SortedList;
        }
        public List<float> ListReversefloat(List<float> FlowList)
        {

            LogThis("ListReversefloat");

            List<float> SortedList = new List<float>();

            int iList = FlowList.Count;

            while (iList > 0)
            {
                iList -= 1;
                SortedList.Add(FlowList[iList]);
            }

            return SortedList;
        }
        private void KeepMoving(Ped Peddy, Vector3 Vtarg, int iWait4)
        {
            iWait4Sec = Game.GameTime + iWait4;
            if (BeInRange(0.75f, fKeepMoving, Peddy.Position.DistanceTo(Vtarg)))
            {
                Peddy.Task.ClearAll();
                Peddy.Position += Peddy.ForwardVector * 2.50f;
                WalkThisWay(Peddy, Vtarg, 2.00f);
            }
            else
                fKeepMoving = Peddy.Position.DistanceTo(Vtarg);
        }
        private void WalkThisWay(Ped Peddy, Vector3 VSpot, float fSpeed)
        {
            Function.Call(Hash.TASK_FOLLOW_NAV_MESH_TO_COORD, Peddy.Handle, VSpot.X, VSpot.Y, VSpot.Z, fSpeed, -1, 0.0f, false, 0.0f);
        }
        private void PedSitHere(Ped Peddy, Prop Chair, int iChair)
        {
            LogThis("PedSitHere, iChair == " + iChair);

            Vector3 vCharPos = new Vector3(Chair.Position.X, Chair.Position.Y, Chair.Position.Z + 0.55f);

            Peddy.Position = vCharPos;
            Peddy.Heading = Chair.Heading - 180.00f;

            if (iChair == 1)
            {
                List<string> SitVArs = new List<string>
                {
                    "PROP_HUMAN_SEAT_CHAIR",
                    "PROP_HUMAN_SEAT_CHAIR_UPRIGHT"
                };

                PedScenario(Peddy, SitVArs[RandInt(0, SitVArs.Count - 1)], vCharPos, Chair.Heading - 180.00f, true);
            }
            else if (iChair == 2)
            {
                vCharPos += (Chair.ForwardVector * 0.30f);
                vCharPos.Z -= 0.10f;
                PedScenario(Peddy, "PROP_HUMAN_SEAT_SUNLOUNGER", vCharPos, Chair.Heading - 180.00f, true);
            }
            else if (iChair == 3)
                PedScenario(Peddy, "PROP_HUMAN_SEAT_ARMCHAIR", vCharPos, Chair.Heading - 180.00f, true);
            else if (iChair == 4)
                PedScenario(Peddy, "PROP_HUMAN_SEAT_BAR", vCharPos, Chair.Heading - 180.00f, true);
            else if (iChair == 5)
                PedScenario(Peddy, "PROP_HUMAN_SEAT_COMPUTER", vCharPos, Chair.Heading - 180.00f, true);
            else if (iChair == 6)
            {
                List<string> SitVArs = new List<string>
                {
                    "PROP_HUMAN_SEAT_DECKCHAIR",
                    "PROP_HUMAN_SEAT_DECKCHAIR_DRINK"
                };

                PedScenario(Peddy, SitVArs[RandInt(0, SitVArs.Count - 1)], vCharPos, Chair.Heading - 180.00f, true);
            }
            else if (iChair == 7)
            {
                List<string> SitVArs = new List<string>
                {
                    "PROP_HUMAN_SEAT_BENCH",
                    "PROP_HUMAN_SEAT_BENCH_DRINK",
                    "PROP_HUMAN_SEAT_BENCH_DRINK_BEER",
                    "PROP_HUMAN_SEAT_BENCH_FOOD"
                };

                PedScenario(Peddy, SitVArs[RandInt(0, SitVArs.Count - 1)], vCharPos, Chair.Heading - 180.00f, true);
            }
            else if (iChair == 8)
            {
                vCharPos = new Vector3(Chair.Position.X, Chair.Position.Y, Chair.Position.Z + 0.70f);

                List<string> SitVArs = new List<string>
                {
                    "PROP_HUMAN_SEAT_CHAIR",
                    "PROP_HUMAN_SEAT_CHAIR_UPRIGHT"
                };

                PedScenario(Peddy, SitVArs[RandInt(0, SitVArs.Count - 1)], vCharPos, Chair.Heading - 180.00f, true);
            }
            else if (iChair == 9)
            {
                vCharPos = new Vector3(Chair.Position.X, Chair.Position.Y, Chair.Position.Z + 0.50f);

                PedScenario(Peddy, "PROP_HUMAN_SEAT_CHAIR_UPRIGHT", vCharPos, Chair.Heading - 180.00f, true);
            }

            Peddy.AlwaysKeepTask = false;
        }
        public int VehDamage(Vehicle Vehic, int iMaxHealth, int iMaxValue, bool bShowPool, int iSeeWhatYouDidThere, bool bNeg)
        {
            int iAmDamagedBy = 0;

            float fVehCheck = Vehic.BodyHealth + Vehic.EngineHealth + Vehic.PetrolTankHealth;

            float fDeduct = (float)iMaxHealth - fVehCheck;

            int iPer = iMaxValue / iMaxHealth;

            if (bNeg)
            {
                int iDeduct = (int)fDeduct * iPer;
                iAmDamagedBy = iMaxValue - iDeduct;

                if (iSeeWhatYouDidThere < iAmDamagedBy)
                    iAmDamagedBy = iSeeWhatYouDidThere;
            }
            else
            {
                iAmDamagedBy = (int)fDeduct * iPer;

                if (iSeeWhatYouDidThere > iAmDamagedBy)
                    iAmDamagedBy = iSeeWhatYouDidThere;
            }

            if (bShowPool)
            {
                ttTextBar_01.Text = "$ " + ShowComs(iAmDamagedBy, true, false) + "";
                VTBTimerPool.Draw();
            }

            return iAmDamagedBy;
        }
        public int MultiDamage(List<int> iMaxHealVeh, List<int> iMaxHealPed, int iMaxValue, bool bShowPool, int iSeeWhatYouDidThere, bool bNeg, bool bJustVeh)
        {
            int iAmDamagedBy = 0;
            int iMaxHealth = 0;
            bool broke = false;

            if (MishVic.Count != iMaxHealVeh.Count)
            {

                LogThis("MishVic.Count Error...");
                broke = true;
            }
            else
            {
                for (int i = 0; i < MishVic.Count; i++)
                {
                    float fVehCheck = MishVic[i].BodyHealth + MishVic[i].EngineHealth + MishVic[i].PetrolTankHealth;
                    float fDeduct = (float)iMaxHealVeh[i] - fVehCheck;

                    iAmDamagedBy += (int)fDeduct;

                    iMaxHealth += iMaxHealVeh[i];
                }
            }

            if (!bJustVeh)
            {
                if (MishPed.Count != iMaxHealPed.Count)
                {

                    LogThis("MishPed.Count Error...");
                    broke = true;
                }
                else
                {
                    for (int i = 0; i < MishPed.Count; i++)
                    {
                        int iPedHeal = MishPed[i].Health;
                        int iDeduct = iMaxHealPed[i] - iPedHeal;

                        iAmDamagedBy += iDeduct;

                        iMaxHealth += iMaxHealPed[i];
                    }
                }
            }

            if (!broke)
            {
                int iPer = iMaxValue / iMaxHealth;

                iAmDamagedBy *= iPer;
            }


            if (bNeg)
            {
                iAmDamagedBy = iMaxValue - iAmDamagedBy;

                if (iSeeWhatYouDidThere < iAmDamagedBy)
                    iAmDamagedBy = iSeeWhatYouDidThere;
            }
            else
            {
                if (iSeeWhatYouDidThere > iAmDamagedBy)
                    iAmDamagedBy = iSeeWhatYouDidThere;
            }

            if (bShowPool)
            {
                ttTextBar_01.Text = "$ " + ShowComs(iAmDamagedBy, true, false) + "";
                VTBTimerPool.Draw();
            }

            return iAmDamagedBy;
        }
        private void ShutThatDoor(Vector3 VDoorPos, String SDoorTag)
        {
            LogThis("ShutThatDoor");

            Prop[] Opensesme = World.GetNearbyProps(VDoorPos, 6.00f);
            for (int i = 0; i < Opensesme.Count(); i++)
            {
                if (PropExists(Opensesme, i))
                {
                    Prop ThisDoor = Opensesme[i];
                    if (ThisDoor.Model == Function.Call<int>(Hash.GET_HASH_KEY, SDoorTag))
                        ThisDoor.FreezePosition = true;
                }
            }
        }
        private void DoorsNear(Vector3 VDoorPos, float fRadius, bool bLock)
        {
            LogThis("DoorsNear");

            Prop[] Opensesme = World.GetNearbyProps(VDoorPos, fRadius);
            for (int i = 0; i < Opensesme.Count(); i++)
            {
                if (PropExists(Opensesme, i))
                {
                    Prop ThisDoor = Opensesme[i];
                    for (int ii = 0; ii < sDoorList.Count; ii++)
                    {
                        if (Function.Call<int>(Hash.GET_HASH_KEY, sDoorList[ii]) == ThisDoor.Model.Hash)
                        {
                            if (bLock)
                            {
                                ShutThatDoor(ThisDoor.Position, sDoorList[ii]);
                            }
                            else
                            {
                                ThisDoor.FreezePosition = false;
                                Function.Call(Hash.SET_STATE_OF_CLOSEST_DOOR_OF_TYPE, ThisDoor.Model.Hash, ThisDoor.Position.X, ThisDoor.Position.Y, ThisDoor.Position.Z, false, 0, 1);
                            }
                            break;
                        }
                    }
                }
            }
        }
        private void StopHere(Vehicle Vic)
        {
            LogThis("StopHere");

            while (Vic.IsInAir)
                Script.Wait(10);
            Vic.FreezePosition = true;
            Script.Wait(1000);
            Vic.FreezePosition = false;
        }
        private void GateIsNear(Vector3 VGatePos, float fRadius, bool bPropX)
        {
            LogThis("GateIsNear, bPropX == " + bPropX);

            Prop[] Opensesme = World.GetNearbyProps(VGatePos, fRadius);
            for (int i = 0; i < Opensesme.Count(); i++)
            {
                if (PropExists(Opensesme, i))
                {
                    Prop ThisDoor = Opensesme[i];
                    for (int ii = 0; ii < sGateList.Count; ii++)
                    {
                        if (ThisDoor.Model == Function.Call<int>(Hash.GET_HASH_KEY, "prop_facgate_04_r") || ThisDoor.Model == Function.Call<int>(Hash.GET_HASH_KEY, "prop_facgate_04_l") || ThisDoor.Model == Function.Call<int>(Hash.GET_HASH_KEY, "prop_fnclink_06gate2"))
                            ThisDoor.Delete();
                        else if (Function.Call<int>(Hash.GET_HASH_KEY, sGateList[ii]) == ThisDoor.Model)
                        {
                            Function.Call(Hash._DOOR_CONTROL, Function.Call<int>(Hash.GET_HASH_KEY, sGateList[ii]), ThisDoor.Position.X, ThisDoor.Position.Y, ThisDoor.Position.Z, false, 0.00f, 50.00f, 0.00f);
                            if (bPropX)
                                Prop_01 = ThisDoor;
                        }
                    }
                }
            }
        }
        private void MoveThatCar(Vector3 VPos)
        {
            LogThis("MoveThatCar");

            Vehicle[] Carsy = World.GetNearbyVehicles(VPos, 10.00f);

            for (int i = 0; i < Carsy.Count(); i++)
            {
                if (VehExists(Carsy, i))
                {
                    Vehicle VehicleX = Carsy[i];
                    if (!VehicleX.IsPersistent)
                    {
                        if (VehicleX.ClassType == VehicleClass.Utility)
                            VehicleX.Delete();
                        else
                        {
                            Ped Pedx = VehicleX.CreateRandomPedOnSeat(VehicleSeat.Driver);
                            Pedx.MarkAsNoLongerNeeded();
                        }
                    }
                }
            }
        }
        private void ImOnAPlane(Ped Pilot, Vehicle Plane, Vector3 Dest)
        {
            LogThis("ImOnAPlane");

            Pilot.Task.ClearAll();
            Function.Call(Hash.TASK_PLANE_MISSION, Pilot.Handle, Plane.Handle, 0, 0, Dest.X, Dest.Y, Dest.Z, 4, 100.0f, 0.0f, 90.0f, 0, 600.0f);
        }
        private void FlyAway(Ped Pedd, Vector3 vHeliDest, float fSpeed, float flanding)
        {
            LogThis("FlyAway");

            Vehicle vHeli = Pedd.CurrentVehicle;
            vHeli.FreezePosition = false;

            float HeliDesX = vHeliDest.X;
            float HeliDesY = vHeliDest.Y;
            float HeliDesZ = vHeliDest.Z;
            float HeliSpeed = fSpeed;
            float HeliLandArea = flanding;

            float dx = Pedd.Position.X - HeliDesX;
            float dy = Pedd.Position.Y - HeliDesY;
            float HeliDirect = Function.Call<float>(Hash.GET_HEADING_FROM_VECTOR_2D, dx, dy) - 180.00f;
            Function.Call(Hash.TASK_HELI_MISSION, Pedd.Handle, vHeli.Handle, 0, 0, HeliDesX, HeliDesY, HeliDesZ, 4, HeliSpeed, HeliLandArea, HeliDirect, -1, -1, -1, 0);
            Pedd.AlwaysKeepTask = true;
            Pedd.BlockPermanentEvents = true;
        }
        private void FlyToRightHere(Ped Pedd, Vehicle vHeli, Vector3 vHeliDest, float fSpeed, float fheader)
        {
            LogThis("FlyToRightHere");

            float HeliDesX = vHeliDest.X;
            float HeliDesY = vHeliDest.Y;
            float HeliDesZ = vHeliDest.Z;
            float HeliSpeed = fSpeed;
            float HeliDirect = fheader;
            Function.Call(Hash.TASK_HELI_MISSION, Pedd.Handle, vHeli.Handle, 0, 0, HeliDesX, HeliDesY, HeliDesZ, 4, HeliSpeed, 0, HeliDirect, -1, -1, -1, 0);
            Pedd.AlwaysKeepTask = true;
            Pedd.BlockPermanentEvents = true;
        }
        private void FlyNShoot(Ped Pedd, Vehicle vHeli, Ped Target)
        {
            LogThis("FlyNShoot");

            float HeliSpeed = 75.00f;
            //float HeliLandArea = flanding;

            float dx = Target.Position.X - vHeli.Position.X;
            float dy = Target.Position.Y - vHeli.Position.Y;
            float HeliDirect = Function.Call<float>(Hash.GET_HEADING_FROM_VECTOR_2D, dx, dy) - 180.00f;
            Function.Call(Hash.TASK_HELI_MISSION, Pedd.Handle, vHeli.Handle, 0, Target.Handle, 0, 0, 0, 9, HeliSpeed, 0, HeliDirect, -1, -1, -1, 0);
            Pedd.AlwaysKeepTask = true;
            Pedd.BlockPermanentEvents = true;
        }
        public string RandNPC(int iRando)
        {
            LogThis("RandNPC, iRando == " + iRando);

            List<string> sPeds = new List<string>();

            string sPedds = "";

            if (iRando == 1)
            {
                sPeds.Add("a_m_m_og_boss_01");    //"OG Boss" />
                sPeds.Add("g_f_y_ballas_01");    //" Female" />
                sPeds.Add("g_m_y_ballaeast_01");    //"Ballas East Male" />
                sPeds.Add("g_m_y_ballaorig_01");    //"Ballas Original Male" />
                sPeds.Add("g_m_y_ballasout_01");    //"Ballas South Male" />
            }            //Ballas
            else if (iRando == 2)
            {
                sPeds.Add("mp_m_famdd_01");    //"Families DD Male" />
                sPeds.Add("g_f_y_families_01");    //"Families Female" />
                sPeds.Add("g_m_y_famca_01");    //"Families CA Male" />
                sPeds.Add("g_m_y_famdnf_01");    //"Families DNF Male" />
                sPeds.Add("g_m_y_famfor_01");    //"Families FOR Male" />
            }       //Families
            else if (iRando == 3)
            {
                sPeds.Add("g_f_importexport_01");    //"Import Export Female" />
                sPeds.Add("g_f_importexport_01");    //"Gang Female (Import-Export)" />
                sPeds.Add("g_m_importexport_01");    //"Gang Male (Import-Export)" />
            }       //Gang (Import-Export)
            else if (iRando == 4)
            {
                sPeds.Add("g_f_y_vagos_01");    //"Vagos Female" />
                sPeds.Add("g_f_y_lost_01");    //"The Lost MC Female" />
                sPeds.Add("g_m_y_lost_01");    //"The Lost MC Male" />
                sPeds.Add("g_m_y_lost_02");    //"The Lost MC Male 2" />
                sPeds.Add("g_m_y_lost_03");    //"The Lost MC Male 3" />
                sPeds.Add("a_m_m_mlcrisis_01");    //"Midlife Crisis Casino Bikers" />
                sPeds.Add("mp_m_exarmy_01");    //"Ex-Army Male" />
            }       //The Lost MC
            else if (iRando == 5)
            {
                sPeds.Add("g_m_m_korboss_01");    //"Korean Boss" />
                sPeds.Add("g_m_y_korlieut_01");    //"Korean Lieutenant" />
                sPeds.Add("g_m_y_korean_01");    //"Korean Young Male" />
                sPeds.Add("g_m_y_korean_02");    //"Korean Young Male 2" />
                sPeds.Add("a_m_m_ktown_01");    //"Korean Male" />
                sPeds.Add("a_m_o_ktown_01");    //"Korean Old Male" />
                sPeds.Add("a_m_y_ktown_01");    //"Korean Young Male" />
                sPeds.Add("a_m_y_ktown_02");    //"Korean Young Male 2" />
            }       //Korean
            else if (iRando == 6)
            {
                sPeds.Add("g_m_m_armboss_01");    //"Armenian Boss" />
                sPeds.Add("g_m_m_armgoon_01");    //"Armenian Goon" />
                sPeds.Add("g_m_y_armgoon_02");    //"Armenian Goon 2" />
                sPeds.Add("g_m_m_armlieut_01");    //"Armenian Lieutenant" />
            }       //Armenian
            else if (iRando == 7)
            {
                sPeds.Add("g_m_m_chiboss_01");    //"Chinese Boss" />
                sPeds.Add("g_m_m_chigoon_01");    //"Chinese Goon" />
                sPeds.Add("g_m_m_chigoon_02");    //"Chinese Goon 2" />
                sPeds.Add("g_m_m_chicold_01");    //"Chinese Goon Older" />
            }       //Chinese
            else if (iRando == 8)
            {
                sPeds.Add("g_m_m_mexboss_01");    //"Mexican Boss" />
                sPeds.Add("g_m_m_mexboss_02");    //"Mexican Boss 2" />
                sPeds.Add("g_m_y_mexgang_01");    //"Mexican Gang Member" />
                sPeds.Add("g_m_y_mexgoon_01");    //"Mexican Goon" />
                sPeds.Add("g_m_y_mexgoon_02");    //"Mexican Goon 2" />
                sPeds.Add("g_m_y_mexgoon_03");    //"Mexican Goon 3" />
                sPeds.Add("a_m_y_mexthug_01");    //"Mexican Thug" />
            }       //Mexican
            else if (iRando == 9)
            {
                sPeds.Add("g_m_y_pologoon_01");    //"Polynesian Goon" />
                sPeds.Add("g_m_y_pologoon_02");    //"Polynesian Goon 2" />
                sPeds.Add("a_m_m_polynesian_01");    //"Polynesian" />
                sPeds.Add("a_m_y_polynesian_01");    //"Polynesian Young" />
            }       //Polynesian
            else if (iRando == 10)
            {
                sPeds.Add("g_m_y_salvaboss_01");    //"Salvadoran Boss" />
                sPeds.Add("g_m_y_salvagoon_01");    //"Salvadoran Goon" />
                sPeds.Add("g_m_y_salvagoon_02");    //"Salvadoran Goon 2" />
                sPeds.Add("g_m_y_salvagoon_03");    //"Salvadoran Goon 3" />
            }       //Salvadoran
            else if (iRando == 11)
            {
                sPeds.Add("g_m_y_strpunk_01");    //"Street Punk" />
                sPeds.Add("g_m_y_strpunk_02");    //"Street Punk 2" />
            }       //Street Punk
            else if (iRando == 12)
            {
                sPeds.Add("a_f_m_beach_01");    //"Beach Female" />
                sPeds.Add("a_f_y_beach_01");    //"Beach Young Female" />
                sPeds.Add("a_f_m_bodybuild_01");    //"Bodybuilder Female" />
                sPeds.Add("a_f_y_fitness_01");    //"Fitness Female" />
                sPeds.Add("a_f_y_fitness_02");    //"Fitness Female 2" />
                sPeds.Add("a_f_y_runner_01");    //"Jogger Female" />
                sPeds.Add("a_f_y_yoga_01");    //"Yoga Female" />
                sPeds.Add("a_m_m_beach_01");    //"Beach Male" />
                sPeds.Add("a_m_m_beach_02");    //"Beach Male 2" />
                sPeds.Add("a_m_y_musclbeac_01");    //"Beach Muscle Male" />
                sPeds.Add("a_m_y_musclbeac_02");    //"Beach Muscle Male 2" />
                sPeds.Add("a_m_o_beach_01");    //"Beach Old Male" />
                sPeds.Add("a_m_y_beach_01");    //"Beach Young Male" />
                sPeds.Add("a_m_y_beach_02");    //"Beach Young Male 2" />
                sPeds.Add("a_m_y_beach_03");    //"Beach Young Male 3" />
                sPeds.Add("a_m_y_runner_01");    //"Jogger Male" />
                sPeds.Add("a_m_y_runner_02");    //"Jogger Male 2" />
                sPeds.Add("a_m_m_malibu_01");    //"Malibu Male" />
                sPeds.Add("a_m_y_sunbathe_01");    //"Sunbather Male" />
                sPeds.Add("a_m_y_surfer_01");    //"Surfer" />
                sPeds.Add("a_m_y_yoga_01");    //"Yoga Male" />
                sPeds.Add("a_m_y_hippy_01");    //"Hippie Male" />
                sPeds.Add("a_f_y_hippie_01");    //"Hippie Female" />
                sPeds.Add("a_m_y_beachvesp_01");    //"Vespucci Beach Male" />
                sPeds.Add("a_m_y_beachvesp_02");    //"Vespucci Beach Male 2" />
                sPeds.Add("u_m_y_party_01");    //"Partygoer" />
            }       //Beach
            else if (iRando == 13)
            {
                sPeds.Add("a_f_m_bevhills_01");    //"Beverly Hills Female" />
                sPeds.Add("a_f_m_bevhills_02");    //"Beverly Hills Female 2" />
                sPeds.Add("a_f_y_bevhills_01");    //"Beverly Hills Young Female" />
                sPeds.Add("a_f_y_bevhills_02");    //"Beverly Hills Young Female 2" />
                sPeds.Add("a_f_y_bevhills_03");    //"Beverly Hills Young Female 3" />
                sPeds.Add("a_f_y_bevhills_04");    //"Beverly Hills Young Female 4" />
                sPeds.Add("a_f_m_downtown_01");    //"Downtown Female" />
                sPeds.Add("a_f_y_scdressy_01");    //"Dressy Female" />
                sPeds.Add("a_f_y_vinewood_01");    //"Vinewood Female" />
                sPeds.Add("a_f_y_vinewood_02");    //"Vinewood Female 2" />
                sPeds.Add("a_f_y_vinewood_03");    //"Vinewood Female 3" />
                sPeds.Add("a_f_y_vinewood_04");    //"Vinewood Female 4" />
                sPeds.Add("a_f_y_clubcust_01");    //"Club Customer Female 1" />
                sPeds.Add("a_f_y_clubcust_02");    //"Club Customer Female 2" />
                sPeds.Add("a_f_y_clubcust_03");    //"Club Customer Female 3" />
                sPeds.Add("u_f_y_hotposh_01");    //"Hot Posh Female" />
                sPeds.Add("g_m_m_casrn_01");    //"Casino Guests?" />
                sPeds.Add("a_m_m_bevhills_01");    //"Beverly Hills Male" />
                sPeds.Add("a_m_m_bevhills_02");    //"Beverly Hills Male 2" />
                sPeds.Add("a_m_y_bevhills_01");    //"Beverly Hills Young Male" />
                sPeds.Add("a_m_y_bevhills_02");    //"Beverly Hills Young Male 2" />
                sPeds.Add("a_m_y_downtown_01");    //"Downtown Male" />
                sPeds.Add("a_m_y_hipster_01");    //"Hipster Male" />
                sPeds.Add("a_m_y_hipster_02");    //"Hipster Male 2" />
                sPeds.Add("a_m_y_hipster_03");    //"Hipster Male 3" />
                sPeds.Add("a_m_m_tennis_01");    //"Tennis Player Male" />
                sPeds.Add("a_m_y_vindouche_01");    //"Vinewood Douche" />
                sPeds.Add("a_m_y_vinewood_01");    //"Vinewood Male" />
                sPeds.Add("a_m_y_vinewood_02");    //"Vinewood Male 2" />
                sPeds.Add("a_m_y_vinewood_03");    //"Vinewood Male 3" />
                sPeds.Add("a_m_y_vinewood_04");    //"Vinewood Male 4" />
                sPeds.Add("a_m_y_clubcust_01");    //"Club Customer Male 1" />
                sPeds.Add("a_m_y_clubcust_02");    //"Club Customer Male 2" />
                sPeds.Add("a_m_y_clubcust_03");    //"Club Customer Male 3" />
                sPeds.Add("a_f_y_gencaspat_01");    //"Casual Casino Guest" />
                sPeds.Add("a_f_y_smartcaspat_01");    //"Formel Casino Guest" />
                sPeds.Add("a_f_y_hipster_01");    //"Hipster Female" />
                sPeds.Add("a_f_y_hipster_02");    //"Hipster Female 2" />
                sPeds.Add("a_f_y_hipster_03");    //"Hipster Female 3" />
                sPeds.Add("a_f_y_hipster_04");    //"Hipster Female 4" />
                sPeds.Add("a_f_y_tennis_01");    //"Tennis Player Female" />
                sPeds.Add("a_f_y_femaleagent");    //"Female Agent" />
                sPeds.Add("a_f_y_genhot_01");    //"General Hot Young Female" />
                sPeds.Add("a_m_y_gencaspat_01");    //"Casual Casino Guests" />
                sPeds.Add("a_m_y_smartcaspat_01");    //"Formel Casino Guests" />
            }       //HiClassStreet
            else if (iRando == 14)
            {
                sPeds.Add("a_f_m_business_02");    //"Business Female 2" />
                sPeds.Add("a_f_y_business_01");    //"Business Young Female" />
                sPeds.Add("a_f_y_business_02");    //"Business Young Female 2" />
                sPeds.Add("a_f_y_business_03");    //"Business Young Female 3" />
                sPeds.Add("a_f_y_business_04");    //"Business Young Female 4" />
            }       //Suits Female
            else if (iRando == 15)
            {
                sPeds.Add("a_f_m_eastsa_01");    //"East SA Female" />
                sPeds.Add("a_f_m_eastsa_02");    //"East SA Female 2" />
                sPeds.Add("a_f_y_eastsa_01");    //"East SA Young Female" />
                sPeds.Add("a_f_y_eastsa_02");    //"East SA Young Female 2" />
                sPeds.Add("a_f_y_eastsa_03");    //"East SA Young Female 3" />
                sPeds.Add("a_m_m_eastsa_01");    //"East SA Male" />
                sPeds.Add("a_m_m_eastsa_02");    //"East SA Male 2" />
                sPeds.Add("a_m_y_eastsa_01");    //"East SA Young Male" />
                sPeds.Add("a_m_y_eastsa_02");    //"East SA Young Male 2" />
            }       //East SA
            else if (iRando == 16)
            {
                sPeds.Add("u_m_y_baygor");    //"Kifflom Guy" />
                sPeds.Add("a_m_y_epsilon_01");    //"Epsilon Male" />
                sPeds.Add("a_m_y_epsilon_02");    //"Epsilon Male 2" />
                sPeds.Add("a_f_y_epsilon_01");    //"Epsilon Female" />
            }       //Epsilon
            else if (iRando == 17)
            {
                sPeds.Add("a_f_m_fatbla_01");    //"Fat Black Female" />
                sPeds.Add("a_f_m_fatcult_01");    //"Fat Cult Female" />
                sPeds.Add("a_f_m_fatwhite_01");    //"Fat White Female" />
                sPeds.Add("a_m_m_genfat_01");    //"General Fat Male" />
                sPeds.Add("a_m_m_genfat_02");    //"General Fat Male 2" />
                sPeds.Add("a_m_m_fatlatin_01");    //"Fat Latino Male" />
            }       //Fatties
            else if (iRando == 18)
            {
                sPeds.Add("a_f_o_genstreet_01");    //"General Street Old Female" />
                sPeds.Add("a_m_o_genstreet_01");    //"General Street Old Male" />
                sPeds.Add("a_m_y_genstreet_01");    //"General Street Young Male" />
                sPeds.Add("a_m_y_genstreet_02");    //"General Street Young Male 2" />
                sPeds.Add("a_m_y_stbla_01");    //"Black Street Male" />
                sPeds.Add("a_m_y_stbla_02");    //"Black Street Male 2" />
                sPeds.Add("a_m_m_stlat_02");    //"Latino Street Male 2" />
                sPeds.Add("a_m_y_stlat_01");    //"Latino Street Young Male" />
                sPeds.Add("a_m_y_latino_01");    //"Latino Young Male" />
                sPeds.Add("a_m_m_afriamer_01");    //"African American Male" />
                sPeds.Add("a_m_y_stwhi_01");    //"White Street Male" />
                sPeds.Add("a_m_y_stwhi_02");    //"White Street Male 2" />
                sPeds.Add("a_m_y_ktown_01");    //"Korean Young Male" />
                sPeds.Add("a_m_y_ktown_02");    //"Korean Young Male 2" />
                sPeds.Add("a_m_m_polynesian_01");    //"Polynesian" />
                sPeds.Add("a_m_y_polynesian_01");    //"Polynesian Young" />
                sPeds.Add("a_m_m_eastsa_01");    //"East SA Male" />
                sPeds.Add("a_m_m_eastsa_02");    //"East SA Male 2" />
                sPeds.Add("a_f_m_ktown_01");    //"Korean Female" />
                sPeds.Add("a_f_m_ktown_02");    //"Korean Female 2" />
                sPeds.Add("a_f_o_ktown_01");    //"Korean Old Female" />
            }       //Street
            else if (iRando == 19)
            {
                sPeds.Add("a_m_y_hiker_01");    //"Hiker Male" />
                sPeds.Add("a_f_y_hiker_01");    //"Hiker Female" />
            }       //Outdoors
            else if (iRando == 20)
            {
                sPeds.Add("a_m_m_skater_01");    //"Skater Male" />
                sPeds.Add("a_m_y_skater_01");    //"Skater Young Male" />
                sPeds.Add("a_m_y_skater_02");    //"Skater Young Male 2" />
                sPeds.Add("a_f_y_skater_01");    //"Skater Female" />
            }       //Skater
            else if (iRando == 21)
            {
                sPeds.Add("a_m_m_indian_01");    //"Indian Male" />
                sPeds.Add("a_m_y_indian_01");    //"Indian Young Male" />
                sPeds.Add("a_f_o_indian_01");    //"Indian Old Female" />
                sPeds.Add("a_f_y_indian_01");    //"Indian Young Female" />
            }       //indian
            else if (iRando == 22)
            {
                sPeds.Add("a_m_y_juggalo_01");    //"Juggalo Male" />
                sPeds.Add("a_f_y_juggalo_01");    //"Juggalo Female" />
            }       //Juggalo
            else if (iRando == 23)
            {
                sPeds.Add("a_m_y_methhead_01");    //"Meth Addict" />
                sPeds.Add("a_f_y_rurmeth_01");    //"Rural Meth Addict Female" />
                sPeds.Add("a_f_m_salton_01");    //"Salton Female" />
                sPeds.Add("a_f_o_salton_01");    //"Salton Old Female" />
                sPeds.Add("a_m_m_hillbilly_01");    //"Hillbilly Male" />
                sPeds.Add("a_m_m_hillbilly_02");    //"Hillbilly Male 2" />
                sPeds.Add("a_m_m_rurmeth_01");    //"Rural Meth Addict Male" />
                sPeds.Add("a_m_m_farmer_01");    //"Farmer" />
                sPeds.Add("a_m_m_salton_01");    //"Salton Male" />
                sPeds.Add("a_m_m_salton_02");    //"Salton Male 2" />
                sPeds.Add("a_m_m_salton_03");    //"Salton Male 3" />
                sPeds.Add("a_m_m_salton_04");    //"Salton Male 4" />
                sPeds.Add("a_m_o_salton_01");    //"Salton Old Male" />
                sPeds.Add("a_m_y_salton_01");    //"Salton Young Male" />
                sPeds.Add("a_m_m_mexcntry_01");    //"Mexican Rural" />

            }       //Rural
            else if (iRando == 24)
            {
                sPeds.Add("a_f_m_skidrow_01");    //"Skid Row Female" />
                sPeds.Add("a_m_m_skidrow_01");    //"Skid Row Male" />
                sPeds.Add("a_m_m_tramp_01");    //"Tramp Male" />
                sPeds.Add("a_m_o_tramp_01");    //"Tramp Old Male" />
                sPeds.Add("a_f_m_tramp_01");    //"Tramp Female" />
                sPeds.Add("a_f_m_trampbeac_01");    //"Beach Tramp Female" />
                sPeds.Add("a_m_m_trampbeac_01");    //"Beach Tramp Male" />
            }       //Tramp
            else if (iRando == 25)
            {
                sPeds.Add("a_f_m_soucent_01");    //"South Central Female" />
                sPeds.Add("a_f_m_soucent_02");    //"South Central Female 2" />
                sPeds.Add("a_f_m_soucentmc_01");    //"South Central MC Female" />
                sPeds.Add("a_f_o_soucent_01");    //"South Central Old Female" />
                sPeds.Add("a_f_o_soucent_02");    //"South Central Old Female 2" />
                sPeds.Add("a_f_y_soucent_01");    //"South Central Young Female" />
                sPeds.Add("a_f_y_soucent_02");    //"South Central Young Female 2" />
                sPeds.Add("a_f_y_soucent_03");    //"South Central Young Female 3" />
                sPeds.Add("a_m_m_socenlat_01");    //"South Central Latino Male" />
                sPeds.Add("a_m_m_soucent_01");    //"South Central Male" />
                sPeds.Add("a_m_m_soucent_02");    //"South Central Male 2" />
                sPeds.Add("a_m_m_soucent_03");    //"South Central Male 3" />
                sPeds.Add("a_m_m_soucent_04");    //"South Central Male 4" />
                sPeds.Add("a_m_o_soucent_01");    //"South Central Old Male" />
                sPeds.Add("a_m_o_soucent_02");    //"South Central Old Male 2" />
                sPeds.Add("a_m_o_soucent_03");    //"South Central Old Male 3" />
                sPeds.Add("a_m_y_soucent_01");    //"South Central Young Male" />
                sPeds.Add("a_m_y_soucent_02");    //"South Central Young Male 2" />
                sPeds.Add("a_m_y_soucent_03");    //"South Central Young Male 3" />
                sPeds.Add("a_m_y_soucent_04");    //"South Central Young Male 4" />
            }       //South Central
            else if (iRando == 26)
            {
                sPeds.Add("a_f_m_tourist_01");    //"Tourist Female" />
                sPeds.Add("a_f_y_tourist_01");    //"Tourist Young Female" />
                sPeds.Add("a_f_y_tourist_02");    //"Tourist Young Female 2" />
                sPeds.Add("a_m_m_tourist_01");    //"Tourist Male" />
            }       //Tourist 
            else if (iRando == 27)
            {
                sPeds.Add("a_m_m_paparazzi_01");    //"Paparazzi Male" />
                sPeds.Add("s_f_y_bartender_01");    //"Bartender" />
                sPeds.Add("cs_bankman");    //"Bank Manager" />
                sPeds.Add("mp_s_m_armoured_01");    //"Armoured Van Security Male" />
                sPeds.Add("mp_f_cardesign_01");    //"Office Garage Mechanic (Female)" />
                sPeds.Add("mp_g_m_pros_01");    //"Pros" />
                sPeds.Add("mp_m_securoguard_01");    //"Securoserve Guard (Male)" />
                sPeds.Add("mp_m_shopkeep_01");    //"Shopkeeper (Male)" />
                sPeds.Add("mp_f_bennymech_01");    //"Benny Mechanic (Female)" />
                sPeds.Add("s_f_y_airhostess_01");    //"Air Hostess" />
                sPeds.Add("s_f_m_fembarber");    //"Barber Female" />
                sPeds.Add("s_f_y_casino_01");    //"Casino Staff" />
                sPeds.Add("s_f_y_factory_01");    //"Factory Worker Female" />
                sPeds.Add("s_f_y_hooker_01");    //"Hooker" />
                sPeds.Add("s_f_y_hooker_02");    //"Hooker 2" />
                sPeds.Add("s_f_y_hooker_03");    //"Hooker 3" />
                sPeds.Add("s_f_y_scrubs_01");    //"Hospital Scrubs Female" />
                sPeds.Add("s_f_m_maid_01");    //"Maid" />
                sPeds.Add("s_f_y_migrant_01");    //"Migrant Female" />
                sPeds.Add("s_f_m_sweatshop_01");    //"Sweatshop Worker" />
                sPeds.Add("s_f_y_sweatshop_01");    //"Sweatshop Worker Young" />
                sPeds.Add("s_f_y_clubbar_01");    //"Club Bartender Female" />
                sPeds.Add("s_m_m_armoured_01");    //"Armoured Van Security" />
                sPeds.Add("s_m_m_armoured_02");    //"Armoured Van Security 2" />
                sPeds.Add("s_m_y_autopsy_01");    //"Autopsy Tech" />
                sPeds.Add("s_m_m_autoshop_01");    //"Autoshop Worker" />
                sPeds.Add("s_m_m_autoshop_02");    //"Autoshop Worker 2" />
                sPeds.Add("s_m_y_barman_01");    //"Barman" />
                sPeds.Add("s_m_m_cntrybar_01");    //"Bartender (Rural)" />
                sPeds.Add("s_m_m_bouncer_01");    //"Bouncer" />
                sPeds.Add("s_m_y_busboy_01");    //"Busboy" />
                sPeds.Add("s_m_y_casino_01");    //"Casino Staff" />
                sPeds.Add("s_m_y_chef_01");    //"Chef" />
                sPeds.Add("s_m_m_chemsec_01");    //"Chemical Plant Security" />
                sPeds.Add("s_m_m_ccrew_01");    //"Crew Member" />
                sPeds.Add("s_m_m_dockwork_01");    //"Dock Worker" />
                sPeds.Add("s_m_y_dockwork_01");    //"Dock Worker" />
                sPeds.Add("s_m_m_doctor_01");    //"Doctor" />
                sPeds.Add("s_m_y_doorman_01");    //"Doorman" />
                sPeds.Add("s_m_y_airworker");    //"Air Worker Male" />
                sPeds.Add("s_m_y_dwservice_01");    //"DW Airport Worker" />
                sPeds.Add("s_m_y_dwservice_02");    //"DW Airport Worker 2" />
                sPeds.Add("s_m_y_factory_01");    //"Factory Worker Male" />
                sPeds.Add("s_m_m_gaffer_01");    //"Gaffer" />
                sPeds.Add("s_m_y_garbage");    //"Garbage Worker" />
                sPeds.Add("s_m_m_gardener_01");    //"Gardener" />
                sPeds.Add("s_m_y_grip_01");    //"Grip" />
                sPeds.Add("s_m_m_hairdress_01");    //"Hairdresser Male" />
                sPeds.Add("s_m_m_janitor");    //"Janitor" />
                sPeds.Add("s_m_m_lifeinvad_01");    //"Life Invader Male" />
                sPeds.Add("s_m_m_linecook");    //"Line Cook" />
                sPeds.Add("s_m_m_lsmetro_01");    //"LS Metro Worker Male" />
                sPeds.Add("s_m_y_xmech_01");    //"Mechanic" />
                sPeds.Add("s_m_m_migrant_01");    //"Migrant Male" />
                sPeds.Add("s_m_y_pestcont_01");    //"Pest Control" />
                sPeds.Add("s_m_m_postal_01");    //"Postal Worker Male" />
                sPeds.Add("s_m_m_postal_02");    //"Postal Worker Male 2" />
                sPeds.Add("s_m_y_shop_mask");    //"Mask Salesman" />
                sPeds.Add("s_m_m_scientist_01");    //"Scientist" />
                sPeds.Add("s_m_m_security_01");    //"Security Guard" />
                sPeds.Add("s_m_m_strvend_01");    //"Street Vendor" />
                sPeds.Add("s_m_y_strvend_01");    //"Street Vendor Young" />
                sPeds.Add("s_m_m_gentransport");    //"Transport Worker Male" />
                sPeds.Add("s_m_m_trucker_01");    //"Trucker Male" />
                sPeds.Add("s_m_m_ups_01");    //"UPS Driver" />
                sPeds.Add("s_m_m_ups_02");    //"UPS Driver 2" />
                sPeds.Add("s_m_y_uscg_01");    //"US Coastguard" />
                sPeds.Add("s_m_y_valet_01");    //"Valet" />
                sPeds.Add("s_m_y_waiter_01");    //"Waiter" />
                sPeds.Add("s_m_y_winclean_01");    //"Window Cleaner" />
                sPeds.Add("s_m_y_clubbar_01");    //"Club Bartender Male" />
                sPeds.Add("s_m_y_waretech_01");    //"Warehouse Technician" />
                sPeds.Add("u_f_m_casinocash_01");    //"Casino Cashier" />
                sPeds.Add("u_f_m_casinoshop_01");    //"Casino shop owner" />
                sPeds.Add("u_m_m_bankman");    //"Bank Manager Male" />
                sPeds.Add("u_m_m_bikehire_01");    //"Bike Hire Guy" />
                sPeds.Add("u_m_y_burgerdrug_01");    //"Burger Drug Worker" />
                sPeds.Add("u_m_y_gunvend_01");    //"Gun Vendor" />
                sPeds.Add("u_m_m_jewelsec_01");    //"Jeweller Security" />
                sPeds.Add("u_m_y_paparazzi");    //"Paparazzi Young Male" />
                sPeds.Add("u_m_y_tattoo_01");    //"Tattoo Artist" />

            }       //Workers
            else if (iRando == 28)
            {
                sPeds.Add("a_m_y_dhill_01");    //"Downhill Cyclist" />
                sPeds.Add("a_m_y_jetski_01");    //"Jetskier" />
                sPeds.Add("a_m_y_motox_01");    //"Motocross Biker" />
                sPeds.Add("a_m_y_motox_02");    //"Motocross Biker 2" />
                sPeds.Add("a_m_y_roadcyc_01");    //"Road Cyclist" />
                sPeds.Add("u_m_y_cyclist_01");    //"Cyclist Male" />
                sPeds.Add("u_m_y_sbike");    //"Sports Biker" />
            }       //Sports
            else if (iRando == 29)
            {
                sPeds.Add("a_m_y_breakdance_01");    //"Breakdancer Male" />
                sPeds.Add("a_m_y_gay_01");    //"Gay Male" />
                sPeds.Add("a_m_y_gay_02");    //"Gay Male 2" />
                sPeds.Add("a_m_m_tranvest_01");    //"Transvestite Male" />
                sPeds.Add("a_m_m_tranvest_02");    //"Transvestite Male 2" />
                sPeds.Add("csb_bride");    //"Bride" />
                sPeds.Add("s_m_m_movalien_01");    //"Alien" />
                sPeds.Add("s_m_y_mime");    //"Mime Artist" />
                sPeds.Add("s_m_y_clown_01");    //"Clown" />
                sPeds.Add("s_m_o_busker_01");    //"Busker" />
                sPeds.Add("s_m_m_mariachi_01");    //"Mariachi" />
                sPeds.Add("s_m_m_movspace_01");    //"Movie Astronaut" />
                sPeds.Add("s_m_y_prisoner_01");    //"Prisoner" />
                sPeds.Add("s_m_y_prismuscl_01");    //"Prisoner (Muscular)" />
                sPeds.Add("s_m_y_robber_01");    //"Robber" />
                sPeds.Add("s_m_m_strperf_01");    //"Street Performer" />
                sPeds.Add("s_m_m_strpreach_01");    //"Street Preacher" />
                sPeds.Add("u_f_y_spyactress");    //"Spy Actress" />
                sPeds.Add("u_m_y_imporage");    //"Impotent Rage" />
                sPeds.Add("u_m_y_pogo_01");    //"Pogo the Monkey" />
                sPeds.Add("u_m_y_prisoner_01");    //"Prisoner" />
                sPeds.Add("u_m_y_rsranger_01");    //"Republican Space Ranger" />
                sPeds.Add("u_m_y_zombie_01");    //"Zombie" />
            }       //Novalty
            else if (iRando == 30)
            {
                sPeds.Add("a_m_m_hasjew_01");    //"Hasidic Jew Male" />
                sPeds.Add("a_m_y_hasjew_01");    //"Hasidic Jew Young Male" />
            }       //Hasidic
            else if (iRando == 31)
            {
                sPeds.Add("mp_m_fibsec_01");    //"FIB Security" />
                sPeds.Add("s_m_m_fiboffice_01");    //"FIB Office Worker" />
                sPeds.Add("s_m_m_fiboffice_02");    //"FIB Office Worker 2" />
                sPeds.Add("s_m_m_fibsec_01");    //"FIB Security" />
                sPeds.Add("s_m_m_highsec_01");    //"High Security" />
                sPeds.Add("s_m_m_highsec_02");    //"High Security 2" />
                sPeds.Add("s_m_m_ciasec_01");    //"IAA Security" />
                sPeds.Add("u_m_m_doa_01");    //"DOA Man" />
            }       //Fib
            else if (iRando == 32)
            {
                sPeds.Add("mp_f_helistaff_01");    //"Heli-Staff Female" />
                sPeds.Add("s_m_m_pilot_01");    //"Pilot" />
                sPeds.Add("s_m_y_pilot_01");    //"Pilot" />
                sPeds.Add("s_m_m_pilot_02");    //"Pilot 2" />
            }       //Pilots
            else if (iRando == 33)
            {
                //sPeds.Add("mp_m_avongoon");    //"Avon Goon" />
                sPeds.Add("mp_m_bogdangoon");    //"Bogdan Goon" />
                                                 //sPeds.Add("s_m_y_westsec_01");    //"Duggan Secruity" />
            }       //MP Goons
            else if (iRando == 34)
            {
                sPeds.Add("mp_f_stripperlite");    //"Stripper Lite (Female)" />
                sPeds.Add("s_f_y_stripper_01");    //"Stripper" />
                sPeds.Add("s_f_y_stripper_02");    //"Stripper 2" />
                sPeds.Add("s_f_y_stripperlite");    //"Stripper Lite" />
                sPeds.Add("u_f_y_danceburl_01");    //"Female Club Dancer (Burlesque)" />
                sPeds.Add("u_f_y_dancelthr_01");    //"Female Club Dancer (Leather)" />
                sPeds.Add("u_f_y_dancerave_01");    //"Female Club Dancer (Rave)" />
                sPeds.Add("u_m_y_danceburl_01");    //"Male Club Dancer (Burlesque)" />
                sPeds.Add("u_m_y_dancelthr_01");    //"Male Club Dancer (Leather)" />
                sPeds.Add("u_m_y_dancerave_01");    //"Male Club Dancer (Rave)" />
            }       //Dancers
            else if (iRando == 35)
            {
                sPeds.Add("mp_f_cocaine_01");    //"Biker Cocaine Female" />
                sPeds.Add("mp_m_cocaine_01");    //"Biker Cocaine Male" />
                sPeds.Add("mp_f_counterfeit_01");    //"Biker Counterfeit Female" />
                sPeds.Add("mp_m_counterfeit_01");    //"Biker Counterfeit Male" />
                sPeds.Add("mp_f_forgery_01");    //"Biker Forgery Female" />
                sPeds.Add("mp_m_forgery_01");    //"Biker Forgery Male" />
                sPeds.Add("mp_f_meth_01");    //"Biker Meth Female" />
                sPeds.Add("mp_m_meth_01");    //"Biker Meth Male" />
                sPeds.Add("mp_f_weed_01");    //"Biker Weed Female" />
                sPeds.Add("mp_m_weed_01");    //"Biker Weed Male" />
            }       //Biker Biz
            else if (iRando == 36)
            {

                sPeds.Add("s_m_y_ranger_01");    //"Ranger Male" />
                sPeds.Add("s_f_y_ranger_01");    //"Ranger Female" />
                sPeds.Add("s_m_y_sheriff_01");    //"Sheriff Male" />
                sPeds.Add("s_f_y_sheriff_01");    //"Sheriff Female" />
                sPeds.Add("s_m_y_hwaycop_01");    //"Highway Cop" />
                sPeds.Add("s_m_y_cop_01");    //"Cop Male" />
                sPeds.Add("s_f_y_cop_01");    //"Cop Female" />
            }       //Cops
            else if (iRando == 37)
            {
                sPeds.Add("a_c_chimp");    //"Chimp" />
            }       //Pogo the monkey--Dont use low lod
            else if (iRando == 38)
            {
                sPeds.Add("a_m_y_busicas_01");    //"Business Casual" />
                sPeds.Add("a_m_m_business_01");    //"Business Male" />
                sPeds.Add("a_m_y_business_01");    //"Business Young Male" />
                sPeds.Add("a_m_y_business_02");    //"Business Young Male 2" />
                sPeds.Add("a_m_y_business_03");    //"Business Young Male 3" />
                sPeds.Add("a_m_y_smartcaspat_01");    //"Formel Casino Guests" />
            }       //Suits Male
            else if (iRando == 39)
            {
                sPeds.Add("mp_m_g_vagfun_01");    //"Vagos Funeral" />
            }       //Vargos
            else if (iRando == 40)
            {
                sPeds.Add("a_m_y_motox_01");    //"Motocross Biker" />
                sPeds.Add("a_m_y_motox_02");    //"Motocross Biker 2" />
            }       //Racist - Cuttin corners F1
            else if (iRando == 41)
            {
                sPeds.Add("a_m_y_jetski_01");    //"Jetskier" />
            }       //Racist - Jet ski
            else if (iRando == 42)
            {
                sPeds.Add("a_m_y_cyclist_01");    //"Cyclist Male" />
                sPeds.Add("a_m_y_dhill_01");    //"Downhill Cyclist" />
                sPeds.Add("a_m_y_roadcyc_01");    //"Road Cyclist" />
            }       //Racist - Bike race
            else if (iRando == 43)
            {
                sPeds.Add("s_m_y_armymech_01");    //"Army Mechanic" />
                sPeds.Add("s_m_y_blackops_01");    //"Black Ops Soldier" />
                sPeds.Add("s_m_y_blackops_02");    //"Black Ops Soldier 2" />
                sPeds.Add("s_m_y_blackops_03");    //"Black Ops Soldier 3" />
                sPeds.Add("s_m_m_marine_01");    //"Marine" />
                sPeds.Add("s_m_m_marine_02");    //"Marine 2" />
                sPeds.Add("s_m_y_marine_01");    //"Marine Young" />
                sPeds.Add("s_m_y_marine_02");    //"Marine Young 2" />
                sPeds.Add("s_m_y_marine_03");    //"Marine Young 3" />
            }       //Racist - Havoc
            else if (iRando == 44)
            {
                sPeds.Add("a_m_y_motox_01");    //"Motocross Biker" />
                sPeds.Add("a_m_y_motox_02");    //"Motocross Biker 2" />
                sPeds.Add("g_f_y_vagos_01");    //"Vagos Female" />
                sPeds.Add("g_f_y_lost_01");    //"The Lost MC Female" />
                sPeds.Add("g_m_y_lost_01");    //"The Lost MC Male" />
                sPeds.Add("g_m_y_lost_02");    //"The Lost MC Male 2" />
                sPeds.Add("g_m_y_lost_03");    //"The Lost MC Male 3" />
                sPeds.Add("a_m_m_mlcrisis_01");    //"Midlife Crisis Casino Bikers" />
                sPeds.Add("mp_m_exarmy_01");    //"Ex-Army Male" />
            }       //Racist - Motobikes
            else if (iRando == 45)
            {
                sPeds.Add("a_f_y_beach_01");    //"Beach Young Female" />
                sPeds.Add("a_m_m_beach_01");    //"Beach Male" />
                sPeds.Add("a_m_m_beach_02");    //"Beach Male 2" />
                sPeds.Add("a_m_y_beach_01");    //"Beach Young Male" />
                sPeds.Add("a_m_y_beach_02");    //"Beach Young Male 2" />
                sPeds.Add("a_m_y_beach_03");    //"Beach Young Male 3" />
            }       //Racist - Yachts
            else if (iRando == 46)
            {
                sPeds.Add("a_m_m_golfer_01");    //"Golfer Male" />
                sPeds.Add("a_m_y_golfer_01");    //"Golfer Young Male" />
                sPeds.Add("a_f_y_golfer_01");    //"Golfer Young Female" />
            }       //golf
            else if (iRando == 47)
            {
                sPeds.Add("g_m_m_chemwork_01");    //"Chemical Plant Worker" />
                sPeds.Add("mp_f_meth_01");    //"Biker Meth Female" /> 
                sPeds.Add("mp_m_meth_01");    //"Biker Meth Male" />
            }       //industry workers
            else if (iRando == 48)
            {
                sPeds.Add("s_m_y_swat_01");    //"SWAT" />
                sPeds.Add("s_m_m_marine_01");    //"Marine" />
                sPeds.Add("s_m_m_marine_02");    //"Marine 2" />
                sPeds.Add("s_m_y_marine_01");    //"Marine Young" />
                sPeds.Add("s_m_y_marine_02");    //"Marine Young 2" />
                sPeds.Add("s_m_y_marine_03");    //"Marine Young 3" />
                sPeds.Add("s_m_y_blackops_01");    //"Black Ops Soldier" />
                sPeds.Add("s_m_y_blackops_02");    //"Black Ops Soldier 2" />
                sPeds.Add("s_m_y_blackops_03");    //"Black Ops Soldier 3" />
            }       //Black opps
            else if (iRando == 49)
            {
                sPeds.Add("s_f_y_baywatch_01");    //"Baywatch Female" />
                sPeds.Add("s_m_y_armymech_01");    //"Army Mechanic" />
                sPeds.Add("s_m_y_baywatch_01");    //"Baywatch Male" />
                sPeds.Add("csb_trafficwarden");    //"Traffic Warden" />
                sPeds.Add("s_m_y_fireman_01");    //"Fireman Male" />
                sPeds.Add("s_m_m_paramedic_01");    //"Paramedic" />
                sPeds.Add("s_m_m_prisguard_01");    //"Prison Guard" />
            }       //Random Services
            else if (iRando == 50)
            {
                sPeds.Add("a_m_m_mexlabor_01");    //"Mexican Labourer" />
                sPeds.Add("s_m_y_construct_01");    //"construction Worker" />
                sPeds.Add("s_m_y_construct_02");    //"construction Worker 2" />
                sPeds.Add("s_m_m_lathandy_01");    //"Latino Handyman Male" />
            }       //construction
            else if (iRando == 51)
            {
                sPeds.Add("a_f_m_beach_01");    //"Beach Female" />
                sPeds.Add("A_F_Y_Beach_02");
                sPeds.Add("a_f_y_beach_01");    //"Beach Young Female" />
                sPeds.Add("a_m_m_beach_01");    //"Beach Male" />
                sPeds.Add("a_m_m_beach_02");    //"Beach Male 2" />
                sPeds.Add("a_m_y_beach_01");    //"Beach Young Male" />
                sPeds.Add("a_m_y_beach_02");    //"Beach Young Male 2" />
                sPeds.Add("a_m_y_beach_03");    //"Beach Young Male 3" />
                sPeds.Add("a_m_m_malibu_01");    //"Malibu Male" />
                sPeds.Add("a_m_y_sunbathe_01");    //"Sunbather Male" />
                sPeds.Add("a_m_y_hippy_01");    //"Hippie Male" />
                sPeds.Add("a_f_y_hippie_01");    //"Hippie Female" />
                sPeds.Add("a_m_y_beachvesp_01");    //"Vespucci Beach Male" />
                sPeds.Add("a_m_y_beachvesp_02");    //"Vespucci Beach Male 2" />
                sPeds.Add("u_m_y_party_01");    //"Partygoer" />
            }       //YachtParty
            else if (iRando == 52)
            {
                sPeds.Add("G_M_M_CartelGuards_01");
                sPeds.Add("G_M_M_CartelGuards_02");

            }       //CayoMob
            else if (iRando == 53)
            {
                sPeds.Add("A_F_Y_CarClub_01");
                sPeds.Add("A_M_Y_CarClub_01");
                sPeds.Add("CSB_DrugDealer");
                sPeds.Add("S_F_M_RetailStaff_01");
                sPeds.Add("S_M_M_RaceOrg_01");

            }       //carmeat
            else if (iRando == 54)
            {
                sPeds.Add("a_f_y_clubcust_01");
                sPeds.Add("a_f_y_clubcust_02");
                sPeds.Add("a_f_y_clubcust_03");
                sPeds.Add("a_f_y_clubcust_04");
                sPeds.Add("a_m_y_clubcust_01");
                sPeds.Add("a_m_y_clubcust_02");
                sPeds.Add("a_m_y_clubcust_03");
                sPeds.Add("a_m_y_clubcust_04");
            }       //clubing
            else
            {
                sPeds.Add("a_m_m_tramp_01");    //"Tramp Male" />
            }


            if (sPeds.Count > 0)
            {
                if (sPeds.Count > 1)
                    sPedds = sPeds[RandInt(0, sPeds.Count - 1)];
                else
                    sPedds = sPeds[0];
            }
            else
                sPedds = "a_m_m_tramp_01";

            return sPedds;
        }
        public Ped NPCSpawn(string sPed, Vector3 vLocal, float fAce, bool bArmor, int iHeal, int iTask, int iSeat, Vehicle vMyCar, int iGun, bool bBlip, int iBlipCol, int iFree, string sName)
        {
            LogThis("NPCSpawn, sPed == " + sPed + ", bArmor == " + bArmor + ", iHeal == " + iHeal + ", iTask == " + iTask + ", iSeat == " + iSeat + ", iGun == " + iGun + ", bBlip == " + bBlip + ", iFree == " + iFree + ", sName == " + sName);

            Ped BuildPed = null;
            bool bMale = false;

            if (sPed == "")
            {
                if (iFree == 0)
                    iFree = 1;

                if (FindRandom(67, 0, 20) < 10)
                {
                    sPed = "mp_m_freemode_01";
                    bMale = true;
                }
                else
                {
                    sPed = "mp_f_freemode_01";
                    bMale = false;
                }
            }
            else if (sPed == "mp_m_freemode_01")
            {
                if (iFree == 0)
                    iFree = 1;
                bMale = true;
            }

            var model = new Model(sPed);
            model.Request();    // Check if the model is valid
            if (model.IsInCdImage && model.IsValid)
            {
                while (!model.IsLoaded)
                    Wait(1);

                BuildPed = Function.Call<Ped>(Hash.CREATE_PED, 4, model, vLocal.X, vLocal.Y, vLocal.Z, fAce, false, false);
                Function.Call(Hash.SET_MODEL_AS_NO_LONGER_NEEDED, model.Hash);

                if (BuildPed.Exists())
                {
                    BuildPed.Accuracy = RandInt(iLowerAim, iUpperAim);
                    BuildPed.MaxHealth = iHeal;
                    BuildPed.Health = iHeal;

                    Function.Call(Hash.SET_PED_PATH_CAN_USE_CLIMBOVERS, BuildPed.Handle, true);
                    Function.Call(Hash.SET_PED_PATH_CAN_USE_LADDERS, BuildPed.Handle, true);
                    Function.Call(Hash.SET_PED_PATH_CAN_DROP_FROM_HEIGHT, BuildPed.Handle, true);

                    if (bArmor)
                        BuildPed.Armor = 100;

                    PedList_01.Add(new Ped(BuildPed.Handle));

                    ReadWriteBlips(false, true, -1, -1, BuildPed.Handle, -1, -1, -1);

                    if (bBlip)
                        PedBlimp(BuildPed, 0.75f, false, false, iBlipCol, sName);

                    if (iGun > 0)
                        GunningIt(BuildPed, iGun);

                    if (iSeat > 0)
                    {
                        WarptoAnyVeh(vMyCar, BuildPed, iSeat);
                        NpcVehicleTasks(BuildPed, vMyCar, iTask);
                    }
                    else
                    {
                        if (iTask > 0)
                            NpcTasks(BuildPed, iTask);
                    }

                    if (iFree > 0)
                        OnlinePlayers(BuildPed, bMale, iFree);                

                }
                else
                    BuildPed = null;
            }
            else
                BuildPed = null;

            return BuildPed;
        }
        private void RandPlayerTypes(Ped Pedx, bool bMale)
        {
            LogThis("RandPlayerTypes, bMale == " + bMale);

            int shapeFirstID = 0;
            int shapeSecondID = 0;
            int shapeThirdID = 0;
            int skinFirstID = 1;
            int skinSecondID = 1;
            int skinThirdID = 1;
            int iHairStyle = 0;
            float shapeMix = 0.0f;
            float skinMix = 0.0f;
            float thirdMix = 0.0f;
            bool isParent = false;

            if (bMale)
            {
                shapeFirstID = RandInt(0, 20);
                shapeSecondID = RandInt(0, 20);
                shapeThirdID = shapeFirstID;
                skinFirstID = shapeFirstID;
                skinSecondID = shapeSecondID;
                skinThirdID = shapeThirdID;
                iHairStyle = RandInt(25, 76);
            }
            else
            {
                shapeFirstID = RandInt(21, 41);
                shapeSecondID = RandInt(21, 41);
                shapeThirdID = shapeFirstID;
                skinFirstID = shapeFirstID;
                skinSecondID = shapeSecondID;
                skinThirdID = shapeThirdID;
                iHairStyle = RandInt(25, 80);
            }

            shapeMix = RandFlow(-0.9f, 0.9f);
            skinMix = RandFlow(0.9f, 0.99f);
            thirdMix = RandFlow(-0.9f, 0.9f);

            Function.Call(Hash.SET_PED_HEAD_BLEND_DATA, Pedx.Handle, shapeFirstID, shapeSecondID, shapeThirdID, skinFirstID, skinSecondID, skinThirdID, shapeMix, skinMix, thirdMix, isParent);

            int iFeature = 0;

            while (iFeature < 12)
            {
                int iColour = 0;
                int iChange = RandInt(0, Function.Call<int>(Hash._GET_NUM_HEAD_OVERLAY_VALUES, iFeature));
                float fVar = RandFlow(0.45f, 0.99f);

                if (iFeature == 0)
                {
                    iChange = RandInt(0, iChange);
                }//Blemishes
                else if (iFeature == 1)
                {
                    if (bMale)
                        iChange = RandInt(0, iChange);
                    else
                        iChange = 255;
                    iColour = 1;
                }//Facial Hair
                else if (iFeature == 2)
                {
                    iChange = RandInt(0, iChange);
                    iColour = 1;
                }//Eyebrows
                else if (iFeature == 3)
                {
                    iChange = 255;
                }//Ageing
                else if (iFeature == 4)
                {
                    if (RandInt(0, 50) < 40)
                    {
                        iChange = RandInt(0, iChange);
                    }
                    else
                        iChange = 255;
                }//Makeup
                else if (iFeature == 5)
                {
                    if (!bMale)
                        iChange = RandInt(0, iChange);
                    else
                        iChange = 255;
                    iColour = 2;
                }//Blush
                else if (iFeature == 6)
                {
                    iChange = RandInt(0, iChange);
                }//Complexion
                else if (iFeature == 7)
                {
                    iChange = 255;
                }//Sun Damage
                else if (iFeature == 8)
                {
                    if (!bMale)
                        iChange = RandInt(0, iChange);
                    else
                        iChange = 255;
                    iColour = 2;
                }//Lipstick
                else if (iFeature == 9)
                {
                    iChange = RandInt(0, iChange);
                }//Moles/Freckles
                else if (iFeature == 10)
                {
                    if (bMale)
                        iChange = RandInt(0, iChange);
                    else
                        iChange = 255;
                    iColour = 1;
                }//Chest Hair
                else if (iFeature == 11)
                {
                    iChange = RandInt(0, iChange);
                }//Body Blemishes

                int AddColour = RandInt(0, 64);

                Function.Call(Hash.SET_PED_HEAD_OVERLAY, Pedx.Handle, iFeature, iChange, fVar);

                if (iColour > 0)
                    Function.Call(Hash._SET_PED_HEAD_OVERLAY_COLOR, Pedx.Handle, iFeature, iColour, AddColour, 0);

                iFeature += 1;
            }

            int iHair = RandInt(0, Function.Call<int>(Hash._GET_NUM_HAIR_COLORS));
            int iHair2 = RandInt(0, Function.Call<int>(Hash._GET_NUM_HAIR_COLORS));

            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 2, iHairStyle, 0, 2);//hair

            Function.Call(Hash._SET_PED_HAIR_COLOR, Pedx.Handle, iHair, iHair2);
        }
        private void OnlinePlayers(Ped Pedx, bool bMale, int iPreset)
        {
            LogThis("OnlinePlayers, bMale == " + bMale + ", iPreset == " + iPreset);

            bool bNoCloths = false;

            if (bMale)
            {
                if (iPreset == 2)
                {
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 1, 134, 8, 2);//mask
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 2, 0, 0, 2);//hair
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 3, 3, 0, 2);//Torso
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 4, 106, 8, 2);//Legs
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 5, 0, 0, 2);//Hands
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 6, 83, 8, 2);//shoes
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 7, 0, 0, 2);//Scarf
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 8, -1, 0, 2);//AccTop
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 9, 0, 0, 2);//Armor
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 10, 0, 0, 2);//Emb--not used
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 11, 274, 8, 2);//Top2
                }
                else if (iPreset == 3)
                {
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 1, 0, 0, 2);//mask
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 2, 57, 0, 2);//hair
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 3, 15, 0, 2);//Torso
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 4, 92, RandInt(0, 19), 2);//Legs
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 5, 66, RandInt(0, 4), 2);//Hands
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 6, 53, RandInt(0, 5), 2);//shoes
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 7, -1, 0, 2);//Scarf
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 8, -1, 0, 2);//AccTop
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 9, 0, 0, 2);//Armor
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 10, 0, 0, 2);//Emb--not used
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 11, 228, RandInt(0, 19), 2);//Top2
                    RandPlayerTypes(Pedx, bMale);
                }
                else if (iPreset == 4)
                {
                    RandPlayerTypes(Pedx, bMale);
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 1, 57, 4, 2);//mask
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 2, 0, 0, 2);//hair
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 3, 0, 0, 2);//Torso
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 4, 34, 0, 2);//Legs
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 5, 45, 0, 2);//Hands
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 6, 12, 0, 2);//shoes
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 7, 0, 0, 2);//Scarf
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 8, 0, 0, 2);//AccTop
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 9, 0, 0, 2);//Armor
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 10, 0, 0, 2);//Emb--not used
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 11, 251, 0, 2);//Top2
                }
                else if (iPreset == 5)
                {
                    RandPlayerTypes(Pedx, bMale);
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 1, 56, 2, 2);//mask
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 2, 0, 0, 2);//hair
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 3, 0, 0, 2);//Torso
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 4, 38, 0, 2);//Legs
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 5, 45, 0, 2);//Hands
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 6, 25, 0, 2);//shoes
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 7, 0, 0, 2);//Scarf
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 8, -1, 0, 2);//AccTop
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 9, 0, 0, 2);//Armor
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 10, 0, 0, 2);//Emb--not used
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 11, 218, 0, 2);//Top2
                }
                else if (iPreset == 6)
                {
                    RandPlayerTypes(Pedx, bMale);
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 1, 16, 4, 2);//mask
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 2, 0, 0, 2);//hair
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 3, 0, 0, 2);//Torso
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 4, 35, 0, 2);//Legs
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 5, 45, 0, 2);//Hands
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 6, 51, 0, 2);//shoes
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 7, 0, 0, 2);//Scarf
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 8, -1, 0, 2);//AccTop
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 9, 0, 0, 2);//Armor
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 10, 0, 0, 2);//Emb--not used
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 11, 203, 2, 2);//Top2
                }
                else
                {
                    if (Directory.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Outfit/"))
                    {
                        string sNamez = "FreeMale";
                        sWardrobe.Clear();
                        string[] sWrite = Directory.GetFiles("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Outfit/");
                        for (int i = 0; i < sWrite.Count(); i++)
                        {
                            string sting = sWrite[i];
                            if (sting.Contains(sNamez))
                            {
                                int iNum = sting.LastIndexOf("/") + 1;
                                sWardrobe.Add(sting.Substring(iNum));
                            }
                        }
                        int iWriteX = sWardrobe.Count;
                        if (iWriteX > 0)
                        {
                            iWriteX = RandInt(1, iWriteX - 1);
                            WardOutPut(sWardrobe[iWriteX], Pedx);
                        }
                        else
                            bNoCloths = true;
                    }
                    else
                        bNoCloths = true;

                    if (bNoCloths)
                    {
                        int RanChar = RandInt(1, 5);
                        if (RanChar == 1)
                        {
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 1, 0, 0, 2);//mask
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 2, 12, 4, 2);//hair
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 3, 1, 0, 2);//Torso
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 4, 1, 5, 2);//Legs
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 5, 0, 0, 2);//Hands
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 6, 65, 3, 2);//shoes
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 7, 0, 0, 2);//Scarf
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 8, 22, 4, 2);//AccTop
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 9, 0, 0, 2);//Armor
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 10, 0, 0, 2);//Emb--not used
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 11, 11, 0, 2);//Top2
                        }
                        else if (RanChar == 2)
                        {
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 1, 0, 0, 2);//mask
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 2, 14, 3, 2);//hair
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 3, 0, 0, 2);//Torso
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 4, 17, 0, 2);//Legs
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 5, 23, 4, 2);//Hands
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 6, 40, 1, 2);//shoes
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 7, 0, 0, 2);//Scarf
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 8, 26, 3, 2);//AccTop
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 9, 0, 0, 2);//Armor
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 10, 0, 0, 2);//Emb--not used
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 11, 35, 0, 2);//Top2
                        }
                        else if (RanChar == 3)
                        {
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 1, 147, 0, 2);//mask
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 2, 0, 0, 2);//hair
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 3, 167, 0, 2);//Torso
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 4, 33, 0, 2);//Legs
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 5, 0, 0, 2);//Hands
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 6, 36, 1, 2);//shoes
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 7, 0, 0, 2);//Scarf
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 8, -1, 0, 2);//AccTop
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 9, 0, 0, 2);//Armor
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 10, 0, 0, 2);//Emb--not used
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 11, 289, 0, 2);//Top2
                        }
                        else if (RanChar == 4)
                        {
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 1, 0, 0, 2);//mask
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 2, 11, 4, 2);//hair
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 3, 19, 0, 2);//Torso
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 4, 88, 7, 2);//Legs
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 5, 0, 0, 2);//Hands
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 6, 14, 2, 2);//shoes
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 7, 0, 0, 2);//Scarf
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 8, -1, 0, 2);//AccTop
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 9, 0, 0, 2);//Armor
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 10, 0, 0, 2);//Emb--not used
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 11, 273, 15, 2);//Top2
                        }
                        else
                        {
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 1, 125, 0, 2);//mask
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 2, 0, 0, 2);//hair
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 3, -1, 0, 2);//Torso
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 4, 114, 6, 2);//Legs
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 5, 0, 0, 2);//Hands
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 6, 78, 6, 2);//shoes
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 7, 0, 0, 2);//Scarf
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 8, -1, 0, 2);//AccTop
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 9, 0, 0, 2);//Armor
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 10, 0, 0, 2);//Emb--not used
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 11, 287, 6, 2);//Top2
                        }
                    }

                    RandPlayerTypes(Pedx, bMale);
                }
            }
            else
            {
                if (iPreset == 2)
                {
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 1, 134, 8, 2);//mask
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 2, 0, 0, 2);//hair
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 3, 13, 0, 2);//Torso
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 4, 113, 8, 2);//Legs
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 5, 0, 0, 2);//Hands
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 6, 87, 8, 2);//shoes
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 7, -1, 0, 2);//Scarf
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 8, -1, 0, 2);//AccTop
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 9, 0, 0, 2);//Armor
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 10, 0, 0, 2);//Emb--not used
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 11, 287, 8, 2);//Top2
                }
                else if (iPreset == 3)
                {
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 1, 0, 0, 2);//mask
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 2, 7, 0, 2);//hair
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 3, 14, 0, 2);//Torso
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 4, 48, RandInt(0, 2), 2);//Legs
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 5, 60, RandInt(0, 9), 2);//Hands
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 6, 51, RandInt(0, 5), 2);//shoes
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 7, 0, 0, 2);//Scarf
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 8, -1, 0, 2);//AccTop
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 9, 0, 0, 2);//Armor
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 10, 0, 0, 2);//Emb--not used
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 11, 238, RandInt(0, 19), 2);//Top2
                    RandPlayerTypes(Pedx, bMale);
                }
                else
                {
                    if (Directory.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Outfit/"))
                    {
                        string sNamez = "FreeFemale";
                        sWardrobe.Clear();
                        string[] sWrite = Directory.GetFiles("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Outfit/");
                        for (int i = 0; i < sWrite.Count(); i++)
                        {
                            string sting = sWrite[i];
                            if (sting.Contains(sNamez))
                            {
                                int iNum = sting.LastIndexOf("/") + 1;
                                sWardrobe.Add(sting.Substring(iNum));
                            }
                        }
                        int iWriteX = sWardrobe.Count;
                        if (iWriteX > 0)
                        {
                            iWriteX = RandInt(1, iWriteX - 1);
                            WardOutPut(sWardrobe[iWriteX], Pedx);

                            Function.Call(Hash.SET_PED_PROP_INDEX, Pedx.Handle, 2, RandInt(-1, Function.Call<int>(Hash.GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS, Pedx.Handle, 2)), RandInt(0, Function.Call<int>(Hash.GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS, Pedx.Handle, 2)), true);
                        }
                        else
                            bNoCloths = true;
                    }
                    else
                        bNoCloths = true;

                    if (bNoCloths)
                    {
                        int RanChar = RandInt(1, 5);
                        if (RanChar == 1)
                        {
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 1, 146, 0, 2);//mask
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 2, 0, 0, 2);//hair
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 3, -1, 1, 2);//Torso
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 4, 113, 1, 2);//Legs
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 5, 0, 0, 2);//Hands
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 6, 23, 8, 2);//shoes
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 7, 0, 0, 2);//Scarf
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 8, 0, 0, 2);//AccTop
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 9, 0, 0, 2);//Armor
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 10, 0, 0, 2);//Emb--not used
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 11, 287, 1, 2);//Top2
                        }
                        else if (RanChar == 2)
                        {
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 1, 0, 0, 2);//mask
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 2, 11, 3, 2);//hair
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 3, 169, 12, 2);//Torso
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 4, 93, 4, 2);//Legs
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 5, 0, 0, 2);//Hands
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 6, 3, 0, 2);//shoes
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 7, 0, 0, 2);//Scarf
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 8, -1, 0, 2);//AccTop
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 9, 0, 0, 2);//Armor
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 10, 0, 0, 2);//Emb--not used
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 11, -1, 0, 2);//Top2
                        }
                        else if (RanChar == 3)
                        {
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 1, 0, 0, 2);//mask
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 2, 13, 3, 2);//hair
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 3, -1, 0, 2);//Torso
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 4, 98, 4, 2);//Legs
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 5, 0, 0, 2);//Hands
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 6, 71, 4, 2);//shoes
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 7, 1, 5, 2);//Scarf
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 8, -1, 0, 2);//AccTop
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 9, 0, 0, 2);//Armor
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 10, 0, 0, 2);//Emb--not used
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 11, 254, 4, 2);//Top2
                        }
                        else if (RanChar == 4)
                        {
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 1, 0, 0, 2);//mask
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 2, 10, 1, 2);//hair
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 3, 15, 0, 2);//Torso
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 4, 9, 6, 2);//Legs
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 5, 0, 0, 2);//Hands
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 6, 54, 3, 2);//shoes
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 7, 100, 0, 2);//Scarf
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 8, 36, 1, 2);//AccTop
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 9, 0, 0, 2);//Armor
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 10, 0, 0, 2);//Emb--not used
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 11, 13, 5, 2);//Top2
                        }
                        else
                        {
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 1, 0, 0, 2);//mask
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 2, 2, 3, 2);//hair
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 3, 11, 0, 2);//Torso
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 4, 75, 1, 2);//Legs
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 5, 0, 0, 2);//Hands
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 6, 20, 5, 2);//shoes
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 7, 0, 0, 2);//Scarf
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 8, -1, 0, 2);//AccTop
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 9, 0, 0, 2);//Armor
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 10, 0, 0, 2);//Emb--not used
                            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Pedx.Handle, 11, 208, 4, 2);//Top2
                        }
                    }

                    RandPlayerTypes(Pedx, bMale);
                }
            }
        }
        private void NpcTasks(Ped Peddy, int iTask)
        {
            LogThis("NpcTasks, iTask == " + iTask);

            if (iTask == 1)
            {
                Peddy.Task.Cower(-1);
            }             //Cower
            else if (iTask == 2)
            {
                Peddy.CanBeShotInVehicle = true;
                Peddy.RelationshipGroup = GP_Player;
                AddGroupie(Peddy);
                Function.Call(Hash.TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS, Peddy.Handle, true);
            }        //BankRobbers
            else if (iTask == 3)
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 3, 0, 0, 2);
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 4, 0, 0, 2);
                Convicts_KrishaLine(Peddy, true);
            }        //Convicts leader
            else if (iTask == 4)
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 3, 0, 0, 2);
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, 4, 0, 0, 2);
                Convicts_KrishaLine(Peddy, false);
            }        //Convicts
            else if (iTask == 5)
            {
                EnterPlayerVeh(Peddy, 1, RandFlow(1.00f, 2.00f));
            }        //Fubar Passenger 01
            else if (iTask == 6)
            {
                EnterPlayerVeh(Peddy, 2, RandFlow(1.00f, 2.00f));
            }        //Fubar Passenger 02
            else if (iTask == 7)
            {
                EnterPlayerVeh(Peddy, 3, RandFlow(1.00f, 2.00f));
            }        //Fubar Passenger 03
            else if (iTask == 8)
            {
                AttackThePlayer(Peddy, true);
            }        //Fight player Guns Guns Guns
            else if (iTask == 9)
            {
                Peddy.ApplyDamage(99);
                Peddy.Health = 0;
            }        //DeadNPCs
            else if (iTask == 10)
            {
                PedScenario(Peddy, "WORLD_HUMAN_COP_IDLES", Peddy.Position, Peddy.Heading, false);
            }       //Idle Cops
            else if (iTask == 11)
            {
                ArmNpcWeapon("WEAPON_minigun", Peddy);
                Function.Call(Hash.SET_PED_CURRENT_WEAPON_VISIBLE, Peddy.Handle, true, false, true, true);
                Function.Call(Hash.SET_PED_PROP_INDEX, Peddy.Handle, 0, 0, 0, false);
                Peddy.RelationshipGroup = GP_ANPCs;
            }       //Juggonorts-add acc hat to 1-
            else if (iTask == 12)
            {
                Function.Call(Hash.SET_PED_RELATIONSHIP_GROUP_HASH, Peddy.Handle, Function.Call<int>(Hash.GET_HASH_KEY, "COUGAR"));
                Peddy.Task.PlayAnimation("creatures@cat@amb@world_cat_sleeping_ground@idle_a", "idle_a", 8.0f, -1, true, 1.0f);
                Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Peddy.Handle, 0, true);
                Peddy.AlwaysKeepTask = true;
                Peddy.BlockPermanentEvents = true;
            }       //Fire cat
            else if (iTask == 13)
            {
                PedScenario(Peddy, "WORLD_HUMAN_JOG_STANDING", Peddy.Position, Peddy.Heading, false);
                Function.Call(Hash.TASK_TURN_PED_TO_FACE_ENTITY, Peddy.Handle, Game.Player.Character.Handle, -1);
                Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Peddy.Handle, 0, true);
            }       //Fire cat owner
            else if (iTask == 14)
            {
                Peddy.RelationshipGroup = GP_ANPCs;
                Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Peddy.Handle, 0, true);
                Peddy.Task.FightAgainstHatedTargets(45.00f);
                Function.Call(Hash.SET_PED_COMBAT_MOVEMENT, Peddy.Handle, 2);
                Peddy.AlwaysKeepTask = true;
            }       //Water ImportGaurds
            else if (iTask == 15)
            {
                AttackThePlayer(Peddy, true);
                Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Peddy.Handle, 0, true);
                int iRan = FindRandom(97, 1, 10);
                if (iRan < 3)
                    iRan = 2;
                else if (iRan < 6)
                    iRan = 1;
                else
                    iRan = 0;
                Function.Call(Hash.SET_PED_COMBAT_MOVEMENT, Peddy.Handle, iRan);
            }       //Water YachtAttacks
            else if (iTask == 16)
            {
                Peddy.IsEnemy = true;
                Hitman_AddVisionCones(Peddy);
                Peddy.BlockPermanentEvents = true;
            }       //HitMan Mobs
            else if (iTask == 17)
            {
                Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Peddy.Handle, 0, true);
                Function.Call(Hash.TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS, Peddy.Handle, true);
            }       //Flee & Blocking
            else if (iTask == 18)
            {
                AttackThePlayer(Peddy, true);
                Function.Call(Hash.SET_PED_COMBAT_MOVEMENT, Peddy.Handle, 0);
                Function.Call(Hash.SET_PED_RANDOM_COMPONENT_VARIATION, Peddy.Handle, false);
            }       //Combat - static
            else if (iTask == 19)
            {
                AttackThePlayer(Peddy, true);
                Function.Call(Hash.SET_PED_COMBAT_MOVEMENT, Peddy.Handle, 1);
                Function.Call(Hash.SET_PED_RANDOM_COMPONENT_VARIATION, Peddy.Handle, false);
            }       //Combat - Defence
            else if (iTask == 20)
            {
                AttackThePlayer(Peddy, true);
                Function.Call(Hash.SET_PED_COMBAT_MOVEMENT, Peddy.Handle, 2);
                Function.Call(Hash.SET_PED_RANDOM_COMPONENT_VARIATION, Peddy.Handle, false);
            }       //Combat - Offence
            else if (iTask == 21)
            {
                Peddy.Task.PlayAnimation("amb@world_human_stand_fishing@idle_a", "idle_b", 8.00f, -1, true, 1.00f);
                Prop FishRod = BuildProp("prop_fishing_rod_01", Peddy.Position, Vector3.Zero, true, true);
                if (FishRod != null)
                    FishRod.AttachTo(Peddy, Peddy.GetBoneIndex(Bone.SKEL_L_Hand), new Vector3(0.00f, -0.00f, 0.00f), new Vector3(-122.00f, 100.00f, 30.00f));
            }       //Water Phishing
            else if (iTask == 22)
            {
                BbBomb_BombAtractor(Peddy);
            }       //Bbomb Atractor
            else if (iTask == 23)
            {
                Function.Call(Hash.TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS, Peddy.Handle, true);
                Hitman_AddVisionCones(Peddy);
                EnterAnyVeh(VehTrackin_01, Peddy, 0, 1.0f);
            }       //MoresMan
            else if (iTask == 24)
            {
                ForceAnim(Peddy, "amb@code_human_in_bus_passenger_idles@male@sit@base", "base", Peddy.Position, Peddy.Rotation);
                Function.Call(Hash.SET_PED_CAN_SWITCH_WEAPON, Peddy.Handle, true);
            }       //peds in back of plane
            else if (iTask == 25)
            {
                BikerRaids_BizzPedsSec(Peddy, iMissionVar_02);
                AttackThePlayer(Peddy, true);
            }       //BikerBizSecurity
            else if (iTask == 26)
            {
                Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Peddy.Handle, 0, true);
                Function.Call(Hash.TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS, Peddy.Handle, true);
                Function.Call(Hash.SET_PED_RANDOM_COMPONENT_VARIATION, Peddy.Handle, false);
                BikerRaids_BizzPedsWork(Peddy, iMissionVar_02, false);
            }       //BikerBizFemail
            else if (iTask == 27)
            {
                Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Peddy.Handle, 0, true);
                Function.Call(Hash.TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS, Peddy.Handle, true);
                Function.Call(Hash.SET_PED_RANDOM_COMPONENT_VARIATION, Peddy.Handle, false);
                BikerRaids_BizzPedsWork(Peddy, iMissionVar_02, true);
            }       //BikerBizmail
            else if (iTask == 28)
            {
                Function.Call(Hash.SET_PED_RELATIONSHIP_GROUP_HASH, Peddy.Handle, Function.Call<int>(Hash.GET_HASH_KEY, "COUGAR"));
                AttackThePlayer(Peddy, false);
            }       //Big shark
            else if (iTask == 29)
            {
                PedScenario(Peddy, "WORLD_HUMAN_PARTYING", Peddy.Position, Peddy.Heading, false);
            }       //Dance
            else if (iTask == 30)
            {
                MishPed.Add(new Ped(Peddy.Handle));
                PedScenario(Peddy, "WORLD_HUMAN_GUARD_STAND", Peddy.Position, Peddy.Heading, false);
            }       //Club Bouncer
            else if (iTask == 31)
            {
                TempAgency_02_BuildCluber(Peddy);
            }       //DrinkNDance Clubber
            else if (iTask == 32)
            {
                PedScenario(Peddy, "WORLD_HUMAN_SMOKING", Peddy.Position, Peddy.Heading, false);
            }       //StandSmoke
            else if (iTask == 33)
            {
                PedScenario(Peddy, "WORLD_HUMAN_CLIPBOARD", Peddy.Position, Peddy.Heading, false);
            }       //StandClippBoard
            else if (iTask == 34)
            {
                PedScenario(Peddy, "WORLD_HUMAN_GUARD_STAND", Peddy.Position, Peddy.Heading, false);
                Peddy.RelationshipGroup = GP_ANPCs;
            }       //standgaurds
            else if (iTask == 35)
            {
                PedScenario(Peddy, "WORLD_HUMAN_CLIPBOARD", Peddy.Position, Peddy.Heading, false);
                MishPed.Add(new Ped(Peddy.Handle));
            }       //ClippBoard-Mishppeds
            else if (iTask == 36)
            {
                Npc_01 = Peddy;
                AttackThePlayer(Peddy, true);
                Function.Call(Hash.SET_PED_COMBAT_MOVEMENT, Peddy.Handle, 2);
                Function.Call(Hash.SET_PED_RANDOM_COMPONENT_VARIATION, Peddy.Handle, false);
                PlayerAtackTracker(); 
            }       //JohnnylayerAttack
        }
        private void NpcVehicleTasks(Ped Peddy, Vehicle Vehic, int iTask)
        {
            if (iTask == 1)
            {
                Function.Call(Hash.SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE, Peddy.Handle, 1);
                Function.Call(Hash.SET_PED_CONFIG_FLAG, Peddy.Handle, 32, false);
                Racist_MultiPed(Peddy, Vehic);
            }       //Race Drivers
            else if (iTask == 2)
            {
                Peddy.Task.ClearAll();
                if (Peddy.IsInVehicle())
                    Peddy.Task.CruiseWithVehicle(Peddy.CurrentVehicle, 35.00f, 786603);
            }       //Drive RandDest
            else if (iTask == 3)
            {
                WarptoAnyVeh(Vehic, Peddy, 1);
                FlyNShoot(Peddy, Vehic, Game.Player.Character);
            }       //CargoBobHellepillot
            else if (iTask == 4)
            {
                Vector3 V3Me = Function.Call<Vector3>(Hash._0xCBDB9B923CACC92D, VehTrackin_02.Handle);
                VehicleSpawn(RanVehListX(1, 1, true), V3Me, VehTrackin_02.Heading, false, false, false, false, 7, 0, 0, "", 3, true);
            }       //Cargo add super car
            else if (iTask == 5)
            {
                Peddy.Task.ClearAll();
                if (Peddy.SeatIndex == VehicleSeat.Driver)
                {
                    Peddy.DrivingSpeed = 200.00f;
                    Peddy.DrivingStyle = 0;
                    DriveByPlayer(Peddy, true);
                }
                else
                    DriveByPlayer(Peddy, false);
            }       //Attack Player
            else if (iTask == 6)
            {
                Peddy.CanBeDraggedOutOfVehicle = false;
                Peddy.BlockPermanentEvents = true;
            }       //MoneyMan Guard
            else if (iTask == 7)
            {
                Peddy.Task.ClearAll();
                Peddy.Task.Wait(-1);
                Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Peddy.Handle, 0, true);
                Peddy.AlwaysKeepTask = true;
                Peddy.BlockPermanentEvents = true;
            }       //Wait in vehicle
            else if (iTask == 8)
            {
                Vector3 vpos = VehTrackin_03.Position;
                vpos.Z = vpos.Z + 5.00f;
                FlyAway(Peddy, vpos, 55.00f, 5.00f);
                BeOnOff[1] = true;
            }       //WAter CargoPilot
            else if (iTask == 9)
            {
                Vehicle VPlyTarget = null;
                Vehicle vPlane = VehicleList_01[VehicleList_01.Count - 1];
                Peddy.RelationshipGroup = GP_Attack;
                if (Game.Player.Character.IsInVehicle())
                    VPlyTarget = Game.Player.Character.CurrentVehicle;
                else
                    VPlyTarget = Game.Player.Character.LastVehicle;
                Function.Call(Hash.TASK_PLANE_MISSION, Peddy.Handle, vPlane.Handle, VPlyTarget.Handle, 0, 0, 0, 0, 6, 0.0f, 0.0f, 180.0f, 1000.0f, -5000.0f);
                Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Peddy.Handle, 0, true);
                Peddy.AlwaysKeepTask = true;
                Peddy.BlockPermanentEvents = true;
                vPlane.CurrentBlip.Color = BlipColor.Red;
            }       //DogFighter
            else if (iTask == 10)
            {
                float fSpeeds = 25.00f;
                Peddy.Task.ClearAll();
                Peddy.RelationshipGroup = GP_BNPCs;
                Vector3 PlayPos = VehTrackin_03.Position;
                Peddy.DrownsInWater = false;
                Function.Call(Hash.TASK_BOAT_MISSION, Peddy.Handle, Vehic.Handle, 0, 0, PlayPos.X, PlayPos.Y, PlayPos.Z, 4, fSpeeds, 16777216, 5.50f, 7);

                PedMultiTask MyNewPed = AddAMultiped();
                MyNewPed.MyPed = Peddy;
                MyNewPed.MyVehicle = Vehic;
                MyNewPed.MyName = MyLang.Maptext[20];
                MyNewPed.MyTask_01 = 1;
                MyNewPed.MyBlip = Vehic.CurrentBlip;
                MultiPed.Add(MyNewPed);
            }       //WAter JetskiAttacks
            else if (iTask == 11)
            {
                MishPed.Add(new Ped(Peddy.Handle));
                Peddy.RelationshipGroup = GP_Player;
                Peddy.Task.DriveTo(Vehic, vTarget_04, 3.00f, 15.00f, 536871355);
                Peddy.CanBeDraggedOutOfVehicle = false;
                Peddy.AlwaysKeepTask = true;
                Peddy.BlockPermanentEvents = true;
            }       //ValllyCass
            else if (iTask == 12)
            {
                Peddy.RelationshipGroup = GP_ANPCs;
                Function.Call(Hash.TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS, Peddy.Handle, true);
                Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Peddy.Handle, 0, true);
                Peddy.AlwaysKeepTask = true;
            }       //ValcaryPilot
            else if (iTask == 13)
            {
                Vector3 vTag = vTarget_01;
                vTag.Z = 1005.00f;
                ImOnAPlane(Peddy, Vehic, vTag);
                Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Peddy.Handle, 0, true);
                Peddy.AlwaysKeepTask = true;
                Peddy.BlockPermanentEvents = true;
            }       //Pilot fly away
            else if (iTask == 14)
            {
                PedMultiTask MyNewPed = AddAMultiped();
                Peddy.Task.ClearAll();
                if (Peddy.SeatIndex == VehicleSeat.Driver)
                {
                    Peddy.DrivingSpeed = 200.00f;
                    Peddy.DrivingStyle = 0;
                    MyNewPed.MyVehicle = Vehic;
                    MyNewPed.MyBlip = VehBlip(Vehic, false, false, 1, MyLang.Maptext[106]);
                    DriveByPlayer(Peddy, true);
                }
                else
                    DriveByPlayer(Peddy, false);
                MyNewPed.MyName = MyLang.Maptext[106];
                MyNewPed.MyPed = Peddy;
                MyNewPed.MyTask_01 = 1;
                MultiPed.Add(MyNewPed);
                Peddy.AlwaysKeepTask = true;
            }       //Biker Attacks
            else if (iTask == 15)
            {
                Peddy.Task.ClearAll();
                if (Peddy.SeatIndex == VehicleSeat.Driver)
                {
                    Peddy.DrivingSpeed = 200.00f;
                    Peddy.DrivingStyle = 0;
                    DriveByPed(Peddy, Npc_01, true);
                }
                else
                    DriveByPed(Peddy, Npc_02, false);
            }       //Attack Npc01/02
            else if (iTask == 16)
            {
                PedMultiTask MyNewPed = AddAMultiped();
                if (Peddy.SeatIndex == VehicleSeat.Driver)
                {
                    Peddy.DrivingSpeed = 200.00f;
                    Peddy.DrivingStyle = 0;
                    MyNewPed.MyVehicle = Vehic;
                    MyNewPed.MyBlip = VehBlip(Vehic, false, false, 1, MyLang.Maptext[106]);
                }
                Peddy.Task.ClearAll();
                if (FindRandom(86, 1, 4) > 2)
                    FightingXPed(Peddy, Npc_01);
                else
                    FightingXPed(Peddy, Npc_02);
                Peddy.AlwaysKeepTask = true;
                MyNewPed.MyName = MyLang.Maptext[106];
                MyNewPed.MyTask_01 = 1;
                MyNewPed.MyPed = Peddy;
                MultiPed.Add(MyNewPed);
            }       //Attack Npc01/02 with MuiltiPed
            else if (iTask == 17)
            {
                PedMultiTask MyNewPed = AddAMultiped();
                Peddy.Task.ClearAll();
                if (Peddy.SeatIndex == VehicleSeat.Driver)
                {
                    Peddy.DrivingSpeed = 200.00f;
                    Peddy.DrivingStyle = 0;
                    MyNewPed.MyVehicle = Vehic;
                    MyNewPed.MyBlip = VehBlip(Vehic, false, false, 1, MyLang.Maptext[106]);
                }
                AttackThePlayer(Peddy, true);
                MyNewPed.MyName = MyLang.Maptext[106];
                MyNewPed.MyPed = Peddy;
                MyNewPed.MyTask_01 = 1;
                MultiPed.Add(MyNewPed);
                Peddy.AlwaysKeepTask = true;
            }       //Biker Attacks onfoot
            else if (iTask == 39)
            {
                Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Peddy.Handle, 0, true);
                Peddy.AlwaysKeepTask = true;
                Peddy.BlockPermanentEvents = true;
                ///OnlinePlayers(Peddy, true, 0);
            }       //Drive Playerped M
            else if (iTask == 40)
            {
                Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Peddy.Handle, 0, true);
                Peddy.AlwaysKeepTask = true;
                Peddy.BlockPermanentEvents = true;
                ///OnlinePlayers(Peddy, false, 0);
            }       //Drive Playerped F
        }
        private void AttackThePlayer(Ped Pedd, bool bWeaps)
        {
            LogThis("AttackThePlayer");
            Pedd.RelationshipGroup = GP_Attack;
            Pedd.IsEnemy = true;
            Pedd.CanBeTargette﻿d﻿ = true;
            PedBlimp(Pedd, 0.75f, false, false, 59, "");
            //Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Pedd.Handle, 0, true);
            Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Pedd.Handle, 2, false);//steal a Vehicle?
            Function.Call(Hash.SET_PED_COMBAT_ATTRIBUTES, Pedd.Handle, 5, true);
            Function.Call(Hash.SET_PED_COMBAT_ATTRIBUTES, Pedd.Handle, 46, true);
            Pedd.Task.FightAgainst(Game.Player.Character);
            Function.Call(Hash.SET_PED_PATH_CAN_USE_CLIMBOVERS, Pedd.Handle, true);
            Function.Call(Hash.SET_PED_PATH_CAN_USE_LADDERS, Pedd.Handle, true);
            Function.Call(Hash.SET_PED_PATH_CAN_DROP_FROM_HEIGHT, Pedd.Handle, true);
            Pedd.Weapons.RemoveAll();
            if (bWeaps)
            {
                ArmsRegulator(Pedd, 2);
                ArmsRegulator(Pedd, 3);
                ArmsRegulator(Pedd, 4);
                ArmsRegulator(Pedd, 5);
            }
        }
        private void DriveByPlayer(Ped Pedd, bool bDriver)
        {
            LogThis("DriveByPlayer");
            Pedd.RelationshipGroup = GP_Attack;
            Pedd.IsEnemy = true;
            Pedd.CanBeTargette﻿d﻿ = true;
            if (bDriver)
                Pedd.Task.VehicleChase(Game.Player.Character);
            else
                Pedd.Task.VehicleShootAtPed(Game.Player.Character); ArmsRegulator(Pedd, 1);
            ArmsRegulator(Pedd, 2);
            ArmsRegulator(Pedd, 3);
            ArmsRegulator(Pedd, 4);
            ArmsRegulator(Pedd, 5);
        }
        private void DriveByPed(Ped Pedd, Ped Victim, bool bDriver)
        {
            LogThis("DriveByPlayer");
            Pedd.CanBeTargette﻿d﻿ = true;
            if (bDriver)
                Pedd.Task.VehicleChase(Victim);
            else
                Pedd.Task.VehicleShootAtPed(Victim);
            ArmsRegulator(Pedd, 1);
            ArmsRegulator(Pedd, 2);
            ArmsRegulator(Pedd, 3);
            ArmsRegulator(Pedd, 4);
            ArmsRegulator(Pedd, 5);
        }
        private void FightingXPed(Ped Pedd, Ped Victim)
        {
            LogThis("FightingXPed");

            Pedd.Task.ClearAll();
            Function.Call(Hash._0x88E32DB8C1A4AA4B, Pedd.Handle, 10.00f);
            Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Pedd.Handle, 0, true);
            Function.Call(Hash.SET_PED_COMBAT_ATTRIBUTES, Pedd.Handle, 5, true);
            Function.Call(Hash.SET_PED_COMBAT_ATTRIBUTES, Pedd.Handle, 46, true);
            Function.Call(Hash.SET_PED_COMBAT_ABILITY, Pedd.Handle, 100);
            Function.Call(Hash.TASK_GO_TO_ENTITY, Pedd.Handle, Victim.Handle, -1, 1.0f, 100, 1073741824, 0);
            Function.Call(Hash.TASK_COMBAT_PED, Pedd.Handle, Victim.Handle, 0, 16);
            Pedd.BlockPermanentEvents = true;
            Pedd.AlwaysKeepTask = true;
        }
        private void FightAbility(Ped Pedd)
        {
            Function.Call(Hash._0x88E32DB8C1A4AA4B, Pedd.Handle, 10.00f);
            //Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Pedd.Handle, 0, true);
            Function.Call(Hash.SET_PED_COMBAT_ATTRIBUTES, Pedd.Handle, 5, true);
            Function.Call(Hash.SET_PED_COMBAT_ATTRIBUTES, Pedd.Handle, 46, true);
            Function.Call(Hash.SET_PED_COMBAT_ABILITY, Pedd.Handle, 100);
        }
        private void ScaredBy(Vector3 vLoc)
        {
            LogThis("ScaredBy");

            Ped[] LocPeds = World.GetNearbyPeds(vLoc, 65.00f);
            for (int i = 0; i < LocPeds.Count(); i++)
            {
                if (PedExists(LocPeds, i))
                {
                    Ped Pedx = LocPeds[i];

                    if (Pedx.CurrentPedGroup != Game.Player.Character.CurrentPedGroup)
                    {
                        Pedx.Task.ClearAll();
                        Pedx.Task.ReactAndFlee(Game.Player.Character);
                        Pedx.AlwaysKeepTask = true;
                    }
                }
            }
        }
        private void FriendOfPlayer(Ped Pedd)
        {
            LogThis("FriendOfPlayer");

            Pedd.CanBeShotInVehicle = true;
            Pedd.RelationshipGroup = GP_Player;
            Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Pedd.Handle, 0, true);
            Function.Call(Hash.TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS, Pedd.Handle, false);
            Function.Call(Hash.SET_PED_COMBAT_ATTRIBUTES, Pedd.Handle, 2, true);
            Function.Call(Hash.SET_PED_COMBAT_ATTRIBUTES, Pedd.Handle, 46, true);
            Function.Call(Hash.SET_PED_COMBAT_ABILITY, Pedd.Handle, 100);
        }
        public class PedMultiTask
        {
            public Ped MyPed { get; set; }
            public Vehicle MyVehicle { get; set; }
            public Blip MyBlip { get; set; }
            public int MyTask_01 { get; set; }
            public int MyTask_02 { get; set; }
            public int MyTask_03 { get; set; }
            public int MyTimer_01 { get; set; }
            public int MyTimer_02 { get; set; }
            public float MyFloat_01 { get; set; }
            public float MyFloat_02 { get; set; }
            public float MyFloat_03 { get; set; }
            public bool MySwitch_01 { get; set; }
            public bool MySwitch_02 { get; set; }
            public bool MySwitch_03 { get; set; }
            public string MyName { get; set; }

            public Vector3 MyTarget_01 { get; set; }
            public Vector3 MyTarget_02 { get; set; }
        }
        public PedMultiTask AddAMultiped()
        {
            PedMultiTask MyMultiPed = new PedMultiTask
            {
                MyPed = null,
                MyVehicle = null,
                MyBlip = null,
                MyFloat_01 = 0.00f,
                MyFloat_02 = 0.00f,
                MyFloat_03 = 0.00f,
                MyTask_01 = -1,
                MyTask_02 = -1,
                MyTask_03 = -1,
                MyTimer_01 = -1,
                MyTimer_02 = -1,
                MySwitch_01 = false,
                MySwitch_02 = false,
                MySwitch_03 = false,
                MyName = "",
                MyTarget_01 = Vector3.Zero,
                MyTarget_02 = Vector3.Zero
            };

            return MyMultiPed;
        }
        private void GunningIt(Ped Peddy, int iGun)
        {
            LogThis("GunningIt, iGun == " + iGun);

            if (iGun == 1)
                ArmsRegulator(Peddy, 5);
            else if (iGun == 2)
                ArmsRegulator(Peddy, 4);
            else if (iGun == 3)
                ArmsRegulator(Peddy, 3);
            else if (iGun == 4)
                ArmsRegulator(Peddy, 3);
            else if (iGun == 5)
                ArmsRegulator(Peddy, 1);
            else if (iGun == 6)
                ArmsRegulator(Peddy, 6);
            else if (iGun == 7)
            {
                int iRanGun = RandInt(0, 50);
                if (iRanGun < 10)
                    ArmsRegulator(Peddy, 1);
                else if (iRanGun < 20)
                    ArmsRegulator(Peddy, 3);
                else if (iRanGun < 30)
                    ArmsRegulator(Peddy, 3);
                else if (iRanGun < 40)
                    ArmsRegulator(Peddy, 4);
                else
                    ArmsRegulator(Peddy, 5);
            }
            else if (iGun == 8)
            {
                int iRanGun = RandInt(0, 30);
                if (iRanGun < 25)
                    ArmsRegulator(Peddy, 3);
                else
                    ArmsRegulator(Peddy, 5);
            }
            else if (iGun == 9)
            {
                ArmsRegulator(Peddy, 4);
                ArmsRegulator(Peddy, 3);
            }
            else if (iGun == 10)
            {
                ArmNpcWeapon("WEAPON_raypistol", Peddy);
            }
            else if (iGun == 11)
            {
                ArmNpcWeapon("WEAPON_dagger", Peddy);
                ArmNpcWeapon("WEAPON_sniperrifle", Peddy);
                ArmNpcAtachment("WEAPON_sniperrifle", "COMPONENT_AT_AR_SUPP_02", Peddy);
                ArmNpcAtachment("WEAPON_sniperrifle", "COMPONENT_AT_SCOPE_MAX", Peddy);
            }
        }
        private void ArmNpcWeapon(string sWeap, Ped Peddy)
        {
            Function.Call(Hash.GIVE_WEAPON_TO_PED, Peddy.Handle, Function.Call<int>(Hash.GET_HASH_KEY, sWeap), MaxAmmo(sWeap, Peddy), false, true);
        }
        private void ArmNpcAtachment(string sWeap, string sAttach, Ped Peddy)
        {
            Function.Call(Hash.GIVE_WEAPON_COMPONENT_TO_PED, Peddy.Handle, Function.Call<int>(Hash.GET_HASH_KEY, sWeap), Function.Call<int>(Hash.GET_HASH_KEY, sAttach));
        }
        private void ArmsRegulator(Ped Peddy, int iSet)
        {
            if (iSet == 1)
            {
                ArmNpcWeapon("WEAPON_rayminigun", Peddy);
                ArmNpcWeapon("WEAPON_raycarbine", Peddy);
                ArmNpcWeapon("WEAPON_raypistol", Peddy);
            }       //space
            else if (iSet == 2)
            {
                if (RandInt(0, 20) < 10)
                    ArmNpcWeapon("WEAPON_combatmg", Peddy);
                else
                    ArmNpcWeapon("WEAPON_minigun", Peddy);
            }       //heavy
            else if (iSet == 3)
            {
                List<string> WeaponList = new List<string>
                {
                    "WEAPON_advancedrifle",
                    "WEAPON_assaultrifle",
                    "WEAPON_assaultshotgun",
                    "WEAPON_assaultsmg",
                    "WEAPON_bullpuprifle",
                    "WEAPON_bullpupshotgun",
                    "WEAPON_carbinerifle",
                    "WEAPON_combatpdw",
                    "WEAPON_compactrifle",
                    "WEAPON_dbshotgun",
                    "WEAPON_gusenberg",
                    "WEAPON_heavyshotgun",
                    "WEAPON_pumpshotgun",
                    "WEAPON_specialcarbine",
                    "WEAPON_autoshotgun"
                };

                ArmNpcWeapon(WeaponList[RandInt(0, WeaponList.Count - 1)], Peddy);
            }       //Mid
            else if (iSet == 4)
            {

                List<string> WeaponList = new List<string>
                {
                    "WEAPON_appistol",
                    "WEAPON_doubleaction",
                    "WEAPON_heavypistol",
                    "WEAPON_machinepistol",
                    "WEAPON_marksmanpistol",
                    "WEAPON_microsmg",
                    "WEAPON_pistol",
                    "WEAPON_pistol50",
                    "WEAPON_revolver",
                    "WEAPON_snspistol",
                    "WEAPON_vintagepistol"
                };

                ArmNpcWeapon(WeaponList[RandInt(0, WeaponList.Count - 1)], Peddy);
            }       //small
            else if (iSet == 5)
            {

                List<string> WeaponList = new List<string>
                {
                    "WEAPON_dagger",  //0x92A27487",
                    "WEAPON_bat",  //0x958A4A8F",
                    "WEAPON_bottle",  //0xF9E6AA4B",
                    "WEAPON_crowbar",  //0x84BD7BFD",
                    "WEAPON_golfclub",  //0x440E4788",
                    "WEAPON_hammer",  //0x4E875F73",
                    "WEAPON_hatchet",  //0xF9DCBF2D",
                    "WEAPON_knuckle",  //0xD8DF3C3C",
                    "WEAPON_knife",  //0x99B507EA",
                    "WEAPON_machete",  //0xDD5DF8D9",
                    "WEAPON_switchblade",  //0xDFE37640",
                    "WEAPON_nightstick",  //0x678B81B1",
                    "WEAPON_wrench",  //0x19044EE0",
                    "WEAPON_battleaxe",  //0xCD274149",
                    "WEAPON_poolcue",  //0x94117305",
                    "WEAPON_stone_hatchet"  //0x3813FC08"--17
                };

                ArmNpcWeapon(WeaponList[RandInt(0, WeaponList.Count - 1)], Peddy);
            }       //melee
            else if (iSet == 6)
            {
                ArmNpcWeapon("WEAPON_molotov", Peddy);
            }       //Molly
            Peddy.CanSwitchWeapons = true;
        }
        public int MaxAmmo(string sWeap, Ped Peddy)
        {
            int iAmmo = 0;
            int iWeap = Function.Call<int>(Hash.GET_HASH_KEY, sWeap);

            unsafe
            {
                Function.Call<bool>(Hash.GET_MAX_AMMO, Peddy.Handle, iWeap, &iAmmo);
            }
            return iAmmo;
        }
        private void GetWeaps(bool bRemoveAll)
        {
            LogThis("GetWeaps");

            PlayerWeapXList.Clear();
            List<string> sWeapList = WeapsList();
            List<string> sAddsList = WeapAddonsList();

            Ped Peddy = Game.Player.Character;

            for (int i = 0; i < sWeapList.Count; i++)
            {
                if (Function.Call<bool>(Hash.HAS_PED_GOT_WEAPON, Peddy.Handle, Function.Call<int>(Hash.GET_HASH_KEY, sWeapList[i]), false))
                {
                    PlayerWeaps IGotDis = new PlayerWeaps();

                    int iAmmos = 0;
                    IGotDis.MyWeap = sWeapList[i];

                    iAmmos = Function.Call<int>(Hash.GET_AMMO_IN_PED_WEAPON, Peddy.Handle, Function.Call<int>(Hash.GET_HASH_KEY, sWeapList[i]));
                    if (iAmmos < 1)
                        iAmmos = 1;
                    IGotDis.MyAmmo = iAmmos;

                    for (int ii = 0; ii < sAddsList.Count; ii++)
                    {
                        if (Function.Call<bool>(Hash.HAS_PED_GOT_WEAPON_COMPONENT, Peddy.Handle, Function.Call<int>(Hash.GET_HASH_KEY, sWeapList[i]), Function.Call<int>(Hash.GET_HASH_KEY, sAddsList[ii])))
                            IGotDis.MyAttachList.Add(sAddsList[ii]);
                    }
                    PlayerWeapXList.Add(IGotDis);
                    ///if (i == 19 || i == 24 || i == 74 || i == 72 || i == 68 || i == 63 || i == 61 || i == 58 || i == 56 || i == 46 || i == 39 || i == 29)--Mk2Weapps
                }
            }
            if (bRemoveAll)
                Game.Player.Character.Weapons.RemoveAll();
        }
        private void ReturnWeaps()
        {
            LogThis("ReturnWeaps");

            Ped Peddy = Game.Player.Character;

            for (int i = 0; i < PlayerWeapXList.Count; i++)
            {
                int iAmmo = PlayerWeapXList[i].MyAmmo;

                Function.Call(Hash.GIVE_WEAPON_TO_PED, Peddy.Handle, Function.Call<int>(Hash.GET_HASH_KEY, PlayerWeapXList[i].MyWeap), iAmmo, false, true);

                for (int ii = 0; ii < PlayerWeapXList[i].MyAttachList.Count; ii++)
                {
                    if (Function.Call<bool>(Hash.DOES_WEAPON_TAKE_WEAPON_COMPONENT, Function.Call<int>(Hash.GET_HASH_KEY, PlayerWeapXList[i].MyWeap), Function.Call<int>(Hash.GET_HASH_KEY, PlayerWeapXList[i].MyAttachList[ii])))
                        Function.Call(Hash.GIVE_WEAPON_COMPONENT_TO_PED, Peddy.Handle, Function.Call<int>(Hash.GET_HASH_KEY, PlayerWeapXList[i].MyWeap), Function.Call<int>(Hash.GET_HASH_KEY, PlayerWeapXList[i].MyAttachList[ii]));

                }
            }
            Function.Call(Hash.SET_PED_CURRENT_WEAPON_VISIBLE, Game.Player.Character.Handle, false, true, true, true);
        }
        public class PlayerWeaps
        {
            public string MyWeap { get; set; }
            public List<string> MyAttachList { get; set; }
            public int MyAmmo { get; set; }

            public PlayerWeaps()
            {
                MyAttachList = new List<string>();
            }
        }
        private void Groupies(bool bAdd)
        {
            if (bAdd)
            {
                iPlayerGroup = Function.Call<int>(Hash.CREATE_GROUP);
                Function.Call(Hash.SET_PED_AS_GROUP_LEADER, Game.Player.Character.Handle, iPlayerGroup);
            }
            else
            {
                Function.Call(Hash.REMOVE_GROUP, iPlayerGroup);
            }
        }
        private void AddGroupie(Ped Peddy)
        {
            Function.Call(Hash.SET_PED_AS_GROUP_MEMBER, Peddy.Handle, iPlayerGroup);
        }
        private void StayInVehicle(Ped Peddy, bool bPlayer)
        {
            LogThis("StayInVehicle, bPlayer == " + bPlayer);

            if (bPlayer)
                bDontPull = true;

            Peddy.CanBeDraggedOutOfVehicle = false;
        }
        public List<string> DanceList(bool bMale, int iSpeed)
        {
            LogThis("DanceList, bMale == " + bMale + ", iSpeed == " + iSpeed);

            List<string> sDancing = new List<string>();
            List<string> Dance = new List<string>(); List<string> DanceVar = new List<string>();

            if (bMale)
            {
                if (iSpeed == 1)
                {
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v1_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v1_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v1_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v1_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v1_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v1_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v2_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v2_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v2_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v2_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v2_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v2_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_11_v1_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_11_v1_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_11_v1_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_11_v1_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_11_v1_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_11_v1_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v1_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v1_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v1_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v1_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v1_male^5");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v2_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v2_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v2_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v2_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v2_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v2_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v1_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v1_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v1_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v1_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v1_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v1_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v2_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v2_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v2_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v2_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v2_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v2_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v1_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v1_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v1_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v1_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v1_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v1_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v2_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v2_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v2_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v2_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v2_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v2_male^6");
                }
                else if (iSpeed == 2)
                {
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v1_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v1_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v1_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v1_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v1_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v1_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v2_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v2_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v2_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v2_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v2_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v2_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v1_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v1_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v1_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v1_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v1_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v1_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v2_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v2_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v2_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v2_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v2_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v2_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v1_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v1_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v1_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v1_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v1_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v1_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v2_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v2_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v2_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v2_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v2_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v2_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v1_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v1_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v1_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v1_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v1_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v1_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v2_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v2_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v2_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v2_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v2_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v2_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_17_v1_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_17_v1_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_17_v1_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_17_v1_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_17_v1_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_17_v1_male^6");
                }
                else
                {
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v1_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v1_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v1_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v1_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v1_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v1_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v2_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v2_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v2_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v2_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v2_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v2_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v1_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v1_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v1_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v1_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v1_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v1_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v2_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v2_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v2_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v2_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v2_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v2_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v1_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v1_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v1_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v1_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v1_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v1_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v2_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v2_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v2_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v2_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v2_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v2_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v1_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v1_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v1_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v1_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v1_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v1_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v2_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v2_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v2_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v2_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v2_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v2_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v1_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v1_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v1_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v1_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v1_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v1_male^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v2_male^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v2_male^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v2_male^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v2_male^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v2_male^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v2_male^6");
                }

                if (Dance.Count > 0)
                {
                    int iRand = RandInt(0, Dance.Count - 1);
                    sDancing.Add(Dance[iRand]);
                    sDancing.Add(DanceVar[iRand]);
                }
                else
                {
                    sDancing.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity");
                    sDancing.Add("li_dance_facedj_17_v2_male^6");
                }
            }
            else
            {
                if (iSpeed == 1)
                {
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v1_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v1_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v1_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v1_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v1_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v1_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v2_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v2_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v2_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v2_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v2_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_09_v2_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_11_v1_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_11_v1_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_11_v1_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_11_v1_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_11_v1_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_11_v1_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v1_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v1_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v1_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v1_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v1_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v1_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v2_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v2_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v2_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v2_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v2_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_13_v2_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v1_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v1_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v1_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v1_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v1_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v1_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v2_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v2_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v2_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v2_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v2_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_15_v2_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v1_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v1_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v1_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v1_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v1_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v1_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v2_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v2_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v2_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v2_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v2_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity"); DanceVar.Add("li_dance_facedj_17_v2_female^6");
                }
                else if (iSpeed == 2)
                {
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v1_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v1_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v1_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v1_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v1_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v1_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v2_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v2_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v2_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v2_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v2_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_09_v2_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v1_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v1_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v1_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v1_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v1_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v1_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v2_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v2_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v2_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v2_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v2_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_11_v2_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v1_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v1_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v1_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v1_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v1_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v1_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v2_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v2_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v2_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v2_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v2_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_13_v2_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v1_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v1_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v1_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v1_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v1_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v1_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v2_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v2_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v2_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v2_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v2_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_15_v2_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_17_v1_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_17_v1_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_17_v1_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_17_v1_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_17_v1_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@med_intensity"); DanceVar.Add("mi_dance_facedj_17_v1_female^6");
                }
                else
                {
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v1_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v1_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v1_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v1_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v1_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v1_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v2_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v2_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v2_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v2_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v2_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_09_v2_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v1_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v1_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v1_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v1_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v1_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v1_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v2_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v2_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v2_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v2_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v2_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_11_v2_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v1_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v1_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v1_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v1_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v1_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v1_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v2_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v2_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v2_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v2_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v2_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_13_v2_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v1_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v1_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v1_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v1_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v1_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v1_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v2_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v2_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v2_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v2_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v2_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_15_v2_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v1_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v1_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v1_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v1_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v1_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v1_female^6");

                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v2_female^1");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v2_female^2");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v2_female^3");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v2_female^4");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v2_female^5");
                    Dance.Add("anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity"); DanceVar.Add("hi_dance_facedj_17_v2_female^6");
                }

                if (Dance.Count > 0)
                {
                    int iRand = RandInt(0, Dance.Count - 1);
                    sDancing.Add(Dance[iRand]);
                    sDancing.Add(DanceVar[iRand]);
                }
                else
                {
                    sDancing.Add("anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity");
                    sDancing.Add("li_dance_facedj_17_v2_female^6");
                }
            }

            return sDancing;
        }
        private void ForceAnim(Ped peddy, string sAnimDict, string sAnimName, Vector3 AnPos, Vector3 AnRot)
        {
            LogThis("ForceAnim, sAnimName == " + sAnimName);

            Function.Call(Hash.REQUEST_ANIM_DICT, sAnimDict);
            while (!Function.Call<bool>(Hash.HAS_ANIM_DICT_LOADED, sAnimDict))
                Script.Wait(100);
            Function.Call(Hash.TASK_PLAY_ANIM_ADVANCED, peddy.Handle, sAnimDict, sAnimName, AnPos.X, AnPos.Y, AnPos.Z, AnRot.X, AnRot.Y, AnRot.Z, 8.0f, 0.00f, -1, 1, 0.01f, 0, 0);
            Function.Call(Hash.REMOVE_ANIM_DICT, sAnimDict);
        }
        private void ForceAnimOnce(Ped peddy, string sAnimDict, string sAnimName, Vector3 AnPos, Vector3 AnRot)
        {
            LogThis("ForceAnimOnce, sAnimName == " + sAnimName);

            Function.Call(Hash.REQUEST_ANIM_DICT, sAnimDict);
            while (!Function.Call<bool>(Hash.HAS_ANIM_DICT_LOADED, sAnimDict))
                Script.Wait(100);
            Function.Call(Hash.TASK_PLAY_ANIM_ADVANCED, peddy.Handle, sAnimDict, sAnimName, AnPos.X, AnPos.Y, AnPos.Z, AnRot.X, AnRot.Y, AnRot.Z, 8.0f, 0.00f, -1, 0, 0.01f, 0, 0);
            Function.Call(Hash.REMOVE_ANIM_DICT, sAnimDict);
        }
        private void ForceAnimOnceEnding(Ped peddy, string sAnimDict, string sAnimName, Vector3 AnPos, Vector3 AnRot, float fEnder)
        {
            LogThis("ForceAnimOnce, sAnimName == " + sAnimName);

            Function.Call(Hash.REQUEST_ANIM_DICT, sAnimDict);
            while (!Function.Call<bool>(Hash.HAS_ANIM_DICT_LOADED, sAnimDict))
                Script.Wait(100);
            Function.Call(Hash.TASK_PLAY_ANIM_ADVANCED, peddy.Handle, sAnimDict, sAnimName, AnPos.X, AnPos.Y, AnPos.Z, AnRot.X, AnRot.Y, AnRot.Z, 8.0f, 0.00f, -1, 0, fEnder, 0, 0);
            Function.Call(Hash.REMOVE_ANIM_DICT, sAnimDict);
        }
        private void PedScenario(Ped Peddy, string sCenario, Vector3 Vpos, float fHead, bool bSeated)
        {
            LogThis("PedScenario, sCenario == " + sCenario);

            Function.Call(Hash.TASK_START_SCENARIO_AT_POSITION, Peddy.Handle, sCenario, Vpos.X, Vpos.Y, Vpos.Z, fHead, 0, bSeated, true);
        }
        public int PedWalkies(Ped Peddy, List<Vector3> MyLister, int iLocalList)
        {
            LogThis("PedWalkies");

            iLocalList += 1;
            if (iLocalList == MyLister.Count())
                iLocalList = 0;

            int iReturnInt = iLocalList;

            WalkThisWay(Peddy, MyLister[iReturnInt], 1.00f);

            return iReturnInt;
        }
        public bool PedRunToFoward(Ped Peddy, List<Vector3> MyLister, int iLocal)
        {
            LogThis("PedRunToFoward");

            bool bInUse = true;

            if (iLocal < MyLister.Count)
                WalkThisWay(Peddy, MyLister[iLocal], 2.00f);
            else
                bInUse = false;

            return bInUse;
        }
        private void EnterAnyVeh(Vehicle Vhic, Ped Peddy, int iSeat, float Run)
        {
            LogThis("EnterAnyVeh, iSeat == " + iSeat + ", Run == " + Run);

            if (Vhic.Exists())
            {
                Function.Call(Hash.TASK_ENTER_VEHICLE, Peddy.Handle, Vhic, -1, iSeat - 1, Run, 1, 0);
                Peddy.BlockPermanentEvents = true;
                Peddy.AlwaysKeepTask = true;
            }
        }
        private void EnterPlayerVeh(Ped Peddy, int iSeat, float Run)
        {
            LogThis("EnterPlayerVeh, iSeat == " + iSeat + ", Run == " + Run);

            Vehicle Vhick = Game.Player.Character.CurrentVehicle;
            EnterAnyVeh(Vhick, Peddy, iSeat, Run);
        }
        private void WarptoAnyVeh(Vehicle Vhic, Ped Peddy, int iSeat)
        {
            LogThis("WarptoAnyVeh, iSeat == " + iSeat);

            bool bFader = false;
            if (Peddy == Game.Player.Character)
            {
                Game.FadeScreenOut(1000);
                Script.Wait(1000);
                bFader = true;
            }

            while (!Peddy.IsInVehicle(Vhic))
            {
                if (Peddy.IsInVehicle())
                    GetOutofVeh(Peddy, 1);
                VehicleWarp(Vhic, Peddy, iSeat);
                Script.Wait(100);
            }

            if (bFader)
            {
                Script.Wait(500);
                Game.FadeScreenIn(1000);
            }
        }
        private void VehicleWarp(Vehicle Vhic, Ped Peddy, int iSeat)
        {
            Function.Call(Hash.SET_PED_INTO_VEHICLE, Peddy.Handle, Vhic.Handle, iSeat - 2);
        }
        private void WarptoPlayerVeh(Ped Peddy, int iSeat)
        {
            LogThis("WarptoPlayerVeh, iSeat == " + iSeat);

            Vehicle Vhick = Game.Player.Character.CurrentVehicle;
            if (Vhick.Exists())
            {
                while (!Peddy.IsInVehicle(Vhick))
                {
                    VehicleWarp(Vhick, Peddy, iSeat);
                    Script.Wait(500);
                }
            }
        }
        private void FreeSeat(Vehicle Vhick, int iSeat, bool bFlee)
        {
            LogThis("FreeSeat iSeat== " + iSeat + ", bFlee == " + bFlee);
            if (!Function.Call<bool>(Hash.IS_VEHICLE_SEAT_FREE, Vhick.Handle, iSeat - 2))
            {
                Ped Peddy = Function.Call<Ped>(Hash.GET_PED_IN_VEHICLE_SEAT, Vhick.Handle, iSeat - 2);
                FleeFromVeh(Peddy);
            }
        }
        private void GetOutofVeh(Ped Peddy, int iExits)
        {
            bool bExited = false;
            if (Peddy.IsInVehicle())
            {
                int iTenPass = 10;
                int iLeave = 0;
                if (iExits == 1)
                    iLeave = 256;
                else if (iExits == 2)
                    iLeave = 4160;

                Vehicle PickVic = Peddy.CurrentVehicle;
                while (Peddy.IsInVehicle(PickVic) && iTenPass > 0)
                {
                    Script.Wait(100);
                    Function.Call(Hash.TASK_LEAVE_VEHICLE, Peddy.Handle, PickVic.Handle, iLeave);
                    iTenPass -= 1;
                }
                if (iTenPass > 0)
                    bExited = true;
            }
            LogThis("GetOutofVeh Exit == " + bExited);
        }
        private void FleeFromVeh(Ped Peddy)
        {
            LogThis("FleeFromVeh");

            Peddy.Task.ClearAll();
            GetOutofVeh(Peddy, 2);
            Peddy.Task.FleeFrom(Game.Player.Character);
        }
        private void ShowBoating(Ped PedX, Vector3 vEctor, Vehicle Vhick, float fSpeeds, int iDrivinStyle)
        {
            LogThis("ShowBoating");

            PedX.Task.ClearAll();
            Function.Call(Hash.TASK_BOAT_MISSION, PedX.Handle, Vhick.Handle, 0, 0, vEctor.X, vEctor.Y, vEctor.Z, 4, fSpeeds, iDrivinStyle, -1.0f, 7);
            Function.Call(Hash.SET_BLOCKING_OF_NON_TEMPORARY_EVENTS, PedX.Handle, true);
        }
        private void DriveToDest(Vehicle Vhickery, Vector3 TheDest, Ped Peddy, float fSpeding, int iDriveStyle)
        {
            LogThis("DriveToDest");

            Peddy.Task.ClearAll();
            Peddy.Task.DriveTo(Vhickery, TheDest, 1.50f, fSpeding, iDriveStyle);
            Peddy.AlwaysKeepTask = true;
            Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, Peddy.Handle, 0, true);
            Peddy.AlwaysKeepTask = true;
            Peddy.BlockPermanentEvents = true;
        }
        public Blip PedBlimp(Ped pEdd, float fSize, bool bFlashin, bool bShowR, int iColour, string sName)
        {
            LogThis("PedBlimp");
            Blip Blipy = null;

            if (pEdd.CurrentBlip.Exists())
                Blipy = pEdd.CurrentBlip;
            else
                Blipy = Function.Call<Blip>(Hash.ADD_BLIP_FOR_ENTITY, pEdd.Handle);

            if (fSize != 1.00f)
                Function.Call(Hash.SET_BLIP_SCALE, Blipy.Handle, fSize);

            if (iColour != -1)
                Function.Call(Hash.SET_BLIP_COLOUR, Blipy.Handle, iColour);

            if (bFlashin)
                Function.Call(Hash.SET_BLIP_FLASHES, Blipy.Handle, bFlashin);

            if (bShowR && MySettings.ShowRoute)
                pEdd.CurrentBlip.ShowRoute = true;

            if (sName != "")
                BlipNames(pEdd.CurrentBlip, sName);

            return Blipy;
        }
        public Blip VehBlip(Vehicle Vhic, bool bFlashin, bool bShowR, int iColour, string sName)
        {
            LogThis("VehBlip");
            Blip MyBlip = null;

            if (Vhic.CurrentBlip.Exists())
                MyBlip = Vhic.CurrentBlip;
            else
                MyBlip = Function.Call<Blip>(Hash.ADD_BLIP_FOR_ENTITY, Vhic.Handle);

            Function.Call(Hash.SET_BLIP_SPRITE, MyBlip.Handle, OhMyBlip(Vhic));
            if (iColour != -1)
                Function.Call(Hash.SET_BLIP_COLOUR, MyBlip.Handle, iColour);

            if (bFlashin)
                Function.Call(Hash.SET_BLIP_FLASHES, MyBlip.Handle, true);

            if (bShowR && MySettings.ShowRoute)
                Function.Call(Hash.SET_BLIP_ROUTE, MyBlip.Handle, bShowR);

            if (sName != "")
                BlipNames(MyBlip, sName);

            return MyBlip;
        }
        private void MinRangeBlip(Blip Blippy)
        {
            Function.Call(Hash.SET_BLIP_ALPHA, Blippy.Handle, 120);
            Function.Call(Hash.SET_BLIP_AS_SHORT_RANGE, Blippy.Handle, true);
        }
        public int OhMyBlip(Vehicle Vhick)
        {
            LogThis("OhMyBlip");
            int iVehHash = Vhick.Model.Hash;

            int iBeLip = 0;
            if (Vhick.ClassType == VehicleClass.Planes)
                iBeLip = 251;
            else if (Vhick.ClassType == VehicleClass.Helicopters)
                iBeLip = 43;
            else if (Vhick.ClassType == VehicleClass.Boats)
                iBeLip = 427;
            else if (Vhick.ClassType == VehicleClass.Commercial)
                iBeLip = 477;
            else if (Vhick.ClassType == VehicleClass.Motorcycles)
                iBeLip = 226;
            else if (Vhick.ClassType == VehicleClass.Sports)
                iBeLip = 523;
            else if (Vhick.ClassType == VehicleClass.Super)
                iBeLip = 523;
            else if (Vhick.ClassType == VehicleClass.Cycles)
                iBeLip = 376;
            else if (Vhick.ClassType == VehicleClass.Vans)
                iBeLip = 616;
            else
                iBeLip = 225;

            if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "CRUSADER"))
                iBeLip = 800;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "SLAMVAN3"))
                iBeLip = 799;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "barracks2"))
                iBeLip = 477;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "STROMBERG"))
                iBeLip = 596;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "SQUADDIE"))
                iBeLip = 757;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "seasparrow2"))
                iBeLip = 753;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "WINKY"))
                iBeLip = 745;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "ZHABA"))
                iBeLip = 737;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "OUTLAW"))
                iBeLip = 735;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "VAGRANT"))
                iBeLip = 736;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "STRIKEFORCE"))
                iBeLip = 640;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "OPPRESSOR2"))
                iBeLip = 639;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "SCRAMJET"))
                iBeLip = 634;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "seasparrow"))
                iBeLip = 612;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "APC"))
                iBeLip = 603;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "akula"))
                iBeLip = 602;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "volatol"))
                iBeLip = 600;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "KHANJALI"))
                iBeLip = 598;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "DELUXO"))
                iBeLip = 596;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "bombushka"))
                iBeLip = 585;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "seabreeze"))
                iBeLip = 584;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "STARLING"))
                iBeLip = 583;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "ROGUE"))
                iBeLip = 582;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "PYRO"))
                iBeLip = 581;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "nokota"))
                iBeLip = 580;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "MOLOTOK"))
                iBeLip = 579;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "mogul"))
                iBeLip = 578;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "microlight"))
                iBeLip = 577;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "HUNTER"))
                iBeLip = 576;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "howard"))
                iBeLip = 575;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "havok"))
                iBeLip = 574;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "tula"))
                iBeLip = 573;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "alphaz1"))
                iBeLip = 572;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "DUNE3"))
                iBeLip = 561;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "HALFTRACK"))
                iBeLip = 560;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "OPPRESSOR"))
                iBeLip = 559;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "TECHNICAL2"))
                iBeLip = 534;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "voltic2"))
                iBeLip = 533;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "wastelander"))
                iBeLip = 532;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "RUINER2"))
                iBeLip = 530;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "PHANTOM2"))
                iBeLip = 528;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "RHINO"))
                iBeLip = 421;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "taxi"))
                iBeLip = 198;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "stretch"))
                iBeLip = 198;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "stockade"))
                iBeLip = 67;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "dune"))
                iBeLip = 147;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "pbus2"))
                iBeLip = 631;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "marquis"))
                iBeLip = 410;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "limo2"))
                iBeLip = 460;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "ambulance"))
                iBeLip = 636;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "firetruk"))
                iBeLip = 635;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "bulldozer"))
                iBeLip = 529;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "forklift"))
                iBeLip = 568;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "mixer") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "tiptruck") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "tiptruck2") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "rubble") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "Dump"))
                iBeLip = 745;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "formula") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "formula2") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "openwheel1") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "openwheel2"))
                iBeLip = 726;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "cargobob") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "cargobob2") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "cargobob3") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "cargobob4"))
                iBeLip = 481;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "blazer") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "blazer2") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "blazer3") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "blazer4") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "blazer5"))
                iBeLip = 512;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "pbus") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "airbus") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "bus") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "coach"))
                iBeLip = 513;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "trash") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "trash2"))
                iBeLip = 318;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "submersible") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "submersible2"))
                iBeLip = 308;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "VALKYRIE2") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "VALKYRIE"))
                iBeLip = 759;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "DUNE4") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "DUNE5"))
                iBeLip = 531;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "besra") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "hydra") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "lazer"))
                iBeLip = 16;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "blimp") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "blimp2") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "blimp3"))
                iBeLip = 401;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "ZR380") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "ZR3802") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "ZR3803"))
                iBeLip = 669;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "SLAMVAN4") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "SLAMVAN5") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "SLAMVAN6"))
                iBeLip = 668;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "SCARAB") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "SCARAB2") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "SCARAB3"))
                iBeLip = 667;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "MONSTER3") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "MONSTER4") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "MONSTER5"))
                iBeLip = 666;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "ISSI4") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "ISSI5") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "ISSI6"))
                iBeLip = 665;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "IMPERATOR") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "IMPERATOR2") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "IMPERATOR3"))
                iBeLip = 664;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "IMPALER2") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "IMPALER3") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "IMPALER4"))
                iBeLip = 663;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "DOMINATOR4") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "DOMINATOR5") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "DOMINATOR6"))
                iBeLip = 662;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "CERBERUS") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "CERBERUS2") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "CERBERUS3"))
                iBeLip = 660;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "BRUTUS") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "BRUTUS2") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "BRUTUS3"))
                iBeLip = 659;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "BRUISER") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "BRUISER2") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "BRUISER3"))
                iBeLip = 658;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "seashark") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "seashark2") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "seashark3"))
                iBeLip = 471;
            else if (iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "armytanker") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "armytrailer") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "armytrailer2") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "baletrailer") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "boattrailer") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "freighttrailer") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "graintrailer") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "tr2") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "tr3") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "tr4") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "trflat") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "tvtrailer") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "tanker") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "tanker2") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "trailerlarge") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "trailerlogs") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "trailersmall") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "trailers") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "trailers2") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "trailers3") || iVehHash == Function.Call<int>(Hash.GET_HASH_KEY, "trailers4"))
                iBeLip = 479;
            //Sportsbike 522
            //sportscar 523
            //partybuss 631

            return iBeLip;
        }
        private void MultiBlimbs(Vector3 Vblips, int Bsp, bool bClean, string sName)
        {
            LogThis("FakeBlimbs");

            if (bClean)
            {
                for (int i = 0; i < BlipList_01.Count; i++)
                    BlipCleaning(BlipList_01[i]);

                BlipList_01.Clear();
            }
            Blip Blippy = World.CreateBlip(Vblips);
            if (Bsp != -1)
                TaggetIcon(Blippy, Bsp);

            if (sName == "")
                Function.Call(Hash.SET_BLIP_DISPLAY, Blippy.Handle, 8);
            else
                BlipNames(Blippy, sName);

            Blippy.IsFlashing = true;
            BlipList_01.Add(new Blip(Blippy.Handle));
            ReadWriteBlips(false, true, Blippy.Handle, -1, -1, -1, -1, -1);
        }
        private void AddTarget(Vector3 Vlocal, bool bRoute, bool bPrimary, float fRadius, bool bFlasher, int iCon, string sTag)
        {
            LogThis("AddTarget");

            if (bPrimary)
            {
                if (Target_01 == null)
                {
                    if (fRadius < 2.00f)
                    {
                        Target_01 = GTA.World.CreateBlip(Vlocal);
                        Target_01.IsFlashing = bFlasher;
                        if (bRoute && MySettings.ShowRoute)
                            Target_01.ShowRoute = true;
                        if (iCon != -1)
                            TaggetIcon(Target_01, iCon);

                        if (sTag == "")
                            Function.Call(Hash.SET_BLIP_DISPLAY, Target_01.Handle, 8);
                        else
                            BlipNames(Target_01, sTag);
                        Target_01.Color = BlipColor.Yellow6;
                    }
                    else
                    {
                        BackUpT = GTA.World.CreateBlip(Vlocal);
                        BackUpT.Color = BlipColor.Yellow;
                        if (iCon != -1)
                            TaggetIcon(BackUpT, iCon);

                        Target_01 = GTA.World.CreateBlip(Vlocal, fRadius);
                        Target_01.Color = BlipColor.Yellow;
                        Target_01.Alpha = 85;
                        Target_01.IsFlashing = bFlasher;
                        if (bRoute && MySettings.ShowRoute)
                            BackUpT.ShowRoute = true;

                        if (sTag == "")
                            Function.Call(Hash.SET_BLIP_DISPLAY, BackUpT.Handle, 8);
                        else
                            BlipNames(BackUpT, sTag);
                    }
                    ReadWriteBlips(false, true, Target_01.Handle, -1, -1, -1, -1, -1);
                }
            }
            else
            {
                if (Target_02 == null)
                {
                    if (fRadius < 2.00f)
                    {
                        Target_02 = GTA.World.CreateBlip(Vlocal);
                        Target_02.Color = BlipColor.Orange;
                        Target_02.Scale = 0.5f;
                        Target_02.IsFlashing = bFlasher;
                    }
                    else
                    {
                        Target_02 = GTA.World.CreateBlip(Vlocal, fRadius);
                        Target_02.Color = BlipColor.Orange;
                        Target_02.Alpha = 85;
                        Target_02.IsFlashing = bFlasher;
                    }

                    if (sTag == "")
                        Function.Call(Hash.SET_BLIP_DISPLAY, Target_02.Handle, 8);
                    else
                        BlipNames(Target_02, sTag);
                }
                ReadWriteBlips(false, true, Target_02.Handle, -1, -1, -1, -1, -1);
            }
        }
        private void BlipNames(Blip bLippy, string sTag)
        {
            LogThis("BlipNames");

            Function.Call(Hash.BEGIN_TEXT_COMMAND_SET_BLIP_NAME, "STRING");
            Function.Call(Hash._ADD_TEXT_COMPONENT_STRING, " " + sTag);
            Function.Call(Hash.END_TEXT_COMMAND_SET_BLIP_NAME, bLippy.Handle);
            Function.Call((Hash)0xF9113A30DE5C6670, "STRING");
            Function.Call(Hash._ADD_TEXT_COMPONENT_STRING, " " + sTag);
            Function.Call((Hash)0xBC38B49BCB83BC9B, bLippy.Handle);
        }
        private void TaggetIcon(Blip bLip, int iCon)
        {
            Function.Call(Hash.SET_BLIP_SPRITE, bLip.Handle, iCon);
        }
        public int MyCorona(Vector3 Vtech, float fRaid)
        {
            LogThis("TheYellowCorona");

            Vector3 Vsp = new Vector3(0.00f, 0.00f, 0.00f);
            int type = 47;

            float posX1 = Vtech.X;
            float posY1 = Vtech.Y;
            float posZ1 = Vtech.Z;
            float posX2 = Vsp.X;
            float posY2 = Vsp.Y;
            float posZ2 = Vsp.Z;

            int red = 255;
            int green = 255;
            int blue = 0;
            int alpha = 255;
            int reserved = 180;

            int ThisCheck = Function.Call<int>(Hash.CREATE_CHECKPOINT, type, posX1, posY1, posZ1, posX2, posY2, posZ2, fRaid, red, green, blue, alpha, reserved);
            Function.Call(Hash.SET_CHECKPOINT_CYLINDER_HEIGHT, ThisCheck, fRaid / 2, fRaid / 2, fRaid);
            return ThisCheck;
        }
        private void TheYellowCorona(Vector3 Vtech, float fRaid)
        {
            LogThis("TheYellowCorona");

            Vector3 Vsp = new Vector3(0.00f, 0.00f, 0.00f);
            int type = 47;

            float posX1 = Vtech.X;
            float posY1 = Vtech.Y;
            float posZ1 = Vtech.Z;
            float posX2 = Vsp.X;
            float posY2 = Vsp.Y;
            float posZ2 = Vsp.Z;

            int red = 255;
            int green = 255;
            int blue = 0;
            int alpha = 255;
            int reserved = 180;

            int ThisCheck = Function.Call<int>(Hash.CREATE_CHECKPOINT, type, posX1, posY1, posZ1, posX2, posY2, posZ2, fRaid, red, green, blue, alpha, reserved);
            Function.Call(Hash.SET_CHECKPOINT_CYLINDER_HEIGHT, ThisCheck, fRaid / 2, fRaid / 2, fRaid);
            iCoronaList.Add(ThisCheck);
            ReadWriteBlips(false, true, -1, ThisCheck, -1, -1, -1, -1);
        }
        private void AddDogFighters(int iFighter)
        {
            LogThis("AddDogFighters, iFighter == " + iFighter);

            for (int i = 0; i < iFighter; i++)
            {
                Vector3 PlayerPozy = Game.Player.Character.Position.Around(1500.00f);
                PlayerPozy.Z = 1500.00f;
                float fRotate = Game.Player.Character.Heading;
                VehicleSpawn(RanVehListX(2, 0, false), PlayerPozy, fRotate, false, false, false, false, 13, 0, 3, MyLang.Maptext[20], 0, false);
            }
        }
        private void DogFighterTracking()
        {
            iWait4Sec = Game.GameTime + 1000;
            for (int i = 0; i < MultiPed.Count; i++)
            {
                if (!MultiPed[i].MyPed.IsInVehicle() || MultiPed[i].MyPed.IsDead || MultiPed[i].MyVehicle.IsDead || MultiPed[i].MyVehicle.IsOnFire)
                {
                    if (MultiPed[i].MyBlip.Exists())
                        MultiPed[i].MyBlip.Remove();
                    MultiPed[i].MyVehicle.Explode();
                    VehicleList_01.Remove(MultiPed[i].MyVehicle);
                    MultiPed[i].MyVehicle.MarkAsNoLongerNeeded();
                    PedList_01.Remove(MultiPed[i].MyPed);
                    MultiPed[i].MyPed.MarkAsNoLongerNeeded();
                    MultiPed.RemoveAt(i);
                    AddDogFighters(1);
                }
            }
        }
        private void ClearTheWay(bool bExtra)
        {
            Function.Call(Hash.SET_PED_DENSITY_MULTIPLIER_THIS_FRAME, 0.00f);
            Function.Call(Hash.SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME, 0.00f);

            Function.Call(Hash.SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME, 0.00f);
            Function.Call(Hash.SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME, 0.00f);

            Entity[] Entz = World.GetAllEntities();
            if (iClearing < Game.GameTime && bExtra)
            {
                iClearing = Game.GameTime + 1000;
                for (int i = 0; i < Entz.Count(); i++)
                {
                    Entity Ent = Entz[i];
                    if (EntityExists(Entz, i))
                    {
                        if (Function.Call<bool>(Hash.IS_ENTITY_A_PED, Ent.Handle) && Ent.IsPersistent == false)
                            Ent.Delete();
                        if (Function.Call<bool>(Hash.IS_ENTITY_A_VEHICLE, Ent.Handle) && Ent.IsPersistent == false)
                            Ent.Delete();
                    }
                }
            }

        }
        private void YourFired(float fX, float fY, float fZ)
        {
            LogThis("YourFired");

            MultiBlimbs(new Vector3(fX, fY, fZ), 436, true, MyLang.Maptext[116]);
            int UFire = Function.Call<int>(Hash.START_SCRIPT_FIRE, fX, fY, fZ, 15, false);
            iFireList.Add(UFire);
        }
        public List<string> VehicleListX(int iList, int iType, bool bAddCustom)
        {
            LogThis("VehicleListX, iList == " + iList + ", iType == " + iType + ", bAddCustom == " + bAddCustom);

            List<string> sVehicles = new List<string>();

            FindCustomCarz();

            if (iType == 1)
            {
                if (iList == 0)
                {
                    if (sCustomCarz.Count > 0)
                        sVehicles = sCustomCarz;
                    else
                        sVehicles.Add("BJXL");
                }            //Custom
                else if (iList == 1)
                {
                    sVehicles.Add("PFISTER811");//<!-- 811 -->
                    sVehicles.Add("ADDER");//
                    sVehicles.Add("AUTARCH");//
                    sVehicles.Add("BANSHEE2");//<!-- Banshee 900R -->
                    sVehicles.Add("BULLET");//
                    sVehicles.Add("CHAMPION");//
                    sVehicles.Add("CHEETAH");//
                    sVehicles.Add("CYCLONE");//
                    sVehicles.Add("DEVESTE");//
                    sVehicles.Add("EMERUS");//
                    sVehicles.Add("ENTITYXF");//
                    sVehicles.Add("ENTITY2");//<!-- Entity XXR -->
                    sVehicles.Add("SHEAVA");//<!-- ETR1 -->
                    sVehicles.Add("FMJ");//
                    sVehicles.Add("FURIA");//
                    sVehicles.Add("GP1");//
                    sVehicles.Add("IGNUS");//
                    sVehicles.Add("INFERNUS");//
                    sVehicles.Add("ITALIGTB");//
                    sVehicles.Add("ITALIGTB2");//<!-- Itali GTB Custom -->
                    sVehicles.Add("KRIEGER");//
                    sVehicles.Add("OSIRIS");//
                    sVehicles.Add("NERO");//
                    sVehicles.Add("NERO2");//<!-- Nero Custom -->
                    sVehicles.Add("PENETRATOR");//
                    sVehicles.Add("LE7B");//<!-- RE-7B -->
                    sVehicles.Add("REAPER");//
                    sVehicles.Add("VOLTIC2");//<!-- Rocket Voltic -->
                    sVehicles.Add("S80");//
                    sVehicles.Add("SC1");//
                    sVehicles.Add("SCRAMJET");//
                    sVehicles.Add("SULTANRS");//
                    sVehicles.Add("T20");//
                    sVehicles.Add("TAIPAN");//
                    sVehicles.Add("TEMPESTA");//
                    sVehicles.Add("TEZERACT");//
                    sVehicles.Add("THRAX");//
                    sVehicles.Add("TIGON");//
                    sVehicles.Add("TURISMOR");//
                    sVehicles.Add("TYRANT");//
                    sVehicles.Add("TYRUS");//
                    sVehicles.Add("VACCA");//
                    sVehicles.Add("VAGNER");//
                    sVehicles.Add("VIGILANTE");//
                    sVehicles.Add("VISIONE");//
                    sVehicles.Add("VOLTIC");//
                    sVehicles.Add("PROTOTIPO");//<!-- X80 Proto -->
                    sVehicles.Add("XA21");//
                    sVehicles.Add("ZENO");//
                    sVehicles.Add("ZENTORNO");//
                    sVehicles.Add("ZORRUSSO");//
                }       //Super
                else if (iList == 2)
                {
                    sVehicles.Add("DRAFTER");//<!-- 8F Drafter -->
                    sVehicles.Add("NINEF");//
                    sVehicles.Add("NINEF2");//<!-- 9F Cabrio -->
                    sVehicles.Add("ALPHA");//
                    sVehicles.Add("BANSHEE");//
                    sVehicles.Add("BESTIAGTS");//
                    sVehicles.Add("BLISTA2");//<!-- Blista Compact -->
                    sVehicles.Add("BUFFALO");//
                    sVehicles.Add("BUFFALO2");//<!-- Buffalo S -->
                    sVehicles.Add("CALICO");//<!-- Calico GTF -->
                    sVehicles.Add("CARBONIZZARE");//
                    sVehicles.Add("COMET2");//<!-- Comet -->
                    sVehicles.Add("COMET3");//<!-- Comet Retro Custom -->
                    sVehicles.Add("COMET6");//<!-- Comet S2 -->
                    sVehicles.Add("COMET7");//<!-- Comet S2 Cabrio -->
                    sVehicles.Add("COMET4");//<!-- Comet Safari -->
                    sVehicles.Add("COMET5");//<!-- Comet SR -->
                    sVehicles.Add("COQUETTE");//
                    sVehicles.Add("COQUETTE4");//<!-- Coquette D10 -->
                    sVehicles.Add("CYPHER");//
                    sVehicles.Add("TAMPA2");//<!-- Drift Tampa -->
                    sVehicles.Add("ELEGY");//<!-- Elegy Retro Custom -->
                    sVehicles.Add("ELEGY2");//<!-- Elegy RH8 -->
                    sVehicles.Add("EUROS");//
                    sVehicles.Add("FELTZER2");//<!-- Feltzer -->
                    sVehicles.Add("FLASHGT");//
                    sVehicles.Add("FUROREGT");//
                    sVehicles.Add("FUSILADE");//
                    sVehicles.Add("FUTO");//
                    sVehicles.Add("FUTO2");//<!-- Futo GTX -->
                    sVehicles.Add("GB200");//
                    sVehicles.Add("BLISTA3");//<!-- Go Go Monkey Blista -->
                    sVehicles.Add("GROWLER");//
                    sVehicles.Add("HOTRING");//
                    sVehicles.Add("IMORGON");//
                    sVehicles.Add("ISSI7");//<!-- Issi Sport -->
                    sVehicles.Add("ITALIGTO");//
                    sVehicles.Add("ITALIRSX");//
                    sVehicles.Add("JESTER");//
                    sVehicles.Add("JESTER2");//<!-- Jester (Racecar) -->
                    sVehicles.Add("JESTER3");//<!-- Jester Classic -->
                    sVehicles.Add("JESTER4");//<!-- Jester RR -->
                    sVehicles.Add("JUGULAR");//
                    sVehicles.Add("KHAMELION");//
                    sVehicles.Add("KOMODA");//
                    sVehicles.Add("KURUMA");//
                    sVehicles.Add("KURUMA2");//<!-- Kuruma (Armored) -->
                    sVehicles.Add("LOCUST");//
                    sVehicles.Add("LYNX");//
                    sVehicles.Add("MASSACRO");//
                    sVehicles.Add("MASSACRO2");//<!-- Massacro (Racecar) -->
                    sVehicles.Add("NEO");//
                    sVehicles.Add("NEON");//
                    sVehicles.Add("OMNIS");//
                    sVehicles.Add("PARAGON");//
                    sVehicles.Add("PARAGON2");//<!-- Paragon R (Armored) -->
                    sVehicles.Add("PARIAH");//
                    sVehicles.Add("PENUMBRA");//
                    sVehicles.Add("PENUMBRA2");//<!-- Penumbra FF -->
                    sVehicles.Add("RAIDEN");//
                    sVehicles.Add("RAPIDGT");//
                    sVehicles.Add("RAPIDGT2");//<!-- Rapid GT Cabrio -->
                    sVehicles.Add("RAPTOR");//
                    sVehicles.Add("REMUS");//
                    sVehicles.Add("REVOLTER");//
                    sVehicles.Add("RT3000");//
                    sVehicles.Add("RUSTON");//
                    sVehicles.Add("SCHAFTER4");//<!-- Schafter LWB -->
                    sVehicles.Add("SCHAFTER3");//<!-- Schafter V12 -->
                    sVehicles.Add("SCHLAGEN");//
                    sVehicles.Add("SCHWARZER");//
                    sVehicles.Add("SENTINEL3");//<!-- Sentinel Classic -->
                    sVehicles.Add("SEVEN70");//
                    sVehicles.Add("SPECTER");//
                    sVehicles.Add("SPECTER2");//<!-- Specter Custom -->
                    sVehicles.Add("BUFFALO3");//<!-- Sprunk Buffalo -->
                    sVehicles.Add("STREITER");//
                    sVehicles.Add("SUGOI");//
                    sVehicles.Add("SULTAN");//
                    sVehicles.Add("SULTAN2");//<!-- Sultan Classic -->
                    sVehicles.Add("SULTAN3");//<!-- Sultan RS Classic -->
                    sVehicles.Add("SURANO");//
                    sVehicles.Add("TROPOS");//
                    sVehicles.Add("VSTR");//<!-- V-STR -->
                    sVehicles.Add("VECTRE");//
                    sVehicles.Add("VERLIERER2");//
                    sVehicles.Add("ZR350");//
                }       //Sports
                else if (iList == 3)
                {
                    sVehicles.Add("COGCABRIO");//
                    sVehicles.Add("EXEMPLAR");//
                    sVehicles.Add("F620");//
                    sVehicles.Add("FELON");//
                    sVehicles.Add("FELON2");//<!-- Felon GT -->
                    sVehicles.Add("JACKAL");//
                    sVehicles.Add("ORACLE");//
                    sVehicles.Add("ORACLE2");//<!-- Oracle XS -->
                    sVehicles.Add("PREVION");//
                    sVehicles.Add("SENTINEL2");//<!-- Sentinel -->
                    sVehicles.Add("SENTINEL");//<!-- Sentinel XS -->
                    sVehicles.Add("WINDSOR");//
                    sVehicles.Add("WINDSOR2");//<!-- Windsor Drop -->
                    sVehicles.Add("ZION");//
                    sVehicles.Add("ZION2");//<!-- Zion Cabrio -->
                }       //Coups
                else if (iList == 4)
                {
                    sVehicles.Add("DUKES3");//<!-- Beater Dukes -->
                    sVehicles.Add("BLADE");//
                    sVehicles.Add("BUCCANEER");//
                    sVehicles.Add("BUCCANEER2");//<!-- Buccaneer Custom -->
                    sVehicles.Add("BUFFALO4");//<!-- Buffalo STX -->
                    sVehicles.Add("STALION2");//<!-- Burger Shot Stallion -->
                    sVehicles.Add("CHINO");//
                    sVehicles.Add("CHINO2");//<!-- Chino Custom -->
                    sVehicles.Add("CLIQUE");//
                    sVehicles.Add("COQUETTE3");//<!-- Coquette BlackFin -->
                    sVehicles.Add("DEVIANT");//
                    sVehicles.Add("DOMINATOR");//
                    sVehicles.Add("DOMINATOR7");//<!-- Dominator ASP -->
                    sVehicles.Add("DOMINATOR8");//<!-- Dominator GTT -->
                    sVehicles.Add("DOMINATOR3");//<!-- Dominator GTX -->
                    sVehicles.Add("YOSEMITE2");//<!-- Drift Yosemite -->
                    sVehicles.Add("DUKES2");//<!-- Duke O'Death -->
                    sVehicles.Add("DUKES");//
                    sVehicles.Add("ELLIE");//
                    sVehicles.Add("FACTION");//
                    sVehicles.Add("FACTION2");//<!-- Faction Custom -->
                    sVehicles.Add("FACTION3");//<!-- Faction Custom Donk -->
                    sVehicles.Add("GAUNTLET");//
                    sVehicles.Add("GAUNTLET3");//<!-- Gauntlet Classic -->
                    sVehicles.Add("GAUNTLET5");//<!-- Gauntlet Classic Custom -->
                    sVehicles.Add("GAUNTLET4");//<!-- Gauntlet Hellfire -->
                    sVehicles.Add("HERMES");//
                    sVehicles.Add("HOTKNIFE");//
                    sVehicles.Add("HUSTLER");//
                    sVehicles.Add("IMPALER");//
                    sVehicles.Add("SLAMVAN2");//<!-- Lost Slamvan -->
                    sVehicles.Add("LURCHER");//
                    sVehicles.Add("MANANA2");//<!-- Manana Custom -->
                    sVehicles.Add("MOONBEAM");//
                    sVehicles.Add("MOONBEAM2");//<!-- Moonbeam Custom -->
                    sVehicles.Add("NIGHTSHADE");//
                    sVehicles.Add("PEYOTE2");//<!-- Peyote Gasser -->
                    sVehicles.Add("PHOENIX");//
                    sVehicles.Add("PICADOR");//
                    sVehicles.Add("DOMINATOR2");//<!-- Pisswasser Dominator -->
                    sVehicles.Add("RATLOADER");//
                    sVehicles.Add("RATLOADER2");//<!-- Rat-Truck -->
                    sVehicles.Add("GAUNTLET2");//<!-- Redwood Gauntlet -->
                    sVehicles.Add("RUINER");//
                    sVehicles.Add("RUINER2");//<!-- Ruiner 2000 -->
                    sVehicles.Add("SABREGT");//
                    sVehicles.Add("SABREGT2");//<!-- Sabre Turbo Custom -->
                    sVehicles.Add("SLAMVAN");//
                    sVehicles.Add("SLAMVAN3");//<!-- Slamvan Custom -->
                    sVehicles.Add("STALION");//
                    sVehicles.Add("TAMPA");//
                    sVehicles.Add("TULIP");//
                    sVehicles.Add("VAMOS");//
                    sVehicles.Add("VIGERO");//
                    sVehicles.Add("VIRGO");//
                    sVehicles.Add("VIRGO3");//<!-- Virgo Classic -->
                    sVehicles.Add("VIRGO2");//<!-- Virgo Classic Custom -->
                    sVehicles.Add("VOODOO");//
                    sVehicles.Add("VOODOO2");//<!-- Voodoo Custom -->
                    sVehicles.Add("TAMPA3");//<!-- Weaponized Tampa -->
                    sVehicles.Add("YOSEMITE");//
                }       //Muscle
                else if (iList == 5)
                {
                    sVehicles.Add("Z190");//<!-- 190z -->
                    sVehicles.Add("ARDENT");//
                    sVehicles.Add("CASCO");//
                    sVehicles.Add("CHEBUREK");//
                    sVehicles.Add("CHEETAH2");//<!-- Cheetah Classic -->
                    sVehicles.Add("COQUETTE2");//<!-- Coquette Classic -->
                    sVehicles.Add("DELUXO");//
                    sVehicles.Add("DYNASTY");//
                    sVehicles.Add("FAGALOA");//
                    sVehicles.Add("BTYPE2");//<!-- FrÃ¤nken Stange -->
                    sVehicles.Add("GT500");//
                    sVehicles.Add("INFERNUS2");//<!-- Infernus Classic -->
                    sVehicles.Add("JB700");//
                    sVehicles.Add("JB7002");//<!-- JB 700W -->
                    sVehicles.Add("MAMBA");//
                    sVehicles.Add("MANANA");//
                    sVehicles.Add("MICHELLI");//
                    sVehicles.Add("MONROE");//
                    sVehicles.Add("NEBULA");//
                    sVehicles.Add("PEYOTE");//
                    sVehicles.Add("PEYOTE3");//<!-- Peyote Custom -->
                    sVehicles.Add("PIGALLE");//
                    sVehicles.Add("RAPIDGT3");//<!-- Rapid GT Classic -->
                    sVehicles.Add("RETINUE");//
                    sVehicles.Add("RETINUE2");//<!-- Retinue MkII -->
                    sVehicles.Add("BTYPE");//<!-- Roosevelt -->
                    sVehicles.Add("BTYPE3");//<!-- Roosevelt Valor -->
                    sVehicles.Add("SAVESTRA");//
                    sVehicles.Add("STINGER");//
                    sVehicles.Add("STINGERGT");//
                    sVehicles.Add("FELTZER3");//<!-- Stirling GT -->
                    sVehicles.Add("STROMBERG");//
                    sVehicles.Add("SWINGER");//
                    sVehicles.Add("TOREADOR");//
                    sVehicles.Add("TORERO");//
                    sVehicles.Add("TORNADO");//
                    sVehicles.Add("TORNADO2");//<!-- Tornado Cabrio -->
                    sVehicles.Add("TORNADO3");//<!-- Rusty Tornado -->
                    sVehicles.Add("TORNADO4");//<!-- Mariachi Tornado -->
                    sVehicles.Add("TORNADO5");//<!-- Tornado Custom -->
                    sVehicles.Add("TORNADO6");//<!-- Tornado Rat Rod -->
                    sVehicles.Add("TURISMO2");//<!-- Turismo Classic -->
                    sVehicles.Add("VISERIS");//
                    sVehicles.Add("ZTYPE");//
                    sVehicles.Add("ZION3");//<!-- Zion Classic -->
                }       //Sportsclassic
                else if (iList == 6)
                {
                    sVehicles.Add("ASEA");//
                    sVehicles.Add("ASEA2");//<!-- Asea North Yankton variant -->
                    sVehicles.Add("ASTEROPE");//
                    sVehicles.Add("CINQUEMILA");//
                    sVehicles.Add("COGNOSCENTI");//
                    sVehicles.Add("COGNOSCENTI2");//<!-- Cognoscenti (Armored) -->
                    sVehicles.Add("COG55");//<!-- Cognoscenti 55 -->
                    sVehicles.Add("COG552");//<!-- Cognoscenti 55 (Armored) -->
                    sVehicles.Add("DEITY");//
                    sVehicles.Add("EMPEROR");//
                    sVehicles.Add("EMPEROR2");//<!-- Emperor beater variant -->
                    sVehicles.Add("EMPEROR3");//<!-- Emperor North Yankton variant -->
                    sVehicles.Add("FUGITIVE");//
                    sVehicles.Add("GLENDALE");//
                    sVehicles.Add("GLENDALE2");//<!-- Glendale Custom -->
                    sVehicles.Add("INGOT");//
                    sVehicles.Add("INTRUDER");//
                    sVehicles.Add("PREMIER");//
                    sVehicles.Add("PRIMO");//
                    sVehicles.Add("PRIMO2");//<!-- Primo Custom -->
                    sVehicles.Add("REGINA");//
                    sVehicles.Add("ROMERO");//
                    sVehicles.Add("SCHAFTER2");//
                    sVehicles.Add("SCHAFTER6");//<!-- Schafter LWB (Armored) -->
                    sVehicles.Add("SCHAFTER5");//<!-- Schafter V12 (Armored) -->
                    sVehicles.Add("STAFFORD");//
                    sVehicles.Add("STANIER");//
                    sVehicles.Add("STRATUM");//
                    sVehicles.Add("SUPERD");//
                    sVehicles.Add("SURGE");//
                    sVehicles.Add("TAILGATER");//
                    sVehicles.Add("TAILGATER2");//<!-- Tailgater S -->
                    sVehicles.Add("WARRENER");//
                    sVehicles.Add("WARRENER2");//<!-- Warrener HKR -->
                    sVehicles.Add("WASHINGTON");//
                }       //Sedan
                else if (iList == 7)
                {
                    sVehicles.Add("BIFTA");//
                    sVehicles.Add("BLAZER");//
                    sVehicles.Add("BLAZER5");//<!-- Blazer Aqua -->
                    sVehicles.Add("BLAZER2");//<!-- Blazer Lifeguard -->
                    sVehicles.Add("BODHI2");//
                    sVehicles.Add("BRAWLER");//
                    sVehicles.Add("CARACARA");//
                    sVehicles.Add("CARACARA2");//<!-- Caracara 4x4 -->
                    sVehicles.Add("TROPHYTRUCK2");//<!-- Desert Raid -->
                    sVehicles.Add("DUBSTA3");//<!-- Dubsta 6x6 -->
                    sVehicles.Add("DUNE");//
                    sVehicles.Add("DUNE3");//<!-- Dune FAV -->
                    sVehicles.Add("DLOADER");//
                    sVehicles.Add("EVERON");//
                    sVehicles.Add("FREECRAWLER");//
                    sVehicles.Add("HELLION");//
                    sVehicles.Add("BLAZER3");//<!-- Hot Rod Blazer -->
                    sVehicles.Add("BFINJECTION");//
                    sVehicles.Add("INSURGENT");//
                    sVehicles.Add("INSURGENT2");//<!-- Insurgent Pick-Up -->
                    sVehicles.Add("INSURGENT3");//<!-- Insurgent Pick-Up Custom -->
                    sVehicles.Add("KALAHARI");//
                    sVehicles.Add("KAMACHO");//
                    sVehicles.Add("MENACER");//
                    sVehicles.Add("MESA3");//<!-- Merryweather Mesa -->
                    sVehicles.Add("NIGHTSHARK");//
                    sVehicles.Add("OUTLAW");//
                    sVehicles.Add("PATRIOT3");//<!-- Patriot Mil-Spec -->
                    sVehicles.Add("DUNE4");//<!-- Ramp Buggy mission variant -->
                    sVehicles.Add("DUNE5");//<!-- Ramp Buggy -->
                    sVehicles.Add("RANCHERXL");//
                    sVehicles.Add("RANCHERXL2");//<!-- Rancher XL North Yankton variant -->
                    sVehicles.Add("REBEL2");//
                    sVehicles.Add("RIATA");//
                    sVehicles.Add("REBEL");//<!-- Rusty Rebel -->
                    sVehicles.Add("SANDKING2");//<!-- Sandking SWB -->
                    sVehicles.Add("SANDKING");//<!-- Sandking XL -->
                    sVehicles.Add("DUNE2");//<!-- Space Docker -->
                    sVehicles.Add("BLAZER4");//<!-- Street Blazer -->
                    sVehicles.Add("TECHNICAL");//
                    sVehicles.Add("TECHNICAL2");//<!-- Technical Aqua -->
                    sVehicles.Add("TECHNICAL3");//<!-- Technical Custom -->
                    sVehicles.Add("TROPHYTRUCK");//
                    sVehicles.Add("VAGRANT");//
                    sVehicles.Add("VERUS");//
                    sVehicles.Add("WINKY");//
                    sVehicles.Add("YOSEMITE3");//<!-- Yosemite Rancher -->
                    sVehicles.Add("ZHABA");//
                }       //Offroad
                else if (iList == 8)
                {
                    sVehicles.Add("ASTRON");//
                    sVehicles.Add("BALLER");//
                    sVehicles.Add("BALLER2");//<!-- Baller 2nd gen variant -->
                    sVehicles.Add("BALLER3");//<!-- Baller LE -->
                    sVehicles.Add("BALLER5");//<!-- Baller LE (Armored) -->
                    sVehicles.Add("BALLER4");//<!-- Baller LE LWB -->
                    sVehicles.Add("BALLER6");//<!-- Baller LE LWB (Armored) -->
                    sVehicles.Add("BALLER7");//<!-- Baller ST -->
                    sVehicles.Add("BJXL");//
                    sVehicles.Add("CAVALCADE");//
                    sVehicles.Add("CAVALCADE2");//<!-- Cavalcade 2nd gen variant -->
                    sVehicles.Add("CONTENDER");//
                    sVehicles.Add("DUBSTA");//
                    sVehicles.Add("DUBSTA2");//<!-- Dubsta black variant -->
                    sVehicles.Add("FQ2");//
                    sVehicles.Add("GRANGER");//
                    sVehicles.Add("GRANGER2");//<!-- Granger 3600LX -->
                    sVehicles.Add("GRESLEY");//
                    sVehicles.Add("HABANERO");//
                    sVehicles.Add("HUNTLEY");//
                    sVehicles.Add("IWAGEN");//
                    sVehicles.Add("JUBILEE");//
                    sVehicles.Add("LANDSTALKER");//
                    sVehicles.Add("LANDSTALKER2");//<!-- Landstalker XL -->
                    sVehicles.Add("MESA");//
                    sVehicles.Add("MESA2");//<!-- Mesa North Yankton variant -->
                    sVehicles.Add("NOVAK");//
                    sVehicles.Add("PATRIOT");//
                    sVehicles.Add("PATRIOT2");//<!-- Patriot Stretch -->
                    sVehicles.Add("RADI");//
                    sVehicles.Add("REBLA");//
                    sVehicles.Add("ROCOTO");//
                    sVehicles.Add("SEMINOLE");//
                    sVehicles.Add("SEMINOLE2");//<!-- Seminole Frontier -->
                    sVehicles.Add("SERRANO");//
                    sVehicles.Add("SQUADDIE");//
                    sVehicles.Add("TOROS");//
                    sVehicles.Add("XLS");//
                    sVehicles.Add("XLS2");//<!-- XLS (Armored) -->
                }       //SUV
                else if (iList == 9)
                {
                    sVehicles.Add("ASBO");//
                    sVehicles.Add("BLISTA");//
                    sVehicles.Add("KANJO");//<!-- Blista Kanjo -->
                    sVehicles.Add("BRIOSO");//
                    sVehicles.Add("BRIOSO2");//<!-- Brioso 300 -->
                    sVehicles.Add("CLUB");//
                    sVehicles.Add("DILETTANTE");//
                    sVehicles.Add("DILETTANTE2");//<!-- Merryweather Dilettante -->
                    sVehicles.Add("ISSI2");//
                    sVehicles.Add("ISSI3");//<!-- Issi Classic -->
                    sVehicles.Add("PANTO");//
                    sVehicles.Add("PRAIRIE");//
                    sVehicles.Add("RHAPSODY");//
                    sVehicles.Add("WEEVIL");//
                }       //Compact
                else if (iList == 10)
                {
                    sVehicles.Add("FORMULA");//<!-- PR4, should be Open Wheel class -->
                    sVehicles.Add("FORMULA2");//<!-- R88, should be Open Wheel class -->
                    sVehicles.Add("OPENWHEEL1");//<!-- BR8, should be Open Wheel class -->
                    sVehicles.Add("OPENWHEEL2");//<!-- DR1, should be Open Wheel class -->
                }       //F1
                else if (iList == 11)
                {
                    sVehicles.Add("VETO");//<!-- Veto Classic -->
                    sVehicles.Add("VETO2");//<!-- Veto Modern -->
                }       //Cart
                else if (iList == 12)
                {
                    sVehicles.Add("BISON");//
                    sVehicles.Add("BISON2");//<!-- McGill-Olsen Bison -->
                    sVehicles.Add("BISON3");//<!-- Mighty Bush Bison -->
                    sVehicles.Add("CONTENDER");//
                    sVehicles.Add("DUBSTA3");//<!-- Dubsta 6x6 -->
                    sVehicles.Add("GUARDIAN");//
                    sVehicles.Add("PICADOR");//
                    sVehicles.Add("SADLER");//
                    sVehicles.Add("SADLER2");//<!-- Sadler North Yankton variant -->
                    sVehicles.Add("SLAMVAN");//
                    sVehicles.Add("SLAMVAN3");//<!-- Slamvan Custom -->
                    sVehicles.Add("YOSEMITE");//
                    sVehicles.Add("SADLER");//
                    sVehicles.Add("SADLER2");//<!-- Sadler North Yankton variant -->
                    sVehicles.Add("GUARDIAN");//
                }       //Pickups
                else if (iList == 13)
                {
                    sVehicles.Add("BOXVILLE5");//<!-- Armored Boxville -->
                    sVehicles.Add("BISON");//
                    sVehicles.Add("BISON2");//<!-- McGill-Olsen Bison -->
                    sVehicles.Add("BISON3");//<!-- Mighty Bush Bison -->
                    sVehicles.Add("BOBCATXL");//
                    sVehicles.Add("BOXVILLE");//<!-- LSDWP Boxville -->
                    sVehicles.Add("BOXVILLE2");//<!-- Go Postal Boxville -->
                    sVehicles.Add("BOXVILLE3");//<!-- Humane Labs Boxville -->
                    sVehicles.Add("BOXVILLE4");//<!-- PostOp Boxville -->
                    sVehicles.Add("BURRITO");//
                    sVehicles.Add("BURRITO2");//<!-- Burrito Bugstars variant -->
                    sVehicles.Add("BURRITO3");//<!-- Burrito civilian variant -->
                    sVehicles.Add("BURRITO4");//<!-- Burrito McGill-Olsen variant -->
                    sVehicles.Add("BURRITO5");//<!-- Burrito North Yankton variant -->
                    sVehicles.Add("CAMPER");//
                    sVehicles.Add("SPEEDO2");//<!-- Clown Van -->
                    sVehicles.Add("GBURRITO");//<!-- Gang Burrito Lost MC variant -->
                    sVehicles.Add("GBURRITO2");//<!-- Gang Burrito heist variant -->
                    sVehicles.Add("JOURNEY");//
                    sVehicles.Add("MINIVAN");//
                    sVehicles.Add("MINIVAN2");//<!-- Minivan Custom -->
                    sVehicles.Add("PARADISE");//
                    sVehicles.Add("PONY");//
                    sVehicles.Add("PONY2");//<!-- Pony Smoke on the Water variant -->
                    sVehicles.Add("RUMPO");//
                    sVehicles.Add("RUMPO2");//<!-- Rumpo Deludamol variant -->
                    sVehicles.Add("RUMPO3");//<!-- Rumpo Custom -->
                    sVehicles.Add("SPEEDO");//
                    sVehicles.Add("SPEEDO4");//<!-- Speedo Custom -->
                    sVehicles.Add("SURFER");//
                    sVehicles.Add("SURFER2");//<!-- Surfer beater variant -->
                    sVehicles.Add("TACO");//
                    sVehicles.Add("YOUGA");//
                    sVehicles.Add("YOUGA2");//<!-- Youga Classic -->
                    sVehicles.Add("YOUGA3");//<!-- Youga Classic 4x4 -->
                    sVehicles.Add("YOUGA4");//<!-- Youga Custom -->
                }       //Vans
                else if (iList == 14)
                {
                    sVehicles.Add("APC");//
                    sVehicles.Add("AMBULANCE");//
                    sVehicles.Add("BARRACKS");//
                    sVehicles.Add("BARRACKS2");//<!-- Barracks Semi -->
                    sVehicles.Add("BARRAGE");//
                    sVehicles.Add("CHERNOBOG");//
                    sVehicles.Add("CRUSADER");//
                    sVehicles.Add("FBI");//<!-- FIB Buffalo -->
                    sVehicles.Add("FBI2");//<!-- FIB Granger -->
                    sVehicles.Add("FIRETRUK");//
                    sVehicles.Add("HALFTRACK");//
                    sVehicles.Add("LGUARD");//
                    sVehicles.Add("PRANGER");//<!-- Park Ranger -->
                    sVehicles.Add("POLICEB");//<!-- Police Bike -->
                    sVehicles.Add("POLICE2");//<!-- Police Cruiser Buffalo -->
                    sVehicles.Add("POLICE");//<!-- Police Cruiser Stanier -->
                    sVehicles.Add("POLICE3");//<!-- Police Cruiser Interceptor -->
                    sVehicles.Add("POLICEOLD1");//<!-- Police Rancher -->
                    sVehicles.Add("RIOT");//<!-- Police Riot -->
                    sVehicles.Add("POLICEOLD2");//<!-- Police Roadcruiser -->
                    sVehicles.Add("POLICET");//<!-- Police Transporter -->
                    sVehicles.Add("PBUS");//<!-- Prison Bus -->
                    sVehicles.Add("RIOT2");//<!-- RCV -->
                    sVehicles.Add("RHINO");//
                    sVehicles.Add("SHERIFF");//<!-- Sheriff Cruiser -->
                    sVehicles.Add("SHERIFF2");//<!-- Sheriff SUV -->
                    sVehicles.Add("KHANJALI");//<!-- TM-02 Khanjali -->
                    sVehicles.Add("POLICE4");//<!-- Unmarked Cruiser -->
                    sVehicles.Add("VETIR");//
                }       //Emergancy
                else if (iList == 15)
                {
                    sVehicles.Add("AIRBUS");//
                    sVehicles.Add("BUS");//
                    sVehicles.Add("COACH");//<!-- Dashound -->
                    sVehicles.Add("PBUS2");//<!-- Festival Bus -->
                    sVehicles.Add("RENTALBUS");//<!-- Rental Shuttle Bus -->
                    sVehicles.Add("TOURBUS");//
                }       //Bus
                else if (iList == 16)
                {
                    sVehicles.Add("AIRTUG");//
                    sVehicles.Add("BRICKADE");//
                    sVehicles.Add("BULLDOZER");//
                    sVehicles.Add("CADDY");//<!-- Caddy golf variant -->
                    sVehicles.Add("CADDY2");//<!-- Caddy civilian variant -->
                    sVehicles.Add("CADDY3");//<!-- Caddy bunker variant -->
                    sVehicles.Add("RALLYTRUCK");//<!-- Dune -->
                    sVehicles.Add("DOCKTUG");//
                    sVehicles.Add("TRACTOR2");//<!-- Fieldmaster -->
                    sVehicles.Add("TRACTOR3");//<!-- Fieldmaster North Yankton variant -->
                    sVehicles.Add("FORKLIFT");//
                    sVehicles.Add("MOWER");//
                    sVehicles.Add("RIPLEY");//
                    sVehicles.Add("SCRAP");//
                    sVehicles.Add("SLAMTRUCK");//
                    sVehicles.Add("TAXI");//
                    sVehicles.Add("TOWTRUCK2");//<!-- Tow Truck Slamvan variant -->
                    sVehicles.Add("TOWTRUCK");//<!-- Towtruck Yankee variant -->
                    sVehicles.Add("TRACTOR");//
                    sVehicles.Add("TRASH");//
                    sVehicles.Add("TRASH2");//<!-- Trashmaster heist variant -->
                    sVehicles.Add("UTILLITRUCK");//<!-- Utility Truck cherry picker variant -->
                    sVehicles.Add("UTILLITRUCK2");//<!-- Utility Truck flatbed variant -->
                    sVehicles.Add("UTILLITRUCK3");//<!-- Utility Truck pick-up variant -->
                    sVehicles.Add("WASTLNDR");//
                    sVehicles.Add("CUTTER");//
                    sVehicles.Add("BENSON");//
                    sVehicles.Add("BIFF");//
                    sVehicles.Add("HANDLER");//<!-- Dock Handler -->
                    sVehicles.Add("DUMP");//
                    sVehicles.Add("FLATBED");//
                    sVehicles.Add("HAULER");//
                    sVehicles.Add("HAULER2");//<!-- Hauler Custom -->
                    sVehicles.Add("MIXER");//
                    sVehicles.Add("MIXER2");//<!-- Mixer 8-wheel variant -->
                    sVehicles.Add("MULE");//
                    sVehicles.Add("MULE2");//<!-- Mule ramp door variant -->
                    sVehicles.Add("MULE3");//<!-- Mule heist variant -->
                    sVehicles.Add("MULE5");//<!-- Mule Contract DLC variant -->
                    sVehicles.Add("MULE4");//<!-- Mule Custom -->
                    sVehicles.Add("PACKER");//
                    sVehicles.Add("PHANTOM");//
                    sVehicles.Add("PHANTOM3");//<!-- Phantom Custom -->
                    sVehicles.Add("PHANTOM2");//<!-- Phantom Wedge -->
                    sVehicles.Add("POUNDER");//
                    sVehicles.Add("POUNDER2");//<!-- Pounder Custom -->
                    sVehicles.Add("RUBBLE");//
                    sVehicles.Add("STOCKADE");//<!-- Securicar -->
                    sVehicles.Add("STOCKADE3");//<!-- Securicar North Yankton variant -->
                    sVehicles.Add("TERBYTE");//
                    sVehicles.Add("TIPTRUCK");//<!-- Tipper 4-wheel variant -->
                    sVehicles.Add("TIPTRUCK2");//<!-- Tipper 6-wheel variant -->
                }       //Utility
                else if (iList == 17)
                {
                    sVehicles.Add("STRETCH");//
                    sVehicles.Add("LIMO2");//<!-- Turreted Limo -->
                    sVehicles.Add("MONSTER");//<!-- Liberator -->
                    sVehicles.Add("MARSHALL");//
                }       //Oversized
                else if (iList == 18)
                {
                    sVehicles.Add("ZR3802");//<!-- Future Shock ZR380 -->
                    sVehicles.Add("ZR3803");//<!-- Nightmare ZR380 -->
                    sVehicles.Add("ZR380");//<!-- Apocalypse ZR380 -->
                    sVehicles.Add("DOMINATOR4");//<!-- Apocalypse Dominator -->
                    sVehicles.Add("DOMINATOR5");//<!-- Future Shock Dominator -->
                    sVehicles.Add("DOMINATOR6");//<!-- Nightmare Dominator -->
                    sVehicles.Add("IMPALER2");//<!-- Apocalypse Impaler -->
                    sVehicles.Add("IMPALER3");//<!-- Future Shock Impaler -->
                    sVehicles.Add("IMPALER4");//<!-- Nightmare Impaler -->
                    sVehicles.Add("IMPERATOR");//<!-- Apocalypse Imperator -->
                    sVehicles.Add("IMPERATOR2");//<!-- Future Shock Imperator -->
                    sVehicles.Add("IMPERATOR3");//<!-- Nightmare Imperator -->
                    sVehicles.Add("SLAMVAN4");//<!-- Apocalypse Slamvan -->
                    sVehicles.Add("SLAMVAN5");//<!-- Future Shock Slamvan -->
                    sVehicles.Add("SLAMVAN6");//<!-- Nightmare Slamvan -->                
                    sVehicles.Add("BRUISER2");//<!-- Future Shock Bruiser -->
                    sVehicles.Add("BRUISER");//<!-- Apocalypse Bruiser -->
                    sVehicles.Add("BRUISER3");//<!-- Nightmare Bruiser -->
                    sVehicles.Add("BRUTUS2");//<!-- Future Shock Brutus -->
                    sVehicles.Add("BRUTUS");//<!-- Apocalypse Brutus -->
                    sVehicles.Add("BRUTUS3");//<!-- Nightmare Brutus -->
                    sVehicles.Add("MONSTER4");//<!-- Future Shock Sasquatch -->
                    sVehicles.Add("MONSTER3");//<!-- Apocalypse Sasquatch -->
                    sVehicles.Add("MONSTER5");//<!-- Nightmare Sasquatch -->                
                    sVehicles.Add("ISSI4");//<!-- Apocalypse Issi -->
                    sVehicles.Add("ISSI5");//<!-- Future Shock Issi -->
                    sVehicles.Add("ISSI6");//<!-- Nightmare Issi -->               
                    sVehicles.Add("SCARAB");//<!-- Apocalypse Scarab -->
                    sVehicles.Add("SCARAB2");//<!-- Future Shock Scarab -->
                    sVehicles.Add("SCARAB3");//<!-- Nightmare Scarab -->      
                    sVehicles.Add("CERBERUS");//<!-- Apocalypse Cerberus -->
                    sVehicles.Add("CERBERUS2");//<!-- Future Shock Cerberus -->
                    sVehicles.Add("CERBERUS3");//<!-- Nightmare Cerberus -->
                    sVehicles.Add("DEATHBIKE");//<!-- Apocalypse Deathbike -->
                    sVehicles.Add("DEATHBIKE2");//<!-- Future Shock Deathbike -->
                    sVehicles.Add("DEATHBIKE3");//<!-- Nightmare Deathbike -->
                }       //Areawars
                else if (iList == 19)
                {
                    sVehicles.Add("AKUMA");//
                    sVehicles.Add("AVARUS");//
                    sVehicles.Add("BAGGER");//
                    sVehicles.Add("BATI");//
                    sVehicles.Add("BATI2");//<!-- Bati 801RR -->
                    sVehicles.Add("BF400");//
                    sVehicles.Add("CARBONRS");//
                    sVehicles.Add("CHIMERA");//
                    sVehicles.Add("CLIFFHANGER");//
                    sVehicles.Add("DAEMON");//<!-- Daemon Lost MC variant -->
                    sVehicles.Add("DAEMON2");//<!-- Daemon Bikers DLC variant -->
                    sVehicles.Add("DEFILER");//
                    sVehicles.Add("DIABLOUS");//
                    sVehicles.Add("DIABLOUS2");//<!-- Diabolus Custom -->
                    sVehicles.Add("DOUBLE");//
                    sVehicles.Add("ENDURO");//
                    sVehicles.Add("ESSKEY");//
                    sVehicles.Add("FAGGIO2");//
                    sVehicles.Add("FAGGIO3");//<!-- Faggio Mod -->
                    sVehicles.Add("FAGGIO");//<!-- Faggio Sport -->
                    sVehicles.Add("FCR");//
                    sVehicles.Add("FCR2");//<!-- FCR 1000 Custom -->
                    sVehicles.Add("GARGOYLE");//
                    sVehicles.Add("HAKUCHOU");//
                    sVehicles.Add("HAKUCHOU2");//<!-- Hakuchou Drag -->
                    sVehicles.Add("HEXER");//
                    sVehicles.Add("INNOVATION");//
                    sVehicles.Add("LECTRO");//
                    sVehicles.Add("MANCHEZ");//
                    sVehicles.Add("MANCHEZ2");//<!-- Manchez Scout -->
                    sVehicles.Add("NEMESIS");//
                    sVehicles.Add("NIGHTBLADE");//
                    sVehicles.Add("OPPRESSOR");//
                    sVehicles.Add("OPPRESSOR2");//<!-- Oppressor Mk II -->
                    sVehicles.Add("PCJ");//
                    sVehicles.Add("RROCKET");//<!-- Rampant Rocket -->
                    sVehicles.Add("RATBIKE");//
                    sVehicles.Add("REEVER");//
                    sVehicles.Add("RUFFIAN");//
                    sVehicles.Add("SANCHEZ");//<!-- Sanchez livery variant -->
                    sVehicles.Add("SANCHEZ2");//
                    sVehicles.Add("SANCTUS");//
                    sVehicles.Add("SHINOBI");//
                    sVehicles.Add("SHOTARO");//
                    sVehicles.Add("SOVEREIGN");//
                    sVehicles.Add("STRYDER");//
                    sVehicles.Add("THRUST");//
                    sVehicles.Add("VADER");//
                    sVehicles.Add("VINDICATOR");//
                    sVehicles.Add("VORTEX");//
                    sVehicles.Add("WOLFSBANE");//
                    sVehicles.Add("ZOMBIEA");//<!-- Zombie Bobber -->
                    sVehicles.Add("ZOMBIEB");//<!-- Zombie Chopper -->
                }       //Motorcycle

                if (bAddCustom)
                {
                    if (sCustomCarz.Count > 0)
                    {
                        for (int i = 0; i < sCustomCarz.Count; i++)
                            sVehicles.Add(sCustomCarz[i]);
                    }
                }
            }            //car
            else if (iType == 2)
            {
                sVehicles.Add("BMX");//
                sVehicles.Add("CRUISER");//
                sVehicles.Add("TRIBIKE2");//<!-- Endurex Race Bike -->
                sVehicles.Add("FIXTER");//
                sVehicles.Add("SCORCHER");//
                sVehicles.Add("TRIBIKE3");//<!-- Tri-Cycles Race Bike -->
                sVehicles.Add("TRIBIKE");//<!-- Whippet Race Bike -->
            }       //Bicycle     
            else if (iType == 3)
            {
                if (iList == 0)
                {
                    if (sCustomChopperz.Count > 0)
                        sVehicles = sCustomChopperz;
                    else
                        sVehicles.Add("BUZZARD");
                }            //Custom
                else if (iList == 1)
                {
                    sVehicles.Add("BUZZARD2");//<!-- Buzzard -->
                    sVehicles.Add("CARGOBOB");//<!-- Military Cargobob -->
                    sVehicles.Add("CARGOBOB2");//<!-- Jetsam Cargobob -->
                    sVehicles.Add("CARGOBOB3");//<!-- Cargobob Trevor Philips Industries variant -->
                    sVehicles.Add("FROGGER");//
                    sVehicles.Add("FROGGER2");//<!-- Frogger Trevor Philips Industries variant -->
                    sVehicles.Add("MAVERICK");//
                    sVehicles.Add("POLMAV");//
                    sVehicles.Add("SKYLIFT");//
                    sVehicles.Add("SUPERVOLITO");//
                    sVehicles.Add("SUPERVOLITO2");//<!-- SuperVolito Carbon -->
                    sVehicles.Add("SWIFT");//
                    sVehicles.Add("SWIFT2");//<!-- Swift Deluxe -->
                    sVehicles.Add("VOLATUS");//
                }       //Helli
                else
                {
                    sVehicles.Add("AKULA");//
                    sVehicles.Add("ANNIHILATOR");//
                    sVehicles.Add("ANNIHILATOR2");//<!-- Annihilator Stealth -->
                    sVehicles.Add("BUZZARD");//<!-- Buzzard Attack Chopper -->
                    sVehicles.Add("HUNTER");//<!-- FH-1 Hunter -->
                    sVehicles.Add("HAVOK");//
                    sVehicles.Add("SAVAGE");//
                    sVehicles.Add("SEASPARROW");//
                    sVehicles.Add("SEASPARROW2");//<!-- Sparrow -->
                    sVehicles.Add("VALKYRIE");//
                    sVehicles.Add("VALKYRIE2");//<!-- Valkyrie MOD.0 -->
                }       //Helli

                if (bAddCustom)
                {
                    if (sCustomChopperz.Count > 0)
                    {
                        for (int i = 0; i < sCustomChopperz.Count; i++)
                            sVehicles.Add(sCustomChopperz[i]);
                    }
                }
            }       //heli
            else if (iType == 4)
            {
                if (iList == 0)
                {
                    if (sCustomBoatsz.Count > 0)
                        sVehicles = sCustomBoatsz;
                    else
                        sVehicles.Add("JETMAX");
                }            //Custom
                else if (iList == 1)
                {
                    sVehicles.Add("AVISA");//<!-- Kraken Avisa -->
                    sVehicles.Add("DINGHY");//
                    sVehicles.Add("DINGHY2");//<!-- Dinghy 2-seater variant -->
                    sVehicles.Add("DINGHY3");//<!-- Dinghy heist variant -->
                    sVehicles.Add("DINGHY4");//<!-- Dinghy yacht variant -->
                    sVehicles.Add("DINGHY5");//<!-- Dinghy weaponized variant -->
                    sVehicles.Add("JETMAX");//
                    sVehicles.Add("LONGFIN");//<!-- Shitzu Longfin -->
                    sVehicles.Add("SUBMERSIBLE2");//<!-- Kraken -->
                    sVehicles.Add("MARQUIS");//
                    sVehicles.Add("PREDATOR");//
                    sVehicles.Add("PATROLBOAT");//<!-- Kurtz 31 Patrol Boat -->
                    sVehicles.Add("SEASHARK");//
                    sVehicles.Add("SEASHARK2");//<!-- Lifeguard Seashark -->
                    sVehicles.Add("SEASHARK3");//<!-- Seashark yacht variant -->
                    sVehicles.Add("SPEEDER");//
                    sVehicles.Add("SPEEDER2");//<!-- Speeder yacht variant -->
                    sVehicles.Add("SQUALO");//
                    sVehicles.Add("SUBMERSIBLE");//
                    sVehicles.Add("SUNTRAP");//
                    sVehicles.Add("TORO");//
                    sVehicles.Add("TORO2");//<!-- Toro yacht variant -->
                    sVehicles.Add("TROPIC");//
                    sVehicles.Add("TROPIC2");//<!-- Tropic yacht variant -->
                    sVehicles.Add("TUG");//
                }       //Boat
                else
                {
                    sVehicles.Add("APC");//
                    sVehicles.Add("BLAZER5");//<!-- Blazer Aqua -->
                    sVehicles.Add("TECHNICAL2");//<!-- Technical Aqua -->
                    sVehicles.Add("ZHABA");//
                    sVehicles.Add("STROMBERG");//
                    sVehicles.Add("TOREADOR");//
                }
                if (bAddCustom)
                {
                    if (sCustomBoatsz.Count > 0)
                    {
                        for (int i = 0; i < sCustomBoatsz.Count; i++)
                            sVehicles.Add(sCustomBoatsz[i]);
                    }
                }
            }       //sea
            else
            {
                if (iList == 0)
                {
                    if (sCustomPlanez.Count > 0)
                        sVehicles = sCustomCarz;
                    else
                        sVehicles.Add("BJXL");
                }            //Custom
                else if (iList == 1)
                {
                    sVehicles.Add("BLIMP");//<!-- Atomic Blimp -->
                    sVehicles.Add("BESRA");//
                    sVehicles.Add("BLIMP3");//
                    sVehicles.Add("CARGOPLANE");//
                    sVehicles.Add("CUBAN800");//
                    sVehicles.Add("DODO");//
                    sVehicles.Add("DUSTER");//
                    sVehicles.Add("HYDRA");//
                    sVehicles.Add("JET");//
                    sVehicles.Add("LUXOR");//
                    sVehicles.Add("LUXOR2");//<!-- Luxor Deluxe -->
                    sVehicles.Add("STUNT");//<!-- Mallard -->
                    sVehicles.Add("MAMMATUS");//
                    sVehicles.Add("MILJET");//
                    sVehicles.Add("NIMBUS");//
                    sVehicles.Add("SHAMAL");//
                    sVehicles.Add("TITAN");//
                    sVehicles.Add("VELUM");//
                    sVehicles.Add("VELUM2");//<!-- Velum 5-Seater -->
                    sVehicles.Add("VESTRA");//
                    sVehicles.Add("BLIMP2");//<!-- Xero Blimp -->
                }            //Custom
                else
                {
                    sVehicles.Add("ALPHAZ1");//  
                    sVehicles.Add("AVENGER");//
                    sVehicles.Add("STRIKEFORCE");//<!-- B-11 Strikeforce -->
                    sVehicles.Add("HOWARD");//<!-- Howard NX-25 -->                    
                    sVehicles.Add("STARLING");//<!-- LF-22 Starling -->
                    sVehicles.Add("MOGUL");//
                    sVehicles.Add("NOKOTA");//<!-- P-45 Nokota -->
                    sVehicles.Add("LAZER");//<!-- P-996 LAZER -->
                    sVehicles.Add("PYRO");//
                    sVehicles.Add("BOMBUSHKA");//<!-- RM-10 Bombushka -->
                    sVehicles.Add("ROGUE");//
                    sVehicles.Add("ALKONOST");//<!-- RO-86 Alkonost -->
                    sVehicles.Add("SEABREEZE");//
                    sVehicles.Add("TULA");//
                    sVehicles.Add("MICROLIGHT");//<!-- Ultralight -->
                    sVehicles.Add("MOLOTOK");//<!-- V-65 Molotok -->
                    sVehicles.Add("VOLATOL");//
                }       //Plane

                if (bAddCustom)
                {
                    if (sCustomPlanez.Count > 0)
                    {
                        for (int i = 0; i < sCustomPlanez.Count; i++)
                            sVehicles.Add(sCustomPlanez[i]);
                    }
                }
            }                       //Plane

            return sVehicles;
        }
        public string RanVehListX(int iVechList, int iType, bool bAddCustom)
        {
            string sCar = "";

            if (iType == 5)
            {
                List<string> MyCarz = SetRandVeh(iVechList);
                sCar = MyCarz[RandInt(0, MyCarz.Count - 1)];
            }
            else
            {
                List<string> MyCarz = VehicleListX(iVechList, iType, bAddCustom);
                sCar = MyCarz[RandInt(0, MyCarz.Count - 1)];
            }

            return sCar;
        }
        public List<string> SetRandVeh(int iVechList)
        {
            LogThis("RandVeh, iVechList == " + iVechList);

            List<string> sVehicles = new List<string>();

            if (iVechList == 1)
            {
                sVehicles.Add("KURUMA2"); //<!-- Kuruma (Armored) -->
                sVehicles.Add("DUKES2"); //<!-- Duke O'Death -->
                sVehicles.Add("LIMO2"); //<!-- Turreted Limo -->
                sVehicles.Add("CARACARA"); //
                sVehicles.Add("DUNE3"); //<!-- Dune FAV -->
                sVehicles.Add("DUNE4"); //<!-- Ramp Buggy mission variant -->
                sVehicles.Add("DUNE5"); //<!-- Ramp Buggy -->
                sVehicles.Add("INSURGENT"); //
                sVehicles.Add("INSURGENT2"); //<!-- Insurgent Pick-Up -->
                sVehicles.Add("INSURGENT3"); //<!-- Insurgent Pick-Up Custom -->
                sVehicles.Add("MARSHALL"); //
                sVehicles.Add("MONSTER"); //<!-- Liberator -->
                sVehicles.Add("MENACER"); //
                sVehicles.Add("NIGHTSHARK"); //
                sVehicles.Add("TECHNICAL"); //
                sVehicles.Add("TECHNICAL2"); //<!-- Technical Aqua -->
                sVehicles.Add("TECHNICAL3"); //<!-- Technical Custom -->
                sVehicles.Add("GUARDIAN"); //
                sVehicles.Add("MULE4"); //<!-- Mule Custom -->
                sVehicles.Add("POUNDER2"); //<!-- Pounder Custom -->
                sVehicles.Add("SPEEDO4"); //<!-- Speedo Custom -->
                sVehicles.Add("PHANTOM2"); //<!-- Phantom Wedge -->
                sVehicles.Add("STOCKADE"); //<!-- Securicar -->
                sVehicles.Add("BOXVILLE5"); //<!-- Armored Boxville -->
                sVehicles.Add("TERBYTE"); //
                sVehicles.Add("BRICKADE"); //
                sVehicles.Add("APC"); //
                sVehicles.Add("BARRAGE"); //
                sVehicles.Add("CHERNOBOG"); //
                sVehicles.Add("HALFTRACK"); //
                sVehicles.Add("RIOT2"); //<!-- RCV -->
                sVehicles.Add("VIGILANTE"); //
                sVehicles.Add("TAMPA3"); //<!-- Weaponized Tampa -->
                sVehicles.Add("RUINER2"); //<!-- Ruiner 2000 -->
                sVehicles.Add("STROMBERG"); //
                sVehicles.Add("DELUXO"); //
                sVehicles.Add("SCRAMJET"); //
                sVehicles.Add("ZR380"); //<!-- Apocalypse ZR380 -->
                sVehicles.Add("ZR3802"); //<!-- Future Shock ZR380 -->
                sVehicles.Add("ZR3803"); //<!-- Nightmare ZR380 -->
                sVehicles.Add("DOMINATOR4"); //<!-- Apocalypse Dominator -->
                sVehicles.Add("IMPALER2"); //<!-- Apocalypse Impaler -->
                sVehicles.Add("IMPERATOR"); //<!-- Apocalypse Imperator -->
                sVehicles.Add("SLAMVAN4"); //<!-- Apocalypse Slamvan -->
                sVehicles.Add("DOMINATOR5"); //<!-- Future Shock Dominator -->
                sVehicles.Add("IMPALER3"); //<!-- Future Shock Impaler -->
                sVehicles.Add("IMPERATOR2"); //<!-- Future Shock Imperator -->
                sVehicles.Add("SLAMVAN5"); //<!-- Future Shock Slamvan -->
                sVehicles.Add("DOMINATOR6"); //<!-- Nightmare Dominator -->
                sVehicles.Add("IMPALER4"); //<!-- Nightmare Impaler -->
                sVehicles.Add("IMPERATOR3"); //<!-- Nightmare Imperator -->
                sVehicles.Add("SLAMVAN6"); //<!-- Nightmare Slamvan -->
                sVehicles.Add("CERBERUS"); //<!-- Apocalypse Cerberus -->
                sVehicles.Add("CERBERUS2"); //<!-- Future Shock Cerberus -->
                sVehicles.Add("CERBERUS3"); //<!-- Nightmare Cerberus -->
                sVehicles.Add("ISSI4"); //<!-- Apocalypse Issi -->
                sVehicles.Add("ISSI5"); //<!-- Future Shock Issi -->
                sVehicles.Add("ISSI6"); //<!-- Nightmare Issi -->
                sVehicles.Add("BRUISER"); //<!-- Apocalypse Bruiser -->
                sVehicles.Add("BRUTUS"); //<!-- Apocalypse Brutus -->
                sVehicles.Add("MONSTER3"); //<!-- Apocalypse Sasquatch -->
                sVehicles.Add("BRUISER2"); //<!-- Future Shock Bruiser -->
                sVehicles.Add("BRUTUS2"); //<!-- Future Shock Brutus -->
                sVehicles.Add("MONSTER4"); //<!-- Future Shock Sasquatch -->
                sVehicles.Add("BRUISER3"); //<!-- Nightmare Bruiser -->
                sVehicles.Add("BRUTUS3"); //<!-- Nightmare Brutus -->
                sVehicles.Add("MONSTER5"); //<!-- Nightmare Sasquatch -->
                sVehicles.Add("SCARAB"); //<!-- Apocalypse Scarab -->
                sVehicles.Add("SCARAB2"); //<!-- Future Shock Scarab -->
                sVehicles.Add("SCARAB3"); //<!-- Nightmare Scarab -->
                sVehicles.Add("RHINO"); //
                sVehicles.Add("KHANJALI"); //<!-- TM-02 Khanjali -->
                sVehicles.Add("BLIMP"); //<!-- Atomic Blimp -->
                sVehicles.Add("JET"); //
                sVehicles.Add("STRIKEFORCE"); //<!-- B-11 Strikeforce -->
                sVehicles.Add("HYDRA"); //
                sVehicles.Add("STARLING"); //<!-- LF-22 Starling -->
                sVehicles.Add("LAZER"); //<!-- P-996 LAZER -->
                sVehicles.Add("PYRO"); //
                sVehicles.Add("ROGUE"); //
                sVehicles.Add("MOLOTOK"); //<!-- V-65 Molotok -->
                sVehicles.Add("alkonost"); //ROsVeh.Add("86 Alkonost -Planes
                sVehicles.Add("AKULA"); //
                sVehicles.Add("ANNIHILATOR"); //
                sVehicles.Add("BUZZARD"); //<!-- Buzzard Attack Chopper -->
                sVehicles.Add("HUNTER"); //<!-- FH-1 Hunter -->
                sVehicles.Add("SAVAGE"); //
                sVehicles.Add("VALKYRIE"); //
                sVehicles.Add("VALKYRIE2"); //<!-- Valkyrie MOD.0 -->
            }       //JohnyBrokenStuff
            else if (iVechList == 2)
            {
                sVehicles.Add("LIMO2"); //<!-- Turreted Limo -->
                sVehicles.Add("KURUMA2"); //<!-- Kuruma (Armored) -->
                sVehicles.Add("PARAGON2"); //<!-- Paragon R (Armored) -->
                sVehicles.Add("COGNOSCENTI2");//<!-- Cognoscenti (Armored) -->
                sVehicles.Add("COG552");//<!-- Cognoscenti 55 (Armored) -->
                sVehicles.Add("SCHAFTER6");//<!-- Schafter LWB (Armored) -->
                sVehicles.Add("SCHAFTER5");//<!-- Schafter V12 (Armored) -->
                sVehicles.Add("INSURGENT");//
                sVehicles.Add("INSURGENT2");//<!-- Insurgent Pick-Up -->
                sVehicles.Add("INSURGENT3");//<!-- Insurgent Pick-Up Custom -->
                sVehicles.Add("BALLER5");//<!-- Baller LE (Armored) -->
                sVehicles.Add("BALLER6");//<!-- Baller LE LWB (Armored) -->
                sVehicles.Add("XLS2");//<!-- XLS (Armored) -->
            }       //Armored
            else if (iVechList == 3)
            {
                sVehicles.Add("RHINO"); //
                sVehicles.Add("KHANJALI"); //<!-- TM-02 Khanjali -->
            }       //Tanks
            else if (iVechList == 4)
            {
                sVehicles.Add("AVARUS"); //
                sVehicles.Add("CHIMERA"); //
                sVehicles.Add("DAEMON"); //<!-- Daemon Lost MC variant -->
                sVehicles.Add("DIABLOUS"); //
                sVehicles.Add("GARGOYLE"); //
                sVehicles.Add("HEXER"); //
                sVehicles.Add("NIGHTBLADE"); //
                sVehicles.Add("WOLFSBANE"); //
                sVehicles.Add("ZOMBIEB"); //<!-- Zombie Chopper -->
                sVehicles.Add("SANCTUS"); //
                sVehicles.Add("ZOMBIEA"); //<!-- Zombie Bobber -->
            }       //LostMc
            else
            {
                sVehicles.Add("BJXL"); //
            }

            if (sVehicles.Count == 0)
                sVehicles.Add("BJXL");

            return sVehicles;
        }
        public Vehicle VehicleSpawn(string sVehModel, Vector3 VecLocal, float VecHead, bool bIsInvinc, bool bFreeze, bool bRouteto, bool bFlasher, int iMod, int iExtraMod, int iBlip, string sBlip, int iVehTrack, bool bModShop)
        {
            LogThis("VehicleSpawn, sVehModel == " + sVehModel + ", bIsInvinc == " + bIsInvinc + ", bFreeze == " + bFreeze + ", iMod == " + iMod + ", iExtraMod == " + iExtraMod);

            Vehicle BuildVehicle = null;
            int iVehHash = -1;

            if (sVehModel == "GetPlayersVeh")
                iVehHash = Game.Player.Character.CurrentVehicle.Model.Hash;
            else if (sVehModel == "" || !IsItARealVehicle(sVehModel))
                sVehModel = ImportsExpo_CarList(1);

            if (iVehHash == -1)
                iVehHash = Function.Call<int>(Hash.GET_HASH_KEY, sVehModel);

            if (Function.Call<bool>(Hash.IS_MODEL_IN_CDIMAGE, iVehHash) && Function.Call<bool>(Hash.IS_MODEL_A_VEHICLE, iVehHash))
            {
                Function.Call(Hash.REQUEST_MODEL, iVehHash);
                while (!Function.Call<bool>(Hash.HAS_MODEL_LOADED, iVehHash))
                    Wait(1);

                BuildVehicle = Function.Call<Vehicle>(Hash.CREATE_VEHICLE, iVehHash, VecLocal.X, VecLocal.Y, VecLocal.Z, VecHead, true, true);
                Function.Call(Hash.SET_MODEL_AS_NO_LONGER_NEEDED, iVehHash);

                if (iVehTrack > 0)
                {
                    if (iVehTrack == 1)
                        VehTrackin_01 = BuildVehicle;
                    else if (iVehTrack == 2)
                        VehTrackin_02 = BuildVehicle;
                    else if (iVehTrack == 3)
                        VehTrackin_03 = BuildVehicle;
                    else if (iVehTrack == 4)
                        VehTrackin_04 = BuildVehicle;
                    else if (iVehTrack == 5)
                        VehTrackin_05 = BuildVehicle;
                }
            }
            else
                BuildVehicle = null;

            if (BuildVehicle.Exists())
            {
                BuildVehicle.IsPersistent = true;
                BuildVehicle.IsInvincible = bIsInvinc;
                BuildVehicle.FreezePosition = bFreeze;
                VehicleList_01.Add(new Vehicle(BuildVehicle.Handle));
                Function.Call(Hash.SET_VEHICLE_MOD_KIT, BuildVehicle.Handle, 0);
                ReadWriteBlips(false, true, -1, -1, -1, -1, BuildVehicle.Handle, -1);

                if (iBlip > 0)
                    VehBlip(BuildVehicle, bFlasher, bRouteto, iBlip, sBlip);

                VehicleMods(BuildVehicle, iMod, iExtraMod, bModShop);
            }
            else
                BuildVehicle = null;

            return BuildVehicle;
        }
        public List<int> MaxModsRandExtras(Vehicle Vehic)
        {
            LogThis("MaxModsRandExtras");
            List<int> TheseMods = new List<int>();

            bool bMotoBike = Vehic.ClassType == VehicleClass.Motorcycles;

            for (int i = 0; i < 50; i++)
            {
                int iSpoilher = Function.Call<int>(Hash.GET_NUM_VEHICLE_MODS, Vehic.Handle, i);

                if (i == 11 || i == 12 || i == 13 || i == 15 || i == 16)
                {
                    iSpoilher -= 1;
                    Function.Call(Hash.SET_VEHICLE_MOD, Vehic.Handle, i, iSpoilher, true);
                    TheseMods.Add(iSpoilher);
                }
                else if (i == 18 || i == 22)
                {
                    iSpoilher = -1;
                    TheseMods.Add(iSpoilher);
                }
                else if (i == 24)
                {
                    iSpoilher = Function.Call<int>(Hash.GET_VEHICLE_MOD, Vehic.Handle, 23);
                    if (bMotoBike)
                    {
                        Function.Call(Hash.SET_VEHICLE_MOD, Vehic.Handle, i, iSpoilher, true);
                        TheseMods.Add(iSpoilher);
                    }
                    else
                        TheseMods.Add(-1);
                }
                else
                {
                    if (iSpoilher != 0)
                        iSpoilher = RandInt(0, iSpoilher - 1);

                    Function.Call(Hash.SET_VEHICLE_MOD, Vehic.Handle, i, RandInt(0, iSpoilher - 1), true);
                    TheseMods.Add(iSpoilher);
                }
            }
            if (Vehic.ClassType != VehicleClass.Cycles || Vehic.ClassType != VehicleClass.Helicopters || Vehic.ClassType != VehicleClass.Boats || Vehic.ClassType != VehicleClass.Planes)
            {
                Vehic.ToggleMod(VehicleToggleMod.XenonHeadlights, true);
                Vehic.ToggleMod(VehicleToggleMod.Turbo, true);
            }
            return TheseMods;
        }
        private void MaxModsListed(Vehicle Vehic, List<int> TheseMods)
        {
            LogThis("MaxModsListed");

            for (int i = 0; i < TheseMods.Count; i++)
            {
                if (TheseMods[i] != -1)
                    Function.Call(Hash.SET_VEHICLE_MOD, Vehic.Handle, i, TheseMods[i], true);
            }
            if (Vehic.ClassType != VehicleClass.Cycles || Vehic.ClassType != VehicleClass.Helicopters || Vehic.ClassType != VehicleClass.Boats || Vehic.ClassType != VehicleClass.Planes)
            {
                Vehic.ToggleMod(VehicleToggleMod.XenonHeadlights, true);
                Vehic.ToggleMod(VehicleToggleMod.Turbo, true);
            }
        }
        private void MaxOutAllModsNoWheels(Vehicle Vehic)
        {
            for (int i = 0; i < 50; i++)
            {
                int iSpoilher = Function.Call<int>(Hash.GET_NUM_VEHICLE_MODS, Vehic.Handle, i);

                if (i == 18 || i == 22 || i == 23 || i == 24)
                {

                }
                else
                {
                    iSpoilher -= 1;
                    Function.Call(Hash.SET_VEHICLE_MOD, Vehic.Handle, i, iSpoilher, true);
                }
            }
            if (Vehic.ClassType != VehicleClass.Cycles || Vehic.ClassType != VehicleClass.Helicopters || Vehic.ClassType != VehicleClass.Boats || Vehic.ClassType != VehicleClass.Planes)
            {
                Vehic.ToggleMod(VehicleToggleMod.XenonHeadlights, true);
                Vehic.ToggleMod(VehicleToggleMod.Turbo, true);
            }
        }
        private void ModExtras(Vehicle Vehic, List<int> VehExtras)
        {
            for (int i = 0; i < 15; i++)
            {
                if (Function.Call<bool>(Hash.DOES_EXTRA_EXIST, Vehic.Handle, i))
                    Function.Call(Hash.SET_VEHICLE_EXTRA, Vehic.Handle, i, true);
            }


            for (int i = 0; i < VehExtras.Count; i++)
            {
                if (Function.Call<bool>(Hash.DOES_EXTRA_EXIST, Vehic.Handle, VehExtras[i]))
                    Function.Call(Hash.SET_VEHICLE_EXTRA, Vehic.Handle, VehExtras[i], false);
            }
        }
        private void VehicleMods(Vehicle Vehic, int iMod, int iExtraMod, bool bModShop)
        {
            LogThis("VehicleMods, iMod == " + iMod + ", iExtraMod == " + iExtraMod);

            List<int> MyExtras = new List<int>();

            if (iMod == 1)
            {
                if (iExtraMod > 0)
                    MyExtras.Add(iExtraMod);

                ModExtras(Vehic, MyExtras);
            }         // Extras
            else if (iMod == 2)
            {
                if (iExtraMod == 1)
                {
                    Vehic.PrimaryColor = VehicleColor.MatteWhite;
                    Vehic.SecondaryColor = VehicleColor.MatteMidnightBlue;
                }
                else if (iExtraMod == 2)
                {
                    Vehic.Livery = 6;
                }
                else if (iExtraMod == 3)
                {
                    Vehic.Livery = 9;
                    Vehic.PrimaryColor = VehicleColor.MetallicBlazeRed;
                }
                else if (iExtraMod == 4)
                {
                    Vehic.PrimaryColor = VehicleColor.MetallicBlack;
                    Vehic.SecondaryColor = VehicleColor.MetallicUltraBlue;

                }
                else if (iExtraMod == 5)
                {
                    Vehic.CurrentBlip.Color = BlipColor.Blue;
                    ImportsExpo_FunPlates(Vehic);
                    iMissionSeq = 3;
                }
                else if (iExtraMod == 6)
                {
                    Vehic.CurrentBlip.Color = BlipColor.Red3;
                    NPCSpawn(RandNPC(RandInt(1, 35)), Vehic.Position, 0.00f, false, 120, 2, 1, Vehic, 0, false, 0, 0, "");
                    iMissionSeq = 3;
                }
                else if (iExtraMod == 7)
                {
                    //Vehic.CurrentBlip.Color = BlipColor.Red3;
                    //NPCSpawn(RandNPC(RandInt(1, 35)), Vehic.Position, 0.00f, false, 120, 0, 32, 1, Vehic, 0, false, 0, iExtraMod - 1, 0, "");
                    //iMissionSeq = 3;
                }           //notussed???
                else if (iExtraMod == 8)
                {
                    Vehic.Position = new Vector3(Vehic.Position.X, Vehic.Position.Y, Vehic.Position.Z + 50.00f);
                    NPCSpawn("", Vehic.Position, 0.00f, false, 170, 3, 0, Vehic, 0, false, 0, 1, "");
                    Vehic.CurrentBlip.Color = BlipColor.Red;
                    int iNoSeats = Vehic.PassengerSeats + 1;
                    while (iNoSeats > 1)
                    {
                        NPCSpawn("", Vehic.Position, Vehic.Heading, false, 180, 0, iNoSeats, Vehic, 2, false, 0, 1, "");
                        iNoSeats = iNoSeats - 1;
                    }
                }
                else if (iExtraMod == 9)
                {
                    Vehic.SetMod(VehicleMod.Roof, 1, true);
                }
                else if (iExtraMod == 10)
                {
                    Vehic.PrimaryColor = VehicleColor.MatteBlack;
                    Vehic.SecondaryColor = VehicleColor.MatteBlack;
                }
                else if (iExtraMod == 11)
                {
                    Vehic.PrimaryColor = VehicleColor.MetallicWhite;
                    Vehic.Alpha = 120;
                }
                else if (iExtraMod == 12)
                {
                    Vehic.Livery = -1;
                    Vehic.PrimaryColor = VehicleColor.MetallicBlazeRed;
                    Vehic.SecondaryColor = VehicleColor.MatteWhite;
                }
                else if (iExtraMod == 13)
                {
                    Vehic.Livery = -1;
                    Vehic.PrimaryColor = VehicleColor.MetallicDarkBlue;
                    Vehic.SecondaryColor = VehicleColor.MatteYellow;
                }
                else if (iExtraMod == 14)
                {
                    Vehic.LockStatus = VehicleLockStatus.Locked;
                    Vehic.NumberPlate = "DUPE";
                }
            }    // PaintJobs
            else if (iMod == 3)
            {
                if (iExtraMod == 1)
                {
                    Vehic.PrimaryColor = VehicleColor.MetallicWhite;
                    Vehic.SmashWindow(VehicleWindow.FrontLeftWindow);
                    Vehic.DirtLevel = 99.75f;
                    if (!bTestRun)
                        NPCSpawn(RandNPC(18), Vehic.Position, 0.00f, false, 0, 9, 1, Vehic, 2, false, 0, 0, "");
                    Vehic.CurrentBlip.Color = BlipColor.Yellow;
                }
                else if (iExtraMod == 2)
                    Vehic.LockStatus = VehicleLockStatus.Locked;
                else if (iExtraMod == 3)
                {
                    Vehic.PrimaryColor = VehicleColor.MetallicWhite;
                    Vehic.SmashWindow(VehicleWindow.FrontLeftWindow);
                    Vehic.DirtLevel = 99.75f;
                    NPCSpawn(RandNPC(18), Vehic.Position, 0.00f, false, 150, 0, 1, Vehic, 2, false, 0, 0, "");
                    Vehic.CurrentBlip.Color = BlipColor.Yellow;
                }
                else if (iExtraMod == 4)
                {

                }
                else if (iExtraMod == 5)
                {

                }//not used
                else if (iExtraMod == 6)
                {

                }//not used
                else if (iExtraMod == 7)
                {

                }
                else if (iExtraMod == 8)
                {
                    RemoveTargets();

                }

            }    // Random Mods
            else if (iMod == 4)
            {
                if (iExtraMod == 1)
                {
                    MyExtras.Add(1);
                    MyExtras.Add(2);
                    MyExtras.Add(4);
                    MyExtras.Add(5);
                    MyExtras.Add(10);
                }
                ModExtras(Vehic, MyExtras);
            }    // Trucking Sadler 
            else if (iMod == 5)
            {
                if (iExtraMod == 99)
                {
                    int iLive = RandInt(0, Function.Call<int>(Hash.GET_VEHICLE_LIVERY_COUNT, Vehic.Handle));

                    Function.Call(Hash.SET_VEHICLE_LIVERY, Vehic.Handle, iLive);
                }
                else
                {
                    if (iExtraMod <= Function.Call<int>(Hash.GET_VEHICLE_LIVERY_COUNT, Vehic))
                        Vehic.Livery = iExtraMod;
                }
            }    // Livery
            else if (iMod == 6)
            {
                Vehic.EngineRunning = true;
                Npc_01 = NPCSpawn(RandNPC(32), new Vector3(0.00f, 0.00f, 0.00f), 0.00f, false, 170, 4, 1, Vehic, 0, false, 0, 0, "");
                Function.Call(Hash._0x7BEB0C7A235F6F3B, Vehic.Handle, 0);
            }    // Add a NPCPiolot -- Job 6 area 4
            else if (iMod == 7)
            {
                Pilot04_ImportBob(Vehic);
            }    // Attach to cargobob -- Job 6 area 4
            else if (iMod == 8)
            {
                if (iExtraMod == 1)
                {
                    int iNoSeats = Vehic.PassengerSeats + 1;
                    int iRando = RandInt(1, 10);
                    while (iNoSeats > 0)
                    {
                        NPCSpawn("", Vehic.Position, Vehic.Heading, false, 220, 14, iNoSeats, Vehic, 2, false, 0, 1, "");
                        iNoSeats -= 1;
                    }
                }
                else if (iExtraMod == 2)
                {
                    int iNoSeats = Vehic.PassengerSeats + 1;
                    while (iNoSeats > 0)
                    {
                        NPCSpawn(RandNPC(4), Vehic.Position, Vehic.Heading, false, 150, 14, iNoSeats, Vehic, 2, false, 0, 0, "");
                        iNoSeats -= 1;
                    }
                }
                else if (iExtraMod == 3)
                {
                    int iNoSeats = Vehic.PassengerSeats + 1;
                    int iRando = RandInt(1, 10);
                    while (iNoSeats > 0)
                    {
                        Ped Pedro = NPCSpawn(RandNPC(iRando), Vehic.Position, Vehic.Heading, false, 190, 15, iNoSeats, Vehic, 2, true, 0, 0, "");
                        Pedro.RelationshipGroup = GP_BNPCs;

                        if (iNoSeats == 1)
                            Follow_AddToMuilti(Pedro, "", Vehic.CurrentBlip, Vehic);
                        else
                            Follow_AddToMuilti(Pedro, "", null, null);

                        iNoSeats -= 1;
                    }
                }
                else if (iExtraMod == 4)
                {
                    int iNoSeats = Vehic.PassengerSeats + 1;
                    while (iNoSeats > 0)
                    {
                        NPCSpawn(RandNPC(4), Vehic.Position, Vehic.Heading, false, 150, 17, iNoSeats, Vehic, 2, false, 0, 0, "");
                        iNoSeats -= 1;
                    }
                }
                else if (iExtraMod == 5)
                {
                    int iNoSeats = Vehic.PassengerSeats + 1;
                    int iRando = RandInt(1, 10);
                    while (iNoSeats > 0)
                    {
                        NPCSpawn(RandNPC(iRando), Vehic.Position, Vehic.Heading, false, 180, 14, iNoSeats, Vehic, 2, false, 1, 0, "");
                        iNoSeats -= 1;
                    }
                }
                else if (iExtraMod == 9)
                {
                    int iNoSeats = Vehic.PassengerSeats + 1;
                    int iRando = RandInt(1, 10);
                    while (iNoSeats > 0)
                    {
                        Ped Pedro = NPCSpawn(RandNPC(iRando), Vehic.Position, Vehic.Heading, false, 150, 5, iNoSeats, Vehic, 2, false, 0, 0, "");
                        Pedro.RelationshipGroup = GP_BNPCs;

                        if (iNoSeats == 1)
                            Follow_AddToMuilti(Pedro, "", Vehic.CurrentBlip, Vehic);
                        else
                            Follow_AddToMuilti(Pedro, "", null, null);              

                        iNoSeats -= 1;
                    }
                }
                else
                {
                    int iNoSeats = Vehic.PassengerSeats + 1;
                    int iRando = RandInt(1, 10);
                    while (iNoSeats > 0)
                    {
                        NPCSpawn(RandNPC(iRando), Vehic.Position, Vehic.Heading, false, 150, 0, iNoSeats, Vehic, 2, false, 0, 0, "");
                        iNoSeats = iNoSeats - 1;
                    }
                }

                VehicleMods(Vehic, 2, 10, false);
            }    // Player Attackers..
            else if (iMod == 9)
            {
                Function.Call(Hash.SET_BOAT_ANCHOR, Vehic.Handle, true);
                if (iExtraMod > 9)
                {
                    int iExtras = 14;
                    while (iExtras > 0)
                    {
                        if (Vehic.ExtraExists(iExtras))
                            Vehic.ToggleExtra(iExtras, true);
                        iExtras = iExtras - 1;
                    }
                    Vehic.SecondaryColor = VehicleColor.BrushedBlackSteel;
                    if (iExtraMod == 10)
                        Vehic.PrimaryColor = VehicleColor.MatteDarkRed;
                    else if (iExtraMod == 11)
                        Vehic.PrimaryColor = VehicleColor.MatteYellow;
                    else if (iExtraMod == 12)
                        Vehic.PrimaryColor = VehicleColor.MatteLimeGreen;
                    else if (iExtraMod == 13)
                        Vehic.PrimaryColor = VehicleColor.MatteBlue;
                }
            }    // BoatAnchor
            else if (iMod == 10)
            {
                Vehic.MaxHealth = 3000;
                Vehic.Health = 3000;
                Npc_01 = NPCSpawn("s_m_m_security_01", Vehic.Position, Vehic.Heading, true, 180, 6, 2, Vehic, 2, false, 0, 0, "");
            }   // Security Van
            else if (iMod == 11)
            {
                Function.Call(Hash.SET_BOAT_ANCHOR, Vehic.Handle, true);
                Npc_01 = NPCSpawn("s_m_m_scientist_01", Vehic.Position, Vehic.Heading, false, 130, 7, 2, Vehic, 0, false, 0, 0, "");
                VehicleMods(Vehic, 1, iExtraMod, false);
            }   // Water Boat -- Area 3
            else if (iMod == 12)
            {
                Vehic.MaxHealth = 4000;
                Vehic.Health = 4000;
                Vehic.EngineRunning = true;
                Npc_01 = NPCSpawn(RandNPC(32), new Vector3(0.00f, 0.00f, 0.00f), 0.00f, false, 140, 8, 1, Vehic, 0, false, 0, 0, "");
            }   // Water Boat -- Area 1 Cargobob
            else if (iMod == 13)
            {
                MaxOutAllModsNoWheels(Vehic);
                Function.Call(Hash._SET_VEHICLE_LANDING_GEAR, Vehic.Handle, 3);
                Ped Dog = NPCSpawn(RandNPC(32), Vector3.Zero, 0.00f, false, 190, 9, 1, Vehic, 0, false, 0, 0, "");
                PedMultiTask Fighter = AddAMultiped();
                Fighter.MyPed = Dog;
                Fighter.MyVehicle = Vehic;
                Fighter.MyBlip = Vehic.CurrentBlip;
                Fighter.MyTask_01 = 1;
                MultiPed.Add(Fighter);
            }   // Dogfighers
            else if (iMod == 14)
            {
                Vehic.Explode();
            }   // Blow up Veh
            else if (iMod == 15)
            {
                Vehic.EngineRunning = true;
                NPCSpawn(RandNPC(33), Vehic.Position, Vehic.Heading, false, 180, 10, 1, Vehic, 2, false, 0, 0, "");
                Vehic.CurrentBlip.Color = BlipColor.Red;

            }   // Water Boat -- Area 1 Jetski Attack 
            else if (iMod == 16)
            {
                if (iExtraMod == 1)
                    Vehic.AttachTo(VehTrackin_02, VehTrackin_02.GetBoneIndex("bodyshell"), new Vector3(0.00f, 0.70f, 1.01f), new Vector3(-92.09f, 0.00f, 0.00f));
                else if (iExtraMod == 2)
                    Vehic.AttachTo(VehTrackin_02, VehTrackin_02.GetBoneIndex("bodyshell"), new Vector3(0.00f, 0.00f, 1.01f), new Vector3(0.00f, 0.00f, 0.00f));
                else if (iExtraMod == 3)
                    Vehic.AttachTo(VehTrackin_02, VehTrackin_02.GetBoneIndex("bodyshell"), new Vector3(0.00f, 0.00f, 1.10f), new Vector3(0.00f, 0.00f, 0.00f));
                else if (iExtraMod == 4)
                    Vehic.AttachTo(VehTrackin_02, VehTrackin_02.GetBoneIndex("bodyshell"), new Vector3(0.00f, 0.00f, 1.51f), new Vector3(0.00f, 0.00f, 0.00f));
                else if (iExtraMod == 5)
                    Vehic.AttachTo(VehTrackin_02, VehTrackin_02.GetBoneIndex("bodyshell"), new Vector3(-0.40f, 0.00f, 2.70f), new Vector3(0.00f, 0.00f, -90.00f));
            }   // TruckingAttachments
            else if (iMod == 17)
            {
                Vehic.Alpha = 120;
                Function.Call(Hash.SET_VEHICLE_ON_GROUND_PROPERLY, Vehic.Handle);
            }   // BuildVeh
            else if (iMod == 18)
            {
                VehicleWarp(Vehic, Game.Player.Character, 1);
            }   // PlayerToVeh
            else if (iMod == 19)
            {
                if (FindRandom(91, 1, 10) < 9)
                    Npc_01 = NPCSpawn(RandNPC(13), Vehic.Position, Vehic.Heading, false, 180, 11, 1, Vehic, 2, false, 0, 0, "");
                else
                    Npc_01 = NPCSpawn("", Vehic.Position, Vehic.Heading, false, 180, 11, 1, Vehic, 2, false, 0, 1, "");
            }   // Casino parking
            else if (iMod == 20)
            {
                Ped TaxMan = NPCSpawn(RandNPC(iExtraMod), Vehic.Position, 0.00f, false, 120, 5, 1, Vehic, 2, false, 0, 0, "");
                PedMultiTask Taxi = AddAMultiped();
                Taxi.MyPed = TaxMan;
                Taxi.MyVehicle = Vehic;
                Taxi.MyBlip = Vehic.CurrentBlip;
                MultiPed.Add(Taxi);
                VehBlip(Vehic, true, false, 1, "");
            }   // Crazy Taxies
            else if (iMod == 21)
            {
                if (iList_01[0] == 2 || iList_01[0] == 6)
                    VehicleMods(Vehic, 9, 0, false);              
            }   // Raceing Carz
            else if (iMod == 22)
            {
                if (iList_01[0] == 2 || iList_01[0] == 6)
                    VehicleMods(Vehic, 9, 0, false);

                Vehic.EngineRunning = true;
                NPCSpawn(RandNPC(iList_01[7]), Vehic.Position, 0.00f, false, 220, 1, 1, Vehic, 0, true, 3, 0, MyLang.Maptext[109]);
            }   // Raceing Drivers
            else if (iMod == 23)
            {
                Vehic.IsVisible = false;
                Function.Call(Hash.SET_BOAT_ANCHOR, Vehic.Handle, true);
                Prop_01.AttachTo(Vehic, Vehic.GetBoneIndex("bodyshell"), new Vector3(0.00f, 0.00f, 0.00f), new Vector3(0.00f, 0.00f, -180.00f));
                Prop_01.FreezePosition = false;
                Vehic.FreezePosition = false;
            }   // attach fake boat to barge
            else if (iMod == 24)
            {
                Vehic.Livery = 0;
                Vehic.PrimaryColor = VehicleColor.MetallicMarinerBlue;
                Vehic.SecondaryColor = VehicleColor.MetallicFrostWhite;
            }   // Heiltours
            else if (iMod == 25)
            {
                int iRando = RandInt(1, 10);
                NPCSpawn(RandNPC(iRando), Vehic.Position, Vehic.Heading, false, 180, 2, 1, Vehic, 2, false, 1, 0, "");
            }   // Drive Around
            else if (iMod == 26)
            {
                Vehic.OpenDoor(VehicleDoor.Trunk, false, true);
            }   // Cargo Truck tale
            else if (iMod == 27)
            {
                Function.Call(Hash.SET_BOAT_ANCHOR, Vehic.Handle, true);
                Vehic.PrimaryColor = VehicleColor.MetallicNauticalBlue;
            }   // Blue Sub
            else if (iMod == 28)
            {
                Npc_01 = NPCSpawn(RandNPC(32), Vehic.Position, 0.00f, false, 140, 12, 1, Vehic, 0, false, 0, 0, "");
                NPCSpawn("ig_juanstrickler", Vehic.Position, 0.00f, false, 140, 12, 4, Vehic, 0, false, 0, 0, "");
            }   // thief heli
            else if (iMod == 29)
            {

            }   // Empty
            else if (iMod == 30)
            {
                Function.Call(Hash._SET_VEHICLE_LANDING_GEAR, Vehic.Handle, 3);

                Prop Bench1 = BuildProp("prop_fib_3b_bench", Vehic.Position, Vector3.Zero, false, false);
                Bench1.AttachTo(Vehic, 0, new Vector3(1.33f, -6.19f, -0.57f), new Vector3(0.04f, 0.00f, 270.00f));

                Prop Bench2 = BuildProp("prop_fib_3b_bench", Vehic.Position, Vector3.Zero, false, false);
                Bench2.AttachTo(Vehic, 0, new Vector3(-1.33f, -2.70f, -0.57f), new Vector3(0.04f, 0.00f, 90.00f));

                Prop Bench3 = BuildProp("prop_fib_3b_bench", Vehic.Position, Vector3.Zero, false, false);
                Bench3.AttachTo(Vehic, 0, new Vector3(-1.33f, -6.19f, -0.57f), new Vector3(0.04f, 0.00f, 90.00f));

                Prop Bench4 = BuildProp("prop_fib_3b_bench", Vehic.Position, Vector3.Zero, false, false);
                Bench4.AttachTo(Vehic, 0, new Vector3(1.33f, -2.70f, -0.57f), new Vector3(0.04f, 0.00f, 270.00f));

                NPCSpawn(RandNPC(32), Vector3.Zero, 0.00f, false, 190, 13, 1, Vehic, 0, false, 0, 0, "");
            }   // airjump plane
            else if (iMod == 31)
            {
                Vehic.LockStatus = VehicleLockStatus.Locked;
            }   // Door Lock
            else if (iMod == 32)
            {
                VehBlip(Vehic, false, false, 39, MyLang.Maptext[21]);
                Vehic.CurrentBlip.Alpha = 100;
            }
            if (bModShop)
                MaxModsRandExtras(Vehic);
        }
        private void GhostVehicle(Vehicle Vhick, Vector3 Vpos, float fHeads)
        {
            LogThis("GhostVehicle");

            Vhick.Position = Vpos;
            Vhick.Heading = fHeads;
            while (!Vhick.IsOnAllWheels)
            {
                StayOnGround(Vhick);
                Script.Wait(100);
            }
            Vhick.FreezePosition = true;
            Vhick.HasCollision = false;
            Vhick.Alpha = 120;
            Vhick.Heading = fHeads;
            Vhick.LockStatus = VehicleLockStatus.Locked;
        }
        private void StayOnGround(Vehicle Vhick)
        {
            LogThis("StayOnGround");

            Function.Call<bool>(Hash.SET_VEHICLE_ON_GROUND_PROPERLY, Vhick.Handle);
        }
        public Prop BuildProp(string sProper, Vector3 Position, Vector3 Rotation, bool bFreeze, bool bSetLOD)
        {
            LogThis("BuildProp, sProper == " + sProper + ", bFreeze == " + bFreeze);

            Prop BuildPop = null;

            int iPropHash = Function.Call<int>(Hash.GET_HASH_KEY, sProper);

            if (!Function.Call<bool>(Hash.IS_MODEL_IN_CDIMAGE, iPropHash))
            {
                LogThis("BuildProp, spropMissing...");
                iPropHash = Function.Call<int>(Hash.GET_HASH_KEY, "zprop_bin_01a_old");
            }

            Function.Call(Hash.REQUEST_MODEL, iPropHash);
            while (!Function.Call<bool>(Hash.HAS_MODEL_LOADED, iPropHash))
                Script.Wait(1);

            int iProps = Function.Call<int>(Hash.CREATE_OBJECT, iPropHash, Position.X, Position.Y, Position.Z, false, true, false);
            BuildPop = new Prop(iProps);

            if (BuildPop.Exists())
            {
                BuildPop.Rotation = Rotation;
                BuildPop.IsPersistent = true;
                BuildPop.HasCollision = true;
                BuildPop.FreezePosition = bFreeze;

                if (bSetLOD)
                    Function.Call(Hash.SET_ENTITY_LOD_DIST, BuildPop.Handle, 1500);

                PropList_01.Add(new Prop(BuildPop.Handle));

                ReadWriteBlips(false, true, -1, -1, -1, BuildPop.Handle, -1, -1);
            }
            else
                BuildPop = null;

            Function.Call(Hash.SET_MODEL_AS_NO_LONGER_NEEDED, iPropHash);


            return BuildPop;
        }
        public class FindVeh
        {
            public float MinRadi { get; set; }
            public float MaxRadi { get; set; }
            public string VehModel { get; set; }
            public bool IsInvinc { get; set; }
            public bool Freeze { get; set; }
            public bool Routeto { get; set; }
            public bool Flasher { get; set; }
            public int Mod { get; set; }
            public int ExtraMod { get; set; }
            public int BlipI { get; set; }
            public string BlipS { get; set; }
            public int VehTrack { get; set; }
            public bool ModShop { get; set; }
            public bool Driver { get; set; }
        }
        public class PositionDirect
        {
            public Vector3 Pos { get; set; }
            public float Dir { get; set; }
        } 
        public PositionDirect GetVehPos(float fMinRadi, float fMaxRadi, bool bDriver)
        {
            iFindingTime = Game.GameTime + 1000;
            Vector3 vArea = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 15);
            PositionDirect MyPosDir = null;
            Vehicle[] CarSpot = World.GetNearbyVehicles(vArea, fMaxRadi);
            for (int i = 0; i < CarSpot.Count(); i++)
            {
                if (VehExists(CarSpot, i))
                {
                    Vehicle Veh = CarSpot[i];
                    if (bDriver)
                    {
                        if (Veh.IsPersistent == false && Veh.Position.DistanceTo(Game.Player.Character.Position) > fMinRadi && Veh.ClassType != VehicleClass.Boats && Veh.ClassType != VehicleClass.Cycles && Veh.ClassType != VehicleClass.Helicopters && Veh.ClassType != VehicleClass.Planes && Veh.ClassType != VehicleClass.Trains && Veh != Game.Player.Character.CurrentVehicle && !Veh.IsOnScreen && Veh.EngineRunning)
                        {
                            MyPosDir = new PositionDirect
                            {
                                Pos = Veh.Position,
                                Dir = Veh.Heading
                            };
                            Veh.Delete();
                            break;
                        }
                    }
                    else
                    {
                        if (Veh.IsPersistent == false && Veh.Position.DistanceTo(Game.Player.Character.Position) > fMinRadi && Veh.ClassType != VehicleClass.Boats && Veh.ClassType != VehicleClass.Cycles && Veh.ClassType != VehicleClass.Helicopters && Veh.ClassType != VehicleClass.Planes && Veh.ClassType != VehicleClass.Trains && Veh != Game.Player.Character.CurrentVehicle && !Veh.IsOnScreen && !Veh.EngineRunning)
                        {
                            MyPosDir = new PositionDirect
                            {
                                Pos = Veh.Position,
                                Dir = Veh.Heading
                            };
                            Veh.Delete();
                            break;
                        }
                    }

                }
            }
               
            return MyPosDir;
        }
        private void VehRelpace(PositionDirect MyPos, FindVeh MyVeh)
        {
            VehicleSpawn(MyVeh.VehModel, MyPos.Pos, MyPos.Dir, MyVeh.IsInvinc, MyVeh.Freeze, MyVeh.Routeto, MyVeh.Flasher, MyVeh.Mod, MyVeh.ExtraMod, MyVeh.BlipI, MyVeh.BlipS, MyVeh.VehTrack, MyVeh.ModShop);
        }
        private void SearchVeh(float fMin, float fMax, string sVehModel, bool bIsInvinc, bool bFreeze, bool bRouteto, bool bFlasher, int iMod, int iExtraMod, int iBlip, string sBlip, int iVehTrack, bool bModShop, bool bDriver)
        {
            FindVeh MyFinda = new FindVeh
            {
                MinRadi = fMin,
                MaxRadi = fMax,
                VehModel = sVehModel,
                IsInvinc = bIsInvinc,
                Freeze = bFreeze,
                Routeto = bRouteto,
                Flasher = bFlasher,
                Mod = iMod,
                ExtraMod = iExtraMod,
                BlipI = iBlip,
                BlipS = sBlip,
                VehTrack = iVehTrack,
                ModShop = bModShop,
                Driver = bDriver
            };
            MakeCarz.Add(MyFinda);
        }
        public class FindPed
        {
            public float MinRadi { get; set; }
            public float MaxRadi { get; set; }
            public string PedIs { get; set; }
            public bool Armor { get; set; }
            public int Heal { get; set; }
            public int Task { get; set; }
            public int Gun { get; set; }
            public bool BlipIs { get; set; }
            public int BlipCol { get; set; }
            public int Free { get; set; }
            public string NameIs { get; set; }
        }
        public PositionDirect GetPedPos(float fMinRadi, float fMaxRadi)
        {
            iFindingTime = Game.GameTime + 1000;
            Vector3 vArea = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 15);
            PositionDirect MyPosDir = null;
            Ped[] MadPeds = World.GetNearbyPeds(vArea, fMaxRadi);
            for (int i = 0; i < MadPeds.Count(); i++)
            {
                if (PedExists(MadPeds, i))
                {
                    Ped MadP = MadPeds[i];

                    if (!MadP.IsOnScreen && !MadP.IsInVehicle() && Function.Call<int>(Hash.GET_PED_TYPE, MadP.Handle) != 28 && MadP != Game.Player.Character && !MadP.IsPersistent && MadP.Position.DistanceTo(Game.Player.Character.Position) > fMinRadi)
                    {
                        MyPosDir = new PositionDirect
                        {
                            Pos = MadP.Position,
                            Dir = MadP.Heading
                        };
                        MadP.Delete();
                        break;
                    }
                }
            }

            return MyPosDir;
        }
        private void PedRelpace(PositionDirect MyPos, FindPed MyPeds)
        {
            NPCSpawn(MyPeds.PedIs, MyPos.Pos, MyPos.Dir, MyPeds.Armor, MyPeds.Heal, MyPeds.Task, 0, null, MyPeds.Gun, MyPeds.BlipIs, MyPeds.BlipCol, MyPeds.Free, MyPeds.NameIs);
        }
        private void SearchPed(float fMin, float fMax, string sPed, bool bArmor, int iHeal, int iTask, int iSeat, Vehicle vMyCar, int iGun, bool bBlip, int iBlipCol, int iFree, string sName)
        {
            FindPed MyFinda = new FindPed
            {
                MinRadi = fMin,
                MaxRadi = fMax,
                PedIs = sPed,
                Armor = bArmor,
                Heal = iHeal,
                Task = iTask,
                Gun = iGun,
                BlipIs = bBlip,
                BlipCol = iBlipCol,
                Free = iFree,
                NameIs = sName,
            };
            MakeFrenz.Add(MyFinda);
        }
        private void UseAmbPed(Vector3 vZone, float fMax, int iCountEm, int iTask, string sName)
        {
            LogThis("UseAmbPed, fMax == " + fMax + ", iCountEm == " + iCountEm + ", iTask == " + iTask + ", sName == " + sName);
            iFindingTime = Game.GameTime + 1000;
            Ped[] MadPeds = World.GetNearbyPeds(vZone, fMax);
            if (iCountEm == -1)
                iCountEm = MadPeds.Count();
            for (int i = 0; i < MadPeds.Count(); i++)
            {
                if (PedExists(MadPeds, i) && iCountEm > 0)
                {
                    Ped MadP = MadPeds[i];
                    if (!MadP.IsInVehicle() && Function.Call<int>(Hash.GET_PED_TYPE, MadP.Handle) != 28 && MadP != Game.Player.Character && !MadP.IsPersistent)
                    {
                        if (iTask == 1)
                        {
                            MadP.IsPersistent = true;
                            Npc_01 = MadP;
                            MadP.Task.ClearAllImmediately();
                            Function.Call(Hash.SET_PED_FLEE_ATTRIBUTES, MadP.Handle, 0, true);
                            Function.Call(Hash.TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS, MadP.Handle, true);
                            PedList_01.Add(new Ped(MadP.Handle));
                        }
                        else if (iTask == 2)
                        {
                            MadP.Task.FleeFrom(Game.Player.Character);
                        }
                        else if (iTask == 3)
                        {
                            MadP.IsPersistent = true;
                            AttackThePlayer(MadP, true);
                            PedList_01.Add(new Ped(MadP.Handle));
                            PedMultiTask MyMuilts = AddAMultiped();
                            MyMuilts.MyPed = MadP;
                            MultiPed.Add(MyMuilts);
                        }
                        else if (iTask == 4)
                        {
                            MadP.IsPersistent = true;
                            BbBomb_BombAtractor(MadP);
                            PedList_01.Add(new Ped(MadP.Handle));
                        }
                        iCountEm -= 1;
                    }
                }
                else
                    break;
            }
            if (iCountEm > 0)
            {
                bMissingPed = true;
                SearchPed(0.1f, 95.00f, "", false, 1, iTask, 0, null, 1, false, 1, iCountEm, sName);
            }
        }
        private void GameOver(bool bFail, string sPass, bool bAltEnd, int iCashOut)
        {
            LogThis("GameOver, bFail == " + bFail + ", bAltEnd == " + bAltEnd + ", iCashOut == " + iCashOut);

            bJobLoaded = false;
            MakeCarz.Clear();
            MakeFrenz.Clear();
            bMissingPed = false;
            iMissionSeq = 0;
            RemoveTargets();
            CleanMultiPed(true, false);
            CleanCams();
            CleanUpPeds();
            CleanUpProps();
            CleanUpVehicles();
            CleanFakeBlips();
            CleanUpCheckPoints();

            PostMess();

            Game.Player.WantedLevel = 0;

            if (MySettings.EnemyStrength)
                Function.Call(Hash.SET_AI_WEAPON_DAMAGE_MODIFIER, 1.00f);

            string sEndMess = "";

            if (iCashOut != 0)
                sEndMess = "" + sPass + "" + MyLang.Othertext[53] + "" + ShowComs(iCashOut, true, true);

            Game.FadeScreenIn(100);

            if (bTestRun)
            {
                if (bFail)
                {
                    iBuildingUp = 8;
                    bTestRun = false;
                    bBuildMode = true;
                    HelperBarBuiler(11, false);
                }
                else
                {
                    bTestRun = false;
                    bBuildMode = true;
                    HelperBarBuiler(10, false);
                }
            }
            else
                BigMessLoad(bFail, sEndMess, bAltEnd, iCashOut);

            if (bOnlineStuffLoaded && !MySettings.PreLoadOnline)
                LoadOnlineIps(false);

            if (bPlayerAtt)
            {
                Npc_01 = null;
                while (Game.Player.Character.IsInVehicle())
                    Script.Wait(1000);
                SearchPed(1.00f, 75.00f, "", false, 220, 36, 0, null, 0, true, 1, 1, "");

                while (MakeFrenz.Count > 0)
                {
                    if (FindMe == null)
                    {
                        if (iFindingTime < Game.GameTime)
                            FindMe = GetPedPos(MakeFrenz[0].MinRadi, MakeFrenz[0].MaxRadi);
                    }
                    else
                    {
                        PedRelpace(FindMe, MakeFrenz[0]);
                        MakeFrenz.RemoveAt(0);
                        FindMe = null;
                    }
                    Script.Wait(1);
                }
            }
        }
        private void PlayerAtackTracker()
        {
            while (bPlayerAtt)
            {
                if (Npc_01 != null)
                {
                    if (Game.Player.Character.Position.DistanceTo(Npc_01.Position) > 250.00f || Npc_01.IsDead || Game.Player.Character.IsDead)
                    {
                        Npc_01 = null;
                        bPlayerAtt = false;
                        CleanUpPeds();
                    }
                }
                Script.Wait(1000);
            }
        }
        private void BigMessLoad(bool bFail, string sMessyG, bool bAltEnd, int iCashOut)
        {
            LogThis("BigMessLoad, bFail == " + bFail + ", bAltEnd == " + bAltEnd + ", iCashOut == " + iCashOut);

            iScale = Function.Call<int>((Hash)0x11FE353CF9733E6F, "MIDSIZED_MESSAGE");
            Script.Wait(1500);
            while (!Function.Call<bool>(Hash.HAS_SCALEFORM_MOVIE_LOADED, iScale))
                Script.Wait(1);

            if (bAltEnd)
            {
                if (bGOURANGA)
                    BigMessTime("GOURANGA!", "", 15, false, iCashOut);
                else if (bAmberAntz)
                    BigMessTime(MyLang.Othertext[54], sMessyG, 6, true, iCashOut);

                bGOURANGA = false;
                bAmberAntz = false;
            }
            else
            {
                if (bFail)
                    BigMessTime(MyLang.Othertext[55], sMessyG, 6, false, iCashOut);
                else
                    BigMessTime(MyLang.Othertext[54], sMessyG, 12, true, iCashOut);
            }

            iWait4Sec = Game.GameTime + 8000;

            while (iWait4Sec > Game.GameTime)
            {
                Function.Call(Hash.DRAW_SCALEFORM_MOVIE_FULLSCREEN, iScale, 255, 255, 255, 255);
                Script.Wait(1);
            }

            if (bPacBouns)
            {
                ControlSelect(5, false);
                iWait4Sec = Game.GameTime + 7000;
            }

            unsafe
            {
                int SF = iScale;
                Function.Call(Hash.SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED, &SF);
            }
        }
        private void BigMessTime(string MainTitle, string SubTitle, int iColour, bool bCash, int iCashOut)
        {
            LogThis("BigMessTime, bCash == " + bCash + ", iCashOut == " + iCashOut);

            Function.Call(Hash._START_SCREEN_EFFECT, "SuccessNeutral", 8500, false);
            Function.Call(Hash._PUSH_SCALEFORM_MOVIE_FUNCTION, iScale, "SHOW_SHARD_MIDSIZED_MESSAGE");
            Function.Call(Hash._BEGIN_TEXT_COMPONENT, "STRING");
            Function.Call((Hash)0x6C188BE134E074AA, MainTitle);
            Function.Call(Hash._END_TEXT_COMPONENT);
            Function.Call(Hash._BEGIN_TEXT_COMPONENT, "STRING");
            Function.Call((Hash)0x6C188BE134E074AA, SubTitle);
            Function.Call(Hash._END_TEXT_COMPONENT);
            Function.Call(Hash._PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT, iColour);// color 0,1=white 2=black 3=grey 6,7,8=red 9,10,11=blue 12,13,14=yellow 15,16,17=orange 18,19,20=green 21,22,23=purple 
            Function.Call(Hash._POP_SCALEFORM_MOVIE_FUNCTION_VOID);
            if (bCash)
                YourCoinPopUp(iCashOut, 1, "NSPM Pay");
        }
        private void PostMess()
        {
            LogThis("PostMess");

            iMissionSeq = 0;
            iMissionVar_01 = 0;
            iMissionVar_02 = 0;
            iMissionVar_03 = 0;
            iMissionVar_04 = 0;
            iMishText = -1;
            iMishAltT = -1;
            iRepMisssion = 0;
            iLookForPB = 0;
            iCashBouns = 0;
            iCashReward = 0;
            iCrash4Cash = 0;
            iCurrentLap = 1;
            iLocationX = 0;
            iJobType = 0;

            VehTrackin_01 = null;
            VehTrackin_02 = null;
            VehTrackin_03 = null;
            VehTrackin_04 = null;
            VehTrackin_05 = null;

            Prop_01 = null;
            Prop_02 = null;
            Prop_03 = null;

            Npc_01 = null;
            Npc_02 = null;
            Npc_03 = null;

            Pick_01 = null;

            vFuMiss = Vector3.Zero;
            vLanLoc = Vector3.Zero;

            VTBTimerPool.Remove(BtSlideBar);
            VTBTimerPool.Remove(ttTextBar_01);
            VTBTimerPool.Remove(ttTextBar_02);
            VTBTimerPool.Remove(ttTextBar_03);
            VTBTimerPool.Remove(ttTextBar_04);

            bMoreFubar = false;
            bReFire = false;

            bPlayingNewMissions = false;
            bOnTheJob = false;
            bLookingForPB = true;

            Function.Call(Hash.SET_VEHICLE_POPULATION_BUDGET, 3);
            Function.Call(Hash.SET_PED_POPULATION_BUDGET, 3);
            Function.Call(Hash.SET_FAR_DRAW_VEHICLES, true);

            CleanTriggers();
            WriteContacts(false);

            if (bDontPull)
                Game.Player.Character.CanBeDraggedOutOfVehicle = true;
        }
        public Prop BoxingClever()
        {
            Prop ThisPhone = null;
            List<Prop> PhoneList = new List<Prop>();
            Prop[] StreetPhone = World.GetNearbyProps(Game.Player.Character.Position, 50.00f);
            for (int i = 0; i < StreetPhone.Count(); i++)
            {
                if (PropExists(StreetPhone, i))
                {
                    for (int ii = 0; ii < sPhoneType.Count; ii++)
                    {
                        if (StreetPhone[i].Model == Function.Call<int>(Hash.GET_HASH_KEY, sPhoneType[ii]))
                        {
                            bool bAddThis = true;
                            for (int iii = 0; iii < vOldPhoneBoxList.Count; iii++)
                            {
                                if (StreetPhone[i].Position.DistanceTo(vOldPhoneBoxList[iii]) < 3.00f)
                                {
                                    bAddThis = false;
                                    break;
                                }
                            }
                            if (bAddThis)
                                PhoneList.Add(new Prop(StreetPhone[i].Handle));
                        }
                    }
                }
            }
            for (int i = 0; i < PhoneList.Count; i++)
            {
                if (PhoneList[i].Health > 850)
                {
                    PhoneList[i].IsPersistent = true;
                    ThisPhone = PhoneList[i];
                    break;
                }
            }
            return ThisPhone;
        }
        private void AnswerYourPhone(Prop ThisPhone)
        {
            LogThis("AnswerYourPhone");

            vPhoneCorona = ThisPhone.Position - (ThisPhone.ForwardVector * 1);
            float fHigh = World.GetGroundHeight(vPhoneCorona);
            if (BeInRange(1.5f, fHigh, ThisPhone.Position.Z))
                vPhoneCorona.Z = fHigh;
            else
                vPhoneCorona.Z -= 0.5f;
            if (MySettings.PhoneCone)
            {
                PhoneBlip = GTA.World.CreateBlip(vPhoneCorona);
                TaggetIcon(PhoneBlip, 817);
                PhoneBlip.Color = BlipColor.Green2;
                PhoneBlip.Scale = 0.80f;
                ReadWriteBlips(false, true, PhoneBlip.Handle, -1, -1, -1, -1, -1);
            }
        }
        private void SlowFastTravel(Vector3 VDest, float fHedd)
        {
            LogThis("SlowFastTravel");

            if (fHedd == 0.00f)
                fHedd = (int)RandInt(0, 360);
            Game.FadeScreenOut(1000);
            Script.Wait(1000);
            Game.Player.Character.Position = VDest;
            Game.Player.Character.Heading = fHedd;
            Script.Wait(2000);
            Game.FadeScreenIn(1000);
        }
        private void SlowFastVehicleTravel(Vector3 VDest, float fHedd)
        {
            LogThis("SlowFastTravel");
            if (Game.Player.Character.IsInVehicle())
            {           
                if (fHedd == 0.00f)
                    fHedd = (int)RandInt(0, 360);
                Game.FadeScreenOut(1000);
                Script.Wait(1000);
                Game.Player.Character.CurrentVehicle.Position = VDest;
                Game.Player.Character.CurrentVehicle.Heading = fHedd;
                Script.Wait(2000);
                Game.FadeScreenIn(1000);
            }
            else
            {
                if (fHedd == 0.00f)
                    fHedd = (int)RandInt(0, 360);
                Game.FadeScreenOut(1000);
                Script.Wait(1000);
                Game.Player.Character.Position = VDest;
                Game.Player.Character.Heading = fHedd;
                Script.Wait(2000);
                Game.FadeScreenIn(1000);
            }
        }
        private void PlayerWarpToWaypoint(Vector3 YoWayz, bool bVehicle)
        {
            Game.Player.Character.FreezePosition = true;
            Vector3 vWarpTo = YoWayz;
            int iWarpLoops = 10;
            Game.FadeScreenOut(1000);
            Script.Wait(1000);
            if (bVehicle)
            {
                if (Game.Player.Character.IsInVehicle())
                    Game.Player.Character.CurrentVehicle.Position = vWarpTo;
                else
                    Game.Player.Character.Position = vWarpTo;
            }
            else
                Game.Player.Character.Position = vWarpTo;
            Script.Wait(2000);
            vWarpTo.Z = World.GetGroundHeight(new Vector2(vWarpTo.X, vWarpTo.Y));
            if (bVehicle)
            {
                if (Game.Player.Character.IsInVehicle())
                    Game.Player.Character.CurrentVehicle.Position = vWarpTo;
                else
                    Game.Player.Character.Position = vWarpTo;
            }
            else
                Game.Player.Character.Position = vWarpTo;
            Game.FadeScreenIn(1000);
            Game.Player.Character.FreezePosition = false;
            Script.Wait(1000);
            while (Game.Player.Character.IsInAir || Game.Player.Character.Position.Z < World.GetGroundHeight(new Vector2(Game.Player.Character.Position.X, Game.Player.Character.Position.Y)))
            {
                Script.Wait(100);
                iWarpLoops -= 1;
                if (iWarpLoops > 1)
                    PlayerWarpToWaypoint(YoWayz, bVehicle);
            }

        }
        private void ZancudaClosed()
        {
            LogThis("ZancudaClosed");

            Function.Call(Has﻿h.REQUEST_SCRIPT, "restrictedareas");
            while (!Function.Ca﻿ll<bool>(Hash.HAS_SCRIPT_LOADED, "restrictedareas"))
                Script.Wait(1);
            Function.Call﻿(Hash.START_NEW_SCRIPT﻿, "restrictedareas", 1424);
            Fun﻿ction.Call(Hash.SET_SCRIPT_AS_NO_LONGER_NEEDED, "restrictedareas");
        }
        private void PlaySoundFrom(string sAudioBank, string sSound, string sSoundSet, Vector3 Vposy, bool bPhone)
        {
            LogThis("PlaySoundFrom, bPhone == " + bPhone);

            while (!Function.Call<bool>(Hash.REQUEST_SCRIPT_AUDIO_BANK, sAudioBank, false))
                Script.Wait(1);
            iPhonedID = Function.Call<int>(Hash.GET_SOUND_ID);
            if (bPhone)
                Function.Call(Hash.PLAY_SOUND_FROM_COORD, iPhonedID, sSound, Vposy.X, Vposy.Y, Vposy.Z, 0, 0, 50, 0);
            else
                Function.Call(Hash.PLAY_SOUND_FROM_COORD, iPhonedID, sSound, Vposy.X, Vposy.Y, Vposy.Z, sSoundSet, 0, 0, 0);

            ReadWriteBlips(false, true, -1, -1, -1, -1, -1, iPhonedID);
        }
        private void StopThatSound()
        {
            LogThis("StopThatSound");

            Function.Call(Hash.STOP_SOUND, iPhonedID);
            Function.Call(Hash.RELEASE_SOUND_ID, iPhonedID);

            ReadWriteBlips(false, false, -1, -1, -1, -1, -1, iPhonedID);
            iPhonedID = 0;
        }
        public class CustomVeh
        {
            public List<string> MyCarz { get; set; }
            public List<string> MyPlanez { get; set; }
            public List<string> MyBoatz { get; set; }
            public List<string> MyChopperz { get; set; }

            public CustomVeh()
            {
                MyCarz = new List<string>();
                MyPlanez = new List<string>();
                MyBoatz = new List<string>();
                MyChopperz = new List<string>();
            }
        }
        public void SaveCustomVeh(CustomVeh config, string fileName)
        {
            XmlSerializer xml = new XmlSerializer(typeof(CustomVeh));
            using (StreamWriter sw = new StreamWriter(fileName))
            {
                xml.Serialize(sw, config);
            }
        }
        public CustomVeh LoadCustomVeh(string fileName)
        {
            XmlSerializer xml = new XmlSerializer(typeof(CustomVeh));
            using (StreamReader sr = new StreamReader(fileName))
            {
                return (CustomVeh)xml.Deserialize(sr);
            }
        }
        private void FindCustomCarz()
        {
            LogThis("FindCustomCarz");

            if (File.Exists(sNSPMAddonCarz))
            {
                CustomVeh Carzz = LoadCustomVeh(sNSPMAddonCarz);
                sCustomCarz = new List<string>(Carzz.MyCarz);
                sCustomPlanez = new List<string>(Carzz.MyPlanez);
                sCustomBoatsz = new List<string>(Carzz.MyBoatz);
                sCustomChopperz = new List<string>(Carzz.MyChopperz);

                for (int i = 0; i < sCustomCarz.Count; i++)
                {
                    if (!IsItARealVehicle(sCustomCarz[i]))
                        sCustomCarz.RemoveAt(i);
                    else
                    {
                        int iAmVeh = WhatVehicleAreYou(sCustomCarz[i]);

                        if (iAmVeh == 0)
                            sCustomCarz.RemoveAt(i);
                        else if (iAmVeh == 1)
                        {

                        }
                        else if (iAmVeh == 2)
                        {
                            sCustomPlanez.Add(sCustomCarz[i]);
                            sCustomCarz.RemoveAt(i);
                        }
                        else if (iAmVeh == 3)
                        {
                            sCustomBoatsz.Add(sCustomCarz[i]);
                            sCustomCarz.RemoveAt(i);
                        }
                        else if (iAmVeh == 4)
                        {
                            sCustomChopperz.Add(sCustomCarz[i]);
                            sCustomCarz.RemoveAt(i);
                        }
                    }
                }

                for (int i = 0; i < sCustomPlanez.Count; i++)
                {
                    if (!IsItARealVehicle(sCustomPlanez[i]))
                        sCustomPlanez.RemoveAt(i);
                    else
                    {
                        int iAmVeh = WhatVehicleAreYou(sCustomPlanez[i]);

                        if (iAmVeh == 0)
                            sCustomPlanez.RemoveAt(i);
                        else if (iAmVeh == 1)
                        {
                            sCustomCarz.Add(sCustomPlanez[i]);
                            sCustomPlanez.RemoveAt(i);
                        }
                        else if (iAmVeh == 2)
                        {

                        }
                        else if (iAmVeh == 3)
                        {
                            sCustomBoatsz.Add(sCustomPlanez[i]);
                            sCustomPlanez.RemoveAt(i);
                        }
                        else if (iAmVeh == 4)
                        {
                            sCustomChopperz.Add(sCustomPlanez[i]);
                            sCustomPlanez.RemoveAt(i);
                        }
                    }

                }

                for (int i = 0; i < sCustomBoatsz.Count; i++)
                {
                    if (!IsItARealVehicle(sCustomBoatsz[i]))
                        sCustomBoatsz.RemoveAt(i);
                    else
                    {
                        int iAmVeh = WhatVehicleAreYou(sCustomBoatsz[i]);

                        if (iAmVeh == 0)
                            sCustomBoatsz.RemoveAt(i);
                        else if (iAmVeh == 1)
                        {
                            sCustomCarz.Add(sCustomBoatsz[i]);
                            sCustomBoatsz.RemoveAt(i);
                        }
                        else if (iAmVeh == 2)
                        {
                            sCustomPlanez.Add(sCustomBoatsz[i]);
                            sCustomBoatsz.RemoveAt(i);
                        }
                        else if (iAmVeh == 3)
                        {

                        }
                        else if (iAmVeh == 4)
                        {
                            sCustomChopperz.Add(sCustomBoatsz[i]);
                            sCustomBoatsz.RemoveAt(i);
                        }
                    }
                }

                for (int i = 0; i < sCustomChopperz.Count; i++)
                {
                    if (!IsItARealVehicle(sCustomChopperz[i]))
                        sCustomChopperz.RemoveAt(i);
                    else
                    {
                        int iAmVeh = WhatVehicleAreYou(sCustomChopperz[i]);

                        if (iAmVeh == 0)
                            sCustomChopperz.RemoveAt(i);
                        else if (iAmVeh == 1)
                        {
                            sCustomCarz.Add(sCustomChopperz[i]);
                            sCustomChopperz.RemoveAt(i);
                        }
                        else if (iAmVeh == 2)
                        {
                            sCustomPlanez.Add(sCustomChopperz[i]);
                            sCustomChopperz.RemoveAt(i);
                        }
                        else if (iAmVeh == 3)
                        {
                            sCustomBoatsz.Add(sCustomChopperz[i]);
                            sCustomChopperz.RemoveAt(i);
                        }
                        else if (iAmVeh == 4)
                        {

                        }
                    }
                }

                AddNewCustoms();
            }
        }
        private void AddNewCustoms()
        {
            CustomVeh Carzz = new CustomVeh
            {
                MyCarz = sCustomCarz,
                MyPlanez = sCustomPlanez,
                MyBoatz = sCustomBoatsz,
                MyChopperz = sCustomChopperz
            };
            SaveCustomVeh(Carzz, sNSPMAddonCarz);
        }
        public bool IsItARealVehicle(string sVehName)
        {
            LogThis("IsItARealVehicle, == " + sVehName);
            bool bIsReal = false;

            int iVehHash = Function.Call<int>(Hash.GET_HASH_KEY, sVehName);

            if (Function.Call<bool>(Hash.IS_MODEL_A_VEHICLE, iVehHash))
                bIsReal = true;

            return bIsReal;
        }
        public int WhatVehicleAreYou(string sVehName)
        {
            LogThis("WhatVehicleAreYou, == " + sVehName);

            int iAm = Function.Call<int>(Hash.GET_VEHICLE_CLASS_FROM_NAME, Function.Call<int>(Hash.GET_HASH_KEY, sVehName));

            if (iAm == 16)
                iAm = 2;
            else if (iAm == 14)
                iAm = 3;
            else if (iAm == 15)
                iAm = 4;
            else
                iAm = 1;

            return iAm;
        }
        public class Lingoo
        {
            public List<string> Maptext { get; set; }
            public List<string> Mistext { get; set; }
            public List<string> Context { get; set; }
            public List<string> Jobtext { get; set; }
            public List<string> Othertext { get; set; }
            public List<string> ContactLang { get; set; }
            public List<string> YachtLang { get; set; }

            public Lingoo()
            {
                Maptext = new List<string>();
                Mistext = new List<string>();
                Context = new List<string>();
                Jobtext = new List<string>();
                Othertext = new List<string>();
                ContactLang = new List<string>();
                YachtLang = new List<string>();
            }
        }
        public void BulidLang(Lingoo config, string fileName)
        {
            XmlSerializer xml = new XmlSerializer(typeof(Lingoo));
            using (StreamWriter sw = new StreamWriter(fileName))
            {
                xml.Serialize(sw, config);
            }
        }
        public Lingoo LoadlangSetting(string fileName)
        {
            XmlSerializer xml = new XmlSerializer(typeof(Lingoo));
            using (StreamReader sr = new StreamReader(fileName))
            {
                return (Lingoo)xml.Deserialize(sr);
            }
        }
        private void LangReader()
        {
            LogThis("LangReader");
            bool bNoLAng = true;

            if (MySettings.LangSupport < 1)
            {
                if (Directory.Exists(sNSPMLanguage))
                {
                    if (Game.Language == Language.American)
                    {
                        if (File.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Language/English.Xml"))
                        {
                            MyLang = LoadlangSetting("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Language/English.Xml");
                            bNoLAng = false;
                            MySettings.LangSupport = 1;
                        }
                    }
                    else if (Game.Language == Language.Chinese)
                    {
                        if (File.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Language/Chinese.Xml"))
                        {
                            MyLang = LoadlangSetting("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Language/Chinese.Xml");
                            bNoLAng = false;
                            MySettings.LangSupport = 2;
                        }
                    }
                    else if (Game.Language == Language.ChineseSimplified)
                    {
                        if (File.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Language/ChineseS.Xml"))
                        {
                            MyLang = LoadlangSetting("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Language/ChineseS.Xml");
                            bNoLAng = false;
                            MySettings.LangSupport = 3;
                        }
                    }
                    else if (Game.Language == Language.French)
                    {
                        if (File.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Language/French.Xml"))
                        {
                            MyLang = LoadlangSetting("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Language/French.Xml");
                            bNoLAng = false;
                            MySettings.LangSupport = 4;
                        }
                    }
                    else if (Game.Language == Language.German)
                    {
                        if (File.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Language/German.Xml"))
                        {
                            MyLang = LoadlangSetting("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Language/German.Xml");
                            bNoLAng = false;
                            MySettings.LangSupport = 5;
                        }
                    }
                    else if (Game.Language == Language.Italian)
                    {
                        if (File.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Language/Italian.Xml"))
                        {
                            MyLang = LoadlangSetting("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Language/Italian.Xml");
                            bNoLAng = false;
                            MySettings.LangSupport = 6;
                        }
                    }
                    else if (Game.Language == Language.Japanese)
                    {
                        if (File.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Language/Japanese.Xml"))
                        {
                            MyLang = LoadlangSetting("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Language/Japanese.Xml");
                            bNoLAng = false;
                            MySettings.LangSupport = 7;
                        }
                    }
                    else if (Game.Language == Language.Korean)
                    {
                        if (File.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Language/Korean.Xml"))
                        {
                            MyLang = LoadlangSetting("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Language/Korean.Xml");
                            bNoLAng = false;
                            MySettings.LangSupport = 8;
                        }
                    }
                    else if (Game.Language == Language.Mexican)
                    {
                        if (File.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Language/Mexican.Xml"))
                        {
                            MyLang = LoadlangSetting("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Language/Mexican.Xml");
                            bNoLAng = false;
                            MySettings.LangSupport = 9;
                        }
                    }
                    else if (Game.Language == Language.Polish)
                    {
                        if (File.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Language/Polish.Xml"))
                        {
                            MyLang = LoadlangSetting("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Language/Polish.Xml");
                            bNoLAng = false;
                            MySettings.LangSupport = 10;
                        }
                    }
                    else if (Game.Language == Language.Portuguese)
                    {
                        if (File.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Language/Portuguese.Xml"))
                        {
                            MyLang = LoadlangSetting("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Language/Portuguese.Xml");
                            bNoLAng = false;
                            MySettings.LangSupport = 11;
                        }
                    }
                    else if (Game.Language == Language.Russian)
                    {
                        if (File.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Language/Russian.Xml"))
                        {
                            MyLang = LoadlangSetting("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Language/Russian.Xml");
                            bNoLAng = false;
                            MySettings.LangSupport = 12;
                        }
                    }
                    else if (Game.Language == Language.Spanish)
                    {
                        if (File.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Language/Spanish.Xml"))
                        {
                            MyLang = LoadlangSetting("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Language/Spanish.Xml");
                            bNoLAng = false;
                            MySettings.LangSupport = 13;
                        }
                    }
                }
            }
            WriteNSMDat(14, MySettings.LangSupport);
            SaveXmlSettings(MySettings, sNSPMSet);

            if (bNoLAng)
                LangRewite();
        }
        public class BlipStore
        {
            public List<int> MyBlips { get; set; }
            public List<int> MyCorrona { get; set; }
            public List<int> MyPeds { get; set; }
            public List<int> MyProps { get; set; }
            public List<int> MyVehcs { get; set; }
            public int MySound { get; set; }
            public BlipStore()
            {
                MyBlips = new List<int>();
                MyCorrona = new List<int>();
                MyPeds = new List<int>();
                MyProps = new List<int>();
                MyVehcs = new List<int>();
            }
        }
        public void SaveBlips(BlipStore config, string fileName)
        {
            XmlSerializer xml = new XmlSerializer(typeof(BlipStore));
            using (StreamWriter sw = new StreamWriter(fileName))
            {
                xml.Serialize(sw, config);
            }
        }
        public BlipStore LoadBlips(string fileName)
        {
            XmlSerializer xml = new XmlSerializer(typeof(BlipStore));
            using (StreamReader sr = new StreamReader(fileName))
            {
                return (BlipStore)xml.Deserialize(sr);
            }
        }
        private void ReadWriteBlips(bool bClearOut, bool bAdd, int iBlip, int iCorrona, int iPed, int iProp, int iVeh, int iSound)
        {
            LogThis("ReadWriteBlips, bClearOut == " + bClearOut + ", bAdd ==" + bAdd + ", iBlip ==" + iBlip + ", iCorrona ==" + iCorrona + ", iPed ==" + iPed + ", iProp ==" + iProp + ", iVeh ==" + iVeh + ", iSound ==" + iSound);

            List<int> iBlipped = new List<int>();
            List<int> iCoroned = new List<int>();
            List<int> iPEdness = new List<int>();
            List<int> iPropies = new List<int>();
            List<int> iVehicol = new List<int>();
            int iSondoff = -1;

            if (File.Exists(sNSPMBlips))
            {
                BlipStore BStore = LoadBlips(sNSPMBlips);
                iBlipped = BStore.MyBlips;
                iCoroned = BStore.MyCorrona;
                iPEdness = BStore.MyPeds;
                iPropies = BStore.MyProps;
                iVehicol = BStore.MyVehcs;
                iSondoff = BStore.MySound;

                if (bClearOut)
                {
                    for (int i = 0; i < iBlipped.Count; i++)
                        SafeCleaning(new Blip(iBlipped[i]),true);

                    for (int i = 0; i < iPEdness.Count; i++)
                        PedList_01.Add(new Ped(iPEdness[i]));

                    for (int i = 0; i < iPropies.Count; i++)
                        PropList_01.Add(new Prop(iPropies[i]));

                    for (int i = 0; i < iVehicol.Count; i++)
                        VehicleList_01.Add(new Vehicle(iVehicol[i]));

                    CleanUpCheckPoints();
                    CleanUpPeds();
                    CleanUpProps();
                    CleanUpVehicles();

                    if (iSondoff != -1)
                    {
                        iPhonedID = iSondoff;
                        StopThatSound();
                    }
                }
                else
                {
                    if (bAdd)
                    {
                        if (iBlip != -1)
                        {
                            if (!BStore.MyBlips.Contains(iBlip))
                                BStore.MyBlips.Add(iBlip);
                        }
                        else if (iCorrona != -1)
                        {
                            if (!BStore.MyCorrona.Contains(iCorrona))
                                BStore.MyCorrona.Add(iCorrona);
                        }
                        else if (iPed != -1)
                        {
                            if (!BStore.MyPeds.Contains(iPed))
                                BStore.MyPeds.Add(iPed);
                        }
                        else if (iProp != -1)
                        {
                            if (!BStore.MyProps.Contains(iProp))
                                BStore.MyProps.Add(iProp);
                        }
                        else if (iVeh != -1)
                        {
                            if (!BStore.MyVehcs.Contains(iVeh))
                                BStore.MyVehcs.Add(iVeh);
                        }
                        else if (iSound != -1)
                        {
                            BStore.MySound = iSound;
                        }
                    }
                    else
                    {
                        if (iBlip != -1)
                        {
                            if (iBlip == -99)
                                BStore.MyBlips.Clear();
                            else
                            {
                                if (BStore.MyBlips.Contains(iBlip))
                                    BStore.MyBlips.Remove(iBlip);
                            }
                        }
                        else if (iCorrona != -1)
                        {
                            if (iCorrona == -99)
                                BStore.MyCorrona.Clear();
                            else
                            {
                                if (BStore.MyCorrona.Contains(iCorrona))
                                    BStore.MyCorrona.Remove(iCorrona);

                            }
                        }
                        else if (iPed != -1)
                        {
                            if (iPed == -99)
                                BStore.MyPeds.Clear();
                            else
                            {
                                if (BStore.MyPeds.Contains(iPed))
                                    BStore.MyPeds.Remove(iPed);
                            }
                        }
                        else if (iProp != -1)
                        {
                            if (iProp == -99)
                                BStore.MyProps.Clear();
                            else
                            {
                                if (BStore.MyProps.Contains(iProp))
                                    BStore.MyProps.Remove(iProp);
                            }
                        }
                        else if (iVeh != -1)
                        {
                            if (iVeh == -99)
                                BStore.MyVehcs.Clear();
                            else
                            {
                                if (BStore.MyVehcs.Contains(iVeh))
                                    BStore.MyVehcs.Remove(iVeh);
                            }
                        }
                        else if (iSound == -1)
                        {
                            BStore.MySound = -1;
                        }
                    }
                    SaveBlips(BStore, sNSPMBlips);
                }
            }
            else
            {
                BlipStore BStore = new BlipStore();
                SaveBlips(BStore, sNSPMBlips);
                ReadWriteBlips(bClearOut, bAdd, iBlip, iCorrona, iPed, iProp, iVeh, iSound);
            }     
        }
        public class MyMk2Weaps
        {
            public int MyPlayer { get; set; }
            public string Mk2Weap { get; set; }
            public List<string> Mk2Addon { get; set; }
            public int MyAmmos { get; set; }

            public MyMk2Weaps()
            {
                Mk2Addon = new List<string>();
            }
        }
        public class XmlContacts
        {
            public List<string> ImpXCars { get; set; }
            public List<int> ImpXList { get; set; }
            public List<MyMk2Weaps> MyMk2Weaps { get; set; }
            public Vector3 FuMiss { get; set; }

            public XmlContacts()
            {
                MyMk2Weaps = new List<MyMk2Weaps>();
                ImpXCars = new List<string>();
                ImpXList = new List<int>();
            }
        }
        public void SaveXmlContacts(XmlContacts config, string fileName)
        {
            XmlSerializer xml = new XmlSerializer(typeof(XmlContacts));
            using (StreamWriter sw = new StreamWriter(fileName))
            {
                xml.Serialize(sw, config);
            }
        }
        public XmlContacts LoadXmlContacts(string fileName)
        {
            XmlSerializer xml = new XmlSerializer(typeof(XmlContacts));
            using (StreamReader sr = new StreamReader(fileName))
            {
                return (XmlContacts)xml.Deserialize(sr);
            }
        }
        private void UpppDateIMPEXList()
        {
            if (File.Exists(sNSPMCont))
            {
                XmlContacts XSets = LoadXmlContacts(sNSPMCont);
                sImpExpVeh = XSets.ImpXCars;
                iImpExpList = XSets.ImpXList;
            }
            else
            {
                for (int i = 0; i < Mk2WeapsMain.Count; i++)
                    Mk2WeapsMain[i].MyPlayer = 1;

                XmlContacts XSets = new XmlContacts
                {
                    ImpXCars = sImpExpVeh,
                    ImpXList = iImpExpList,
                    MyMk2Weaps = Mk2WeapsMain
                };
                SaveXmlContacts(XSets, sNSPMCont);
            }
        }
        private void WriteContacts(bool bUpdateCArz)
        {
            LogThis("WriteContacts, == " + bUpdateCArz);
            if (File.Exists(sNSPMCont))
            {
                if (bUpdateCArz)
                {
                    XmlContacts XSets = LoadXmlContacts(sNSPMCont);
                    XSets.ImpXCars = sImpExpVeh;
                    XSets.ImpXList = iImpExpList;
                    SaveXmlContacts(XSets, sNSPMCont);
                }
                else
                {
                    XmlContacts XSets = LoadXmlContacts(sNSPMCont);
                    XSets.FuMiss = vFuMiss;
                    SaveXmlContacts(XSets, sNSPMCont);
                }
            }
            else
                UpppDateIMPEXList();
        }
        public class XmlSetings
        {
            public bool Truckin { get; set; }
            public bool Getaway { get; set; }
            public bool Packages { get; set; }
            public bool Convicts { get; set; }
            public bool FUber { get; set; }
            public bool Pilot { get; set; }
            public bool Amulance { get; set; }
            public bool Follow { get; set; }
            public bool LSFD { get; set; }
            public bool Johnny { get; set; }
            public bool Raceist { get; set; }
            public bool BBBomb { get; set; }
            public bool Assassination { get; set; }
            public bool Gruppe6 { get; set; }
            public bool Sailor { get; set; }
            public bool ImportantEx { get; set; }
            public bool DebtCollect { get; set; }
            public bool MCBusiness { get; set; }
            public bool BayLift { get; set; }
            public bool Sharks { get; set; }
            public bool HappyShopper { get; set; }
            public bool MoresMute { get; set; }
            public bool TempJob { get; set; }
            public bool ParaDisplay { get; set; }
            public bool Deliverwho { get; set; }

            public bool ShowRoute { get; set; }
            public bool EnemyStrength { get; set; }
            public bool FastTraveltoStart { get; set; }
            public bool Subtitles { get; set; }
            public bool PhoneCone { get; set; }
            public bool PhoneAudio { get; set; }
            public bool BulderOnly { get; set; }
            public int YachtPrice { get; set; }
            public bool PhoneAnim { set; get; }
            public bool PreLoadOnline { set; get; }
            public bool MenyooAppFixer { set; get; }
            public int LangSupport { set; get; }

            public int AssZone01 { get; set; }
            public int AssZone02 { get; set; }
            public int AssZone03 { get; set; }
            public int AssZone04 { get; set; }
            public int AssZone05 { get; set; }
            public int AssZone06 { get; set; }
            public int AssZone07 { get; set; }

            public int ModVersion { get; set; }
            public int SPDelayTime { get; set; }
            public int WhyNotSubscribe { get; set; }

            public List<Vector3> PhoneBlock { get; set; }

            public XmlSetings()
            {
                PhoneBlock = new List<Vector3>();
            }
        }
        public void SaveXmlSettings(XmlSetings config, string fileName)
        {
            XmlSerializer xml = new XmlSerializer(typeof(XmlSetings));
            using (StreamWriter sw = new StreamWriter(fileName))
            {
                xml.Serialize(sw, config);
            }
        }
        public XmlSetings LoadXmlSetting(string fileName)
        {
            XmlSerializer xml = new XmlSerializer(typeof(XmlSetings));
            using (StreamReader sr = new StreamReader(fileName))
            {
                return (XmlSetings)xml.Deserialize(sr);
            }
        }
        private void ReadXmlSet()
        {
            LogThis("ReadXmlSet");

            if (File.Exists(sNSPMSet))
            {
                MySettings = LoadXmlSetting(sNSPMSet);

                iAssMissionList[0] = MySettings.AssZone01;
                iAssMissionList[1] = MySettings.AssZone02;
                iAssMissionList[2] = MySettings.AssZone03;
                iAssMissionList[3] = MySettings.AssZone04;
                iAssMissionList[4] = MySettings.AssZone05;
                iAssMissionList[5] = MySettings.AssZone06;
                iAssMissionList[6] = MySettings.AssZone07;

                vPhoneBoxList = MySettings.PhoneBlock;
                bMayooAppFix = MySettings.MenyooAppFixer;

                if (MySettings.ModVersion != 33100)
                    NagScreen();
                else
                {
                    MySettings.WhyNotSubscribe += 1;
                    if (MySettings.WhyNotSubscribe == 14)
                        bSubscribeNag = true;
                }
            }
            else
            {
                MySettings = DefaultSet();
                NagScreen();
            }
        }
        public XmlSetings DefaultSet()
        {
            XmlSetings NewSet = new XmlSetings
            {
                Truckin = true,
                Getaway = true,
                Packages = true,
                Convicts = true,
                FUber = true,
                Pilot = true,
                Amulance = true,
                Follow = true,
                LSFD = true,
                Johnny = true,
                Raceist = true,
                BBBomb = true,
                Sailor = true,
                Gruppe6 = true,
                Assassination = true,
                ImportantEx = true,
                DebtCollect = true,
                MCBusiness = true,
                BayLift = true,
                Sharks = true,
                HappyShopper = true,
                MoresMute = true,
                TempJob = true,
                ParaDisplay = true,
                Deliverwho = true,

                ShowRoute = true,
                EnemyStrength = true,
                FastTraveltoStart = false,
                Subtitles = true,
                PhoneCone = true,
                PhoneAudio = true,
                BulderOnly = false,
                MenyooAppFixer = false,

                AssZone01 = 0,
                AssZone02 = 0,
                AssZone03 = 0,
                AssZone04 = 0,
                AssZone05 = 0,
                AssZone06 = 0,
                AssZone07 = 0,

                SPDelayTime = 4000,
                YachtPrice = 6000000,
                ModVersion = 0,
                PhoneAnim = true,
                PreLoadOnline = true,
                LangSupport = 0,
                WhyNotSubscribe = 0
            };

            return NewSet;
        }
        private void NagScreen()
        {
            MySettings.ModVersion = 33100;
            UI.Notify("If you didn't download this file from 'gta5-mods.com' then delete it and download the original from 'gta5-mods.com/scripts/new-street-phone-missions'");
            SaveXmlSettings(MySettings, sNSPMSet);
        }
        private void SettingsMenu(bool JustCustoms)
        {
            LogThis("SettingsMenu");
            
            var mainMenu = new UIMenu("NSPM", MyLang.Othertext[56]);

            YtmenuPool.Add(mainMenu);
            if (JustCustoms)
            {
                AddCustomVehcis(mainMenu);
            }
            else
            {
                MissionSelectSet(mainMenu);
                SettingsSet(mainMenu);
                if (bTrainM)
                    MishconBuild(mainMenu);
            }

            bOptionsMen = true;
            bMenuOpen = true;
            mainMenu.Visible = !mainMenu.Visible;
        }
        private void AddCustomVehcis(UIMenu XMen)
        {
            var SubHeadder = YtmenuPool.AddSubMenu(XMen, MyLang.Othertext[57]);
            var Submenu_01 = YtmenuPool.AddSubMenu(SubHeadder, MyLang.Othertext[58]);
            var Submenu_02 = YtmenuPool.AddSubMenu(SubHeadder, MyLang.Othertext[59]);
            var Submenu_03 = YtmenuPool.AddSubMenu(SubHeadder, MyLang.Othertext[60]);
            var Submenu_04 = YtmenuPool.AddSubMenu(SubHeadder, MyLang.Othertext[61]);

            List<string> sub_01 = new List<string>();
            List<string> sub_02 = new List<string>();
            List<string> sub_03 = new List<string>();
            List<string> sub_04 = new List<string>();

            var AddCar = new UIMenuItem(MyLang.Othertext[62], "");
            Submenu_01.AddItem(AddCar);

            var AddPlanz = new UIMenuItem(MyLang.Othertext[63], "");
            Submenu_02.AddItem(AddPlanz);

            var AddBoatz = new UIMenuItem(MyLang.Othertext[64], "");
            Submenu_03.AddItem(AddBoatz);

            var AddHeli = new UIMenuItem(MyLang.Othertext[65], "");
            Submenu_04.AddItem(AddHeli);

            for (int i = 0; i < sCustomCarz.Count; i++)
            {
                int iAmVeh = WhatVehicleAreYou(sCustomCarz[i]);

                if (iAmVeh == 0)
                    sCustomCarz.RemoveAt(i);
                else if (iAmVeh == 1)
                {
                    var item_ = new UIMenuItem(GetEntName(sCustomCarz[i]), "Remove from list");
                    Submenu_01.AddItem(item_);
                    sub_01.Add(sCustomCarz[i]);
                }
                else if (iAmVeh == 2)
                {
                    sCustomPlanez.Add(sCustomCarz[i]);
                    sCustomCarz.RemoveAt(i);
                }
                else if (iAmVeh == 3)
                {
                    sCustomBoatsz.Add(sCustomCarz[i]);
                    sCustomCarz.RemoveAt(i);
                }
                else if (iAmVeh == 4)
                {
                    sCustomChopperz.Add(sCustomCarz[i]);
                    sCustomCarz.RemoveAt(i);
                }
            }

            for (int i = 0; i < sCustomPlanez.Count; i++)
            {
                int iAmVeh = WhatVehicleAreYou(sCustomPlanez[i]);

                if (iAmVeh == 0)
                    sCustomPlanez.RemoveAt(i);
                else if (iAmVeh == 1)
                {
                    sCustomCarz.Add(sCustomPlanez[i]);
                    var item_ = new UIMenuItem(GetEntName(sCustomPlanez[i]), "Remove from list");
                    Submenu_01.AddItem(item_);
                    sub_01.Add(sCustomPlanez[i]);
                    sCustomPlanez.RemoveAt(i);
                }
                else if (iAmVeh == 2)
                {
                    var item_ = new UIMenuItem(GetEntName(sCustomPlanez[i]), "Remove from list");
                    Submenu_02.AddItem(item_);
                    sub_02.Add(sCustomPlanez[i]);
                }
                else if (iAmVeh == 3)
                {
                    sCustomBoatsz.Add(sCustomPlanez[i]);
                    sCustomPlanez.RemoveAt(i);
                }
                else if (iAmVeh == 4)
                {
                    sCustomChopperz.Add(sCustomPlanez[i]);
                    sCustomPlanez.RemoveAt(i);
                }
            }

            for (int i = 0; i < sCustomBoatsz.Count; i++)
            {
                int iAmVeh = WhatVehicleAreYou(sCustomBoatsz[i]);

                if (iAmVeh == 0)
                    sCustomBoatsz.RemoveAt(i);
                else if (iAmVeh == 1)
                {
                    sCustomCarz.Add(sCustomBoatsz[i]);
                    var item_ = new UIMenuItem(GetEntName(sCustomBoatsz[i]), "Remove from list");
                    Submenu_01.AddItem(item_);
                    sub_01.Add(sCustomBoatsz[i]);

                    sCustomBoatsz.RemoveAt(i);
                }
                else if (iAmVeh == 2)
                {
                    sCustomPlanez.Add(sCustomBoatsz[i]);
                    var item_ = new UIMenuItem(GetEntName(sCustomBoatsz[i]), "Remove from list");
                    Submenu_02.AddItem(item_);
                    sub_02.Add(sCustomBoatsz[i]);

                    sCustomBoatsz.RemoveAt(i);
                }
                else if (iAmVeh == 3)
                {
                    var item_ = new UIMenuItem(GetEntName(sCustomBoatsz[i]), "Remove from list");
                    Submenu_03.AddItem(item_);
                    sub_03.Add(sCustomBoatsz[i]);
                }
                else if (iAmVeh == 4)
                {
                    sCustomChopperz.Add(sCustomBoatsz[i]);
                    sCustomBoatsz.RemoveAt(i);
                }
            }

            for (int i = 0; i < sCustomChopperz.Count; i++)
            {
                int iAmVeh = WhatVehicleAreYou(sCustomChopperz[i]);

                if (iAmVeh == 0)
                    sCustomChopperz.RemoveAt(i);
                else if (iAmVeh == 1)
                {
                    sCustomCarz.Add(sCustomChopperz[i]);
                    var item_ = new UIMenuItem(GetEntName(sCustomChopperz[i]), "Remove from list");
                    Submenu_01.AddItem(item_);
                    sub_01.Add(sCustomChopperz[i]);

                    sCustomChopperz.RemoveAt(i);
                }
                else if (iAmVeh == 2)
                {
                    sCustomPlanez.Add(sCustomChopperz[i]);
                    var item_ = new UIMenuItem(GetEntName(sCustomChopperz[i]), "Remove from list");
                    Submenu_02.AddItem(item_);
                    sub_02.Add(sCustomChopperz[i]);

                    sCustomChopperz.RemoveAt(i);
                }
                else if (iAmVeh == 3)
                {
                    sCustomBoatsz.Add(sCustomChopperz[i]);
                    var item_ = new UIMenuItem(GetEntName(sCustomChopperz[i]), "Remove from list");
                    Submenu_03.AddItem(item_);
                    sub_03.Add(sCustomChopperz[i]);

                    sCustomChopperz.RemoveAt(i);
                }
                else if (iAmVeh == 4)
                {
                    var item_ = new UIMenuItem(GetEntName(sCustomChopperz[i]), "Remove from list");
                    Submenu_04.AddItem(item_);
                    sub_04.Add(sCustomChopperz[i]);
                }
            }

            Submenu_01.OnItemSelect += (sender, item, index) =>
            {
                if (item == AddCar)
                {
                    string sName = Game.GetUserInput(255);
                    if (IsItARealVehicle(sName))
                        sCustomCarz.Add(sName);
                    else
                        UI.Notify("Invalid Vehicle ID");
                }
                else
                {
                    sCustomCarz.Remove(sub_01[index - 1]);
                }
                AddNewCustoms();
                YtmenuPool.CloseAllMenus();
                Script.Wait(3000);
                SettingsMenu(true);
            };

            Submenu_02.OnItemSelect += (sender, item, index) =>
            {
                if (item == AddPlanz)
                {
                    string sName = Game.GetUserInput(255);
                    if (IsItARealVehicle(sName))
                        sCustomPlanez.Add(sName);
                    else
                        UI.Notify("Invalid Vehicle ID");
                }
                else
                {
                    sCustomPlanez.Remove(sub_02[index - 1]);
                }
                AddNewCustoms();
                YtmenuPool.CloseAllMenus();
                Script.Wait(3000);
                SettingsMenu(true);
            };

            Submenu_03.OnItemSelect += (sender, item, index) =>
            {
                if (item == AddBoatz)
                {
                    string sName = Game.GetUserInput(255);
                    if (IsItARealVehicle(sName))
                        sCustomBoatsz.Add(sName);
                    else
                        UI.Notify("Invalid Vehicle ID");
                }
                else
                {
                    sCustomBoatsz.Remove(sub_03[index - 1]);
                }
                AddNewCustoms();
                YtmenuPool.CloseAllMenus();
                Script.Wait(3000);
                SettingsMenu(true);
            };

            Submenu_04.OnItemSelect += (sender, item, index) =>
            {
                if (item == AddHeli)
                {
                    string sName = Game.GetUserInput(255);
                    if (IsItARealVehicle(sName))
                        sCustomChopperz.Add(sName);
                    else
                        UI.Notify("Invalid Vehicle ID");
                }
                else
                {
                    sCustomChopperz.Remove(sub_04[index - 1]);
                }
                AddNewCustoms();
                YtmenuPool.CloseAllMenus();
                Script.Wait(3000);
                SettingsMenu(true);
            };
        }
        private void MissionSelectSet(UIMenu XMen)
        {
            var Selectmenu = YtmenuPool.AddSubMenu(XMen, MyLang.Othertext[66]);

            for (int i = 0; i < 1; i++) ;
            var Rand_01 = new UIMenuItem(MyLang.Jobtext[0], "");
            if (MySettings.Truckin)
                Rand_01.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_02 = new UIMenuItem(MyLang.Jobtext[1], "");
            if (MySettings.Getaway)
                Rand_02.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_03 = new UIMenuItem(MyLang.Jobtext[2], "");
            if (MySettings.Packages)
                Rand_03.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_04 = new UIMenuItem(MyLang.Jobtext[3], "");
            if (MySettings.Convicts)
                Rand_04.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_05 = new UIMenuItem(MyLang.Jobtext[4], "");
            if (MySettings.FUber)
                Rand_05.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_06 = new UIMenuItem(MyLang.Jobtext[5], "");
            if (MySettings.Pilot)
                Rand_06.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_07 = new UIMenuItem(MyLang.Jobtext[6], "");
            if (MySettings.Amulance)
                Rand_07.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_08 = new UIMenuItem(MyLang.Jobtext[7], "");
            if (MySettings.Follow)
                Rand_08.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_09 = new UIMenuItem(MyLang.Jobtext[8], "");
            if (MySettings.LSFD)
                Rand_09.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_10 = new UIMenuItem(MyLang.Jobtext[9], "");
            if (MySettings.Johnny)
                Rand_10.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_11 = new UIMenuItem(MyLang.Jobtext[10], "");
            if (MySettings.Raceist)
                Rand_11.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_12 = new UIMenuItem(MyLang.Jobtext[11], "");
            if (MySettings.BBBomb)
                Rand_12.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_13 = new UIMenuItem(MyLang.Jobtext[12], "");
            if (MySettings.Assassination)
                Rand_13.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_14 = new UIMenuItem(MyLang.Jobtext[13], "");
            if (MySettings.Gruppe6)
                Rand_14.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_15 = new UIMenuItem(MyLang.Jobtext[14], "");
            if (MySettings.Sailor)
                Rand_15.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_16 = new UIMenuItem(MyLang.Jobtext[15], "");
            if (MySettings.ImportantEx)
                Rand_16.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_17 = new UIMenuItem(MyLang.Jobtext[16], "");
            if (MySettings.DebtCollect)
                Rand_17.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_18 = new UIMenuItem(MyLang.Jobtext[17], "");
            if (MySettings.MCBusiness)
                Rand_18.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_19 = new UIMenuItem(MyLang.Jobtext[18], "");
            if (MySettings.BayLift)
                Rand_19.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_20 = new UIMenuItem(MyLang.Jobtext[19], "");
            if (MySettings.Sharks)
                Rand_20.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_21 = new UIMenuItem(MyLang.Jobtext[20], "");
            if (MySettings.HappyShopper)
                Rand_21.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_22 = new UIMenuItem(MyLang.Jobtext[21], "");
            if (MySettings.MoresMute)
                Rand_22.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_23 = new UIMenuItem(MyLang.Jobtext[22], "");
            if (MySettings.TempJob)
                Rand_23.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_24 = new UIMenuItem(MyLang.Jobtext[23], "");
            if (MySettings.ParaDisplay)
                Rand_24.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_25 = new UIMenuItem(MyLang.Jobtext[24], "");
            if (MySettings.Deliverwho)
                Rand_25.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            Selectmenu.AddItem(Rand_01);
            Selectmenu.AddItem(Rand_02);
            Selectmenu.AddItem(Rand_03);
            Selectmenu.AddItem(Rand_04);
            Selectmenu.AddItem(Rand_05);
            Selectmenu.AddItem(Rand_06);
            Selectmenu.AddItem(Rand_07);
            Selectmenu.AddItem(Rand_08);
            Selectmenu.AddItem(Rand_09);
            Selectmenu.AddItem(Rand_10);
            Selectmenu.AddItem(Rand_11);
            Selectmenu.AddItem(Rand_12);
            Selectmenu.AddItem(Rand_13);
            Selectmenu.AddItem(Rand_14);
            Selectmenu.AddItem(Rand_15);
            Selectmenu.AddItem(Rand_16);
            Selectmenu.AddItem(Rand_17);
            Selectmenu.AddItem(Rand_18);
            Selectmenu.AddItem(Rand_19);
            Selectmenu.AddItem(Rand_20);
            Selectmenu.AddItem(Rand_21);
            Selectmenu.AddItem(Rand_22);
            Selectmenu.AddItem(Rand_23);
            Selectmenu.AddItem(Rand_24);
            Selectmenu.AddItem(Rand_25);

            Selectmenu.OnItemSelect += (sender, item, index) =>
            {
                if (item == Rand_01)
                {
                    MySettings.Truckin = !MySettings.Truckin;
                    if (MySettings.Truckin)
                        Rand_01.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_01.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_02)
                {
                    MySettings.Getaway = !MySettings.Getaway;
                    if (MySettings.Getaway)
                        Rand_02.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_02.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_03)
                {
                    MySettings.Packages = !MySettings.Packages;
                    if (MySettings.Packages)
                        Rand_03.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_03.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_04)
                {
                    MySettings.Convicts = !MySettings.Convicts;
                    if (MySettings.Convicts)
                        Rand_04.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_04.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_05)
                {
                    MySettings.FUber = !MySettings.FUber;
                    if (MySettings.FUber)
                        Rand_05.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_05.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_06)
                {
                    MySettings.Pilot = !MySettings.Pilot;
                    if (MySettings.Pilot)
                        Rand_06.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_06.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_07)
                {
                    MySettings.Amulance = !MySettings.Amulance;
                    if (MySettings.Amulance)
                        Rand_07.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_07.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_08)
                {
                    MySettings.Follow = !MySettings.Follow;
                    if (MySettings.Follow)
                        Rand_08.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_08.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_09)
                {
                    MySettings.LSFD = !MySettings.LSFD;
                    if (MySettings.LSFD)
                        Rand_09.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_09.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_10)
                {
                    MySettings.Johnny = !MySettings.Johnny;
                    if (MySettings.Johnny)
                        Rand_10.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_10.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_11)
                {
                    MySettings.Raceist = !MySettings.Raceist;
                    if (MySettings.Raceist)
                        Rand_11.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_11.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_12)
                {
                    MySettings.BBBomb = !MySettings.BBBomb;
                    if (MySettings.BBBomb)
                        Rand_12.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_12.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_13)
                {
                    MySettings.Assassination = !MySettings.Assassination;
                    if (MySettings.Assassination)
                        Rand_13.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_13.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_14)
                {
                    MySettings.Gruppe6 = !MySettings.Gruppe6;
                    if (MySettings.Gruppe6)
                        Rand_14.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_14.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_15)
                {
                    MySettings.Sailor = !MySettings.Sailor;
                    if (MySettings.Sailor)
                        Rand_15.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_15.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_16)
                {
                    MySettings.ImportantEx = !MySettings.ImportantEx;
                    if (MySettings.ImportantEx)
                        Rand_16.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_16.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_17)
                {
                    MySettings.DebtCollect = !MySettings.DebtCollect;
                    if (MySettings.DebtCollect)
                        Rand_17.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_17.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_18)
                {
                    MySettings.MCBusiness = !MySettings.MCBusiness;
                    if (MySettings.MCBusiness)
                        Rand_18.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_18.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_19)
                {
                    MySettings.BayLift = !MySettings.BayLift;
                    if (MySettings.BayLift)
                        Rand_19.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_19.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_20)
                {
                    MySettings.Sharks = !MySettings.Sharks;
                    if (MySettings.Sharks)
                        Rand_20.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_20.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_21)
                {
                    MySettings.HappyShopper = !MySettings.HappyShopper;
                    if (MySettings.HappyShopper)
                        Rand_21.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_21.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_22)
                {
                    MySettings.MoresMute = !MySettings.MoresMute;
                    if (MySettings.MoresMute)
                        Rand_22.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_22.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_23)
                {
                    MySettings.TempJob = !MySettings.TempJob;
                    if (MySettings.TempJob)
                        Rand_23.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_23.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_24)
                {
                    MySettings.ParaDisplay = !MySettings.ParaDisplay;
                    if (MySettings.ParaDisplay)
                        Rand_24.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_24.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_25)
                {
                    MySettings.Deliverwho = !MySettings.Deliverwho;
                    if (MySettings.Deliverwho)
                        Rand_25.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_25.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                SaveXmlSettings(MySettings, sNSPMSet);
                iMissionList.Clear();
            };
        }
        private void SettingsSet(UIMenu XMen)
        {
            var Selectmenu = YtmenuPool.AddSubMenu(XMen, MyLang.Othertext[67]);

            var Rand_01 = new UIMenuItem(MyLang.Othertext[68], MyLang.Othertext[69]);
            if (MySettings.ShowRoute)
                Rand_01.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_02 = new UIMenuItem(MyLang.Othertext[70], MyLang.Othertext[71]);
            if (MySettings.Subtitles)
                Rand_02.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_03 = new UIMenuItem(MyLang.Othertext[72], MyLang.Othertext[73]);
            if (MySettings.PhoneCone)
                Rand_03.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_04 = new UIMenuItem(MyLang.Othertext[74], MyLang.Othertext[75]);
            if (MySettings.EnemyStrength)
                Rand_04.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_05 = new UIMenuItem(MyLang.Othertext[76], MyLang.Othertext[77]);
            if (MySettings.FastTraveltoStart)
                Rand_05.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_06 = new UIMenuItem(MyLang.Othertext[78], MyLang.Othertext[79]);
            if (MySettings.PhoneAudio)
                Rand_06.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_07 = new UIMenuItem(MyLang.Othertext[80], MyLang.Othertext[81]);//Remove this phone...

            var Rand_08 = new UIMenuItem(MyLang.Othertext[82], MyLang.Othertext[83]);
            if (MySettings.BulderOnly)
                Rand_08.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_09 = new UIMenuItem(MyLang.Othertext[84], MyLang.Othertext[85]);
            if (MySettings.PhoneAnim)
                Rand_09.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_10 = new UIMenuItem(MyLang.Othertext[86], MyLang.Othertext[87]);
            if (iStartOnYAcht > 0)
                Rand_10.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            var Rand_11 = new UIMenuItem(MyLang.Othertext[88], MyLang.Othertext[89]);//setyachtpprice

            var Rand_12 = new UIMenuItem(MyLang.Othertext[90], MyLang.Othertext[91]);
            if (MySettings.PreLoadOnline)
                Rand_12.SetRightBadge(UIMenuItem.BadgeStyle.Tick);

            Selectmenu.AddItem(Rand_01);
            Selectmenu.AddItem(Rand_02);
            Selectmenu.AddItem(Rand_03);
            Selectmenu.AddItem(Rand_04);
            Selectmenu.AddItem(Rand_05);
            Selectmenu.AddItem(Rand_06);
            Selectmenu.AddItem(Rand_07);
            Selectmenu.AddItem(Rand_08);
            Selectmenu.AddItem(Rand_09);

            if (bYachtOwner)
                Selectmenu.AddItem(Rand_10);
            else
                Selectmenu.AddItem(Rand_11);

            Selectmenu.AddItem(Rand_12);

            AddCustomVehcis(Selectmenu);

            Selectmenu.OnItemSelect += (sender, item, index) =>
            {
                if (item == Rand_01)
                {
                    MySettings.ShowRoute = !MySettings.ShowRoute;
                    if (MySettings.ShowRoute)
                        Rand_01.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_01.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_02)
                {
                    MySettings.Subtitles = !MySettings.Subtitles;
                    if (MySettings.Subtitles)
                        Rand_02.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_02.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_03)
                {
                    MySettings.PhoneCone = !MySettings.PhoneCone;
                    if (MySettings.PhoneCone)
                        Rand_03.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                    {
                        Rand_03.SetRightBadge(UIMenuItem.BadgeStyle.None);
                        MySettings.PhoneAudio = true;
                        Rand_07.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    }

                }
                else if (item == Rand_04)
                {
                    MySettings.EnemyStrength = !MySettings.EnemyStrength;
                    if (MySettings.EnemyStrength)
                        Rand_04.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_04.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_05)
                {
                    MySettings.FastTraveltoStart = !MySettings.FastTraveltoStart;
                    if (MySettings.FastTraveltoStart)
                        Rand_05.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_05.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_06)
                {
                    MySettings.PhoneAudio = !MySettings.PhoneAudio;
                    if (MySettings.PhoneAudio)
                        Rand_06.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                    {
                        Rand_06.SetRightBadge(UIMenuItem.BadgeStyle.None);
                        MySettings.PhoneCone = true;
                        Rand_06.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    }
                }
                else if (item == Rand_07)
                {
                    if (Rand_07.RightBadge != UIMenuItem.BadgeStyle.Tick)
                    {
                        vPhoneBoxList.Add(vPhoneCorona);
                        Rand_07.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    }
                }
                else if (item == Rand_08)
                {
                    MySettings.BulderOnly = !MySettings.BulderOnly;
                    if (MySettings.BulderOnly)
                        Rand_08.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_08.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_09)
                {
                    MySettings.PhoneAnim = !MySettings.PhoneAnim;
                    if (MySettings.PhoneAnim)
                        Rand_09.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_09.SetRightBadge(UIMenuItem.BadgeStyle.None);
                }
                else if (item == Rand_10)
                {
                    if (iStartOnYAcht > 0)
                        iStartOnYAcht = 0;
                    else
                        iStartOnYAcht = 10;

                    if (iStartOnYAcht > 0)
                        Rand_10.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                        Rand_10.SetRightBadge(UIMenuItem.BadgeStyle.None);

                    WriteNSMDat(15, iStartOnYAcht);
                    XMLSettings();
                }
                else if (item == Rand_11)
                {
                    bBankTransfer = true;
                    iCoinBats = 5;
                    YtmenuPool.CloseAllMenus();
                }
                else if (item == Rand_12)
                {
                    MySettings.PreLoadOnline = !MySettings.PreLoadOnline;
                    if (MySettings.PreLoadOnline)
                        Rand_12.SetRightBadge(UIMenuItem.BadgeStyle.Tick);
                    else
                    {
                        WriteNSMDat(0, 0);
                        Rand_12.SetRightBadge(UIMenuItem.BadgeStyle.None);
                        WriteNSMDat(15, 0);
                        iStartOnYAcht = 0;
                        iOwnaYacht = 0;
                        bYachtOwner = false;
                    }
                }
                SaveXmlSettings(MySettings, sNSPMSet);
            };
        }
        private void MishconBuild(UIMenu XMen)
        {
            LogThis("MishconBuild");

            var Buildmenu = YtmenuPool.AddSubMenu(XMen, "Build Menu");

            var Rand_01 = new UIMenuItem("Trucking", "Build a truck mission");

            var Rand_02 = new UIMenuItem("Packages", "Build a packages mission");

            var Rand_03 = new UIMenuItem("Convicts", "Build a convicts mission");

            var Rand_04 = new UIMenuItem("Fubar", "Build a fubar mission");

            var Rand_05 = new UIMenuItem("Ambulance", "Build a ambulance mission");

            var Rand_07 = new UIMenuItem("Johnny", "Build a Johnny mission");

            var Rand_08 = new UIMenuItem("Raceist", "Build a race");

            var Rand_09 = new UIMenuItem("BBBomb", "Build a BBBomb mission");

            var Rand_10 = new UIMenuItem("Hitman", "Build a assassination mission");

            var Rand_06 = new UIMenuItem("Sharks", "Build a sharks mission");

            Buildmenu.AddItem(Rand_01);
            Buildmenu.AddItem(Rand_02);
            Buildmenu.AddItem(Rand_03);
            Buildmenu.AddItem(Rand_04);
            Buildmenu.AddItem(Rand_05);
            Buildmenu.AddItem(Rand_07);
            Buildmenu.AddItem(Rand_08);
            Buildmenu.AddItem(Rand_09);
            Buildmenu.AddItem(Rand_10);
            Buildmenu.AddItem(Rand_06);

            Buildmenu.OnItemSelect += (sender, item, index) =>
            {
                if (item == Rand_01)
                    iBuildMode = 1;
                else if (item == Rand_02)
                    iBuildMode = 2;
                else if (item == Rand_03)
                    iBuildMode = 3;
                else if (item == Rand_04)
                    iBuildMode = 4;
                else if (item == Rand_05)
                    iBuildMode = 5;
                else if (item == Rand_06)
                    iBuildMode = 6;
                else if (item == Rand_07)
                    iBuildMode = 7;
                else if (item == Rand_08)
                    iBuildMode = 8;
                else if (item == Rand_09)
                    iBuildMode = 9;
                else if (item == Rand_10)
                    iBuildMode = 10;
                bBuildMode = true;
                Game.Player.IsInvincible = true;
                iBuildingUp = 0;
                CleanMishlists();
                YtmenuPool.CloseAllMenus();
            };
        }
        private void MishXMlListed(UIMenu XMen)
        {
            LogThis("MishXMlListed");

            string sOuter = sList_01[0];

            List<dynamic> xFiles = new List<dynamic>();

            for (int i = 0; i < sList_01.Count; i++)
            {
                string sting = sList_01[i];
                int iNum = sting.LastIndexOf("/") + 1;
                xFiles.Add(sting.Substring(iNum));
            }
            xFiles.Add("Create New File");
            sList_01.Add("Create New File");

            var ThisShizle = new UIMenuListItem("MissionXML", xFiles, 0);
            XMen.AddItem(ThisShizle);

            XMen.OnListChange += (sender, item, index) =>
            {
                if (item == ThisShizle)
                {
                    sOuter = sList_01[index];
                }
            };
            XMen.OnItemSelect += (sender, item, index) =>
            {
                if (sOuter == "Create New File")
                    sOuter = "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/" + Game.GetUserInput(255) + ".XML";
                BuildMissions(iBuildMode, sOuter);
                PostMess();
                iBuildMode = 99;
                YtmenuPool.CloseAllMenus();
            };
        }
        private void BackToBuildMenu(int iFileList)
        {
            LogThis("BackToBuildMenu");
            
            var mainMenu = new UIMenu(MyLang.Othertext[92], MyLang.Othertext[93]);
            YtmenuPool.Add(mainMenu);
            if (iFileList == 1)
                MishXMlListed(mainMenu);
            else
                MishconBuild(mainMenu);
            bOptionsMen = true;
            bMenuOpen = true;
            mainMenu.Visible = !mainMenu.Visible;
        }
        public bool WhileButtonDown(int CButt)
        {
            ButtonDisabler(CButt);

            bool bButt = Function.Call<bool>(Hash.IS_DISABLED_CONTROL_PRESSED, 0, CButt);

            if (bButt)
            {
                while (!Function.Call<bool>(Hash.IS_DISABLED_CONTROL_JUST_RELEASED, 0, CButt))
                    Script.Wait(1);
            }

            return bButt;
        }
        public bool ButtonDown(int CButt)
        {
            ButtonDisabler(CButt);
            return Function.Call<bool>(Hash.IS_DISABLED_CONTROL_PRESSED, 0, CButt);
        }
        private void ButtonDisabler(int LButt)
        {
            Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, LButt, true);
        }
        public class ClothBank
        {
            public int Char { get; set; }

            public List<int> ClothA { get; set; }
            public List<int> ClothB { get; set; }

            public List<int> ExtraA { get; set; }
            public List<int> ExtraB { get; set; }

            public int ClothA_00 { get; set; }
            public int ClothA_01 { get; set; }
            public int ClothA_02 { get; set; }
            public int ClothA_03 { get; set; }
            public int ClothA_04 { get; set; }
            public int ClothA_05 { get; set; }
            public int ClothA_06 { get; set; }
            public int ClothA_07 { get; set; }
            public int ClothA_08 { get; set; }
            public int ClothA_09 { get; set; }
            public int ClothA_10 { get; set; }
            public int ClothA_11 { get; set; }

            public int ClothB_00 { get; set; }
            public int ClothB_01 { get; set; }
            public int ClothB_02 { get; set; }
            public int ClothB_03 { get; set; }
            public int ClothB_04 { get; set; }
            public int ClothB_05 { get; set; }
            public int ClothB_06 { get; set; }
            public int ClothB_07 { get; set; }
            public int ClothB_08 { get; set; }
            public int ClothB_09 { get; set; }
            public int ClothB_10 { get; set; }
            public int ClothB_11 { get; set; }

            public int ExtraA_00 { get; set; }
            public int ExtraA_01 { get; set; }
            public int ExtraA_02 { get; set; }
            public int ExtraA_03 { get; set; }
            public int ExtraA_04 { get; set; }
            public int ExtraA_05 { get; set; }
            public int ExtraA_06 { get; set; }
            public int ExtraA_07 { get; set; }
            public int ExtraA_08 { get; set; }
            public int ExtraA_09 { get; set; }

            public int ExtraB_00 { get; set; }
            public int ExtraB_01 { get; set; }
            public int ExtraB_02 { get; set; }
            public int ExtraB_03 { get; set; }
            public int ExtraB_04 { get; set; }
            public int ExtraB_05 { get; set; }
            public int ExtraB_06 { get; set; }
            public int ExtraB_07 { get; set; }
            public int ExtraB_08 { get; set; }
            public int ExtraB_09 { get; set; }

            public ClothBank()
            {
                ClothA = new List<int>();
                ClothB = new List<int>();
                ExtraA = new List<int>();
                ExtraB = new List<int>();
            }
        }
        public void SaveOutfitMain(ClothBank config, string fileName)
        {
            XmlSerializer xml = new XmlSerializer(typeof(ClothBank));
            using (StreamWriter sw = new StreamWriter(fileName))
            {
                xml.Serialize(sw, config);
            }
        }
        public ClothBank LoadOutfit(string fileName)
        {
            XmlSerializer xml = new XmlSerializer(typeof(ClothBank));
            using (StreamReader sr = new StreamReader(fileName))
            {
                return (ClothBank)xml.Deserialize(sr);
            }
        }
        private void WriteMyWard(int iChar, List<int> iWard01, List<int> iWard02, List<int> iWardEx01, List<int> iWardEx02)
        {
            LogThis("WriteMyWard, iChar == " + iChar);
            WriteWardXML("MissionOut", iWard01, iWard02, iWardEx01, iWardEx02, iChar);
        }
        private void WriteWardXML(string sWardx, List<int> iWardX01, List<int> iWardX02, List<int> iWardXEX01, List<int> iWardXEX02, int iChar)
        {
            LogThis("WriteWardXML, sWardx == " + sWardx + ", iChar == " + iChar);

            ClothBank Cbank = new ClothBank
            {
                Char = iChar,
                ClothA = iWardX01,
                ClothB = iWardX02,
                ExtraA = iWardXEX01,
                ExtraB = iWardXEX02
            };

            SaveOutfitMain(Cbank, "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Outfit/" + sWardx + ".Xml");
        }
        private void WardOutPut(string sTing, Ped Peddy)
        {
            LogThis("WardOutPut, sTing == " + sTing);

            List<int> iWardrobe01 = new List<int>();
            List<int> iWardrobe02 = new List<int>();
            List<int> iWardrobe01Extra = new List<int>();
            List<int> iWardrobe02Extra = new List<int>();

            if (File.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Outfit/" + sTing))
            {
                ClothBank Cloths = LoadOutfit("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Outfit/" + sTing);

                iWardrobe01 = Cloths.ClothA;
                iWardrobe02 = Cloths.ClothB;

                iWardrobe01Extra = Cloths.ExtraA;
                iWardrobe02Extra = Cloths.ExtraB;

                XmlPedDresser(Peddy, Cloths.Char, iWardrobe01, iWardrobe02, iWardrobe01Extra, iWardrobe02Extra);
            }
            if (sTing == "MissionOut.Xml")
            {
                if (File.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Outfit/MissionOut.Xml"))
                    File.Delete("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Outfit/MissionOut.Xml");
            }
        }
        private void WardrobeScan(int iOutfit)
        {
            LogThis("WardrobeScan, iOutfit == " + iOutfit);

            List<int> iWardrobe01 = new List<int>();
            List<int> iWardrobe02 = new List<int>();
            List<int> iWardrobe01Extra = new List<int>();
            List<int> iWardrobe02Extra = new List<int>();

            iAmHash = Game.Player.Character.Model.Hash;

            int iPed = 0;
            if (Game.Player.Character.Model == PedHash.Franklin)
                iPed = 1;
            else if (Game.Player.Character.Model == PedHash.Michael)
                iPed = 2;
            else if (Game.Player.Character.Model == PedHash.Trevor)
                iPed = 3;
            else if (Game.Player.Character.Model == PedHash.FreemodeFemale01)
                iPed = 4;
            else if (Game.Player.Character.Model == PedHash.FreemodeMale01)
                iPed = 5;
            else
                iPed = 99;
            if (iPed == 99)
            {
                if (iOutfit == 2)
                {
                    Deliverwho_Backpack(iPed);
                }
            }
            else
            {
                Ped Peddy = Game.Player.Character;

                int iCloth = 0;
                while (iCloth < 12)
                {
                    int iDrawId = Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, Peddy.Handle, iCloth);
                    iWardrobe01.Add(iDrawId);
                    int iTextId = Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, Peddy.Handle, iCloth);
                    iWardrobe02.Add(iTextId);
                    iCloth = iCloth + 1;
                }
                int iExtra = 0;
                while (iExtra < 5)
                {
                    int iDrawId = Function.Call<int>(Hash.GET_PED_PROP_INDEX, Peddy.Handle, iExtra);
                    iWardrobe01Extra.Add(iDrawId);
                    int iTextId = Function.Call<int>(Hash.GET_PED_PROP_TEXTURE_INDEX, Peddy.Handle, iExtra);
                    iWardrobe02Extra.Add(iTextId);
                    iExtra = iExtra + 1;
                }

                if (iOutfit == 1)
                {
                    WriteMyWard(iPed, iWardrobe01, iWardrobe02, iWardrobe01Extra, iWardrobe02Extra);
                    Function.Call(Hash.CLEAR_ALL_PED_PROPS, Game.Player.Character.Handle);
                    TempAgency_04_Discises(iPed);
                }
                else if (iOutfit == 2)
                {
                    WriteMyWard(iPed, iWardrobe01, iWardrobe02, iWardrobe01Extra, iWardrobe02Extra);
                    Function.Call(Hash.CLEAR_ALL_PED_PROPS, Game.Player.Character.Handle);
                    Deliverwho_Backpack(iPed);
                }
            }
        }
        private void ReWrightWard()
        {
            LogThis("ReWrightWard");

            if (Directory.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Ward/"))
            {
                sWardrobe.Clear();
                string[] sWrite = Directory.GetFiles("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Ward/");

                if (sWrite.Count() > 0)
                {
                    for (int i = 0; i < sWrite.Count(); i++)
                    {
                        string sting = sWrite[i];

                        int iNum = sting.LastIndexOf("/") + 1;
                        sWardrobe.Add(sting.Substring(iNum));
                    }
                    for (int i = 0; i < sWardrobe.Count; i++)
                    {
                        if (sWardrobe[i].Contains("Franklin"))
                            ReReWrite(sWardrobe[i], 1);
                        else if (sWardrobe[i].Contains("Michael"))
                            ReReWrite(sWardrobe[i], 2);
                        else if (sWardrobe[i].Contains("Trevor"))
                            ReReWrite(sWardrobe[i], 3);
                        else if (sWardrobe[i].Contains("FreeFemale"))
                            ReReWrite(sWardrobe[i], 4);
                        else if (sWardrobe[i].Contains("FreeMale"))
                            ReReWrite(sWardrobe[i], 5);
                    }
                    for (int i = 0; i < sWardrobe.Count; i++)
                        File.Delete("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Ward/" + sWardrobe[i]);
                }
                else
                    UI.Notify("No Outfits to transfer");
            }
        }
        private void ReReWrite(string sDir, int iChar)
        {
            LogThis("ReReWrite");

            List<int> iWardrobe01 = new List<int>();
            List<int> iWardrobe02 = new List<int>();
            List<int> iWardrobe01Extra = new List<int>();
            List<int> iWardrobe02Extra = new List<int>();

            if (File.Exists("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Ward/" + sDir))
            {
                ClothBank Cloths = LoadOutfit("" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Ward/" + sDir);

                iWardrobe01.Add(Cloths.ClothA_00);
                iWardrobe01.Add(Cloths.ClothA_01);
                iWardrobe01.Add(Cloths.ClothA_02);
                iWardrobe01.Add(Cloths.ClothA_03);
                iWardrobe01.Add(Cloths.ClothA_04);
                iWardrobe01.Add(Cloths.ClothA_05);
                iWardrobe01.Add(Cloths.ClothA_06);
                iWardrobe01.Add(Cloths.ClothA_07);
                iWardrobe01.Add(Cloths.ClothA_08);
                iWardrobe01.Add(Cloths.ClothA_09);
                iWardrobe01.Add(Cloths.ClothA_10);
                iWardrobe01.Add(Cloths.ClothA_11);

                iWardrobe02.Add(Cloths.ClothB_00);
                iWardrobe02.Add(Cloths.ClothB_01);
                iWardrobe02.Add(Cloths.ClothB_02);
                iWardrobe02.Add(Cloths.ClothB_03);
                iWardrobe02.Add(Cloths.ClothB_04);
                iWardrobe02.Add(Cloths.ClothB_05);
                iWardrobe02.Add(Cloths.ClothB_06);
                iWardrobe02.Add(Cloths.ClothB_07);
                iWardrobe02.Add(Cloths.ClothB_08);
                iWardrobe02.Add(Cloths.ClothB_09);
                iWardrobe02.Add(Cloths.ClothB_10);
                iWardrobe02.Add(Cloths.ClothB_11);

                iWardrobe01Extra.Add(Cloths.ExtraA_00);
                iWardrobe01Extra.Add(Cloths.ExtraA_01);
                iWardrobe01Extra.Add(Cloths.ExtraA_02);
                iWardrobe01Extra.Add(Cloths.ExtraA_03);
                iWardrobe01Extra.Add(Cloths.ExtraA_04);
                iWardrobe01Extra.Add(Cloths.ExtraA_05);
                iWardrobe01Extra.Add(Cloths.ExtraA_06);
                iWardrobe01Extra.Add(Cloths.ExtraA_07);
                iWardrobe01Extra.Add(Cloths.ExtraA_08);
                iWardrobe01Extra.Add(Cloths.ExtraA_09);

                iWardrobe02Extra.Add(Cloths.ExtraB_00);
                iWardrobe02Extra.Add(Cloths.ExtraB_01);
                iWardrobe02Extra.Add(Cloths.ExtraB_02);
                iWardrobe02Extra.Add(Cloths.ExtraB_03);
                iWardrobe02Extra.Add(Cloths.ExtraB_04);
                iWardrobe02Extra.Add(Cloths.ExtraB_05);
                iWardrobe02Extra.Add(Cloths.ExtraB_06);
                iWardrobe02Extra.Add(Cloths.ExtraB_07);
                iWardrobe02Extra.Add(Cloths.ExtraB_08);
                iWardrobe02Extra.Add(Cloths.ExtraB_09);

                WriteWardXML(sDir, iWardrobe01, iWardrobe02, iWardrobe01Extra, iWardrobe02Extra, iChar);
            }
        }
        private void XmlPedDresser(Ped Peddy, int iPed, List<int> iWard01, List<int> iWard02, List<int> iWardEx01, List<int> iWardEx02)
        {
            LogThis("XmlPedDresser, iPed == " + iPed);


                Function.Call(Hash.CLEAR_ALL_PED_PROPS, Peddy.Handle);
                for (int i = 0; i < iWard01.Count; i++)
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Peddy.Handle, i, iWard01[i], iWard02[i], 2);

                for (int i = 0; i < iWardEx01.Count; i++)
                    Function.Call(Hash.SET_PED_PROP_INDEX, Peddy.Handle, i, iWardEx01[i], iWardEx02[i], false);

        }
        private void ClearPedProps(int iPed, Ped Peddy)
        {
            Function.Call(Hash.CLEAR_PED_PROP, Peddy.Handle, 0);    //0 Helmets, hats, earphones, masks
            Function.Call(Hash.CLEAR_PED_PROP, Peddy.Handle, 1);    //1 Glasses
            Function.Call(Hash.CLEAR_PED_PROP, Peddy.Handle, 2);    //2 Ear accessories
            Function.Call(Hash.CLEAR_PED_PROP, Peddy.Handle, 3);    //3 Bangles
            Function.Call(Hash.CLEAR_PED_PROP, Peddy.Handle, 4);    //4 Watch
        }
        public class RandomPlusList
        {
            public List<RandomPlus> BigRanList { get; set; }

            public RandomPlusList()
            {
                BigRanList = new List<RandomPlus>();
            }
        }
        public class RandomPlus
        {
            public List<int> RandNums { get; set; }

            public RandomPlus()
            {
                RandNums = new List<int>();
            }
        }
        public RandomPlusList LoadRando(string fileName)
        {
            XmlSerializer xml = new XmlSerializer(typeof(RandomPlusList));
            using (StreamReader sr = new StreamReader(fileName))
            {
                return (RandomPlusList)xml.Deserialize(sr);
            }
        }
        public void SaveRando(RandomPlusList config, string fileName)
        {
            XmlSerializer xml = new XmlSerializer(typeof(RandomPlusList));
            using (StreamWriter sw = new StreamWriter(fileName))
            {
                xml.Serialize(sw, config);
            }
        }
        public int FindRandom(int iList, int iMin, int iMax)
        {
            LogThis("FindRandom, iList == " + iList);

            int iBe = 0;
            if (iMin == iMax)
                iBe = iMin;
            else
            {
                RandomPlusList XSets = new RandomPlusList();

                if (File.Exists(sNSPMRandNum))
                {
                    XSets = LoadRando(sNSPMRandNum);

                    if (XSets.BigRanList.Count() < iList + 1)
                    {
                        for (int i = XSets.BigRanList.Count() - 1; i < iList + 1; i++)
                        {
                            RandomPlus iBlank = new RandomPlus();
                            XSets.BigRanList.Add(iBlank);
                        }
                    }

                    for (int i = 0; i < XSets.BigRanList[iList].RandNums.Count; i++)
                    {
                        if (XSets.BigRanList[iList].RandNums[i] > iMax)
                            XSets.BigRanList[iList].RandNums.RemoveAt(i);
                        else if (XSets.BigRanList[iList].RandNums[i] < iMin)
                            XSets.BigRanList[iList].RandNums.RemoveAt(i);
                    }

                    if (XSets.BigRanList[iList].RandNums.Count == 0)
                    {
                        for (int i = iMin; i < iMax + 1; i++)
                            XSets.BigRanList[iList].RandNums.Add(i);
                    }

                    int iRanNum = RandInt(0, XSets.BigRanList[iList].RandNums.Count - 1);
                    iBe = XSets.BigRanList[iList].RandNums[iRanNum];
                    XSets.BigRanList[iList].RandNums.RemoveAt(iRanNum);
                }
                else
                {
                    for (int i = 0; i < iList + 1; i++)
                    {
                        RandomPlus iBlank = new RandomPlus();
                        XSets.BigRanList.Add(iBlank);
                    }

                    for (int i = iMin; i < iMax + 1; i++)
                        XSets.BigRanList[iList].RandNums.Add(i);

                    int iRanNum = RandInt(0, XSets.BigRanList[iList].RandNums.Count - 1);
                    iBe = XSets.BigRanList[iList].RandNums[iRanNum];
                    XSets.BigRanList[iList].RandNums.RemoveAt(iRanNum);
                }
                SaveRando(XSets, sNSPMRandNum);
            }

            return iBe;
        }
        public bool PickupBling(Prop pLop)
        {
            bool bPlop = false;
            if (Game.Player.Character.Position.DistanceTo(pLop.Position) < 1.60f)
            {
                PropList_01.Remove(pLop);
                pLop.Delete();
                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "CHECKPOINT_UNDER_THE_BRIDGE", "HUD_MINI_GAME_SOUNDSET", true);
                bPlop = true;
            }
            return bPlop;
        }
        public int RandInt(int minNumber, int maxNumber)
        {
            int YouRand = 0;
            if (minNumber == maxNumber)
                YouRand = minNumber;
            else
                YouRand = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, minNumber, maxNumber);
            return YouRand;
        }
        public float RandFlow(float minNumber, float maxNumber)
        {
            return Function.Call<float>(Hash.GET_RANDOM_FLOAT_IN_RANGE, minNumber, maxNumber);
        }
        public bool BeInRange(float fRange, float fValue_01, float fValue_02)
        {
            bool bInRange = false;

            if (fValue_01 < fValue_02 + fRange)
            {
                if (fValue_01 > fValue_02 - fRange)
                    bInRange = true;
            }

            return bInRange;
        }
        public bool BeInAngle(float fRange, float fValue_01, float fValue_02)
        {
            bool bInRange = false;

            if (fValue_01 < fRange)
            {
                if (fValue_02 > 360.00 - fRange)
                    bInRange = true;
            }
            else if (fValue_02 < fRange)
            {
                if (fValue_01 > 360.00 - fRange)
                    bInRange = true;
            }
            else if (fValue_01 < fValue_02 + fRange)
            {
                if (fValue_01 > fValue_02 - fRange)
                    bInRange = true;
            }

            return bInRange;
        }
        public string ShowComs(int iNumber, bool bMoney, bool bHalfSecs)
        {
            string sThis = "";

            if (bMoney)
            {
                int iTrashed = iNumber;
                int imill = 0;
                int iThou = 0;
                int irest = 0;
                string sZero1 = "";
                string sZero2 = "";
                string sDone = "";
                if (iTrashed < 1000)
                {
                    irest = iTrashed;
                    sDone = "" + irest;
                }
                else if (iTrashed < 1000000)
                {
                    iThou = iTrashed / 1000;
                    irest = iTrashed - (iThou * 1000);
                    if (irest < 10)
                        sDone = "" + iThou + ",00" + irest;
                    else if (irest < 100)
                        sDone = "" + iThou + ",0" + irest;
                    else
                        sDone = "" + iThou + "," + irest;
                }
                else
                {

                    imill = iTrashed / 1000000;

                    iThou = iTrashed - (imill * 1000000);
                    iThou = iThou / 1000;

                    irest = iTrashed - (imill * 1000000);
                    irest = irest - (iThou * 1000);

                    if (iThou < 10)
                        sZero1 = "00";
                    else if (iThou < 100)
                        sZero1 = "0";
                    else
                        sZero1 = "";

                    if (irest < 10)
                        sZero2 = "00";
                    else if (irest < 100)
                        sZero2 = "0";
                    else
                        sZero2 = "";
                    sDone = "" + imill + "," + sZero1 + iThou + "," + sZero2 + irest;
                }

                sThis = sDone;
            }
            else
            {
                int iLapMin = iNumber;
                int iLapSec = iNumber;
                int iLapHse = iNumber;
                string Zero_01 = "";
                string Zero_02 = "";
                string Zero_03 = "";

                iLapMin = iNumber / 60000;
                if (iLapMin < 0)
                    iLapMin = 0;
                else
                {
                    iLapSec = iNumber - (iLapMin * 60000);
                    iLapHse = iNumber - (iLapMin * 60000);
                }
                iLapSec = iLapSec / 1000;
                if (iLapSec < 0)
                    iLapSec = 0;
                else
                    iLapHse = iLapHse - (iLapSec * 1000);
                iLapHse = iLapHse / 10;
                if (iLapHse < 0)
                    iLapHse = 0;

                if (iLapMin < 10)
                    Zero_01 = "0";
                else
                    Zero_01 = "";

                if (iLapSec < 10)
                    Zero_02 = "0";
                else
                    Zero_02 = "";

                if (iLapHse < 10)
                    Zero_03 = "0";
                else
                    Zero_03 = "";

                if (bHalfSecs)
                    sThis = "" + Zero_01 + iLapMin + ":" + Zero_02 + iLapSec + ":" + Zero_03 + iLapHse + "";
                else
                    sThis = "" + Zero_01 + "" + iLapMin + ":" + Zero_02 + "" + iLapSec + "";
            }

            return sThis;
        }
        private void FindTheTime(int iTime, int iOutput, string sLabel, bool bDrawPool)
        {
            if (iOutput == 1)
            {
                ttTextBar_01.Text = ShowComs(iTime, false, true);
                int iLapBig = iList_01[1] - Game.GameTime;
                iLapBig = iLapBig * -1;
                ttTextBar_03.Text = ShowComs(iLapBig, false, true);
            }
            else if (iOutput == 2)
                ttTextBar_03.Text = ShowComs(iTime, false, true);
            else if (iOutput == 3)
                UI.ShowSubtitle("" + sLabel + "~o~" + ShowComs(iTime, false, true) + "~w~.", 15000);
            else if (iOutput == 4)
                UI.ShowSubtitle("" + sLabel + "~o~" + ShowComs(iTime, false, false) + "~w~.", 15000);
            else if (iOutput == 5)
            {
                UI.ShowSubtitle("" + sLabel + "~o~" + ShowComs(iTime, false, true) + "~w~.", 15000);
                if (bSoloRace)
                    GameOver(false, " " + ShowComs(iTime, false, true) + " ", false, iCashReward);
                else
                    GameOver(false, "Pos : " + iList_01[3] + "/4, ", false, iCashReward);
            }
            else if (iOutput == 6)
            {
                int iDeduct = iTime / 250;
                iCashBouns = iCrash4Cash + iDeduct;
                if (iCashBouns < 1)
                    iCashBouns = 0;
                ttTextBar_01.Text = "$" + iCashBouns + "";
                ttTextBar_02.Text = ShowComs(iTime, false, false);
            }
            else if (iOutput == 7)
                ttTextBar_01.Text = ShowComs(iTime, false, false);
            else if (iOutput == 8)
            {
                //Redundant
                ttTextBar_02.Text = ShowComs(iTime, false, false);
            }
            else if (iOutput == 9)
                ttTextBar_02.Text = ShowComs(iTime, false, false);

            if (bDrawPool)
                VTBTimerPool.Draw();
        }
        private void ControlerUI(string sText, int iDuration)
        {
            Function.Call(Hash._SET_TEXT_COMPONENT_FORMAT, "STRING");
            Function.Call(Hash._ADD_TEXT_COMPONENT_STRING, sText);
            Function.Call(Hash._0x238FFE5C7B0498A6, false, false, false, iDuration);
        }
        private void StickySubTitle(string sTing)
        {
            Function.Call(Hash.SET_TEXT_FONT, 0);
            Function.Call(Hash.SET_TEXT_SCALE, 0.55f, 0.55f);
            Function.Call(Hash.SET_TEXT_COLOUR, 255, 255, 255, 255);//white
            Function.Call(Hash.SET_TEXT_CENTRE, true); //
            Function.Call(Hash.SET_TEXT_DROPSHADOW, 4, 0, 0, 0, 0);//Dunknow--changed last 255 to 0
            Function.Call(Hash._SET_TEXT_ENTRY, "TWOSTRINGS");//
            Function.Call(Hash._ADD_TEXT_COMPONENT_STRING, sTing);
            Function.Call(Hash._DRAW_TEXT, 0.5f, 0.9f);

            //SET_TEXT_FONT
            //FontChaletLondon = 0,
            //FontHouseScript = 1,
            //FontMonospace = 2,
            //FontWingDings = 3,
            //FontChaletComprimeCologne = 4,
            //FontPricedown = 7
        }
        private void BaseHelpBar(List<int> iButtons, List<string> sInstuctions)
        {
            LogThis("BaseHelpBar");

            iScale = Function.Call<int>((Hash)0x11FE353CF9733E6F, "instructional_buttons");

            while (!Function.Call<bool>(Hash.HAS_SCALEFORM_MOVIE_LOADED, iScale))
                Script.Wait(1);

            Function.Call(Hash._CALL_SCALEFORM_MOVIE_FUNCTION_VOID, iScale, "CLEAR_ALL");
            Function.Call(Hash._PUSH_SCALEFORM_MOVIE_FUNCTION, iScale, "TOGGLE_MOUSE_BUTTONS");
            Function.Call(Hash._PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_BOOL, 0);
            Function.Call(Hash._POP_SCALEFORM_MOVIE_FUNCTION_VOID);

            Function.Call(Hash._CALL_SCALEFORM_MOVIE_FUNCTION_VOID, iScale, "CREATE_CONTAINER");

            int iAddOns = 0;

            List<string> MyButt = new List<string>();

            for (int i = 0; i < iButtons.Count; i++)
            {
                if (iButtons[i] == 25 || iButtons[i] == 37)
                {
                    Function.Call(Hash._PUSH_SCALEFORM_MOVIE_FUNCTION, iScale, "SET_DATA_SLOT");
                    Function.Call(Hash._PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT, iAddOns);
                    Function.Call(Hash._PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_STRING, ")");
                    Function.Call(Hash._POP_SCALEFORM_MOVIE_FUNCTION_VOID);
                    iAddOns += 1;
                }
                string ThisKey = Function.Call<string>(Hash._0x0499D7B09FC9B407, 2, iButtons[i], 1);
                //MyButt.Add(ThisKey);

                Function.Call(Hash._PUSH_SCALEFORM_MOVIE_FUNCTION, iScale, "SET_DATA_SLOT");
                Function.Call(Hash._PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT, iAddOns);
                Function.Call(Hash._0xE83A3E3557A56640, ThisKey);
                Function.Call(Hash._PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_STRING, sInstuctions[i]);
                Function.Call(Hash._POP_SCALEFORM_MOVIE_FUNCTION_VOID);
                iAddOns += 1;
            }

            Function.Call(Hash._PUSH_SCALEFORM_MOVIE_FUNCTION, iScale, "DRAW_INSTRUCTIONAL_BUTTONS");
            Function.Call(Hash._PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT, -1);
            Function.Call(Hash._POP_SCALEFORM_MOVIE_FUNCTION_VOID);

            bDisplayUiBar = true;

        }
        private void LaunchTest()
        {
            bBuildMode = false;
            Game.Player.IsInvincible = false;
            Function.Call(Hash.SET_VEHICLE_POPULATION_BUDGET, 3);
            Function.Call(Hash.SET_PED_POPULATION_BUDGET, 3);
            Function.Call(Hash.SET_FAR_DRAW_VEHICLES, true);
            Function.Call(Hash.SET_EVERYONE_IGNORE_PLAYER, Game.Player.Character, false);

            CloseBaseHelpBar();
            CleanUpVehicles();
            CleanUpProps();
            CleanFakeBlips();

            VectorList_01.Clear();
            fList_01.Clear();

            bTestRun = true;
        }
        private void CloseBaseHelpBar()
        {
            LogThis("CloseBaseHelpBar");
            bDisplayUiBar = false;
            unsafe
            {
                int SF = iScale;
                Function.Call(Hash.SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED, &SF);
            }
        }
        private void HelperBarBuiler(int iPart, bool bWipe)
        {
            LogThis("HelperBarBuiler, Part == " + iPart+ " ,bwipe == " + bWipe);

            if (bWipe)
                CloseBaseHelpBar();

            List<string> MyInstructions = new List<string>();

            List<int> MyButtons = new List<int>();

            MyInstructions.Add("+");
            MyInstructions.Add("( " +MyLang.Othertext[92]);

            MyButtons.Add(25);
            MyButtons.Add(140);

            if (iPart == 10)
            {
                MyInstructions.Add("+");
                MyInstructions.Add(MyLang.Othertext[94]);
                MyInstructions.Add("( " + MyLang.Othertext[95]);

                MyButtons.Add(37);
                MyButtons.Add(21);
                MyButtons.Add(22);
            }
            else if (iPart == 11)
            {
                MyInstructions.Add("+");
                MyInstructions.Add(MyLang.Othertext[96]);
                MyInstructions.Add("( " + MyLang.Othertext[95]);

                MyButtons.Add(37);
                MyButtons.Add(21);
                MyButtons.Add(22);
            }
            else if (iBuildMode == 1)
            {
                if (iPart == 1)
                {
                    MyInstructions.Add("+");
                    MyInstructions.Add(MyLang.Othertext[97]);
                    MyInstructions.Add(MyLang.Othertext[98]);
                    MyInstructions.Add(MyLang.Othertext[99]);
                    MyInstructions.Add(MyLang.Othertext[100]);
                    MyInstructions.Add(MyLang.Othertext[101]);
                    MyInstructions.Add("( " + MyLang.Othertext[102]);

                    MyButtons.Add(37);
                    MyButtons.Add(47);
                    MyButtons.Add(51);
                    MyButtons.Add(27);
                    MyButtons.Add(173);
                    MyButtons.Add(21);
                    MyButtons.Add(22);
                }
                else if (iPart == 2)
                {
                    MyInstructions.Add("+");
                    MyInstructions.Add(MyLang.Othertext[103]);
                    MyInstructions.Add(MyLang.Othertext[104]);
                    MyInstructions.Add(MyLang.Othertext[105]);
                    MyInstructions.Add(MyLang.Othertext[106]);
                    MyInstructions.Add(MyLang.Othertext[107]);
                    MyInstructions.Add(MyLang.Othertext[108]);
                    MyInstructions.Add(MyLang.Othertext[109]);
                    MyInstructions.Add("( " + MyLang.Othertext[102]);

                    MyButtons.Add(37);
                    MyButtons.Add(47);
                    MyButtons.Add(51);
                    MyButtons.Add(34);
                    MyButtons.Add(35);
                    MyButtons.Add(32);
                    MyButtons.Add(33);
                    MyButtons.Add(21);
                    MyButtons.Add(22);
                }
                else if (iPart == 3)
                {
                    MyInstructions.Add("+");
                    MyInstructions.Add(MyLang.Othertext[102]);
                    MyInstructions.Add("( " + MyLang.Othertext[110]);

                    MyButtons.Add(37);
                    MyButtons.Add(22);
                    MyButtons.Add(21);
                }
                else if (iPart == 4)
                {
                    MyInstructions.Add("+");
                    MyInstructions.Add(MyLang.Othertext[111]);
                    MyInstructions.Add(MyLang.Othertext[102]);
                    MyInstructions.Add("( " + MyLang.Othertext[112]);

                    MyButtons.Add(37);
                    MyButtons.Add(23);
                    MyButtons.Add(22);
                    MyButtons.Add(21);
                }
                else if (iPart == 5)
                {
                    MyInstructions.Add("+");
                    MyInstructions.Add(MyLang.Othertext[97]);
                    MyInstructions.Add(MyLang.Othertext[98]);
                    MyInstructions.Add("( " + MyLang.Othertext[102]);

                    MyButtons.Add(37);
                    MyButtons.Add(47);
                    MyButtons.Add(51);
                    MyButtons.Add(22);
                }
            }
            else if (iBuildMode == 2)
            {
                if (iPart == 1)
                {
                    MyInstructions.Add("+");
                    MyInstructions.Add(MyLang.Othertext[113]);
                    MyInstructions.Add(MyLang.Othertext[114]);
                    MyInstructions.Add(MyLang.Othertext[115]);
                    MyInstructions.Add(MyLang.Othertext[102]);
                    MyInstructions.Add(MyLang.Othertext[99]);
                    MyInstructions.Add("( " + MyLang.Othertext[100]);

                    MyButtons.Add(37);
                    MyButtons.Add(47);
                    MyButtons.Add(51);
                    MyButtons.Add(21);
                    MyButtons.Add(22);
                    MyButtons.Add(27);
                    MyButtons.Add(173);
                }
                else if (iPart == 2)
                {
                    MyInstructions.Add("+");
                    MyInstructions.Add(MyLang.Othertext[103]);
                    MyInstructions.Add(MyLang.Othertext[104]);
                    MyInstructions.Add(MyLang.Othertext[105]);
                    MyInstructions.Add(MyLang.Othertext[106]);
                    MyInstructions.Add(MyLang.Othertext[107]);
                    MyInstructions.Add(MyLang.Othertext[108]);
                    MyInstructions.Add(MyLang.Othertext[109]);
                    MyInstructions.Add("( " + MyLang.Othertext[102]);

                    MyButtons.Add(37);
                    MyButtons.Add(47);
                    MyButtons.Add(51);
                    MyButtons.Add(34);
                    MyButtons.Add(35);
                    MyButtons.Add(32);
                    MyButtons.Add(33);
                    MyButtons.Add(21);
                    MyButtons.Add(22);
                }
                else if (iPart == 3)
                {
                    MyInstructions.Add("+");
                    MyInstructions.Add(MyLang.Othertext[102]);
                    MyInstructions.Add("( " + MyLang.Othertext[110]);

                    MyButtons.Add(37);
                    MyButtons.Add(22);
                    MyButtons.Add(21);
                }
                else if (iPart == 4)
                {
                    MyInstructions.Add("+");
                    MyInstructions.Add(MyLang.Othertext[111]);
                    MyInstructions.Add("( " + MyLang.Othertext[112]);

                    MyButtons.Add(37);
                    MyButtons.Add(21);
                    MyButtons.Add(22);
                }
                else if (iPart == 5)
                {
                    MyInstructions.Add("+");
                    MyInstructions.Add(MyLang.Othertext[113]);
                    MyInstructions.Add(MyLang.Othertext[114]);
                    MyInstructions.Add(MyLang.Othertext[115]);
                    MyInstructions.Add("( " + MyLang.Othertext[102]);

                    MyButtons.Add(37);
                    MyButtons.Add(47);
                    MyButtons.Add(51);
                    MyButtons.Add(21);
                    MyButtons.Add(22);
                }
                else if (iPart == 6)
                {
                    MyInstructions.Add("+");
                    MyInstructions.Add(MyLang.Othertext[102]);
                    MyInstructions.Add(MyLang.Othertext[116]);
                    MyInstructions.Add("( " + MyLang.Othertext[117]);

                    MyButtons.Add(37);
                    MyButtons.Add(22);
                    MyButtons.Add(21);
                    MyButtons.Add(23);
                }
            }
            else if (iBuildMode == 3)
            {
                if (iPart == 1)
                {
                    MyInstructions.Add("+");
                    MyInstructions.Add(MyLang.Othertext[102]);
                    MyInstructions.Add(MyLang.Othertext[118]);
                    MyInstructions.Add("( " + MyLang.Othertext[117]);

                    MyButtons.Add(37);
                    MyButtons.Add(22);
                    MyButtons.Add(21);
                    MyButtons.Add(23);
                }
            }
            else if (iBuildMode == 4)
            {
                if (iPart == 1)
                {
                    MyInstructions.Add("+");
                    MyInstructions.Add("( " + MyLang.Othertext[119]);

                    MyButtons.Add(37);
                    MyButtons.Add(21);
                }
                else if (iPart == 2)
                {
                    MyInstructions.Add("+");
                    MyInstructions.Add("( " + MyLang.Othertext[120]);

                    MyButtons.Add(37);
                    MyButtons.Add(21);
                }
                else if (iPart == 3)
                {
                    MyInstructions.Add("+");
                    MyInstructions.Add(MyLang.Othertext[121]);
                    MyInstructions.Add("( " + MyLang.Othertext[117]);

                    MyButtons.Add(37);
                    MyButtons.Add(21);
                    MyButtons.Add(23);
                }
            }
            else if (iBuildMode == 5)
            {
                if (iPart == 1)
                {
                    MyInstructions.Add("+");
                    MyInstructions.Add(MyLang.Othertext[122]);
                    MyInstructions.Add("( " + MyLang.Othertext[117]);

                    MyButtons.Add(37);
                    MyButtons.Add(21);
                    MyButtons.Add(23);
                }
            }
            else if (iBuildMode == 6)
            {
                if (iPart == 1)
                {
                    MyInstructions.Add("+");
                    MyInstructions.Add("( " + MyLang.Othertext[123]);

                    MyButtons.Add(37);
                    MyButtons.Add(21);
                }
                else if (iPart == 2)
                {
                    MyInstructions.Add("+");
                    MyInstructions.Add("( " + MyLang.Othertext[124]);

                    MyButtons.Add(37);
                    MyButtons.Add(21);
                }
            }
            else if (iBuildMode == 7)
            {
                if (iPart == 1)
                {
                    MyInstructions.Add("+");
                    MyInstructions.Add(MyLang.Othertext[113]);
                    MyInstructions.Add(MyLang.Othertext[114]);
                    MyInstructions.Add(MyLang.Othertext[115]);
                    MyInstructions.Add(MyLang.Othertext[102]);
                    MyInstructions.Add(MyLang.Othertext[125]);
                    MyInstructions.Add("( " + MyLang.Othertext[126]);

                    MyButtons.Add(37);
                    MyButtons.Add(47);
                    MyButtons.Add(51);
                    MyButtons.Add(21);
                    MyButtons.Add(22);
                    MyButtons.Add(27);
                    MyButtons.Add(173);
                }
                else if (iPart == 2)
                {
                    MyInstructions.Add("+");
                    MyInstructions.Add(MyLang.Othertext[102]);
                    MyInstructions.Add("( " + MyLang.Othertext[110]);

                    MyButtons.Add(37);
                    MyButtons.Add(22);
                    MyButtons.Add(21);
                }
            }
            else if (iBuildMode == 8)
            {
                if (iPart == 1)
                {
                    MyInstructions.Add("+");
                    MyInstructions.Add(MyLang.Othertext[113]);
                    MyInstructions.Add(MyLang.Othertext[114]);
                    MyInstructions.Add(MyLang.Othertext[127]);
                    MyInstructions.Add(MyLang.Othertext[128]);
                    MyInstructions.Add(MyLang.Othertext[125]);
                    MyInstructions.Add("( " + MyLang.Othertext[126]);

                    MyButtons.Add(37);
                    MyButtons.Add(47);
                    MyButtons.Add(51);
                    MyButtons.Add(21);
                    MyButtons.Add(22);
                    MyButtons.Add(27);
                    MyButtons.Add(173);
                }
                else if (iPart == 2)
                {
                    MyInstructions.Add("+");
                    MyInstructions.Add(MyLang.Othertext[113]);
                    MyInstructions.Add(MyLang.Othertext[114]);
                    MyInstructions.Add(MyLang.Othertext[115]);
                    MyInstructions.Add("( " + MyLang.Othertext[128]);

                    MyButtons.Add(37);
                    MyButtons.Add(47);
                    MyButtons.Add(51);
                    MyButtons.Add(21);
                    MyButtons.Add(22);
                }
                else if (iPart == 3)
                {
                    MyInstructions.Add("+");
                    MyInstructions.Add("( " + MyLang.Othertext[129]);

                    MyButtons.Add(37);
                    MyButtons.Add(21);
                }
                else if (iPart == 4)
                {
                    MyInstructions.Add("+");
                    MyInstructions.Add("( " + MyLang.Othertext[130]);

                    MyButtons.Add(37);
                    MyButtons.Add(21);
                }
                else if (iPart == 5)
                {
                    MyInstructions.Add("+");
                    MyInstructions.Add("( " + MyLang.Othertext[131] + iMissionVar_01);

                    MyButtons.Add(37);
                    MyButtons.Add(21);
                }
                else if (iPart == 6)
                {
                    MyInstructions.Add("+");
                    MyInstructions.Add(MyLang.Othertext[132]);
                    MyInstructions.Add("( " + MyLang.Othertext[111]);

                    MyButtons.Add(37);
                    MyButtons.Add(21);
                    MyButtons.Add(23);
                }
                else if (iPart == 7)
                {
                    MyInstructions.Add("+");
                    MyInstructions.Add(MyLang.Othertext[128]);
                    MyInstructions.Add(MyLang.Othertext[125]);
                    MyInstructions.Add("( " + MyLang.Othertext[126]);

                    MyButtons.Add(37);
                    MyButtons.Add(22);
                    MyButtons.Add(47);
                    MyButtons.Add(51);
                }
            }
            else if (iBuildMode == 9)
            {
                if (iPart == 1)
                {
                    MyInstructions.Add("+");
                    MyInstructions.Add(MyLang.Othertext[133]);
                    MyInstructions.Add(MyLang.Othertext[134]);
                    MyInstructions.Add("( " + MyLang.Othertext[111]);

                    MyButtons.Add(37);
                    MyButtons.Add(22);
                    MyButtons.Add(21);
                    MyButtons.Add(23);
                }
            }
            else if (iBuildMode == 10)
            {
                if (iPart == 1)
                {
                    MyInstructions.Add("+");
                    MyInstructions.Add("( " + MyLang.Othertext[135]);

                    MyButtons.Add(37);
                    MyButtons.Add(21);
                }
                else if (iPart == 2)
                {
                    MyInstructions.Add("+");
                    MyInstructions.Add(MyLang.Othertext[102]);
                    MyInstructions.Add("( " + MyLang.Othertext[136]);

                    MyButtons.Add(37);
                    MyButtons.Add(22);
                    MyButtons.Add(21);
                }
                else if (iPart == 3)
                {
                    MyInstructions.Add("+");
                    MyInstructions.Add(MyLang.Othertext[102]);
                    MyInstructions.Add(MyLang.Othertext[137]);
                    MyInstructions.Add("( " + MyLang.Othertext[138]);

                    MyButtons.Add(37);
                    MyButtons.Add(22);
                    MyButtons.Add(21);
                    MyButtons.Add(23);
                }
                else if (iPart == 4)
                {
                    MyInstructions.Add("+");
                    MyInstructions.Add(MyLang.Othertext[102]);
                    MyInstructions.Add(MyLang.Othertext[137]);
                    MyInstructions.Add("( " + MyLang.Othertext[139]);

                    MyButtons.Add(37);
                    MyButtons.Add(22);
                    MyButtons.Add(21);
                    MyButtons.Add(23);
                }
                else if (iPart == 5)
                {
                    MyInstructions.Add("+");
                    MyInstructions.Add(MyLang.Othertext[102]);
                    MyInstructions.Add("( " + MyLang.Othertext[139]);

                    MyButtons.Add(37);
                    MyButtons.Add(22);
                    MyButtons.Add(21);
                }
            }
            BaseHelpBar(MyButtons, MyInstructions);
        }
        private void ExitBuilders()
        {
            CleanUpPeds();
            CleanUpProps();
            CleanUpVehicles();
            CloseBaseHelpBar();
            CleanFakeBlips();

            PostMess();

            MyMissions.TruckersXM.Clear();
            MyMissions.ConsXM.Clear();
            MyMissions.PackersXM.Clear();
            MyMissions.FubardXM.Clear();
            MyMissions.AmbuXM.Clear();
            MyMissions.JohnsXM.Clear();
            MyMissions.RaceXM.Clear();
            MyMissions.BombXM.Clear();
            MyMissions.HitXM.Clear();
            MyMissions.SharksXM.Clear();

            bBuildMode = false;
            iBuildMode = 99;
        }
        private void QuickSub(string sTing)
        {
            UI.Notify(sTing);
        }
        public string GetEntName(string MyEnt)
        {
            string VehName = Function.Call<string>(Hash.GET_DISPLAY_NAME_FROM_VEHICLE_MODEL, Function.Call<int>(Hash.GET_HASH_KEY, MyEnt));
            if (Function.Call<bool>(Hash.DOES_TEXT_LABEL_EXIST, VehName))
                VehName = Function.Call<string>(Hash._GET_LABEL_TEXT, VehName);
            else
                VehName = "";

            return VehName;
        }
        public string GetEntNameHash(int iHash)
        {
            LogThis("GetEntNameHash");
            string VehName = Function.Call<string>(Hash.GET_DISPLAY_NAME_FROM_VEHICLE_MODEL, iHash);
            if (Function.Call<bool>(Hash.DOES_TEXT_LABEL_EXIST, VehName))
                VehName = Function.Call<string>(Hash._GET_LABEL_TEXT, VehName);
            else
                VehName = "";

            return VehName;
        }
        private void LoadInteriors(int iPList, bool bAdd)
        {
            LogThis("LoadInteriors == iPList" + iPList + "bAdd == " + bAdd);

            List<int> iColour = new List<int>();

            int iRef = 0;

            if (iPList == 1)
            {
                iRef = Function.Call<int>(Hash.GET_INTERIOR_AT_COORDS_WITH_TYPE, -1604.664f, -3012.583f, -79.9999f, "ba_dlc_int_01_ba");

                if (bAdd)
                {
                    if (!bYouGotAClub)
                    {
                        if (Function.Call<bool>(Hash._IS_INTERIOR_PROP_ENABLED, iRef, "Int01_ba_Style01") || Function.Call<bool>(Hash._IS_INTERIOR_PROP_ENABLED, iRef, "Int01_ba_Style02") || Function.Call<bool>(Hash._IS_INTERIOR_PROP_ENABLED, iRef, "Int01_ba_Style03"))
                            bYouGotAClub = true;
                    }
                    sIPLSAves.Clear();
                    sIPLSAves.Add("Int01_ba_security_upgrade");
                    sIPLSAves.Add("Int01_ba_equipment_setup");
                    int iRandG = FindRandom(62, 1, 3);
                    if (iRandG == 1)
                        sIPLSAves.Add("Int01_ba_Style01");
                    else if (iRandG == 2)
                        sIPLSAves.Add("Int01_ba_Style02");
                    else
                        sIPLSAves.Add("Int01_ba_Style03");

                    sIPLSAves.Add("int01_ba_lights_screen");
                    sIPLSAves.Add("Int01_ba_Screen");

                    if (iList_01[1] != 3)
                        sIPLSAves.Add("Int01_ba_bar_content");

                    if (iList_01[1] != 3)
                    {
                        iRandG = RandInt(1, 3);
                        if (iRandG == 1)
                            sIPLSAves.Add("Int01_ba_booze_01");
                        else if (iRandG == 2)
                            sIPLSAves.Add("Int01_ba_booze_02");
                        else
                            sIPLSAves.Add("Int01_ba_booze_03");
                    }


                    iRandG = RandInt(1, 4);
                    if (iRandG == 1)
                        sIPLSAves.Add("Int01_ba_dj01");
                    else if (iRandG == 2)
                        sIPLSAves.Add("Int01_ba_dj02");
                    else if (iRandG == 3)
                        sIPLSAves.Add("Int01_ba_dj03");
                    else
                        sIPLSAves.Add("Int01_ba_dj04");

                    iRandG = RandInt(1, 16);
                    if (iRandG == 1)
                        sIPLSAves.Add("DJ_01_Lights_01");
                    else if (iRandG == 2)
                        sIPLSAves.Add("DJ_02_Lights_01");
                    else if (iRandG == 3)
                        sIPLSAves.Add("DJ_03_Lights_01");
                    else if (iRandG == 4)
                        sIPLSAves.Add("DJ_04_Lights_01");
                    else if (iRandG == 5)
                        sIPLSAves.Add("DJ_01_Lights_02");
                    else if (iRandG == 6)
                        sIPLSAves.Add("DJ_02_Lights_02");
                    else if (iRandG == 7)
                        sIPLSAves.Add("DJ_03_Lights_02");
                    else if (iRandG == 8)
                        sIPLSAves.Add("DJ_04_Lights_02");
                    else if (iRandG == 9)
                        sIPLSAves.Add("DJ_01_Lights_03");
                    else if (iRandG == 10)
                        sIPLSAves.Add("DJ_02_Lights_03");
                    else if (iRandG == 11)
                        sIPLSAves.Add("DJ_03_Lights_03");
                    else if (iRandG == 12)
                        sIPLSAves.Add("DJ_04_Lights_03");
                    else if (iRandG == 13)
                        sIPLSAves.Add("DJ_01_Lights_04");
                    else if (iRandG == 14)
                        sIPLSAves.Add("DJ_02_Lights_04");
                    else if (iRandG == 15)
                        sIPLSAves.Add("DJ_03_Lights_04");
                    else
                        sIPLSAves.Add("DJ_04_Lights_04");

                    sIPLSAves.Add("light_rigs_off");
                    sIPLSAves.Add("Int01_ba_lightgrid_01");
                    sIPLSAves.Add("Int01_ba_equipment_upgrade");

                    iRandG = RandInt(1, 9);
                    if (iRandG == 1)
                        sIPLSAves.Add("Int01_ba_clubname_01");
                    else if (iRandG == 2)
                        sIPLSAves.Add("Int01_ba_clubname_02");
                    else if (iRandG == 3)
                        sIPLSAves.Add("Int01_ba_clubname_03");
                    else if (iRandG == 4)
                        sIPLSAves.Add("Int01_ba_clubname_04");
                    else if (iRandG == 5)
                        sIPLSAves.Add("Int01_ba_clubname_05");
                    else if (iRandG == 6)
                        sIPLSAves.Add("Int01_ba_clubname_06");
                    else if (iRandG == 7)
                        sIPLSAves.Add("Int01_ba_clubname_07");
                    else if (iRandG == 8)
                        sIPLSAves.Add("Int01_ba_clubname_08");
                    else
                        sIPLSAves.Add("Int01_ba_clubname_09");

                    sIPLSAves.Add("Int01_ba_dry_ice");
                    sIPLSAves.Add("Int01_ba_deliverytruck");

                    iRandG = RandInt(1, 10);
                    if (iRandG == 1)
                        sIPLSAves.Add("Int01_ba_trophy01");
                    else if (iRandG == 2)
                        sIPLSAves.Add("Int01_ba_trophy02");
                    else if (iRandG == 3)
                        sIPLSAves.Add("Int01_ba_trophy03");
                    else if (iRandG == 4)
                        sIPLSAves.Add("Int01_ba_trophy04");
                    else if (iRandG == 5)
                        sIPLSAves.Add("Int01_ba_trophy05");
                    else if (iRandG == 6)
                        sIPLSAves.Add("Int01_ba_trophy07");
                    else if (iRandG == 7)
                        sIPLSAves.Add("Int01_ba_trophy08");
                    else if (iRandG == 8)
                        sIPLSAves.Add("Int01_ba_trophy09");
                    else if (iRandG == 9)
                        sIPLSAves.Add("Int01_ba_trophy10");
                    else
                        sIPLSAves.Add("Int01_ba_trophy11");

                    sIPLSAves.Add("Int01_ba_trad_lights");
                }
            }
            else if (iPList == 2)
            {
                iRef = Function.Call<int>(Hash.GET_INTERIOR_AT_COORDS_WITH_TYPE, -1266.0f, -3014.0f, -47.0f, "sm_smugdlc_int_01");

                if (bAdd)
                {
                    sIPLSAves.Clear();
                    int iRanColur = RandInt(1, 5);

                    int iRandG = RandInt(1, 3);
                    if (iRandG == 1)
                        sIPLSAves.Add("set_lighting_hangar_a");
                    else if (iRandG == 2)
                        sIPLSAves.Add("set_lighting_hangar_b");
                    else
                        sIPLSAves.Add("set_lighting_hangar_c");
                    iColour.Add(-1);
                    sIPLSAves.Add("set_tint_shell");
                    iColour.Add(iRanColur);
                    //sIPLSAves.Add("set_bedroom_tint﻿");
                    //iColour.Add(iRanColur);

                    //iRandG = RandInt(1, 2);
                    //if (iRandG == 1)
                    //    sIPLSAves.Add("set_bedroom_traditional");
                    //else 
                    //    sIPLSAves.Add("set_bedroom_modern");
                    //iColour.Add(-1);
                    //sIPLSAves.Add("set_bedroom_clutter﻿");
                    //iColour.Add(-1);
                    //sIPLSAves.Add("set_bedroom_blinds_open");
                    //iColour.Add(-1);
                    sIPLSAves.Add("set_crane_tint﻿");
                    iColour.Add(iRanColur);
                    sIPLSAves.Add("set_modarea");
                    iColour.Add(iRanColur);
                    sIPLSAves.Add("set_lighting_tint_props");
                    iColour.Add(iRanColur);

                    iRandG = RandInt(1, 2);
                    if (iRandG == 1)
                    {
                        sIPLSAves.Add("set_floor_1");
                        iColour.Add(-1);
                    }
                    else
                    {
                        sIPLSAves.Add("set_floor_2");
                        iColour.Add(iRanColur);
                    }

                    iRandG = RandInt(1, 9);
                    if (iRandG == 1)
                        sIPLSAves.Add("set_floor_decal_1");
                    else if (iRandG == 2)
                        sIPLSAves.Add("set_floor_decal_2");
                    else if (iRandG == 3)
                        sIPLSAves.Add("set_floor_decal_3");
                    else if (iRandG == 4)
                        sIPLSAves.Add("set_floor_decal_4");
                    else if (iRandG == 5)
                        sIPLSAves.Add("set_floor_decal_5");
                    else if (iRandG == 6)
                        sIPLSAves.Add("set_floor_decal_6");
                    else if (iRandG == 7)
                        sIPLSAves.Add("set_floor_decal_7");
                    else if (iRandG == 8)
                        sIPLSAves.Add("set_floor_decal_8");
                    else
                        sIPLSAves.Add("set_floor_decal_9");
                    iColour.Add(iRanColur);

                    iRandG = RandInt(1, 3);
                    if (iRandG == 1)
                        sIPLSAves.Add("set_office_basic");
                    else if (iRandG == 2)
                        sIPLSAves.Add("set_office_traditional");
                    else
                        sIPLSAves.Add("set_office_modern");
                    iColour.Add(-1);

                    iRandG = RandInt(1, 10);
                    if (iRandG == 1)
                        sIPLSAves.Add("set_lighting_wall_tint01");
                    else if (iRandG == 2)
                        sIPLSAves.Add("set_lighting_wall_tint02");
                    else if (iRandG == 3)
                        sIPLSAves.Add("set_lighting_wall_tint03");
                    else if (iRandG == 4)
                        sIPLSAves.Add("set_lighting_wall_tint04");
                    else if (iRandG == 5)
                        sIPLSAves.Add("set_lighting_wall_tint05");
                    else if (iRandG == 6)
                        sIPLSAves.Add("set_lighting_wall_tint06");
                    else if (iRandG == 7)
                        sIPLSAves.Add("set_lighting_wall_tint07");
                    else if (iRandG == 8)
                        sIPLSAves.Add("set_lighting_wall_tint08");
                    else if (iRandG == 9)
                        sIPLSAves.Add("set_lighting_wall_tint09");
                    else
                        sIPLSAves.Add("set_lighting_wall_neutral");
                    iColour.Add(-1);
                }
            }
            else if (iPList == 3)
            {
                iRef = Function.Call<int>(Hash.GET_INTERIOR_AT_COORDS, 1100.0f, 220.0f, -50.0f);
            }
            else if (iPList == 4)
            {
                iRef = Function.Call<int>(Hash.GET_INTERIOR_AT_COORDS, 483.2f, 4810.5f, -58.9f);

                if (bAdd)
                {
                    sIPLSAves.Clear();
                    int iRanColur = RandInt(1, 10);
                    sIPLSAves.Add("set_int_02_shell");
                    iColour.Add(iRanColur);

                    int iRandG = RandInt(1, 9);
                    if (iRandG == 1)
                        sIPLSAves.Add("set_int_02_decal_01");
                    else if (iRandG == 2)
                        sIPLSAves.Add("set_int_02_decal_02");
                    else if (iRandG == 3)
                        sIPLSAves.Add("set_int_02_decal_03");
                    else if (iRandG == 4)
                        sIPLSAves.Add("set_int_02_decal_04");
                    else if (iRandG == 5)
                        sIPLSAves.Add("set_int_02_decal_05");
                    else if (iRandG == 6)
                        sIPLSAves.Add("set_int_02_decal_06");
                    else if (iRandG == 7)
                        sIPLSAves.Add("set_int_02_decal_07");
                    else if (iRandG == 8)
                        sIPLSAves.Add("set_int_02_decal_08");
                    else
                        sIPLSAves.Add("set_int_02_decal_09");
                    iColour.Add(-1);

                    iRandG = RandInt(1, 3);
                    if (iRandG == 1)
                        sIPLSAves.Add("set_int_02_trophy1");
                    else if (iRandG == 2)
                        sIPLSAves.Add("set_int_02_trophy_iaa");
                    else
                        sIPLSAves.Add("set_int_02_trophy_sub");
                    iColour.Add(iRanColur);
                    sIPLSAves.Add("set_int_02_cannon﻿");
                    iColour.Add(-1);
                    sIPLSAves.Add("set_int_02_no_security﻿");
                    iColour.Add(-1);
                    iRandG = RandInt(1, 3);
                    if (iRandG == 1)
                        sIPLSAves.Add("set_int_02_lounge1");
                    else if (iRandG == 2)
                        sIPLSAves.Add("set_int_02_lounge2");
                    else
                        sIPLSAves.Add("set_int_02_lounge3");
                    iColour.Add(-1);
                    iRandG = RandInt(1, 3);
                    if (iRandG == 1)
                        sIPLSAves.Add("set_int_02_sleep");
                    else if (iRandG == 2)
                        sIPLSAves.Add("set_int_02_sleep2");
                    else
                        sIPLSAves.Add("set_int_02_sleep3");
                    iColour.Add(-1);

                    iRandG = RandInt(1, 5);
                    if (iRandG == 1)
                        sIPLSAves.Add("set_int_02_clutter1");
                    else if (iRandG == 2)
                        sIPLSAves.Add("set_int_02_clutter2");
                    else if (iRandG == 3)
                        sIPLSAves.Add("set_int_02_clutter3");
                    else if (iRandG == 4)
                        sIPLSAves.Add("set_int_02_clutter4");
                    else
                        sIPLSAves.Add("set_int_02_clutter5");                    
                    iColour.Add(-1);
                }
            }
            else if (iPList == 5)
            {
                iRef = Function.Call<int>(Hash.GET_INTERIOR_AT_COORDS, 1380.00f, 200.00f, -50.00f);
            }

            if (bAdd)
            {
                if (!bYouGotAClub)
                {
                    if (Function.Call<bool>(Hash.IS_VALID_INTERIOR, iRef))
                        Function.Call((Hash)0x2CA429C029CCF247, iRef);

                    for (int i = 0; i < sIPLSAves.Count; i++)
                    {
                        if (!Function.Call<bool>(Hash._IS_INTERIOR_PROP_ENABLED, iRef, sIPLSAves[i]))
                            Function.Call(Hash._ENABLE_INTERIOR_PROP, iRef, sIPLSAves[i]);

                        if (iColour.Count > 0)
                        {
                            if (iColour[i] != -1)
                                Function.Call((Hash)0xC1F1920BAF281317, iRef, sIPLSAves[i], iColour[i]);
                        }
                    }
                    Function.Call(Hash.REFRESH_INTERIOR, iRef);
                }
            }
            else
            {
                if (Function.Call<bool>(Hash.IS_VALID_INTERIOR, iRef))
                    Function.Call(Hash.UNPIN_INTERIOR, iRef);

                for (int i = 0; i < sIPLSAves.Count; i++)
                {
                    if (Function.Call<bool>(Hash._IS_INTERIOR_PROP_ENABLED, iRef, sIPLSAves[i]))
                        Function.Call(Hash._DISABLE_INTERIOR_PROP, iRef, sIPLSAves[i]);
                }
            }
        }
        private void LoadOnlineIps(bool bAdd)
        {
            LogThis("LoadOnlineIps, bAdd == " + bAdd);

            List<string> sAddIpl = new List<string>
            {
                "vw_casino_billboard_lod",
                "vw_casino_billboard_lod(1)",
                "vw_casino_billboard",
                "hei_dlc_windows_casino_lod",
                "hei_dlc_windows_casino",
                "hei_dlc_casino_door_lod",
                "hei_dlc_casino_door",
                "hei_dlc_casino_aircon_lod",
                "hei_dlc_casino_aircon",

                "hei_dlc_vw_roofdoors_locked",
                "vw_ch3_additions",
                "vw_ch3_additions_long_0",
                "vw_ch3_additions_strm_0",
                "vw_dlc_casino_door",
                "vw_dlc_casino_door_lod"
            };

            if (bAdd)
            {
                Function.Call(Hash._ENABLE_MP_DLC_MAPS, true);
                Function.Call(Hash._LOAD_MP_DLC_MAPS);

                Function.Call((Hash)0x9BAE5AD2508DF078, false);

                for (int i = 0; i < sAddIpl.Count; i++)
                {
                    if (!Function.Call<bool>(Hash.IS_IPL_ACTIVE, sAddIpl[i]))
                        Function.Call(Hash.REQUEST_IPL, sAddIpl[i]);
                }

                bOnlineStuffLoaded = true;
            }
            else
            {
                for (int i = 0; i < sAddIpl.Count; i++)
                {
                    if (Function.Call<bool>(Hash.IS_IPL_ACTIVE, sAddIpl[i]))
                        Function.Call(Hash.REMOVE_IPL, sAddIpl[i]);
                }


                Function.Call(Hash._ENABLE_MP_DLC_MAPS, false);
                Function.Call(Hash._UNLOAD_MP_DLC_MAPS);

                bOnlineStuffLoaded = false;
            }

        }
        private void LoadInMissionIPLs(int iPList, bool bAdd, bool bCustom)
        {
            LogThis("LoadInMissionIPLs, iPList == " + iPList + ", bAdd == " + bAdd);

            List<string> sAddIpl = new List<string>();

            if (iPList == 1)
            {
                sAddIpl.Add("bkr_biker_interior_placement_interior_4_biker_dlc_int_ware03_milo_");
                sMissionVar_01 = "Coke";
            }//BikerCoke
            else if (iPList == 2)
            {
                sAddIpl.Add("bkr_biker_interior_placement_interior_5_biker_dlc_int_ware04_milo_");
                sMissionVar_01 = "Cash";
            }//Cash
            else if (iPList == 3)
            {
                sAddIpl.Add("bkr_biker_interior_placement_interior_6_biker_dlc_int_ware05_milo_");
                sMissionVar_01 = "Documents";
            }//Docs
            else if (iPList == 4)
            {
                sAddIpl.Add("bkr_biker_interior_placement_interior_2_biker_dlc_int_ware01_milo_");
                sMissionVar_01 = "Meth";
            }//Meth
            else if (iPList == 5)
            {
                sAddIpl.Add("bkr_biker_interior_placement_interior_3_biker_dlc_int_ware02_milo_");
                sMissionVar_01 = "Weed";
            }//Weed
            else if (iPList == 6)
            {
                sAddIpl.Add("ex_exec_warehouse_placement_interior_2_int_warehouse_l_dlc_milo");
                sMissionVar_01 = "Large Warehouse";
            }//LargeWare
            else if (iPList == 7)
            {
                sAddIpl.Add("ex_exec_warehouse_placement_interior_0_int_warehouse_m_dlc_milo");
                sMissionVar_01 = "Medium Warehouse";
            }//MedWare
            else if (iPList == 8)
            {
                sAddIpl.Add("ex_exec_warehouse_placement_interior_1_int_warehouse_s_dlc_milo");
                sMissionVar_01 = "Small Warehouse";
            }//SmalWare
            else if (iPList == 9)
            {
                sAddIpl.Add("gr_case10_bunkerclosed");
                sAddIpl.Add("gr_case9_bunkerclosed");
                sAddIpl.Add("gr_case3_bunkerclosed");
                sAddIpl.Add("gr_case0_bunkerclosed");
                sAddIpl.Add("gr_case1_bunkerclosed");
                sAddIpl.Add("gr_case2_bunkerclosed");
                sAddIpl.Add("gr_case5_bunkerclosed");
                sAddIpl.Add("gr_case7_bunkerclosed");
                sAddIpl.Add("gr_case11_bunkerclosed");
                sAddIpl.Add("gr_case6_bunkerclosed");
                sAddIpl.Add("gr_case4_bunkerclosed");

                sAddIpl.Add("gr_grdlc_interior_placement_interior_1_grdlc_int_02_milo_");
                sMissionVar_01 = "Bunker";
            }//Bunkers
            else if (iPList == 10)
            {
                if (bAdd)
                {
                    sIPLSAves.Clear();

                    sAddIpl.Add("apa_v_mp_h_01_b");
                    sAddIpl.Add("apa_v_mp_h_02_b");
                    sAddIpl.Add("apa_v_mp_h_03_b");
                    sAddIpl.Add("apa_v_mp_h_04_b");
                    sAddIpl.Add("apa_v_mp_h_05_b");
                    sAddIpl.Add("apa_v_mp_h_06_b");
                    sAddIpl.Add("apa_v_mp_h_07_b");
                    sAddIpl.Add("apa_v_mp_h_08_b");
                    sIPLSAves.Add(sAddIpl[RandInt(0, sAddIpl.Count - 1)]);

                    sMissionVar_01 = "Appy";
                }
            }//CustomApp
            else if (iPList == 11)
            {
                //sAddIpl.Add("entity_set_meet_crew");
                sAddIpl.Add("entity_set_meet_lights");
                //sAddIpl.Add("entity_set_player");
                //sAddIpl.Add("entity_set_time_trial");
            }//Carball
            else if (iPList == 12)
            {
                sAddIpl.Add("ba_case1_forsale");
                sAddIpl.Add("ba_barriers_case1");
                sAddIpl.Add("ba_int_placement_ba_interior_0_dlc_int_01_ba_milo_");
            }//NightClubMissionRow--Correct
            else if (iPList == 13)
            {
                sAddIpl.Add("ba_case8_forsale");
                sAddIpl.Add("ba_barriers_case8");
                sAddIpl.Add("ba_int_placement_ba_interior_0_dlc_int_01_ba_milo_");
            }//West Vinewood 
            else if (iPList == 14)
            {
                sAddIpl.Add("ba_case3_forsale");
                sAddIpl.Add("ba_barriers_case3");
                sAddIpl.Add("ba_int_placement_ba_interior_0_dlc_int_01_ba_milo_");
            }//Vinewood 
            else if (iPList == 15)
            {
                sAddIpl.Add("ba_case9_forsale");
                sAddIpl.Add("ba_barriers_case9");
                sAddIpl.Add("ba_int_placement_ba_interior_0_dlc_int_01_ba_milo_");
            }//Vespucci  
            else if (iPList == 16)
            {
                sAddIpl.Add("ba_case5_forsale");
                sAddIpl.Add("ba_barriers_case5");
                sAddIpl.Add("ba_int_placement_ba_interior_0_dlc_int_01_ba_milo_");
            }//DelPerro 
            else if (iPList == 17)
            {
                sAddIpl.Add("sm_smugdlc_interior_placement");
                sAddIpl.Add("sm_smugdlc_interior_placement_interior_0_smugdlc_int_01_milo_");
            }//Hanger
            else if (iPList == 18)
            {
                sAddIpl.Add("ch_int_placement_ch_interior_7_dlc_casino_utility_milo_");
                sAddIpl.Add("ch_int_placement_ch_interior_0_dlc_casino_heist_milo_");
                sAddIpl.Add("ch_int_placement_ch_interior_3_dlc_casino_back_milo_");
                sAddIpl.Add("ch_int_placement_ch_interior_4_dlc_casino_hotel_milo_");
                sAddIpl.Add("ch_int_placement_ch_interior_6_dlc_casino_vault_milo_");
                sAddIpl.Add("vw_casino_main﻿");
                sAddIpl.Add("vw_casino_carpark");
                sAddIpl.Add("vw_casino_penthouse");
            }//Cashino
            else if (iPList == 19)
            {
                sAddIpl.Add("xm_x17dlc_int_placement");
                sAddIpl.Add("xm_x17dlc_int_placement_interior_0_x17dlc_int_base_ent_milo_");
                sAddIpl.Add("xm_x17dlc_int_placement_interior_10_x17dlc_int_tun_straight_milo_");
                sAddIpl.Add("xm_x17dlc_int_placement_interior_11_x17dlc_int_tun_slope_flat_milo_");
                sAddIpl.Add("xm_x17dlc_int_placement_interior_12_x17dlc_int_tun_flat_slope_milo_");
                sAddIpl.Add("xm_x17dlc_int_placement_interior_13_x17dlc_int_tun_30d_r_milo_");
                sAddIpl.Add("xm_x17dlc_int_placement_interior_14_x17dlc_int_tun_30d_l_milo_");
                sAddIpl.Add("xm_x17dlc_int_placement_interior_15_x17dlc_int_tun_straight_milo_");
                sAddIpl.Add("xm_x17dlc_int_placement_interior_16_x17dlc_int_tun_straight_milo_");
                sAddIpl.Add("xm_x17dlc_int_placement_interior_17_x17dlc_int_tun_slope_flat_milo_");
                sAddIpl.Add("xm_x17dlc_int_placement_interior_18_x17dlc_int_tun_slope_flat_milo_");
                sAddIpl.Add("xm_x17dlc_int_placement_interior_19_x17dlc_int_tun_flat_slope_milo_");
                sAddIpl.Add("xm_x17dlc_int_placement_interior_1_x17dlc_int_base_loop_milo_");
                sAddIpl.Add("xm_x17dlc_int_placement_interior_20_x17dlc_int_tun_flat_slope_milo_");
                sAddIpl.Add("xm_x17dlc_int_placement_interior_21_x17dlc_int_tun_30d_r_milo_");
                sAddIpl.Add("xm_x17dlc_int_placement_interior_22_x17dlc_int_tun_30d_r_milo_");
                sAddIpl.Add("xm_x17dlc_int_placement_interior_23_x17dlc_int_tun_30d_r_milo_");
                sAddIpl.Add("xm_x17dlc_int_placement_interior_24_x17dlc_int_tun_30d_r_milo_");
                sAddIpl.Add("xm_x17dlc_int_placement_interior_25_x17dlc_int_tun_30d_l_milo_");
                sAddIpl.Add("xm_x17dlc_int_placement_interior_26_x17dlc_int_tun_30d_l_milo_");
                sAddIpl.Add("xm_x17dlc_int_placement_interior_27_x17dlc_int_tun_30d_l_milo_");
                sAddIpl.Add("xm_x17dlc_int_placement_interior_28_x17dlc_int_tun_30d_l_milo_");
                sAddIpl.Add("xm_x17dlc_int_placement_interior_29_x17dlc_int_tun_30d_l_milo_");
                sAddIpl.Add("xm_x17dlc_int_placement_interior_2_x17dlc_int_bse_tun_milo_");
                sAddIpl.Add("xm_x17dlc_int_placement_interior_30_v_apart_midspaz_milo_");
                sAddIpl.Add("xm_x17dlc_int_placement_interior_31_v_studio_lo_milo_");
                sAddIpl.Add("xm_x17dlc_int_placement_interior_32_v_garagem_milo_");
                sAddIpl.Add("xm_x17dlc_int_placement_interior_33_x17dlc_int_02_milo_");
                sAddIpl.Add("xm_x17dlc_int_placement_interior_34_x17dlc_int_lab_milo_");
                sAddIpl.Add("xm_x17dlc_int_placement_interior_35_x17dlc_int_tun_entry_milo_");
                sAddIpl.Add("xm_x17dlc_int_placement_interior_3_x17dlc_int_base_milo_");
                sAddIpl.Add("xm_x17dlc_int_placement_interior_4_x17dlc_int_facility_milo_");
                sAddIpl.Add("xm_x17dlc_int_placement_interior_5_x17dlc_int_facility2_milo_");
                sAddIpl.Add("xm_x17dlc_int_placement_interior_6_x17dlc_int_silo_01_milo_");
                sAddIpl.Add("xm_x17dlc_int_placement_interior_7_x17dlc_int_silo_02_milo_");
                sAddIpl.Add("xm_x17dlc_int_placement_interior_8_x17dlc_int_sub_milo_");
                sAddIpl.Add("xm_x17dlc_int_placement_interior_9_x17dlc_int_01_milo_");
                sAddIpl.Add("xm_x17dlc_int_placement_strm_0");
                sAddIpl.Add("xm_bunkerentrance_door");
                sAddIpl.Add("xm_hatch_01_cutscene");
                sAddIpl.Add("xm_hatch_02_cutscene");
                sAddIpl.Add("xm_hatch_03_cutscene");
                sAddIpl.Add("xm_hatch_04_cutscene");
                sAddIpl.Add("xm_hatch_06_cutscene");
                sAddIpl.Add("xm_hatch_07_cutscene");
                sAddIpl.Add("xm_hatch_08_cutscene");
                sAddIpl.Add("xm_hatch_09_cutscene");
                sAddIpl.Add("xm_hatch_10_cutscene");
                sAddIpl.Add("xm_hatch_closed");
                sAddIpl.Add("xm_hatches_terrain");
                sAddIpl.Add("xm_hatches_terrain_lod");
                sAddIpl.Add("xm_mpchristmasadditions");
                sAddIpl.Add("xm_siloentranceclosed_x17");
            }//Facility
            else if (iPList == 20)
            {
                sAddIpl.Add("ch_int_placement_ch_interior_7_dlc_casino_utility_milo_");
                sAddIpl.Add("ch_int_placement_ch_interior_0_dlc_casino_heist_milo_");
                sAddIpl.Add("ch_int_placement_ch_interior_3_dlc_casino_back_milo_");
                sAddIpl.Add("ch_int_placement_ch_interior_4_dlc_casino_hotel_milo_");
                sAddIpl.Add("vw_casino_main﻿");
                sAddIpl.Add("vw_casino_carpark");
            }//Cashino-Vallly

            if (bAdd)
            {
                if (bCustom)
                {
                    for (int i = 0; i < sIPLSAves.Count; i++)
                    {
                        if (!Function.Call<bool>(Hash.IS_IPL_ACTIVE, sIPLSAves[i]))
                            Function.Call(Hash.REQUEST_IPL, sIPLSAves[i]);
                    }
                }
                else
                {
                    for (int i = 0; i < sAddIpl.Count; i++)
                    {
                        if (!Function.Call<bool>(Hash.IS_IPL_ACTIVE, sAddIpl[i]))
                            Function.Call(Hash.REQUEST_IPL, sAddIpl[i]);
                    }
                }
            }
            else
            {
                if (bCustom)
                {
                    for (int i = 0; i < sIPLSAves.Count; i++)
                    {
                        if (Function.Call<bool>(Hash.IS_IPL_ACTIVE, sIPLSAves[i]))
                            Function.Call(Hash.REQUEST_IPL, sIPLSAves[i]);
                    }
                }
                else
                {
                    for (int i = 0; i < sAddIpl.Count; i++)
                    {
                        if (Function.Call<bool>(Hash.IS_IPL_ACTIVE, sAddIpl[i]))
                            Function.Call(Hash.REMOVE_IPL, sAddIpl[i]);
                    }
                }
            }
        }
        public bool BeRightOnTime(int iMin, int iMax)
        { 
            bool bRight = false;
            int iTime = Function.Call<int>(Hash.GET_CLOCK_HOURS);

            if (iTime >= iMin)
            {
                if (iTime < iMax)
                    bRight = true;
            }

            return bRight; 
        }
        private void SetTheTime(int Hours, int Minites, int Seconds)
        {
            Function.Call(Hash.SET_CLOCK_TIME, Hours, Minites, Seconds);
        }
        private void MissingApps()
        {
            iAppScaner = Game.GameTime + 1000;
            for (int i = 0; i < AppMadness.Count; i++)
            {
                if (Game.Player.Character.Position.DistanceTo(AppMadness[i]) < 40.00f)
                {
                    AppeyNess(AppMadness[i]);
                    AppMadness.RemoveAt(i);
                }
            }
        }
        private void AppeyNess(Vector3 MyAppy)
        {
            LogThis("AppeyNess, MyAppy == " + MyAppy);

            int iApt = Function.Call<int>(Hash.GET_INTERIOR_AT_COORDS, MyAppy.X, MyAppy.Y, MyAppy.Z);
            if (Function.Call<bool>(Hash.IS_VALID_INTERIOR, iApt))
            {
                if (!Function.Call<bool>(Hash.IS_INTERIOR_READY, iApt))
                {
                    Function.Call((Hash)0x2CA429C029CCF247, iApt);
                    Function.Call(Hash.SET_INTERIOR_ACTIVE, iApt, true);
                    Function.Call(Hash.DISABLE_INTERIOR, iApt, false);
                }
            }

        }
        private void SafeCleaning(Blip ThisBlip, bool bInList)
        {
            if (bInList)
                ReadWriteBlips(false, false, ThisBlip.Handle, -1, -1, -1, -1, -1);
            unsafe
            {
                if (ThisBlip.Exists())
                    ThisBlip.Remove();
            }
        }
        private void CleanUpCheckPoints()
        {
            LogThis("CleanUpCheckPoints");

            for (int i = 0; i < iCoronaList.Count; i++)
                Function.Call(Hash.DELETE_CHECKPOINT, iCoronaList[i]);

            ReadWriteBlips(false, false, -1, -99, -1, -1, -1, -1);
            iCoronaList.Clear();
        }
        private void CleanUpVehicles()
        {
            LogThis("CleanUpVehicles");

            for (int i = 0; i < VehicleList_01.Count; i++)
                SafeVeh(VehicleList_01[i]);

            ReadWriteBlips(false, false, -1, -1, -1, -1, -99, -1);
            VehicleList_01.Clear();
        }
        private void SafeVeh(Vehicle ThisVeh)
        {
            unsafe
            {
                if (ThisVeh.Exists())
                {
                    if (ThisVeh.CurrentBlip.Exists())
                        ThisVeh.CurrentBlip.Remove();

                    ThisVeh.IsPersistent = false;
                    ThisVeh.MarkAsNoLongerNeeded();
                }
            }
        }
        private void CleanUpProps()
        {
            LogThis("CleanUpProps");

            for (int i = 0; i < PropList_01.Count; i++)
            {
                if (PropList_01[i].IsAttached())
                    PropList_01[i].Detach();

                if (PullProp(PropList_01, i))
                    PropList_01[i].MarkAsNoLongerNeeded();
            }

            ReadWriteBlips(false, false, -1, -1, -1, -99, -1, -1);
            PropList_01.Clear();
        }
        private void DeleteAllProps()
        {
            LogThis("DeleteAllProps");
            for (int i = 0; i < PropList_01.Count; i++)
                PropList_01[i].Delete();

            ReadWriteBlips(false, false, -1, -1, -1, -99, -1, -1);
            PropList_01.Clear();
        }
        private void CleanUpFire()
        {
            LogThis("CleanUpFire");

            for (int i = 0; i < iFireList.Count; i++)
                Function.Call(Hash.REMOVE_SCRIPT_FIRE, iFireList[i]);
            iFireList.Clear();
        }
        private void CleanFakeBlips()
        {
            LogThis("CleanFakeBlips");

            for (int i = 0; i < BlipList_01.Count; i++)
                SafeCleaning(BlipList_01[i], true);
        }
        private void CleanTriggers()
        {
            LogThis("CleanTriggers");

            for (int i = 0; i < BeOff.Count; i++)
                BeOff[i] = true;
        }
        private void CleanCams()
        {
            LogThis("CleanCams");

            if (cCams != null)
            {
                Function.Call(Hash.RENDER_SCRIPT_CAMS, 0, 1, 0, 0, 0);
                cCams.Destroy();
                Function.Call(Hash.DISPLAY_RADAR, true);
                cCams = null;
            }
        }
        private void RemoveTargets()
        {
            LogThis("RemoveTargets");

            if (Target_01 != null)
            {
                BlipCleaning(Target_01);
                Target_01 = null;
            }
            if (Target_02 != null)
            {
                BlipCleaning(Target_02);
                Target_02 = null;
            }
            if (BackUpT != null)
            {
                BlipCleaning(BackUpT);
                BackUpT = null;
            }

            for (int i = 0; i < iCoronaList.Count; i++)
                Function.Call(Hash.DELETE_CHECKPOINT, iCoronaList[i]);

            ReadWriteBlips(false, false, -1, -99, -1, -1, -1, -1);
            iCoronaList.Clear();
        }
        private void BlipCleaning(Blip BMe)
        {
            LogThis("BlipCleaning");

            ReadWriteBlips(false, false, BMe.Handle, -1, -1, -1, -1, -1);
            BMe.Remove();
        }
        public bool EntityExists(Entity[] EntList, int iPos)
        {
            bool bExist = false;

            if (iPos < EntList.Count())
            {
                unsafe
                {
                    if (EntList[iPos].Exists())
                        bExist = true;
                }
            }

            return bExist;
        }
        public bool PropExists(Prop[] Proplist, int iPos)
        {
            bool bExist = false;

            if (iPos < Proplist.Count())
            {
                unsafe
                {
                    if (Proplist[iPos].Exists())
                        bExist = true;
                }
            }

            return bExist;
        }
        public bool VehExists(Vehicle[] Vlist, int iPos)
        {
            bool bExist = false;

            if (iPos < Vlist.Count())
            {
                unsafe
                {
                    if (Vlist[iPos].Exists())
                        bExist = true;
                }
            }

            return bExist;
        }
        public bool PedExists(Ped[] Pedlist, int iPos)
        {
            bool bExist = false;

            if (iPos < Pedlist.Count())
            {
                unsafe
                {
                    if (Pedlist[iPos].Exists())
                        bExist = true;
                }
            }

            return bExist;
        }
        public bool PedListExists(List<Ped> Pedlist, int iPos)
        {
            bool bExist = false;

            if (iPos < Pedlist.Count())
            {
                unsafe
                {
                    if (Pedlist[iPos].Exists())
                        bExist = true;
                }
            }

            return bExist;
        }
        public bool VectorCheck(List<Vector3> MyVectors, int iPos)
        {
            bool bCheck = false;

            if (iPos < MyVectors.Count)
                bCheck = true;

            return bCheck;
        }
        public bool PullProp(List<Prop> Proper, int iPos)
        {
            bool bReal = false;

            if (iPos < Proper.Count)
            {
                unsafe
                {
                    if (Proper[iPos].Exists())
                        bReal = true;
                }
            }

            return bReal;
        }
        private void CleanMultiPed(bool bJustBlip, bool bDelete)
        {
            LogThis("CleanMultiPed");

            for (int i = 0; i < MultiPed.Count; i++)
            {
                if (MultiPed[i].MyBlip != null)
                    SafeCleaning(MultiPed[i].MyBlip, false);

                if (!bJustBlip)
                {
                    if (MultiPed[i].MyVehicle != null)
                    {
                        VehicleList_01.Remove(MultiPed[i].MyVehicle);
                        SafeVeh(MultiPed[i].MyVehicle);
                    }
                    if (MultiPed[i].MyPed != null)
                    {
                        PedList_01.Remove(MultiPed[i].MyPed);
                        if (MultiPed[i].MyPed.Exists())
                        {
                            if (bDelete)
                                MultiPed[i].MyPed.Delete();
                            else
                            {
                                MultiPed[i].MyPed.Task.ClearAll();
                                MultiPed[i].MyPed.Task.FleeFrom(Game.Player.Character);
                                MultiPed[i].MyPed.MarkAsNoLongerNeeded();
                            }
                        }
                    }
                }
            }
            MultiPed.Clear();
        }
        private void CleanUpPeds()
        {
            LogThis("CleanUpPeds");

            for (int i = 0; i < PedList_01.Count; i++)
            {
                if (PedListExists(PedList_01, i))
                {
                    if (PedList_01[i].CurrentBlip.Exists())
                        PedList_01[i].CurrentBlip.Remove();
                    PedList_01[i].MarkAsNoLongerNeeded();
                }
            }
            ReadWriteBlips(false, false, -1, -1, -99, -1, -1, -1);
            PedList_01.Clear();
        }
        private void CleanPedBlips(int iPed)
        {
            LogThis("CleanPedBlips");
            iTracking = Game.GameTime + 1000;
            if (iPed == 1)
            {
                for (int i = 0; i < PedList_01.Count; i++)
                {
                    if (PedListExists(PedList_01, i))
                    {
                        if (PedList_01[i].CurrentBlip.Exists())
                            PedList_01[i].CurrentBlip.Remove();
                    }
                }
            }
            else
            {
                for (int i = 0; i < MishPed.Count; i++)
                {
                    if (PedListExists(MishPed, i))
                    {
                        if (MishPed[i].CurrentBlip.Exists())
                            MishPed[i].CurrentBlip.Remove();
                    }
                }
            }
        }
        private void SimpleTracker()
        {
            iTracking = Game.GameTime + 1000;

            for (int i = 0; i < PedList_01.Count; i++)
            {
                if (PedList_01[i].IsDead)
                {
                    if (PedList_01[i].CurrentBlip.Exists())
                        PedList_01[i].CurrentBlip.Remove();
                    PedList_01[i].MarkAsNoLongerNeeded();
                    ReadWriteBlips(false, false, -1, -1, PedList_01[i].Handle, -1, -1, -1);
                    PedList_01.RemoveAt(i);
                    iUltPed01 += 1;
                }
            }
        }
        private void MultiPedTracker()
        {
            iTracking = Game.GameTime + 1000;

            for (int i = 0; i < MultiPed.Count; i++)
            {
                if (MultiPed[i].MyPed == null)
                {
                    if (MultiPed[i].MyBlip != null)
                        MultiPed[i].MyBlip.Remove();
                    MultiPed.RemoveAt(i);
                }
                else if (MultiPed[i].MyPed.IsDead)
                {
                    if (MultiPed[i].MyBlip != null)
                        MultiPed[i].MyBlip.Remove();
                    MultiPed[i].MyPed.MarkAsNoLongerNeeded();
                    ReadWriteBlips(false, false, -1, -1, MultiPed[i].MyPed.Handle, -1, -1, -1);
                    PedList_01.Remove(MultiPed[i].MyPed);
                    MultiPed.RemoveAt(i);
                    iUltPed01 += 1;
                } 
                else if (MultiPed[i].MyVehicle != null)
                {
                    if (MultiPed[i].MyPed.IsInVehicle(MultiPed[i].MyVehicle))
                    {
                        if (!MultiPed[i].MySwitch_01)
                        {
                            if (MultiPed[i].MyBlip != null)
                                MultiPed[i].MyBlip.Remove();
                            MultiPed[i].MyBlip = VehBlip(MultiPed[i].MyVehicle, false, false, MultiPed[i].MyTask_01, MultiPed[i].MyName);
                            MultiPed[i].MySwitch_01 = true;
                        }
                    }
                    else
                    {
                        if (MultiPed[i].MySwitch_01)
                        {
                            if (MultiPed[i].MyBlip != null)
                                MultiPed[i].MyBlip.Remove();
                            MultiPed[i].MyBlip = PedBlimp(MultiPed[i].MyPed, 0.75f, false, false, MultiPed[i].MyTask_01, MultiPed[i].MyName);
                            MultiPed[i].MySwitch_01 = false;
                        }
                    }
                }
                else
                {
                    if (MultiPed[i].MyPed.IsInVehicle())
                    {
                        if (!MultiPed[i].MySwitch_01)
                        {
                            if (MultiPed[i].MyBlip != null)
                                MultiPed[i].MyBlip.Remove();
                            MultiPed[i].MySwitch_01 = true;
                        }
                    }
                    else
                    {
                        if (MultiPed[i].MySwitch_01)
                        {
                            if (MultiPed[i].MyBlip != null)
                                MultiPed[i].MyBlip.Remove();
                            MultiPed[i].MyBlip = PedBlimp(MultiPed[i].MyPed, 0.75f, false, false, MultiPed[i].MyTask_01, MultiPed[i].MyName);
                            MultiPed[i].MySwitch_01 = false;
                        }
                    }
                }
            }
        }
        private void YourCoinPopUp(int iAdd, int iAcc, string sEnder)
        {
            string sTing = "";

            if (iAcc == 1)
                iNSPMBank += iAdd;
            else if (iAcc == 2)
                iNSPMCLowRisk += iAdd;
            else if (iAcc == 3)
                iNSPMCHighRisk += iAdd;

            if (iNSPMBank < 0)
                iNSPMBank = 0;
            else if (iNSPMCLowRisk < 0)
                iNSPMCLowRisk = 0;
            else if (iNSPMCHighRisk < 0)
                iNSPMCHighRisk = 0;
            else if (iNSPMBank > 2100000000)
                iNSPMBank = 2100000000;
            else if (iNSPMCLowRisk > 2100000000)
                iNSPMCLowRisk = 2100000000;
            else if (iNSPMCHighRisk > 2100000000)
                iNSPMCHighRisk = 2100000000;

            if (iAdd > 0)
            {
                if (iAcc == 1)
                    sTing = MyLang.Othertext[140] + "~n~+~b~ " + ShowComs(iAdd, true, true) + "~w~ " + sEnder + "~n~ " + MyLang.Othertext[146] + ShowComs(iNSPMBank, true, true);
                else if (iAcc == 2)
                    sTing = MyLang.Othertext[141] + "~n~+~b~ " + ShowComs(iAdd, true, true) + "~w~ " + sEnder + "~n~ " + MyLang.Othertext[146] + ShowComs(iNSPMCLowRisk, true, true);
                else if (iAcc == 3)
                    sTing = MyLang.Othertext[142] + "~n~+~b~ " + ShowComs(iAdd, true, true) + "~w~ " + sEnder + "~n~ " + MyLang.Othertext[146] + ShowComs(iNSPMCHighRisk, true, true);
            }
            else
            {
                if (iAcc == 1)
                    sTing = MyLang.Othertext[143] + "~n~-~r~ " + ShowComs(iAdd, true, true) + "~w~ " + sEnder + "~n~ " + MyLang.Othertext[146] + ShowComs(iNSPMBank, true, true);
                else if (iAcc == 2)
                    sTing = MyLang.Othertext[144] + "~n~--~r~ " + ShowComs(iAdd, true, true) + "~w~ " + sEnder + "~n~ " + MyLang.Othertext[146] + ShowComs(iNSPMCLowRisk, true, true);
                else if (iAcc == 3)
                    sTing = MyLang.Othertext[145] + "~n~--~r~ " + ShowComs(iAdd, true, true) + "~w~ " + sEnder + "~n~ " + MyLang.Othertext[146] + ShowComs(iNSPMCHighRisk, true, true);
            }

            if (iAcc == 1)
                WriteNSMDat(9, iNSPMBank);
            else if (iAcc == 2)
                WriteNSMDat(10, iNSPMCLowRisk);
            else if (iAcc == 3)
                WriteNSMDat(11, iNSPMCHighRisk);

            UI.Notify(sTing);
        }
        private void NSCoinInvestments(bool bPlus, int iLow, int iHigh, string sEnder)
        {
            ReadNSMPDat();
            float fAdd = RandFlow((float)iLow, (float)iHigh);
            float fSum = 0.00f;
            if (bPlus)
            {
                if (iNSPMCHighRisk > 0)
                {
                    fSum = (float)iNSPMCHighRisk / 100.00f;
                    fSum *= fAdd;
                    YourCoinPopUp((int)fSum, 3, sEnder);
                }
                if (iNSPMCLowRisk > 0)
                {
                    fSum = iNSPMCLowRisk / 100;
                    fSum *= fAdd / 4.00f;
                    YourCoinPopUp((int)fSum, 2, sEnder);
                }
            }
            else
            {
                if (iNSPMCHighRisk > 0)
                {
                    fSum = iNSPMCHighRisk / 100;
                    fSum *= fAdd;
                    fSum *= -1;
                    YourCoinPopUp((int)fSum, 3, sEnder);
                }
                if (iNSPMCLowRisk > 0)
                {
                    fSum = iNSPMCLowRisk / 100;
                    fSum *= fAdd / 4;
                    fSum *= -1;
                    YourCoinPopUp((int)fSum, 2, sEnder);
                }
            }
        }
        public int NSPMCoin(int iGet)
        {
            int iCash;
            int iStat = 0;
            if (Game.Player.Character.Model == PedHash.Franklin)
                iStat = Function.Call<int>(Hash.GET_HASH_KEY, "SP1_TOTAL_CASH");
            else if (Game.Player.Character.Model == PedHash.Trevor)
                iStat = Function.Call<int>(Hash.GET_HASH_KEY, "SP2_TOTAL_CASH");
            else
                iStat = Function.Call<int>(Hash.GET_HASH_KEY, "SP0_TOTAL_CASH");

            unsafe
            {
                Function.Call<bool>(Hash.STAT_GET_INT, iStat, &iCash, -1);
            }


            if (iGet != 0)
            {
                iCash += iGet;
                Function.Call<bool>(Hash.STAT_SET_INT, iStat, iCash, true);
            }
            return iCash;
        }
        private void NSCoinCount(bool bAdd, int iAcc)
        {
            int iAmountTo = 1;

            if (bAdd)
            {
                if (iAcc == 1)
                {
                    if (NSPMCoin(0) > 0)
                    {
                        if (iNSPMBank < 2100000000)
                        {
                            if (iFaster_03 < Game.GameTime)
                            {
                                if (NSPMCoin(0) > 100000)
                                    iAmountTo = 100000;
                                else
                                    iFaster_03 = Game.GameTime + 2000;
                            }
                            else if (iFaster_02 < Game.GameTime)
                            {
                                if (NSPMCoin(0) > 10000)
                                    iAmountTo = 10000;
                                else
                                    iFaster_02 = Game.GameTime + 2000;
                            }
                            else if (iFaster_01 < Game.GameTime)
                            {
                                if (NSPMCoin(0) > 100)
                                    iAmountTo = 100;
                                else
                                    iFaster_01 = Game.GameTime + 2000;
                            }

                            iNSPMBank += iAmountTo;
                            NSPMCoin(iAmountTo * -1);
                        }
                    }
                }
                else if (iAcc == 2)
                {
                    if (iNSPMBank > 0)
                    {
                        if (iNSPMCLowRisk < 2100000000)
                        {
                            if (iFaster_03 < Game.GameTime)
                            {
                                if (iNSPMBank > 100000)
                                    iAmountTo = 100000;
                                else
                                    iFaster_03 = Game.GameTime + 2000;
                            }
                            else if (iFaster_02 < Game.GameTime)
                            {
                                if (iNSPMBank > 10000)
                                    iAmountTo = 10000;
                                else
                                    iFaster_02 = Game.GameTime + 2000;
                            }
                            else if (iFaster_01 < Game.GameTime)
                            {
                                if (iNSPMBank > 100)
                                    iAmountTo = 100;
                                else
                                    iFaster_01 = Game.GameTime + 2000;
                            }

                            iNSPMCLowRisk += iAmountTo;
                            iNSPMBank -= iAmountTo;
                        }
                    }
                }
                else if (iAcc == 3)
                {
                    if (iNSPMBank > 0)
                    {
                        if (iNSPMCHighRisk < 2100000000)
                        {
                            if (iFaster_03 < Game.GameTime)
                            {
                                if (iNSPMBank > 100000)
                                    iAmountTo = 100000;
                                else
                                    iFaster_03 = Game.GameTime + 2000;
                            }
                            else if (iFaster_02 < Game.GameTime)
                            {
                                if (iNSPMBank > 10000)
                                    iAmountTo = 10000;
                                else
                                    iFaster_02 = Game.GameTime + 2000;
                            }
                            else if (iFaster_01 < Game.GameTime)
                            {
                                if (iNSPMBank > 100)
                                    iAmountTo = 100;
                                else
                                    iFaster_01 = Game.GameTime + 2000;
                            }

                            iNSPMCHighRisk += iAmountTo;
                            iNSPMBank -= iAmountTo;
                        }
                    }
                }
                else if (iAcc == 5)
                {
                    if (MySettings.YachtPrice < 2100000000)
                    {
                        if (iFaster_03 < Game.GameTime)
                            MySettings.YachtPrice += +100000;
                        else if (iFaster_02 < Game.GameTime)
                            MySettings.YachtPrice += +10000;
                        else if (iFaster_01 < Game.GameTime)
                            MySettings.YachtPrice += +100;
                        else
                            MySettings.YachtPrice += +1;
                    }
                }
            }
            else
            {
                if (iAcc == 1)
                {
                    if (iNSPMBank > 0)
                    {
                        if (iFaster_03 < Game.GameTime)
                        {
                            if (iNSPMBank > 100000)
                                iAmountTo = 100000;
                            else
                                iFaster_03 = Game.GameTime + 2000;
                        }
                        else if (iFaster_02 < Game.GameTime)
                        {
                            if (iNSPMBank > 10000)
                                iAmountTo = 10000;
                            else
                                iFaster_02 = Game.GameTime + 2000;
                        }
                        else if (iFaster_01 < Game.GameTime)
                        {
                            if (iNSPMBank > 100)
                                iAmountTo = 100;
                            else
                                iFaster_01 = Game.GameTime + 2000;
                        }

                        iNSPMBank -= iAmountTo;
                        NSPMCoin(iAmountTo);
                    }
                }
                else if (iAcc == 2)
                {
                    if (iNSPMCLowRisk > 0)
                    {
                        if (iFaster_03 < Game.GameTime)
                        {
                            if (iNSPMCLowRisk > 100000)
                                iAmountTo = 100000;
                            else
                                iFaster_03 = Game.GameTime + 2000;
                        }
                        else if (iFaster_02 < Game.GameTime)
                        {
                            if (iNSPMCLowRisk > 10000)
                                iAmountTo = 10000;
                            else
                                iFaster_02 = Game.GameTime + 2000;
                        }
                        else if (iFaster_01 < Game.GameTime)
                        {
                            if (iNSPMCLowRisk > 100)
                                iAmountTo = 100;
                            else
                                iFaster_01 = Game.GameTime + 2000;
                        }

                        iNSPMCLowRisk -= iAmountTo;
                        iNSPMBank += iAmountTo;
                    }
                }
                else if (iAcc == 3)
                {
                    if (iNSPMCHighRisk > 0)
                    {
                        if (iFaster_03 < Game.GameTime)
                        {
                            if (iNSPMCHighRisk > 100000)
                                iAmountTo = 100000;
                            else
                                iFaster_03 = Game.GameTime + 2000;
                        }
                        else if (iFaster_02 < Game.GameTime)
                        {
                            if (iNSPMCHighRisk > 10000)
                                iAmountTo = 10000;
                            else
                                iFaster_02 = Game.GameTime + 2000;
                        }
                        else if (iFaster_01 < Game.GameTime)
                        {
                            if (iNSPMCHighRisk > 100)
                                iAmountTo = 100;
                            else
                                iFaster_01 = Game.GameTime + 2000;
                        }

                        iNSPMCHighRisk -= iAmountTo;
                        iNSPMBank += iAmountTo;
                    }
                }
                else if (iAcc == 5)
                {
                    if (MySettings.YachtPrice > 0)
                    {
                        if (iFaster_03 < Game.GameTime)
                        {
                            if (MySettings.YachtPrice > 100000)
                                MySettings.YachtPrice += -100000;
                            else
                                iFaster_03 = Game.GameTime + 2000;
                        }
                        else if (iFaster_02 < Game.GameTime)
                        {
                            if (MySettings.YachtPrice > 10000)
                                MySettings.YachtPrice += -10000;
                            else
                                iFaster_02 = Game.GameTime + 2000;
                        }
                        else if (iFaster_01 < Game.GameTime)
                        {
                            if (MySettings.YachtPrice > 100)
                                MySettings.YachtPrice += -100;
                            else
                                iFaster_01 = Game.GameTime + 2000;
                        }
                        else
                        {
                            if (MySettings.YachtPrice > 0)
                                MySettings.YachtPrice += -1;
                        }
                    }
                    else
                        MySettings.YachtPrice = 0;

                }
            }
        }
        public void InteriorRadar()
        {
            //void SET_RADAR_AS_INTERIOR_THIS_FRAME(Hash interior, float x, float y, int heading, int zoom)
        }
        private void ListBuilder()
        {
            LogThis("ListBuilder");

            sPhoneType.Add("p_phonebox_02_s");
            sPhoneType.Add("prop_phonebox_04");
            sPhoneType.Add("prop_phonebox_03");
            sPhoneType.Add("prop_phonebox_02");
            sPhoneType.Add("prop_phonebox_01c");
            sPhoneType.Add("prop_phonebox_01b");
            sPhoneType.Add("prop_phonebox_01a");
            sPhoneType.Add("p_phonebox_01b_s");

            vOldPhoneBoxList.Add(new Vector3(214.317078f, -921.2575f, 29.6920071f));
            vOldPhoneBoxList.Add(new Vector3(-41.1469345f, -1730.33057f, 28.2996063f));
            vOldPhoneBoxList.Add(new Vector3(1769.25232f, 3337.95117f, 40.433075f));
            vOldPhoneBoxList.Add(new Vector3(1876.836f, 2701.69775f, 44.8391724f));
            vOldPhoneBoxList.Add(new Vector3(1584.86682f, 6451.15332f, 24.317152f));

            sDoorList.Add("prop_ld_bankdoors_02");
            sDoorList.Add("v_ilev_247door");
            sDoorList.Add("v_ilev_247door_r");
            sDoorList.Add("v_ilev_bank4door01");
            sDoorList.Add("v_ilev_bank4door02");
            sDoorList.Add("v_ilev_bl_doorsl_l");
            sDoorList.Add("v_ilev_bl_doorsl_r");
            sDoorList.Add("v_ilev_bs_door");
            sDoorList.Add("v_ilev_ch_glassdoor");
            sDoorList.Add("v_ilev_clothmiddoor");
            sDoorList.Add("v_ilev_cor_darkdoor");
            sDoorList.Add("v_ilev_cor_darkdoor");
            sDoorList.Add("v_ilev_cor_doorglassa");
            sDoorList.Add("v_ilev_cor_doorglassb");
            sDoorList.Add("v_ilev_cs_door01");
            sDoorList.Add("v_ilev_cs_door01_r");
            sDoorList.Add("v_ilev_csr_door_l");
            sDoorList.Add("v_ilev_csr_door_r");
            sDoorList.Add("v_ilev_csr_door_r");
            sDoorList.Add("v_ilev_gasdoor");
            sDoorList.Add("v_ilev_gasdoor_r");
            sDoorList.Add("v_ilev_gc_door03");
            sDoorList.Add("v_ilev_gc_door04");
            sDoorList.Add("v_ilev_genbankdoor1");
            sDoorList.Add("v_ilev_genbankdoor2");
            sDoorList.Add("v_ilev_hd_door_l");
            sDoorList.Add("v_ilev_hd_door_r");
            sDoorList.Add("v_ilev_ml_door1");
            sDoorList.Add("v_ilev_ph_door002");
            sDoorList.Add("v_ilev_ph_door01");
            sDoorList.Add("v_ilev_po_door");
            sDoorList.Add("v_ilev_ra_door1_l");
            sDoorList.Add("v_ilev_ra_door1_r");
            sDoorList.Add("v_ilev_stad_fdoor");
            sDoorList.Add("v_ilev_ta_door");
            sDoorList.Add("v_ilev_ss_door5_r");
            sDoorList.Add("v_corp_hicksdoor");
            sDoorList.Add("prop_strip_door_01");
            sDoorList.Add("hei_v_ilev_bk_gate_pris");
            sDoorList.Add("h4_prop_h4_gate_l_03a");
            sDoorList.Add("h4_prop_h4_gate_r_03a");
            sDoorList.Add("prop_strip_door_01");
            sDoorList.Add("sm_14_mp_door_l");
            sDoorList.Add("prop_map_door_01");
            sDoorList.Add("prop_sm1_11_doorl");
            sDoorList.Add("prop_control_rm_door_01");
            sDoorList.Add("prop_magenta_door");
            sDoorList.Add("prop_sc1_12_door");
            sDoorList.Add("v_ilev_deviantfrontdoor");
            sDoorList.Add("ch_prop_casino_door_01a");
            sDoorList.Add("ch_prop_ch_service_door_02c");
            sDoorList.Add("ch_prop_ch_service_door_02b");
            sDoorList.Add("ch_prop_ch_service_door_02a");
            sDoorList.Add("ch_prop_casino_door_01b");
            sDoorList.Add("ch_prop_casino_door_01c");
            sDoorList.Add("ch_prop_ch_gendoor_01");

            sGateList.Add("prop_gate_prison_01");
            sGateList.Add("prop_gate_docks_ld");
            sGateList.Add("prop_facgate_01");
            sGateList.Add("prop_facgate_01b");
            sGateList.Add("prop_fnclink_06gate2");
            sGateList.Add("prop_facgate_04_l");
            sGateList.Add("prop_facgate_04_r");

            AppMadness.Add(new Vector3(346.5659f, -1012.851f, -99.19622f));
            AppMadness.Add(new Vector3(260.5322f, -999.1339f, -99.0087f));//"Low End Apartment"),
            AppMadness.Add(new Vector3(343.8500f, -999.0800f, -99.1977f));//"Mid Range Apartment"),
            AppMadness.Add(new Vector3(-262.46f, -951.89f, 75.83f));//"3 Alta Street Apt 10"),
            AppMadness.Add(new Vector3(-280.74f, -961.50f, 91.11f));//"3 Alta Street Apt 57"),
            AppMadness.Add(new Vector3(-895.85f, -433.90f, 94.06f));//"Weazel Plaza Apt 26"),
            AppMadness.Add(new Vector3(-909.054f, -441.466f, 120.205f));//"Weazel Plaza Apt 70"),
            AppMadness.Add(new Vector3(-884.301f, -454.515f, 125.132f));//"Weazel Plaza Apt 101"),
            AppMadness.Add(new Vector3(-897.197f, -369.246f, 84.0779f));//"Richard Majestic Apt 4"),
            AppMadness.Add(new Vector3(-932.29f, -385.88f, 108.03f));//"Richard Majestic Apt 51"),
            AppMadness.Add(new Vector3(-575.305f, 42.3233f, 92.2236f));//"Tinsel Towers Apt 29"),
            AppMadness.Add(new Vector3(-617.609f, 63.024f, 106.624f));//"Tinsel Towers Apt 45"),
            AppMadness.Add(new Vector3(-795.04f, 342.37f, 206.22f));//"Eclipse Towers Apt 5"),
            AppMadness.Add(new Vector3(-759.79f, 315.71f, 175.40f));//"Eclipse Towers Apt 9"),
            AppMadness.Add(new Vector3(-797.095f, 335.069f, 158.599f));//"Eclipse Towers Apt 31"),
            AppMadness.Add(new Vector3(-752.605f, 320.821f, 221.855f));//"Eclipse Towers Apt 40"),
            AppMadness.Add(new Vector3(-37.41f, -582.82f, 88.71f));//"4 Integrity Way Apt 30"),
            AppMadness.Add(new Vector3(-10.58f, -581.26f, 98.83f));//"4 Integrity Way Apt 35"),
            AppMadness.Add(new Vector3(-1477.14f, -538.75f, 55.5264f));//"Del Perro Heights Apt 7"),
            AppMadness.Add(new Vector3(-1474.17f, -528.124f, 68.1541f));//"Del Perro Heights Apt 20"),
            AppMadness.Add(new Vector3(-14.7964f, -581.709f, 79.4307f));//"4 Integrity Way Apt 28"),
            AppMadness.Add(new Vector3(-1468.14f, -541.815f, 73.4442f));//"Del Perro Heights Apt 4"),
            AppMadness.Add(new Vector3(-915.811f, -379.432f, 113.675f));//"Richard Majestic Apt 2"),
            AppMadness.Add(new Vector3(-614.86f, 40.6783f, 97.6001f));//"Tinsel Towers Apt 42"),
            AppMadness.Add(new Vector3(-773.407f, 341.766f, 211.397f));//"Eclipse Towers Apt 3"),
            AppMadness.Add(new Vector3(-172.983f, 494.033f, 137.654f));//"3655 Wild Oats Drive"),
            AppMadness.Add(new Vector3(340.941f, 437.18f, 149.39f));//"2044 North Conker Avenue"),
            AppMadness.Add(new Vector3(373.023f, 416.105f, 145.701f));//"2045 North Conker Avenue"),
            AppMadness.Add(new Vector3(-676.127f, 588.612f, 145.17f));//"2862 Hillcrest Avenue"),
            AppMadness.Add(new Vector3(-763.107f, 615.906f, 144.14f));//"2868 Hillcrest Avenue"),
            AppMadness.Add(new Vector3(-857.798f, 682.563f, 152.653f));//"2874 Hillcrest Avenue"),
            AppMadness.Add(new Vector3(120.5f, 549.952f, 184.097f));//"3677 Whispymound Drive"),
            AppMadness.Add(new Vector3(-1288.0f, 440.748f, 97.6946f));//"2113 Mad Wayne Thunder"),

            for (int i = 0; i < 10; i++)
                iAssMissionList.Add(0);

            for (int i = 0; i < 20; i++)
                BeOff.Add(true);

        }
        public List<string> WeapsList()
        {
            List<string> sWeapList = new List<string>
            {
                "WEAPON_dagger",  //0x92A27487",
                "WEAPON_bat",  //0x958A4A8F",
                "WEAPON_bottle",  //0xF9E6AA4B",
                "WEAPON_crowbar",  //0x84BD7BFD",
                "WEAPON_unarmed",  //0xA2719263",
                "WEAPON_flashlight",  //0x8BB05FD7",
                "WEAPON_golfclub",  //0x440E4788",
                "WEAPON_hammer",  //0x4E875F73",
                "WEAPON_hatchet",  //0xF9DCBF2D",
                "WEAPON_knuckle",  //0xD8DF3C3C",
                "WEAPON_knife",  //0x99B507EA",
                "WEAPON_machete",  //0xDD5DF8D9",
                "WEAPON_switchblade",  //0xDFE37640",
                "WEAPON_nightstick",  //0x678B81B1",
                "WEAPON_wrench",  //0x19044EE0",
                "WEAPON_battleaxe",  //0xCD274149",
                "WEAPON_poolcue",  //0x94117305",
                "WEAPON_stone_hatchet",  //0x3813FC08"--17

                "WEAPON_pistol",  //0x1B06D571",
                "WEAPON_pistol_mk2",  //0xBFE256D4",---------19
                "WEAPON_combatpistol",  //0x5EF9FEC4",
                "WEAPON_appistol",  //0x22D8FE39",
                "WEAPON_pistol50",  //0x99AEEB3B",
                "WEAPON_snspistol",  //0xBFD21232",
                "WEAPON_snspistol_mk2",  //0x88374054",---24
                "WEAPON_heavypistol",  //0xD205520E",
                "WEAPON_vintagepistol",  //0x83839C4",
                "WEAPON_marksmanpistol",  //0xDC4DB296",
                "WEAPON_revolver",  //0xC1B3C3D1",
                "WEAPON_revolver_mk2",  //0xCB96392F",----29
                "WEAPON_doubleaction",  //0x97EA20B8",
                "WEAPON_ceramicpistol",  //0x2B5EF5EC",
                "WEAPON_navyrevolver",  //0x917F6C8C"
                "WEAPON_GADGETPISTOL",  //0xAF3696A1",
                "WEAPON_stungun",  //0x3656C8C1",
                "WEAPON_flaregun",  //0x47757124",
                "WEAPON_raypistol",  //0xAF3696A1",--36

                "WEAPON_microsmg",  //0x13532244",
                "WEAPON_smg",  //0x2BE6766B",
                "WEAPON_smg_mk2",  //0x78A97CD0",-----39
                "WEAPON_assaultsmg",  //0xEFE7E2DF",
                "WEAPON_combatpdw",  //0xA3D4D34",
                "WEAPON_machinepistol",  //0xDB1AA450",
                "WEAPON_minismg",  //0xBD248B55",
                "WEAPON_raycarbine",  //0x476BF155"--44

                "WEAPON_pumpshotgun",  //0x1D073A89",
                "WEAPON_pumpshotgun_mk2",  //0x555AF99A",-----------46
                "WEAPON_sawnoffshotgun",  //0x7846A318",
                "WEAPON_assaultshotgun",  //0xE284C527",
                "WEAPON_bullpupshotgun",  //0x9D61E50F",
                "WEAPON_musket",  //0xA89CB99E",
                "WEAPON_heavyshotgun",  //0x3AABBBAA",
                "WEAPON_dbshotgun",  //0xEF951FBB",
                "WEAPON_autoshotgun",  //0x12E82D3D"--53
                "WEAPON_COMBATSHOTGUN",  //0x5A96BA4--54

                "WEAPON_assaultrifle",  //0xBFEFFF6D",
                "WEAPON_assaultrifle_mk2",  //0x394F415C",-------56
                "WEAPON_carbinerifle",  //0x83BF0278",
                "WEAPON_carbinerifle_mk2",  //0xFAD1F1C9",------58
                "WEAPON_advancedrifle",  //0xAF113F99",
                "WEAPON_specialcarbine",  //0xC0A3098D",
                "WEAPON_specialcarbine_mk2",  //0x969C3D67",------61
                "WEAPON_bullpuprifle",  //0x7F229F94",
                "WEAPON_bullpuprifle_mk2",  //0x84D6FAFD",----63
                "WEAPON_compactrifle",  //0x624FE830"--64
                "WEAPON_MILITARYRIFLE",  //0x624FE830"--65

                "WEAPON_mg",  //0x9D07F764",
                "WEAPON_combatmg",  //0x7FD62962",
                "WEAPON_combatmg_mk2",  //0xDBBD7280",------68
                "WEAPON_gusenberg",  //0x61012683"--69

                "WEAPON_sniperrifle",  //0x5FC3C11",
                "WEAPON_heavysniper",  //0xC472FE2",
                "WEAPON_heavysniper_mk2",  //0xA914799",---72
                "WEAPON_marksmanrifle",  //0xC734385A",
                "WEAPON_marksmanrifle_mk2",  //0x6A6C02E0"--74

                "WEAPON_rpg",  //0xB1CA77B1",
                "WEAPON_grenadelauncher",  //0xA284510B",
                "WEAPON_grenadelauncher_smoke",  //0x4DD2DC56",
                "WEAPON_minigun",  //0x42BF8A85",
                "WEAPON_firework",  //0x7F7497E5",
                "WEAPON_railgun",  //0x6D544C99",
                "WEAPON_hominglauncher",  //0x63AB0442",
                "WEAPON_compactlauncher",  //0x781FE4A",
                "WEAPON_rayminigun",  //0xB62D1F67"--83

                "WEAPON_grenade",  //0x93E220BD",
                "WEAPON_bzgas",  //0xA0973D5E",
                "WEAPON_smokegrenade",  //0xFDBC8A50",
                "WEAPON_flare",  //0x497FACC3",
                "WEAPON_molotov",  //0x24B17070",
                "WEAPON_stickybomb",  //0x2C3731D9",
                "WEAPON_proxmine",  //0xAB564B93",
                "WEAPON_snowball",  //0x787F0BB",
                "WEAPON_pipebomb",  //0xBA45E8B8",
                "WEAPON_ball",  //0x23C9F95C"--93

                "WEAPON_petrolcan",  //0x34A67B97",
                "WEAPON_fireextinguisher",  //0x60EC506",
                "WEAPON_parachute",  //0xFBAB5776",
                "WEAPON_hazardcan",  //0xBA536372"--97

                "WEAPON_EMPLAUNCHER",  // 0xDB26713A--98

                "WEAPON_HEAVYRIFLE",  //0xC78D71B4 --99

                "WEAPON_FERTILIZERCAN",//100

                "WEAPON_STUNGUN_MP"//101
            };

            return sWeapList;
        }
        public List<string> WeapAddonsList()
        {
            List<string> sAddsList = new List<string>
            {
                "COMPONENT_ADVANCEDRIFLE_CLIP_01",//0xFA8FA10F,
                "COMPONENT_ADVANCEDRIFLE_CLIP_02",//0x8EC1C979,
                "COMPONENT_ADVANCEDRIFLE_VARMOD_LUXE",//0x377CD377,
                "COMPONENT_APPISTOL_CLIP_01",//0x31C4B22A,
                "COMPONENT_APPISTOL_CLIP_02",//0x249A17D5,
                "COMPONENT_APPISTOL_VARMOD_LUXE",//0x9B76C72C,
                "COMPONENT_ASSAULTRIFLE_CLIP_01",//0xBE5EEA16,
                "COMPONENT_ASSAULTRIFLE_CLIP_02",//0xB1214F9B,
                "COMPONENT_ASSAULTRIFLE_CLIP_03",//0xDBF0A53D,
                "COMPONENT_ASSAULTRIFLE_MK2_CAMO",//0x911B24AF,
                "COMPONENT_ASSAULTRIFLE_MK2_CAMO_02",//0x37E5444B,
                "COMPONENT_ASSAULTRIFLE_MK2_CAMO_03",//0x538B7B97,
                "COMPONENT_ASSAULTRIFLE_MK2_CAMO_04",//0x25789F72,
                "COMPONENT_ASSAULTRIFLE_MK2_CAMO_05",//0xC5495F2D,
                "COMPONENT_ASSAULTRIFLE_MK2_CAMO_06",//0xCF8B73B1,
                "COMPONENT_ASSAULTRIFLE_MK2_CAMO_07",//0xA9BB2811,
                "COMPONENT_ASSAULTRIFLE_MK2_CAMO_08",//0xFC674D54,
                "COMPONENT_ASSAULTRIFLE_MK2_CAMO_09",//0x7C7FCD9B,
                "COMPONENT_ASSAULTRIFLE_MK2_CAMO_10",//0xA5C38392,
                "COMPONENT_ASSAULTRIFLE_MK2_CAMO_IND_01",//0xB9B15DB0,
                "COMPONENT_ASSAULTRIFLE_MK2_CLIP_01",//0x8610343F,
                "COMPONENT_ASSAULTRIFLE_MK2_CLIP_02",//0xD12ACA6F,
                "COMPONENT_ASSAULTRIFLE_MK2_CLIP_ARMORPIERCING",//0xA7DD1E58,
                "COMPONENT_ASSAULTRIFLE_MK2_CLIP_FMJ",//0x63E0A098,
                "COMPONENT_ASSAULTRIFLE_MK2_CLIP_INCENDIARY",//0xFB70D853,
                "COMPONENT_ASSAULTRIFLE_MK2_CLIP_TRACER",//0xEF2C78C1,
                "COMPONENT_ASSAULTRIFLE_VARMOD_LUXE",//0x4EAD7533,
                "COMPONENT_ASSAULTSHOTGUN_CLIP_01",//0x94E81BC7,
                "COMPONENT_ASSAULTSHOTGUN_CLIP_02",//0x86BD7F72,
                "COMPONENT_ASSAULTSMG_CLIP_01",//0x8D1307B0,
                "COMPONENT_ASSAULTSMG_CLIP_02",//0xBB46E417,
                "COMPONENT_ASSAULTSMG_VARMOD_LOWRIDER",//0x278C78AF,
                "COMPONENT_AT_AR_AFGRIP",//0xC164F53,
                "COMPONENT_AT_AR_AFGRIP_02",//0x9D65907A,
                "COMPONENT_AT_AR_BARREL_01",//0x43A49D26,
                "COMPONENT_AT_AR_BARREL_02",//0x5646C26A,
                "COMPONENT_AT_AR_FLSH",//0x7BC4CDDC,
                "COMPONENT_AT_AR_SUPP",//0x837445AA,
                "COMPONENT_AT_AR_SUPP_02",//0xA73D4664,
                "COMPONENT_AT_BP_BARREL_01",//0x659AC11B,
                "COMPONENT_AT_BP_BARREL_02",//0x3BF26DC7,
                "COMPONENT_AT_CR_BARREL_01",//0x833637FF,
                "COMPONENT_AT_CR_BARREL_02",//0x8B3C480B,
                "COMPONENT_AT_MG_BARREL_01",//0xC34EF234,
                "COMPONENT_AT_MG_BARREL_02",//0xB5E2575B,
                "COMPONENT_AT_MRFL_BARREL_01",//0x381B5D89,
                "COMPONENT_AT_MRFL_BARREL_02",//0x68373DDC,
                "COMPONENT_AT_MUZZLE_01",//0xB99402D4,
                "COMPONENT_AT_MUZZLE_02",//0xC867A07B,
                "COMPONENT_AT_MUZZLE_03",//0xDE11CBCF,
                "COMPONENT_AT_MUZZLE_04",//0xEC9068CC,
                "COMPONENT_AT_MUZZLE_05",//0x2E7957A,
                "COMPONENT_AT_MUZZLE_06",//0x347EF8AC,
                "COMPONENT_AT_MUZZLE_07",//0x4DB62ABE,
                "COMPONENT_AT_MUZZLE_08",//0x5F7DCE4D,
                "COMPONENT_AT_MUZZLE_09",//0x6927E1A1,
                "COMPONENT_AT_PI_COMP",//0x21E34793,
                "COMPONENT_AT_PI_COMP_02",//0xAA8283BF,
                "COMPONENT_AT_PI_COMP_03",//0x27077CCB,
                "COMPONENT_AT_PI_FLSH",//0x359B7AAE,
                "COMPONENT_AT_PI_FLSH_02",//0x43FD595B,
                "COMPONENT_AT_PI_FLSH_03",//0x4A4965F3,
                "COMPONENT_AT_PI_RAIL",//0x8ED4BB70,
                "COMPONENT_AT_PI_RAIL_02",//0x47DE9258,
                "COMPONENT_AT_PI_SUPP",//0xC304849A,
                "COMPONENT_AT_PI_SUPP_02",//0x65EA7EBB,
                "COMPONENT_AT_SB_BARREL_01",//0xD9103EE1,
                "COMPONENT_AT_SB_BARREL_02",//0xA564D78B,
                "COMPONENT_AT_SCOPE_LARGE",//0xD2443DDC,
                "COMPONENT_AT_SCOPE_LARGE_FIXED_ZOOM",//0x1C221B1A,
                "COMPONENT_AT_SCOPE_LARGE_FIXED_ZOOM_MK2",//0x5B1C713C,
                "COMPONENT_AT_SCOPE_LARGE_MK2",//0x82C10383,
                "COMPONENT_AT_SCOPE_MACRO",//0x9D2FBF29,
                "COMPONENT_AT_SCOPE_MACRO_02",//0x3CC6BA57,
                "COMPONENT_AT_SCOPE_MACRO_02_MK2",//0xC7ADD105,
                "COMPONENT_AT_SCOPE_MACRO_02_SMG_MK2",//0xE502AB6B,
                "COMPONENT_AT_SCOPE_MACRO_MK2",//0x49B2945,
                "COMPONENT_AT_SCOPE_MAX",//0xBC54DA77,
                "COMPONENT_AT_SCOPE_MEDIUM",//0xA0D89C42,
                "COMPONENT_AT_SCOPE_MEDIUM_MK2",//0xC66B6542,
                "COMPONENT_AT_SCOPE_NV",//0xB68010B0,
                "COMPONENT_AT_SCOPE_SMALL",//0xAA2C45B4,
                "COMPONENT_AT_SCOPE_SMALL_02",//0x3C00AFED,
                "COMPONENT_AT_SCOPE_SMALL_MK2",//0x3F3C8181,
                "COMPONENT_AT_SCOPE_SMALL_SMG_MK2",//0x3DECC7DA,
                "COMPONENT_AT_SCOPE_THERMAL",//0x2E43DA41,
                "COMPONENT_AT_SC_BARREL_01",//0xE73653A9,
                "COMPONENT_AT_SC_BARREL_02",//0xF97F783B,
                "COMPONENT_AT_SIGHTS",//0x420FD713,
                "COMPONENT_AT_SIGHTS_SMG",//0x9FDB5652,
                "COMPONENT_AT_SR_BARREL_01",//0x909630B7,
                "COMPONENT_AT_SR_BARREL_02",//0x108AB09E,
                "COMPONENT_AT_SR_SUPP",//0xE608B35E,
                "COMPONENT_AT_SR_SUPP_03",//0xAC42DF71,
                "COMPONENT_BULLPUPRIFLE_CLIP_01",//0xC5A12F80,
                "COMPONENT_BULLPUPRIFLE_CLIP_02",//0xB3688B0F,
                "COMPONENT_BULLPUPRIFLE_MK2_CAMO",//0xAE4055B7,
                "COMPONENT_BULLPUPRIFLE_MK2_CAMO_02",//0xB905ED6B,
                "COMPONENT_BULLPUPRIFLE_MK2_CAMO_03",//0xA6C448E8,
                "COMPONENT_BULLPUPRIFLE_MK2_CAMO_04",//0x9486246C,
                "COMPONENT_BULLPUPRIFLE_MK2_CAMO_05",//0x8A390FD2,
                "COMPONENT_BULLPUPRIFLE_MK2_CAMO_06",//0x2337FC5,
                "COMPONENT_BULLPUPRIFLE_MK2_CAMO_07",//0xEFFFDB5E,
                "COMPONENT_BULLPUPRIFLE_MK2_CAMO_08",//0xDDBDB6DA,
                "COMPONENT_BULLPUPRIFLE_MK2_CAMO_09",//0xCB631225,
                "COMPONENT_BULLPUPRIFLE_MK2_CAMO_10",//0xA87D541E,
                "COMPONENT_BULLPUPRIFLE_MK2_CAMO_IND_01",//0xC5E9AE52,
                "COMPONENT_BULLPUPRIFLE_MK2_CLIP_01",//0x18929DA,
                "COMPONENT_BULLPUPRIFLE_MK2_CLIP_02",//0xEFB00628,
                "COMPONENT_BULLPUPRIFLE_MK2_CLIP_ARMORPIERCING",//0xFAA7F5ED,
                "COMPONENT_BULLPUPRIFLE_MK2_CLIP_FMJ",//0x43621710,
                "COMPONENT_BULLPUPRIFLE_MK2_CLIP_INCENDIARY",//0xA99CF95A,
                "COMPONENT_BULLPUPRIFLE_MK2_CLIP_TRACER",//0x822060A9,
                "COMPONENT_BULLPUPRIFLE_VARMOD_LOW",//0xA857BC78,
                "COMPONENT_CARBINERIFLE_CLIP_01",//0x9FBE33EC,
                "COMPONENT_CARBINERIFLE_CLIP_02",//0x91109691,
                "COMPONENT_CARBINERIFLE_CLIP_03",//0xBA62E935,
                "COMPONENT_CARBINERIFLE_MK2_CAMO",//0x4BDD6F16,
                "COMPONENT_CARBINERIFLE_MK2_CAMO_02",//0x406A7908,
                "COMPONENT_CARBINERIFLE_MK2_CAMO_03",//0x2F3856A4,
                "COMPONENT_CARBINERIFLE_MK2_CAMO_04",//0xE50C424D,
                "COMPONENT_CARBINERIFLE_MK2_CAMO_05",//0xD37D1F2F,
                "COMPONENT_CARBINERIFLE_MK2_CAMO_06",//0x86268483,
                "COMPONENT_CARBINERIFLE_MK2_CAMO_07",//0xF420E076,
                "COMPONENT_CARBINERIFLE_MK2_CAMO_08",//0xAAE14DF8,
                "COMPONENT_CARBINERIFLE_MK2_CAMO_09",//0x9893A95D,
                "COMPONENT_CARBINERIFLE_MK2_CAMO_10",//0x6B13CD3E,
                "COMPONENT_CARBINERIFLE_MK2_CAMO_IND_01",//0xDA55CD3F,
                "COMPONENT_CARBINERIFLE_MK2_CLIP_01",//0x4C7A391E,
                "COMPONENT_CARBINERIFLE_MK2_CLIP_02",//0x5DD5DBD5,
                "COMPONENT_CARBINERIFLE_MK2_CLIP_ARMORPIERCING",//0x255D5D57,
                "COMPONENT_CARBINERIFLE_MK2_CLIP_FMJ",//0x44032F11,
                "COMPONENT_CARBINERIFLE_MK2_CLIP_INCENDIARY",//0x3D25C2A7,
                "COMPONENT_CARBINERIFLE_MK2_CLIP_TRACER",//0x1757F566,
                "COMPONENT_CARBINERIFLE_VARMOD_LUXE",//0xD89B9658,
                "COMPONENT_COMBATMG_CLIP_01",//0xE1FFB34A,
                "COMPONENT_COMBATMG_CLIP_02",//0xD6C59CD6,
                "COMPONENT_COMBATMG_MK2_CAMO",//0x4A768CB5,
                "COMPONENT_COMBATMG_MK2_CAMO_02",//0xCCE06BBD,
                "COMPONENT_COMBATMG_MK2_CAMO_03",//0xBE94CF26,
                "COMPONENT_COMBATMG_MK2_CAMO_04",//0x7609BE11,
                "COMPONENT_COMBATMG_MK2_CAMO_05",//0x48AF6351,
                "COMPONENT_COMBATMG_MK2_CAMO_06",//0x9186750A,
                "COMPONENT_COMBATMG_MK2_CAMO_07",//0x84555AA8,
                "COMPONENT_COMBATMG_MK2_CAMO_08",//0x1B4C088B,
                "COMPONENT_COMBATMG_MK2_CAMO_09",//0xE046DFC,
                "COMPONENT_COMBATMG_MK2_CAMO_10",//0x28B536E,
                "COMPONENT_COMBATMG_MK2_CAMO_IND_01",//0xD703C94D,
                "COMPONENT_COMBATMG_MK2_CLIP_01",//0x492B257C,
                "COMPONENT_COMBATMG_MK2_CLIP_02",//0x17DF42E9,
                "COMPONENT_COMBATMG_MK2_CLIP_ARMORPIERCING",//0x29882423,
                "COMPONENT_COMBATMG_MK2_CLIP_FMJ",//0x57EF1CC8,
                "COMPONENT_COMBATMG_MK2_CLIP_INCENDIARY",//0xC326BDBA,
                "COMPONENT_COMBATMG_MK2_CLIP_TRACER",//0xF6649745,
                "COMPONENT_COMBATMG_VARMOD_LOWRIDER",//0x92FECCDD,
                "COMPONENT_COMBATPDW_CLIP_01",//0x4317F19E,
                "COMPONENT_COMBATPDW_CLIP_02",//0x334A5203,
                "COMPONENT_COMBATPDW_CLIP_03",//0x6EB8C8DB,
                "COMPONENT_COMBATPISTOL_CLIP_01",//0x721B079,
                "COMPONENT_COMBATPISTOL_CLIP_02",//0xD67B4F2D,
                "COMPONENT_COMBATPISTOL_VARMOD_LOWRIDER",//0xC6654D72,
                "COMPONENT_COMPACTRIFLE_CLIP_01",//0x513F0A63,
                "COMPONENT_COMPACTRIFLE_CLIP_02",//0x59FF9BF8,
                "COMPONENT_COMPACTRIFLE_CLIP_03",//0xC607740E,
                "COMPONENT_GRENADELAUNCHER_CLIP_01",//0x11AE5C97,
                "COMPONENT_GUSENBERG_CLIP_01",//0x1CE5A6A5,
                "COMPONENT_GUSENBERG_CLIP_02",//0xEAC8C270,
                "COMPONENT_HEAVYPISTOL_CLIP_01",//0xD4A969A,
                "COMPONENT_HEAVYPISTOL_CLIP_02",//0x64F9C62B,
                "COMPONENT_HEAVYPISTOL_VARMOD_LUXE",//0x7A6A7B7B,
                "COMPONENT_HEAVYSHOTGUN_CLIP_01",//0x324F2D5F,
                "COMPONENT_HEAVYSHOTGUN_CLIP_02",//0x971CF6FD,
                "COMPONENT_HEAVYSHOTGUN_CLIP_03",//0x88C7DA53,
                "COMPONENT_HEAVYSNIPER_CLIP_01",//0x476F52F4,
                "COMPONENT_HEAVYSNIPER_MK2_CAMO",//0xF8337D02,
                "COMPONENT_HEAVYSNIPER_MK2_CAMO_02",//0xC5BEDD65,
                "COMPONENT_HEAVYSNIPER_MK2_CAMO_03",//0xE9712475,
                "COMPONENT_HEAVYSNIPER_MK2_CAMO_04",//0x13AA78E7,
                "COMPONENT_HEAVYSNIPER_MK2_CAMO_05",//0x26591E50,
                "COMPONENT_HEAVYSNIPER_MK2_CAMO_06",//0x302731EC,
                "COMPONENT_HEAVYSNIPER_MK2_CAMO_07",//0xAC722A78,
                "COMPONENT_HEAVYSNIPER_MK2_CAMO_08",//0xBEA4CEDD,
                "COMPONENT_HEAVYSNIPER_MK2_CAMO_09",//0xCD776C82,
                "COMPONENT_HEAVYSNIPER_MK2_CAMO_10",//0xABC5ACC7,
                "COMPONENT_HEAVYSNIPER_MK2_CAMO_IND_01",//0x6C32D2EB,
                "COMPONENT_HEAVYSNIPER_MK2_CLIP_01",//0xFA1E1A28,
                "COMPONENT_HEAVYSNIPER_MK2_CLIP_02",//0x2CD8FF9D,
                "COMPONENT_HEAVYSNIPER_MK2_CLIP_ARMORPIERCING",//0xF835D6D4,
                "COMPONENT_HEAVYSNIPER_MK2_CLIP_EXPLOSIVE",//0x89EBDAA7,
                "COMPONENT_HEAVYSNIPER_MK2_CLIP_FMJ",//0x3BE948F6,
                "COMPONENT_HEAVYSNIPER_MK2_CLIP_INCENDIARY",//0xEC0F617,
                "COMPONENT_KNUCKLE_VARMOD_BALLAS",//0xEED9FD63,
                "COMPONENT_KNUCKLE_VARMOD_BASE",//0xF3462F33,
                "COMPONENT_KNUCKLE_VARMOD_DIAMOND",//0x9761D9DC,
                "COMPONENT_KNUCKLE_VARMOD_DOLLAR",//0x50910C31,
                "COMPONENT_KNUCKLE_VARMOD_HATE",//0x7DECFE30,
                "COMPONENT_KNUCKLE_VARMOD_KING",//0xE28BABEF,
                "COMPONENT_KNUCKLE_VARMOD_LOVE",//0x3F4E8AA6,
                "COMPONENT_KNUCKLE_VARMOD_PIMP",//0xC613F685,
                "COMPONENT_KNUCKLE_VARMOD_PLAYER",//0x8B808BB,
                "COMPONENT_KNUCKLE_VARMOD_VAGOS",//0x7AF3F785,
                "COMPONENT_MACHINEPISTOL_CLIP_01",//0x476E85FF,
                "COMPONENT_MACHINEPISTOL_CLIP_02",//0xB92C6979,
                "COMPONENT_MACHINEPISTOL_CLIP_03",//0xA9E9CAF4,
                "COMPONENT_MARKSMANRIFLE_CLIP_01",//0xD83B4141,
                "COMPONENT_MARKSMANRIFLE_CLIP_02",//0xCCFD2AC5,
                "COMPONENT_MARKSMANRIFLE_MK2_CAMO",//0x9094FBA0,
                "COMPONENT_MARKSMANRIFLE_MK2_CAMO_02",//0x7320F4B2,
                "COMPONENT_MARKSMANRIFLE_MK2_CAMO_03",//0x60CF500F,
                "COMPONENT_MARKSMANRIFLE_MK2_CAMO_04",//0xFE668B3F,
                "COMPONENT_MARKSMANRIFLE_MK2_CAMO_05",//0xF3757559,
                "COMPONENT_MARKSMANRIFLE_MK2_CAMO_06",//0x193B40E8,
                "COMPONENT_MARKSMANRIFLE_MK2_CAMO_07",//0x107D2F6C,
                "COMPONENT_MARKSMANRIFLE_MK2_CAMO_08",//0xC4E91841,
                "COMPONENT_MARKSMANRIFLE_MK2_CAMO_09",//0x9BB1C5D3,
                "COMPONENT_MARKSMANRIFLE_MK2_CAMO_10",//0x3B61040B,
                "COMPONENT_MARKSMANRIFLE_MK2_CAMO_IND_01",//0xB7A316DA,
                "COMPONENT_MARKSMANRIFLE_MK2_CLIP_01",//0x94E12DCE,
                "COMPONENT_MARKSMANRIFLE_MK2_CLIP_02",//0xE6CFD1AA,
                "COMPONENT_MARKSMANRIFLE_MK2_CLIP_ARMORPIERCING",//0xF46FD079,
                "COMPONENT_MARKSMANRIFLE_MK2_CLIP_FMJ",//0xE14A9ED3,
                "COMPONENT_MARKSMANRIFLE_MK2_CLIP_INCENDIARY",//0x6DD7A86E,
                "COMPONENT_MARKSMANRIFLE_MK2_CLIP_TRACER",//0xD77A22D2,
                "COMPONENT_MARKSMANRIFLE_VARMOD_LUXE",//0x161E9241,
                "COMPONENT_MG_CLIP_01",//0xF434EF84,
                "COMPONENT_MG_CLIP_02",//0x82158B47,
                "COMPONENT_MG_VARMOD_LOWRIDER",//0xD6DABABE,
                "COMPONENT_MICROSMG_CLIP_01",//0xCB48AEF0,
                "COMPONENT_MICROSMG_CLIP_02",//0x10E6BA2B,
                "COMPONENT_MICROSMG_VARMOD_LUXE",//0x487AAE09,
                "COMPONENT_MINISMG_CLIP_01",//0x84C8B2D3,
                "COMPONENT_MINISMG_CLIP_02",//0x937ED0B7,
                "COMPONENT_PISTOL50_CLIP_01",//0x2297BE19,
                "COMPONENT_PISTOL50_CLIP_02",//0xD9D3AC92,
                "COMPONENT_PISTOL50_VARMOD_LUXE",//0x77B8AB2F,
                "COMPONENT_PISTOL_CLIP_01",//0xFED0FD71,
                "COMPONENT_PISTOL_CLIP_02",//0xED265A1C,
                "COMPONENT_PISTOL_MK2_CAMO",//0x5C6C749C,
                "COMPONENT_PISTOL_MK2_CAMO_02",//0x15F7A390,
                "COMPONENT_PISTOL_MK2_CAMO_02_SLIDE",//0x1A1F1260,
                "COMPONENT_PISTOL_MK2_CAMO_03",//0x968E24DB,
                "COMPONENT_PISTOL_MK2_CAMO_03_SLIDE",//0xE4E00B70,
                "COMPONENT_PISTOL_MK2_CAMO_04",//0x17BFA99,
                "COMPONENT_PISTOL_MK2_CAMO_04_SLIDE",//0x2C298B2B,
                "COMPONENT_PISTOL_MK2_CAMO_05",//0xF2685C72,
                "COMPONENT_PISTOL_MK2_CAMO_05_SLIDE",//0xDFB79725,
                "COMPONENT_PISTOL_MK2_CAMO_06",//0xDD2231E6,
                "COMPONENT_PISTOL_MK2_CAMO_06_SLIDE",//0x6BD7228C,
                "COMPONENT_PISTOL_MK2_CAMO_07",//0xBB43EE76,
                "COMPONENT_PISTOL_MK2_CAMO_07_SLIDE",//0x9DDBCF8C,
                "COMPONENT_PISTOL_MK2_CAMO_08",//0x4D901310,
                "COMPONENT_PISTOL_MK2_CAMO_08_SLIDE",//0xB319A52C,
                "COMPONENT_PISTOL_MK2_CAMO_09",//0x5F31B653,
                "COMPONENT_PISTOL_MK2_CAMO_09_SLIDE",//0xC6836E12,
                "COMPONENT_PISTOL_MK2_CAMO_10",//0x697E19A0,
                "COMPONENT_PISTOL_MK2_CAMO_10_SLIDE",//0x43B1B173,
                "COMPONENT_PISTOL_MK2_CAMO_IND_01",//0x930CB951,
                "COMPONENT_PISTOL_MK2_CAMO_IND_01_SLIDE",//0x4ABDA3FA,
                "COMPONENT_PISTOL_MK2_CAMO_SLIDE",//0xB4FC92B0,
                "COMPONENT_PISTOL_MK2_CLIP_01",//0x94F42D62,
                "COMPONENT_PISTOL_MK2_CLIP_02",//0x5ED6C128,
                "COMPONENT_PISTOL_MK2_CLIP_FMJ",//0x4F37DF2A,
                "COMPONENT_PISTOL_MK2_CLIP_HOLLOWPOINT",//0x85FEA109,
                "COMPONENT_PISTOL_MK2_CLIP_INCENDIARY",//0x2BBD7A3A,
                "COMPONENT_PISTOL_MK2_CLIP_TRACER",//0x25CAAEAF,
                "COMPONENT_PISTOL_VARMOD_LUXE",//0xD7391086,
                "COMPONENT_PUMPSHOTGUN_MK2_CAMO",//0xE3BD9E44,
                "COMPONENT_PUMPSHOTGUN_MK2_CAMO_02",//0x17148F9B,
                "COMPONENT_PUMPSHOTGUN_MK2_CAMO_03",//0x24D22B16,
                "COMPONENT_PUMPSHOTGUN_MK2_CAMO_04",//0xF2BEC6F0,
                "COMPONENT_PUMPSHOTGUN_MK2_CAMO_05",//0x85627D,
                "COMPONENT_PUMPSHOTGUN_MK2_CAMO_06",//0xDC2919C5,
                "COMPONENT_PUMPSHOTGUN_MK2_CAMO_07",//0xE184247B,
                "COMPONENT_PUMPSHOTGUN_MK2_CAMO_08",//0xD8EF9356,
                "COMPONENT_PUMPSHOTGUN_MK2_CAMO_09",//0xEF29BFCA,
                "COMPONENT_PUMPSHOTGUN_MK2_CAMO_10",//0x67AEB165,
                "COMPONENT_PUMPSHOTGUN_MK2_CAMO_IND_01",//0x46411A1D,
                "COMPONENT_PUMPSHOTGUN_MK2_CLIP_01",//0xCD940141,
                "COMPONENT_PUMPSHOTGUN_MK2_CLIP_ARMORPIERCING",//0x4E65B425,
                "COMPONENT_PUMPSHOTGUN_MK2_CLIP_EXPLOSIVE",//0x3BE4465D,
                "COMPONENT_PUMPSHOTGUN_MK2_CLIP_HOLLOWPOINT",//0xE9582927,
                "COMPONENT_PUMPSHOTGUN_MK2_CLIP_INCENDIARY",//0x9F8A1BF5,
                "COMPONENT_PUMPSHOTGUN_VARMOD_LOWRIDER",//0xA2D79DDB,
                "COMPONENT_REVOLVER_CLIP_01",//0xE9867CE3,
                "COMPONENT_REVOLVER_MK2_CAMO",//0xC03FED9F,
                "COMPONENT_REVOLVER_MK2_CAMO_02",//0xB5DE24,
                "COMPONENT_REVOLVER_MK2_CAMO_03",//0xA7FF1B8,
                "COMPONENT_REVOLVER_MK2_CAMO_04",//0xF2E24289,
                "COMPONENT_REVOLVER_MK2_CAMO_05",//0x11317F27,
                "COMPONENT_REVOLVER_MK2_CAMO_06",//0x17C30C42,
                "COMPONENT_REVOLVER_MK2_CAMO_07",//0x257927AE,
                "COMPONENT_REVOLVER_MK2_CAMO_08",//0x37304B1C,
                "COMPONENT_REVOLVER_MK2_CAMO_09",//0x48DAEE71,
                "COMPONENT_REVOLVER_MK2_CAMO_10",//0x20ED9B5B,
                "COMPONENT_REVOLVER_MK2_CAMO_IND_01",//0xD951E867,
                "COMPONENT_REVOLVER_MK2_CLIP_01",//0xBA23D8BE,
                "COMPONENT_REVOLVER_MK2_CLIP_FMJ",//0xDC8BA3F,
                "COMPONENT_REVOLVER_MK2_CLIP_HOLLOWPOINT",//0x10F42E8F,
                "COMPONENT_REVOLVER_MK2_CLIP_INCENDIARY",//0xEFBF25,
                "COMPONENT_REVOLVER_MK2_CLIP_TRACER",//0xC6D8E476,
                "COMPONENT_REVOLVER_VARMOD_BOSS",//0x16EE3040,
                "COMPONENT_REVOLVER_VARMOD_GOON",//0x9493B80D,
                "COMPONENT_SAWNOFFSHOTGUN_VARMOD_LUXE",//0x85A64DF9,
                "COMPONENT_SMG_CLIP_01",//0x26574997,
                "COMPONENT_SMG_CLIP_02",//0x350966FB,
                "COMPONENT_SMG_CLIP_03",//0x79C77076,
                "COMPONENT_SMG_MK2_CAMO",//0xC4979067,
                "COMPONENT_SMG_MK2_CAMO_02",//0x3815A945,
                "COMPONENT_SMG_MK2_CAMO_03",//0x4B4B4FB0,
                "COMPONENT_SMG_MK2_CAMO_04",//0xEC729200,
                "COMPONENT_SMG_MK2_CAMO_05",//0x48F64B22,
                "COMPONENT_SMG_MK2_CAMO_06",//0x35992468,
                "COMPONENT_SMG_MK2_CAMO_07",//0x24B782A5,
                "COMPONENT_SMG_MK2_CAMO_08",//0xA2E67F01,
                "COMPONENT_SMG_MK2_CAMO_09",//0x2218FD68,
                "COMPONENT_SMG_MK2_CAMO_10",//0x45C5C3C5,
                "COMPONENT_SMG_MK2_CAMO_IND_01",//0x399D558F,
                "COMPONENT_SMG_MK2_CLIP_01",//0x4C24806E,
                "COMPONENT_SMG_MK2_CLIP_02",//0xB9835B2E,
                "COMPONENT_SMG_MK2_CLIP_FMJ",//0xB5A715F,
                "COMPONENT_SMG_MK2_CLIP_HOLLOWPOINT",//0x3A1BD6FA,
                "COMPONENT_SMG_MK2_CLIP_INCENDIARY",//0xD99222E5,
                "COMPONENT_SMG_MK2_CLIP_TRACER",//0x7FEA36EC,
                "COMPONENT_SMG_VARMOD_LUXE",//0x27872C90,
                "COMPONENT_SNIPERRIFLE_CLIP_01",//0x9BC64089,
                "COMPONENT_SNIPERRIFLE_VARMOD_LUXE",//0x4032B5E7,
                "COMPONENT_SNSPISTOL_CLIP_01",//0xF8802ED9,
                "COMPONENT_SNSPISTOL_CLIP_02",//0x7B0033B3,
                "COMPONENT_SNSPISTOL_MK2_CAMO",//0xF7BEEDD,
                "COMPONENT_SNSPISTOL_MK2_CAMO_02",//0x8A612EF6,
                "COMPONENT_SNSPISTOL_MK2_CAMO_02_SLIDE",//0x29366D21,
                "COMPONENT_SNSPISTOL_MK2_CAMO_03",//0x76FA8829,
                "COMPONENT_SNSPISTOL_MK2_CAMO_03_SLIDE",//0x3ADE514B,
                "COMPONENT_SNSPISTOL_MK2_CAMO_04",//0xA93C6CAC,
                "COMPONENT_SNSPISTOL_MK2_CAMO_04_SLIDE",//0xE64513E9,
                "COMPONENT_SNSPISTOL_MK2_CAMO_05",//0x9C905354,
                "COMPONENT_SNSPISTOL_MK2_CAMO_05_SLIDE",//0xCD7AEB9A,
                "COMPONENT_SNSPISTOL_MK2_CAMO_06",//0x4DFA3621,
                "COMPONENT_SNSPISTOL_MK2_CAMO_06_SLIDE",//0xFA7B27A6,
                "COMPONENT_SNSPISTOL_MK2_CAMO_07",//0x42E91FFF,
                "COMPONENT_SNSPISTOL_MK2_CAMO_07_SLIDE",//0xE285CA9A,
                "COMPONENT_SNSPISTOL_MK2_CAMO_08",//0x54A8437D,
                "COMPONENT_SNSPISTOL_MK2_CAMO_08_SLIDE",//0x2B904B19,
                "COMPONENT_SNSPISTOL_MK2_CAMO_09",//0x68C2746,
                "COMPONENT_SNSPISTOL_MK2_CAMO_09_SLIDE",//0x22C24F9C,
                "COMPONENT_SNSPISTOL_MK2_CAMO_10",//0x2366E467,
                "COMPONENT_SNSPISTOL_MK2_CAMO_10_SLIDE",//0x8D0D5ECD,
                "COMPONENT_SNSPISTOL_MK2_CAMO_IND_01",//0x441882E6,
                "COMPONENT_SNSPISTOL_MK2_CAMO_IND_01_SLIDE",//0x1F07150A,
                "COMPONENT_SNSPISTOL_MK2_CAMO_SLIDE",//0xE7EE68EA,
                "COMPONENT_SNSPISTOL_MK2_CLIP_01",//0x1466CE6,
                "COMPONENT_SNSPISTOL_MK2_CLIP_02",//0xCE8C0772,
                "COMPONENT_SNSPISTOL_MK2_CLIP_FMJ",//0xC111EB26,
                "COMPONENT_SNSPISTOL_MK2_CLIP_HOLLOWPOINT",//0x8D107402,
                "COMPONENT_SNSPISTOL_MK2_CLIP_INCENDIARY",//0xE6AD5F79,
                "COMPONENT_SNSPISTOL_MK2_CLIP_TRACER",//0x902DA26E,
                "COMPONENT_SNSPISTOL_VARMOD_LOWRIDER",//0x8033ECAF,
                "COMPONENT_SPECIALCARBINE_CLIP_01",//0xC6C7E581,
                "COMPONENT_SPECIALCARBINE_CLIP_02",//0x7C8BD10E,
                "COMPONENT_SPECIALCARBINE_CLIP_03",//0x6B59AEAA,
                "COMPONENT_SPECIALCARBINE_MK2_CAMO",//0xD40BB53B,
                "COMPONENT_SPECIALCARBINE_MK2_CAMO_02",//0x431B238B,
                "COMPONENT_SPECIALCARBINE_MK2_CAMO_03",//0x34CF86F4,
                "COMPONENT_SPECIALCARBINE_MK2_CAMO_04",//0xB4C306DD,
                "COMPONENT_SPECIALCARBINE_MK2_CAMO_05",//0xEE677A25,
                "COMPONENT_SPECIALCARBINE_MK2_CAMO_06",//0xDF90DC78,
                "COMPONENT_SPECIALCARBINE_MK2_CAMO_07",//0xA4C31EE,
                "COMPONENT_SPECIALCARBINE_MK2_CAMO_08",//0x89CFB0F7,
                "COMPONENT_SPECIALCARBINE_MK2_CAMO_09",//0x7B82145C,
                "COMPONENT_SPECIALCARBINE_MK2_CAMO_10",//0x899CAF75,
                "COMPONENT_SPECIALCARBINE_MK2_CAMO_IND_01",//0x5218C819,
                "COMPONENT_SPECIALCARBINE_MK2_CLIP_01",//0x16C69281,
                "COMPONENT_SPECIALCARBINE_MK2_CLIP_02",//0xDE1FA12C,
                "COMPONENT_SPECIALCARBINE_MK2_CLIP_ARMORPIERCING",//0x51351635,
                "COMPONENT_SPECIALCARBINE_MK2_CLIP_FMJ",//0x503DEA90,
                "COMPONENT_SPECIALCARBINE_MK2_CLIP_INCENDIARY",//0xDE011286,
                "COMPONENT_SPECIALCARBINE_MK2_CLIP_TRACER",//0x8765C68A,
                "COMPONENT_SPECIALCARBINE_VARMOD_LOWRIDER",//0x730154F2,
                "COMPONENT_SWITCHBLADE_VARMOD_BASE",//0x9137A500,
                "COMPONENT_SWITCHBLADE_VARMOD_VAR1",//0x5B3E7DB6,
                "COMPONENT_SWITCHBLADE_VARMOD_VAR2",//0xE7939662,
                "COMPONENT_VINTAGEPISTOL_CLIP_01",//0x45A3B6BB,
                "COMPONENT_VINTAGEPISTOL_CLIP_02",//0x33BA12E8

                "COMPONENT_AT_AR_FLSH",//
                "COMPONENT_AT_AR_SUPP",//
                "COMPONENT_MILITARYRIFLE_CLIP_01",//
                "COMPONENT_MILITARYRIFLE_CLIP_02",//
                "COMPONENT_MILITARYRIFLE_SIGHT_01",//
                "COMPONENT_AT_SCOPE_SMALL",//
                "COMPONENT_AT_AR_FLSH",//
                "COMPONENT_AT_AR_SUPP",//

                "COMPONENT_HEAVYRIFLE_CLIP_01",// | 0x5AF49386
                "COMPONENT_HEAVYRIFLE_CLIP_02",//");// | 0x6CBF371B
                "COMPONENT_HEAVYRIFLE_SIGHT_01",// | 0xB3E1C452
                "COMPONENT_AT_SCOPE_MEDIUM",// | 0xA0D89C42
                "COMPONENT_AT_AR_FLSH",// | 0x7BC4CDDC
                "COMPONENT_AT_AR_SUPP",// | 0x837445AA
                "COMPONENT_AT_AR_AFGRIP",// | 0xC164F53
                "COMPONENT_HEAVYRIFLE_CAMO1",// | 0xEC9FECD9
                "COMPONENT_APPISTOL_VARMOD_SECURITY",//
                "COMPONENT_MICROSMG_VARMOD_SECURITY",//
                "COMPONENT_PUMPSHOTGUN_VARMOD_SECURITY"//
            };

            return sAddsList;
        }
        private void PickUpThePhone()
        {
            float fThisWay = fphdirect - 88.00f;
            int iTFuckedUp = Game.GameTime + 12000;
            Game.Player.Character.FreezePosition = true;
            Script.Wait(500);
            Game.Player.Character.FreezePosition = false;
            WalkThisWay(Game.Player.Character, vPhoneCorona, 1.00f);
            Script.Wait(2500);
            Game.Player.Character.Task.AchieveHeading(fThisWay, -1);
            while (!BeInAngle(2.50f, fThisWay, Game.Player.Character.Heading) && Game.GameTime < iTFuckedUp)
            {
                Game.Player.Character.Task.AchieveHeading(fThisWay, -1);
                Script.Wait(1000);
            }
            ForceAnimOnce(Game.Player.Character, "oddjobs@assassinate@multi@call", "ass_multi_target_call_p1", Game.Player.Character.Position, Game.Player.Character.Rotation);
            Script.Wait(4000);
            bPickUpHangUp = true;
        }
        private void ControlSelect(int iChoices, bool bPhoneAnim)
        {
            LogThis("ControlSelect, iChoices == " + iChoices);
            bool bSelecta = true;
            if (bSubscribeNag)
            {
                bSubscribeNag = false;
                UI.Notify(MyLang.Othertext[157]);
            }
            while (bSelecta)
            {
                if (iChoices == 1)
                {
                    ControlerUI(MyLang.Context[1], 1);
                    TakeNote();

                    if (WhileButtonDown(21))
                    {
                        if (iJobType == 11)
                        {
                            iCurrentLap = 1;
                            iChoices = 2;
                        }
                        else
                        {
                            iChoices = 0;
                            PlayerPlays();
                        }
                    }
                    else if (WhileButtonDown(22))
                    {
                        iChoices = 0;
                        bOnTheJob = false;
                        bLookingForPB = true;
                    }
                    else if (WhileButtonDown(47))
                    {
                        iChoices = 0;
                        SettingsMenu(false);
                    }
                    else if (Game.Player.Character.Position.DistanceTo(vPhoneCorona) > 2.50f)
                    {
                        iChoices = 0;
                        bOnTheJob = false;
                        bLookingForPB = true;
                    }
                }       //PhoneAnswer
                else if (iChoices == 2)
                {
                    if (bSoloRace)
                        ControlerUI(MyLang.Context[5] + MyLang.Context[6], 1);
                    else
                        ControlerUI(MyLang.Context[5] + MyLang.Context[7], 1);

                    if (WhileButtonDown(21))
                        iChoices = 3;
                    else if (WhileButtonDown(47))
                        bSoloRace = !bSoloRace;
                }       //Racism
                else if (iChoices == 3)
                {
                    ControlerUI(MyLang.Context[3] + iCurrentLap, 1);
                    if (WhileButtonDown(21))
                    {
                        iChoices = 0;
                        if (bOnCayoLand)
                            Raceist();
                        else
                            PlayerPlays();
                    }
                    else if (WhileButtonDown(47))
                    {
                        if (iCurrentLap > 1)
                            iCurrentLap = iCurrentLap - 1;
                    }
                    else if (WhileButtonDown(51))
                    {
                        if (iCurrentLap < 10)
                            iCurrentLap = iCurrentLap + 1;
                    }
                }       //Raceism2
                else if (iChoices == 4)
                {
                    ControlerUI(MyLang.Context[9], 1);
                    TakeNote();
                    if (WhileButtonDown(47))
                    {
                        iChoices = 0;
                        SettingsMenu(false);
                    }
                    else if (Game.Player.Character.Position.DistanceTo(vPhoneCorona) > 2.50f)
                    {
                        iChoices = 0;
                        bOnTheJob = false;
                        bLookingForPB = true;
                    }
                }       //PhoneBox No Jobs Selected
                else if (iChoices == 5)
                {
                    if (iWait4Sec < Game.GameTime)
                    {
                        ControlerUI(MyLang.Context[2], 1);
                        StickySubTitle(MyLang.Mistext[190]);
                        if (WhileButtonDown(21))
                        {
                            bPacBouns = false;
                            iChoices = 0;
                            iMissionSeq = 0;
                            iLocationX = 99;
                            GetAwayDriver();
                        }
                        else if (WhileButtonDown(22))
                        {
                            bPacBouns = false;
                            iChoices = 0;
                            PostMess();
                        }
                    }
                }       //Pacstandard
                else if (iChoices == 6)
                {
                    ControlerUI(MyLang.Context[2], 1);
                    if (WhileButtonDown(21))
                    {
                        RemoveTargets();
                        CleanUpPeds();
                        iChoices = 0;
                        bMoreFubar = true;
                        bJobLoaded = false;
                        iFubard += 1;
                        WriteNSMDat(13, iFubard);
                        iRepMisssion += 1;
                        iCashReward += iCashBouns;
                        AreULocal();
                    }
                    else if (WhileButtonDown(22) || !(Game.Player.Character.IsInVehicle()))
                    {
                        bMoreFubar = false;
                        iChoices = 0;
                        iFubard += 1;
                        WriteNSMDat(13, iFubard);
                        iRepMisssion += 1;
                        iCashReward += iCashBouns;
                        iMissionSeq = 9;
                    }
                }       //fubar
                else if (iChoices == 7)
                {
                    ControlerUI(MyLang.Context[2], 1);
                    if (WhileButtonDown(21))
                    {
                        iRepMisssion += 1;
                        iChoices = 0;
                        iMissionSeq = 0;
                        iCashReward += iCashBouns;
                        Ambulance();
                    }
                    else if (WhileButtonDown(22))
                    {
                        bAmberAntz = false;
                        iChoices = 0;
                        iRepMisssion += 1;
                        iCashReward += iCashBouns;
                        iMissionSeq = 9;
                    }
                }       //Ambullance
                else if (iChoices == 8)
                {
                    ControlerUI(MyLang.Context[2], 1);
                    if (WhileButtonDown(21))
                    {
                        CleanUpPeds();
                        CleanUpProps();
                        CleanUpVehicles();
                        CleanUpFire();
                        RemoveTargets();
                        iMissionSeq = 0;
                        iCashReward += iCashBouns;
                        iRepMisssion += 1;
                        iChoices = 0;
                        FireDept();
                    }
                    else if (WhileButtonDown(22))
                    {
                        iMissionSeq = 40;
                        iCashReward += iCashBouns;
                        bReFire = false;
                        iRepMisssion += 1;
                        iChoices = 0;
                    }
                }       //Fire
                else if (iChoices == 9)
                {
                    ControlerUI(MyLang.Context[8], 1);
                    if (WhileButtonDown(21))
                    {
                        iMissionSeq = 7;
                        iChoices = 0;
                        iStartOnYAcht = 10;
                        SaveXmlSettings(MySettings, sNSPMSet);
                    }
                    else if (WhileButtonDown(22))
                    {
                        iMissionSeq = 7;
                        iChoices = 0;
                        iStartOnYAcht = 0;
                        SaveXmlSettings(MySettings, sNSPMSet);
                    }
                }       //Yacht2
                else if (iChoices == 10)
                {
                    ControlerUI(ShowComs(MySettings.YachtPrice, true, false) + MyLang.Context[4], 1);
                    if (MySettings.YachtPrice < 0)
                        MySettings.YachtPrice = 0;
                    else if (WhileButtonDown(21))
                    {
                        if (iNSPMBank > MySettings.YachtPrice)
                        {
                            iChoices = 9;
                            iCashReward = 0;
                            MySettings.YachtPrice *= -1;
                            YourCoinPopUp(MySettings.YachtPrice, 1, "Yacht Purchased");
                            iOwnaYacht = iProcessForYacht;
                            bYachtOwner = true;
                            MySettings.YachtPrice = 0;
                            WriteNSMDat(0, iProcessForYacht);
                            Water02_BoatLaunch();
                        }
                        else
                        {
                            UI.Notify("Funds not avalable");
                            iChoices = 0;
                            iMissionSeq = 7;
                            iCashReward = 20000;
                            bYachtOwner = false;
                            iOwnaYacht = 0;
                            if (!VehTrackin_01.IsDead)
                                WarptoAnyVeh(VehTrackin_01, Game.Player.Character, 1);
                            else
                            {
                                Vector3 Vpos = new Vector3(-1848.826f, -1200.298f, 19.14339f);
                                SlowFastTravel(Vpos, 165.84f);
                            }
                            if (bOldYacht)
                                Water02_AddHeistYacht(false);
                            SaveXmlSettings(MySettings, sNSPMSet);
                        }
                    }
                    else if (WhileButtonDown(22))
                    {
                        iChoices = 0;
                        iMissionSeq = 7;
                        iCashReward = 20000;
                        ///YachtStuff_TheBlip(false);
                        bYachtOwner = false;
                        iOwnaYacht = 0;
                        if (!VehTrackin_01.IsDead)
                            WarptoAnyVeh(VehTrackin_01, Game.Player.Character, 1);
                        else
                        {
                            Vector3 Vpos = new Vector3(-1848.826f, -1200.298f, 19.14339f);
                            SlowFastTravel(Vpos, 165.84f);
                        }
                        if (bOldYacht)
                            Water02_AddHeistYacht(false);
                        SaveXmlSettings(MySettings, sNSPMSet);
                    }
                }      //Yacht
                else if (iChoices == 11)
                {
                    ControlerUI(MyLang.Context[2], 1);
                    if (WhileButtonDown(21))
                    {
                        iMissionSeq = 0;
                        iChoices = 0;
                        bDeliverWowRep = true;
                        iCashReward += iCashBouns;
                        Deliverwho();
                    }
                    else if (WhileButtonDown(22))
                    {
                        iChoices = 0;
                        bDeliverWowRep = false;
                        WardOutPut("MissionOut.Xml", Game.Player.Character);
                        NSCoinInvestments(true, 5, 7, "Deliverwho");
                        GameOver(false, "", false, iCashReward);
                    }
                }       //Delliverwho
                else
                {
                    if (bPhoneAnim)
                    {
                        if (bPickUpHangUp)
                        {
                            ForceAnimOnceEnding(Game.Player.Character, "oddjobs@assassinate@multi@call", "ass_multi_target_call_p1", Game.Player.Character.Position, Game.Player.Character.Rotation, 0.88f);
                            Script.Wait(4000);
                            Game.Player.Character.Task.ClearAnimation("oddjobs@assassinate@multi@call", "ass_multi_target_call_p1");
                            bPickUpHangUp = false;
                        }
                    }
                    bSelecta = false;
                }
                Script.Wait(1);
            }

            LogThis("ControlSelect End, iChoices == " + iChoices);
        }
        private void OnLoadup()
        {
            LogThis("OnLoadup " + sVersion);

            Function.Call(Hash.SET_RELATIONSHIP_BETWEEN_GROUPS, 0, GP_Player, GP_ANPCs);
            Function.Call(Hash.SET_RELATIONSHIP_BETWEEN_GROUPS, 0, GP_ANPCs, GP_Player);

            Function.Call(Hash.SET_RELATIONSHIP_BETWEEN_GROUPS, 5, GP_Attack, GP_Player);
            Function.Call(Hash.SET_RELATIONSHIP_BETWEEN_GROUPS, 5, GP_Player, GP_Attack);

            Function.Call(Hash.SET_RELATIONSHIP_BETWEEN_GROUPS, 5, GP_Player, GP_Mental);
            Function.Call(Hash.SET_RELATIONSHIP_BETWEEN_GROUPS, 5, GP_Mental, GP_Player);

            Function.Call(Hash.SET_RELATIONSHIP_BETWEEN_GROUPS, 5, GP_BNPCs, GP_Player);
            Function.Call(Hash.SET_RELATIONSHIP_BETWEEN_GROUPS, 5, GP_Player, GP_BNPCs);

            Function.Call(Hash.SET_RELATIONSHIP_BETWEEN_GROUPS, 5, GP_Mental, GP_Mental);

            Function.Call(Hash.SET_RELATIONSHIP_BETWEEN_GROUPS, 5, GP_ANPCs, GP_BNPCs);
            Function.Call(Hash.SET_RELATIONSHIP_BETWEEN_GROUPS, 5, GP_BNPCs, GP_ANPCs);

            ListBuilder();
            ReadXmlSet();
            LangReader();
            GoFetchSettings();
            FindCustomCarz();
            CleanTriggers();

            if (File.Exists("" + Directory.GetCurrentDirectory() + "/Menyoo.asi") && MySettings.PreLoadOnline)
                MySettings.MenyooAppFixer = true;
            else
                MySettings.MenyooAppFixer = false;

            if (MySettings.YachtPrice < 0)
                MySettings.YachtPrice = 0;

            Hare.Load();
            Chatter.Load();
            Drilar.Load();
            CashTil.Load();

            if (MySettings.PreLoadOnline)
                LoadOnlineIps(true);

            Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
            UI.Notify("New Street Phone Missions " + sVersion + " by ~b~Adopocalipt ~w~Loaded.");

            ReadWriteBlips(true, false, -1, -1, -1, -1, -1, -1);

            bLookingForPB = true;

        }
        private void OnTick(object sender, EventArgs e)
        {
            if (bMenuOpen)
            {
                if (YtmenuPool.IsAnyMenuOpen())
                    YtmenuPool.ProcessMenus();
                else
                {
                    Game.Player.Character.FreezePosition = false;
                    Function.Call(Hash.DISPLAY_RADAR, true);
                    bMenuOpen = false;
                    if (!bBuildMode)
                    {
                        bLookingForPB = true;
                        Function.Call(Hash.SET_VEHICLE_POPULATION_BUDGET, 3);
                        Function.Call(Hash.SET_PED_POPULATION_BUDGET, 3);
                        Function.Call(Hash.SET_FAR_DRAW_VEHICLES, true);
                        Function.Call(Hash.SET_EVERYONE_IGNORE_PLAYER, Game.Player.Character, false);
                    }
                    else
                    {
                        Function.Call(Hash.SET_VEHICLE_POPULATION_BUDGET, 0);
                        Function.Call(Hash.SET_PED_POPULATION_BUDGET, 0);
                        Function.Call(Hash.SET_FAR_DRAW_VEHICLES, false);
                        Function.Call(Hash.SET_EVERYONE_IGNORE_PLAYER, Game.Player.Character, true);
                    }

                    if (bOptionsMen)
                    {
                        bOptionsMen = false;
                        bOnTheJob = false;
                        bLookingForPB = true;
                    }

                    if (bOnlineStuffLoaded && !MySettings.PreLoadOnline)
                        LoadOnlineIps(false);
                    else if (MySettings.PreLoadOnline && !bOnlineStuffLoaded)
                        LoadOnlineIps(true);
                }
            }
            else if (bBuildMode)
            {
                if (ButtonDown(25))
                {
                    if (WhileButtonDown(140))
                        ExitBuilders();
                }

                if (bDisplayUiBar)
                {
                    Function.Call(Hash.DRAW_SCALEFORM_MOVIE_FULLSCREEN, iScale, 255, 255, 255, 255);
                }

                if (iBuildMode == 1)
                {
                    if (iBuildingUp == 0)
                    {
                        ControlerUI(MyLang.Context[10], 1);

                        if (Function.Call<bool>(Hash.IS_WAYPOINT_ACTIVE))
                        {
                            TruckBuild Trucky = new TruckBuild();
                            MyMissions.TruckersXM.Add(Trucky); 
                            
                            fList_01.Clear();
                            VectorList_01.Clear();
                            sList_01.Clear();
                            BeOnOff.Clear();
                            BeOnOff.Add(false);
                            sList_01 = BuildMishLists(4);
                            PlayerWarpToWaypoint(World.GetWaypointPosition(), false);
                            vTarget_01 = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 10);
                            sMissionVar_01 = sList_01[0];
                            MyMissions.TruckersXM[0].LiveryExtra = 0;
                            MyMissions.TruckersXM[0].VehLivery = 0;
                            VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 17, 0, 1, MyLang.Maptext[22], 1, false);
                            HelperBarBuiler(1, false);
                            iBuildingUp += 1;
                        }
                    }
                    else if (iBuildingUp == 1)
                    {
                        vTarget_01 = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 10);
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(47))
                            {
                                MyMissions.TruckersXM[0].VehVar -= 1;
                                if (MyMissions.TruckersXM[0].VehVar < 0)
                                    MyMissions.TruckersXM[0].VehVar = sList_01.Count - 1;

                                sMissionVar_01 = sList_01[MyMissions.TruckersXM[0].VehVar];
                                VehTrackin_01.Delete();
                                VehicleList_01.Remove(VehTrackin_01);
                                MyMissions.TruckersXM[0].LiveryExtra = 0;
                                MyMissions.TruckersXM[0].VehLivery = 0;
                                VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 17, 0, 1, MyLang.Maptext[22], 1, false);
                            }
                            else if (WhileButtonDown(51))
                            {
                                MyMissions.TruckersXM[0].VehVar += 1;
                                if (MyMissions.TruckersXM[0].VehVar > sList_01.Count - 1)
                                    MyMissions.TruckersXM[0].VehVar = 0;

                                sMissionVar_01 = sList_01[MyMissions.TruckersXM[0].VehVar];
                                VehTrackin_01.Delete();
                                VehicleList_01.Remove(VehTrackin_01);
                                MyMissions.TruckersXM[0].LiveryExtra = 0;
                                MyMissions.TruckersXM[0].VehLivery = 0;
                                VehTrackin_01 = null;
                                VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 17, 0, 1, MyLang.Maptext[22], 1, false);
                            }
                            else if (WhileButtonDown(27))
                            {
                                if (MyMissions.TruckersXM[0].VehVar == 0)
                                {
                                    MyMissions.TruckersXM[0].LiveryExtra = 1;
                                    MyMissions.TruckersXM[0].VehLivery = 2;

                                    VehicleMods(VehTrackin_01, 1, 2, false);
                                }
                                else
                                {
                                    int iCounter = Function.Call<int>(Hash.GET_VEHICLE_LIVERY_COUNT, VehTrackin_01.Handle);
                                    if (iCounter != -1)
                                    {
                                        MyMissions.TruckersXM[0].LiveryExtra = 5;
                                        if (MyMissions.TruckersXM[0].VehLivery < iCounter)
                                            MyMissions.TruckersXM[0].VehLivery += 1;
                                        else
                                            MyMissions.TruckersXM[0].VehLivery = 0;
                                        VehicleMods(VehTrackin_01, 5, MyMissions.TruckersXM[0].VehLivery, false);
                                    }
                                    else
                                        MyMissions.TruckersXM[0].LiveryExtra = 0;
                                }
                            }
                            else if (WhileButtonDown(173))
                            {
                                if (MyMissions.TruckersXM[0].VehVar == 0)
                                {
                                    MyMissions.TruckersXM[0].LiveryExtra = 1;
                                    MyMissions.TruckersXM[0].VehLivery = 1;

                                    VehicleMods(VehTrackin_01, 1, 1, false);
                                }
                                else
                                {
                                    int iCounter = Function.Call<int>(Hash.GET_VEHICLE_LIVERY_COUNT, VehTrackin_01.Handle);
                                    if (iCounter != -1)
                                    {
                                        MyMissions.TruckersXM[0].LiveryExtra = 5;
                                        if (MyMissions.TruckersXM[0].VehLivery > 0)
                                            MyMissions.TruckersXM[0].VehLivery -= 1;
                                        else
                                            MyMissions.TruckersXM[0].VehLivery = iCounter;
                                        VehicleMods(VehTrackin_01, 5, MyMissions.TruckersXM[0].VehLivery, false);
                                    }
                                    else
                                        MyMissions.TruckersXM[0].LiveryExtra = 0;
                                }
                            }
                            else if (WhileButtonDown(21))
                            {
                                iBuildingUp += 1;
                                if (MyMissions.TruckersXM[0].VehVar == 0)
                                    fphdirect = 5.00f;
                                else if (MyMissions.TruckersXM[0].VehVar == 1 || MyMissions.TruckersXM[0].VehVar == 3)
                                    fphdirect = 4.00f;
                                else if (MyMissions.TruckersXM[0].VehVar == 2)
                                    fphdirect = 3.50f;
                                else if (MyMissions.TruckersXM[0].VehVar == 7 || MyMissions.TruckersXM[0].VehVar == 8)
                                    fphdirect = 4.00f;
                                else
                                    fphdirect = 2.50f;
                                MyMissions.TruckersXM[0].TruckinTrail = sMissionVar_01;
                                HelperBarBuiler(2, true);
                            }
                            else if (WhileButtonDown(22))
                            {
                                CloseBaseHelpBar();
                                iBuildingUp -= 1;
                                VehTrackin_01.Delete();
                                VehicleList_01.Remove(VehTrackin_01);
                            }
                        }
                    }
                    else if (iBuildingUp == 2)
                    {
                        if (Game.Player.Character.FreezePosition)
                            Game.Player.Character.FreezePosition = false;

                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(21))
                            {
                                sList_01.Clear();
                                iBuildingUp += 1;
                                if (MyMissions.TruckersXM[0].VehVar == 0 || MyMissions.TruckersXM[0].VehVar == 1)
                                    sList_01 = BuildMishLists(1);
                                else if (MyMissions.TruckersXM[0].VehVar == 2 || MyMissions.TruckersXM[0].VehVar == 3)
                                    sList_01 = BuildMishLists(3);
                                else
                                    sList_01 = BuildMishLists(2);
                                VehTrackin_01.FreezePosition = true;
                                MyMissions.TruckersXM[0].TruckinStart01 = vGetaway;
                                MyMissions.TruckersXM[0].TruckinDir01 = fGetDir;
                                WhereAreYou();
                                MyMissions.TruckersXM[0].Local = iLocationX;
                                MyMissions.TruckersXM[0].FubarStop = World.GetNextPositionOnStreet(Game.Player.Character.Position);
                                VehicleSpawn(sList_01[0], Game.Player.Character.Position, Game.Player.Character.Heading, true, false, false, false, 18, 0, 1, MyLang.Maptext[22], 2, false);
                                HelperBarBuiler(3, true);
                            }
                            else if (WhileButtonDown(22))
                            {
                                iBuildingUp -= 1;
                                HelperBarBuiler(1, true);
                            }
                            else
                            {
                                if (ButtonDown(47))
                                    fGetDir -= 1.00f;
                                else if (ButtonDown(51))
                                    fGetDir += 1.00f;
                                else if (ButtonDown(34))
                                    vGetaway = VehTrackin_01.Position - (VehTrackin_01.RightVector * 0.10f);
                                else if (ButtonDown(35))
                                    vGetaway = VehTrackin_01.Position + (VehTrackin_01.RightVector * 0.10f);
                                else if (ButtonDown(32))
                                    vGetaway = VehTrackin_01.Position + (VehTrackin_01.ForwardVector * 0.10f);
                                else if (ButtonDown(33))
                                    vGetaway = VehTrackin_01.Position - (VehTrackin_01.ForwardVector * 0.10f);
                                else if (VehTrackin_01.Position.DistanceTo(Game.Player.Character.Position) > 75.00f)
                                    vGetaway = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 10);

                                if (!Game.Player.Character.FreezePosition)
                                    Game.Player.Character.FreezePosition = true;

                                float fGround = World.GetGroundHeight(new Vector2(vGetaway.X, vGetaway.Y));
                                VehTrackin_01.Position = new Vector3(vGetaway.X, vGetaway.Y, fGround + fphdirect);
                                VehTrackin_01.Rotation = new Vector3(0.00f, 0.00f, fGetDir);
                            }
                        }
                        else
                        {
                            fGetDir = VehTrackin_01.Heading;
                            vGetaway = VehTrackin_01.Position;
                        }

                    }
                    else if (iBuildingUp == 3)
                    {  
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(21))
                            {
                                GetOutofVeh(Game.Player.Character, 2);
                                iBuildingUp += 1;
                                MyMissions.TruckersXM[0].TruckinStart02 = VehTrackin_02.Position;
                                MyMissions.TruckersXM[0].TruckinDir02 = VehTrackin_02.Heading;
                                CloseBaseHelpBar();
                            }
                            else if (WhileButtonDown(22))
                            {
                                sList_01 = BuildMishLists(4);
                                GetOutofVeh(Game.Player.Character, 2);
                                VehicleList_01.Remove(VehTrackin_02);
                                VehTrackin_02.Delete();
                                VehTrackin_01.FreezePosition = false;
                                iBuildingUp -= 1;
                                HelperBarBuiler(2, true);
                            }
                        }
                    }
                    else if (iBuildingUp == 4)
                    {
                        ControlerUI(MyLang.Context[11], 1);
                        if (Function.Call<bool>(Hash.IS_WAYPOINT_ACTIVE))
                        {
                            PlayerWarpToWaypoint(World.GetWaypointPosition(), false);

                            vTarget_01 = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 10);
                            VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 17, 0, 1, MyLang.Maptext[22], 3, false);
                            iBuildingUp += 1;
                            HelperBarBuiler(2, false);
                        }
                        else if(ButtonDown(37))
                        {
                            if (WhileButtonDown(22))
                            {
                                if (BeOnOff[0])
                                {
                                    HelperBarBuiler(4, false);
                                    iBuildingUp = 6;
                                }
                                else
                                {
                                    HelperBarBuiler(3, false);
                                    iBuildingUp -= 1;
                                }
                            }
                        }

                    }
                    else if (iBuildingUp == 5)
                    {
                        if (Game.Player.Character.FreezePosition)
                            Game.Player.Character.FreezePosition = false;

                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(21))
                            {
                                VehTrackin_03.FreezePosition = true;
                                fList_01.Add(fGetDir);
                                VectorList_01.Add(vGetaway);
                                VehicleList_01.Remove(VehTrackin_03);
                                VehTrackin_03.Delete();
                                Game.Player.Character.FreezePosition = false;
                                iBuildingUp += 1;
                                HelperBarBuiler(4, true);
                            }
                            else if (WhileButtonDown(22))
                            {
                                VehTrackin_03.Delete();
                                VehicleList_01.Remove(VehTrackin_03);
                                Game.Player.Character.FreezePosition = false;
                                iBuildingUp -= 1;
                                CloseBaseHelpBar();
                            }
                            else
                            {
                                if (ButtonDown(47))
                                    fGetDir -= 1.00f;
                                else if (ButtonDown(51))
                                    fGetDir += 1.00f;
                                else if (ButtonDown(34))
                                    vGetaway = VehTrackin_03.Position - (VehTrackin_03.RightVector * 0.10f);
                                else if (ButtonDown(35))
                                    vGetaway = VehTrackin_03.Position + (VehTrackin_03.RightVector * 0.10f);
                                else if (ButtonDown(32))
                                    vGetaway = VehTrackin_03.Position + (VehTrackin_03.ForwardVector * 0.10f);
                                else if (ButtonDown(33))
                                    vGetaway = VehTrackin_03.Position - (VehTrackin_03.ForwardVector * 0.10f);
                                else if (VehTrackin_03.Position.DistanceTo(Game.Player.Character.Position) > 75.00f)
                                    vGetaway = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 10);

                                if (!Game.Player.Character.FreezePosition)
                                    Game.Player.Character.FreezePosition = true;

                                float fGround = World.GetGroundHeight(new Vector2(vGetaway.X, vGetaway.Y));
                                VehTrackin_03.Position = new Vector3(vGetaway.X, vGetaway.Y, fGround + fphdirect);
                                VehTrackin_03.Rotation = new Vector3(0.00f, 0.00f, fGetDir);
                            }
                        }
                        else
                        {
                            fGetDir = VehTrackin_03.Heading;
                            vGetaway = VehTrackin_03.Position;
                        }
                    }
                    else if (iBuildingUp == 6)
                    {
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(21))
                            {
                                BeOnOff[0] = true;
                                iBuildingUp = 4;
                                CloseBaseHelpBar();
                            }
                            else if (WhileButtonDown(22))
                            {
                                VectorList_01.RemoveAt(VectorList_01.Count - 1);
                                fList_01.RemoveAt(fList_01.Count - 1);
                                BeOnOff[0] = true;
                                iBuildingUp = 4;
                                CloseBaseHelpBar();
                            }
                            else if (WhileButtonDown(23))
                            {
                                iBuildingUp += 1;
                                MyMissions.TruckersXM[0].TruckinDir03 = new List<float>(fList_01);
                                MyMissions.TruckersXM[0].TruckinEnd = new List<Vector3>(VectorList_01);
                                LaunchTest();
                                Truckin();
                                SlowFastTravel(vFuMiss, 0.00f);
                            }
                        }
                    }
                    else if (iBuildingUp == 7)
                    {
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(21))
                            {
                                sList_01 = BuildMishLists(7);
                                if (sList_01.Count > 0)
                                {
                                    iBuildingUp = 10;
                                    BackToBuildMenu(1);
                                }
                                else
                                {
                                    string sFileName = "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/" + Game.GetUserInput(255) + ".XML";
                                    BuildMissions(iBuildMode, sFileName);
                                    PostMess();
                                    iBuildMode = 99;
                                }
                            }
                            else if (WhileButtonDown(22))
                            {
                                MyMissions.TruckersXM.Clear();
                                iBuildMode = 99;
                                PostMess();
                            }
                        }
                    }
                    else if (iBuildingUp == 8)
                    {
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(21))
                            {
                                PostMess();
                                iBuildingUp = 7;
                                LaunchTest();
                                Truckin();
                                SlowFastTravel(vFuMiss, 0.00f);
                            }
                            else if (WhileButtonDown(22))
                            {
                                MyMissions.TruckersXM.Clear();
                                iBuildMode = 99;
                                PostMess();
                            }
                        }
                    }
                }            //Trucking
                else if (iBuildMode == 2)
                {
                    if (iBuildingUp == 0)
                    {
                        ControlerUI(MyLang.Context[10], 1);

                        if (Function.Call<bool>(Hash.IS_WAYPOINT_ACTIVE))
                        {
                            MyMissions.PackersXM.Clear();
                            PackBuild Packy = new PackBuild();
                            MyMissions.PackersXM.Add(Packy);

                            sList_01.Clear();
                            sList_01 = BuildMishLists(5);
                            iMissionVar_01 = 0;
                            fMission_01 = 0.00f;
                            VectorList_01.Clear();
                            PlayerWarpToWaypoint(World.GetWaypointPosition(), false);
                            sMissionVar_01 = sList_01[0];
                            MyMissions.PackersXM[0].Livery = -1;
                            vTarget_01 = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 10);
                            VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 17, 0, 1, MyLang.Maptext[22], 1, false);
                            HelperBarBuiler(1, false);
                            iBuildingUp += 1;
                        }
                    }
                    else if (iBuildingUp == 1)
                    {
                        vTarget_01 = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 10);
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(47))
                            {
                                iMissionVar_01 -= 1;
                                if (iMissionVar_01 < 0)
                                    iMissionVar_01 = sList_01.Count - 1;

                                sMissionVar_01 = sList_01[iMissionVar_01];
                                VehTrackin_01.Delete();
                                VehicleList_01.Remove(VehTrackin_01);
                                VehTrackin_01 = null;
                                VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 17, 0, 1, MyLang.Maptext[22], 1, false);
                            }
                            else if (WhileButtonDown(51))
                            {
                                iMissionVar_01 += 1;
                                if (iMissionVar_01 > sList_01.Count - 1)
                                    iMissionVar_01 = 0;

                                sMissionVar_01 = sList_01[iMissionVar_01];
                                VehTrackin_01.Delete();
                                VehicleList_01.Remove(VehTrackin_01);
                                MyMissions.PackersXM[0].Livery = -1;
                                VehTrackin_01 = null;
                                VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 17, 0, 1, MyLang.Maptext[22], 1, false);
                            }
                            else if (WhileButtonDown(27))
                            {
                                int iCounter = Function.Call<int>(Hash.GET_VEHICLE_LIVERY_COUNT, VehTrackin_01.Handle);
                                if (iCounter != -1)
                                {
                                    if (MyMissions.PackersXM[0].Livery < iCounter)
                                        MyMissions.PackersXM[0].Livery += 1;
                                    else
                                        MyMissions.PackersXM[0].Livery = -1;
                                    VehicleMods(VehTrackin_01, 5, MyMissions.PackersXM[0].Livery, false);
                                }
                            }
                            else if (WhileButtonDown(173))
                            {
                                int iCounter = Function.Call<int>(Hash.GET_VEHICLE_LIVERY_COUNT, VehTrackin_01.Handle);
                                if (iCounter != -1)
                                {
                                    if (MyMissions.PackersXM[0].Livery > 0)
                                        MyMissions.PackersXM[0].Livery -= 1;
                                    else
                                        MyMissions.PackersXM[0].Livery = iCounter;
                                    VehicleMods(VehTrackin_01, 5, MyMissions.PackersXM[0].Livery, false);
                                }
                            }
                            else if (WhileButtonDown(21))
                            {
                                iBuildingUp += 1;
                                VehicleWarp(VehTrackin_01, Game.Player.Character, 1);
                                HelperBarBuiler(3, true);
                            }
                            else if (WhileButtonDown(22))
                            {
                                CloseBaseHelpBar();
                                iBuildingUp -= 1;
                                MyMissions.PackersXM[0].Livery = -1;
                                VehTrackin_01.Delete();
                                VehicleList_01.Remove(VehTrackin_01);
                            }
                        }
                    }
                    else if (iBuildingUp == 2)
                    {
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(21))
                            {
                                MyMissions.PackersXM[0].PackVehType = sMissionVar_01;

                                sList_01 = BuildMishLists(6);
                                sMissionVar_01 = sList_01[iMissionVar_01];
                                if (iMissionVar_01 == 0)
                                    fMission_01 = 1.00f;
                                else if (iMissionVar_01 == 1)
                                    fMission_01 = 1.00f;
                                else if (iMissionVar_01 == 2)
                                    fMission_01 = 0.80f;
                                else if (iMissionVar_01 == 3)
                                    fMission_01 = 0.70f;
                                else if (iMissionVar_01 == 4)
                                    fMission_01 = 1.00f;
                                else if (iMissionVar_01 == 5)
                                    fMission_01 = 0.5f;
                                else
                                    fMission_01 = 1.00f;
                                MyMissions.PackersXM[0].PackDropType = sMissionVar_01;
                                iMissionVar_01 = 0;

                                GetOutofVeh(Game.Player.Character, 2);
                                iBuildingUp += 1;
                                WhereAreYou();
                                MyMissions.PackersXM[0].Local = iLocationX;
                                MyMissions.PackersXM[0].FarstStart = World.GetNextPositionOnStreet(Game.Player.Character.Position);
                                MyMissions.PackersXM[0].PackVehStart = VehTrackin_01.Position;
                                MyMissions.PackersXM[0].PackVehDir = VehTrackin_01.Heading;

                                VehicleList_01.Remove(VehTrackin_01);
                                VehTrackin_01.Delete();
                                Prop_01 = BuildProp(sMissionVar_01, vTarget_01, Vector3.Zero, false, false);
                                Prop_01.HasCollision = false;
                                HelperBarBuiler(6, true);
                            }
                            else if (WhileButtonDown(22))
                            {
                                GetOutofVeh(Game.Player.Character, 2);
                                VehicleList_01.Remove(VehTrackin_01);
                                VehTrackin_01.Delete();
                                sList_01 = BuildMishLists(5);
                                iBuildingUp -= 1;
                                HelperBarBuiler(1, false);
                            }
                        }
                    }
                    else if (iBuildingUp == 3)
                    {
                        ControlerUI(MyLang.Context[10], 1);
                        vTarget_01 = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 2.50f);
                        Prop_01.Position = vTarget_01;
                        Function.Call(Hash.PLACE_OBJECT_ON_GROUND_PROPERLY, Prop_01.Handle);
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(22))
                            {
                                if (VectorList_01.Count == 0)
                                {
                                    iBuildingUp -= 2;
                                    Prop_01.Delete();
                                    PropList_01.Remove(Prop_01);
                                    sList_01 = BuildMishLists(5);
                                    HelperBarBuiler(1, true);
                                    VectorList_01.Clear();
                                    CleanFakeBlips();
                                }
                                else
                                {
                                    VectorList_01.RemoveAt(VectorList_01.Count - 1);
                                    PropList_01[PropList_01.Count - 1].Delete();
                                    PropList_01.RemoveAt(PropList_01.Count - 1);
                                    BlipList_01[BlipList_01.Count - 1].Remove();
                                    BlipList_01.RemoveAt(BlipList_01.Count - 1);
                                }
                            }
                            else if (WhileButtonDown(21))
                            {
                                Prop pMark = BuildProp(sMissionVar_01, vTarget_01, Vector3.Zero, true, false);
                                MultiBlimbs(vTarget_01, 432, false, "");
                                Function.Call(Hash.PLACE_OBJECT_ON_GROUND_PROPERLY, pMark.Handle);
                                Vector3 VBoxer = new Vector3(pMark.Position.X, pMark.Position.Y, pMark.Position.Z + fMission_01);
                                VectorList_01.Add(VBoxer);
                                UI.Notify("Drop No == " + VectorList_01.Count);
                            }
                            else if (WhileButtonDown(23))
                            {
                                if (VectorList_01.Count > 0)
                                {
                                    iBuildingUp += 1;
                                    MyMissions.PackersXM[0].PackDrops = new List<Vector3>(VectorList_01);
                                    CleanFakeBlips();
                                    Prop_01.Delete();
                                    PropList_01.Remove(Prop_01);
                                    LaunchTest();
                                    Packages();
                                    SlowFastTravel(vFuMiss, 0.00f);
                                }
                                else
                                    UI.Notify("No Drops");
                            }
                        }
                        else if (Function.Call<bool>(Hash.IS_WAYPOINT_ACTIVE))
                            PlayerWarpToWaypoint(World.GetWaypointPosition(), false);
                    }
                    else if (iBuildingUp == 4)
                    {
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(21))
                            {
                                sList_01 = BuildMishLists(7);
                                if (sList_01.Count > 0)
                                {
                                    iBuildingUp = 10;
                                    BackToBuildMenu(1);
                                }
                                else
                                {
                                    string sFileName = "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/" + Game.GetUserInput(255) + ".XML";
                                    BuildMissions(iBuildMode, sFileName);
                                    PostMess();
                                    iBuildMode = 99;
                                }
                            }
                            else if (WhileButtonDown(22))
                            {
                                MyMissions.PackersXM.Clear();
                                iBuildMode = 99;
                                PostMess();
                            }
                        }
                    }
                    else if (iBuildingUp == 8)
                    {
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(21))
                            {
                                PostMess();
                                iBuildingUp = 4;
                                LaunchTest();
                                Packages();
                                SlowFastTravel(vFuMiss, 0.00f);
                            }
                            else if (WhileButtonDown(22))
                            {
                                MyMissions.PackersXM.Clear();
                                iBuildMode = 99;
                                PostMess();
                            }
                        }
                    }
                }       //Packages
                else if (iBuildMode == 3)
                {
                    if (iBuildingUp == 0)
                    {
                        ControlerUI(MyLang.Context[10], 1);
                        if (Function.Call<bool>(Hash.IS_WAYPOINT_ACTIVE))
                        {
                            ConsBuild Conny = new ConsBuild();
                            MyMissions.ConsXM.Add(Conny);

                            VectorList_01.Clear();
                            PlayerWarpToWaypoint(World.GetWaypointPosition(), false);
                            HelperBarBuiler(1, false);
                            iBuildingUp += 1;
                        }
                    }
                    else if (iBuildingUp == 1)
                    {
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(22))
                            {
                                if (VectorList_01.Count > 0)
                                {
                                    VectorList_01.RemoveAt(VectorList_01.Count - 1);
                                    BlipList_01[BlipList_01.Count - 1].Remove();
                                    BlipList_01.RemoveAt(BlipList_01.Count - 1);
                                }
                                else
                                {
                                    iBuildingUp -= 1;
                                    CleanFakeBlips();
                                    CloseBaseHelpBar();
                                    VectorList_01.Clear();
                                }
                            }
                            else if (WhileButtonDown(21))
                            {
                                MultiBlimbs(Game.Player.Character.Position, 432, false, "");
                                VectorList_01.Add(Game.Player.Character.Position);
                                UI.Notify("Stop No == " + VectorList_01.Count);
                            }
                            else if (WhileButtonDown(23))
                            {
                                if (VectorList_01.Count > 1)
                                {
                                    WhereAreYou();
                                    iBuildingUp += 1;
                                    MyMissions.ConsXM[0].ConMarch = new List<Vector3>(VectorList_01);
                                    MyMissions.ConsXM[0].Local = iLocationX;
                                    LaunchTest();
                                    Convicts();
                                    SlowFastTravel(vFuMiss, 0.00f);
                                }
                                else
                                    UI.Notify("No Drops");
                            }
                        }
                    }
                    else if (iBuildingUp == 2)
                    {
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(21))
                            {
                                sList_01 = BuildMishLists(7);
                                if (sList_01.Count > 0)
                                {
                                    iBuildingUp = 10;
                                    BackToBuildMenu(1);
                                }
                                else
                                {
                                    string sFileName = "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/" + Game.GetUserInput(255) + ".XML";
                                    BuildMissions(iBuildMode, sFileName);
                                    PostMess();
                                    iBuildMode = 99;
                                }
                            }
                            else if (WhileButtonDown(22))
                            {
                                iBuildMode = 99;
                                MyMissions.ConsXM.Clear();
                                PostMess();
                            }
                        }
                    }
                    else if (iBuildingUp == 8)
                    {
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(21))
                            {
                                PostMess();
                                iBuildingUp = 2;
                                LaunchTest();
                                Convicts();
                                SlowFastTravel(vFuMiss, 0.00f);
                            }
                            else if (WhileButtonDown(22))
                            {
                                iBuildMode = 99;
                                MyMissions.ConsXM.Clear();
                                PostMess();
                            }
                        }
                    }
                }       //Convicts
                else if (iBuildMode == 4)
                {
                    if (iBuildingUp == 0)
                    {
                        VehicleSpawn("Dilettante", World.GetNextPositionOnStreet(Game.Player.Character.Position), 90.00f, true, false, false, true, 2, 11, 1, MyLang.Maptext[22], 1, true);
                        VehicleWarp(VehTrackin_01, Game.Player.Character, 1);
                        HelperBarBuiler(1, false);
                        iBuildingUp += 1;
                    }
                    else if (iBuildingUp == 1)
                    {
                        if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                        {
                            ControlerUI(MyLang.Context[10], 1);

                            if (ButtonDown(37))
                            {
                                if (WhileButtonDown(21))
                                {
                                    vTarget_01 = VehTrackin_01.Position;
                                    MultiBlimbs(vTarget_01, 432, false, "");
                                    GetOutofVeh(Game.Player.Character, 2);
                                    HelperBarBuiler(2, true);
                                    iBuildingUp += 1;
                                }
                            }
                            else if (Function.Call<bool>(Hash.IS_WAYPOINT_ACTIVE))
                                PlayerWarpToWaypoint(World.GetWaypointPosition(), true);

                        }
                        else
                            ControlerUI(MyLang.Context[12], 1);
                    }
                    else if (iBuildingUp == 2)
                    {
                        if (!Game.Player.Character.IsInVehicle())
                        {
                            if (ButtonDown(37))
                            {
                                if (WhileButtonDown(21))
                                {
                                    WhereAreYou();
                                    FuberBuild Fubyar = new FuberBuild
                                    {
                                        Local = iLocationX,
                                        FUbarCar = vTarget_01,
                                        FUbarPed = Game.Player.Character.Position
                                    };
                                    MyMissions.FubardXM.Add(Fubyar);
                                    MultiBlimbs(vTarget_01, 432, false, "");
                                    HelperBarBuiler(3, true);
                                    iBuildingUp += 1;
                                }
                            }
                        }
                        else
                            ControlerUI(MyLang.Context[13], 1);
                    }
                    else if (iBuildingUp == 3)
                    {
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(21))
                            {
                                iBuildingUp = 1;
                                HelperBarBuiler(1, true);
                                VehicleWarp(VehTrackin_01, Game.Player.Character, 1);
                            }
                            else if (WhileButtonDown(23))
                            {
                                VehTrackin_01.Delete();
                                VehicleList_01.Remove(VehTrackin_01);
                                iTestKit = 0;
                                iBuildingUp += 1;
                                LaunchTest();
                                FUber();
                            }
                        }
                    }
                    else if (iBuildingUp == 4)
                    {
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(21))
                            {
                                sList_01 = BuildMishLists(7);
                                if (sList_01.Count > 0)
                                {
                                    iBuildingUp = 10;
                                    BackToBuildMenu(1);
                                }
                                else
                                {
                                    string sFileName = "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/" + Game.GetUserInput(255) + ".XML";
                                    BuildMissions(iBuildMode, sFileName);
                                    PostMess();
                                    iBuildMode = 99;
                                }
                            }
                            else if (WhileButtonDown(22))
                            {
                                MyMissions.FubardXM.Clear();
                                iBuildMode = 99;
                                PostMess();
                            }
                        }
                    }
                    else if (iBuildingUp == 8)
                    {
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(21))
                            {
                                PostMess();
                                bMoreFubar = false;
                                iBuildingUp = 4;
                                iTestKit = 0;
                                LaunchTest();
                                FUber();
                            }
                            else if (WhileButtonDown(22))
                            {
                                MyMissions.FubardXM.Clear();
                                iBuildMode = 99;
                                PostMess();
                            }
                        }
                    }
                }       //FUber
                else if (iBuildMode == 5)
                {
                    if (iBuildingUp == 0)
                    {
                        iBuildingUp += 1;
                        HelperBarBuiler(1, false);
                    }
                    else if (iBuildingUp == 1)
                    {
                        ControlerUI(MyLang.Context[10], 1);
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(21))
                            {
                                WhereAreYou();
                                AmbBuild Ambuly = new AmbBuild
                                {
                                    Local = iLocationX,
                                    AmbPed = Game.Player.Character.Position
                                };
                                MultiBlimbs(Game.Player.Character.Position, 432, false, "");
                                MyMissions.AmbuXM.Add(Ambuly);
                                UI.Notify("Stop No == " + MyMissions.AmbuXM.Count);
                            }
                            else if (WhileButtonDown(23))
                            {
                                if (MyMissions.AmbuXM.Count > 0)
                                {
                                    iBuildingUp += 1;
                                    iTestKit = 0;
                                    LaunchTest();
                                    Ambulance();
                                }
                                else
                                    UI.Notify("No Drops");
                            }
                        }
                        else if (Function.Call<bool>(Hash.IS_WAYPOINT_ACTIVE))
                            PlayerWarpToWaypoint(World.GetWaypointPosition(), false);
                    }
                    else if (iBuildingUp == 2)
                    {
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(21))
                            {
                                sList_01 = BuildMishLists(7);
                                if (sList_01.Count > 0)
                                {
                                    iBuildingUp = 10;
                                    BackToBuildMenu(1);
                                }
                                else
                                {
                                    string sFileName = "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/" + Game.GetUserInput(255) + ".XML";
                                    BuildMissions(iBuildMode, sFileName);
                                    PostMess();
                                    iBuildMode = 99;
                                }
                            }
                            else if (WhileButtonDown(22))
                            {
                                MyMissions.AmbuXM.Clear();
                                iBuildMode = 99;
                                PostMess();
                            }
                        }

                    }
                    else if (iBuildingUp == 8)
                    {
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(21))
                            {
                                PostMess();
                                iBuildingUp = 2;
                                iTestKit = 0;
                                LaunchTest();
                                Ambulance();
                            }
                            else if (WhileButtonDown(22))
                            {
                                iBuildMode = 99;
                                MyMissions.AmbuXM.Clear();
                                PostMess();
                            }
                        }
                    }
                }       //Ambulance
                else if (iBuildMode == 6)
                {
                    if (iBuildingUp == 0)
                    {
                        ControlerUI(MyLang.Context[10], 1);

                        if (Function.Call<bool>(Hash.IS_WAYPOINT_ACTIVE))
                        {
                            MyMissions.SharksXM.Clear();
                            DeapBuild Deepy = new DeapBuild();
                            MyMissions.SharksXM.Add(Deepy);
                            PlayerWarpToWaypoint(World.GetWaypointPosition(), false);
                            iBuildingUp += 1;
                        }
                    }
                    else if (iBuildingUp == 1)
                    {
                        if (Game.Player.Character.IsInWater)
                        {
                            VehicleSpawn("SUBMERSIBLE2", Game.Player.Character.Position, 90.00f, true, false, false, false, 18, 0, 1, MyLang.Maptext[22], 1, false);
                            HelperBarBuiler(1, false);
                            iBuildingUp += 1;
                        }
                        else
                        {
                            ControlerUI(MyLang.Context[10], 1);

                            if (Function.Call<bool>(Hash.IS_WAYPOINT_ACTIVE))
                                PlayerWarpToWaypoint(World.GetWaypointPosition(), false);
                        }
                    }
                    else if (iBuildingUp == 2)
                    {
                        if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                        {
                            ControlerUI(MyLang.Context[10], 1);

                            if (Function.Call<bool>(Hash.IS_WAYPOINT_ACTIVE))
                                PlayerWarpToWaypoint(World.GetWaypointPosition(), true);

                            if (ButtonDown(37))
                            {
                                if (WhileButtonDown(21))
                                {
                                    WhereAreYou();
                                    MyMissions.SharksXM[0].StartPoint = VehTrackin_01.Position;
                                    MyMissions.SharksXM[0].Local = iLocationX;
                                    MultiBlimbs(VehTrackin_01.Position, 432, false, "");
                                    HelperBarBuiler(2, false);
                                    iBuildingUp += 1;
                                }
                            }
                        }
                        else
                            ControlerUI(MyLang.Context[12], 1);
                    }
                    else if (iBuildingUp == 3)
                    {
                        if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                        {
                            ControlerUI(MyLang.Context[10], 1);

                            if (Function.Call<bool>(Hash.IS_WAYPOINT_ACTIVE))
                                PlayerWarpToWaypoint(World.GetWaypointPosition(), true);

                            if (ButtonDown(37))
                            {
                                if (WhileButtonDown(21))
                                {
                                    WhereAreYou();
                                    MyMissions.SharksXM[0].SubSpawn = VehTrackin_01.Position;
                                    MyMissions.SharksXM[0].SubHead = VehTrackin_01.Heading;
                                    MyMissions.SharksXM[0].FubStop = World.GetNextPositionOnStreet(VehTrackin_01.Position);
                                    GetOutofVeh(Game.Player.Character, 2);
                                    VehTrackin_01.Delete();
                                    VehicleList_01.Remove(VehTrackin_01);
                                    iBuildingUp += 1;

                                    LaunchTest();
                                    DeepDown();
                                    SlowFastTravel(vFuMiss, 0.00f);
                                }
                            }
                        }
                        else
                            ControlerUI(MyLang.Context[12], 1);
                    }
                    else if (iBuildingUp == 4)
                    {
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(21))
                            {
                                sList_01 = BuildMishLists(7);
                                if (sList_01.Count > 0)
                                {
                                    iBuildingUp = 10;
                                    BackToBuildMenu(1);
                                }
                                else
                                {
                                    string sFileName = "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/" + Game.GetUserInput(255) + ".XML";
                                    BuildMissions(iBuildMode, sFileName);
                                    PostMess();
                                    iBuildMode = 99;
                                }
                            }
                            else if (WhileButtonDown(22))
                            {
                                MyMissions.SharksXM.Clear();
                                iBuildMode = 99;
                                PostMess();
                            }
                        }
                    }
                    else if (iBuildingUp == 8)
                    {
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(21))
                            {
                                PostMess();
                                iBuildingUp = 4;
                                LaunchTest();
                                DeepDown();
                                SlowFastTravel(vFuMiss, 0.00f);
                            }
                            else if (WhileButtonDown(22))
                            {
                                MyMissions.SharksXM.Clear();
                                iBuildMode = 99;
                                PostMess();
                            }
                        }
                    }
                }       //Sharks
                else if (iBuildMode == 7)
                {
                    if (iBuildingUp == 0)
                    {
                        ControlerUI(MyLang.Context[10], 1);

                        if (Function.Call<bool>(Hash.IS_WAYPOINT_ACTIVE))
                        {
                            iMissionVar_01 = 0;
                            iMissionVar_02 = 0;
                            sList_01.Clear();
                            sList_01 = VehicleListX(iMissionVar_02, 1, false);
                            sMissionVar_01 = sList_01[iMissionVar_01];

                            PlayerWarpToWaypoint(World.GetWaypointPosition(), false);
                            vTarget_01 = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 5);

                            VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 0, 0, 1, MyLang.Maptext[22], 1, true);

                            HelperBarBuiler(1, false);
                            iBuildingUp += 1;
                        }
                    }
                    else if (iBuildingUp == 1)
                    {
                        vTarget_01 = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 5);
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(47))
                            {
                                iMissionVar_01 -= 1;
                                if (iMissionVar_01 < 0)
                                    iMissionVar_01 = sList_01.Count - 1;

                                sMissionVar_01 = sList_01[iMissionVar_01];
                                VehTrackin_01.Delete();
                                VehicleList_01.Remove(VehTrackin_01);
                                VehTrackin_01 = null;
                                VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 0, 0, 1, MyLang.Maptext[22], 1, true);
                            }
                            else if (WhileButtonDown(51))
                            {
                                iMissionVar_01 += 1;
                                if (iMissionVar_01 > sList_01.Count - 1)
                                    iMissionVar_01 = 0;

                                sMissionVar_01 = sList_01[iMissionVar_01];
                                VehTrackin_01.Delete();
                                VehicleList_01.Remove(VehTrackin_01);
                                VehTrackin_01 = null;
                                VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 0, 0, 1, MyLang.Maptext[22], 1, true);
                            }
                            else if (WhileButtonDown(27))
                            {
                                iMissionVar_01 = 0;
                                iMissionVar_02 += 1;
                                if (iMissionVar_02 > 13 && iMissionVar_02 < 18)
                                    iMissionVar_02 = 18;
                                else if (iMissionVar_02 > 19)
                                    iMissionVar_02 = 0;
                                sList_01.Clear();
                                sList_01 = VehicleListX(iMissionVar_02, 1, false);
                                sMissionVar_01 = sList_01[iMissionVar_01];
                                VehTrackin_01.Delete();
                                VehicleList_01.Remove(VehTrackin_01);
                                VehTrackin_01 = null;
                                VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 0, 0, 1, MyLang.Maptext[22], 1, true);
                            }
                            else if (WhileButtonDown(173))
                            {
                                iMissionVar_01 = 0;
                                iMissionVar_02 -= 1;
                                if (iMissionVar_02 > 13 && iMissionVar_02 < 18)
                                    iMissionVar_02 = 13;
                                else if (iMissionVar_02 < 0)
                                    iMissionVar_02 = 19;
                                sList_01.Clear();
                                sList_01 = VehicleListX(iMissionVar_02, 1, false);
                                sMissionVar_01 = sList_01[iMissionVar_01];
                                VehTrackin_01.Delete();
                                VehicleList_01.Remove(VehTrackin_01);
                                VehTrackin_01 = null;
                                VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 0, 0, 1, MyLang.Maptext[22], 1, true);
                            }
                            else if (WhileButtonDown(21))
                            {
                                iBuildingUp += 1;
                                VehicleWarp(VehTrackin_01, Game.Player.Character, 1);
                                HelperBarBuiler(2, true);
                            }
                            else if (WhileButtonDown(22))
                            {
                                CloseBaseHelpBar();
                                iBuildingUp -= 1;
                                VehTrackin_01.Delete();
                                VehicleList_01.Remove(VehTrackin_01);
                            }
                        }
                    }
                    else if (iBuildingUp == 2)
                    {
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(21))
                            {
                                WhereAreYou();
                                JohnnyBuild John = new JohnnyBuild
                                {
                                    JohnnyCar = sMissionVar_01,
                                    JohnnyStart = VehTrackin_01.Position,
                                    JohnnyHeads = VehTrackin_01.Heading,
                                    FubarStop = World.GetNextPositionOnStreet(VehTrackin_01.Position),
                                    Local = iLocationX
                                };
                                MyMissions.JohnsXM.Add(John);
                                MultiBlimbs(VehTrackin_01.Position, 432, false, "");
                                iBuildingUp += 1;
                                HelperBarBuiler(2, true);
                            }
                            else if (WhileButtonDown(22))
                            {
                                GetOutofVeh(Game.Player.Character, 2);
                                VehicleList_01.Remove(VehTrackin_01);
                                VehTrackin_01.Delete();
                                iBuildingUp -= 1;
                                HelperBarBuiler(1, false);
                            }
                        }
                    }
                    else if (iBuildingUp == 3)
                    {
                        if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                        {
                            ControlerUI(MyLang.Context[10], 1);

                            if (ButtonDown(37))
                            {
                                if (WhileButtonDown(21))
                                {
                                    if (VehTrackin_01.Position.DistanceTo(MyMissions.JohnsXM[0].JohnnyStart) < 50.00f)
                                        UI.Notify(MyLang.Othertext[147]);
                                    else
                                    {
                                        MyMissions.JohnsXM[0].JohnnyPark = VehTrackin_01.Position;
                                        GetOutofVeh(Game.Player.Character, 2);
                                        VehicleList_01.Remove(VehTrackin_01);
                                        VehTrackin_01.Delete();
                                        iBuildingUp += 1;
                                        LaunchTest();
                                        HeresJohnny();
                                        SlowFastTravel(vFuMiss, 0.00f);
                                    }
                                }
                                else if (WhileButtonDown(22))
                                {
                                    iBuildingUp -= 1;
                                    HelperBarBuiler(2, false);
                                    CleanFakeBlips();
                                }
                            }
                            else if (Function.Call<bool>(Hash.IS_WAYPOINT_ACTIVE))
                                PlayerWarpToWaypoint(World.GetWaypointPosition(), true);
                        }
                        else
                            ControlerUI(MyLang.Context[12], 1);
                    }
                    else if (iBuildingUp == 4)
                    {
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(21))
                            {
                                sList_01 = BuildMishLists(7);
                                if (sList_01.Count > 0)
                                {
                                    iBuildingUp = 10;
                                    BackToBuildMenu(1);
                                }
                                else
                                {
                                    string sFileName = "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/" + Game.GetUserInput(255) + ".XML";
                                    BuildMissions(iBuildMode, sFileName);
                                    PostMess();
                                    iBuildMode = 99;
                                }
                            }
                            else if (WhileButtonDown(22))
                            {
                                MyMissions.JohnsXM.Clear();
                                iBuildMode = 99;
                                PostMess();
                            }
                        }
                    }
                    else if (iBuildingUp == 8)
                    {
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(21))
                            {
                                PostMess();
                                iBuildingUp = 4;
                                LaunchTest();
                                HeresJohnny();
                                SlowFastTravel(vFuMiss, 0.00f);
                            }
                            else if (WhileButtonDown(22))
                            {
                                MyMissions.JohnsXM.Clear();
                                iBuildMode = 99;
                                PostMess();
                            }
                        }
                    }
                }       //Johnny
                else if (iBuildMode == 8)
                {
                    if (iBuildingUp == 0)
                    {
                        ControlerUI(MyLang.Context[10], 1);

                        if (Function.Call<bool>(Hash.IS_WAYPOINT_ACTIVE))
                        {
                            iMissionVar_01 = 0;
                            iMissionVar_02 = 0;
                            iMissionVar_03 = 1;
                            sMissionVar_01 = "~r~Land Vehicles";

                            VectorList_01.Clear();
                            fList_01.Clear();

                            PlayerWarpToWaypoint(World.GetWaypointPosition(), false);
                            vTarget_01 = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 5);

                            HelperBarBuiler(7, false);
                            iBuildingUp = 1;
                        }
                    }
                    else if (iBuildingUp == 1)
                    {
                        StickySubTitle(sMissionVar_01);

                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(47))
                            {
                                iMissionVar_03 -= 1;
                                if (iMissionVar_03 < 1)
                                    iMissionVar_03 = 4;

                                if (iMissionVar_03 == 1)
                                    sMissionVar_01 = "~r~Land Vehicles";
                                else if (iMissionVar_03 == 2)
                                    sMissionVar_01 = "~g~Bicycle";
                                else if (iMissionVar_03 == 3)
                                    sMissionVar_01 = "~y~Heli";
                                else if (iMissionVar_03 == 4)
                                    sMissionVar_01 = "~b~Boats";
                            }
                            else if (WhileButtonDown(51))
                            {
                                iMissionVar_03 += 1;
                                if (iMissionVar_03 > 4)
                                    iMissionVar_03 = 0;

                                if (iMissionVar_03 == 1)
                                    sMissionVar_01 = "~r~Land Vehicles";
                                else if (iMissionVar_03 == 2)
                                    sMissionVar_01 = "~g~Bicycle";
                                else if (iMissionVar_03 == 3)
                                    sMissionVar_01 = "~y~Heli";
                                else if (iMissionVar_03 == 4)
                                    sMissionVar_01 = "~b~Boats";
                            }
                            else if (WhileButtonDown(22))
                            {
                                vTarget_01 = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 5);
                                sList_01.Clear();
                                sList_02.Clear();
                                sList_01 = VehicleListX(iMissionVar_02, iMissionVar_03, false);
                                sMissionVar_01 = sList_01[iMissionVar_01];
                                VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 0, 0, 1, MyLang.Maptext[22], 1, true);

                                if (iMissionVar_03 == 1)
                                    iBuildingUp = 101;
                                else if (iMissionVar_03 == 2)
                                    iBuildingUp = 102;
                                else if (iMissionVar_03 == 3)
                                    iBuildingUp = 103;
                                else 
                                    iBuildingUp = 104;

                                HelperBarBuiler(1, true);
                            }
                        }
                    }
                    else if (iBuildingUp == 2)
                    {
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(21))
                            {
                                iMissionVar_01 += 1;
                                VectorList_01.Add(VehTrackin_01.Position);
                                fList_01.Add(VehTrackin_01.Heading);
                                if (iMissionVar_01 == 1)
                                {
                                    WhereAreYou();
                                    vTarget_01 = World.GetNextPositionOnStreet(VehTrackin_01.Position);
                                    HelperBarBuiler(4, true);
                                }
                                else if (iMissionVar_01 < 5)
                                {
                                    float fSpace = 4.00f;
                                    if (iMissionVar_03 == 3)
                                        fSpace = 9.50f;
                                    HelperBarBuiler(5, true);
                                    VehTrackin_01.Position = VehTrackin_01.Position + (VehTrackin_01.RightVector * fSpace);
                                }
                                else
                                {
                                    HelperBarBuiler(6, true);
                                    VectorList_02.Clear();
                                    iBuildingUp += 1;
                                }
                            }
                            else if (WhileButtonDown(22))
                            {
                                GetOutofVeh(Game.Player.Character, 2);
                                VehicleList_01.Remove(VehTrackin_01);
                                VehTrackin_01.Delete();
                                iBuildingUp -= 1;
                                HelperBarBuiler(1, false);
                            }
                        }
                    }
                    else if (iBuildingUp == 3)
                    {
                        if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                        {
                            vTarget_02 = Game.Player.Character.Position;
                            MarkerType Mt = MarkerType.VerticalCylinder;
                            if (iMissionVar_03 == 3)
                                Mt = MarkerType.VerticleCircle;
                            World.DrawMarker(Mt, vTarget_02, Vector3.Zero, Vector3.Zero, new Vector3(10.00f, 10.00f, 2.00f),Color.Yellow);

                            if (ButtonDown(37))
                            {
                                if (WhileButtonDown(21))
                                {
                                    VectorList_02.Add(vTarget_02);
                                    MultiBlimbs(vTarget_02, 432, false, "");
                                }
                                else if (WhileButtonDown(23))
                                {
                                    if (VectorList_02.Count > 2)
                                    {
                                        RaceBuild Racey = new RaceBuild
                                        {
                                            Local = iLocationX,
                                            FubStop = vTarget_01,
                                            RaceCars = new List<Vector3>(VectorList_01),
                                            RaceHead = new List<float>(fList_01),
                                            TheRace = new List<Vector3>(VectorList_02),
                                            VehClass = iMissionVar_03,
                                            AvalableVeh = new List<string>(sList_02)
                                        };

                                        MyMissions.RaceXM.Add(Racey);
                                        iBuildingUp += 1;
                                        VehicleList_01.Remove(VehTrackin_01);
                                        VehTrackin_01.Delete();
                                        iJobType = 11;
                                        LaunchTest();
                                        Raceist();
                                        SlowFastTravel(vFuMiss, 0.00f);
                                    }
                                    else
                                        UI.Notify("No Drops");
                                }
                            }
                        }
                        else
                            ControlerUI(MyLang.Context[12], 1);
                    }
                    else if (iBuildingUp == 4)
                    {
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(21))
                            {
                                sList_01 = BuildMishLists(7);
                                if (sList_01.Count > 0)
                                {
                                    iBuildingUp = 10;
                                    BackToBuildMenu(1);
                                }
                                else
                                {
                                    string sFileName = "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/" + Game.GetUserInput(255) + ".XML";
                                    BuildMissions(iBuildMode, sFileName);
                                    PostMess();
                                    iBuildMode = 99;
                                }
                            }
                            else if (WhileButtonDown(22))
                            {
                                MyMissions.RaceXM.Clear();
                                iBuildMode = 99;
                                PostMess();
                            }
                        }
                    }
                    else if (iBuildingUp == 8)
                    {
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(21))
                            {
                                PostMess();
                                iBuildingUp = 4;
                                iJobType = 11;
                                LaunchTest();
                                Raceist();
                                SlowFastTravel(vFuMiss, 0.00f);
                            }
                            else if (WhileButtonDown(22))
                            {
                                MyMissions.RaceXM.Clear();
                                iBuildMode = 99;
                                PostMess();
                            }
                        }
                    }
                    else if (iBuildingUp == 101)
                    {
                        vTarget_01 = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 5);
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(47))
                            {
                                iMissionVar_01 -= 1;
                                if (iMissionVar_01 < 0)
                                    iMissionVar_01 = sList_01.Count - 1;

                                sMissionVar_01 = sList_01[iMissionVar_01];
                                VehTrackin_01.Delete();
                                VehicleList_01.Remove(VehTrackin_01);
                                VehTrackin_01 = null;
                                VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 0, 0, 1, MyLang.Maptext[22], 1, true);
                            }
                            else if (WhileButtonDown(51))
                            {
                                iMissionVar_01 += 1;
                                if (iMissionVar_01 > sList_01.Count - 1)
                                    iMissionVar_01 = 0;

                                sMissionVar_01 = sList_01[iMissionVar_01];
                                VehTrackin_01.Delete();
                                VehicleList_01.Remove(VehTrackin_01);
                                VehTrackin_01 = null;
                                VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 0, 0, 1, MyLang.Maptext[22], 1, true);
                            }
                            else if (WhileButtonDown(27))
                            {
                                iMissionVar_01 = 0;
                                iMissionVar_02 += 1;
                                if (iMissionVar_02 > 19)
                                    iMissionVar_02 = 0;

                                sList_01.Clear();
                                sList_01 = VehicleListX(iMissionVar_02, iMissionVar_03, false);
                                sMissionVar_01 = sList_01[iMissionVar_01];
                                VehTrackin_01.Delete();
                                VehicleList_01.Remove(VehTrackin_01);
                                VehTrackin_01 = null;
                                VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 0, 0, 1, MyLang.Maptext[22], 1, true);
                            }
                            else if (WhileButtonDown(173))
                            {

                                iMissionVar_01 = 0;
                                iMissionVar_02 -= 1;
                                if (iMissionVar_02 < 0)
                                    iMissionVar_02 = 19;

                                sList_01.Clear();
                                sList_01 = VehicleListX(iMissionVar_02, iMissionVar_03, false);
                                sMissionVar_01 = sList_01[iMissionVar_01];
                                VehTrackin_01.Delete();
                                VehicleList_01.Remove(VehTrackin_01);
                                VehTrackin_01 = null;
                                VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 0, 0, 1, MyLang.Maptext[22], 1, true);
                            }
                            else if (WhileButtonDown(21))
                            {
                                if (!sList_02.Contains(sMissionVar_01))
                                    sList_02.Add(sMissionVar_01);
                            }
                            else if (WhileButtonDown(22))
                            {
                                if (sList_02.Count > 0)
                                {
                                    iBuildingUp = 2;
                                    iMissionVar_01 = 0;
                                    VectorList_01.Clear();
                                    fList_01.Clear();
                                    VehTrackin_01.Delete();
                                    VehicleList_01.Remove(VehTrackin_01);
                                    VehTrackin_01 = null;
                                    VehicleSpawn(sList_02[0], vTarget_01, 90.00f, true, false, false, false, 0, 0, 1, MyLang.Maptext[22], 1, true);
                                    VehicleWarp(VehTrackin_01, Game.Player.Character, 1);
                                    HelperBarBuiler(3, true);
                                }
                            }
                        }
                    }
                    else if (iBuildingUp == 102)
                    {
                        vTarget_01 = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 5);
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(47))
                            {
                                iMissionVar_01 -= 1;
                                if (iMissionVar_01 < 0)
                                    iMissionVar_01 = sList_01.Count - 1;

                                sMissionVar_01 = sList_01[iMissionVar_01];
                                VehTrackin_01.Delete();
                                VehicleList_01.Remove(VehTrackin_01);
                                VehTrackin_01 = null;
                                VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 0, 0, 1, MyLang.Maptext[22], 1, true);
                            }
                            else if (WhileButtonDown(51))
                            {
                                iMissionVar_01 += 1;
                                if (iMissionVar_01 > sList_01.Count - 1)
                                    iMissionVar_01 = 0;

                                sMissionVar_01 = sList_01[iMissionVar_01];
                                VehTrackin_01.Delete();
                                VehicleList_01.Remove(VehTrackin_01);
                                VehTrackin_01 = null;
                                VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 0, 0, 1, MyLang.Maptext[22], 1, true);
                            }
                            else if (WhileButtonDown(27))
                            {
                                iMissionVar_01 = 0;
                                iMissionVar_02 += 1;
                                if (iMissionVar_02 > 1)
                                    iMissionVar_02 = 0;

                                sList_01.Clear();
                                sList_01 = VehicleListX(iMissionVar_02, iMissionVar_03, false);
                                sMissionVar_01 = sList_01[iMissionVar_01];
                                VehTrackin_01.Delete();
                                VehicleList_01.Remove(VehTrackin_01);
                                VehTrackin_01 = null;
                                VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 0, 0, 1, MyLang.Maptext[22], 1, true);
                            }
                            else if (WhileButtonDown(173))
                            {

                                iMissionVar_01 = 0;
                                iMissionVar_02 -= 1;
                                if (iMissionVar_02 < 0)
                                    iMissionVar_02 = 1;

                                sList_01.Clear();
                                sList_01 = VehicleListX(iMissionVar_02, iMissionVar_03, false);
                                sMissionVar_01 = sList_01[iMissionVar_01];
                                VehTrackin_01.Delete();
                                VehicleList_01.Remove(VehTrackin_01);
                                VehTrackin_01 = null;
                                VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 0, 0, 1, MyLang.Maptext[22], 1, true);
                            }
                            else if (WhileButtonDown(21))
                            {
                                if (!sList_02.Contains(sMissionVar_01))
                                    sList_02.Add(sMissionVar_01);
                            }
                            else if (WhileButtonDown(22))
                            {
                                if (sList_02.Count > 0)
                                {
                                    iBuildingUp = 2;
                                    iMissionVar_01 = 0;
                                    VectorList_01.Clear();
                                    fList_01.Clear();
                                    VehTrackin_01.Delete();
                                    VehicleList_01.Remove(VehTrackin_01);
                                    VehTrackin_01 = null;
                                    VehicleSpawn(sList_02[0], vTarget_01, 90.00f, true, false, false, false, 0, 0, 1, MyLang.Maptext[22], 1, true);
                                    VehicleWarp(VehTrackin_01, Game.Player.Character, 1);
                                    HelperBarBuiler(3, true);
                                }
                            }
                        }
                    }
                    else if (iBuildingUp == 103)
                    {
                        vTarget_01 = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 5);
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(47))
                            {
                                iMissionVar_01 -= 1;
                                if (iMissionVar_01 < 0)
                                    iMissionVar_01 = sList_01.Count - 1;

                                sMissionVar_01 = sList_01[iMissionVar_01];
                                VehTrackin_01.Delete();
                                VehicleList_01.Remove(VehTrackin_01);
                                VehTrackin_01 = null;
                                VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 0, 0, 1, MyLang.Maptext[22], 1, true);
                            }
                            else if (WhileButtonDown(51))
                            {
                                iMissionVar_01 += 1;
                                if (iMissionVar_01 > sList_01.Count - 1)
                                    iMissionVar_01 = 0;

                                sMissionVar_01 = sList_01[iMissionVar_01];
                                VehTrackin_01.Delete();
                                VehicleList_01.Remove(VehTrackin_01);
                                VehTrackin_01 = null;
                                VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 0, 0, 1, MyLang.Maptext[22], 1, true);
                            }
                            else if (WhileButtonDown(27))
                            {
                                iMissionVar_01 = 0;
                                iMissionVar_02 += 1;
                                if (iMissionVar_02 > 3)
                                    iMissionVar_02 = 0;

                                sList_01.Clear();
                                sList_01 = VehicleListX(iMissionVar_02, iMissionVar_03, false);
                                sMissionVar_01 = sList_01[iMissionVar_01];
                                VehTrackin_01.Delete();
                                VehicleList_01.Remove(VehTrackin_01);
                                VehTrackin_01 = null;
                                VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 0, 0, 1, MyLang.Maptext[22], 1, true);
                            }
                            else if (WhileButtonDown(173))
                            {

                                iMissionVar_01 = 0;
                                iMissionVar_02 -= 1;
                                if (iMissionVar_02 < 0)
                                    iMissionVar_02 = 3;

                                sList_01.Clear();
                                sList_01 = VehicleListX(iMissionVar_02, iMissionVar_03, false);
                                sMissionVar_01 = sList_01[iMissionVar_01];
                                VehTrackin_01.Delete();
                                VehicleList_01.Remove(VehTrackin_01);
                                VehTrackin_01 = null;
                                VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 0, 0, 1, MyLang.Maptext[22], 1, true);
                            }
                            else if (WhileButtonDown(21))
                            {
                                if (!sList_02.Contains(sMissionVar_01))
                                    sList_02.Add(sMissionVar_01);
                            }
                            else if (WhileButtonDown(22))
                            {
                                if (sList_02.Count > 0)
                                {
                                    iBuildingUp = 2;
                                    iMissionVar_01 = 0;
                                    VectorList_01.Clear();
                                    fList_01.Clear();
                                    VehTrackin_01.Delete();
                                    VehicleList_01.Remove(VehTrackin_01);
                                    VehTrackin_01 = null;
                                    VehicleSpawn(sList_02[0], vTarget_01, 90.00f, true, false, false, false, 0, 0, 1, MyLang.Maptext[22], 1, true);
                                    VehicleWarp(VehTrackin_01, Game.Player.Character, 1);
                                    HelperBarBuiler(3, true);
                                }
                            }
                        }
                    }
                    else if (iBuildingUp == 104)
                    {
                        vTarget_01 = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 5);
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(47))
                            {
                                iMissionVar_01 -= 1;
                                if (iMissionVar_01 < 0)
                                    iMissionVar_01 = sList_01.Count - 1;

                                sMissionVar_01 = sList_01[iMissionVar_01];
                                VehTrackin_01.Delete();
                                VehicleList_01.Remove(VehTrackin_01);
                                VehTrackin_01 = null;
                                VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 0, 0, 1, MyLang.Maptext[22], 1, true);
                            }
                            else if (WhileButtonDown(51))
                            {
                                iMissionVar_01 += 1;
                                if (iMissionVar_01 > sList_01.Count - 1)
                                    iMissionVar_01 = 0;

                                sMissionVar_01 = sList_01[iMissionVar_01];
                                VehTrackin_01.Delete();
                                VehicleList_01.Remove(VehTrackin_01);
                                VehTrackin_01 = null;
                                VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 0, 0, 1, MyLang.Maptext[22], 1, true);
                            }
                            else if (WhileButtonDown(27))
                            {
                                iMissionVar_01 = 0;
                                iMissionVar_02 += 1;
                                if (iMissionVar_02 > 2)
                                    iMissionVar_02 = 0;

                                sList_01.Clear();
                                sList_01 = VehicleListX(iMissionVar_02, iMissionVar_03, false);
                                sMissionVar_01 = sList_01[iMissionVar_01];
                                VehTrackin_01.Delete();
                                VehicleList_01.Remove(VehTrackin_01);
                                VehTrackin_01 = null;
                                VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 0, 0, 1, MyLang.Maptext[22], 1, true);
                            }
                            else if (WhileButtonDown(173))
                            {

                                iMissionVar_01 = 0;
                                iMissionVar_02 -= 1;
                                if (iMissionVar_02 < 0)
                                    iMissionVar_02 = 2;

                                sList_01.Clear();
                                sList_01 = VehicleListX(iMissionVar_02, iMissionVar_03, false);
                                sMissionVar_01 = sList_01[iMissionVar_01];
                                VehTrackin_01.Delete();
                                VehicleList_01.Remove(VehTrackin_01);
                                VehTrackin_01 = null;
                                VehicleSpawn(sMissionVar_01, vTarget_01, 90.00f, true, false, false, false, 0, 0, 1, MyLang.Maptext[22], 1, true);
                            }
                            else if (WhileButtonDown(21))
                            {
                                if (!sList_02.Contains(sMissionVar_01))
                                    sList_02.Add(sMissionVar_01);
                            }
                            else if (WhileButtonDown(22))
                            {
                                if (sList_02.Count > 0)
                                {
                                    iBuildingUp = 2;
                                    iMissionVar_01 = 0;
                                    VectorList_01.Clear();
                                    fList_01.Clear();
                                    VehTrackin_01.Delete();
                                    VehicleList_01.Remove(VehTrackin_01);
                                    VehTrackin_01 = null;
                                    VehicleSpawn(sList_02[0], vTarget_01, 90.00f, true, false, false, false, 0, 0, 1, MyLang.Maptext[22], 1, true);
                                    VehicleWarp(VehTrackin_01, Game.Player.Character, 1);
                                    HelperBarBuiler(3, true);
                                }
                            }
                        }
                    }
                }       //Raceist
                else if (iBuildMode == 9)
                {
                    if (iBuildingUp == 0)
                    {
                        ControlerUI(MyLang.Context[10], 1);

                        if (Function.Call<bool>(Hash.IS_WAYPOINT_ACTIVE))
                        {
                            PlayerWarpToWaypoint(World.GetWaypointPosition(), false);
                            VectorList_01.Clear();
                            VectorList_02.Clear();
                            iList_01.Clear();
                            fList_01.Clear();
                            vTarget_01 = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 5);
                            Prop_01 = BuildProp("ex_prop_adv_case_sm_flash", vTarget_01, Vector3.Zero, false, false);
                            Prop_01.HasCollision = false;
                            HelperBarBuiler(1, false);
                            iBuildingUp += 1;
                        }
                    }
                    else if (iBuildingUp == 1)
                    {
                        ControlerUI(MyLang.Context[10], 1);
                        vTarget_01 = Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 2.50f);
                        Prop_01.Position = vTarget_01;
                        Function.Call(Hash.PLACE_OBJECT_ON_GROUND_PROPERLY, Prop_01.Handle);
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(22))
                            {
                                if (PropList_01.Count > 1)
                                {
                                    PropList_01[PropList_01.Count - 1].Delete();
                                    PropList_01.Remove(PropList_01[PropList_01.Count - 1]);
                                    VectorList_01.RemoveAt(VectorList_01.Count - 1);
                                    VectorList_02.RemoveAt(VectorList_02.Count - 1);
                                    iList_01.RemoveAt(iList_01.Count - 1);
                                    fList_01.RemoveAt(fList_01.Count - 1);
                                    BlipList_01[BlipList_01.Count - 1].Remove();
                                    BlipList_01.RemoveAt(BlipList_01.Count - 1);
                                }
                            }
                            else if (WhileButtonDown(21))
                            {
                                WhereAreYou();
                                VectorList_02.Add(World.GetNextPositionOnStreet(vTarget_01));
                                iList_01.Add(iLocationX);
                                fList_01.Add(Prop_01.Heading);
                                Prop bPop = BuildProp("ex_prop_adv_case_sm_flash", vTarget_01, Vector3.Zero, true, false);
                                MultiBlimbs(vTarget_01, 432, false, "");
                                Function.Call(Hash.PLACE_OBJECT_ON_GROUND_PROPERLY, bPop.Handle);
                                VectorList_01.Add(bPop.Position);
                                UI.Notify("Drop No == " + VectorList_01.Count);
                            }
                            else if (WhileButtonDown(23))
                            {
                                if (VectorList_01.Count > 0)
                                {
                                    for (int i = 0; i < VectorList_01.Count(); i++)
                                    {
                                        BombBuild Bombastic = new BombBuild
                                        {
                                            Local = iList_01[i],
                                            Bomb = VectorList_01[i],
                                            Fubstop = VectorList_02[i],
                                            Fheader = fList_01[i]
                                        };
                                        MyMissions.BombXM.Add(Bombastic);
                                    }
                                    iBuildingUp += 1;                                  
                                    VectorList_01.Clear();
                                    VectorList_02.Clear();
                                    iList_01.Clear();
                                    iTestKit = 0;
                                    LaunchTest();
                                    BBBomb();
                                    SlowFastTravel(vFuMiss, 0.00f);
                                }
                                else
                                    UI.Notify("No Drops");
                            }
                        }
                        else if (Function.Call<bool>(Hash.IS_WAYPOINT_ACTIVE))
                            PlayerWarpToWaypoint(World.GetWaypointPosition(), false);

                    }
                    else if (iBuildingUp == 2)
                    {
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(21))
                            {
                                sList_01 = BuildMishLists(7);
                                if (sList_01.Count > 0)
                                {
                                    iBuildingUp = 10;
                                    BackToBuildMenu(1);
                                }
                                else
                                {
                                    string sFileName = "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/" + Game.GetUserInput(255) + ".XML";
                                    BuildMissions(iBuildMode, sFileName);
                                    PostMess();
                                    iBuildMode = 99;
                                }
                            }
                            else if (WhileButtonDown(22))
                            {
                                MyMissions.BombXM.Clear();
                                iBuildMode = 99;
                                PostMess();
                            }
                        }
                    }
                    else if (iBuildingUp == 8)
                    {
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(21))
                            {
                                PostMess();
                                iBuildingUp = 2;
                                iTestKit = 0;
                                LaunchTest();
                                BBBomb();
                                SlowFastTravel(vFuMiss, 0.00f);
                            }
                            else if (WhileButtonDown(22))
                            {
                                MyMissions.BombXM.Clear();
                                iBuildMode = 99;
                                PostMess();
                            }
                        }
                    }
                }       //BBBomb
                else if (iBuildMode == 10)
                {
                    if (iBuildingUp == 0)
                    {
                        ControlerUI(MyLang.Context[10], 1);
                        if (Function.Call<bool>(Hash.IS_WAYPOINT_ACTIVE))
                        {
                            HitBuild BigHit = new HitBuild();
                            MyMissions.HitXM.Add(BigHit);
                            PlayerWarpToWaypoint(World.GetWaypointPosition(), false);
                            VectorList_01.Clear();
                            HelperBarBuiler(1, false);
                            iBuildingUp += 1;
                        }
                    }
                    else if (iBuildingUp == 1)
                    {
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(21))
                            {
                                iBuildingUp += 1;
                                MyMissions.HitXM[0].Vboss = Game.Player.Character.Position;
                                MyMissions.HitXM[0].BossDir = Game.Player.Character.Heading;
                                MultiBlimbs(Game.Player.Character.Position, 303, false, "");
                                HelperBarBuiler(2, true);
                            }
                        }
                    }
                    else if (iBuildingUp == 2)
                    {
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(22))
                            {
                                iBuildingUp -= 1;
                                CleanFakeBlips();
                                HelperBarBuiler(1, true);
                            }
                            else if (WhileButtonDown(21))
                            {
                                iBuildingUp += 1;
                                MyMissions.HitXM[0].Goon01 = Game.Player.Character.Position;
                                MyMissions.HitXM[0].Goon01Dir = Game.Player.Character.Heading;
                                MultiBlimbs(Game.Player.Character.Position, 432, false, "");
                            }
                        }
                    }
                    else if (iBuildingUp == 3)
                    {
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(22))
                            {
                                iBuildingUp -= 1;
                                BlipList_01[BlipList_01.Count - 1].Remove();
                                BlipList_01.RemoveAt(BlipList_01.Count - 1);
                            }
                            else if (WhileButtonDown(21))
                            {
                                iBuildingUp += 1;
                                MyMissions.HitXM[0].Goon02 = Game.Player.Character.Position;
                                MyMissions.HitXM[0].Goon02Dir = Game.Player.Character.Heading;
                                MultiBlimbs(Game.Player.Character.Position, 432, false, "");
                                HelperBarBuiler(3, true);
                            }
                        }
                    }
                    else if (iBuildingUp == 4)
                    {
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(22))
                            {
                                HelperBarBuiler(2, true);
                                for (int i = 0; i < VectorList_01.Count; i++)
                                {
                                    BlipList_01[BlipList_01.Count - 1].Remove();
                                    BlipList_01.RemoveAt(BlipList_01.Count - 1);
                                }
                                BlipList_01[BlipList_01.Count - 1].Remove();
                                BlipList_01.RemoveAt(BlipList_01.Count - 1);
                                VectorList_01.Clear();
                                iBuildingUp -= 1;
                            }
                            else if (WhileButtonDown(21))
                            {
                                VectorList_01.Add(Game.Player.Character.Position);
                                UI.Notify("Stop No == " + VectorList_01.Count);
                                MultiBlimbs(Game.Player.Character.Position, 535, false, "");
                            }
                            else if (WhileButtonDown(23))
                            {
                                if (VectorList_01.Count > 1)
                                {
                                    iBuildingUp += 1;
                                    MyMissions.HitXM[0].Goon03 = new List<Vector3>(VectorList_01);
                                    VectorList_01.Clear();
                                }
                                else
                                    UI.Notify("No Stops");
                            }
                        }
                    }
                    else if (iBuildingUp == 5)
                    {
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(22))
                            {
                                iBuildingUp -= 1;
                                for (int i = 0; i < VectorList_01.Count; i++)
                                {
                                    BlipList_01[BlipList_01.Count - 1].Remove();
                                    BlipList_01.RemoveAt(BlipList_01.Count - 1);
                                }
                                VectorList_01.Clear();
                            }
                            else if (WhileButtonDown(21))
                            {
                                VectorList_01.Add(Game.Player.Character.Position);
                                UI.Notify("Stop No == " + VectorList_01.Count);
                                MultiBlimbs(Game.Player.Character.Position, 536, false, "");
                            }
                            else if (WhileButtonDown(23))
                            {
                                if (VectorList_01.Count > 1)
                                {
                                    iBuildingUp += 1;
                                    MyMissions.HitXM[0].Goon04 = new List<Vector3>(VectorList_01);
                                    VectorList_01.Clear();
                                    HelperBarBuiler(4, true);
                                }
                                else
                                    UI.Notify("No Stops");
                            }
                        }
                    }
                    else if (iBuildingUp == 6)
                    {
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(22))
                            {
                                iBuildingUp -= 1;
                                HelperBarBuiler(3, true);
                                for (int i = 0; i < VectorList_01.Count; i++)
                                {
                                    BlipList_01[BlipList_01.Count - 1].Remove();
                                    BlipList_01.RemoveAt(BlipList_01.Count - 1);
                                }
                                VectorList_01.Clear();
                            }
                            else if (WhileButtonDown(21))
                            {
                                VectorList_01.Add(Game.Player.Character.Position);
                                UI.Notify("Stop No == " + VectorList_01.Count);
                                MultiBlimbs(Game.Player.Character.Position, 537, false, "");
                            }
                            else if (WhileButtonDown(23))
                            {
                                if (VectorList_01.Count > 1)
                                {
                                    iBuildingUp += 1;
                                    MyMissions.HitXM[0].Goon05 = new List<Vector3>(VectorList_01);
                                    VectorList_01.Clear();
                                    HelperBarBuiler(5, true);
                                }
                                else
                                    UI.Notify("No Stops");
                            }
                        }
                    }
                    else if (iBuildingUp == 7)
                    {
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(22))
                            {
                                iBuildingUp -= 1;
                                HelperBarBuiler(4, true);
                            }
                            else if (WhileButtonDown(21))
                            {
                                iBuildingUp = 9;
                                WhereAreYou();
                                MyMissions.HitXM[0].Local = iLocationX;
                                MyMissions.HitXM[0].Vstart = Game.Player.Character.Position;
                                MyMissions.HitXM[0].FUbstop = World.GetNextPositionOnStreet(Game.Player.Character.Position);
                                PostMess();
                                LaunchTest();
                                HitMan();
                                SlowFastTravel(vFuMiss, 0.00f);
                            }
                        }
                    }
                    else if (iBuildingUp == 9)
                    {
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(21))
                            {
                                sList_01 = BuildMishLists(7);
                                if (sList_01.Count > 0)
                                {
                                    iBuildingUp = 10;
                                    BackToBuildMenu(1);
                                }
                                else
                                {
                                    string sFileName = "" + Directory.GetCurrentDirectory() + "/Scripts/NSPM/Builder/" + Game.GetUserInput(255) + ".XML";
                                    BuildMissions(iBuildMode, sFileName);
                                    PostMess();
                                    iBuildMode = 99;
                                }
                            }
                            else if (WhileButtonDown(22))
                            {
                                MyMissions.HitXM.Clear();
                                iBuildMode = 99;
                                PostMess();
                            }
                        }
                    }
                    else if (iBuildingUp == 8)
                    {
                        if (ButtonDown(37))
                        {
                            if (WhileButtonDown(21))
                            {
                                PostMess();
                                iBuildingUp = 9;
                                LaunchTest();
                                HitMan();
                                SlowFastTravel(vFuMiss, 0.00f);
                            }
                            else if (WhileButtonDown(22))
                            {
                                MyMissions.HitXM.Clear();
                                iBuildMode = 99;
                                PostMess();
                            }
                        }
                    }
                }      //HitMan
                else
                {
                    Game.Player.IsInvincible = false;
                    iBuildingUp = 0;
                    iBuildMode = 0;
                    bBuildMode = false;
                    BackToBuildMenu(0);
                }

                ClearTheWay(false);
            }
            else if (bOnTheJob)
            {
                if (bJobLoaded)
                {
                    if (Function.Call<bool>(Hash.IS_PLAYER_DEAD) || Function.Call<bool>(Hash.IS_PLAYER_BEING_ARRESTED) || Function.Call<bool>(Hash.IS_PLAYER_SWITCH_IN_PROGRESS))
                        iMissionSeq = 45;

                    if (MakeCarz.Count > 0)
                    {
                        if (FindMe == null)
                        {
                            if (iFindingTime < Game.GameTime)
                                FindMe = GetVehPos(MakeCarz[0].MinRadi, MakeCarz[0].MaxRadi, MakeCarz[0].Driver);
                        }
                        else
                        {
                            VehRelpace(FindMe, MakeCarz[0]);
                            MakeCarz.RemoveAt(0);
                            FindMe = null;
                        }
                    }
                    else if (MakeFrenz.Count > 0)
                    {
                        if (bMissingPed)
                        {
                            if (iFindingTime < Game.GameTime)
                            {
                                UseAmbPed(Game.Player.Character.Position, MakeFrenz[0].MaxRadi, MakeFrenz[0].Free, MakeFrenz[0].Task, MakeFrenz[0].NameIs);
                                MakeFrenz.RemoveAt(0);
                                bMissingPed = false;
                            }
                        }
                        else
                        {
                            if (FindMe == null)
                            {
                                if (iFindingTime < Game.GameTime)
                                    FindMe = GetPedPos(MakeFrenz[0].MinRadi, MakeFrenz[0].MaxRadi);
                            }
                            else
                            {
                                PedRelpace(FindMe, MakeFrenz[0]);
                                MakeFrenz.RemoveAt(0);
                                FindMe = null;
                            }
                        }
                    }
                    else if (iMissionSeq != 0)
                    {
                        if (vFuMiss != Vector3.Zero)
                        {
                            WriteContacts(false);
                            vFuMiss = Vector3.Zero;
                        }
                    }

                    if (!bPlayingNewMissions)
                    {
                        LogThis("bPlayingNewMissions == " + iJobType);

                        if (GP_Player != Game.Player.Character.RelationshipGroup)
                        {
                            GP_Player = Game.Player.Character.RelationshipGroup;
                            Function.Call(Hash.SET_RELATIONSHIP_BETWEEN_GROUPS, 0, GP_Player, GP_ANPCs);
                            Function.Call(Hash.SET_RELATIONSHIP_BETWEEN_GROUPS, 0, GP_ANPCs, GP_Player);

                            Function.Call(Hash.SET_RELATIONSHIP_BETWEEN_GROUPS, 5, GP_Attack, GP_Player);
                            Function.Call(Hash.SET_RELATIONSHIP_BETWEEN_GROUPS, 5, GP_Player, GP_Attack);

                            Function.Call(Hash.SET_RELATIONSHIP_BETWEEN_GROUPS, 5, GP_Player, GP_Mental);
                            Function.Call(Hash.SET_RELATIONSHIP_BETWEEN_GROUPS, 5, GP_Mental, GP_Player);

                            Function.Call(Hash.SET_RELATIONSHIP_BETWEEN_GROUPS, 5, GP_BNPCs, GP_Player);
                            Function.Call(Hash.SET_RELATIONSHIP_BETWEEN_GROUPS, 5, GP_Player, GP_BNPCs);
                        }

                        bPlayingNewMissions = true;
                        XMLSettings();
                    }
                    else if (iJobType == 1)
                    {
                        if (iMissionSeq == 0)
                        {
                            iMissionSeq = 1;
                            iMishText = 0;

                            if (iMissionVar_01 > 0)
                                Trucking_Attachments(iMissionVar_01);

                            if (MySettings.FastTraveltoStart)
                                SlowFastTravel(vFuMiss, 0.00f);

                            iMissionVar_01 = 0;
                        }
                        else if (iMissionSeq == 1)
                        {
                            if (bNotPause)
                            {
                                Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                bNotPause = false;
                            }
                            else if (VehTrackin_02.IsDead)
                                iMissionSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                            {
                                iMissionSeq = 2;
                                Trucking_CashNCrash();
                                VehTrackin_01.CurrentBlip.Remove();
                                iMishText = 2;
                            }
                            else if (Game.Player.Character.Position.DistanceTo(VehTrackin_01.Position) < 35.00f)
                            {
                                iMishText = 1;

                                if (BeOff[0])
                                {
                                    if (!VehTrackin_01.IsOnAllWheels)
                                    {
                                        StayOnGround(VehTrackin_01);
                                        VehTrackin_01.Heading = fMission_02;
                                    }
                                    StayOnGround(VehTrackin_02);
                                    VehTrackin_02.Heading = fMission_01;
                                    BeOff[0] = false;
                                }
                                else if (World.GetDistance(VehTrackin_01.Position, Game.Player.Character.Position) < 5.00f && BeOnOff[4])
                                {
                                    ControlerUI("~INPUT_DETONATE~ " + GetEntName(sList_01[iMissionVar_01]) + " ~INPUT_CONTEXT~", 1);
                                    if (Game.IsControlJustPressed(2, GTA.Control.Detonate))
                                    {
                                        if (iMissionVar_01 > 0)
                                            iMissionVar_01 -= 1;
                                        else
                                            iMissionVar_01 = sList_01.Count - 1;
                                        float fHeader = VehTrackin_01.Heading;
                                        VehicleList_01.Remove(VehTrackin_01);
                                        VehTrackin_01.CurrentBlip.Remove();
                                        VehTrackin_01.Delete();
                                        VehicleSpawn(sList_01[iMissionVar_01], vTarget_02, fHeader, false, false, true, false, 0, 0, 66, MyLang.Maptext[1], 1, BeOnOff[5]);
                                    }
                                    else if (Game.IsControlJustPressed(2, GTA.Control.Context))
                                    {
                                        if (iMissionVar_01 + 1 < sList_01.Count)
                                            iMissionVar_01 += 1;
                                        else
                                            iMissionVar_01 = 0;
                                        float fHeader = VehTrackin_01.Heading;
                                        VehicleList_01.Remove(VehTrackin_01);
                                        VehTrackin_01.CurrentBlip.Remove();
                                        VehTrackin_01.Delete();
                                        VehicleSpawn(sList_01[iMissionVar_01], vTarget_02, fHeader, false, false, true, false, 0, 0, 66, MyLang.Maptext[22], 1, BeOnOff[5]);
                                    }
                                }
                            }
                            else
                                iMishText = 0;
                        }
                        else if (iMissionSeq == 2)
                        {
                            if (VehTrackin_01.IsDead || VehTrackin_02.IsDead)
                                iMissionSeq = 45;
                            else
                            {
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    if (BeOnOff[0])
                                    {
                                        BeOnOff[0] = false;
                                        iMishText = 2;
                                        VehTrackin_01.CurrentBlip.Remove();
                                    }
                                    if (!VehTrackin_02.IsOnAllWheels && iTime_01[0] < Game.GameTime)
                                        Trucking_LostTrail();
                                    else if (VehTrackin_02.IsAttached())
                                    {
                                        iMissionSeq = 3;
                                        BeOnOff[2] = true;
                                        BeOnOff[1] = true;
                                        VehTrackin_02.FreezePosition = false;
                                        VehTrackin_02.CurrentBlip.Remove();
                                        VehTrackin_02.Repair();
                                        AddTarget(vTarget_01, true, true, 1.00f, false, 479, MyLang.Maptext[39]);
                                        vLanLoc = vTarget_01;
                                        iMishText = 3;
                                    }
                                }
                                else
                                {
                                    if (!BeOnOff[0])
                                    {
                                        BeOnOff[0] = true;
                                        RemoveTargets();
                                        iMishText = 1;
                                        VehBlip(VehTrackin_01, false, true, 66, MyLang.Maptext[1]);
                                    }
                                }
                            }
                        }
                        else if (iMissionSeq == 3)
                        {
                            if (BeOnOff[3] && World.GetDistance(vTarget_01, VehTrackin_02.Position) < 90.0f)
                            {
                                if (VehTrackin_03.HasCollision)
                                    VehTrackin_03.HasCollision = false;

                                MoveThatCar(vTarget_01);
                                GhostVehicle(VehTrackin_03, vTarget_01, fMission_03);
                                TheYellowCorona(vTarget_01, 10.00f);
                                BeOnOff[3] = false;
                            }

                            iCashReward = MultiDamage(iList_01, iList_02, iCrash4Cash, true, iCashReward, true, true);

                            if (VehTrackin_01.IsDead || VehTrackin_02.IsDead)
                                iMissionSeq = 45;
                            else if (World.GetDistance(vTarget_01, VehTrackin_02.Position) < 10.00f)
                            {
                                if (VehTrackin_03.HasCollision)
                                    VehTrackin_03.HasCollision = false;
                                else if (Game.Player.Character.IsInVehicle() && VehTrackin_02.IsAttached())
                                    ControlerUI(MyLang.Context[14], 1);
                                else
                                {
                                    float fParking = VehTrackin_02.Position.DistanceTo(VehTrackin_03.Position) * 5;
                                    fParking = fParking + VehTrackin_02.Rotation.DistanceTo(VehTrackin_03.Rotation) * 10;
                                    int iPkBouns = (int)fParking;
                                    iCashBouns = 1000 - iPkBouns;
                                    if (iCashBouns < 0)
                                        iCashBouns = 0;
                                    VehTrackin_01.EngineRunning = false;
                                    RemoveTargets();
                                    vLanLoc = Vector3.Zero;
                                    iMishText = -1;
                                    iMissionSeq = 4;
                                }
                            }
                            else
                            {
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    if (BeOnOff[0])
                                    {
                                        BeOnOff[0] = false;
                                        vLanLoc = vTarget_01;
                                        iMishText = 3;
                                        AddTarget(vTarget_01, true, true, 1.00f, false, 479, MyLang.Maptext[39]);
                                        VehTrackin_01.CurrentBlip.Remove();
                                    }
                                }
                                else
                                {
                                    if (!BeOnOff[0])
                                    {
                                        BeOnOff[0] = true;
                                        vLanLoc = Vector3.Zero;
                                        iMishText = 1;
                                        RemoveTargets();
                                        VehBlip(VehTrackin_01, false, true, 3, MyLang.Maptext[1]);
                                    }
                                }

                                if (BeOnOff[2])
                                {
                                    if (!VehTrackin_02.IsAttached())
                                    {
                                        BeOnOff[2] = false;
                                        RemoveTargets();
                                        VehBlip(VehTrackin_02, true, true, 3, MyLang.Maptext[2]);
                                        iTime_01[1] = Game.GameTime + 45000;
                                        VTBTimerPool.Add(ttTextBar_02);
                                        vLanLoc = Vector3.Zero;
                                        iMishText = 2;
                                    }
                                }
                                else
                                {
                                    if (!VehTrackin_02.IsOnAllWheels && iTime_01[0] < Game.GameTime)
                                        Trucking_LostTrail();
                                    else if (VehTrackin_02.IsAttached())
                                    {
                                        BeOnOff[2] = true;
                                        vLanLoc = vTarget_01;
                                        iMishText = 3;
                                        AddTarget(vTarget_01, true, true, 1.00f, false, 479, MyLang.Maptext[39]);
                                        VehTrackin_02.CurrentBlip.Remove();
                                        VTBTimerPool.Remove(ttTextBar_02);
                                    }
                                    else if (iTime_01[1] > Game.GameTime)
                                    {
                                        int iTimeLeft = iTime_01[1] - Game.GameTime;
                                        FindTheTime(iTimeLeft, 9, "", true);
                                    }
                                    else
                                        iMissionSeq = 45;
                                }
                            }
                        }
                        else if (iMissionSeq == 4)
                        {
                            VehTrackin_03.Delete();
                            VehicleList_01.Remove(VehTrackin_03);
                            VehTrackin_01.FreezePosition = true;
                            Script.Wait(1000);
                            GetOutofVeh(Game.Player.Character, 1);
                            VehTrackin_01.FreezePosition = false;
                            VehTrackin_01.LockStatus = VehicleLockStatus.Locked;
                            iCashReward += iCashBouns;

                            if (!bTestRun)
                                NSCoinInvestments(true, 4, 6, "Big G Goods Shares");
                            if (iCashBouns > 0)
                                GameOver(false, "Parking Bouns: $" + iCashBouns + ", ", false, iCashReward);
                            else
                                GameOver(false, "", false, iCashReward);
                        }
                        else if (iMissionSeq == 45)
                        {
                            if (!bTestRun)
                                NSCoinInvestments(false, 5, 7, "Big G Goods Shares");
                            GameOver(true, "", false, 0);
                        }
                    }        //Truckin
                    else if (iJobType == 2)
                    {
                        if (iMissionSeq == 0)
                        {
                            iMissionSeq = 1;
                            Function.Call((Hash)0xDC0F817884CDD856, 2, false);
                            Function.Call((Hash)0xDC0F817884CDD856, 4, true);
                            Function.Call((Hash)0xDC0F817884CDD856, 8, true);
                            Function.Call((Hash)0xDC0F817884CDD856, 12, false);

                            StayInVehicle(Game.Player.Character, true);
                            iWait4Sec = Game.GameTime + 5000;
                            BeOnOff[4] = false;

                            iMishText = 4;
                        }
                        else if (iMissionSeq == 1)
                        {
                            if (bNotPause)
                            {
                                Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                bNotPause = false;
                            }
                            else if (Npc_01.IsDead || Npc_02.IsDead || Npc_03.IsDead)
                                iMissionSeq = 45;
                            else if (Game.Player.Character.IsInVehicle())
                            {
                                if (BeOnOff[6])
                                {
                                    if (!Game.Player.Character.IsInVehicle())
                                    {
                                        BeOnOff[6] = false;
                                        RemoveTargets();
                                        VehTrackin_05.IsPersistent = false;
                                        BeOff[0] = true;
                                        iMishText = 4;
                                    }
                                    else if (World.GetDistance(vTarget_01, Game.Player.Character.Position) < 75.00f)
                                    {
                                        if (BeOff[0])
                                        {
                                            iMishText = 5;
                                            BeOff[0] = false;
                                        }
                                        World.DrawMarker(MarkerType.VerticalCylinder, vTarget_01, Vector3.Zero, Vector3.Zero, new Vector3(5.0f, 5.0f, 5.0f), color: Color.Yellow);
                                        if (BeOnOff[3])
                                        {
                                            MoveThatCar(vTarget_01);
                                            BeOnOff[3] = false;
                                        }
                                        if (World.GetDistance(vTarget_01, Game.Player.Character.Position) < 3.0f)
                                        {
                                            if (VehTrackin_05.IsStopped)
                                            {
                                                iMissionSeq = 2;
                                                BeOnOff[5] = true;
                                                PlaySoundFrom("Alarms", "Burglar_Bell", "Generic_Alarms", vTarget_03, false);
                                                DoorsNear(vTarget_03, 5.00f, false);
                                                iMishText = -1;
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    if (BeOnOff[0] || Game.Player.Character.CurrentVehicle.ClassType != VehicleClass.Helicopters)
                                    {
                                        if (Game.Player.Character.CurrentVehicle.IsSeatFree(VehicleSeat.LeftRear))
                                        {
                                            VehTrackin_05 = Game.Player.Character.CurrentVehicle;
                                            BeOnOff[6] = true;
                                            VehTrackin_05.IsPersistent = true;
                                            AddTarget(vTarget_01, true, true, 1.00f, false, 207, MyLang.Maptext[40]);
                                            iMishText = 6;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                if (BeOnOff[6])
                                {
                                    BeOnOff[6] = false;
                                    VehTrackin_05.IsPersistent = false;
                                    RemoveTargets();
                                    iMishText = 4;
                                }
                            }
                        }
                        else if (iMissionSeq == 2)
                        {
                            if (!BeOnOff[1])
                            {
                                if (VehTrackin_05.IsInvincible)
                                {
                                    BeOnOff[1] = true;
                                    Getaway_CarSwap(VehTrackin_05);
                                }
                                else
                                {
                                    iMissionSeq = 3;
                                    RemoveTargets();
                                    World.AddExplosion(vTarget_03, ExplosionType.Flare, 1.0f, 0.0f);
                                    Vehicle PlVeh = Game.Player.Character.CurrentVehicle;
                                    iWait4Sec = Game.GameTime + 15000;
                                    PlVeh.EngineRunning = false;
                                    PlVeh.IsExplosionProof = false;
                                    PlVeh.IsOnlyDamagedByPlayer = false;
                                    PlVeh.IsFireProof = false;
                                    VehicleList_01.Add(new Vehicle(PlVeh.Handle));
                                    Getaway_FearInBank();
                                }
                            }
                        }
                        else if (iMissionSeq == 3)
                        {
                            if (Npc_01.IsDead || Npc_02.IsDead || Npc_03.IsDead || VehTrackin_05.IsDead)
                                iMissionSeq = 45;
                            else if (Npc_01.IsInVehicle(VehTrackin_05) && Npc_02.IsInVehicle(VehTrackin_05) && Npc_03.IsInVehicle(VehTrackin_05))
                            {
                                iMissionSeq = 4;

                                Getaway_RobDaBank();
                                iMishText = 7;
                            }
                            else if (iWait4Sec < Game.GameTime)
                            {
                                if (!Npc_01.IsInVehicle(VehTrackin_05))
                                    VehicleWarp(VehTrackin_05, Npc_01, 2);
                                if (!Npc_02.IsInVehicle(VehTrackin_05))
                                    VehicleWarp(VehTrackin_05, Npc_02, 3);
                                if (!Npc_03.IsInVehicle(VehTrackin_05))
                                    VehicleWarp(VehTrackin_05, Npc_03, 4);
                            }
                        }
                        else if (iMissionSeq == 4)
                        {
                            if (Npc_01.IsDead || Npc_02.IsDead || Npc_03.IsDead || VehTrackin_05.IsDead)
                                iMissionSeq = 45;
                            else if (BeOnOff[5])
                            {
                                if (World.GetDistance(vTarget_01, Game.Player.Character.Position) > 80.0f)
                                {
                                    BeOnOff[5] = false;
                                    StopThatSound();
                                }
                                else if (Game.Player.WantedLevel < 3)
                                    Game.Player.WantedLevel = 5;
                            }
                            else if (BeOnOff[4])
                            {
                                if (Game.Player.WantedLevel > 0)
                                {
                                    BeOnOff[4] = false;
                                    iMishText = 7;
                                    RemoveTargets();
                                }
                                else if (!Game.Player.Character.IsInVehicle())
                                    iMissionSeq = 45;
                                else if (World.GetDistance(vTarget_02, Game.Player.Character.Position) < 3.0f)
                                {
                                    iMissionSeq = 5;
                                    RemoveTargets();
                                    VehTrackin_05.IsDriveable = false;
                                    BeOnOff[7] = false;
                                    ArmsRegulator(Game.Player.Character, 6);
                                    StopHere(VehTrackin_05);
                                    iMishText = 9;
                                }
                            }
                            else if (Game.Player.Character.IsInVehicle(VehTrackin_05))
                            {
                                if (Game.Player.WantedLevel == 0)
                                {
                                    TheYellowCorona(vTarget_02, 5.00f);
                                    AddTarget(vTarget_02, true, true, 1.00f, false, 440, MyLang.Maptext[41]);
                                    BeOnOff[4] = true;
                                    iMishText = 8;
                                }
                            }
                            else
                                iMissionSeq = 45;

                            if (BeOnOff[7])
                            {
                                iCashReward = MultiDamage(iList_01, iList_02, iMissionVar_03, true, iCashReward, true, false);

                                if (BeOnOff[2])
                                    BeOnOff[2] = false;
                                else
                                {
                                    if (iCashReward != iCashBouns)
                                    {
                                        iCashBouns = iCashReward;
                                        BeOnOff[8] = true;
                                        if (iTime_01[0] == 0)
                                            iTime_01[0] = Game.GameTime + 500;
                                    }
                                }

                                if (BeOnOff[8])
                                {
                                    if (BeOnOff[9])
                                    {
                                        if (Game.GameTime > iTime_01[0])
                                        {
                                            if (iFireList.Count > 0)
                                            {
                                                Function.Call(Hash.STOP_PARTICLE_FX_LOOPED, iFireList[iFireList.Count - 1], true);
                                                iFireList.RemoveAt(iFireList.Count - 1);
                                            }
                                            else
                                            {
                                                iTime_01[0] = 0;
                                                BeOnOff[9] = false;
                                                BeOnOff[8] = false;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, "scr_xs_celebration"))
                                        {
                                            Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_xs_celebration");
                                            int iPart = Function.Call<int>(Hash.START_PARTICLE_FX_LOOPED_ON_ENTITY, "scr_xs_money_rain", VehTrackin_05.Handle, 0.40f, 0.40f, 0.50f, 0.00f, 0.00f, 0.00f, 1.00f, false, true, false);
                                            Function.Call(Hash.SET_PARTICLE_FX_LOOPED_ALPHA, iPart, 1.00f);
                                            Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_xs_celebration");
                                            int iPart1 = Function.Call<int>(Hash.START_PARTICLE_FX_LOOPED_ON_ENTITY, "scr_xs_money_rain", VehTrackin_05.Handle, -0.40f, -0.40f, 0.50f, 0.00f, 0.00f, 0.00f, 1.00f, false, true, false);
                                            Function.Call(Hash.SET_PARTICLE_FX_LOOPED_ALPHA, iPart1, 1.00f);
                                            Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_xs_celebration");
                                            int iPart2 = Function.Call<int>(Hash.START_PARTICLE_FX_LOOPED_ON_ENTITY, "scr_xs_money_rain", VehTrackin_05.Handle, 0.40f, -0.40f, 0.50f, 0.00f, 0.00f, 0.00f, 1.00f, false, true, false);
                                            Function.Call(Hash.SET_PARTICLE_FX_LOOPED_ALPHA, iPart2, 1.00f);

                                            iFireList.Add(iPart);
                                            iFireList.Add(iPart1);
                                            iFireList.Add(iPart2);
                                            BeOnOff[9] = true;
                                        }
                                        else
                                        {
                                            Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_xs_celebration");
                                        }
                                    }
                                }
                            }
                        }
                        else if (iMissionSeq == 5)
                        {
                            if (VehicleList_01.Count > 1)
                            {
                                iMissionSeq = 6;
                                RemoveTargets();
                                GetOutofVeh(Game.Player.Character, 1);
                                VehTrackin_05.FreezePosition = false;
                                VehTrackin_01.IsInvincible = false;
                                VehTrackin_01.FreezePosition = false;
                                VehBlip(VehTrackin_05, true, false, 1, MyLang.Maptext[14]);
                                Groupies(false);
                                GetOutofVeh(Npc_01, 1);
                                GetOutofVeh(Npc_02, 1);
                                GetOutofVeh(Npc_03, 1);
                                iWait4Sec = Game.GameTime + 500;
                            }
                        }
                        else if (iMissionSeq == 6)
                        {
                            if (Npc_01.IsDead || Npc_02.IsDead || Npc_03.IsDead)
                                iMissionSeq = 45;
                            else if (iWait4Sec < Game.GameTime)
                            {
                                iMissionSeq = 7;
                                EnterAnyVeh(VehTrackin_01, Npc_01, 0, 2.00f);
                                EnterAnyVeh(VehTrackin_01, Npc_02, 1, 2.00f);
                                EnterAnyVeh(VehTrackin_01, Npc_03, 2, 2.00f);
                                iWait4Sec = Game.GameTime + 10000;
                            }
                        }
                        else if (iMissionSeq == 7)
                        {
                            if (Npc_01.IsDead || Npc_02.IsDead || Npc_03.IsDead)
                                iMissionSeq = 45;
                            else if (iWait4Sec < Game.GameTime)
                            {
                                iMissionSeq = 10;
                                if (Npc_01.IsInVehicle(VehTrackin_01) == false)
                                    VehicleWarp(VehTrackin_01, Npc_01, 1);
                                if (Npc_02.IsInVehicle(VehTrackin_01) == false)
                                    VehicleWarp(VehTrackin_01, Npc_02, 2);
                                if (Npc_03.IsInVehicle(VehTrackin_01) == false)
                                    VehicleWarp(VehTrackin_01, Npc_03, 3);
                            }
                            else if (Npc_01.IsInVehicle(VehTrackin_01) && Npc_02.IsInVehicle(VehTrackin_01) && Npc_03.IsInVehicle(VehTrackin_01))
                                iMissionSeq = 10;
                        }
                        else if (iMissionSeq == 10)
                        {
                            if (Npc_01.IsDead || Npc_02.IsDead || Npc_03.IsDead)
                                iMissionSeq = 45;
                            else if (Npc_01.IsInVehicle(VehTrackin_01) && Npc_02.IsInVehicle(VehTrackin_01) && Npc_03.IsInVehicle(VehTrackin_01))
                            {
                                if (BeOnOff[10])
                                {
                                    BeOnOff[10] = false;
                                    Function.Call(Hash.TASK_PLANE_MISSION﻿, Npc_01, VehTrackin_01, 0, 0, -2352.11f, 2274.94f, 500.0f, 4, 100.0f, 0.0f, 90.0f, 0, 600.0f);
                                }
                                else if (VehTrackin_05.IsOnFire || VehTrackin_05.IsDead)
                                {
                                    iCashReward = iCashReward / 4;
                                    VehTrackin_05.Explode();
                                    Function.Call((Hash)0xDC0F817884CDD856, 2, true);
                                    Function.Call((Hash)0xDC0F817884CDD856, 12, true);
                                    sMissionVar_01 = "empty";
                                    sMissionVar_02 = "empty";
                                    GameOver(false, "", false, iCashReward);
                                    iMishText = -1;
                                }
                            }
                        }
                        else if (iMissionSeq == 45)
                        {
                            Groupies(false);
                            Function.Call((Hash)0xDC0F817884CDD856, 2, true);
                            Function.Call((Hash)0xDC0F817884CDD856, 12, true);

                            if (BeOnOff[9])
                                Getaway_StopLoss();
                            if (BeOnOff[5])
                            {
                                BeOnOff[5] = false;
                                StopThatSound();
                            }
                            sMissionVar_01 = "empty";
                            sMissionVar_02 = "empty";
                            GameOver(true, "", false, 0);
                        }
                    }        //GetAwayDriver
                    else if (iJobType == 3)
                    {
                        if (iMissionSeq == 0)
                        {
                            if (VehicleList_01.Count > 0)
                            {
                                iMissionSeq = 1;
                                BeOnOff[2] = true;

                                if (MySettings.FastTraveltoStart)
                                    WarptoAnyVeh(VehTrackin_01, Game.Player.Character, 1);
                                iMishText = 10;

                                if (BeOnOff[3])
                                    Packages_LiveExport();
                            }
                        }
                        else if (iMissionSeq == 1)
                        {
                            if (bNotPause)
                            {
                                Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                bNotPause = false;
                            }
                            else if (VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                            {
                                iMissionSeq = 2;
                                BeOnOff[2] = true;
                                BeOnOff[4] = false;
                                iMissionVar_02 = VectorList_01.Count - 1;
                                iMissionVar_03 = VectorList_01.Count;
                                vTarget_01 = VectorList_01[iMissionVar_02];
                                vTarget_01.Z = vTarget_01.Z - 1.00f;
                                iMishText = 13;
                            }
                            else if (Game.Player.Character.Position.DistanceTo(VehTrackin_01.Position) < 35.00f)
                            {
                                if (iLocationX == 6)
                                    iMishText = 11;
                                else
                                    iMishText = 12;

                                if (!VehTrackin_01.IsOnAllWheels)
                                {
                                    VehTrackin_01.Position = vGetaway;
                                    VehTrackin_01.Rotation = new Vector3(0.00f, 0.00f, fGetDir);
                                }
                            }
                            else
                                iMishText = 10;

                        }
                        else if (iMissionSeq == 2)
                        {
                            if (VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else if (World.GetDistance(vTarget_01, Game.Player.Character.Position) < 95.00f && BeOnOff[4])
                            {
                                if (World.GetDistance(vTarget_01, Game.Player.Character.Position) < 2.00f && Game.Player.Character.IsOnFoot && BeInRange(Game.Player.Character.Position.Z, vTarget_01.Z, 0.50f))
                                {
                                    iMissionSeq = 3;
                                    if (!BeOnOff[0])
                                    {
                                        BeOnOff[0] = true;
                                        VTBTimerPool.Add(ttTextBar_02);
                                        iTime_01[1] = Game.GameTime + iTime_01[0];
                                    }
                                    iWait4Sec = Game.GameTime + 2000;
                                    Game.Player.Character.Task.PlayAnimation("anim@mp_fireworks", "place_firework_3_box", 8.00f, 3000, true, 1.00f);
                                    BeOnOff[2] = true;
                                    iTime_01[2] = iTime_01[1] - Game.GameTime;
                                    RemoveTargets();
                                }
                            }
                            else if (BeOnOff[2])
                            {
                                if (iLocationX == 6)
                                    iMishText = 11;
                                else
                                    iMishText = 12;

                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[2] = false;
                                    VehTrackin_01.CurrentBlip.Remove();
                                    BeOnOff[4] = true;
                                    AddTarget(vTarget_01, true, true, 1.00f, false, 478, MyLang.Maptext[42]);
                                    TheYellowCorona(vTarget_01, 1.00f);
                                    iMishText = 13;
                                }
                            }
                            else
                            {
                                if (Game.Player.Character.IsInVehicle() && !Game.Player.Character.IsInVehicle(VehTrackin_01) && Target_01 != null)
                                {
                                    RemoveTargets();
                                    VehBlip(VehTrackin_01, true, true, 66, MyLang.Maptext[3]);
                                    iMishText = 12;
                                    BeOnOff[2] = true;
                                }
                            }
                            if (BeOnOff[0])
                            {
                                if (iTime_01[1] > Game.GameTime)
                                {
                                    int iNumber = 0;
                                    iNumber = iMissionVar_02 + 1;
                                    ttTextBar_01.Text = "" + iNumber + "/" + iMissionVar_03 + "";

                                    int iTotal = iTime_01[1] - Game.GameTime;
                                    FindTheTime(iTotal, 9, "", true);
                                }
                                else
                                {
                                    iMissionSeq = 4;
                                    if (Game.Player.Character.IsInVehicle())
                                    {
                                        RemoveTargets();
                                        BeOnOff[2] = true;
                                        VehBlip(VehTrackin_01, true, true, 46, MyLang.Maptext[3]);
                                    }
                                    VTBTimerPool.Draw();
                                }
                            }
                            else
                            {
                                int iNumber = iMissionVar_02 + 1;
                                ttTextBar_01.Text = "" + iNumber + "/" + iMissionVar_03 + "";
                                VTBTimerPool.Draw();
                            }
                        }
                        else if (iMissionSeq == 3)
                        {
                            if (iWait4Sec < Game.GameTime)
                            {
                                if (BeOnOff[3])
                                {
                                    NPCSpawn("a_c_hen", vTarget_01, 0.00f, false, 150, 0, 0, null, 0, false, 0, 0, "");

                                    PedList_01[0].Delete();
                                    PedList_01.RemoveAt(0);
                                }
                                else
                                {
                                    if (bOnCayoLand)
                                        sMissionVar_01 = sList_01[iMissionVar_02];

                                    BuildProp(sMissionVar_01, vTarget_01, Vector3.Zero, false, false);
                                }
                                VehBlip(VehTrackin_01, true, true, 66, MyLang.Maptext[3]);
                                if (iMissionVar_02 > 0)
                                {
                                    iMissionSeq = 2;
                                    iTime_01[1] += 25000;
                                    BeOnOff[4] = false;
                                    iMissionVar_02 -= 1;
                                    vTarget_01 = VectorList_01[iMissionVar_02];
                                    vTarget_01.Z = vTarget_01.Z - 1.00f;
                                }
                                else
                                {
                                    iTime_01[1] += 45000;
                                    BeOnOff[1] = true;
                                    iMissionSeq = 4;
                                }

                                if (iLocationX == 6)
                                    iMishText = 11;
                                else
                                    iMishText = 12;
                            }
                            else
                            {
                                ttTextBar_01.Text = "" + iMissionVar_02 + "/" + iMissionVar_03 + "";

                                int iTotal = iTime_01[2];
                                FindTheTime(iTotal, 9, "", true);
                            }
                        }
                        else if (iMissionSeq == 4)
                        {
                            if (VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else if (World.GetDistance(vTarget_05, VehTrackin_01.Position) < fCorSize)
                            {
                                GetOutofVeh(Game.Player.Character, 2);
                                VehTrackin_01.LockStatus = VehicleLockStatus.Locked;
                                RemoveTargets();
                                iMishText = -1;
                                iMissionSeq = 5;
                            }
                            else if (BeOnOff[1] && World.GetDistance(vTarget_05, Game.Player.Character.Position) < 60.00f)
                            {
                                MoveThatCar(vTarget_05);
                                BeOnOff[1] = false;
                            }
                            else if (BeOnOff[2])
                            {
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[2] = false;
                                    VehTrackin_01.CurrentBlip.Remove();
                                    AddTarget(vTarget_05, true, true, 1.00f, false, 474, MyLang.Maptext[43]);
                                    TheYellowCorona(vTarget_05, fCorSize);
                                    iMishText = 14;
                                }
                            }
                            else
                            {
                                if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    RemoveTargets();
                                    BeOnOff[2] = true;
                                    if (iLocationX == 6)
                                        iMishText = 11;
                                    else
                                        iMishText = 12;
                                    VehBlip(VehTrackin_01, true, true, 66, MyLang.Maptext[3]);
                                }
                            }

                            if (iTime_01[1] > Game.GameTime)
                            {
                                ttTextBar_01.Text = "" + iMissionVar_02 + "/" + iMissionVar_03 + "";

                                int iTotal = iTime_01[1] - Game.GameTime;
                                FindTheTime(iTotal, 9, "", true);
                            }
                            else
                            {
                                FindTheTime(0, 9, "", true);
                            }
                        }
                        else if (iMissionSeq == 5)
                        {
                            int iBounus = 0;
                            if (iTime_01[1] > Game.GameTime)
                            {
                                iBounus = RandInt(1000, 1100) * iMissionVar_03;
                                World.AddExplosion(vTarget_05, ExplosionType.FireWork, 1.00f, 1.00f, true, false);
                            }
                                    
                            iCashReward = iMissionVar_03 * iParcelCost + iBounus;

                            if (!bTestRun)
                            {
                                int iHigh = 2;
                                int iLow = 1;
                                bool blose = false;
                                if (iBounus > 0)
                                {
                                    iHigh = 5;
                                    iLow = 3;
                                    blose = true;
                                }
                                if (bOnCayoLand)
                                    NSCoinInvestments(true, iLow, iHigh, "Madrass Inc");
                                else if (iLocationX == 1)
                                    NSCoinInvestments(true, iLow, iHigh, "Post OP Shares");
                                else if (iLocationX == 2)
                                    NSCoinInvestments(true, iLow, iHigh, "GoPostal Shares");
                                else if (iLocationX == 3)
                                    NSCoinInvestments(true, iLow, iHigh, "Pop's Pills Shares");
                                else if (iLocationX == 4)
                                    NSCoinInvestments(blose, iLow, iHigh, "Dollar Pills Shares");
                                else if (iLocationX == 5)
                                    NSCoinInvestments(true, iLow, iHigh, "Sunset Bleach Shares");
                                else
                                    NSCoinInvestments(true, iLow, iHigh, "Weazel Shares");
                            }
                            iMissionVar_02 = iMissionVar_03 - iMissionVar_02;
                            GameOver(false, "" + MyLang.Mistext[191] + "" + iMissionVar_02 + "/" + iMissionVar_03 + ", ", false, iCashReward);
                        }
                        else if (iMissionSeq == 45)
                        {
                            if (!bTestRun)
                            {
                                if (iLocationX == 1)
                                    NSCoinInvestments(false, 4, 6, "Post OP Shares");
                                else if (iLocationX == 2)
                                    NSCoinInvestments(false, 5, 7, "GoPostal Shares");
                                else if (iLocationX == 3)
                                    NSCoinInvestments(false, 3, 8, "Pop's Pills Shares");
                                else if (iLocationX == 4)
                                    NSCoinInvestments(true, 7, 12, "Dollar Pills Shares");
                                else if (iLocationX == 5)
                                    NSCoinInvestments(false, 5, 7, "Sunset Bleach Shares");
                                else
                                    NSCoinInvestments(false, 3, 5, "Weazel Shares");
                            }
                            GameOver(true, "", false, 0);
                        }
                    }        //Packages
                    else if (iJobType == 4)
                    {
                        if (BeOnOff[0])
                        {
                            Game.Player.WantedLevel = 0;
                            Function.Call(Hash.SET_DISPATCH_COPS_FOR_PLAYER, Game.Player.Character, false);
                            Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "re_prison");
                            Function.Call(Hash.STOP_ALARM, "PRISON_ALARMS", 0);
                            Function.Call(Hash.CLEAR_AMBIENT_ZONE_STATE, "AZ_COUNTRYSIDE_PRISON_01_ANNOUNCER_GENERAL", 0);
                            Function.Call(Hash.CLEAR_AMBIENT_ZONE_STATE, "AZ_COUNTRYSIDE_PRISON_01_ANNOUNCER_WARNING", 0);

                            CopKillerz();
                        }

                        if (iMissionSeq == 0)
                        {
                            iMissionSeq = 1;
                            StayInVehicle(Game.Player.Character, true);

                            if (MySettings.FastTraveltoStart)
                                WarptoAnyVeh(VehTrackin_01, Game.Player.Character, 1);

                            iMishText = 51;
                        }
                        else if (iMissionSeq == 1)
                        {
                            if (bNotPause)
                            {
                                Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                bNotPause = false;
                            }
                            else if (VehTrackin_01.IsDead || Game.Player.WantedLevel > 0)
                                iMissionSeq = 45;
                            else
                            {
                                if (Target_01 == null)
                                {
                                    if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    {
                                        VehTrackin_01.CurrentBlip.Remove();
                                        AddTarget(vTarget_01, true, true, 1.00f, false, 188, MyLang.Maptext[44]);
                                        vLanLoc = vTarget_01;
                                        iMishText = 16;
                                    }
                                    else if (Game.Player.Character.Position.DistanceTo(VehTrackin_01.Position) < 55.00f)
                                    {
                                        if (!VehTrackin_01.IsOnAllWheels && BeOff[0])
                                        {
                                            VehTrackin_01.Position = vGetaway;
                                            VehTrackin_01.Rotation = new Vector3(0.00f, 0.00f, fGetDir);
                                            BeOff[0] = false;
                                        }
                                        vLanLoc = Vector3.Zero;
                                        iMishText = 15;
                                    }
                                    else
                                    {
                                        vLanLoc = Vector3.Zero;
                                        iMishText = 51;
                                    }
                                }
                                else
                                {
                                    if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    {
                                        RemoveTargets();
                                        VehBlip(VehTrackin_01, true, true, 66, MyLang.Maptext[4]);
                                        vLanLoc = Vector3.Zero;
                                        iMishText = 15;
                                    }
                                    else if (World.GetDistance(vTarget_01, Game.Player.Character.Position) < 90.0f)
                                    {
                                        iMissionSeq = 2;
                                        Convicts_DumpCons();
                                        RemoveTargets();
                                    }
                                }
                            }
                        }
                        else if (iMissionSeq == 2)
                        {
                            iMissionSeq = 3;
                            VehBlip(VehTrackin_01, false, true, 66, MyLang.Maptext[4]);
                            vTarget_02 = new Vector3(1848.24f, 2608.52f, 44.59f);
                            vTarget_03 = new Vector3(1823.44f, 2607.87f, 44.58f);
                            vTarget_04 = new Vector3(1690.85f, 2601.41f, 44.56f);
                            vTarget_05 = new Vector3(1846.57f, 2585.8f, 44.67f);//267.83
                            vLanLoc = vTarget_01;
                            iMishText = 16;
                        }
                        else if (iMissionSeq == 3)
                        {
                            if (VehTrackin_01.IsDead || Game.Player.WantedLevel > 0)
                                iMissionSeq = 45;
                            else
                            {
                                if (BeOnOff[1])
                                {
                                    if (World.GetDistance(Npc_01.Position, Game.Player.Character.Position) > 40.0f)
                                    {
                                        BeOnOff[1] = false;
                                        Hare.Stop();
                                    }
                                }
                                else
                                {
                                    if (World.GetDistance(Npc_01.Position, Game.Player.Character.Position) < 30.0f)
                                    {
                                        BeOnOff[1] = true;
                                        Hare.PlayLooping();
                                    }
                                }

                                if (VehTrackin_01.CurrentBlip.Exists())
                                {
                                    if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    {
                                        VehTrackin_01.CurrentBlip.Remove();
                                        vLanLoc = vTarget_01;
                                        iMishText = 16;
                                    }
                                }
                                else
                                {
                                    if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    {
                                        RemoveTargets();
                                        VehBlip(VehTrackin_01, true, true, 66, MyLang.Maptext[4]);
                                        vLanLoc = Vector3.Zero;
                                        iMishText = 15;
                                    }
                                    else if (Game.IsControlJustPressed(2, GTA.Control.VehicleHorn))
                                    {
                                        iMissionSeq = 4;
                                        iTime_01[0] = Game.GameTime;
                                        BeOnOff[1] = false;
                                        Hare.Stop();
                                        Convicts_KrishaToBus();
                                        vLanLoc = Vector3.Zero;
                                        iMishText = 17;
                                    }
                                    else
                                    {
                                        ControlerUI(MyLang.Context[15], 1);
                                    }
                                }
                            }
                            Convicts_WalkLoop();
                        }
                        else if (iMissionSeq == 4)
                        {
                            if (VehTrackin_01.IsDead || !Game.Player.Character.IsInVehicle() || Game.Player.WantedLevel > 0)
                            {
                                Game.FadeScreenIn(100);
                                iMissionSeq = 45;
                            }
                        }
                        else if (iMissionSeq == 5)
                        {
                            if (BeOnOff[1])
                            {
                                if (Game.IsControlJustPressed(0, GTA.Control.VehicleHorn))
                                {
                                    BeOnOff[1] = false;
                                    Hare.Stop();
                                    iWait4Sec = Game.GameTime + 8000;
                                }
                            }
                            else
                            {
                                if (iWait4Sec < Game.GameTime)
                                {
                                    BeOnOff[1] = true;
                                    Hare.PlayLooping();
                                }
                            }

                            if (VehTrackin_01.IsDead || !Game.Player.Character.IsInVehicle(VehTrackin_01))
                                iMissionSeq = 45;
                            else if (Target_01 == null)
                            {
                                VehTrackin_01.CurrentBlip.Remove();
                                AddTarget(vTarget_01, true, true, 1.00f, false, 526, MyLang.Maptext[35]);
                            }
                            else if (World.GetDistance(vTarget_02, VehTrackin_01.Position) < 3.0f)
                            {
                                iMissionSeq = 6;
                                StopHere(VehTrackin_01);
                                RemoveTargets();

                                if (BeOnOff[1])
                                {
                                    BeOnOff[1] = false;
                                    Hare.Stop();
                                }

                                Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "restrictedareas");
                                BeOnOff[0] = true;
                            }
                        }
                        else if (iMissionSeq == 6)
                        {
                            iMissionSeq = 7;
                            GateIsNear(vTarget_02, 20.0f, true);
                            AddTarget(vTarget_03, true, true, 1.00f, false, 526, MyLang.Maptext[35]);
                            TheYellowCorona(vTarget_03, 5.00f);
                            iWait4Sec = Game.GameTime + 12000;
                        }
                        else if (iMissionSeq == 7)
                        {
                            if (Function.Call<bool>(Hash.IS_DOOR_CLOSED, Prop_01.GetHashCode()))
                                Function.Call(Hash._DOOR_CONTROL, Function.Call<int>(Hash.GET_HASH_KEY, "prop_gate_prison_01"), Prop_01.Position.X, Prop_01.Position.Y, Prop_01.Position.Z, false, 0.0f, 50.0f, 0.0f);

                            if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                iMissionSeq = 45;
                            else if (World.GetDistance(vTarget_03, VehTrackin_01.Position) < 3.0f)
                            {
                                StopHere(VehTrackin_01);
                                iMissionSeq = 8;
                                RemoveTargets();
                            }
                        }
                        else if (iMissionSeq == 8)
                        {
                            iMissionSeq = 9;
                            GateIsNear(vTarget_03, 20.0f, true);
                            AddTarget(vTarget_04, true, true, 1.00f, false, 526, MyLang.Maptext[35]);
                            TheYellowCorona(vTarget_04, 5.00f);
                            iWait4Sec = Game.GameTime + 12000;
                        }
                        else if (iMissionSeq == 9)
                        {
                            if (Function.Call<bool>(Hash.IS_DOOR_CLOSED, Prop_01.GetHashCode()))
                                Function.Call(Hash._DOOR_CONTROL, Function.Call<int>(Hash.GET_HASH_KEY, "prop_gate_prison_01"), Prop_01.Position.X, Prop_01.Position.Y, Prop_01.Position.Z, false, 0.0f, 50.0f, 0.0f);

                            if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                iMissionSeq = 45;
                            else if (World.GetDistance(vTarget_04, Game.Player.Character.Position) < 3.0f)
                            {
                                StopHere(VehTrackin_01);
                                iMissionSeq = 10;
                                RemoveTargets();
                            }
                        }
                        else if (iMissionSeq == 10)
                        {
                            SlowFastTravel(vTarget_05, 267.83f);
                            iCashReward = (iTime_01[0] - Game.GameTime) / 100 * -1;
                            if (iCashReward > 10000)
                                iCashReward = RandInt(9950, 9999);

                            iWantedBribe += 1;
                            WriteNSMDat(12, iWantedBribe);
                            Game.Player.IgnoredByPolice = false;
                            Function.Call(Hash.SET_DISPATCH_COPS_FOR_PLAYER, Game.Player.Character, true);
                            Function.Call(Has﻿h.REQUEST_SCRIPT, "restrictedareas");
                            Script.Wait(100);
                            if (Function.Ca﻿ll<bool>(Hash.HAS_SCRIPT_LOADED, "restrictedareas"))
                            {
                                Function.Call﻿(Hash.START_NEW_SCRIPT﻿, "restrictedareas", 1424);
                                Fun﻿ction.Call(Hash.SET_SCRIPT_AS_NO_LONGER_NEEDED, "restrictedareas");
                            }

                            GameOver(false, "", false, iCashReward);
                        }
                        else if (iMissionSeq == 25)
                        {
                            iMissionSeq = 99;
                            bGOURANGA = true;
                            iCashReward = (iTime_01[0] - Game.GameTime) / 10 * -1;
                            if (iCashReward > 5000)
                                iCashReward = RandInt(4950, 4999);
                            GameOver(false, "", true, iCashReward);
                        }
                        else if (iMissionSeq == 45)
                        {
                            if (BeOnOff[1])
                                Hare.Stop();

                            if (BeOnOff[0])
                            {
                                BeOff[2] = false;
                                SlowFastTravel(vTarget_05, 267.83f);
                                Game.Player.WantedLevel = 0;
                                Game.Player.IgnoredByPolice = false;
                                Function.Call(Hash.SET_DISPATCH_COPS_FOR_PLAYER, Game.Player.Character, true);
                                ZancudaClosed();
                                Script.Wait(100);
                            }
                            GameOver(true, "", false, 0);
                        }
                    }        //Convicts
                    else if (iJobType == 5)
                    {
                        if (iMissionSeq == 0)
                        {

                            iMissionSeq = 1;
                            iList_01[0] = 0;
                            iList_01[1] = 0;
                            StayInVehicle(Game.Player.Character, true);
                            if (!VehicleList_01.Contains(VehTrackin_01))
                                VehicleList_01.Add(new Vehicle(VehTrackin_01.Handle));
                            BeOnOff[0] = true;
                            if (bTestRun)
                            {
                                if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    WarptoAnyVeh(VehTrackin_01, Game.Player.Character, 1);
                            }
                        }
                        else if (iMissionSeq == 1)
                        {
                            if (VehicleList_01.Count > 0)
                            {
                                iMissionSeq = 2;
                                BeOnOff[1] = true;
                                iMishText = 18;
                                if (!bTestRun)
                                    Fubar_AngreyTaxi();
                            }
                            else
                                iMissionSeq = 45;
                        }
                        else if (iMissionSeq == 2)
                        {
                            if (bNotPause)
                            {
                                Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                bNotPause = false;
                            }
                            else if (BeOnOff[2])
                            {
                                if (MultiPed.Count == 0)
                                {
                                    iAngerTax = 0;
                                    BeOnOff[2] = false;
                                }
                                else if (iTracking < Game.GameTime)
                                    MultiPedTracker();
                            }

                            if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable)
                                iMissionSeq = 45;
                            else if (BeOnOff[1] && World.GetDistance(vTarget_02, VehTrackin_01.Position) < 90.0f)
                            {
                                MoveThatCar(vTarget_02);
                                BeOnOff[1] = false;
                            }
                            else if (World.GetDistance(vTarget_02, VehTrackin_01.Position) < 4.0f)
                            {
                                vLanLoc = Vector3.Zero;
                                iMishText = 20;

                                if (Game.Player.IsPressingHorn)
                                {
                                    iMishText = -1;
                                    vLanLoc = Vector3.Zero;
                                    iMissionSeq = 3;
                                    RemoveTargets();
                                    Game.Player.WantedLevel = 0;
                                    BeOnOff[2] = false;
                                    CleanMultiPed(false, false);
                                    iWait4Sec = Game.GameTime + RandInt(1000, 4000);
                                }
                                else
                                {
                                    ControlerUI(MyLang.Context[16], 1);
                                }
                            }
                            else
                            {
                                if (BeOnOff[0])
                                {
                                    if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    {
                                        BeOnOff[0] = false;
                                        VehTrackin_01.CurrentBlip.Remove();
                                        TheYellowCorona(vTarget_02, 5.00f);
                                        AddTarget(vTarget_02, true, true, 1.00f, false, 480, MyLang.Maptext[45]);
                                        vLanLoc = vTarget_02;
                                        iMishText = 19;
                                    }
                                }
                                else
                                {
                                    if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    {
                                        BeOnOff[0] = true;
                                        RemoveTargets();
                                        VehBlip(VehTrackin_01, false, true, 66, MyLang.Maptext[16]);
                                        vLanLoc = Vector3.Zero;
                                        iMishText = 18;
                                    }
                                }
                            }
                        }
                        else if (iMissionSeq == 3)
                        {
                            if (iWait4Sec < Game.GameTime)
                            {
                                Fubar_CarShare();

                                iMissionSeq = 4;
                            }
                        }
                        else if (iMissionSeq == 4)
                        {
                            if (iList_01[3] == 1)
                            {
                                if (Npc_01 != null)
                                    iMissionSeq = 5;
                            }
                            else if (iList_01[3] == 2)
                            {
                                if (Npc_02 != null)
                                    iMissionSeq = 5;
                            }
                            else
                            {
                                if (Npc_03 != null)
                                    iMissionSeq = 5;
                            }
                        }
                        else if (iMissionSeq == 5)
                        {
                            if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable || Game.Player.IsAiming || Game.Player.WantedLevel > 0)
                                iMissionSeq = 45;
                            else if (iList_01[3] == 1)
                            {
                                if (Npc_01.IsDead)
                                    iMissionSeq = 45;
                                else if (Npc_01.IsInVehicle())
                                {
                                    vLanLoc = vTarget_03;
                                    iMishText = 22;
                                    iMissionSeq = 6;
                                    Npc_01.CurrentBlip.Remove();
                                    BeOnOff[1] = true;
                                    TheYellowCorona(vTarget_03, 5.00f);
                                    AddTarget(vTarget_03, true, true, 1.00f, false, 164, MyLang.Maptext[46]);
                                }
                                else if (Function.Call<bool>(Hash.IS_HORN_ACTIVE, VehTrackin_01) && iWait4Sec < Game.GameTime)
                                {
                                    iWait4Sec = Game.GameTime + 2000;
                                    iList_01[4] += 1;
                                    if (!Npc_01.IsInVehicle())
                                    {
                                        if (iList_01[4] < 3)
                                            EnterPlayerVeh(Npc_01, 1, 2.00f);
                                        else
                                            WarptoPlayerVeh(Npc_01, 1);
                                    }
                                }
                            }
                            else if (iList_01[3] == 2)
                            {
                                if (Npc_01.IsDead || Npc_02.IsDead)
                                    iMissionSeq = 43;
                                else if (Npc_01.IsInVehicle() && Npc_02.IsInVehicle())
                                {
                                    vLanLoc = vTarget_03;
                                    iMishText = 21;
                                    iMissionSeq = 6;
                                    Npc_01.CurrentBlip.Remove();
                                    Npc_02.CurrentBlip.Remove();
                                    BeOnOff[1] = true;
                                    TheYellowCorona(vTarget_03, 5.00f);
                                    AddTarget(vTarget_03, true, true, 1.00f, false, 164, MyLang.Maptext[46]);
                                }
                                else if (Function.Call<bool>(Hash.IS_HORN_ACTIVE, VehTrackin_01) && iWait4Sec < Game.GameTime)
                                {
                                    iWait4Sec = Game.GameTime + 2000;
                                    iList_01[4] += 1;
                                    if (!Npc_01.IsInVehicle())
                                    {
                                        if (iList_01[4] < 3)
                                            EnterPlayerVeh(Npc_01, 1, 2.00f);
                                        else
                                            WarptoPlayerVeh(Npc_01, 1);
                                    }
                                    else if (!Npc_02.IsInVehicle())
                                    {
                                        if (iList_01[4] < 3)
                                            EnterPlayerVeh(Npc_02, 2, 2.00f);
                                        else
                                            WarptoPlayerVeh(Npc_02, 2);
                                    }
                                }
                            }
                            else
                            {
                                if (Npc_01.IsDead || Npc_02.IsDead || Npc_03.IsDead)
                                    iMissionSeq = 43;
                                else if (Npc_01.IsInVehicle() && Npc_02.IsInVehicle() && Npc_03.IsInVehicle())
                                {
                                    vLanLoc = vTarget_03;
                                    iMishText = 21;
                                    iMissionSeq = 6;
                                    Npc_01.CurrentBlip.Remove();
                                    Npc_02.CurrentBlip.Remove();
                                    Npc_03.CurrentBlip.Remove();
                                    BeOnOff[1] = true;
                                    TheYellowCorona(vTarget_03, 5.00f);
                                    AddTarget(vTarget_03, true, true, 1.00f, false, 164, MyLang.Maptext[46]);
                                }
                                else if (Function.Call<bool>(Hash.IS_HORN_ACTIVE, VehTrackin_01) && iWait4Sec < Game.GameTime)
                                {
                                    iWait4Sec = Game.GameTime + 2000;
                                    iList_01[4] += 1;
                                    if (!Npc_01.IsInVehicle())
                                    {
                                        if (iList_01[4] < 3)
                                            EnterPlayerVeh(Npc_01, 1, 2.00f);
                                        else
                                            WarptoPlayerVeh(Npc_01, 1);
                                    }
                                    else if (!Npc_02.IsInVehicle())
                                    {
                                        if (iList_01[4] < 3)
                                            EnterPlayerVeh(Npc_02, 2, 2.00f);
                                        else
                                            WarptoPlayerVeh(Npc_02, 2);
                                    }
                                    else if (!Npc_03.IsInVehicle())
                                    {
                                        if (iList_01[4] < 3)
                                            EnterPlayerVeh(Npc_03, 3, 2.00f);
                                        else
                                            WarptoPlayerVeh(Npc_03, 3);
                                    }
                                }
                            }

                            if (iFuClock < Game.GameTime)
                                Fubar_Math(true);
                            VTBTimerPool.Draw();
                        }
                        else if (iMissionSeq == 6)
                        {
                            if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable || !Game.Player.Character.IsInVehicle() || Game.Player.IsAiming && Game.Player.Character.Weapons.Current.Hash != WeaponHash.Unarmed || Game.Player.WantedLevel > 0)
                                iMissionSeq = 45;
                            else if (BeOnOff[1])
                            {
                                if (World.GetDistance(vTarget_03, VehTrackin_01.Position) < 90.0f)
                                {
                                    MoveThatCar(vTarget_03);
                                    BeOnOff[1] = false;
                                }
                            }
                            else if (World.GetDistance(vTarget_03, VehTrackin_01.Position) < 4.00f)
                            {
                                if (VehTrackin_01.IsStopped)
                                {
                                    iWait4Sec = Game.GameTime + 1000;
                                    iMishText = -1;
                                    vLanLoc = Vector3.Zero;
                                    iMissionSeq = 7;
                                    RemoveTargets();
                                }
                            }
                            else
                            {
                                if (BeOnOff[3])
                                {
                                    if (iWait4Sec < Game.GameTime)
                                    {
                                        BeOnOff[3] = false;
                                        int iStation = RandInt(0, 20);
                                        if (iStation == 17)
                                            iStation = 255;
                                        Function.Call(Hash.SET_RADIO_TO_STATION_INDEX, iStation);
                                    }
                                }
                                else
                                {
                                    if (!VehTrackin_01.IsSeatFree(VehicleSeat.RightFront))
                                    {
                                        BeOnOff[3] = true;
                                        iWait4Sec = Game.GameTime + RandInt(8000, 25000);
                                    }
                                }
                            }

                            if (iFuClock < Game.GameTime)
                                Fubar_Math(true);
                            VTBTimerPool.Draw();
                        }
                        else if (iMissionSeq == 7)
                        {
                            if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable)
                                iMissionSeq = 45;
                            else if (Npc_01.IsInVehicle())
                            {
                                if (iWait4Sec < Game.GameTime)
                                {
                                    iWait4Sec = Game.GameTime + 4000;
                                    GetOutofVeh(Npc_01, 0);
                                    if (iList_01[3] == 2)
                                    {
                                        GetOutofVeh(Npc_02, 0);
                                    }
                                    else if (iList_01[3] == 3)
                                    {
                                        GetOutofVeh(Npc_02, 0);
                                        GetOutofVeh(Npc_03, 0);
                                    }
                                }
                            }
                            else
                            {
                                iMissionSeq = 8;
                                CleanUpPeds();
                            }
                            VTBTimerPool.Draw();
                        }
                        else if (iMissionSeq == 8)
                        {
                            if (bTestRun)
                            {
                                if (iTestKit < MyMissions.FubardXM.Count)
                                {
                                    iMissionSeq = 0;
                                    RemoveTargets();
                                    CleanUpPeds();
                                    bMoreFubar = true;
                                    bJobLoaded = false;
                                    FUber();
                                }
                                else
                                    iMissionSeq = 9;
                            }
                            else
                                ControlSelect(6,false);
                        }
                        else if (iMissionSeq == 9)
                        {
                            iCashReward = iCashBouns + (iRepMisssion * 10);
                            if (!bTestRun)
                            {
                                if (iRepMisssion < 25)
                                {
                                    if (iRepMisssion > 4)
                                        NSCoinInvestments(true, iRepMisssion - 2, iRepMisssion, "Fubar Inc");
                                    else
                                        NSCoinInvestments(true, 0, 1, "Fubar Inc");
                                }
                                else
                                    NSCoinInvestments(true, 27, 28, "Fubar Inc");
                            }

                            GameOver(false, "" + MyLang.Mistext[192] + "" + (iRepMisssion * 10) + ", ", false, iCashReward);
                        }
                        else if (iMissionSeq == 45)
                        {
                            if (!bTestRun)
                                NSCoinInvestments(false, 5, 7, "Fubar Shares");
                            FreeSeat(VehTrackin_01, 2, true);
                            FreeSeat(VehTrackin_01, 3, true);
                            FreeSeat(VehTrackin_01, 4, true);
                            GameOver(true, "", false, 0);
                        }
                    }        //Fubar
                    else if (iJobType == 6)
                    {
                        if (iLocationX == 1)
                        {
                            if (BeOnOff[0])
                            {
                                if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, "scr_carsteal4"))
                                {
                                    Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_carsteal4");
                                    Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_carsteal4_wheel_burnout", VehTrackin_01, -4.815f, 1.0f, 0.5f, 0, 0, 0, 0.75f - 0.2, 0, 1, 0);
                                    Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_COLOUR, fList_01[0], fList_01[1], fList_01[2]);
                                }
                                else
                                {
                                    Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_carsteal4");
                                }
                                if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, "scr_carsteal4"))
                                {
                                    Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_carsteal4");
                                    Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_carsteal4_wheel_burnout", VehTrackin_01, 4.815f, 1.0f, 0.5f, 0, 0, 0, 0.75f - 0.2, 0, 1, 0);
                                    Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_COLOUR, fList_01[0], fList_01[1], fList_01[2]);
                                }
                                else
                                {
                                    Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_carsteal4");
                                }
                            }
                            if (iMissionSeq == 0)
                            {
                                if (bNotPause)
                                {
                                    Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                    bNotPause = false;
                                }
                                else if (VehicleList_01.Count > 0)
                                {
                                    iMissionSeq = 1;
                                    iCashBouns = 0;
                                    iMissionVar_01 = VectorList_01.Count;
                                    if (MySettings.FastTraveltoStart)
                                        WarptoAnyVeh(VehTrackin_01, Game.Player.Character, 1);
                                    iMishText = 23;
                                }
                            }
                            else if (iMissionSeq == 1)
                            {
                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    iMissionSeq = 2;
                                    VehTrackin_01.CurrentBlip.Remove();
                                    Pilot01_ChecksNBalance(false);
                                    iMishText = 25;
                                }
                                else if (World.GetDistance(vTarget_01, Game.Player.Character.Position) < 55.00f)
                                {
                                    if (VehTrackin_01.FreezePosition)
                                        VehTrackin_01.FreezePosition = false;
                                    iMishText = 24;
                                }
                                else
                                    iMishText = 23;
                            }
                            else if (iMissionSeq == 2)
                            {
                                if (VehTrackin_01.IsDead || !Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    iMissionSeq = 45;
                                else if (World.GetDistance(vTarget_02, VehTrackin_01.Position) < 20.0f)
                                {
                                    iMissionSeq = 3;
                                    Pilot01_ChecksNBalance(false);
                                    BeOnOff[0] = true;
                                }
                            }
                            else if (iMissionSeq == 3)
                            {
                                if (VehTrackin_01.IsDead || !Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    iMissionSeq = 45;
                                else if (vTarget_02.DistanceTo(VehTrackin_01.Position) < 15.00f)
                                {
                                    iMishText = -1;
                                    iCashReward += 100;

                                    if (iList_01[1] == 37)
                                    {
                                        if (VehTrackin_01.Rotation.Y > -55.00f && VehTrackin_01.Rotation.Y < 55.00f)
                                        {
                                            iCashReward += 1000;
                                            iCashBouns += 1;
                                            Function.Call(Hash._START_SCREEN_EFFECT, "SuccessNeutral", 1500, false);
                                        }
                                    }
                                    else if (iList_01[1] == 38)
                                    {
                                        if (VehTrackin_01.Rotation.Y > -130.00f && VehTrackin_01.Rotation.Y < -60.00f)
                                        {
                                            iCashReward += 1000;
                                            iCashBouns += 1;
                                            Function.Call(Hash._START_SCREEN_EFFECT, "SuccessNeutral", 1500, false);
                                        }
                                    }
                                    else if (iList_01[1] == 40)
                                    {
                                        if (VehTrackin_01.Rotation.Y > 155.00f || VehTrackin_01.Rotation.Y < -155.00f)
                                        {
                                            iCashReward += 1000;
                                            iCashBouns += 1;
                                            Function.Call(Hash._START_SCREEN_EFFECT, "SuccessNeutral", 1500, false);
                                        }
                                    }

                                    if (iMissionVar_01 > 1)
                                        Pilot01_ChecksNBalance(false);
                                    else
                                    {
                                        iMissionSeq = 4;
                                        Pilot01_ChecksNBalance(true);
                                    }
                                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "CHECKPOINT_UNDER_THE_BRIDGE", "HUD_MINI_GAME_SOUNDSET", true);
                                }
                                if (iList_01[2] != 0)
                                {
                                    int iRaceT = iList_01[2] - Game.GameTime;
                                    iRaceT *= -1;
                                    FindTheTime(iRaceT, 2, "", true);
                                }
                                if (iTime_01[0] < Game.GameTime)
                                {
                                    iTime_01[0] = Game.GameTime + 10000;
                                    if (iList_01[0] == 1)
                                    {
                                        fList_01[0] = 255.00f;
                                        fList_01[1] = 0.00f;
                                        fList_01[2] = 0.00f;
                                    }
                                    else if (iList_01[0] == 2)
                                    {
                                        fList_01[0] = 255.00f;
                                        fList_01[1] = 255.00f;
                                        fList_01[2] = 255.00f;
                                    }
                                    else
                                    {
                                        fList_01[0] = 0.00f;
                                        fList_01[1] = 0.00f;
                                        fList_01[2] = 220.00f;
                                        iList_01[0] = 0;
                                    }
                                    iList_01[0] += 1;
                                }
                            }
                            else if (iMissionSeq == 4)
                            {
                                if (VehTrackin_01.IsDead || !Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    iMissionSeq = 45;
                                else if (World.GetDistance(vTarget_02, VehTrackin_01.Position) < 15.00f)
                                {
                                    iCashReward += 100;

                                    iMissionSeq = 5;
                                    CleanUpCheckPoints();
                                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "CHECKPOINT_UNDER_THE_BRIDGE", "HUD_MINI_GAME_SOUNDSET", true);
                                }

                                int iRaceT = iList_01[2] - Game.GameTime;
                                FindTheTime(iRaceT *= -1, 2, "", true);

                                if (iTime_01[0] < Game.GameTime)
                                {
                                    iTime_01[0] = Game.GameTime + 10000;
                                    if (iList_01[0] == 1)
                                    {
                                        fList_01[0] = 255.00f;
                                        fList_01[1] = 0.00f;
                                        fList_01[2] = 0.00f;
                                    }
                                    else if (iList_01[0] == 2)
                                    {
                                        fList_01[0] = 255.00f;
                                        fList_01[1] = 255.00f;
                                        fList_01[2] = 255.00f;
                                    }
                                    else
                                    {
                                        fList_01[0] = 0.00f;
                                        fList_01[1] = 0.00f;
                                        fList_01[2] = 220.00f;
                                        iList_01[0] = 0;
                                    }
                                    iList_01[0] += 1;
                                }
                            }
                            else if (iMissionSeq == 5)
                            {
                                iList_01[2] -= Game.GameTime;
                                iList_01[2] *= -1;
                                bSoloRace = true;
                                iPegsSafePlaneTest = iPegsSafePlane;
                                iGotPegsus = iProcessForPegs;
                                WriteNSMDat(1, iGotPegsus);
                                WriteNSMDat(4, iPegsSafePlaneTest);
                                NSCoinInvestments(true, 2, 2 + iCashBouns, "Red Nut Energy Drinks Shares");
                                FindTheTime(iList_01[2], 5, MyLang.Mistext[193], false); 
                            }
                            else if (iMissionSeq == 45)
                            {
                                NSCoinInvestments(false, 4, 7, "Red Nut Energy Drinks Shares");
                                GameOver(true, "", false, 0);
                            }
                        }            // red nut air race
                        else if (iLocationX == 2)
                        {
                            if (iMissionSeq == 0)
                            {
                                iMissionSeq = 1;
                                AddTarget(vTarget_01, true, true, 1.00f, false, -1, MyLang.Maptext[47]);
                                TheYellowCorona(vTarget_01, 1.00f);
                                StayInVehicle(Game.Player.Character, true);
                                if (MySettings.FastTraveltoStart)
                                    SlowFastTravel(vTarget_01, 0.00f);

                                iMishText = 26;
                            }
                            else if (iMissionSeq == 1)
                            {
                                if (bNotPause)
                                {
                                    Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                    bNotPause = false;
                                }

                                if (World.GetDistance(vTarget_01, Game.Player.Character.Position) < 2.0f)
                                {
                                    iMissionSeq = 2;
                                    RemoveTargets();
                                }
                            }
                            else if (iMissionSeq == 2)
                            {
                                if (VehicleList_01.Count > 0)
                                {
                                    VehTrackin_01.FreezePosition = false;
                                    VehBlip(VehTrackin_01, false, false, 66, MyLang.Maptext[5]);
                                    iMissionSeq = 3;

                                    iMishText = 27;
                                }
                            }
                            else if (iMissionSeq == 3)
                            {
                                if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable)
                                    iMissionSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    iMissionSeq = 4;
                                    VehTrackin_01.CurrentBlip.Remove();
                                    vTarget_02.Z -= 1.0f;
                                    TheYellowCorona(vTarget_02, 10.00f);
                                    AddTarget(vTarget_02, false, true, 1.00f, false, 280, MyLang.Maptext[48]);
                                    vLanLoc = vTarget_02;
                                    iMishText = 28;
                                }
                            }
                            else if (iMissionSeq == 4)
                            {
                                if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable)
                                    iMissionSeq = 45;
                                else if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    if (Target_01 != null)
                                    {
                                        RemoveTargets();
                                        VehBlip(VehTrackin_01, false, false, 66, MyLang.Maptext[5]);
                                        iMishText = 27;
                                    }
                                }
                                else if (World.GetDistance(vTarget_02, Game.Player.Character.Position) < 5.00f)
                                {
                                    if (!VehTrackin_01.IsInAir)
                                    {
                                        vLanLoc = Vector3.Zero;
                                        iMishText = -1;
                                        iMissionSeq = 5;
                                        Npc_01 = NPCSpawn("", vTarget_03, 0.00f, false, 160, 0, 0, null, 2, true, 18, 1, MyLang.Maptext[48]);
                                        RemoveTargets();
                                        StopHere(VehTrackin_01);
                                    }
                                }
                                else
                                {
                                    if (Target_01 == null)
                                    {
                                        VehTrackin_01.CurrentBlip.Remove();
                                        TheYellowCorona(vTarget_02, 10.00f);
                                        AddTarget(vTarget_02, false, true, 1.00f, false, 280, MyLang.Maptext[48]);
                                        iMishText = 28;
                                    }
                                } 

                            }
                            else if (iMissionSeq == 5)
                            {
                                if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable || !Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    iMissionSeq = 45;
                                else if (PedList_01.Count > 0)
                                {
                                    int iRanPsyco = RandInt(0, 100);
                                    if (iRanPsyco > 95)
                                    {
                                        iMissionSeq = 40;
                                        ArmsRegulator(Npc_01, 3);
                                        AttackThePlayer(Npc_01, true);
                                        iWait4Sec = Game.GameTime + 25000;

                                        iMishText = 30;
                                    }
                                    else
                                    {
                                        iMissionSeq = 6;
                                        EnterPlayerVeh(Npc_01, 3, 1.50f);
                                    }
                                    iWait4Sec = Game.GameTime + 12000;
                                }
                            }
                            else if (iMissionSeq == 6)
                            {
                                if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable || !Game.Player.Character.IsInVehicle(VehTrackin_01) || Npc_01.IsDead)
                                    iMissionSeq = 45;
                                else if (Npc_01.IsInHeli)
                                {
                                    iMissionSeq = 7;
                                    vTarget_04.Z -= 1.0f;
                                    TheYellowCorona(vTarget_04, 10.00f);
                                    AddTarget(vTarget_04, false, true, 1.00f, false, 475, MyLang.Maptext[49]);

                                    iMishText = 29;
                                }
                                else
                                {
                                    if (iWait4Sec < Game.GameTime)
                                        VehicleWarp(VehTrackin_01, Npc_01, 3);
                                }
                            }
                            else if (iMissionSeq == 7)
                            {
                                if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable || !Game.Player.Character.IsInVehicle(VehTrackin_01) || Npc_01.IsDead)
                                    iMissionSeq = 45;
                                else if (World.GetDistance(vTarget_04, Game.Player.Character.Position) < 5.0f)
                                {
                                    VehTrackin_01.EngineRunning = false;
                                    if (VehTrackin_01.IsInAir == false)
                                    {
                                        iMishText = -1;
                                        StopHere(VehTrackin_01);
                                        RemoveTargets();
                                        iMissionSeq = 8;
                                        GetOutofVeh(Npc_01, 0);
                                        WalkThisWay(Npc_01, vTarget_05, 1.00f);
                                    }
                                }
                            }
                            else if (iMissionSeq == 8)
                            {
                                if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable || Npc_01.IsDead)
                                    iMissionSeq = 45;
                                else if (World.GetDistance(vTarget_04, Game.Player.Character.Position) > 95.0f || World.GetDistance(vTarget_05, Npc_01.Position) < 2.0f)
                                {
                                    iCashReward = 5000;
                                    iPegsSafeHeliTest = iPegsSafeHeli;
                                    iGotPegsus = iProcessForPegs;
                                    WriteNSMDat(1, iGotPegsus);
                                    WriteNSMDat(2, iPegsSafeHeliTest);
                                    NSCoinInvestments(true, 2, 5, "SecuroServ Shares");
                                    GameOver(false, "", false, iCashReward);
                                }
                            }
                            else if (iMissionSeq == 40)
                            {
                                if (VehTrackin_01.IsDead || VehTrackin_01.IsDriveable == false)
                                    iMissionSeq = 45;
                                else if (iWait4Sec < Game.GameTime)
                                {
                                    iCashReward = 5000;

                                    iMishText = -1;
                                    iGotPegsus = iProcessForPegs;
                                    CleanUpPeds();
                                    CleanUpVehicles();
                                    GameOver(false, "", false, iCashReward);
                                }
                            }
                            else if (iMissionSeq == 45)
                            {
                                NSCoinInvestments(false, 2, 7, "SecuroServ Shares");
                                GameOver(true, "", false, 0);
                            }
                        }       // deliver ceo
                        else if (iLocationX == 3)
                        {
                            if (iMissionSeq == 0)
                            {
                                if (bNotPause)
                                {
                                    Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                    bNotPause = false;
                                }
                                else 
                                {
                                    iMissionSeq = 1;
                                    Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "restrictedareas");

                                    if (MySettings.FastTraveltoStart)
                                        WarptoAnyVeh(VehTrackin_01, Game.Player.Character, 1);

                                    iMishText = 31;
                                }
                            }
                            else if (iMissionSeq == 1)
                            {
                                if (World.GetDistance(VehTrackin_01.Position, Game.Player.Character.Position) < 55.00f)
                                {
                                    iMissionSeq = 2;
                                    VehTrackin_01.FreezePosition = false;
                                    iCashReward = 150000;
                                    float fVicDam = VehTrackin_01.BodyHealth + VehTrackin_01.EngineHealth + VehTrackin_01.PetrolTankHealth;
                                    iCrash4Cash = (int)fVicDam;

                                    iMishText = 32;
                                }
                                Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "re_armybase");
                            }
                            else if (iMissionSeq == 2)
                            {
                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    iMissionSeq = 3;
                                    VehTrackin_01.CurrentBlip.Remove();
                                    AddTarget(vTarget_03, false, true, 1.00f, false, -1, MyLang.Maptext[50]);

                                    iMishText = 33;
                                }
                                else if (World.GetDistance(VehTrackin_01.Position, Game.Player.Character.Position) < 55.00f)
                                    iMishText = 32;
                                else
                                    iMishText = 31;
                                Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "re_armybase");
                            }
                            else if (iMissionSeq == 3)
                            {
                                if (VehTrackin_01.IsDead || !Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    iMissionSeq = 45;
                                else if (World.GetDistance(vTarget_02, VehTrackin_01.Position) > 2100.00f)
                                {
                                    iMissionSeq = 4;
                                    iTime_01[0] = Game.GameTime + 150000;
                                    RemoveTargets();
                                    Game.Player.WantedLevel = 4;
                                    BeOnOff[0] = false;
                                    ZancudaClosed();
                                    AddDogFighters(5);

                                    iMishText = 34;
                                }
                                else
                                    Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "re_armybase");
                            }
                            else if (iMissionSeq == 4)
                            {
                                if (VehTrackin_01.IsDead || !Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    iMissionSeq = 45;
                                else if (iTime_01[0] > Game.GameTime)
                                {
                                    if (iWait4Sec < Game.GameTime)
                                        DogFighterTracking();
                                }
                                else
                                {
                                    TheYellowCorona(vTarget_04, 10.00f);
                                    Game.Player.WantedLevel = 2;
                                    CleanMultiPed(false, false);
                                    iMissionSeq = 5;

                                    iMishText = 7;
                                }

                                if (iCrash4Cash > 0)
                                    iCashReward = VehDamage(VehTrackin_01, iCrash4Cash, 150000, true, iCashReward, true);

                            }
                            else if (iMissionSeq == 5)
                            {
                                if (VehTrackin_01.IsDead || !Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    iMissionSeq = 45;
                                else if (Game.Player.WantedLevel < 1)
                                {
                                    iMissionSeq = 6;
                                    AddTarget(vTarget_04, false, true, 1.00f, false, 569, MyLang.Maptext[51]);

                                    iMishText = 36;
                                }
                                else if (iCrash4Cash > 0)
                                    iCashReward = VehDamage(VehTrackin_01, iCrash4Cash, 150000, true, iCashReward, true);

                            }
                            else if (iMissionSeq == 6)
                            {
                                if (VehTrackin_01.IsDead || !Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    iMissionSeq = 45;
                                if (World.GetDistance(vTarget_04, VehTrackin_01.Position) < 5.0f)
                                {
                                    StopHere(VehTrackin_01);
                                    iMissionSeq = 7;
                                    iMishText = -1;
                                    RemoveTargets();
                                    VehTrackin_01.Position = new Vector3(2134.79f, 4781.249f, 40.41209f);
                                    VehTrackin_01.Heading = 28.53162f;
                                    VehTrackin_01.LockStatus = VehicleLockStatus.Locked;
                                    Vector3 Vx = new Vector3(2159.819f, 4789.745f, 40.73829f);
                                    SlowFastTravel(Vx, 106.2993f);
                                }
                                else if (iCrash4Cash > 0)
                                    iCashReward = VehDamage(VehTrackin_01, iCrash4Cash, 150000, true, iCashReward, true);

                            }
                            else if (iMissionSeq == 7)
                            {
                                iPegsWarPlaneTest = iPegsWarPlane;
                                iGotPegsus = iProcessForPegs;
                                WriteNSMDat(1, iGotPegsus);
                                WriteNSMDat(5, iPegsWarPlaneTest);
                                NSCoinInvestments(false, 12, 24, "Warstock Shares");
                                GameOver(false, MyLang.Mistext[194] + iMissionVar_01 + ", ", false, iCashReward);
                            }
                            else if (iMissionSeq == 45)
                            {
                                if (BeOnOff[0])
                                {
                                    BeOnOff[0] = false;
                                    ZancudaClosed();
                                }
                                GameOver(true, "", false, 0);
                            }
                        }       // steal brrrrrrt
                        else if (iLocationX == 4)
                        {
                            if (iMissionSeq == 0)
                            {
                                iMissionSeq = 1;
                                TheYellowCorona(vTarget_01, 1.00f);
                                AddTarget(vTarget_01, true, true, 1.00f, false, -1, MyLang.Maptext[52]);

                                if (MySettings.FastTraveltoStart)
                                    SlowFastTravel(vTarget_01, 0.00f);

                                iMishText = 36;
                            }
                            else if (iMissionSeq == 1)
                            {
                                if (bNotPause)
                                {
                                    Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                    bNotPause = false;
                                }
                                else if (World.GetDistance(vTarget_01, Game.Player.Character.Position) < 2.0f)
                                {
                                    iMissionSeq = 2;
                                    RemoveTargets();
                                }
                            }
                            else if (iMissionSeq == 2)
                            {
                                iMissionSeq = 3;
                                AddTarget(vTarget_02, true, true, 1.00f, false, -1, MyLang.Maptext[52]);
                                TheYellowCorona(vTarget_02, 1.00f);
                            }
                            else if (iMissionSeq == 3)
                            {
                                if (World.GetDistance(vTarget_02, Game.Player.Character.Position) < 2.0f && VehicleList_01.Count > 0)
                                {
                                    iMissionSeq = 4;
                                    RemoveTargets();
                                    VehBlip(VehTrackin_01, false, false, 66, MyLang.Maptext[5]);
                                    VehTrackin_01.FreezePosition = false;
                                }
                            }
                            else if (iMissionSeq == 4)
                            {
                                if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable)
                                    iMissionSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    iMissionSeq = 5;
                                    VehTrackin_01.CurrentBlip.Remove();
                                }
                                else if (VehTrackin_01.Position.DistanceTo(Game.Player.Character.Position) < 15.00f)
                                    iMishText = 37;
                                else
                                    iMishText = 36;
                            }
                            else if (iMissionSeq == 5)
                            {
                                iMissionSeq = 6;
                                AddTarget(vTarget_04, false, true, 1.00f, false, 481, MyLang.Maptext[38]);
                                iMishText = 38;
                            }
                            else if (iMissionSeq == 6)
                            {
                                if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable)
                                    iMissionSeq = 45;
                                else if (World.GetDistance(vTarget_04, Game.Player.Character.Position) < 400.00f)
                                {
                                    iMissionSeq = 7;
                                    RemoveTargets();
                                    VehicleSpawn("Cargobob2", vTarget_04, 90.0f, false, false, true, true, 6, 0, 3, MyLang.Maptext[20], 2, false);
                                }
                            }
                            else if (iMissionSeq == 7)
                            {
                                if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable)
                                    iMissionSeq = 45;
                                else if (Npc_01 != null)
                                {
                                    if (Npc_01.IsInVehicle(VehTrackin_02))
                                    {
                                        iMissionSeq = 8;
                                        BeOnOff[0] = false;
                                        iMissionVar_01 = VectorList_01.Count;
                                        FlyAway(Npc_01, vTarget_04, 200.00f, 0.00f);
                                    }
                                }
                            }
                            else if (iMissionSeq == 8)
                            {
                                if (Game.Player.Character.Position.Z < VehTrackin_02.Position.Z)
                                    iMishText = 39;
                                else
                                    iMishText = 40;

                                if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable)
                                    iMissionSeq = 45;
                                else if (VehTrackin_02.IsDead || VehTrackin_03.IsDead)
                                {
                                    VehTrackin_02.Explode();
                                    VehTrackin_03.Explode();
                                    iCashReward = 500;
                                    iMishText = -1;
                                    iMissionSeq = 99;
                                    iPegsWarHeliTest = iPegsWarHeli;
                                    iGotPegsus = iProcessForPegs;
                                    WriteNSMDat(1, iGotPegsus);
                                    WriteNSMDat(3, iPegsWarHeliTest);
                                    GameOver(false, "", false, iCashReward);
                                }
                                else if (!VehTrackin_03.IsAttachedTo(VehTrackin_02))
                                    VehTrackin_03.AttachTo(VehTrackin_02, VehTrackin_03.Handle, new Vector3(0.00f, 0.00f, -3.00f), new Vector3(0.00f, -15.00f, 0.00f));
                                else if (World.GetDistance(vTarget_04, Npc_01.Position) < 30.00f)
                                {
                                    if (iMissionVar_01 < 1)
                                    {
                                        iMissionSeq = 44;
                                        VehTrackin_01.CurrentBlip.Remove();
                                    }
                                    else
                                    {
                                        iMissionVar_01 -= 1;
                                        vTarget_04 = VectorList_01[iMissionVar_01];
                                        FlyAway(Npc_01, vTarget_04, 200.00f, 0.00f);
                                    }
                                }
                                else if (BeOnOff[0])
                                {
                                    if (World.GetDistance(vTarget_05, Npc_01.Position) < 20.00f)
                                    {
                                        FlyAway(Npc_01, vTarget_04, 150.00f, 0.00f);
                                        BeOnOff[0] = false;
                                    }
                                }
                                else if (Npc_01.Position.Z < vTarget_04.Z - 50.0f && iMissionVar_01 > 2)
                                {
                                    BeOnOff[0] = true;
                                    vTarget_05 = Npc_01.Position;
                                    vTarget_05.Z = vTarget_05.Z + 150.00f;
                                    FlyAway(Npc_01, vTarget_05, 150.00f, 0.00f);
                                }
                            }
                            else if (iMissionSeq == 44)
                            {
                                iMishText = -1;
                                VehTrackin_02.Position = new Vector3(6000.01f, -2500.01f, 1500.01f);
                                VehTrackin_03.Position = new Vector3(6000.01f, -2500.01f, 1500.01f);
                                bPacBouns = true;
                                GameOver(true, "", true, 0);
                            }
                            else if (iMissionSeq == 45)
                            {
                                GameOver(true, "", false, 0);
                            }
                        }       // ceo imp/exp
                        else if (iLocationX == 5)
                        {
                            if (BeOnOff[0])
                            {
                                if (iTime_01[0] > Game.GameTime)
                                {
                                    int iPost = iTime_01[0] - Game.GameTime;
                                    iPost = iPost / 10;
                                    ttTextBar_01.Text = " " + iPost + "Lbs ";
                                }
                                else
                                {
                                    BeOnOff[0] = false;
                                    iMissionSeq = 45;
                                }

                                if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, "scr_carsteal4"))
                                {
                                    Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_carsteal4");
                                    Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_carsteal4_wheel_burnout", VehTrackin_01, -3.94f, -0.8f, -0.55f, 0, 0, 0, 0.30f, 0, 1, 0);
                                    Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_COLOUR, 220.0f, 220.0f, 220.0f);
                                }
                                else
                                    Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_carsteal4");

                                if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, "scr_carsteal4"))
                                {
                                    Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_carsteal4");
                                    Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_carsteal4_wheel_burnout", VehTrackin_01, 3.94f, -0.8f, -0.55f, 0, 0, 0, 0.30f, 0, 1, 0);
                                    Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_COLOUR, 220.0f, 220.0f, 220.0f);
                                }
                                else
                                    Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_carsteal4");
                                if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, "scr_carsteal4"))
                                {
                                    Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_carsteal4");
                                    Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_carsteal4_wheel_burnout", VehTrackin_01, -2.815f, -0.8f, -0.6f, 0, 0, 0, 0.30f, 0, 1, 0);
                                    Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_COLOUR, 220.0f, 220.0f, 220.0f);
                                }
                                else
                                    Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_carsteal4");
                                if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, "scr_carsteal4"))
                                {
                                    Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_carsteal4");
                                    Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_carsteal4_wheel_burnout", VehTrackin_01, 2.815f, -0.8f, -0.6f, 0, 0, 0, 0.30f, 0, 1, 0);
                                    Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_COLOUR, 220.0f, 220.0f, 220.0f);
                                }
                                else
                                    Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_carsteal4");
                                if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, "scr_carsteal4"))
                                {
                                    Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_carsteal4");
                                    Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_carsteal4_wheel_burnout", VehTrackin_01, -1.687f, -0.8f, -0.65f, 0, 0, 0, 0.30f, 0, 1, 0);
                                    Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_COLOUR, 220.0f, 220.0f, 220.0f);
                                }
                                else
                                    Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_carsteal4");
                                if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, "scr_carsteal4"))
                                {
                                    Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_carsteal4");
                                    Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_carsteal4_wheel_burnout", VehTrackin_01, 1.687f, -0.8f, -0.65f, 0, 0, 0, 0.30f, 0, 1, 0);
                                    Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_COLOUR, 220.0f, 220.0f, 220.0f);
                                }
                                else
                                    Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_carsteal4");
                                if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, "scr_carsteal4"))
                                {
                                    Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_carsteal4");
                                    Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_carsteal4_wheel_burnout", VehTrackin_01, -0.562f, -0.8f, -0.7f, 0, 0, 0, 0.30f, 0, 1, 0);
                                    Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_COLOUR, 220.0f, 220.0f, 220.0f);
                                }
                                else
                                    Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_carsteal4");
                                if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, "scr_carsteal4"))
                                {
                                    Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_carsteal4");
                                    Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_carsteal4_wheel_burnout", VehTrackin_01, 0.562f, -0.8f, -0.7f, 0, 0, 0, 0.30f, 0, 1, 0);
                                    Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_COLOUR, 220.0f, 220.0f, 220.0f);
                                }
                                else
                                    Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_carsteal4");
                            }
                            if (iMissionSeq == 0)
                            {
                                if (VehicleList_01.Count > 0)
                                {
                                    iMissionSeq = 1;

                                    if (MySettings.FastTraveltoStart)
                                        WarptoAnyVeh(VehTrackin_01, Game.Player.Character, 1);
                                    iMishText = 41;
                                }
                            }
                            else if (iMissionSeq == 1)
                            {
                                if (bNotPause)
                                {
                                    Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                    bNotPause = false;
                                }
                                else if (World.GetDistance(vTarget_01, Game.Player.Character.Position) < 55.0f)
                                {
                                    VehTrackin_01.FreezePosition = false;
                                    int iPos = iTime_01[0] / 10;
                                    ttTextBar_01.Text = " " + iPos + " Lbs ";
                                    BeOnOff[2] = true;
                                    iMissionSeq = 2;
                                    iMishText = 42;
                                }
                            }
                            else if (iMissionSeq == 2)
                            {
                                if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable)
                                    iMissionSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    iMissionSeq = 3;
                                    BeOnOff[1] = true;
                                    VehTrackin_01.CurrentBlip.Remove();
                                    AddTarget(vTarget_02, true, true, 1.00f, false, -1, MyLang.Maptext[36]);
                                    iMissionVar_01 = VectorList_01.Count;
                                    iMishText = 43;
                                }
                                else if (World.GetDistance(vTarget_01, Game.Player.Character.Position) < 55.0f)
                                    iMishText = 42;
                                else
                                    iMishText = 41;
                            }
                            else if (iMissionSeq == 3)
                            {
                                Vector3 VplayFace = new Vector3(0.0f, 0.0f, Game.Player.Character.Heading);
                                World.DrawMarker(MarkerType.VerticleCircle, vTarget_02, Vector3.Zero, VplayFace, new Vector3(20.0f, 20.0f, 20.0f), color: Color.Yellow);
                                if (VehTrackin_01.IsDead || !Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    iMissionSeq = 45;
                                else if (World.GetDistance(vTarget_02, VehTrackin_01.Position) < 15.0f)
                                {
                                    iMissionSeq = 4;
                                    iMissionVar_01 = iMissionVar_01 - 1;
                                    RemoveTargets();
                                    vTarget_02 = VectorList_01[iMissionVar_01];
                                    AddTarget(vTarget_02, false, true, 1.00f, false, -1, MyLang.Maptext[36]);
                                    int mark2 = iMissionVar_01 - 1;
                                    vTarget_05 = VectorList_01[mark2];
                                    AddTarget(vTarget_05, false, false, 1.00f, false, -1, MyLang.Maptext[36]);

                                    BeOnOff[1] = false;
                                    BeOnOff[0] = false;

                                    iMishText = 44;
                                }
                                VTBTimerPool.Draw();
                            }
                            else if (iMissionSeq == 4)
                            {
                                VTBTimerPool.Draw();
                                Vector3 VplayFace = new Vector3(0.0f, 0.0f, Game.Player.Character.Heading);
                                if (BeOnOff[0])
                                    World.DrawMarker(MarkerType.VerticleCircle, vTarget_02, Vector3.Zero, VplayFace, new Vector3(20.0f, 20.0f, 20.0f), color: Color.Orange);
                                else
                                    World.DrawMarker(MarkerType.VerticleCircle, vTarget_02, Vector3.Zero, VplayFace, new Vector3(20.0f, 20.0f, 20.0f), color: Color.Yellow);

                                if (Target_02 != null)
                                    World.DrawMarker(MarkerType.VerticleCircle, vTarget_05, Vector3.Zero, VplayFace, new Vector3(10.0f, 10.0f, 10.0f), color: Color.Orange);
                                if (VehTrackin_01.IsDead || !Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    iMissionSeq = 45;
                                else if (World.GetDistance(vTarget_02, VehTrackin_01.Position) < 15.0f)
                                {
                                    if (iMissionVar_01 < 1)
                                        iMissionSeq = 5;
                                    else
                                    {
                                        iMissionVar_01 = iMissionVar_01 - 1;
                                        RemoveTargets();

                                        Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "CHECKPOINT_UNDER_THE_BRIDGE", "HUD_MINI_GAME_SOUNDSET", true);
                                        vTarget_02 = VectorList_01[iMissionVar_01];
                                        AddTarget(vTarget_02, false, true, 1.00f, false, -1, MyLang.Maptext[36]);
                                        if (BeOnOff[1])
                                        {
                                            BeOnOff[1] = false;
                                            BeOnOff[0] = false;
                                            iTime_01[0] -= Game.GameTime;
                                            int mark2 = iMissionVar_01 - 1;
                                            if (iMissionVar_01 > 0)
                                            {
                                                vTarget_05 = VectorList_01[mark2];
                                                AddTarget(vTarget_05, false, false, 1.00f, false, -1, MyLang.Maptext[36]);
                                            }

                                            if (BeOnOff[2])
                                            {
                                                SearchVeh(35.00f, 150.00f, "TECHNICAL", false, false, false, false, 2, 8, 1, MyLang.Maptext[20], 0, true, true);
                                                BeOnOff[2] = false;
                                            }
                                        }
                                        else
                                        {
                                            iTime_01[0] = Game.GameTime + iTime_01[0];
                                            BeOnOff[1] = true;
                                            BeOnOff[0] = true;
                                        }
                                    }
                                }
                            }
                            else if (iMissionSeq == 5)
                            {
                                iMishText = -1;
                                int iPost = iTime_01[0] - Game.GameTime;
                                iPost = iPost / 10;
                                iCashReward = 10000 + iPost;
                                iPegsSafePlaneTest = iPegsSafePlane;
                                iGotPegsus = iProcessForPegs;
                                WriteNSMDat(1, iGotPegsus);
                                WriteNSMDat(4, iPegsSafePlaneTest);
                                NSCoinInvestments(true, 4, 9, "Monsantos Shares");
                                GameOver(false, "" + MyLang.Mistext[195] + "" + iPost + " " + MyLang.Mistext[196] + ", ", false, iCashReward);
                            }
                            else if (iMissionSeq == 45)
                            {
                                iMissionSeq = 99;
                                NSCoinInvestments(false, 7, 12, "Monsantos Shares");
                                GameOver(true, "", false, 0);
                            }
                        }       // crop duster
                        else
                        {
                            if (iMissionSeq == 0)
                            {
                                if (VehicleList_01.Count > 0)
                                {
                                    iMissionSeq = 1;
                                    StayInVehicle(Game.Player.Character, true);

                                    if (MySettings.FastTraveltoStart)
                                        WarptoAnyVeh(VehTrackin_01, Game.Player.Character, 1);
                                    iMishText = 45;
                                }
                            }
                            else if (iMissionSeq == 1)
                            {
                                if (bNotPause)
                                {
                                    Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                    bNotPause = false;
                                }
                                else if (World.GetDistance(vTarget_01, Game.Player.Character.Position) < 65.0f)
                                {
                                    VehTrackin_01.FreezePosition = false;
                                    iMissionSeq = 2;
                                    iMishText = 46;
                                }
                            }
                            else if (iMissionSeq == 2)
                            {
                                if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable)
                                    iMissionSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    VehTrackin_01.CurrentBlip.Remove();
                                    iMishText = -1;
                                    int iRando = RandInt(13, 14);
                                    Npc_01 = NPCSpawn(RandNPC(iRando), vTarget_02, 121.00f, false, 120, 6, 0, null, 0, true, 18, 0, MyLang.Maptext[104]);
                                    Npc_02 = NPCSpawn(RandNPC(iRando), vTarget_02, 121.00f, false, 120, 7, 0, null, 0, true, 18, 0, MyLang.Maptext[104]);
                                    iMissionSeq = 3;
                                }
                                else if (World.GetDistance(vTarget_01, Game.Player.Character.Position) < 65.0f)
                                    iMishText = 46;
                                else
                                    iMishText = 45;
                            }
                            else if (iMissionSeq == 3)
                            {
                                if (Npc_02 != null)
                                {
                                    iMissionSeq = 4;
                                    iWait4Sec = Game.GameTime + 20000;
                                }
                            }
                            else if (iMissionSeq == 4)
                            {
                                if (VehTrackin_01.IsDead || !Game.Player.Character.IsInVehicle() || Npc_01.IsDead || Npc_02.IsDead)
                                    iMissionSeq = 45;
                                else if (Npc_01.IsInVehicle() && Npc_02.IsInVehicle())
                                {
                                    iMissionSeq = 5;
                                    iMissionVar_01 = VectorList_01.Count - 1;
                                    vTarget_03 = VectorList_01[iMissionVar_01];
                                    vTarget_03.Z = vTarget_03.Z - 1.0f;
                                    iMissionVar_03 = 0;
                                    ttTextBar_01.Text = "0/4";
                                    TheYellowCorona(vTarget_03, 10.00f);
                                    AddTarget(vTarget_03, false, true, 1.00f, false, 184, MyLang.Maptext[53]);
                                    Npc_01.CurrentBlip.Remove();
                                    Npc_02.CurrentBlip.Remove();
                                    iMishText = 47;
                                }
                                else
                                {
                                    if (iWait4Sec < Game.GameTime)
                                    {
                                        if (!Npc_01.IsInVehicle() || !Npc_02.IsInVehicle())
                                        {
                                            VehicleWarp(VehTrackin_01, Npc_01, 3);
                                            VehicleWarp(VehTrackin_01, Npc_02, 4);
                                        }
                                    }
                                }
                            }
                            else if (iMissionSeq == 5)
                            {
                                if (!Game.Player.Character.IsInVehicle() || Npc_01.IsDead || Npc_02.IsDead || VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (World.GetDistance(vTarget_03, VehTrackin_01.Position) < 100.00f)
                                {
                                    iMishText = 48;

                                    if (World.GetDistance(vTarget_03, VehTrackin_01.Position) < 10.00f)
                                    {
                                        if (!VehTrackin_01.IsInAir)
                                        {
                                            iMissionSeq = 6;
                                            VehTrackin_01.EngineRunning = false;
                                            VehTrackin_01.IsDriveable = false;
                                            Pilot06_TakeAPhoto(Npc_01);
                                            Pilot06_TakeAPhoto(Npc_02);
                                            BeOnOff[0] = true;
                                            iWait4Sec = Game.GameTime + 7000;
                                            RemoveTargets();
                                            iMishText = 49;
                                        }
                                    }
                                }
                                else
                                    iMishText = 47;
                                VTBTimerPool.Draw();
                            }
                            else if (iMissionSeq == 6)
                            {
                                if (VehTrackin_01.IsDead || !Game.Player.Character.IsInVehicle() || Npc_01.IsDead || Npc_02.IsDead)
                                    iMissionSeq = 45;
                                else if (iWait4Sec < Game.GameTime)
                                {
                                    if (BeOnOff[0])
                                    {
                                        BeOnOff[0] = false;
                                        Npc_01.Task.ClearAll();
                                        Npc_01.Task.PlayAnimation("cellphone@self", "selfie", 8.00f, 3000, true, 1.00f);
                                        Npc_01.BlockPermanentEvents = true;

                                        Npc_02.Task.ClearAll();
                                        Npc_02.Task.PlayAnimation("cellphone@self", "selfie", 8.00f, 3000, true, 1.00f);
                                        Npc_02.BlockPermanentEvents = true;

                                        iWait4Sec = Game.GameTime + 3000;
                                    }
                                    else
                                    {
                                        if (!Npc_01.IsInVehicle())
                                        {
                                            iWait4Sec = Game.GameTime + 4000;
                                            EnterPlayerVeh(Npc_01, 2, 1.00f);
                                        }
                                        if (!Npc_02.IsInVehicle())
                                        {
                                            iWait4Sec = Game.GameTime + 4000;
                                            EnterPlayerVeh(Npc_02, 3, 1.00f);
                                        }
                                    }
                                }
                                else if (Npc_01.IsInVehicle() && Npc_02.IsInVehicle())
                                {
                                    VehTrackin_01.EngineRunning = true;
                                    VehTrackin_01.IsDriveable = true;
                                    Npc_01.CurrentBlip.Remove();
                                    Npc_02.CurrentBlip.Remove();
                                    if (iMissionVar_01 < 1)
                                    {
                                        RemoveTargets();
                                        ttTextBar_01.Text = "4/4";
                                        iMissionSeq = 7;
                                    }
                                    else
                                    {
                                        iMishText = 47;
                                        iMissionSeq = 5;
                                        iMissionVar_01 = iMissionVar_01 - 1;
                                        vTarget_03 = VectorList_01[iMissionVar_01];
                                        vTarget_03.Z = vTarget_03.Z - 2.0f;
                                        iMissionVar_03 = iMissionVar_03 + 1;
                                        ttTextBar_01.Text = "" + iMissionVar_03 + "/4";
                                        TheYellowCorona(vTarget_03, 10.00f);
                                        AddTarget(vTarget_03, false, true, 1.00f, false, 184, MyLang.Maptext[53]);
                                    }
                                }
                                VTBTimerPool.Draw();
                            }
                            else if (iMissionSeq == 7)
                            {
                                iMissionSeq = 8;
                                vTarget_01.Z = vTarget_01.Z - 2.0f;
                                AddTarget(vTarget_01, false, true, 1.00f, false, 360, MyLang.Maptext[54]);
                                TheYellowCorona(vTarget_01, 10.00f);
                                VTBTimerPool.Draw();
                                iMishText = 50;
                            }
                            else if (iMissionSeq == 8)
                            {
                                if (VehTrackin_01.IsDead || Npc_01.IsDead || Npc_02.IsDead || !Game.Player.Character.IsInVehicle())
                                    iMissionSeq = 45;
                                else if (World.GetDistance(vTarget_01, VehTrackin_01.Position) < 100.00f)
                                {
                                    iMishText = 48;
                                    if (World.GetDistance(vTarget_01, VehTrackin_01.Position) < 5.0f)
                                    {
                                        if (!VehTrackin_01.IsInAir)
                                        {
                                            iMishText = -1;
                                            iMissionSeq = 9;
                                            VehTrackin_01.EngineRunning = false;
                                            VehTrackin_01.IsDriveable = false;
                                            RemoveTargets();
                                            iWait4Sec = iWait4Sec + 2000;
                                            Pilot06_GoBacktoOff(Npc_01);
                                            Pilot06_GoBacktoOff(Npc_02);
                                        }
                                    }
                                }
                                else
                                    iMishText = 50;
                                VTBTimerPool.Draw();
                            }
                            else if (iMissionSeq == 9)
                            {
                                if (Npc_01.IsDead || Npc_02.IsDead)
                                    iMissionSeq = 45;
                                else if (Game.GameTime > iWait4Sec)
                                {
                                    iMissionSeq = 10;
                                    iWait4Sec = Game.GameTime + 12000;
                                    VehTrackin_01.EngineRunning = true;
                                    VehTrackin_01.IsDriveable = true;
                                }
                            }
                            else if (iMissionSeq == 10)
                            {
                                if (Npc_01.IsDead || Npc_02.IsDead)
                                    iMissionSeq = 45;
                                else if (Npc_01.Position.DistanceTo(vTarget_02) < 6.00f || Game.GameTime > iWait4Sec)
                                {
                                    Npc_01.Position = vTarget_03;
                                    Npc_02.Position = vTarget_03;
                                    iCashReward = RandInt(7000, 9000);
                                    iPegsSafeHeliTest = iPegsSafeHeli;
                                    iGotPegsus = iProcessForPegs;
                                    WriteNSMDat(1, iGotPegsus);
                                    WriteNSMDat(2, iPegsSafeHeliTest);
                                    NSCoinInvestments(true, 7, 9, "Higgins Shares");
                                    GameOver(false, "", false, iCashReward);
                                }
                            }
                            else if (iMissionSeq == 45)
                            {
                                NSCoinInvestments(false, 5, 11, "Higgins Shares");
                                GameOver(true, "", false, 0);
                            }
                        }                            // heil tours
                    }        //Pilot
                    else if (iJobType == 7)
                    {
                        if (Game.Player.WantedLevel > 0)
                            Game.Player.WantedLevel = 0;

                        if (BeOnOff[0])
                        {
                            if (BeOnOff[1])
                            {
                                if (iTime_01[0] > Game.GameTime)
                                {

                                    int iTotal = iTime_01[0] - Game.GameTime;
                                    FindTheTime(iTotal, 6, "", true);
                                }
                                else
                                {
                                    BeOnOff[1] = false;
                                    VTBTimerPool.Remove(ttTextBar_02);
                                    iMissionSeq = 17;
                                }
                            }
                            if (sList_01.Count > 0)
                            {
                                if (BeOnOff[2])
                                {
                                    if (iTime_01[1] < Game.GameTime)
                                    {
                                        iTime_01[1] = Game.GameTime + RandInt(50, 700);
                                        if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, sList_01[0]))
                                        {
                                            Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, sList_01[0]);
                                            Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, sList_01[1], Npc_01.Handle, 0.0f, 0.15f, 0.75f, 0.0f, 0.0f, 90.0f, 1.0f, false, false, false);
                                        }
                                        else
                                        {
                                            Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, sList_01[0]);
                                        }
                                        if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, sList_01[2]))
                                        {
                                            Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, sList_01[2]);
                                            Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, sList_01[3], Npc_01.Handle, 0.0f, 0.15f, 0.75f, 0.0f, 0.0f, 90.0f, RandFlow(0.01f, 0.5f), false, false, false);
                                        }
                                        else
                                        {
                                            Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, sList_01[2]);
                                        }
                                    }
                                }
                                else
                                {
                                    if (iTime_01[1] < Game.GameTime)
                                    {
                                        iTime_01[1] = Game.GameTime + RandInt(50, 700);
                                        if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, sList_01[4]))
                                        {
                                            Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, sList_01[4]);
                                            Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, sList_01[5], Npc_01.Handle, 0.3f, -0.3f, -0.4f, 180.0f, 270.0f, 90.0f, 1.0f, true, true, true);
                                        }
                                        else
                                        {
                                            Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, sList_01[4]);
                                        }
                                        if (Function.Call<bool>(Hash.HAS_NAMED_PTFX_ASSET_LOADED, sList_01[2]))
                                        {
                                            Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, sList_01[2]);
                                            Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, sList_01[3], Npc_01.Handle, 0.0f, 0.15f, 0.75f, 0.0f, 0.0f, 90.0f, RandFlow(0.01f, 0.5f), false, false, false);
                                        }
                                        else
                                        {
                                            Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, sList_01[2]);
                                        }
                                    }
                                }
                            }
                        }

                        if (iMissionSeq == 0)
                        {
                            if (VehicleList_01.Count > 0)
                            {
                                iMissionSeq = 1;
                                StayInVehicle(Game.Player.Character, true);
                                if (!bAmberAntz)
                                {
                                    if (MySettings.FastTraveltoStart || bTestRun)
                                        WarptoAnyVeh(VehTrackin_01, Game.Player.Character, 1);
                                    iMishText = 52;
                                }
                            }
                        }
                        else if (iMissionSeq == 1)
                        {
                            if (bNotPause)
                            {
                                Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                bNotPause = false;
                            }
                            else if (VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                            {
                                iMissionSeq = 2;
                                AddTarget(vTarget_01, true, true, 1.00f, false, 153, MyLang.Maptext[37]);
                                BeOnOff[4] = false;
                                if (VehTrackin_01.CurrentBlip.Exists())
                                    VehTrackin_01.CurrentBlip.Remove();
                                vLanLoc = vTarget_01;
                                iMishText = 53;
                            }
                            else if (Game.Player.Character.Position.DistanceTo(VehTrackin_01.Position) < 55.00f)
                            {
                                iMishText = 57;
                                if (!bAmberAntz)
                                {
                                    if (!VehTrackin_01.IsOnAllWheels)
                                    {
                                        VehTrackin_01.Position = vGetaway;
                                        VehTrackin_01.Rotation = new Vector3(0.00f, 0.00f, fGetDir);
                                    }
                                }
                            }
                            else
                            {
                                if (!bAmberAntz)
                                    iMishText = 52;
                            }
                        }
                        else if (iMissionSeq == 2)
                        {
                            if (VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else if (BeOnOff[4])
                            {
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[4] = false;
                                    vLanLoc = vTarget_01;
                                    iMishText = 53;
                                    AddTarget(vTarget_01, true, true, 1.00f, false, 153, MyLang.Maptext[37]);
                                    VehTrackin_01.CurrentBlip.Remove();
                                    iMishText = 55;
                                }
                            }
                            else if (World.GetDistance(vTarget_01, Game.Player.Character.Position) < 95.0f)
                            {
                                iMissionSeq = 3;
                                Npc_01 = NPCSpawn(RandNPC(RandInt(1, 35)), vTarget_01, 0.00f, false, 160, 17, 0, null, 0, false, 0, 0, "");
                            }
                            else
                            {
                                if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[4] = true;
                                    RemoveTargets();
                                    VehBlip(VehTrackin_01, false, false, 66, MyLang.Maptext[7]);
                                    vLanLoc = Vector3.Zero;
                                    iMishText = 57;
                                }                              
                            }
                        }
                        else if (iMissionSeq == 3)
                        {
                            if (VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else if (BeOnOff[4])
                            {
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[4] = false;
                                    iMishText = 53;
                                    AddTarget(vTarget_01, true, true, 1.00f, false, 153, MyLang.Maptext[37]);
                                    vLanLoc = vTarget_01;
                                    VehTrackin_01.CurrentBlip.Remove();
                                    iMishText = 55;
                                }
                            }
                            else if (World.GetDistance(vTarget_01, Game.Player.Character.Position) < 50.00f)
                            {
                                iMissionSeq = 4;
                                RemoveTargets();
                                BeOnOff[2] = false;
                                BeOnOff[0] = true;
                                Npc_01.Task.PlayAnimation("combat@damage@writhe", "writhe_loop", 8.0f, -1, true, 1.0f);
                                Npc_01.AlwaysKeepTask = true;
                                Npc_01.BlockPermanentEvents = true;
                                Npc_01.ApplyDamage(50);
                                PedBlimp(Npc_01, 0.75f, false, true, 53, MyLang.Maptext[37]);
                                iMishText = 54;
                            }
                            else
                            {
                                if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[4] = true;
                                    iMishText = 52;
                                    vLanLoc = Vector3.Zero;
                                    RemoveTargets();
                                    VehBlip(VehTrackin_01, false, false, 66, MyLang.Maptext[7]);
                                    iMishText = 57;
                                }
                            }
                        }
                        else if (iMissionSeq == 4)
                        {
                            World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(Npc_01.Position.X, Npc_01.Position.Y, Npc_01.Position.Z + 2.00f), Vector3.Zero, new Vector3(0.00f, 180.00f, Npc_01.Heading), new Vector3(0.50f, 0.50f, 0.50f), Color.AntiqueWhite);
                            if (Npc_01.IsDead || VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else if (BeOnOff[4])
                            {
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[4] = false;
                                    VehTrackin_01.CurrentBlip.Remove();
                                }
                                else if (World.GetDistance(Game.Player.Character.Position + (Game.Player.Character.ForwardVector * 1), Npc_01.Position) < 0.75f)
                                {
                                    iMissionSeq = 25;
                                    Game.Player.CanControlCharacter = false;
                                    Ambulance_Menu();
                                }
                            }
                            else
                            {
                                if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[4] = true;
                                    vLanLoc = Vector3.Zero;
                                    iMishText = 55;
                                    Npc_01.FreezePosition = true;
                                    VehBlip(VehTrackin_01,  false, false, 66, MyLang.Maptext[7]);
                                }
                            }
                        }
                        else if (iMissionSeq == 5)
                        {
                            if (Npc_01.IsDead || VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else if (Npc_01.IsInVehicle())
                            {
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    iMissionSeq = 6;
                                    Ambulance_StartLine();
                                    if (BeOnOff[6])
                                        iMishText = 58;
                                    else
                                        iMishText = 56;
                                }
                            }
                            else if (BeOnOff[4])
                            {
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[4] = false;
                                    VehTrackin_01.CurrentBlip.Remove();
                                    iMishText = -1;
                                }
                            }
                            else
                            {
                                ControlerUI(MyLang.Context[17], 1);

                                if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[4] = true;
                                    iMishText = 57;
                                    VehBlip(VehTrackin_01, false, false, 66, MyLang.Maptext[7]);
                                }
                                else if (Function.Call<bool>(Hash.IS_HORN_ACTIVE, VehTrackin_01))
                                {
                                    WarptoPlayerVeh(Npc_01, 2);
                                }
                            }
                        }
                        else if (iMissionSeq == 6)
                        {
                            if (Npc_01.IsDead || VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else if (BeOnOff[3] && World.GetDistance(vTarget_02, VehTrackin_01.Position) < 75.00f)
                            {
                                MoveThatCar(vTarget_02);
                                BeOnOff[3] = false;
                            }
                            else if (BeOnOff[4])
                            {
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[4] = false;
                                    VehTrackin_01.CurrentBlip.Remove();
                                    if (BeOnOff[6])
                                        iMishText = 58;
                                    else
                                        iMishText = 56;
                                }
                            }
                            else
                            {
                                if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[4] = true;
                                    VehBlip(VehTrackin_01, false, false, 66, MyLang.Maptext[7]);
                                    iMishText = 57;
                                }
                                else if (World.GetDistance(vTarget_02, VehTrackin_01.Position) < 5.00f)
                                {
                                    if (VehTrackin_01.IsStopped)
                                    {
                                        iMissionSeq = 7;
                                        RemoveTargets();
                                        iMishText = -1;
                                        BeOnOff[1] = false;
                                        VTBTimerPool.Remove(ttTextBar_02);
                                        GetOutofVeh(Npc_01, 0);
                                        WalkThisWay(Npc_01, vTarget_03, 1.00f);
                                        iWait4Sec = Game.GameTime + 3000;
                                    }
                                }
                            }
                        }
                        else if (iMissionSeq == 7)
                        {
                            if (Npc_01.IsDead || VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else if (BeOnOff[4])
                            {
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[4] = false;
                                    VehTrackin_01.CurrentBlip.Remove();
                                }
                            }
                            else
                            {
                                if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[4] = true;
                                    VehBlip(VehTrackin_01, false, false, 66, MyLang.Maptext[7]);
                                }
                            }

                            if (iWait4Sec < Game.GameTime)
                            {
                                if (Npc_01.IsInVehicle())
                                {
                                    iWait4Sec = Game.GameTime + 2500;
                                    GetOutofVeh(Npc_01, 0);
                                    Script.Wait(1000);
                                    WalkThisWay(Npc_01, vTarget_03, 1.00f);
                                    iMishText = -1;
                                }
                                else
                                {
                                    iMissionSeq = 8;
                                    RemoveTargets();
                                    iWait4Sec = Game.GameTime + 11000;
                                }
                            }
                        }
                        else if (iMissionSeq == 8)
                        {
                            if (Npc_01.IsDead || VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else if (BeOnOff[4])
                            {
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[4] = false;
                                    VehTrackin_01.CurrentBlip.Remove();
                                }
                            }
                            else
                            {
                                if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[4] = true;
                                    VehBlip(VehTrackin_01, false, false, 66, MyLang.Maptext[7]);
                                }
                            }

                            if (World.GetDistance(Npc_01.Position, vTarget_03) < 2.0f || iWait4Sec < Game.GameTime)
                            {
                                if (bTestRun)
                                {
                                    iMissionSeq = 0;
                                    BeOnOff[0] = false;
                                    Npc_01.Position = new Vector3(0f, 0f, 150f);
                                    bAmberAntz = true;
                                    RemoveTargets();
                                    CleanUpPeds();
                                    if (iTestKit < MyMissions.AmbuXM.Count())
                                        Ambulance();
                                    else
                                        GameOver(false, "" + iRepMisssion + "" + MyLang.Mistext[197] + ", ", false, iCashReward);

                                }
                                else
                                {
                                    iMissionSeq = 99;
                                    BeOnOff[0] = false;
                                    Npc_01.Position = new Vector3(0f, 0f, 150f);
                                    RemoveTargets();
                                    CleanUpPeds();
                                    bAmberAntz = true;
                                    ControlSelect(7, false);
                                }
                            }
                        }
                        else if (iMissionSeq == 9)
                        {
                            bCovidInf = false;

                            if (!bTestRun)
                            {
                                if (iRepMisssion < 25)
                                {
                                    if (iRepMisssion > 4)
                                        NSCoinInvestments(true, iRepMisssion - 2, iRepMisssion, "Humane Labs");
                                    else
                                        NSCoinInvestments(true, 0, 1, "Humane Labs");
                                }
                                else
                                    NSCoinInvestments(true, 27, 28, "Humane Labs");
                            }

                            iMeddicTest = iMeddicc;
                            WriteNSMDat(8, iMeddicTest);
                            GameOver(false, "" + iRepMisssion + "" + MyLang.Mistext[197] + ", ", false, iCashReward);
                        }
                        else if (iMissionSeq == 15)
                        {
                            if (iWait4Sec < Game.GameTime)
                            {
                                iMissionSeq = 5;
                                Game.Player.CanControlCharacter = true;
                                Game.Player.Character.Task.ClearAll();
                                Npc_01.Task.ClearAnimation("combat@damage@writhe", "writhe_loop");
                                Npc_01.FreezePosition = false;
                                EnterAnyVeh(VehTrackin_01, Npc_01, 2, 2.00f);
                                iList_01[0] = 0;
                                Npc_01.CurrentBlip.Remove();

                                iMishText = 57;
                            }
                        }
                        else if (iMissionSeq == 16)
                        {
                            if (iWait4Sec < Game.GameTime)
                            {
                                iMissionSeq = 5;
                                Game.Player.CanControlCharacter = true;
                                Game.Player.Character.Task.ClearAll();
                                Npc_01.Task.ClearAnimation("combat@damage@writhe", "writhe_loop");
                                Npc_01.FreezePosition = false;
                                EnterAnyVeh(VehTrackin_01, Npc_01, 2, 2.00f);
                                iList_01[0] = 0;
                                Npc_01.CurrentBlip.Remove();

                                iMishText = 57;
                            }
                        }
                        else if (iMissionSeq == 17)
                        {
                            Game.Player.CanControlCharacter = true;
                            Game.Player.Character.Task.ClearAll();
                            Npc_01.Health = 0;
                            Npc_01.FreezePosition = false;
                            if (Npc_01.CurrentBlip.Exists())
                                Npc_01.CurrentBlip.Remove();
                            if (iWait4Sec < Game.GameTime)
                            {
                                if (bTestRun)
                                {
                                    iMissionSeq = 0;
                                    BeOnOff[0] = false;
                                    Npc_01.Position = new Vector3(0f, 0f, 150f);
                                    bAmberAntz = true;
                                    RemoveTargets();
                                    CleanUpPeds();
                                    if (iTestKit < MyMissions.AmbuXM.Count())
                                        Ambulance();
                                    else
                                        GameOver(false, "" + iRepMisssion + "" + MyLang.Mistext[197] + ", ", false, iCashReward);

                                }
                                else
                                {
                                    iMissionSeq = 99;
                                    BeOnOff[0] = false;
                                    //Npc_01.Position = new Vector3(0f, 0f, 150f);
                                    RemoveTargets();
                                    CleanUpPeds();
                                    bAmberAntz = true;
                                    ControlSelect(7, false);
                                }
                            }
                        }
                        else if (iMissionSeq == 18)
                        {
                            Game.Player.CanControlCharacter = true;
                            Game.Player.Character.Task.ClearAll();
                            Npc_01.Task.ClearAnimation("combat@damage@writhe", "writhe_loop");
                            Npc_01.FreezePosition = false;
                            if (bTestRun)
                            {
                                iMissionSeq = 0;
                                BeOnOff[0] = false;
                                Npc_01.Position = new Vector3(0f, 0f, 150f);
                                bAmberAntz = true;
                                RemoveTargets();
                                CleanUpPeds();
                                if (iTestKit < MyMissions.AmbuXM.Count())
                                    Ambulance();
                                else
                                    GameOver(false, "" + iRepMisssion + "" + MyLang.Mistext[197] + ", ", false, iCashReward);

                            }
                            else
                            {
                                iMissionSeq = 99;
                                BeOnOff[0] = false;
                                //Npc_01.Position = new Vector3(0f, 0f, 150f);
                                RemoveTargets();
                                CleanUpPeds();
                                bAmberAntz = true;
                                ControlSelect(7, false);
                            }
                        }
                        else if (iMissionSeq == 25)
                        {
                            World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(Npc_01.Position.X, Npc_01.Position.Y, Npc_01.Position.Z + 2.00f), Vector3.Zero, new Vector3(0.00f, 180.00f, Npc_01.Heading), new Vector3(0.50f, 0.50f, 0.50f), Color.AntiqueWhite);
                            if (Npc_01.IsDead || VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                        }
                        else if (iMissionSeq == 45)
                        {
                            bCovidInf = false;
                            GameOver(true, "" + iRepMisssion + "" + MyLang.Mistext[197] + ", ", bAmberAntz, iCashReward);
                        }
                    }        //Amulance
                    else if (iJobType == 8)
                    {
                        if (BeOnOff[3])
                        {
                            if (BeOnOff[4])                  //Test if vehicle has rolled over with 2 sec timmer to give time to get back on wheels.
                            {
                                if (Game.GameTime > iTime_01[0])
                                {
                                    if (!VehTrackin_01.IsOnAllWheels)
                                        VehTrackin_01.Rotation = new Vector3(0.00f, 0.00f, VehTrackin_01.Rotation.Z);
                                    BeOnOff[4] = false;
                                }
                            }
                            else
                            {
                                if (!VehTrackin_01.IsOnAllWheels)
                                {
                                    BeOnOff[4] = false;
                                    iTime_01[0] = Game.GameTime + 2000;
                                }
                            }

                            if (BeOnOff[0])     // The distance bar that pops up for distance to target
                            {
                                float fDist = VehTrackin_01.Position.DistanceTo(vTarget_01);
                                int iFind = (int)fDist;
                                ttTextBar_01.Text = " " + iFind + " ";
                            }

                            if (World.GetDistance(Game.Player.Character.Position, Npc_01.Position) < 125.00f)   // Distance tracking for Spookbar
                            {
                                if (iTime_01[1] != 0)
                                {
                                    iTime_01[1] = 0;      //timer for spook fail
                                    VehTrackin_01.CurrentBlip.IsFlashing = false;
                                }
                                fMission_02 = World.GetDistance(Game.Player.Character.Position, Npc_01.Position) / 100.00f;// Find the percent for Spookbar float 0.00 to 1.00
                                fMission_02 = 1.00f - fMission_02;
                                if (fMission_02 < 0.01f)
                                    fMission_02 = 0.01f;
                                BtSlideBar.BackgroundColor = Color.Black;
                            }
                            else       // if player is out side min distance
                            {
                                fMission_02 = 0.00f;
                                if (iTime_01[1] == 0) // set timmer for distance fail
                                {
                                    VehTrackin_01.CurrentBlip.IsFlashing = true;
                                    iTime_01[1] = Game.GameTime + 15000;
                                }
                                else if (iTime_01[1] < Game.GameTime) // fail if timmer runs out
                                    iMissionSeq = 45;
                                if (BeOnOff[5]) // bar flash for distance warning. is a 1/2 sec toggle on off.
                                {
                                    if (iTime_01[2] < Game.GameTime)
                                    {
                                        BeOnOff[5] = false;
                                        iTime_01[2] = Game.GameTime + 500;
                                        BtSlideBar.BackgroundColor = Color.White;
                                    }
                                }
                                else
                                {
                                    if (iTime_01[2] < Game.GameTime)
                                    {
                                        BeOnOff[5] = true;
                                        iTime_01[2] = Game.GameTime + 500;
                                        BtSlideBar.BackgroundColor = Color.Black;
                                    }
                                }
                            }

                            if (fMission_02 > 0.75f)  // test if too close to target
                            {
                                if (!BeOnOff[7])
                                {
                                    if (iTime_01[3] == 0)  // set timmer for too close fail
                                    {
                                        iTime_01[3] = Game.GameTime + 15000;
                                        VehTrackin_01.CurrentBlip.IsFlashing = true;
                                    }
                                    else if (iTime_01[3] < Game.GameTime)  // too close fail.
                                        iMissionSeq = 45;

                                    if (BeOnOff[5]) // bar flash for distance warning. is a 1/2 sec toggle on off.
                                    {
                                        if (iTime_01[4] < Game.GameTime)
                                        {
                                            BeOnOff[5] = false;
                                            iTime_01[4] = Game.GameTime + 500;
                                            BtSlideBar.ForegroundColor = Color.White;
                                        }
                                    }
                                    else
                                    {
                                        if (iTime_01[4] < Game.GameTime)
                                        {
                                            BeOnOff[5] = true;
                                            iTime_01[4] = Game.GameTime + 500;
                                            BtSlideBar.ForegroundColor = Color.Red;
                                        }
                                    }
                                }
                                BtSlideBar.Percentage = fMission_02;   // set the native ui Bar to the current distance percent.
                                VTBTimerPool.Draw();        //draw the spookbar to screen.
                            }
                            else    //draw the spookbar to screen where the player is at the correct distance.
                            {
                                if (iTime_01[3] != 0)
                                {
                                    iTime_01[3] = 0;
                                    VehTrackin_01.CurrentBlip.IsFlashing = false;
                                }
                                BtSlideBar.Percentage = fMission_02;
                                BtSlideBar.ForegroundColor = Color.Yellow;
                                VTBTimerPool.Draw();
                            }
                        }

                        if (iMissionSeq == 0)
                        {
                            if (bNotPause)
                            {
                                Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                bNotPause = false;
                            }
                            else if (Game.Player.Character.Position.DistanceTo(vGetaway) < 125.00f)
                            {
                                if (World.GetNextPositionOnStreet(vGetaway).DistanceTo(vGetaway) > 150.00f)
                                    Follow_ButTherArntAny();
                                else
                                {
                                    iMissionSeq = 1;
                                    iWait4Sec = Game.GameTime + 10000;
                                    SearchVeh(35.00f, 250.00f, RanVehListX(6, 1, true), false, false, false, false, 3, 8, 3, MyLang.Maptext[14], 1, true, true);
                                }
                            }
                        }
                        else if (iMissionSeq == 1)
                        {
                            if (VehTrackin_01 != null)
                            {
                                vLanLoc = Vector3.Zero;
                                iMishText = 60;
                                iMissionSeq = 2;
                            }
                            else if (iWait4Sec < Game.GameTime)
                            {
                                iMissionSeq = 0;
                                Follow_ButTherArntAny();
                            }
                        }
                        else if (iMissionSeq == 2)
                        {
                            if (World.GetDistance(Game.Player.Character.Position, VehTrackin_01.Position) < 125.00f)
                            {
                                iMissionSeq = 3;
                                Follow_SpiningAround(VehTrackin_01);
                                Npc_01 = NPCSpawn(RandNPC(RandInt(1, 35)), VehTrackin_01.Position, VehTrackin_01.Heading, false, 180, 0, 1, VehTrackin_01, 2, false, 0, 0, "");
                                //MyBob.MyBlip.IsFlashing = false;
                            }
                        }
                        else if (iMissionSeq == 3)
                        {
                            iMissionSeq = 4;
                            iTime_01[5] = Game.GameTime;
                            BeOnOff[3] = true;
                            vTarget_01 = VectorList_01[iMissionVar_03];
                            float fSpeed = 20.00f;
                            DriveToDest(VehTrackin_01, vTarget_01, Npc_01, fSpeed, iCanDrive);
                        }
                        else if (iMissionSeq == 4)
                        {
                            World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(VehTrackin_01.Position.X, VehTrackin_01.Position.Y, VehTrackin_01.Position.Z + 2.00f), Vector3.Zero, new Vector3(0.00f, 180.00f, VehTrackin_01.Heading), new Vector3(0.50f, 0.50f, 0.50f), color: Color.CadetBlue);

                            if (Npc_01.IsDead || VehTrackin_01.HasBeenDamagedBy(Game.Player.Character) || !Npc_01.IsInVehicle())
                                iMissionSeq = 45;
                            else if (!VehTrackin_01.IsOnAllWheels)
                                Follow_SpiningAround(VehTrackin_01);
                            else if (World.GetDistance(vTarget_01, VehTrackin_01.Position) < 75.00f)
                            {
                                iMissionSeq = 5;
                                vGetaway = VectorList_02[0];
                                Npc_02 = NPCSpawn(RandNPC(RandInt(1, 35)), vGetaway, fMission_01, false, 180, 0, 0, null, 2, false, 0, 0, "");
                                float fSpeed = 15.00f;
                                iMissionVar_03 = iMissionVar_03 - 1;
                                vTarget_01 = VectorList_01[iMissionVar_03];
                                DriveToDest(VehTrackin_01, vTarget_01, Npc_01, fSpeed, iCanDrive);
                                VehTrackin_01.SoundHorn(1000);
                                MoveThatCar(vTarget_01);
                            }
                            else if (iWait4Sec < Game.GameTime && VehTrackin_01.IsStopped)
                            {
                                iWait4Sec = Game.GameTime + 6000;
                                GateIsNear(VehTrackin_01.Position + (VehTrackin_01.ForwardVector * 3), 10.00f, false);
                            }
                        }
                        else if (iMissionSeq == 5)
                        {
                            World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(VehTrackin_01.Position.X, VehTrackin_01.Position.Y, VehTrackin_01.Position.Z + 2.00f), Vector3.Zero, new Vector3(0.00f, 180.00f, VehTrackin_01.Heading), new Vector3(0.50f, 0.50f, 0.50f), color: Color.CadetBlue);

                            if (Npc_01.IsDead || VehTrackin_01.HasBeenDamagedBy(Game.Player.Character) || !Npc_01.IsInVehicle())
                                iMissionSeq = 45;
                            else if (World.GetDistance(vTarget_01, VehTrackin_01.Position) < 5.00)
                            {
                                iMissionSeq = 6;
                                iList_01[0] = 0;
                                VehTrackin_01.FreezePosition = true;
                                DoorsNear(Npc_02.Position, 8.00f, false);
                                iWait4Sec = Game.GameTime + 2000;
                            }
                        }
                        else if (iMissionSeq == 6)
                        {
                            World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(VehTrackin_01.Position.X, VehTrackin_01.Position.Y, VehTrackin_01.Position.Z + 2.00f), Vector3.Zero, new Vector3(0.00f, 180.00f, VehTrackin_01.Heading), new Vector3(0.50f, 0.50f, 0.50f), color: Color.CadetBlue);

                            if (Npc_01.IsDead || Npc_02.IsDead || VehTrackin_01.HasBeenDamagedBy(Game.Player.Character) || !Npc_01.IsInVehicle())
                                iMissionSeq = 45;
                            else if (Npc_02.IsInVehicle())
                            {
                                VehTrackin_01.FreezePosition = false;
                                BeOnOff[6] = true;
                                iWait4Sec = Game.GameTime + 12000;
                                iMissionSeq = 7;
                            }
                            else if (iWait4Sec < Game.GameTime)
                            {
                                iWait4Sec = Game.GameTime + 2000;
                                iList_01[0] += 1;
                                if (!Npc_02.IsInVehicle())
                                {
                                    if (iList_01[0] < 10)
                                    {
                                        if (BeOnOff[1])
                                            DoorsNear(Npc_02.Position, 8.00f, false);
                                        else
                                            EnterAnyVeh(VehTrackin_01, Npc_02, 1, 1.20f);
                                        BeOnOff[1] = !BeOnOff[1];
                                    }
                                    else
                                        VehicleWarp(VehTrackin_01, Npc_02, 2);
                                }
                            }
                        }
                        else if (iMissionSeq == 40)
                        {
                            iTime_01[5] -= Game.GameTime;
                            iTime_01[5] = iTime_01[5] / 1000;
                            iTime_01[5] *= -1;
                            iCashReward += (iTime_01[5] * 10);
                            Game.Player.WantedLevel = 0;
                            GameOver(false, "", false, iCashReward);
                        }
                        else if (iMissionSeq == 45)
                        {
                            GameOver(true, "", false, 0);
                        }
                        else if (iMissionVar_01 == 1)
                        {
                            if (iMissionSeq == 7)
                            {
                                iMissionSeq = 8;
                                BeOnOff[9] = true;
                                iMissionVar_03 = iMissionVar_03 - 1;
                                vTarget_01 = VectorList_01[iMissionVar_03];
                                iMissionVar_03 = iMissionVar_03 - 1;
                                vTarget_02 = VectorList_01[iMissionVar_03];
                                float fSpeed = 20.00f;
                                Follow_AddToMuilti(Npc_01, MyLang.Maptext[14], VehTrackin_01.CurrentBlip, VehTrackin_01);
                                Follow_AddToMuilti(Npc_02, "", null, null);

                                DriveToDest(VehTrackin_01, vTarget_01, Npc_01, fSpeed, iCanDrive);
                            }
                            else if (iMissionSeq == 8)
                            {
                                World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(VehTrackin_01.Position.X, VehTrackin_01.Position.Y, VehTrackin_01.Position.Z + 2.00f), Vector3.Zero, new Vector3(0.00f, 180.00f, VehTrackin_01.Heading), new Vector3(0.50f, 0.50f, 0.50f), color: Color.PaleVioletRed);

                                if (Npc_01.IsDead && Npc_02.IsDead)
                                {
                                    Npc_01.Health = 0;
                                    Npc_02.Health = 0;
                                    NSCoinInvestments(false, 5, 11, "Total Bankers Shares");
                                    iMissionSeq = 40;
                                }
                                else if (World.GetDistance(vTarget_01, VehTrackin_01.Position) < 75.00f && BeOnOff[9])
                                {
                                    BeOnOff[9] = false;
                                    float fSpeed = 15.00f;
                                    DriveToDest(VehTrackin_01, vTarget_01, Npc_01, fSpeed, iCanDrive);
                                }
                                else if (World.GetDistance(vTarget_01, VehTrackin_01.Position) < 5.00f)
                                {
                                    iMissionSeq = 9;
                                    GetOutofVeh(Npc_01, 1);
                                    GetOutofVeh(Npc_02, 1);
                                    PedBlimp(Npc_01, 0.75f, false, false, 1, "");
                                    PedBlimp(Npc_02, 0.75f, false, false, 1, "");
                                    WalkThisWay(Npc_01, vTarget_02, 2.00f);
                                    WalkThisWay(Npc_02, vTarget_02, 2.00f);
                                }
                                else if (BeOnOff[6])
                                {
                                    if (iWait4Sec < Game.GameTime)
                                    {
                                        BeOnOff[6] = false;
                                        BeOnOff[7] = true;
                                        BeOnOff[0] = true;
                                        VTBTimerPool.Add(ttTextBar_01);
                                        Game.Player.WantedLevel = 4;
                                        MultiPed[0].MyTask_01 = 1;
                                        float fSpeed = 45.00f;
                                        DriveToDest(VehTrackin_01, vTarget_01, Npc_01, fSpeed, iCanDrive);
                                        VehBlip(VehTrackin_01, true, false, 1, MyLang.Maptext[20]);

                                        iMishText = 61;
                                    }
                                }
                                else if (Game.Player.WantedLevel < 4)
                                    Game.Player.WantedLevel = 4;
                            }
                            else if (iMissionSeq == 9)
                            {
                                if (Npc_01.IsDead && Npc_02.IsDead)
                                {
                                    iCashReward = 10000;
                                    Npc_01.Health = 0;
                                    Npc_02.Health = 0;
                                    NSCoinInvestments(false, 5, 15, "Total Bankers Shares");
                                    iMissionSeq = 40;
                                }
                                else if (World.GetDistance(vTarget_02, Npc_01.Position) < 3.0f || World.GetDistance(vTarget_02, Npc_02.Position) < 3.0f)
                                {
                                    iMissionSeq = 45;
                                    Npc_01.Position = new Vector3(0f, 0f, 1500f);
                                    Npc_02.Position = new Vector3(0f, 0f, 1500f);
                                }
                                else
                                {
                                    if (iTracking < Game.GameTime)
                                        MultiPedTracker();
                                }
                            }
                        }       // Take out the two npc's route to polic station.
                        else if (iMissionVar_01 == 2)
                        {
                            if (iMissionSeq == 7)
                            {
                                iMissionSeq = 8;
                                iMissionVar_03 = iMissionVar_03 - 1;
                                vTarget_01 = VectorList_01[iMissionVar_03];
                                float fSpeed = 20.00f;
                                DriveToDest(VehTrackin_01, vTarget_01, Npc_01, fSpeed, iCanDrive);
                            }
                            else if (iMissionSeq == 8)
                            {
                                World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(VehTrackin_01.Position.X, VehTrackin_01.Position.Y, VehTrackin_01.Position.Z + 2.00f), Vector3.Zero, new Vector3(0.00f, 180.00f, VehTrackin_01.Heading), new Vector3(0.50f, 0.50f, 0.50f), color: Color.LightSteelBlue);

                                if (Npc_01.IsDead || Npc_02.IsDead || VehTrackin_01.HasBeenDamagedBy(Game.Player.Character) || !Npc_01.IsInVehicle())
                                    iMissionSeq = 45;
                                else if (World.GetDistance(vTarget_01, VehTrackin_01.Position) < 5.00f)
                                {
                                    iMissionSeq = 9;
                                    BeOnOff[3] = false;
                                    World.AddExplosion(VehTrackin_01.Position, ExplosionType.PlaneRocket, 2.00f, 1.00f);
                                    VehTrackin_01.Explode();
                                }
                                else if (BeOnOff[8])
                                {
                                    if (VehTrackin_01.Position.Z > 101.01f)
                                    {
                                        BeOnOff[8] = false;
                                        float fSpeed = 15.0f;
                                        DriveToDest(VehTrackin_01, vTarget_01, Npc_01, fSpeed, iCanDrive);
                                    }
                                }
                                if (BeOnOff[6])
                                {
                                    if (iWait4Sec < Game.GameTime)
                                    {
                                        BeOnOff[6] = false;
                                        BeOnOff[7] = true;
                                        BeOnOff[0] = true;
                                        iTracking = Game.GameTime + 1000;
                                        VTBTimerPool.Add(ttTextBar_01);
                                        SearchVeh(35.00f, 125.00f, "SCHAFTER3", false, false, false, false, 8, 9, 1, MyLang.Maptext[20], 0, true, true);
                                        SearchVeh(35.00f, 125.00f, "LIMO2", false, false, false, false, 8, 9, 1, MyLang.Maptext[20], 0, true, true);
                                        Npc_01.RelationshipGroup = GP_BNPCs;
                                        Npc_02.RelationshipGroup = GP_BNPCs;

                                        float fSpeed = 25.00f;
                                        DriveToDest(VehTrackin_01, vTarget_01, Npc_01, fSpeed, iCanDrive);
                                    }
                                }
                                else
                                {
                                    if (iTracking < Game.GameTime)
                                        MultiPedTracker();
                                }
                            }
                            else if (iMissionSeq == 9)
                            {
                                iMissionSeq = 40;
                                NSCoinInvestments(true, 5, 12, "Penris Shares");
                                BeOnOff[7] = false;
                                iCashReward = 8000;
                            }
                        }       // Follow to end then arial atack the car.
                        else if (iMissionVar_01 == 3)
                        {
                            if (iMissionSeq == 7)
                            {
                                iMissionSeq = 8;
                                BeOnOff[9] = true;
                                iMissionVar_03 = iMissionVar_03 - 1;
                                vTarget_01 = VectorList_01[iMissionVar_03];
                                float fSpeed = 20.00f;
                                DriveToDest(VehTrackin_01, vTarget_01, Npc_01, fSpeed, iCanDrive);
                            }
                            else if (iMissionSeq == 8)
                            {
                                World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(VehTrackin_01.Position.X, VehTrackin_01.Position.Y, VehTrackin_01.Position.Z + 2.00f), Vector3.Zero, new Vector3(0.00f, 180.00f, VehTrackin_01.Heading), new Vector3(0.50f, 0.50f, 0.50f), color: Color.LightCoral);

                                if (Npc_01.IsDead || Npc_02.IsDead || VehTrackin_01.HasBeenDamagedBy(Game.Player.Character) || !Npc_01.IsInVehicle())
                                    iMissionSeq = 45;
                                else if (World.GetDistance(vTarget_01, VehTrackin_01.Position) < 50.0f)
                                {
                                    iMissionSeq = 9;
                                    BeOnOff[3] = false;
                                    Follow_AmbushPlayer();
                                    float fSpeed = 15.00f;
                                    DriveToDest(VehTrackin_01, vTarget_01, Npc_01, fSpeed, iCanDrive);
                                    iWait4Sec = Game.GameTime + 1500;
                                }
                                else if (BeOnOff[6])
                                {
                                    if (iWait4Sec < Game.GameTime)
                                    {
                                        BeOnOff[6] = false;
                                        float fSpeed = 45.00f;
                                        DriveToDest(VehTrackin_01, vTarget_01, Npc_01, fSpeed, iCanDrive);
                                    }
                                }
                                else if (BeOnOff[8])
                                {
                                    if (VehTrackin_01.Position.Z > 101.01f)
                                    {
                                        BeOnOff[8] = false;
                                        float fSpeed = 15.0f;
                                        DriveToDest(VehTrackin_01, vTarget_01, Npc_01, fSpeed, iCanDrive);
                                    }
                                }
                            }
                            else if (iMissionSeq == 9)
                            {
                                World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(VehTrackin_01.Position.X, VehTrackin_01.Position.Y, VehTrackin_01.Position.Z + 2.00f), Vector3.Zero, new Vector3(0.00f, 180.00f, VehTrackin_01.Heading), new Vector3(0.50f, 0.50f, 0.50f), color: Color.LightCoral);

                                if (World.GetDistance(vTarget_01, VehTrackin_01.Position) < 5.00f)
                                {
                                    iMissionSeq = 10;
                                    iMishText = 62;
                                    Follow_DefToOff();
                                }
                            }
                            else if (iMissionSeq == 10)
                            {
                                ttTextBar_02.Text = "" + MultiPed.Count + "/" + iAmbushCount + "";
                                ttTextBar_02.Draw(1);
                                if (Game.Player.WantedLevel > 0)
                                    Game.Player.WantedLevel = 0;

                                if (iTracking < Game.GameTime)
                                    MultiPedTracker();
                                else if (MultiPed.Count == 0)
                                {
                                    iCashReward = iAmbushCount * 1520;
                                    NSCoinInvestments(true, 8, 13, "Bobcat Security Shares");
                                    iMissionSeq = 40;
                                }
                            }
                        }       // Abush player at end point
                        else if (iMissionVar_01 == 4)
                        {
                            if (iMissionSeq == 7)
                            {
                                iMissionSeq = 8;
                                RemoveTargets();
                                iMissionVar_03 = iMissionVar_03 - 1;
                                vTarget_03 = VectorList_01[iMissionVar_03];
                                iMissionVar_03 = iMissionVar_03 - 1;
                                vTarget_02 = VectorList_01[iMissionVar_03];
                                float fSpeed = 20.00f;
                                int iDrive = 1073742653;
                                Npc_01.Task.CruiseWithVehicle(VehTrackin_01, fSpeed, iDrive);
                            }
                            else if (iMissionSeq == 8)
                            {
                                World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(VehTrackin_01.Position.X, VehTrackin_01.Position.Y, VehTrackin_01.Position.Z + 2.00f), Vector3.Zero, new Vector3(0.00f, 180.00f, VehTrackin_01.Heading), new Vector3(0.50f, 0.50f, 0.50f), color: Color.MediumTurquoise);
                                if (Npc_01.IsDead || Npc_02.IsDead)
                                    iMissionSeq = 45;
                                else if (BeOnOff[6])
                                {
                                    if (iWait4Sec < Game.GameTime)
                                    {
                                        iMissionSeq = 9;
                                        BeOnOff[6] = false;
                                        BeOnOff[7] = true;

                                        if (VehTrackin_01.ClassType == VehicleClass.Compacts)
                                            iList_01[1] = RandInt(5000, 6000);
                                        else if (VehTrackin_01.ClassType == VehicleClass.Sedans)
                                            iList_01[1] = RandInt(7000, 8000);
                                        else if (VehTrackin_01.ClassType == VehicleClass.Coupes)
                                            iList_01[1] = RandInt(15000, 21000);
                                        else if (VehTrackin_01.ClassType == VehicleClass.Muscle)
                                            iList_01[1] = RandInt(21000, 50000);
                                        else if (VehTrackin_01.ClassType == VehicleClass.OffRoad)
                                            iList_01[1] = RandInt(21000, 45000);
                                        else if (VehTrackin_01.ClassType == VehicleClass.SUVs)
                                            iList_01[1] = RandInt(22000, 48000);
                                        else if (VehTrackin_01.ClassType == VehicleClass.Sports)
                                            iList_01[1] = RandInt(55000, 85000);
                                        else if (VehTrackin_01.ClassType == VehicleClass.SportsClassics)
                                            iList_01[1] = RandInt(120000, 90000);
                                        else if (VehTrackin_01.ClassType == VehicleClass.Super)
                                            iList_01[1] = RandInt(140000, 100000);
                                        else
                                            iList_01[1] = RandInt(8000, 9000);

                                        fVehicleDamage = VehTrackin_01.BodyHealth + VehTrackin_01.EngineHealth + VehTrackin_01.PetrolTankHealth;
                                        iList_01[2] = (int)fVehicleDamage;
                                        VehBlip(VehTrackin_01, true, false, 11, MyLang.Maptext[14]);

                                        iMishText = 63;
                                    }
                                }
                                else if (BeOnOff[8])
                                {
                                    if (VehTrackin_01.Position.Z > 101.01f)
                                    {
                                        BeOnOff[8] = false;
                                        float fSpeed = 15.00f;
                                        DriveToDest(VehTrackin_01, vTarget_01, Npc_01, fSpeed, iCanDrive);
                                    }
                                }
                            }
                            else if (iMissionSeq == 9)
                            {
                                World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(VehTrackin_01.Position.X, VehTrackin_01.Position.Y, VehTrackin_01.Position.Z + 2.00f), Vector3.Zero, new Vector3(0.00f, 180.00f, VehTrackin_01.Heading), new Vector3(0.50f, 0.50f, 0.50f), color: Color.MediumTurquoise);

                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    iMissionSeq = 10;
                                    BeOnOff[3] = false;
                                    BeOnOff[10] = true;
                                    BeOnOff[6] = false;
                                    VTBTimerPool.Add(ttTextBar_01);
                                    VTBTimerPool.Remove(BtSlideBar);
                                    ttTextBar_01.Label = "" + MyLang.Othertext[10] + "";
                                    VehTrackin_01.CurrentBlip.Remove();
                                    TheYellowCorona(vTarget_02, 5.00f);
                                    AddTarget(vTarget_02, true, true, 1.00f, false, 524, MyLang.Maptext[42]);

                                    iMishText = 64;

                                }
                            }
                            else if (iMissionSeq == 10)
                            {
                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    if (World.GetDistance(vTarget_02, VehTrackin_01.Position) < 5.00f)
                                    {
                                        iCashReward = iList_01[1] - iList_01[3];
                                        iMissionSeq = 11;
                                    }
                                    else if (BeOnOff[6])
                                    {
                                        if (World.GetDistance(vTarget_02, VehTrackin_01.Position) < 45.00f)
                                        {
                                            BeOnOff[6] = false;
                                            MoveThatCar(vTarget_02);
                                        }
                                    }
                                }
                                else
                                {
                                    iMissionSeq = 9;
                                    VehBlip(VehTrackin_01, true, false, 3, MyLang.Maptext[14]);
                                    RemoveTargets();
                                }

                                if (BeOnOff[10])
                                {
                                    if (iList_01[2] > 0 && iList_01[1] > 0)
                                        iList_01[3] = VehDamage(VehTrackin_01, iList_01[2], iList_01[1], true, iList_01[3], false);
                                }

                            }
                            else if (iMissionSeq == 11)
                            {
                                NSCoinInvestments(false, 3, 9, "Augury Insurance Shares");
                                SlowFastTravel(vTarget_03, fMission_01);
                                Follow_CArSaleSeatChecker();
                                VehTrackin_01.Position = new Vector3(516.63f, -4391.54f, 0.01f);
                                iMissionSeq = 40;
                            }
                        }       // Have player steal and deliver a vehcle at end point
                        else if (iMissionVar_01 == 5)
                        {
                            if (Game.Player.WantedLevel > 0)
                                Game.Player.WantedLevel = 0;

                            if (iMissionSeq == 7)
                            {
                                iMissionSeq = 8;
                                iMissionVar_03 = iMissionVar_03 - 1;
                                vTarget_01 = VectorList_01[iMissionVar_03];
                                iMissionVar_03 = iMissionVar_03 - 1;
                                vTarget_02 = VectorList_01[iMissionVar_03];
                                VehicleSpawn("Frogger2", vTarget_02, 0.00f, true, true, false, false, 5, 1, 0, "", 2, false);
                                Npc_01.RelationshipGroup = GP_ANPCs;
                                Npc_02.RelationshipGroup = GP_ANPCs;
                                float fSpeed = 20.00f;
                                DriveToDest(VehTrackin_01, vTarget_01, Npc_01, fSpeed, iCanDrive);
                            }
                            else if (iMissionSeq == 8)
                            {
                                World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(VehTrackin_01.Position.X, VehTrackin_01.Position.Y, VehTrackin_01.Position.Z + 2.00f), Vector3.Zero, new Vector3(0.00f, 180.00f, VehTrackin_01.Heading), new Vector3(0.50f, 0.50f, 0.50f), color: Color.AntiqueWhite);
                                if (Npc_01.IsDead || Npc_02.IsDead)
                                {
                                    Npc_01.Health = 0;
                                    Npc_02.Health = 0;
                                    iMissionSeq = 45;
                                }
                                else if (World.GetDistance(vTarget_01, VehTrackin_01.Position) < 55.0f)
                                    iMissionSeq = 9;

                                if (BeOnOff[6])
                                {
                                    if (iWait4Sec < Game.GameTime)
                                    {
                                        BeOnOff[6] = false;
                                        BeOnOff[7] = true;
                                        BeOnOff[0] = true;
                                        iTracking = Game.GameTime + 1000;
                                        VTBTimerPool.Add(ttTextBar_01);
                                        SearchVeh(35.00f, 125.00f, "KURUMA2", false, false, false, false, 8, 9, 1, MyLang.Maptext[20], 0, true, true);
                                        SearchVeh(35.00f, 125.00f, "KURUMA2", false, false, false, false, 8, 9, 1, MyLang.Maptext[20], 0, true, true);
                                        float fSpeed = 45.00f;
                                        DriveToDest(VehTrackin_01, vTarget_01, Npc_01, fSpeed, iCanDrive);

                                        iMishText = 65;
                                    }
                                }
                                else
                                {
                                    if (iTracking < Game.GameTime)
                                        MultiPedTracker();
                                }
                            }
                            else if (iMissionSeq == 9)
                            {
                                World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(VehTrackin_01.Position.X, VehTrackin_01.Position.Y, VehTrackin_01.Position.Z + 2.00f), Vector3.Zero, new Vector3(0.00f, 180.00f, VehTrackin_01.Heading), new Vector3(0.50f, 0.50f, 0.50f), color: Color.AntiqueWhite);

                                if (Npc_01.IsDead || Npc_02.IsDead)
                                    iMissionSeq = 45;
                                else if (World.GetDistance(vTarget_01, VehTrackin_01.Position) < 5.00f)
                                {
                                    iMissionSeq = 10;
                                    iTime_01[6] = Game.GameTime + 20000;
                                    VehTrackin_02.FreezePosition = false;
                                    Npc_03 = NPCSpawn(RandNPC(32), VehTrackin_02.Position, VehTrackin_02.Heading, false, 180, 7, 1, VehTrackin_02, 0, false, 0, 0, "");
                                    Follow_RunToHeli();
                                }
                                else
                                {
                                    if (iTracking < Game.GameTime)
                                        MultiPedTracker();
                                }
                            }
                            else if (iMissionSeq == 10)
                            {
                                if (Npc_01.IsDead || Npc_02.IsDead)
                                    iMissionSeq = 45;
                                else if (Npc_01.IsInVehicle(VehTrackin_02) && Npc_02.IsInVehicle(VehTrackin_02))
                                    iMissionSeq = 11;
                                else if (iTime_01[6] < Game.GameTime)
                                {
                                    iMissionSeq = 11;
                                    VehicleWarp(VehTrackin_02, Npc_01, 3);
                                    VehicleWarp(VehTrackin_02, Npc_02, 4);
                                }
                                else
                                {
                                    if (iTracking < Game.GameTime)
                                        MultiPedTracker();
                                }
                            }
                            else if (iMissionSeq == 11)
                            {
                                if (Npc_01.IsDead || Npc_02.IsDead)
                                    iMissionSeq = 45;
                                else if (Npc_01.IsInVehicle(VehTrackin_02) && Npc_02.IsInVehicle(VehTrackin_02))
                                {
                                    iMissionSeq = 40;
                                    BeOnOff[3] = false;
                                    NSCoinInvestments(true, 8, 12, "Eugenics Incorporated Shares");
                                    iCashReward = 20000;
                                }
                            }
                        }       // Have player protect two in car against two attacking cars--heli fly away
                        else if (iMissionVar_01 == 6)
                        {
                            if (iMissionSeq == 7)
                            {
                                iMissionSeq = 8;
                                iWait4Sec = Game.GameTime + 12000;
                                float fSpeed = 20.00f;
                                Npc_01.Task.CruiseWithVehicle(VehTrackin_01, fSpeed, 262972);
                            }
                            else if (iMissionSeq == 8)
                            {
                                World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(VehTrackin_01.Position.X, VehTrackin_01.Position.Y, VehTrackin_01.Position.Z + 2.00f), Vector3.Zero, new Vector3(0.00f, 180.00f, VehTrackin_01.Heading), new Vector3(0.50f, 0.50f, 0.50f), color: Color.LimeGreen);
                                if (Npc_01.IsDead || Npc_02.IsDead || VehTrackin_01.HasBeenDamagedBy(Game.Player.Character) || !Npc_01.IsInVehicle())
                                    iMissionSeq = 45;
                                else if (iWait4Sec < Game.GameTime)
                                {
                                    iMissionSeq = 9;
                                    BeOnOff[11] = true;
                                    BeOnOff[6] = false;
                                    Vector3 V3Ufo = VehTrackin_01.Position;
                                    V3Ufo.Z += 500.00f;
                                    Prop_01 = BuildProp("p_spinning_anus_s", V3Ufo, Vector3.Zero, true, true);
                                    Prop_02 = BuildProp("ba_prop_battle_lights_fx_righ", V3Ufo, Vector3.Zero, true, true);
                                    if (Prop_01 != null && Prop_02 != null)
                                        Prop_02.AttachTo(Prop_01, Prop_01.GetBoneIndex("bodyshell"), new Vector3(0.00f, 0.00f, 0.00f), new Vector3(0.00f, 60.00f, 30.00f));
                                    iWait4Sec = Game.GameTime + 500;
                                }
                            }
                            else if (iMissionSeq == 9)
                            {
                                World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(VehTrackin_01.Position.X, VehTrackin_01.Position.Y, VehTrackin_01.Position.Z + 2.00f), Vector3.Zero, new Vector3(0.00f, 180.00f, VehTrackin_01.Heading), new Vector3(0.50f, 0.50f, 0.50f), color: Color.LimeGreen);

                                if (Npc_01.IsDead || Npc_02.IsDead || VehTrackin_01.HasBeenDamagedBy(Game.Player.Character) || !Npc_01.IsInVehicle())
                                    iMissionSeq = 45;
                                if (Prop_01.Position.Z > VehTrackin_01.Position.Z + 15.00f && BeOnOff[11])
                                {
                                    Prop_01.Position = new Vector3(VehTrackin_01.Position.X, VehTrackin_01.Position.Y, Prop_01.Position.Z - 0.50f);
                                    Prop_01.Rotation = new Vector3(3.00f, 5.00f, Prop_01.Rotation.Z + 1.5f);
                                }
                                else
                                {
                                    if (BeOnOff[11])
                                    {
                                        BeOnOff[11] = false;
                                        iWait4Sec = Game.GameTime + 6000;
                                    }
                                    else if (iWait4Sec < Game.GameTime)
                                    {
                                        iMissionSeq = 10;
                                        BeOnOff[3] = false;
                                        VehTrackin_01.EngineRunning = false;
                                        VehTrackin_01.FreezePosition = true;
                                        VehTrackin_01.CurrentBlip.Remove();
                                        fMission_01 = VehTrackin_01.Position.Z;
                                        iMishText = 66;
                                    }
                                    else
                                    {
                                        Prop_01.Position = new Vector3(VehTrackin_01.Position.X, VehTrackin_01.Position.Y, VehTrackin_01.Position.Z + 15.00f);
                                        Prop_01.Rotation = new Vector3(3.00f, 5.00f, Prop_01.Rotation.Z + 1.5f);
                                    }

                                }
                            }
                            else if (iMissionSeq == 10)
                            {
                                if (fMission_01 < 750.00f)
                                {
                                    fMission_01 = fMission_01 + 0.50f;
                                    VehTrackin_01.Position = new Vector3(VehTrackin_01.Position.X, VehTrackin_01.Position.Y, fMission_01);
                                    Prop_01.Position = new Vector3(VehTrackin_01.Position.X, VehTrackin_01.Position.Y, VehTrackin_01.Position.Z + 15.00f);
                                    Prop_01.Rotation = new Vector3(3.00f, 2.00f, Prop_01.Rotation.Z + 1.5f);
                                }
                                else
                                {
                                    NSCoinInvestments(true, 9, 12, "Pißwasser Shares");
                                    iCashReward = 10000;
                                    iMissionSeq = 40;
                                }
                            }
                        }       // Alan abuction...
                    }        //Follow
                    else if (iJobType == 9)
                    {
                        if (Game.Player.WantedLevel > 0)
                            Game.Player.WantedLevel = 0;

                        if (BeOnOff[2])
                            Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "re_armybase");

                        if (iMissionSeq == 0)
                        {
                            if (bReFire)
                                VehBlip(VehTrackin_01, false, true, 66, MyLang.Maptext[8]);
                            else
                            {
                                VehTrackin_01 = World.CreateVehicle(VehicleHash.FireTruck, vGetaway, fGetDir);
                                VehBlip(VehTrackin_01, false, true, 66, MyLang.Maptext[8]);
                                if (MySettings.FastTraveltoStart)
                                    WarptoAnyVeh(VehTrackin_01, Game.Player.Character, 1);
                            }
                            iMissionSeq = 1;
                            BeOnOff[3] = true;
                        }
                        else if (iMissionSeq == 1)
                        {
                            if (bNotPause)
                            {
                                Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                bNotPause = false;
                            }
                            if (VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                            {
                                iMissionSeq = 3;
                                BeOnOff[3] = false;
                                VehTrackin_01.CurrentBlip.Remove();

                                if (iMissionVar_01 == 1 || iMissionVar_01 == 5)
                                    AddTarget(vTarget_01, true, true, 65.00f, false, 66, MyLang.Maptext[26]);
                                else if (iMissionVar_01 == 4)
                                { }
                                else
                                    AddTarget(vTarget_01, true, true, 1.00f, false, 436, MyLang.Maptext[42]);

                                vLanLoc = vTarget_01;
                                if (iMissionVar_01 == 1)
                                    iMishText = 68;
                                else if (iMissionVar_01 == 2)
                                    iMishText = 69;
                                else if (iMissionVar_01 == 3)
                                    iMishText = 70;
                                else if (iMissionVar_01 == 4)
                                    iMishText = 71;
                                else
                                    iMishText = 72;
                            }
                            else if (Game.Player.Character.Position.DistanceTo(VehTrackin_01.Position) < 55.00f)
                            {
                                iMishText = 189;
                                if (!bReFire)
                                {
                                    if (!VehTrackin_01.IsOnAllWheels)
                                    {
                                        VehTrackin_01.Position = vGetaway;
                                        VehTrackin_01.Rotation = new Vector3(0.00f, 0.00f, fGetDir);
                                    }
                                }
                            }
                            else
                            {
                                if (!bReFire)
                                    iMishText = 67;
                            }
                        }
                        else if (iMissionSeq == 25)
                        {
                            bReFire = true;
                            CleanFakeBlips();
                            iMissionSeq = 99;
                            ControlSelect(8, false);
                        }
                        else if (iMissionSeq == 40)
                        {
                            if (iRepMisssion < 25)
                            {
                                if (iRepMisssion > 4)
                                    NSCoinInvestments(true, iRepMisssion - 2, iRepMisssion, "Mors Mutual Shares");
                                else
                                    NSCoinInvestments(true, 0, 1, "Mors Mutual Shares");
                            }
                            else
                                NSCoinInvestments(true, 27, 28, "Mors Mutual Shares");
                            if (BeOnOff[3])
                            {
                                BeOnOff[3] = false;
                                VehTrackin_01.CurrentBlip.Remove();
                            }
                            if (BeOnOff[1])
                            {
                                BeOnOff[2] = false;
                                ZancudaClosed();
                            }
                            VehTrackin_01.MarkAsNoLongerNeeded();
                            GameOver(false, "", false, iCashReward);
                        }
                        else if (iMissionSeq == 45)
                        {
                            if (BeOnOff[4])
                            {
                                BeOnOff[4] = false;
                                Npc_01.Detach();
                            }
                            if (BeOnOff[1])
                            {
                                BeOnOff[2] = false;
                                BeOnOff[1] = false;
                                ZancudaClosed();
                            }
                            if (BeOnOff[3])
                            {
                                BeOnOff[3] = false;
                                VehTrackin_01.CurrentBlip.Remove();
                            }
                            VehTrackin_01.MarkAsNoLongerNeeded();
                            GameOver(true, "", false, 0);
                        }
                        else if (iMissionVar_01 == 1)
                        {
                            if (iMissionSeq == 3)
                            {
                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (BeOnOff[3])
                                {
                                    if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    {
                                        BeOnOff[3] = false;
                                        VehTrackin_01.CurrentBlip.Remove();
                                        AddTarget(vTarget_01, true, true, 65.00f, false, 66, MyLang.Maptext[26]);
                                        iMishText = 68;
                                    }
                                }
                                else if (World.GetDistance(VehTrackin_01.Position, vTarget_01) < 55.00f)
                                {
                                    iMissionSeq = 4;
                                    RemoveTargets();
                                    int iRanCar = RandInt(1, 16);
                                    VehTrackin_02 = null;
                                    int iVe = RandInt(1, 13);
                                    SearchVeh(35.00f, 125.00f, RanVehListX(iVe, 1, true), false, false, false, false, 0, 0, 3, "", 2, true, false);
                                }
                                else
                                {
                                    if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    {
                                        BeOnOff[3] = true;
                                        RemoveTargets();
                                        VehBlip(VehTrackin_01, false, true, 66, MyLang.Maptext[8]);
                                        iMishText = 189;
                                    }
                                }
                            }
                            else if (iMissionSeq == 4)
                            {
                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (VehTrackin_02 != null)
                                {
                                    iMissionSeq = 5;
                                    iMissionVar_02 = Game.GameTime + 60000;
                                    YourFired(VehTrackin_02.Position.X, VehTrackin_02.Position.Y, VehTrackin_02.Position.Z + 1.00f);
                                    vTarget_01.Z = vTarget_01.Z + 4.00f;
                                    vLanLoc = Vector3.Zero;
                                    iMishText = 73;
                                }
                            }
                            else if (iMissionSeq == 5)
                            {
                                if (VehTrackin_01.IsDead || VehTrackin_02.IsDead || Fire_BurnOut() || !Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    iMissionSeq = 45;
                                    VehTrackin_02.Explode();
                                }
                                else if (World.GetDistance(VehTrackin_01.Position, VehTrackin_02.Position) < 30.00f)
                                {
                                    if (iFireList.Count() > 0)
                                    {
                                        World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(VehTrackin_02.Position.X, VehTrackin_02.Position.Y, VehTrackin_02.Position.Z + 1.00f), Vector3.Zero, new Vector3(0.00f, 180.00f, VehTrackin_02.Heading), new Vector3(0.50f, 0.50f, 0.50f), color: Color.Red);
                                        if (Fire_IntheHall(VehTrackin_02.Position))
                                        {
                                            RemoveTargets();
                                            iMissionSeq = 6;
                                            BeOff[1] = false;
                                        }
                                        ControlerUI(MyLang.Context[18], 1);
                                    }
                                }
                            }
                            else if (iMissionSeq == 6)
                            {
                                iMissionSeq = 25;
                            }
                        }       // Put out vehicle fire
                        else if (iMissionVar_01 == 2)
                        {
                            if (iMissionSeq == 3)
                            {
                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (BeOnOff[3])
                                {
                                    if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    {
                                        BeOnOff[3] = false;
                                        VehTrackin_01.CurrentBlip.Remove();
                                        AddTarget(vTarget_01, true, true, 1.00f, false, 436, MyLang.Maptext[42]);
                                        iMishText = 69;
                                    }
                                }
                                else if (World.GetDistance(VehTrackin_01.Position, vTarget_01) < 55.00f)
                                {
                                    iMissionSeq = 4;
                                    iMissionVar_02 = Game.GameTime + 60000;
                                    RemoveTargets();
                                    YourFired(vTarget_01.X, vTarget_01.Y, vTarget_01.Z - 1.00f);
                                    vLanLoc = Vector3.Zero;
                                    iMishText = 73;
                                }
                                else
                                {
                                    if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    {
                                        BeOnOff[3] = true;
                                        RemoveTargets();
                                        VehBlip(VehTrackin_01, false, true, 66, MyLang.Maptext[8]);
                                        iMishText = 189;
                                    }
                                }
                            }
                            else if (iMissionSeq == 4)
                            {
                                if (VehTrackin_01.IsDead || Fire_BurnOut() || !Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    iMissionSeq = 45;
                                else if (World.GetDistance(VehTrackin_01.Position, vTarget_01) < 30.00)
                                {
                                    if (iFireList.Count > 0)
                                    {
                                        World.DrawMarker(MarkerType.ChevronUpx1, vTarget_01, Vector3.Zero, new Vector3(0.00f, 180.00f, 0.00f), new Vector3(0.50f, 0.50f, 0.50f), color: Color.Red);
                                        if (Fire_IntheHall(vTarget_01))
                                        {
                                            RemoveTargets();
                                            iMissionSeq = 5;
                                        }
                                        ControlerUI(MyLang.Context[18], 1);
                                    }
                                }
                            }
                            else if (iMissionSeq == 5)
                            {
                                iMissionSeq = 25;
                            }
                        }       // Put out house fire
                        else if (iMissionVar_01 == 3)
                        {
                            if (iMissionSeq == 3)
                            {
                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (BeOnOff[3])
                                {
                                    if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    {
                                        BeOnOff[3] = false;
                                        VehTrackin_01.CurrentBlip.Remove();
                                        AddTarget(vTarget_01, true, true, 1.00f, false, 436, MyLang.Maptext[42]);
                                        iMishText = 70;
                                    }
                                }
                                else if (World.GetDistance(VehTrackin_01.Position, vTarget_01) < 55.00f)
                                {
                                    iMissionSeq = 4;
                                    vTarget_01.Z -= 1.00f;
                                    RemoveTargets();
                                    YourFired(vTarget_01.X, vTarget_01.Y, vTarget_01.Z + 1.00f);
                                    int iBinit = sList_01.Count - 1;
                                    int iRanBin = RandInt(0, iBinit);
                                    iMissionVar_02 = Game.GameTime + 60000;
                                    BuildProp(sList_01[iRanBin], vTarget_01, Vector3.Zero, true, true);
                                    vTarget_01.Z = vTarget_01.Z + 3.00f;
                                    vLanLoc = Vector3.Zero;
                                    iMishText = 73;
                                }
                                else
                                {
                                    if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    {
                                        BeOnOff[3] = true;
                                        RemoveTargets();
                                        VehBlip(VehTrackin_01, false, true, 66, MyLang.Maptext[8]);
                                        iMishText = 189;
                                    }
                                }
                            }
                            else if (iMissionSeq == 4)
                            {
                                if (VehTrackin_01.IsDead || Fire_BurnOut())
                                    iMissionSeq = 45;
                                else if (World.GetDistance(VehTrackin_01.Position, vTarget_01) < 30.00)
                                {
                                    if (iFireList.Count > 0)
                                    {
                                        World.DrawMarker(MarkerType.ChevronUpx1, vTarget_01, Vector3.Zero, new Vector3(0.00f, 180.00f, 0.00f), new Vector3(0.50f, 0.50f, 0.50f), color: Color.Red);

                                        if (Fire_IntheHall(vTarget_01))
                                        {
                                            RemoveTargets();
                                            iMissionSeq = 5;
                                        }
                                        ControlerUI(MyLang.Context[18], 1);
                                    }
                                }
                            }
                            else if (iMissionSeq == 5)
                            {
                                iMissionSeq = 25;
                            }
                        }       // Put out bin fire
                        else if (iMissionVar_01 == 4)
                        {
                            if (iMissionSeq == 3)
                            {
                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (World.GetDistance(Game.Player.Character.Position, vTarget_01) < 155.00f)
                                {
                                    iMissionSeq = 4;
                                    iMissionVar_02 = 0;
                                }
                                else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    if (Target_01 == null)
                                    {
                                        VehTrackin_01.CurrentBlip.Remove();
                                        AddTarget(vTarget_01, true, true, 1.00f, false, 442, MyLang.Maptext[107]);
                                        TheYellowCorona(vTarget_01, 1.00f);
                                        iMishText = 71;
                                    }
                                }
                                else
                                {
                                    if (Target_01 != null)
                                    {
                                        RemoveTargets();
                                        VehBlip(VehTrackin_01, false, true, 66, MyLang.Maptext[8]);
                                        iMishText = 189;
                                    }
                                }
                            }
                            else if (iMissionSeq == 4)
                            {
                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (World.GetDistance(Game.Player.Character.Position, vTarget_01) < 3.00f)
                                {
                                    RemoveTargets();
                                    iMissionVar_02 += 1;
                                    if (iMissionVar_02 < VectorList_03.Count - 1)
                                    {
                                        vTarget_01 = VectorList_03[iMissionVar_02];
                                        vTarget_01.Z -= 1.00f;
                                        AddTarget(vTarget_01, true, true, 1.00f, false, 442, MyLang.Maptext[107]);
                                        TheYellowCorona(vTarget_01, 1.00f);
                                    }
                                    else
                                    {
                                        iMissionSeq = 5;
                                        vTarget_01 = VectorList_03[iMissionVar_02];
                                        vLanLoc = Vector3.Zero;
                                        Npc_01 = NPCSpawn("a_c_cat_01", vTarget_01, 0.00f, false, 180, 12, 0, null, 0, true, 18, 0, MyLang.Maptext[107]);
                                        Npc_01.IsInvincible = true;
                                        iMishText = 74;
                                    }
                                }
                            }
                            else if (iMissionSeq == 5)
                            {
                                if (Game.Player.Character.Position.Z < Npc_01.Position.Z)
                                    iMishText = 74;
                                else
                                    iMishText = 75;

                                World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(Npc_01.Position.X, Npc_01.Position.Y, Npc_01.Position.Z + 1.00f), Vector3.Zero, new Vector3(0.00f, 180.00f, Npc_01.Heading), new Vector3(0.50f, 0.50f, 0.50f), Color.AntiqueWhite);
                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (World.GetDistance(Game.Player.Character.Position, Npc_01.Position) < 1.10f && !Game.Player.Character.IsInVehicle())
                                {
                                    iMissionSeq = 6;
                                    vTarget_02.Z -= 1.00f;
                                    Npc_01.HasCollision = false;
                                    Function.Call(Hash.ATTACH_ENTITY_TO_ENTITY, Npc_01.Handle, Game.Player.Character.Handle, Function.Call<int>(Hash.GET_PED_BONE_INDEX, Game.Player.Character.Handle, 31086), 0.27f, -0.00f, 0.17f, 0.00f, 0.00f, 0.00f, false, false, false, false, 2, true);
                                    //Npc_01.AttachTo(Game.Player.Character, Game.Player.Character.GetBoneIndex("SKEL_ROOT"), new Vector3(0.00f, 0.00f, 1.00f), new Vector3(0.00f, 0.00f, 0.00f));
                                    Npc_01.CurrentBlip.Remove();
                                    Npc_02 = NPCSpawn(RandNPC(RandInt(1, 35)), vTarget_03, 0.01f, false, 190, 13, 0, null, 0, false, 0, 0, "");
                                    BeOnOff[4] = true;
                                    iMishText = 76;
                                }
                                else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    if (BeOnOff[3])
                                    {
                                        BeOnOff[3] = false;
                                        VehTrackin_01.CurrentBlip.Remove();
                                    }
                                }
                                else
                                {
                                    if (!BeOnOff[3])
                                    {
                                        BeOnOff[3] = true;
                                        VehBlip(VehTrackin_01, false, true, 66, MyLang.Maptext[8]);
                                    }
                                }
                            }
                            else if (iMissionSeq == 6)
                            {
                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (World.GetDistance(vTarget_02, VehTrackin_01.Position) < 5.00f)
                                {
                                    if (Game.Player.Character.IsInVehicle())
                                        iMishText = 78;
                                    else
                                    {
                                        iMissionSeq = 7;
                                        PedBlimp(Npc_02, 0.75f, true, true, 53, MyLang.Maptext[55]);
                                        RemoveTargets();
                                        iMishText = 77;
                                    }
                                }
                                else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    if (BeOnOff[3])
                                    {
                                        BeOnOff[3] = false;
                                        TheYellowCorona(vTarget_02, 10.00f);
                                        AddTarget(vTarget_02, true, true, 1.00f, false, 442, MyLang.Maptext[55]);
                                        VehTrackin_01.CurrentBlip.Remove();
                                        iMishText = 77;
                                    }
                                }
                                else
                                {
                                    iMishText = 76;

                                    if (!BeOnOff[3])
                                    {
                                        BeOnOff[3] = true;
                                        VehBlip(VehTrackin_01, false, true, 66, MyLang.Maptext[8]);
                                        RemoveTargets();
                                    }
                                }
                            }
                            else if (iMissionSeq == 7)
                            {
                                if (VehTrackin_01.IsDead || Npc_02.IsDead)
                                    iMissionSeq = 45;
                                else if (BeOnOff[4])
                                {
                                    if (vTarget_03.DistanceTo(Game.Player.Character.Position) < 8.50f || Npc_02.Position.DistanceTo(vTarget_03) > 3.00f)
                                    {
                                        BeOnOff[4] = false;
                                        Npc_01.Detach();
                                        Npc_01.Position = (Game.Player.Character.Position) + (Game.Player.Character.ForwardVector * 2.00f);
                                        iWait4Sec = Game.GameTime + 3500;
                                        WalkThisWay(Npc_01, Npc_02.Position, 2.00f);
                                        iMishText = -1;
                                    }
                                }
                                else
                                {
                                    if (iWait4Sec < Game.GameTime)
                                        iMissionSeq = 8;
                                }
                            }
                            else if (iMissionSeq == 8)
                            {
                                iMissionSeq = 25;
                                iCashBouns = RandInt(10, 100);
                            }
                        }       // Save cat from high place--Add go here cones to make bit easyer to find the cat...
                        else if (iMissionVar_01 == 5)
                        {
                            if (iMissionSeq == 3)
                            {
                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (BeOnOff[3])
                                {
                                    if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    {
                                        BeOnOff[3] = false;
                                        VehTrackin_01.CurrentBlip.Remove();
                                        AddTarget(vTarget_01, true, true, 65.00f, false, 66, MyLang.Maptext[26]);
                                        iMishText = 72;
                                    }
                                }
                                else if (World.GetDistance(VehTrackin_01.Position, vTarget_01) < 55.00f)
                                {
                                    iMissionSeq = 4;
                                    RemoveTargets();
                                    int iRanCar = RandInt(1, 9);
                                    VehTrackin_02 = null;
                                    int iVe = RandInt(1, 13);
                                    SearchVeh(35.00f, 125.00f, RanVehListX(iVe, 1, true), false, false, false, false, 0, 0, 1, MyLang.Maptext[20], 2, true, true);
                                }
                                else
                                {
                                    if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    {
                                        BeOnOff[3] = true;
                                        RemoveTargets();
                                        VehBlip(VehTrackin_01, false, true, 66, MyLang.Maptext[8]);
                                        iMishText = 189;
                                    }
                                }
                            }
                            else if (iMissionSeq == 4)
                            {
                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (VehTrackin_02 != null)
                                {
                                    iMissionSeq = 5;
                                    VehTrackin_02.IsFireProof = false;
                                    Npc_01 = NPCSpawn(RandNPC(RandInt(1, 35)), VehTrackin_02.Position, VehTrackin_02.Heading, false, 130, 2, 1, VehTrackin_02, 6, false, 0, 0, "");
                                    VehTrackin_02.RollDownWindows();
                                    iTime_01[0] = Game.GameTime + RandInt(15000, 25000);
                                }
                            }
                            else if (iMissionSeq == 5)
                            {
                                if (BeOff[1])
                                {
                                    vLanLoc = Vector3.Zero;
                                    iMishText = 79;
                                    BeOff[1] = false;
                                }
  
                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (Npc_01.IsDead)
                                {
                                    iMissionSeq = 6;
                                    iCashBouns = 1000;
                                    VehTrackin_02.Explode();
                                }
                                if (iTime_01[0] < Game.GameTime)
                                {
                                    iMissionSeq = 6;
                                    iCashBouns = 50;
                                    VehTrackin_02.Explode();
                                }
                                else if (iWait4Sec < Game.GameTime)
                                    Fire_ShootRanPed();
                            }
                            else if (iMissionSeq == 6)
                            {
                                iMissionSeq = 25;
                                iMishText = -1;
                            }
                        }       // Chase driver throwing molitovs
                    }        //Fire
                    else if (iJobType == 10)
                    {
                        if (iMissionSeq == 0)
                        {
                            iMissionSeq = 1;

                            float fVehCheck = VehTrackin_01.BodyHealth + VehTrackin_01.EngineHealth + VehTrackin_01.PetrolTankHealth;
                            iMissionVar_04 = (int)fVehCheck;

                            if (MySettings.FastTraveltoStart)
                                WarptoAnyVeh(VehTrackin_01, Game.Player.Character, 1);
                            vLanLoc = vGetaway;
                            iMishText = 80;
                        }
                        else if (iMissionSeq == 1)
                        {
                            if (bNotPause)
                            {
                                Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                bNotPause = false;
                            }
                            if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable)
                                iMissionSeq = 45;
                            else if (VehTrackin_01.Position.DistanceTo(Game.Player.Character.Position) < 50.00f)
                            {
                                vLanLoc = Vector3.Zero;
                                iMishText = 81;

                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    iMissionSeq = 2;
                                    VehTrackin_01.CurrentBlip.Remove();
                                    vLanLoc = vTarget_01;
                                    iMishText = 82;
                                    vTarget_01.Z = vTarget_01.Z - 1.0f;
                                    TheYellowCorona(vTarget_01, 5.00f);
                                    AddTarget(vTarget_01, true, true, 50.00f, false, 488, MyLang.Maptext[42]);

                                }
                                else if (!VehTrackin_01.IsOnAllWheels)
                                {
                                    VehTrackin_01.Position = vGetaway;
                                    VehTrackin_01.Rotation = new Vector3(0.00f, 0.00f, fGetDir);
                                }
                            }
                            else
                            {
                                vLanLoc = vGetaway;
                                iMishText = 80;
                            }
                        }
                        else if (iMissionSeq == 2)
                        {
                            if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable)
                                iMissionSeq = 45;
                            else if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                            {
                                if (!BeOnOff[1])
                                {
                                    BeOnOff[1] = true;
                                    RemoveTargets();
                                    VehBlip(VehTrackin_01, true, false, 66, MyLang.Maptext[9]);
                                    vLanLoc = Vector3.Zero;
                                    iMishText = 81;
                                }
                            }
                            else if (World.GetDistance(vTarget_01, VehTrackin_01.Position) < 90.0f)
                            {
                                iMissionSeq = 3;
                                Johnny_PlayerAntics();
                                if (BeOnOff[0])
                                {
                                    MoveThatCar(vTarget_01);
                                    BeOnOff[0] = false;
                                }
                            }
                            else
                            {
                                if (BeOnOff[1])
                                {
                                    VehTrackin_01.CurrentBlip.Remove();
                                    vLanLoc = vTarget_01;
                                    iMishText = 82;
                                    AddTarget(vTarget_01, true, true, 50.00f, false, 488, MyLang.Maptext[42]);
                                    BeOnOff[1] = false;
                                }

                                if (iMissionVar_04 > 0 && iCashBouns > 0)
                                    iCashReward = VehDamage(VehTrackin_01, iMissionVar_04, iCashBouns, true, iCashReward, false);
                            }
                        }
                        else if (iMissionSeq == 3)
                        {
                            if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable)
                                iMissionSeq = 45;
                            else if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                            {
                                if (!BeOnOff[1])
                                {
                                    BeOnOff[1] = true;
                                    RemoveTargets();
                                    VehBlip(VehTrackin_01, true, false, 66, MyLang.Maptext[9]);
                                    vLanLoc = Vector3.Zero;
                                    iMishText = 81;
                                }
                            }
                            else if (World.GetDistance(vTarget_01, VehTrackin_01.Position) < 30.0f)
                            {
                                BeOnOff[1] = true;
                                iMissionSeq = 4;
                                vLanLoc = Vector3.Zero;
                                iMishText = 83;
                            }
                            else
                            {
                                if (BeOnOff[1])
                                {
                                    VehTrackin_01.CurrentBlip.Remove();
                                    vLanLoc = vTarget_01;
                                    iMishText = 82;
                                    AddTarget(vTarget_01, true, true, 50.00f, false, -1, MyLang.Maptext[42]);
                                    BeOnOff[1] = false;
                                }
                                if (iMissionVar_04 > 0 && iCashBouns > 0)
                                    iCashReward = VehDamage(VehTrackin_01, iMissionVar_04, iCashBouns, true, iCashReward, false);
                            }
                        }
                        else if (iMissionSeq == 4)
                        {
                            iMissionSeq = 5;
                            iCashReward += 200;
                            VehTrackin_01.Repair();
                            VTBTimerPool.Remove(ttTextBar_01);
                            VTBTimerPool.Add(ttTextBar_02);
                            AddTarget(vTarget_01, false, false, 50.00f, false, -1, MyLang.Maptext[56]);
                            iWait4Sec = Game.GameTime + 30000;
                        }
                        else if (iMissionSeq == 5)
                        {
                            if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable)
                                iMissionSeq = 45;
                            else if (iWait4Sec < Game.GameTime)
                            {
                                if (World.GetDistance(Game.Player.Character.Position, vTarget_01) < 50.00f || World.GetDistance(vTarget_01, VehTrackin_01.Position) > 48.00f)
                                    iMissionSeq = 7;
                                else
                                    iMissionSeq = 6;

                                iMishText = -1;
                            }
                            if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                            {
                                if (BeOnOff[1])
                                {
                                    BeOnOff[1] = false;
                                    CleanUpCheckPoints();
                                }
                                if (World.GetDistance(Game.Player.Character.Position, vTarget_01) > 50.00f && World.GetDistance(vTarget_01, VehTrackin_01.Position) < 48.00f)
                                    iMissionSeq = 6;
                            }
                            FindTheTime(iWait4Sec - Game.GameTime, 9, "", true);
                        }
                        else if (iMissionSeq == 6)
                        {
                            if (iCashReward > 20000)
                                NSCoinInvestments(false, 5, 7, "Mors Mutual Shares");

                            GameOver(false, "", false, iCashReward);
                        }
                        else if (iMissionSeq == 7)
                        {
                            bPlayerAtt = true;
                            iMissionSeq = 45;
                        }
                        else if (iMissionSeq == 45)
                        {
                            GameOver(true, "", false, 0);
                        }
                    }       //Johnny
                    else if (iJobType == 11)
                    {
                        if (iMissionSeq == 0)
                        {
                            VehicleSpawn(MyMissions.RaceXM[iMissionVar_01].AvalableVeh[0], MyMissions.RaceXM[iMissionVar_01].RaceCars[0], MyMissions.RaceXM[iMissionVar_01].RaceHead[0], false, BeOnOff[0], false, false, 21, 1, 66, "", 1, true);
                            iMissionSeq = 1;
                            MultiBlimbs(MyMissions.RaceXM[iMissionVar_01].RaceCars[3], 309, true, MyLang.Maptext[117]);

                            if (MySettings.FastTraveltoStart)
                                SlowFastTravel(vFuMiss, 0.00f);

                            iMishText = 84;
                        }
                        else if (iMissionSeq == 1)
                        {
                            if (bNotPause)
                            {
                                Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                bNotPause = false;
                            }

                            if (!Game.Player.Character.IsInVehicle())
                            {
                                iMishText = 84;
                                if (World.GetDistance(VehTrackin_01.Position, Game.Player.Character.Position) < 5.00f)
                                {

                                    ControlerUI("~INPUT_DETONATE~ " + GetEntName(MyMissions.RaceXM[iMissionVar_01].AvalableVeh[iList_01[4]]) + " ~INPUT_CONTEXT~", 1);
                                    if (Game.IsControlJustPressed(2, GTA.Control.Detonate))
                                    {
                                        if (iList_01[4] > 0)
                                            iList_01[4] -= 1;
                                        else
                                            iList_01[4] = MyMissions.RaceXM[iMissionVar_01].AvalableVeh.Count - 1;

                                        VehicleList_01.Remove(VehTrackin_01);
                                        VehTrackin_01.Delete();
                                        VehicleSpawn(MyMissions.RaceXM[iMissionVar_01].AvalableVeh[iList_01[4]], MyMissions.RaceXM[iMissionVar_01].RaceCars[0], MyMissions.RaceXM[iMissionVar_01].RaceHead[0], false, false, false, false, 21, 1, 0, "", 1, true);
                                        sMissionVar_01 = MyMissions.RaceXM[iMissionVar_01].AvalableVeh[iList_01[4]];
                                    }
                                    else if (Game.IsControlJustPressed(2, GTA.Control.Context))
                                    {
                                        if (iList_01[4] + 1 < MyMissions.RaceXM[iMissionVar_01].AvalableVeh.Count)
                                            iList_01[4] += 1;
                                        else
                                            iList_01[4] = 0;

                                        VehicleList_01.Remove(VehTrackin_01);
                                        VehTrackin_01.Delete();
                                        VehicleSpawn(MyMissions.RaceXM[iMissionVar_01].AvalableVeh[iList_01[4]], MyMissions.RaceXM[iMissionVar_01].RaceCars[0], MyMissions.RaceXM[iMissionVar_01].RaceHead[0], false, false, false, false, 21, 1, 0, "", 1, true);
                                        sMissionVar_01 = MyMissions.RaceXM[iMissionVar_01].AvalableVeh[iList_01[4]];
                                    }
                                }
                            }
                            else if (World.GetDistance(MyMissions.RaceXM[iMissionVar_01].RaceCars[3], Game.Player.Character.Position) < 2.50f)
                            {
                                Vector3 Marky = MyMissions.RaceXM[iMissionVar_01].RaceCars[3];
                                World.DrawMarker(MarkerType.VerticalCylinder, new Vector3(Marky.X, Marky.Y, Marky.Z - 1.00f), Vector3.Zero, Vector3.Zero, new Vector3(2.50f, 2.50f, 2.50f), color: Color.Yellow);

                                iMissionSeq = 2;
                                RemoveTargets();
                                Game.Player.Character.CurrentVehicle.FreezePosition = true;
                                Racist_StartLine();
                                vTarget_01 = MyMissions.RaceXM[iMissionVar_01].TheRace[0];
                                VehTrackin_01 = Game.Player.Character.CurrentVehicle;
                            }
                            else if (World.GetDistance(MyMissions.RaceXM[iMissionVar_01].RaceCars[3], Game.Player.Character.Position) < 60.0f)
                            {
                                Vector3 Marky = MyMissions.RaceXM[iMissionVar_01].RaceCars[3];
                                World.DrawMarker(MarkerType.VerticalCylinder, new Vector3(Marky.X, Marky.Y, Marky.Z - 1.00f), Vector3.Zero, Vector3.Zero, new Vector3(2.50f, 2.50f, 2.50f), color: Color.Yellow);

                                //if (Game.Player.Character.CurrentVehicle.ClassType == VehTrackin_01.ClassType || bSoloRace || bOnCayoLand)
                                //   iMishText = 85;
                                //else
                                //   iMishText = 86;

                                ClearTheWay(false);
                            }
                        }
                        else if (iMissionSeq == 2)
                        {

                            iMissionSeq = 3;
                            iMishText = -1;
                            Racist_CountDown(vTarget_01);

                            if (iList_01[0] == 2 || iList_01[0] == 6)
                            {
                                VehTrackin_01.IsDriveable = true;
                                Function.Call(Hash.SET_BOAT_ANCHOR, VehTrackin_01, false);
                            }
                            else
                                VehTrackin_01.FreezePosition = false;

                            if (!bSoloRace)
                            {
                                if (iList_01[0] == 2 || iList_01[0] == 6)
                                {
                                    Function.Call(Hash.SET_BOAT_ANCHOR, VehTrackin_02, false);
                                    Function.Call(Hash.SET_BOAT_ANCHOR, VehTrackin_03, false);
                                    Function.Call(Hash.SET_BOAT_ANCHOR, VehTrackin_04, false);
                                }

                                VehTrackin_02.FreezePosition = false;
                                VehTrackin_03.FreezePosition = false;
                                VehTrackin_04.FreezePosition = false;
                            }

                            iList_01[6] = CheckPointPro(false, MyMissions.RaceXM[iMissionVar_01].TheRace, MyMissions.RaceXM[iMissionVar_01].TheRace.Count - 1);

                            vTarget_02 = vTarget_01;
                            ClearTheWay(true);
                        }
                        else if (iMissionSeq == 3)
                        {
                            if (VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else if (!Game.Player.Character.IsInVehicle() || ButtonDown(75))
                                Racist_BackOnTrack(Game.Player.Character, VehTrackin_01, vTarget_02, fMission_01,true, true);
                            else if (Game.Player.Character.Position.DistanceTo(vTarget_01) < fCorSize + 5.00f)
                            {
                                iMissionSeq = 4;
                                iCurrentLap -= 1;
                                iList_01[1] = Game.GameTime;//worldtime
                                iList_01[2] = Game.GameTime;//currenttime
                                ControlerUI(MyLang.Context[31], 5000);
                                int iOnLap = iTotalLap - iCurrentLap;
                                BigMessageThread.MessageInstance.ShowSimpleShard("LAP " + iOnLap + "/" + iTotalLap + "", "", 5000);
                                iList_01[6] = CheckPointPro(false, MyMissions.RaceXM[iMissionVar_01].TheRace, iList_01[6]);
                                fMission_01 = VehTrackin_01.Heading;
                            }
                            Racist_PosTime(false);

                            ClearTheWay(true);
                        }
                        else if (iMissionSeq == 4)
                        {
                            if (VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else if (!Game.Player.Character.IsInVehicle() || ButtonDown(75))
                                Racist_BackOnTrack(Game.Player.Character, VehTrackin_01, vTarget_02, fMission_01,true, true);
                            else if (Game.Player.Character.Position.DistanceTo(vTarget_01) < fCorSize + 5.00f)
                            {
                                if (iList_01[6] == MyMissions.RaceXM[iMissionVar_01].TheRace.Count - 1)
                                {
                                    if (iCurrentLap == 0)
                                        iList_01[6] = CheckPointPro(true, MyMissions.RaceXM[iMissionVar_01].TheRace, iList_01[6]);
                                    else
                                        iList_01[6] = CheckPointPro(false, MyMissions.RaceXM[iMissionVar_01].TheRace, iList_01[6]);
                                    iList_01[3] += 1;
                                }
                                else if (iList_01[6] == 0)
                                {
                                    iCurrentLap -= 1;
                                    int iLapX = iList_01[2] - Game.GameTime;
                                    iDeliverList.Add(iLapX);
                                    iList_01[2] = Game.GameTime;

                                    if (iCurrentLap < 0)
                                        iMissionSeq = 5;
                                    else
                                    {
                                        int iOnLap = iTotalLap - iCurrentLap;
                                        BigMessageThread.MessageInstance.ShowSimpleShard("LAP " + iOnLap + "/" + iTotalLap + "", "", 5000);
                                        iList_01[6] = CheckPointPro(false, MyMissions.RaceXM[iMissionVar_01].TheRace, iList_01[6]);
                                    }
                                }
                                else
                                    iList_01[6] = CheckPointPro(false, MyMissions.RaceXM[iMissionVar_01].TheRace, iList_01[6]);
                                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "CHECKPOINT_UNDER_THE_BRIDGE", "HUD_MINI_GAME_SOUNDSET", true);
                            }

                            Racist_PosTime(true);

                            ClearTheWay(true);
                        }
                        else if (iMissionSeq == 5)
                        {
                            iMissionSeq = 99;
                            RaceEnd(false);
                        }
                        else if (iMissionSeq == 45)
                        {
                            iMissionSeq = 99;
                            if (bIsVehPers)
                                VehTrackin_01.IsPersistent = false;
                            RaceEnd(true);
                        }
                    }       //Racist
                    else if (iJobType == 12)
                    {//bbomb find the bomb before timer runs out
                        if (iMissionSeq == 0)
                        {
                            iMissionSeq = 1;
                            vTarget_05 = vTarget_01.Around(25.00f);
                            vTarget_01.Z += 1;
                            AddTarget(vTarget_05, true, true, 60.00f, true, 486, MyLang.Maptext[26]);
                            iWait4Sec = Game.GameTime + 1000;
                            if (MySettings.FastTraveltoStart)
                                SlowFastTravel(World.GetNextPositionOnStreet(vFuMiss), 0.00f);
                            vLanLoc = vTarget_05;
                            iMishText = 87;
                        }
                        else if (iMissionSeq == 1)
                        {
                            if (bNotPause)
                            {
                                Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                bNotPause = false;
                            }
                            else if (Game.Player.Character.Position.DistanceTo(vTarget_01) < 155.00f)
                            {
                                iMissionSeq = 2;
                                RemoveTargets();
                                vTarget_01.Z -= 1;
                                Prop_01 = BuildProp("ex_prop_adv_case_sm_flash", vTarget_01, new Vector3(0.00f, 0.00f, fMission_01), false, false);
                            }
                        }
                        else if (iMissionSeq == 2)
                        {
                            if (iWait4Sec < Game.GameTime)
                            {
                                iMissionSeq = 3;
                                AddTarget(vTarget_05, true, false, 60.00f, true, -1, MyLang.Maptext[26]);
                                int iNoPed = RandInt(1, 4);
                                UseAmbPed(World.GetNextPositionOnSidewalk(vTarget_05), 60.00f, iNoPed, 4, "");
                                iTime_01[0] = Game.GameTime + 120000;
                                vLanLoc = Vector3.Zero;
                                iMishText = 88;
                            }
                        }
                        else if (iMissionSeq == 3)
                        {
                            if (iTime_01[0] > Game.GameTime)
                            {
                                if (PickupBling(Prop_01))
                                {
                                    iMissionSeq = 4;
                                    RemoveTargets();
                                    AddTarget(vTarget_02, true, true, 1.00f, false, 305, MyLang.Maptext[57]);
                                    vFuMiss = vTarget_03;
                                    iMishText = 89;
                                    BbBomb_BombSquad();
                                }
                                FindTheTime(iTime_01[0] - Game.GameTime, 9, "", true);
                            }
                            else
                            {
                                iMissionSeq = 45;
                                World.AddExplosion(vTarget_01, ExplosionType.PetrolPump, 10.00f, 10.00f, true, false);
                                Prop_01.Position = Vector3.Zero;
                            }
                        }
                        else if (iMissionSeq == 4)
                        {
                            World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(vTarget_02.X, vTarget_02.Y, vTarget_02.Z + 0.5f), Vector3.Zero, new Vector3(0.00f, 180.00f, 0.00f), new Vector3(0.50f, 0.50f, 0.50f), color: Color.Yellow);
                            if (Game.Player.Character.Position.DistanceTo(vTarget_02) < 2.00f)
                            {
                                iMishText = -1;
                                iMissionSeq = 5;
                                Prop_01 = null;
                                RemoveTargets();
                                iWait4Sec = Game.GameTime + 2000;
                                Game.Player.Character.Task.PlayAnimation("anim@mp_fireworks", "place_firework_3_box", 8.00f, 3000, true, 1.00f);
                            }
                        }
                        else if (iMissionSeq == 5)
                        {
                            if (iWait4Sec < Game.GameTime)
                            {
                                iMissionSeq = 6;
                                vTarget_02.Z = vTarget_02.Z - 1.05f;
                                BuildProp("ex_prop_adv_case_sm_flash", vTarget_02, Vector3.Zero, false, true);
                                ScaredBy(vTarget_02);
                            }
                        }
                        else if (iMissionSeq == 6)
                        {
                            if (bTestRun)
                            {
                                iMissionSeq = 99;
                                GameOver(false, "", false, iCashReward);
                            }
                            else
                            {
                                iCashReward = RandInt(4000, 5000);
                                NSCoinInvestments(true, 7, 9, "Mors Mutual Shares");
                                GameOver(false, "", false, iCashReward);
                            }
                        }
                        else if (iMissionSeq == 45)
                        {
                            if (!bTestRun)
                                NSCoinInvestments(false, 7, 11, "Mors Mutual Shares");
                            GameOver(true, "", false, 0);
                        }
                    }       //bBomb
                    else if (iJobType == 13)
                    {
                        if (iMissionSeq == 0)
                        {
                            iMissionSeq = 1;
                            TheYellowCorona(vTarget_01, 1.00f);
                            AddTarget(vTarget_01, true, true, 1.00f, false, 458, MyLang.Maptext[42]);

                            if (MySettings.FastTraveltoStart)
                                SlowFastTravel(vTarget_01, 0.00f);

                            iMishText = 90;
                        }
                        else if (iMissionSeq == 1)
                        {
                            if (bNotPause)
                            {
                                Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                bNotPause = false;
                            }
                            if (BeOnOff[0])
                            {
                                if (Game.Player.Character.Position.DistanceTo(vTarget_01) < 10.50f)
                                {
                                    BeOnOff[0] = false;
                                    DoorsNear(vTarget_01, 6.00f, false);
                                }
                            }
                            else if (Game.Player.Character.Position.DistanceTo(vTarget_01) < 2.50f)
                            {
                                if (!Game.Player.Character.IsInVehicle())
                                {
                                    iMissionSeq = 99;
                                    GunningIt(Game.Player.Character, 11);
                                    RemoveTargets();
                                    HitMan_SecurtyDetail(sMissionVar_01, VectorList_01, fList_01);
                                }
                            }
                        }
                        else if (iMissionSeq == 2)
                        {
                            if (PedList_01.Count > 4)
                            {
                                iMissionSeq = 3;

                                if (fList_01.Count > 0)
                                    PedScenario(Npc_01, "WORLD_HUMAN_AA_SMOKE", Npc_01.Position, fList_01[fList_01.Count - 1], false);
                                else
                                    PedScenario(Npc_01, "WORLD_HUMAN_AA_SMOKE", Npc_01.Position, 0.00f, false);

                                Npc_01.CurrentBlip.Color = BlipColor.Purple;
                                PedList_01[1].Task.Wait(-1);
                                PedList_01[2].Task.Wait(-1);

                                PedList_01[3].Position = VectorList_02[0];
                                iList_01[0] = PedWalkies(PedList_01[3], VectorList_02, 0);
                                PedList_01[4].Position = VectorList_03[0];
                                iList_01[1] = PedWalkies(PedList_01[4], VectorList_03, 0);
                                PedList_01[5].Position = VectorList_04[0];
                                iList_01[2] = PedWalkies(PedList_01[5], VectorList_04, 0);

                                iWait4Sec = Game.GameTime + 1000;
                                BeOnOff[1] = true;

                                iMishText = 91;
                            }
                        }
                        else if (iMissionSeq == 3)
                        {
                            World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(Npc_01.Position.X, Npc_01.Position.Y, Npc_01.Position.Z + 1.00f), Vector3.Zero, new Vector3(0.00f, 180.00f, Npc_01.Heading), new Vector3(0.50f, 0.50f, 0.50f), Color.Purple);
                            if (iWait4Sec < Game.GameTime && BeOnOff[1])
                            {
                                iWait4Sec = Game.GameTime + 1000;
                                BeOnOff[1] = false;
                                Hitman_ManualAI();
                            }
                            else if (Npc_01.IsDead)
                            {
                                if (Npc_01.WasKilledByStealth)
                                {
                                    iCashReward = RandInt(50000, 55000);
                                    
                                    if (bOnCayoLand)
                                        iAssMissionList[6] += 1;
                                    else if (iLocationX == 1)
                                        iAssMissionList[0] += 1;
                                    else if (iLocationX == 2)
                                        iAssMissionList[1] += 1;
                                    else if (iLocationX == 3)
                                        iAssMissionList[2] += 1;
                                    else if (iLocationX == 4)
                                        iAssMissionList[3] += 1;
                                    else if (iLocationX == 5)
                                        iAssMissionList[4] += 1;
                                    else
                                        iAssMissionList[5] += 1;

                                    SaveXmlSettings(MySettings, sNSPMSet);
                                    NSCoinInvestments(true, 7, 12, "LCN Shares");
                                    GameOver(false, "", false, iCashReward);
                                }
                                else
                                {
                                    iMissionSeq = 45;
                                }
                            }
                            else if (Game.Player.WantedLevel > 0)
                                Game.Player.WantedLevel = 0;
                            else if (Npc_01.Position.DistanceTo(Game.Player.Character.Position) < 10.00f)
                            {
                                if (Function.Call<bool>(Hash.GET_PED_STEALTH_MOVEMENT, Game.Player.Character.Handle))
                                    ControlerUI(MyLang.Context[19], 1);
                                else
                                    ControlerUI(MyLang.Context[20], 1);
                            }
                        }
                        else if (iMissionSeq == 40)
                        {
                            iMishText = -1;
                            iMissionSeq = 41;
                            iWait4Sec = Game.GameTime + 25000;
                        }
                        else if (iMissionSeq == 41)
                        {
                            if (iWait4Sec < Game.GameTime)
                                iMissionSeq = 45;
                        }
                        else if (iMissionSeq == 45)
                        {
                            Hitman_RemoveVisionCones();
                            GameOver(true, "", false, 0);
                        }
                    }       //Hitman
                    else if (iJobType == 14)
                    {
                        if (iMissionSeq == 0)
                        {
                            if (PedList_01.Count > 0)
                            {
                                iMissionSeq = 1;
                                if (MySettings.FastTraveltoStart)
                                    WarptoAnyVeh(VehTrackin_01, Game.Player.Character, 1);

                                iMishText = 92;
                            }
                        }
                        else if (iMissionSeq == 1)
                        {
                            if (bNotPause)
                            {
                                Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                bNotPause = false;
                            }

                            if (VehTrackin_01.IsDead || Npc_01.IsDead)
                                iMissionSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                            {
                                iMissionSeq = 2;
                                BeOnOff[4] = false;
                                BeOnOff[5] = true;
                                iMissionVar_03 = 0;
                                VehTrackin_01.CurrentBlip.Remove();
                                Game.Player.Character.CanBeDraggedOutOfVehicle = true;
                                iMissionVar_01 = VectorList_01.Count - 1;
                                vTarget_01 = VectorList_01[iMissionVar_01];
                                vTarget_01.Z -= 1.00f;
                                TheYellowCorona(vTarget_01, 5.00f);
                                AddTarget(vTarget_01, true, true, 1.00f, false, 408, MyLang.Maptext[58]);
                                iMishText = 93;
                            }
                            else if (Game.Player.Character.Position.DistanceTo(VehTrackin_01.Position) < 35.00F)
                            {
                                iMishText = 94;

                                if (!VehTrackin_01.IsOnAllWheels)
                                {
                                    VehTrackin_01.Position = vGetaway;
                                    VehTrackin_01.Rotation = new Vector3(0.00f, 0.00f, fGetDir);
                                }
                            }
                            else
                                iMishText = 92;
                        }
                        else if (iMissionSeq == 2)
                        {
                            if (VehTrackin_01.IsDead || Npc_01.IsDead)
                                iMissionSeq = 45;
                            else if (VehTrackin_01.Position.DistanceTo(vTarget_01) < 2.50f)
                            {
                                iMishText = 95;
                                if (!Game.Player.Character.IsInVehicle())
                                {
                                    iMissionSeq = 3;
                                    iMissionVar_01 -= 1;
                                    vTarget_01 = VectorList_01[iMissionVar_01];
                                    RemoveTargets();
                                }
                            }
                            else if (Target_01 == null)
                            {
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    VehTrackin_01.CurrentBlip.Remove();
                                    TheYellowCorona(vTarget_01, 5.00f);
                                    AddTarget(vTarget_01, true, true, 1.00f, false, 408, MyLang.Maptext[58]);
                                    iMishText = 93;
                                }
                            }
                            else
                            {
                                if (!Game.Player.Character.IsInVehicle())
                                {
                                    RemoveTargets();
                                    iMishText = 94;
                                    VehBlip(VehTrackin_01, true, true, 66, MyLang.Maptext[1]);
                                }
                                else if (BeOnOff[5])
                                {
                                    if (VehTrackin_01.Position.DistanceTo(vTarget_01) < 65.00f)
                                    {
                                        MoveThatCar(vTarget_01);
                                        BeOnOff[5] = false;
                                    }
                                }
                                else if (Game.Player.WantedLevel > 0)
                                    Game.Player.WantedLevel = 0;
                            }
                        }
                        else if (iMissionSeq == 3)
                        {
                            iMissionSeq = 4;
                            iMissionVar_01 -= 1;
                            Vector3 Vme = VectorList_01[iMissionVar_01];
                            Vme.Z = Vme.Z - 1.00f;
                            Prop_01 = BuildProp("hei_prop_hei_security_case", Vme, Vector3.Zero, true, false);
                            BeOnOff[0] = true;
                            AddTarget(Vme, false, true, 1.00f, false, 408, MyLang.Maptext[69]);
                            iMishText = 96;
                        }
                        else if (iMissionSeq == 4)
                        {
                            if (VehTrackin_01.IsDead || Npc_01.IsDead)
                                iMissionSeq = 45;
                            else if (PickupBling(Prop_01))
                            {
                                iMissionSeq = 5;
                                iGotYourVan = 0;
                                Prop_01 = null;
                                BeOnOff[4] = true;
                                BeOnOff[0] = false;
                                VehBlip(VehTrackin_01, true, true, 3, MyLang.Maptext[1]);
                                float fup = vTarget_01.DistanceTo(vTarget_03);
                                iCashReward = (int)fup;
                                iCashReward = iCashReward * 2;
                                RemoveTargets();
                                iMishText = 94;
                            }
                            else if (Game.Player.Character.Position.DistanceTo(vTarget_01) < 3.00f)
                            {
                                if (iWait4Sec < Game.GameTime)
                                {
                                    iWait4Sec = Game.GameTime + 1000;
                                    DoorsNear(vTarget_01, 8.00f, false);
                                }
                            }

                        }
                        else if (iMissionSeq == 5)
                        {
                            if (Game.Player.WantedLevel > 0)
                                Game.Player.WantedLevel = 0;

                            if (VehTrackin_01.IsDead || Npc_01.IsDead)
                                iMissionSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                            {
                                iMissionSeq = 6;
                                BeOnOff[4] = false;
                                VehTrackin_01.CurrentBlip.Remove();
                                TheYellowCorona(vTarget_03, 5.00f);
                                AddTarget(vTarget_03, true, true, 1.00f, false, 768, MyLang.Maptext[59]);
                                iMissionVar_02 = Game.GameTime + RandInt(15000, 25000);
                                iMishText = 97;
                            }
                        }
                        else if (iMissionSeq == 6)
                        {
                            if (Game.Player.WantedLevel > 0)
                                Game.Player.WantedLevel = 0;

                            if (VehTrackin_01.IsDead || Npc_01.IsDead)
                                iMissionSeq = 45;
                            else if (iMissionVar_02 < Game.GameTime)
                            {
                                iMissionSeq = 7;
                                BeOnOff[5] = true;
                                MoneyMan_Attacks();
                            }
                            else if (BeOnOff[4])
                            {
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[4] = false;
                                    VehTrackin_01.CurrentBlip.Remove();
                                    TheYellowCorona(vTarget_03, 5.00f);
                                    AddTarget(vTarget_03, true, true, 1.00f, false, 768, MyLang.Maptext[59]);
                                    iMishText = 97;
                                }
                            }
                            else
                            {
                                if (!Game.Player.Character.IsInVehicle())
                                {
                                    BeOnOff[4] = true;
                                    VehBlip(VehTrackin_01, true, true, 66, MyLang.Maptext[1]);
                                    RemoveTargets();
                                    iMishText = 94;
                                }
                            }
                        }
                        else if (iMissionSeq == 7)
                        {
                            if (Game.Player.WantedLevel > 0)
                                Game.Player.WantedLevel = 0;

                            if (VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else if (VehTrackin_01.Position.DistanceTo(vTarget_03) < 65.00f && BeOnOff[5])
                            {
                                MoveThatCar(vTarget_03);
                                BeOnOff[5] = false;
                            }
                            else if (VehTrackin_01.Position.DistanceTo(vTarget_03) < 2.50f)
                            {
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    iMishText = -1;
                                    StopHere(VehTrackin_01);
                                    iMissionSeq = 8;
                                    SlowFastTravel(vTarget_02, fphdirect);
                                    VehTrackin_01.FreezePosition = true;
                                    VehTrackin_01.Position = new Vector3(0.00f, 0.00f, 110.00f);
                                    FreeSeat(VehTrackin_01, 2, false);
                                    FreeSeat(VehTrackin_01, 3, false);
                                    FreeSeat(VehTrackin_01, 4, false);
                                }

                            }
                            else if (BeOnOff[4])
                            {
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[4] = false;
                                    BeOnOff[5] = true;
                                    BeOnOff[3] = false;
                                    VehTrackin_01.CurrentBlip.Remove();
                                    TheYellowCorona(vTarget_03, 5.00f);
                                    AddTarget(vTarget_03, true, true, 1.00f, false, 768, MyLang.Maptext[59]);
                                    iMishText = 97;
                                }
                                else if (BeOnOff[3])
                                {
                                    if (Game.GameTime < iGotYourVan)
                                        FindTheTime(iGotYourVan - Game.GameTime, 7, "", true);
                                    else
                                        VehTrackin_01.Explode();
                                }
                            }
                            else
                            {
                                if (!Game.Player.Character.IsInVehicle())
                                {
                                    BeOnOff[4] = true;
                                    iGotYourVan = 0;
                                    VehBlip(VehTrackin_01, true, true, 66, MyLang.Maptext[1]);
                                    RemoveTargets();
                                    iMishText = 94;
                                }
                            }
                            if (iWait4Sec < Game.GameTime && BeOnOff[1])
                                MoneyMan_GetJack();

                        }
                        else if (iMissionSeq == 8)
                        {
                            NSCoinInvestments(true, 5, 9, "Gruppe Sechs Shares");
                            GameOver(false, "", false, iCashReward);
                        }
                        else if (iMissionSeq == 45)
                        {
                            NSCoinInvestments(false, 6, 10, "Gruppe Sechs Shares");
                            GameOver(true, "", false, 0);
                        }
                    }       //MoneyMan
                    else if (iJobType == 15)
                    {
                        if (iLocationX == 1)
                        {
                            if (iMissionSeq == 0)
                            {
                                if (VehicleList_01.Count > 3)
                                {
                                    iMissionSeq = 1;
                                    Water01_BargeCars(VehTrackin_01, PropList_01[0], 1);
                                    Water01_BargeCars(VehTrackin_02, PropList_01[0], 3);
                                    Water01_BargeCars(VehTrackin_03, PropList_01[0], 2);
                                    AddTarget(vTarget_01, true, true, 1.00f, false, 356, MyLang.Maptext[60]);

                                    if (MySettings.FastTraveltoStart)
                                        WarptoAnyVeh(VehTrackin_05, Game.Player.Character, 1);

                                    iMishText = 98;
                                }
                            }
                            else if (iMissionSeq == 1)
                            {
                                if (bNotPause)
                                {
                                    Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                    bNotPause = false;
                                }
                                else if (World.GetDistance(vTarget_01, Game.Player.Character.Position) < 45.0f)
                                {
                                    iMissionSeq = 2;
                                    VehBlip(VehTrackin_05, true, true, 66, MyLang.Maptext[10]);
                                    RemoveTargets();
                                    iMishText = 99;
                                }
                            }
                            else if (iMissionSeq == 2)
                            {
                                if (VehTrackin_05.IsDead)
                                    iMissionSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(VehTrackin_05))
                                {
                                    iMissionSeq = 3;
                                    VehTrackin_05.CurrentBlip.Remove();
                                    Function.Call(Hash._SET_VEHICLE_ENGINE_POWER_MULTIPLIER, VehTrackin_05, 100.00f);
                                    AddTarget(Prop_03.Position, false, true, 1.00f, false, 68, MyLang.Maptext[38]);
                                    iMishText = 100;
                                }
                            }
                            else if (iMissionSeq == 3)
                            {
                                World.DrawMarker(MarkerType.UpsideDownCone, new Vector3(Prop_03.Position.X, Prop_03.Position.Y, Prop_03.Position.Z + 2.00f), Vector3.Zero, Vector3.Zero, new Vector3(1.00f, 1.00f, 1.00f), Color.Beige);
                                if (VehTrackin_05.IsDead)
                                    iMissionSeq = 45;
                                else if (World.GetDistance(Prop_02.Position, Prop_03.Position) < 60.00f)
                                {
                                    iMishText = 101;
                                    if (World.GetDistance(Prop_02.Position, Prop_03.Position) < 3.00f)
                                    {
                                        iMissionSeq = 4;
                                        RemoveTargets();
                                        Function.Call(Hash.SET_BOAT_ANCHOR, VehicleList_01[1], false);
                                        Water01_BargeTow(VehicleList_01[1], VehTrackin_05);
                                        vTarget_02.Z = vTarget_02.Z - 4.00f;
                                        TheYellowCorona(vTarget_02, 30.00f);
                                        AddTarget(vTarget_02, false, true, 1.00f, false, -1, MyLang.Maptext[42]);
                                        iMishText = 102;
                                    }
                                }
                                else
                                    iMishText = 100;
                            }
                            else if (iMissionSeq == 4)
                            {
                                if (VehTrackin_05.IsDead)
                                    iMissionSeq = 45;
                                else if (World.GetDistance(VehicleList_01[0].Position, vTarget_02) < 25.00f)
                                {
                                    iMissionSeq = 5;
                                    RemoveTargets();
                                    Game.FadeScreenOut(1000);
                                    Script.Wait(1000);
                                    VehicleList_01[1].Detach();
                                    VehTrackin_05.Position = vTarget_03;
                                    VehTrackin_05.Heading = fphdirect;
                                    GetOutofVeh(Game.Player.Character, 1);
                                    Function.Call(Hash.SET_BOAT_ANCHOR, VehTrackin_05, true);
                                    VehTrackin_05.LockStatus = VehicleLockStatus.LockedForPlayer;
                                    Water01_RentoMob();
                                    iWait4Sec = Game.GameTime + RandInt(10000, 15000);
                                    Game.FadeScreenIn(1000);
                                    iMishText = -1;
                                }
                            }
                            else if (iMissionSeq == 5)
                            {
                                if (Game.GameTime < iWait4Sec)
                                {
                                    iMissionSeq = 6;
                                    iMissionVar_02 = Game.GameTime + RandInt(10000, 15000);
                                    iMishText = 103;

                                    VehicleSpawn("Cargobob2", vTarget_04, 0.00f, false, true, false, false, 12, 0, 0, "", 4, false);
                                    BeOnOff[3] = true;
                                }
                                else if (iTracking < Game.GameTime)
                                    Water01_JetSkiTrackin();
                            }
                            else if (iMissionSeq == 6)
                            {
                                if (Game.Player.WantedLevel > 0)
                                    Game.Player.WantedLevel = 0;

                                if (VehTrackin_03.IsDead)
                                    iMissionSeq = 45;
                                else if (BeOnOff[1])
                                {
                                    if (VehTrackin_04.IsDead)
                                        iMissionSeq = 8;
                                    else if (VehTrackin_03.Position.DistanceTo(VehTrackin_04.Position) < 10.00f)
                                    {
                                        iMissionSeq = 7;
                                        VehTrackin_03.Detach();
                                        Function.Call(Hash._0x7BEB0C7A235F6F3B, VehTrackin_04, 0);
                                        Script.Wait(1200);
                                        Vector3 V3Me = Function.Call<Vector3>(Hash._0xCBDB9B923CACC92D, VehTrackin_04);
                                        VehTrackin_03.AttachTo(VehTrackin_04, VehTrackin_03.Handle, new Vector3(0.0f, 0.0f, -3.0f), new Vector3(0.0f, -15.0f, 0.0f));
                                        FlyAway(Npc_01, vTarget_04, 120.00f, 5.00f);
                                    }
                                    else
                                    {
                                        if (BeOff[1] && VehTrackin_03.Position.DistanceTo(VehTrackin_04.Position) < 45.00f)
                                        {
                                            iMishText = 104;
                                            BeOff[1] = false;
                                        }
                                        if (iTracking < Game.GameTime)
                                            Water01_JetSkiTrackin();
                                    }
                                    Water01_BargeFloat();
                                }
                            }
                            else if (iMissionSeq == 7)
                            {
                                if (Game.Player.WantedLevel > 0)
                                    Game.Player.WantedLevel = 0;
                                if (VehTrackin_03.IsDead || VehicleList_01[0].Position.DistanceTo(VehTrackin_04.Position) > 200.00f || VehTrackin_04.IsDead)
                                    iMissionSeq = 40;
                                else if (VehTrackin_04.Position.Z < 200.00f && !BeOnOff[2])
                                {
                                    BeOnOff[2] = true;
                                    Vector3 V3Fly = VehTrackin_04.Position;
                                    V3Fly.Z = V3Fly.Z + 200.00f;
                                    FlyAway(Npc_01, V3Fly, 75.00f, 5.00f);
                                }
                                else if (VehTrackin_04.Position.Z > 200.00f && BeOnOff[2])
                                {
                                    BeOnOff[2] = false;
                                    FlyAway(Npc_01, vTarget_04, 75.00f, 5.00f);
                                }
                                Water01_BargeFloat();
                            }
                            else if (iMissionSeq == 8)
                            {
                                Game.FadeScreenOut(1000);
                                Script.Wait(1000);
                                CleanUpPeds();
                                Water01_HaveACar();
                            }
                            else if (iMissionSeq == 10)
                            {
                                iCashReward = RandInt(10000, 12000);
                                iPegsboatsTest = iPegsboats;
                                iGotPegsus = iProcessForPegs;
                                WriteNSMDat(1, iGotPegsus);
                                WriteNSMDat(6, iPegsboatsTest);
                                NSCoinInvestments(true, 5, 9, "Legendary Motorsport Shares");
                                GameOver(false, "", false, iCashReward);
                            }
                            else if (iMissionSeq == 40)
                            {
                                Water01_BlowShitUp();
                            }
                            else if (iMissionSeq == 45)
                            {
                                NSCoinInvestments(false, 7, 9, "Legendary Motorsport Shares");
                                GameOver(true, "", false, 0);
                            }
                        }       //Tug Barge
                        else if (iLocationX == 2)
                        {
                            if (iMissionSeq == 0)
                            {
                                iMissionSeq = 1;
                                MultiBlimbs(vTarget_02, 612, false, MyLang.Maptext[118]);
                                MultiBlimbs(vTarget_03, 427, false, MyLang.Maptext[119]);
                                MultiBlimbs(vTarget_04, 534, false, MyLang.Maptext[120]);
                                iMishText = 105;
                            }
                            else if (iMissionSeq == 1)
                            {
                                if (vTarget_02.DistanceTo(Game.Player.Character.Position) < 75.00)
                                {
                                    iMissionSeq = 2;
                                    iMissionVar_01 = 1;
                                    VehicleSpawn("SeaSparrow", vTarget_02, fList_01[0], false, false, false, true, 2, 9, 66, MyLang.Maptext[5], 1, false);
                                }
                                else if (vTarget_03.DistanceTo(Game.Player.Character.Position) < 75.00)
                                {
                                    iMissionSeq = 2;
                                    iMissionVar_01 = 2;
                                    VehicleSpawn("Jetmax", vTarget_03, fList_01[1], false, false, false, true, 0, 0, 66, MyLang.Maptext[17], 1, true);
                                }
                                else if (vTarget_04.DistanceTo(Game.Player.Character.Position) < 75.00)
                                {
                                    iMissionSeq = 2;
                                    iMissionVar_01 = 3;
                                    VehicleSpawn("Technical2", vTarget_04, fList_01[2], false, false, false, true, 0, 0, 66, MyLang.Maptext[23], 1, true);
                                }
                            }
                            else if (iMissionSeq == 2)
                            {
                                if (VehicleList_01.Count > 0)
                                {
                                    iMissionSeq = 3;
                                    CleanFakeBlips();
                                    if (iMissionVar_01 == 1)        //SeaSparrow
                                        iMishText = 106;
                                    else if (iMissionVar_01 == 2)   //Jetmax
                                        iMishText = 107;
                                    else
                                        iMishText = 108;            //Technical2
                                }
                            }
                            else if (iMissionSeq == 3)
                            {
                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    iMissionSeq = 4;
                                    VehTrackin_01.CurrentBlip.Remove();
                                    AddTarget(vTarget_01, false, true, 1.00f, false, 310, MyLang.Maptext[78]);
                                    iMishText = 109;
                                }
                            }
                            else if (iMissionSeq == 4)
                            {
                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    if (Target_01 == null)
                                    {
                                        VehTrackin_01.CurrentBlip.Remove();
                                        AddTarget(vTarget_01, false, true, 1.00f, false, 310, MyLang.Maptext[78]);
                                        iMishText = 109;
                                    }
                                    else if (Game.Player.Character.Position.DistanceTo(vTarget_01) < 99.00f)
                                    {
                                        iMissionSeq = 5;
                                        RemoveTargets();
                                        Water02_YachtAttack();
                                        iWait4Sec = Game.GameTime + 1000;
                                        iMishText = 110;
                                    }
                                }
                                else
                                {
                                    if (Target_01 != null)
                                    {
                                        RemoveTargets();
                                        VehBlip(VehTrackin_01, true, false, 66, "");
                                        if (iMissionVar_01 == 1)        //SeaSparrow
                                            iMishText = 106;
                                        else if (iMissionVar_01 == 2)   //Jetmax
                                            iMishText = 107;
                                        else
                                            iMishText = 108;            //Technical2
                                    }
                                }
                            }
                            else if (iMissionSeq == 5)
                            {
                                if (Game.Player.WantedLevel > 0)
                                    Game.Player.WantedLevel = 0;
                                ttTextBar_01.Text = "" + PedList_01.Count + "/20";
                                VTBTimerPool.Draw();
                                if (PedList_01.Count > 0)
                                {
                                    if (iTracking < Game.GameTime)
                                        SimpleTracker();
                                }
                                else
                                    iMissionSeq = 6;
                            }
                            else if (iMissionSeq == 6)
                            {
                                if (bYachtOwner)
                                {
                                    iCashReward = 20000;
                                    iMissionSeq = 7;
                                    WriteNSMDat(0, iProcessForYacht);
                                    Water02_BoatLaunch();
                                }
                                else
                                {
                                    Vector3 Vpos = new Vector3(-1848.826f, -1200.298f, 19.14339f);
                                    if (bOldYacht || !MySettings.PreLoadOnline || !File.Exists(sNSPMYacht))
                                    {
                                        SlowFastTravel(Vpos, 165.84f);
                                        Water02_AddHeistYacht(false);
                                        iCashReward = 20000;
                                        iMissionSeq = 7;
                                    }
                                    else
                                    {
                                        ReadNSMPDat();
                                        iMissionSeq = 99;
                                        ControlSelect(10, false);
                                    }
                                }
                            }
                            else if (iMissionSeq == 7)
                            {
                                GameOver(false, "", false, iCashReward);
                            }
                            else if (iMissionSeq == 45)
                            {
                                CleanFakeBlips();
                                if (bOldYacht)
                                    Water02_AddHeistYacht(false);
                                else if (bYachtOwner)
                                    WriteNSMDat(0, iOwnaYacht);

                                GameOver(true, "", false, 0);
                            }
                        }  //Defend yacht
                        else if (iLocationX == 3)
                        {
                            if (iMissionSeq == 0)
                            {
                                if (PedList_01.Count > 0)
                                {
                                    iMissionSeq = 1;

                                    if (MySettings.FastTraveltoStart)
                                        WarptoAnyVeh(VehTrackin_01, Game.Player.Character, 1);
                                    iMishText = 111;
                                }
                            }
                            else if (iMissionSeq == 1)
                            {
                                if (VehTrackin_01.IsDead || Npc_01.IsDead)
                                    iMissionSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    iMissionSeq = 2;
                                    Function.Call(Hash.SET_BOAT_ANCHOR, VehTrackin_01, false);
                                    iMissionVar_01 = iDeliverList.Count - 1;
                                    vTarget_01 = VectorList_01[iDeliverList[iMissionVar_01]];
                                    NPCSpawn(RandNPC(23), VectorList_02[iDeliverList[iMissionVar_01]], fList_01[iDeliverList[iMissionVar_01]], false, 130, 21, 0, null, 1, false, 0, 0, "");
                                    VehTrackin_01.CurrentBlip.Remove();
                                    BtSlideBar.BackgroundColor = Color.Black;
                                    BtSlideBar.ForegroundColor = Color.Purple;
                                    BtSlideBar.Percentage = 0.01f;
                                    AddTarget(vTarget_01, false, false, 45.00f, true, 459, MyLang.Maptext[26]);
                                }
                                else if (Game.Player.Character.Position.DistanceTo(VehTrackin_01.Position) < 25.00f)
                                    iMishText = 112;
                                else
                                    iMishText = 111;
                            }
                            else if (iMissionSeq == 2)
                            {
                                if (BeOnOff[1])
                                    iMishText = 113;
                                else
                                    iMishText = 114;

                                if (BeOnOff[0])
                                {
                                    if (VehTrackin_01.IsInWater)
                                        BeOnOff[0] = false;
                                    else
                                    {
                                        if (iWait4Sec < Game.GameTime)
                                        {
                                            iWait4Sec = Game.GameTime + 15000;
                                            iMissionSeq = 15;
                                        }
                                    }
                                }
                                else
                                {
                                    if (!VehTrackin_01.IsInWater)
                                    {
                                        iWait4Sec = Game.GameTime + 5000;
                                        BeOnOff[0] = true;
                                    }
                                }
                                if (VehTrackin_01.IsDead || Npc_01.IsDead)
                                    iMissionSeq = 45;
                                else if (VehTrackin_01.Position.DistanceTo(vTarget_01) < 45.00f)
                                {
                                    float fdist = World.GetDistance(VehTrackin_01.Position, vTarget_01) / 45.00f;
                                    fdist = 1.00f - fdist;
                                    if (fdist < 0.01f)
                                        fdist = 0.01f;
                                    BtSlideBar.Percentage = fdist;
                                    if (fdist > 0.90f)
                                    {
                                        if (BeOnOff[1])
                                        {
                                            int iTotal = iWait4Sec - Game.GameTime;
                                            FindTheTime(iTotal, 9, "", false);
                                            if (iWait4Sec < Game.GameTime)
                                            {
                                                if (iMissionVar_01 > 0)
                                                {
                                                    RemoveTargets();
                                                    iMissionVar_01 = iMissionVar_01 - 1;
                                                    vTarget_01 = VectorList_01[iDeliverList[iMissionVar_01]];
                                                    NPCSpawn(RandNPC(23), VectorList_02[iDeliverList[iMissionVar_01]], fList_01[iDeliverList[iMissionVar_01]], false, 130, 21, 0, null, 0, false, 0, 0, "");
                                                    BtSlideBar.Percentage = 0.01f;
                                                    VTBTimerPool.Remove(ttTextBar_02);
                                                    AddTarget(vTarget_01, false, false, 45.00f, true, 459, MyLang.Maptext[26]);
                                                    BtSlideBar.ForegroundColor = Color.Purple;
                                                    BeOnOff[1] = false;
                                                }
                                                else
                                                {
                                                    RemoveTargets();
                                                    iMissionSeq = 3;
                                                    BeOnOff[1] = false;
                                                    AddTarget(vTarget_02, false, true, 1.00f, false, 371, MyLang.Maptext[60]);
                                                    TheYellowCorona(vTarget_02, 5.00f);

                                                    iMishText = 115;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            iWait4Sec = Game.GameTime + 5000;
                                            BtSlideBar.ForegroundColor = Color.Green;
                                            VTBTimerPool.Add(ttTextBar_02);
                                            BeOnOff[1] = true;
                                        }
                                    }
                                    else
                                    {
                                        BtSlideBar.ForegroundColor = Color.Purple;
                                        VTBTimerPool.Remove(ttTextBar_02);
                                        BeOnOff[1] = false;
                                    }
                                }
                                else
                                {
                                    if (VehTrackin_01.Position.Z + 5 < vTarget_01.Z)
                                        iMissionSeq = 45;
                                }
                                VTBTimerPool.Draw();
                            }
                            else if (iMissionSeq == 3)
                            {
                                if (BeOnOff[0])
                                {
                                    if (VehTrackin_01.IsInWater)
                                        BeOnOff[0] = false;
                                    else
                                    {
                                        if (iWait4Sec < Game.GameTime)
                                        {
                                            iWait4Sec = Game.GameTime + 15000;
                                            iMissionSeq = 16;
                                        }
                                    }
                                }
                                else
                                {
                                    if (!VehTrackin_01.IsInWater)
                                    {
                                        iWait4Sec = Game.GameTime + 5000;
                                        BeOnOff[0] = true;
                                    }
                                }

                                if (VehTrackin_01.IsDead || Npc_01.IsDead)
                                    iMissionSeq = 45;
                                else if (VehTrackin_01.Position.DistanceTo(vTarget_02) < 3.50f)
                                {
                                    iMissionSeq = 4;
                                    RemoveTargets();
                                }
                            }
                            else if (iMissionSeq == 4)
                            {
                                iMissionSeq = 10;
                                StopHere(VehTrackin_01);
                                Vector3 Vpos = new Vector3(-2081.897f, 2609.123f, 3.083975f);
                                SlowFastTravel(Vpos, 89.72623f);
                                FreeSeat(VehTrackin_01, 2, false);
                                FreeSeat(VehTrackin_01, 3, false);
                                FreeSeat(VehTrackin_01, 4, false);
                                NSCoinInvestments(true, 7, 12, "White Water Activity Center Shares");
                                VehTrackin_01.Position = VectorList_01[0];
                                Vector3 Ding01 = new Vector3(-2091.959f, 2613.7197f, 0.2088f);
                                Vector3 Ding02 = new Vector3(-2096.607f, 2612.9768f, 0.2088f);
                                Vector3 Ding03 = new Vector3(-2102.579f, 2612.5708f, 0.2088f);
                                Vector3 Ding04 = new Vector3(-2107.394f, 2611.4148f, 0.2088f);
                                VehicleSpawn("DINGHY", Ding01, 15.13f, false, false, false, false, 9, 10, 0, "", 0, false);
                                VehicleSpawn("DINGHY2", Ding02, 15.13f, false, false, false, false, 9, 11, 0, "", 0, false);
                                VehicleSpawn("DINGHY3", Ding03, 15.13f, false, false, false, false, 9, 12, 0, "", 0, false);
                                VehicleSpawn("DINGHY4", Ding04, 15.13f, false, false, false, false, 9, 13, 0, "", 0, false);
                            }
                            else if (iMissionSeq == 10)
                            {
                                iPegsboatsTest = iPegsboats;
                                iGotPegsus = iProcessForPegs;
                                WriteNSMDat(1, iGotPegsus);
                                WriteNSMDat(6, iPegsboatsTest);
                                GameOver(false, "", false, iCashReward);
                            }
                            else if (iMissionSeq == 15)
                            {
                                if (VehTrackin_01.IsDead || Npc_01.IsDead || iWait4Sec < Game.GameTime)
                                    iMissionSeq = 45;
                                else if (VehTrackin_01.IsInWater)
                                    iMissionSeq = 2;
                            }
                            else if (iMissionSeq == 16)
                            {
                                if (VehTrackin_01.IsDead || Npc_01.IsDead || iWait4Sec < Game.GameTime)
                                    iMissionSeq = 45;
                                else if (VehTrackin_01.IsInWater)
                                    iMissionSeq = 3;
                            }
                            else if (iMissionSeq == 45)
                            {
                                NSCoinInvestments(false, 9, 14, "White Water Activity Center Shares");
                                GameOver(true, "", false, 0);
                            }
                        }  //Phishing
                        else if (iLocationX == 4)
                        {
                            if (iMissionSeq == 0)
                            {
                                if (VehicleList_01.Count > 0)
                                {
                                    iMissionSeq = 1;

                                    if (MySettings.FastTraveltoStart)
                                        WarptoAnyVeh(VehTrackin_01, Game.Player.Character, 1);
                                    iMishText = 116;
                                }
                            }
                            else if (iMissionSeq == 1)
                            {
                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    iMissionSeq = 99;
                                    VehTrackin_01.CurrentBlip.Remove();
                                    iList_01[1] = -1;
                                    Water04_AddTheRubbish();
                                    iMishText = 118;
                                }
                                else if (Game.Player.Character.Position.DistanceTo(VehTrackin_01.Position) < 55.00f)
                                    iMishText = 117;
                                else
                                    iMishText = 116;
                            }
                            else if (iMissionSeq == 2)
                            {
                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (iList_01[0] > Game.GameTime && iMissionVar_01 > 0)
                                {
                                    FindTheTime(iList_01[0] - Game.GameTime, 9, "", true);
                                    if (iList_01[1] > 0)
                                    {
                                        iList_01[1] -= 1;
                                        if (PropList_01[iList_01[1]].Exists())
                                        {
                                            if (!PropList_01[iList_01[1]].IsPersistent)
                                            {
                                                iMissionVar_01 = iMissionVar_01 - 1;
                                                PropList_01[iList_01[1]].Delete();
                                                PropList_01.Remove(PropList_01[iList_01[1]]);
                                            }

                                        }
                                        else
                                        {
                                            iMissionVar_01 = iMissionVar_01 - 1;
                                            PropList_01[iList_01[1]].Delete();
                                            PropList_01.Remove(PropList_01[iList_01[1]]);
                                            ttTextBar_01.Text = "" + iMissionVar_01 + "/50";
                                        }
                                    }
                                    else
                                        iList_01[1] = PropList_01.Count;
                                }
                                else
                                {
                                    iMissionSeq = 3;
                                    Water04_RemoveRubbish();
                                }
                            }
                            else if (iMissionSeq == 3)
                            {
                                if (BeOnOff[0])
                                {
                                    if (iMissionVar_01 == 0)
                                    {
                                        iMissionSeq = 99;
                                        iCashReward = RandInt(5000, 9000);
                                        iPegsimortasTest = iPegsimortas;
                                        iGotPegsus = iProcessForPegs;
                                        WriteNSMDat(1, iGotPegsus);
                                        WriteNSMDat(7, iPegsimortasTest);
                                        NSCoinInvestments(true, 9, 21, "DockTease Shares");
                                        GameOver(false, "", false, iCashReward);
                                    }
                                    else
                                        iMissionSeq = 45;
                                }
                            }
                            else if (iMissionSeq == 45)
                            {
                                GameOver(true, "", false, 0);
                            }
                        }  //Rubish collection
                        else if (iLocationX == 5)
                        {
                            if (iMissionSeq == 0)
                            {
                                iMissionSeq = 1;

                                Vector3 vBt_01 = new Vector3(1306.057f, 4219.996f, 29.88048f);
                                float fBT_01 = 171.1544f;
                                VehicleSpawn(RanVehListX(1, 4, true), vBt_01, fBT_01, false, false, false, false, 9, 0, 0, "", 0, false);
                                Vector3 vBt_02 = new Vector3(1297.212f, 4211.022f, 30.71615f);
                                float fBT_02 = 261.1423f;
                                VehicleSpawn(RanVehListX(1, 4, true), vBt_02, fBT_02, false, false, false, false, 9, 0, 0, "", 0, false);
                                Vector3 vBt_03 = new Vector3(1302.542f, 4266.792f, 30.43473f);
                                float fBT_03 = 167.3074f;
                                VehicleSpawn(RanVehListX(1, 4, true), vBt_03, fBT_03, false, false, false, false, 9, 0, 0, "", 0, false);
                                Vector3 vBt_04 = new Vector3(1295.325f, 4239.063f, 30.45684f);
                                float fBT_04 = 167.0434f;
                                VehicleSpawn(RanVehListX(1, 4, true), vBt_04, fBT_04, false, false, false, false, 9, 0, 0, "", 0, false);
                                Vector3 vBt_05 = new Vector3(1344.052f, 4224.578f, 30.24381f);
                                float fBT_05 = 167.3387f;
                                VehicleSpawn(RanVehListX(1, 4, true), vBt_05, fBT_05, false, false, false, false, 9, 0, 0, "", 0, false);
                                Vector3 vBt_06 = new Vector3(1318.892f, 4235.62f, 29.95362f);
                                float fBT_06 = 256.2925f;
                                VehicleSpawn(RanVehListX(1, 4, true), vBt_06, fBT_06, false, false, false, false, 9, 0, 0, "", 0, false);

                                AddTarget(vTarget_01, true, true, 1.00f, false, 371, MyLang.Maptext[61]);

                                if (MySettings.FastTraveltoStart)
                                    SlowFastTravel(vTarget_01, 0.00f);
                                iMishText = 119;
                            }
                            else if (iMissionSeq == 1)
                            {
                                if (Game.Player.Character.Position.DistanceTo(vTarget_01) < 55.00f)
                                {
                                    iMissionSeq = 2;
                                    BeOnOff[0] = false;
                                    iWait4Sec = 0;
                                    RemoveTargets();
                                    Water05_BlipTheBoats();
                                    VehTrackin_01.FreezePosition = false;
                                    iMishText = 120;
                                }
                            }
                            else if (iMissionSeq == 2)
                            {
                                if (iWait4Sec < Game.GameTime)
                                {
                                    iWait4Sec = Game.GameTime + 1000;
                                    Water05_InYourBoat();
                                }
                            }
                            else if (iMissionSeq == 3)
                            {
                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (VehTrackin_01.Position.DistanceTo(vTarget_01) < 5.00f)
                                {
                                    iMissionSeq = 4;
                                    if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                        Function.Call(Hash.DETACH_VEHICLE_FROM_ANY_CARGOBOB, VehTrackin_01);
                                    else
                                    {
                                        StopHere(VehTrackin_01);
                                        SlowFastTravel(vTarget_02, 89.72623f);
                                        FreeSeat(VehTrackin_01, 2, false);
                                        FreeSeat(VehTrackin_01, 3, false);
                                        FreeSeat(VehTrackin_01, 4, false);
                                    }
                                    Function.Call(Hash.SET_BOAT_ANCHOR, VehTrackin_01, true);
                                }
                                else
                                {
                                    if (Game.Player.Character.IsInVehicle(VehTrackin_01) || Water05_CargoBobed(VehTrackin_01))
                                    {
                                        if (Target_01 == null)
                                        {
                                            VehTrackin_01.CurrentBlip.Remove();
                                            AddTarget(vTarget_01, true, true, 1.00f, false, 356, MyLang.Maptext[0]);
                                            TheYellowCorona(vTarget_01, 5.00f);
                                            iMishText = 121;
                                            BeOnOff[0] = false;
                                        }
                                    }
                                    else
                                    {
                                        if (Target_01 != null)
                                        {
                                            RemoveTargets();
                                            VehBlip(VehTrackin_01, true, false, 3, MyLang.Maptext[0]);
                                            iMishText = 112;
                                        }
                                    }

                                }
                            }
                            else if (iMissionSeq == 4)
                            {
                                iCashReward = (iList_01[0] - Game.GameTime) / 10 * -1;
                                iPegsboatsTest = iPegsboats;
                                iGotPegsus = iProcessForPegs;
                                WriteNSMDat(1, iGotPegsus);
                                WriteNSMDat(6, iPegsboatsTest);
                                NSCoinInvestments(true, 9, 14, "DockTease Shares");
                                GameOver(false, "", false, iCashReward);
                            }
                            else if (iMissionSeq == 45)
                            {
                                NSCoinInvestments(false, 1, 4, "DockTease Shares");
                                GameOver(true, "", false, 0);
                            }
                        }  //Boat delivery
                        else
                        {
                            if (Game.Player.WantedLevel > 0)
                                Game.Player.WantedLevel = 0;
                            if (iMissionSeq == 0)
                            {
                                if (VehicleList_01.Count > 0)
                                {
                                    if (MySettings.FastTraveltoStart)
                                        WarptoAnyVeh(VehTrackin_01, Game.Player.Character, 1);
                                    iMishText = 122;
                                    World.TransitionToWeather(Weather.Clear, 1.00f);
                                    Function.Call(Hash._0xC54A08C85AE4D410, 1.50f);

                                    iMissionSeq = 1;
                                }
                            }
                            else if (iMissionSeq == 1)
                            {
                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    VehTrackin_01.CurrentBlip.Remove();
                                    AddTarget(vTarget_01, true, true, 1.00f, false, -1, MyLang.Maptext[42]);
                                    iMishText = 123;
                                    iMissionSeq = 2;
                                }
                                else if (Game.Player.Character.Position.DistanceTo(VehTrackin_01.Position) < 35.00f)
                                    iMishText = 124;
                                else
                                    iMishText = 122;
                            }
                            else if (iMissionSeq == 2)
                            {
                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (Game.Player.Character.Position.DistanceTo(vTarget_01) < 15.00f || VehTrackin_01.IsInWater)
                                {
                                    iMishText = 125;
                                    ControlerUI(MyLang.Context[21], 1);
                                    RemoveTargets();
                                    AddTarget(vTarget_05, false, true, 1.00f, false, 760, MyLang.Maptext[13]);
                                    iMissionSeq = 3;
                                }
                            }
                            else if (iMissionSeq == 3)
                            {
                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (Game.Player.Character.Position.DistanceTo(vTarget_05) < 85.00f)
                                {
                                    Water06_SubCam();
                                    RemoveTargets();
                                    iMishText = 126;
                                    iMissionSeq = 4;
                                }
                            }
                            else if (iMissionSeq == 4)
                            {
                                if (Game.Player.Character.Position.DistanceTo(Npc_02.Position) < 25.00f && Game.Player.Character.Position.Z < Npc_02.Position.Z + 1.00f)
                                {
                                    if (Npc_02.IsDead)
                                    {
                                        iMissionSeq = 45;
                                        SlowFastTravel(vTarget_04, 0.00f);
                                    }
                                    else if (Game.Player.IsTargetting(Npc_02))
                                    {
                                        if (iMissionVar_01 < Game.GameTime)
                                        {
                                            iMishText = 126;
                                            NPCSpawn(RandNPC(33), VectorList_01[3], fList_01[3], false, 180, 20, 0, null, 8, true, 1, 0, "");//offence
                                            AddTarget(vTarget_02, false, true, 1.00f, false, 606, MyLang.Maptext[42]);
                                            Npc_02.CurrentBlip.Remove();
                                            iMissionSeq = 5;
                                        }

                                    }
                                    else
                                        iMissionVar_01 = Game.GameTime + 4000;

                                    if (BeOff[0])
                                    {
                                        ControlerUI(MyLang.Context[22], 5000);

                                        iMishText = 127;
                                        BeOff[0] = false;
                                    }
                                }
                                else
                                    iMishText = 126;

                                if (iTracking < Game.GameTime)
                                    SimpleTracker();
                            } 
                            else if (iMissionSeq == 5)
                            {
                                iMishText = 126;
                                if (Game.Player.Character.Position.DistanceTo(vTarget_02) < 5.00f && Game.Player.Character.Position.Z > vTarget_02.Z)
                                {
                                    iMishText = 129;
                                    TheYellowCorona(vTarget_02, 1.00f);
                                    iMissionSeq = 6;
                                }
                                else if (PedList_01.Count > 0)
                                {
                                    if (iTracking < Game.GameTime)
                                        SimpleTracker();
                                }
                            }
                            else if (iMissionSeq == 6)
                            {
                                if (Game.Player.Character.Position.DistanceTo(vTarget_02) < 1.50f)
                                {
                                    if (iMissionVar_01 < Game.GameTime)
                                    {
                                        RemoveTargets();
                                        CleanPedBlips(1);
                                        ForceAnim(Game.Player.Character, "anim@gangops@submarine@controlroom@commandconsole@", "intro", vTarget_02, new Vector3(0.00f, 0.00f, 271.2907f));
                                        Script.Wait(2500);
                                        Game.Player.Character.Task.ClearAllImmediately();

                                        iMishText = 130;

                                        Vector3 Posy = new Vector3(513.6042f, 4836.958f, -62.6013f);
                                        Vector3 Rota = new Vector3(0.00f, 90.00f, 180.00f);

                                        BuildProp("hei_prop_hst_usb_drive", Posy, Rota, true, false);

                                        Npc_01 = NPCSpawn("csb_bogdan", VectorList_01[4], fList_01[4], false, 180, 20, 0, null, 8, true, 1, 0, MyLang.Maptext[115]);//offence
                                        iMissionSeq = 7;
                                    }
                                }
                                else
                                    iMissionVar_01 = Game.GameTime + 2000;

                                if (PedList_01.Count > 0)
                                {
                                    if (iTracking < Game.GameTime)
                                        SimpleTracker();
                                }
                            }
                            else if (iMissionSeq == 7)
                            {
                                if (Npc_01.IsDead)
                                {
                                    AddTarget(vTarget_03, false, true, 1.00f, false, 515, MyLang.Maptext[42]);
                                    TheYellowCorona(vTarget_03, 1.00f);
                                    iMishText = 131;
                                    iMissionSeq = 8;
                                }
                                if (PedList_01.Count > 0)
                                {
                                    if (iTracking < Game.GameTime)
                                        SimpleTracker();
                                }
                            }
                            else if (iMissionSeq == 8)
                            {
                                if (Game.Player.Character.Position.DistanceTo(vTarget_03) < 1.50f)
                                {
                                    SlowFastTravel(vTarget_04, 308.3964f);
                                    iMissionSeq = 10;
                                }
                            }
                            else if (iMissionSeq == 10)
                            {
                                iCashReward = 500000;
                                Function.Call(Hash._0xC54A08C85AE4D410, 0.00f);
                                iPegsboatsTest = iPegsboats;
                                iGotPegsus = iProcessForPegs;
                                WriteNSMDat(1, iGotPegsus);
                                WriteNSMDat(6, iPegsboatsTest);
                                NSCoinInvestments(false, 15, 21, "Merryweather Security");
                                GameOver(false, "", false, iCashReward);
                            }
                            else if (iMissionSeq == 45)
                            {
                                iMissionSeq = 99;
                                Function.Call(Hash._0xC54A08C85AE4D410, 0.00f);
                                GameOver(true, "", false, 0);
                            }
                        }                       //Sub fun.
                    }       //Watermess
                    else if (iJobType == 16)
                    {
                        if (iMissionSeq == 0)
                        {
                            iWait4Sec = Game.GameTime + RandInt(20000, 40000);
                            fMission_01 = RandFlow(500.00f, 1000.00f);
                            VehTrackin_01 = null;
                            iCashBouns = 0;
                            vTarget_01 = Game.Player.Character.Position;
                            VTBTimerPool.Add(BtSlideBar);
                            if (iList_01[0] != 0)
                                Game.FadeScreenIn(1000);
                            if (iList_01[0] != 3)
                                iMishText = 132;
                            CleanMultiPed(false, true);
                            iMissionSeq = 1;
                        }
                        else if (iMissionSeq == 1)
                        {
                            if (iList_01[0] < 3)
                            {
                                if (iWait4Sec < Game.GameTime && Game.Player.Character.Position.DistanceTo(vTarget_01) > fMission_01 && World.GetNextPositionOnStreet(Game.Player.Character.Position).DistanceTo(Game.Player.Character.Position) < 95.00f)
                                {
                                    iMissionSeq = 2;
                                    VTBTimerPool.Remove(BtSlideBar);
                                    int iGroup = 0;
                                    if (sCustomCarz.Count > 0)
                                        iGroup = FindRandom(59, 1, 10);
                                    else
                                        iGroup = FindRandom(60, 1, 9);
                                    string sMyCar = ImportsExpo_CarList(iGroup);
                                    iList_02.Add(iGroup);
                                    sList_01.Add(sMyCar);

                                    if (FindRandom(88, 1, 10) < 5)
                                        SearchVeh(35.00f, 125.00f, sMyCar, false, false, true, true, 0, 0, 3, MyLang.Maptext[14], 1, true, false);
                                    else
                                        SearchVeh(35.00f, 125.00f, sMyCar, false, false, true, true, 25, 0, 11, MyLang.Maptext[14], 1, true, true);

                                    iCrash4Cash = 10000;
                                    iMishText = 133;
                                }
                                else
                                {
                                    float fdist = World.GetDistance(Game.Player.Character.Position, vTarget_01) / fMission_01;
                                    if (fdist > 1.00f)
                                        fdist = 1.00f;
                                    BtSlideBar.Percentage = fdist;
                                    VTBTimerPool.Draw();
                                }
                            }
                            else
                                iMissionSeq = 10;
                        }
                        else if (iMissionSeq == 2)
                        {
                            if (VehTrackin_01 != null)
                            {
                                World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(VehTrackin_01.Position.X, VehTrackin_01.Position.Y, VehTrackin_01.Position.Z + 2.00f), Vector3.Zero, new Vector3(0.00f, 180.00f, VehTrackin_01.Heading), new Vector3(0.50f, 0.50f, 0.50f), color: Color.CadetBlue);

                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    VehTrackin_01.CurrentBlip.Remove();
                                    ImportsExpo_Targit();
                                    BeOnOff[0] = false;
                                    fVehicleDamage = VehTrackin_01.BodyHealth + VehTrackin_01.EngineHealth + VehTrackin_01.PetrolTankHealth;
                                    iList_01[2] = (int)fVehicleDamage;
                                    VTBTimerPool.Add(ttTextBar_01);
                                    iMishText = 134;
                                    iTracking = Game.GameTime + RandInt(7000, 14000);
                                    iMissionSeq = 3;
                                }
                                else
                                {
                                    if (Game.Player.Character.IsInVehicle())
                                    {
                                        Vehicle PlayVeh = Game.Player.Character.CurrentVehicle;
                                        if (PlayVeh.Model == VehicleHash.Cargobob || PlayVeh.Model == VehicleHash.Cargobob2 || PlayVeh.Model == VehicleHash.Cargobob3 || PlayVeh.Model == VehicleHash.Cargobob4)
                                        {
                                            if (Function.Call<bool>(Hash.IS_VEHICLE_ATTACHED_TO_CARGOBOB, PlayVeh, VehTrackin_01))
                                            {
                                                VehTrackin_01.CurrentBlip.Remove();
                                                ImportsExpo_Targit();
                                                BeOnOff[0] = false;
                                                fVehicleDamage = VehTrackin_01.BodyHealth + VehTrackin_01.EngineHealth + VehTrackin_01.PetrolTankHealth;
                                                iList_01[2] = (int)fVehicleDamage;
                                                VTBTimerPool.Add(ttTextBar_01);
                                                iMishText = 135;
                                                iTracking = Game.GameTime + RandInt(7000, 14000);
                                                iMissionSeq = 4;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else if (iMissionSeq == 3)
                        {
                            if (VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else if (VehTrackin_01.Position.DistanceTo(VectorList_01[0]) < 90.00f)
                            {
                                ImportsExpo_MoveYourBoat();
                                iMissionSeq = 5;
                            }
                            else if (!BeOnOff[0])
                            {
                                if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    RemoveTargets();
                                    VehBlip(VehTrackin_01, true, false, 3, MyLang.Maptext[3]);
                                    BeOnOff[0] = true;
                                }
                                if (iList_01[2] > 0 && iCrash4Cash > 0)
                                    iCashBouns = VehDamage(VehTrackin_01, iList_01[2], iCrash4Cash, true, iCashBouns, false);

                                iMishText = 134;
                            }
                            else
                            {
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    VehTrackin_01.CurrentBlip.Remove();
                                    ImportsExpo_Targit();
                                    BeOnOff[0] = false;
                                }
                                else if (Game.Player.Character.IsInVehicle())
                                {
                                    Vehicle PlayVeh = Game.Player.Character.CurrentVehicle;
                                    if (PlayVeh.Model == VehicleHash.Cargobob || PlayVeh.Model == VehicleHash.Cargobob2 || PlayVeh.Model == VehicleHash.Cargobob3 || PlayVeh.Model == VehicleHash.Cargobob4)
                                    {
                                        if (Function.Call<bool>(Hash.IS_VEHICLE_ATTACHED_TO_CARGOBOB, PlayVeh, VehTrackin_01))
                                        {
                                            RemoveTargets();
                                            VehTrackin_01.CurrentBlip.Remove();
                                            ImportsExpo_Targit();
                                            BeOnOff[0] = false;
                                            iMishText = 135;

                                            iMissionSeq = 4;
                                        }
                                    }
                                }

                                iMishText = 81;
                            }

                            if (iTracking < Game.GameTime)
                                ImportsExpo_Gangz();
                        }
                        else if (iMissionSeq == 4)
                        {
                            if (VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else if (VehTrackin_01.Position.DistanceTo(VectorList_01[0]) < 90.00f)
                            {
                                ImportsExpo_MoveYourBoat();
                                iMissionSeq = 5;
                            }
                            else if (!BeOnOff[0])
                            {
                                if (Game.Player.Character.IsInVehicle())
                                {
                                    Vehicle PlayVeh = Game.Player.Character.CurrentVehicle;
                                    if (PlayVeh.Model == VehicleHash.Cargobob || PlayVeh.Model == VehicleHash.Cargobob2 || PlayVeh.Model == VehicleHash.Cargobob3 || PlayVeh.Model == VehicleHash.Cargobob4)
                                    {
                                        if (!Function.Call<bool>(Hash.IS_VEHICLE_ATTACHED_TO_CARGOBOB, PlayVeh, VehTrackin_01))
                                        {
                                            RemoveTargets();
                                            VehBlip(VehTrackin_01, true, false, 3, MyLang.Maptext[3]);
                                            BeOnOff[0] = true;
                                        }
                                    }
                                }
                                if (iList_01[2] > 0 && iCrash4Cash > 0)
                                    iCashBouns = VehDamage(VehTrackin_01, iList_01[2], iCrash4Cash, true, iCashBouns, false);


                                iMishText = 134;
                            }
                            else
                            {
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    VehTrackin_01.CurrentBlip.Remove();
                                    ImportsExpo_Targit();
                                    BeOnOff[0] = false;
                                    iMissionSeq = 3;
                                }
                                else if (Game.Player.Character.IsInVehicle())
                                {
                                    Vehicle PlayVeh = Game.Player.Character.CurrentVehicle;
                                    if (PlayVeh.Model == VehicleHash.Cargobob || PlayVeh.Model == VehicleHash.Cargobob2 || PlayVeh.Model == VehicleHash.Cargobob3 || PlayVeh.Model == VehicleHash.Cargobob4)
                                    {
                                        if (Function.Call<bool>(Hash.IS_VEHICLE_ATTACHED_TO_CARGOBOB, PlayVeh, VehTrackin_01))
                                        {
                                            VehTrackin_01.CurrentBlip.Remove();
                                            ImportsExpo_Targit();
                                            BeOnOff[0] = false;
                                        }
                                    }
                                    iMishText = 133;
                                }
                            }
                            if (iTracking < Game.GameTime)
                                ImportsExpo_Gangz();
                        }
                        else if (iMissionSeq == 5)
                        {
                            if (VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else if (VehTrackin_01.Position.DistanceTo(VectorList_01[0]) < 10.00f && VehTrackin_01.IsStopped)
                            {
                                iMishText = -1;
                                Game.FadeScreenOut(1000);
                                RemoveTargets();
                                VTBTimerPool.Remove(ttTextBar_01);
                                iCashReward += iCrash4Cash - iCashBouns;
                                iList_01[0] += 1;
                                VehTrackin_01.FreezePosition = true;
                                Water01_BargeCars(VehTrackin_01, PropList_01[0], iList_01[0]);
                                if (BeOnOff[0])
                                {
                                    VehTrackin_01.CurrentBlip.Remove();
                                    BeOnOff[0] = false;
                                }
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    GetOutofVeh(Game.Player.Character, 0);
                                    Script.Wait(1000);
                                    SlowFastTravel(VectorList_02[0], fList_01[0]);
                                    Vehicle Vtick = World.CreateVehicle(VehicleHash.Kuruma2, VectorList_02[1], fList_01[1]);
                                    Vtick.MarkAsNoLongerNeeded();
                                    iMissionSeq = 0;
                                }
                                else
                                {
                                    Script.Wait(1000);
                                    iMissionSeq = 0;
                                }
                            }
                            else if (!BeOnOff[0])
                            {
                                if (Game.Player.Character.IsInVehicle())
                                {
                                    Vehicle PlayVeh = Game.Player.Character.CurrentVehicle;
                                    if (PlayVeh.Model == VehicleHash.Cargobob || PlayVeh.Model == VehicleHash.Cargobob2 || PlayVeh.Model == VehicleHash.Cargobob3 || PlayVeh.Model == VehicleHash.Cargobob4)
                                    {
                                        if (!Function.Call<bool>(Hash.IS_VEHICLE_ATTACHED_TO_CARGOBOB, PlayVeh, VehTrackin_01))
                                        {
                                            RemoveTargets();
                                            VehBlip(VehTrackin_01, true, false, 4, MyLang.Maptext[3]);
                                            BeOnOff[0] = true;
                                        }
                                    }
                                    else if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    {
                                        RemoveTargets();
                                        VehBlip(VehTrackin_01, true, false, 3, MyLang.Maptext[3]);
                                        BeOnOff[0] = true;
                                    }
                                }

                                iMishText = 134;//-----may be ellse where

                                if (iList_01[2] > 0 && iCrash4Cash > 0)
                                    iCashBouns = VehDamage(VehTrackin_01, iList_01[2], iCrash4Cash, true, iCashBouns, false);
                            }
                            else
                            {
                                if (Game.Player.Character.IsInVehicle())
                                {
                                    Vehicle PlayVeh = Game.Player.Character.CurrentVehicle;
                                    if (PlayVeh.Model == VehicleHash.Cargobob || PlayVeh.Model == VehicleHash.Cargobob2 || PlayVeh.Model == VehicleHash.Cargobob3 || PlayVeh.Model == VehicleHash.Cargobob4)
                                    {
                                        if (Function.Call<bool>(Hash.IS_VEHICLE_ATTACHED_TO_CARGOBOB, PlayVeh, VehTrackin_01))
                                        {
                                            VehTrackin_01.CurrentBlip.Remove();
                                            ImportsExpo_Targit();
                                            BeOnOff[0] = false;
                                        }
                                    }
                                    else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    {
                                        VehTrackin_01.CurrentBlip.Remove();
                                        ImportsExpo_Targit();
                                        BeOnOff[0] = false;
                                    }
                                    iMishText = 136;//-----may be ellse where
                                }
                            }

                            if (iTracking < Game.GameTime)
                                ImportsExpo_Gangz();
                        }
                        else if (iMissionSeq == 10)
                        {
                            for (int i = 0; i < sList_01.Count; i++)
                            {
                                if (!sImpExpVeh.Contains(sList_01[i]))
                                {
                                    iImpExpList.Add(iList_02[i]);
                                    sImpExpVeh.Add(sList_01[i]);
                                }
                            }
                            WriteContacts(true);
                            NSCoinInvestments(false, 2, 5, "Augury Insurance Shares");
                            GameOver(false, "", false, iCashReward);
                        }
                        else if (iMissionSeq == 45)
                        {
                            GameOver(true, "", false, 0);
                        }
                    }       //ImpExp
                    else if (iJobType == 17)
                    {
                        if (iMissionSeq == 0)
                        {
                            Vector3 VT = VectorList_01[0];
                            VT.Z -= 1.00f;
                            AddTarget(VT, true, true, 1.00f, false, 408, MyLang.Maptext[62]);
                            TheYellowCorona(VT, 1.00f);
                            if (MySettings.FastTraveltoStart)
                                SlowFastTravel(VectorList_01[0], 0.00f);
                            iMishText = 137;
                            iMissionSeq = 1;
                        }
                        else if (iMissionSeq == 1)
                        {
                            if (Game.Player.Character.Position.DistanceTo(VectorList_01[0]) < 1.00f && !Game.Player.Character.IsInVehicle())
                            {
                                fMission_01 = Game.Player.Character.Heading + 180.00f;
                                RemoveTargets();
                                DebtCollect_LoadHood();
                                Vector3 Vme = VectorList_01[1];
                                Vme.Z -= 1.00f;
                                Prop_01 = BuildProp("hei_prop_hei_security_case", Vme, Vector3.Zero, true, false);
                                AddTarget(Vme, false, true, 1.00f, false, 408, MyLang.Maptext[63]);
                                iMishText = 138;
                                SlowFastTravel(VectorList_01[VectorList_01.Count - 1], fGetDir);
                                DoorsNear(VectorList_01[VectorList_01.Count - 1], 30.00f, false);
                                iMissionSeq = 2;
                            }
                        }
                        else if (iMissionSeq == 2)
                        {
                            if (PickupBling(Prop_01))
                            {
                                Vector3 VT = VectorList_01[VectorList_01.Count - 1];
                                VT.Z -= 1.00f;
                                RemoveTargets();
                                AddTarget(VT, false, true, 1.00f, false, 515, MyLang.Maptext[64]);
                                TheYellowCorona(VT, 1.00f);
                                iMishText = 139;
                                iMissionSeq = 3;
                            }
                            else
                            {
                                if (Game.Player.Character.IsFalling)
                                {
                                    if (Game.Player.Character.Position.Z + 4 < Pick_01.Position.Z)
                                    {
                                        Vector3 FallThrough = new Vector3(VectorList_01[VectorList_01.Count - 1].X, VectorList_01[VectorList_01.Count - 1].Y, VectorList_01[VectorList_01.Count - 1].Z + 0.5f);
                                        Game.Player.Character.Position = FallThrough;
                                    }
                                }
                            }

                            if (PedList_01.Count > 0)
                            {
                                if (iTracking < Game.GameTime)
                                    SimpleTracker();
                            }
                        }
                        else if (iMissionSeq == 3)
                        {
                            if (Game.Player.Character.Position.DistanceTo(VectorList_01[VectorList_01.Count - 1]) < 1.00f)
                            {
                                RemoveTargets();
                                Vector3 VUp = VectorList_01[0];
                                fMission_01 = Game.Player.Character.Heading;
                                SlowFastTravel(VUp, fMission_01);
                                vTarget_01.Z -= 1.05f;
                                vFuMiss = vTarget_03;
                                AddTarget(vTarget_01, true, true, 1.00f, false, 108, MyLang.Maptext[40]);
                                TheYellowCorona(vTarget_01, 1.00f);
                                CleanPedBlips(1);
                                Prop_01 = null;
                                iMissionSeq = 4;
                            }
                            else
                            {
                                if (PedList_01.Count > 0)
                                {
                                    if (iTracking < Game.GameTime)
                                        SimpleTracker();
                                }
                            }
                        }
                        else if (iMissionSeq == 4)
                        {
                            if (World.GetDistance(vTarget_01, Game.Player.Character.Position) < 2.00f && Game.Player.Character.IsOnFoot && Game.Player.Character.Position.Z > vTarget_01.Z - 0.50f)
                            {
                                iMissionSeq = 5;
                                iMishText = -1;
                                iWait4Sec = Game.GameTime + 2000;
                                Game.Player.Character.Task.PlayAnimation("anim@mp_fireworks", "place_firework_3_box", 8.00f, 3000, true, 1.00f);
                                CleanUpCheckPoints();
                                RemoveTargets();
                            }
                            else if (World.GetDistance(vTarget_01, Game.Player.Character.Position) < 55.00f)
                            {
                                if (iWait4Sec < Game.GameTime)
                                {
                                    iWait4Sec = Game.GameTime + 1000;
                                    DoorsNear(Game.Player.Character.Position, 10.00f, false);
                                }
                            }
                        }
                        else if (iMissionSeq == 5)
                        {
                            if (iWait4Sec < Game.GameTime)
                            {
                                BuildProp("hei_prop_hei_security_case", vTarget_01, Vector3.Zero, true, false);
                                iMissionSeq = 10;
                            }
                        }
                        else if (iMissionSeq == 10)
                        {
                            if (BeOnOff[1])
                            {
                                BeOnOff[1] = false;
                                LoadInMissionIPLs(10, false, true);
                            }
                            NSCoinInvestments(true, 12, 16, "Maze Bank Shares");
                            GameOver(false, "", false, iCashReward);
                        }
                        else if (iMissionSeq == 45)
                        {
                            NSCoinInvestments(false, 12, 16, "Maze Bank Shares");
                            if (BeOnOff[1])
                            {
                                BeOnOff[1] = false;
                                LoadInMissionIPLs(10, false, true);
                            }

                            GameOver(true, "", false, 0);
                        }
                    }       //DebtCollect
                    else if (iJobType == 18)
                    {
                        if (iMissionSeq == 10)
                        {
                            BikerRaids_UnloadInt(iMissionVar_02);
                            if (!BeOnOff[4])
                                NSCoinInvestments(false, 7, 9, "Windsor Real Estate Shares");
                            GameOver(false, "", false, iCashReward);
                        }
                        else if (iMissionSeq == 44)
                        {
                            if (iWait4Sec < Game.GameTime)
                            {
                                SlowFastTravel(VectorList_01[0], 0.00f);
                                iMissionSeq = 45;
                            }
                        }
                        else if (iMissionSeq == 45)
                        {
                            BikerRaids_UnloadInt(iMissionVar_02);
                            GameOver(true, "", false, 0);
                        }
                        else if (iMissionVar_01 == 1)
                        {
                            if (iMissionSeq == 0)
                            {
                                iMissionVar_03 = 4;
                                Vector3 Vehs = VectorList_02[0];
                                Vehs.Z-= 0.70f;
                                VehicleSpawn("PBUS2", Vehs, fGetDir, false, false, false, false, 3, 2, 0, "", 1, false);
                                if (MySettings.FastTraveltoStart)
                                    SlowFastTravel(VectorList_01[0], 0.00f);
                                iMishText = 140;
                                iMissionSeq = 1;
                            }
                            else if (iMissionSeq == 1)
                            {
                                if (VehicleList_01.Count > 0)
                                {
                                    if (VehTrackin_01.IsDead)
                                        iMissionSeq = 45;
                                    else if (Game.Player.Character.Position.DistanceTo(VectorList_01[0]) < 1.50f && !Game.Player.Character.IsInVehicle())
                                    {
                                        fList_01.Add(Game.Player.Character.Heading + 180.00f);
                                        RemoveTargets();
                                        Vector3 VT = VectorList_03[VectorList_03.Count - 1];
                                        VT.Z -= 1.00f;
                                        TheYellowCorona(VT, 1.00f);
                                        SlowFastTravel(VectorList_03[VectorList_03.Count - 1], fMission_01);
                                        BikerRaids_LoadHood();
                                        iMissionSeq = 2;
                                        iMishText = 141;
                                    }
                                }
                            }
                            else if (iMissionSeq == 2)
                            {
                                if (MishPed.Count > 0)
                                {
                                    if (iWait4Sec < Game.GameTime)
                                        BikerRaids_KeepWalkin();

                                    ControlerUI(MyLang.Context[23], 1);
                                }
                                else
                                {
                                    iMishText = 142;
                                    VehTrackin_01.LockStatus = VehicleLockStatus.Unlocked;
                                    iMissionSeq = 3;
                                }

                                SimpleTracker();
                            }
                            else if (iMissionSeq == 3)
                            {
                                if (Game.Player.Character.Position.DistanceTo(VectorList_03[VectorList_03.Count - 1]) < 1.50f)
                                {
                                    SlowFastTravel(VectorList_01[0], fList_01[0]);
                                    VehBlip(VehTrackin_01, true, false, 3, MyLang.Maptext[4]);
                                    VehTrackin_01.FreezePosition = false;
                                    Function.Call(Hash._SET_VEHICLE_ENGINE_POWER_MULTIPLIER, VehTrackin_01, 100.00f);
                                    float fDist = VehTrackin_01.Position.DistanceTo(vTarget_01);
                                    int iFind = (int)fDist;
                                    iCashReward += iFind;
                                    BeOnOff[1] = true;
                                    BeOnOff[2] = true;
                                    iMishText = 143;
                                    iMissionSeq = 4;
                                }
                            }
                            else if (iMissionSeq == 4)
                            {
                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (BeOnOff[1])
                                {
                                    if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    {
                                        BeOnOff[1] = false;
                                        VehTrackin_01.CurrentBlip.Remove();
                                        Vector3 Vme = vTarget_01;
                                        Vme.Z -= 1.00f;
                                        AddTarget(vTarget_01, true, true, 1.00f, false, 492, MyLang.Maptext[65]);
                                        TheYellowCorona(Vme, 5.00f);
                                        iMishText = 144;
                                    }
                                }
                                else
                                {
                                    if (BeOnOff[2] && World.GetDistance(vTarget_01, Game.Player.Character.Position) < 60.00f)
                                    {
                                        MoveThatCar(vTarget_01);
                                        BeOnOff[2] = false;
                                    }
                                    else if (VehTrackin_01.Position.DistanceTo(vTarget_01) < 5.00f)
                                    {
                                        iWait4Sec = Game.GameTime + 1000;
                                        iMishText = -1;
                                        iMissionSeq = 5;
                                    }
                                    else if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    {
                                        BeOnOff[1] = true;
                                        RemoveTargets();
                                        VehBlip(VehTrackin_01, true, false, 3, MyLang.Maptext[4]);
                                        iMishText = 143;
                                    }

                                    if (iTracking < Game.GameTime)
                                        BikerRaids_LostMCAtt();
                                }
                            }
                            else if (iMissionSeq == 5)
                            {
                                if (iWait4Sec < Game.GameTime)
                                {
                                    VehTrackin_01.FreezePosition = true;
                                    GetOutofVeh(Game.Player.Character, 0);
                                    iCashReward += iUltPed01 * 250;
                                    iCashReward += 5000;
                                    VehTrackin_01.LockStatus = VehicleLockStatus.Locked;
                                    if (iCashReward < 25000)
                                        BeOnOff[4] = true;
                                    iMissionSeq = 10;
                                }
                            }
                        }       //kidnap workers
                        else if (iMissionVar_01 == 2)
                        {
                            if (iMissionSeq == 0)
                            {
                                if (MySettings.FastTraveltoStart)
                                    SlowFastTravel(VectorList_01[0], 0.00f);
                                iMishText = 140;
                                iMissionSeq = 1;
                            }
                            else if (iMissionSeq == 1)
                            {
                                if (Game.Player.Character.Position.DistanceTo(VectorList_01[0]) < 1.50f && !Game.Player.Character.IsInVehicle())
                                {
                                    fList_01.Add(Game.Player.Character.Heading + 180.00f);
                                    RemoveTargets();
                                    Vector3 VT = VectorList_03[VectorList_03.Count - 1];
                                    VT.Z -= 1.00f;
                                    TheYellowCorona(VT, 1.00f);
                                    SlowFastTravel(VectorList_03[VectorList_03.Count - 1], fMission_01);
                                    BikerRaids_LoadHood();
                                    iMissionSeq = 2;
                                    iMishText = 145;
                                }
                            }
                            else if (iMissionSeq == 2)
                            {
                                if (PedList_01.Count > 0)
                                {
                                    if (iTracking < Game.GameTime)
                                        SimpleTracker();
                                }
                                else
                                {
                                    iMishText = 142;
                                    iMissionSeq = 3;
                                }
                            }
                            else if (iMissionSeq == 3)
                            {
                                if (Game.Player.Character.Position.DistanceTo(VectorList_03[VectorList_03.Count - 1]) < 1.50f)
                                {
                                    SlowFastTravel(VectorList_01[0], fList_01[0]);
                                    iTime_01[1] = Game.GameTime + 90000;
                                    iMishText = 145;
                                    iMissionSeq = 4;
                                }
                            }
                            else if (iMissionSeq == 4)
                            {
                                if (iTime_01[1] > Game.GameTime)
                                {
                                    if (iTracking < Game.GameTime)
                                        BikerRaids_LostMCAtt();
                                }
                                else
                                {
                                    iMishText = -1;
                                    iMissionSeq = 10;
                                    iCashReward += iUltPed01 * 250;
                                    if (iCashReward < 25000)
                                        BeOnOff[4] = true;
                                }
                            }
                        }        //Raid
                        else if (iMissionVar_01 == 3)
                        {
                            if (iMissionSeq == 0)
                            {
                                Vector3 Vehs = VectorList_02[0];
                                Vehs.Z -= 0.70f;
                                VehicleSpawn("SLAMVAN2", Vehs, fGetDir, false, false, false, false, 3, 2, 0, "", 1, true);
                                if (MySettings.FastTraveltoStart)
                                    SlowFastTravel(VectorList_01[0], 0.00f);
                                iMishText = 140;
                                iMissionSeq = 1;
                            }
                            else if (iMissionSeq == 1)
                            {
                                if (VehicleList_01.Count > 0)
                                {
                                    if (VehTrackin_01.IsDead)
                                        iMissionSeq = 45;
                                    else if (Game.Player.Character.Position.DistanceTo(VectorList_01[0]) < 1.50f && !Game.Player.Character.IsInVehicle())
                                    {
                                        fList_01.Add(Game.Player.Character.Heading + 180.00f);
                                        RemoveTargets();
                                        Vector3 VT = VectorList_03[VectorList_03.Count - 1];
                                        VT.Z -= 1.00f;
                                        BeOnOff[3] = false;
                                        SlowFastTravel(VT, fMission_01);
                                        BikerRaids_LoadHood();
                                        iMissionSeq = 2;
                                        iMishText = 146;
                                    }
                                }
                            }
                            else if (iMissionSeq == 2)
                            {
                                if (Npc_01.IsDead)
                                {
                                    Npc_01.CurrentBlip.Remove();
                                    Prop_01 = BuildProp("p_car_keys_01", Npc_01.Position, Vector3.Zero, false, false);
                                    AddTarget(Npc_01.Position, false, true, 1.00f, false, 811, MyLang.Maptext[66]);
                                    BeOnOff[0] = true;
                                    iMissionSeq = 3;
                                    iMishText = 147;
                                }

                                if (MishPed.Count > 0)
                                {
                                    if (!BeOnOff[3])
                                    {
                                        int iCount = MishPed.Count;
                                        while (iCount > 0)
                                        {
                                            iCount = iCount - 1;
                                            MishPed[iCount].Task.Cower(-1);
                                        }
                                        BeOnOff[3] = true;
                                    }
                                }
                            }
                            else if (iMissionSeq == 3)
                            {
                                if (PickupBling(Prop_01))
                                {
                                    BeOnOff[0] = false;
                                    RemoveTargets();
                                    VehTrackin_01.LockStatus = VehicleLockStatus.Unlocked;
                                    VehTrackin_01.IsBulletProof = true;
                                    iMishText = 142;
                                    Vector3 VT = VectorList_03[VectorList_03.Count - 1];
                                    VT.Z -= 1.00f;
                                    TheYellowCorona(VT, 1.00f);
                                    iMissionSeq = 4;
                                }
                            }
                            else if (iMissionSeq == 4)
                            {
                                if (Game.Player.Character.Position.DistanceTo(VectorList_03[VectorList_03.Count - 1]) < 1.50f)
                                {
                                    VehBlip(VehTrackin_01, true, false, 3, MyLang.Maptext[11]);
                                    VehTrackin_01.FreezePosition = false;
                                    BeOnOff[1] = true;
                                    BeOnOff[2] = true;
                                    BeOnOff[3] = false;
                                    float fDist = VehTrackin_01.Position.DistanceTo(vTarget_01);
                                    int iFind = (int)fDist;
                                    iCashReward += iFind;
                                    SlowFastTravel(VectorList_01[0], fList_01[0]);
                                    iMishText = 148;
                                    iMissionSeq = 5;
                                }
                            }
                            else if (iMissionSeq == 5)
                            {
                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (BeOnOff[1])
                                {
                                    if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    {
                                        BeOnOff[1] = false;
                                        if (!BeOnOff[3])
                                            iWait4Sec = Game.GameTime + 7000;
                                        VehTrackin_01.CurrentBlip.Remove();
                                        vTarget_01.Z -= 1.00f;
                                        AddTarget(vTarget_01, true, true, 1.00f, false, 492, MyLang.Maptext[65]);
                                        TheYellowCorona(vTarget_01, 5.00f);
                                        BeOnOff[3] = true;
                                        iMishText = 149;
                                    }
                                }
                                else
                                {
                                    if (BeOnOff[2] && World.GetDistance(vTarget_01, Game.Player.Character.Position) < 60.00f)
                                    {
                                        MoveThatCar(vTarget_01);
                                        BeOnOff[2] = false;
                                    }
                                    else if (VehTrackin_01.Position.DistanceTo(vTarget_01) < 5.00f)
                                    {
                                        iWait4Sec = Game.GameTime + 1000;
                                        iMissionSeq = 6;
                                    }
                                    else if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    {
                                        BeOnOff[1] = true;
                                        RemoveTargets();
                                        VehBlip(VehTrackin_01, true, false, 3, MyLang.Maptext[11]);
                                        iMishText = 148;
                                    }

                                    if (iTracking < Game.GameTime)
                                        BikerRaids_LostMCAtt();
                                }
                            }
                            else if (iMissionSeq == 6)
                            {
                                if (iWait4Sec < Game.GameTime)
                                {
                                    VehTrackin_01.FreezePosition = true;
                                    GetOutofVeh(Game.Player.Character, 0);
                                    VehTrackin_01.LockStatus = VehicleLockStatus.Locked;
                                    iCashReward += iUltPed01 * 250;
                                    iCashReward += 5000;
                                    if (iCashReward < 25000)
                                        BeOnOff[4] = true;
                                    iMissionSeq = 10;
                                }
                            }
                        }      //steal goods--
                    }       //BikerRaids
                    else if (iJobType == 19)
                    {
                        if (iMissionSeq == 0)
                        {
                            if (MySettings.FastTraveltoStart)
                                SlowFastTravel(vTarget_01, 0.00f);
                            iMishText = 150;
                            iMissionSeq = 1;
                        }
                        else if (iMissionSeq == 1)
                        {
                            if (Game.Player.Character.Position.DistanceTo(vTarget_01) < 1.50f && !Game.Player.Character.IsInVehicle())
                            {
                                Game.FadeScreenOut(100);
                                if (iMissionVar_01 == 6)
                                {
                                    vTarget_06 = new Vector3(998.753f, -3110.82f, -39.534f);
                                    fCoronaHight = -9.22f;
                                    VehicleSpawn("Forklift", vTarget_06, fCoronaHight, true, false, false, false, 0, 0, 4, MyLang.Maptext[12], 1, false);

                                    VehicleSpawn("SANDKING2", VectorList_04[iMissionVar_03], fList_02[iMissionVar_03], false, false, false, false, 26, 0, 0, "", 2, true);

                                    iCashReward += 1000;
                                }
                                else if (iMissionVar_01 == 7)
                                {
                                    vTarget_06 = new Vector3(1051.23f, -3098.5f, -38.99994f);//new Vector3(1070.3669f, -3106.485f, -39.5371f);
                                    fCoronaHight = -0.39f;
                                    VehicleSpawn("Forklift", vTarget_06, fCoronaHight, true, false, false, false, 0, 0, 4, MyLang.Maptext[12], 1, false);

                                    VehicleSpawn("SANDKING2", VectorList_04[iMissionVar_03], fList_02[iMissionVar_03], false, false, false, false, 26, 0, 0, "", 2, true);

                                    iCashReward += 750;
                                }
                                else if (iMissionVar_01 == 8)
                                {
                                    vTarget_06 = new Vector3(1090.853f, -3099.615f, -38.99996f);//new Vector3(1091.359f, -3102.17f, -39.534f);
                                    fCoronaHight = 88.638f;
                                    VehicleSpawn("Forklift", vTarget_06, fCoronaHight, true, false, false, false, 0, 0, 4, MyLang.Maptext[12], 1, false);

                                    VehicleSpawn("SANDKING2", VectorList_04[iMissionVar_03], fList_02[iMissionVar_03], false, false, false, false, 26, 0, 0, "", 2, true);
                                    iCashReward += 500;
                                }
                                else
                                {
                                    vTarget_06 = new Vector3(872.73f, -3247.447f, -98.837f);
                                    fCoronaHight = 5.446f;
                                    VehicleSpawn("Forklift", vTarget_06, fCoronaHight, true, false, false, false, 0, 0, 4, MyLang.Maptext[12], 1, false);

                                    Vector3 VePoz = new Vector3(837.8329f, -3237.161f, -98.91f);
                                    float fit = 76.10f;
                                    VehicleSpawn("SANDKING2", VePoz, fit, false, false, false, false, 26, 0, 0, "", 2, true);

                                    VePoz = new Vector3(867.67688f, -3247.6582f, -98.906f);
                                    fit = 0.337f;
                                    VehicleSpawn("Caddy3", VePoz, fit, false, false, false, false, 0, 0, 0, "", 0, false);

                                    VePoz = new Vector3(869.85f, -3247.40f, -98.8944f);
                                    fit = -0.528f;
                                    VehicleSpawn("Caddy2", VePoz, fit, false, false, false, false, 0, 0, 0, "", 0, false);

                                    iCashReward += 5000;
                                }
                                BeOnOff[1] = true;
                                BeOnOff[0] = false;
                                RemoveTargets();
                                SlowFastTravel(VectorList_02[VectorList_02.Count - 1], fMission_01);
                                CargoCollect_LoadHood();
                                iMissionSeq = 2;
                                iMishText = 151;
                            }
                        }
                        else if (iMissionSeq == 2)
                        {
                            if (VehicleList_01.Count > 1)
                            {
                                if (VehTrackin_01.IsDead || VehTrackin_02.IsDead)
                                    iMissionSeq = 45;
                                else if (iTracking < Game.GameTime)
                                    SimpleTracker();

                                if (Game.Player.WantedLevel > 0)
                                    Game.Player.WantedLevel = 0;

                                if (BeOnOff[1])
                                {
                                    if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    {
                                        BeOnOff[1] = false;
                                        VehTrackin_01.CurrentBlip.Remove();
                                        iMishText = iList_01[0];
                                    }
                                }
                                else
                                {
                                    World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(Prop_01.Position.X, Prop_01.Position.Y, Prop_01.Position.Z + 1.25f), Vector3.Zero, new Vector3(0.00f, 180.00f, Prop_01.Heading), new Vector3(0.50f, 0.50f, 0.50f), color: Color.CadetBlue);
                                    Vector3 Forks = VehTrackin_01.Position + (VehTrackin_01.ForwardVector * 2);
                                    if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    {
                                        BeOnOff[1] = true;
                                        VehBlip(VehTrackin_01, false, false, 3, MyLang.Maptext[12]);
                                        iMishText = 151;
                                    }
                                    else if (Forks.DistanceTo(Prop_01.Position) < 1.30f)
                                    {
                                        Prop_01.FreezePosition = false;
                                        Prop_01.AttachTo(VehTrackin_01, Function.Call<int>(Hash.GET_ENTITY_BONE_INDEX_BY_NAME, VehTrackin_01.Handle, "forks_attach"), new Vector3(0.00f, 0.00f, 0.10f), new Vector3(0.00f, 0.00f, 90.00f));
                                        if (iMissionVar_01 != 9)
                                        {
                                            vTarget_02.Z -= 1.00f;
                                            TheYellowCorona(vTarget_02, 5.00f);
                                            iMissionSeq = 3;
                                        }
                                        else
                                        {
                                            VehBlip(VehTrackin_02, true, false, 3, MyLang.Maptext[1]);
                                            BeOnOff[2] = true;
                                            iMissionSeq = 4;
                                        }
                                        iMishText = 158;
                                    }

                                    ControlerUI(MyLang.Context[24], 1);
                                    if (Game.IsControlPressed(2, GTA.Control.Context))
                                    {
                                        if (iWait4Sec < Game.GameTime && !BeOnOff[0])
                                        {
                                            BeOnOff[0] = true;
                                            ResetTruck(VehTrackin_01, vTarget_06, fCoronaHight);
                                        }
                                    }
                                    else
                                        iWait4Sec = Game.GameTime + 1500;
                                }
                            }
                        }
                        else if (iMissionSeq == 3)
                        {
                            if (VehTrackin_01.IsDead || VehTrackin_02.IsDead)
                                iMissionSeq = 45;
                            else if (iTracking < Game.GameTime)
                                SimpleTracker();

                            if (Game.Player.WantedLevel > 0)
                                Game.Player.WantedLevel = 0;

                            if (BeOnOff[1])
                            {
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[1] = false;
                                    VehTrackin_01.CurrentBlip.Remove();
                                    iMishText = iList_01[0];
                                }
                            }
                            else
                            {
                                if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[1] = true;
                                    VehBlip(VehTrackin_01, false, false, 3, MyLang.Maptext[12]);
                                    iMishText = 151;
                                }
                                else
                                {
                                    if (Prop_01.Position.DistanceTo(vTarget_02) < 2.00f)
                                    {
                                        Game.FadeScreenOut(1000);
                                        Script.Wait(1000);
                                        vTarget_06 = VectorList_03[iMissionVar_03];
                                        fCoronaHight = fList_01[iMissionVar_03];
                                        VehTrackin_01.Position = vTarget_06;
                                        VehTrackin_01.Heading = fCoronaHight;
                                        CleanPedBlips(1);
                                        VehBlip(VehTrackin_02, true, false, 3, MyLang.Maptext[1]);
                                        BeOnOff[2] = true;
                                        Game.FadeScreenIn(1000);
                                        iMissionSeq = 4;
                                        iMishText = iList_01[0];
                                    }
                                    else
                                    {
                                        ControlerUI(MyLang.Context[24], 1);
                                        if (Game.IsControlPressed(2, GTA.Control.Context))
                                        {
                                            if (iWait4Sec < Game.GameTime && !BeOnOff[0])
                                            {
                                                BeOnOff[0] = true;
                                                ResetTruck(VehTrackin_01, vTarget_06, fCoronaHight);
                                            }
                                        }
                                        else
                                            iWait4Sec = Game.GameTime + 1500;
                                    }
                                }
                            }
                        }
                        else if (iMissionSeq == 4)
                        {
                            if (VehTrackin_01.IsDead || VehTrackin_02.IsDead)
                                iMissionSeq = 45;
                            else if (iTracking < Game.GameTime)
                                SimpleTracker();

                            if (BeOnOff[1])
                            {
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[1] = false;
                                    VehTrackin_01.CurrentBlip.Remove();
                                    iMishText = iList_01[0];
                                }
                            }
                            else
                            {
                                Vector3 Bed = VehTrackin_02.Position - (VehTrackin_01.ForwardVector * 2.24f);
                                Bed.Z += 0.80f;
                                if (Prop_01.Position.DistanceTo(Bed) < 0.80f)
                                {
                                    Prop_01.Detach();
                                    Prop_01.AttachTo(VehTrackin_02, Function.Call<int>(Hash.GET_ENTITY_BONE_INDEX_BY_NAME, VehTrackin_01.Handle, "chassis"), new Vector3(0.00f, -2.25f, 0.85f), new Vector3(0.00f, 0.00f, 90.00f));
                                    iMishText = 164;
                                    if (iMissionVar_01 == 9)
                                        iMissionSeq = 5;
                                    else
                                    {
                                        iWait4Sec = Game.GameTime + RandInt(20000, 60000);
                                        BeOnOff[3] = true;
                                        BeOnOff[4] = true;
                                        BeOnOff[5] = false;
                                        iMissionSeq = 6;
                                    }
                                }
                                else if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[1] = true;
                                    VehBlip(VehTrackin_01, false, false, 3, MyLang.Maptext[12]);
                                    iMishText = 151;
                                }
                                else
                                {
                                    ControlerUI(MyLang.Context[24], 1);
                                    if (Game.IsControlPressed(2, GTA.Control.Context))
                                    {
                                        if (iWait4Sec < Game.GameTime && !BeOnOff[0])
                                        {
                                            BeOnOff[0] = true;
                                            ResetTruck(VehTrackin_01, vTarget_06, fCoronaHight);
                                        }
                                    }
                                    else
                                        iWait4Sec = Game.GameTime + 1500;
                                }
                            }
                        }
                        else if (iMissionSeq == 5)
                        {
                            if (VehTrackin_02.IsDead)
                                iMissionSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(VehTrackin_02))
                            {
                                Game.FadeScreenOut(1000);
                                Script.Wait(1000);
                                VehTrackin_02.Position = VectorList_03[iMissionVar_03];
                                VehTrackin_02.Heading = fList_01[iMissionVar_03];
                                CleanPedBlips(1);
                                iWait4Sec = Game.GameTime + RandInt(20000, 60000);
                                BeOnOff[3] = true;
                                BeOnOff[5] = false;
                                BeOnOff[4] = true;
                                iMissionSeq = 6;
                                Game.FadeScreenIn(1000);
                                iMishText = 151;
                            }
                        }
                        else if (iMissionSeq == 6)
                        {
                            if (BeOnOff[3])
                            {
                                if (iWait4Sec < Game.GameTime)
                                {
                                    BeOnOff[3] = false;
                                    CargoCollect_Suprise();
                                    iTracking = Game.GameTime + 1000;
                                }
                            }
                            else
                            {
                                if (iMissionVar_03 < 5 && MultiPed.Count > 0)
                                {
                                    if (iTracking < Game.GameTime)
                                    {
                                        if (Game.Player.WantedLevel > 0)
                                            Game.Player.WantedLevel = 0;

                                        MultiPedTracker();
                                    }
                                }
                            }

                            if (VehTrackin_02.IsDead)
                                iMissionSeq = 45;
                            else if (BeOnOff[2])
                            {
                                if (Game.Player.Character.IsInVehicle(VehTrackin_02))
                                {
                                    BeOnOff[2] = false;
                                    VehTrackin_02.CloseDoor(VehicleDoor.Trunk, true);
                                    VehTrackin_02.CurrentBlip.Remove();
                                    TheYellowCorona(vTarget_03, 10.00f);
                                    AddTarget(vTarget_03, true, true, 1.00f, false, 478, MyLang.Maptext[39]);
                                    iMishText = iList_01[2];
                                }
                            }
                            else
                            {
                                if (!Game.Player.Character.IsInVehicle(VehTrackin_02))
                                {
                                    BeOnOff[2] = true;
                                    VehBlip(VehTrackin_02, true, false, 3, MyLang.Maptext[1]);

                                    RemoveTargets();
                                }
                                else
                                {
                                    if (BeOnOff[4] && World.GetDistance(vTarget_03, Game.Player.Character.Position) < 60.00f)
                                    {
                                        MoveThatCar(vTarget_03);
                                        BeOnOff[4] = false;
                                    }
                                    else if (VehTrackin_02.Position.DistanceTo(vTarget_03) < 5.00f)
                                    {
                                        RemoveTargets();
                                        GetOutofVeh(Game.Player.Character, 0);
                                        iMissionSeq = 10;
                                    }
                                }
                            }
                        }
                        else if (iMissionSeq == 10)
                        {
                            NSCoinInvestments(true, 7, 11, "SecuroServ Shares");
                            GameOver(false, "", false, iCashReward);
                        }
                        else if (iMissionSeq == 45)
                        {
                            NSCoinInvestments(false, 8, 13, "SecuroServ Shares");
                            CargoCollect_UnloadInt(iMissionVar_01);
                            GameOver(true, "", false, 0);
                        }
                    }       //BayLift
                    else if (iJobType == 20)
                    {
                        if (iMissionSeq == 0)
                        {
                            if (MySettings.FastTraveltoStart)
                                WarptoAnyVeh(VehTrackin_01, Game.Player.Character, 1);
                            iMishText = 125;
                            iMissionSeq = 1;

                        }
                        else if (iMissionSeq == 1)
                        {
                            if (VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                            {
                                AddTarget(vTarget_01, true, true, 75.00f, false, -1, MyLang.Maptext[26]);
                                VehTrackin_01.CurrentBlip.Remove();
                                BeOnOff[0] = false;
                                iMissionSeq = 2;
                                iMishText = 90;
                            }
                            else if (Game.Player.Character.Position.DistanceTo(VehTrackin_01.Position) < 35.00f)
                                iMishText = 171;
                            else
                                iMishText = 125;
                        }
                        else if (iMissionSeq == 2)
                        {
                            if (VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else if (BeOnOff[0])
                            {
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    AddTarget(vTarget_01, true, true, 75.00f, false, -1, MyLang.Maptext[26]);
                                    VehTrackin_01.CurrentBlip.Remove();
                                    iMishText = 90;
                                    BeOnOff[0] = false;
                                }
                            }
                            else
                            {
                                if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    BeOnOff[0] = true;
                                    RemoveTargets();
                                    VehBlip(VehTrackin_01, true, false, 66, MyLang.Maptext[13]);
                                    iMishText = 171;
                                }
                                else if (VehTrackin_01.Position.DistanceTo(vTarget_01) < 85.00f)
                                {
                                    DeepDown_Addfish();
                                    BeOnOff[1] = false;
                                    iMissionSeq = 3;
                                }
                            }
                        }
                        else if (iMissionSeq == 3)
                        {
                            if (VehTrackin_01.IsDead || !Game.Player.Character.IsInVehicle(VehTrackin_01))
                                iMissionSeq = 45;
                            else if (PedList_01.Count > 0)
                            {
                                if (iWait4Sec < Game.GameTime)
                                {
                                    iWait4Sec = Game.GameTime + 1000;
                                    DeepDown_SwimtoBarrel();
                                }
                            }
                            else
                                iMissionSeq = 10;

                            if (!BeOnOff[1])
                            {
                                if (PropList_01.Count > 0)
                                {
                                    ControlerUI(MyLang.Context[25], 1);

                                    if (Game.IsControlPressed(2, GTA.Control.Context))
                                    {
                                        if (iMissionVar_01 < Game.GameTime)
                                        {
                                            Vector3 vMe = PropList_01[0].Position;
                                            PropList_01[0].Delete();
                                            PropList_01.RemoveAt(0);
                                            World.AddExplosion(vMe, ExplosionType.StickyBomb, 10.00f, 5.00f, true, false);
                                            Script.Wait(RandInt(75, 300));
                                            World.AddExplosion(vMe, ExplosionType.StickyBomb, 10.00f, 5.00f, true, false);
                                            Script.Wait(RandInt(75, 300));
                                            World.AddExplosion(vMe, ExplosionType.StickyBomb, 10.00f, 5.00f, true, false);
                                        }
                                    }
                                    else
                                        iMissionVar_01 = Game.GameTime + 500;

                                    iMishText = 172;
                                }
                                else
                                {
                                    if (VehTrackin_01.Position.DistanceTo(vTarget_01) < 85.00f)
                                    {
                                        ControlerUI(MyLang.Context[26], 1);

                                        if (Game.IsControlJustPressed(2, GTA.Control.Context))
                                        {
                                            BeOnOff[1] = true;
                                            DeepDown_DropBomb();
                                        }

                                        iMishText = 173;
                                    }
                                }
                            }
                        }
                        else if (iMissionSeq == 10)
                        {
                            NSCoinInvestments(true, 8, 13, "Vespucci Surfing Shares");
                            GameOver(false, "", false, iCashReward);
                        }
                        else if (iMissionSeq == 45)
                        {
                            if (!bTestRun)
                                NSCoinInvestments(false, 9, 15, "Vespucci Surfing Shares");
                            GameOver(true, "", false, 0);
                        }
                    }       //Sharks
                    else if (iJobType == 26)
                    {
                        if (iMissionSeq == 0)
                        {
                            if (MySettings.FastTraveltoStart)
                                SlowFastTravel(vFuMiss, 0.00f);
                            iMishText = 179;
                            AddTarget(vTarget_01, true, true, 1.00f, false, 52, MyLang.Maptext[58]);
                            iMissionSeq = 1;

                        }
                        else if (iMissionSeq == 1)
                        {
                            if (Game.Player.Character.Position.DistanceTo(vTarget_01) < 3.50f)
                            {
                                iMissionVar_01 = 0;
                                ArmNpcWeapon("WEAPON_bat", Game.Player.Character);
                                RemoveTargets();
                                iMissionSeq = 2;

                                iMishText = 180;
                            }
                        }
                        else if (iMissionSeq == 2)
                        {
                            if (!Function.Call<bool>(Hash.IS_PED_ARMED, Game.Player.Character, 6) || Game.Player.Character.Position.DistanceTo(vTarget_01) < 20.00f)
                            {
                                if (Game.Player.WantedLevel > 0)
                                    Game.Player.WantedLevel = 0;

                                float fPer = HappyShopper_DAmmagedGoods();
                                BtSlideBar.Percentage = fPer;
                                VTBTimerPool.Draw();        //draw the spookbar to screen.

                                if (fPer > 0.99f)
                                    iMissionSeq = 3;
                            }
                            else
                                iMissionSeq = 45;
                        }
                        else if (iMissionSeq == 3)
                        {
                            iCashReward = RandInt(5000, 7000);
                            GameOver(false, "", false, iCashReward);
                        }
                        else if (iMissionSeq == 45)
                        {
                            Game.Player.WantedLevel = 4;
                            GameOver(true, "", false, 0);
                        }
                    }       //HappyShopper
                    else if (iJobType == 27)
                    {
                        if (iMissionSeq == 0)
                        {
                            if (VehicleList_01.Count > 0)
                            {
                                iMissionSeq += 1;
                                iMissionVar_02 = VehTrackin_01.Health;
                                iList_01 = MaxModsRandExtras(VehTrackin_01);
                                VehTrackin_01.CurrentBlip.Color = BlipColor.Blue;
                                if (MySettings.FastTraveltoStart)
                                    SlowFastTravel(vFuMiss, 0.00f);
                                iMishText = 181;
                            }
                        }
                        else if (iMissionSeq == 1)
                        {
                            if (bNotPause)
                            {
                                Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                bNotPause = false;
                            }
                            if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable)
                                iMissionSeq = 45;
                            else if (VehTrackin_01.Position.DistanceTo(Game.Player.Character.Position) < 50.00f)
                            {
                                iMishText = 81;
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    iMissionSeq += 1;
                                    VehTrackin_01.CurrentBlip.Remove();
                                    AddTarget(vTarget_01, true, true, 1.00f, false, 380, MyLang.Maptext[67]);
                                    TheYellowCorona(vTarget_01, 5.00f);
                                    iMishText = 182;
                                }
                            }
                            else
                                iMishText = 181;
                        }
                        else if (iMissionSeq == 2)
                        {
                            if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable)
                                iMissionSeq = 45;

                            if (VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else
                            {
                                if (VehTrackin_01.Position.DistanceTo(vTarget_01) < 2.50f)
                                {
                                    RemoveTargets();
                                    Game.FadeScreenOut(1000);
                                    Script.Wait(1000);
                                    Drilar.Play();
                                    Script.Wait(1000);
                                    VehTrackin_01.Heading = fMission_01;
                                    VehTrackin_01.Repair();
                                    fMission_01 = VehTrackin_01.BodyHealth;
                                    AddTarget(vGetaway, true, true, 1.00f, false, 225, MyLang.Maptext[68]);
                                    TheYellowCorona(vGetaway, 5.00f);
                                    Game.FadeScreenIn(1000);
                                    iMishText = 183;
                                    iMissionSeq += 1;
                                }
                                else if (Target_01 == null)
                                {
                                    if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    {
                                        VehTrackin_01.CurrentBlip.Remove();
                                        AddTarget(vTarget_01, true, true, 1.00f, false, 380, MyLang.Maptext[67]);
                                        TheYellowCorona(vTarget_01, 5.00f);
                                        iMishText = 182;
                                    }
                                }
                                else if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    if (Target_01 != null)
                                    {
                                        RemoveTargets();
                                        VehBlip(VehTrackin_01, true, false, 3, MyLang.Maptext[14]);
                                        iMishText = 81;
                                    }
                                }
                            }
                        }
                        else if (iMissionSeq == 3)
                        {
                            if (VehTrackin_01.IsDead || !VehTrackin_01.IsDriveable)
                                iMissionSeq = 45;
                            
                            if (VehTrackin_01.IsDead)
                                iMissionSeq = 45;
                            else
                            {
                                BtSlideBar.Percentage = MoresMuted_DAmmagedGoods(VehTrackin_01);
                                VTBTimerPool.Draw();        //draw the spookbar to screen.
                                if (BeOnOff[0] && VehTrackin_01.Position.DistanceTo(vGetaway) < 95.50f)
                                {
                                    BeOnOff[0] = false;
                                    VehicleSpawn(sMissionVar_01, vGetaway, fGetDir, false, false, true, false, 0, 0, 0, "", 2, false);
                                    GhostVehicle(VehTrackin_02, vGetaway, fGetDir);
                                }
                                if (VehTrackin_01.Position.DistanceTo(vGetaway) < 1.50f)
                                {
                                    RemoveTargets();
                                    iMissionSeq += 1;
                                }
                                else if (Target_01 == null)
                                {
                                    if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                    {
                                        VehTrackin_01.CurrentBlip.Remove();
                                        AddTarget(vGetaway, true, true, 1.00f, false, 225, MyLang.Maptext[67]);
                                        TheYellowCorona(vGetaway, 5.00f);
                                        iMishText = 183;
                                    }
                                }
                                else if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    if (Target_01 != null)
                                    {
                                        RemoveTargets();
                                        VehBlip(VehTrackin_01, true, false, 3, MyLang.Maptext[14]);
                                        iMishText = 81;
                                    }
                                }
                                else if (MoresMuted_DAmmagedGoods(VehTrackin_01) > 0.90f)
                                {
                                    RemoveTargets();
                                    VehTrackin_01.Explode();
                                }
                            }
                        }
                        else if (iMissionSeq == 4)
                        {
                            if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                            {
                                iWait4Sec = Game.GameTime + 10000;
                                if (VehTrackin_01.Position.DistanceTo(VehTrackin_02.Position) < 0.5f && BeInAngle(5.00f, VehTrackin_01.Heading, VehTrackin_02.Heading))
                                {
                                    iMissionSeq += 1;
                                    iMishText = 184;
                                }
                                else
                                    iMissionSeq = 45;
                                VehTrackin_02.Position = Vector3.Zero;
                            }
                        }
                        else if (iMissionSeq == 5)
                        {
                            if (iWait4Sec < Game.GameTime)
                            {
                                Npc_01 = NPCSpawn(RandNPC(12), VectorList_01[iMissionVar_01], fList_01[iMissionVar_01], false, 250,23, 0, null, 0, true, 0, 0, MyLang.Maptext[105]);
                                iMissionSeq += 1;
                            }
                        }
                        else if (iMissionSeq == 6)
                        {
                            if (Npc_01.IsDead)
                                iMissionSeq = 45;
                            else if (BeenSpotted(Npc_01, Game.Player.Character, true))
                            {
                                AttackThePlayer(Npc_01, true);
                                iMissionSeq = 45;
                            }
                            if (Npc_01.IsInVehicle(VehTrackin_01))
                            {
                                Hitman_RemoveVisionCones();
                                VehTrackin_01.Explode();
                                iCashReward = RandInt(10000,20000);
                                iMissionSeq = 10;
                            }
                        }
                        else if (iMissionSeq == 10)
                        {
                            Hitman_RemoveVisionCones();
                            NSCoinInvestments(false, 5, 7, "Mors Mutual Shares");
                            GameOver(false, "", false, iCashReward);
                        }
                        else if (iMissionSeq == 45)
                        {
                            NSCoinInvestments(true, 5, 7, "Mors Mutual Shares");
                            GameOver(true, "", false, 0);
                        }
                    }       //MoresMute
                    else if (iJobType == 28)
                    {
                        if (iLocationX == 1)
                        {
                            if (iMissionSeq == 0)
                            {
                                iMissionSeq = 1;

                                if (MySettings.FastTraveltoStart)
                                    SlowFastTravel(vFuMiss, 0.00f);
                                iMishText = 185;
                            }
                            else if (iMissionSeq == 1)
                            {
                                if (Game.Player.Character.Position.DistanceTo(vTarget_01) < 1.5f && !Game.Player.Character.IsInVehicle())
                                {
                                    RemoveTargets();
                                    Game.FadeScreenOut(1000);
                                    LoadInMissionIPLs(11, true, false);
                                    TempAgency_01_LoadInShit();
                                    SlowFastTravel(vTarget_02, fMission_01);
                                    iMishText = 186;
                                    iMissionSeq += 1;
                                }
                            }
                            else if (iMissionSeq == 2)
                            {
                                if (Game.Player.Character.IsInVehicle())
                                {
                                    Prop_01 = BuildProp("stt_prop_stunt_soccer_ball", vTarget_02, new Vector3(0.00f, 0.00f, 0.00f), false, false);
                                    iMissionVar_01 = 0;
                                    iMissionVar_03 = 0;
                                    TempAgency_01_AddGoal();
                                    TempAgency_01_FormationNGate();
                                    iMissionVar_04 = Game.GameTime + 280000;
                                    iMissionSeq += 1;

                                    if (BeOnOff[1])
                                        iMishText = 187;
                                    else
                                        iMishText = 188;
                                }
                            }
                            else if (iMissionSeq == 3)
                            {
                                if (!Game.Player.Character.IsInVehicle())
                                    iMissionSeq = 45;
                                else
                                {
                                    if (TempAgency_01_BallTracking())
                                        TempAgency_01_Formation();
                                    else
                                    {
                                        if (iMissionVar_04 < Game.GameTime)
                                            iMissionSeq += 1;
                                        FindTheTime(iMissionVar_04 - Game.GameTime, 2, "", true);
                                        ttTextBar_01.Text = "" + iMissionVar_01 + "/" + iMissionVar_03 + "";
                                    }
                                }
                            }
                            else if (iMissionSeq == 4)
                            {
                                iMissionSeq += 1;
                                if (BeOnOff[1])
                                {
                                    if (iMissionVar_01 > iMissionVar_03)
                                        TempAgency_01_ExitWithCar(false);
                                    else
                                        TempAgency_01_ExitWithCar(true);
                                }
                                else
                                {
                                    if (iMissionVar_01 < iMissionVar_03)
                                        TempAgency_01_ExitWithCar(false);
                                    else
                                        TempAgency_01_ExitWithCar(true);
                                }
                            }
                            else if (iMissionSeq == 45)
                            {
                                SlowFastTravel(vTarget_01, 0.00f);
                                LoadInMissionIPLs(11, false, false);
                                GameOver(true, "", false, 0);
                            }
                        }       //CarBall
                        else if (iLocationX == 2)
                        {
                            if (iMissionSeq == 0)
                            {
                                iMissionSeq = 1;

                                if (MySettings.FastTraveltoStart)
                                    SlowFastTravel(vTarget_01, 0.00f);

                                iMishText = 198;
                            }
                            else if (iMissionSeq == 1)
                            {
                                if (Game.Player.Character.Position.DistanceTo(vTarget_01) < 75.5f)
                                {
                                    TempAgency_02_ClubQUe();
                                    iMissionSeq += 1;
                                }
                            }
                            else if (iMissionSeq == 2)
                            {
                                if (iUltPed01 == 0)
                                    SimpleTracker();
                                else
                                    iMissionSeq = 45;

                                if (Game.Player.Character.Position.DistanceTo(vTarget_01) < 1.5f && !Game.Player.Character.IsInVehicle())
                                {
                                    Game.FadeScreenOut(1000);
                                    RemoveTargets();
                                    if (!bYouGotAClub)
                                        LoadInteriors(1, true);
                                    TempAgency_02_FillClub();
                                    SlowFastTravel(vTarget_02, fMission_01);
                                    iMissionSeq += 1;
                                    SetTheTime(20, 0, 0);
                                    iMishText = 199;
                                    AddTarget(VectorList_02[iMissionVar_01], true, true, 1.00f, false, 93, MyLang.Maptext[70]);
                                    TheYellowCorona(VectorList_02[iMissionVar_01], 1.00f);
                                }
                            }
                            else if (iMissionSeq == 3)
                            {
                                if (iKeepDance < Game.GameTime)
                                    TempAgency_02_RunForTHeHills();

                                if (iUltPed01 == 0)
                                    SimpleTracker();
                                else
                                    iMissionSeq = 45;

                                if (Game.Player.Character.Position.DistanceTo(VectorList_02[iMissionVar_01]) < 1.75f)
                                {
                                    iMissionVar_01 += 1;
                                    RemoveTargets();
                                    if (iMissionVar_01 < VectorList_02.Count)
                                    {
                                        TheYellowCorona(VectorList_02[iMissionVar_01], 1.00f);
                                        AddTarget(VectorList_02[iMissionVar_01], true, true, 1.00f, false, 93, MyLang.Maptext[70]);
                                    }
                                    else
                                    {
                                        VectorList_02.Clear();
                                        ttTextBar_01.Text = "$" + iCashReward;
                                        BeOnOff[0] = true;
                                        TempAgency_02_BarStools();
                                        iMissionVar_01 = 0;
                                        iMishText = 200;
                                        iMissionSeq += 1;
                                    }
                                }
                            }
                            else if (iMissionSeq == 4)
                            {
                                if (iKeepDance < Game.GameTime)
                                    TempAgency_02_RunForTHeHills();

                                if (iUltPed01 == 0)
                                    SimpleTracker();
                                else
                                    iMissionSeq = 45;

                                if (BeRightOnTime(1, 2))
                                    iMissionSeq = 6;

                                BtSlideBar.Percentage = fMission_03;
                                VTBTimerPool.Draw();
                            }
                            else if (iMissionSeq == 5)
                            {
                                if (iKeepDance < Game.GameTime)
                                    TempAgency_02_RunForTHeHills();

                                if (iUltPed01 == 0)
                                    SimpleTracker();
                                else
                                    iMissionSeq = 45;

                                if (Game.Player.Character.Position.DistanceTo(vTarget_03) < 1.5f)
                                {
                                    RemoveTargets();
                                    BeOnOff[0] = true;
                                    iMissionVar_01 = 0;
                                    iMishText = 200;
                                    CashTil.Play();
                                    iCashReward += RandInt(1, 10);
                                    ttTextBar_01.Text = "$" + iCashReward;
                                    iMissionSeq -= 1;
                                }

                                BtSlideBar.Percentage = fMission_03;
                                VTBTimerPool.Draw();
                            }
                            else if (iMissionSeq == 6)
                            {
                                TempAgency_02_CleanOutClub();
                                SlowFastTravel(vTarget_01, fList_01[0]);
                                LoadInteriors(1, false);
                                LoadInMissionIPLs(iList_01[0], false, false);
                                iCashReward += 150;
                                GameOver(false, "", false, iCashReward);
                            }
                            else if (iMissionSeq == 7)
                            {
                                if (iUltPed01 == 0)
                                    SimpleTracker();
                                else
                                    iMissionSeq = 45;
                            }
                            else if (iMissionSeq == 45)
                            {
                                TempAgency_02_CleanOutClub();
                                if (!bYouGotAClub)
                                    LoadInteriors(1, false);
                                LoadInMissionIPLs(iList_01[0], false, false);
                                SlowFastTravel(vTarget_01, fList_01[0]);
                                GameOver(true, "", false, 0);
                            }
                        }       //Knight Club
                        else if (iLocationX == 3)
                        {
                            if (iMissionSeq == 0)
                            {
                                iMissionSeq = 1;
                                Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "restrictedareas");
                                if (MySettings.FastTraveltoStart)
                                    SlowFastTravel(vTarget_01, 0.00f);

                                iMishText = 202;
                            }
                            else if (iMissionSeq == 1)
                            {
                                Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "re_armybase");

                                if (Game.Player.Character.Position.DistanceTo(vTarget_01) < 150.5f)
                                {
                                    if (Game.Player.Character.Position.DistanceTo(vTarget_01) < 1.5f && !Game.Player.Character.IsInVehicle())
                                    {
                                        Game.FadeScreenOut(1000);
                                        RemoveTargets();
                                        LoadInMissionIPLs(17, true, false);
                                        LoadInteriors(2, true);
                                        SlowFastTravel(vTarget_02, fMission_01);
                                        TempAgency_03_HangerDupes();
                                        BeOnOff[0] = false;
                                        BeOnOff[2] = true;
                                        iMissionSeq += 1;
                                    }
                                    iMishText = 203;
                                }
                                else
                                    iMishText = 202;

                            }
                            else if (iMissionSeq == 2)
                            {
                                TempAgency_03_TrackDump();
                                if (VehTrackin_02.IsDead)
                                    iMissionSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(VehTrackin_02))
                                {
                                    ControlerUI(MyLang.Context[28], 1);

                                    if (BeOnOff[1])
                                    {
                                        iMishText = 205;
                                        BeOnOff[1] = false;
                                        VehTrackin_02.CurrentBlip.Remove();
                                    }
                                    else if (Game.IsControlPressed(2, GTA.Control.Context))
                                    {
                                        if (iWait4Sec < Game.GameTime)
                                        {
                                            BeOnOff[0] = true;
                                            ResetTruck(VehTrackin_02, vTarget_03, fMission_02);
                                        }
                                    }
                                    else
                                        iWait4Sec = Game.GameTime + 1000;
                                }
                                else
                                {
                                    if (!BeOnOff[1])
                                    {
                                        iMishText = 204;
                                        BeOnOff[1] = true;
                                        VehBlip(VehTrackin_02, false, false, 3, MyLang.Maptext[77]);
                                    }
                                }
                            }
                            else if (iMissionSeq == 3)
                            {
                                iMissionSeq = 4;
                                BeOnOff[2] = false;
                                TempAgency_03_TruckOff();
                                Game.Player.WantedLevel = 0;
                            }
                            else if (iMissionSeq == 4)
                            {
                                if (Game.Player.WantedLevel > 0)
                                    Game.Player.WantedLevel = 0;
                                if (VehTrackin_01.IsDead)
                                    iMissionSeq = 45;
                                else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    if (Target_01 == null)
                                    {
                                        AddTarget(VectorList_02[3], true, true, 1.00f, false, 774, MyLang.Maptext[42]);
                                        TheYellowCorona(VectorList_02[3], 15.00f);
                                        VehTrackin_01.CurrentBlip.Remove();
                                        iMishText = 207;
                                    }
                                    if (VehTrackin_01.Position.DistanceTo(VectorList_02[3]) < 5.00f)
                                    {
                                        GetOutofVeh(Game.Player.Character, 1);
                                        TempAgency_03_DupeCount();
                                        iMissionSeq = 5;
                                    }
                                }
                                else
                                {
                                    if (Target_01 != null)
                                    {
                                        iMishText = 206;
                                        RemoveTargets();
                                        VehBlip(VehTrackin_01, false, false, 3, MyLang.Maptext[76]);
                                    }
                                }
                            }
                            else if (iMissionSeq == 5)
                            {
                                ZancudaClosed();
                                LoadInteriors(2, false);
                                LoadInMissionIPLs(17, false, false);
                                GameOver(false, "", false, iCashReward);
                            }
                            else if (iMissionSeq == 45)
                            {
                                if (BeOnOff[2])
                                    SlowFastTravel(vTarget_01, fMission_01);
                                ZancudaClosed();
                                LoadInteriors(2, false);
                                LoadInMissionIPLs(17, false, false);
                                GameOver(true, "", false, 0);
                            }
                        }       //Shovell Dupes
                        else if (iLocationX == 4)
                        {
                            if (BeOnOff[0])
                                VTBTimerPool.Draw();

                            if (iMissionSeq == 0)
                            {
                                iMissionSeq = 1;

                                if (MySettings.FastTraveltoStart)
                                    SlowFastTravel(vTarget_01, 0.00f);
                                iMishText = 208;
                            }
                            else if (iMissionSeq == 1)
                            {
                                if (Game.Player.Character.Position.DistanceTo(vTarget_01) < 1.5f && !Game.Player.Character.IsInVehicle())
                                {
                                    RemoveTargets();
                                    LoadInMissionIPLs(20, true, false);
                                    LoadInteriors(3, true);
                                    SlowFastTravel(vTarget_02, fMission_01);

                                    AddTarget(VectorList_01[iMissionVar_01], true, true, 1.00f, false, 110, MyLang.Maptext[82]);
                                    TheYellowCorona(VectorList_01[iMissionVar_01], 1.00f);
                                    iMishText = 209;
                                    iMissionSeq += 1;
                                }
                            }
                            else if (iMissionSeq == 2)
                            {
                                if (iUltPed01 > 1)
                                {
                                    SlowFastTravel(vTarget_01, 180.8543f);
                                    iMissionSeq = 45;
                                }
                                else if (Game.Player.Character.Position.DistanceTo(VectorList_01[iMissionVar_01]) < 1.5f)
                                {
                                    RemoveTargets();
                                    iMissionVar_01 += 1;
                                    if (iMissionVar_01 == 1)
                                    {
                                        TempAgency_04_CasWeaponSkit();
                                        iMishText = 210;
                                        AddTarget(VectorList_01[iMissionVar_01], true, true, 1.00f, false, 73, MyLang.Maptext[81]);
                                        TheYellowCorona(VectorList_01[iMissionVar_01], 1.00f);
                                    }
                                    else if (iMissionVar_01 == 2)
                                    {
                                        WardrobeScan(1);
                                        iMishText = 211;
                                        AddTarget(VectorList_01[iMissionVar_01], true, true, 1.00f, false, 485, MyLang.Maptext[83]);
                                        TheYellowCorona(VectorList_01[iMissionVar_01], 1.00f);
                                    }
                                    else if (iMissionVar_01 == 3)
                                    {
                                        RemoveTargets();
                                        SlowFastTravel(VectorList_01[iMissionVar_01], 180.8543f);
                                        iMissionVar_01 = VectorList_01.Count - 2;
                                        AddTarget(VectorList_01[iMissionVar_01], true, true, 1.00f, false, 485, MyLang.Maptext[83]);
                                        TheYellowCorona(VectorList_01[iMissionVar_01], 1.00f);
                                        ttTextBar_01.Text = "$";
                                        SetTheTime(16, 0, 0);
                                        iMissionSeq += 1;
                                    }
                                }

                                if (iMissionVar_01 > 1 && iMissionVar_01 == 1)
                                    SimpleTracker();
                            }
                            else if (iMissionSeq == 3)
                            {
                                if (Game.Player.Character.Position.DistanceTo(VectorList_01[iMissionVar_01]) < 1.5f)
                                {
                                    RemoveTargets();
                                    iMissionVar_01 += 1;
                                    SlowFastTravel(VectorList_01[iMissionVar_01], 180.8543f);
                                    AddTarget(vTarget_03, true, true, 1.00f, false, 604, MyLang.Maptext[84]);
                                    TheYellowCorona(vTarget_03, 1.00f);
                                    iMishText = 212;
                                    iMissionSeq += 1;
                                }
                            }
                            else if (iMissionSeq == 4)
                            {
                                if (Game.Player.Character.Position.DistanceTo(vTarget_03) < 1.50f)
                                {
                                    if (BeRightOnTime(14, 21) && !BeOnOff[0])
                                    {
                                        if (BeOnOff[1])
                                        {
                                            BeOnOff[1] = false;
                                            SimpleTracker();
                                        }
                                        iWait4Sec = Game.GameTime + RandInt(800, 4500);
                                        iMissionSeq += 1;
                                    }
                                    else
                                    {
                                        if (MishPed.Count > 0)
                                        {
                                            BeOnOff[0] = true;
                                            RemoveTargets();
                                            int iVehPed = RandInt(0, MishPed.Count - 1);
                                            Npc_01 = MishPed[iVehPed];
                                            VehTrackin_01 = VehicleList_01[iVehPed];
                                            Npc_01.Position = VectorList_01[VectorList_01.Count - 1];
                                            WalkThisWay(Npc_01, vTarget_04, 1.00f);
                                            iMissionSeq = 10;
                                        }
                                        else
                                        {
                                            RemoveTargets();
                                            VectorList_01 = ListReverseVec3(VectorList_01);
                                            iMissionVar_01 = 0;
                                            AddTarget(VectorList_01[iMissionVar_01], true, true, 1.00f, false, 485, MyLang.Maptext[83]);
                                            TheYellowCorona(VectorList_01[iMissionVar_01], 1.00f);
                                            Npc_01 = NPCSpawn("s_m_y_valet_01", VectorList_01[iMissionVar_01], 0.00f, false, 150, 0, 0, null, 0, false, 0, 0, "");
                                            WalkThisWay(Npc_01, vTarget_03, 1.00f);
                                            iMishText = 231;
                                            iMissionSeq = 20;
                                        }
                                    }
                                }
                            }
                            else if (iMissionSeq == 5)
                            {
                                if (iWait4Sec < Game.GameTime)
                                {
                                    int iVe = RandInt(1, 5);
                                    VehicleSpawn(RanVehListX(iVe, 1, true), new Vector3(849.81f, -81.44f, 80.49f), 54.77f, false, false, false, false, 19, 0, 0, "", 1, true);
                                    iMissionSeq += 1;
                                }
                            }
                            else if (iMissionSeq == 6)
                            {
                                if (Npc_01.IsDead)
                                    iMissionSeq = 45;
                                else if (VehTrackin_01.Position.DistanceTo(vTarget_04) < 1.75f)
                                {
                                    RemoveTargets();
                                    Npc_01.Task.ClearAll();
                                    GetOutofVeh(Npc_01, 1);
                                    VehBlip(VehTrackin_01, false, false, 3, MyLang.Maptext[15]);
                                    WalkThisWay(Npc_01, VectorList_01[VectorList_01.Count - 1], 1.00f);
                                    iMishText = 213;
                                    iMissionSeq += 1;
                                }
                                else if (VehTrackin_01.IsDamaged)
                                {
                                    PedList_01.Remove(Npc_01);
                                    MishPed.Remove(Npc_01);
                                    Npc_01.MarkAsNoLongerNeeded();
                                    VehicleList_01.Remove(VehTrackin_01);
                                    VehTrackin_01.MarkAsNoLongerNeeded();
                                    iMissionSeq -= 1;
                                }
                            }
                            else if (iMissionSeq == 7)
                            {
                                if (Npc_01.IsDead)
                                    iMissionSeq = 45;
                                else if (Npc_01.Position.DistanceTo(VectorList_01[VectorList_01.Count - 1]) < 1.50f)
                                {
                                    Npc_01.Task.ClearAll();
                                    Npc_01.Position = vTarget_02;
                                }
                                else if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    VehTrackin_01.CurrentBlip.Remove();
                                    AddTarget(vTarget_05, true, true, 1.00f, false, 524, MyLang.Maptext[85]);
                                    TheYellowCorona(vTarget_05, 5.00f);
                                    iMishText = 214;
                                    iMissionSeq += 1;
                                }
                            }
                            else if (iMissionSeq == 8)
                            {
                                if (VehTrackin_01.Position.DistanceTo(vTarget_05) < 2.50f)
                                {
                                    RemoveTargets();
                                    VehTrackin_01.Position = vTarget_06;
                                    VehTrackin_01.Heading = 266.8939f;
                                    Npc_01.Task.ClearAll();
                                    Npc_01.Position = vTarget_02;
                                    iMissionSeq += 1;
                                }
                                else if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    if (Target_01 != null)
                                    {
                                        RemoveTargets();
                                        VehBlip(VehTrackin_01, false, false, 3, MyLang.Maptext[15]);
                                        iMishText = 81;
                                    }
                                }
                                else
                                {
                                    if (Target_01 == null)
                                    {
                                        VehTrackin_01.CurrentBlip.Remove();
                                        AddTarget(vTarget_05, true, true, 1.00f, false, 524, MyLang.Maptext[85]);
                                        TheYellowCorona(vTarget_05, 5.00f);
                                        iMishText = 214;
                                    }
                                }
                            }
                            else if (iMissionSeq == 9)
                            {
                                if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    iMissionVar_01 = VectorList_01.Count - 2;
                                    AddTarget(VectorList_01[iMissionVar_01], true, true, 1.00f, false, 485, MyLang.Maptext[83]);
                                    TheYellowCorona(VectorList_01[iMissionVar_01], 1.00f);
                                    iMishText = 215;
                                    iMissionSeq = 3;
                                }
                            }
                            else if (iMissionSeq == 10)
                            {
                                if (Npc_01.IsDead)
                                    iMissionSeq = 45;
                                else if (Npc_01.Position.DistanceTo(vTarget_04) < 6.75f)
                                {
                                    RemoveTargets();
                                    Npc_01.Task.ClearAll();
                                    iMissionVar_01 = VectorList_01.Count - 1;
                                    AddTarget(VectorList_01[iMissionVar_01], true, true, 1.00f, false, 485, MyLang.Maptext[83]);
                                    TheYellowCorona(VectorList_01[iMissionVar_01], 1.00f);
                                    iMishText = 216;
                                    iMissionSeq += 1;
                                }
                            }
                            else if (iMissionSeq == 11)
                            {
                                if (Npc_01.IsDead)
                                    iMissionSeq = 45;
                                else if (Game.Player.Character.Position.DistanceTo(VectorList_01[iMissionVar_01]) < 1.5f)
                                {
                                    RemoveTargets();
                                    iMissionVar_01 -= 1;
                                    SlowFastTravel(VectorList_01[iMissionVar_01], 180.8543f);
                                    iMishText = 213;
                                    iMissionSeq += 1;
                                }
                            }
                            else if (iMissionSeq == 12)
                            {
                                World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(VehTrackin_01.Position.X, VehTrackin_01.Position.Y, VehTrackin_01.Position.Z + 1.25f), Vector3.Zero, new Vector3(0.00f, 180.00f, VehTrackin_01.Heading), new Vector3(0.50f, 0.50f, 0.50f), color: Color.CadetBlue);
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    AddTarget(vTarget_07, true, true, 1.00f, false, -1, MyLang.Maptext[64]);
                                    TheYellowCorona(vTarget_07, 5.00f);

                                    iMishText = 217;
                                    iMissionSeq += 1;
                                }
                            }
                            else if (iMissionSeq == 13)
                            {
                                if (VehTrackin_01.Position.DistanceTo(vTarget_07) < 2.50f)
                                {
                                    RemoveTargets();
                                    VehTrackin_01.Position = vTarget_05;
                                    VehTrackin_01.Heading = 148.7573f;
                                    AddTarget(vTarget_04, true, true, 1.00f, false, -1, MyLang.Maptext[75]);
                                    TheYellowCorona(vTarget_04, 5.00f);
                                    iMissionSeq += 1;
                                }
                                else if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    if (Target_01 != null)
                                    {
                                        RemoveTargets();
                                        VehBlip(VehTrackin_01, false, false, 3, MyLang.Maptext[15]);
                                        iMishText = 81;
                                    }
                                }
                                else
                                {
                                    if (Target_01 == null)
                                    {
                                        VehTrackin_01.CurrentBlip.Remove();
                                        AddTarget(vTarget_07, true, true, 1.00f, false, 280, MyLang.Maptext[75]);
                                        TheYellowCorona(vTarget_07, 5.00f);
                                        iMishText = 217;
                                    }
                                }
                            }
                            else if (iMissionSeq == 14)
                            {
                                if (Npc_01.IsDead)
                                    iMissionSeq = 45;
                                else if (VehTrackin_01.Position.DistanceTo(vTarget_04) < 2.50f && VehTrackin_01.IsStopped)
                                {
                                    RemoveTargets();
                                    AddTarget(vTarget_03, true, true, 1.00f, false, 604, MyLang.Maptext[84]);
                                    TheYellowCorona(vTarget_03, 1.00f);
                                    Game.Player.Character.Task.LeaveVehicle();
                                    iMishText = 212;
                                    if (VehTrackin_01.Health < 850)
                                        AttackThePlayer(Npc_01, false);
                                    else
                                        iCashReward += RandInt(10, 100);
                                    ttTextBar_01.Text = "$" + ShowComs(iCashReward, true, false);
                                    Script.Wait(2000);
                                    Npc_01.Task.ClearAll();
                                    EnterAnyVeh(VehTrackin_01, Npc_01, 0, 1.00f);
                                    iMissionSeq += 1;
                                }
                                else if (!Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    if (Target_01 != null)
                                    {
                                        RemoveTargets();
                                        VehBlip(VehTrackin_01, false, false, 3, MyLang.Maptext[15]);
                                        iMishText = 81;
                                    }
                                }
                                else
                                {
                                    if (Target_01 == null)
                                    {
                                        VehTrackin_01.CurrentBlip.Remove();
                                        AddTarget(vTarget_06, true, true, 1.00f, false, 280, MyLang.Maptext[75]);
                                        TheYellowCorona(vTarget_06, 5.00f);
                                        iMishText = 212;
                                    }
                                }
                            }
                            else if (iMissionSeq == 15)
                            {
                                if (Npc_01.IsDead)
                                    iMissionSeq = 45;
                                else if (Npc_01.IsInVehicle(VehTrackin_01))
                                {
                                    MishPed.Remove(Npc_01);
                                    PedList_01.Remove(Npc_01);
                                    VehicleList_01.Remove(VehTrackin_01);
                                    VehTrackin_01.MarkAsNoLongerNeeded();
                                    Npc_01.MarkAsNoLongerNeeded();
                                    iMissionSeq = 4;
                                }
                            }
                            else if (iMissionSeq == 20)
                            {
                                if (Game.Player.Character.Position.DistanceTo(VectorList_01[iMissionVar_01]) < 1.5f)
                                {
                                    RemoveTargets();
                                    iMissionVar_01 += 1;
                                    if (iMissionVar_01 == 1)
                                    {
                                        SlowFastTravel(VectorList_01[iMissionVar_01], 180.8543f);
                                        iMissionVar_01 += 1;
                                        AddTarget(VectorList_01[iMissionVar_01], true, true, 1.00f, false, 485, MyLang.Maptext[83]);
                                        TheYellowCorona(VectorList_01[iMissionVar_01], 1.00f);
                                    }
                                    else if (iMissionVar_01 == 3)
                                    {
                                        SlowFastTravel(VectorList_01[iMissionVar_01], 180.8543f);
                                        iMissionVar_01 += 1;
                                        AddTarget(VectorList_01[iMissionVar_01], true, true, 1.00f, false, 73, MyLang.Maptext[81]);
                                        TheYellowCorona(VectorList_01[iMissionVar_01], 1.00f);
                                        TempAgency_04_CasDoors();
                                    }
                                    else if (iMissionVar_01 == 5)
                                    {
                                        WardOutPut("MissionOut.Xml", Game.Player.Character);
                                        AddTarget(VectorList_01[iMissionVar_01], true, true, 1.00f, false, 110, MyLang.Maptext[82]);
                                        TheYellowCorona(VectorList_01[iMissionVar_01], 1.00f);
                                        iMishText = 232;
                                    }
                                    else
                                    {
                                        ReturnWeaps();
                                        DeleteAllProps();
                                        vTarget_02.Z -= 1.00f;
                                        AddTarget(vTarget_02, true, true, 1.00f, false, 485, MyLang.Maptext[83]);
                                        TheYellowCorona(vTarget_02, 1.00f);
                                        iMishText = 233;
                                        iMissionSeq += 1;
                                    }
                                }
                            }
                            else if (iMissionSeq == 21)
                            {
                                if (Game.Player.Character.Position.DistanceTo(vTarget_02) < 1.5f)
                                {
                                    SlowFastTravel(vTarget_01, 180.8543f);
                                    NSCoinInvestments(true, 6, 10, "Diamond Resort");
                                    GameOver(false, "", false, iCashReward);
                                }

                            }
                            else if (iMissionSeq == 45)
                            {
                                WardOutPut("MissionOut.Xml", Game.Player.Character);
                                LoadInteriors(3, false);
                                LoadInMissionIPLs(18, false, false);
                                NSCoinInvestments(false, 9, 15, "Diamond Resort");
                                GameOver(true, "", false, 0);
                                ReturnWeaps();
                            }
                        }       //Cas Valey
                        else if (iLocationX == 5)
                        {
                            if (iMissionSeq == 0)
                            {
                                iMissionSeq = 1;

                                if (MySettings.FastTraveltoStart)
                                    SlowFastTravel(vTarget_09, 0.00f);

                                bTestRun = false;
                                RemoveTargets();
                                TheYellowCorona(vTarget_09, 1.00f);
                                AddTarget(vTarget_09, true, true, 1.00f, false, 590, MyLang.Maptext[86]);
                                
                                iMishText = 237;
                            }
                            else if (iMissionSeq == 1)
                            {
                                if (Game.Player.Character.Position.DistanceTo(vTarget_09) < 1.5f && !Game.Player.Character.IsInVehicle())
                                {
                                    RemoveTargets();
                                    LoadInteriors(4, true);
                                    SlowFastTravel(vTarget_10, fMission_01);
                                    VehicleSpawn("BMX", vTarget_05, 10.00f, false, true, false, false, 0, 0, 0, "", 1, false);
                                    WarptoAnyVeh(VehTrackin_01, Game.Player.Character, 1);
                                    vTarget_01 = MyMissions.RaceXM[iMissionVar_01].TheRace[0];
                                    iCashBouns = 0;
                                    fCorSize = 5.00f;
                                    fAiCoronaListSize = 4.50f;
                                    fCoronaDirHt = 4.75f;
                                    fCoronaHight = -2.00f;
                                    iRacingStyle = 16777216;
                                    VTBTimerPool.Remove(ttTextBar_03);
                                    TempAgency_05_AddBlocks();
                                    ttTextBar_02.Label = MyLang.Othertext[154];
                                    ttTextBar_02.Text = "$ 0";
                                    bSoloRace = false;
                                    Racist_StartLine();
                                    iMissionSeq += 1;
                                }
                            }
                            else if (iMissionSeq == 2)
                            {
                                if (Game.Player.Character.IsInVehicle())
                                {
                                    iMissionSeq += 1;
                                    iMishText = -1;
                                    Racist_CountDown(vTarget_01);
                                    VehTrackin_01.FreezePosition = false;
                                    VehTrackin_02.FreezePosition = false;
                                    VehTrackin_03.FreezePosition = false;
                                    VehTrackin_04.FreezePosition = false;

                                    iList_01[6] = CheckPointPro(false, MyMissions.RaceXM[iMissionVar_01].TheRace, MyMissions.RaceXM[iMissionVar_01].TheRace.Count - 1);

                                    vTarget_02 = vTarget_01;                             
                                }
                            }
                            else if (iMissionSeq == 3)
                            {
                                if (Game.Player.Character.Position.DistanceTo(vTarget_01) < fCorSize)
                                {
                                    iMissionSeq = 4;
                                    BeOff[2] = false;
                                    iCurrentLap -= 1;
                                    iList_01[1] = Game.GameTime;//worldtime
                                    iList_01[2] = Game.GameTime;//currenttime
                                    int iOnLap = iTotalLap - iCurrentLap;
                                    TempAgency_05_RemoveDoors();
                                    iList_01[6] = CheckPointPro(false, MyMissions.RaceXM[iMissionVar_01].TheRace, iList_01[6]);
                                    fMission_01 = VehTrackin_01.Heading;
                                }
                                Racist_PosTime(true);
                            }
                            else if (iMissionSeq == 4)
                            {
                                if (!Game.Player.Character.IsInVehicle() || ButtonDown(75))
                                    Racist_BackOnTrack(Game.Player.Character, VehTrackin_01, vTarget_02, fMission_01,true,true);
                                else if (Game.Player.Character.Position.DistanceTo(vTarget_01) < fCorSize)
                                {
                                    if (iList_01[6] == MyMissions.RaceXM[iMissionVar_01].TheRace.Count - 1)
                                    {
                                        TempAgency_05_RemoveDoors();
                                        if (iCurrentLap == 0)
                                            iList_01[6] = CheckPointPro(true, MyMissions.RaceXM[iMissionVar_01].TheRace, iList_01[6]);
                                        else
                                            iList_01[6] = CheckPointPro(false, MyMissions.RaceXM[iMissionVar_01].TheRace, iList_01[6]);
                                    }
                                    else if (iList_01[6] == 0)
                                    {
                                        iList_01[3] += 1;
                                        iCurrentLap -= 1;
                                        int iLapX = iList_01[2] - Game.GameTime;
                                        iDeliverList.Add(iLapX);
                                        iList_01[2] = Game.GameTime;

                                        if (iCurrentLap < 0)
                                            iMissionSeq = 5;
                                        else
                                        {
                                            int iOnLap = iTotalLap - iCurrentLap;
                                            BigMessageThread.MessageInstance.ShowSimpleShard("LAP " + iOnLap + "/" + iTotalLap + "", "", 5000);
                                            iList_01[6] = CheckPointPro(false, MyMissions.RaceXM[iMissionVar_01].TheRace, iList_01[6]);
                                        }
                                    }
                                    else
                                        iList_01[6] = CheckPointPro(false, MyMissions.RaceXM[iMissionVar_01].TheRace, iList_01[6]);
                                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "CHECKPOINT_UNDER_THE_BRIDGE", "HUD_MINI_GAME_SOUNDSET", true);
                                }
                                else if (!VehTrackin_01.IsOnAllWheels && Game.Player.Character.IsInVehicle())
                                {
                                    iCashReward += 1;
                                    ttTextBar_02.Text = "$" + ShowComs(iCashReward, true, false);
                                }
                                Racist_PosTime(true);
                            }
                            else if (iMissionSeq == 5)
                            {
                                iMissionSeq = 99;
                                LoadInteriors(4, false);
                                LoadInMissionIPLs(19, false, false);
                                SlowFastVehicleTravel(vTarget_09, fMission_01);
                                RaceEnd(false);
                            }
                            else if (iMissionSeq == 45)
                            {
                                LoadInteriors(4, false);
                                LoadInMissionIPLs(19, false, false);
                                SlowFastTravel(vTarget_09, fMission_01);
                                RaceEnd(true);
                            }
                        }       //Bmx Facility
                        else
                        {
                            if (iMissionSeq == 0)
                            {
                                iMissionSeq = 1;
                                iUltPed01 = 0;
                                iMishText = 219;
                                if (MySettings.FastTraveltoStart)
                                    SlowFastTravel(vTarget_01, 0.00f);
                            }
                            else if (iMissionSeq == 1)
                            {
                                if (Game.Player.Character.Position.DistanceTo(vTarget_01) < 1.95f && !Game.Player.Character.IsInVehicle())
                                {
                                    RemoveTargets();
                                    SlowFastTravel(vTarget_02, fMission_01);
                                    TempAgency_06_AddVehs();
                                    PedBlimp(Npc_01, 0.75f, false, false, 3, MyLang.Maptext[95]);
                                    iMishText = 220;
                                    iMissionSeq += 1;
                                }
                            }
                            else if (iMissionSeq == 2)
                            {
                                if (Game.Player.Character.Position.DistanceTo(Npc_01.Position) < 1.5f)
                                {
                                    iMissionSeq += 1;
                                    Npc_01.CurrentBlip.Remove();
                                    TempAgency_06_GoFetch(1);
                                    iMishText = 224;
                                }
                            }
                            else if (iMissionSeq == 3)
                            {
                                if (VehTrackin_01.Position.DistanceTo(vTarget_03) < 5.00f)
                                {
                                    iMissionSeq += 1;
                                    RemoveTargets();
                                    Game.Player.Character.Task.LeaveVehicle();
                                    Npc_01.CurrentBlip.Remove();
                                    PedBlimp(Npc_02, 0.75f, false, false, 3, MyLang.Maptext[97]);
                                    if (VehTrackin_01.CurrentBlip.Exists())
                                        VehTrackin_01.CurrentBlip.Remove();
                                    iMishText = 221;
                                }
                                else
                                {
                                    if (Game.Player.Character.IsInVehicle(VehTrackin_01) || VehTrackin_01.IsAttached())
                                    {
                                        if (VehTrackin_01.CurrentBlip.Exists())
                                        {
                                            VehTrackin_01.CurrentBlip.Remove();
                                            PedBlimp(Npc_01, 0.75f, false, true, 66, MyLang.Maptext[95]);
                                            TheYellowCorona(vTarget_03, 5.00f);
                                            iMishText = 225;
                                        }
                                    }
                                    else
                                    {
                                        if (Npc_01.CurrentBlip.Exists())
                                        {
                                            RemoveTargets();
                                            Npc_01.CurrentBlip.Remove();
                                            VehBlip(VehTrackin_01, true, false, 3, sMissionVar_01);
                                            iMishText = 224;
                                        }
                                    }
                                }
                            }
                            else if (iMissionSeq == 4)
                            {
                                if (Game.Player.Character.Position.DistanceTo(Npc_02.Position) < 1.5f)
                                {
                                    iMissionSeq += 1;
                                    Npc_02.CurrentBlip.Remove();
                                    TempAgency_06_GoFetch(2);
                                    iMishText = 224;
                                }
                            }
                            else if (iMissionSeq == 5)
                            {
                                if (PickupBling(Prop_01))
                                {
                                    iMissionSeq += 1;
                                    RemoveTargets();
                                    Prop_01 = null;
                                    PedBlimp(Npc_02, 0.75f, false, false, 3, MyLang.Maptext[96]);
                                    iMishText = 226;
                                }
                            }
                            else if (iMissionSeq == 6)
                            {
                                if (Game.Player.Character.Position.DistanceTo(Npc_02.Position) < 1.5f)
                                {
                                    iMissionSeq += 1;
                                    Npc_02.CurrentBlip.Remove();
                                    PedBlimp(Npc_03, 0.75f, false, false, 3, MyLang.Maptext[97]);
                                    iMishText = 222;
                                }
                            }
                            else if (iMissionSeq == 7)
                            {
                                if (Game.Player.Character.Position.DistanceTo(Npc_03.Position) < 1.5f)
                                {
                                    iMissionSeq += 1;
                                    Npc_03.CurrentBlip.Remove();
                                    TempAgency_06_GoFetch(3);
                                    iMishText = 224;
                                }
                            }
                            else if (iMissionSeq == 8)
                            {
                                if (PickupBling(Prop_02))
                                {
                                    iMissionSeq += 1;
                                    RemoveTargets();
                                    Prop_02 = null;
                                    PedBlimp(Npc_03, 0.75f, false, false, 66, MyLang.Maptext[97]);
                                    iMishText = 227;
                                }
                            }
                            else if (iMissionSeq == 9)
                            {
                                if (Game.Player.Character.Position.DistanceTo(Npc_03.Position) < 1.5f)
                                {
                                    iMissionSeq += 1;
                                    Npc_03.CurrentBlip.Remove();
                                    TempAgency_06_PlayerAttacks();
                                    iMishText = 228;
                                }
                            }
                            else if (iMissionSeq == 10)
                            {
                                TempAgency_06_PlayerBrains();
                                if (MultiPed.Count == 0)
                                    iMissionSeq += 1;
                            }
                            else if (iMissionSeq == 11)
                            {
                                iCashReward = 50000;
                                MyLang.Mistext[224] = sMissionVar_02;
                                LoadInMissionIPLs(19, false, false);
                                SlowFastTravel(vTarget_01, 0.00f);
                                GameOver(false, "", false, iCashReward);
                            }
                            else if (iMissionSeq == 45)
                            {
                                if (iMissionSeq > 1)
                                    SlowFastTravel(vTarget_01, 0.00f);
                                MyLang.Mistext[224] = sMissionVar_02;
                                LoadInMissionIPLs(19, false, false);
                                GameOver(true, "", false, 0);
                            }
                        }       //PPaleto Labs
                    }       //TempAgency
                    else if (iJobType == 29)
                    {
                        if (iMissionSeq == 0)
                        {
                            Game.FadeScreenOut(1000);
                            Script.Wait(1001);
                            Parra_Load();
                            VehTrackin_01.FreezePosition = false;
                            Game.FadeScreenIn(1000);
                            Function.Call(Hash.SET_VEHICLE_POPULATION_BUDGET, 0);
                            Function.Call(Hash.SET_PED_POPULATION_BUDGET, 0);
                            Function.Call(Hash.SET_FAR_DRAW_VEHICLES, false);

                            iTime_01.Add(Game.GameTime + 5000);//timer0

                            iMissionSeq += 1;
                        }
                        else if (iMissionSeq == 1)
                        {
                            if (iTime_01[0] < Game.GameTime)
                            {
                                Function.Call(Hash.SET_VEHICLE_DOOR_OPEN, VehTrackin_01.Handle, 5, false, false);
                                AddTarget(vTarget_01, false, true, fCorSize, false, 550, MyLang.Maptext[122]);
                                iTime_01[0] = Game.GameTime + 500;
                                iMissionSeq += 1;
                            }
                        }
                        else if (iMissionSeq == 2)
                        {
                            if (VehTrackin_01.Position.DistanceTo(vTarget_01) < 1750.00f)
                            {
                                iMissionSeq += 1;                              
                                iMishText = 234;
                            }
                        }
                        else if (iMissionSeq == 3)
                        {
                            ControlerUI(MyLang.Context[29], 1);

                            if (Game.IsControlPressed(2, GTA.Control.Context))
                            {
                                if (iTime_01[0] < Game.GameTime)
                                {
                                    VehTrackin_01.HasCollision = false;
                                    Game.Player.Character.Task.ClearAnimation("amb@code_human_in_bus_passenger_idles@male@sit@base", "base");
                                    Game.Player.Character.Detach();
                                    Game.Player.Character.FreezePosition = false;
                                    iTime_01[0] = Game.GameTime + 5000;
                                    iMishText = 235;
                                    iMissionSeq += 1;
                                }
                            }
                            else
                                iTime_01[0] = Game.GameTime + 500;

                            if (iWait4Sec < Game.GameTime)
                                Parra_Jump(true);
                        }
                        else if (iMissionSeq == 4)
                        {
                            if (iTime_01[0] < Game.GameTime)
                            {
                                if (Function.Call<int>(Hash.GET_PED_PARACHUTE_STATE, Game.Player.Character.Handle) == -1)
                                {
                                    iMissionSeq += 1;
                                    BeOnOff[1] = true;
                                    iTime_01.Add(Game.GameTime + iMissionVar_01);
                                }
                            }

                            ClearTheWay(true);

                            Parra_Jump(false);
                        }
                        else if (iMissionSeq == 5)
                        {
                            if (fCorSize > 51)
                            {
                                if (iTime_01[1] < Game.GameTime)
                                {
                                    if (iMissionVar_01 > 5001)
                                        iMissionVar_01 -= 5000;

                                    if (fCorSize < 1000)
                                    {
                                        RemoveTargets();
                                        iTime_01[1] = Game.GameTime + iMissionVar_01;

                                        if (iMissionVar_01 < 4999)
                                            iMissionVar_01 = 5000;

                                        fCorSize -= 50;
                                        if (fCorSize < 50)
                                            fCorSize = 50;
                                        AddTarget(vTarget_01, false, true, fCorSize, false, 550, MyLang.Maptext[122]);
                                    }
                                    else
                                    {
                                        RemoveTargets();
                                        iTime_01[1] = Game.GameTime + iMissionVar_01;
                                        if (iMissionVar_01 > 9999)
                                            iMissionVar_01 -= 7500;
                                        fCorSize -= 500;
                                        AddTarget(vTarget_01, false, true, fCorSize, false, 550, MyLang.Maptext[122]);
                                    }
                                }
                                ttTextBar_01.Text = ShowComs(iTime_01[1] - Game.GameTime, false, false);
                            }
                            else
                                ttTextBar_01.Text = "--:--";

                            if (BeOnOff[0])
                            {
                                if (Game.Player.Character.Position.DistanceTo(vTarget_01) < fCorSize)
                                {
                                    BeOnOff[0] = false;
                                    RemoveTargets();
                                    AddTarget(vTarget_01, false, true, fCorSize, false, 550, MyLang.Maptext[122]);
                                    iMishText = 235;
                                }
                                else if (iTime_01[0] < Game.GameTime)
                                    iMissionSeq = 45;
                            }
                            else
                            {
                                if (!BeOnOff[0])
                                {
                                    if (Game.Player.Character.Position.DistanceTo(vTarget_01) > fCorSize)
                                    {
                                        BeOnOff[0] = true;
                                        RemoveTargets();
                                        AddTarget(vTarget_01, false, true, fCorSize, true, 550, MyLang.Maptext[122]);
                                        iTime_01[0] = Game.GameTime + 10000;
                                        iMishText = 236;
                                    }
                                }
                            }

                            if (BeOnOff[1])
                            {
                                if (Game.Player.Character.IsInVehicle())
                                {
                                    BeOnOff[1] = false;
                                    BeOnOff[2] = true;
                                    ArmsRegulator(Game.Player.Character, 5);
                                }
                            }
                            else if (BeOnOff[2])
                            {
                                if (Game.Player.Character.Position.DistanceTo(vTarget_01) < 35.00f)
                                {
                                    BeOnOff[2] = false;
                                    Parra_CarLocks();
                                }
                            }

                            ClearTheWay(true);

                            Parra_Jump(false);
                            
                            VTBTimerPool.Draw();

                            if (Game.Player.WantedLevel > 0)
                                Game.Player.WantedLevel = 0;
                        }
                        else if (iMissionSeq == 6)
                        {
                            Parra_RemoveShit();
                            NSCoinInvestments(true, 12, 22, "Epic Shares");
                            GameOver(false, "", false, iCashReward);
                        }
                        else if (iMissionSeq == 45)
                        {
                            GameOver(true, "", false, 0);
                            Game.Player.Character.FreezePosition = false;
                            Parra_RemoveShit();
                        }
                    }       //ParaDisplay
                    else if (iJobType == 30)
                    {
                        if (iMissionSeq == 0)
                        {
                            iMissionSeq += 1;

                            if (MySettings.FastTraveltoStart)
                                SlowFastTravel(vFuMiss, 0.00f);

                            iMishText = 229;
                        }
                        else if (iMissionSeq == 1)
                        {
                            if (Game.Player.Character.Position.DistanceTo(vTarget_01) < 1.5f)
                            {
                                RemoveTargets();
                                Game.FadeScreenOut(1000);
                                Script.Wait(1000);

                                if (!bDeliverWowRep)
                                    WardrobeScan(2);

                                vFuMiss = vTarget_03;
                                Game.Player.Character.Heading += 180.00f;
                                Game.FadeScreenIn(1000);
                                AddTarget(vTarget_02, true, true, 1.00f, false, 480, MyLang.Maptext[75]);
                                iMishText = 230;
                                iMissionSeq += 1;
                            }
                        }
                        else if (iMissionSeq == 2)
                        {
                            if (Game.Player.Character.Position.DistanceTo(vTarget_02) < 75.5f)
                            {
                                Npc_01 = NPCSpawn(RandNPC(RandInt(1,54)), vTarget_02, RandInt(0, 359), false, 150, 13, 0, null, 0, false, 0, 0, "");
                                iMissionSeq += 1;
                            }
                        }
                        else if (iMissionSeq == 3)
                        {
                            if (Npc_01.IsDead || Npc_01.IsFleeing)
                                iMissionSeq = 45;
                            else if (Game.Player.Character.Position.DistanceTo(Npc_01.Position) < 1.50f)
                            {
                                CleanUpPeds();
                                iMissionSeq += 1;
                                RemoveTargets();
                                iMishText = -1;
                                ControlSelect(11, false);
                            }
                        }
                        else if (iMissionSeq == 45)
                        {
                            bDeliverWowRep = false;
                            WardOutPut("MissionOut.Xml", Game.Player.Character);
                            GameOver(true, "", false, 0);
                        }
                    }       //dELIVERWHO
                    else if (iJobType == 101)
                    {
                        iJobType = 3;
                    }       //CayoPackages--Directed to iJobType == 3
                    else if (iJobType == 102)
                    {
                        if (BeOnOff[0])
                        {
                            if (World.GetDistance(Game.Player.Character.Position, Npc_01.Position) < 60.00f)   // Distance tracking for Spookbar
                            {
                                if (iTime_01[1] != 0)
                                    iTime_01[1] = 0;      //timer for spook fail
                                fMission_02 = World.GetDistance(Game.Player.Character.Position, Npc_01.Position) / 100.00f;// Find the percent for Spookbar float 0.00 to 1.00
                                fMission_02 = 1.00f - fMission_02;
                                if (fMission_02 < 0.01f)
                                    fMission_02 = 0.01f;
                                BtSlideBar.BackgroundColor = Color.Black;
                            }
                            else       // if player is out side min distance
                            {
                                fMission_02 = 0.00f;
                                if (iTime_01[1] == 0) // set timmer for distance fail
                                    iTime_01[1] = Game.GameTime + 6000;
                                else if (iTime_01[1] < Game.GameTime) // fail if timmer runs out
                                    iMissionSeq = 45;
                                if (BeOnOff[1]) // bar flash for distance warning. is a 1/2 sec toggle on off.
                                {
                                    if (iTime_01[2] < Game.GameTime)
                                    {
                                        BeOnOff[1] = false;
                                        iTime_01[2] = Game.GameTime + 500;
                                        BtSlideBar.BackgroundColor = Color.White;
                                    }
                                }
                                else
                                {
                                    if (iTime_01[2] < Game.GameTime)
                                    {
                                        BeOnOff[1] = true;
                                        iTime_01[2] = Game.GameTime + 500;
                                        BtSlideBar.BackgroundColor = Color.Black;
                                    }
                                }
                            }

                            if (fMission_02 > 0.95f)  // test if too close to target
                            {
                                if (!BeOnOff[2])
                                {
                                    if (iTime_01[3] == 0)  // set timmer for too close fail
                                        iTime_01[3] = Game.GameTime + 6000;
                                    else if (iTime_01[3] < Game.GameTime)  // too close fail.
                                        iMissionSeq = 45;

                                    if (BeOnOff[1]) // bar flash for distance warning. is a 1/2 sec toggle on off.
                                    {
                                        if (iTime_01[4] < Game.GameTime)
                                        {
                                            BeOnOff[1] = false;
                                            iTime_01[4] = Game.GameTime + 500;
                                            BtSlideBar.ForegroundColor = Color.White;
                                        }
                                    }
                                    else
                                    {
                                        if (iTime_01[4] < Game.GameTime)
                                        {
                                            BeOnOff[1] = true;
                                            iTime_01[4] = Game.GameTime + 500;
                                            BtSlideBar.ForegroundColor = Color.Red;
                                        }
                                    }
                                }
                                BtSlideBar.Percentage = fMission_02;   // set the native ui Bar to the current distance percent.
                                VTBTimerPool.Draw();        //draw the spookbar to screen.
                            }
                            else    //draw the spookbar to screen where the player is at the correct distance.
                            {
                                if (iTime_01[3] != 0)
                                    iTime_01[3] = 0;
                                BtSlideBar.Percentage = fMission_02;
                                BtSlideBar.ForegroundColor = Color.Yellow;
                                VTBTimerPool.Draw();
                            }
                        }

                        if (iMissionSeq == 0)
                        {
                            iMissionSeq = 1;
                            BeOnOff[3] = true;
                            iMissionVar_01 = 0;
                            vTarget_01 = VectorList_01[iMissionVar_01];
                            AddTarget(vTarget_01, true, true, 75.00f, false, 66, MyLang.Maptext[26]);
                            Npc_01 = NPCSpawn("", vTarget_01, 0.00f, false, 150, 17, 0, null, 0, false, 0, 1, "");

                            if (bNotPause)
                            {
                                Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                bNotPause = false;
                            }

                            if (MySettings.FastTraveltoStart)
                                SlowFastTravel(vTarget_02, 0.00f);
                            iMishText = 174;
                        }
                        else if (iMissionSeq == 1)
                        {
                            if (Npc_01.IsDead)
                                iMissionSeq = 45;
                            else if (Npc_01.Position.DistanceTo(vTarget_01) < 2.50f)
                            {
                                iMissionVar_01 += 1;
                                if (PedRunToFoward(Npc_01, VectorList_01, iMissionVar_01))
                                    vTarget_01 = VectorList_01[iMissionVar_01];
                                else
                                {
                                    if (!BeOnOff[0])
                                        iMissionSeq = 45;
                                    else
                                    {
                                        iMissionSeq = 2;
                                        iMissionVar_01 = 0;
                                        PedRunToFoward(Npc_01, VectorList_02, iMissionVar_01);
                                        vTarget_01 = VectorList_02[iMissionVar_01];
                                    }
                                }
                            }
                            else if (!BeOnOff[0])
                            {
                                if (Game.Player.Character.Position.DistanceTo(Npc_01.Position) < 55.00f)
                                {
                                    BeOnOff[0] = true;
                                    if (BeOnOff[3])
                                        RemoveTargets();
                                    Hitman_AddVisionCones(Npc_01);
                                    iMishText = 175;
                                }
                                else if (BeOnOff[3])
                                {
                                    if (Npc_01.Position.DistanceTo(VectorList_01[0]) > 75.00f)
                                    {
                                        BeOnOff[3] = false;
                                        RemoveTargets();
                                    }
                                }
                            }
                            else if (BeenSpotted(Npc_01, Game.Player.Character, true))
                                iMissionSeq = 45;
                            if (iWait4Sec < Game.GameTime)
                                KeepMoving(Npc_01, vTarget_01, 2500);
                        }
                        else if (iMissionSeq == 2)
                        {
                            if (Npc_01.IsDead)
                                iMissionSeq = 45;
                            else if (Npc_01.Position.DistanceTo(vTarget_01) < 2.50f)
                            {
                                iMissionVar_01 += 1;
                                if (PedRunToFoward(Npc_01, VectorList_02, iMissionVar_01))
                                    vTarget_01 = VectorList_02[iMissionVar_01];
                                else
                                {
                                    BeOnOff[0] = false;
                                    PedScenario(Npc_01, "WORLD_HUMAN_MOBILE_FILM_SHOCKING", Npc_01.Position, fMission_01, false);
                                    iWait4Sec = Game.GameTime + 15000;
                                    iMissionSeq = 3;
                                }
                            }
                            else if (BeenSpotted(Npc_01, Game.Player.Character, true))
                                iMissionSeq = 45;
                            else if (iWait4Sec < Game.GameTime)
                                KeepMoving(Npc_01, vTarget_01, 2500);
                        }
                        else if (iMissionSeq == 3)
                        {
                            if (Npc_01.IsDead)
                            {
                                if (Npc_01.WasKilledByStealth)
                                    iMissionSeq = 4;
                                else
                                    iMissionSeq = 45;
                            }
                            else if (iWait4Sec < Game.GameTime)
                            {
                                Npc_01.Task.FleeFrom(Game.Player.Character);
                                iMissionSeq = 45;
                            }
                            if (Function.Call<bool>(Hash.GET_PED_STEALTH_MOVEMENT, Game.Player.Character.Handle))
                                ControlerUI(MyLang.Context[19], 1);
                            else
                                ControlerUI(MyLang.Context[20], 1);
                        }
                        else if (iMissionSeq == 4)
                        {
                            Npc_01.CanRagdoll = false;
                            Hitman_RemoveVisionCones();
                            SlowFastTravel(VectorList_03[0], fList_01[0]);
                            Npc_01.CanRagdoll = true;
                            Npc_01.Position = vTarget_05;
                            GameOver(false, "", false, iCashReward);
                        }
                        else if (iMissionSeq == 45)
                        {
                            Hitman_RemoveVisionCones();
                            GameOver(true, "", false, 0);
                        }
                    }       //CayoFollow
                    else if (iJobType == 103)
                    {
                        iJobType = 11;
                    }       //CayoRace--Directed to iJobType == 11
                    else if (iJobType == 104)
                    {
                        iJobType = 13;
                    }       //Assassination--Directed to iJobType == 13
                    else if (iJobType == 105)
                    {
                        if (iMissionSeq == 0)
                        {
                            iMissionSeq = 1;

                            if (bNotPause)
                            {
                                Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, true);
                                bNotPause = false;
                            }

                            if (MySettings.FastTraveltoStart)
                                SlowFastTravel(VehTrackin_01.Position + (VehTrackin_01.RightVector * 3.00f), 0.00f);
                            iMishText = 26;
                        }
                        else if (iMissionSeq == 1)
                        {
                            if (Npc_01.IsDead)
                                iMissionSeq = 45;
                            else if (!Game.Player.Character.IsInVehicle())
                            {
                                if (Game.Player.Character.Position.DistanceTo(VehTrackin_01.Position) < 60.00f)
                                {
                                    ControlerUI(MyLang.Context[27], 1);
                                    iMishText = 27;
                                    if (Game.Player.Character.Position.DistanceTo(VehTrackin_01.Position) < 10.00f && Game.IsControlPressed(2, GTA.Control.VehicleExit))
                                    {
                                        WarptoAnyVeh(VehTrackin_01, Game.Player.Character, 3);
                                        if (iMissionVar_02 == 1)
                                            VehicleSpawn("DINGHY", new Vector3(4957.126f, -5163.97f, 0.5030198f), 69.74284f, true, false, false, false, 9, 0, 0, "", 2, false);
                                        else if (iMissionVar_02 == 2)
                                            VehicleSpawn("DINGHY", new Vector3(5090.056f, -4638.275f, 0.1183856f), 248.4615f, true, false, false, false, 9, 0, 0, "", 2, false);
                                        else
                                            VehicleSpawn("VELUM", new Vector3(4479.589f, -4496.729f, 5.124825f), 110.8173f, true, true, false, false, 0, 0, 0, "", 2, false);
                                        iMissionVar_02 = 0;
                                    }
                                }
                                else
                                    iMishText = 26;
                            }
                            else
                            {
                                if (Game.Player.Character.IsInVehicle(VehTrackin_01))
                                {
                                    iMissionSeq = 2;
                                    VehTrackin_01.FreezePosition = false;
                                    iMissionVar_01 = 0;
                                    iMissionVar_02 = 0;
                                    AddTarget(VehTrackin_02.Position, false, false, 75.00f, false, 66, MyLang.Maptext[26]);
                                    FlyToRightHere(Npc_01, VehTrackin_01, vTarget_01, 45.00f, fphdirect);
                                    iMishText = -1;
                                }
                            }
                        }
                        else if (iMissionSeq == 2)
                        {
                            if (Npc_01.IsDead || !Game.Player.Character.IsInVehicle())
                                iMissionSeq = 45;
                            else if (VehTrackin_01.Position.DistanceTo(vTarget_01) < 5.00f)
                            {
                                iMissionSeq = 3;
                                FlyToRightHere(Npc_01, VehTrackin_01, VectorList_01[iMissionVar_01], 85.00f, fList_01[iMissionVar_01]);
                                Npc_02 = NPCSpawn("", VectorList_02[iMissionVar_02], 0.00f, false, 500, 17, 0, null, 4, false, 0, 1, "");
                                iMissionVar_02 += 1;
                                Npc_02.RelationshipGroup = GP_BNPCs;
                                PedRunToFoward(Npc_02, VectorList_02, iMissionVar_02);
                                vTarget_03 = VectorList_02[iMissionVar_02];
                                iMishText = iList_01[0];
                            }
                        }
                        else if (iMissionSeq == 3)
                        {
                            World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(Npc_02.Position.X, Npc_02.Position.Y, Npc_02.Position.Z + 2.00f), Vector3.Zero, new Vector3(0.00f, Npc_02.Heading, 0.00f), new Vector3(0.50f, 0.50f, 0.50f), color: Color.Red);

                            if (Npc_01.IsDead || !Game.Player.Character.IsInVehicle())
                                iMissionSeq = 45;
                            else if (Npc_02.IsDead)
                                iMissionSeq = 10;
                            else if (Npc_02.Position.DistanceTo(vTarget_03) < 3.00f)
                            {
                                iMissionVar_02 += 1;
                                if (PedRunToFoward(Npc_02, VectorList_02, iMissionVar_02))
                                    vTarget_03 = VectorList_02[iMissionVar_02];
                                else
                                {
                                    iMissionSeq = 4;
                                    Npc_02.Task.ClearAll();
                                    VehTrackin_02.FreezePosition = false;
                                    VehTrackin_02.IsInvincible = false;
                                    WarptoAnyVeh(VehTrackin_02, Npc_02, 1);
                                    Script.Wait(500);
                                }
                            }
                            else if (iWait4Sec < Game.GameTime)
                                KeepMoving(Npc_02, vTarget_03, 2500);

                            if (iMissionVar_01 + 1 < VectorList_01.Count)
                            {
                                if (VehTrackin_01.Position.DistanceTo(VectorList_01[iMissionVar_01]) < 10.00f)
                                {
                                    iMissionVar_01 += 1;
                                    FlyToRightHere(Npc_01, VehTrackin_01, VectorList_01[iMissionVar_01], 65.00f, fList_01[iMissionVar_01]);
                                }
                            }
                            else
                            {
                                if (iTime_01[0] < Game.GameTime)
                                {
                                    iTime_01[0] = Game.GameTime + 1000;

                                    Vector3 VHereIsh = Npc_02.Position - (Npc_02.ForwardVector * 25.00f) + (Npc_02.RightVector * 25.00f);
                                    VHereIsh.Z += 35.00f;
                                    FlyToRightHere(Npc_01, VehTrackin_01, VHereIsh, 45.00f, Npc_02.Heading);
                                }
                            }
                        }
                        else if (iMissionSeq == 4)
                        {
                            if (Npc_01.IsDead || !Game.Player.Character.IsInVehicle())
                                iMissionSeq = 45;
                            else if (Npc_02.IsDead)
                                iMissionSeq = 10;
                            else if (Npc_02.IsInVehicle(VehTrackin_02))
                            {
                                if (bPedCanFly)
                                {
                                    iMissionSeq = 6;
                                    ImOnAPlane(Npc_02, VehTrackin_02, vTarget_02);
                                    iWait4Sec = Game.GameTime + 4000;
                                }
                                else
                                {
                                    iMissionVar_02 = 0;
                                    iMissionVar_03 = 0;
                                    iMissionSeq = 5;
                                    iWait4Sec = Game.GameTime + 1000;
                                    Vector3 VHereIsh = VehTrackin_02.Position - (VehTrackin_02.ForwardVector * 45) + (VehTrackin_02.RightVector * 45);
                                    VHereIsh.Z += 35.00f;
                                    FlyToRightHere(Npc_01, VehTrackin_01, VHereIsh, 10.00f, VehTrackin_02.Heading - 90.00f);
                                    Function.Call(Hash.SET_BOAT_ANCHOR, VehTrackin_02.Handle, false);
                                    ShowBoating(Npc_02, VectorList_03[iMissionVar_02], VehTrackin_02, 35.00f, 786469);
                                }
                                VehTrackin_02.IsInvincible = false;
                            }
                        }
                        else if (iMissionSeq == 5)
                        {
                            World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(VehTrackin_02.Position.X, VehTrackin_02.Position.Y, VehTrackin_02.Position.Z + 2.00f), Vector3.Zero, new Vector3(0.00f, VehTrackin_02.Heading, 0.00f), new Vector3(0.50f, 0.50f, 0.50f), color: Color.Red);

                            if (Npc_01.IsDead || !Game.Player.Character.IsInVehicle())
                                iMissionSeq = 45;
                            else if (Npc_02.IsDead)
                                iMissionSeq = 10;
                            else if (VehTrackin_02.Position.DistanceTo(VectorList_03[iMissionVar_02]) < 3.00f)
                            {
                                iMissionVar_02 += 1;
                                if (iMissionVar_02 + 1 < VectorList_03.Count)
                                    ShowBoating(Npc_02, VectorList_03[iMissionVar_02], VehTrackin_02, 40.00f, 786469);
                                else
                                    iMissionSeq = 45;
                            }
                            else if (iWait4Sec < Game.GameTime)
                            {
                                iWait4Sec = Game.GameTime + 1000;

                                Vector3 VHereIsh = VehTrackin_02.Position - (VehTrackin_02.ForwardVector * 25.00f) + (VehTrackin_02.RightVector * 25.00f);
                                VHereIsh.Z += 25.00f;
                                FlyToRightHere(Npc_01, VehTrackin_01, VHereIsh, 10.00f, VehTrackin_02.Heading);

                                if (iMissionVar_03 > 10)
                                {
                                    iMissionVar_03 = 0;
                                    VehTrackin_02.Position = VectorList_03[iMissionVar_02];
                                    VehTrackin_02.Heading = fList_02[iMissionVar_02];
                                }
                                else
                                {
                                    if (VehTrackin_02.Position.DistanceTo(vGetaway) < 2.00f)
                                    {
                                        iMissionVar_03 += 1;
                                        VehTrackin_02.Position = VehTrackin_02.Position + (VehTrackin_02.ForwardVector * 2.50f);
                                        VehTrackin_02.Heading = fList_02[iMissionVar_02];
                                        ShowBoating(Npc_02, VectorList_03[iMissionVar_02], VehTrackin_02, 40.00f, 786469);
                                    }
                                }

                                vGetaway = VehTrackin_02.Position;
                            }
                        }
                        else if (iMissionSeq == 6)
                        {
                            World.DrawMarker(MarkerType.ChevronUpx1, new Vector3(VehTrackin_02.Position.X, VehTrackin_02.Position.Y, VehTrackin_02.Position.Z + 2.00f), Vector3.Zero, new Vector3(0.00f, VehTrackin_02.Heading, 0.00f), new Vector3(0.50f, 0.50f, 0.50f), color: Color.Red);

                            if (Npc_01.IsDead || !Game.Player.Character.IsInVehicle())
                                iMissionSeq = 45;
                            else if (Npc_02.IsDead)
                                iMissionSeq = 10;
                            else if (VehTrackin_02.Position.DistanceTo(VectorList_02[0]) > 700.00f)
                                iMissionSeq = 45;
                            else if (iWait4Sec < Game.GameTime)
                            {
                                iWait4Sec = Game.GameTime + 10000;
                                Vector3 VHereIsh = VehTrackin_02.Position - (VehTrackin_02.ForwardVector * 45) + (VehTrackin_02.RightVector * 45);
                                VHereIsh.Z += 10.00f;
                                FlyToRightHere(Npc_01, VehTrackin_01, VHereIsh, 40.00f, VehTrackin_02.Heading - 90.00f);
                            }
                        }
                        else if (iMissionSeq == 10)
                        {
                            VehTrackin_01.IsInvincible = false;
                            SlowFastTravel(new Vector3(4905.202f, -4939.065f, 3.352461f), 201.3084f);
                            NSCoinInvestments(false, 4, 9, "Vangelico");
                            iCashReward = RandInt(50000, 100000);
                            GameOver(false, "", false, iCashReward);
                        }
                        else if (iMissionSeq == 45)
                        {
                            SlowFastTravel(new Vector3(4594.872f, -4880.987f, 18.10277f), 6.152281f);
                            VehTrackin_01.IsInvincible = false;
                            NSCoinInvestments(true, 1, 3, "Vangelico");
                            GameOver(true, "", false, 0);
                        }
                    }       //ThifeAntiHeist
                    else if (iJobType == 106)
                    {
                        iJobType = 29;
                    }       //pero ppparra to iJobType == 29

                    if (iMishText == -1)
                    {

                    }
                    else
                    {
                        if (vLanLoc != Vector3.Zero)
                        {
                            if (MySettings.Subtitles)
                                StickySubTitle(MyLang.Mistext[iMishText] + "~y~" + World.GetStreetName(vLanLoc) + "~w~.");
                            else if (iMishAltT != iMishText)
                            {
                                iMishAltT = iMishText;
                                QuickSub(MyLang.Mistext[iMishText] + "~y~" + World.GetStreetName(vLanLoc) + "~w~.");
                            }
                        }
                        else
                        {
                            if (MySettings.Subtitles)
                                StickySubTitle(MyLang.Mistext[iMishText]);
                            else if (iMishAltT != iMishText)
                            {
                                iMishAltT = iMishText;
                                QuickSub(MyLang.Mistext[iMishText]);
                            }
                        }
                    }
                }
            }
            else
            {
                if (bBankTransfer)
                {
                    if (iCoinBats == 1)
                        ControlerUI("NSCoins = " + ShowComs(iNSPMBank, true, true) + MyLang.Context[30], 1);
                    else if (iCoinBats == 2)
                        ControlerUI("Low Risk" + " = " + ShowComs(iNSPMCLowRisk, true, true) + MyLang.Context[30], 1);
                    else if (iCoinBats == 3)
                        ControlerUI("High Risk" + " = " + ShowComs(iNSPMCHighRisk, true, true) + MyLang.Context[30], 1);
                    else if (iCoinBats == 4)
                    {
                        if (Function.Call<bool>(Hash._HAS_NAMED_SCALEFORM_MOVIE_LOADED, "ATM"))
                            ControlerUI("NSCoins = " + ShowComs(iNSPMBank, true, true) + MyLang.Context[30], 1);
                        else
                        {
                            WriteNSMDat(9, iNSPMBank);
                            bBankTransfer = false;
                            iCoinBats = 0;
                        }
                    }
                    else
                        ControlerUI("Yacht Price = " + ShowComs(MySettings.YachtPrice, true, true) + MyLang.Context[30], 1);

                    if (Game.IsControlPressed(2, GTA.Control.Detonate))
                    {
                        if (iCoinBats == 4)
                            NSCoinCount(false, 1);
                        else
                            NSCoinCount(false, iCoinBats);
                    }
                    else if (Game.IsControlPressed(2, GTA.Control.Context))
                    {
                        if (iCoinBats == 4)
                            NSCoinCount(true, 1);
                        else
                            NSCoinCount(true, iCoinBats);
                    }
                    else if (Game.IsControlPressed(2, GTA.Control.Jump))
                    {
                        if (iCoinBats != 4)
                        {
                            bBankTransfer = false;
                            iCoinBats = 0;
                        }
                    }
                    else
                    {
                        iFaster_01 = Game.GameTime + 4000;
                        iFaster_02 = Game.GameTime + 15000;
                        iFaster_03 = Game.GameTime + 25000;
                    }
                }
                else if (iATMSlow < Game.GameTime)
                {
                    if (Function.Call<bool>(Hash._HAS_NAMED_SCALEFORM_MOVIE_LOADED, "ATM"))
                    {
                        if (iLookForPB != 0)
                        {
                            if (iLookForPB == 2)
                            {
                                if (bRingRing)
                                {
                                    bRingRing = false;
                                    StopThatSound();
                                }
                                if (!bOnCayoLand)
                                    PhoneHome.IsPersistent = false;
                                PhoneHome = null;
                                if (PhoneBlip != null)
                                {
                                    BlipCleaning(PhoneBlip);
                                    PhoneBlip = null;
                                }
                            }
                            iLookForPB = 0;
                        }
                        else
                        {
                            ReadNSMPDat();
                            iCoinBats = 4;
                            bBankTransfer = true;
                        }
                    }
                    else
                        iATMSlow = Game.GameTime + 2500;
                }
                else if (bPlayingOldMissions)
                {
                    if (iLookForPB != 0)
                    {
                        if (iLookForPB == 2)
                        {
                            if (bRingRing)
                            {
                                bRingRing = false;
                                StopThatSound();
                            }
                            if (!bOnCayoLand)
                                PhoneHome.IsPersistent = false;
                            PhoneHome = null;
                            if (PhoneBlip != null)
                            {
                                BlipCleaning(PhoneBlip);
                                PhoneBlip = null;
                            }
                        }
                        iLookForPB = 0;
                    }
                    else if (iRollXMLCHeck < Game.GameTime)
                    {
                        iRollXMLCHeck = Game.GameTime + 10000;
                        CompatXML();
                    }
                }
                else
                {
                    if (iRollXMLCHeck < Game.GameTime)
                    {
                        iRollXMLCHeck = Game.GameTime + 10000;
                        CompatXML();
                    }
                    else if (bLookingForPB)
                    {
                        if (bDlCVehStartTest)
                        {
                            if (!Game.IsLoading)
                            {
                                if (DLCTestVeh == null)
                                {
                                    Script.Wait(1000);
                                    DLCTestVeh = VehicleSpawn("OPENWHEEL1", Game.Player.Character.Position + (Game.Player.Character.UpVector * 25), 0.00f, false, false, false, false, 0, 0, 0, "", 0, false);
                                    if (DLCTestVeh.Exists())
                                    {
                                        DLCTestVeh.HasCollision = false;
                                        DLCTestVeh.IsVisible = false;
                                    }
                                    VehicleList_01.Clear();
                                    iPhoneDelay = Game.GameTime + 20000;
                                }
                                else if (DLCTestVeh.Exists())
                                {
                                    DLCTestVeh.Position = Game.Player.Character.Position + (Game.Player.Character.UpVector * 25);

                                    if (iPhoneDelay < Game.GameTime)
                                    {
                                        bDlCVehStartTest = false;
                                        DLCTestVeh.IsPersistent = false;
                                        DLCTestVeh.Delete();
                                        bTrainM = true;
                                    }
                                }
                                else
                                    bDlCVehStartTest = false;
                            }
                        }
                        else if (iLookForPB == 0)
                        {
                            iPhoneDelay = Game.GameTime + MySettings.SPDelayTime;
                            iLookForPB = 1;
                        }
                        else if (iLookForPB == 1)
                        {
                            if (iPhoneDelay < Game.GameTime)
                            {
                                if (bOnCayoLand)
                                {
                                    if (Game.Player.Character.Position.Y > -3370.00f)
                                        TheCayoConnection(false);
                                }
                                else
                                {
                                    if (Game.Player.Character.Position.Y < -3370.00f)
                                        TheCayoConnection(true);
                                }

                                PhoneHome = BoxingClever();

                                if (PhoneHome != null)
                                {
                                    AnswerYourPhone(PhoneHome);
                                    iLookForPB = 2;
                                }
                                else
                                    iLookForPB = 1;
                            }
                        }
                        else if (iLookForPB == 2)
                        {
                            if (World.GetDistance(Game.Player.Character.Position, vPhoneCorona) < 200.00f && !PhoneHome.HasBeenDamagedBy(Game.Player.Character))
                            {
                                if (World.GetDistance(Game.Player.Character.Position, vPhoneCorona) < 40.00f)
                                {
                                    if (!bRingRing && MySettings.PhoneAudio)
                                    {
                                        iWait4Sec = Game.GameTime + 1000;
                                        bRingRing = true;
                                        PlaySoundFrom("SCRIPT/ASSASSINATION_MULTI", "ASS_PAYPHONE_RING_master", "", PhoneHome.Position, true);
                                    }
                                    if (MySettings.PhoneCone)
                                        World.DrawMarker(MarkerType.VerticalCylinder, vPhoneCorona, Vector3.Zero, Vector3.Zero, new Vector3(1.00f, 1.00f, 1.00f), color: Color.Green);

                                    if (World.GetDistance(Game.Player.Character.Position, vPhoneCorona) < 2.00f && Game.Player.Character.IsOnFoot)
                                    {
                                        if (iWait4Sec < Game.GameTime)
                                        {
                                            fphdirect = PhoneHome.Heading + 90.00f;
                                            if (MySettings.PhoneAnim)
                                                PickUpThePhone();

                                            if (bRingRing)
                                            {
                                                bRingRing = false;
                                                StopThatSound();
                                                Chatter.Play();
                                            }

                                            if (PhoneBlip != null)
                                            {
                                                BlipCleaning(PhoneBlip);
                                                PhoneBlip = null;
                                            }

                                            if (!bOnCayoLand)
                                                PhoneHome.IsPersistent = false;

                                            PhoneHome = null;
                                            iLookForPB = 0;
                                            bLookingForPB = false;
                                            AreULocal();
                                        }
                                    }
                                }
                                else
                                {
                                    if (bRingRing)
                                    {
                                        bRingRing = false;
                                        StopThatSound();
                                    }
                                }
                            }
                            else
                            {
                                if (bRingRing)
                                {
                                    bRingRing = false;
                                    StopThatSound();
                                }
                                if (!bOnCayoLand)
                                    PhoneHome.IsPersistent = false;
                                PhoneHome = null;
                                if (PhoneBlip != null)
                                {
                                    BlipCleaning(PhoneBlip);
                                    PhoneBlip = null;
                                }
                                iLookForPB = 0;
                            }
                        }
                    }
                }

                if(bMayooAppFix)
                {
                    if (Game.GameTime < iAppScaner)
                        MissingApps();
                }
            }
        }
        //private void OnKeyDown(object sender, KeyEventArgs e)
        //{
            //if (e.KeyCode == Keys.K)
        //}
    }
}